void sub_1B5BE5458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char *a24)
{
  void *v24;

  if (v24)
    operator delete(v24);
  if (__p)
    operator delete(__p);
  a24 = &a15;
  std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a18);
  _Unwind_Resume(a1);
}

void HALS_MetaDeviceDescription::UpdateSubTapList(HALS_MetaDeviceDescription *this)
{
  const __CFArray *Size;
  unint64_t v3;
  char *v4;
  CFIndex v5;
  unsigned int v6;
  HALS_Object *v7;
  HALS_ObjectMap *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  CFDictionaryRef v16;
  __CFString *v17;
  CFDictionaryRef v18;
  HALS_Object *v19;
  CFTypeRef v20;
  uint64_t v21;
  const void *v22;
  HALS_Object *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 v39;
  void *v40;
  __int128 v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  char v44[8];
  __CFString *v45;
  uint64_t v46;
  CFDictionaryRef theDict;
  _BYTE v48[16];
  char v49[8];
  const __CFArray *v50;
  CFTypeRef v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  char v56[8];
  CFTypeRef cf;
  HALS_System *v58;
  std::__shared_weak_count *v59;

  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v49, *((CFDictionaryRef *)this + 2), CFSTR("taps"));
  Size = OS::CF::ArrayBase<__CFArray const*>::GetSize(v50);
  if (Size)
  {
    v3 = (unint64_t)Size;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v41 = 0u;
    while (1)
    {
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::UntypedObject>((const __CFArray *)v48, (uint64_t)v49, v5);
      OS::CF::UntypedObject::As<OS::CF::Dictionary>(&v46, (uint64_t)v48);
      if (theDict)
        break;
LABEL_60:
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v46);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v48);
      v5 = ++v6;
      if (v3 <= v6)
        goto LABEL_65;
    }
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v44, theDict, CFSTR("uid"));
    if (!v45)
    {
LABEL_59:
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v44);
      goto LABEL_60;
    }
    v42 = 0;
    v43 = 0;
    HALS_System::GetInstance(&v58, 0, &v42);
    v8 = (HALS_ObjectMap *)HALS_System::CopyTapByUUID(v58, v45);
    v9 = v59;
    if (v59)
    {
      p_shared_owners = (unint64_t *)&v59->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v43;
    if (!v43)
      goto LABEL_14;
    v13 = (unint64_t *)&v43->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!v8)
        goto LABEL_58;
    }
    else
    {
LABEL_14:
      if (!v8)
        goto LABEL_58;
    }
    if (!*((_BYTE *)v8 + 83) || HALS_MetaDeviceDescription::IsPrivate((const __CFDictionary **)this))
    {
      v15 = operator new();
      v16 = *(CFDictionaryRef *)this;
      v17 = v45;
      v18 = theDict;
      HALS_Object::HALS_Object((HALS_Object *)v15, 1937006960, 1937006960, *(_QWORD *)this, v19);
      *(_QWORD *)v15 = off_1E6995B60;
      *(_DWORD *)(v15 + 48) = *((_DWORD *)v16 + 4);
      if (v17)
        CFRetain(v17);
      *(_QWORD *)(v15 + 56) = v17;
      *(_BYTE *)(v15 + 64) = 1;
      *(_DWORD *)(v15 + 72) = 0;
      *(_QWORD *)(v15 + 80) = 0;
      *(_WORD *)(v15 + 88) = 1;
      *(_QWORD *)(v15 + 92) = 0x4000000000;
      if (v18)
        CFRetain(v18);
      v58 = (HALS_System *)&off_1E69A0DE0;
      v59 = (std::__shared_weak_count *)v18;
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v56, v18, CFSTR("uid"));
      v20 = cf;
      if (!cf)
        goto LABEL_38;
      CFRetain(cf);
      CACFString::operator=(v15 + 56, v20);
      v52 = 0;
      v53 = 0;
      HALS_System::GetInstance(&v54, 0, &v52);
      v21 = v54;
      v22 = *(const void **)(v15 + 56);
      if (v22)
        CFRetain(*(CFTypeRef *)(v15 + 56));
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v51, v22);
      v24 = HALS_System::CopyTapByUID(v21, v51, 0);
      if (v51)
        CFRelease(v51);
      v25 = v55;
      if (v55)
      {
        v26 = (unint64_t *)&v55->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = v53;
      if (!v53)
        goto LABEL_35;
      v29 = (unint64_t *)&v53->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
        if (!v24)
          goto LABEL_37;
      }
      else
      {
LABEL_35:
        if (!v24)
        {
LABEL_37:
          HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v24, v23);
LABEL_38:
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v54, (CFDictionaryRef)v59, CFSTR("latency-out"));
          *(_DWORD *)(v15 + 80) = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v55, 0);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v54);
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v54, (CFDictionaryRef)v59, CFSTR("latency-in"));
          *(_DWORD *)(v15 + 84) = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v55, 0);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v54);
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v54, (CFDictionaryRef)v59, CFSTR("don't pad"));
          *(_BYTE *)(v15 + 88) = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v55, 0) == 0;
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v54);
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v54, (CFDictionaryRef)v59, CFSTR("drift"));
          *(_BYTE *)(v15 + 89) = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v55, 0) != 0;
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v54);
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v54, (CFDictionaryRef)v59, CFSTR("drift algorithm"));
          *(_DWORD *)(v15 + 92) = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v55, 0);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v54);
          *(_DWORD *)(v15 + 96) = 64;
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v56);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v58);
          v31 = (char *)*((_QWORD *)&v41 + 1);
          if (*((_QWORD *)&v41 + 1) >= (unint64_t)v4)
          {
            v33 = (uint64_t)(*((_QWORD *)&v41 + 1) - v41) >> 3;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)&v4[-v41] >> 2 > v34)
              v34 = (uint64_t)&v4[-v41] >> 2;
            if ((unint64_t)&v4[-v41] >= 0x7FFFFFFFFFFFFFF8)
              v35 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v35 = v34;
            if (v35)
            {
              if (v35 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v36 = (char *)operator new(8 * v35);
            }
            else
            {
              v36 = 0;
            }
            v37 = (uint64_t *)&v36[8 * v33];
            *v37 = v15;
            v32 = (uint64_t)(v37 + 1);
            if (*((_QWORD *)&v41 + 1) != (_QWORD)v41)
            {
              do
              {
                v38 = *((_QWORD *)v31 - 1);
                v31 -= 8;
                *--v37 = v38;
              }
              while (v31 != (char *)v41);
              v31 = (char *)v41;
            }
            v4 = &v36[8 * v35];
            *(_QWORD *)&v41 = v37;
            if (v31)
              operator delete(v31);
          }
          else
          {
            **((_QWORD **)&v41 + 1) = v15;
            v32 = *((_QWORD *)&v41 + 1) + 8;
          }
          *(_QWORD *)&v39 = v41;
          *((_QWORD *)&v39 + 1) = v32;
          v41 = v39;
          (**(void (***)(uint64_t))v15)(v15);
          goto LABEL_58;
        }
      }
      *(_DWORD *)(v15 + 72) = *(_DWORD *)(v24 + 16);
      *(_BYTE *)(v15 + 76) = *(_BYTE *)(v24 + 80);
      goto LABEL_37;
    }
LABEL_58:
    HALS_ObjectMap::ReleaseObject(v8, v7);
    goto LABEL_59;
  }
  v4 = 0;
  v41 = 0u;
LABEL_65:
  HALS_MetaDeviceDescription::TeardownSubTapList(this);
  v40 = (void *)*((_QWORD *)this + 9);
  if (v40)
  {
    *((_QWORD *)this + 10) = v40;
    operator delete(v40);
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 11) = 0;
  }
  *(_OWORD *)((char *)this + 72) = v41;
  *((_QWORD *)this + 11) = v4;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v49);
}

void sub_1B5BE5AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, CFTypeRef cf,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if ((_QWORD)a9)
    operator delete((void *)a9);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a18);
  _Unwind_Resume(a1);
}

void HALS_MetaDeviceDescription::TeardownSubTapList(HALS_MetaDeviceDescription *this)
{
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  HALS_Object *v4;

  v2 = (HALS_ObjectMap **)*((_QWORD *)this + 9);
  v3 = (HALS_ObjectMap **)*((_QWORD *)this + 10);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
      {
        (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)*v2 + 8))(*v2);
        HALS_ObjectMap::ObjectIsDead(*v2, v4);
      }
      ++v2;
    }
    while (v2 != v3);
    v2 = (HALS_ObjectMap **)*((_QWORD *)this + 9);
  }
  *((_QWORD *)this + 10) = v2;
}

const __CFArray *OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::UntypedObject>(const __CFArray *result, uint64_t a2, CFIndex a3)
{
  const __CFArray *v4;
  const void *ValueAtIndex;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)result = &off_1E69A0E58;
  *((_QWORD *)result + 1) = 0;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v4 = result;
    result = *(const __CFArray **)(a2 + 8);
    if (result)
    {
      result = (const __CFArray *)CFArrayGetCount(result);
      if ((uint64_t)result > a3)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), a3);
        v7 = (uint64_t)ValueAtIndex;
        if (ValueAtIndex)
        {
          CFRetain(ValueAtIndex);
          v8 = (uint64_t)v4;
          v9 = v7;
        }
        else
        {
          v8 = (uint64_t)v4;
          v9 = 0;
        }
        return (const __CFArray *)OS::CF::UntypedObject::operator=(v8, v9);
      }
    }
  }
  return result;
}

const __CFBoolean *HALS_MetaDeviceDescription::IsPrivate(const __CFDictionary **this)
{
  const __CFBoolean *v2;
  OS::CF::Boolean *v4[2];

  if (!OS::CF::DictionaryBase<__CFDictionary const*>::HasKey(this[2], CFSTR("private")))
    return 0;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(v4, this[2], CFSTR("private"));
  v2 = OS::CF::Boolean::AsBool(v4[1]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v4);
  return v2;
}

const __CFDictionary *OS::CF::DictionaryBase<__CFDictionary const*>::HasKey(const __CFDictionary *result, const void *a2)
{
  if (result)
    return (const __CFDictionary *)(CFDictionaryContainsKey(result, a2) != 0);
  return result;
}

const __CFBoolean *HALS_MetaDeviceDescription::IsStackRequested(const __CFDictionary **this)
{
  const __CFBoolean *v2;
  OS::CF::Boolean *v4[2];

  if (!OS::CF::DictionaryBase<__CFDictionary const*>::HasKey(this[2], CFSTR("stacked")))
    return 0;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(v4, this[2], CFSTR("stacked"));
  v2 = OS::CF::Boolean::AsBool(v4[1]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v4);
  return v2;
}

void HALS_MetaDeviceDescription::AddOrUpdateSubDevice(uint64_t a1, HALS_ObjectMap *a2, uint64_t a3, void **a4, void **a5)
{
  HALS_Object *v10;
  HALS_ObjectMap *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  HALS_MetaSubDevice **i;
  HALS_MetaSubDevice *v22;
  char *v23;
  int64_t v24;
  uint64_t v25;
  HALB_Mutex *v26;
  HALS_MetaSubDevice **v27;
  HALS_MetaSubDevice **v28;
  unint64_t v29;
  HALS_MetaSubDevice **v30;
  _QWORD *v31;
  unint64_t v32;
  HALS_MetaSubDevice **v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  HALS_MetaSubDevice **v44;
  unint64_t v45;
  char *v46;
  char *v47;
  HALS_MetaSubDevice *v48;
  HALS_MetaSubDevice **v49;
  unint64_t v50;
  char *v51;
  char *v52;
  HALS_MetaSubDevice *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  char v56[8];
  __CFString *v57;
  HALS_System *v58;
  uint64_t v59;
  void (*v60)(_QWORD *);
  void *v61;
  HALS_MetaSubDevice *v62;
  HALS_ObjectMap *v63;
  uint64_t v64;

  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v56, *(CFDictionaryRef *)(a3 + 8), CFSTR("uid"));
  if (v57)
  {
    v54 = 0;
    v55 = 0;
    HALS_System::GetInstance(&v58, 0, &v54);
    v11 = HALS_System::CopyDeviceByUID(v58, v57, 0);
    v12 = (std::__shared_weak_count *)v59;
    if (v59)
    {
      v13 = (unint64_t *)(v59 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = v55;
    if (!v55)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if (!v11)
        goto LABEL_69;
    }
    else
    {
LABEL_11:
      if (!v11)
        goto LABEL_69;
    }
    if (v11 != a2 && HALS_IODevice::GetTransportType(v11) != 1735554416)
    {
      v18 = *((_DWORD *)v11 + 4);
      v19 = *(_QWORD *)(a1 + 24);
      v20 = *(_QWORD *)(a1 + 32);
      while (v19 != v20)
      {
        for (i = *(HALS_MetaSubDevice ***)v19; i != *(HALS_MetaSubDevice ***)(v19 + 8); ++i)
        {
          v22 = *i;
          if (HALS_MetaSubDevice::GetRealDeviceObjectID(*i) == v18)
          {
            v23 = *(char **)(v19 + 8);
            v24 = v23 - (char *)(i + 1);
            if (v23 != (char *)(i + 1))
              memmove(i, i + 1, v23 - (char *)(i + 1));
            *(_QWORD *)(v19 + 8) = (char *)i + v24;
            if (v22)
            {
LABEL_26:
              v25 = *(_QWORD *)(a3 + 8);
              v58 = (HALS_System *)MEMORY[0x1E0C809B0];
              v59 = 0x40000000;
              v60 = ___ZN18HALS_MetaSubDevice16SetSubDeviceInfoEP11HALS_DevicePK14__CFDictionary_block_invoke;
              v61 = &__block_descriptor_tmp_17_7816;
              v62 = v22;
              v63 = v11;
              v64 = v25;
              v26 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)v22 + 56))(v22);
              HALB_CommandGate::ExecuteCommand(v26, (uint64_t)&v58);
              if (HALS_MetaDeviceDescription::CanBeActive((const __CFDictionary **)a1, v11))
                a5 = a4;
LABEL_37:
              v33 = (HALS_MetaSubDevice **)a5[1];
              v32 = (unint64_t)a5[2];
              if ((unint64_t)v33 < v32)
              {
                *v33 = v22;
                v34 = v33 + 1;
                goto LABEL_61;
              }
              v35 = ((char *)v33 - (_BYTE *)*a5) >> 3;
              if (!((unint64_t)(v35 + 1) >> 61))
              {
                v36 = v32 - (_QWORD)*a5;
                v37 = v36 >> 2;
                if (v36 >> 2 <= (unint64_t)(v35 + 1))
                  v37 = v35 + 1;
                if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
                  v38 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v38 = v37;
                if (v38)
                  v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v38);
                else
                  v10 = 0;
                v44 = (HALS_MetaSubDevice **)(v38 + 8 * v35);
                v45 = v38 + 8 * (_QWORD)v10;
                *v44 = v22;
                v34 = v44 + 1;
                v47 = (char *)*a5;
                v46 = (char *)a5[1];
                if (v46 != *a5)
                {
                  do
                  {
                    v48 = (HALS_MetaSubDevice *)*((_QWORD *)v46 - 1);
                    v46 -= 8;
                    *--v44 = v48;
                  }
                  while (v46 != v47);
                  v46 = (char *)*a5;
                }
                *a5 = v44;
                a5[1] = v34;
                a5[2] = (void *)v45;
                if (v46)
                  operator delete(v46);
LABEL_61:
                a5[1] = v34;
                goto LABEL_69;
              }
LABEL_71:
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            goto LABEL_34;
          }
        }
        v19 += 24;
      }
      v27 = *(HALS_MetaSubDevice ***)(a1 + 48);
      v28 = *(HALS_MetaSubDevice ***)(a1 + 56);
      while (1)
      {
        if (v27 == v28)
          goto LABEL_34;
        if (HALS_MetaSubDevice::GetRealDeviceObjectID(*v27) == v18)
          break;
        ++v27;
      }
      v22 = *v27;
      if (v22)
        goto LABEL_26;
LABEL_34:
      v22 = (HALS_MetaSubDevice *)operator new();
      HALS_MetaSubDevice::HALS_MetaSubDevice<HALS_Device>(v22, *(HALS_MetaDevice **)a1, (uint64_t)v11, v57, *(__CFDictionary **)(a3 + 8));
      if (!HALS_MetaDeviceDescription::CanBeActive((const __CFDictionary **)a1, v11))
        goto LABEL_37;
      v30 = (HALS_MetaSubDevice **)a4[1];
      v29 = (unint64_t)a4[2];
      if ((unint64_t)v30 >= v29)
      {
        v39 = ((char *)v30 - (_BYTE *)*a4) >> 3;
        if ((unint64_t)(v39 + 1) >> 61)
          goto LABEL_71;
        v40 = v29 - (_QWORD)*a4;
        v41 = v40 >> 2;
        if (v40 >> 2 <= (unint64_t)(v39 + 1))
          v41 = v39 + 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
          v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v42);
        else
          v43 = 0;
        v49 = (HALS_MetaSubDevice **)(v42 + 8 * v39);
        v50 = v42 + 8 * v43;
        *v49 = v22;
        v31 = v49 + 1;
        v52 = (char *)*a4;
        v51 = (char *)a4[1];
        if (v51 != *a4)
        {
          do
          {
            v53 = (HALS_MetaSubDevice *)*((_QWORD *)v51 - 1);
            v51 -= 8;
            *--v49 = v53;
          }
          while (v51 != v52);
          v51 = (char *)*a4;
        }
        *a4 = v49;
        a4[1] = v31;
        a4[2] = (void *)v50;
        if (v51)
          operator delete(v51);
      }
      else
      {
        *v30 = v22;
        v31 = v30 + 1;
      }
      a4[1] = v31;
      (**(void (***)(HALS_MetaSubDevice *))v22)(v22);
    }
LABEL_69:
    HALS_ObjectMap::ReleaseObject(v11, v10);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v56);
}

void sub_1B5BE6214(void *a1)
{
  HALS_ObjectMap *v1;
  uint64_t v2;
  HALS_Object *v4;

  MEMORY[0x1B5E50688](v2, 0x10E1C4011717AD3);
  HALS_ObjectMap::ReleaseObject(v1, v4);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5BE61E4);
}

void sub_1B5BE6288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<HALS_MetaSubDevice *>::__init_with_size[abi:ne180100]<HALS_MetaSubDevice **,HALS_MetaSubDevice **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1B5BE6314(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<HALS_MetaSubDevice *>>::__push_back_slow_path<std::vector<HALS_MetaSubDevice *> const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  int64x2_t v14;
  char *v15;
  char *v17;
  int64x2_t v18;
  char *v19;
  _QWORD *v20;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v17 = v7;
  v18.i64[0] = (uint64_t)v8;
  v18.i64[1] = (uint64_t)v8;
  v19 = &v7[24 * v6];
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = 0;
  std::vector<HALS_MetaSubDevice *>::__init_with_size[abi:ne180100]<HALS_MetaSubDevice **,HALS_MetaSubDevice **>(v8, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v9 = v18.i64[0];
  v10 = v18.i64[1] + 24;
  v18.i64[1] += 24;
  v12 = (_QWORD *)*a1;
  v11 = (_QWORD *)a1[1];
  if (v11 == (_QWORD *)*a1)
  {
    v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      v9 -= 24;
      *(_QWORD *)(v9 + 16) = 0;
      v13 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)v9 = v13;
      *(_QWORD *)(v9 + 16) = v11[2];
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    while (v11 != v12);
    v14 = *(int64x2_t *)a1;
    v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  v18 = v14;
  v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  v19 = v15;
  v17 = (char *)v14.i64[0];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v17);
  return v10;
}

void sub_1B5BE6490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CFTypeID OS::CF::UntypedObject::As<OS::CF::Array>(_QWORD *a1, uint64_t a2)
{
  const void *TypeID;
  CFTypeID result;
  const void *v6;

  TypeID = OS::CF::UntypedObject::GetTypeID(*(const void **)(a2 + 8));
  result = CFArrayGetTypeID();
  if (TypeID == (const void *)result)
  {
    v6 = *(const void **)(a2 + 8);
    if (v6)
      result = (CFTypeID)CFRetain(v6);
    a1[1] = v6;
  }
  else
  {
    a1[1] = 0;
  }
  *a1 = &off_1E69A0EA8;
  return result;
}

void HALS_MetaDeviceDescription::TeardownSubDeviceList(HALS_MetaDeviceDescription *this)
{
  uint64_t *v2;
  HALS_ObjectMap ***v3;
  HALS_ObjectMap ***v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap **v6;
  HALS_Object *v7;
  uint64_t v8;
  HALS_Object *v9;

  v3 = (HALS_ObjectMap ***)*((_QWORD *)this + 3);
  v4 = (HALS_ObjectMap ***)*((_QWORD *)this + 4);
  v2 = (uint64_t *)((char *)this + 24);
  while (v3 != v4)
  {
    v5 = *v3;
    v6 = v3[1];
    while (v5 != v6)
    {
      if (*v5)
      {
        (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)*v5 + 8))(*v5);
        HALS_ObjectMap::ObjectIsDead(*v5, v7);
      }
      ++v5;
    }
    v3 += 3;
  }
  std::vector<std::vector<std::byte>>::__clear[abi:ne180100](v2);
  v8 = *((_QWORD *)this + 13);
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    HALS_ObjectMap::ObjectIsDead(*((HALS_ObjectMap **)this + 13), v9);
  }
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
}

uint64_t HALS_MetaDeviceDescription::AllocateClockSubDevice(HALS_MetaDevice **a1, uint64_t a2)
{
  HALS_Client *v4;
  __CFDictionary *v5;
  __CFDictionary *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  HALS_Object *v13;
  int v14;
  HALS_ObjectMap *Object;
  HALS_Object *v16;
  int v17;
  unsigned int v18;
  HALS_Object *v19;
  HALS_Object *v20;
  HALS_ObjectMap *v21;
  __CFDictionary *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29;
  std::__shared_weak_count *v30;
  _QWORD v31[2];
  uint64_t v32;
  std::__shared_weak_count *v33;
  _DWORD v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  HALS_System *v39;
  __CFDictionary *v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 8))
  {
    v32 = 0;
    v33 = 0;
    HALS_System::GetInstance(&v39, 0, &v32);
    v5 = HALS_System::CopyClockDeviceByUID(v39, *(const __CFString **)(a2 + 8), v4);
    v6 = v40;
    if (v40)
    {
      v7 = (unint64_t *)((char *)v40 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        (*(void (**)(__CFDictionary *))(*(_QWORD *)v6 + 16))(v6);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6);
      }
    }
    v9 = v33;
    if (!v33)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (v5)
        goto LABEL_12;
    }
    else
    {
LABEL_11:
      if (v5)
      {
LABEL_12:
        v31[0] = &off_1E69A0DE0;
        v31[1] = 0;
        v12 = operator new();
        HALS_MetaSubDevice::HALS_MetaSubDevice((HALS_MetaSubDevice *)v12, *a1, *(const __CFString **)(a2 + 8), 0, v13);
        v14 = *(_DWORD *)(v12 + 56) ^ (*(int *)(v12 + 56) >> 31);
        if (v14)
        {
          if (v14 != 1)
            boost::detail::variant::forced_return<BOOL>();
          *(_QWORD *)(v12 + 64) = v5;
        }
        else
        {
          v40 = v5;
          LODWORD(v39) = 1;
          boost::variant<HALS_Device *,HALS_ClockDevice *>::variant_assign((unsigned int *)(v12 + 56), (uint64_t)&v39);
          boost::variant<HALS_Device *,HALS_ClockDevice *>::destroy_content(1);
        }
        if (HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)v12))
        {
          Object = (HALS_ObjectMap *)HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)v12);
          HALS_ObjectMap::RetainObject(Object, v16);
          v37 = 0x2A2A2A2A2A2A2A2ALL;
          v38 = -1;
          v17 = *(_DWORD *)(v12 + 16);
          v34[0] = 0;
          v34[1] = v17;
          v35 = 0u;
          v36 = 0u;
          v18 = *(_DWORD *)(HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)v12) + 16);
          LOBYTE(v39) = 0;
          v41 = 0;
          HALS_NotificationManager::AddPropertyListener((uint64_t)v34, v18, (char *)&v37, (uint64_t)&v39);
          if (v41)
            AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&v39);
          HALS_Listener::~HALS_Listener((HALS_Listener *)v34);
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v31);
        goto LABEL_37;
      }
    }
    v29 = 0;
    v30 = 0;
    HALS_System::GetInstance(&v39, 0, &v29);
    v21 = HALS_System::CopyDeviceByUID(v39, *(const __CFString **)(a2 + 8), 0);
    v22 = v40;
    if (v40)
    {
      v23 = (unint64_t *)((char *)v40 + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        (*(void (**)(__CFDictionary *))(*(_QWORD *)v22 + 16))(v22);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v22);
      }
    }
    v25 = v30;
    if (!v30)
      goto LABEL_32;
    v26 = (unint64_t *)&v30->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      if (v21)
        goto LABEL_33;
    }
    else
    {
LABEL_32:
      if (v21)
      {
LABEL_33:
        v39 = (HALS_System *)&off_1E69A0DE0;
        v40 = 0;
        v12 = operator new();
        HALS_MetaSubDevice::HALS_MetaSubDevice<HALS_Device>((HALS_MetaSubDevice *)v12, *a1, (uint64_t)v21, *(__CFString **)(a2 + 8), v40);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v39);
LABEL_36:
        HALS_ObjectMap::ReleaseObject(v21, v20);
LABEL_37:
        HALS_ObjectMap::ReleaseObject(v5, v19);
        return v12;
      }
    }
    v12 = 0;
    goto LABEL_36;
  }
  return 0;
}

void sub_1B5BE68C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  HALS_ObjectMap *v15;
  uint64_t v16;
  HALS_ObjectMap *v17;
  HALS_Object *v19;
  HALS_Object *v20;
  va_list va;

  va_start(va, a15);
  MEMORY[0x1B5E50688](v16, 0x10E1C4011717AD3);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  HALS_ObjectMap::ReleaseObject(v17, v19);
  HALS_ObjectMap::ReleaseObject(v15, v20);
  _Unwind_Resume(a1);
}

HALS_MetaSubDevice *HALS_MetaSubDevice::HALS_MetaSubDevice<HALS_Device>(HALS_MetaSubDevice *a1, HALS_MetaDevice *a2, uint64_t a3, __CFString *a4, __CFDictionary *a5)
{
  uint64_t v6;
  HALS_ObjectMap *Object;
  HALS_Object *v8;
  int v9;
  unsigned int v10;
  _DWORD v12[2];
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE v18[320];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v17 = a3;
  HALS_MetaSubDevice::HALS_MetaSubDevice(a1, a2, a4, a5, a5);
  boost::variant<HALS_Device *,HALS_ClockDevice *>::assign<HALS_Device *>(v6 + 56, &v17);
  if (HALS_MetaSubDevice::_GetObject(a1))
  {
    Object = (HALS_ObjectMap *)HALS_MetaSubDevice::_GetObject(a1);
    HALS_ObjectMap::RetainObject(Object, v8);
    v15 = 0x2A2A2A2A2A2A2A2ALL;
    v16 = -1;
    v9 = *((_DWORD *)a1 + 4);
    v12[0] = 0;
    v12[1] = v9;
    v13 = 0u;
    v14 = 0u;
    v10 = *(_DWORD *)(HALS_MetaSubDevice::_GetObject(a1) + 16);
    v18[0] = 0;
    v19 = 0;
    HALS_NotificationManager::AddPropertyListener((uint64_t)v12, v10, (char *)&v15, (uint64_t)v18);
    if (v19)
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v18);
    HALS_Listener::~HALS_Listener((HALS_Listener *)v12);
  }
  return a1;
}

void sub_1B5BE6AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  AMCP::Utility::Dispatch_Queue **v57;

  if (a57)
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a17);
  HALS_Listener::~HALS_Listener((HALS_Listener *)&a9);
  HALS_MetaSubDevice::~HALS_MetaSubDevice(v57);
  _Unwind_Resume(a1);
}

BOOL HALS_MetaDeviceDescription::CanBeActive(const __CFDictionary **this, HALS_Device *a2)
{
  int HogModeOwner;
  int TotalNumberChannels;
  int v6;
  const __CFDictionary *v7;
  double NominalSampleRate;
  unsigned int i;
  BOOL v10;
  _BOOL8 result;
  HALS_Stream *v12;
  HALS_Object *v13;
  HALS_ObjectMap *v14;
  BOOL v15;
  AudioStreamBasicDescription v16;

  if (HALS_IODevice::GetTransportType(a2) == 1735554416)
    return 0;
  HogModeOwner = HALS_Device::GetHogModeOwner(a2);
  if (HogModeOwner != -1 && HogModeOwner != *((_DWORD *)*this + 328))
    return 0;
  TotalNumberChannels = HALS_Device::GetTotalNumberChannels(a2, 1);
  v6 = HALS_Device::GetTotalNumberChannels(a2, 0);
  if ((HALS_MetaDeviceDescription::IsStackRequested(this) & 1) != 0
    || (v7 = this[3], this[4] - v7 == 24) && *((_QWORD *)v7 + 1) - *(_QWORD *)v7 >= 9uLL)
  {
    if (!v6)
      return 0;
  }
  else if (!(TotalNumberChannels | v6))
  {
    return 0;
  }
  NominalSampleRate = HALS_MetaDeviceDescription::GetNominalSampleRate((HALS_MetaDeviceDescription *)this);
  for (i = 0; ; ++i)
  {
    v10 = i >= HALS_IODevice::GetNumberStreams(a2, 0);
    result = v10;
    if (v10)
      break;
    v12 = (HALS_Stream *)HALS_IODevice::CopyStreamByIndex(a2, 0, i);
    v14 = v12;
    v15 = !v12
       || (HALS_Stream::GetCurrentVirtualFormat(v12, &v16), v16.mFormatID == 1819304813)
       && (v16.mFormatFlags & 0x40) == 0
       || NominalSampleRate == v16.mSampleRate
       || NominalSampleRate == 0.0;
    HALS_ObjectMap::ReleaseObject(v14, v13);
    if (!v15)
      return 0;
  }
  return result;
}

void sub_1B5BE6C80(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

double HALS_MetaDeviceDescription::GetNominalSampleRate(HALS_MetaDeviceDescription *this)
{
  HALS_MetaSubDevice *v1;
  uint64_t v2;
  HALS_Object *v3;
  HALS_ObjectMap *v4;
  double v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;

  v1 = (HALS_MetaSubDevice *)*((_QWORD *)this + 13);
  if (v1 || (v1 = (HALS_MetaSubDevice *)*((_QWORD *)this + 12)) != 0)
  {
    v2 = HALS_MetaSubDevice::CopyRealIODevice(v1);
    v4 = (HALS_ObjectMap *)v2;
    if (v2)
      v5 = (*(double (**)(uint64_t))(*(_QWORD *)v2 + 264))(v2);
    else
      v5 = 0.0;
  }
  else
  {
    v7 = *((_QWORD *)this + 9);
    if (((*((_QWORD *)this + 10) - v7) & 0x7FFFFFFF8) == 0)
      return 0.0;
    v8 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(*(_QWORD *)v7 + 72));
    v4 = (HALS_ObjectMap *)v8;
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 248);
      v10 = *(std::__shared_weak_count **)(v8 + 256);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        v5 = *(double *)(v9 + 24);
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      else
      {
        v5 = *(double *)(v9 + 24);
      }
    }
    else
    {
      v5 = 0.0;
    }
  }
  HALS_ObjectMap::ReleaseObject(v4, v3);
  return v5;
}

OS::CF::MutableDictionary *OS::CF::MutableDictionary::MutableDictionary(OS::CF::MutableDictionary *this, CFDictionaryRef theDict)
{
  CFMutableDictionaryRef MutableCopy;

  if (theDict)
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  else
    MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  *(_QWORD *)this = &off_1E699E390;
  *((_QWORD *)this + 1) = MutableCopy;
  return this;
}

void HALS_MetaDeviceDescription::UpdateSubDevice(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  HALS_Device *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __CFDictionary *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  int TotalNumberChannels;
  int v17;
  const __CFString *v18;
  HALS_MetaSubDevice ***v19;
  HALS_MetaSubDevice ***v20;
  HALS_MetaSubDevice **v21;
  HALS_MetaSubDevice **v22;
  const __CFString *v23;
  HALS_MetaSubDevice *v24;
  int ExtraLatency;
  int v26;
  int IsDriftCorrectionOn;
  int DriftCorrectionAlgorithm;
  int DriftCorrectionQuality;
  int IsSynchPaddingOn;
  __CFDictionary *v31;
  std::__shared_weak_count *v32;
  HALS_Object *v33;
  CFDictionaryRef Copy;
  uint64_t v35;
  std::__shared_weak_count *v36;
  char v37[8];
  CFTypeRef cf;
  char v39[8];
  CFDictionaryRef theDict;
  void (**v41)(OS::CF::String *__hidden);
  const __CFString *v42;
  HALS_System *v43;
  std::__shared_weak_count *v44;

  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)v39);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v37, *(CFDictionaryRef *)(a3 + 8), CFSTR("uid"));
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(theDict, CFSTR("uid"), cf);
  v35 = 0;
  v36 = 0;
  HALS_System::GetInstance(&v43, 0, &v35);
  v6 = HALS_System::CopyDeviceByUID(v43, (const __CFString *)cf, 0);
  v7 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v36;
  if (v36)
  {
    v11 = (unint64_t *)&v36->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v6 && HALS_IODevice::GetTransportType(v6) != 1735554416)
  {
    v15 = (std::__shared_weak_count *)HALS_Device::CopyServerLocalizedName(v6);
    v43 = (HALS_System *)&off_1E69A0F60;
    v44 = v15;
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(theDict, CFSTR("name"), v15);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
    TotalNumberChannels = HALS_Device::GetTotalNumberChannels(v6, 1);
    OS::CF::Number::Number<unsigned int>(&v43, TotalNumberChannels);
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, CFSTR("channels-in"), v44);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
    v17 = HALS_Device::GetTotalNumberChannels(v6, 0);
    OS::CF::Number::Number<unsigned int>(&v43, v17);
    v13 = theDict;
    v14 = v44;
  }
  else
  {
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v43, *(CFDictionaryRef *)(a3 + 8), CFSTR("name"));
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(theDict, CFSTR("name"), v44);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v43, *(CFDictionaryRef *)(a3 + 8), CFSTR("channels-in"));
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, CFSTR("channels-in"), v44);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v43, *(CFDictionaryRef *)(a3 + 8), CFSTR("channels-out"));
    v13 = theDict;
    v14 = v44;
  }
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(v13, CFSTR("channels-out"), v14);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
  v18 = (const __CFString *)cf;
  if (cf)
    CFRetain(cf);
  v41 = &off_1E69A0F60;
  v42 = v18;
  v19 = *(HALS_MetaSubDevice ****)(a2 + 24);
  v20 = *(HALS_MetaSubDevice ****)(a2 + 32);
  while (v19 != v20)
  {
    v21 = *v19;
    v22 = v19[1];
    while (v21 != v22)
    {
      v23 = (const __CFString *)HALS_MetaSubDevice::CopyRealDeviceUID(*v21);
      v43 = (HALS_System *)&off_1E69A0F60;
      v44 = (std::__shared_weak_count *)v23;
      if (OS::CF::operator==(v23, v42))
      {
        v24 = *v21;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
        if (v24)
        {
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v41);
          ExtraLatency = HALS_MetaSubDevice::GetExtraLatency(v24, 1);
          OS::CF::Number::Number<unsigned int>(&v43, ExtraLatency);
          OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, CFSTR("latency-in"), v44);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
          v26 = HALS_MetaSubDevice::GetExtraLatency(v24, 0);
          OS::CF::Number::Number<unsigned int>(&v43, v26);
          OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, CFSTR("latency-out"), v44);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
          IsDriftCorrectionOn = HALS_MetaSubDevice::IsDriftCorrectionOn(v24);
          OS::CF::Number::Number<int>(&v43, IsDriftCorrectionOn);
          OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, CFSTR("drift"), v44);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
          DriftCorrectionAlgorithm = HALS_MetaSubDevice::GetDriftCorrectionAlgorithm(v24);
          OS::CF::Number::Number<unsigned int>(&v43, DriftCorrectionAlgorithm);
          OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, CFSTR("drift algorithm"), v44);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
          DriftCorrectionQuality = HALS_MetaSubDevice::GetDriftCorrectionQuality(v24);
          OS::CF::Number::Number<unsigned int>(&v43, DriftCorrectionQuality);
          OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, CFSTR("drift quality"), v44);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
          IsSynchPaddingOn = HALS_MetaSubDevice::IsSynchPaddingOn(v24);
          OS::CF::Number::Number<int>(&v43, IsSynchPaddingOn ^ 1);
          v31 = theDict;
          v32 = v44;
          goto LABEL_28;
        }
      }
      else
      {
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
      }
      ++v21;
    }
    v19 += 3;
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v41);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v43, *(CFDictionaryRef *)(a3 + 8), CFSTR("latency-in"));
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, CFSTR("latency-in"), v44);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v43, *(CFDictionaryRef *)(a3 + 8), CFSTR("latency-out"));
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, CFSTR("latency-out"), v44);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v43, *(CFDictionaryRef *)(a3 + 8), CFSTR("drift"));
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, CFSTR("drift"), v44);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v43, *(CFDictionaryRef *)(a3 + 8), CFSTR("drift algorithm"));
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, CFSTR("drift algorithm"), v44);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v43, *(CFDictionaryRef *)(a3 + 8), CFSTR("drift quality"));
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, CFSTR("drift quality"), v44);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v43, *(CFDictionaryRef *)(a3 + 8), CFSTR("don't pad"));
  v31 = theDict;
  v32 = v44;
LABEL_28:
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(v31, CFSTR("don't pad"), v32);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
  v33 = theDict;
  if (theDict)
    Copy = CFDictionaryCreateCopy(0, theDict);
  else
    Copy = 0;
  *a1 = &off_1E69A0DE0;
  a1[1] = Copy;
  HALS_ObjectMap::ReleaseObject(v6, v33);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v37);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v39);
}

void sub_1B5BE7374(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5BE7058);
}

void sub_1B5BE7380(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5BE7024);
}

void sub_1B5BE738C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5BE7318);
}

void sub_1B5BE7398(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5BE71C8);
}

void sub_1B5BE73A4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5BE7198);
}

void sub_1B5BE73B0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5BE7168);
}

void sub_1B5BE73BC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5BE7138);
}

void sub_1B5BE73C8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5BE7104);
}

void sub_1B5BE73D4(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  HALS_ObjectMap *v17;

  HALS_ObjectMap::ReleaseObject(v17, a2);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a11);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a13);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::CopyServerLocalizedName(HALS_Device *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v2 = *((unsigned int *)this + 4);
  v5 = 0x676C6F626E616D6CLL;
  v6 = 0;
  v7 = 0;
  (*(void (**)(HALS_Device *, uint64_t, uint64_t *, uint64_t, char *, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v2, &v5, 8, (char *)&v6 + 4, &v7, 0, 0, 0);
  result = v7;
  if (!v7)
  {
    v4 = *((unsigned int *)this + 4);
    v5 = 0x676C6F626C6E616DLL;
    LODWORD(v6) = 0;
    v9 = 0;
    v8 = 0;
    (*(void (**)(HALS_Device *, uint64_t, uint64_t *, uint64_t, int *, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v4, &v5, 8, &v8, &v9, 0, 0, 0);
    return v9;
  }
  return result;
}

void sub_1B5BE74F0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5BE74E0);
}

void sub_1B5BE7500(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5BE7494);
}

void HALS_MetaDeviceDescription::~HALS_MetaDeviceDescription(HALS_MetaDeviceDescription *this)
{
  void *v2;
  void *v3;
  void **v4;

  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 24);
  std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100](&v4);
  OS::CF::UntypedObject::~UntypedObject((HALS_MetaDeviceDescription *)((char *)this + 8));
}

CFDictionaryRef HALS_MetaDeviceDescription::CopyRawDescription(CFDictionaryRef *this)
{
  CFDictionaryRef v2;

  HALS_MetaDeviceDescription::UpdateRawDescription(this);
  v2 = this[2];
  if (v2)
    CFRetain(v2);
  return v2;
}

uint64_t HALS_MetaDeviceDescription::GetStackedChannelPolicy(const __CFDictionary **this)
{
  HALS_PlatformBehaviors *v2;
  unsigned __int8 v3;
  uint64_t *platform_behaviors;
  OS::CF::Boolean *v6[2];

  v2 = OS::CF::DictionaryBase<__CFDictionary const*>::HasKey(this[2], CFSTR("stacked channel policy"));
  if ((_DWORD)v2)
  {
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(v6, this[2], CFSTR("stacked channel policy"));
    v3 = OS::CF::Boolean::AsBool(v6[1]);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v6);
    if ((v3 & 1) != 0)
      return 0;
  }
  platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v2);
  return (*(uint64_t (**)(uint64_t *))(*platform_behaviors + 32))(platform_behaviors);
}

const __CFBoolean *HALS_MetaDeviceDescription::IsHidden(const __CFDictionary **this)
{
  const __CFBoolean *v2;
  OS::CF::Boolean *v4[2];

  if (!OS::CF::DictionaryBase<__CFDictionary const*>::HasKey(this[2], CFSTR("hidden")))
    return 0;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(v4, this[2], CFSTR("hidden"));
  v2 = OS::CF::Boolean::AsBool(v4[1]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v4);
  return v2;
}

uint64_t HALS_MetaDeviceDescription::IsolatedUseCaseID(const __CFDictionary **this)
{
  unsigned int v2;
  const __CFNumber *v4[2];

  if (!OS::CF::DictionaryBase<__CFDictionary const*>::HasKey(this[2], CFSTR("isolated use case")))
    return 0;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v4, this[2], CFSTR("isolated use case"));
  v2 = OS::CF::Number::GetValue<unsigned int>(v4[1], 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v4);
  return v2 | 0x100000000;
}

CFTypeRef HALS_MetaDeviceDescription::CopyDeviceName(CFDictionaryRef theDict)
{
  CFTypeRef v1;
  uint64_t v3;
  CFTypeRef cf;

  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v3, theDict, CFSTR("name"));
  v1 = cf;
  if (cf)
    CFRetain(cf);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v3);
  return v1;
}

void OS::CF::MutableDictionary::RemoveKey(OS::CF::MutableDictionary *this, const __CFString *a2)
{
  if (this)
    CFDictionaryRemoveValue(this, a2);
}

uint64_t HALS_MetaDeviceDescription::CanBeDefaultDevice(const __CFDictionary **this, int a2, int a3)
{
  uint64_t result;
  int NumberStreamsExcludingReferenceStreams;
  unint64_t v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  int v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  HALS_IODevice *v15;
  HALS_Object *v16;
  unsigned int *v17;
  uint64_t v18;
  _BOOL4 v19;
  _DWORD v20[3];
  uint64_t v21;

  if ((HALS_MetaDeviceDescription::IsPrivate(this) & 1) != 0
    || (HALS_MetaDeviceDescription::IsHidden(this) & 1) != 0)
  {
    return 0;
  }
  NumberStreamsExcludingReferenceStreams = HALS_Device::GetNumberStreamsExcludingReferenceStreams(*this, a2);
  result = 0;
  v8 = (unint64_t)(this[10] - this[9]) >> 3;
  if (!a2)
    LODWORD(v8) = 0;
  if (NumberStreamsExcludingReferenceStreams != (_DWORD)v8)
  {
    v10 = this[3];
    v9 = this[4];
    if (v10 == v9)
    {
      return 1;
    }
    else
    {
      if (a3)
        v11 = 1936092276;
      else
        v11 = 1684434036;
      if (a2)
        v12 = 1768845428;
      else
        v12 = 1869968496;
      do
      {
        v13 = *(uint64_t **)v10;
        v14 = (uint64_t *)*((_QWORD *)v10 + 1);
        while (v13 != v14)
        {
          v15 = (HALS_IODevice *)HALS_MetaSubDevice::CopyRealDevice<HALS_Device>(*v13);
          v17 = (unsigned int *)v15;
          if (v15 && HALS_IODevice::GetNumberStreams(v15, a2))
          {
            v18 = v17[4];
            v20[0] = v11;
            v20[1] = v12;
            v20[2] = 0;
            v21 = 0;
            (*(void (**)(unsigned int *, uint64_t, _DWORD *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v17 + 112))(v17, v18, v20, 4, &v21, (char *)&v21 + 4, 0, 0, 0);
            v19 = HIDWORD(v21) != 0;
          }
          else
          {
            v19 = 1;
          }
          HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v17, v16);
          if (!v19)
            return 0;
          ++v13;
        }
        v10 = (const __CFDictionary *)((char *)v10 + 24);
        result = 1;
      }
      while (v10 != v9);
    }
  }
  return result;
}

void sub_1B5BE7910(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

CFTypeRef HALS_MetaDeviceDescription::CopyTapList(CFDictionaryRef theDict)
{
  CFTypeRef v1;
  uint64_t v3;
  CFTypeRef cf;

  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)&v3, theDict, CFSTR("taps"));
  v1 = cf;
  if (cf)
    CFRetain(cf);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v3);
  return v1;
}

void get_tap_sample_rate_range(uint64_t a1)
{
  int64x2_t v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = vdupq_n_s64(0x40CF400000000000uLL);
  CA::ValueRangeList::AddRange((double **)a1, (double *)v2.i64);
  v2 = vdupq_n_s64(0x40D5888000000000uLL);
  CA::ValueRangeList::AddRange((double **)a1, (double *)v2.i64);
  v2 = vdupq_n_s64(0x40E5888000000000uLL);
  CA::ValueRangeList::AddRange((double **)a1, (double *)v2.i64);
  v2 = vdupq_n_s64(0x40E7700000000000uLL);
  CA::ValueRangeList::AddRange((double **)a1, (double *)v2.i64);
  v2 = vdupq_n_s64(0x40F5888000000000uLL);
  CA::ValueRangeList::AddRange((double **)a1, (double *)v2.i64);
  v2 = vdupq_n_s64(0x40F7700000000000uLL);
  CA::ValueRangeList::AddRange((double **)a1, (double *)v2.i64);
  v2 = vdupq_n_s64(0x4107700000000000uLL);
  CA::ValueRangeList::AddRange((double **)a1, (double *)v2.i64);
}

void sub_1B5BE7A68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_MetaDeviceDescription::GetSubDeviceByIndex(uint64_t **this, HALS_MetaDeviceDescription *a2, int a3)
{
  int v3;
  uint64_t *i;
  uint64_t v5;

  if (this != (uint64_t **)a2)
  {
    v3 = 0;
    do
    {
      for (i = *this; i != this[1]; ++i)
      {
        if (v3 == a3)
        {
          v5 = *i;
          v3 = a3;
          if (*i)
            return v5;
        }
        else
        {
          ++v3;
        }
      }
      this += 3;
    }
    while (this != (uint64_t **)a2);
  }
  return 0;
}

BOOL HALS_MetaDeviceDescription::IsDeviceInRawDescription(CFDictionaryRef *this, const __CFString *cf)
{
  const __CFArray *Size;
  unint64_t v5;
  CFIndex v6;
  unsigned int v7;
  const void *TypeID;
  _BOOL8 v9;
  const void *v10;
  const __CFArray *v11;
  const __CFArray *v12;
  unint64_t v13;
  uint64_t v16;
  CFStringRef theString1;
  _BYTE v18[8];
  CFDictionaryRef v19;
  uint64_t v20;
  CFDictionaryRef theDict;
  _BYTE v22[8];
  OS::CF::UntypedObject *v23;
  _BYTE v24[8];
  const __CFArray *v25;
  _QWORD v26[2];

  if (cf)
    CFRetain(cf);
  v26[0] = &off_1E69A0F60;
  v26[1] = cf;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v24, this[2], CFSTR("subdevices"));
  Size = OS::CF::ArrayBase<__CFArray const*>::GetSize(v25);
  if (Size)
  {
    v5 = (unint64_t)Size;
    v6 = 0;
    v7 = 0;
    while (1)
    {
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::UntypedObject>((const __CFArray *)v22, (uint64_t)v24, v6);
      TypeID = OS::CF::UntypedObject::GetTypeID(v23);
      if (TypeID == (const void *)CFDictionaryGetTypeID())
      {
        OS::CF::UntypedObject::As<OS::CF::Dictionary>(&v20, (uint64_t)v22);
        if (theDict)
        {
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v18, theDict, CFSTR("uid"));
          if (v19)
            v9 = OS::CF::operator==((CFStringRef)v19, cf);
          else
            v9 = 0;
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v18);
          goto LABEL_27;
        }
      }
      else
      {
        v10 = OS::CF::UntypedObject::GetTypeID(v23);
        if (v10 != (const void *)CFArrayGetTypeID())
        {
          v9 = 0;
          goto LABEL_28;
        }
        OS::CF::UntypedObject::As<OS::CF::Array>(&v20, (uint64_t)v22);
        if (theDict)
        {
          v11 = OS::CF::ArrayBase<__CFArray const*>::GetSize(theDict);
          if (v11)
          {
            v12 = v11;
            v13 = 1;
            do
            {
              OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v18, (uint64_t)&v20, v13 - 1);
              if (v19)
              {
                OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v16, v19, CFSTR("uid"));
                if (theString1)
                  v9 = OS::CF::operator==(theString1, cf);
                else
                  v9 = 0;
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v16);
              }
              else
              {
                v9 = 0;
              }
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v18);
              if (v9)
                break;
            }
            while (v13++ < (unint64_t)v12);
            goto LABEL_27;
          }
        }
      }
      v9 = 0;
LABEL_27:
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v20);
LABEL_28:
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v22);
      if (!v9)
      {
        v6 = ++v7;
        if (v5 > v7)
          continue;
      }
      goto LABEL_32;
    }
  }
  v9 = 0;
LABEL_32:
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v24);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v26);
  return v9;
}

const __CFArray *OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Array>(const __CFArray *result, uint64_t a2, CFIndex a3)
{
  const __CFArray *v4;
  const void *ValueAtIndex;
  const void *v7;
  CFTypeID v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)result = &off_1E69A0EA8;
  *((_QWORD *)result + 1) = 0;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v4 = result;
    result = *(const __CFArray **)(a2 + 8);
    if (result)
    {
      result = (const __CFArray *)CFArrayGetCount(result);
      if ((uint64_t)result > a3)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), a3);
        v7 = ValueAtIndex;
        v8 = ValueAtIndex ? CFGetTypeID(ValueAtIndex) : 0;
        result = (const __CFArray *)CFArrayGetTypeID();
        if ((const __CFArray *)v8 == result)
        {
          if (v7)
          {
            CFRetain(v7);
            v9 = (uint64_t)v4;
            v10 = (uint64_t)v7;
          }
          else
          {
            v9 = (uint64_t)v4;
            v10 = 0;
          }
          return (const __CFArray *)OS::CF::UntypedObject::operator=(v9, v10);
        }
      }
    }
  }
  return result;
}

void HALS_MetaDeviceDescription::SetSubDSPTypesForClient(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  CFDictionaryRef Copy;
  uint64_t v13;
  const void *v14;
  char v15[8];
  CFDictionaryRef theDict;

  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)v15, *(CFDictionaryRef *)(a1 + 16));
  if (a2[2])
  {
    v6 = (_QWORD *)*a2;
    v4 = a2 + 1;
    v5 = v6;
    if (v6 != v4)
    {
      while (1)
      {
        v7 = *((_DWORD *)v5 + 7);
        if (v7 == 3)
          break;
        if (v7 == 2)
        {
          v8 = 1;
LABEL_7:
          OS::CF::Number::Number<unsigned int>(&v13, v8);
          OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, CFSTR("vocal isolation type"), v14);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v13);
        }
        v9 = (_QWORD *)v5[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v5[2];
            v11 = *v10 == (_QWORD)v5;
            v5 = v10;
          }
          while (!v11);
        }
        v5 = v10;
        if (v10 == v4)
          goto LABEL_16;
      }
      v8 = 2;
      goto LABEL_7;
    }
  }
  else
  {
    OS::CF::Number::Number<unsigned int>(&v13, 0);
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, CFSTR("vocal isolation type"), v14);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v13);
  }
LABEL_16:
  Copy = theDict;
  if (theDict)
    Copy = CFDictionaryCreateCopy(0, theDict);
  OS::CF::UntypedObject::operator=(a1 + 8, (uint64_t)Copy);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v15);
}

void AMCP::DAL::Multi_Reader_Synchronized_Mixer::~Multi_Reader_Synchronized_Mixer(AMCP::DAL::Multi_Reader_Synchronized_Mixer *this)
{
  AMCP::DAL::Synchronized_Mixer::~Synchronized_Mixer(this);
  JUMPOUT(0x1B5E50688);
}

void AMCP::DAL::Multi_Reader_Synchronized_Mixer::get_time_range(AMCP::DAL::Multi_Reader_Synchronized_Mixer *this@<X0>, uint64_t a2@<X8>)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v4 = (os_unfair_lock_s *)((char *)this + 156);
  os_unfair_lock_lock((os_unfair_lock_t)this + 39);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 8);
  v5 = *((_QWORD *)this + 4);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 3);
  *(_QWORD *)(a2 + 24) = v5;
  v6 = *((_QWORD *)this + 5);
  *(_QWORD *)(a2 + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_OWORD *)(a2 + 40) = *((_OWORD *)this + 3);
  v9 = *((_QWORD *)this + 9);
  *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 8);
  *(_QWORD *)(a2 + 64) = v9;
  v10 = *((_QWORD *)this + 10);
  *(_QWORD *)(a2 + 72) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  os_unfair_lock_unlock(v4);
}

void AMCP::DAL::Multi_Reader_Synchronized_Mixer::get_allowed_read_range(AMCP::DAL::Multi_Reader_Synchronized_Mixer *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  if (*((_DWORD *)this + 40))
  {
    AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)&v6, (uint64_t)this);
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range(a2, &v6, 0.0, 4294967300.0);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  else
  {
    (*(void (**)(AMCP::DAL::Multi_Reader_Synchronized_Mixer *))(*(_QWORD *)this + 64))(this);
  }
}

void sub_1B5BE804C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Multi_Reader_Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(uint64_t a1, int *a2, _QWORD *a3, int a4)
{
  AMCP::Log::Scope_Registry *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  unint64_t v12;
  char *v13;
  int v14;
  char *v15;
  const char *v17;
  void *exception;
  __int128 v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  std::string v24;
  std::logic_error v25;
  std::logic_error v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint8_t buf[8];
  __int16 v34;
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  _BYTE v39[14];
  const char *v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 156));
    v8 = *(_DWORD *)(a1 + 164);
    if (v8 < 0)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v9 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = pthread_self();
        v11 = pthread_mach_thread_np(v10);
        v12 = 0;
        v13 = 0;
        v14 = 47;
        do
        {
          v15 = &aLibraryCachesC_150[v12];
          if (v14 == 47)
            v13 = &aLibraryCachesC_150[v12];
          v14 = v15[1];
          if (!v15[1])
            break;
        }
        while (v12++ < 0xFFF);
        if (v13)
          v17 = v13 + 1;
        else
          v17 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Synchronized_Mixer.cpp";
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v11;
        v34 = 2080;
        v35 = v17;
        v36 = 1024;
        v37 = 76;
        v38 = 2080;
        *(_QWORD *)v39 = "not (m_refcount >= 0)";
        _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v24);
      std::logic_error::logic_error(&v25, &v24);
      v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v26, &v25);
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = -1;
      v26.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v27 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v26);
      *(_QWORD *)&v39[6] = "virtual void AMCP::DAL::Multi_Reader_Synchronized_Mixer::set_anchor_time_and_nominal_buffer_s"
                           "ize(const Source_ID &, const DAL_Time_Range &, Buffer_Alignment)";
      v40 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Synchronized_Mixer.cpp";
      v41 = 76;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
      v22 = v19;
      v23 = v20;
      v19 = 0uLL;
      v20 = 0;
      v21 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v21);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
    if (v8 == 1 || *(_BYTE *)(a1 + 168))
    {
      *(_BYTE *)(a1 + 168) = 0;
      AMCP::DAL::Ring_Buffer_Base::set_anchor_time_and_nominal_buffer_size(a1, v7, (uint64_t)a3);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 156));
  }
  else
  {
    AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(a1, a2, a3);
  }
}

void sub_1B5BE8314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  os_unfair_lock_s *v27;

  os_unfair_lock_unlock(v27);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Multi_Reader_Synchronized_Mixer::commit_direct_write(os_unfair_lock_s *a1, unsigned int *a2, uint64_t a3)
{
  os_unfair_lock_s *v6;

  v6 = a1 + 39;
  os_unfair_lock_lock(a1 + 39);
  AMCP::DAL::Synchronized_Mixer::commit_direct_write((uint64_t)a1, a2, a3);
  os_unfair_lock_unlock(v6);
}

void sub_1B5BE8470(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Multi_Reader_Synchronized_Mixer::add_source(os_unfair_lock_s *a1, unsigned int *a2, int a3)
{
  AMCP::Log::Scope_Registry *v4;
  uint32_t os_unfair_lock_opaque;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  unint64_t v9;
  char *v10;
  int v11;
  char *v12;
  const char *v14;
  void *exception;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  std::string v21;
  std::logic_error v22;
  std::logic_error v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint8_t buf[8];
  __int16 v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  _BYTE v36[14];
  const char *v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!a3)
    AMCP::DAL::Synchronized_Mixer::add_source((AMCP::Log::Scope_Registry *)a1, a2, 0);
  os_unfair_lock_lock(a1 + 39);
  os_unfair_lock_opaque = a1[41]._os_unfair_lock_opaque;
  if ((os_unfair_lock_opaque & 0x80000000) != 0)
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      v9 = 0;
      v10 = 0;
      v11 = 47;
      do
      {
        v12 = &aLibraryCachesC_150[v9];
        if (v11 == 47)
          v10 = &aLibraryCachesC_150[v9];
        v11 = v12[1];
        if (!v12[1])
          break;
      }
      while (v9++ < 0xFFF);
      if (v10)
        v14 = v10 + 1;
      else
        v14 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Synchronized_Mixer.cpp";
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      v31 = 2080;
      v32 = v14;
      v33 = 1024;
      v34 = 24;
      v35 = 2080;
      *(_QWORD *)v36 = "not (m_refcount >= 0)";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v21);
    std::logic_error::logic_error(&v22, &v21);
    v22.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v24 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    *(_QWORD *)&v36[6] = "virtual void AMCP::DAL::Multi_Reader_Synchronized_Mixer::add_source(const Source_ID &, Buffer_Alignment)";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Synchronized_Mixer.cpp";
    v38 = 24;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  a1[41]._os_unfair_lock_opaque = os_unfair_lock_opaque + 1;
  os_unfair_lock_unlock(a1 + 39);
}

void sub_1B5BE86EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  os_unfair_lock_s *v27;

  os_unfair_lock_unlock(v27);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Multi_Reader_Synchronized_Mixer::remove_source(uint64_t a1, _DWORD *a2, int a3)
{
  AMCP::Log::Scope_Registry *v4;
  int v5;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  unint64_t v9;
  char *v10;
  int v11;
  char *v12;
  const char *v14;
  void *exception;
  __int128 v17;
  uint64_t v18;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  std::string v22;
  std::logic_error v23;
  std::logic_error v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint8_t buf[8];
  __int16 v32;
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  _BYTE v37[14];
  const char *v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!a3)
    AMCP::DAL::Synchronized_Mixer::remove_source((AMCP::Log::Scope_Registry *)a1, a2, 0);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 156));
  v5 = *(_DWORD *)(a1 + 164);
  *(_DWORD *)(a1 + 164) = v5 - 1;
  if (v5 == 1)
  {
    *(_BYTE *)(a1 + 168) = 1;
  }
  else if (v5 <= 0)
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      v9 = 0;
      v10 = 0;
      v11 = 47;
      do
      {
        v12 = &aLibraryCachesC_150[v9];
        if (v11 == 47)
          v10 = &aLibraryCachesC_150[v9];
        v11 = v12[1];
        if (!v12[1])
          break;
      }
      while (v9++ < 0xFFF);
      if (v10)
        v14 = v10 + 1;
      else
        v14 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Synchronized_Mixer.cpp";
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      v32 = 2080;
      v33 = v14;
      v34 = 1024;
      v35 = 42;
      v36 = 2080;
      *(_QWORD *)v37 = "not (m_refcount >= 0)";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v22);
    std::logic_error::logic_error(&v23, &v22);
    v23.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v25 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    *(_QWORD *)&v37[6] = "virtual BOOL AMCP::DAL::Multi_Reader_Synchronized_Mixer::remove_source(const Source_ID &, Buffer_Alignment)";
    v38 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Synchronized_Mixer.cpp";
    v39 = 42;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 156));
  return 0;
}

void sub_1B5BE8A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  os_unfair_lock_s *v27;

  os_unfair_lock_unlock(v27);
  _Unwind_Resume(a1);
}

void HALB_AsyncLogMessage::~HALB_AsyncLogMessage(HALB_AsyncLogMessage *this)
{
  JUMPOUT(0x1B5E50688);
}

void HALB_AsyncLogMessage::perform(HALB_AsyncLogMessage *this)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  double v5;
  unint64_t v6;
  double v7;
  signed int v8;
  HALS_ObjectMap *v9;
  HALS_Object *v10;
  HALS_ObjectMap *v11;
  int v12;
  int v13;
  uint64_t v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  uint32_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  _BOOL4 v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _BYTE v52[18];
  __int16 v53;
  char *v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  char *v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  char __str[64];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 34);
  v3 = mach_absolute_time();
  v4 = (double)v3 * 0.0000000416666667;
  if (*(double *)&_LastSyncOffset + 0.5 >= v4)
  {
    v5 = *(double *)&_BootAbsoluteTime;
  }
  else
  {
    v3 = gettimeofday((timeval *)v52, 0);
    _LastSyncOffset = *(_QWORD *)&v4;
    v5 = (double)*(uint64_t *)v52 - *MEMORY[0x1E0C9ADF0] + (double)*(int *)&v52[8] * 0.000001 - v4;
    *(double *)&_BootAbsoluteTime = v5;
  }
  v6 = CATimeUtilities::GregorianDateFromAbsoluteTime((CATimeUtilities *)v3, v5 + (double)v2 * 0.0000000416666667);
  v8 = llround(v7 * 1000000.0);
  snprintf(__str, 0x40uLL, "%02d:%02d:%02d.%06d", (int)(v6 >> 24) >> 24, SHIDWORD(v6) >> 24, v8 / 1000000, v8 % 1000000);
  if (*((_DWORD *)this + 80))
  {
    v9 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 72));
    v11 = v9;
    if (!v9)
      goto LABEL_15;
    v12 = *((_DWORD *)v9 + 5);
    if (v12 <= 1701078389)
    {
      if (v12 == 1633773415)
      {
LABEL_13:
        v14 = (*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v9 + 216))(v9);
        v15 = v14 != 0;
        goto LABEL_16;
      }
      v13 = 1633969526;
    }
    else
    {
      if (v12 == 1701078390 || v12 == 1701733488)
        goto LABEL_13;
      v13 = 1919182198;
    }
    if (v12 == v13)
      goto LABEL_13;
    v16 = *((_DWORD *)v9 + 6);
    if (v12 != v16)
    {
      v15 = 0;
      v14 = 0;
      if (v16 <= 1701078389)
      {
        if (v16 == 1633773415)
          goto LABEL_13;
        v51 = 1633969526;
      }
      else
      {
        if (v16 == 1701078390 || v16 == 1919182198)
          goto LABEL_13;
        v51 = 1701733488;
      }
      if (v16 == v51)
        goto LABEL_13;
    }
    else
    {
LABEL_15:
      v14 = 0;
      v15 = 0;
    }
LABEL_16:
    HALS_ObjectMap::ReleaseObject(v11, v10);
    switch(*((_DWORD *)this + 80))
    {
      case 0:
        goto LABEL_17;
      case 1:
        v23 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
        if (v15)
        {
          if (!v23)
            goto LABEL_20;
          v24 = *((_QWORD *)this + 35);
          *(_DWORD *)v52 = 136316418;
          *(_QWORD *)&v52[4] = "HALB_AsyncLog.cpp";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 133;
          v53 = 2080;
          v54 = __str;
          v55 = 2048;
          v56 = v24;
          v57 = 2080;
          v58 = (char *)this + 16;
          v59 = 2080;
          v60 = v14;
          v18 = MEMORY[0x1E0C81028];
          v19 = "%25s:%-5d  %s thread %llx: %s: arg1: %s";
        }
        else
        {
          if (!v23)
            goto LABEL_20;
          v37 = *((_QWORD *)this + 35);
          v38 = *((_QWORD *)this + 36);
          *(_DWORD *)v52 = 136316418;
          *(_QWORD *)&v52[4] = "HALB_AsyncLog.cpp";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 137;
          v53 = 2080;
          v54 = __str;
          v55 = 2048;
          v56 = v37;
          v57 = 2080;
          v58 = (char *)this + 16;
          v59 = 2048;
          v60 = v38;
          v18 = MEMORY[0x1E0C81028];
          v19 = "%25s:%-5d  %s thread %llx: %s: arg1: %llu";
        }
        v20 = 58;
        goto LABEL_19;
      case 2:
        v25 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
        if (v15)
        {
          if (!v25)
            goto LABEL_20;
          v26 = *((_QWORD *)this + 35);
          v27 = *((_QWORD *)this + 37);
          *(_DWORD *)v52 = 136316674;
          *(_QWORD *)&v52[4] = "HALB_AsyncLog.cpp";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 144;
          v53 = 2080;
          v54 = __str;
          v55 = 2048;
          v56 = v26;
          v57 = 2080;
          v58 = (char *)this + 16;
          v59 = 2080;
          v60 = v14;
          v61 = 2048;
          v62 = v27;
          v18 = MEMORY[0x1E0C81028];
          v19 = "%25s:%-5d  %s thread %llx: %s: arg1: %s arg2: %llu";
        }
        else
        {
          if (!v25)
            goto LABEL_20;
          v39 = *((_QWORD *)this + 35);
          v40 = *((_QWORD *)this + 36);
          v41 = *((_QWORD *)this + 37);
          *(_DWORD *)v52 = 136316674;
          *(_QWORD *)&v52[4] = "HALB_AsyncLog.cpp";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 148;
          v53 = 2080;
          v54 = __str;
          v55 = 2048;
          v56 = v39;
          v57 = 2080;
          v58 = (char *)this + 16;
          v59 = 2048;
          v60 = v40;
          v61 = 2048;
          v62 = v41;
          v18 = MEMORY[0x1E0C81028];
          v19 = "%25s:%-5d  %s thread %llx: %s: arg1: %llu arg2: %llu";
        }
        v20 = 68;
        goto LABEL_19;
      case 3:
        v28 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
        if (v15)
        {
          if (!v28)
            goto LABEL_20;
          v29 = *((_QWORD *)this + 35);
          v30 = *((_QWORD *)this + 37);
          v31 = *((_QWORD *)this + 38);
          *(_DWORD *)v52 = 136316930;
          *(_QWORD *)&v52[4] = "HALB_AsyncLog.cpp";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 155;
          v53 = 2080;
          v54 = __str;
          v55 = 2048;
          v56 = v29;
          v57 = 2080;
          v58 = (char *)this + 16;
          v59 = 2080;
          v60 = v14;
          v61 = 2048;
          v62 = v30;
          v63 = 2048;
          v64 = v31;
          v18 = MEMORY[0x1E0C81028];
          v19 = "%25s:%-5d  %s thread %llx: %s: arg1: %s arg2: %llu arg3: %llu";
        }
        else
        {
          if (!v28)
            goto LABEL_20;
          v42 = *((_QWORD *)this + 35);
          v43 = *((_QWORD *)this + 36);
          v44 = *((_QWORD *)this + 37);
          v45 = *((_QWORD *)this + 38);
          *(_DWORD *)v52 = 136316930;
          *(_QWORD *)&v52[4] = "HALB_AsyncLog.cpp";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 159;
          v53 = 2080;
          v54 = __str;
          v55 = 2048;
          v56 = v42;
          v57 = 2080;
          v58 = (char *)this + 16;
          v59 = 2048;
          v60 = v43;
          v61 = 2048;
          v62 = v44;
          v63 = 2048;
          v64 = v45;
          v18 = MEMORY[0x1E0C81028];
          v19 = "%25s:%-5d  %s thread %llx: %s: arg1: %llu arg2: %llu arg3: %llu";
        }
        v20 = 78;
        goto LABEL_19;
      case 4:
        v32 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
        if (v15)
        {
          if (!v32)
            goto LABEL_20;
          v33 = *((_QWORD *)this + 35);
          v34 = *((_QWORD *)this + 37);
          v35 = *((_QWORD *)this + 38);
          v36 = *((_QWORD *)this + 39);
          *(_DWORD *)v52 = 136317186;
          *(_QWORD *)&v52[4] = "HALB_AsyncLog.cpp";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 166;
          v53 = 2080;
          v54 = __str;
          v55 = 2048;
          v56 = v33;
          v57 = 2080;
          v58 = (char *)this + 16;
          v59 = 2080;
          v60 = v14;
          v61 = 2048;
          v62 = v34;
          v63 = 2048;
          v64 = v35;
          v65 = 2048;
          v66 = v36;
          v18 = MEMORY[0x1E0C81028];
          v19 = "%25s:%-5d  %s thread %llx: %s: arg1: %s arg2: %llu arg3: %llu arg4: %llu";
        }
        else
        {
          if (!v32)
            goto LABEL_20;
          v46 = *((_QWORD *)this + 35);
          v47 = *((_QWORD *)this + 36);
          v48 = *((_QWORD *)this + 37);
          v49 = *((_QWORD *)this + 38);
          v50 = *((_QWORD *)this + 39);
          *(_DWORD *)v52 = 136317186;
          *(_QWORD *)&v52[4] = "HALB_AsyncLog.cpp";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 170;
          v53 = 2080;
          v54 = __str;
          v55 = 2048;
          v56 = v46;
          v57 = 2080;
          v58 = (char *)this + 16;
          v59 = 2048;
          v60 = v47;
          v61 = 2048;
          v62 = v48;
          v63 = 2048;
          v64 = v49;
          v65 = 2048;
          v66 = v50;
          v18 = MEMORY[0x1E0C81028];
          v19 = "%25s:%-5d  %s thread %llx: %s: arg1: %llu arg2: %llu arg3: %llu arg4: %llu";
        }
        v20 = 88;
        break;
      default:
        goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_17:
  if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    goto LABEL_20;
  v17 = *((_QWORD *)this + 35);
  *(_DWORD *)v52 = 136316162;
  *(_QWORD *)&v52[4] = "HALB_AsyncLog.cpp";
  *(_WORD *)&v52[12] = 1024;
  *(_DWORD *)&v52[14] = 127;
  v53 = 2080;
  v54 = __str;
  v55 = 2048;
  v56 = v17;
  v57 = 2080;
  v58 = (char *)this + 16;
  v18 = MEMORY[0x1E0C81028];
  v19 = "%25s:%-5d  %s thread %llx: %s";
  v20 = 48;
LABEL_19:
  _os_log_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_DEFAULT, v19, v52, v20);
LABEL_20:
  v21 = *((_QWORD *)this + 41);
  if (v21)
  {
    v22 = atomic_load((unsigned __int8 *)(v21 + 32));
    if ((v22 & 1) != 0)
      OSAtomicEnqueue((OSQueueHead *)(v21 + 16), this, 0x150uLL);
    else
      (*(void (**)(HALB_AsyncLogMessage *))(*(_QWORD *)this + 8))(this);
  }
}

void sub_1B5BE93B8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t (**std::any_cast[abi:ne180100]<std::string const>(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
    else
      return 0;
  }
  return result;
}

void std::__throw_bad_any_cast[abi:ne180100]()
{
  std::bad_any_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_any_cast *)__cxa_allocate_exception(8uLL);
  exception->__vftable = 0;
  v1 = std::bad_any_cast::bad_any_cast(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E78], (void (*)(void *))std::bad_any_cast::~bad_any_cast);
}

uint64_t (**std::any_cast[abi:ne180100]<unsigned int const>(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, MEMORY[0x1E0DE4EF8], &std::__any_imp::__unique_typeinfo<unsigned int>::__id);
    else
      return 0;
  }
  return result;
}

std::bad_cast *std::bad_any_cast::bad_any_cast(std::bad_any_cast *this)
{
  std::bad_cast *result;

  result = std::bad_cast::bad_cast(this);
  result->__vftable = (std::bad_cast_vtbl *)(MEMORY[0x1E0DE5010] + 16);
  return result;
}

void HALB_CaptureFile_NameBuilder::FindAndBuild(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v5;
  const std::string::value_type **v6;
  __int128 v7;
  uint64_t (*v8)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, _QWORD, void *, void *);
  _DWORD *v11;
  BOOL v12;
  const char *v13;
  uint64_t v14;
  const std::string::value_type **v15;
  __int128 v16;
  const std::string::value_type **v17;
  __int128 v18;
  uint64_t (*v19)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, _QWORD, void *, void *);
  _DWORD *v22;
  uint64_t (*v23)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, _QWORD, void *, void *);
  _DWORD *v26;
  uint64_t v27;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  uint64_t v31;

  v5 = a1;
  v31 = *MEMORY[0x1E0C80C00];
  if (a1 != a2)
  {
    while (*(_DWORD *)v5 != a3)
    {
      v5 += 40;
      if (v5 == a2)
        return;
    }
  }
  if (v5 != a2)
  {
    switch(*(_DWORD *)v5)
    {
      case 0:
        v6 = (const std::string::value_type **)std::any_cast[abi:ne180100]<std::string const>((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(v5 + 8));
        if (!v6)
          std::__throw_bad_any_cast[abi:ne180100]();
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *v6, (std::string::size_type)v6[1]);
        }
        else
        {
          v7 = *(_OWORD *)v6;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v6[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        goto LABEL_61;
      case 1:
        v17 = (const std::string::value_type **)std::any_cast[abi:ne180100]<std::string const>((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(v5 + 8));
        if (!v17)
          std::__throw_bad_any_cast[abi:ne180100]();
        if (*((char *)v17 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *v17, (std::string::size_type)v17[1]);
        }
        else
        {
          v18 = *(_OWORD *)v17;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v17[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        goto LABEL_61;
      case 2:
        v10 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(v5 + 8);
        v9 = v5 + 8;
        v8 = v10;
        if (!v10)
          goto LABEL_67;
        if (!v11)
          goto LABEL_67;
        v12 = *v11 == 1;
        if (*v11 == 1)
          v13 = "-in";
        else
          v13 = "-out";
        v14 = 3;
        goto LABEL_37;
      case 3:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"-Index_", 7);
        goto LABEL_18;
      case 4:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"-", 1);
LABEL_18:
        if (!std::any_cast[abi:ne180100]<unsigned int const>((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(v5 + 8)))
          goto LABEL_67;
        std::ostream::operator<<();
        return;
      case 5:
        v21 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(v5 + 8);
        v20 = v5 + 8;
        v19 = v21;
        if (!v21)
          goto LABEL_67;
        if (!v22)
          goto LABEL_67;
        if (*v22 == 1)
        {
          v13 = "-software_reference";
        }
        else
        {
          if (*v22 != 2)
            return;
          v13 = "-hardware_reference";
        }
        v27 = 19;
LABEL_65:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v13, v27);
        break;
      case 6:
        v25 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(v5 + 8);
        v24 = v5 + 8;
        v23 = v25;
        if (!v25
        {
LABEL_67:
          std::__throw_bad_any_cast[abi:ne180100]();
        }
        v12 = *v26 == 0;
        if (*v26)
          v13 = "-PostDSP";
        else
          v13 = "-PreDSP";
        v14 = 7;
LABEL_37:
        if (v12)
          v27 = v14;
        else
          v27 = v14 + 1;
        goto LABEL_65;
      case 7:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"-", 1);
        v15 = (const std::string::value_type **)std::any_cast[abi:ne180100]<std::string const>((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(v5 + 8));
        if (!v15)
          std::__throw_bad_any_cast[abi:ne180100]();
        if (*((char *)v15 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *v15, (std::string::size_type)v15[1]);
        }
        else
        {
          v16 = *(_OWORD *)v15;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v15[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
LABEL_61:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        return;
      default:
        return;
    }
  }
}

void sub_1B5BE9818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, int a10, __int16 a11, char a12, char a13)
{
  if (a2)
  {
    if (a13 < 0)
      operator delete((void *)__p);
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p) = 136315394;
      *(_QWORD *)((char *)&__p + 4) = "HALB_CaptureFile_NameBuilder.cpp";
      WORD6(__p) = 1024;
      *(_DWORD *)((char *)&__p + 14) = 66;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_CaptureFile_NameBuilder::BuildOne: Caught exception", (uint8_t *)&__p, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5BE97CCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1B5BE98E4()
{
  JUMPOUT(0x1B5BE984CLL);
}

void _ZNSt3__16vectorIDv8_fNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_(_QWORD *a1, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  __int128 v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  char *v39;

  if (a3)
  {
    v4 = a4;
    v6 = __src;
    v9 = (char *)a1[1];
    v8 = a1[2];
    if (a3 <= (v8 - (uint64_t)v9) >> 5)
    {
      v15 = v9 - __src;
      v16 = (char *)a1[1];
      v17 = a3;
      if (a3 <= (v9 - __src) >> 5)
        goto LABEL_16;
      v18 = 0;
      v17 = v15 >> 5;
      v16 = &v9[32 * (a3 - (v15 >> 5))];
      v19 = 32 * a3 - 32 * (v15 >> 5);
      do
      {
        v20 = &v9[v18];
        v21 = *((_OWORD *)a4 + 1);
        *(_OWORD *)v20 = *(_OWORD *)a4;
        *((_OWORD *)v20 + 1) = v21;
        v18 += 32;
      }
      while (v19 != v18);
      a1[1] = v16;
      if (v9 != __src)
      {
LABEL_16:
        v22 = &__src[32 * a3];
        v23 = &v16[-32 * a3];
        v24 = v16;
        if (v23 < v9)
        {
          v24 = v16;
          do
          {
            v25 = *(_OWORD *)v23;
            v26 = *((_OWORD *)v23 + 1);
            v23 += 32;
            *(_OWORD *)v24 = v25;
            *((_OWORD *)v24 + 1) = v26;
            v24 += 32;
          }
          while (v23 < v9);
        }
        a1[1] = v24;
        if (v16 != v22)
          memmove(&v16[-32 * ((v16 - v22) >> 5)], __src, v16 - v22);
        if (v6 <= v4)
        {
          if (a1[1] <= (unint64_t)v4)
            v27 = 0;
          else
            v27 = a3;
          v4 += 32 * v27;
        }
        do
        {
          v28 = *((_OWORD *)v4 + 1);
          *(_OWORD *)v6 = *(_OWORD *)v4;
          *((_OWORD *)v6 + 1) = v28;
          v6 += 32;
          --v17;
        }
        while (v17);
      }
    }
    else
    {
      v10 = (char *)*a1;
      v11 = a3 + ((uint64_t)&v9[-*a1] >> 5);
      if (v11 >> 59)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)v10;
      if (v12 >> 4 > v11)
        v11 = v12 >> 4;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
        v13 = 0x7FFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        if (v13 >> 59)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v14 = (char *)operator new(32 * v13);
      }
      else
      {
        v14 = 0;
      }
      v29 = &v14[32 * ((v6 - v10) >> 5)];
      v30 = &v29[32 * a3];
      v31 = 32 * a3;
      v32 = v29;
      do
      {
        v33 = *((_OWORD *)v4 + 1);
        *(_OWORD *)v32 = *(_OWORD *)v4;
        *((_OWORD *)v32 + 1) = v33;
        v32 += 32;
        v31 -= 32;
      }
      while (v31);
      v34 = (char *)*a1;
      if ((char *)*a1 != v6)
      {
        v35 = v6;
        do
        {
          v36 = *((_OWORD *)v35 - 2);
          v37 = *((_OWORD *)v35 - 1);
          v35 -= 32;
          *((_OWORD *)v29 - 2) = v36;
          *((_OWORD *)v29 - 1) = v37;
          v29 -= 32;
        }
        while (v35 != v34);
        v9 = (char *)a1[1];
      }
      v38 = &v14[32 * v13];
      if (v9 != v6)
        memmove(v30, v6, v9 - v6);
      v39 = (char *)*a1;
      *a1 = v29;
      a1[1] = &v30[v9 - v6];
      a1[2] = v38;
      if (v39)
        operator delete(v39);
    }
  }
}

void ramstadPrecalculateCoeffs<float>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, float *a6, double a7)
{
  double v9;
  uint64_t v10;
  double *v11;
  double *v12;
  double *v13;
  long double v14;
  double v15;
  double v16;
  double v17;
  float v18;
  float v19;
  long double v20;
  double v21;
  long double v22;

  if (a1 >= 1)
  {
    v9 = a7 * 3.14159265;
    v10 = a1;
    v11 = (double *)(a2 + 8);
    v12 = (double *)(a3 + 8);
    v13 = (double *)(a4 + 176);
    do
    {
      v14 = v9 * *(v11 - 1);
      v15 = *v11;
      v11 += 2;
      v16 = v9 * v15;
      v17 = exp(v14);
      v18 = (v17 + v17) * cos(v9 * v15);
      *a5++ = v18;
      v19 = exp(v14 + v14);
      *a6++ = -v19;
      v20 = v9 * *(v12 - 1);
      v21 = *v12;
      v12 += 2;
      v22 = hypot(v20, v9 * v21);
      *(v13 - 22) = v22 + v22;
      *(v13 - 11) = atan2(v9 * v21, v20);
      *v13 = v14;
      v13[22] = v17;
      v13[11] = v16;
      ++v13;
      --v10;
    }
    while (v10);
  }
}

void ramstadBackEndCoeffs<float>(int a1, uint64_t a2, float *a3, _DWORD *a4, double a5)
{
  uint64_t v8;
  double *v9;
  double v10;
  long double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  long double v16;
  float v17;

  if (a1 >= 1)
  {
    v8 = a1;
    v9 = (double *)(a2 + 176);
    do
    {
      v10 = *(v9 - 22);
      v11 = v10 * exp(*v9 * a5);
      v12 = *(v9 - 11);
      v13 = v9[11];
      v14 = cos(v12 + v13 * a5);
      v15 = v9[22];
      v16 = cos(v12 - v13 + v13 * a5);
      v17 = v11 * v14;
      *a3++ = v17;
      *(float *)&v16 = v11 * -(v15 * v16);
      *a4++ = LODWORD(v16);
      ++v9;
      --v8;
    }
    while (v8);
  }
}

void _ZNSt3__16vectorIDv8_dNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_(_QWORD *a1, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  unint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  char *v48;

  if (a3)
  {
    v4 = a4;
    v6 = __src;
    v9 = (char *)a1[1];
    v8 = a1[2];
    if (a3 <= (v8 - (uint64_t)v9) >> 6)
    {
      v15 = v9 - __src;
      v16 = (char *)a1[1];
      v17 = a3;
      if (a3 <= (v9 - __src) >> 6)
        goto LABEL_16;
      v18 = 0;
      v17 = v15 >> 6;
      v16 = &v9[64 * (a3 - (v15 >> 6))];
      v19 = (a3 << 6) - (v15 >> 6 << 6);
      do
      {
        v20 = &v9[v18];
        v22 = *(_OWORD *)a4;
        v21 = *((_OWORD *)a4 + 1);
        v23 = *((_OWORD *)a4 + 3);
        *((_OWORD *)v20 + 2) = *((_OWORD *)a4 + 2);
        *((_OWORD *)v20 + 3) = v23;
        *(_OWORD *)v20 = v22;
        *((_OWORD *)v20 + 1) = v21;
        v18 += 64;
      }
      while (v19 != v18);
      a1[1] = v16;
      if (v9 != __src)
      {
LABEL_16:
        v24 = &__src[64 * a3];
        v25 = &v16[-64 * a3];
        v26 = v16;
        if (v25 < v9)
        {
          v26 = v16;
          do
          {
            v28 = *(_OWORD *)v25;
            v27 = *((_OWORD *)v25 + 1);
            v29 = *((_OWORD *)v25 + 3);
            *((_OWORD *)v26 + 2) = *((_OWORD *)v25 + 2);
            *((_OWORD *)v26 + 3) = v29;
            *(_OWORD *)v26 = v28;
            *((_OWORD *)v26 + 1) = v27;
            v26 += 64;
            v25 += 64;
          }
          while (v25 < v9);
        }
        a1[1] = v26;
        if (v16 != v24)
          memmove(&v16[-64 * ((v16 - v24) >> 6)], __src, v16 - v24);
        if (v6 <= v4)
        {
          if (a1[1] <= (unint64_t)v4)
            v30 = 0;
          else
            v30 = a3;
          v4 += 64 * v30;
        }
        do
        {
          v32 = *(_OWORD *)v4;
          v31 = *((_OWORD *)v4 + 1);
          v33 = *((_OWORD *)v4 + 3);
          *((_OWORD *)v6 + 2) = *((_OWORD *)v4 + 2);
          *((_OWORD *)v6 + 3) = v33;
          *(_OWORD *)v6 = v32;
          *((_OWORD *)v6 + 1) = v31;
          v6 += 64;
          --v17;
        }
        while (v17);
      }
    }
    else
    {
      v10 = (char *)*a1;
      v11 = a3 + ((uint64_t)&v9[-*a1] >> 6);
      if (v11 >> 58)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)v10;
      if (v12 >> 5 > v11)
        v11 = v12 >> 5;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0)
        v13 = 0x3FFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        if (v13 >> 58)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v14 = (char *)operator new(v13 << 6);
      }
      else
      {
        v14 = 0;
      }
      v34 = &v14[64 * ((v6 - v10) >> 6)];
      v35 = &v34[64 * a3];
      v36 = a3 << 6;
      v37 = v34;
      do
      {
        v39 = *(_OWORD *)v4;
        v38 = *((_OWORD *)v4 + 1);
        v40 = *((_OWORD *)v4 + 3);
        *((_OWORD *)v37 + 2) = *((_OWORD *)v4 + 2);
        *((_OWORD *)v37 + 3) = v40;
        *(_OWORD *)v37 = v39;
        *((_OWORD *)v37 + 1) = v38;
        v37 += 64;
        v36 -= 64;
      }
      while (v36);
      v41 = (char *)*a1;
      if ((char *)*a1 != v6)
      {
        v42 = v6;
        do
        {
          v43 = *((_OWORD *)v42 - 4);
          v42 -= 64;
          v45 = *((_OWORD *)v42 + 2);
          v44 = *((_OWORD *)v42 + 3);
          v46 = *((_OWORD *)v42 + 1);
          *((_OWORD *)v34 - 4) = v43;
          v34 -= 64;
          *((_OWORD *)v34 + 2) = v45;
          *((_OWORD *)v34 + 3) = v44;
          *((_OWORD *)v34 + 1) = v46;
        }
        while (v42 != v41);
        v9 = (char *)a1[1];
      }
      v47 = &v14[64 * v13];
      if (v9 != v6)
        memmove(v35, v6, v9 - v6);
      v48 = (char *)*a1;
      *a1 = v34;
      a1[1] = &v35[v9 - v6];
      a1[2] = v47;
      if (v48)
        operator delete(v48);
    }
  }
}

void ramstadPrecalculateCoeffs<double>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, long double *a5, long double *a6, double a7)
{
  double v9;
  uint64_t v10;
  double *v11;
  double *v12;
  double *v13;
  long double v14;
  double v15;
  double v16;
  double v17;
  long double v18;
  double v19;
  long double v20;

  if (a1 >= 1)
  {
    v9 = a7 * 3.14159265;
    v10 = a1;
    v11 = (double *)(a2 + 8);
    v12 = (double *)(a3 + 8);
    v13 = (double *)(a4 + 176);
    do
    {
      v14 = v9 * *(v11 - 1);
      v15 = *v11;
      v11 += 2;
      v16 = v9 * v15;
      v17 = exp(v14);
      *a5++ = (v17 + v17) * cos(v9 * v15);
      *a6++ = -exp(v14 + v14);
      v18 = v9 * *(v12 - 1);
      v19 = *v12;
      v12 += 2;
      v20 = hypot(v18, v9 * v19);
      *(v13 - 22) = v20 + v20;
      *(v13 - 11) = atan2(v9 * v19, v18);
      *v13 = v14;
      v13[22] = v17;
      v13[11] = v16;
      ++v13;
      --v10;
    }
    while (v10);
  }
}

void ramstadBackEndCoeffs<double>(int a1, uint64_t a2, double *a3, double *a4, double a5)
{
  uint64_t v8;
  double *v9;
  double v10;
  long double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  long double v16;

  if (a1 >= 1)
  {
    v8 = a1;
    v9 = (double *)(a2 + 176);
    do
    {
      v10 = *(v9 - 22);
      v11 = v10 * exp(*v9 * a5);
      v12 = *(v9 - 11);
      v13 = v9[11];
      v14 = cos(v12 + v13 * a5);
      v15 = v9[22];
      v16 = cos(v12 - v13 + v13 * a5);
      *a3++ = v11 * v14;
      *a4++ = v11 * -(v15 * v16);
      ++v9;
      --v8;
    }
    while (v8);
  }
}

char *std::vector<float>::assign(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 2;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 2;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_DWORD *)v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      v17 = &v13[4 * (a2 - v14)];
      v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    v8 = v6 >> 1;
    if (v6 >> 1 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[4 * a2];
    v12 = 4 * a2;
    do
    {
      *(_DWORD *)v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

unint64_t boost::container::flat_map<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>,std::less<std::tuple<int,int,double,BOOL>>,void>::priv_subscript(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 v7;
  const char *v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  const char *v25;
  int v26;
  const char *v27;
  const char *v28;
  char *v29;
  unint64_t v30;
  const char *v31;
  __int128 v32;
  uint64_t v33;
  std::__shared_weak_count *v34[2];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v1 = qword_1EF130A78;
  v2 = qword_1EF130A80;
  if (qword_1EF130A78)
    v3 = 1;
  else
    v3 = qword_1EF130A80 == 0;
  if (!v3)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v5 = qword_1EF130A78;
  if (qword_1EF130A80)
  {
    v5 = qword_1EF130A78;
    v6 = qword_1EF130A80;
    do
    {
      if (v6 != 1 && !v5)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!v5)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v7 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>(v5 + 40 * (v6 >> 1), a1);
      if (v7 != 129 && (v7 & 0x80u) != 0)
      {
        v5 += 40 * (v6 >> 1) + 40;
        v6 += ~(v6 >> 1);
      }
      else
      {
        v6 >>= 1;
      }
    }
    while (v6);
  }
  v8 = (const char *)(v1 + 40 * v2);
  if ((const char *)v5 == v8)
    goto LABEL_19;
  if (!v5)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  v9 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>(a1, v5);
  if (v9 != 129 && (char)v9 < 0)
  {
LABEL_19:
    v32 = *(_OWORD *)a1;
    v10 = *(_QWORD *)(a1 + 16);
    v34[0] = 0;
    v34[1] = 0;
    v33 = v10;
    if (v1 > v5 || v5 > (unint64_t)v8)
    {
      v25 = "this->priv_in_range_or_end(hint)";
      v26 = 879;
      v27 = "flat_tree.hpp";
      v28 = "insert_unique";
      goto LABEL_66;
    }
    v29 = 0;
    if ((const char *)v5 != v8)
    {
      if (!v5)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v12 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>((uint64_t)&v32, v5);
      if (v12 == 129 || ((char)v12 & 0x80000000) == 0)
      {
        v30 = v1 + 40 * v2;
        if (!boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>,boost::container::dtl::select1st<std::tuple<int,int,double,BOOL>>,std::less<std::tuple<int,int,double,BOOL>>,boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>>>::priv_insert_unique_prepare(v5, &v30, (uint64_t)&v32, (uint64_t *)&v29))goto LABEL_51;
LABEL_37:
        v15 = v29;
        v16 = qword_1EF130A78;
        if (qword_1EF130A78 > (unint64_t)v29)
          goto LABEL_63;
        v17 = qword_1EF130A80;
        if (!qword_1EF130A78 && qword_1EF130A80)
          __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
        v18 = qword_1EF130A78 + 40 * qword_1EF130A80;
        if ((unint64_t)v29 > v18)
        {
LABEL_63:
          v25 = "this->priv_in_range_or_end(position)";
          v26 = 1862;
          v27 = "vector.hpp";
          v28 = "emplace";
        }
        else
        {
          if (qword_1EF130A88 >= (unint64_t)qword_1EF130A80)
          {
            if (qword_1EF130A88 == qword_1EF130A80)
            {
              boost::container::vector<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>,boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>>,boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>*,boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>>>(&v31, v29, &v32);
            }
            else
            {
              if ((char *)v18 == v29)
              {
                v23 = v32;
                *((_QWORD *)v29 + 2) = v33;
                *(_OWORD *)v15 = v23;
                *(_OWORD *)(v16 + 40 * v17 + 24) = *(_OWORD *)v34;
                v34[0] = 0;
                v34[1] = 0;
                ++qword_1EF130A80;
              }
              else
              {
                v19 = v18 - 40;
                *(_OWORD *)v18 = *(_OWORD *)(v18 - 40);
                *(_QWORD *)(v18 + 16) = *(_QWORD *)(v18 - 24);
                *(_OWORD *)(v16 + 40 * v17 + 24) = *(_OWORD *)(v18 - 16);
                *(_QWORD *)(v18 - 16) = 0;
                *(_QWORD *)(v18 - 8) = 0;
                ++qword_1EF130A80;
                if ((char *)(v18 - 40) != v15)
                {
                  do
                  {
                    v20 = (char *)(v19 - 40);
                    boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>::operator=(v19, v19 - 40);
                    v19 = (uint64_t)v20;
                  }
                  while (v20 != v15);
                }
                *(_OWORD *)v15 = v32;
                v15[16] = v33;
                v21 = *(_OWORD *)v34;
                v34[0] = 0;
                v34[1] = 0;
                v22 = (std::__shared_weak_count *)*((_QWORD *)v15 + 4);
                *(_OWORD *)(v15 + 24) = v21;
                if (v22)
                  std::__shared_weak_count::__release_weak(v22);
              }
              v31 = v15;
            }
            goto LABEL_54;
          }
          v25 = "this->m_holder.capacity() >= this->m_holder.m_size";
          v26 = 2821;
          v27 = "vector.hpp";
          v28 = "priv_insert_forward_range";
        }
LABEL_66:
        __assert_rtn(v28, v27, v26, v25);
      }
      v8 = (const char *)v5;
    }
    v29 = (char *)v8;
    if (v8 != (const char *)v1)
    {
      if (!v8)
        __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
      v13 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>((uint64_t)(v8 - 40), (uint64_t)&v32);
      if (v13 == 129 || ((char)v13 & 0x80000000) == 0)
      {
        v14 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>((uint64_t)&v32, (uint64_t)(v8 - 40));
        if (v14 == 129 || ((char)v14 & 0x80000000) == 0)
        {
          v29 = (char *)(v8 - 40);
          goto LABEL_51;
        }
        v31 = v8 - 40;
        if (!boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>,boost::container::dtl::select1st<std::tuple<int,int,double,BOOL>>,std::less<std::tuple<int,int,double,BOOL>>,boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>>>::priv_insert_unique_prepare(v1, &v31, (uint64_t)&v32, (uint64_t *)&v29))
        {
LABEL_51:
          if (!qword_1EF130A78 && v29)
            __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
          v31 = v29;
LABEL_54:
          if (v34[1])
            std::__shared_weak_count::__release_weak(v34[1]);
          v5 = (unint64_t)v31;
          if (!v31)
            __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
          return v5 + 24;
        }
      }
    }
    goto LABEL_37;
  }
  return v5 + 24;
}

void sub_1B5BEA69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void std::__shared_ptr_emplace<RamstadKernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6996458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RamstadKernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6996458;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<RamstadKernel>::__on_zero_shared(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  BOOL v5;
  double v6;
  double v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;

  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    v2 = 0xFFFFFFFFLL;
  else
    v2 = 1;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    v3 = *(_DWORD *)(a1 + 4);
    v4 = *(_DWORD *)(a2 + 4);
    v5 = v3 == v4;
    v2 = v3 < v4 ? 0xFFFFFFFFLL : 1;
    if (v5)
    {
      v6 = *(double *)(a1 + 8);
      v7 = *(double *)(a2 + 8);
      if (v6 == v7)
        LODWORD(v2) = 0;
      else
        LODWORD(v2) = -127;
      if (v6 > v7)
        LODWORD(v2) = 1;
      if (v6 < v7)
        v2 = 0xFFFFFFFFLL;
      else
        v2 = v2;
      if (!(_DWORD)v2)
      {
        v8 = *(unsigned __int8 *)(a1 + 16);
        v9 = *(unsigned __int8 *)(a2 + 16);
        v10 = v8 == v9;
        if (v8 < v9)
          LODWORD(v2) = -1;
        else
          LODWORD(v2) = 1;
        if (v10)
          return 0;
        else
          return v2;
      }
    }
  }
  return v2;
}

uint64_t boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v3;
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void boost::container::vector<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>,boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>>,boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>*,boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>>>(_QWORD *a1, const char *a2, __int128 *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  const char *v19;
  __int128 v20;
  uint64_t v21;
  std::__shared_weak_count **v22;

  if (qword_1EF130A88 != qword_1EF130A80)
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  if (qword_1EF130A88 == 0x333333333333333)
    goto LABEL_30;
  if ((unint64_t)qword_1EF130A88 >> 61 > 4)
    v3 = -1;
  else
    v3 = 8 * qword_1EF130A88;
  if ((unint64_t)qword_1EF130A88 >> 61)
    v4 = v3;
  else
    v4 = 8 * qword_1EF130A88 / 5uLL;
  if (v4 >= 0x333333333333333)
    v4 = 0x333333333333333;
  v5 = qword_1EF130A88 + 1 > v4 ? qword_1EF130A88 + 1 : v4;
  if (v5 > 0x333333333333333)
LABEL_30:
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  v9 = qword_1EF130A78;
  v10 = (char *)operator new(40 * v5);
  v11 = (uint64_t)v10;
  v12 = qword_1EF130A78;
  v13 = qword_1EF130A78 + 40 * qword_1EF130A80;
  v14 = v10;
  if ((const char *)qword_1EF130A78 != a2)
  {
    v15 = qword_1EF130A78;
    v14 = v10;
    do
    {
      v16 = *(_OWORD *)v15;
      *((_QWORD *)v14 + 2) = *(_QWORD *)(v15 + 16);
      *(_OWORD *)v14 = v16;
      *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0;
      v14 += 40;
      v15 += 40;
    }
    while ((const char *)v15 != a2);
  }
  v17 = *a3;
  *((_QWORD *)v14 + 2) = *((_QWORD *)a3 + 2);
  *(_OWORD *)v14 = v17;
  *(_OWORD *)(v14 + 24) = *(__int128 *)((char *)a3 + 24);
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 4) = 0;
  if ((const char *)v13 != a2)
  {
    v18 = v14 + 64;
    v19 = a2;
    do
    {
      v20 = *(_OWORD *)v19;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v19 + 2);
      *(_OWORD *)((char *)v18 - 24) = v20;
      *v18 = *(_OWORD *)(v19 + 24);
      v18 = (_OWORD *)((char *)v18 + 40);
      *((_QWORD *)v19 + 3) = 0;
      *((_QWORD *)v19 + 4) = 0;
      v19 += 40;
    }
    while (v19 != (const char *)v13);
  }
  if (v12)
  {
    v21 = qword_1EF130A80;
    if (qword_1EF130A80)
    {
      v22 = (std::__shared_weak_count **)(v12 + 32);
      do
      {
        if (*v22)
          std::__shared_weak_count::__release_weak(*v22);
        v22 += 5;
        --v21;
      }
      while (v21);
    }
    operator delete((void *)qword_1EF130A78);
  }
  qword_1EF130A78 = v11;
  ++qword_1EF130A80;
  qword_1EF130A88 = v5;
  *a1 = &a2[v11 - v9];
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>,boost::container::dtl::select1st<std::tuple<int,int,double,BOOL>>,std::less<std::tuple<int,int,double,BOOL>>,boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>>>::priv_insert_unique_prepare(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v7 = a1;
  if (*a2 != a1)
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((*a2 - a1) >> 3);
    do
    {
      if (v8 != 1 && !v7)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!v7)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v9 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>(v7 + 40 * (v8 >> 1), a3);
      if (v9 != 129 && (v9 & 0x80u) != 0)
      {
        v7 += 40 * (v8 >> 1) + 40;
        v8 += ~(v8 >> 1);
      }
      else
      {
        v8 >>= 1;
      }
    }
    while (v8);
  }
  *a4 = v7;
  if (v7 == *a2)
    return 1;
  if (!v7)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  v10 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>(a3, v7);
  return v10 != 129 && (v10 & 0x80u) != 0;
}

unint64_t boost::container::flat_map<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>,std::less<std::tuple<int,int,double,BOOL>>,void>::priv_subscript(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 v7;
  const char *v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  const char *v25;
  int v26;
  const char *v27;
  const char *v28;
  char *v29;
  unint64_t v30;
  const char *v31;
  __int128 v32;
  uint64_t v33;
  std::__shared_weak_count *v34[2];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v1 = qword_1EF130A18;
  v2 = qword_1EF130A20;
  if (qword_1EF130A18)
    v3 = 1;
  else
    v3 = qword_1EF130A20 == 0;
  if (!v3)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v5 = qword_1EF130A18;
  if (qword_1EF130A20)
  {
    v5 = qword_1EF130A18;
    v6 = qword_1EF130A20;
    do
    {
      if (v6 != 1 && !v5)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!v5)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v7 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>(v5 + 40 * (v6 >> 1), a1);
      if (v7 != 129 && (v7 & 0x80u) != 0)
      {
        v5 += 40 * (v6 >> 1) + 40;
        v6 += ~(v6 >> 1);
      }
      else
      {
        v6 >>= 1;
      }
    }
    while (v6);
  }
  v8 = (const char *)(v1 + 40 * v2);
  if ((const char *)v5 == v8)
    goto LABEL_19;
  if (!v5)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  v9 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>(a1, v5);
  if (v9 != 129 && (char)v9 < 0)
  {
LABEL_19:
    v32 = *(_OWORD *)a1;
    v10 = *(_QWORD *)(a1 + 16);
    v34[0] = 0;
    v34[1] = 0;
    v33 = v10;
    if (v1 > v5 || v5 > (unint64_t)v8)
    {
      v25 = "this->priv_in_range_or_end(hint)";
      v26 = 879;
      v27 = "flat_tree.hpp";
      v28 = "insert_unique";
      goto LABEL_66;
    }
    v29 = 0;
    if ((const char *)v5 != v8)
    {
      if (!v5)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v12 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>((uint64_t)&v32, v5);
      if (v12 == 129 || ((char)v12 & 0x80000000) == 0)
      {
        v30 = v1 + 40 * v2;
        if (!boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>,boost::container::dtl::select1st<std::tuple<int,int,double,BOOL>>,std::less<std::tuple<int,int,double,BOOL>>,boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>>>::priv_insert_unique_prepare(v5, &v30, (uint64_t)&v32, (uint64_t *)&v29))goto LABEL_51;
LABEL_37:
        v15 = v29;
        v16 = qword_1EF130A18;
        if (qword_1EF130A18 > (unint64_t)v29)
          goto LABEL_63;
        v17 = qword_1EF130A20;
        if (!qword_1EF130A18 && qword_1EF130A20)
          __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
        v18 = qword_1EF130A18 + 40 * qword_1EF130A20;
        if ((unint64_t)v29 > v18)
        {
LABEL_63:
          v25 = "this->priv_in_range_or_end(position)";
          v26 = 1862;
          v27 = "vector.hpp";
          v28 = "emplace";
        }
        else
        {
          if (qword_1EF130A28 >= (unint64_t)qword_1EF130A20)
          {
            if (qword_1EF130A28 == qword_1EF130A20)
            {
              boost::container::vector<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>,boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>>,boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>*,boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>>>(&v31, v29, &v32);
            }
            else
            {
              if ((char *)v18 == v29)
              {
                v23 = v32;
                *((_QWORD *)v29 + 2) = v33;
                *(_OWORD *)v15 = v23;
                *(_OWORD *)(v16 + 40 * v17 + 24) = *(_OWORD *)v34;
                v34[0] = 0;
                v34[1] = 0;
                ++qword_1EF130A20;
              }
              else
              {
                v19 = v18 - 40;
                *(_OWORD *)v18 = *(_OWORD *)(v18 - 40);
                *(_QWORD *)(v18 + 16) = *(_QWORD *)(v18 - 24);
                *(_OWORD *)(v16 + 40 * v17 + 24) = *(_OWORD *)(v18 - 16);
                *(_QWORD *)(v18 - 16) = 0;
                *(_QWORD *)(v18 - 8) = 0;
                ++qword_1EF130A20;
                if ((char *)(v18 - 40) != v15)
                {
                  do
                  {
                    v20 = (char *)(v19 - 40);
                    boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>::operator=(v19, v19 - 40);
                    v19 = (uint64_t)v20;
                  }
                  while (v20 != v15);
                }
                *(_OWORD *)v15 = v32;
                v15[16] = v33;
                v21 = *(_OWORD *)v34;
                v34[0] = 0;
                v34[1] = 0;
                v22 = (std::__shared_weak_count *)*((_QWORD *)v15 + 4);
                *(_OWORD *)(v15 + 24) = v21;
                if (v22)
                  std::__shared_weak_count::__release_weak(v22);
              }
              v31 = v15;
            }
            goto LABEL_54;
          }
          v25 = "this->m_holder.capacity() >= this->m_holder.m_size";
          v26 = 2821;
          v27 = "vector.hpp";
          v28 = "priv_insert_forward_range";
        }
LABEL_66:
        __assert_rtn(v28, v27, v26, v25);
      }
      v8 = (const char *)v5;
    }
    v29 = (char *)v8;
    if (v8 != (const char *)v1)
    {
      if (!v8)
        __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
      v13 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>((uint64_t)(v8 - 40), (uint64_t)&v32);
      if (v13 == 129 || ((char)v13 & 0x80000000) == 0)
      {
        v14 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>((uint64_t)&v32, (uint64_t)(v8 - 40));
        if (v14 == 129 || ((char)v14 & 0x80000000) == 0)
        {
          v29 = (char *)(v8 - 40);
          goto LABEL_51;
        }
        v31 = v8 - 40;
        if (!boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>,boost::container::dtl::select1st<std::tuple<int,int,double,BOOL>>,std::less<std::tuple<int,int,double,BOOL>>,boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>>>::priv_insert_unique_prepare(v1, &v31, (uint64_t)&v32, (uint64_t *)&v29))
        {
LABEL_51:
          if (!qword_1EF130A18 && v29)
            __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
          v31 = v29;
LABEL_54:
          if (v34[1])
            std::__shared_weak_count::__release_weak(v34[1]);
          v5 = (unint64_t)v31;
          if (!v31)
            __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
          return v5 + 24;
        }
      }
    }
    goto LABEL_37;
  }
  return v5 + 24;
}

void sub_1B5BEB08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void std::__shared_ptr_emplace<RamstadKernelD>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6996408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RamstadKernelD>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6996408;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<RamstadKernelD>::__on_zero_shared(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
}

void boost::container::vector<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>,boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>>,boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>*,boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>>>(_QWORD *a1, const char *a2, __int128 *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  const char *v19;
  __int128 v20;
  uint64_t v21;
  std::__shared_weak_count **v22;

  if (qword_1EF130A28 != qword_1EF130A20)
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  if (qword_1EF130A28 == 0x333333333333333)
    goto LABEL_30;
  if ((unint64_t)qword_1EF130A28 >> 61 > 4)
    v3 = -1;
  else
    v3 = 8 * qword_1EF130A28;
  if ((unint64_t)qword_1EF130A28 >> 61)
    v4 = v3;
  else
    v4 = 8 * qword_1EF130A28 / 5uLL;
  if (v4 >= 0x333333333333333)
    v4 = 0x333333333333333;
  v5 = qword_1EF130A28 + 1 > v4 ? qword_1EF130A28 + 1 : v4;
  if (v5 > 0x333333333333333)
LABEL_30:
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  v9 = qword_1EF130A18;
  v10 = (char *)operator new(40 * v5);
  v11 = (uint64_t)v10;
  v12 = qword_1EF130A18;
  v13 = qword_1EF130A18 + 40 * qword_1EF130A20;
  v14 = v10;
  if ((const char *)qword_1EF130A18 != a2)
  {
    v15 = qword_1EF130A18;
    v14 = v10;
    do
    {
      v16 = *(_OWORD *)v15;
      *((_QWORD *)v14 + 2) = *(_QWORD *)(v15 + 16);
      *(_OWORD *)v14 = v16;
      *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0;
      v14 += 40;
      v15 += 40;
    }
    while ((const char *)v15 != a2);
  }
  v17 = *a3;
  *((_QWORD *)v14 + 2) = *((_QWORD *)a3 + 2);
  *(_OWORD *)v14 = v17;
  *(_OWORD *)(v14 + 24) = *(__int128 *)((char *)a3 + 24);
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 4) = 0;
  if ((const char *)v13 != a2)
  {
    v18 = v14 + 64;
    v19 = a2;
    do
    {
      v20 = *(_OWORD *)v19;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v19 + 2);
      *(_OWORD *)((char *)v18 - 24) = v20;
      *v18 = *(_OWORD *)(v19 + 24);
      v18 = (_OWORD *)((char *)v18 + 40);
      *((_QWORD *)v19 + 3) = 0;
      *((_QWORD *)v19 + 4) = 0;
      v19 += 40;
    }
    while (v19 != (const char *)v13);
  }
  if (v12)
  {
    v21 = qword_1EF130A20;
    if (qword_1EF130A20)
    {
      v22 = (std::__shared_weak_count **)(v12 + 32);
      do
      {
        if (*v22)
          std::__shared_weak_count::__release_weak(*v22);
        v22 += 5;
        --v21;
      }
      while (v21);
    }
    operator delete((void *)qword_1EF130A18);
  }
  qword_1EF130A18 = v11;
  ++qword_1EF130A20;
  qword_1EF130A28 = v5;
  *a1 = &a2[v11 - v9];
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>,boost::container::dtl::select1st<std::tuple<int,int,double,BOOL>>,std::less<std::tuple<int,int,double,BOOL>>,boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>>>::priv_insert_unique_prepare(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v7 = a1;
  if (*a2 != a1)
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((*a2 - a1) >> 3);
    do
    {
      if (v8 != 1 && !v7)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!v7)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v9 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>(v7 + 40 * (v8 >> 1), a3);
      if (v9 != 129 && (v9 & 0x80u) != 0)
      {
        v7 += 40 * (v8 >> 1) + 40;
        v8 += ~(v8 >> 1);
      }
      else
      {
        v8 >>= 1;
      }
    }
    while (v8);
  }
  *a4 = v7;
  if (v7 == *a2)
    return 1;
  if (!v7)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  v10 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>(a3, v7);
  return v10 != 129 && (v10 & 0x80u) != 0;
}

void RamstadSRC::RamstadSRC(RamstadSRC *this, double a2, double a3, unsigned int a4, unsigned int a5, double a6)
{
  _QWORD *v7;
  int v8;
  double v9;
  double v10;
  uint64_t v11;
  signed int v12;
  double v13;
  unint64_t v14;
  unsigned __int8 v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  BOOL v29;
  unsigned __int8 v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  BOOL v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  __int128 v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  __int128 v52;
  char *v53;
  char *v54;
  char *v55;
  double v56;
  double **v57;
  int v58;
  double *v59;
  double v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  double v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  double v81;
  char **v82;
  int v83;
  char *v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  __int128 v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  int v111;
  int v112;
  double v113;
  char v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((double *)this + 4) = a2;
  *((double *)this + 5) = a3;
  *((_OWORD *)this + 7) = 0u;
  v7 = (_QWORD *)((char *)this + 112);
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  if (a5 >= 0x40)
    v8 = 11;
  else
    v8 = 8;
  v9 = dbl_1B5D68E00[a5 == 33];
  *((_BYTE *)this + 93) = a5 > 0x5F;
  *((double *)this + 13) = v9;
  v10 = a2 / a3;
  *((_QWORD *)this + 12) = 0x3E80000000000000;
  *((_BYTE *)this + 92) = 0;
  *((_DWORD *)this + 12) = a4;
  *((_DWORD *)this + 13) = 256;
  v11 = vcvtmd_s64_f64(v10);
  *((_DWORD *)this + 14) = v8;
  *((_DWORD *)this + 15) = v11;
  v12 = vcvtmd_s64_f64((v10 - floor(v10)) * 2147483650.0);
  *((_QWORD *)this + 10) = (v11 << 32 >> 1) + v12;
  *((_QWORD *)this + 32) = -1;
  *((_DWORD *)this + 66) = -1;
  *((_DWORD *)this + 17) = v12;
  *((_DWORD *)this + 18) = 0;
  *((_DWORD *)this + 22) = 1;
  v13 = fmin(0.9999 / v10, 1.0) * v9;
  if (a5 >= 0x40)
    v14 = (3 * a4 + 1) >> 1;
  else
    v14 = a4;
  if (a5 < 0x60)
  {
    v103 = 0uLL;
    v104 = 0uLL;
    _ZNSt3__16vectorIDv8_fNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_(v7, 0, v14, (char *)&v103);
    _ZNSt3__16vectorIDv8_fNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_((_QWORD *)this + 17, *((char **)this + 17), v14, (char *)&v103);
    {
      GetKernelFactory(void)::sFactory.__m_.__sig = 850045863;
      *(_OWORD *)GetKernelFactory(void)::sFactory.__m_.__opaque = 0u;
      *(_OWORD *)&GetKernelFactory(void)::sFactory.__m_.__opaque[16] = 0u;
      *(_OWORD *)&GetKernelFactory(void)::sFactory.__m_.__opaque[32] = 0u;
      *(_OWORD *)&GetKernelFactory(void)::sFactory.__m_.__opaque[48] = 0u;
      *(_OWORD *)&qword_1EF130A80 = 0u;
    }
    v32 = *((_DWORD *)this + 13);
    v31 = *((_DWORD *)this + 14);
    v33 = *((unsigned __int8 *)this + 92);
    std::mutex::lock(&GetKernelFactory(void)::sFactory);
    v34 = v33 ^ 1;
    v36 = qword_1EF130A78;
    v35 = qword_1EF130A80;
    v37 = qword_1EF130A78;
    if (!qword_1EF130A78 && qword_1EF130A80)
LABEL_51:
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    while (1)
    {
      v38 = v36 + 40 * v35;
      if (v37 == v38)
        break;
      v39 = *(_QWORD *)(v37 + 32);
      if (!v39 || *(_QWORD *)(v39 + 8) == -1)
      {
        if (v36 > v37)
          goto LABEL_109;
        if (!v36 && v35)
          __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
        if (v37 >= v38)
LABEL_109:
          __assert_rtn("erase", "vector.hpp", 2092, "this->priv_in_range(position)");
        if (v37 + 40 != v38)
        {
          v40 = v37;
          do
          {
            v41 = v40 + 40;
            v42 = boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>::operator=(v40, v40 + 40)+ 80;
            v40 = v41;
          }
          while (v42 != v38);
        }
        v43 = *(std::__shared_weak_count **)(v38 - 8);
        if (v43)
          std::__shared_weak_count::__release_weak(v43);
        v36 = qword_1EF130A78;
        v35 = --qword_1EF130A80;
      }
      else
      {
        v37 += 40;
      }
      if (v36)
        v44 = 1;
      else
        v44 = v35 == 0;
      if (!v44)
        goto LABEL_51;
    }
    v111 = v31;
    v112 = v32;
    v113 = v13;
    v114 = v34;
    v49 = (_QWORD *)boost::container::flat_map<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>,std::less<std::tuple<int,int,double,BOOL>>,void>::priv_subscript((uint64_t)&v111);
    v50 = (std::__shared_weak_count *)v49[1];
    if (v50)
    {
      v51 = std::__shared_weak_count::lock(v50);
      *((_QWORD *)&v52 + 1) = v51;
      if (v51)
      {
        *(_QWORD *)&v52 = *v49;
        v100 = v51;
        v102 = v52;
        if (*v49)
        {
LABEL_102:
          std::mutex::unlock(&GetKernelFactory(void)::sFactory);
          v75 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
          *(_OWORD *)this = v102;
          if (!v75)
            goto LABEL_107;
          p_shared_owners = (unint64_t *)&v75->__shared_owners_;
          do
            v77 = __ldaxr(p_shared_owners);
          while (__stlxr(v77 - 1, p_shared_owners));
          goto LABEL_105;
        }
LABEL_85:
        v78 = (char *)operator new(0x58uLL);
        v79 = v78;
        *((_QWORD *)v78 + 1) = 0;
        *((_QWORD *)v78 + 2) = 0;
        *(_QWORD *)v78 = &off_1E6996458;
        *((double *)v78 + 3) = v13;
        v80 = v78 + 24;
        v81 = 1.0 / (double)v32;
        *(_OWORD *)(v78 + 40) = 0u;
        *((_DWORD *)v78 + 8) = v31;
        *((_DWORD *)v78 + 9) = v32;
        *(_OWORD *)(v78 + 56) = 0u;
        *(_OWORD *)(v78 + 72) = 0u;
        v107 = 0u;
        v108 = 0u;
        v142 = 0;
        v140 = 0u;
        v141 = 0u;
        v138 = 0u;
        v139 = 0u;
        v82 = (char **)(v78 + 64);
        v136 = 0u;
        v137 = 0u;
        v134 = 0u;
        v135 = 0u;
        v132 = 0u;
        v133 = 0u;
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v122 = 0u;
        v123 = 0u;
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v116 = 0u;
        v117 = 0u;
        v83 = v32 + v34;
        v115 = 0u;
        if (v31 > 10)
        {
          *((_DWORD *)v78 + 8) = 11;
          _ZNSt3__16vectorIDv8_fNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_((_QWORD *)v78 + 5, 0, 4uLL, (char *)&v107);
          _ZNSt3__16vectorIDv8_fNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_(v82, *v82, 4 * v83, (char *)&v107);
          v86 = *((_QWORD *)v79 + 5);
          ramstadPrecalculateCoeffs<float>(*((_DWORD *)v79 + 8), (uint64_t)&kRamstadASRCPoles22, (uint64_t)&kRamstadASRCResidues22, (uint64_t)&v115, (float *)v86, (float *)(v86 + 64), *((double *)v79 + 3));
          *(_OWORD *)(v86 + 48) = *(_OWORD *)(v86 + 32);
          *(_OWORD *)(v86 + 112) = *(_OWORD *)(v86 + 96);
          if (v83 >= 1)
          {
            v87 = (uint64_t)(*v82 + 64);
            v88 = 0.0;
            do
            {
              ramstadBackEndCoeffs<float>(*((_DWORD *)v79 + 8), (uint64_t)&v115, (float *)(v87 - 64), (_DWORD *)v87, v88);
              *(_OWORD *)(v87 - 16) = *(_OWORD *)(v87 - 32);
              *(_OWORD *)(v87 + 48) = *(_OWORD *)(v87 + 32);
              v87 += 128;
              v88 = v81 + v88;
              --v83;
            }
            while (v83);
          }
        }
        else
        {
          *((_DWORD *)v78 + 8) = 8;
          _ZNSt3__16vectorIDv8_fNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_((_QWORD *)v78 + 5, 0, 2uLL, (char *)&v107);
          _ZNSt3__16vectorIDv8_fNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_(v82, *v82, 2 * v83, (char *)&v107);
          ramstadPrecalculateCoeffs<float>(*((_DWORD *)v79 + 8), (uint64_t)&kRamstadASRCPoles16, (uint64_t)&kRamstadASRCResidues16, (uint64_t)&v115, *((float **)v79 + 5), (float *)(*((_QWORD *)v79 + 5) + 32), *((double *)v79 + 3));
          if (v83 >= 1)
          {
            v84 = *v82;
            v85 = 0.0;
            do
            {
              ramstadBackEndCoeffs<float>(*((_DWORD *)v79 + 8), (uint64_t)&v115, (float *)v84, (_DWORD *)v84 + 8, v85);
              v84 += 64;
              v85 = v81 + v85;
              --v83;
            }
            while (v83);
          }
        }
        *(_QWORD *)&v89 = v80;
        if (v100)
        {
          v90 = (unint64_t *)&v100->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
            *(_QWORD *)&v89 = v80;
          }
        }
        *((_QWORD *)&v89 + 1) = v79;
        v102 = v89;
        v92 = (_QWORD *)boost::container::flat_map<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>,std::less<std::tuple<int,int,double,BOOL>>,void>::priv_subscript((uint64_t)&v111);
        v93 = (unint64_t *)(v79 + 16);
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
        v95 = (std::__shared_weak_count *)v92[1];
        *v92 = v80;
        v92[1] = v79;
        if (v95)
          std::__shared_weak_count::__release_weak(v95);
        goto LABEL_102;
      }
    }
    else
    {
      *((_QWORD *)&v52 + 1) = 0;
    }
    v100 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
    goto LABEL_85;
  }
  v105 = 0uLL;
  v106 = 0uLL;
  v103 = 0uLL;
  v104 = 0uLL;
  _ZNSt3__16vectorIDv8_dNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_((_QWORD *)this + 20, 0, v14, (char *)&v103);
  _ZNSt3__16vectorIDv8_dNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_((_QWORD *)this + 23, *((char **)this + 23), v14, (char *)&v103);
  {
    GetKernelFactoryD(void)::sFactory.__m_.__sig = 850045863;
    *(_OWORD *)GetKernelFactoryD(void)::sFactory.__m_.__opaque = 0u;
    *(_OWORD *)&GetKernelFactoryD(void)::sFactory.__m_.__opaque[16] = 0u;
    *(_OWORD *)&GetKernelFactoryD(void)::sFactory.__m_.__opaque[32] = 0u;
    *(_OWORD *)&GetKernelFactoryD(void)::sFactory.__m_.__opaque[48] = 0u;
    *(_OWORD *)&qword_1EF130A20 = 0u;
  }
  v17 = *((_DWORD *)this + 13);
  v16 = *((_DWORD *)this + 14);
  v18 = *((unsigned __int8 *)this + 92);
  std::mutex::lock(&GetKernelFactoryD(void)::sFactory);
  v19 = v18 ^ 1;
  v21 = qword_1EF130A18;
  v20 = qword_1EF130A20;
  v22 = qword_1EF130A18;
  if (!qword_1EF130A18 && qword_1EF130A20)
LABEL_29:
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  while (1)
  {
    v23 = v21 + 40 * v20;
    if (v22 == v23)
      break;
    v24 = *(_QWORD *)(v22 + 32);
    if (!v24 || *(_QWORD *)(v24 + 8) == -1)
    {
      if (v21 > v22)
        goto LABEL_108;
      if (!v21 && v20)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (v22 >= v23)
LABEL_108:
        __assert_rtn("erase", "vector.hpp", 2092, "this->priv_in_range(position)");
      if (v22 + 40 != v23)
      {
        v25 = v22;
        do
        {
          v26 = v25 + 40;
          v27 = boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>::operator=(v25, v25 + 40)+ 80;
          v25 = v26;
        }
        while (v27 != v23);
      }
      v28 = *(std::__shared_weak_count **)(v23 - 8);
      if (v28)
        std::__shared_weak_count::__release_weak(v28);
      v21 = qword_1EF130A18;
      v20 = --qword_1EF130A20;
    }
    else
    {
      v22 += 40;
    }
    if (v21)
      v29 = 1;
    else
      v29 = v20 == 0;
    if (!v29)
      goto LABEL_29;
  }
  v111 = v16;
  v112 = v17;
  v113 = v13;
  v114 = v19;
  v45 = (_QWORD *)boost::container::flat_map<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>,std::less<std::tuple<int,int,double,BOOL>>,void>::priv_subscript((uint64_t)&v111);
  v46 = (std::__shared_weak_count *)v45[1];
  if (!v46)
  {
    *((_QWORD *)&v48 + 1) = 0;
    goto LABEL_61;
  }
  v47 = std::__shared_weak_count::lock(v46);
  *((_QWORD *)&v48 + 1) = v47;
  if (!v47)
  {
LABEL_61:
    v99 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
LABEL_62:
    v53 = (char *)operator new(0x58uLL);
    v54 = v53;
    *((_QWORD *)v53 + 1) = 0;
    *((_QWORD *)v53 + 2) = 0;
    *((double *)v53 + 3) = v13;
    v55 = v53 + 24;
    *(_QWORD *)v53 = &off_1E6996408;
    *((_DWORD *)v53 + 8) = v16;
    *((_DWORD *)v53 + 9) = v17;
    v56 = 1.0 / (double)v17;
    *(_OWORD *)(v53 + 40) = 0u;
    *(_OWORD *)(v53 + 56) = 0u;
    *(_OWORD *)(v53 + 72) = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v142 = 0;
    v140 = 0u;
    v141 = 0u;
    v57 = (double **)(v53 + 64);
    v138 = 0u;
    v139 = 0u;
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v58 = v17 + v19;
    v115 = 0u;
    if (v16 > 10)
    {
      *((_DWORD *)v53 + 8) = 11;
      _ZNSt3__16vectorIDv8_dNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_((_QWORD *)v53 + 5, 0, 4uLL, (char *)&v107);
      _ZNSt3__16vectorIDv8_dNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_(v57, (char *)*v57, 4 * v58, (char *)&v107);
      v61 = *((_QWORD *)v54 + 5);
      ramstadPrecalculateCoeffs<double>(*((_DWORD *)v54 + 8), (uint64_t)&kRamstadASRCPoles22, (uint64_t)&kRamstadASRCResidues22, (uint64_t)&v115, (long double *)v61, (long double *)(v61 + 128), *((double *)v54 + 3));
      v62 = *(_OWORD *)(v61 + 80);
      *(_OWORD *)(v61 + 96) = *(_OWORD *)(v61 + 64);
      *(_OWORD *)(v61 + 112) = v62;
      v63 = *(_OWORD *)(v61 + 208);
      *(_OWORD *)(v61 + 224) = *(_OWORD *)(v61 + 192);
      *(_OWORD *)(v61 + 240) = v63;
      if (v58 >= 1)
      {
        v64 = (uint64_t)(*v57 + 16);
        v65 = 0.0;
        do
        {
          ramstadBackEndCoeffs<double>(*((_DWORD *)v54 + 8), (uint64_t)&v115, (double *)(v64 - 128), (double *)v64, v65);
          v66 = *(_OWORD *)(v64 - 48);
          *(_OWORD *)(v64 - 32) = *(_OWORD *)(v64 - 64);
          *(_OWORD *)(v64 - 16) = v66;
          v67 = *(_OWORD *)(v64 + 80);
          *(_OWORD *)(v64 + 96) = *(_OWORD *)(v64 + 64);
          *(_OWORD *)(v64 + 112) = v67;
          v64 += 256;
          v65 = v56 + v65;
          --v58;
        }
        while (v58);
      }
    }
    else
    {
      *((_DWORD *)v53 + 8) = 8;
      _ZNSt3__16vectorIDv8_dNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_((_QWORD *)v53 + 5, 0, 2uLL, (char *)&v107);
      _ZNSt3__16vectorIDv8_dNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_(v57, (char *)*v57, 2 * v58, (char *)&v107);
      ramstadPrecalculateCoeffs<double>(*((_DWORD *)v54 + 8), (uint64_t)&kRamstadASRCPoles16, (uint64_t)&kRamstadASRCResidues16, (uint64_t)&v115, *((long double **)v54 + 5), (long double *)(*((_QWORD *)v54 + 5) + 64), *((double *)v54 + 3));
      if (v58 >= 1)
      {
        v59 = *v57;
        v60 = 0.0;
        do
        {
          ramstadBackEndCoeffs<double>(*((_DWORD *)v54 + 8), (uint64_t)&v115, v59, v59 + 8, v60);
          v59 += 16;
          v60 = v56 + v60;
          --v58;
        }
        while (v58);
      }
    }
    *(_QWORD *)&v68 = v55;
    if (v99)
    {
      v69 = (unint64_t *)&v99->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
        *(_QWORD *)&v68 = v55;
      }
    }
    *((_QWORD *)&v68 + 1) = v54;
    v101 = v68;
    v71 = (_QWORD *)boost::container::flat_map<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>,std::less<std::tuple<int,int,double,BOOL>>,void>::priv_subscript((uint64_t)&v111);
    v72 = (unint64_t *)(v54 + 16);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
    v74 = (std::__shared_weak_count *)v71[1];
    *v71 = v55;
    v71[1] = v54;
    if (v74)
      std::__shared_weak_count::__release_weak(v74);
    goto LABEL_79;
  }
  *(_QWORD *)&v48 = *v45;
  v99 = v47;
  v101 = v48;
  if (!*v45)
    goto LABEL_62;
LABEL_79:
  std::mutex::unlock(&GetKernelFactoryD(void)::sFactory);
  v75 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  *((_OWORD *)this + 1) = v101;
  if (!v75)
    goto LABEL_107;
  v76 = (unint64_t *)&v75->__shared_owners_;
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v77 - 1, v76));
LABEL_105:
  if (!v77)
  {
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
  }
LABEL_107:
  v97 = *((unsigned int *)this + 12);
  LODWORD(v115) = 0;
  std::vector<float>::assign((char **)this + 26, v97, &v115);
  v98 = *((unsigned int *)this + 12);
  LODWORD(v115) = 0;
  std::vector<float>::assign((char **)this + 29, v98, &v115);
}

void sub_1B5BEBF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, void **a13, __int128 a14, void **a15, void **a16)
{
  _QWORD *v16;
  void **v17;
  void **v18;
  std::__shared_weak_count *v19;
  void **v20;
  void **v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count_vtbl *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  v22 = (std::__shared_weak_count_vtbl *)*v20;
  if (*v20)
  {
    v19[3].__vftable = v22;
    operator delete(v22);
  }
  v23 = (std::__shared_weak_count_vtbl *)*v21;
  if (*v21)
  {
    v19[2].__vftable = v23;
    operator delete(v23);
  }
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v24);
  if (*((_QWORD *)&a11 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&a11 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&a11 + 1) + 16))(*((_QWORD *)&a11 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&a11 + 1));
    }
  }
  std::mutex::unlock(&GetKernelFactory(void)::sFactory);
  v27 = (void *)v16[29];
  if (v27)
  {
    v16[30] = v27;
    operator delete(v27);
  }
  v28 = *v18;
  if (*v18)
  {
    v16[27] = v28;
    operator delete(v28);
  }
  v29 = *a15;
  if (*a15)
  {
    v16[24] = v29;
    operator delete(v29);
  }
  v30 = *v17;
  if (*v17)
  {
    v16[21] = v30;
    operator delete(v30);
  }
  v31 = *a16;
  if (*a16)
  {
    v16[18] = v31;
    operator delete(v31);
  }
  v32 = *a13;
  if (*a13)
  {
    v16[15] = v32;
    operator delete(v32);
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(v16 + 2));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v16);
  _Unwind_Resume(a1);
}

void RamstadSRC::~RamstadSRC(RamstadSRC *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)*((_QWORD *)this + 29);
  if (v2)
  {
    *((_QWORD *)this + 30) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 26);
  if (v3)
  {
    *((_QWORD *)this + 27) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 23);
  if (v4)
  {
    *((_QWORD *)this + 24) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 20);
  if (v5)
  {
    *((_QWORD *)this + 21) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 17);
  if (v6)
  {
    *((_QWORD *)this + 18) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 14);
  if (v7)
  {
    *((_QWORD *)this + 15) = v7;
    operator delete(v7);
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

double RamstadSRC::processMono(RamstadSRC *this, const float *a2, float *a3, int a4, int a5, int a6, int a7)
{
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  float64x2_t *v19;
  uint64_t v20;
  float64x2_t *v21;
  float64x2_t *v22;
  int v23;
  int v24;
  int v25;
  float64x2_t v26;
  float64x2_t v27;
  int v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t *v39;
  float v40;
  int v41;
  int v42;
  int v43;
  int v44;
  float32x4_t *v45;
  uint64_t v46;
  float32x4_t *v47;
  float32x4_t *v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x16_t v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  float64x2_t *v65;
  uint64_t v66;
  float64x2_t *v67;
  float64x2_t *v68;
  int v69;
  int v70;
  int v71;
  float64x2_t v72;
  float64x2_t v73;
  int v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  uint64_t v85;
  float64x2_t *v86;
  float64x2_t *v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  float64x2_t v93;
  int v94;
  int v95;
  int v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t *v115;
  float64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int v119;
  int v120;
  int v121;
  float32x4_t *v122;
  uint64_t v123;
  float32x4_t *v124;
  float32x4_t *v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  float32x4_t v130;
  float32x4_t v131;
  int v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float v137;
  uint64_t v138;
  float32x4_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int v142;
  int v143;
  uint64_t v144;
  int v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t *v154;
  float32x4_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  uint64_t v181;
  float64x2_t *v182;
  float64x2_t *v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  int64x2_t v194;
  int64x2_t v195;
  float64x2_t v196;
  int64x2_t v197;
  int64x2_t v198;
  float64x2_t v199;
  int v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  int v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  int v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  int v233;
  int v234;
  uint64_t v235;
  int v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float v245;
  uint64_t v246;
  float32x4_t *v247;
  float32x4_t *v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  int8x16_t v253;
  int8x16_t v254;
  float32x4_t v255;
  int8x16_t v256;
  int8x16_t v257;
  float32x4_t v258;
  float32x4_t v259;
  uint64_t v260;
  int v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  int v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  uint64_t v279;
  int v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  int v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float32x4_t v308;
  float32x4_t v309;
  uint64_t v310;
  int v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  uint64_t v316;
  int v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  double result;
  std::runtime_error *exception;

  if (*((_DWORD *)this + 12) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "RamstadSRC::processMono, wrong channel count");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  RamstadSRC::checkPreflight(this, a4, a5);
  if (*((_BYTE *)this + 93))
  {
    if (*((_BYTE *)this + 92))
    {
      v14 = *((_DWORD *)this + 15);
      v16 = *((_DWORD *)this + 17);
      v15 = *((_DWORD *)this + 18);
      v17 = *((_DWORD *)this + 22);
      v18 = *((_QWORD *)this + 2);
      v19 = *(float64x2_t **)(v18 + 16);
      v20 = *(_QWORD *)(v18 + 40);
      v21 = (float64x2_t *)*((_QWORD *)this + 20);
      v22 = (float64x2_t *)*((_QWORD *)this + 23);
      v23 = *((_DWORD *)this + 13);
      if (*((_DWORD *)this + 14) == 8)
      {
        if (a5 < 1)
        {
          v25 = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          do
          {
            v27 = v21[2];
            v26 = v21[3];
            v28 = v17;
            v30 = *v21;
            v29 = v21[1];
            if (v17 >= 1)
            {
              do
              {
                v31 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*a2), 0);
                v32 = vmlaq_f64(v31, v27, v19[2]);
                v33 = vmlaq_f64(v31, v26, v19[3]);
                v34 = vmlaq_f64(v31, v30, *v19);
                v35 = vmlaq_f64(vmlaq_f64(v31, v29, v19[1]), v22[1], v19[5]);
                v36 = vmlaq_f64(v34, *v22, v19[4]);
                v37 = vmlaq_f64(v33, v22[3], v19[7]);
                v38 = vmlaq_f64(v32, v22[2], v19[6]);
                *v22 = v30;
                v22[1] = v29;
                v22[2] = v27;
                v22[3] = v26;
                v21[2] = v38;
                v21[3] = v37;
                a2 += a6;
                v30 = v36;
                *v21 = v36;
                v21[1] = v35;
                v29 = v35;
                v27 = v38;
                v26 = v37;
                --v28;
              }
              while (v28);
            }
            v25 += v17;
            v39 = (float64x2_t *)(v20 + ((uint64_t)(int)(2 * v15) << 6));
            v40 = vaddvq_f64(vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v39[4], *v22), v30, *v39), vmlaq_f64(vmulq_f64(v39[6], v22[2]), v27, v39[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v39[5], v22[1]), v29, v39[1]), vmlaq_f64(vmulq_f64(v39[7], v22[3]), v26, v39[3]))));
            *a3 = v40;
            a3 += a7;
            v41 = v15 + v16;
            if (v41 < v23)
              v17 = v14;
            else
              v17 = v14 + 1;
            if (v41 < v23)
              v42 = 0;
            else
              v42 = v23;
            v15 = v41 - v42;
            ++v24;
          }
          while (v24 != a5);
        }
        v200 = a4 - v25;
        if (a4 > v25)
        {
          if (v17 < v200)
            v200 = v17;
          if (v200 >= 1)
          {
            v202 = v21[2];
            v201 = v21[3];
            v204 = *v21;
            v203 = v21[1];
            v205 = v200;
            do
            {
              v206 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*a2), 0);
              v207 = vmlaq_f64(v206, v202, v19[2]);
              v208 = vmlaq_f64(v206, v201, v19[3]);
              v209 = vmlaq_f64(v206, v204, *v19);
              v210 = vmlaq_f64(vmlaq_f64(v206, v203, v19[1]), v22[1], v19[5]);
              v211 = vmlaq_f64(v209, *v22, v19[4]);
              v212 = vmlaq_f64(v208, v22[3], v19[7]);
              v213 = vmlaq_f64(v207, v22[2], v19[6]);
              *v22 = v204;
              v22[1] = v203;
              v22[2] = v202;
              v22[3] = v201;
              v21[2] = v213;
              v21[3] = v212;
              a2 += a6;
              v204 = v211;
              *v21 = v211;
              v21[1] = v210;
              v203 = v210;
              v202 = v213;
              v201 = v212;
              --v205;
            }
            while (v205);
          }
LABEL_156:
          v17 -= v200;
        }
      }
      else
      {
        if (a5 < 1)
        {
          v95 = 0;
        }
        else
        {
          v94 = 0;
          v95 = 0;
          do
          {
            if (v17 < 1)
            {
              v112 = v21[6];
              v111 = v21[7];
              v114 = v21[4];
              v113 = v21[5];
            }
            else
            {
              v96 = v17;
              do
              {
                v97 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*a2), 0);
                v98 = *v21;
                v99 = v21[1];
                v100 = v21[2];
                v101 = v21[3];
                v102 = vmlaq_f64(vmlaq_f64(v97, *v21, *v19), *v22, v19[8]);
                v103 = vmlaq_f64(vmlaq_f64(v97, v99, v19[1]), v22[1], v19[9]);
                v104 = vmlaq_f64(vmlaq_f64(v97, v100, v19[2]), v22[2], v19[10]);
                v105 = vmlaq_f64(vmlaq_f64(v97, v101, v19[3]), v22[3], v19[11]);
                v22[2] = v100;
                v22[3] = v101;
                *v22 = v98;
                v22[1] = v99;
                v21[2] = v104;
                v21[3] = v105;
                *v21 = v102;
                v21[1] = v103;
                v107 = v21[4];
                v106 = v21[5];
                v109 = v21[6];
                v108 = v21[7];
                v110 = vmlaq_f64(v97, v107, v19[4]);
                v111 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v108, v19[7]), v22[7], v19[15]);
                v112 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v109, v19[6]), v22[6], v19[14]);
                v113 = vmlaq_f64(vmlaq_f64(v97, v106, v19[5]), v22[5], v19[13]);
                v114 = vmlaq_f64(v110, v22[4], v19[12]);
                v22[4] = v107;
                v22[5] = v106;
                v22[6] = v109;
                v22[7] = v108;
                v21[6] = v112;
                v21[7] = v111;
                v21[4] = v114;
                v21[5] = v113;
                a2 += a6;
                --v96;
              }
              while (v96);
            }
            v95 += v17;
            v115 = (float64x2_t *)(v20 + ((uint64_t)(int)(4 * v15) << 6));
            v116 = vmlaq_f64(vmulq_f64(v115[13], v22[5]), v113, v115[5]);
            v117 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v115[8], *v22), *v21, *v115), vmlaq_f64(vmulq_f64(v115[10], v22[2]), v21[2], v115[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v115[9], v22[1]), v21[1], v115[1]), vmlaq_f64(vmulq_f64(v115[11], v22[3]), v21[3], v115[3])));
            v118 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v115[12], v22[4]), v114, v115[4]), vmlaq_f64(vmulq_f64(v115[14], v22[6]), v112, v115[6])), vaddq_f64(v116, vmlaq_f64(vmulq_f64(v115[15], v22[7]), v111, v115[7])));
            *(float *)v117.i32 = vaddvq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v117, v118), (float64x2_t)vzip2q_s64(v117, v118)));
            *a3 = *(float *)v117.i32;
            a3 += a7;
            v119 = v15 + v16;
            if (v119 < v23)
              v17 = v14;
            else
              v17 = v14 + 1;
            if (v119 < v23)
              v120 = 0;
            else
              v120 = v23;
            v15 = v119 - v120;
            ++v94;
          }
          while (v94 != a5);
        }
        v200 = a4 - v95;
        if (a4 > v95)
        {
          if (v17 < v200)
            v200 = v17;
          if (v200 >= 1)
          {
            v214 = v200;
            do
            {
              v215 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*a2), 0);
              v216 = *v21;
              v217 = v21[1];
              v218 = v21[2];
              v219 = v21[3];
              v220 = vmlaq_f64(vmlaq_f64(v215, *v21, *v19), *v22, v19[8]);
              v221 = vmlaq_f64(vmlaq_f64(v215, v217, v19[1]), v22[1], v19[9]);
              v222 = vmlaq_f64(vmlaq_f64(v215, v218, v19[2]), v22[2], v19[10]);
              v223 = vmlaq_f64(vmlaq_f64(v215, v219, v19[3]), v22[3], v19[11]);
              v22[2] = v218;
              v22[3] = v219;
              *v22 = v216;
              v22[1] = v217;
              v21[2] = v222;
              v21[3] = v223;
              *v21 = v220;
              v21[1] = v221;
              v225 = v21[4];
              v224 = v21[5];
              v227 = v21[6];
              v226 = v21[7];
              v228 = vmlaq_f64(v215, v225, v19[4]);
              v229 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v226, v19[7]), v22[7], v19[15]);
              v230 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v227, v19[6]), v22[6], v19[14]);
              v231 = vmlaq_f64(vmlaq_f64(v215, v224, v19[5]), v22[5], v19[13]);
              v232 = vmlaq_f64(v228, v22[4], v19[12]);
              v22[4] = v225;
              v22[5] = v224;
              v22[6] = v227;
              v22[7] = v226;
              v21[6] = v230;
              v21[7] = v229;
              v21[4] = v232;
              v21[5] = v231;
              a2 += a6;
              --v214;
            }
            while (v214);
          }
          goto LABEL_156;
        }
      }
    }
    else
    {
      v63 = *((_DWORD *)this + 17);
      v15 = *((_DWORD *)this + 18);
      v17 = *((_DWORD *)this + 22);
      v64 = *((_QWORD *)this + 2);
      v65 = *(float64x2_t **)(v64 + 16);
      v66 = *(_QWORD *)(v64 + 40);
      v67 = (float64x2_t *)*((_QWORD *)this + 20);
      v68 = (float64x2_t *)*((_QWORD *)this + 23);
      v69 = *((_DWORD *)this + 15);
      if (*((_DWORD *)this + 14) == 8)
      {
        if (a5 < 1)
        {
          v70 = 0;
        }
        else
        {
          v70 = 0;
          v71 = 0;
          do
          {
            v73 = v67[2];
            v72 = v67[3];
            v74 = v17;
            v76 = *v67;
            v75 = v67[1];
            if (v17 >= 1)
            {
              do
              {
                v77 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*a2), 0);
                v78 = vmlaq_f64(v77, v73, v65[2]);
                v79 = vmlaq_f64(v77, v72, v65[3]);
                v80 = vmlaq_f64(v77, v76, *v65);
                v81 = vmlaq_f64(vmlaq_f64(v77, v75, v65[1]), v68[1], v65[5]);
                v82 = vmlaq_f64(v80, *v68, v65[4]);
                v83 = vmlaq_f64(v79, v68[3], v65[7]);
                v84 = vmlaq_f64(v78, v68[2], v65[6]);
                *v68 = v76;
                v68[1] = v75;
                v68[2] = v73;
                v68[3] = v72;
                v67[2] = v84;
                v67[3] = v83;
                a2 += a6;
                v76 = v82;
                *v67 = v82;
                v67[1] = v81;
                v75 = v81;
                v73 = v84;
                v72 = v83;
                --v74;
              }
              while (v74);
            }
            v70 += v17;
            v85 = (v15 >> 22) & 0x1FE;
            v86 = (float64x2_t *)(v66 + (v85 << 6));
            v87 = (float64x2_t *)(v66 + ((unint64_t)(v85 + 2) << 6));
            v88 = v68[2];
            v89 = v68[3];
            v90 = v68[1];
            v91 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v86[4], *v68), v76, *v86), vmlaq_f64(vmulq_f64(v86[6], v88), v73, v86[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v86[5], v90), v75, v86[1]), vmlaq_f64(vmulq_f64(v86[7], v89), v72, v86[3])));
            v92 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(*v68, v87[4]), v76, *v87), vmlaq_f64(vmulq_f64(v88, v87[6]), v73, v87[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v90, v87[5]), v75, v87[1]), vmlaq_f64(vmulq_f64(v89, v87[7]), v72, v87[3])));
            v93 = vaddq_f64((float64x2_t)vzip1q_s64(v92, v91), (float64x2_t)vzip2q_s64(v92, v91));
            *(float *)v93.f64 = v93.f64[1]
                              + *((double *)this + 12) * (double)(v15 & 0x7FFFFF) * (v93.f64[0] - v93.f64[1]);
            *a3 = *(float *)v93.f64;
            a3 += a7;
            LODWORD(v87) = v15 + v63;
            v15 = (v15 + v63) & 0x7FFFFFFF;
            v17 = v69 + (v87 >> 31);
            ++v71;
          }
          while (v71 != a5);
        }
        v200 = a4 - v70;
        if (a4 > v70)
        {
          if (v17 < v200)
            v200 = v17;
          if (v200 >= 1)
          {
            v267 = v67[2];
            v266 = v67[3];
            v269 = *v67;
            v268 = v67[1];
            v270 = v200;
            do
            {
              v271 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*a2), 0);
              v272 = vmlaq_f64(v271, v267, v65[2]);
              v273 = vmlaq_f64(v271, v266, v65[3]);
              v274 = vmlaq_f64(v271, v269, *v65);
              v275 = vmlaq_f64(vmlaq_f64(v271, v268, v65[1]), v68[1], v65[5]);
              v276 = vmlaq_f64(v274, *v68, v65[4]);
              v277 = vmlaq_f64(v273, v68[3], v65[7]);
              v278 = vmlaq_f64(v272, v68[2], v65[6]);
              *v68 = v269;
              v68[1] = v268;
              v68[2] = v267;
              v68[3] = v266;
              v67[2] = v278;
              v67[3] = v277;
              a2 += a6;
              v269 = v276;
              *v67 = v276;
              v67[1] = v275;
              v268 = v275;
              v267 = v278;
              v266 = v277;
              --v270;
            }
            while (v270);
          }
          goto LABEL_156;
        }
      }
      else
      {
        if (a5 < 1)
        {
          v160 = 0;
        }
        else
        {
          v160 = 0;
          v161 = 0;
          do
          {
            if (v17 < 1)
            {
              v178 = v67[6];
              v177 = v67[7];
              v180 = v67[4];
              v179 = v67[5];
            }
            else
            {
              v162 = v17;
              do
              {
                v163 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*a2), 0);
                v164 = *v67;
                v165 = v67[1];
                v166 = v67[2];
                v167 = v67[3];
                v168 = vmlaq_f64(vmlaq_f64(v163, *v67, *v65), *v68, v65[8]);
                v169 = vmlaq_f64(vmlaq_f64(v163, v165, v65[1]), v68[1], v65[9]);
                v170 = vmlaq_f64(vmlaq_f64(v163, v166, v65[2]), v68[2], v65[10]);
                v171 = vmlaq_f64(vmlaq_f64(v163, v167, v65[3]), v68[3], v65[11]);
                v68[2] = v166;
                v68[3] = v167;
                *v68 = v164;
                v68[1] = v165;
                v67[2] = v170;
                v67[3] = v171;
                *v67 = v168;
                v67[1] = v169;
                v173 = v67[4];
                v172 = v67[5];
                v175 = v67[6];
                v174 = v67[7];
                v176 = vmlaq_f64(v163, v173, v65[4]);
                v177 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v174, v65[7]), v68[7], v65[15]);
                v178 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v175, v65[6]), v68[6], v65[14]);
                v179 = vmlaq_f64(vmlaq_f64(v163, v172, v65[5]), v68[5], v65[13]);
                v180 = vmlaq_f64(v176, v68[4], v65[12]);
                v68[4] = v173;
                v68[5] = v172;
                v68[6] = v175;
                v68[7] = v174;
                v67[6] = v178;
                v67[7] = v177;
                v67[4] = v180;
                v67[5] = v179;
                a2 += a6;
                --v162;
              }
              while (v162);
            }
            v160 += v17;
            v181 = (v15 >> 21) & 0x3FC;
            v182 = (float64x2_t *)(v66 + (v181 << 6));
            v183 = (float64x2_t *)(v66 + ((unint64_t)(v181 + 4) << 6));
            v184 = v67[1];
            v186 = v67[2];
            v185 = v67[3];
            v187 = v68[2];
            v188 = v68[3];
            v189 = v68[1];
            v190 = v68[6];
            v191 = v68[7];
            v192 = v68[4];
            v193 = v68[5];
            v194 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v182[8], *v68), *v67, *v182), vmlaq_f64(vmulq_f64(v182[10], v187), v186, v182[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v182[9], v189), v184, v182[1]), vmlaq_f64(vmulq_f64(v182[11], v188), v185, v182[3])));
            v195 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v182[12], v192), v180, v182[4]), vmlaq_f64(vmulq_f64(v182[14], v190), v178, v182[6])), vaddq_f64(vmlaq_f64(vmulq_f64(v182[13], v193), v179, v182[5]), vmlaq_f64(vmulq_f64(v182[15], v191), v177, v182[7])));
            v196 = vmlaq_f64(vmulq_f64(v193, v183[13]), v179, v183[5]);
            v197 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(*v68, v183[8]), *v67, *v183), vmlaq_f64(vmulq_f64(v187, v183[10]), v186, v183[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v189, v183[9]), v184, v183[1]), vmlaq_f64(vmulq_f64(v188, v183[11]), v185, v183[3])));
            v198 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v192, v183[12]), v180, v183[4]), vmlaq_f64(vmulq_f64(v190, v183[14]), v178, v183[6])), vaddq_f64(v196, vmlaq_f64(vmulq_f64(v191, v183[15]), v177, v183[7])));
            v199 = vaddq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v197, v194), (float64x2_t)vzip2q_s64(v197, v194)), vaddq_f64((float64x2_t)vzip1q_s64(v198, v195), (float64x2_t)vzip2q_s64(v198, v195)));
            *(float *)v199.f64 = v199.f64[1]
                               + *((double *)this + 12) * (double)(v15 & 0x7FFFFF) * (v199.f64[0] - v199.f64[1]);
            *a3 = *(float *)v199.f64;
            a3 += a7;
            LODWORD(v183) = v15 + v63;
            v15 = (v15 + v63) & 0x7FFFFFFF;
            v17 = v69 + (v183 >> 31);
            ++v161;
          }
          while (v161 != a5);
        }
        v200 = a4 - v160;
        if (a4 > v160)
        {
          if (v17 < v200)
            v200 = v17;
          if (v200 >= 1)
          {
            v289 = v200;
            do
            {
              v290 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*a2), 0);
              v291 = *v67;
              v292 = v67[1];
              v293 = v67[2];
              v294 = v67[3];
              v295 = vmlaq_f64(vmlaq_f64(v290, *v67, *v65), *v68, v65[8]);
              v296 = vmlaq_f64(vmlaq_f64(v290, v292, v65[1]), v68[1], v65[9]);
              v297 = vmlaq_f64(vmlaq_f64(v290, v293, v65[2]), v68[2], v65[10]);
              v298 = vmlaq_f64(vmlaq_f64(v290, v294, v65[3]), v68[3], v65[11]);
              v68[2] = v293;
              v68[3] = v294;
              *v68 = v291;
              v68[1] = v292;
              v67[2] = v297;
              v67[3] = v298;
              *v67 = v295;
              v67[1] = v296;
              v300 = v67[4];
              v299 = v67[5];
              v302 = v67[6];
              v301 = v67[7];
              v303 = vmlaq_f64(v290, v300, v65[4]);
              v304 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v301, v65[7]), v68[7], v65[15]);
              v305 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v302, v65[6]), v68[6], v65[14]);
              v306 = vmlaq_f64(vmlaq_f64(v290, v299, v65[5]), v68[5], v65[13]);
              v307 = vmlaq_f64(v303, v68[4], v65[12]);
              v68[4] = v300;
              v68[5] = v299;
              v68[6] = v302;
              v68[7] = v301;
              v67[6] = v305;
              v67[7] = v304;
              v67[4] = v307;
              v67[5] = v306;
              a2 += a6;
              --v289;
            }
            while (v289);
          }
          goto LABEL_156;
        }
      }
    }
  }
  else if (*((_BYTE *)this + 92))
  {
    v43 = *((_DWORD *)this + 15);
    v44 = *((_DWORD *)this + 17);
    v15 = *((_DWORD *)this + 18);
    v17 = *((_DWORD *)this + 22);
    v45 = *(float32x4_t **)(*(_QWORD *)this + 16);
    v46 = *(_QWORD *)(*(_QWORD *)this + 40);
    v47 = (float32x4_t *)*((_QWORD *)this + 14);
    v48 = (float32x4_t *)*((_QWORD *)this + 17);
    v49 = *((_DWORD *)this + 13);
    if (*((_DWORD *)this + 14) == 8)
    {
      if (a5 < 1)
      {
        v51 = 0;
      }
      else
      {
        v50 = 0;
        v51 = 0;
        do
        {
          v53 = *v47;
          v54 = v47[1];
          v55 = v17;
          if (v17 >= 1)
          {
            do
            {
              v56 = vld1q_dup_f32(a2);
              v52 = 4 * a6;
              a2 = (const float *)((char *)a2 + v52);
              v57 = vmlaq_f32(v56, v54, v45[1]);
              v58 = vmlaq_f32(vmlaq_f32(v56, v53, *v45), *v48, v45[2]);
              v59 = vmlaq_f32(v57, v48[1], v45[3]);
              *v48 = v53;
              v48[1] = v54;
              *v47 = v58;
              v47[1] = v59;
              v53 = v58;
              v54 = v59;
              --v55;
            }
            while (v55);
          }
          v51 += v17;
          v60 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)(v46 + 32 * (int)(2 * v15) + 32), *v48), v53, *(float32x4_t *)(v46 + 32 * (int)(2 * v15))), vmlaq_f32(vmulq_f32(*(float32x4_t *)(v46 + 32 * (int)(2 * v15) + 48), v48[1]), v54, *(float32x4_t *)(v46 + 32 * (int)(2 * v15) + 16)));
          *a3 = vaddv_f32(vadd_f32(*(float32x2_t *)v60.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)));
          a3 += a7;
          v61 = v15 + v44;
          if (v61 < v49)
            v17 = v43;
          else
            v17 = v43 + 1;
          if (v61 < v49)
            v62 = 0;
          else
            v62 = v49;
          v15 = v61 - v62;
          ++v50;
        }
        while (v50 != a5);
      }
      v200 = a4 - v51;
      if (a4 > v51)
      {
        if (v17 < v200)
          v200 = v17;
        if (v200 >= 1)
        {
          v259 = *v47;
          v258 = v47[1];
          v261 = v200;
          do
          {
            v262 = vld1q_dup_f32(a2);
            v260 = 4 * a6;
            a2 = (const float *)((char *)a2 + v260);
            v263 = vmlaq_f32(v262, v258, v45[1]);
            v264 = vmlaq_f32(vmlaq_f32(v262, v259, *v45), *v48, v45[2]);
            v265 = vmlaq_f32(v263, v48[1], v45[3]);
            *v48 = v259;
            v48[1] = v258;
            *v47 = v264;
            v47[1] = v265;
            v259 = v264;
            v258 = v265;
            --v261;
          }
          while (v261);
        }
        goto LABEL_156;
      }
    }
    else
    {
      if (a5 < 1)
      {
        v143 = 0;
      }
      else
      {
        v142 = 0;
        v143 = 0;
        do
        {
          if (v17 < 1)
          {
            v153 = v47[2];
            v152 = v47[3];
          }
          else
          {
            v145 = v17;
            do
            {
              v146 = vld1q_dup_f32(a2);
              v144 = 4 * a6;
              a2 = (const float *)((char *)a2 + v144);
              v147 = v47[1];
              v148 = vmlaq_f32(vmlaq_f32(v146, *v47, *v45), *v48, v45[4]);
              v149 = vmlaq_f32(vmlaq_f32(v146, v147, v45[1]), v48[1], v45[5]);
              *v48 = *v47;
              v48[1] = v147;
              *v47 = v148;
              v47[1] = v149;
              v150 = v47[2];
              v151 = v47[3];
              v152 = vmlaq_f32(vmlaq_f32((float32x4_t)0, v151, v45[3]), v48[3], v45[7]);
              v153 = vmlaq_f32(vmlaq_f32(v146, v150, v45[2]), v48[2], v45[6]);
              v48[2] = v150;
              v48[3] = v151;
              v47[2] = v153;
              v47[3] = v152;
              --v145;
            }
            while (v145);
          }
          v143 += v17;
          v154 = (float32x4_t *)(v46 + 32 * (int)(4 * v15));
          v155 = vmlaq_f32(vmulq_f32(v154[6], v48[2]), v153, v154[2]);
          v156 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v154[4], *v48), *v47, *v154), vmlaq_f32(vmulq_f32(v154[5], v48[1]), v47[1], v154[1]));
          *(float32x2_t *)v156.i8 = vadd_f32(*(float32x2_t *)v156.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v156, v156, 8uLL));
          v157 = (int8x16_t)vaddq_f32(v155, vmlaq_f32(vmulq_f32(v154[7], v48[3]), v152, v154[3]));
          *(float32x2_t *)v157.i8 = vadd_f32(*(float32x2_t *)v157.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v157, v157, 8uLL));
          *a3 = vaddv_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v156.i8, *(int32x2_t *)v157.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v156.i8, *(int32x2_t *)v157.i8)));
          a3 += a7;
          v158 = v15 + v44;
          if (v158 < v49)
            v17 = v43;
          else
            v17 = v43 + 1;
          if (v158 < v49)
            v159 = 0;
          else
            v159 = v49;
          v15 = v158 - v159;
          ++v142;
        }
        while (v142 != a5);
      }
      v200 = a4 - v143;
      if (a4 > v143)
      {
        if (v17 < v200)
          v200 = v17;
        if (v200 >= 1)
        {
          v280 = v200;
          do
          {
            v281 = vld1q_dup_f32(a2);
            v279 = 4 * a6;
            a2 = (const float *)((char *)a2 + v279);
            v282 = v47[1];
            v283 = vmlaq_f32(vmlaq_f32(v281, *v47, *v45), *v48, v45[4]);
            v284 = vmlaq_f32(vmlaq_f32(v281, v282, v45[1]), v48[1], v45[5]);
            *v48 = *v47;
            v48[1] = v282;
            *v47 = v283;
            v47[1] = v284;
            v285 = v47[2];
            v286 = v47[3];
            v287 = vmlaq_f32(vmlaq_f32((float32x4_t)0, v286, v45[3]), v48[3], v45[7]);
            v288 = vmlaq_f32(vmlaq_f32(v281, v285, v45[2]), v48[2], v45[6]);
            v48[2] = v285;
            v48[3] = v286;
            v47[2] = v288;
            v47[3] = v287;
            --v280;
          }
          while (v280);
        }
        goto LABEL_156;
      }
    }
  }
  else
  {
    v121 = *((_DWORD *)this + 17);
    v15 = *((_DWORD *)this + 18);
    v17 = *((_DWORD *)this + 22);
    v122 = *(float32x4_t **)(*(_QWORD *)this + 16);
    v123 = *(_QWORD *)(*(_QWORD *)this + 40);
    v124 = (float32x4_t *)*((_QWORD *)this + 14);
    v125 = (float32x4_t *)*((_QWORD *)this + 17);
    v126 = *((_DWORD *)this + 15);
    if (*((_DWORD *)this + 14) == 8)
    {
      if (a5 < 1)
      {
        v127 = 0;
      }
      else
      {
        v127 = 0;
        v128 = 0;
        do
        {
          v130 = *v124;
          v131 = v124[1];
          v132 = v17;
          if (v17 >= 1)
          {
            do
            {
              v133 = vld1q_dup_f32(a2);
              v129 = 4 * a6;
              a2 = (const float *)((char *)a2 + v129);
              v134 = vmlaq_f32(v133, v131, v122[1]);
              v135 = vmlaq_f32(vmlaq_f32(v133, v130, *v122), *v125, v122[2]);
              v136 = vmlaq_f32(v134, v125[1], v122[3]);
              *v125 = v130;
              v125[1] = v131;
              *v124 = v135;
              v124[1] = v136;
              v130 = v135;
              v131 = v136;
              --v132;
            }
            while (v132);
          }
          v127 += v17;
          v137 = *((double *)this + 12) * (double)(v15 & 0x7FFFFF);
          v138 = (v15 >> 22) & 0x1FE;
          v139 = v125[1];
          v140 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)(v123 + 32 * v138 + 32), *v125), v130, *(float32x4_t *)(v123 + 32 * v138)), vmlaq_f32(vmulq_f32(*(float32x4_t *)(v123 + 32 * v138 + 48), v139), v131, *(float32x4_t *)(v123 + 32 * v138 + 16)));
          *(float32x2_t *)v140.i8 = vadd_f32(*(float32x2_t *)v140.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v140, v140, 8uLL));
          v141 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(*v125, *(float32x4_t *)(v123 + 32 * (v138 + 2) + 32)), v130, *(float32x4_t *)(v123 + 32 * (v138 + 2))), vmlaq_f32(vmulq_f32(v139, *(float32x4_t *)(v123 + 32 * (v138 + 2) + 48)), v131, *(float32x4_t *)(v123 + 32 * (v138 + 2) + 16)));
          *(float32x2_t *)v141.i8 = vadd_f32(*(float32x2_t *)v141.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v141, v141, 8uLL));
          *(float32x2_t *)v141.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v141.i8, *(int32x2_t *)v140.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v141.i8, *(int32x2_t *)v140.i8));
          *a3 = *(float *)&v141.i32[1] + (float)(v137 * (float)(*(float *)v141.i32 - *(float *)&v141.i32[1]));
          a3 += a7;
          LODWORD(v138) = v15 + v121;
          v15 = (v15 + v121) & 0x7FFFFFFF;
          v17 = v126 + (v138 >> 31);
          ++v128;
        }
        while (v128 != a5);
      }
      v200 = a4 - v127;
      if (a4 > v127)
      {
        if (v17 < v200)
          v200 = v17;
        if (v200 >= 1)
        {
          v309 = *v124;
          v308 = v124[1];
          v311 = v200;
          do
          {
            v312 = vld1q_dup_f32(a2);
            v310 = 4 * a6;
            a2 = (const float *)((char *)a2 + v310);
            v313 = vmlaq_f32(v312, v308, v122[1]);
            v314 = vmlaq_f32(vmlaq_f32(v312, v309, *v122), *v125, v122[2]);
            v315 = vmlaq_f32(v313, v125[1], v122[3]);
            *v125 = v309;
            v125[1] = v308;
            *v124 = v314;
            v124[1] = v315;
            v309 = v314;
            v308 = v315;
            --v311;
          }
          while (v311);
        }
        goto LABEL_156;
      }
    }
    else
    {
      if (a5 < 1)
      {
        v233 = 0;
      }
      else
      {
        v233 = 0;
        v234 = 0;
        do
        {
          if (v17 < 1)
          {
            v244 = v124[2];
            v243 = v124[3];
          }
          else
          {
            v236 = v17;
            do
            {
              v237 = vld1q_dup_f32(a2);
              v235 = 4 * a6;
              a2 = (const float *)((char *)a2 + v235);
              v238 = v124[1];
              v239 = vmlaq_f32(vmlaq_f32(v237, *v124, *v122), *v125, v122[4]);
              v240 = vmlaq_f32(vmlaq_f32(v237, v238, v122[1]), v125[1], v122[5]);
              *v125 = *v124;
              v125[1] = v238;
              *v124 = v239;
              v124[1] = v240;
              v241 = v124[2];
              v242 = v124[3];
              v243 = vmlaq_f32(vmlaq_f32((float32x4_t)0, v242, v122[3]), v125[3], v122[7]);
              v244 = vmlaq_f32(vmlaq_f32(v237, v241, v122[2]), v125[2], v122[6]);
              v125[2] = v241;
              v125[3] = v242;
              v124[2] = v244;
              v124[3] = v243;
              --v236;
            }
            while (v236);
          }
          v233 += v17;
          v245 = *((double *)this + 12) * (double)(v15 & 0x7FFFFF);
          v246 = (v15 >> 21) & 0x3FC;
          v247 = (float32x4_t *)(v123 + 32 * v246);
          v248 = (float32x4_t *)(v123 + 32 * (v246 + 4));
          v249 = v124[1];
          v250 = v125[1];
          v252 = v125[2];
          v251 = v125[3];
          v253 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v247[4], *v125), *v124, *v247), vmlaq_f32(vmulq_f32(v247[5], v250), v249, v247[1]));
          *(float32x2_t *)v253.i8 = vadd_f32(*(float32x2_t *)v253.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v253, v253, 8uLL));
          v254 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v247[6], v252), v244, v247[2]), vmlaq_f32(vmulq_f32(v247[7], v251), v243, v247[3]));
          *(float32x2_t *)v254.i8 = vadd_f32(*(float32x2_t *)v254.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v254, v254, 8uLL));
          v255 = vmlaq_f32(vmulq_f32(v252, v248[6]), v244, v248[2]);
          v256 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(*v125, v248[4]), *v124, *v248), vmlaq_f32(vmulq_f32(v250, v248[5]), v249, v248[1]));
          *(float32x2_t *)v256.i8 = vadd_f32(*(float32x2_t *)v256.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v256, v256, 8uLL));
          v257 = (int8x16_t)vaddq_f32(v255, vmlaq_f32(vmulq_f32(v251, v248[7]), v243, v248[3]));
          *(float32x2_t *)v257.i8 = vadd_f32(*(float32x2_t *)v257.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v257, v257, 8uLL));
          *(float32x2_t *)v256.i8 = vadd_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v256.i8, *(int32x2_t *)v253.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v256.i8, *(int32x2_t *)v253.i8)), vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v257.i8, *(int32x2_t *)v254.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v257.i8, *(int32x2_t *)v254.i8)));
          *a3 = *(float *)&v256.i32[1] + (float)(v245 * (float)(*(float *)v256.i32 - *(float *)&v256.i32[1]));
          a3 += a7;
          LODWORD(v248) = v15 + v121;
          v15 = (v15 + v121) & 0x7FFFFFFF;
          v17 = v126 + (v248 >> 31);
          ++v234;
        }
        while (v234 != a5);
      }
      v200 = a4 - v233;
      if (a4 > v233)
      {
        if (v17 < v200)
          v200 = v17;
        if (v200 >= 1)
        {
          v317 = v200;
          do
          {
            v318 = vld1q_dup_f32(a2);
            v316 = 4 * a6;
            a2 = (const float *)((char *)a2 + v316);
            v319 = v124[1];
            v320 = vmlaq_f32(vmlaq_f32(v318, *v124, *v122), *v125, v122[4]);
            v321 = vmlaq_f32(vmlaq_f32(v318, v319, v122[1]), v125[1], v122[5]);
            *v125 = *v124;
            v125[1] = v319;
            *v124 = v320;
            v124[1] = v321;
            v322 = v124[2];
            v323 = v124[3];
            v324 = vmlaq_f32(vmlaq_f32((float32x4_t)0, v323, v122[3]), v125[3], v122[7]);
            v325 = vmlaq_f32(vmlaq_f32(v318, v322, v122[2]), v125[2], v122[6]);
            v125[2] = v322;
            v125[3] = v323;
            v124[2] = v325;
            v124[3] = v324;
            --v317;
          }
          while (v317);
        }
        goto LABEL_156;
      }
    }
  }
  *((_DWORD *)this + 18) = v15;
  *((_DWORD *)this + 22) = v17;
  result = NAN;
  *((_QWORD *)this + 32) = -1;
  *((_DWORD *)this + 66) = -1;
  return result;
}

void sub_1B5BED4E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  *(_QWORD *)(v1 + 256) = -1;
  *(_DWORD *)(v1 + 264) = -1;
  _Unwind_Resume(a1);
}

_DWORD *RamstadSRC::checkPreflight(_DWORD *this, int a2, int a3)
{
  _DWORD *v4;
  int v5;
  std::runtime_error *exception;
  int v7;

  v4 = this;
  v5 = this[66];
  if (v5 == -1)
  {
    this = (_DWORD *)RamstadSRC::outputSamplesForInputSamples((RamstadSRC *)this, a2, &v7);
    if (v4[66] == a3)
      return this;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "RamstadSRC process called without preflight and arguments don't match preflight.");
LABEL_10:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v5 != a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "RamstadSRC process called for different number of output samples than preflight.");
    goto LABEL_10;
  }
  if (this[64] > a2 || this[65] < a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "RamstadSRC process called for number of input samples than outside range of preflight.");
    goto LABEL_10;
  }
  return this;
}

void sub_1B5BED5E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t RamstadSRC::outputSamplesForInputSamples(RamstadSRC *this, int a2, int *a3)
{
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int i;

  v5 = 0;
  v6 = 0;
  *a3 = 0;
  v7 = *((_DWORD *)this + 22);
  v8 = __OFSUB__(a2, v7);
  v9 = a2 - v7;
  if (v9 < 0 == v8)
  {
    if (*((_BYTE *)this + 92))
    {
      v11 = *((int *)this + 13) * (uint64_t)v9;
      v12 = *((int *)this + 18);
      v13 = *((int *)this + 16);
    }
    else
    {
      v12 = (uint64_t)v9 << 31;
      v11 = *((int *)this + 18);
      v13 = *((_QWORD *)this + 10);
    }
    v14 = ((v12 + v11 + v13 - 1) / v13) + 1;
    v15 = vcvtpd_s64_f64(*((double *)this + 5) / *((double *)this + 4));
    v16 = v14 + 2 * v15;
    for (i = v14 - 2 * v15; ; i = v6)
    {
      while (1)
      {
        v6 = v14;
        v5 = RamstadSRC::inputSamplesForOutputSamples(this, v14);
        if (v5 <= a2)
          break;
        v14 = (i + (((int)v6 - i) >> 1));
        v16 = v6;
        if ((_DWORD)v14 == (_DWORD)v6)
          goto LABEL_11;
      }
      if ((v16 - v6) < 2)
        break;
      v14 = (v6 + ((v16 - (int)v6) >> 1));
    }
LABEL_11:
    *a3 = v5;
  }
  *((_DWORD *)this + 64) = v5;
  *((_DWORD *)this + 65) = a2;
  *((_DWORD *)this + 66) = v6;
  return v6;
}

uint64_t RamstadSRC::inputSamplesForOutputSamples(RamstadSRC *this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = (a2 - 1);
  if (a2 < 1)
    return 0;
  if (*((_BYTE *)this + 92))
    v3 = (*((int *)this + 18) + *((int *)this + 16) * v2) / *((int *)this + 13);
  else
    v3 = (unint64_t)(*((int *)this + 18) + *((_QWORD *)this + 10) * v2) >> 31;
  v4 = (*((_DWORD *)this + 22) + v3);
  *((_DWORD *)this + 64) = v4;
  *((_DWORD *)this + 65) = v4;
  *((_DWORD *)this + 66) = a2;
  return v4;
}

double RamstadSRC::processStereo(RamstadSRC *this, const float *a2, const float *a3, float *a4, float *a5, int a6, int a7, int a8, int a9)
{
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  float64x2_t *v22;
  uint64_t v23;
  float64x2_t *v24;
  float64x2_t *v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t *v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float v67;
  float v68;
  int v69;
  int v70;
  int v71;
  int v72;
  float32x4_t *v73;
  uint64_t v74;
  float32x4_t *v75;
  float32x4_t *v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  const float *v82;
  const float *v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t *v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  float64x2_t *v107;
  uint64_t v108;
  float64x2_t *v109;
  float64x2_t *v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float v140;
  uint64_t v141;
  float64x2_t *v142;
  float64x2_t *v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  int64x2_t v163;
  int64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  int64x2_t v174;
  int64x2_t v175;
  int v176;
  int v177;
  uint64_t v178;
  int v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t *v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  int64x2_t v227;
  int64x2_t v228;
  int64x2_t v229;
  int64x2_t v230;
  int v231;
  int v232;
  unsigned int v233;
  int v234;
  int v235;
  float32x4_t *v236;
  uint64_t v237;
  float32x4_t *v238;
  float32x4_t *v239;
  int v240;
  int v241;
  int v242;
  uint64_t v243;
  const float *v244;
  const float *v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float v257;
  uint64_t v258;
  float32x4_t *v259;
  float32x4_t *v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  int8x16_t v268;
  int8x16_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  int8x16_t v274;
  int8x16_t v275;
  int v276;
  int v277;
  uint64_t v278;
  int v279;
  const float *v280;
  const float *v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t *v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  int8x16_t v303;
  int8x16_t v304;
  int8x16_t v305;
  int32x2_t v306;
  int8x16_t v307;
  int32x2_t v308;
  int v309;
  int v310;
  int v311;
  int v312;
  uint64_t v313;
  int v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  uint64_t v343;
  float64x2_t *v344;
  float64x2_t *v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  int64x2_t v397;
  int64x2_t v398;
  int64x2_t v399;
  int64x2_t v400;
  int64x2_t v401;
  int64x2_t v402;
  float64x2_t v403;
  int64x2_t v404;
  int64x2_t v405;
  float v406;
  unsigned int v407;
  int v408;
  uint64_t v409;
  int v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  uint64_t v435;
  int v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  int v465;
  int v466;
  uint64_t v467;
  const float *v468;
  const float *v469;
  float32x4_t v470;
  float32x4_t v471;
  float32x4_t v472;
  float32x4_t v473;
  float32x4_t v474;
  float32x4_t v475;
  float32x4_t v476;
  float32x4_t v477;
  float32x4_t v478;
  float32x4_t v479;
  float32x4_t v480;
  float32x4_t v481;
  float32x4_t v482;
  float v483;
  uint64_t v484;
  float32x4_t *v485;
  float32x4_t *v486;
  float32x4_t v487;
  float32x4_t v488;
  float32x4_t v489;
  float32x4_t v490;
  float32x4_t v491;
  float32x4_t v492;
  float32x4_t v493;
  float32x4_t v494;
  float32x4_t v495;
  float32x4_t v496;
  float32x4_t v497;
  float32x4_t v498;
  float32x4_t v499;
  int8x16_t v500;
  int8x16_t v501;
  int8x16_t v502;
  int8x16_t v503;
  float32x4_t v504;
  float32x4_t v505;
  float32x4_t v506;
  float32x4_t v507;
  float32x4_t v508;
  float32x4_t v509;
  int8x16_t v510;
  int8x16_t v511;
  int8x16_t v512;
  int32x2_t v513;
  int8x16_t v514;
  uint64_t v515;
  int v516;
  const float *v517;
  const float *v518;
  float32x4_t v519;
  float32x4_t v520;
  float32x4_t v521;
  float32x4_t v522;
  float32x4_t v523;
  float32x4_t v524;
  float32x4_t v525;
  float32x4_t v526;
  float32x4_t v527;
  float32x4_t v528;
  float32x4_t v529;
  uint64_t v530;
  int v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  uint64_t v556;
  int v557;
  const float *v558;
  const float *v559;
  float32x4_t v560;
  float32x4_t v561;
  float32x4_t v562;
  float32x4_t v563;
  float32x4_t v564;
  float32x4_t v565;
  float32x4_t v566;
  float32x4_t v567;
  float32x4_t v568;
  float32x4_t v569;
  float32x4_t v570;
  float32x4_t v571;
  float32x4_t v572;
  uint64_t v573;
  int v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  double result;
  int v604;
  uint64_t v605;
  int v606;
  const float *v607;
  const float *v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  uint64_t v620;
  int v621;
  const float *v622;
  const float *v623;
  float32x4_t v624;
  float32x4_t v625;
  float32x4_t v626;
  float32x4_t v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  std::runtime_error *v637;
  std::runtime_error *exception;
  float64x2_t v639;

  if (*((_DWORD *)this + 12) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "RamstadSRC::processStereo, wrong channel count");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  RamstadSRC::checkPreflight(this, a6, a7);
  if (!*((_BYTE *)this + 93))
  {
    if (*((_BYTE *)this + 92))
    {
      v71 = *((_DWORD *)this + 15);
      v72 = *((_DWORD *)this + 17);
      v18 = *((_DWORD *)this + 18);
      v20 = *((_DWORD *)this + 22);
      v73 = *(float32x4_t **)(*(_QWORD *)this + 16);
      v74 = *(_QWORD *)(*(_QWORD *)this + 40);
      v75 = (float32x4_t *)*((_QWORD *)this + 14);
      v76 = (float32x4_t *)*((_QWORD *)this + 17);
      v77 = *((_DWORD *)this + 13);
      if (*((_DWORD *)this + 14) == 8)
      {
        if (a7 < 1)
        {
          v79 = 0;
        }
        else
        {
          v78 = 0;
          v79 = 0;
          do
          {
            if (v20 < 1)
            {
              v93 = v75[2];
              v94 = v75[3];
            }
            else
            {
              v80 = 0;
              v81 = v20;
              do
              {
                v82 = &a2[v80];
                v83 = &a3[v80];
                v84 = vld1q_dup_f32(v82);
                v85 = vld1q_dup_f32(v83);
                v86 = v75[1];
                v87 = vmlaq_f32(v84, v86, v73[1]);
                v88 = vmlaq_f32(vmlaq_f32(v84, *v75, *v73), *v76, v73[2]);
                v89 = vmlaq_f32(v87, v76[1], v73[3]);
                *v76 = *v75;
                v76[1] = v86;
                *v75 = v88;
                v75[1] = v89;
                v90 = v75[2];
                v91 = v75[3];
                v92 = vmlaq_f32(v85, v91, v73[1]);
                v93 = vmlaq_f32(vmlaq_f32(v85, v90, *v73), v76[2], v73[2]);
                v94 = vmlaq_f32(v92, v76[3], v73[3]);
                v76[2] = v90;
                v76[3] = v91;
                v75[2] = v93;
                v75[3] = v94;
                v80 += a8;
                --v81;
              }
              while (v81);
              a2 = (const float *)((char *)a2 + v80 * 4);
              a3 = (const float *)((char *)a3 + v80 * 4);
            }
            v79 += v20;
            v95 = (float32x4_t *)(v74 + 32 * (int)(2 * v18));
            v96 = v95[1];
            v98 = v95[2];
            v97 = v95[3];
            v99 = vmlaq_f32(vmulq_f32(v97, v76[3]), v94, v96);
            v100 = vmlaq_f32(vmulq_f32(v98, v76[2]), v93, *v95);
            v101 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v98, *v76), *v75, *v95), vmlaq_f32(vmulq_f32(v97, v76[1]), v75[1], v96));
            *a4 = vaddv_f32(vadd_f32(*(float32x2_t *)v101.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v101, v101, 8uLL)));
            v102 = (int8x16_t)vaddq_f32(v100, v99);
            *a5 = vaddv_f32(vadd_f32(*(float32x2_t *)v102.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v102, v102, 8uLL)));
            a4 += a9;
            a5 += a9;
            v103 = v18 + v72;
            if (v103 < v77)
              v20 = v71;
            else
              v20 = v71 + 1;
            if (v103 < v77)
              v104 = 0;
            else
              v104 = v77;
            v18 = v103 - v104;
            ++v78;
          }
          while (v78 != a7);
        }
        v408 = a6 - v79;
        if (a6 <= v79)
          goto LABEL_155;
        if (v20 < v408)
          v408 = v20;
        if (v408 >= 1)
        {
          v515 = 0;
          v516 = v408;
          do
          {
            v517 = &a2[v515];
            v518 = &a3[v515];
            v519 = vld1q_dup_f32(v517);
            v520 = vld1q_dup_f32(v518);
            v521 = v75[1];
            v522 = vmlaq_f32(v519, v521, v73[1]);
            v523 = vmlaq_f32(vmlaq_f32(v519, *v75, *v73), *v76, v73[2]);
            v524 = vmlaq_f32(v522, v76[1], v73[3]);
            *v76 = *v75;
            v76[1] = v521;
            *v75 = v523;
            v75[1] = v524;
            v525 = v75[2];
            v526 = v75[3];
            v527 = vmlaq_f32(v520, v526, v73[1]);
            v528 = vmlaq_f32(vmlaq_f32(v520, v525, *v73), v76[2], v73[2]);
            v529 = vmlaq_f32(v527, v76[3], v73[3]);
            v76[2] = v525;
            v76[3] = v526;
            v75[2] = v528;
            v75[3] = v529;
            v515 += a8;
            --v516;
          }
          while (v516);
        }
      }
      else
      {
        if (a7 < 1)
        {
          v277 = 0;
        }
        else
        {
          v276 = 0;
          v277 = 0;
          do
          {
            if (v20 < 1)
            {
              v293 = v75[4];
              v294 = v75[5];
            }
            else
            {
              v278 = 0;
              v279 = v20;
              do
              {
                v280 = &a2[v278];
                v281 = &a3[v278];
                v282 = vld1q_dup_f32(v280);
                v283 = v75[1];
                v284 = vld1q_dup_f32(v281);
                v285 = vmlaq_f32(vmlaq_f32(v282, *v75, *v73), *v76, v73[4]);
                v286 = vmlaq_f32(vmlaq_f32(v282, v283, v73[1]), v76[1], v73[5]);
                *v76 = *v75;
                v76[1] = v283;
                *v75 = v285;
                v75[1] = v286;
                v287 = v75[2];
                v288 = v75[3];
                v289 = vmlaq_f32(vmlaq_f32(v284, v287, *v73), v76[2], v73[4]);
                v290 = vmlaq_f32(vmlaq_f32(v284, v288, v73[1]), v76[3], v73[5]);
                v76[2] = v287;
                v76[3] = v288;
                v75[2] = v289;
                v75[3] = v290;
                v291 = v75[4];
                v292 = v75[5];
                v293 = vmlaq_f32(vmlaq_f32(v282, v291, v73[2]), v76[4], v73[6]);
                v294 = vmlaq_f32(vmlaq_f32(v284, v292, v73[3]), v76[5], v73[7]);
                v76[4] = v291;
                v76[5] = v292;
                v75[4] = v293;
                v75[5] = v294;
                v278 += a8;
                --v279;
              }
              while (v279);
              a2 = (const float *)((char *)a2 + v278 * 4);
              a3 = (const float *)((char *)a3 + v278 * 4);
            }
            v277 += v20;
            v295 = (float32x4_t *)(v74 + 32 * (int)(4 * v18));
            v296 = v295[1];
            v298 = v295[4];
            v297 = v295[5];
            v299 = vmlaq_f32(vmulq_f32(v297, v76[1]), v75[1], v296);
            v300 = vmlaq_f32(vmulq_f32(v298, *v76), *v75, *v295);
            v301 = vmlaq_f32(vmulq_f32(v297, v76[3]), v75[3], v296);
            v302 = vmlaq_f32(vmulq_f32(v298, v76[2]), v75[2], *v295);
            v303 = (int8x16_t)vmlaq_f32(vmulq_f32(v295[7], v76[5]), v294, v295[3]);
            v304 = (int8x16_t)vmlaq_f32(vmulq_f32(v295[6], v76[4]), v293, v295[2]);
            v305 = (int8x16_t)vaddq_f32(v300, v299);
            *(float32x2_t *)v305.i8 = vadd_f32(*(float32x2_t *)v305.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v305, v305, 8uLL));
            v306 = (int32x2_t)vadd_f32(*(float32x2_t *)v304.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v304, v304, 8uLL));
            *a4 = vaddv_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v305.i8, v306), (float32x2_t)vzip2_s32(*(int32x2_t *)v305.i8, v306)));
            v307 = (int8x16_t)vaddq_f32(v302, v301);
            *(float32x2_t *)v307.i8 = vadd_f32(*(float32x2_t *)v307.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v307, v307, 8uLL));
            v308 = (int32x2_t)vadd_f32(*(float32x2_t *)v303.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v303, v303, 8uLL));
            *a5 = vaddv_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v307.i8, v308), (float32x2_t)vzip2_s32(*(int32x2_t *)v307.i8, v308)));
            a4 += a9;
            a5 += a9;
            v309 = v18 + v72;
            if (v309 < v77)
              v20 = v71;
            else
              v20 = v71 + 1;
            if (v309 < v77)
              v310 = 0;
            else
              v310 = v77;
            v18 = v309 - v310;
            ++v276;
          }
          while (v276 != a7);
        }
        v408 = a6 - v277;
        if (a6 <= v277)
          goto LABEL_155;
        if (v20 < v408)
          v408 = v20;
        if (v408 >= 1)
        {
          v556 = 0;
          v557 = v408;
          do
          {
            v558 = &a2[v556];
            v559 = &a3[v556];
            v560 = vld1q_dup_f32(v558);
            v561 = v75[1];
            v562 = vld1q_dup_f32(v559);
            v563 = vmlaq_f32(vmlaq_f32(v560, *v75, *v73), *v76, v73[4]);
            v564 = vmlaq_f32(vmlaq_f32(v560, v561, v73[1]), v76[1], v73[5]);
            *v76 = *v75;
            v76[1] = v561;
            *v75 = v563;
            v75[1] = v564;
            v565 = v75[2];
            v566 = v75[3];
            v567 = vmlaq_f32(vmlaq_f32(v562, v565, *v73), v76[2], v73[4]);
            v568 = vmlaq_f32(vmlaq_f32(v562, v566, v73[1]), v76[3], v73[5]);
            v76[2] = v565;
            v76[3] = v566;
            v75[2] = v567;
            v75[3] = v568;
            v569 = v75[4];
            v570 = v75[5];
            v571 = vmlaq_f32(vmlaq_f32(v560, v569, v73[2]), v76[4], v73[6]);
            v572 = vmlaq_f32(vmlaq_f32(v562, v570, v73[3]), v76[5], v73[7]);
            v76[4] = v569;
            v76[5] = v570;
            v75[4] = v571;
            v75[5] = v572;
            v556 += a8;
            --v557;
          }
          while (v557);
        }
      }
      goto LABEL_154;
    }
    v234 = *((_DWORD *)this + 17);
    v233 = *((_DWORD *)this + 18);
    v235 = *((_DWORD *)this + 22);
    v236 = *(float32x4_t **)(*(_QWORD *)this + 16);
    v237 = *(_QWORD *)(*(_QWORD *)this + 40);
    v238 = (float32x4_t *)*((_QWORD *)this + 14);
    v239 = (float32x4_t *)*((_QWORD *)this + 17);
    v240 = *((_DWORD *)this + 15);
    if (*((_DWORD *)this + 14) == 8)
    {
      if (a7 >= 1)
      {
        v241 = 0;
        v242 = 0;
        while (1)
        {
          v241 += v235;
          if (v241 > *((_DWORD *)this + 64))
            goto LABEL_174;
          if (v235 < 1)
          {
            v255 = v238[2];
            v256 = v238[3];
          }
          else
          {
            v243 = 0;
            do
            {
              v244 = &a2[v243];
              v245 = &a3[v243];
              v246 = vld1q_dup_f32(v244);
              v247 = vld1q_dup_f32(v245);
              v248 = v238[1];
              v249 = vmlaq_f32(v246, v248, v236[1]);
              v250 = vmlaq_f32(vmlaq_f32(v246, *v238, *v236), *v239, v236[2]);
              v251 = vmlaq_f32(v249, v239[1], v236[3]);
              *v239 = *v238;
              v239[1] = v248;
              *v238 = v250;
              v238[1] = v251;
              v252 = v238[2];
              v253 = v238[3];
              v254 = vmlaq_f32(v247, v253, v236[1]);
              v255 = vmlaq_f32(vmlaq_f32(v247, v252, *v236), v239[2], v236[2]);
              v256 = vmlaq_f32(v254, v239[3], v236[3]);
              v239[2] = v252;
              v239[3] = v253;
              v238[2] = v255;
              v238[3] = v256;
              v243 += a8;
              --v235;
            }
            while (v235);
            a2 = (const float *)((char *)a2 + v243 * 4);
            a3 = (const float *)((char *)a3 + v243 * 4);
          }
          v257 = *((double *)this + 12) * (double)(v233 & 0x7FFFFF);
          v258 = (v233 >> 22) & 0x1FE;
          v259 = (float32x4_t *)(v237 + 32 * v258);
          v260 = (float32x4_t *)(v237 + 32 * (v258 + 2));
          v261 = v259[1];
          v262 = v238[1];
          v264 = v259[2];
          v263 = v259[3];
          v265 = v239[1];
          v267 = v239[2];
          v266 = v239[3];
          v268 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v264, *v239), *v238, *v259), vmlaq_f32(vmulq_f32(v263, v265), v262, v261));
          *(float32x2_t *)v268.i8 = vadd_f32(*(float32x2_t *)v268.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v268, v268, 8uLL));
          v269 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v264, v267), v255, *v259), vmlaq_f32(vmulq_f32(v263, v266), v256, v261));
          *(float32x2_t *)v269.i8 = vadd_f32(*(float32x2_t *)v269.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v269, v269, 8uLL));
          v270 = v260[1];
          v272 = v260[2];
          v271 = v260[3];
          v273 = vmlaq_f32(vmulq_f32(v267, v272), v255, *v260);
          v274 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(*v239, v272), *v238, *v260), vmlaq_f32(vmulq_f32(v265, v271), v262, v270));
          *(float32x2_t *)v274.i8 = vadd_f32(*(float32x2_t *)v274.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v274, v274, 8uLL));
          *(float32x2_t *)v274.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v274.i8, *(int32x2_t *)v268.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v274.i8, *(int32x2_t *)v268.i8));
          v275 = (int8x16_t)vaddq_f32(v273, vmlaq_f32(vmulq_f32(v266, v271), v256, v270));
          *(float32x2_t *)v275.i8 = vadd_f32(*(float32x2_t *)v275.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v275, v275, 8uLL));
          *(float32x2_t *)v275.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v275.i8, *(int32x2_t *)v269.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v275.i8, *(int32x2_t *)v269.i8));
          *a4 = *(float *)&v274.i32[1] + (float)(v257 * (float)(*(float *)v274.i32 - *(float *)&v274.i32[1]));
          *a5 = *(float *)&v275.i32[1] + (float)(v257 * (float)(*(float *)v275.i32 - *(float *)&v275.i32[1]));
          a4 += a9;
          a5 += a9;
          LODWORD(v260) = v233 + v234;
          v233 = (v233 + v234) & 0x7FFFFFFF;
          v235 = v240 + (v260 >> 31);
          if (++v242 == a7)
            goto LABEL_158;
        }
      }
      v241 = 0;
LABEL_158:
      v604 = a6 - v241;
      if (a6 > v241)
      {
        if (v235 < v604)
          v604 = v235;
        if (v604 >= 1)
        {
          v605 = 0;
          v606 = v604;
          do
          {
            v607 = &a2[v605];
            v608 = &a3[v605];
            v609 = vld1q_dup_f32(v607);
            v610 = vld1q_dup_f32(v608);
            v611 = v238[1];
            v612 = vmlaq_f32(v609, v611, v236[1]);
            v613 = vmlaq_f32(vmlaq_f32(v609, *v238, *v236), *v239, v236[2]);
            v614 = vmlaq_f32(v612, v239[1], v236[3]);
            *v239 = *v238;
            v239[1] = v611;
            *v238 = v613;
            v238[1] = v614;
            v615 = v238[2];
            v616 = v238[3];
            v617 = vmlaq_f32(v610, v616, v236[1]);
            v618 = vmlaq_f32(vmlaq_f32(v610, v615, *v236), v239[2], v236[2]);
            v619 = vmlaq_f32(v617, v239[3], v236[3]);
            v239[2] = v615;
            v239[3] = v616;
            v238[2] = v618;
            v238[3] = v619;
            v605 += a8;
            --v606;
          }
          while (v606);
        }
LABEL_172:
        v235 -= v604;
      }
    }
    else
    {
      if (a7 >= 1)
      {
        v465 = 0;
        v466 = 0;
        while (1)
        {
          v466 += v235;
          if (v466 > *((_DWORD *)this + 64))
            break;
          if (v235 < 1)
          {
            v481 = v238[4];
            v482 = v238[5];
          }
          else
          {
            v467 = 0;
            do
            {
              v468 = &a2[v467];
              v469 = &a3[v467];
              v470 = vld1q_dup_f32(v468);
              v471 = v238[1];
              v472 = vld1q_dup_f32(v469);
              v473 = vmlaq_f32(vmlaq_f32(v470, *v238, *v236), *v239, v236[4]);
              v474 = vmlaq_f32(vmlaq_f32(v470, v471, v236[1]), v239[1], v236[5]);
              *v239 = *v238;
              v239[1] = v471;
              *v238 = v473;
              v238[1] = v474;
              v475 = v238[2];
              v476 = v238[3];
              v477 = vmlaq_f32(vmlaq_f32(v472, v475, *v236), v239[2], v236[4]);
              v478 = vmlaq_f32(vmlaq_f32(v472, v476, v236[1]), v239[3], v236[5]);
              v239[2] = v475;
              v239[3] = v476;
              v238[2] = v477;
              v238[3] = v478;
              v479 = v238[4];
              v480 = v238[5];
              v481 = vmlaq_f32(vmlaq_f32(v470, v479, v236[2]), v239[4], v236[6]);
              v482 = vmlaq_f32(vmlaq_f32(v472, v480, v236[3]), v239[5], v236[7]);
              v239[4] = v479;
              v239[5] = v480;
              v238[4] = v481;
              v238[5] = v482;
              v467 += a8;
              --v235;
            }
            while (v235);
            a2 = (const float *)((char *)a2 + v467 * 4);
            a3 = (const float *)((char *)a3 + v467 * 4);
          }
          v483 = *((double *)this + 12) * (double)(v233 & 0x7FFFFF);
          v484 = (v233 >> 21) & 0x3FC;
          v485 = (float32x4_t *)(v237 + 32 * v484);
          v486 = (float32x4_t *)(v237 + 32 * (v484 + 4));
          v487 = v485[1];
          v488 = v238[1];
          v490 = v485[4];
          v489 = v485[5];
          v491 = v239[1];
          v492 = vmlaq_f32(vmulq_f32(v489, v491), v488, v487);
          v493 = v238[2];
          v494 = v238[3];
          v496 = v239[2];
          v495 = v239[3];
          v497 = vmlaq_f32(vmulq_f32(v489, v495), v494, v487);
          v499 = v239[4];
          v498 = v239[5];
          v500 = (int8x16_t)vmlaq_f32(vmulq_f32(v485[7], v498), v482, v485[3]);
          v501 = (int8x16_t)vmlaq_f32(vmulq_f32(v485[6], v499), v481, v485[2]);
          v502 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v490, *v239), *v238, *v485), v492);
          *(float32x2_t *)v502.i8 = vadd_f32(*(float32x2_t *)v502.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v502, v502, 8uLL));
          *(float32x2_t *)v487.f32 = vadd_f32(*(float32x2_t *)v501.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v501, v501, 8uLL));
          v503 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v490, v496), v493, *v485), v497);
          *(float32x2_t *)v503.i8 = vadd_f32(*(float32x2_t *)v503.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v503, v503, 8uLL));
          *(float32x2_t *)v490.f32 = vadd_f32(*(float32x2_t *)v500.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v500, v500, 8uLL));
          v504 = v486[1];
          v506 = v486[4];
          v505 = v486[5];
          v507 = vmlaq_f32(vmulq_f32(v491, v505), v488, v504);
          v508 = vmlaq_f32(vmulq_f32(v495, v505), v494, v504);
          v509 = vmlaq_f32(vmulq_f32(v496, v506), v493, *v486);
          v510 = (int8x16_t)vmlaq_f32(vmulq_f32(v498, v486[7]), v482, v486[3]);
          v511 = (int8x16_t)vmlaq_f32(vmulq_f32(v499, v486[6]), v481, v486[2]);
          v512 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(*v239, v506), *v238, *v486), v507);
          *(float32x2_t *)v512.i8 = vadd_f32(*(float32x2_t *)v512.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v512, v512, 8uLL));
          v513 = (int32x2_t)vadd_f32(*(float32x2_t *)v511.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v511, v511, 8uLL));
          *(float32x2_t *)v512.i8 = vadd_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v512.i8, *(int32x2_t *)v502.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v512.i8, *(int32x2_t *)v502.i8)), vadd_f32((float32x2_t)vzip1_s32(v513, *(int32x2_t *)v487.f32), (float32x2_t)vzip2_s32(v513, *(int32x2_t *)v487.f32)));
          v514 = (int8x16_t)vaddq_f32(v509, v508);
          *(float32x2_t *)v514.i8 = vadd_f32(*(float32x2_t *)v514.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v514, v514, 8uLL));
          *(float32x2_t *)v502.i8 = vadd_f32(*(float32x2_t *)v510.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v510, v510, 8uLL));
          *(float32x2_t *)v514.i8 = vadd_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v514.i8, *(int32x2_t *)v503.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v514.i8, *(int32x2_t *)v503.i8)), vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v502.i8, *(int32x2_t *)v490.f32), (float32x2_t)vzip2_s32(*(int32x2_t *)v502.i8, *(int32x2_t *)v490.f32)));
          *a4 = *(float *)&v512.i32[1] + (float)(v483 * (float)(*(float *)v512.i32 - *(float *)&v512.i32[1]));
          *a5 = *(float *)&v514.i32[1] + (float)(v483 * (float)(*(float *)v514.i32 - *(float *)&v514.i32[1]));
          a4 += a9;
          a5 += a9;
          LODWORD(v486) = v233 + v234;
          v233 = (v233 + v234) & 0x7FFFFFFF;
          v235 = v240 + (v486 >> 31);
          if (++v465 == a7)
            goto LABEL_166;
        }
LABEL_174:
        v637 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v637, "RamstadSRC::processStereoFrac preflight prediction failed.");
        __cxa_throw(v637, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v466 = 0;
LABEL_166:
      v604 = a6 - v466;
      if (a6 > v466)
      {
        if (v235 < v604)
          v604 = v235;
        if (v604 >= 1)
        {
          v620 = 0;
          v621 = v604;
          do
          {
            v622 = &a2[v620];
            v623 = &a3[v620];
            v624 = vld1q_dup_f32(v622);
            v625 = v238[1];
            v626 = vld1q_dup_f32(v623);
            v627 = vmlaq_f32(vmlaq_f32(v624, *v238, *v236), *v239, v236[4]);
            v628 = vmlaq_f32(vmlaq_f32(v624, v625, v236[1]), v239[1], v236[5]);
            *v239 = *v238;
            v239[1] = v625;
            *v238 = v627;
            v238[1] = v628;
            v629 = v238[2];
            v630 = v238[3];
            v631 = vmlaq_f32(vmlaq_f32(v626, v629, *v236), v239[2], v236[4]);
            v632 = vmlaq_f32(vmlaq_f32(v626, v630, v236[1]), v239[3], v236[5]);
            v239[2] = v629;
            v239[3] = v630;
            v238[2] = v631;
            v238[3] = v632;
            v633 = v238[4];
            v634 = v238[5];
            v635 = vmlaq_f32(vmlaq_f32(v624, v633, v236[2]), v239[4], v236[6]);
            v636 = vmlaq_f32(vmlaq_f32(v626, v634, v236[3]), v239[5], v236[7]);
            v239[4] = v633;
            v239[5] = v634;
            v238[4] = v635;
            v238[5] = v636;
            v620 += a8;
            --v621;
          }
          while (v621);
        }
        goto LABEL_172;
      }
    }
    *((_DWORD *)this + 18) = v233;
    *((_DWORD *)this + 22) = v235;
    goto LABEL_156;
  }
  if (*((_BYTE *)this + 92))
  {
    v17 = *((_DWORD *)this + 15);
    v19 = *((_DWORD *)this + 17);
    v18 = *((_DWORD *)this + 18);
    v20 = *((_DWORD *)this + 22);
    v21 = *((_QWORD *)this + 2);
    v22 = *(float64x2_t **)(v21 + 16);
    v23 = *(_QWORD *)(v21 + 40);
    v24 = (float64x2_t *)*((_QWORD *)this + 20);
    v25 = (float64x2_t *)*((_QWORD *)this + 23);
    v26 = *((_DWORD *)this + 13);
    if (*((_DWORD *)this + 14) == 8)
    {
      if (a7 < 1)
      {
        v28 = 0;
      }
      else
      {
        v27 = 0;
        v28 = 0;
        do
        {
          if (v20 < 1)
          {
            v54 = v24[6];
            v53 = v24[7];
            v52 = v24[4];
            v51 = v24[5];
          }
          else
          {
            v29 = 0;
            v30 = v20;
            do
            {
              v31 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2[v29]), 0);
              v32 = *v24;
              v33 = v24[1];
              v34 = v24[2];
              v35 = v24[3];
              v36 = vmlaq_f64(v31, v35, v22[3]);
              v37 = vmlaq_f64(v31, v34, v22[2]);
              v38 = vmlaq_f64(v31, v33, v22[1]);
              v39 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a3[v29]), 0);
              v40 = vmlaq_f64(vmlaq_f64(v31, *v24, *v22), *v25, v22[4]);
              v41 = vmlaq_f64(v38, v25[1], v22[5]);
              v42 = vmlaq_f64(v37, v25[2], v22[6]);
              v43 = vmlaq_f64(v36, v25[3], v22[7]);
              v25[2] = v34;
              v25[3] = v35;
              *v25 = v32;
              v25[1] = v33;
              v24[2] = v42;
              v24[3] = v43;
              *v24 = v40;
              v24[1] = v41;
              v45 = v24[4];
              v44 = v24[5];
              v47 = v24[6];
              v46 = v24[7];
              v48 = vmlaq_f64(v39, v47, v22[2]);
              v49 = vmlaq_f64(v39, v46, v22[3]);
              v50 = vmlaq_f64(v39, v45, *v22);
              v51 = vmlaq_f64(vmlaq_f64(v39, v44, v22[1]), v25[5], v22[5]);
              v52 = vmlaq_f64(v50, v25[4], v22[4]);
              v53 = vmlaq_f64(v49, v25[7], v22[7]);
              v54 = vmlaq_f64(v48, v25[6], v22[6]);
              v25[4] = v45;
              v25[5] = v44;
              v25[6] = v47;
              v25[7] = v46;
              v24[6] = v54;
              v24[7] = v53;
              v24[4] = v52;
              v24[5] = v51;
              v29 += a8;
              --v30;
            }
            while (v30);
            a2 = (const float *)((char *)a2 + v29 * 4);
            a3 = (const float *)((char *)a3 + v29 * 4);
          }
          v28 += v20;
          v55 = (float64x2_t *)(v23 + ((uint64_t)(int)(2 * v18) << 6));
          v56 = v55[1];
          v58 = v55[2];
          v57 = v55[3];
          v59 = v55[6];
          v60 = v55[7];
          v61 = v55[4];
          v62 = v55[5];
          v63 = vmlaq_f64(vmulq_f64(v59, v25[6]), v54, v58);
          v64 = vmlaq_f64(vmulq_f64(v61, v25[4]), v52, *v55);
          v65 = vmlaq_f64(vmulq_f64(v60, v25[7]), v53, v57);
          v66 = vmlaq_f64(vmulq_f64(v62, v25[5]), v51, v56);
          v67 = vaddvq_f64(vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v61, *v25), *v24, *v55), vmlaq_f64(vmulq_f64(v59, v25[2]), v24[2], v58)), vaddq_f64(vmlaq_f64(vmulq_f64(v62, v25[1]), v24[1], v56), vmlaq_f64(vmulq_f64(v60, v25[3]), v24[3], v57))));
          *a4 = v67;
          v68 = vaddvq_f64(vaddq_f64(vaddq_f64(v64, v63), vaddq_f64(v66, v65)));
          *a5 = v68;
          a4 += a9;
          a5 += a9;
          v69 = v18 + v19;
          if (v69 < v26)
            v20 = v17;
          else
            v20 = v17 + 1;
          if (v69 < v26)
            v70 = 0;
          else
            v70 = v26;
          v18 = v69 - v70;
          ++v27;
        }
        while (v27 != a7);
      }
      v408 = a6 - v28;
      if (a6 <= v28)
        goto LABEL_155;
      if (v20 < v408)
        v408 = v20;
      if (v408 >= 1)
      {
        v409 = 0;
        v410 = v408;
        do
        {
          v411 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2[v409]), 0);
          v412 = *v24;
          v413 = v24[1];
          v414 = v24[2];
          v415 = v24[3];
          v416 = vmlaq_f64(v411, v415, v22[3]);
          v417 = vmlaq_f64(v411, v414, v22[2]);
          v418 = vmlaq_f64(v411, v413, v22[1]);
          v419 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a3[v409]), 0);
          v420 = vmlaq_f64(vmlaq_f64(v411, *v24, *v22), *v25, v22[4]);
          v421 = vmlaq_f64(v418, v25[1], v22[5]);
          v422 = vmlaq_f64(v417, v25[2], v22[6]);
          v423 = vmlaq_f64(v416, v25[3], v22[7]);
          v25[2] = v414;
          v25[3] = v415;
          *v25 = v412;
          v25[1] = v413;
          v24[2] = v422;
          v24[3] = v423;
          *v24 = v420;
          v24[1] = v421;
          v425 = v24[4];
          v424 = v24[5];
          v427 = v24[6];
          v426 = v24[7];
          v428 = vmlaq_f64(v419, v427, v22[2]);
          v429 = vmlaq_f64(v419, v426, v22[3]);
          v430 = vmlaq_f64(v419, v425, *v22);
          v431 = vmlaq_f64(vmlaq_f64(v419, v424, v22[1]), v25[5], v22[5]);
          v432 = vmlaq_f64(v430, v25[4], v22[4]);
          v433 = vmlaq_f64(v429, v25[7], v22[7]);
          v434 = vmlaq_f64(v428, v25[6], v22[6]);
          v25[4] = v425;
          v25[5] = v424;
          v25[6] = v427;
          v25[7] = v426;
          v24[6] = v434;
          v24[7] = v433;
          v24[4] = v432;
          v24[5] = v431;
          v409 += a8;
          --v410;
        }
        while (v410);
      }
    }
    else
    {
      if (a7 < 1)
      {
        v177 = 0;
      }
      else
      {
        v176 = 0;
        v177 = 0;
        do
        {
          if (v20 < 1)
          {
            v207 = v24[10];
            v206 = v24[11];
            v205 = v24[8];
            v204 = v24[9];
          }
          else
          {
            v178 = 0;
            v179 = v20;
            do
            {
              v180 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2[v178]), 0);
              v181 = *v24;
              v182 = v24[1];
              v183 = v24[2];
              v184 = v24[3];
              v185 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a3[v178]), 0);
              v186 = vmlaq_f64(vmlaq_f64(v180, *v24, *v22), *v25, v22[8]);
              v187 = vmlaq_f64(vmlaq_f64(v180, v182, v22[1]), v25[1], v22[9]);
              v188 = vmlaq_f64(vmlaq_f64(v180, v183, v22[2]), v25[2], v22[10]);
              v189 = vmlaq_f64(vmlaq_f64(v180, v184, v22[3]), v25[3], v22[11]);
              v25[2] = v183;
              v25[3] = v184;
              *v25 = v181;
              v25[1] = v182;
              v24[2] = v188;
              v24[3] = v189;
              *v24 = v186;
              v24[1] = v187;
              v190 = v24[4];
              v191 = v24[5];
              v192 = v24[6];
              v193 = v24[7];
              v194 = vmlaq_f64(vmlaq_f64(v185, v190, *v22), v25[4], v22[8]);
              v195 = vmlaq_f64(vmlaq_f64(v185, v191, v22[1]), v25[5], v22[9]);
              v196 = vmlaq_f64(vmlaq_f64(v185, v192, v22[2]), v25[6], v22[10]);
              v197 = vmlaq_f64(vmlaq_f64(v185, v193, v22[3]), v25[7], v22[11]);
              v25[4] = v190;
              v25[5] = v191;
              v25[6] = v192;
              v25[7] = v193;
              v24[6] = v196;
              v24[7] = v197;
              v24[4] = v194;
              v24[5] = v195;
              v199 = v24[8];
              v198 = v24[9];
              v201 = v24[10];
              v200 = v24[11];
              v202 = vmlaq_f64(v185, v201, v22[6]);
              v203 = vmlaq_f64(v180, v199, v22[4]);
              v204 = vmlaq_f64(vmlaq_f64(v180, v198, v22[5]), v25[9], v22[13]);
              v205 = vmlaq_f64(v203, v25[8], v22[12]);
              v206 = vmlaq_f64(vmlaq_f64(v185, v200, v22[7]), v25[11], v22[15]);
              v207 = vmlaq_f64(v202, v25[10], v22[14]);
              v25[8] = v199;
              v25[9] = v198;
              v25[10] = v201;
              v25[11] = v200;
              v24[10] = v207;
              v24[11] = v206;
              v24[8] = v205;
              v24[9] = v204;
              v178 += a8;
              --v179;
            }
            while (v179);
            a2 = (const float *)((char *)a2 + v178 * 4);
            a3 = (const float *)((char *)a3 + v178 * 4);
          }
          v177 += v20;
          v208 = (float64x2_t *)(v23 + ((uint64_t)(int)(4 * v18) << 6));
          v209 = v208[1];
          v211 = v208[2];
          v210 = v208[3];
          v212 = v208[10];
          v213 = v208[11];
          v214 = v208[8];
          v215 = v208[9];
          v216 = vmlaq_f64(vmulq_f64(v212, v25[2]), v24[2], v211);
          v217 = vmlaq_f64(vmulq_f64(v214, *v25), *v24, *v208);
          v218 = vmlaq_f64(vmulq_f64(v213, v25[3]), v24[3], v210);
          v219 = vmlaq_f64(vmulq_f64(v215, v25[1]), v24[1], v209);
          v220 = vmlaq_f64(vmulq_f64(v212, v25[6]), v24[6], v211);
          v221 = vmlaq_f64(vmulq_f64(v214, v25[4]), v24[4], *v208);
          v222 = vmlaq_f64(vmulq_f64(v213, v25[7]), v24[7], v210);
          v223 = vmlaq_f64(vmulq_f64(v215, v25[5]), v24[5], v209);
          v224 = vmlaq_f64(vmulq_f64(v208[15], v25[11]), v206, v208[7]);
          v225 = vmlaq_f64(vmulq_f64(v208[14], v25[10]), v207, v208[6]);
          v226 = vmlaq_f64(vmulq_f64(v208[13], v25[9]), v204, v208[5]);
          v227 = (int64x2_t)vaddq_f64(vaddq_f64(v217, v216), vaddq_f64(v219, v218));
          v228 = (int64x2_t)vaddq_f64(vmlaq_f64(vmulq_f64(v208[12], v25[8]), v205, v208[4]), v226);
          *(float *)v227.i32 = vaddvq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v227, v228), (float64x2_t)vzip2q_s64(v227, v228)));
          *a4 = *(float *)v227.i32;
          v229 = (int64x2_t)vaddq_f64(vaddq_f64(v221, v220), vaddq_f64(v223, v222));
          v230 = (int64x2_t)vaddq_f64(v225, v224);
          *(float *)v229.i32 = vaddvq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v229, v230), (float64x2_t)vzip2q_s64(v229, v230)));
          *a5 = *(float *)v229.i32;
          a4 += a9;
          a5 += a9;
          v231 = v18 + v19;
          if (v231 < v26)
            v20 = v17;
          else
            v20 = v17 + 1;
          if (v231 < v26)
            v232 = 0;
          else
            v232 = v26;
          v18 = v231 - v232;
          ++v176;
        }
        while (v176 != a7);
      }
      v408 = a6 - v177;
      if (a6 <= v177)
        goto LABEL_155;
      if (v20 < v408)
        v408 = v20;
      if (v408 >= 1)
      {
        v435 = 0;
        v436 = v408;
        do
        {
          v437 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2[v435]), 0);
          v438 = *v24;
          v439 = v24[1];
          v440 = v24[2];
          v441 = v24[3];
          v442 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a3[v435]), 0);
          v443 = vmlaq_f64(vmlaq_f64(v437, *v24, *v22), *v25, v22[8]);
          v444 = vmlaq_f64(vmlaq_f64(v437, v439, v22[1]), v25[1], v22[9]);
          v445 = vmlaq_f64(vmlaq_f64(v437, v440, v22[2]), v25[2], v22[10]);
          v446 = vmlaq_f64(vmlaq_f64(v437, v441, v22[3]), v25[3], v22[11]);
          v25[2] = v440;
          v25[3] = v441;
          *v25 = v438;
          v25[1] = v439;
          v24[2] = v445;
          v24[3] = v446;
          *v24 = v443;
          v24[1] = v444;
          v447 = v24[4];
          v448 = v24[5];
          v449 = v24[6];
          v450 = v24[7];
          v451 = vmlaq_f64(vmlaq_f64(v442, v447, *v22), v25[4], v22[8]);
          v452 = vmlaq_f64(vmlaq_f64(v442, v448, v22[1]), v25[5], v22[9]);
          v453 = vmlaq_f64(vmlaq_f64(v442, v449, v22[2]), v25[6], v22[10]);
          v454 = vmlaq_f64(vmlaq_f64(v442, v450, v22[3]), v25[7], v22[11]);
          v25[4] = v447;
          v25[5] = v448;
          v25[6] = v449;
          v25[7] = v450;
          v24[6] = v453;
          v24[7] = v454;
          v24[4] = v451;
          v24[5] = v452;
          v456 = v24[8];
          v455 = v24[9];
          v458 = v24[10];
          v457 = v24[11];
          v459 = vmlaq_f64(v442, v458, v22[6]);
          v460 = vmlaq_f64(v437, v456, v22[4]);
          v461 = vmlaq_f64(vmlaq_f64(v437, v455, v22[5]), v25[9], v22[13]);
          v462 = vmlaq_f64(v460, v25[8], v22[12]);
          v463 = vmlaq_f64(vmlaq_f64(v442, v457, v22[7]), v25[11], v22[15]);
          v464 = vmlaq_f64(v459, v25[10], v22[14]);
          v25[8] = v456;
          v25[9] = v455;
          v25[10] = v458;
          v25[11] = v457;
          v24[10] = v464;
          v24[11] = v463;
          v24[8] = v462;
          v24[9] = v461;
          v435 += a8;
          --v436;
        }
        while (v436);
      }
    }
  }
  else
  {
    v105 = *((_DWORD *)this + 17);
    v18 = *((_DWORD *)this + 18);
    v20 = *((_DWORD *)this + 22);
    v106 = *((_QWORD *)this + 2);
    v107 = *(float64x2_t **)(v106 + 16);
    v108 = *(_QWORD *)(v106 + 40);
    v109 = (float64x2_t *)*((_QWORD *)this + 20);
    v110 = (float64x2_t *)*((_QWORD *)this + 23);
    v111 = *((_DWORD *)this + 15);
    if (*((_DWORD *)this + 14) == 8)
    {
      if (a7 < 1)
      {
        v112 = 0;
      }
      else
      {
        v112 = 0;
        v113 = 0;
        do
        {
          if (v20 < 1)
          {
            v139 = v109[6];
            v138 = v109[7];
            v137 = v109[4];
            v136 = v109[5];
          }
          else
          {
            v114 = 0;
            v115 = v20;
            do
            {
              v116 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2[v114]), 0);
              v117 = *v109;
              v118 = v109[1];
              v119 = v109[2];
              v120 = v109[3];
              v121 = vmlaq_f64(v116, v120, v107[3]);
              v122 = vmlaq_f64(v116, v119, v107[2]);
              v123 = vmlaq_f64(v116, v118, v107[1]);
              v124 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a3[v114]), 0);
              v125 = vmlaq_f64(vmlaq_f64(v116, *v109, *v107), *v110, v107[4]);
              v126 = vmlaq_f64(v123, v110[1], v107[5]);
              v127 = vmlaq_f64(v122, v110[2], v107[6]);
              v128 = vmlaq_f64(v121, v110[3], v107[7]);
              v110[2] = v119;
              v110[3] = v120;
              *v110 = v117;
              v110[1] = v118;
              v109[2] = v127;
              v109[3] = v128;
              *v109 = v125;
              v109[1] = v126;
              v130 = v109[4];
              v129 = v109[5];
              v132 = v109[6];
              v131 = v109[7];
              v133 = vmlaq_f64(v124, v132, v107[2]);
              v134 = vmlaq_f64(v124, v131, v107[3]);
              v135 = vmlaq_f64(v124, v130, *v107);
              v136 = vmlaq_f64(vmlaq_f64(v124, v129, v107[1]), v110[5], v107[5]);
              v137 = vmlaq_f64(v135, v110[4], v107[4]);
              v138 = vmlaq_f64(v134, v110[7], v107[7]);
              v139 = vmlaq_f64(v133, v110[6], v107[6]);
              v110[4] = v130;
              v110[5] = v129;
              v110[6] = v132;
              v110[7] = v131;
              v109[6] = v139;
              v109[7] = v138;
              v109[4] = v137;
              v109[5] = v136;
              v114 += a8;
              --v115;
            }
            while (v115);
            a2 = (const float *)((char *)a2 + v114 * 4);
            a3 = (const float *)((char *)a3 + v114 * 4);
          }
          v112 += v20;
          v140 = *((double *)this + 12) * (double)(v18 & 0x7FFFFF);
          v141 = (v18 >> 22) & 0x1FE;
          v142 = (float64x2_t *)(v108 + (v141 << 6));
          v143 = (float64x2_t *)(v108 + ((unint64_t)(v141 + 2) << 6));
          v144 = v142[1];
          v146 = v142[2];
          v145 = v142[3];
          v147 = v109[1];
          v149 = v109[2];
          v148 = v109[3];
          v150 = v142[6];
          v151 = v142[7];
          v152 = v142[4];
          v153 = v142[5];
          v154 = v110[2];
          v155 = v110[3];
          v156 = v110[1];
          v157 = vmlaq_f64(vmulq_f64(v153, v156), v147, v144);
          v158 = v110[6];
          v159 = v110[7];
          v160 = v110[4];
          v161 = v110[5];
          v162 = vmlaq_f64(vmulq_f64(v153, v161), v136, v144);
          v163 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v152, *v110), *v109, *v142), vmlaq_f64(vmulq_f64(v150, v154), v149, v146)), vaddq_f64(v157, vmlaq_f64(vmulq_f64(v151, v155), v148, v145)));
          v164 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v152, v160), v137, *v142), vmlaq_f64(vmulq_f64(v150, v158), v139, v146)), vaddq_f64(v162, vmlaq_f64(vmulq_f64(v151, v159), v138, v145)));
          v165 = v143[1];
          v167 = v143[2];
          v166 = v143[3];
          v168 = v143[6];
          v169 = v143[7];
          v170 = v143[4];
          v171 = v143[5];
          v172 = vmlaq_f64(vmulq_f64(v156, v171), v147, v165);
          v173 = vmlaq_f64(vmulq_f64(v161, v171), v136, v165);
          v174 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(*v110, v170), *v109, *v143), vmlaq_f64(vmulq_f64(v154, v168), v149, v167)), vaddq_f64(v172, vmlaq_f64(vmulq_f64(v155, v169), v148, v166)));
          *(float32x2_t *)v174.i8 = vcvt_f32_f64(vaddq_f64((float64x2_t)vzip1q_s64(v174, v163), (float64x2_t)vzip2q_s64(v174, v163)));
          v175 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v160, v170), v137, *v143), vmlaq_f64(vmulq_f64(v158, v168), v139, v167)), vaddq_f64(v173, vmlaq_f64(vmulq_f64(v159, v169), v138, v166)));
          *(float32x2_t *)v175.i8 = vcvt_f32_f64(vaddq_f64((float64x2_t)vzip1q_s64(v175, v164), (float64x2_t)vzip2q_s64(v175, v164)));
          *a4 = *(float *)&v174.i32[1] + (float)(v140 * (float)(*(float *)v174.i32 - *(float *)&v174.i32[1]));
          *a5 = *(float *)&v175.i32[1] + (float)(v140 * (float)(*(float *)v175.i32 - *(float *)&v175.i32[1]));
          a4 += a9;
          a5 += a9;
          LODWORD(v143) = v18 + v105;
          v18 = (v18 + v105) & 0x7FFFFFFF;
          v20 = v111 + (v143 >> 31);
          ++v113;
        }
        while (v113 != a7);
      }
      v408 = a6 - v112;
      if (a6 <= v112)
        goto LABEL_155;
      if (v20 < v408)
        v408 = v20;
      if (v408 >= 1)
      {
        v530 = 0;
        v531 = v408;
        do
        {
          v532 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2[v530]), 0);
          v533 = *v109;
          v534 = v109[1];
          v535 = v109[2];
          v536 = v109[3];
          v537 = vmlaq_f64(v532, v536, v107[3]);
          v538 = vmlaq_f64(v532, v535, v107[2]);
          v539 = vmlaq_f64(v532, v534, v107[1]);
          v540 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a3[v530]), 0);
          v541 = vmlaq_f64(vmlaq_f64(v532, *v109, *v107), *v110, v107[4]);
          v542 = vmlaq_f64(v539, v110[1], v107[5]);
          v543 = vmlaq_f64(v538, v110[2], v107[6]);
          v544 = vmlaq_f64(v537, v110[3], v107[7]);
          v110[2] = v535;
          v110[3] = v536;
          *v110 = v533;
          v110[1] = v534;
          v109[2] = v543;
          v109[3] = v544;
          *v109 = v541;
          v109[1] = v542;
          v546 = v109[4];
          v545 = v109[5];
          v548 = v109[6];
          v547 = v109[7];
          v549 = vmlaq_f64(v540, v548, v107[2]);
          v550 = vmlaq_f64(v540, v547, v107[3]);
          v551 = vmlaq_f64(v540, v546, *v107);
          v552 = vmlaq_f64(vmlaq_f64(v540, v545, v107[1]), v110[5], v107[5]);
          v553 = vmlaq_f64(v551, v110[4], v107[4]);
          v554 = vmlaq_f64(v550, v110[7], v107[7]);
          v555 = vmlaq_f64(v549, v110[6], v107[6]);
          v110[4] = v546;
          v110[5] = v545;
          v110[6] = v548;
          v110[7] = v547;
          v109[6] = v555;
          v109[7] = v554;
          v109[4] = v553;
          v109[5] = v552;
          v530 += a8;
          --v531;
        }
        while (v531);
      }
    }
    else
    {
      if (a7 < 1)
      {
        v312 = 0;
      }
      else
      {
        v311 = 0;
        v312 = 0;
        do
        {
          if (v20 < 1)
          {
            v342 = v109[10];
            v341 = v109[11];
            v340 = v109[8];
            v339 = v109[9];
          }
          else
          {
            v313 = 0;
            v314 = v20;
            do
            {
              v315 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2[v313]), 0);
              v316 = *v109;
              v317 = v109[1];
              v318 = v109[2];
              v319 = v109[3];
              v320 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a3[v313]), 0);
              v321 = vmlaq_f64(vmlaq_f64(v315, *v109, *v107), *v110, v107[8]);
              v322 = vmlaq_f64(vmlaq_f64(v315, v317, v107[1]), v110[1], v107[9]);
              v323 = vmlaq_f64(vmlaq_f64(v315, v318, v107[2]), v110[2], v107[10]);
              v324 = vmlaq_f64(vmlaq_f64(v315, v319, v107[3]), v110[3], v107[11]);
              v110[2] = v318;
              v110[3] = v319;
              *v110 = v316;
              v110[1] = v317;
              v109[2] = v323;
              v109[3] = v324;
              *v109 = v321;
              v109[1] = v322;
              v325 = v109[4];
              v326 = v109[5];
              v327 = v109[6];
              v328 = v109[7];
              v329 = vmlaq_f64(vmlaq_f64(v320, v325, *v107), v110[4], v107[8]);
              v330 = vmlaq_f64(vmlaq_f64(v320, v326, v107[1]), v110[5], v107[9]);
              v331 = vmlaq_f64(vmlaq_f64(v320, v327, v107[2]), v110[6], v107[10]);
              v332 = vmlaq_f64(vmlaq_f64(v320, v328, v107[3]), v110[7], v107[11]);
              v110[4] = v325;
              v110[5] = v326;
              v110[6] = v327;
              v110[7] = v328;
              v109[6] = v331;
              v109[7] = v332;
              v109[4] = v329;
              v109[5] = v330;
              v334 = v109[8];
              v333 = v109[9];
              v336 = v109[10];
              v335 = v109[11];
              v337 = vmlaq_f64(v320, v336, v107[6]);
              v338 = vmlaq_f64(v315, v334, v107[4]);
              v339 = vmlaq_f64(vmlaq_f64(v315, v333, v107[5]), v110[9], v107[13]);
              v340 = vmlaq_f64(v338, v110[8], v107[12]);
              v341 = vmlaq_f64(vmlaq_f64(v320, v335, v107[7]), v110[11], v107[15]);
              v342 = vmlaq_f64(v337, v110[10], v107[14]);
              v110[8] = v334;
              v110[9] = v333;
              v110[10] = v336;
              v110[11] = v335;
              v109[10] = v342;
              v109[11] = v341;
              v109[8] = v340;
              v109[9] = v339;
              v313 += a8;
              --v314;
            }
            while (v314);
            a2 = (const float *)((char *)a2 + v313 * 4);
            a3 = (const float *)((char *)a3 + v313 * 4);
          }
          v343 = (v18 >> 21) & 0x3FC;
          v344 = (float64x2_t *)(v108 + (v343 << 6));
          v345 = (float64x2_t *)(v108 + ((unint64_t)(v343 + 4) << 6));
          v346 = v344[1];
          v348 = v344[2];
          v347 = v344[3];
          v639 = v109[1];
          v350 = v109[2];
          v349 = v109[3];
          v352 = v344[10];
          v351 = v344[11];
          v354 = v344[8];
          v353 = v344[9];
          v356 = v110[2];
          v355 = v110[3];
          v357 = v110[1];
          v358 = vmlaq_f64(vmulq_f64(v352, v356), v350, v348);
          v359 = vmlaq_f64(vmulq_f64(v354, *v110), *v109, *v344);
          v360 = vmlaq_f64(vmulq_f64(v351, v355), v349, v347);
          v361 = vmlaq_f64(vmulq_f64(v353, v357), v639, v346);
          v362 = v109[4];
          v363 = v109[5];
          v364 = v109[6];
          v365 = v109[7];
          v366 = v110[6];
          v367 = v110[7];
          v368 = v110[4];
          v369 = v110[5];
          v370 = vmlaq_f64(vmulq_f64(v352, v366), v364, v348);
          v371 = vmlaq_f64(vmulq_f64(v354, v368), v362, *v344);
          v372 = vmlaq_f64(vmulq_f64(v351, v367), v365, v347);
          v373 = vmlaq_f64(vmulq_f64(v353, v369), v363, v346);
          v374 = v345[2];
          v375 = v345[10];
          v376 = v345[11];
          v377 = vmlaq_f64(vmulq_f64(v356, v375), v350, v374);
          v379 = v345[8];
          v378 = v345[9];
          v380 = vmlaq_f64(vmulq_f64(*v110, v379), *v109, *v345);
          v381 = vmulq_f64(v368, v379);
          v382 = vmlaq_f64(vmulq_f64(v366, v375), v364, v374);
          v383 = vmlaq_f64(v381, v362, *v345);
          v385 = v110[10];
          v384 = v110[11];
          v386 = vmlaq_f64(vmulq_f64(v344[15], v384), v341, v344[7]);
          v387 = vmlaq_f64(vmulq_f64(v344[14], v385), v342, v344[6]);
          v388 = v345[3];
          v389 = vmlaq_f64(vmulq_f64(v355, v376), v349, v388);
          v390 = v345[1];
          v391 = vmlaq_f64(vmulq_f64(v357, v378), v639, v390);
          v392 = vmlaq_f64(vmulq_f64(v369, v378), v363, v390);
          v393 = vmlaq_f64(vmulq_f64(v384, v345[15]), v341, v345[7]);
          v395 = v110[8];
          v394 = v110[9];
          v396 = vmlaq_f64(vmulq_f64(v385, v345[14]), v342, v345[6]);
          v397 = (int64x2_t)vaddq_f64(vaddq_f64(v359, v358), vaddq_f64(v361, v360));
          v398 = (int64x2_t)vaddq_f64(vmlaq_f64(vmulq_f64(v344[12], v395), v340, v344[4]), vmlaq_f64(vmulq_f64(v344[13], v394), v339, v344[5]));
          v399 = (int64x2_t)vaddq_f64(vaddq_f64(v371, v370), vaddq_f64(v373, v372));
          v400 = (int64x2_t)vaddq_f64(v387, v386);
          v401 = (int64x2_t)vaddq_f64(vaddq_f64(v380, v377), vaddq_f64(v391, v389));
          v402 = (int64x2_t)vaddq_f64(vmlaq_f64(vmulq_f64(v395, v345[12]), v340, v345[4]), vmlaq_f64(vmulq_f64(v394, v345[13]), v339, v345[5]));
          v403 = vaddq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v401, v397), (float64x2_t)vzip2q_s64(v401, v397)), vaddq_f64((float64x2_t)vzip1q_s64(v402, v398), (float64x2_t)vzip2q_s64(v402, v398)));
          v404 = (int64x2_t)vaddq_f64(vaddq_f64(v383, v382), vaddq_f64(v392, vmlaq_f64(vmulq_f64(v367, v376), v365, v388)));
          v405 = (int64x2_t)vaddq_f64(v396, v393);
          v406 = *((double *)this + 12) * (double)(v18 & 0x7FFFFF);
          *(float32x2_t *)&v403.f64[0] = vcvt_f32_f64(v403);
          *(float32x2_t *)v404.i8 = vcvt_f32_f64(vaddq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v404, v399), (float64x2_t)vzip2q_s64(v404, v399)), vaddq_f64((float64x2_t)vzip1q_s64(v405, v400), (float64x2_t)vzip2q_s64(v405, v400))));
          *a4 = *((float *)v403.f64 + 1) + (float)(v406 * (float)(*(float *)v403.f64 - *((float *)v403.f64 + 1)));
          *a5 = *(float *)&v404.i32[1] + (float)(v406 * (float)(*(float *)v404.i32 - *(float *)&v404.i32[1]));
          v312 += v20;
          a4 += a9;
          a5 += a9;
          v407 = v18 + v105;
          v18 = (v18 + v105) & 0x7FFFFFFF;
          v20 = v111 + (v407 >> 31);
          ++v311;
        }
        while (v311 != a7);
      }
      v408 = a6 - v312;
      if (a6 <= v312)
        goto LABEL_155;
      if (v20 < v408)
        v408 = v20;
      if (v408 >= 1)
      {
        v573 = 0;
        v574 = v408;
        do
        {
          v575 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2[v573]), 0);
          v576 = *v109;
          v577 = v109[1];
          v578 = v109[2];
          v579 = v109[3];
          v580 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a3[v573]), 0);
          v581 = vmlaq_f64(vmlaq_f64(v575, *v109, *v107), *v110, v107[8]);
          v582 = vmlaq_f64(vmlaq_f64(v575, v577, v107[1]), v110[1], v107[9]);
          v583 = vmlaq_f64(vmlaq_f64(v575, v578, v107[2]), v110[2], v107[10]);
          v584 = vmlaq_f64(vmlaq_f64(v575, v579, v107[3]), v110[3], v107[11]);
          v110[2] = v578;
          v110[3] = v579;
          *v110 = v576;
          v110[1] = v577;
          v109[2] = v583;
          v109[3] = v584;
          *v109 = v581;
          v109[1] = v582;
          v585 = v109[4];
          v586 = v109[5];
          v587 = v109[6];
          v588 = v109[7];
          v589 = vmlaq_f64(vmlaq_f64(v580, v585, *v107), v110[4], v107[8]);
          v590 = vmlaq_f64(vmlaq_f64(v580, v586, v107[1]), v110[5], v107[9]);
          v591 = vmlaq_f64(vmlaq_f64(v580, v587, v107[2]), v110[6], v107[10]);
          v592 = vmlaq_f64(vmlaq_f64(v580, v588, v107[3]), v110[7], v107[11]);
          v110[4] = v585;
          v110[5] = v586;
          v110[6] = v587;
          v110[7] = v588;
          v109[6] = v591;
          v109[7] = v592;
          v109[4] = v589;
          v109[5] = v590;
          v594 = v109[8];
          v593 = v109[9];
          v596 = v109[10];
          v595 = v109[11];
          v597 = vmlaq_f64(v580, v596, v107[6]);
          v598 = vmlaq_f64(v575, v594, v107[4]);
          v599 = vmlaq_f64(vmlaq_f64(v575, v593, v107[5]), v110[9], v107[13]);
          v600 = vmlaq_f64(v598, v110[8], v107[12]);
          v601 = vmlaq_f64(vmlaq_f64(v580, v595, v107[7]), v110[11], v107[15]);
          v602 = vmlaq_f64(v597, v110[10], v107[14]);
          v110[8] = v594;
          v110[9] = v593;
          v110[10] = v596;
          v110[11] = v595;
          v109[10] = v602;
          v109[11] = v601;
          v109[8] = v600;
          v109[9] = v599;
          v573 += a8;
          --v574;
        }
        while (v574);
      }
    }
  }
LABEL_154:
  v20 -= v408;
LABEL_155:
  *((_DWORD *)this + 18) = v18;
  *((_DWORD *)this + 22) = v20;
LABEL_156:
  result = NAN;
  *((_QWORD *)this + 32) = -1;
  *((_DWORD *)this + 66) = -1;
  return result;
}

void sub_1B5BEF348(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  *(_QWORD *)(v1 + 256) = -1;
  *(_DWORD *)(v1 + 264) = -1;
  _Unwind_Resume(a1);
}

void HALS_IOContextDescription::~HALS_IOContextDescription(HALS_IOContextDescription *this)
{
  HALS_IOContextDescription::~HALS_IOContextDescription(this);
  JUMPOUT(0x1B5E50688);
}

{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  _QWORD aBlock[5];
  void **v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E69964A8;
  v2 = (uint64_t *)((char *)this + 32);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN25HALS_IOContextDescriptionD2Ev_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_11973;
  aBlock[4] = this;
  v13 = 0;
  v12[0] = &off_1E69968C8;
  v12[1] = _Block_copy(aBlock);
  v13 = v12;
  HALS_IOEngineInfoList::engine_apply<>(v2, (uint64_t)v12);
  v3 = v13;
  if (v13 == v12)
  {
    v4 = 4;
    v3 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (const void *)*((_QWORD *)this + 1);
  if (v5)
    CFRelease(v5);
  if (*((char *)this + 471) < 0)
    operator delete(*((void **)this + 56));
  if (*((_BYTE *)this + 424))
  {
    v6 = (void *)*((_QWORD *)this + 50);
    if (v6)
    {
      *((_QWORD *)this + 51) = v6;
      operator delete(v6);
    }
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 48));
  v7 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v7)
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v7);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 44));
  v11 = (void **)((char *)this + 256);
  std::vector<HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest>::__destroy_vector::operator()[abi:ne180100](&v11);
  HALB_IOBufferManager_Server::~HALB_IOBufferManager_Server((HALS_IOContextDescription *)((char *)this + 152));
  for (i = 128; i != 80; i -= 24)
  {
    v9 = *(void **)((char *)this + i);
    if (v9)
      operator delete(v9);
  }
  v11 = (void **)((char *)this + 80);
  std::vector<HALS_IOStackDescription>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)((char *)this + 56);
  std::vector<HALS_IOStreamInfo>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)v2;
  std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_1B5BEF554(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t ___ZN25HALS_IOContextDescriptionD2Ev_block_invoke(uint64_t a1, uint64_t a2)
{
  HALS_ObjectMap *v3;
  BOOL v4;
  HALS_Object *v5;
  HALS_Object *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 8))
  {
    v3 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(*(_QWORD *)(a1 + 32)
                                                                                                  + 440));
    if (v3)
      v4 = *(_BYTE *)(a2 + 860) == 0;
    else
      v4 = 1;
    if (v4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v8 = 136315394;
        v9 = "HALS_IOContextDescription.cpp";
        v10 = 1024;
        v11 = 232;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContextDescription::~HALS_IOContextDescription: IOContextDescription has outlived owning IOContext", (uint8_t *)&v8, 0x12u);
      }
    }
    else
    {
      (*(void (**)(_QWORD, HALS_ObjectMap *))(**(_QWORD **)(a2 + 8) + 208))(*(_QWORD *)(a2 + 8), v3);
    }
    *(_BYTE *)(a2 + 860) = 0;
    HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a2 + 8), v5);
    HALS_ObjectMap::ReleaseObject(v3, v6);
  }
  return 0;
}

void sub_1B5BEF66C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *HALS_IOEngineInfoList::engine_apply<>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v14[0] = &off_1E6996838;
  v14[1] = a2;
  v15 = v14;
  v17 = v16;
  _ZNKSt3__110__function6__funcIZN21HALS_IOEngineInfoList12engine_applyIJEEEiNS_8functionIFiR17HALS_IOEngineInfoEEEDpRKT_EUlRN15VisitableVectorINS_10unique_ptrIS5_NS_14default_deleteIS5_EEEEE13ItemWithIndexEE_NS_9allocatorISL_EEFiSK_EE7__cloneEPNS0_6__baseISO_EE((uint64_t)v14, v16);
  v4 = *a1;
  v3 = a1[1];
  if (v4 != v3)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      if ((v6 & 1) != 0)
        v5 = 0;
      else
        ++v5;
      v13[0] = v4;
      v13[1] = v5;
      if (!v17)
        std::__throw_bad_function_call[abi:ne180100]();
      v7 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v17 + 48))(v17, v13);
      v6 = 0;
      v4 += 8;
      if (v7)
        v8 = 1;
      else
        v8 = v4 == v3;
    }
    while (!v8);
  }
  v9 = v17;
  if (v17 == v16)
  {
    v10 = 4;
    v9 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_17;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_17:
  result = v15;
  if (v15 == v14)
  {
    v12 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_1B5BEF7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v20 = a19;
  if (a19 == &a16)
  {
    v21 = 4;
    v20 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  v22 = a15;
  if (a15 == &a12)
  {
    v23 = 4;
    v22 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_11;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void std::vector<HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  const void **v2;
  const void **v4;
  void *v5;
  const void **v6;

  v1 = *a1;
  v2 = (const void **)**a1;
  if (v2)
  {
    v4 = (const void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 2;
        std::__destroy_at[abi:ne180100]<HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest,0>(*(v4 - 1));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<HALS_IOStackDescription>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        v7 = (void **)(v4 - 24);
        std::vector<HALS_IOStreamGroup>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<HALS_IOStreamInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void (***v2)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;
  void (***v6)(_QWORD);
  BOOL v7;

  v1 = *a1;
  v2 = (void (***)(_QWORD))**a1;
  if (v2)
  {
    v4 = (void (***)(_QWORD))v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 53;
      do
      {
        (**v6)(v6);
        v7 = v6 == v2;
        v6 -= 53;
      }
      while (!v7);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<HALS_IOStreamGroup>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<HALS_IOStreamInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest,0>(const void *a1)
{
  if (a1)
    CFRelease(a1);
}

void _ZNSt3__110__function6__funcIZN21HALS_IOEngineInfoList12engine_applyIJEEEiNS_8functionIFiR17HALS_IOEngineInfoEEEDpRKT_EUlRN15VisitableVectorINS_10unique_ptrIS5_NS_14default_deleteIS5_EEEEE13ItemWithIndexEE_NS_9allocatorISL_EEFiSK_EED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *_ZNKSt3__110__function6__funcIZN21HALS_IOEngineInfoList12engine_applyIJEEEiNS_8functionIFiR17HALS_IOEngineInfoEEEDpRKT_EUlRN15VisitableVectorINS_10unique_ptrIS5_NS_14default_deleteIS5_EEEEE13ItemWithIndexEE_NS_9allocatorISL_EEFiSK_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6996838;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN21HALS_IOEngineInfoList12engine_applyIJEEEiNS_8functionIFiR17HALS_IOEngineInfoEEEDpRKT_EUlRN15VisitableVectorINS_10unique_ptrIS5_NS_14default_deleteIS5_EEEEE13ItemWithIndexEE_NS_9allocatorISL_EEFiSK_EE7__cloneEPNS0_6__baseISO_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6996838;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN21HALS_IOEngineInfoList12engine_applyIJEEEiNS_8functionIFiR17HALS_IOEngineInfoEEEDpRKT_EUlRN15VisitableVectorINS_10unique_ptrIS5_NS_14default_deleteIS5_EEEEE13ItemWithIndexEE_NS_9allocatorISL_EEFiSK_EEclESK_(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a2;
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a2 + 16))(**a2);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 48))(v5, *v3);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN21HALS_IOEngineInfoList12engine_applyIJEEEiNS_8functionIFiR17HALS_IOEngineInfoEEEDpRKT_EUlRN15VisitableVectorINS_10unique_ptrIS5_NS_14default_deleteIS5_EEEEE13ItemWithIndexEE_NS_9allocatorISL_EEFiSK_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN21HALS_IOEngineInfoList12engine_applyIJEEEiNSt3__18functionIFiR17HALS_IOEngineInfoEEEDpRKT_EUlRN15VisitableVectorINS1_10unique_ptrIS3_NS1_14default_deleteIS3_EEEEE13ItemWithIndexEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN21HALS_IOEngineInfoList12engine_applyIJEEEiNS_8functionIFiR17HALS_IOEngineInfoEEEDpRKT_EUlRN15VisitableVectorINS_10unique_ptrIS5_NS_14default_deleteIS5_EEEEE13ItemWithIndexEE_NS_9allocatorISL_EEFiSK_EE11target_typeEv()
{
  return &_ZTIZN21HALS_IOEngineInfoList12engine_applyIJEEEiNSt3__18functionIFiR17HALS_IOEngineInfoEEEDpRKT_EUlRN15VisitableVectorINS1_10unique_ptrIS3_NS1_14default_deleteIS3_EEEEE13ItemWithIndexEE_;
}

void HALS_IOContextDescription::ActiveInputsOnly::~ActiveInputsOnly(HALS_IOContextDescription::ActiveInputsOnly *this)
{
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_IOContextDescription::ActiveInputsOnly::should_exclude(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), 1, *(unsigned int *)(a2 + 8)) ^ 1;
}

void HALS_IOContextDescription::ActiveOutputsOnly::~ActiveOutputsOnly(HALS_IOContextDescription::ActiveOutputsOnly *this)
{
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_IOContextDescription::ActiveOutputsOnly::should_exclude(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), 0, *(unsigned int *)(a2 + 8)) ^ 1;
}

void HALS_IOContextDescription::InactiveInputsOnly::~InactiveInputsOnly(HALS_IOContextDescription::InactiveInputsOnly *this)
{
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_IOContextDescription::InactiveInputsOnly::should_exclude(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), 1, *(unsigned int *)(a2 + 8));
}

Float64 CalculateSafetyViolation_Write(HALS_IOClock *a1, unsigned int a2, const AudioTimeStamp *a3)
{
  Float64 result;
  unint64_t v7;
  double v8;

  if (a1)
  {
    v7 = 0;
    v8 = 0.0;
    HALS_IOClock::GetRaw0Time(a1, &v8, &v7);
    return a3->mSampleTime
         - (floor(*((double *)a1 + 5 * *((unsigned int *)a1 + 48) + 26) * (double)(mach_absolute_time() - v7))
          + v8
          + (double)a2);
  }
  return result;
}

uint64_t HALS_IOContextDescription::GetDeviceIDFromEngineID(HALS_IOContextDescription *this)
{
  uint64_t v1;
  HALS_Object *v2;
  HALS_ObjectMap *v3;
  uint64_t v4;
  uint64_t v5;

  if (!(_DWORD)this)
    return 0;
  v1 = HALS_ObjectMap::CopyObjectByObjectID(this);
  v3 = (HALS_ObjectMap *)v1;
  if (v1 && (v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 320))(v1)) != 0)
    v5 = *(unsigned int *)(v4 + 16);
  else
    v5 = 0;
  HALS_ObjectMap::ReleaseObject(v3, v2);
  return v5;
}

void sub_1B5BEFD0C(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<HALS_IOStackDescription>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    v5 = (void **)(i - 24);
    std::vector<HALS_IOStreamGroup>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<HALS_IOStreamInfo>>(unint64_t a1)
{
  if (a1 >= 0x9A90E7D95BC60ALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(424 * a1);
}

uint64_t *std::vector<HALS_IOStreamInfo>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  for (i = 424; ; i -= 424)
  {
    v8 = v6 + i;
    if (v4 + i - 424 == v5)
      break;
    v9 = v4 + i - 848;
    result = (uint64_t *)std::construct_at[abi:ne180100]<HALS_IOStreamInfo,HALS_IOStreamInfo const&,HALS_IOStreamInfo*>(v8 - 848, v9);
  }
  v10 = v8 - 424;
  a2[1] = v10;
  v11 = *v3;
  *v3 = v10;
  a2[1] = v11;
  v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<HALS_IOStreamInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 424;
    (**(void (***)(uint64_t))(i - 424))(i - 424);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::construct_at[abi:ne180100]<HALS_IOStreamInfo,HALS_IOStreamInfo const&,HALS_IOStreamInfo*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)a1 = &off_1E69A0E78;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 53);
  *(_QWORD *)(a1 + 72) = 0;
  v8 = a1 + 72;
  *(_OWORD *)(a1 + 53) = v7;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 72), *(const void **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 96);
  HALS_IODSPInfo::HALS_IODSPInfo((HALS_IODSPInfo *)(v8 + 40), (const HALS_IODSPInfo *)(a2 + 112));
  v9 = *(_OWORD *)(a2 + 360);
  v10 = *(_OWORD *)(a2 + 376);
  v11 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 401) = *(_OWORD *)(a2 + 401);
  *(_OWORD *)(a1 + 376) = v10;
  *(_OWORD *)(a1 + 392) = v11;
  *(_OWORD *)(a1 + 360) = v9;
  return a1;
}

void sub_1B5BEFFA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 80) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IODSPInfo::HALS_IODSPInfo(HALS_IODSPInfo *this, const HALS_IODSPInfo *a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v5 = *(const void **)a2;
  v4 = *((_QWORD *)a2 + 1);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    std::vector<HALS_IODSPInfo::EngineStreamInfo>::__vallocate[abi:ne180100](this, v6 >> 7);
    v7 = (char *)*((_QWORD *)this + 1);
    memmove(v7, v5, v6);
    *((_QWORD *)this + 1) = &v7[128 * (v6 >> 7)];
  }
  std::set<unsigned int>::set[abi:ne180100]((uint64_t *)this + 3, (uint64_t)a2 + 24);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100]((uint64_t *)this + 7, (_QWORD *)a2 + 7);
  v8 = *((_QWORD *)a2 + 11);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)this + 11) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *((_QWORD *)a2 + 12);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_QWORD *)this + 12) = v11;
  std::__optional_copy_base<CA::ChannelLayout,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 112, (uint64_t)a2 + 112);
  v12 = *((_QWORD *)a2 + 18);
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 18) = v12;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((_QWORD *)this + 19, *((const void **)a2 + 19), *((_QWORD *)a2 + 20), *((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19));
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((_QWORD *)this + 22, *((const void **)a2 + 22), *((_QWORD *)a2 + 23), *((_QWORD *)a2 + 23) - *((_QWORD *)a2 + 22));
  v13 = *(_OWORD *)((char *)a2 + 200);
  v14 = *(_OWORD *)((char *)a2 + 216);
  *(_OWORD *)((char *)this + 232) = *(_OWORD *)((char *)a2 + 232);
  *(_OWORD *)((char *)this + 216) = v14;
  *(_OWORD *)((char *)this + 200) = v13;
}

void sub_1B5BF00F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<unsigned int>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1B5BF01AC(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t *std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](uint64_t *a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  a1[1] = 0;
  v3 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(a1, v3, *((_DWORD *)v5 + 7), *((_DWORD *)v5 + 7));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_1B5BF0254(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_copy_base<CA::ChannelLayout,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_1B5BF02BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  if (*(_BYTE *)(v1 + 24))
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<HALS_IODSPInfo::EngineStreamInfo>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 57)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HALS_IODSPInfo::EngineStreamInfo>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[128 * v4];
  return result;
}

_QWORD *std::vector<HALS_IOStreamGroup>::__init_with_size[abi:ne180100]<HALS_IOStreamGroup*,HALS_IOStreamGroup*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_IOStreamGroup>,HALS_IOStreamGroup*,HALS_IOStreamGroup*,HALS_IOStreamGroup*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B5BF0380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<HALS_IOStreamGroup>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_IOStreamGroup>,HALS_IOStreamGroup*,HALS_IOStreamGroup*,HALS_IOStreamGroup*>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<HALS_IOStreamInfo>::__init_with_size[abi:ne180100]<HALS_IOStreamInfo*,HALS_IOStreamInfo*>(v4, *v6, v6[1], 0x21CFB2B78C13521DLL * ((v6[1] - *v6) >> 3));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_IOStreamGroup>,HALS_IOStreamGroup*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B5BF0450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_IOStreamGroup>,HALS_IOStreamGroup*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<HALS_IOStreamInfo>::__init_with_size[abi:ne180100]<HALS_IOStreamInfo*,HALS_IOStreamInfo*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<HALS_IOStreamInfo>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_IOStreamInfo>,HALS_IOStreamInfo*,HALS_IOStreamInfo*,HALS_IOStreamInfo*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B5BF04C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<HALS_IOStreamInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_IOStreamGroup>,HALS_IOStreamGroup*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  void **v3;
  void **v4;
  void **v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(void ****)(a1 + 16);
    v4 = **(void ****)(a1 + 8);
    while (v3 != v4)
    {
      v3 -= 3;
      v5 = v3;
      std::vector<HALS_IOStreamInfo>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

char *std::vector<HALS_IOStreamInfo>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x9A90E7D95BC60ALL)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HALS_IOStreamInfo>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[424 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_IOStreamInfo>,HALS_IOStreamInfo*,HALS_IOStreamInfo*,HALS_IOStreamInfo*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      *(_QWORD *)v7 = &off_1E69A0E78;
      v8 = *(_OWORD *)(a1 + v6 + 8);
      v9 = *(_OWORD *)(a1 + v6 + 24);
      v10 = *(_OWORD *)(a1 + v6 + 40);
      *(_OWORD *)(v7 + 53) = *(_OWORD *)(a1 + v6 + 53);
      *(_OWORD *)(v7 + 40) = v10;
      *(_OWORD *)(v7 + 24) = v9;
      *(_OWORD *)(v7 + 8) = v8;
      *(_QWORD *)(a3 + v6 + 72) = 0;
      *(_QWORD *)(v7 + 80) = 0;
      *(_QWORD *)(v7 + 88) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a3 + v6 + 72), *(const void **)(a1 + v6 + 72), *(_QWORD *)(a1 + v6 + 80), (uint64_t)(*(_QWORD *)(a1 + v6 + 80) - *(_QWORD *)(a1 + v6 + 72)) >> 2);
      *(_OWORD *)(v7 + 96) = *(_OWORD *)(a1 + v6 + 96);
      HALS_IODSPInfo::HALS_IODSPInfo((HALS_IODSPInfo *)(a3 + v6 + 112), (const HALS_IODSPInfo *)(a1 + v6 + 112));
      v11 = (_OWORD *)(a3 + v6 + 360);
      v12 = *(_OWORD *)(a1 + v6 + 360);
      v13 = *(_OWORD *)(a1 + v6 + 376);
      v14 = *(_OWORD *)(a1 + v6 + 392);
      *(_OWORD *)((char *)v11 + 41) = *(_OWORD *)(a1 + v6 + 401);
      v11[1] = v13;
      v11[2] = v14;
      *v11 = v12;
      v6 += 424;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_1B5BF0684(_Unwind_Exception *exception_object)
{
  void (***v1)(_QWORD);
  void **v2;
  uint64_t v3;
  void *v5;
  void (***v6)(_QWORD);
  BOOL v7;

  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v3 + 80) = v5;
    operator delete(v5);
  }
  if ((void (***)(_QWORD))v3 != v1)
  {
    v6 = (void (***)(_QWORD))(v3 - 424);
    do
    {
      (**v6)(v6);
      v7 = v6 == v1;
      v6 -= 53;
    }
    while (!v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_IOStreamGroup *,HALS_IOStreamGroup *,HALS_IOStreamGroup *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void (***v13)(_QWORD);
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (***v22)(_QWORD);

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 3)
    {
      if (a3 != i)
      {
        v7 = *i;
        v6 = i[1];
        v8 = 0x21CFB2B78C13521DLL * ((v6 - *i) >> 3);
        v9 = a3[2];
        v10 = *a3;
        if (0x21CFB2B78C13521DLL * ((v9 - *a3) >> 3) >= v8)
        {
          if (0x21CFB2B78C13521DLL * ((a3[1] - v10) >> 3) >= v8)
          {
            v20 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_IOStreamInfo *,HALS_IOStreamInfo *,HALS_IOStreamInfo *>(*i, i[1], *a3);
            v21 = a3[1];
            if (v21 != v20)
            {
              v22 = (void (***)(_QWORD))(v21 - 424);
              do
              {
                (**v22)(v22);
                v14 = v22 == (void (***)(_QWORD))v20;
                v22 -= 53;
              }
              while (!v14);
            }
            a3[1] = v20;
            goto LABEL_27;
          }
          v19 = v7 + 8 * ((a3[1] - v10) >> 3);
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_IOStreamInfo *,HALS_IOStreamInfo *,HALS_IOStreamInfo *>(*i, v19, *a3);
          v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_IOStreamInfo>,HALS_IOStreamInfo*,HALS_IOStreamInfo*,HALS_IOStreamInfo*>(v19, v6, a3[1]);
        }
        else
        {
          if (v10)
          {
            v11 = a3[1];
            v12 = (void *)*a3;
            if (v11 != v10)
            {
              v13 = (void (***)(_QWORD))(v11 - 424);
              do
              {
                (**v13)(v13);
                v14 = v13 == (void (***)(_QWORD))v10;
                v13 -= 53;
              }
              while (!v14);
              v12 = (void *)*a3;
            }
            a3[1] = v10;
            operator delete(v12);
            v9 = 0;
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
          }
          if (v8 > 0x9A90E7D95BC609)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v15 = 0x21CFB2B78C13521DLL * (v9 >> 3);
          v16 = 2 * v15;
          if (2 * v15 <= v8)
            v16 = v8;
          if (v15 >= 0x4D4873ECADE304)
            v17 = 0x9A90E7D95BC609;
          else
            v17 = v16;
          std::vector<HALS_IOStreamInfo>::__vallocate[abi:ne180100](a3, v17);
          v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_IOStreamInfo>,HALS_IOStreamInfo*,HALS_IOStreamInfo*,HALS_IOStreamInfo*>(v7, v6, a3[1]);
        }
        a3[1] = v18;
      }
LABEL_27:
      a3 += 3;
    }
  }
  return a3;
}

void sub_1B5BF08C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B5BF08CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_IOStreamInfo *,HALS_IOStreamInfo *,HALS_IOStreamInfo *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  _BYTE *v19;
  void *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  if (a1 != a2)
  {
    v5 = a1;
    while (1)
    {
      v6 = *(_OWORD *)(v5 + 8);
      v7 = *(_OWORD *)(v5 + 24);
      v8 = *(_OWORD *)(v5 + 40);
      *(_OWORD *)(a3 + 53) = *(_OWORD *)(v5 + 53);
      *(_OWORD *)(a3 + 40) = v8;
      *(_OWORD *)(a3 + 24) = v7;
      *(_OWORD *)(a3 + 8) = v6;
      if (a3 != v5)
        break;
      *(_OWORD *)(a3 + 96) = *(_OWORD *)(v5 + 96);
LABEL_24:
      v23 = *(_QWORD *)(v5 + 192);
      v22 = *(_QWORD *)(v5 + 200);
      if (v22)
      {
        v24 = (unint64_t *)(v22 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v26 = *(std::__shared_weak_count **)(a3 + 200);
      *(_QWORD *)(a3 + 192) = v23;
      *(_QWORD *)(a3 + 200) = v22;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = *(_QWORD *)(v5 + 208);
      *(_DWORD *)(a3 + 216) = *(_DWORD *)(v5 + 216);
      *(_QWORD *)(a3 + 208) = v29;
      std::__optional_storage_base<CA::ChannelLayout,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<CA::ChannelLayout,false> const&>(a3 + 224, v5 + 224);
      *(_QWORD *)(a3 + 256) = *(_QWORD *)(v5 + 256);
      if (a3 != v5)
      {
        std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>((_QWORD *)(a3 + 264), *(char **)(v5 + 264), *(char **)(v5 + 272), *(_QWORD *)(v5 + 272) - *(_QWORD *)(v5 + 264));
        std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>((_QWORD *)(a3 + 288), *(char **)(v5 + 288), *(char **)(v5 + 296), *(_QWORD *)(v5 + 296) - *(_QWORD *)(v5 + 288));
      }
      v30 = *(_OWORD *)(v5 + 312);
      v31 = *(_OWORD *)(v5 + 328);
      *(_OWORD *)(a3 + 337) = *(_OWORD *)(v5 + 337);
      *(_OWORD *)(a3 + 328) = v31;
      *(_OWORD *)(a3 + 312) = v30;
      v32 = *(_OWORD *)(v5 + 360);
      v33 = *(_OWORD *)(v5 + 376);
      v34 = *(_OWORD *)(v5 + 392);
      *(_OWORD *)(a3 + 401) = *(_OWORD *)(v5 + 401);
      *(_OWORD *)(a3 + 376) = v33;
      *(_OWORD *)(a3 + 392) = v34;
      *(_OWORD *)(a3 + 360) = v32;
      v5 += 424;
      a3 += 424;
      if (v5 == a2)
        return a3;
    }
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 72), *(char **)(v5 + 72), *(_QWORD *)(v5 + 80), (uint64_t)(*(_QWORD *)(v5 + 80) - *(_QWORD *)(v5 + 72)) >> 2);
    v9 = *(char **)(a3 + 112);
    *(_OWORD *)(a3 + 96) = *(_OWORD *)(v5 + 96);
    v10 = *(_BYTE **)(v5 + 112);
    v11 = *(_BYTE **)(v5 + 120);
    v12 = v11 - v10;
    v13 = (v11 - v10) >> 7;
    v14 = *(_QWORD *)(a3 + 128);
    if (v13 <= (v14 - (uint64_t)v9) >> 7)
    {
      v17 = *(_BYTE **)(a3 + 120);
      v18 = (v17 - v9) >> 7;
      if (v18 < v13)
      {
        if (v17 != v9)
        {
          memmove(v9, *(const void **)(v5 + 112), v17 - v9);
          v9 = *(char **)(a3 + 120);
        }
        v19 = &v10[128 * v18];
        v12 = v11 - v19;
        if (v11 == v19)
          goto LABEL_23;
        v20 = v9;
        goto LABEL_22;
      }
    }
    else
    {
      if (v9)
      {
        *(_QWORD *)(a3 + 120) = v9;
        operator delete(v9);
        v14 = 0;
        *(_QWORD *)(a3 + 112) = 0;
        *(_QWORD *)(a3 + 120) = 0;
        *(_QWORD *)(a3 + 128) = 0;
      }
      if ((v12 & 0x8000000000000000) != 0)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v15 = v14 >> 6;
      if (v14 >> 6 <= v13)
        v15 = (v11 - v10) >> 7;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFF80)
        v16 = 0x1FFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      std::vector<HALS_IODSPInfo::EngineStreamInfo>::__vallocate[abi:ne180100]((_QWORD *)(a3 + 112), v16);
      v9 = *(char **)(a3 + 120);
    }
    if (v11 == v10)
    {
LABEL_23:
      *(_QWORD *)(a3 + 120) = &v9[v12];
      std::__tree<DSP_Host_Types::AudioProcessingType>::__assign_multi<std::__tree_const_iterator<DSP_Host_Types::AudioProcessingType,std::__tree_node<DSP_Host_Types::AudioProcessingType,void *> *,long>>(a3 + 136, *(_QWORD **)(v5 + 136), (_QWORD *)(v5 + 144));
      v21 = *(_DWORD *)(v5 + 160);
      *(_BYTE *)(a3 + 164) = *(_BYTE *)(v5 + 164);
      *(_DWORD *)(a3 + 160) = v21;
      std::__tree<DSP_Host_Types::AudioProcessingType>::__assign_multi<std::__tree_const_iterator<DSP_Host_Types::AudioProcessingType,std::__tree_node<DSP_Host_Types::AudioProcessingType,void *> *,long>>(a3 + 168, *(_QWORD **)(v5 + 168), (_QWORD *)(v5 + 176));
      goto LABEL_24;
    }
    v20 = v9;
    v19 = v10;
LABEL_22:
    memmove(v20, v19, v12);
    goto LABEL_23;
  }
  return a3;
}

void std::__optional_storage_base<CA::ChannelLayout,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<CA::ChannelLayout,false> const&>(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>((_QWORD *)a1, *(char **)a2, *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
}

_QWORD *std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<char>::__vallocate[abi:ne180100](v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

void HALS_IOContextDescription::SetFromCFRepresentation_ClearAllState(HALS_IOContextDescription *this)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  HALS_Object *v9;
  HALS_ObjectMap *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[12];
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = (void (***)(_QWORD))*((_QWORD *)this + 7);
  v2 = (void (***)(_QWORD))*((_QWORD *)this + 8);
  if (v2 != v3)
  {
    v4 = v2 - 53;
    do
    {
      (**v4)(v4);
      v5 = v4 == v3;
      v4 -= 53;
    }
    while (!v5);
  }
  *((_QWORD *)this + 8) = v3;
  v7 = *((_QWORD *)this + 10);
  v6 = *((_QWORD *)this + 11);
  if (v6 != v7)
  {
    do
    {
      v8 = v6 - 32;
      *(_QWORD *)v25 = v6 - 24;
      std::vector<HALS_IOStreamGroup>::__destroy_vector::operator()[abi:ne180100]((void ***)v25);
      v6 = v8;
    }
    while (v8 != v7);
  }
  *((_QWORD *)this + 11) = v7;
  *((_QWORD *)this + 3) = 0;
  v10 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 110));
  if (!v10 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v25 = 136315394;
    *(_QWORD *)&v25[4] = "HALS_IOContextDescription.cpp";
    v26 = 1024;
    v27 = 388;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContextDescription::SetFromCFRepresentation: IOContextDescription has outlived owning IOContext", v25, 0x12u);
  }
  v11 = (uint64_t *)*((_QWORD *)this + 4);
  v12 = (uint64_t *)*((_QWORD *)this + 5);
  while (v11 != v12)
  {
    v13 = *v11;
    v14 = *(_QWORD **)(*v11 + 728);
    v15 = *(_QWORD **)(*v11 + 720);
    while (v14 != v15)
    {
      v17 = *--v14;
      v16 = v17;
      *v14 = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    *(_QWORD *)(v13 + 728) = v15;
    v18 = *v11;
    v19 = *(_QWORD **)(*v11 + 704);
    v20 = *(_QWORD **)(*v11 + 696);
    while (v19 != v20)
    {
      v22 = *--v19;
      v21 = v22;
      *v19 = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
    *(_QWORD *)(v18 + 704) = v20;
    v23 = *v11;
    if (v10)
    {
      v24 = *(_QWORD *)(v23 + 8);
      if (v24)
      {
        if (*(_BYTE *)(v23 + 860))
        {
          (*(void (**)(uint64_t, HALS_ObjectMap *))(*(_QWORD *)v24 + 208))(v24, v10);
          v23 = *v11;
        }
      }
    }
    *(_BYTE *)(v23 + 860) = 0;
    *(_DWORD *)(v23 + 744) = 0;
    ++v11;
  }
  *((_DWORD *)this + 55) = 0;
  HALS_ObjectMap::ReleaseObject(v10, v9);
}

void sub_1B5BF0F08(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void HALS_IOContextDescription::SetFromCFRepresentation_FindMaster(HALS_IOContextDescription *this, const __CFDictionary *cf)
{
  const __CFDictionary *v2;
  char *EngineInfo;
  uint64_t v5;
  CFTypeRef v6;
  _BYTE v7[8];
  CFDictionaryRef theDict;
  _BYTE v9[8];
  CFTypeRef v10;
  _BYTE v11[8];
  CFTypeRef cfa;
  void (**v13)(OS::CF::Dictionary *__hidden);
  const __CFDictionary *v14;

  v2 = cf;
  CFRetain(cf);
  v13 = &off_1E69A0DE0;
  v14 = v2;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v11, v2, CFSTR("clock device uid"));
  if (cfa)
  {
    EngineInfo = HALS_IOContextDescription::SetFromCFRepresentation_MakeEngineInfo(this, (char *)cfa);
    *((_QWORD *)this + 3) = EngineInfo;
    v2 = v14;
    if (EngineInfo)
      goto LABEL_8;
  }
  else if (*((_QWORD *)this + 3))
  {
    goto LABEL_8;
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v9, v2, CFSTR("master uid"));
  if (v10)
    *((_QWORD *)this + 3) = HALS_IOContextDescription::SetFromCFRepresentation_MakeEngineInfo(this, (char *)v10);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v9);
  v2 = v14;
LABEL_8:
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v9, v2, CFSTR("taps"));
  if (!*((_QWORD *)this + 3) && v10 && OS::CF::ArrayBase<__CFArray const*>::GetSize((const __CFArray *)v10))
  {
    OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v7, (uint64_t)v9, 0);
    if (theDict)
    {
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v5, theDict, CFSTR("uid"));
      *((_QWORD *)this + 3) = HALS_IOContextDescription::SetFromCFRepresentation_MakeEngineInfo(this, (char *)v6);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v5);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v7);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v9);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v11);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v13);
}

void sub_1B5BF106C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;

  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a9);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a11);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a13);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a15);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v15 - 32));
  _Unwind_Resume(a1);
}

void HALS_IOContextDescription::SetFromCFRepresentation_ProcessInputStreams(HALS_IOContextDescription *this, const __CFDictionary *cf)
{
  const __CFDictionary *v2;
  char *v3;
  unint64_t v4;
  _BOOL4 v5;
  unsigned int j;
  unsigned int v7;
  char *v8;
  unsigned int v9;
  HALS_IODevice *DeviceFromEngine;
  int IsHostingInputDSP;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  unint64_t v18;
  char *v19;
  char *v20;
  HALS_ObjectMap *v21;
  char v22;
  AMCP::Log::Scope_Registry *v23;
  HALS_Object *v24;
  uint64_t v25;
  _DWORD *v26;
  unsigned int v27;
  BOOL v28;
  uint64_t *v29;
  NSObject *v30;
  HALS_Object *v31;
  uint64_t v32;
  char v33;
  std::__shared_weak_count *v34;
  NSObject *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  HALS_IODevice *v42;
  HALS_IODevice *v43;
  uint64_t v44;
  HALS_Object *v45;
  HALS_Stream **v46;
  HALS_Stream **v47;
  unsigned int v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char **v54;
  unint64_t v55;
  char *v56;
  char *v57;
  int *v58;
  int v59;
  uint64_t v60;
  HALS_IOStreamGroup *v61;
  char *k;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  HALS_IOContextDescription *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  char **v73;
  AMCP::Log::Scope_Registry *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  HALS_ObjectMap *v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  unsigned int v87;
  const char *v88;
  size_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  NSObject *v92;
  unint64_t *v93;
  unint64_t v94;
  _opaque_pthread_t *v95;
  mach_port_t v96;
  unint64_t v97;
  char *v98;
  int v99;
  char *v100;
  int v101;
  const char *v102;
  CFDictionaryRef *v103;
  HALS_Object *v104;
  const __CFArray *v105;
  unsigned int i;
  char *EngineInfo;
  uint64_t v108;
  HALS_IOEngineInfo *v109;
  AMCP::Log::Scope_Registry *v110;
  AMCP::Log::Scope_Registry *v111;
  int v112;
  uint64_t v113;
  char v114;
  AMCP::Log::Scope_Registry *v115;
  char v116;
  std::__shared_weak_count *v117;
  NSObject *v118;
  unint64_t *v119;
  unint64_t v120;
  _opaque_pthread_t *v121;
  mach_port_t v122;
  int v123;
  std::__shared_weak_count *v124;
  NSObject *v125;
  unint64_t *v126;
  unint64_t v127;
  _opaque_pthread_t *v128;
  mach_port_t v129;
  unsigned int v130;
  int v131;
  std::__shared_weak_count *v132;
  NSObject *v133;
  unint64_t *v134;
  unint64_t v135;
  _opaque_pthread_t *v136;
  mach_port_t v137;
  uint64_t v138;
  _BYTE *v139;
  int v140;
  _opaque_pthread_t *v141;
  mach_port_t v142;
  unint64_t v143;
  char *v144;
  int v145;
  char *v146;
  const char *v147;
  _opaque_pthread_t *v148;
  mach_port_t v149;
  unint64_t v150;
  char *v151;
  int v152;
  char *v153;
  const char *v154;
  AudioStreamBasicDescription *v155;
  const __CFDictionary *v156;
  unsigned int v157;
  HALS_ObjectMap *v158;
  HALS_ObjectMap *v159;
  uint64_t **v160;
  HALS_ObjectMap *v161;
  char *__p;
  uint64_t v163;
  uint64_t v164;
  int v165;
  CFTypeRef cfa[2];
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  CFDictionaryRef v175[2];
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183[8];
  CFDictionaryRef v184[2];
  __int128 v185;
  __int128 v186;
  _BYTE v187[48];
  _BYTE v188[32];
  uint64_t v189[3];
  uint64_t v190[3];
  uint64_t v191[3];
  char v192[8];
  const __CFArray *v193;
  void (**v194)(OS::CF::Dictionary *__hidden);
  CFDictionaryRef v195;
  __int128 __dst;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  unsigned __int8 v200;
  _BYTE buf[32];
  _QWORD v202[9];
  int v203;
  char *v204;
  uint64_t v205;
  uint64_t v206[33];
  uint8_t v207[8];
  __int128 theDict;
  __int16 v209;
  int v210;
  __int16 v211;
  _BYTE v212[14];
  __int16 v213;
  int v214;
  int v215;
  int v216;
  char *v217;
  int v218;
  char v219;
  _BYTE v220[24];
  uint64_t v221;
  int v222;
  char v223;
  unsigned int v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  char v228;
  int v229;
  char v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;

  v2 = cf;
  v235 = *MEMORY[0x1E0C80C00];
  CFRetain(cf);
  v195 = v2;
  v194 = &off_1E69A0DE0;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v192, v2, CFSTR("grid-in"));
  if (!v193 || !*((_QWORD *)this + 45))
  {
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v192);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v194);
LABEL_200:
    CFRetain(v2);
    v184[1] = v2;
    v184[0] = (CFDictionaryRef)&off_1E69A0DE0;
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v183, v2, CFSTR("grid-in"));
    v105 = (const __CFArray *)*((_QWORD *)&v183[0] + 1);
    if (*((_QWORD *)&v183[0] + 1))
    {
      for (i = 0; (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v105) > i; ++i)
      {
        OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v175, (uint64_t)v183, i);
        if (v175[1])
        {
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)cfa, v175[1], CFSTR("uid"));
          EngineInfo = HALS_IOContextDescription::SetFromCFRepresentation_MakeEngineInfo(this, (char *)cfa[1]);
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v207, v175[1], CFSTR("index"));
          v108 = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)theDict, 0);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v207);
          if (EngineInfo)
          {
            HALS_IOContextDescription::SetFromCFRepresentation_UpdateEngineInfo((HALS_IOContextDescription *)1, v175[1], (const __CFDictionary *)EngineInfo, v109);
            v110 = (AMCP::Log::Scope_Registry *)IsolatedUseCaseID_FromDescription(v184[1]);
            v111 = v110;
            v112 = *((_DWORD *)this + 110);
            v113 = *((_QWORD *)EngineInfo + 1);
            if (v113)
            {
              v114 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v113 + 568))(*((_QWORD *)EngineInfo + 1));
              v115 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v113 + 400))(v113, 1);
              if (v115 <= v108)
              {
                if (((unint64_t)v111 & 0xFF00000000) != 0)
                  v116 = v114;
                else
                  v116 = 1;
                if ((v116 & 1) == 0)
                {
                  AMCP::Log::Scope_Registry::get(v115);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v207, "com.apple.coreaudio", "AMCP");
                  v117 = (std::__shared_weak_count *)theDict;
                  v118 = **(NSObject ***)v207;
                  if ((_QWORD)theDict)
                  {
                    v119 = (unint64_t *)(theDict + 8);
                    do
                      v120 = __ldaxr(v119);
                    while (__stlxr(v120 - 1, v119));
                    if (!v120)
                    {
                      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                      std::__shared_weak_count::__release_weak(v117);
                    }
                  }
                  v115 = (AMCP::Log::Scope_Registry *)os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT);
                  if ((_DWORD)v115)
                  {
                    v121 = pthread_self();
                    v122 = pthread_mach_thread_np(v121);
                    v123 = *((_DWORD *)this + 4);
                    *(_DWORD *)v207 = 67110403;
                    *(_DWORD *)&v207[4] = v122;
                    LOWORD(theDict) = 2080;
                    *(_QWORD *)((char *)&theDict + 2) = "HALS_IOContextDescription.cpp";
                    WORD5(theDict) = 1024;
                    HIDWORD(theDict) = 743;
                    v209 = 1024;
                    v210 = v112;
                    v211 = 1024;
                    *(_DWORD *)v212 = v123;
                    *(_WORD *)&v212[4] = 2081;
                    *(_QWORD *)&v212[6] = "Isolated Audio Use Case specified, but this device does not support it.";
                    _os_log_impl(&dword_1B57BA000, v118, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d (Context ID: %u) (Device ID: %u) %{private}s", v207, 0x2Eu);
                  }
                }
                AMCP::Log::Scope_Registry::get(v115);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v207, "com.apple.coreaudio", "AMCP");
                v124 = (std::__shared_weak_count *)theDict;
                v125 = **(NSObject ***)v207;
                if ((_QWORD)theDict)
                {
                  v126 = (unint64_t *)(theDict + 8);
                  do
                    v127 = __ldaxr(v126);
                  while (__stlxr(v127 - 1, v126));
                  if (!v127)
                  {
                    ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                    std::__shared_weak_count::__release_weak(v124);
                  }
                }
                if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
                {
                  v128 = pthread_self();
                  v129 = pthread_mach_thread_np(v128);
                  if (((unint64_t)v111 & 0xFF00000000) != 0)
                    v130 = v111;
                  else
                    v130 = 0;
                  v131 = bswap32(v130);
                  *(_DWORD *)&v207[1] = v131;
                  if (((char)v131 - 32) > 0x5E
                    || (((__int16)v131 >> 8) - 32) > 0x5E
                    || ((v131 << 8 >> 24) - 32) > 0x5E
                    || ((v131 >> 24) - 32) > 0x5E)
                  {
                    std::to_string((std::string *)buf, v130);
                  }
                  else
                  {
                    strcpy((char *)&v207[5], "'");
                    v207[0] = 39;
                    std::string::basic_string[abi:ne180100]<0>(buf, (char *)v207);
                  }
                  v139 = buf;
                  if (buf[23] < 0)
                    v139 = *(_BYTE **)buf;
                  v140 = *((_DWORD *)this + 4);
                  *(_DWORD *)v207 = 67110659;
                  *(_DWORD *)&v207[4] = v129;
                  LOWORD(theDict) = 2080;
                  *(_QWORD *)((char *)&theDict + 2) = "HALS_IOContextDescription.cpp";
                  WORD5(theDict) = 1024;
                  HIDWORD(theDict) = 749;
                  v209 = 1024;
                  v210 = v112;
                  v211 = 2081;
                  *(_QWORD *)v212 = v139;
                  *(_WORD *)&v212[8] = 1024;
                  *(_DWORD *)&v212[10] = v108;
                  v213 = 1024;
                  v214 = v140;
                  _os_log_error_impl(&dword_1B57BA000, v125, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d (Context ID: %u) (%{private}s) Description specifies an out of range stream index (%u) for this device / engine (Device ID: %u)", v207, 0x34u);
                  if ((buf[23] & 0x80000000) != 0)
                    operator delete(*(void **)buf);
                }
              }
            }
            else
            {
              AMCP::Log::Scope_Registry::get(v110);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v207, "com.apple.coreaudio", "AMCP");
              v132 = (std::__shared_weak_count *)theDict;
              v133 = **(NSObject ***)v207;
              if ((_QWORD)theDict)
              {
                v134 = (unint64_t *)(theDict + 8);
                do
                  v135 = __ldaxr(v134);
                while (__stlxr(v135 - 1, v134));
                if (!v135)
                {
                  ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                  std::__shared_weak_count::__release_weak(v132);
                }
              }
              if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
              {
                v136 = pthread_self();
                v137 = pthread_mach_thread_np(v136);
                *(_DWORD *)v207 = 67109890;
                *(_DWORD *)&v207[4] = v137;
                LOWORD(theDict) = 2080;
                *(_QWORD *)((char *)&theDict + 2) = "HALS_IOContextDescription.cpp";
                WORD5(theDict) = 1024;
                HIDWORD(theDict) = 754;
                v209 = 1024;
                v210 = v112;
                _os_log_impl(&dword_1B57BA000, v133, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d (Context ID: %u) Description specifies a stream index for a device / engine that is currently not present.", v207, 0x1Eu);
              }
            }
            HALS_IOStreamInfo::HALS_IOStreamInfo((HALS_IOStreamInfo *)v207);
            v234 = EngineInfo;
            if ((unint64_t)v111 >> 32
              && (*(unsigned int (**)(_QWORD))(**((_QWORD **)EngineInfo + 1) + 568))(*((_QWORD *)EngineInfo
                                                                                                  + 1)))
            {
              v229 = (int)v111;
              v230 = 1;
            }
            LOBYTE(theDict) = 1;
            DWORD1(theDict) = v108;
            v138 = *((_QWORD *)EngineInfo + 1);
            if (v138)
            {
              v202[0] = 0;
              memset(buf, 0, sizeof(buf));
              (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v138 + 432))(v138, 1, v108, buf);
              v231 = *(_OWORD *)buf;
              v232 = *(_OWORD *)&buf[16];
              v233 = v202[0];
              if (v216)
              {
                v225 = *(_OWORD *)buf;
                v226 = *(_OWORD *)&buf[16];
                v227 = v202[0];
                if (!v228)
                  v228 = 1;
              }
              v215 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)EngineInfo + 1) + 424))(*((_QWORD *)EngineInfo + 1), theDict, DWORD1(theDict));
            }
            HALS_IOStreamGroup::push_back((HALS_IOContextDescription *)((char *)this + 56), (HALS_IOStreamInfo *)v207);
            HALS_IOStreamInfo::~HALS_IOStreamInfo((HALS_IOStreamInfo *)v207);
          }
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)cfa);
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v175);
        v105 = (const __CFArray *)*((_QWORD *)&v183[0] + 1);
      }
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v183);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v184);
    return;
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v207, v195, CFSTR("device id"));
  v157 = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)theDict, 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v207);
  v159 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 111));
  v156 = v2;
  v160 = (uint64_t **)((char *)this + 344);
  std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v191, (_QWORD *)this + 43);
  __p = 0;
  v3 = 0;
  v4 = 0;
  LOBYTE(v5) = 0;
  for (j = 0; (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v193) > j; j = v7 + 1)
  {
    v7 = j;
    OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v207, (uint64_t)v192, j);
    if ((_QWORD)theDict)
    {
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)buf, (CFDictionaryRef)theDict, CFSTR("uid"));
      v8 = HALS_IOContextDescription::SetFromCFRepresentation_MakeEngineInfo(this, *(char **)&buf[8]);
      if (v8)
      {
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v184, (CFDictionaryRef)theDict, CFSTR("index"));
        v9 = OS::CF::Number::GetValue<unsigned int>(v184[1], 0);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v184);
        if (v9 < (*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)v8 + 1) + 400))(*((_QWORD *)v8 + 1), 1))
        {
          v163 = v9 | 0x300000000;
          if (v5)
          {
            v5 = 1;
          }
          else
          {
            std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v190, v191);
            DeviceFromEngine = HALS_IOContextDescription_HostedDSP::LocalEngineStreamInfo::getDeviceFromEngine((HALS_IODevice *)v8);
            IsHostingInputDSP = HALS_IOContextDescription_HostedDSP::IsHostingInputDSP(v190, (_QWORD **)DeviceFromEngine, v159);
            std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v190[1]);
            v12 = v9 | 0x300000000;
            if (IsHostingInputDSP)
              v12 = v9;
            v163 = v12;
            v5 = IsHostingInputDSP != 0;
          }
          if (((v5 | (*(unsigned int (**)(_QWORD))(**((_QWORD **)v8 + 1) + 568))(*((_QWORD *)v8 + 1)) ^ 1) & 1) == 0)
          {
            if (*((_BYTE *)this + 340))
            {
              v163 = v163;
              LOBYTE(v5) = 1;
            }
            else
            {
              LOBYTE(v5) = 0;
            }
          }
          if ((unint64_t)v3 >= v4)
          {
            v13 = (v3 - __p) >> 4;
            v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 60)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v4 - (_QWORD)__p) >> 3 > v14)
              v14 = (uint64_t)(v4 - (_QWORD)__p) >> 3;
            if (v4 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF0)
              v15 = 0xFFFFFFFFFFFFFFFLL;
            else
              v15 = v14;
            if (v15)
              v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v15);
            else
              v16 = 0;
            v17 = (char **)(v15 + 16 * v13);
            *v17 = v8;
            v17[1] = (char *)v163;
            if (v3 == __p)
            {
              v20 = (char *)(v15 + 16 * v13);
              v19 = __p;
            }
            else
            {
              v18 = v15 + 16 * v13;
              v19 = __p;
              do
              {
                v20 = (char *)(v18 - 16);
                *(_OWORD *)(v18 - 16) = *((_OWORD *)v3 - 1);
                v3 -= 16;
                v18 -= 16;
              }
              while (v3 != __p);
            }
            v4 = v15 + 16 * v16;
            v3 = (char *)(v17 + 2);
            if (v19)
              operator delete(v19);
            __p = v20;
          }
          else
          {
            *(_QWORD *)v3 = v8;
            *((_QWORD *)v3 + 1) = v163;
            v3 += 16;
          }
        }
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v207);
  }
  if (__p == v3)
  {
    v33 = 0;
    v2 = v156;
    goto LABEL_197;
  }
  if (!v5)
  {
    v21 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v157);
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v189, v191);
    v22 = HALS_IOContextDescription_HostedDSP::IsHostingInputDSP(v189, (_QWORD **)v21, v159);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v189[1]);
    if ((v22 & 1) == 0)
    {
      AMCP::Log::Scope_Registry::get(v23);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v207, "com.apple.coreaudio", "AMCP");
      v34 = (std::__shared_weak_count *)theDict;
      v35 = **(NSObject ***)v207;
      v2 = v156;
      if ((_QWORD)theDict)
      {
        v36 = (unint64_t *)(theDict + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        v141 = pthread_self();
        v142 = pthread_mach_thread_np(v141);
        v143 = 0;
        v144 = 0;
        v145 = 47;
        do
        {
          v146 = &aLibraryCachesC_186[v143];
          if (v145 == 47)
            v144 = &aLibraryCachesC_186[v143];
          v145 = v146[1];
          if (!v146[1])
            break;
          v28 = v143++ >= 0xFFF;
        }
        while (!v28);
        if (v144)
          v147 = v144 + 1;
        else
          v147 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/DSP/HALS_IOContextDescription_HostedDSP.cpp";
        *(_DWORD *)v207 = 67109634;
        *(_DWORD *)&v207[4] = v142;
        LOWORD(theDict) = 2080;
        *(_QWORD *)((char *)&theDict + 2) = v147;
        WORD5(theDict) = 1024;
        HIDWORD(theDict) = 195;
        _os_log_error_impl(&dword_1B57BA000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] During context configuration, none of the associated devices have this DSP type enabled for the client.", v207, 0x18u);
      }
      goto LABEL_63;
    }
    v25 = *((_QWORD *)this + 44);
    if (v25)
    {
      v26 = (_DWORD *)((char *)this + 352);
      do
      {
        v27 = *(_DWORD *)(v25 + 28);
        v28 = v27 >= 8;
        if (v27 >= 8)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (v28)
          v26 = (_DWORD *)v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != (_DWORD *)((char *)this + 352) && v26[7] <= 8u)
      {
        AMCP::Log::Scope_Registry::get(v23);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v207, "com.apple.coreaudio", "AMCP");
        v30 = **(NSObject ***)v207;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v207);
        v2 = v156;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          v148 = pthread_self();
          v149 = pthread_mach_thread_np(v148);
          v150 = 0;
          v151 = 0;
          v152 = 47;
          do
          {
            v153 = &aLibraryCachesC_186[v150];
            if (v152 == 47)
              v151 = &aLibraryCachesC_186[v150];
            v152 = v153[1];
            if (!v153[1])
              break;
            v28 = v150++ >= 0xFFF;
          }
          while (!v28);
          if (v151)
            v154 = v151 + 1;
          else
            v154 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/DSP/HALS_IOContextDescription_HostedDSP.cpp";
          *(_DWORD *)v207 = 67109634;
          *(_DWORD *)&v207[4] = v149;
          LOWORD(theDict) = 2080;
          *(_QWORD *)((char *)&theDict + 2) = v154;
          WORD5(theDict) = 1024;
          HIDWORD(theDict) = 207;
          _os_log_error_impl(&dword_1B57BA000, v30, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp][offloads] DSP Offloading must be set/valid in at least one subdevice to be used.", v207, 0x18u);
        }
        std::__tree<DSP_Host_Types::AudioProcessingType>::__erase_unique<DSP_Host_Types::AudioProcessingType>(v160, 8u);
        v32 = *((_QWORD *)this + 46);
        *((_QWORD *)this + 46) = 0;
        if (v32)
          std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v32);
LABEL_63:
        HALS_ObjectMap::ReleaseObject(v21, v31);
        v33 = 0;
        goto LABEL_197;
      }
    }
    *((_DWORD *)__p + 3) = 0;
    HALS_ObjectMap::ReleaseObject(v21, v24);
  }
  v38 = *((_QWORD *)this + 32);
  v39 = *((_QWORD *)this + 33);
  if (v38 != v39)
  {
    while (1)
    {
      if (!*(_BYTE *)v38)
        goto LABEL_105;
      *(_DWORD *)(v38 + 4) = 0;
      v40 = *(char **)(v38 + 8);
      if (!v40)
        goto LABEL_106;
      v41 = HALS_IOContextDescription::SetFromCFRepresentation_MakeEngineInfo(this, v40);
      v42 = HALS_IOContextDescription_HostedDSP::LocalEngineStreamInfo::getDeviceFromEngine((HALS_IODevice *)v41);
      v43 = v42;
      if (!v42)
        goto LABEL_106;
      v44 = HALS_IODevice::GetNumberStreams(v42, 1) ? (uint64_t)v43 : 0;
      theDict = 0uLL;
      *(_QWORD *)v207 = 0;
      HALS_Device::CopyStreamList(v44, 1, (char **)v207);
      v46 = *(HALS_Stream ***)v207;
      v47 = (HALS_Stream **)theDict;
      if (*(_QWORD *)v207 != (_QWORD)theDict)
        break;
LABEL_76:
      HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)v207, v45);
LABEL_106:
      v38 += 16;
      if (v38 == v39)
        goto LABEL_107;
    }
    v48 = 0;
    while (!HALS_Stream::IsReferenceStream(*v46))
    {
      ++v48;
      if (++v46 == v47)
        goto LABEL_76;
    }
    HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)v207, v45);
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 1) + 400))(*((_QWORD *)v41 + 1), 1) <= v48)
      goto LABEL_106;
    v41[762] = 1;
    v49 = __p;
    if (__p != v3)
    {
      v49 = __p;
      while (*(char **)v49 != v41 || *((_DWORD *)v49 + 2) != v48)
      {
        v49 += 16;
        if (v49 == v3)
          goto LABEL_86;
      }
    }
    if (v49 == v3)
    {
LABEL_86:
      if ((unint64_t)v3 >= v4)
      {
        v164 = v48 | 0x100000000;
        v50 = (v3 - __p) >> 4;
        v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 60)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v4 - (_QWORD)__p) >> 3 > v51)
          v51 = (uint64_t)(v4 - (_QWORD)__p) >> 3;
        if (v4 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF0)
          v52 = 0xFFFFFFFFFFFFFFFLL;
        else
          v52 = v51;
        if (v52)
          v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v52);
        else
          v53 = 0;
        v54 = (char **)(v52 + 16 * v50);
        *v54 = v41;
        v54[1] = (char *)v164;
        if (__p == v3)
        {
          v57 = (char *)(v52 + 16 * v50);
          v56 = __p;
        }
        else
        {
          v55 = v52 + 16 * v50;
          v56 = __p;
          do
          {
            v57 = (char *)(v55 - 16);
            *(_OWORD *)(v55 - 16) = *((_OWORD *)v3 - 1);
            v3 -= 16;
            v55 -= 16;
          }
          while (v3 != __p);
        }
        v4 = v52 + 16 * v53;
        v3 = (char *)(v54 + 2);
        if (v56)
          operator delete(v56);
        __p = v57;
      }
      else
      {
        *(_QWORD *)v3 = v41;
        *((_QWORD *)v3 + 1) = v48 | 0x100000000;
        v3 += 16;
      }
    }
    else
    {
      *((_DWORD *)v49 + 3) = 2;
    }
LABEL_105:
    *(_DWORD *)(v38 + 4) = 1;
    goto LABEL_106;
  }
LABEL_107:
  HALS_IOStreamInfo::HALS_IOStreamInfo((HALS_IOStreamInfo *)v207);
  v234 = 0;
  LOBYTE(theDict) = 1;
  DWORD1(theDict) = 0;
  v216 = 1;
  v58 = (int *)((char *)this + 336);
  if (v230 == *((_BYTE *)this + 340))
  {
    if (v230)
      v229 = *v58;
  }
  else if (v230)
  {
    v230 = 0;
  }
  else
  {
    v229 = *v58;
    v230 = 1;
  }
  if (__p != v3)
  {
    v59 = 0;
    v60 = 0;
    v155 = (AudioStreamBasicDescription *)((char *)this + 288);
    v61 = (HALS_IOContextDescription *)((char *)this + 56);
    for (k = __p; k != v3; k += 16)
    {
      if (!*(_QWORD *)k)
        continue;
      v63 = *(_QWORD *)(*(_QWORD *)k + 8);
      if (!v63)
        continue;
      v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 320))(v63);
      if (!v64)
        continue;
      v65 = *(_DWORD *)(v64 + 16);
      v66 = *((_DWORD *)k + 2);
      v184[0] = *(CFDictionaryRef *)k;
      LODWORD(v184[1]) = v65;
      *(_QWORD *)&v185 = 0;
      DWORD2(v185) = 0;
      *(_QWORD *)&v186 = 0;
      DWORD2(v186) = 0;
      *(_DWORD *)v187 = 0;
      memset(&v187[8], 0, 40);
      *(_DWORD *)v188 = v66;
      v188[28] = 0;
      memset(&v188[4], 0, 21);
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)k + 8) + 568))(*(_QWORD *)(*(_QWORD *)k + 8)))
      {
        if (v188[28] == *((unsigned __int8 *)this + 340))
        {
          if (v188[28])
            *(_DWORD *)&v188[24] = *v58;
        }
        else if (v188[28])
        {
          v188[28] = 0;
        }
        else
        {
          *(_DWORD *)&v188[24] = *v58;
          v188[28] = 1;
        }
      }
      *(_DWORD *)&v188[4] = *((_DWORD *)k + 3);
      (*(void (**)(_QWORD, uint64_t, _QWORD, _BYTE *))(**(_QWORD **)(*(_QWORD *)k + 8) + 432))(*(_QWORD *)(*(_QWORD *)k + 8), 1, *((unsigned int *)k + 2), &v187[8]);
      v67 = *((_DWORD *)k + 3);
      if (v67)
      {
        if (v67 >= 3)
          goto LABEL_144;
        if (!v59)
        {
          v179 = *(_OWORD *)&v187[16];
          v180 = *(_OWORD *)&v187[32];
          v181 = *(_OWORD *)v188;
          v182 = *(_OWORD *)&v188[16];
          *(_OWORD *)v175 = *(_OWORD *)v184;
          v176 = v185;
          v177 = v186;
          v178 = *(_OWORD *)v187;
          HALS_IODSPInfo::AddStream(&v217, (__int128 *)v175);
          v59 = 0;
          goto LABEL_141;
        }
      }
      else
      {
        if (v220 != (_BYTE *)v160)
          std::__tree<DSP_Host_Types::AudioProcessingType>::__assign_multi<std::__tree_const_iterator<DSP_Host_Types::AudioProcessingType,std::__tree_node<DSP_Host_Types::AudioProcessingType,void *> *,long>>((uint64_t)v220, *v160, (_QWORD *)this + 44);
        v222 = *v58;
        v223 = *((_BYTE *)this + 340);
        v224 = v157;
        v68 = *((_QWORD *)this + 46);
        if (v68)
        {
          DSP_Host_OffloadDictionary::deep_copy((DSP_Host_OffloadDictionary *)buf, v68);
          std::shared_ptr<DSP_Host_OffloadDictionary>::operator=[abi:ne180100]<DSP_Host_OffloadDictionary,std::default_delete<DSP_Host_OffloadDictionary>,void>(&v221, buf);
          if (*(_QWORD *)buf)
            std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](*(uint64_t *)buf);
        }
        v69 = this;
        if (*((_BYTE *)this + 328))
        {
          HALS_IOContextDescription::UpdateDSPStreamFormat(this, v155);
          v69 = this;
          if (!*((_BYTE *)this + 328))
            std::__throw_bad_optional_access[abi:ne180100]();
          if (*((_DWORD *)this + 70) == 1)
          {
            v70 = *((_OWORD *)this + 19);
            v225 = *(_OWORD *)&v155->mSampleRate;
            v226 = v70;
            v227 = *((_QWORD *)this + 40);
            if (!v228)
              v228 = 1;
          }
        }
        v218 = *((_DWORD *)this + 108);
        v219 = *((_BYTE *)this + 436);
        v72 = *((_QWORD *)v69 + 7);
        v71 = *((_QWORD *)v69 + 8);
        HALS_IOStreamGroup::push_back(v61, (HALS_IOStreamInfo *)v207);
        v60 = 0x21CFB2B78C13521DLL * ((v71 - v72) >> 3);
        if (*((_DWORD *)k + 3) >= 3u)
        {
          v59 = 1;
LABEL_144:
          if (*((_BYTE *)this + 340))
            *(_DWORD *)&v188[4] = 4;
          HALS_IOStreamInfo::HALS_IOStreamInfo((HALS_IOStreamInfo *)buf);
          v206[30] = (uint64_t)v184[0];
          buf[8] = 1;
          *(_DWORD *)&buf[12] = *(_DWORD *)v188;
          v203 = 2;
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v206, 9u, 9);
          v171 = *(_OWORD *)&v187[16];
          v172 = *(_OWORD *)&v187[32];
          v173 = *(_OWORD *)v188;
          v174 = *(_OWORD *)&v188[16];
          *(_OWORD *)cfa = *(_OWORD *)v184;
          v168 = v185;
          v169 = v186;
          v170 = *(_OWORD *)v187;
          HALS_IODSPInfo::AddStream(&v204, (__int128 *)cfa);
          HALS_IOStreamGroup::push_back(v61, (HALS_IOStreamInfo *)buf);
          HALS_IOStreamInfo::~HALS_IOStreamInfo((HALS_IOStreamInfo *)buf);
          continue;
        }
      }
      v73 = (char **)(*(_QWORD *)v61 + 424 * v60 + 112);
      v183[4] = *(_OWORD *)&v187[16];
      v183[5] = *(_OWORD *)&v187[32];
      v183[6] = *(_OWORD *)v188;
      v183[7] = *(_OWORD *)&v188[16];
      v183[0] = *(_OWORD *)v184;
      v183[1] = v185;
      v183[2] = v186;
      v183[3] = *(_OWORD *)v187;
      HALS_IODSPInfo::AddStream(v73, v183);
      v59 = 1;
LABEL_141:
      if (*((_DWORD *)k + 3) >= 2u)
        goto LABEL_144;
    }
  }
  if (*((_QWORD *)this + 7) != *((_QWORD *)this + 8))
  {
    v74 = (AMCP::Log::Scope_Registry *)HALS_IOContextDescription::HostedDSPDescription::DebugString_DSPTypes((HALS_IOContextDescription::HostedDSPDescription *)&v198, (uint64_t)this + 256);
    v2 = v156;
    v75 = v200;
    if ((v200 & 0x80u) != 0)
      v75 = v199;
    if (v75)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
      if ((v200 & 0x80u) == 0)
        v76 = &v198;
      else
        v76 = v198;
      if ((v200 & 0x80u) == 0)
        v77 = v200;
      else
        v77 = v199;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)v76, v77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)" ", 1);
      v78 = (HALS_ObjectMap *)*((_QWORD *)this + 7);
      v158 = (HALS_ObjectMap *)*((_QWORD *)this + 8);
      if (v78 != v158)
      {
        v79 = 0;
        do
        {
          v165 = v79;
          v80 = (*(uint64_t (**)(HALS_IOContextDescription *, uint64_t))(*(_QWORD *)this + 16))(this, 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)"[", 1);
          v81 = *((_QWORD *)v78 + 14);
          v82 = *((_QWORD *)v78 + 15);
          v161 = v78;
          if (v81 != v82)
          {
            if (v80)
              v83 = "";
            else
              v83 = "~";
            v84 = v80 ^ 1u;
            do
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)"(", 1);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)v83, v84);
              v85 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)" (#", 3);
              v86 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)") ", 2);
              v87 = *(_DWORD *)(v81 + 100) - 1;
              v88 = "PRIM";
              if (v87 <= 4)
                v88 = off_1E696F578[v87];
              v89 = strlen(v88);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)v88, v89);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)")", 1);
              v81 += 128;
            }
            while (v81 != v82);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)"]", 1);
          v79 = v165 + 1;
          v78 = (HALS_ObjectMap *)((char *)v161 + 424);
        }
        while ((HALS_ObjectMap *)((char *)v161 + 424) != v158);
      }
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&__dst, (uint64_t)&buf[24]);
      *(_OWORD *)v184 = __dst;
      *(_QWORD *)&v185 = v197;
      BYTE8(v185) = 1;
      *(_QWORD *)buf = *MEMORY[0x1E0DE4F50];
      v90 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      *(_QWORD *)&buf[16] = v90;
      *(_QWORD *)&buf[24] = MEMORY[0x1E0DE4FB8] + 16;
      v2 = v156;
      if (SHIBYTE(v203) < 0)
        operator delete((void *)v202[7]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      v74 = (AMCP::Log::Scope_Registry *)MEMORY[0x1B5E50598](&v205);
      if ((v200 & 0x80) == 0)
        goto LABEL_173;
    }
    else
    {
      LOBYTE(v184[0]) = 0;
      BYTE8(v185) = 0;
      if ((v200 & 0x80) == 0)
      {
LABEL_173:
        if (BYTE8(v185))
        {
          AMCP::Log::Scope_Registry::get(v74);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v91 = *(std::__shared_weak_count **)&buf[8];
          v92 = **(NSObject ***)buf;
          if (*(_QWORD *)&buf[8])
          {
            v93 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v94 = __ldaxr(v93);
            while (__stlxr(v94 - 1, v93));
            if (!v94)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
          if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
          {
            v95 = pthread_self();
            v96 = pthread_mach_thread_np(v95);
            v97 = 0;
            v98 = 0;
            v99 = 47;
            do
            {
              v100 = &aLibraryCachesC_186[v97];
              if (v99 == 47)
                v98 = &aLibraryCachesC_186[v97];
              v99 = v100[1];
              if (!v100[1])
                break;
              v28 = v97++ >= 0xFFF;
            }
            while (!v28);
            v101 = *((_DWORD *)this + 110);
            if (v98)
              v102 = v98 + 1;
            else
              v102 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/DSP/HALS_IOContextDescription_HostedDSP.cpp";
            v103 = v184;
            if (SBYTE7(v185) < 0)
              v103 = (CFDictionaryRef *)v184[0];
            *(_DWORD *)buf = 67110403;
            *(_DWORD *)&buf[4] = v96;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = v102;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 327;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = v101;
            *(_WORD *)&buf[30] = 1024;
            LODWORD(v202[0]) = v157;
            WORD2(v202[0]) = 2081;
            *(_QWORD *)((char *)v202 + 6) = v103;
            _os_log_impl(&dword_1B57BA000, v92, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d [hal_dsp][comp] (Context ID: %d)(Device ID: %d)%{private}s", buf, 0x2Eu);
          }
        }
        goto LABEL_193;
      }
    }
    operator delete(v198);
    goto LABEL_173;
  }
  LOBYTE(v184[0]) = 0;
  BYTE8(v185) = 0;
  v2 = v156;
LABEL_193:
  HALS_IOContextDescription::ForceDSPToUseMasterEngineSampleRate(this);
  if (BYTE8(v185) && SBYTE7(v185) < 0)
    operator delete(v184[0]);
  HALS_IOStreamInfo::~HALS_IOStreamInfo((HALS_IOStreamInfo *)v207);
  v33 = 1;
LABEL_197:
  if (__p)
    operator delete(__p);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v191[1]);
  HALS_ObjectMap::ReleaseObject(v159, v104);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v192);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v194);
  if ((v33 & 1) == 0)
    goto LABEL_200;
}

void sub_1B5BF2768(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,HALS_ObjectMap *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p)
{
  HALS_Object *v26;

  HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)&STACK[0x500], a2);
  if (__p)
    operator delete(__p);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)STACK[0x2F0]);
  HALS_ObjectMap::ReleaseObject(a21, v26);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x300]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x310]);
  _Unwind_Resume(a1);
}

void sub_1B5BF2840(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B5BF2844);
  JUMPOUT(0x1B5BF2950);
}

void sub_1B5BF2860(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5BF2864);
  __clang_call_terminate(a1);
}

void sub_1B5BF286C()
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)STACK[0x2D8]);
  JUMPOUT(0x1B5BF28BCLL);
}

void sub_1B5BF2884()
{
  JUMPOUT(0x1B5BF2910);
}

void sub_1B5BF288C()
{
  HALS_IOStreamInfo::~HALS_IOStreamInfo((HALS_IOStreamInfo *)&STACK[0x500]);
  JUMPOUT(0x1B5BF28D4);
}

void sub_1B5BF28B8()
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x350]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x500]);
  JUMPOUT(0x1B5BF2918);
}

void sub_1B5BF28D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a31);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a47);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a63);
  JUMPOUT(0x1B5BF2940);
}

void sub_1B5BF2948(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5BF2950);
  __clang_call_terminate(a1);
}

void HALS_IOContextDescription::SetFromCFRepresentation_ProcessOutputStreams(HALS_IOContextDescription *this, CFTypeRef cf)
{
  const __CFArray *v4;
  char *v5;
  char *v6;
  unsigned int v7;
  unsigned int i;
  const __CFArray *v9;
  HALS_IOContextDescription *v10;
  unsigned int v11;
  unsigned int v12;
  HALS_IOEngineInfo *v13;
  char *EngineInfo;
  unsigned __int32 v15;
  char *v16;
  const __CFArray *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char **v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int DeviceIDFromEngineID;
  int v44;
  __int128 v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  __int128 v56;
  int64x2_t v57;
  void **v58;
  int64x2_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void **v67;
  void **v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  void ***v81;
  uint64_t *v82;
  unsigned int v83;
  _QWORD *v84;
  AudioStreamBasicDescription *v85;
  char *v86;
  _BYTE *v87;
  unsigned int v88;
  uint64_t v89;
  char *v90;
  __int128 v91[8];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _BYTE v95[48];
  _BYTE v96[32];
  char v97[8];
  const __CFArray *v98;
  int64x2_t *v99;
  int64x2_t v100;
  void **v101;
  void ***v102;
  char v103;
  _DWORD *v104;
  _DWORD *v105;
  unint64_t v106;
  int v107;
  int v108;
  char *v109;
  _BYTE v110[56];
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  char v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  char *v119;
  char v120[8];
  char *v121;
  char v122[8];
  CFDictionaryRef v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127[8];
  const __CFArray *v128;
  char v129[8];
  const __CFArray *v130;
  char v131[8];
  CFDictionaryRef v132;
  int v133;
  int64x2_t v134;
  void **v135;
  char v136[8];
  const __CFArray *v137;
  _QWORD v138[3];

  CFRetain(cf);
  v138[0] = &off_1E69A0DE0;
  v138[1] = cf;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v136, (CFDictionaryRef)cf, CFSTR("grid-out"));
  v4 = v137;
  if (v137)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v89 = *((_QWORD *)this + 49);
    v90 = 0;
    v87 = (char *)this + 376;
    v86 = (char *)this + 400;
    v85 = (AudioStreamBasicDescription *)((char *)this + 288);
    v82 = (uint64_t *)((char *)this + 80);
    v84 = (_QWORD *)((char *)this + 384);
    v81 = (void ***)((char *)this + 96);
    while ((unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v4) > v7)
    {
      v133 = 0;
      v135 = 0;
      v134 = 0uLL;
      v83 = v7;
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v131, (uint64_t)v136, v7);
      if (v132)
      {
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v99, v132, CFSTR("channels"));
        v133 = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v100.i64[0], 0);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v99);
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v129, v132, CFSTR("stream groups"));
        for (i = 0; (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v130) > i; ++i)
        {
          OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Array>((const __CFArray *)v127, (uint64_t)v129, i);
          v9 = v128;
          if (v128)
          {
            v88 = i;
            v10 = this;
            v11 = 0;
            v124 = 0;
            v125 = 0;
            v126 = 0;
            while ((unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v9) > v11)
            {
              v12 = v11;
              OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v122, (uint64_t)v127, v11);
              if (v123)
              {
                OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v120, v123, CFSTR("uid"));
                EngineInfo = HALS_IOContextDescription::SetFromCFRepresentation_MakeEngineInfo(v10, v121);
                if (EngineInfo)
                {
                  HALS_IOContextDescription::SetFromCFRepresentation_UpdateEngineInfo(0, v123, (const __CFDictionary *)EngineInfo, v13);
                  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v99, v123, CFSTR("index"));
                  v15 = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v100.i64[0], 0);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v99);
                  if (v89)
                  {
                    v16 = (char *)v15;
                    if (v6 >= v90)
                    {
                      v32 = (v6 - v5) >> 4;
                      v33 = v32 + 1;
                      if ((unint64_t)(v32 + 1) >> 60)
                        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                      if ((v90 - v5) >> 3 > v33)
                        v33 = (v90 - v5) >> 3;
                      if ((unint64_t)(v90 - v5) >= 0x7FFFFFFFFFFFFFF0)
                        v34 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v34 = v33;
                      if (v34)
                      {
                        if (v34 >> 60)
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        v35 = (char *)operator new(16 * v34);
                      }
                      else
                      {
                        v35 = 0;
                      }
                      v36 = (char **)&v35[16 * v32];
                      *v36 = EngineInfo;
                      v36[1] = v16;
                      if (v6 == v5)
                      {
                        v38 = &v35[16 * v32];
                      }
                      else
                      {
                        v37 = &v35[16 * v32];
                        do
                        {
                          v38 = v37 - 16;
                          *((_OWORD *)v37 - 1) = *((_OWORD *)v6 - 1);
                          v6 -= 16;
                          v37 -= 16;
                        }
                        while (v6 != v5);
                      }
                      v90 = &v35[16 * v34];
                      v6 = (char *)(v36 + 2);
                      if (v5)
                        operator delete(v5);
                      v5 = v38;
                    }
                    else
                    {
                      *(_QWORD *)v6 = EngineInfo;
                      *((_QWORD *)v6 + 1) = v15;
                      v6 += 16;
                    }
                  }
                  else
                  {
                    HALS_IOStreamInfo::HALS_IOStreamInfo((HALS_IOStreamInfo *)&v99);
                    v119 = EngineInfo;
                    v100.i8[0] = 0;
                    v100.i32[1] = v15;
                    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v97, v123, CFSTR("channel map"));
                    v17 = v98;
                    if (v98)
                    {
                      v18 = 0;
                      v103 = 1;
                      while ((unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v17) > v18)
                      {
                        v19 = v18;
                        OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Number>(&v92, (uint64_t)v97, v18);
                        v20 = OS::CF::Number::GetValue<int>(*((const __CFNumber **)&v92 + 1), 0xFFFFFFFFLL);
                        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v92);
                        v21 = v105;
                        if ((unint64_t)v105 >= v106)
                        {
                          v23 = v104;
                          v24 = v105 - v104;
                          v25 = v24 + 1;
                          if ((unint64_t)(v24 + 1) >> 62)
                            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                          v26 = v106 - (_QWORD)v104;
                          if ((uint64_t)(v106 - (_QWORD)v104) >> 1 > v25)
                            v25 = v26 >> 1;
                          v27 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL;
                          v28 = 0x3FFFFFFFFFFFFFFFLL;
                          if (!v27)
                            v28 = v25;
                          if (v28)
                          {
                            v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v28);
                            v23 = v104;
                            v21 = v105;
                          }
                          else
                          {
                            v29 = 0;
                          }
                          v30 = (_DWORD *)(v28 + 4 * v24);
                          *v30 = v20;
                          v22 = v30 + 1;
                          while (v21 != v23)
                          {
                            v31 = *--v21;
                            *--v30 = v31;
                          }
                          v104 = v30;
                          v105 = v22;
                          v106 = v28 + 4 * v29;
                          if (v23)
                            operator delete(v23);
                        }
                        else
                        {
                          *v105 = v20;
                          v22 = v21 + 1;
                        }
                        v105 = v22;
                        v18 = v19 + 1;
                        v17 = v98;
                      }
                    }
                    if (*((_QWORD *)EngineInfo + 1))
                    {
                      *(_QWORD *)&v94 = 0;
                      v92 = 0u;
                      v93 = 0u;
                      (*(void (**)(_QWORD, _QWORD, _QWORD, __int128 *))(**((_QWORD **)EngineInfo + 1) + 432))(*((_QWORD *)EngineInfo + 1), v100.u8[0], v100.u32[1], &v92);
                      v116 = v92;
                      v117 = v93;
                      v118 = v94;
                      if (v108)
                      {
                        v112 = v92;
                        v113 = v93;
                        v114 = v94;
                        if (!v115)
                          v115 = 1;
                      }
                      v107 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)EngineInfo + 1) + 424))(*((_QWORD *)EngineInfo + 1), v100.u8[0], v100.u32[1]);
                    }
                    HALS_IOStreamGroup::push_back((HALS_IOStreamGroup *)&v124, (HALS_IOStreamInfo *)&v99);
                    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v97);
                    HALS_IOStreamInfo::~HALS_IOStreamInfo((HALS_IOStreamInfo *)&v99);
                  }
                }
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v120);
              }
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v122);
              v11 = v12 + 1;
              v9 = v128;
            }
            if (v89)
            {
              v39 = v5;
              this = v10;
              if (v5 != v6)
              {
                HALS_IOStreamInfo::HALS_IOStreamInfo((HALS_IOStreamInfo *)&v99);
                v119 = 0;
                v100.i8[0] = 0;
                v40 = v5;
                v100.i32[1] = 0;
                v108 = 1;
                do
                {
                  v41 = *(_QWORD *)v40;
                  v42 = *(_QWORD *)(*(_QWORD *)v40 + 8);
                  if (v42)
                  {
                    DeviceIDFromEngineID = HALS_IOContextDescription::GetDeviceIDFromEngineID((HALS_IOContextDescription *)*(unsigned int *)(v42 + 16));
                    v41 = *(_QWORD *)v40;
                  }
                  else
                  {
                    DeviceIDFromEngineID = 0;
                  }
                  v44 = *((_DWORD *)v40 + 2);
                  *(_QWORD *)&v92 = v41;
                  DWORD2(v92) = DeviceIDFromEngineID;
                  *(_QWORD *)&v93 = 0;
                  DWORD2(v93) = 0;
                  *(_QWORD *)&v94 = 0;
                  DWORD2(v94) = 0;
                  *(_DWORD *)v95 = 0;
                  memset(&v95[8], 0, 40);
                  *(_DWORD *)v96 = v44;
                  v96[28] = 0;
                  memset(&v96[4], 0, 21);
                  (*(void (**)(_QWORD, _QWORD, _QWORD, _BYTE *))(**(_QWORD **)(*(_QWORD *)v40 + 8) + 432))(*(_QWORD *)(*(_QWORD *)v40 + 8), v100.u8[0], *((unsigned int *)v40 + 2), &v95[8]);
                  v91[4] = *(_OWORD *)&v95[16];
                  v91[5] = *(_OWORD *)&v95[32];
                  v91[6] = *(_OWORD *)v96;
                  v91[7] = *(_OWORD *)&v96[16];
                  v91[0] = v92;
                  v91[1] = v93;
                  v91[2] = v94;
                  v91[3] = *(_OWORD *)v95;
                  HALS_IODSPInfo::AddStream(&v109, v91);
                  v40 += 16;
                }
                while (v40 != v6);
                if (v110 != v87)
                  std::__tree<DSP_Host_Types::AudioProcessingType>::__assign_multi<std::__tree_const_iterator<DSP_Host_Types::AudioProcessingType,std::__tree_node<DSP_Host_Types::AudioProcessingType,void *> *,long>>((uint64_t)v110, *(_QWORD **)v87, v84);
                std::__optional_storage_base<CA::ChannelLayout,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<CA::ChannelLayout,false> const&>((uint64_t)&v111, (uint64_t)v86);
                if (*((_BYTE *)v10 + 328))
                {
                  HALS_IOContextDescription::UpdateDSPStreamFormat(v10, v85);
                  if (!*((_BYTE *)v10 + 328))
                    std::__throw_bad_optional_access[abi:ne180100]();
                  if (*((_DWORD *)v10 + 70) == 1)
                  {
                    v45 = *(_OWORD *)&v85->mBytesPerPacket;
                    v112 = *(_OWORD *)&v85->mSampleRate;
                    v113 = v45;
                    v114 = *(_QWORD *)&v85->mBitsPerChannel;
                    if (!v115)
                      v115 = 1;
                  }
                }
                HALS_IOStreamGroup::push_back((HALS_IOStreamGroup *)&v124, (HALS_IOStreamInfo *)&v99);
                HALS_IOStreamInfo::~HALS_IOStreamInfo((HALS_IOStreamInfo *)&v99);
                v39 = v6;
              }
            }
            else
            {
              v39 = v6;
              this = v10;
            }
            if (v124 != v125)
            {
              v46 = (_QWORD *)v134.i64[1];
              if (v134.i64[1] >= (unint64_t)v135)
              {
                v48 = 0xAAAAAAAAAAAAAAABLL * ((v134.i64[1] - v134.i64[0]) >> 3);
                v49 = v48 + 1;
                if (v48 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * (((uint64_t)v135 - v134.i64[0]) >> 3) > v49)
                  v49 = 0x5555555555555556 * (((uint64_t)v135 - v134.i64[0]) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v135 - v134.i64[0]) >> 3) >= 0x555555555555555)
                  v50 = 0xAAAAAAAAAAAAAAALL;
                else
                  v50 = v49;
                v102 = &v135;
                if (v50)
                  v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v50);
                else
                  v51 = 0;
                v52 = (_QWORD *)(v50 + 24 * v48);
                v99 = (int64x2_t *)v50;
                v100.i64[0] = (uint64_t)v52;
                v100.i64[1] = (uint64_t)v52;
                v101 = (void **)(v50 + 24 * v51);
                *v52 = 0;
                v52[1] = 0;
                v52[2] = 0;
                std::vector<HALS_IOStreamInfo>::__init_with_size[abi:ne180100]<HALS_IOStreamInfo*,HALS_IOStreamInfo*>(v52, v124, v125, 0x21CFB2B78C13521DLL * ((v125 - v124) >> 3));
                v53 = v100.i64[0];
                v47 = v100.i64[1] + 24;
                v100.i64[1] += 24;
                v54 = (_QWORD *)v134.i64[1];
                v55 = (_QWORD *)v134.i64[0];
                if (v134.i64[1] == v134.i64[0])
                {
                  v57 = vdupq_n_s64(v134.u64[1]);
                }
                else
                {
                  do
                  {
                    *(_QWORD *)(v53 - 24) = 0;
                    *(_QWORD *)(v53 - 16) = 0;
                    v53 -= 24;
                    *(_QWORD *)(v53 + 16) = 0;
                    v56 = *(_OWORD *)(v54 - 3);
                    v54 -= 3;
                    *(_OWORD *)v53 = v56;
                    *(_QWORD *)(v53 + 16) = v54[2];
                    *v54 = 0;
                    v54[1] = 0;
                    v54[2] = 0;
                  }
                  while (v54 != v55);
                  v57 = v134;
                  v47 = v100.i64[1];
                }
                v134.i64[0] = v53;
                v134.i64[1] = v47;
                v100 = v57;
                v58 = v135;
                v135 = v101;
                v101 = v58;
                v99 = (int64x2_t *)v57.i64[0];
                std::__split_buffer<HALS_IOStreamGroup>::~__split_buffer((uint64_t)&v99);
              }
              else
              {
                *(_QWORD *)v134.i64[1] = 0;
                v46[1] = 0;
                v46[2] = 0;
                std::vector<HALS_IOStreamInfo>::__init_with_size[abi:ne180100]<HALS_IOStreamInfo*,HALS_IOStreamInfo*>(v46, v124, v125, 0x21CFB2B78C13521DLL * ((v125 - v124) >> 3));
                v47 = (uint64_t)(v46 + 3);
              }
              v134.i64[1] = v47;
            }
            v99 = (int64x2_t *)&v124;
            std::vector<HALS_IOStreamInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
            v6 = v39;
            i = v88;
          }
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v127);
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v129);
      }
      v59 = v134;
      if (v134.i64[0] != v134.i64[1])
      {
        v61 = *((_QWORD *)this + 11);
        v60 = *((_QWORD *)this + 12);
        if (v61 >= v60)
        {
          v63 = (uint64_t)(v61 - *v82) >> 5;
          if ((unint64_t)(v63 + 1) >> 59)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v64 = v60 - *v82;
          v65 = v64 >> 4;
          if (v64 >> 4 <= (unint64_t)(v63 + 1))
            v65 = v63 + 1;
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFE0)
            v66 = 0x7FFFFFFFFFFFFFFLL;
          else
            v66 = v65;
          v102 = v81;
          if (v66)
          {
            if (v66 >> 59)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v67 = (void **)operator new(32 * v66);
          }
          else
          {
            v67 = 0;
          }
          v68 = &v67[4 * v63];
          v99 = (int64x2_t *)v67;
          v100.i64[0] = (uint64_t)v68;
          v100.i64[1] = (uint64_t)v68;
          v101 = &v67[4 * v66];
          *(_DWORD *)v68 = v133;
          v68[2] = 0;
          v68[3] = 0;
          v68[1] = 0;
          std::vector<HALS_IOStreamGroup>::__init_with_size[abi:ne180100]<HALS_IOStreamGroup*,HALS_IOStreamGroup*>(v68 + 1, (uint64_t *)v59.i64[0], (uint64_t *)v59.i64[1], 0xAAAAAAAAAAAAAAABLL * ((v59.i64[1] - v59.i64[0]) >> 3));
          v100.i64[1] += 32;
          std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::__swap_out_circular_buffer(v82, &v99);
          v62 = *((_QWORD *)this + 11);
          std::__split_buffer<HALS_IOStackDescription>::~__split_buffer((uint64_t)&v99);
        }
        else
        {
          *(_DWORD *)v61 = v133;
          *(_QWORD *)(v61 + 8) = 0;
          *(_QWORD *)(v61 + 16) = 0;
          *(_QWORD *)(v61 + 24) = 0;
          std::vector<HALS_IOStreamGroup>::__init_with_size[abi:ne180100]<HALS_IOStreamGroup*,HALS_IOStreamGroup*>((_QWORD *)(v61 + 8), (uint64_t *)v134.i64[0], (uint64_t *)v134.i64[1], 0xAAAAAAAAAAAAAAABLL * ((v134.i64[1] - v134.i64[0]) >> 3));
          v62 = v61 + 32;
          *((_QWORD *)this + 11) = v62;
        }
        *((_QWORD *)this + 11) = v62;
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v131);
      v99 = &v134;
      std::vector<HALS_IOStreamGroup>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
      v7 = v83 + 1;
      v4 = v137;
    }
    if (v5)
      operator delete(v5);
  }
  v69 = *((_QWORD *)this + 10);
  if (*((_QWORD *)this + 11) == v69)
    goto LABEL_128;
  v71 = v69 + 8;
  v70 = *(_QWORD **)(v69 + 8);
  if (*(_QWORD **)(v71 + 8) == v70)
    goto LABEL_128;
  v73 = v70;
  v72 = *v70;
  if (!(-1944890851 * ((unint64_t)(v73[1] - v72) >> 3)))
    goto LABEL_128;
  if (!*(_DWORD *)(v72 + 108)
    || ((v74 = *(_QWORD *)(v72 + 112), *(_QWORD *)(v72 + 120) != v74) ? (v75 = v74 == 0) : (v75 = 1), v75))
  {
    v74 = v72 + 408;
  }
  v76 = *(_QWORD *)(*(_QWORD *)v74 + 8);
  if (v76 && (v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 320))(v76)) != 0)
    v78 = *(_DWORD *)(v77 + 16);
  else
LABEL_128:
    v78 = 0;
  v79 = *((_QWORD *)this + 7);
  if (*((_QWORD *)this + 8) != v79 && *(_DWORD *)(v79 + 108) == 1 && v78 != 0)
    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)(v79 + 136), v78, v78);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v136);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v138);
}

void sub_1B5BF33CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v1 - 120));
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v1 - 104));
  _Unwind_Resume(a1);
}

void HALS_IOContextDescription::SetFromCFRepresentation_ProcessEngines(HALS_IOContextDescription *this)
{
  int8x16_t *v2;
  int8x16_t *v3;
  int8x16_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const std::nothrow_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t *v13;
  HALS_Object *v14;
  HALS_ObjectMap *v15;
  int8x16_t *i;
  uint64_t v17;
  HALS_ObjectMap *v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t *j;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = (int8x16_t *)*((_QWORD *)this + 4);
  v2 = (int8x16_t *)*((_QWORD *)this + 5);
  if (v3 != v2)
  {
    while (*(_DWORD *)(v3->i64[0] + 744))
    {
      v3 = (int8x16_t *)((char *)v3 + 8);
      if (v3 == v2)
      {
        v3 = (int8x16_t *)*((_QWORD *)this + 5);
        goto LABEL_19;
      }
    }
    v4 = (int8x16_t *)((char *)v2 - 8);
    while (1)
    {
      v5 = (char *)v4 - (char *)v3;
      if (v4 == v3)
        break;
      v6 = (uint64_t *)v4;
      v7 = v4->i64[0];
      v4 = (int8x16_t *)((char *)v4 - 8);
      if (*(_DWORD *)(v7 + 744))
      {
        v8 = (v5 >> 3) + 1;
        if (v5 < 17)
        {
LABEL_15:
          v13 = 0;
          v9 = 0;
        }
        else
        {
          if (v8 >= 0xFFFFFFFFFFFFFFFLL)
            v9 = 0xFFFFFFFFFFFFFFFLL;
          else
            v9 = (v5 >> 3) + 1;
          v10 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
          while (1)
          {
            v11 = (uint64_t *)operator new(8 * v9, v10);
            if (v11)
              break;
            v12 = v9 > 1;
            v9 >>= 1;
            if (!v12)
              goto LABEL_15;
          }
          v13 = v11;
        }
        v3 = (int8x16_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,HALS_IOContextDescription::SetFromCFRepresentation_ProcessEngines(void)::$_0 &,std::__wrap_iter<std::unique_ptr<HALS_IOEngineInfo> *>,long,std::pair<std::unique_ptr<HALS_IOEngineInfo> *,long>>(v3, v6, v8, v13, v9);
        if (v13)
          operator delete(v13);
        break;
      }
    }
  }
LABEL_19:
  v15 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 110));
  if (!v15 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v24 = 136315394;
    v25 = "HALS_IOContextDescription.cpp";
    v26 = 1024;
    v27 = 1015;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContextDescription::SetFromCFRepresentation_ProcessEngines: IOContextDescription has outlived owning IOContext", (uint8_t *)&v24, 0x12u);
  }
  for (i = v3; i != *((int8x16_t **)this + 5); i = (int8x16_t *)((char *)i + 8))
  {
    v17 = i->i64[0];
    v18 = *(HALS_ObjectMap **)(i->i64[0] + 8);
    if (v18)
    {
      if (v15)
      {
        if (*(_BYTE *)(v17 + 860))
        {
          (*(void (**)(HALS_ObjectMap *, HALS_ObjectMap *))(*(_QWORD *)v18 + 208))(v18, v15);
          v17 = i->i64[0];
          v18 = *(HALS_ObjectMap **)(i->i64[0] + 8);
        }
      }
      *(_BYTE *)(v17 + 860) = 0;
      HALS_ObjectMap::ReleaseObject_LongTerm(v18, v14);
      *(_QWORD *)(i->i64[0] + 8) = 0;
    }
  }
  if (v3 != i)
  {
    while (i != v3)
    {
      v20 = i[-1].i64[1];
      i = (int8x16_t *)((char *)i - 8);
      v19 = v20;
      i->i64[0] = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
    *((_QWORD *)this + 5) = v3;
  }
  if (v15)
  {
    for (j = (int8x16_t *)*((_QWORD *)this + 4); j != v3; j = (int8x16_t *)((char *)j + 8))
    {
      v22 = j->i64[0];
      if (*(_DWORD *)(j->i64[0] + 744) == 1)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23 && !*(_BYTE *)(v22 + 860))
        {
          (*(void (**)(uint64_t, HALS_ObjectMap *))(*(_QWORD *)v23 + 200))(v23, v15);
          v22 = j->i64[0];
          *(_BYTE *)(j->i64[0] + 860) = 1;
        }
        *(_DWORD *)(v22 + 744) = 2;
      }
    }
  }
  HALS_ObjectMap::ReleaseObject(v15, v14);
}

void sub_1B5BF37C4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__stable_partition_impl<std::_ClassicAlgPolicy,HALS_IOContextDescription::SetFromCFRepresentation_ProcessEngines(void)::$_0 &,std::__wrap_iter<std::unique_ptr<HALS_IOEngineInfo> *>,long,std::pair<std::unique_ptr<HALS_IOEngineInfo> *,long>>(int8x16_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t i;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *j;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;

  v6 = (uint64_t *)a1;
  if (a3 == 3)
  {
    v10 = (uint64_t)&a1->i64[1];
    v9 = a1->i64[1];
    if (!*(_DWORD *)(v9 + 744))
    {
      a1->i64[1] = *a2;
      *a2 = v9;
      *a1 = vextq_s8(*a1, *a1, 8uLL);
      return (uint64_t *)v10;
    }
    v11 = a1->i64[0];
    a1->i64[0] = v9;
    a1->i64[1] = v11;
    a1->i64[1] = *a2;
    *a2 = v11;
    return a2;
  }
  if (a3 == 2)
  {
    v8 = a1->i64[0];
    a1->i64[0] = *a2;
    *a2 = v8;
    return a2;
  }
  if (a5 >= a3)
  {
    v20 = a1->i64[0];
    a1->i64[0] = 0;
    v21 = &a1->i64[1];
    *a4 = v20;
    v22 = a4 + 1;
    v23 = 1;
    while (v21 != a2)
    {
      v24 = *v21;
      v25 = *(_DWORD *)(*v21 + 744);
      *v21 = 0;
      if (v25)
      {
        v26 = *v6;
        *v6 = v24;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        ++v6;
      }
      else
      {
        *v22++ = v24;
        ++v23;
      }
      ++v21;
    }
    v27 = *a2;
    *a2 = 0;
    v28 = *v6;
    *v6 = v27;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v10 = (uint64_t)(v6 + 1);
    if (v22 > a4)
    {
      v29 = a4;
      v30 = v6 + 1;
      do
      {
        v31 = *v29;
        *v29 = 0;
        v32 = *v30;
        *v30 = v31;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        ++v29;
        ++v30;
      }
      while (v29 < v22);
    }
    if (v23)
    {
      for (i = 0; i < v23; ++i)
      {
        v34 = a4[i];
        a4[i] = 0;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      }
    }
  }
  else
  {
    if (a3 >= 0)
      v15 = a3;
    else
      v15 = a3 + 1;
    v16 = v15 >> 1;
    v17 = &a1->i64[v15 >> 1];
    v18 = (__int8 *)(v17 - 1);
    if (*(_DWORD *)(*(v17 - 1) + 744))
    {
      v19 = v15 >> 1;
LABEL_40:
      v38 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,HALS_IOContextDescription::SetFromCFRepresentation_ProcessEngines(void)::$_0 &,std::__wrap_iter<std::unique_ptr<HALS_IOEngineInfo> *>,long,std::pair<std::unique_ptr<HALS_IOEngineInfo> *,long>>(a1, v18, v19, a4, a5);
    }
    else
    {
      v35 = 8 - 8 * v16;
      v36 = v16;
      while (v35)
      {
        v19 = v36 - 1;
        v37 = *(_DWORD *)(a1[-1].i64[v36] + 744);
        v35 += 8;
        --v36;
        if (v37)
        {
          v18 = &a1->i8[-v35];
          goto LABEL_40;
        }
      }
      v38 = (uint64_t *)a1;
    }
    v39 = a3 - v16;
    if (*(_DWORD *)(*v17 + 744))
    {
      v10 = (uint64_t)(a2 + 1);
      v40 = &v6[v16 + 1];
      while (v40 != a2)
      {
        --v39;
        v41 = *v40++;
        if (!*(_DWORD *)(v41 + 744))
        {
          v42 = v40 - 1;
          goto LABEL_47;
        }
      }
    }
    else
    {
      v42 = v17;
LABEL_47:
      v10 = std::__stable_partition_impl<std::_ClassicAlgPolicy,HALS_IOContextDescription::SetFromCFRepresentation_ProcessEngines(void)::$_0 &,std::__wrap_iter<std::unique_ptr<HALS_IOEngineInfo> *>,long,std::pair<std::unique_ptr<HALS_IOEngineInfo> *,long>>(v42, a2, v39, a4, a5);
    }
    if (v38 != v17)
    {
      if (v17 != (uint64_t *)v10)
      {
        v43 = *v38;
        *v38++ = *v17;
        for (j = v17; ; *v38++ = *j)
        {
          *j++ = v43;
          if (j == (uint64_t *)v10)
            break;
          if (v38 == v17)
            v17 = j;
          v43 = *v38;
        }
        if (v38 == v17)
          return v17;
        v45 = v38;
        v46 = v17;
        do
        {
          while (1)
          {
            v47 = *v45;
            *v45++ = *v46;
            *v46++ = v47;
            if (v46 == (uint64_t *)v10)
              break;
            if (v45 == v17)
              v17 = v46;
          }
          v46 = v17;
        }
        while (v45 != v17);
      }
      return v38;
    }
  }
  return (uint64_t *)v10;
}

char *HALS_IOContextDescription::SetFromCFRepresentation_MakeEngineInfo(HALS_IOContextDescription *this, char *cf)
{
  char *v2;
  uint64_t EngineInfoForDeviceUID;
  HALS_ObjectMap *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  HALS_IODevice *v10;
  HALS_ObjectMap *v11;
  HALS_Object *v12;
  HALS_ObjectMap *v13;
  HALS_Object *v14;
  HALS_ObjectMap *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  HALS_MultiTap *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  HALS_Object *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  HALS_Client *v34;
  HALS_IODevice *v35;
  HALS_Object *v36;
  HALS_ObjectMap *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  HALS_Object *v44;
  HALS_Object *v45;
  unsigned int *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  HALS_System *v72;
  std::__shared_weak_count *v73;
  void (**v74)(OS::CF::String *__hidden);
  CFTypeRef cfa;
  char v76[8];
  std::__shared_weak_count *v77;
  _BYTE buf[18];
  char v79;
  uint64_t v80;

  v2 = cf;
  v80 = *MEMORY[0x1E0C80C00];
  if (!cf)
  {
    v74 = &off_1E69A0F60;
    cfa = 0;
    goto LABEL_92;
  }
  CFRetain(cf);
  v74 = &off_1E69A0F60;
  cfa = v2;
  EngineInfoForDeviceUID = HALS_IOContextDescription::GetEngineInfoForDeviceUID(this, (CFStringRef)v2);
  v2 = (char *)EngineInfoForDeviceUID;
  if (!EngineInfoForDeviceUID)
  {
    v70 = 0;
    v71 = 0;
    HALS_System::GetInstance(&v72, 0, &v70);
    v9 = (const __CFString *)cfa;
    v10 = HALS_System::CopyDeviceByUID(v72, (const __CFString *)cfa, 0);
    v11 = v10;
    if (!v10 || (v13 = (HALS_ObjectMap *)HALS_IODevice::CopyIOEngine(v10)) == 0)
    {
      *(_QWORD *)v76 = 0;
      v77 = 0;
      HALS_System::GetInstance(buf, 0, (uint64_t *)v76);
      v15 = (HALS_ObjectMap *)HALS_System::CopyTapByUUID(*(HALS_System **)buf, v9);
      v16 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = v77;
      if (v77)
      {
        p_shared_owners = (unint64_t *)&v77->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (v15)
      {
        v22 = (HALS_MultiTap *)*((_QWORD *)v15 + 31);
        v23 = (std::__shared_weak_count *)*((_QWORD *)v15 + 32);
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          v13 = (HALS_ObjectMap *)HALS_MultiTap::copy_engine(v22);
          do
            v26 = __ldaxr(v24);
          while (__stlxr(v26 - 1, v24));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        else
        {
          v13 = (HALS_ObjectMap *)HALS_MultiTap::copy_engine(v22);
        }
      }
      else
      {
        v13 = 0;
      }
      HALS_ObjectMap::ReleaseObject(v15, v14);
    }
    HALS_ObjectMap::ReleaseObject(v11, v12);
    v28 = v73;
    if (v73)
    {
      v29 = (unint64_t *)&v73->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = v71;
    if (!v71)
      goto LABEL_47;
    v32 = (unint64_t *)&v71->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      if (!v13)
      {
LABEL_48:
        v68 = 0;
        v69 = 0;
        HALS_System::GetInstance(buf, 0, &v68);
        v35 = HALS_System::CopyClockDeviceByUID(*(HALS_System **)buf, (const __CFString *)cfa, v34);
        v37 = v35;
        if (v35)
          v13 = (HALS_ObjectMap *)HALS_IODevice::CopyIOEngine(v35);
        else
          v13 = 0;
        HALS_ObjectMap::ReleaseObject(v37, v36);
        v38 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v39 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v41 = v69;
        if (v69)
        {
          v42 = (unint64_t *)&v69->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        if (!v13)
        {
          v2 = 0;
          goto LABEL_92;
        }
      }
    }
    else
    {
LABEL_47:
      if (!v13)
        goto LABEL_48;
    }
    v2 = (char *)operator new();
    bzero(v2 + 16, 0x350uLL);
    *((_OWORD *)v2 + 2) = 0u;
    v2[24] = 1;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 12) = 0u;
    *((_OWORD *)v2 + 13) = 0u;
    *((_OWORD *)v2 + 14) = 0u;
    *((_OWORD *)v2 + 15) = 0u;
    *((_OWORD *)v2 + 16) = 0u;
    *((_OWORD *)v2 + 17) = 0u;
    *((_QWORD *)v2 + 36) = 0;
    v2[296] = 1;
    *(_OWORD *)(v2 + 300) = 0u;
    *(_OWORD *)(v2 + 316) = 0u;
    *(_OWORD *)(v2 + 332) = 0u;
    *(_QWORD *)(v2 + 348) = 0;
    *(_OWORD *)(v2 + 360) = 0u;
    *(_OWORD *)(v2 + 376) = 0u;
    *(_OWORD *)(v2 + 392) = 0u;
    *(_OWORD *)(v2 + 408) = 0u;
    *((_OWORD *)v2 + 40) = 0u;
    *((_OWORD *)v2 + 41) = 0u;
    *(_OWORD *)(v2 + 668) = 0u;
    *((_QWORD *)v2 + 86) = 0x3FF0000000000000;
    *(_OWORD *)(v2 + 696) = 0u;
    *(_OWORD *)(v2 + 712) = 0u;
    *(_OWORD *)(v2 + 728) = 0u;
    *(_OWORD *)(v2 + 744) = 0u;
    *(_DWORD *)(v2 + 759) = 0;
    *((_DWORD *)v2 + 195) = 1918990199;
    *(_OWORD *)(v2 + 792) = 0u;
    *(_OWORD *)(v2 + 808) = 0u;
    *(_OWORD *)(v2 + 824) = 0u;
    *(_OWORD *)(v2 + 840) = 0u;
    *((_DWORD *)v2 + 104) = 3;
    *((_OWORD *)v2 + 28) = 0u;
    *((_OWORD *)v2 + 29) = 0u;
    *((_OWORD *)v2 + 30) = 0u;
    *((_OWORD *)v2 + 31) = 0u;
    *((_OWORD *)v2 + 32) = 0u;
    *((_OWORD *)v2 + 33) = 0u;
    *((_OWORD *)v2 + 34) = 0u;
    *((_OWORD *)v2 + 35) = 0u;
    *((_OWORD *)v2 + 36) = 0u;
    *((_OWORD *)v2 + 37) = 0u;
    *((_OWORD *)v2 + 38) = 0u;
    *((_OWORD *)v2 + 39) = 0u;
    *((_DWORD *)v2 + 212) = 3;
    *(_QWORD *)v2 = &off_1E6996958;
    *((_QWORD *)v2 + 1) = v13;
    *((_DWORD *)v2 + 214) = *((_DWORD *)this + 111);
    HALS_ObjectMap::RetainObject(v13, v44);
    HALS_ObjectMap::ReleaseObject(v13, v45);
    CACFString::operator=((uint64_t)(v2 + 16), cfa);
    *(_DWORD *)v76 = 256;
    CACFString::GetCString(*((const __CFString **)v2 + 2), (__CFString *)v2 + 1, v76, v46);
    v47 = *((_QWORD *)v2 + 1);
    if (v47)
    {
      v48 = *(_DWORD *)(v47 + 16);
      v49 = operator new();
      v50 = *((_DWORD *)this + 110);
      std::string::basic_string[abi:ne180100]<0>(buf, v2 + 32);
      HALS_IOClock::HALS_IOClock(v49, v50, v48, (__int128 *)buf);
      if (v79 < 0)
        operator delete(*(void **)buf);
      v51 = *((_QWORD *)v2 + 36);
      *((_QWORD *)v2 + 36) = v49;
      if (v51)
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
      UpdateEngineInfoCache((HALS_IOEngineInfo *)v2, *((unsigned int *)this + 111));
    }
    *((_DWORD *)v2 + 186) = 1;
    v2[860] = 0;
    v2[749] = (*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v13 + 848))(v13);
    v53 = (_QWORD *)*((_QWORD *)this + 5);
    v52 = *((_QWORD *)this + 6);
    if ((unint64_t)v53 >= v52)
    {
      v55 = (_QWORD *)*((_QWORD *)this + 4);
      v56 = v53 - v55;
      v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v58 = v52 - (_QWORD)v55;
      if (v58 >> 2 > v57)
        v57 = v58 >> 2;
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
        v59 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v59 = v57;
      if (v59)
      {
        if (v59 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v60 = (char *)operator new(8 * v59);
      }
      else
      {
        v60 = 0;
      }
      v61 = &v60[8 * v56];
      v62 = &v60[8 * v59];
      *(_QWORD *)v61 = v2;
      v54 = v61 + 8;
      if (v53 == v55)
      {
        *((_QWORD *)this + 4) = v61;
        *((_QWORD *)this + 5) = v54;
        *((_QWORD *)this + 6) = v62;
      }
      else
      {
        do
        {
          v63 = *--v53;
          *v53 = 0;
          *((_QWORD *)v61 - 1) = v63;
          v61 -= 8;
        }
        while (v53 != v55);
        v53 = (_QWORD *)*((_QWORD *)this + 4);
        v64 = (_QWORD *)*((_QWORD *)this + 5);
        *((_QWORD *)this + 4) = v61;
        *((_QWORD *)this + 5) = v54;
        *((_QWORD *)this + 6) = v62;
        while (v64 != v53)
        {
          v66 = *--v64;
          v65 = v66;
          *v64 = 0;
          if (v66)
            (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
        }
      }
      if (v53)
        operator delete(v53);
    }
    else
    {
      *v53 = v2;
      v54 = v53 + 1;
    }
    *((_QWORD *)this + 5) = v54;
    goto LABEL_92;
  }
  if (!*(_DWORD *)(EngineInfoForDeviceUID + 744))
  {
    v5 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 110));
    if (v5)
    {
      v6 = *((unsigned int *)v2 + 214);
      v7 = *((unsigned int *)this + 111);
      if ((_DWORD)v6 == (_DWORD)v7)
      {
LABEL_34:
        UpdateEngineInfoCache((HALS_IOEngineInfo *)v2, v6);
        *((_DWORD *)v2 + 186) = 1;
        HALS_ObjectMap::ReleaseObject(v5, v27);
        goto LABEL_92;
      }
      v8 = *((_QWORD *)v2 + 1);
      if (v8 && v2[860])
      {
        (*(void (**)(uint64_t, HALS_ObjectMap *))(*(_QWORD *)v8 + 208))(v8, v5);
        v7 = *((unsigned int *)this + 111);
      }
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_IOContextDescription.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 430;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContextDescription::SetFromCFRepresentation_MakeEngineInfo: IOContextDescription has outlived owning IOContext", buf, 0x12u);
      }
      v6 = *((unsigned int *)v2 + 214);
      v7 = *((unsigned int *)this + 111);
      if ((_DWORD)v6 == (_DWORD)v7)
        goto LABEL_34;
    }
    v2[860] = 0;
    v6 = v7;
    goto LABEL_34;
  }
LABEL_92:
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v74);
  return v2;
}

void sub_1B5BF41F4(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  HALS_ObjectMap *v24;

  HALS_ObjectMap::ReleaseObject(v24, a2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a15);
  _Unwind_Resume(a1);
}

void HALS_IOContextDescription::SetFromCFRepresentation_UpdateEngineInfo(HALS_IOContextDescription *this, CFDictionaryRef theDict, const __CFDictionary *a3, HALS_IOEngineInfo *a4)
{
  const __CFDictionary *v5;
  unsigned int v6;
  BOOL v7;
  _BOOL4 v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  char *v15;
  int v16;
  uint64_t v17;
  OS::CF::Boolean *v18;
  void (**v19)(OS::CF::Dictionary *__hidden);
  CFDictionaryRef theDicta;

  v5 = theDict;
  v6 = this;
  if (theDict)
    CFRetain(theDict);
  v19 = &off_1E69A0DE0;
  theDicta = v5;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&v17, v5, CFSTR("synch padding"));
  v7 = OS::CF::Boolean::AsBool(v18, 1);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v17);
  *((_BYTE *)a3 + 296) = v7;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&v17, v5, CFSTR("drift"));
  v8 = OS::CF::Boolean::AsBool(v18, 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v17);
  v9 = *((_QWORD *)a3 + 1);
  if (v9)
  {
    if (v8)
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 456))(v9) ^ 1;
      v5 = theDicta;
    }
    else
    {
      v10 = 0;
    }
    *((_BYTE *)a3 + 297) = v10;
  }
  else
  {
    *((_BYTE *)a3 + 297) = v8;
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v17, v5, CFSTR("drift algorithm"));
  v11 = OS::CF::Number::GetValue<unsigned int>(v18, 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v17);
  *((_DWORD *)a3 + 75) = v11;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v17, theDicta, CFSTR("drift quality"));
  v12 = OS::CF::Number::GetValue<unsigned int>(v18, 64);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v17);
  v13 = *((_DWORD *)a3 + 76);
  if (v13 <= v12)
    v13 = v12;
  *((_DWORD *)a3 + 76) = v13;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v17, theDicta, CFSTR("extra latency"));
  v14 = OS::CF::Number::GetValue<int>(v18, 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v17);
  v15 = (char *)a3 + 4 * v6;
  v16 = *((_DWORD *)v15 + 82);
  if (v16 <= v14)
    v16 = v14;
  *((_DWORD *)v15 + 82) = v16;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v19);
}

void sub_1B5BF44B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  _Unwind_Resume(a1);
}

void HALS_IOStreamInfo::HALS_IOStreamInfo(HALS_IOStreamInfo *this)
{
  std::vector<char>::value_type __x;
  std::vector<char>::value_type v3;

  *(_QWORD *)this = &off_1E69A0E78;
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_BYTE *)this + 68) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_QWORD *)((char *)this + 20) = 0;
  *(_QWORD *)((char *)this + 12) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = (char *)this + 144;
  *((_BYTE *)this + 160) = 0;
  *((_BYTE *)this + 164) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 21) = (char *)this + 176;
  *((_BYTE *)this + 212) = 0;
  *((_BYTE *)this + 224) = 0;
  *((_BYTE *)this + 248) = 0;
  *((_WORD *)this + 128) = 0;
  *((_DWORD *)this + 65) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_BYTE *)this + 208) = 0;
  __x = 0;
  std::vector<char>::vector((std::vector<char> *)this + 11, 8uLL, &__x);
  **((_DWORD **)this + 33) = 0;
  v3 = 0;
  std::vector<char>::vector((std::vector<char> *)this + 12, 0x18uLL, &v3);
  **((_DWORD **)this + 36) = 1;
  *((_BYTE *)this + 312) = 0;
  *((_BYTE *)this + 352) = 0;
  *((_BYTE *)this + 360) = 0;
  *((_BYTE *)this + 364) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_BYTE *)this + 416) = 0;
}

void sub_1B5BF45E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v5 = v3;
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 272) = v7;
    operator delete(v7);
  }
  if (*(_BYTE *)(v1 + 248))
  {
    v8 = *(void **)(v1 + 224);
    if (v8)
    {
      *(_QWORD *)(v1 + 232) = v8;
      operator delete(v8);
    }
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(v1 + 176));
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(v1 + 144));
  v9 = *(void **)(v1 + 112);
  if (v9)
  {
    *(_QWORD *)(v1 + 120) = v9;
    operator delete(v9);
  }
  v10 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 80) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_IOStreamGroup::push_back(HALS_IOStreamGroup *this, HALS_IOStreamInfo *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;

  v4 = (char *)this + 16;
  v5 = *((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 1);
  if (v6 >= v5)
  {
    v9 = 0x21CFB2B78C13521DLL * ((uint64_t)(v6 - *(_QWORD *)this) >> 3);
    if ((unint64_t)(v9 + 1) > 0x9A90E7D95BC609)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v10 = 0x21CFB2B78C13521DLL * ((uint64_t)(v5 - *(_QWORD *)this) >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x4D4873ECADE304)
      v12 = 0x9A90E7D95BC609;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HALS_IOStreamInfo>>(v12);
    else
      v13 = 0;
    v14 = v12;
    v15 = v12 + 424 * v9;
    v17 = v12 + 424 * v13;
    std::construct_at[abi:ne180100]<HALS_IOStreamInfo,HALS_IOStreamInfo const&,HALS_IOStreamInfo*>(v15, (uint64_t)a2);
    v16 = v15 + 424;
    std::vector<HALS_IOStreamInfo>::__swap_out_circular_buffer((uint64_t *)this, &v14);
    v8 = *((_QWORD *)this + 1);
    result = std::__split_buffer<HALS_IOStreamInfo>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    result = std::construct_at[abi:ne180100]<HALS_IOStreamInfo,HALS_IOStreamInfo const&,HALS_IOStreamInfo*>(*((_QWORD *)this + 1), (uint64_t)a2);
    v8 = v6 + 424;
    *((_QWORD *)this + 1) = v6 + 424;
  }
  *((_QWORD *)this + 1) = v8;
  return result;
}

void sub_1B5BF4788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_QWORD *HALS_IOContextDescription::UpdateDSPStreamFormat(HALS_IOContextDescription *this, const AudioStreamBasicDescription *a2)
{
  char *v4;
  __int128 v5;
  _QWORD *result;
  uint64_t v7;
  __int128 v8;
  int v9;
  __int128 v10;
  char v11;
  _BYTE v12[44];
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v4 = (char *)operator new(0x38uLL);
  *(_QWORD *)v4 = &off_1E6997130;
  v5 = *(_OWORD *)&a2->mBytesPerPacket;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)&a2->mSampleRate;
  *(_OWORD *)(v4 + 24) = v5;
  *((_QWORD *)v4 + 5) = *(_QWORD *)&a2->mBitsPerChannel;
  *((_QWORD *)v4 + 6) = &v11;
  v14 = v4;
  HALS_IOContextDescription::DiscoverDSPStreams((uint64_t)this, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v7 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v7 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
LABEL_6:
  if (v11)
  {
    v8 = *(_OWORD *)&a2->mBytesPerPacket;
    *(_OWORD *)&v12[4] = *(_OWORD *)&a2->mSampleRate;
    *(_OWORD *)&v12[20] = v8;
    *(_QWORD *)&v12[36] = *(_QWORD *)&a2->mBitsPerChannel;
    v9 = *((unsigned __int8 *)this + 328);
    *((_DWORD *)this + 70) = 1;
    v10 = *(_OWORD *)&v12[16];
    *(_OWORD *)((char *)this + 284) = *(_OWORD *)v12;
    *(_OWORD *)((char *)this + 300) = v10;
    *(_OWORD *)((char *)this + 312) = *(_OWORD *)&v12[28];
    if (!v9)
      *((_BYTE *)this + 328) = 1;
  }
  return result;
}

void sub_1B5BF48B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<HALS_IOStreamGroup>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<HALS_IOStreamInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void HALS_IOContextDescription::DiscoverDSPStreams(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int DeviceIDFromEngineID;
  uint64_t v7;
  uint64_t v8;
  HALS_Object *v9;
  HALS_ObjectMap *v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  int v15;
  HALB_Mutex *v16;
  HALS_ObjectMap *v17;
  HALS_Object *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD **v21;
  BOOL v22;
  __int16 v24;
  _QWORD **v25;
  _QWORD *v26[2];
  _QWORD v27[6];
  int v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;

  if (*(_QWORD *)(a2 + 24))
  {
    v26[0] = 0;
    v26[1] = 0;
    v25 = v26;
    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v25, *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    while (v3 != v4)
    {
      v5 = *(_QWORD *)(*(_QWORD *)v3 + 8);
      if (v5)
      {
        DeviceIDFromEngineID = HALS_IOContextDescription::GetDeviceIDFromEngineID((HALS_IOContextDescription *)*(unsigned int *)(v5 + 16));
        if (DeviceIDFromEngineID)
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v25, DeviceIDFromEngineID, DeviceIDFromEngineID);
      }
      v3 += 8;
    }
    v7 = (uint64_t)v25;
    if (v25 != v26)
    {
      v8 = MEMORY[0x1E0C809B0];
      do
      {
        v10 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v7 + 28));
        if (v10)
        {
          v11 = 0;
          v12 = 0;
          v24 = 256;
          do
          {
            v13 = v11;
            v14 = *((_BYTE *)&v24 + v12);
            v15 = *(_DWORD *)(a1 + 444);
            v30 = 0;
            v31 = &v30;
            v32 = 0x2000000000;
            v33 = 0;
            v27[0] = v8;
            v27[1] = 0x40000000;
            v27[2] = ___ZNK11HALS_Device22CopyDSPStreamForClientEbj_block_invoke;
            v27[3] = &unk_1E699D830;
            v27[4] = &v30;
            v27[5] = v10;
            v29 = v14;
            v28 = v15;
            v16 = (HALB_Mutex *)(*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v10 + 56))(v10);
            HALB_CommandGate::ExecuteCommand(v16, (uint64_t)v27);
            v17 = (HALS_ObjectMap *)v31[3];
            _Block_object_dispose(&v30, 8);
            if (v17)
            {
              v27[0] = v17;
              v19 = *(_QWORD *)(a2 + 24);
              if (!v19)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v19 + 48))(v19, v27);
            }
            HALS_ObjectMap::ReleaseObject(v17, v18);
            v11 = 1;
            v12 = 1;
          }
          while ((v13 & 1) == 0);
        }
        HALS_ObjectMap::ReleaseObject(v10, v9);
        v20 = *(_QWORD **)(v7 + 8);
        if (v20)
        {
          do
          {
            v21 = (_QWORD **)v20;
            v20 = (_QWORD *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = *(_QWORD ***)(v7 + 16);
            v22 = *v21 == (_QWORD *)v7;
            v7 = (uint64_t)v21;
          }
          while (!v22);
        }
        v7 = (uint64_t)v21;
      }
      while (v21 != v26);
    }
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v26[0]);
  }
}

void sub_1B5BF4B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a13);
  _Unwind_Resume(a1);
}

void std::__function::__func<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0,std::allocator<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0>,void ()(HALS_DSPStream *)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0,std::allocator<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0>,void ()(HALS_DSPStream *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E6997130;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0,std::allocator<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0>,void ()(HALS_DSPStream *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E6997130;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0,std::allocator<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0>,void ()(HALS_DSPStream *)>::operator()(uint64_t a1, HALS_DSPStream **a2)
{
  HALS_DSPStream::SetCurrentPhysicalFormat(*a2, (const AudioStreamBasicDescription *)(a1 + 8));
  **(_BYTE **)(a1 + 48) = 1;
}

uint64_t std::__function::__func<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0,std::allocator<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0>,void ()(HALS_DSPStream *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription21UpdateDSPStreamFormatERK27AudioStreamBasicDescriptionE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0,std::allocator<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0>,void ()(HALS_DSPStream *)>::target_type()
{
}

BOOL OS::CF::Boolean::AsBool(OS::CF::Boolean *this, uint64_t a2)
{
  if (this)
    return CFBooleanGetValue(this) != 0;
  return a2;
}

uint64_t HALS_IOContextDescription::GetEngineInfoForDeviceUID(HALS_IOContextDescription *this, CFStringRef theString1)
{
  uint64_t v2;
  uint64_t v3;
  const __CFString *v6;

  v2 = *((_QWORD *)this + 4);
  v3 = *((_QWORD *)this + 5);
  if (v2 == v3)
    return 0;
  while (1)
  {
    v6 = *(const __CFString **)(*(_QWORD *)v2 + 16);
    if (v6)
    {
      if (CFStringCompare(theString1, v6, 0) == kCFCompareEqualTo)
        break;
    }
    v2 += 8;
    if (v2 == v3)
    {
      v2 = v3;
      break;
    }
  }
  if (v2 == *((_QWORD *)this + 5))
    return 0;
  else
    return *(_QWORD *)v2;
}

void UpdateEngineInfoCache(HALS_IOEngineInfo *a1, uint64_t a2)
{
  uint64_t v3;
  HALS_IODevice *v5;
  HALS_IODevice *v6;
  int TransportType;
  unsigned int *v8;
  HALS_Object *v9;
  HALS_ObjectMap *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  if (a1)
  {
    v3 = *((_QWORD *)a1 + 1);
    if (v3)
    {
      *((_DWORD *)a1 + 214) = a2;
      *((double *)a1 + 96) = (*(double (**)(uint64_t))(*(_QWORD *)v3 + 328))(v3);
      *((_DWORD *)a1 + 194) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 336))(*((_QWORD *)a1 + 1));
      *((_DWORD *)a1 + 195) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 360))(*((_QWORD *)a1 + 1));
      *((_BYTE *)a1 + 784) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 368))(*((_QWORD *)a1 + 1));
      *((_DWORD *)a1 + 77) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 384))(*((_QWORD *)a1 + 1));
      *((_DWORD *)a1 + 79) = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a1 + 1) + 344))(*((_QWORD *)a1 + 1), 1);
      *((_DWORD *)a1 + 78) = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 1) + 344))(*((_QWORD *)a1 + 1), 0);
      *((_BYTE *)a1 + 750) = (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a1 + 1) + 408))(*((_QWORD *)a1 + 1), 1, a2) != 0;
      *((_BYTE *)a1 + 751) = (*(unsigned int (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)a1 + 1) + 408))(*((_QWORD *)a1 + 1), 0, a2) != 0;
      *((_DWORD *)a1 + 188) = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a1 + 1) + 400))(*((_QWORD *)a1 + 1), 1);
      *((_DWORD *)a1 + 189) = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 1) + 400))(*((_QWORD *)a1 + 1), 0);
      v5 = (HALS_IODevice *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 320))(*((_QWORD *)a1 + 1));
      if (v5)
      {
        v6 = v5;
        TransportType = HALS_IODevice::GetTransportType(v5);
        *((_BYTE *)a1 + 760) = TransportType == 1651274862;
        if (TransportType == 1651274862 && (*((_BYTE *)a1 + 750) || *((_BYTE *)a1 + 751)))
        {
          v8 = (unsigned int *)(*(uint64_t (**)(HALS_IODevice *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 640))(v6, 1685287523, 1869968496, 0);
          v10 = (HALS_ObjectMap *)v8;
          if (v8)
          {
            v11 = v8[4];
            v12 = 0x676C6F6273636369;
            v13 = 0;
            v15 = 0;
            v14 = 0;
            (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, int *, int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 112))(v8, v11, &v12, 4, &v14, &v15, 0, 0, 0);
            *((_BYTE *)a1 + 761) = v15 == 1769173099;
          }
          HALS_ObjectMap::ReleaseObject(v10, v9);
        }
      }
    }
  }
}

void sub_1B5BF4F6C(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IsolatedUseCaseID_FromDescription(CFDictionaryRef theDict)
{
  HALS_ObjectMap *v1;
  uint64_t v2;
  HALS_Object *v3;
  HALS_ObjectMap *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFNumber *v10[2];

  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v10, theDict, CFSTR("device id"));
  v1 = (HALS_ObjectMap *)OS::CF::Number::GetValue<unsigned int>(v10[1], 0);
  v2 = HALS_ObjectMap::CopyObjectByObjectID(v1);
  v4 = (HALS_ObjectMap *)v2;
  if (v2)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 464))(v2);
    if ((v5 & 0xFF00000000) != 0)
      v6 = 0x100000000;
    else
      v6 = 0;
    if ((v5 & 0xFF00000000) != 0)
      v7 = v5;
    else
      v7 = 0;
    if ((v5 & 0xFF00000000) != 0)
      v8 = v5 & 0xFFFFFF00;
    else
      v8 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  HALS_ObjectMap::ReleaseObject(v4, v3);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v10);
  return v7 | v6 | v8;
}

void sub_1B5BF5030(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HALS_ObjectMap *v9;

  HALS_ObjectMap::ReleaseObject(v9, a2);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a9);
  _Unwind_Resume(a1);
}

void HALS_IOContextDescription::SetToEmpty(HALS_IOContextDescription *this)
{
  HALS_Object *v2;
  HALS_ObjectMap *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (***v15)(_QWORD);
  void (***v16)(_QWORD);
  void (***v17)(_QWORD);
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  HALS_Object *v22;
  HALS_Object *v23;
  _QWORD v24[5];
  HALS_ObjectMap *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _BYTE buf[12];
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 110));
  if (!v3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_IOContextDescription.cpp";
    v29 = 1024;
    v30 = 1062;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContextDescription::SetToEmpty: IOContextDescription has outlived owning IOContext", buf, 0x12u);
  }
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 1174405120;
  v24[2] = ___ZN25HALS_IOContextDescription10SetToEmptyEv_block_invoke;
  v24[3] = &__block_descriptor_tmp_54_12062;
  v24[4] = this;
  v25 = v3;
  HALS_ObjectMap::RetainObject(v3, v2);
  v27 = 0;
  v26[0] = &off_1E69968C8;
  v26[1] = _Block_copy(v24);
  v27 = v26;
  HALS_IOEngineInfoList::engine_apply<>((uint64_t *)this + 4, (uint64_t)v26);
  v9 = v27;
  if (v27 == v26)
  {
    v10 = 4;
    v9 = v26;
    goto LABEL_8;
  }
  if (v27)
  {
    v10 = 5;
LABEL_8:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v9 + 8 * v10))(v9, v4, v5, v6, v7, v8);
  }
  *((_QWORD *)this + 3) = 0;
  v11 = (_QWORD *)*((_QWORD *)this + 4);
  v12 = (_QWORD *)*((_QWORD *)this + 5);
  while (v12 != v11)
  {
    v14 = *--v12;
    v13 = v14;
    *v12 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  *((_QWORD *)this + 5) = v11;
  v16 = (void (***)(_QWORD))*((_QWORD *)this + 7);
  v15 = (void (***)(_QWORD))*((_QWORD *)this + 8);
  if (v15 != v16)
  {
    v17 = v15 - 53;
    do
    {
      (**v17)(v17);
      v18 = v17 == v16;
      v17 -= 53;
    }
    while (!v18);
  }
  *((_QWORD *)this + 8) = v16;
  v20 = *((_QWORD *)this + 10);
  v19 = *((_QWORD *)this + 11);
  if (v19 != v20)
  {
    do
    {
      v21 = v19 - 32;
      *(_QWORD *)buf = v19 - 24;
      std::vector<HALS_IOStreamGroup>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      v19 = v21;
    }
    while (v21 != v20);
  }
  *((_QWORD *)this + 11) = v20;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 14) = 0;
  HALS_IOContextDescription::CalculateEngineSynchOffsets(this);
  *((_WORD *)this + 108) = 0;
  *((_BYTE *)this + 218) = 0;
  *((_DWORD *)this + 55) = 0;
  if (v3)
    (*(void (**)(_QWORD *))(**((_QWORD **)v3 + 12) + 208))(*((_QWORD **)v3 + 12));
  HALS_ObjectMap::ReleaseObject(v25, v22);
  HALS_ObjectMap::ReleaseObject(v3, v23);
}

void sub_1B5BF5294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, HALS_ObjectMap *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *HALS_IOContextDescription::PushStreamUsageToEngines(HALS_IOContextDescription *this, char a2)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD aBlock[5];
  char v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN25HALS_IOContextDescription24PushStreamUsageToEnginesEb_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_55_12055;
  aBlock[4] = this;
  v6 = a2;
  v7[0] = &off_1E69968C8;
  v7[1] = _Block_copy(aBlock);
  v8 = v7;
  HALS_IOEngineInfoList::engine_apply<>((uint64_t *)this + 4, (uint64_t)v7);
  result = v8;
  if (v8 == v7)
  {
    v4 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1B5BF5408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v20;
  uint64_t v21;

  v20 = a19;
  if (a19 == &a16)
  {
    v21 = 4;
    v20 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *HALS_IOContextDescription::CalculateEngineSynchOffsets(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t *i;
  uint64_t v18;
  uint64_t v19;
  double v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  _DWORD *v33;
  char v34;
  uint64_t v35;
  char v36;
  char v37;
  _DWORD *v38;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x1E0C80C00];
  v1 = this[3];
  if (v1)
  {
    v2 = this;
    this = *(_QWORD **)(v1 + 8);
    if (this)
    {
      if (v2[4] != v2[5])
      {
        v39[0] = 0;
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 328))(this);
        v4 = v2[4];
        v5 = v2[5];
        if (v4 != v5)
        {
          v6 = v3;
          do
          {
            this = *(_QWORD **)(*(_QWORD *)v4 + 8);
            if (this && *(_BYTE *)(*(_QWORD *)v4 + 296))
            {
              v7 = (*(double (**)(_QWORD *))(*this + 328))(this);
              v8 = 0;
              v9 = 0;
              v10 = 1;
              do
              {
                v11 = v10;
                v12 = v8 & 1;
                v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v4 + 8) + 352))(*(_QWORD *)(*(_QWORD *)v4 + 8), v12);
                this = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v4 + 8) + 344))(*(_QWORD *)(*(_QWORD *)v4 + 8), v12);
                v10 = 0;
                v14 = (_DWORD)this + v13;
                v15 = vcvtad_u64_f64(v6 / v7 * (double)((_DWORD)this + v13));
                if (v7 != v6)
                  v14 = v15;
                if (*((_DWORD *)v39 + v9) > v14)
                  v14 = *((_DWORD *)v39 + v9);
                *((_DWORD *)v39 + v9) = v14;
                v8 = 1;
                v9 = 1;
              }
              while ((v11 & 1) != 0);
            }
            v4 += 8;
          }
          while (v4 != v5);
          v16 = (uint64_t *)v2[4];
          for (i = (uint64_t *)v2[5]; v16 != i; ++v16)
          {
            v18 = *v16;
            v19 = *(_QWORD *)(*v16 + 8);
            if (v19 && *(_BYTE *)(v18 + 296))
            {
              v20 = (*(double (**)(uint64_t))(*(_QWORD *)v19 + 328))(v19);
              v21 = 0;
              v22 = 0;
              v23 = *v16;
              v24 = 1;
              do
              {
                v25 = v24;
                v26 = v21 & 1;
                v27 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v23 + 8) + 352))(*(_QWORD *)(v23 + 8), v26);
                v28 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*v16 + 8) + 344))(*(_QWORD *)(*v16 + 8), v26);
                v29 = *v16;
                *(_DWORD *)(*v16 + 4 * v22 + 312) = v28;
                if (v20 == v6)
                  v30 = *((_DWORD *)v39 + v22) - v27 - v28;
                else
                  v30 = (v20
                                     / v6
                                     * (double)(*((_DWORD *)v39 + v22)
                                              - vcvtad_u64_f64(v6 / v20 * (double)(v28 + v27))));
                this = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v29 + 8) + 336))(*(_QWORD *)(v29 + 8));
                v23 = *v16;
                v31 = *(_DWORD *)(*v16 + 4 * v22 + 328);
                if ((_DWORD)this && (v32 = v31 + v30, v31 + v30 >= this >> 2))
                {
                  v31 = 0;
                  v30 = 0;
                }
                else
                {
                  v32 = 0;
                }
                v24 = 0;
                v33 = (_DWORD *)(v23 + 4 * v22);
                v33[80] = v31;
                v33[84] = v30;
                v33[86] = v32;
                v21 = 1;
                v22 = 1;
              }
              while ((v25 & 1) != 0);
            }
            else
            {
              v34 = 0;
              v35 = 0;
              v36 = 1;
              do
              {
                v37 = v36;
                this = *(_QWORD **)(v18 + 8);
                if (this)
                {
                  this = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*this + 344))(this, v34 & 1);
                  v18 = *v16;
                }
                v36 = 0;
                v38 = (_DWORD *)(v18 + 4 * v35);
                v38[78] = (_DWORD)this;
                v38[80] = v38[82];
                v38[84] = 0;
                v38[86] = 0;
                v34 = 1;
                v35 = 1;
              }
              while ((v37 & 1) != 0);
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t ___ZN25HALS_IOContextDescription24PushStreamUsageToEnginesEb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  int v53;
  char v54;
  int v55;
  uint64_t v56;
  int v57;
  char v58;
  int v59;
  _QWORD block[5];
  int v62;
  int v63;
  int v64;
  char v65;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (*(_BYTE *)(a1 + 40))
    {
      v7 = *(_QWORD *)(v5 + 80);
      v6 = *(_QWORD *)(v5 + 88);
      if (v6 == v7)
      {
LABEL_23:
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 496))(v3))
          *(_BYTE *)(a2 + 748) = 1;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        while (1)
        {
          v10 = v7 + 32 * v8;
          v12 = *(_QWORD *)(v10 + 8);
          v11 = *(_QWORD *)(v10 + 16);
          v13 = (uint64_t *)(v10 + 8);
          if (v11 != v12)
            break;
LABEL_21:
          v8 = (v9 + 1);
          v9 = v8;
          if (v8 >= (v6 - v7) >> 5)
          {
            v3 = *(_QWORD *)(a2 + 8);
            goto LABEL_23;
          }
        }
        v14 = 0;
        v15 = 0;
        while (1)
        {
          v16 = (uint64_t *)(v12 + 24 * v14);
          v17 = *v16;
          v18 = v16[1];
          if (*v16 != v18)
            break;
LABEL_19:
          v14 = ++v15;
          if (0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3) <= v15)
          {
            v7 = *(_QWORD *)(v5 + 80);
            v6 = *(_QWORD *)(v5 + 88);
            goto LABEL_21;
          }
        }
        while (1)
        {
          if (!*(_DWORD *)(v17 + 108)
            || ((v19 = *(_QWORD *)(v17 + 112), *(_QWORD *)(v17 + 120) != v19) ? (v20 = v19 == 0) : (v20 = 1), v20))
          {
            v19 = v17 + 408;
          }
          if (*(_QWORD *)(*(_QWORD *)v19 + 8) == *(_QWORD *)(a2 + 8)
            && ((*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v5 + 16))(v5, 0, v9) & 1) != 0)
          {
            break;
          }
          v17 += 424;
          if (v17 == v18)
          {
            v12 = *v13;
            v11 = v13[1];
            goto LABEL_19;
          }
        }
      }
    }
    if (*(_BYTE *)(a1 + 40))
      v21 = (unsigned int *)(a2 + 752);
    else
      v21 = (unsigned int *)(a2 + 756);
    v22 = *v21;
    if ((_DWORD)v22)
    {
      v23 = operator new[]();
      for (i = 0; i != v22; ++i)
      {
        *(_BYTE *)(v23 + i) = 0;
        if (*(_BYTE *)(a1 + 40))
        {
          v25 = *(_QWORD *)(v5 + 56);
          if (*(_QWORD *)(v5 + 64) == v25)
            continue;
          v26 = 0;
          v27 = 0;
          while (1)
          {
            if (*(_DWORD *)(v25 + 424 * v26 + 108))
            {
              v28 = v25 + 424 * v26;
              v29 = *(_DWORD **)(v28 + 112);
              v30 = *(_DWORD **)(v28 + 120);
              if (v29 != v30)
              {
                while (1)
                {
                  if (*(_QWORD *)v29)
                  {
                    if (*(_QWORD *)(*(_QWORD *)v29 + 8) == *(_QWORD *)(a2 + 8) && i == v29[24])
                      break;
                  }
                  v29 += 32;
                  if (v29 == v30)
                    goto LABEL_46;
                }
                v36 = (*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v5 + 16))(v5, *(unsigned __int8 *)(a1 + 40), v27);
                *(_BYTE *)(v23 + i) = v36;
                if (v36
                  && ((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 488))(*(_QWORD *)(a2 + 8), 1, i) & 1) == 0)
                {
                  *(_BYTE *)(a2 + 748) = 0;
                }
              }
            }
            else
            {
              v32 = v25 + 424 * v26;
              v33 = *(_QWORD *)(*(_QWORD *)(v32 + 408) + 8);
              v34 = *(unsigned int *)(v32 + 12);
              if (v33 == *(_QWORD *)(a2 + 8) && i == v34)
              {
                v55 = (*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v5 + 16))(v5, *(unsigned __int8 *)(a1 + 40), v27);
                *(_BYTE *)(v23 + i) = v55;
                if (v55)
                {
                  v54 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 488))(*(_QWORD *)(a2 + 8), 1, i);
                  goto LABEL_76;
                }
                goto LABEL_78;
              }
            }
LABEL_46:
            v26 = (v27 + 1);
            v25 = *(_QWORD *)(v5 + 56);
            v27 = v26;
            if (0x21CFB2B78C13521DLL * ((*(_QWORD *)(v5 + 64) - v25) >> 3) <= v26)
              goto LABEL_78;
          }
        }
        v37 = *(_QWORD *)(v5 + 80);
        v38 = *(_QWORD *)(v5 + 88);
        if (v38 == v37)
          continue;
        v39 = 0;
        v40 = 0;
        while (1)
        {
          v42 = (uint64_t *)(v37 + 32 * v39 + 8);
          v41 = *v42;
          v43 = v42[1] - *v42;
          if (v43)
            break;
LABEL_70:
          v39 = (v40 + 1);
          v40 = v39;
          if ((v38 - v37) >> 5 <= v39)
            goto LABEL_78;
        }
        v44 = 0;
        v45 = 0;
        v46 = 0xAAAAAAAAAAAAAAABLL * (v43 >> 3);
LABEL_55:
        v47 = (uint64_t *)(v41 + 24 * v44);
        v48 = *v47;
        v49 = v47[1];
        while (1)
        {
          if (v48 == v49)
          {
            v44 = ++v45;
            if (v46 > v45)
              goto LABEL_55;
            goto LABEL_70;
          }
          if (!*(_DWORD *)(v48 + 108)
            || ((v50 = *(_QWORD *)(v48 + 112), *(_QWORD *)(v48 + 120) != v50) ? (v51 = v50 == 0) : (v51 = 1), v51))
          {
            v50 = v48 + 408;
          }
          if (*(_QWORD *)(*(_QWORD *)v50 + 8) == *(_QWORD *)(a2 + 8) && i == *(_DWORD *)(v48 + 12))
            break;
          v48 += 424;
        }
        v53 = (*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v5 + 16))(v5, 0, v40);
        *(_BYTE *)(v23 + i) = v53;
        if (v53)
        {
          v54 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 488))(*(_QWORD *)(a2 + 8), 0, i);
LABEL_76:
          if ((v54 & 1) == 0)
            *(_BYTE *)(a2 + 748) = 0;
        }
LABEL_78:
        ;
      }
      v56 = *(_QWORD *)(a2 + 8);
      v57 = *(_DWORD *)(v5 + 440);
      v58 = *(_BYTE *)(a1 + 40);
      v59 = *(_DWORD *)(v56 + 16);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = ___ZN13HALS_IOEngine28DeferSetIOContextStreamUsageEjbjPb_block_invoke;
      block[3] = &__block_descriptor_tmp_2;
      v62 = v59;
      v63 = v57;
      v65 = v58;
      v64 = v22;
      block[4] = v23;
      LOBYTE(v57) = atomic_load((unsigned __int8 *)(v56 + 96));
      if ((v57 & 1) != 0)
        atomic_store(1u, (unsigned __int8 *)(v56 + 97));
      dispatch_async(*(dispatch_queue_t *)(v56 + 64), block);
    }
  }
  return 0;
}

void sub_1B5BF5B88(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5BF5B64);
}

uint64_t ___ZN25HALS_IOContextDescription10SetToEmptyEv_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  HALS_ObjectMap *v12;
  HALS_Object *v13;

  v4 = *(_QWORD **)(a2 + 728);
  v5 = *(_QWORD **)(a2 + 720);
  while (v4 != v5)
  {
    v7 = *--v4;
    v6 = v7;
    *v4 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  *(_QWORD *)(a2 + 728) = v5;
  v8 = *(_QWORD **)(a2 + 704);
  v9 = *(_QWORD **)(a2 + 696);
  while (v8 != v9)
  {
    v11 = *--v8;
    v10 = v11;
    *v8 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  *(_QWORD *)(a2 + 704) = v9;
  v12 = *(HALS_ObjectMap **)(a2 + 8);
  if (v12)
  {
    v13 = *(HALS_Object **)(a1 + 40);
    if (v13 && *(_BYTE *)(a2 + 860))
    {
      (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v12 + 208))(v12);
      v12 = *(HALS_ObjectMap **)(a2 + 8);
    }
    *(_BYTE *)(a2 + 860) = 0;
    HALS_ObjectMap::ReleaseObject_LongTerm(v12, v13);
    *(_QWORD *)(a2 + 8) = 0;
  }
  return 0;
}

void __copy_helper_block_e8_40c37_ZTS13HALS_ReleaserI14HALS_IOContextE(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  v2 = (HALS_ObjectMap *)*((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 40) = v2;
  HALS_ObjectMap::RetainObject(v2, a2);
}

void __destroy_helper_block_e8_40c37_ZTS13HALS_ReleaserI14HALS_IOContextE(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 40), a2);
}

_QWORD *HALS_IOContextDescription::UpdateInputStreamVisibility(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = this[4];
  v2 = this[5];
  if (v1 != v2)
  {
    v3 = this;
    do
    {
      this = *(_QWORD **)(*(_QWORD *)v1 + 8);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*this + 408))(this, 1, *((unsigned int *)v3 + 111));
        *(_BYTE *)(*(_QWORD *)v1 + 750) = (_DWORD)this != 0;
      }
      v1 += 8;
    }
    while (v1 != v2);
  }
  return this;
}

uint64_t HALS_IOContextDescription::SetFromCFRepresentation_ProcessDSPTypes(__CFDictionary const*)::$_0::operator()(unsigned int *a1)
{
  unsigned int v2;
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v5;
  _QWORD **v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v14[3];
  uint64_t v15[3];
  uint64_t v16;
  _QWORD *v17[2];
  _BYTE buf[32];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  *(_OWORD *)buf = xmmword_1B5D68E10;
  std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](&v16, (unsigned int *)buf, 4);
  *(_QWORD *)buf = 0x900000001;
  *(_DWORD *)&buf[8] = 8;
  std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v15, (unsigned int *)buf, 3);
  *(_OWORD *)buf = xmmword_1B5D594A4;
  *(_OWORD *)&buf[16] = unk_1B5D594B4;
  std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v14, (unsigned int *)buf, 8);
  v3 = v17[0];
  if (!v17[0])
    goto LABEL_10;
  v4 = v17;
  do
  {
    v5 = v3;
    v6 = v4;
    v7 = *((_DWORD *)v3 + 7);
    v8 = v3 + 1;
    if (v7 >= v2)
    {
      v8 = v5;
      v4 = (_QWORD **)v5;
    }
    v3 = (_QWORD *)*v8;
  }
  while (v3);
  if (v4 == v17)
    goto LABEL_10;
  if (v7 < v2)
    v5 = v6;
  if (*((_DWORD *)v5 + 7) > v2)
LABEL_10:
    v4 = v17;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v14[1]);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v15[1]);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v17[0]);
  if (v4 == v17)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_IOContextDescription.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 582;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  [hal_dsp] Processing type is not supported on this platform", buf, 0x12u);
    }
    v12 = 0;
    v11 = 0;
    v10 = 0;
  }
  else
  {
    v9 = *a1;
    if (HALS_IOContextDescription::SetFromCFRepresentation_ProcessDSPTypes(__CFDictionary const*)::isAppleInternal
      || v9 != 2)
    {
      v10 = v9 & 0xFFFFFF00;
      v12 = *a1;
      v11 = 0x100000000;
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_IOContextDescription.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 592;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  [hal_dsp] Vocal Isolation Conferencing mode is unsupported", buf, 0x12u);
      }
      v10 = 0;
      v11 = 0x100000000;
      v12 = 3;
    }
  }
  return v11 | v10 | v12;
}

void sub_1B5BF5F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a14);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a17);
  _Unwind_Resume(a1);
}

void HALS_IOContextDescription::CalculateMaximumIOBufferFrameSize(HALS_IOContextDescription *this)
{
  uint64_t v1;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  double v11;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 328))(v3);
      v5 = *((_QWORD *)this + 4);
      v6 = *((_QWORD *)this + 5);
      if (v5 != v6)
      {
        v7 = v4;
        v8 = -1;
        do
        {
          v9 = *(_QWORD *)(*(_QWORD *)v5 + 8);
          if (v9)
          {
            v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 336))(v9);
            v11 = (*(double (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v5 + 8) + 328))(*(_QWORD *)(*(_QWORD *)v5 + 8));
            if (v11 != v7)
              v10 = (v7 / v11 * (double)v10);
            if (v10 < v8)
              v8 = v10;
          }
          v5 += 8;
        }
        while (v5 != v6);
      }
    }
  }
}

_QWORD *HALS_IOContextDescription::PickMasterEngine(HALS_IOContextDescription *this)
{
  const __CFDictionary *v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t EngineInfoForDeviceUID;
  uint64_t *i;
  uint64_t v8;
  _BYTE v10[8];
  CFStringRef theString1;
  void (**v12)(OS::CF::Dictionary *__hidden);
  CFDictionaryRef theDict;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 3) = 0;
  v2 = (const __CFDictionary *)*((_QWORD *)this + 1);
  if (!v2)
    goto LABEL_9;
  CFRetain(*((CFTypeRef *)this + 1));
  v3 = 0;
  v4 = 0;
  v12 = &off_1E69A0DE0;
  theDict = v2;
  v14[0] = CFSTR("clock device uid");
  v14[1] = CFSTR("master uid");
  do
  {
    v5 = v3;
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v10, theDict, (void *)v14[v4]);
    if (theString1)
    {
      EngineInfoForDeviceUID = HALS_IOContextDescription::GetEngineInfoForDeviceUID(this, theString1);
      if (EngineInfoForDeviceUID)
      {
        if (*(_QWORD *)(EngineInfoForDeviceUID + 8))
          *((_QWORD *)this + 3) = EngineInfoForDeviceUID;
      }
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v10);
    v3 = 1;
    v4 = 1;
  }
  while ((v5 & 1) == 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v12);
  if (!*((_QWORD *)this + 3))
  {
LABEL_9:
    for (i = (uint64_t *)*((_QWORD *)this + 4); i != *((uint64_t **)this + 5); ++i)
    {
      v8 = *i;
      if (*i && *(_QWORD *)(v8 + 8))
      {
        *((_QWORD *)this + 3) = v8;
        return HALS_IOContextDescription::ForceDSPToUseMasterEngineSampleRate(this);
      }
    }
  }
  return HALS_IOContextDescription::ForceDSPToUseMasterEngineSampleRate(this);
}

void sub_1B5BF617C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *HALS_IOContextDescription::ForceDSPToUseMasterEngineSampleRate(HALS_IOContextDescription *this)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 3);
  v4[0] = &off_1E6997020;
  v4[1] = v1;
  v5 = v4;
  HALS_IOContextDescription::ApplyToInput((uint64_t)this, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1B5BF6248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContextDescription::ApplyToInput(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  _QWORD *v16;
  _BYTE v17[24];
  _BYTE *v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v19, a2);
  v3 = (uint64_t)v20;
  if (!v20)
    goto LABEL_4;
  if (v20 != v19)
  {
    v3 = (*(uint64_t (**)(_QWORD *))(*v20 + 16))(v20);
LABEL_4:
    v16 = (_QWORD *)v3;
    goto LABEL_6;
  }
  v16 = v15;
  (*(void (**)(_QWORD *, _QWORD *))(v19[0] + 24))(v19, v15);
LABEL_6:
  v18 = 0;
  v4 = operator new(0x28uLL);
  v5 = v4;
  *v4 = &off_1E6996AB8;
  if (!v16)
  {
    v6 = v4 + 4;
    goto LABEL_10;
  }
  if (v16 != v15)
  {
    v6 = &v16;
    v4[4] = v16;
LABEL_10:
    *v6 = 0;
    goto LABEL_12;
  }
  v4[4] = v4 + 1;
  (*(void (**)(_QWORD *))(v15[0] + 24))(v15);
LABEL_12:
  v18 = v5;
  v7 = HALS_IOContextDescription::ApplyToInput<>(a1, (uint64_t)v17);
  v8 = v18;
  if (v18 == v17)
  {
    v9 = 4;
    v8 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_17;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
  v10 = v16;
  if (v16 == v15)
  {
    v11 = 4;
    v10 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_22;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_22:
  v12 = v20;
  if (v20 == v19)
  {
    v13 = 4;
    v12 = v19;
    goto LABEL_26;
  }
  if (v20)
  {
    v13 = 5;
LABEL_26:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return v7;
}

void sub_1B5BF6428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<HALS_IOContextDescription::ApplyToInput(std::function<int ()(unsigned int,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOContextDescription::ApplyToInput(std::function<int ()(unsigned int,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6996AB8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<HALS_IOContextDescription::ApplyToInput(std::function<int ()(unsigned int,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOContextDescription::ApplyToInput(std::function<int ()(unsigned int,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6996AB8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContextDescription::ApplyToInput(std::function<int ()(unsigned int,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOContextDescription::ApplyToInput(std::function<int ()(unsigned int,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6996AB8;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5BF65F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_IOContextDescription::ApplyToInput(std::function<int ()(unsigned int,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOContextDescription::ApplyToInput(std::function<int ()(unsigned int,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6996AB8;
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<HALS_IOContextDescription::ApplyToInput(std::function<int ()(unsigned int,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOContextDescription::ApplyToInput(std::function<int ()(unsigned int,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<HALS_IOContextDescription::ApplyToInput(std::function<int ()(unsigned int,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOContextDescription::ApplyToInput(std::function<int ()(unsigned int,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<HALS_IOContextDescription::ApplyToInput(std::function<int ()(unsigned int,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOContextDescription::ApplyToInput(std::function<int ()(unsigned int,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;

  v2 = *a2;
  v5 = a2[1];
  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v3 + 48))(v3, &v5, v2);
}

uint64_t std::__function::__func<HALS_IOContextDescription::ApplyToInput(std::function<int ()(unsigned int,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOContextDescription::ApplyToInput(std::function<int ()(unsigned int,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription12ApplyToInputENSt3__18functionIFijR17HALS_IOStreamInfoEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextDescription::ApplyToInput(std::function<int ()(unsigned int,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOContextDescription::ApplyToInput(std::function<int ()(unsigned int,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target_type()
{
}

void std::__function::__func<HALS_IOContextDescription::ForceDSPToUseMasterEngineSampleRate(void)::$_0,std::allocator<HALS_IOContextDescription::ForceDSPToUseMasterEngineSampleRate(void)::$_0>,int ()(unsigned int,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContextDescription::ForceDSPToUseMasterEngineSampleRate(void)::$_0,std::allocator<HALS_IOContextDescription::ForceDSPToUseMasterEngineSampleRate(void)::$_0>,int ()(unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6997020;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::ForceDSPToUseMasterEngineSampleRate(void)::$_0,std::allocator<HALS_IOContextDescription::ForceDSPToUseMasterEngineSampleRate(void)::$_0>,int ()(unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6997020;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::ForceDSPToUseMasterEngineSampleRate(void)::$_0,std::allocator<HALS_IOContextDescription::ForceDSPToUseMasterEngineSampleRate(void)::$_0>,int ()(unsigned int,HALS_IOStreamInfo &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  AMCP::Log::Scope_Registry *v6;
  double v7;
  double v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  uint64_t v16;
  NSObject **v17;
  _BYTE v18[10];
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  double v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 328))(v4);
      if (*(_DWORD *)(a3 + 108))
      {
        v8 = v7;
        if (*(_BYTE *)(a3 + 352)
          || (HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v17, (uint64_t *)(a3 + 112)), *(_BYTE *)(a3 + 352)))
        {
          if (*(double *)(a3 + 312) != v8)
          {
            AMCP::Log::Scope_Registry::get(v6);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v17, "com.apple.coreaudio", "AMCP");
            v9 = *(std::__shared_weak_count **)v18;
            v10 = *v17;
            if (*(_QWORD *)v18)
            {
              v11 = (unint64_t *)(*(_QWORD *)v18 + 8);
              do
                v12 = __ldaxr(v11);
              while (__stlxr(v12 - 1, v11));
              if (!v12)
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
            }
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
            {
              v14 = pthread_self();
              v15 = pthread_mach_thread_np(v14);
              v16 = *(_QWORD *)(a3 + 312);
              LODWORD(v17) = 67110146;
              HIDWORD(v17) = v15;
              *(_WORD *)v18 = 2080;
              *(_QWORD *)&v18[2] = "HALS_IODSPInfo.cpp";
              v19 = 1024;
              v20 = 148;
              v21 = 2048;
              v22 = v16;
              v23 = 2048;
              v24 = v8;
              _os_log_debug_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Replacing client sample rate on DSP Info from %6.1f to %6.1f", (uint8_t *)&v17, 0x2Cu);
            }
          }
          *(double *)(a3 + 312) = v8;
        }
      }
    }
  }
  return 0;
}

uint64_t std::__function::__func<HALS_IOContextDescription::ForceDSPToUseMasterEngineSampleRate(void)::$_0,std::allocator<HALS_IOContextDescription::ForceDSPToUseMasterEngineSampleRate(void)::$_0>,int ()(unsigned int,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription35ForceDSPToUseMasterEngineSampleRateEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextDescription::ForceDSPToUseMasterEngineSampleRate(void)::$_0,std::allocator<HALS_IOContextDescription::ForceDSPToUseMasterEngineSampleRate(void)::$_0>,int ()(unsigned int,HALS_IOStreamInfo &)>::target_type()
{
}

_QWORD *HALS_IOContextDescription::DeviceDied(HALS_IOContextDescription *this, const __CFString *a2)
{
  _QWORD *result;
  HALS_Object *v4;
  uint64_t v5;
  uint64_t v6;

  result = (_QWORD *)HALS_IOContextDescription::GetEngineInfoForDeviceUID(this, a2);
  if (result)
  {
    v5 = (uint64_t)result;
    v6 = result[36];
    *(_QWORD *)(v5 + 288) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    HALS_ObjectMap::ReleaseObject_LongTerm(*(HALS_ObjectMap **)(v5 + 8), v4);
    *(_QWORD *)(v5 + 8) = 0;
    *(_BYTE *)(v5 + 860) = 0;
    return HALS_IOContextDescription::PickMasterEngine(this);
  }
  return result;
}

uint64_t HALS_IOContextDescription::HasClockDevice(HALS_IOContextDescription *this, const __CFString *a2)
{
  CFStringRef v4;
  uint64_t v6;
  CFStringRef theString1;
  _QWORD v8[2];

  if (!this)
    goto LABEL_5;
  CFRetain(this);
  v8[0] = &off_1E69A0DE0;
  v8[1] = this;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v6, this, CFSTR("clock device uid"));
  v4 = theString1;
  if (theString1)
    LOBYTE(a2) = CFStringCompare(theString1, a2, 0) == kCFCompareEqualTo;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v6);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v8);
  if (!v4)
LABEL_5:
    LOBYTE(a2) = 0;
  return a2 & 1;
}

void sub_1B5BF6A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a9);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a11);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContextDescription::GetOutputStackDescriptionForChannel(HALS_IOContextDescription *this, unsigned int a2, HALS_IOStackDescription *a3, unsigned int *a4)
{
  unint64_t v4;
  unsigned int v6;
  unint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  HALS_IOStackDescription *v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  void **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  void **v28;
  unsigned int v29;
  uint64_t v33;
  uint64_t *v34;
  void **v35;

  v4 = *((_QWORD *)this + 11) - *((_QWORD *)this + 10);
  if ((v4 & 0x1FFFFFFFE0) == 0)
    return 0;
  v6 = a2;
  v8 = 0;
  v9 = 0;
  v10 = (char *)a3 + 8;
  v34 = (uint64_t *)((char *)a3 + 24);
  if (((v4 >> 5) & 0xFFFFFFFE) != 0)
    v11 = (v4 >> 5);
  else
    v11 = 1;
  v33 = v11;
  while (1)
  {
    v12 = *((_QWORD *)this + 10);
    if (v8 >= (*((_QWORD *)this + 11) - v12) >> 5)
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    v13 = (HALS_IOStackDescription *)(v12 + 32 * v8);
    v14 = *(_DWORD *)v13;
    *(_DWORD *)a3 = *(_DWORD *)v13;
    if (v13 != a3)
    {
      v16 = (uint64_t *)*((_QWORD *)v13 + 1);
      v15 = (uint64_t *)*((_QWORD *)v13 + 2);
      v17 = 0xAAAAAAAAAAAAAAABLL * (v15 - v16);
      v18 = *v34;
      v19 = *(uint64_t **)v10;
      if (0xAAAAAAAAAAAAAAABLL * ((*v34 - *(_QWORD *)v10) >> 3) >= v17)
      {
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 2) - (_QWORD)v19) >> 3) >= v17)
        {
          v27 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_IOStreamGroup *,HALS_IOStreamGroup *,HALS_IOStreamGroup *>(v16, v15, *(uint64_t **)v10);
          v28 = (void **)*((_QWORD *)a3 + 2);
          while (v28 != (void **)v27)
          {
            v28 -= 3;
            v35 = v28;
            std::vector<HALS_IOStreamInfo>::__destroy_vector::operator()[abi:ne180100](&v35);
          }
          v6 = a2;
          goto LABEL_27;
        }
        v26 = &v16[(uint64_t)(*((_QWORD *)a3 + 2) - (_QWORD)v19) >> 3];
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_IOStreamGroup *,HALS_IOStreamGroup *,HALS_IOStreamGroup *>(v16, v26, *(uint64_t **)v10);
        v25 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_IOStreamGroup>,HALS_IOStreamGroup*,HALS_IOStreamGroup*,HALS_IOStreamGroup*>((uint64_t)v34, v26, v15, *((_QWORD **)a3 + 2));
      }
      else
      {
        if (v19)
        {
          v20 = (void **)*((_QWORD *)a3 + 2);
          v21 = *(uint64_t **)v10;
          if (v20 != (void **)v19)
          {
            do
            {
              v20 -= 3;
              v35 = v20;
              std::vector<HALS_IOStreamInfo>::__destroy_vector::operator()[abi:ne180100](&v35);
            }
            while (v20 != (void **)v19);
            v21 = *(uint64_t **)v10;
          }
          *((_QWORD *)a3 + 2) = v19;
          operator delete(v21);
          v18 = 0;
          *(_QWORD *)v10 = 0;
          *((_QWORD *)v10 + 1) = 0;
          *((_QWORD *)v10 + 2) = 0;
          v6 = a2;
        }
        if (v17 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v22 = 0xAAAAAAAAAAAAAAABLL * (v18 >> 3);
        v23 = 2 * v22;
        if (2 * v22 <= v17)
          v23 = 0xAAAAAAAAAAAAAAABLL * (v15 - v16);
        if (v22 >= 0x555555555555555)
          v24 = 0xAAAAAAAAAAAAAAALL;
        else
          v24 = v23;
        std::vector<std::string>::__vallocate[abi:ne180100](v10, v24);
        v25 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_IOStreamGroup>,HALS_IOStreamGroup*,HALS_IOStreamGroup*,HALS_IOStreamGroup*>((uint64_t)v34, v16, v15, *((_QWORD **)a3 + 2));
      }
      v27 = v25;
LABEL_27:
      *((_QWORD *)a3 + 2) = v27;
      v14 = *(_DWORD *)a3;
    }
    v29 = v14 + v9;
    if (v29 > v6)
      break;
    ++v8;
    v9 = v29;
    if (v8 == v33)
      return 0;
  }
  *a4 = v6 - v9;
  return 1;
}

void sub_1B5BF6CF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

_QWORD *HALS_IOContextDescription::SetStreamIsEnabledAtIndex(_QWORD *this, int a2, unsigned int a3, int a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    if (this[17] <= (unint64_t)a3)
      return this;
    v4 = this[16];
  }
  else
  {
    if (this[14] <= (unint64_t)a3)
      return this;
    v4 = this[13];
  }
  v5 = (unint64_t)a3 >> 6;
  v6 = 1 << a3;
  if (a4)
    v7 = *(_QWORD *)(v4 + 8 * v5) | v6;
  else
    v7 = *(_QWORD *)(v4 + 8 * v5) & ~v6;
  *(_QWORD *)(v4 + 8 * v5) = v7;
  return this;
}

_QWORD *HALS_IOContextDescription::RegisterBuffers(HALS_IOContextDescription *this)
{
  char *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *result;
  uint64_t v8;
  int v9;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 104;
  v9 = *((_DWORD *)this + 110);
  v3 = (uint64_t *)*((_QWORD *)this + 28);
  v12[0] = &off_1E6979600;
  v12[1] = v2;
  v12[2] = &v9;
  v13 = v12;
  VisitableVector<HALS_IOStreamInfo>::apply<>(v3, (uint64_t)v12);
  v4 = v13;
  if (v13 == v12)
  {
    v5 = 4;
    v4 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (uint64_t *)*((_QWORD *)this + 29);
  v10[0] = &off_1E6979680;
  v10[1] = v2;
  v10[2] = &v9;
  v11 = v10;
  HALS_IOStreamGrid::apply_to_streams(v6, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v8 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_1B5BF6E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *HALS_IOContextDescription::UnregisterBuffers(HALS_IOContextDescription *this)
{
  char *v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 104;
  v3 = *((unsigned int *)this + 110);
  v4 = (uint64_t *)*((_QWORD *)this + 28);
  v12[0] = &off_1E6979700;
  v12[1] = v2;
  v12[2] = v3;
  v13 = v12;
  VisitableVector<HALS_IOStreamInfo>::apply<>(v4, (uint64_t)v12);
  v5 = v13;
  if (v13 == v12)
  {
    v6 = 4;
    v5 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = (uint64_t *)*((_QWORD *)this + 29);
  v10[0] = &off_1E6979780;
  v10[1] = v2;
  v10[2] = v3;
  v11 = v10;
  HALS_IOStreamGrid::apply_to_streams(v7, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_1B5BF6FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<HALS_IOContextDescription::AllocateProcessors(void)::$_1,std::allocator<HALS_IOContextDescription::AllocateProcessors(void)::$_1>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContextDescription::AllocateProcessors(void)::$_1,std::allocator<HALS_IOContextDescription::AllocateProcessors(void)::$_1>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6996BB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::AllocateProcessors(void)::$_1,std::allocator<HALS_IOContextDescription::AllocateProcessors(void)::$_1>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6996BB8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::AllocateProcessors(void)::$_1,std::allocator<HALS_IOContextDescription::AllocateProcessors(void)::$_1>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::operator()(AMCP::Log::Scope_Registry *a1, uint64_t a2, HALS_IOStackDescription *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  uint64_t v15;
  BOOL v16;
  NSObject **v18;
  _BYTE v19[10];
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a6 + 8))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v18, "com.apple.coreaudio", "AMCP");
    v6 = *(std::__shared_weak_count **)v19;
    v7 = *v18;
    if (*(_QWORD *)v19)
    {
      v8 = (unint64_t *)(*(_QWORD *)v19 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v10 = 560947818;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      LODWORD(v18) = 67109634;
      HIDWORD(v18) = v12;
      *(_WORD *)v19 = 2080;
      *(_QWORD *)&v19[2] = "HALS_IOProcessorFactory.cpp";
      v20 = 1024;
      v21 = 143;
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_IOProcessorFactory::allocate_output_processors: trying to allocate output processor from input stream info!", (uint8_t *)&v18, 0x18u);
    }
  }
  else
  {
    v15 = *((_QWORD *)a1 + 1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15))
      v16 = *(_BYTE *)(a6 + 416) == 0;
    else
      v16 = 1;
    if (v16)
    {
      v18 = (NSObject **)&off_1E697F338;
      HALS_IOProcessorFactoryWorker::do_allocate_processor((uint64_t)&v18, v15, a6, 0, 0, a3);
    }
    return 0;
  }
  return v10;
}

uint64_t std::__function::__func<HALS_IOContextDescription::AllocateProcessors(void)::$_1,std::allocator<HALS_IOContextDescription::AllocateProcessors(void)::$_1>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription18AllocateProcessorsEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextDescription::AllocateProcessors(void)::$_1,std::allocator<HALS_IOContextDescription::AllocateProcessors(void)::$_1>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target_type()
{
}

void std::__function::__func<HALS_IOContextDescription::AllocateProcessors(void)::$_0,std::allocator<HALS_IOContextDescription::AllocateProcessors(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContextDescription::AllocateProcessors(void)::$_0,std::allocator<HALS_IOContextDescription::AllocateProcessors(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6996B38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::AllocateProcessors(void)::$_0,std::allocator<HALS_IOContextDescription::AllocateProcessors(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6996B38;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::AllocateProcessors(void)::$_0,std::allocator<HALS_IOContextDescription::AllocateProcessors(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::operator()(AMCP::Log::Scope_Registry *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  NSObject **v12;
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if (*(_BYTE *)(*a2 + 8))
  {
    v3 = *((_QWORD *)a1 + 1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3) && *(_BYTE *)(v2 + 416))
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    else
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v3, v2);
  }
  else
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
    v6 = *(std::__shared_weak_count **)v13;
    v7 = *v12;
    if (*(_QWORD *)v13)
    {
      v8 = (unint64_t *)(*(_QWORD *)v13 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      LODWORD(v12) = 67109634;
      HIDWORD(v12) = v11;
      *(_WORD *)v13 = 2080;
      *(_QWORD *)&v13[2] = "HALS_IOProcessorFactory.cpp";
      v14 = 1024;
      v15 = 121;
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_IOProcessorFactory::allocate_input_processors: trying to allocate input processor from output stream info!", (uint8_t *)&v12, 0x18u);
    }
    return 560947818;
  }
}

uint64_t std::__function::__func<HALS_IOContextDescription::AllocateProcessors(void)::$_0,std::allocator<HALS_IOContextDescription::AllocateProcessors(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription18AllocateProcessorsEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextDescription::AllocateProcessors(void)::$_0,std::allocator<HALS_IOContextDescription::AllocateProcessors(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target_type()
{
}

void std::__function::__func<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<5> const&>,std::allocator<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<5> const&>>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<5> const&>,std::allocator<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<5> const&>>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6996D08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<5> const&>,std::allocator<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<5> const&>>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6996D08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<5> const&>,std::allocator<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<5> const&>>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a6);
}

uint64_t std::__function::__func<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<5> const&>,std::allocator<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<5> const&>>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__16__bindIPFiR17HALS_IOStreamInfoEJRKNS_12placeholders4__phILi5EEEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<5> const&>,std::allocator<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<5> const&>>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target_type()
{
}

void std::__function::__func<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<2> const&>,std::allocator<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<2> const&>>,int ()(unsigned int,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<2> const&>,std::allocator<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<2> const&>>,int ()(unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6996C48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<2> const&>,std::allocator<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<2> const&>>,int ()(unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6996C48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<2> const&>,std::allocator<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<2> const&>>,int ()(unsigned int,HALS_IOStreamInfo &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a3);
}

uint64_t std::__function::__func<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<2> const&>,std::allocator<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<2> const&>>,int ()(unsigned int,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__16__bindIPFiR17HALS_IOStreamInfoEJRKNS_12placeholders4__phILi2EEEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<2> const&>,std::allocator<std::__bind<int (*)(HALS_IOStreamInfo &),std::placeholders::__ph<2> const&>>,int ()(unsigned int,HALS_IOStreamInfo &)>::target_type()
{
}

void std::__function::__func<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_1,std::allocator<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_1>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_1,std::allocator<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_1>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E6996E10;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_1,std::allocator<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_1>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E6996E10;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_1,std::allocator<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_1>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::operator()(uint64_t a1, HALS_IOStackDescription **a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  UInt32 v10;
  UInt32 v11;
  size_t v12;
  AudioStreamBasicDescription v14;

  memset(&v14, 0, sizeof(v14));
  v3 = (uint64_t *)*((_QWORD *)*a2 + 1);
  if (*((uint64_t **)*a2 + 2) != v3)
  {
    v4 = *v3;
    if (-1944890851 * ((unint64_t)(v3[1] - *v3) >> 3) && v4 != 0)
    {
      if (!*(_DWORD *)(v4 + 108)
        || ((v6 = *(uint64_t **)(v4 + 112), *(uint64_t **)(v4 + 120) != v6) ? (v7 = v6 == 0) : (v7 = 1), v7))
      {
        v6 = (uint64_t *)(v4 + 408);
      }
      v8 = *v6;
      if (*(_QWORD *)(*v6 + 8) && *(_QWORD *)(v4 + 56))
      {
        HALS_IOStackDescription::GetFormat(*a2, &v14);
        v9 = *(unsigned int *)(v8 + 308);
        v10 = *(_DWORD *)(v4 + 64) - v9;
        v11 = *(_DWORD *)(a1 + 8) * v14.mBytesPerFrame;
        if (v10 < v11)
          v11 = *(_DWORD *)(v4 + 64) - v9;
        if (v14.mBytesPerFrame)
          v12 = v11;
        else
          v12 = v10;
        bzero((void *)(*(_QWORD *)(v4 + 56) + v9), v12);
      }
    }
  }
  return 0;
}

uint64_t std::__function::__func<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_1,std::allocator<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_1>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription18ClearSharedBuffersEbjE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_1,std::allocator<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_1>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::target_type()
{
}

void std::__function::__func<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_0,std::allocator<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_0>,int ()(unsigned int,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_0,std::allocator<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_0>,int ()(unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E6996D90;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_0,std::allocator<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_0>,int ()(unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E6996D90;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_0,std::allocator<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_0>,int ()(unsigned int,HALS_IOStreamInfo &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v5 = *(_DWORD *)(a3 + 108);
  if (!v5 || ((v6 = *(uint64_t **)(a3 + 112), *(uint64_t **)(a3 + 120) != v6) ? (v7 = v6 == 0) : (v7 = 1), v7))
    v6 = (uint64_t *)(a3 + 408);
  v8 = *v6;
  if (*(_QWORD *)(*v6 + 8) && *(_QWORD *)(a3 + 56))
  {
    if (v5)
    {
      HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v15, (uint64_t *)(a3 + 112));
    }
    else
    {
      v9 = *(_OWORD *)(a3 + 384);
      v15 = *(_OWORD *)(a3 + 368);
      v16 = v9;
      v17 = *(_QWORD *)(a3 + 400);
    }
    if (DWORD2(v15) == 1819304813 && (BYTE12(v15) & 0x40) == 0)
      DWORD2(v16) = 4 * HIDWORD(v16);
    v10 = *(unsigned int *)(v8 + 308);
    v11 = *(_DWORD *)(a3 + 64) - v10;
    v12 = *(_DWORD *)(a1 + 8) * DWORD2(v16);
    if (v11 < v12)
      v12 = *(_DWORD *)(a3 + 64) - v10;
    if (DWORD2(v16))
      v13 = v12;
    else
      v13 = v11;
    bzero((void *)(*(_QWORD *)(a3 + 56) + v10), v13);
  }
  return 0;
}

uint64_t std::__function::__func<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_0,std::allocator<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_0>,int ()(unsigned int,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription18ClearSharedBuffersEbjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_0,std::allocator<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_0>,int ()(unsigned int,HALS_IOStreamInfo &)>::target_type()
{
}

uint64_t (***HALS_IOContextDescription::ClearInactiveInputSharedBuffers(HALS_IOContextDescription *this, int a2))()
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t (***result)();
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];
  uint64_t (**v17)();
  int v18;
  uint64_t (***v19)();
  _QWORD v20[3];
  _QWORD *v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v17 = &off_1E6996E90;
  v18 = a2;
  v19 = &v17;
  v14[0] = &off_1E69965E0;
  v14[1] = this;
  v21 = v20;
  std::__function::__func<HALS_IOContextDescription::ClearInactiveInputSharedBuffers::$_0,std::allocator<HALS_IOContextDescription::ClearInactiveInputSharedBuffers::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ConstItemWithIndex &)>::__clone((uint64_t)&v17, (uint64_t)v20);
  v3 = (uint64_t)v21;
  if (!v21)
    goto LABEL_4;
  if (v21 != v20)
  {
    v3 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_4:
    v23 = (_BYTE *)v3;
    goto LABEL_6;
  }
  v23 = v22;
  (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v22);
LABEL_6:
  v5 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)this + 8);
  if (v5 != v4)
  {
    v6 = 0;
    v7 = 1;
    do
    {
      if ((v7 & 1) != 0)
        v6 = 0;
      else
        ++v6;
      v16[0] = v5;
      v16[1] = v6;
      if (((*(uint64_t (**)(_QWORD *, _QWORD *))(v14[0] + 16))(v14, v16) & 1) == 0)
      {
        v15[0] = v5;
        v15[1] = v6;
        if (!v23)
          std::__throw_bad_function_call[abi:ne180100]();
        if ((*(unsigned int (**)(_BYTE *, _QWORD *))(*(_QWORD *)v23 + 48))(v23, v15))
          break;
      }
      v7 = 0;
      v5 += 424;
    }
    while (v5 != v4);
  }
  v8 = v23;
  if (v23 == v22)
  {
    v9 = 4;
    v8 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_20;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_20:
  v10 = v21;
  if (v21 == v20)
  {
    v11 = 4;
    v10 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_25;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_25:
  result = v19;
  if (v19 == &v17)
  {
    v13 = 4;
    result = &v17;
  }
  else
  {
    if (!v19)
      return result;
    v13 = 5;
  }
  return (uint64_t (***)())(*result)[v13]();
}

void sub_1B5BF7B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;

  v24 = a23;
  if (a23 == &a20)
  {
    v25 = 4;
    v24 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  v26 = a19;
  if (a19 == &a16)
  {
    v27 = 4;
    v26 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<HALS_IOContextDescription::ClearInactiveInputSharedBuffers(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::ClearInactiveInputSharedBuffers(unsigned int)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ConstItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<HALS_IOContextDescription::ClearInactiveInputSharedBuffers(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::ClearInactiveInputSharedBuffers(unsigned int)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ConstItemWithIndex &)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E6996E90;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::ClearInactiveInputSharedBuffers(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::ClearInactiveInputSharedBuffers(unsigned int)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ConstItemWithIndex &)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E6996E90;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::ClearInactiveInputSharedBuffers(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::ClearInactiveInputSharedBuffers(unsigned int)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ConstItemWithIndex &)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  uint64_t *v5;
  BOOL v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  size_t v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v3 = *a2;
  v4 = *(_DWORD *)(*a2 + 108);
  if (!v4 || ((v5 = *(uint64_t **)(v3 + 112), *(uint64_t **)(v3 + 120) != v5) ? (v6 = v5 == 0) : (v6 = 1), v6))
    v5 = (uint64_t *)(v3 + 408);
  v7 = *v5;
  if (*(_QWORD *)(*v5 + 8) && *(_QWORD *)(v3 + 56))
  {
    if (v4)
    {
      HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v14, (uint64_t *)(v3 + 112));
    }
    else
    {
      v8 = *(_OWORD *)(v3 + 384);
      v14 = *(_OWORD *)(v3 + 368);
      v15 = v8;
      v16 = *(_QWORD *)(v3 + 400);
    }
    if (DWORD2(v14) == 1819304813 && (BYTE12(v14) & 0x40) == 0)
      DWORD2(v15) = 4 * HIDWORD(v15);
    v9 = *(unsigned int *)(v7 + 308);
    v10 = *(_DWORD *)(v3 + 64) - v9;
    v11 = *(_DWORD *)(a1 + 8) * DWORD2(v15);
    if (v10 < v11)
      v11 = *(_DWORD *)(v3 + 64) - v9;
    if (DWORD2(v15))
      v12 = v11;
    else
      v12 = v10;
    bzero((void *)(*(_QWORD *)(v3 + 56) + v9), v12);
  }
  return 0;
}

uint64_t std::__function::__func<HALS_IOContextDescription::ClearInactiveInputSharedBuffers(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::ClearInactiveInputSharedBuffers(unsigned int)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ConstItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription31ClearInactiveInputSharedBuffersEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextDescription::ClearInactiveInputSharedBuffers(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::ClearInactiveInputSharedBuffers(unsigned int)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ConstItemWithIndex &)>::target_type()
{
}

uint64_t (***HALS_IOContextDescription::EndianSwapSharedBuffers(HALS_IOContextDescription *this, int a2, int a3))()
{
  uint64_t (***result)();
  uint64_t v4;
  uint64_t (**v5)();
  int v6;
  uint64_t (***v7)();
  uint64_t (**v8)();
  int v9;
  uint64_t (***v10)();
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v8 = &off_1E6996F20;
    v9 = a3;
    v10 = &v8;
    HALS_IOContextDescription::ApplyToInput((uint64_t)this, (uint64_t)&v8);
    result = v10;
    if (v10 == &v8)
    {
      v4 = 4;
      result = &v8;
      return (uint64_t (***)())(*result)[v4]();
    }
  }
  else
  {
    v5 = &off_1E6996FA0;
    v6 = a3;
    v7 = &v5;
    VisitableVector<HALS_IOStackDescription>::apply<>((uint64_t *)this + 10, &v5);
    result = v7;
    if (v7 == &v5)
    {
      v4 = 4;
      result = &v5;
      return (uint64_t (***)())(*result)[v4]();
    }
  }
  if (!result)
    return result;
  v4 = 5;
  return (uint64_t (***)())(*result)[v4]();
}

void sub_1B5BF7E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_1,std::allocator<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_1>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_1,std::allocator<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_1>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E6996FA0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_1,std::allocator<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_1>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E6996FA0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_1,std::allocator<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_1>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::operator()(uint64_t a1, HALS_IOStackDescription **a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  BOOL v7;
  uint64_t v8;
  UInt32 mChannelsPerFrame;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  AudioStreamBasicDescription v15;

  memset(&v15, 0, sizeof(v15));
  v3 = (uint64_t *)*((_QWORD *)*a2 + 1);
  if (*((uint64_t **)*a2 + 2) != v3)
  {
    v4 = *v3;
    if (-1944890851 * ((unint64_t)(v3[1] - *v3) >> 3) && v4 != 0)
    {
      if (!*(_DWORD *)(v4 + 108)
        || ((v6 = *(uint64_t **)(v4 + 112), *(uint64_t **)(v4 + 120) != v6) ? (v7 = v6 == 0) : (v7 = 1), v7))
      {
        v6 = (uint64_t *)(v4 + 408);
      }
      v8 = *v6;
      if (*(_QWORD *)(*v6 + 8))
      {
        if (*(_QWORD *)(v4 + 56))
        {
          HALS_IOStackDescription::GetFormat(*a2, &v15);
          if (v15.mFormatID == 1819304813)
          {
            mChannelsPerFrame = v15.mChannelsPerFrame;
            if (v15.mBytesPerFrame / v15.mChannelsPerFrame == 2)
            {
              v12 = *(_DWORD *)(a1 + 8) * v15.mChannelsPerFrame;
              if ((_DWORD)v12)
              {
                v13 = (_WORD *)(*(_QWORD *)(v4 + 56) + *(unsigned int *)(v8 + 308));
                do
                {
                  *v13 = bswap32((unsigned __int16)*v13) >> 16;
                  ++v13;
                  --v12;
                }
                while (v12);
              }
            }
            else if (v15.mBytesPerFrame / v15.mChannelsPerFrame == 4 && *(_DWORD *)(a1 + 8) * v15.mChannelsPerFrame)
            {
              v10 = 0;
              v11 = *(_QWORD *)(v4 + 56) + *(unsigned int *)(v8 + 308);
              do
              {
                *(_DWORD *)(v11 + 4 * v10) = bswap32(*(_DWORD *)(v11 + 4 * v10));
                ++v10;
              }
              while (v10 < mChannelsPerFrame * *(_DWORD *)(a1 + 8));
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t std::__function::__func<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_1,std::allocator<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_1>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription23EndianSwapSharedBuffersEbjE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_1,std::allocator<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_1>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::target_type()
{
}

void std::__function::__func<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_0,std::allocator<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_0>,int ()(unsigned int,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_0,std::allocator<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_0>,int ()(unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E6996F20;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_0,std::allocator<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_0>,int ()(unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E6996F20;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_0,std::allocator<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_0>,int ()(unsigned int,HALS_IOStreamInfo &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v5 = *(_DWORD *)(a3 + 108);
  if (!v5 || ((v6 = *(uint64_t **)(a3 + 112), *(uint64_t **)(a3 + 120) != v6) ? (v7 = v6 == 0) : (v7 = 1), v7))
    v6 = (uint64_t *)(a3 + 408);
  v8 = *v6;
  if (*(_QWORD *)(*v6 + 8) && *(_QWORD *)(a3 + 56))
  {
    if (v5)
    {
      HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v16, (uint64_t *)(a3 + 112));
    }
    else
    {
      v9 = *(_OWORD *)(a3 + 384);
      v16 = *(_OWORD *)(a3 + 368);
      v17 = v9;
      v18 = *(_QWORD *)(a3 + 400);
    }
    if (DWORD2(v16) == 1819304813)
    {
      if ((BYTE12(v16) & 0x40) == 0)
        DWORD2(v17) = 4 * HIDWORD(v17);
      v10 = HIDWORD(v17);
      if (DWORD2(v17) / HIDWORD(v17) == 2)
      {
        v13 = (*(_DWORD *)(a1 + 8) * HIDWORD(v17));
        if ((_DWORD)v13)
        {
          v14 = (_WORD *)(*(_QWORD *)(a3 + 56) + *(unsigned int *)(v8 + 308));
          do
          {
            *v14 = bswap32((unsigned __int16)*v14) >> 16;
            ++v14;
            --v13;
          }
          while (v13);
        }
      }
      else if (DWORD2(v17) / HIDWORD(v17) == 4 && *(_DWORD *)(a1 + 8) * HIDWORD(v17))
      {
        v11 = 0;
        v12 = *(_QWORD *)(a3 + 56) + *(unsigned int *)(v8 + 308);
        do
        {
          *(_DWORD *)(v12 + 4 * v11) = bswap32(*(_DWORD *)(v12 + 4 * v11));
          ++v11;
        }
        while (v11 < (v10 * *(_DWORD *)(a1 + 8)));
      }
    }
  }
  return 0;
}

uint64_t std::__function::__func<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_0,std::allocator<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_0>,int ()(unsigned int,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription23EndianSwapSharedBuffersEbjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_0,std::allocator<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_0>,int ()(unsigned int,HALS_IOStreamInfo &)>::target_type()
{
}

uint64_t HALS_IOContextDescription::HostedDSPDescription::DebugString_DSPTypes(HALS_IOContextDescription::HostedDSPDescription *this, uint64_t a2)
{
  _QWORD *v4;
  char v5;
  BOOL v6;
  void *p_p;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int16x8_t v19;
  unsigned int v20;
  int32x4_t v21;
  uint32x4_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *__p;
  uint64_t v30;
  char v31;
  _QWORD v32[2];
  uint64_t v33;
  _QWORD v34[10];
  char v35;
  uint64_t v36;
  _QWORD v37[2];
  int v38;
  char v39;
  _BYTE v40[24];
  _BYTE *v41;
  _BYTE v42[24];
  _BYTE *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v32);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::StringifiedKvp(v37, (const UInt8 *)&__p);
  if (v31 < 0)
    operator delete(__p);
  v4 = *(_QWORD **)(a2 + 88);
  if (v4 == (_QWORD *)(a2 + 96))
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = *((_DWORD *)v4 + 7) == 7;
      v38 = *((_DWORD *)v4 + 7);
      v39 = 1;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)" | ", 3);
      DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::get_string(&__p, (uint64_t)v37);
      if (v31 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v31 >= 0)
        v8 = v31;
      else
        v8 = v30;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)p_p, v8);
      if (v31 < 0)
        operator delete(__p);
      v9 = (_QWORD *)v4[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v4[2];
          v11 = *v10 == (_QWORD)v4;
          v4 = v10;
        }
        while (!v11);
      }
      v5 |= v6;
      v4 = v10;
    }
    while (v10 != (_QWORD *)(a2 + 96));
  }
  v12 = *(_QWORD **)(a2 + 120);
  if (v12 != (_QWORD *)(a2 + 128))
  {
    do
    {
      v13 = *((_DWORD *)v12 + 7) == 7;
      v38 = *((_DWORD *)v12 + 7);
      v39 = 1;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)" | ", 3);
      DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::get_string(&__p, (uint64_t)v37);
      if (v31 >= 0)
        v14 = &__p;
      else
        v14 = __p;
      if (v31 >= 0)
        v15 = v31;
      else
        v15 = v30;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)v14, v15);
      if (v31 < 0)
        operator delete(__p);
      v16 = (_QWORD *)v12[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v12[2];
          v11 = *v17 == (_QWORD)v12;
          v12 = v17;
        }
        while (!v11);
      }
      v5 |= v13;
      v12 = v17;
    }
    while (v17 != (_QWORD *)(a2 + 128));
  }
  if (*(_BYTE *)(a2 + 84) || (v5 & 1) != 0)
  {
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)" | Isolated Use Case ID: ", 25);
    v20 = *(unsigned __int8 *)(a2 + 84);
    if (*(_BYTE *)(a2 + 84))
      v20 = *(_DWORD *)(a2 + 80);
    v19.i32[0] = bswap32(v20);
    *(int8x8_t *)v19.i8 = vzip1_s8(*(int8x8_t *)v19.i8, *(int8x8_t *)v19.i8);
    v21.i64[0] = 0x1F0000001FLL;
    v21.i64[1] = 0x1F0000001FLL;
    v22.i64[0] = 0x5F0000005FLL;
    v22.i64[1] = 0x5F0000005FLL;
    *(int8x8_t *)v19.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v22, (uint32x4_t)vsraq_n_s32(v21, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v19.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v19.i8, (int8x8_t)0x2E002E002E002ELL);
    v31 = 4;
    LODWORD(__p) = vmovn_s16(v19).u32[0];
    BYTE4(__p) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&__p, 4);
    if (v31 < 0)
      operator delete(__p);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(this, (uint64_t)v34);
  v37[0] = &off_1E6996630;
  v23 = v43;
  if (v43 == v42)
  {
    v24 = 4;
    v23 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_47;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_47:
  v25 = v41;
  if (v41 == v40)
  {
    v26 = 4;
    v25 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_52;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_52:
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v37);
  v32[0] = *MEMORY[0x1E0DE4F50];
  v27 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v32 + *(_QWORD *)(v32[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v33 = v27;
  v34[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v35 < 0)
    operator delete((void *)v34[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B5E50598](&v36);
}

void sub_1B5BF860C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::~StringifiedKvp((DSP_Dictionariable::DictionariableKvp *)(v16 - 184));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest::~ReferenceStreamRequest(HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest *this)
{
  const void *v1;

  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

void std::__function::__func<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0>,void ()(HALS_DSPStream *)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0>,void ()(HALS_DSPStream *)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69970A0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0>,void ()(HALS_DSPStream *)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69970A0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void std::__function::__func<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0>,void ()(HALS_DSPStream *)>::operator()(AMCP::Log::Scope_Registry *a1, _DWORD **a2)
{
  _DWORD *v2;
  int v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *v6;
  unint64_t v7;
  HALB_Mutex *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  int v11;
  int v12;
  int v13;
  NSObject **v14;
  __int128 v15;
  void *v16;
  _BYTE v17[12];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *((_DWORD *)a1 + 2);
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v14, "com.apple.coreaudio", "AMCP");
  v4 = (std::__shared_weak_count *)v15;
  v5 = *v14;
  if ((_QWORD)v15)
  {
    v6 = (unint64_t *)(v15 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v9 = pthread_self();
    v10 = pthread_mach_thread_np(v9);
    v11 = v2[12];
    v12 = v2[22];
    v13 = v2[4];
    LODWORD(v14) = 67110658;
    HIDWORD(v14) = v10;
    LOWORD(v15) = 2080;
    *(_QWORD *)((char *)&v15 + 2) = "HALS_DSPStream.cpp";
    WORD5(v15) = 1024;
    HIDWORD(v15) = 627;
    LOWORD(v16) = 1024;
    *(_DWORD *)((char *)&v16 + 2) = v11;
    HIWORD(v16) = 1024;
    *(_DWORD *)v17 = v12;
    *(_WORD *)&v17[4] = 1024;
    *(_DWORD *)&v17[6] = v13;
    *(_WORD *)&v17[10] = 1024;
    v18 = v3;
    _os_log_debug_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] (Device ID: %d) (Client ID: %d) (Object ID: %d) Setting DSP Stream adapted latency %d", (uint8_t *)&v14, 0x30u);
  }
  v14 = (NSObject **)MEMORY[0x1E0C809B0];
  *(_QWORD *)&v15 = 0x40000000;
  *((_QWORD *)&v15 + 1) = ___ZN14HALS_DSPStream23SetCurrentLatencyFramesEj_block_invoke;
  v16 = &__block_descriptor_tmp_24_12217;
  *(_QWORD *)v17 = v2;
  *(_DWORD *)&v17[8] = v3;
  v8 = (HALB_Mutex *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 56))(v2);
  HALB_CommandGate::ExecuteCommand(v8, (uint64_t)&v14);
}

uint64_t std::__function::__func<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0>,void ()(HALS_DSPStream *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription26UpdateForDSPAdaptedLatencyEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0>,void ()(HALS_DSPStream *)>::target_type()
{
}

void HALS_IOContextDescription::HostedDSPDescription::ResetRequests(HALS_IOContextDescription::HostedDSPDescription *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (v2 != *(_QWORD *)this)
  {
    do
    {
      v4 = v2 - 16;
      std::__destroy_at[abi:ne180100]<HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest,0>(*(const void **)(v2 - 8));
      v2 = v4;
    }
    while (v4 != v3);
  }
  *((_QWORD *)this + 1) = v3;
  if (*((_BYTE *)this + 72))
    *((_BYTE *)this + 72) = 0;
  if (*((_BYTE *)this + 180))
    *((_BYTE *)this + 180) = 0;
}

uint64_t for_all_taps(CFDictionaryRef theDict, uint64_t a2)
{
  const __CFArray *v4;
  char v5;
  unsigned int v6;
  char v7;
  HALS_Object *v8;
  HALS_ObjectMap *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  HALS_Object *v17;
  uint64_t v18;
  HALS_ObjectMap *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  HALS_System *v23;
  std::__shared_weak_count *v24;
  _BYTE v25[8];
  __CFString *v26;
  _BYTE v27[8];
  CFDictionaryRef theDicta;
  _BYTE v29[8];
  const __CFArray *v30;
  _QWORD v31[2];

  if (theDict)
    CFRetain(theDict);
  v31[0] = &off_1E69A0DE0;
  v31[1] = theDict;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v29, theDict, CFSTR("taps"));
  v4 = v30;
  if (!v30)
  {
    v18 = 0;
    goto LABEL_27;
  }
  v5 = 0;
  v6 = 0;
  v7 = 1;
  while ((unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v4) > v6 && (v7 & 1) != 0)
  {
    OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v27, (uint64_t)v29, v6);
    if (!theDicta)
    {
      v7 = 1;
      goto LABEL_24;
    }
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v25, theDicta, CFSTR("uid"));
    v21 = 0;
    v22 = 0;
    HALS_System::GetInstance(&v23, 0, &v21);
    v9 = (HALS_ObjectMap *)HALS_System::CopyTapByUUID(v23, v26);
    v10 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v22;
    if (!v22)
      goto LABEL_17;
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (v9)
      {
LABEL_18:
        v20 = v9;
        HALS_ObjectMap::RetainObject(v9, v8);
        v16 = *(_QWORD *)(a2 + 24);
        if (!v16)
          std::__throw_bad_function_call[abi:ne180100]();
        v7 = (*(uint64_t (**)(uint64_t, HALS_ObjectMap **))(*(_QWORD *)v16 + 48))(v16, &v20);
        HALS_ObjectMap::ReleaseObject(v20, v17);
        v5 = 1;
        goto LABEL_23;
      }
    }
    else
    {
LABEL_17:
      if (v9)
        goto LABEL_18;
    }
    v7 = 1;
LABEL_23:
    HALS_ObjectMap::ReleaseObject(v9, v8);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v25);
LABEL_24:
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v27);
    ++v6;
    v4 = v30;
  }
  v18 = v5 & 1;
LABEL_27:
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v29);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v31);
  return v18;
}

void sub_1B5BF8B50(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, HALS_ObjectMap *a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  HALS_ObjectMap *v19;
  uint64_t v20;
  HALS_Object *v22;

  HALS_ObjectMap::ReleaseObject(a10, a2);
  HALS_ObjectMap::ReleaseObject(v19, v22);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a15);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a17);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a19);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v20 - 64));
  _Unwind_Resume(a1);
}

void std::__function::__func<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_1,std::allocator<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_1>,BOOL ()(HALS_Releaser<HALS_Tap>)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_1,std::allocator<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_1>,BOOL ()(HALS_Releaser<HALS_Tap>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6997240;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_1,std::allocator<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_1>,BOOL ()(HALS_Releaser<HALS_Tap>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6997240;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_1,std::allocator<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_1>,BOOL ()(HALS_Releaser<HALS_Tap>)>::operator()(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  HALS_Object *v13;
  HALS_ObjectMap *v14;
  int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;

  v3 = *(HALS_ObjectMap **)a2;
  *(_QWORD *)a2 = 0;
  v4 = *((_QWORD *)v3 + 31);
  v5 = (std::__shared_weak_count *)*((_QWORD *)v3 + 32);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = *(_QWORD *)(v4 + 328);
  v9 = *(_QWORD *)(v4 + 336);
  if (v8 != v9)
  {
    v10 = 0;
    v11 = v8 + 16;
    while (1)
    {
      v12 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**(unsigned int **)(v11 - 16));
      v14 = (HALS_ObjectMap *)v12;
      if (!v12)
        goto LABEL_10;
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 96) + 768))(*(_QWORD *)(v12 + 96)) & 1) == 0)
        break;
      v15 = 1;
      v10 = 1;
LABEL_11:
      HALS_ObjectMap::ReleaseObject(v14, v13);
      if (v11 == v9)
        v16 = 1;
      else
        v16 = v15;
      v11 += 16;
      if (v16 == 1)
        goto LABEL_17;
    }
    v10 = 0;
LABEL_10:
    v15 = 0;
    goto LABEL_11;
  }
  v10 = 0;
LABEL_17:
  **(_BYTE **)(a1 + 8) = v10 & 1;
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v19 = **(unsigned __int8 **)(a1 + 8);
  HALS_ObjectMap::ReleaseObject(v3, a2);
  return v19 == 0;
}

void sub_1B5BF8D58(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;
  std::__shared_weak_count *v3;
  HALS_ObjectMap *v4;
  HALS_Object *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  HALS_ObjectMap::ReleaseObject(v4, a2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  HALS_ObjectMap::ReleaseObject(v2, v6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_1,std::allocator<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_1>,BOOL ()(HALS_Releaser<HALS_Tap>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK25HALS_IOContextDescription20DoAnyTapsHaveWritersEjE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_1,std::allocator<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_1>,BOOL ()(HALS_Releaser<HALS_Tap>)>::target_type()
{
}

void std::__function::__func<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69971B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69971B0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::operator()(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  int v9;

  v3 = *(HALS_ObjectMap **)a2;
  *(_QWORD *)a2 = 0;
  v4 = *((_QWORD *)v3 + 31);
  v5 = (std::__shared_weak_count *)*((_QWORD *)v3 + 32);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    **(_BYTE **)(a1 + 8) = *(_QWORD *)(v4 + 328) != *(_QWORD *)(v4 + 336);
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    **(_BYTE **)(a1 + 8) = *(_QWORD *)(v4 + 328) != *(_QWORD *)(v4 + 336);
  }
  v9 = **(unsigned __int8 **)(a1 + 8);
  HALS_ObjectMap::ReleaseObject(v3, a2);
  return v9 == 0;
}

uint64_t std::__function::__func<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK25HALS_IOContextDescription20DoAnyTapsHaveWritersEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::DoAnyTapsHaveWriters(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::target_type()
{
}

void std::__function::__func<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69972C0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69972C0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  HALS_Object *v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  v3 = *(os_unfair_lock_s **)(v2 + 248);
  v4 = *(std::__shared_weak_count **)(v2 + 256);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    HALS_MultiTap::register_autostart_context(v3, *(_DWORD *)(a1 + 8));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    HALS_MultiTap::register_autostart_context(*(os_unfair_lock_s **)(v2 + 248), *(_DWORD *)(a1 + 8));
  }
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v2, v7);
  return 1;
}

uint64_t std::__function::__func<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription23RegisterContextWithTapsEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::target_type()
{
}

void std::__function::__func<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E6997340;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E6997340;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  HALS_Object *v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  v3 = *(os_unfair_lock_s **)(v2 + 248);
  v4 = *(std::__shared_weak_count **)(v2 + 256);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    HALS_MultiTap::unregister_autostart_context(v3, *(_DWORD *)(a1 + 8));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    HALS_MultiTap::unregister_autostart_context(*(os_unfair_lock_s **)(v2 + 248), *(_DWORD *)(a1 + 8));
  }
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v2, v7);
  return 1;
}

uint64_t std::__function::__func<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription25UnRegisterContextWithTapsEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::target_type()
{
}

void HALS_DSPStream::~HALS_DSPStream(HALS_DSPStream *this)
{
  HALS_DSPStream::~HALS_DSPStream(this);
  JUMPOUT(0x1B5E50688);
}

{
  void *v2;

  *(_QWORD *)this = off_1E69973C0;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  HALS_Object::~HALS_Object(this);
}

uint64_t HALS_DSPStream::HasProperty(HALS_DSPStream *this, unsigned int a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  signed int mSelector;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v18;
  HALS_Object *v19;
  HALS_ObjectMap *v20;
  uint64_t v21;
  int v22;

  mSelector = a3->mSelector;
  v7 = 1;
  if ((int)a3->mSelector > 1935894637)
  {
    if (mSelector <= 1936092478)
    {
      v13 = mSelector == 1935894638 || mSelector == 1935960434;
      v14 = 1936092451;
    }
    else
    {
      v13 = (mSelector - 1936092479) <= 0x35
         && ((1 << (mSelector - 63)) & 0x20400400000001) != 0
         || mSelector == 1952542835;
      v14 = 1952805485;
    }
    if (v13 || mSelector == v14)
      return v7;
    return HALS_Stream::HasProperty(this, a2, a3, a4);
  }
  if (mSelector <= 1885762591)
  {
    if (mSelector == 1685287027)
      return v7;
    if (mSelector == 1819107691)
    {
      v18 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 7));
      v20 = (HALS_ObjectMap *)v18;
      if (v18)
      {
        v21 = 0x676C6F626C6D616BLL;
        v22 = 0;
        v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t *, HALS_Client *))(*(_QWORD *)v18 + 88))(v18, *((unsigned int *)this + 7), &v21, a4);
      }
      else
      {
        v7 = 0;
      }
      HALS_ObjectMap::ReleaseObject(v20, v19);
      return v7;
    }
    v15 = 1819569763;
LABEL_34:
    if (mSelector != v15)
      return HALS_Stream::HasProperty(this, a2, a3, a4);
    return v7;
  }
  if (mSelector > 1885762656)
  {
    if (mSelector == 1885762657 || mSelector == 1885762669)
      return v7;
    v15 = 1935762292;
    goto LABEL_34;
  }
  v8 = mSelector - 1885762592;
  v9 = v8 > 0x1F;
  v10 = (1 << v8) & 0x80000009;
  if (!v9 && v10 != 0)
    return v7;
  return HALS_Stream::HasProperty(this, a2, a3, a4);
}

void sub_1B5BF9414(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_DSPStream::IsPropertySettable(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  int v6;
  int v8;
  unsigned __int16 v9;

  v3 = 0;
  v4 = *a3;
  if (*a3 > 1935894637)
  {
    if (v4 <= 1936092512)
    {
      if (v4 <= 1936092450)
      {
        v5 = v4 == 1935894638;
        v6 = 1935960434;
        goto LABEL_27;
      }
      v5 = v4 == 1936092451;
      v9 = 27967;
    }
    else
    {
      if (v4 > 1936092531)
      {
        if (v4 == 1952805485 || v4 == 1952542835)
          return v3;
        v8 = 1936092532;
        goto LABEL_21;
      }
      v5 = v4 == 1936092513;
      v9 = 28013;
    }
    v6 = v9 | 0x73660000;
    goto LABEL_27;
  }
  if (v4 > 1885762594)
  {
    if (v4 <= 1885762656)
    {
      v5 = v4 == 1885762595;
      v6 = 1885762623;
    }
    else
    {
      v5 = v4 == 1885762657 || v4 == 1885762669;
      v6 = 1935762292;
    }
LABEL_27:
    if (!v5 && v4 != v6)
      return HALS_Stream::IsPropertySettable(a1, a2, a3);
    return v3;
  }
  if (v4 <= 1819569762)
  {
    v5 = v4 == 1685287027;
    v6 = 1819107691;
    goto LABEL_27;
  }
  if (v4 == 1819569763)
    return v3;
  v8 = 1885762592;
LABEL_21:
  if (v4 == v8)
    return 1;
  return HALS_Stream::IsPropertySettable(a1, a2, a3);
}

uint64_t HALS_DSPStream::GetPropertyDataSize(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  int v4;
  unsigned __int16 v6;
  unsigned __int16 v7;
  int v8;

  v3 = *a3;
  if (*a3 > 1935894637)
  {
    if (v3 <= 1936092512)
    {
      if (v3 <= 1936092450)
      {
        if (v3 == 1935894638)
          return 4;
        v4 = 1935960434;
        goto LABEL_19;
      }
      if (v3 == 1936092451)
        return 56;
      v7 = 27967;
    }
    else
    {
      if (v3 > 1936092531)
      {
        if (v3 != 1936092532)
        {
          if (v3 == 1952542835)
            return 4;
          v4 = 1952805485;
          goto LABEL_19;
        }
        return 40;
      }
      if (v3 == 1936092513)
        return 56;
      v7 = 28013;
    }
    v8 = v7 | 0x73660000;
  }
  else
  {
    if (v3 <= 1885762594)
    {
      if (v3 <= 1819569762)
      {
        if (v3 != 1685287027)
        {
          if (v3 == 1819107691)
            return 8;
          return HALS_Stream::GetPropertyDataSize(a1, a2, a3);
        }
        return 4;
      }
      if (v3 == 1819569763)
        return 4;
      v6 = 29728;
    }
    else
    {
      if (v3 > 1885762656)
      {
        if (v3 != 1885762657)
        {
          if (v3 != 1885762669)
          {
            v4 = 1935762292;
LABEL_19:
            if (v3 != v4)
              return HALS_Stream::GetPropertyDataSize(a1, a2, a3);
            return 4;
          }
          return 40;
        }
        return 56;
      }
      if (v3 == 1885762595)
        return 56;
      v6 = 29759;
    }
    v8 = v6 | 0x70660000;
  }
  if (v3 == v8)
    return 40;
  return HALS_Stream::GetPropertyDataSize(a1, a2, a3);
}

void HALS_DSPStream::GetPropertyData(HALS_DSPStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, _QWORD *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  signed int mSelector;
  _DWORD *v16;
  unsigned int *v17;
  unsigned int *v18;
  HALS_Object *v19;
  HALS_ObjectMap *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  HALS_Object *v24;
  HALS_ObjectMap *v25;
  HALB_Mutex *v26;
  HALS_Object *v27;
  HALS_ObjectMap *v28;
  HALB_Mutex *v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  HALB_Mutex *v34;
  AMCP::Log::Scope_Registry *v35;
  std::__shared_weak_count *v36;
  NSObject *v37;
  unint64_t *v38;
  unint64_t v39;
  _opaque_pthread_t *v40;
  mach_port_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  HALS_Object *v46;
  HALS_ObjectMap *v47;
  HALB_Mutex *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unsigned int v52;
  HALS_Object *v53;
  HALS_ObjectMap *v54;
  HALB_Mutex *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  HALS_Object *v59;
  HALS_ObjectMap *v60;
  HALB_Mutex *v61;
  HALS_Object *v62;
  HALS_ObjectMap *v63;
  HALB_Mutex *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  HALS_Object *v68;
  HALS_ObjectMap *v69;
  HALB_Mutex *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _DWORD *v74;
  _DWORD *v75;
  _DWORD *v76;
  _DWORD *exception;
  _DWORD *v78;
  _DWORD *v79;
  _DWORD *v80;
  _DWORD *v81;
  _DWORD *v82;
  _DWORD *v83;
  _DWORD *v84;
  _DWORD *v85;
  _DWORD *v86;
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  uint64_t v95;
  _BYTE buf[24];
  __n128 (*v97)(uint64_t, uint64_t);
  _BYTE v98[24];
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1935894637)
  {
    if (mSelector <= 1936092512)
    {
      if (mSelector <= 1936092450)
      {
        if (mSelector == 1935894638)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_DSPStream.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 322;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyStartingChannel", buf, 0x12u);
            }
            exception = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)exception = &off_1E69A1B30;
            exception[2] = 561211770;
          }
          goto LABEL_61;
        }
        if (mSelector == 1935960434)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_DSPStream.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 301;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyDirection", buf, 0x12u);
            }
            v75 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v75 = &off_1E69A1B30;
            v75[2] = 561211770;
          }
          v94[0] = MEMORY[0x1E0C809B0];
          v94[1] = 0x40000000;
          v94[2] = ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
          v94[3] = &__block_descriptor_tmp_12174;
          v94[4] = this;
          v94[5] = a6;
          v26 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DSPStream *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v26, (uint64_t)v94);
          goto LABEL_80;
        }
        goto LABEL_104;
      }
      if (mSelector == 1936092451)
      {
        if (a4 <= 0x37)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_DSPStream.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 388;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormats", buf, 0x12u);
          }
          v79 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v79 = &off_1E69A1B30;
          v79[2] = 561211770;
        }
        if (a9 && *((_DWORD *)a9 + 4) == *((_DWORD *)this + 22))
        {
          v47 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
          if (v47)
          {
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x6002000000;
            v97 = __Block_byref_object_copy__12187;
            *(_QWORD *)v98 = __Block_byref_object_dispose__12188;
            v99 = 0u;
            v100 = 0u;
            v101 = 0;
            *(_OWORD *)&v98[8] = 0u;
            v90[0] = MEMORY[0x1E0C809B0];
            v90[1] = 0x40000000;
            v90[2] = ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_11;
            v90[3] = &unk_1E6997538;
            v90[4] = buf;
            v90[5] = this;
            v48 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DSPStream *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v48, (uint64_t)v90);
            v49 = *(_OWORD *)(*(_QWORD *)&buf[8] + 56);
            v50 = *(_OWORD *)(*(_QWORD *)&buf[8] + 72);
            v51 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
            a6[6] = *(_QWORD *)(*(_QWORD *)&buf[8] + 88);
            *((_OWORD *)a6 + 1) = v49;
            *((_OWORD *)a6 + 2) = v50;
            *(_OWORD *)a6 = v51;
            _Block_object_dispose(buf, 8);
          }
          else
          {
            a6[6] = 0;
            *((_OWORD *)a6 + 1) = 0u;
            *((_OWORD *)a6 + 2) = 0u;
            *(_OWORD *)a6 = 0u;
          }
          HALS_ObjectMap::ReleaseObject(v47, v46);
          goto LABEL_101;
        }
        goto LABEL_100;
      }
      if (mSelector != 1936092479)
        goto LABEL_104;
      if (a4 <= 0x27)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_DSPStream.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 414;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatSupported", buf, 0x12u);
        }
        v30 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v30 = &off_1E69A1B30;
        v30[2] = 561211770;
      }
      goto LABEL_76;
    }
    if (mSelector <= 1936092531)
    {
      if (mSelector == 1936092513)
      {
        if (a4 <= 0x37)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_DSPStream.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 362;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyAvailableVirtualFormats", buf, 0x12u);
          }
          v85 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v85 = &off_1E69A1B30;
          v85[2] = 561211770;
        }
        if (a9 && *((_DWORD *)a9 + 4) == *((_DWORD *)this + 22))
        {
          v69 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
          if (v69)
          {
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x6002000000;
            v97 = __Block_byref_object_copy__12187;
            *(_QWORD *)v98 = __Block_byref_object_dispose__12188;
            v99 = 0u;
            v100 = 0u;
            v101 = 0;
            *(_OWORD *)&v98[8] = 0u;
            v91[0] = MEMORY[0x1E0C809B0];
            v91[1] = 0x40000000;
            v91[2] = ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_9;
            v91[3] = &unk_1E6997510;
            v91[4] = buf;
            v91[5] = this;
            v70 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DSPStream *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v70, (uint64_t)v91);
            v71 = *(_OWORD *)(*(_QWORD *)&buf[8] + 56);
            v72 = *(_OWORD *)(*(_QWORD *)&buf[8] + 72);
            v73 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
            a6[6] = *(_QWORD *)(*(_QWORD *)&buf[8] + 88);
            *((_OWORD *)a6 + 1) = v71;
            *((_OWORD *)a6 + 2) = v72;
            *(_OWORD *)a6 = v73;
            _Block_object_dispose(buf, 8);
          }
          else
          {
            a6[6] = 0;
            *((_OWORD *)a6 + 1) = 0u;
            *((_OWORD *)a6 + 2) = 0u;
            *(_OWORD *)a6 = 0u;
          }
          HALS_ObjectMap::ReleaseObject(v69, v68);
          goto LABEL_101;
        }
        goto LABEL_100;
      }
      if (mSelector != 1936092525)
        goto LABEL_104;
      if (a4 <= 0x27)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_DSPStream.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 423;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatMatch", buf, 0x12u);
        }
        v32 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v32 = &off_1E69A1B30;
        v32[2] = 561211770;
      }
      goto LABEL_76;
    }
    switch(mSelector)
    {
      case 1936092532:
        if (a4 <= 0x27)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_DSPStream.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 345;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyVirtualFormat", buf, 0x12u);
          }
          v83 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v83 = &off_1E69A1B30;
          v83[2] = 561211770;
        }
        v60 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
        if (v60)
        {
          v92[0] = MEMORY[0x1E0C809B0];
          v92[1] = 0x40000000;
          v92[2] = ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_7;
          v92[3] = &__block_descriptor_tmp_8_12185;
          v92[4] = this;
          v92[5] = a6;
          v61 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DSPStream *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v61, (uint64_t)v92);
        }
        else
        {
          a6[4] = 0;
          *(_OWORD *)a6 = 0u;
          *((_OWORD *)a6 + 1) = 0u;
        }
        *a5 = 40;
        HALS_ObjectMap::ReleaseObject(v60, v59);
        break;
      case 1952542835:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_DSPStream.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 522;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyIsReferenceStream", buf, 0x12u);
          }
          v81 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v81 = &off_1E69A1B30;
          v81[2] = 561211770;
        }
        *(_DWORD *)a6 = 0;
        goto LABEL_80;
      case 1952805485:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_DSPStream.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 310;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyTerminalType", buf, 0x12u);
          }
          v74 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v74 = &off_1E69A1B30;
          v74[2] = 561211770;
        }
        v17 = (unsigned int *)*((_QWORD *)this + 8);
        if (v17 == *((unsigned int **)this + 9))
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_DSPStream.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 311;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: mPhysicalStreamIDs is empty", buf, 0x12u);
          }
          v86 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v86 = &off_1E69A1B30;
          v86[2] = 1852797029;
        }
        v18 = (unsigned int *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v17);
        v20 = (HALS_ObjectMap *)v18;
        if (v18)
        {
          v21 = v18[4];
          strcpy(buf, "mretbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          v95 = 0;
          (*(void (**)(unsigned int *, uint64_t, _BYTE *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v18 + 112))(v18, v21, buf, 4, &v95, (char *)&v95 + 4, 0, 0, 0);
          v22 = HIDWORD(v95);
        }
        else
        {
          v22 = 0;
        }
        *(_DWORD *)a6 = v22;
        *a5 = 4;
        HALS_ObjectMap::ReleaseObject(v20, v19);
        break;
      default:
        goto LABEL_104;
    }
  }
  else
  {
    if (mSelector > 1885762594)
    {
      if (mSelector > 1885762656)
      {
        if (mSelector != 1885762657)
        {
          if (mSelector != 1885762669)
          {
            if (mSelector == 1935762292)
            {
              if (a4 <= 3)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "HALS_DSPStream.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 292;
                  _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyIsActive", buf, 0x12u);
                }
                v16 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v16 = &off_1E69A1B30;
                v16[2] = 561211770;
              }
LABEL_61:
              *(_DWORD *)a6 = 1;
LABEL_80:
              v52 = 4;
              goto LABEL_102;
            }
            goto LABEL_104;
          }
          if (a4 <= 0x27)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_DSPStream.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 513;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatMatch", buf, 0x12u);
            }
            v80 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v80 = &off_1E69A1B30;
            v80[2] = 561211770;
          }
          goto LABEL_76;
        }
        if (a4 <= 0x37)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_DSPStream.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 456;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyAvailablePhysicalFormats", buf, 0x12u);
          }
          v82 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v82 = &off_1E69A1B30;
          v82[2] = 561211770;
        }
        if (a9 && *((_DWORD *)a9 + 4) == *((_DWORD *)this + 22))
        {
          v54 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
          if (v54)
          {
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x6002000000;
            v97 = __Block_byref_object_copy__12187;
            *(_QWORD *)v98 = __Block_byref_object_dispose__12188;
            v99 = 0u;
            v100 = 0u;
            v101 = 0;
            *(_OWORD *)&v98[8] = 0u;
            v88[0] = MEMORY[0x1E0C809B0];
            v88[1] = 0x40000000;
            v88[2] = ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_15;
            v88[3] = &unk_1E6997580;
            v88[4] = buf;
            v88[5] = this;
            v55 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DSPStream *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v55, (uint64_t)v88);
            v56 = *(_OWORD *)(*(_QWORD *)&buf[8] + 56);
            v57 = *(_OWORD *)(*(_QWORD *)&buf[8] + 72);
            v58 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
            a6[6] = *(_QWORD *)(*(_QWORD *)&buf[8] + 88);
            *((_OWORD *)a6 + 1) = v56;
            *((_OWORD *)a6 + 2) = v57;
            *(_OWORD *)a6 = v58;
            _Block_object_dispose(buf, 8);
          }
          HALS_ObjectMap::ReleaseObject(v54, v53);
          goto LABEL_101;
        }
        goto LABEL_100;
      }
      if (mSelector == 1885762595)
      {
        if (a4 <= 0x37)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_DSPStream.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 478;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormats", buf, 0x12u);
          }
          v84 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v84 = &off_1E69A1B30;
          v84[2] = 561211770;
        }
        if (a9 && *((_DWORD *)a9 + 4) == *((_DWORD *)this + 22))
        {
          v63 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
          if (v63)
          {
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x6002000000;
            v97 = __Block_byref_object_copy__12187;
            *(_QWORD *)v98 = __Block_byref_object_dispose__12188;
            v99 = 0u;
            v100 = 0u;
            v101 = 0;
            *(_OWORD *)&v98[8] = 0u;
            v87[0] = MEMORY[0x1E0C809B0];
            v87[1] = 0x40000000;
            v87[2] = ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_17;
            v87[3] = &unk_1E69975A8;
            v87[4] = buf;
            v87[5] = this;
            v64 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DSPStream *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v64, (uint64_t)v87);
            v65 = *(_OWORD *)(*(_QWORD *)&buf[8] + 56);
            v66 = *(_OWORD *)(*(_QWORD *)&buf[8] + 72);
            v67 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
            a6[6] = *(_QWORD *)(*(_QWORD *)&buf[8] + 88);
            *((_OWORD *)a6 + 1) = v65;
            *((_OWORD *)a6 + 2) = v66;
            *(_OWORD *)a6 = v67;
            _Block_object_dispose(buf, 8);
          }
          else
          {
            a6[6] = 0;
            *((_OWORD *)a6 + 1) = 0u;
            *((_OWORD *)a6 + 2) = 0u;
            *(_OWORD *)a6 = 0u;
          }
          HALS_ObjectMap::ReleaseObject(v63, v62);
          goto LABEL_101;
        }
LABEL_100:
        a6[6] = 0;
        *((_OWORD *)a6 + 1) = 0u;
        *((_OWORD *)a6 + 2) = 0u;
        *(_OWORD *)a6 = 0u;
LABEL_101:
        v52 = 56;
        goto LABEL_102;
      }
      if (mSelector != 1885762623)
        goto LABEL_104;
      if (a4 <= 0x27)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_DSPStream.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 504;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatSupported", buf, 0x12u);
        }
        v31 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v31 = &off_1E69A1B30;
        v31[2] = 561211770;
      }
LABEL_76:
      a6[4] = 0;
      *(_OWORD *)a6 = 0u;
      *((_OWORD *)a6 + 1) = 0u;
LABEL_77:
      v52 = 40;
LABEL_102:
      *a5 = v52;
      return;
    }
    if (mSelector > 1819569762)
    {
      if (mSelector == 1819569763)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_DSPStream.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 331;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyLatency", buf, 0x12u);
          }
          v78 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v78 = &off_1E69A1B30;
          v78[2] = 561211770;
        }
        v93[0] = MEMORY[0x1E0C809B0];
        v93[1] = 0x40000000;
        v93[2] = ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
        v93[3] = &__block_descriptor_tmp_3_12179;
        v93[4] = this;
        v93[5] = a6;
        v34 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DSPStream *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v34, (uint64_t)v93);
        AMCP::Log::Scope_Registry::get(v35);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v36 = *(std::__shared_weak_count **)&buf[8];
        v37 = **(NSObject ***)buf;
        if (*(_QWORD *)&buf[8])
        {
          v38 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          v40 = pthread_self();
          v41 = pthread_mach_thread_np(v40);
          v42 = *((_DWORD *)this + 12);
          v43 = *((_DWORD *)this + 22);
          v44 = *((_DWORD *)this + 4);
          v45 = *(_DWORD *)a6;
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v41;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "HALS_DSPStream.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 337;
          LOWORD(v97) = 1024;
          *(_DWORD *)((char *)&v97 + 2) = v42;
          HIWORD(v97) = 1024;
          *(_DWORD *)v98 = v43;
          *(_WORD *)&v98[4] = 1024;
          *(_DWORD *)&v98[6] = v44;
          *(_WORD *)&v98[10] = 1024;
          *(_DWORD *)&v98[12] = v45;
          _os_log_debug_impl(&dword_1B57BA000, v37, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] (Device ID: %d) (Client ID: %d) (Object ID: %d) Getting DSP Stream adapted latency %d", buf, 0x30u);
        }
        goto LABEL_80;
      }
      if (mSelector != 1885762592)
        goto LABEL_104;
      if (a4 <= 0x27)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_DSPStream.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 432;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormat", buf, 0x12u);
        }
        v76 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v76 = &off_1E69A1B30;
        v76[2] = 561211770;
      }
      if (a9 && *((_DWORD *)a9 + 4) == *((_DWORD *)this + 22))
      {
        v28 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
        if (v28)
        {
          v89[0] = MEMORY[0x1E0C809B0];
          v89[1] = 0x40000000;
          v89[2] = ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_13;
          v89[3] = &__block_descriptor_tmp_14_12195;
          v89[4] = this;
          v89[5] = a6;
          v29 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DSPStream *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v29, (uint64_t)v89);
        }
        else
        {
          a6[4] = 0;
          *(_OWORD *)a6 = 0u;
          *((_OWORD *)a6 + 1) = 0u;
        }
        HALS_ObjectMap::ReleaseObject(v28, v27);
        goto LABEL_77;
      }
      goto LABEL_76;
    }
    if (mSelector == 1685287027)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_DSPStream.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 531;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyIsDSPStream", buf, 0x12u);
        }
        v33 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v33 = &off_1E69A1B30;
        v33[2] = 561211770;
      }
      goto LABEL_61;
    }
    if (mSelector != 1819107691)
    {
LABEL_104:
      HALS_Stream::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
      return;
    }
    v23 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 7));
    v25 = (HALS_ObjectMap *)v23;
    if (v23)
    {
      strcpy(buf, "kamlbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      (*(void (**)(uint64_t, _QWORD, _BYTE *, uint64_t, unsigned int *, _QWORD *, uint64_t, const void *, HALS_Client *))(*(_QWORD *)v23 + 112))(v23, *((unsigned int *)this + 7), buf, a4, a5, a6, a7, a8, a9);
    }
    HALS_ObjectMap::ReleaseObject(v25, v24);
  }
}

void sub_1B5BFACA8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t HALS_DSPStream::AllowClientAccessToProperty()
{
  return 1;
}

uint64_t HALS_DSPStream::GetStartingChannel(HALS_DSPStream *this)
{
  return 0;
}

uint64_t HALS_DSPStream::IsMetaStream(HALS_DSPStream *this)
{
  return 0;
}

uint64_t HALS_DSPStream::GetIOBuffer(HALS_DSPStream *this)
{
  return 0;
}

uint64_t HALS_DSPStream::GetIOBufferByteSize(HALS_DSPStream *this)
{
  return 0;
}

uint64_t ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(_QWORD *)(result + 32) + 52);
  return result;
}

uint64_t ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(_DWORD *)(*(_QWORD *)(result + 32) + 136);
  return result;
}

__n128 ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_7(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  result = *(__n128 *)(v1 + 96);
  v4 = *(_OWORD *)(v1 + 112);
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(v1 + 128);
  *(__n128 *)v2 = result;
  *(_OWORD *)(v2 + 16) = v4;
  return result;
}

__n128 __Block_byref_object_copy__12187(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;

  v2 = *(_OWORD *)(a2 + 40);
  v3 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 40) = v2;
  result = *(__n128 *)(a2 + 80);
  *(__n128 *)(a1 + 80) = result;
  return result;
}

double ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_9(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 40);
  result = *(double *)(v1 + 96);
  v3 = *(_OWORD *)(v1 + 120);
  v4 = *(_OWORD *)(v1 + 104);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  *(double *)(v5 + 40) = result;
  *(_OWORD *)(v5 + 48) = v4;
  *(_OWORD *)(v5 + 64) = v3;
  *(double *)(v5 + 80) = result;
  *(double *)(v5 + 88) = result;
  return result;
}

double ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_11(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 40);
  result = *(double *)(v1 + 96);
  v3 = *(_OWORD *)(v1 + 120);
  v4 = *(_OWORD *)(v1 + 104);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  *(double *)(v5 + 40) = result;
  *(_OWORD *)(v5 + 48) = v4;
  *(_OWORD *)(v5 + 64) = v3;
  *(double *)(v5 + 80) = result;
  *(double *)(v5 + 88) = result;
  return result;
}

__n128 ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_13(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  result = *(__n128 *)(v1 + 96);
  v4 = *(_OWORD *)(v1 + 112);
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(v1 + 128);
  *(__n128 *)v2 = result;
  *(_OWORD *)(v2 + 16) = v4;
  return result;
}

double ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_15(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 40);
  result = *(double *)(v1 + 96);
  v3 = *(_OWORD *)(v1 + 120);
  v4 = *(_OWORD *)(v1 + 104);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  *(double *)(v5 + 40) = result;
  *(_OWORD *)(v5 + 48) = v4;
  *(_OWORD *)(v5 + 64) = v3;
  *(double *)(v5 + 80) = result;
  *(double *)(v5 + 88) = result;
  return result;
}

double ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_17(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 40);
  result = *(double *)(v1 + 96);
  v3 = *(_OWORD *)(v1 + 120);
  v4 = *(_OWORD *)(v1 + 104);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  *(double *)(v5 + 40) = result;
  *(_OWORD *)(v5 + 48) = v4;
  *(_OWORD *)(v5 + 64) = v3;
  *(double *)(v5 + 80) = result;
  *(double *)(v5 + 88) = result;
  return result;
}

__n128 ___ZNK14HALS_DSPStream24GetCurrentPhysicalFormatER27AudioStreamBasicDescription_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  result = *(__n128 *)(v1 + 96);
  v4 = *(_OWORD *)(v1 + 112);
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(v1 + 128);
  *(__n128 *)v2 = result;
  *(_OWORD *)(v2 + 16) = v4;
  return result;
}

void HALS_DSPStream::SetCurrentPhysicalFormat(HALS_DSPStream *this, const AudioStreamBasicDescription *a2)
{
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *v6;
  unint64_t v7;
  HALB_Mutex *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  int v11;
  int v12;
  int v13;
  int mSampleRate;
  UInt32 mChannelsPerFrame;
  _QWORD v16[6];
  uint8_t buf[8];
  _BYTE v18[10];
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  UInt32 v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v4 = *(std::__shared_weak_count **)v18;
  v5 = **(NSObject ***)buf;
  if (*(_QWORD *)v18)
  {
    v6 = (unint64_t *)(*(_QWORD *)v18 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v9 = pthread_self();
    v10 = pthread_mach_thread_np(v9);
    v11 = *((_DWORD *)this + 12);
    v12 = *((_DWORD *)this + 22);
    v13 = *((_DWORD *)this + 4);
    mSampleRate = (int)a2->mSampleRate;
    mChannelsPerFrame = a2->mChannelsPerFrame;
    *(_DWORD *)buf = 67110914;
    *(_DWORD *)&buf[4] = v10;
    *(_WORD *)v18 = 2080;
    *(_QWORD *)&v18[2] = "HALS_DSPStream.cpp";
    v19 = 1024;
    v20 = 568;
    v21 = 1024;
    v22 = v11;
    v23 = 1024;
    v24 = v12;
    v25 = 1024;
    v26 = v13;
    v27 = 1024;
    v28 = mChannelsPerFrame;
    v29 = 1024;
    v30 = mSampleRate;
    _os_log_debug_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] (Device ID: %d) (Client ID: %d) (Object ID: %d) Setting DSP Stream format (%d channels, %6.1d rate)", buf, 0x36u);
  }
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = ___ZN14HALS_DSPStream24SetCurrentPhysicalFormatERK27AudioStreamBasicDescription_block_invoke;
  v16[3] = &__block_descriptor_tmp_20_12210;
  v16[4] = this;
  v16[5] = a2;
  v8 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DSPStream *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v8, (uint64_t)v16);
}

__n128 ___ZN14HALS_DSPStream24SetCurrentPhysicalFormatERK27AudioStreamBasicDescription_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  result = *(__n128 *)v2;
  v4 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v1 + 128) = *(_QWORD *)(v2 + 32);
  *(__n128 *)(v1 + 96) = result;
  *(_OWORD *)(v1 + 112) = v4;
  return result;
}

uint64_t ___ZN14HALS_DSPStream23SetCurrentLatencyFramesEj_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 136) = *(_DWORD *)(result + 40);
  return result;
}

uint64_t AMCP::DAL::DAL_Timed_Segment::DAL_Timed_Segment(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  v5 = *(__int128 *)((char *)a2 + 40);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 64) = a2[4];
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *(_QWORD *)(a1 + 80) = a3;
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void AMCP::DAL::DAL_Timed_Segment::translate_range(double **this, const AMCP::DAL::DAL_Time_Range *a2, uint64_t a3)
{
  double *v4;
  double *v5;
  double v6;
  double v7;
  AMCP::Log::Scope_Registry *v8;
  __n128 v9;
  double v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  double v14;
  std::__shared_weak_count *v16;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  std::logic_error *exception;
  uint64_t v23;
  int v24;
  uint64_t v25;
  std::logic_error v26;
  NSObject *v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  void *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t (**v33)();
  __int128 v34;
  uint64_t v35;
  std::string v36;
  std::logic_error v37;
  std::logic_error v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  uint8_t buf[8];
  _BYTE v46[10];
  __int16 v47;
  int v48;
  _BYTE v49[24];
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  (*(void (**)(const AMCP::DAL::DAL_Time_Range *, uint64_t))(*(_QWORD *)a2 + 16))(a2, a3);
  v4 = *this;
  v5 = this[1];
  if (*this != v5)
  {
    do
    {
      v7 = *v4;
      v6 = v4[1];
      v9.n128_f64[0] = AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (AMCP::DAL::DAL_Time *)(v4 + 7), (AMCP::DAL::DAL_Time *)(v4 + 2));
      if ((buf[0] & 2) == 0)
        AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
      v10 = *(double *)v46;
      v11 = *(std::__shared_weak_count **)&v49[8];
      if (*(_QWORD *)&v49[8])
      {
        v12 = (unint64_t *)(*(_QWORD *)&v49[8] + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v9);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = v6 - v7 - v10;
      if (v14 <= -1.0 || v14 >= 1.0)
      {
        AMCP::Log::Scope_Registry::get(v8);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v16 = *(std::__shared_weak_count **)v46;
        v17 = **(NSObject ***)buf;
        if (*(_QWORD *)v46)
        {
          v18 = (unint64_t *)(*(_QWORD *)v46 + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          v20 = pthread_self();
          v21 = pthread_mach_thread_np(v20);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v21;
          *(_WORD *)v46 = 2080;
          *(_QWORD *)&v46[2] = "DAL_Timed_Segment.cpp";
          v47 = 1024;
          v48 = 92;
          *(_WORD *)v49 = 2080;
          *(_QWORD *)&v49[2] = "not (d.get_double() > -1 and d.get_double() < 1)";
          _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
        exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v36);
        std::logic_error::logic_error(&v37, &v36);
        v23 = MEMORY[0x1E0DE5018];
        v37.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v38, &v37);
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v43 = -1;
        v38.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v39 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
        *(_QWORD *)&v49[8] = "rt_safe_vector<Buffer_Time_Translator::Translation_Range> AMCP::DAL::DAL_Timed_Segment::tra"
                             "nslate_range(const DAL_Time_Range &) const";
        *(_QWORD *)&v49[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
        v50 = 92;
        std::vector<void *>::vector(&v31);
        v24 = backtrace((void **)v31, (*((_QWORD *)&v31 + 1) - (_QWORD)v31) >> 3);
        std::vector<void *>::resize((char **)&v31, v24);
        v34 = v31;
        v35 = v32;
        v31 = 0uLL;
        v32 = 0;
        v33 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v33);
        exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(exception, (const std::logic_error *)buf);
        exception->__vftable = (std::logic_error_vtbl *)(v23 + 16);
        exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v25 = *(_QWORD *)v49;
        exception[1].__imp_.__imp_ = *(const char **)v49;
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
        v26 = *(std::logic_error *)&v49[8];
        LODWORD(exception[3].__vftable) = v50;
        exception[2] = v26;
        exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      if (round(v4[1] - *v4) == 0.0)
      {
        AMCP::Log::Scope_Registry::get(v8);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v27 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          v28 = pthread_self();
          v29 = pthread_mach_thread_np(v28);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v29;
          *(_WORD *)v46 = 2080;
          *(_QWORD *)&v46[2] = "DAL_Timed_Segment.cpp";
          v47 = 1024;
          v48 = 93;
          *(_WORD *)v49 = 2080;
          *(_QWORD *)&v49[2] = "not (i.m_local_range.length() != 0_S)";
          _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
        v30 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v36);
        std::logic_error::logic_error(&v37, &v36);
        v37.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v38, &v37);
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v43 = -1;
        v38.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v39 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
        *(_QWORD *)&v49[8] = "rt_safe_vector<Buffer_Time_Translator::Translation_Range> AMCP::DAL::DAL_Timed_Segment::tra"
                             "nslate_range(const DAL_Time_Range &) const";
        *(_QWORD *)&v49[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
        v50 = 93;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
        v34 = v31;
        v35 = v32;
        v31 = 0uLL;
        v32 = 0;
        v33 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v33);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v30, (uint64_t)buf);
      }
      v4 += 12;
    }
    while (v4 != v5);
  }
}

void sub_1B5BFB710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a35);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *AMCP::DAL::DAL_Timed_Segment::get_audio_buffer_lists(AMCP::DAL::DAL_Timed_Segment *this, uint64_t a2)
{
  double *v4;
  double *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v27;
  std::__shared_weak_count *v28;
  double *v29;
  double *v30;
  double **v31;
  _QWORD v32[5];

  v32[4] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  AMCP::DAL::DAL_Timed_Segment::translate_range(&v29, *(const AMCP::DAL::DAL_Time_Range **)(a2 + 80), a2);
  v4 = v29;
  v5 = v30;
  if (v29 != v30)
  {
    while (1)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a2 + 80) + 56))(&v27);
      if (v27)
      {
        (*(void (**)(double ***__return_ptr, uint64_t, uint64_t *, double, double))(*(_QWORD *)v27 + 64))(&v31, v27, &v27, *v4, v4[1]);
      }
      else
      {
        v31 = 0;
        v32[3] = 0;
      }
      v6 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v9 = (uint64_t *)*((_QWORD *)this + 1);
      v10 = *((_QWORD *)this + 2);
      if ((unint64_t)v9 >= v10)
        break;
      v11 = (uint64_t)v31;
      v31 = 0;
      *v9 = v11;
      v12 = v9 + 5;
      std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)v32);
LABEL_32:
      *((_QWORD *)this + 1) = v12;
      std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v31);
      v4 += 12;
      if (v4 == v5)
        goto LABEL_33;
    }
    v13 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v9 - *(_QWORD *)this) >> 3);
    v14 = v13 + 1;
    if (v13 + 1 > 0x666666666666666)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - *(_QWORD *)this) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x333333333333333)
      v16 = 0x666666666666666;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 > 0x666666666666666 || !*MEMORY[0x1E0DDB4F0])
        __break(1u);
      v17 = caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0]);
    }
    else
    {
      v17 = 0;
    }
    v18 = (uint64_t *)(v17 + 40 * v13);
    v19 = v17 + 40 * v16;
    v20 = (uint64_t)v31;
    v31 = 0;
    *v18 = v20;
    v12 = v18 + 5;
    std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)(v18 + 1), (uint64_t)v32);
    v22 = *(uint64_t **)this;
    v21 = (uint64_t *)*((_QWORD *)this + 1);
    if (v21 == *(uint64_t **)this)
    {
      *(_QWORD *)this = v18;
      *((_QWORD *)this + 1) = v12;
      v25 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v19;
    }
    else
    {
      do
      {
        v23 = *(v21 - 5);
        v21 -= 5;
        *v21 = 0;
        *(v18 - 5) = v23;
        v18 -= 5;
        std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)(v18 + 1), (uint64_t)(v21 + 1));
      }
      while (v21 != v22);
      v24 = *(uint64_t **)this;
      v21 = (uint64_t *)*((_QWORD *)this + 1);
      *(_QWORD *)this = v18;
      *((_QWORD *)this + 1) = v12;
      v25 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v19;
      if (v21 != v24)
      {
        do
        {
          v21 -= 5;
          std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100](v21);
        }
        while (v21 != v24);
        v21 = v24;
        if (!v24)
          goto LABEL_32;
LABEL_31:
        std::allocator_traits<caulk::rt_allocator<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v21, 0xCCCCCCCCCCCCCCCDLL * ((v25 - (uint64_t)v21) >> 3));
        goto LABEL_32;
      }
    }
    if (!v21)
      goto LABEL_32;
    goto LABEL_31;
  }
LABEL_33:
  v31 = &v29;
  return std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v31);
}

void sub_1B5BFBB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::vector<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>,caulk::rt_allocator<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)va);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *std::vector<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>,caulk::rt_allocator<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>>::__destroy_vector::operator()[abi:ne180100](caulk::rt_safe_memory_resource *result)
{
  caulk::rt_safe_memory_resource **v1;
  caulk::rt_safe_memory_resource *v2;
  caulk::rt_safe_memory_resource ***v3;
  uint64_t *v4;
  caulk::rt_safe_memory_resource *v5;
  caulk::rt_safe_memory_resource **v6;

  v1 = *(caulk::rt_safe_memory_resource ***)result;
  v2 = **(caulk::rt_safe_memory_resource ***)result;
  if (v2)
  {
    v3 = (caulk::rt_safe_memory_resource ***)result;
    v4 = (uint64_t *)v1[1];
    v5 = v2;
    v6 = v1;
    if (v4 != (uint64_t *)v2)
    {
      do
        v4 = std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100](v4 - 5);
      while (v4 != (uint64_t *)v2);
      v6 = *v3;
      v5 = **v3;
    }
    v1[1] = v2;
    return std::allocator_traits<caulk::rt_allocator<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>>::deallocate[abi:ne180100](v5, 0xCCCCCCCCCCCCCCCDLL * ((v6[2] - v5) >> 3));
  }
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (a2 < 0x666666666666667)
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

void AMCP::DAL::DAL_Timed_Segment::adjust_length(AMCP::DAL::DAL_Timed_Segment *this, const AMCP::DAL::DAL_Time_Delta *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _BYTE v12[32];
  std::__shared_weak_count *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16[2];
  uint64_t v17;
  __int128 v18;

  boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)v12, (uint64_t)this, (uint64_t)a2);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v14, this, (const AMCP::DAL::DAL_Time *)v12);
  *(_OWORD *)this = v14;
  *((_QWORD *)this + 2) = v15;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)this + 24, v16);
  *(_OWORD *)((char *)this + 40) = v16[1];
  *((_QWORD *)this + 7) = v17;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)this + 64, &v18);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v16[0] + 1);
  if (*((_QWORD *)&v16[0] + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v16[0] + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1B5BFBE04(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 + 24);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Writable_Range::pad_and_receive_data(uint64_t a1, uint64_t a2, AMCP::DAL::DAL_Time *a3)
{
  _BOOL8 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  double sample_time;
  double v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _BOOL8 v31;
  BOOL v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _BOOL8 v45;
  _BOOL8 v46;
  _BOOL8 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  NSObject *v84;
  _opaque_pthread_t *v85;
  mach_port_t v86;
  void *exception;
  NSObject *v88;
  _opaque_pthread_t *v89;
  mach_port_t v90;
  void *v91;
  NSObject *v92;
  _opaque_pthread_t *v93;
  mach_port_t v94;
  void *v95;
  NSObject *v96;
  _opaque_pthread_t *v97;
  mach_port_t v98;
  void *v99;
  NSObject *v100;
  _opaque_pthread_t *v101;
  mach_port_t v102;
  void *v103;
  unsigned __int128 v104;
  uint64_t v105;
  std::string v106;
  uint64_t v107;
  std::logic_error v108;
  void (**v109)();
  std::string v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  char v114;
  std::string v115;
  std::string v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  std::logic_error v123;
  void *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  uint64_t v127;
  int v128;
  std::__shared_weak_count *v129;
  std::string v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  uint64_t (**v137)();
  __int128 v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count *v141;
  NSObject **v142;
  __int16 v143;
  _BYTE v144[14];
  __int128 v145;
  const char *v146;
  int v147;
  std::__shared_weak_count *v148;
  uint8_t v149[24];
  __int16 v150;
  _BYTE v151[14];
  const char *v152;
  int v153;
  std::__shared_weak_count *v154;
  uint8_t buf[8];
  __int16 v156;
  char *v157;
  __int16 v158;
  int v159;
  __int16 v160;
  _BYTE v161[14];
  const char *v162;
  int v163;
  std::__shared_weak_count *v164;
  _BYTE v165[32];
  std::__shared_weak_count *v166;
  std::__shared_weak_count *v167;
  uint64_t v168;

  v168 = *MEMORY[0x1E0C80C00];
  v6 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)((char *)a3 + 40), a3);
  if (v6)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v84 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
    {
      v85 = pthread_self();
      v86 = pthread_mach_thread_np(v85);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v86;
      v156 = 2080;
      v157 = "DAL_Timed_Segment.cpp";
      v158 = 1024;
      v159 = 108;
      v160 = 2080;
      *(_QWORD *)v161 = "not (source_range_to_read.get_time_range().end() >= source_range_to_read.get_time_range().start())";
      _os_log_error_impl(&dword_1B57BA000, v84, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Writable_Range::RecieveData: Bad time range", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v109);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Writable_Range::RecieveData: Bad time range", (uint64_t)&v130);
    std::logic_error::logic_error((std::logic_error *)&v142, &v130);
    v142 = (NSObject **)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v123, (const std::logic_error *)&v142);
    v125 = 0;
    v126 = 0;
    v127 = 0;
    v128 = -1;
    v123.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v124 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v123);
    *(_QWORD *)&v161[6] = "void AMCP::DAL::Writable_Range::pad_and_receive_data(const Source_ID &, const Readable_Range &)";
    v162 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
    v163 = 108;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v149);
    v138 = *(_OWORD *)v149;
    v137 = off_1E69A20A0;
    v139 = *(_QWORD *)&v149[16];
    memset(v149, 0, sizeof(v149));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v137);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  (*(void (**)(uint64_t (***__return_ptr)()))(**((_QWORD **)a3 + 10) + 64))(&v137);
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersection((uint64_t)buf, a3, &v137);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v130, (__int128 *)buf);
  v7 = v164;
  if (v164)
  {
    p_shared_owners = (unint64_t *)&v164->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(std::__shared_weak_count **)&v161[6];
  if (*(_QWORD *)&v161[6])
  {
    v11 = (unint64_t *)(*(_QWORD *)&v161[6] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v130);
  sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v133);
  v14 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v130);
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v133);
  if (round(sample_time) < round(v14))
  {
    caulk::make_empty_time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>((uint64_t)buf, (uint64_t)&v130);
    AMCP::DAL::DAL_Time_Range::operator=((uint64_t)&v130, (uint64_t)buf);
    v15 = v164;
    if (v164)
    {
      v16 = (unint64_t *)&v164->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = *(std::__shared_weak_count **)&v161[6];
    if (*(_QWORD *)&v161[6])
    {
      v19 = (unint64_t *)(*(_QWORD *)&v161[6] + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  v116 = v130;
  v117 = v131;
  v118 = v132;
  if (v132)
  {
    v21 = (unint64_t *)&v132->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v119 = v133;
  v120 = v134;
  v121 = v135;
  v122 = v136;
  if (v136)
  {
    v23 = (unint64_t *)&v136->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  AMCP::DAL::Readable_Range::Readable_Range((uint64_t)&v123, (uint64_t)&v116, (uint64_t)a3);
  v25 = v122;
  if (v122)
  {
    v26 = (unint64_t *)&v122->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v118;
  if (v118)
  {
    v29 = (unint64_t *)&v118->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::difference((uint64_t)buf, a1, &v137);
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::union_range((uint64_t)&v142, (AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v130);
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::union_range((uint64_t)v149, (AMCP::DAL::DAL_Time *)&v142, (AMCP::DAL::DAL_Time *)v165);
  v31 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::operator==((uint64_t)v149, a1);
  v32 = v31;
  v33 = v154;
  if (v154)
  {
    v34 = (unint64_t *)&v154->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = *(std::__shared_weak_count **)&v151[6];
  if (*(_QWORD *)&v151[6])
  {
    v37 = (unint64_t *)(*(_QWORD *)&v151[6] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v148;
  if (v148)
  {
    v40 = (unint64_t *)&v148->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (!v32)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v31);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v149, "com.apple.coreaudio", "AMCP");
    v88 = **(NSObject ***)v149;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v149);
    if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
    {
      v89 = pthread_self();
      v90 = pthread_mach_thread_np(v89);
      *(_DWORD *)v149 = 67109890;
      *(_DWORD *)&v149[4] = v90;
      *(_WORD *)&v149[8] = 2080;
      *(_QWORD *)&v149[10] = "DAL_Timed_Segment.cpp";
      *(_WORD *)&v149[18] = 1024;
      *(_DWORD *)&v149[20] = 121;
      v150 = 2080;
      *(_QWORD *)v151 = "not (zero_ranges.first.union_range(data_time_range_to_read).union_range(zero_ranges.second) == g"
                        "et_time_range())";
      _os_log_error_impl(&dword_1B57BA000, v88, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Union of zero and data ranges should equal this writable range", v149, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v108);
    v91 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Union of zero and data ranges should equal this writable range", (uint64_t)&v106);
    std::logic_error::logic_error((std::logic_error *)&v104, &v106);
    *(_QWORD *)&v104 = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)&v142, (const std::logic_error *)&v104);
    v145 = 0uLL;
    v146 = 0;
    v147 = -1;
    v142 = (NSObject **)off_1E69A1208;
    *(_QWORD *)&v144[6] = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v149, (uint64_t)&v142);
    *(_QWORD *)&v151[6] = "void AMCP::DAL::Writable_Range::pad_and_receive_data(const Source_ID &, const Readable_Range &)";
    v152 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
    v153 = 121;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v115.__r_.__value_.__l.__data_);
    v109 = (void (**)())off_1E69A20A0;
    v110 = v115;
    memset(&v115, 0, sizeof(v115));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v149, (uint64_t)&v109);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v91, (uint64_t)v149);
  }
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)v149, (__int128 *)buf);
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v162)
    && (!AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v130, (AMCP::DAL::DAL_Time *)&v133)
     || AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v149, (AMCP::DAL::DAL_Time *)&v130)))
  {
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v130, (AMCP::DAL::DAL_Time *)&v133))
    {
      if (!caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersects(buf, &v130))
      {
        v45 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v162);
        if (!v45
          || !(v45 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v130, (AMCP::DAL::DAL_Time *)&v133))
          || !AMCP::DAL::DAL_Time::operator==((AMCP::DAL::DAL_Time *)&v130, (AMCP::DAL::DAL_Time *)&v162)
          && !(v45 = AMCP::DAL::DAL_Time::operator==((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v133)))
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v45);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v142, "com.apple.coreaudio", "AMCP");
          v96 = *v142;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v142);
          if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
          {
            v97 = pthread_self();
            v98 = pthread_mach_thread_np(v97);
            LODWORD(v142) = 67109890;
            HIDWORD(v142) = v98;
            v143 = 2080;
            *(_QWORD *)v144 = "DAL_Timed_Segment.cpp";
            *(_WORD *)&v144[8] = 1024;
            *(_DWORD *)&v144[10] = 129;
            LOWORD(v145) = 2080;
            *(_QWORD *)((char *)&v145 + 2) = "not (zero_ranges.first.touches(data_time_range_to_read))";
            _os_log_error_impl(&dword_1B57BA000, v96, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Zero range should be adjacent to valid range.", (uint8_t *)&v142, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v114);
          v99 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Zero range should be adjacent to valid range.", (uint64_t)&v115);
          std::logic_error::logic_error(&v108, &v115);
          v108.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)&v109, &v108);
          v110.__r_.__value_.__r.__words[2] = 0;
          v111 = 0;
          v112 = 0;
          v113 = -1;
          v109 = off_1E69A1208;
          v110.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v142, (uint64_t)&v109);
          *((_QWORD *)&v145 + 1) = "void AMCP::DAL::Writable_Range::pad_and_receive_data(const Source_ID &, const Readable_Range &)";
          v146 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
          v147 = 129;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v104);
          v106.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
          *(_OWORD *)&v106.__r_.__value_.__r.__words[1] = v104;
          v107 = v105;
          v104 = 0uLL;
          v105 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v142, (uint64_t)&v106);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v99, (uint64_t)&v142);
        }
      }
      v46 = AMCP::DAL::DAL_Time::operator==((AMCP::DAL::DAL_Time *)&v152, (AMCP::DAL::DAL_Time *)&v130);
      if (!v46)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v46);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v142, "com.apple.coreaudio", "AMCP");
        v100 = *v142;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v142);
        if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
        {
          v101 = pthread_self();
          v102 = pthread_mach_thread_np(v101);
          LODWORD(v142) = 67109890;
          HIDWORD(v142) = v102;
          v143 = 2080;
          *(_QWORD *)v144 = "DAL_Timed_Segment.cpp";
          *(_WORD *)&v144[8] = 1024;
          *(_DWORD *)&v144[10] = 130;
          LOWORD(v145) = 2080;
          *(_QWORD *)((char *)&v145 + 2) = "not (zero_range.end() == data_time_range_to_read.start())";
          _os_log_error_impl(&dword_1B57BA000, v100, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Zero range should end where valid range starts.", (uint8_t *)&v142, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v114);
        v103 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Zero range should end where valid range starts.", (uint64_t)&v115);
        std::logic_error::logic_error(&v108, &v115);
        v108.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)&v109, &v108);
        v110.__r_.__value_.__r.__words[2] = 0;
        v111 = 0;
        v112 = 0;
        v113 = -1;
        v109 = off_1E69A1208;
        v110.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v142, (uint64_t)&v109);
        *((_QWORD *)&v145 + 1) = "void AMCP::DAL::Writable_Range::pad_and_receive_data(const Source_ID &, const Readable_Range &)";
        v146 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
        v147 = 130;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v104);
        v106.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
        *(_OWORD *)&v106.__r_.__value_.__r.__words[1] = v104;
        v107 = v105;
        v104 = 0uLL;
        v105 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v142, (uint64_t)&v106);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v103, (uint64_t)&v142);
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint8_t *))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80), a2, v149);
    AMCP::DAL::DAL_Time_Range::operator=((uint64_t)v149, (uint64_t)v165);
  }
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v130, (AMCP::DAL::DAL_Time *)&v133))
    (*(void (**)(_QWORD, uint64_t, std::logic_error *))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), a2, &v123);
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v149, (AMCP::DAL::DAL_Time *)&v152))
  {
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v130, (AMCP::DAL::DAL_Time *)&v133))
    {
      v47 = AMCP::DAL::DAL_Time::operator==((AMCP::DAL::DAL_Time *)v149, (AMCP::DAL::DAL_Time *)&v133);
      if (!v47)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v47);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v142, "com.apple.coreaudio", "AMCP");
        v92 = *v142;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v142);
        if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
        {
          v93 = pthread_self();
          v94 = pthread_mach_thread_np(v93);
          LODWORD(v142) = 67109890;
          HIDWORD(v142) = v94;
          v143 = 2080;
          *(_QWORD *)v144 = "DAL_Timed_Segment.cpp";
          *(_WORD *)&v144[8] = 1024;
          *(_DWORD *)&v144[10] = 146;
          LOWORD(v145) = 2080;
          *(_QWORD *)((char *)&v145 + 2) = "not (data_time_range_to_read.is_empty() || zero_range.start() == data_time_ra"
                                           "nge_to_read.end())";
          _os_log_error_impl(&dword_1B57BA000, v92, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Zero range should start where valid range ends.", (uint8_t *)&v142, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v114);
        v95 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Zero range should start where valid range ends.", (uint64_t)&v115);
        std::logic_error::logic_error(&v108, &v115);
        v108.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)&v109, &v108);
        v110.__r_.__value_.__r.__words[2] = 0;
        v111 = 0;
        v112 = 0;
        v113 = -1;
        v109 = off_1E69A1208;
        v110.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v142, (uint64_t)&v109);
        *((_QWORD *)&v145 + 1) = "void AMCP::DAL::Writable_Range::pad_and_receive_data(const Source_ID &, const Readable_Range &)";
        v146 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
        v147 = 146;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v104);
        v106.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
        *(_OWORD *)&v106.__r_.__value_.__r.__words[1] = v104;
        v107 = v105;
        v104 = 0uLL;
        v105 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v142, (uint64_t)&v106);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v95, (uint64_t)&v142);
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint8_t *))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80), a2, v149);
  }
  v48 = v154;
  if (v154)
  {
    v49 = (unint64_t *)&v154->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = *(std::__shared_weak_count **)&v151[6];
  if (*(_QWORD *)&v151[6])
  {
    v52 = (unint64_t *)(*(_QWORD *)&v151[6] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v167;
  if (v167)
  {
    v55 = (unint64_t *)&v167->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = v166;
  if (v166)
  {
    v58 = (unint64_t *)&v166->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v164;
  if (v164)
  {
    v61 = (unint64_t *)&v164->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = *(std::__shared_weak_count **)&v161[6];
  if (*(_QWORD *)&v161[6])
  {
    v64 = (unint64_t *)(*(_QWORD *)&v161[6] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v129;
  if (v129)
  {
    v67 = (unint64_t *)&v129->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = v126;
  if (v126)
  {
    v70 = (unint64_t *)&v126->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = v136;
  if (v136)
  {
    v73 = (unint64_t *)&v136->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = v132;
  if (v132)
  {
    v76 = (unint64_t *)&v132->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = v141;
  if (v141)
  {
    v79 = (unint64_t *)&v141->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v140;
  if (v140)
  {
    v82 = (unint64_t *)&v140->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
}

void sub_1B5BFCE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  uint64_t a71;
  uint64_t v71;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x290]);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x268]);
  std::pair<caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>,caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>>::~pair(v71 - 256);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a71);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a66);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Writable_Range::receive_data(uint64_t a1, uint64_t a2, AMCP::DAL::DAL_Time *a3)
{
  _BOOL8 v6;
  _BOOL8 v7;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *exception;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  std::string v22;
  std::logic_error v23;
  std::logic_error v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint8_t buf[8];
  __int16 v32;
  char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  _BYTE v37[14];
  const char *v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)((char *)a3 + 40), a3);
  if (v6)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v11;
      v32 = 2080;
      v33 = "DAL_Timed_Segment.cpp";
      v34 = 1024;
      v35 = 163;
      v36 = 2080;
      *(_QWORD *)v37 = "not (incoming_data.get_time_range().end() >= incoming_data.get_time_range().start())";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Writable_Range::RecieveData: Bad time range", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Writable_Range::RecieveData: Bad time range", (uint64_t)&v22);
    std::logic_error::logic_error(&v23, &v22);
    v23.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v25 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    *(_QWORD *)&v37[6] = "void AMCP::DAL::Writable_Range::receive_data(const Source_ID &, const Readable_Range &)";
    v38 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
    v39 = 163;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v7 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::operator==(a1, (uint64_t)a3);
  if (!v7)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v13 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v15;
      v32 = 2080;
      v33 = "DAL_Timed_Segment.cpp";
      v34 = 1024;
      v35 = 164;
      v36 = 2080;
      *(_QWORD *)v37 = "not (get_time_range() == incoming_data.get_time_range())";
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    v16 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v22);
    std::logic_error::logic_error(&v23, &v22);
    v23.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v25 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    *(_QWORD *)&v37[6] = "void AMCP::DAL::Writable_Range::receive_data(const Source_ID &, const Readable_Range &)";
    v38 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
    v39 = 164;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v16, (uint64_t)buf);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, AMCP::DAL::DAL_Time *))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), a2, a3);
}

void sub_1B5BFD73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 112) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 104);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 104) = 0;
  MEMORY[0x1B5E500E8](v29 - 128);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 129));
  _Unwind_Resume(a1);
}

void AMCP::DAL::Writable_Range::Direct_Write_Range::get_audio_buffer_list(AMCP::DAL::Writable_Range::Direct_Write_Range *this, uint64_t a2, std::__shared_weak_count *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v3 = a3;
  v8 = a2;
  v9 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (a2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 56))(a2, &v8);
    v3 = v9;
    if (!v9)
      return;
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 4) = 0;
    if (!a3)
      return;
  }
  v6 = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1B5BFD960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *AMCP::DAL::Writable_Range::get_direct_write_ranges(AMCP::DAL::Writable_Range *this, uint64_t a2)
{
  caulk::rt_safe_memory_resource *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  caulk::rt_safe_memory_resource *v14;
  caulk::rt_safe_memory_resource *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  caulk::rt_safe_memory_resource *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  result = (caulk::rt_safe_memory_resource *)(*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)(a2 + 80)
                                                                                              + 176))(&v23);
  v4 = v23;
  v5 = v24;
  if (v23 == v24)
  {
LABEL_28:
    v25 = &v23;
    return std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v25);
  }
  v6 = 0;
  while (1)
  {
    v7 = *((_QWORD *)this + 2);
    if (v6 < v7)
    {
      result = (caulk::rt_safe_memory_resource *)std::construct_at[abi:ne180100]<AMCP::DAL::Writable_Range::Direct_Write_Range,AMCP::DAL::Buffer_Time_Translator::Translation_Range const&,AMCP::DAL::Container const&,AMCP::DAL::Writable_Range::Direct_Write_Range*>(v6, v4, *(_QWORD *)(v4 + 96), *(_QWORD *)(v4 + 104));
      v6 += 112;
      *((_QWORD *)this + 1) = v6;
      goto LABEL_24;
    }
    v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - *(_QWORD *)this) >> 4);
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) > 0x249249249249249)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *(_QWORD *)this) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x124924924924924)
      v11 = 0x249249249249249;
    else
      v11 = v9;
    if (!v11)
    {
      v12 = 0;
      goto LABEL_16;
    }
    if (v11 > 0x249249249249249)
      break;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (!*MEMORY[0x1E0DDB4F0])
      break;
    v12 = caulk::rt_safe_memory_resource::rt_allocate(result);
LABEL_16:
    v13 = v12 + 112 * v11;
    result = (caulk::rt_safe_memory_resource *)std::construct_at[abi:ne180100]<AMCP::DAL::Writable_Range::Direct_Write_Range,AMCP::DAL::Buffer_Time_Translator::Translation_Range const&,AMCP::DAL::Container const&,AMCP::DAL::Writable_Range::Direct_Write_Range*>(v12 + 112 * v8, v4, *(_QWORD *)(v4 + 96), *(_QWORD *)(v4 + 104));
    v6 = (unint64_t)result + 112;
    v14 = *(caulk::rt_safe_memory_resource **)this;
    v15 = (caulk::rt_safe_memory_resource *)*((_QWORD *)this + 1);
    if (v15 == *(caulk::rt_safe_memory_resource **)this)
    {
      *(_QWORD *)this = result;
      *((_QWORD *)this + 1) = v6;
      v22 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v13;
      if (!v15)
        goto LABEL_24;
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = (char *)result + v16;
        v18 = (char *)v15 + v16;
        *((_OWORD *)v17 - 7) = *(_OWORD *)((char *)v15 + v16 - 112);
        v19 = *(_OWORD *)((char *)v15 + v16 - 96);
        *((_QWORD *)v17 - 10) = *(_QWORD *)((char *)v15 + v16 - 80);
        *((_OWORD *)v17 - 6) = v19;
        *(_OWORD *)(v17 - 72) = *(_OWORD *)((char *)v15 + v16 - 72);
        *((_QWORD *)v18 - 9) = 0;
        *((_QWORD *)v18 - 8) = 0;
        v20 = *(_OWORD *)((char *)v15 + v16 - 56);
        *((_QWORD *)v17 - 5) = *(_QWORD *)((char *)v15 + v16 - 40);
        *(_OWORD *)(v17 - 56) = v20;
        *((_OWORD *)v17 - 2) = *(_OWORD *)((char *)v15 + v16 - 32);
        *((_QWORD *)v18 - 4) = 0;
        *((_QWORD *)v18 - 3) = 0;
        *((_OWORD *)v17 - 1) = *(_OWORD *)((char *)v15 + v16 - 16);
        *((_QWORD *)v18 - 2) = 0;
        *((_QWORD *)v18 - 1) = 0;
        v16 -= 112;
      }
      while ((caulk::rt_safe_memory_resource *)((char *)v15 + v16) != v14);
      v21 = *(caulk::rt_safe_memory_resource **)this;
      v15 = (caulk::rt_safe_memory_resource *)*((_QWORD *)this + 1);
      *(_QWORD *)this = (char *)result + v16;
      *((_QWORD *)this + 1) = v6;
      v22 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v13;
      if (v15 != v21)
      {
        do
        {
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v15 - 16);
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v15 - 32);
          result = (caulk::rt_safe_memory_resource *)std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v15 - 72);
          v15 = (caulk::rt_safe_memory_resource *)((char *)v15 - 112);
        }
        while (v15 != v21);
        v15 = v21;
      }
      if (!v15)
        goto LABEL_24;
    }
    result = std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::deallocate[abi:ne180100](v15, 0x6DB6DB6DB6DB6DB7 * ((v22 - (uint64_t)v15) >> 4));
LABEL_24:
    *((_QWORD *)this + 1) = v6;
    v4 += 112;
    if (v4 == v5)
      goto LABEL_28;
  }
  __break(1u);
  return result;
}

void sub_1B5BFDBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::vector<AMCP::DAL::Writable_Range::Direct_Write_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<AMCP::DAL::Writable_Range::Direct_Write_Range,AMCP::DAL::Buffer_Time_Translator::Translation_Range const&,AMCP::DAL::Container const&,AMCP::DAL::Writable_Range::Direct_Write_Range*>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t *v5;
  unint64_t v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __n128 v12;

  v12.n128_u64[0] = a3;
  v12.n128_u64[1] = a4;
  if (a4)
  {
    v5 = (unint64_t *)(a4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>::pair[abi:ne180100]<AMCP::DAL::Buffer_Time_Translator::Translation_Range&,AMCP::DAL::Container,0>(a1, a2, &v12);
  v8 = (std::__shared_weak_count *)v12.n128_u64[1];
  if (v12.n128_u64[1])
  {
    v9 = (unint64_t *)(v12.n128_u64[1] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

void AMCP::DAL::Writable_Range::commit_direct_write(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v3 = *(std::__shared_weak_count **)(a3 + 104);
  v8 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  if (v8)
  {
    v6 = (unint64_t *)&v8->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1B5BFDD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AMCP::DAL::create_readable_range(AMCP::DAL *this, const AMCP::DAL::DAL_Time_Range *a2, AMCP::DAL::Ring_Buffer_Base *a3)
{
  _BOOL8 v6;
  BOOL v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  _opaque_pthread_t *v29;
  mach_port_t v30;
  void *exception;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t (**v42)();
  __int128 v43;
  uint64_t v44;
  std::string v45;
  std::logic_error v46;
  std::logic_error v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char v53;
  uint8_t buf[8];
  __int16 v55;
  char *v56;
  __int16 v57;
  int v58;
  __int16 v59;
  _BYTE v60[14];
  const char *v61;
  int v62;
  std::__shared_weak_count *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint8_t *__return_ptr, AMCP::DAL::Ring_Buffer_Base *))(*(_QWORD *)a3 + 64))(buf, a3);
  v6 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses((uint64_t)buf, (uint64_t)a2);
  v7 = v6;
  v8 = v63;
  if (v63)
  {
    p_shared_owners = (unint64_t *)&v63->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *(std::__shared_weak_count **)&v60[6];
  if (*(_QWORD *)&v60[6])
  {
    v12 = (unint64_t *)(*(_QWORD *)&v60[6] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!v7)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v28 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v29 = pthread_self();
      v30 = pthread_mach_thread_np(v29);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v30;
      v55 = 2080;
      v56 = "DAL_Timed_Segment.cpp";
      v57 = 1024;
      v58 = 268;
      v59 = 2080;
      *(_QWORD *)v60 = "not (buffer.get_time_range().encompasses(range))";
      _os_log_error_impl(&dword_1B57BA000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v45);
    std::logic_error::logic_error(&v46, &v45);
    v46.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v47, &v46);
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = -1;
    v47.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v48 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v47);
    *(_QWORD *)&v60[6] = "Readable_Range AMCP::DAL::create_readable_range(const DAL_Time_Range &, Ring_Buffer_Base &)";
    v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
    v62 = 268;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
    v43 = v40;
    v44 = v41;
    v40 = 0uLL;
    v41 = 0;
    v42 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v42);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v32 = *(_OWORD *)a2;
  v14 = *((_QWORD *)a2 + 3);
  v33 = *((_QWORD *)a2 + 2);
  v34 = v14;
  v15 = (std::__shared_weak_count *)*((_QWORD *)a2 + 4);
  v35 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v36 = *(_OWORD *)((char *)a2 + 40);
  v18 = *((_QWORD *)a2 + 8);
  v37 = *((_QWORD *)a2 + 7);
  v38 = v18;
  v19 = (std::__shared_weak_count *)*((_QWORD *)a2 + 9);
  v39 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  AMCP::DAL::Ring_Buffer_Base::create_readable_range((uint64_t)a3, (uint64_t)&v32, (uint64_t)this);
  v22 = v39;
  if (v39)
  {
    v23 = (unint64_t *)&v39->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v35;
  if (v35)
  {
    v26 = (unint64_t *)&v35->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1B5BFE0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  uint64_t v38;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v38);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v37);
  _Unwind_Resume(a1);
}

void HALS_IOUAObject::~HALS_IOUAObject(HALS_IOUAObject *this, HALS_Object *a2)
{
  HALS_IOUAObject::~HALS_IOUAObject(this, a2);
  JUMPOUT(0x1B5E50688);
}

{
  HALS_ObjectMap *v3;
  HALS_IOUAObject *v4;
  void *v5;

  *(_QWORD *)this = &off_1E6997668;
  v3 = (HALS_ObjectMap *)*((_QWORD *)this + 1);
  v4 = (HALS_ObjectMap *)((char *)v3 + 328);
  if (!v3)
    v4 = 0;
  if (v4 != this)
    HALS_ObjectMap::ReleaseObject(v3, a2);
  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 4) = v5;
    operator delete(v5);
  }
}

BOOL HALS_IOUAObject::IsCustomProperty(HALS_IOUAObject *this, int a2)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = (_DWORD *)*((_QWORD *)this + 3);
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      v2 += 3;
      if (v2 == v3)
      {
        v2 = (_DWORD *)*((_QWORD *)this + 4);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

void HALS_IOUAObject::CacheCustomPropertyInfo(HALS_IOUAObject *this)
{
  uint64_t v2;
  unsigned int *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _BOOL4 HasProperty;
  _BOOL4 v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t PropertySize;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  std::__shared_weak_count *v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  int v37;
  int shared_owners;
  BOOL v40;
  unint64_t v42;
  unint64_t v43;
  std::__shared_weak_count_vtbl *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  std::__shared_weak_count_vtbl *v53;
  _DWORD *v54;
  _DWORD *v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  std::__shared_weak_count *v59;
  size_t v60;
  void *__p;
  std::__shared_weak_count *v62;
  char *v63;
  AudioObjectPropertyAddress v64;
  unint64_t v65;

  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
  *(_QWORD *)&v64.mSelector = 0x676C6F6263757374;
  v64.mElement = 0;
  v2 = *((_QWORD *)this + 1);
  v3 = *(unsigned int **)(v2 + 792);
  v4 = *(std::__shared_weak_count **)(v2 + 800);
  __p = v3;
  v62 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)v3[1], &v64, *((_DWORD *)this + 4));
  v8 = HasProperty;
  if (!v4)
    goto LABEL_8;
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v8)
      return;
  }
  else
  {
LABEL_8:
    if (!HasProperty)
      return;
  }
  v11 = *((_QWORD *)this + 1);
  v12 = *(_QWORD *)(v11 + 792);
  v13 = *(std::__shared_weak_count **)(v11 + 800);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *((_DWORD *)this + 4);
  if (!HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v12 + 4), (const AudioObjectPropertyAddress *)"tsucbolg", v16)|| (PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v12 + 4), (const AudioObjectPropertyAddress *)"tsucbolg", v16, 0, 0), (v65 = PropertySize) == 0))
  {
    __p = 0;
    v62 = 0;
    v63 = 0;
    goto LABEL_27;
  }
  std::vector<AudioServerPlugInCustomPropertyInfo>::vector(&__p, PropertySize / 0xC);
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v12 + 4), (const AudioObjectPropertyAddress *)"tsucbolg", v16, 0, 0, __p, &v65);
  v18 = v65 / 0xC;
  v19 = v62;
  v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v62 - (_BYTE *)__p) >> 2);
  v21 = v65 / 0xC - v20;
  if (v65 / 0xC <= v20)
  {
    if (v65 / 0xC >= v20)
      goto LABEL_27;
    v59 = (std::__shared_weak_count *)((char *)__p + 12 * v18);
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * ((v63 - (char *)v62) >> 2) < v21)
    {
      if (0x5555555555555556 * ((v63 - (_BYTE *)__p) >> 2) > v18)
        v18 = 0x5555555555555556 * ((v63 - (_BYTE *)__p) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v63 - (_BYTE *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v22 = 0x1555555555555555;
      else
        v22 = v18;
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v22);
      v24 = &v23[12 * v20];
      v26 = &v23[12 * v25];
      v27 = 12 * ((12 * v21 - 12) / 0xC) + 12;
      bzero(v24, v27);
      v28 = (std::__shared_weak_count *)&v24[v27];
      v30 = __p;
      v29 = v62;
      if (v62 != __p)
      {
        do
        {
          v31 = *(_QWORD *)(v29 - 3);
          v29 -= 3;
          v32 = v29[2];
          *(_QWORD *)(v24 - 12) = v31;
          v24 -= 12;
          *((_DWORD *)v24 + 2) = v32;
        }
        while (v29 != v30);
        v29 = __p;
      }
      __p = v24;
      v62 = v28;
      v63 = v26;
      if (v29)
        operator delete(v29);
      goto LABEL_27;
    }
    v60 = 12 * ((12 * v21 - 12) / 0xC) + 12;
    bzero(v62, v60);
    v59 = (std::__shared_weak_count *)((char *)v19 + v60);
  }
  v62 = v59;
LABEL_27:
  if (v13)
  {
    v33 = (unint64_t *)&v13->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v35 = (std::__shared_weak_count *)__p;
  v36 = v62;
  if (__p != v62)
  {
    do
    {
      v37 = HIDWORD(v35->__vftable);
      if (v37 == 1886155636 || v37 == 1667658612)
      {
        shared_owners = v35->__shared_owners_;
        v40 = !shared_owners || shared_owners == 1886155636;
        if (v40 || shared_owners == 1667658612)
        {
          v43 = *((_QWORD *)this + 4);
          v42 = *((_QWORD *)this + 5);
          if (v43 >= v42)
          {
            v46 = *((_QWORD *)this + 3);
            v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - v46) >> 2);
            v48 = v47 + 1;
            if (v47 + 1 > 0x1555555555555555)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - v46) >> 2);
            if (2 * v49 > v48)
              v48 = 2 * v49;
            if (v49 >= 0xAAAAAAAAAAAAAAALL)
              v50 = 0x1555555555555555;
            else
              v50 = v48;
            if (v50)
              v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v50);
            else
              v51 = 0;
            v52 = v50 + 12 * v47;
            v53 = v35->__vftable;
            *(_DWORD *)(v52 + 8) = v35->__shared_owners_;
            *(_QWORD *)v52 = v53;
            v55 = (_DWORD *)*((_QWORD *)this + 3);
            v54 = (_DWORD *)*((_QWORD *)this + 4);
            v56 = v52;
            if (v54 != v55)
            {
              do
              {
                v57 = *(_QWORD *)(v54 - 3);
                v54 -= 3;
                v58 = v54[2];
                *(_QWORD *)(v56 - 12) = v57;
                v56 -= 12;
                *(_DWORD *)(v56 + 8) = v58;
              }
              while (v54 != v55);
              v54 = (_DWORD *)*((_QWORD *)this + 3);
            }
            v45 = v52 + 12;
            *((_QWORD *)this + 3) = v56;
            *((_QWORD *)this + 4) = v52 + 12;
            *((_QWORD *)this + 5) = v50 + 12 * v51;
            if (v54)
              operator delete(v54);
          }
          else
          {
            v44 = v35->__vftable;
            *(_DWORD *)(v43 + 8) = v35->__shared_owners_;
            *(_QWORD *)v43 = v44;
            v45 = v43 + 12;
          }
          *((_QWORD *)this + 4) = v45;
        }
      }
      v35 = (std::__shared_weak_count *)((char *)v35 + 12);
    }
    while (v35 != v36);
    v35 = (std::__shared_weak_count *)__p;
  }
  if (v35)
  {
    v62 = v35;
    operator delete(v35);
  }
}

void sub_1B5BFE694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_IOUAObject::HALS_IOUAObject(HALS_IOUAObject *this, HALS_IOUADriver *a2, int a3)
{
  HALS_IOUAObject *v3;

  *(_QWORD *)this = &off_1E6997668;
  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 4) = a3;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v3 = (HALS_IOUADriver *)((char *)a2 + 328);
  if (!a2)
    v3 = 0;
  if (v3 != this)
    HALS_ObjectMap::RetainObject(a2, a2);
}

void sub_1B5BFE79C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

BOOL HALS_IOUAObject::IsPropertySettable(HALS_IOUAObject *this, const AudioObjectPropertyAddress *a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _BOOL8 IsPropertySettable;
  unint64_t *v12;
  unint64_t v13;

  if (!(*(unsigned int (**)(HALS_IOUAObject *, _QWORD, const AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 16))(this, a2->mSelector, a3, a4))return 0;
  v6 = *((_QWORD *)this + 1);
  v7 = *(_QWORD *)(v6 + 792);
  v8 = *(std::__shared_weak_count **)(v6 + 800);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  IsPropertySettable = HALS_IOUAUCDriver::GetIsPropertySettable((HALS_IOUAUCDriver *)*(unsigned int *)(v7 + 4), a2, *((_DWORD *)this + 4));
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return IsPropertySettable;
}

void sub_1B5BFE87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOUAObject::GetPropertyDataSize(HALS_IOUAObject *this, _DWORD *a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, HALS_Client *a6)
{
  uint64_t result;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  std::runtime_error v21;
  std::runtime_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  const char *v34;
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(HALS_IOUAObject *, _QWORD, const AudioObjectPropertyAddress *, uint64_t, const void *, HALS_Client *))(*(_QWORD *)this + 16))(this, *a2, a3, a4, a5, a6);
  if ((_DWORD)result)
  {
    v9 = (_DWORD *)*((_QWORD *)this + 3);
    v10 = (_DWORD *)*((_QWORD *)this + 4);
    if (v9 != v10)
    {
      while (*v9 != *a2)
      {
        v9 += 3;
        if (v9 == v10)
          goto LABEL_11;
      }
    }
    if (v9 == v10)
    {
LABEL_11:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v12 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v13 = pthread_self();
        v14 = pthread_mach_thread_np(v13);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v14;
        v30 = 2080;
        v31 = "HALS_IOUAObject.cpp";
        v32 = 1024;
        v33 = 169;
        _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Unknown Property", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
      exception = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v21, "Unknown property");
      std::runtime_error::runtime_error(&v22, &v21);
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = -1;
      v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v23 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
      v34 = "UInt32 HALS_IOUAObject::GetPropertyDataSize(AudioObjectID, const AudioObjectPropertyAddress &, UInt32, const"
            " void *, HALS_Client *) const";
      v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAObject.cpp";
      v36 = 169;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
      v18 = off_1E69A20A0;
      v19 = v16;
      v20 = v17;
      v16 = 0uLL;
      v17 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
    v11 = v9[1];
    if (v11 == 1667658612)
      return 8;
    else
      return 8 * (v11 == 1886155636);
  }
  return result;
}

void sub_1B5BFEAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, void *a19, uint64_t a20)
{
  void *v20;
  int v21;
  uint64_t v22;
  uint64_t v24;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v22 - 96) = &unk_1E69A2000;
  v24 = *(_QWORD *)(v22 - 88);
  if (v24 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24))
    *(_QWORD *)(v22 - 88) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v22 - 112));
  a19 = &unk_1E69A2000;
  if (a20 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a20 + 32))(a20))
    a20 = 0;
  std::runtime_error::~runtime_error(&a18);
  std::runtime_error::~runtime_error(&a17);
  if (v21)
    __cxa_free_exception(v20);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v22 - 113));
  _Unwind_Resume(a1);
}

void HALS_IOUAObject::GetPropertyData(HALS_IOUAObject *this, unsigned int *a2, const AudioObjectPropertyAddress *a3, AMCP::Log::Scope_Registry **a4, unsigned int *a5, void *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  AMCP::Log::Scope_Registry *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  AudioObjectPropertyElement v23;
  const __CFData *v24;
  NSObject *v25;
  _opaque_pthread_t *v26;
  mach_port_t v27;
  void *v28;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t PropertySize;
  AMCP::Log::Scope_Registry *v32;
  AMCP::Log::Scope_Registry *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  _opaque_pthread_t *v37;
  mach_port_t v38;
  void *exception;
  NSObject *v40;
  _opaque_pthread_t *v41;
  mach_port_t v42;
  void *v43;
  NSObject *v44;
  _opaque_pthread_t *v45;
  mach_port_t v46;
  void *v47;
  std::runtime_error v48;
  uint64_t v49;
  std::runtime_error v50;
  char v51;
  CFStringRef errorString;
  size_t bufferSize;
  CFDataRef *v54;
  char *buffer[2];
  uint64_t v56;
  uint64_t (**v57)();
  std::runtime_error v58;
  uint64_t v59;
  std::runtime_error v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  CFDataRef v66;
  AudioObjectPropertyAddress v67;
  uint8_t buf[8];
  __int16 v69;
  char *v70;
  __int16 v71;
  int v72;
  __int16 v73;
  _BYTE v74[14];
  const char *v75;
  int v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v14 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_IOUAObject *, _QWORD, const AudioObjectPropertyAddress *, AMCP::Log::Scope_Registry **, unsigned int *, void *, uint64_t, const void *))(*(_QWORD *)this + 16))(this, *a2, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)v14)
  {
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v36 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      v37 = pthread_self();
      v38 = pthread_mach_thread_np(v37);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v38;
      v69 = 2080;
      v70 = "HALS_IOUAObject.cpp";
      v71 = 1024;
      v72 = 193;
      _os_log_error_impl(&dword_1B57BA000, v36, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Unknown Property", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v48, "Unknown property");
    std::runtime_error::runtime_error(&v60, &v48);
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = -1;
    v60.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v61 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v60);
    *(_QWORD *)&v74[6] = "void HALS_IOUAObject::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &, UInt32"
                         ", UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
    v75 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAObject.cpp";
    v76 = 193;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(buffer);
    v58 = *(std::runtime_error *)buffer;
    v57 = off_1E69A20A0;
    v59 = v56;
    buffer[0] = 0;
    buffer[1] = 0;
    v56 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v57);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (a5)
  {
    v15 = *(const void **)a5;
    if (*(_QWORD *)a5)
      CFRetain(*(CFTypeRef *)a5);
  }
  else
  {
    v15 = 0;
  }
  v16 = *((_QWORD *)this + 1);
  v17 = *(_QWORD *)(v16 + 792);
  v18 = *(std::__shared_weak_count **)(v16 + 800);
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v21 = *((_DWORD *)this + 4);
  v22 = *(_QWORD *)a2;
  v23 = a2[2];
  if (v15)
  {
    CFRetain(v15);
    *(_QWORD *)&v67.mSelector = v22;
    v67.mElement = v23;
    v24 = IOCFSerialize(v15, 0);
    v66 = v24;
    if (!v24)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v25 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        v26 = pthread_self();
        v27 = pthread_mach_thread_np(v26);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v27;
        v69 = 2080;
        v70 = "HALS_IOUAUCDriver.cpp";
        v71 = 1024;
        v72 = 379;
        v73 = 2080;
        *(_QWORD *)v74 = "(serialized_qualifer) == nullptr";
        _os_log_error_impl(&dword_1B57BA000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to serialize CF qualifer", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
      v28 = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v48, "Failed to serialize CF qualifer");
      std::runtime_error::runtime_error(&v60, &v48);
      v62 = 0;
      v63 = 0;
      v64 = 0;
      v65 = -1;
      v60.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v61 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v60);
      *(_QWORD *)&v74[6] = "CFTypeRef HALS_IOUAUCDriver::get_custom_property_value(AudioObjectID, AudioObjectPropertyAddr"
                           "ess, applesauce::CF::TypeRef)";
      v75 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
      v76 = 379;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(buffer);
      v58 = *(std::runtime_error *)buffer;
      v57 = off_1E69A20A0;
      v59 = v56;
      buffer[0] = 0;
      buffer[1] = 0;
      v56 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v57);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v28, (uint64_t)buf);
    }
  }
  else
  {
    v24 = 0;
    v66 = 0;
    *(_QWORD *)&v67.mSelector = v22;
    v67.mElement = v23;
  }
  v54 = &v66;
  BytePtr = CFDataGetBytePtr(v24);
  Length = CFDataGetLength(v66);
  bufferSize = 0;
  PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v17 + 4), &v67, v21, BytePtr, Length);
  bufferSize = PropertySize;
  if (!PropertySize)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v40 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v41 = pthread_self();
      v42 = pthread_mach_thread_np(v41);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v42;
      v69 = 2080;
      v70 = "HALS_IOUAUCDriver.cpp";
      v71 = 1024;
      v72 = 386;
      v73 = 2080;
      *(_QWORD *)v74 = "out_size == 0";
      _os_log_error_impl(&dword_1B57BA000, v40, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to get_string_property size", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
    v43 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v48, "Failed to get_string_property size");
    std::runtime_error::runtime_error(&v60, &v48);
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = -1;
    v60.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v61 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v60);
    *(_QWORD *)&v74[6] = "CFTypeRef HALS_IOUAUCDriver::get_custom_property_value(AudioObjectID, AudioObjectPropertyAddres"
                         "s, applesauce::CF::TypeRef)";
    v75 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v76 = 386;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(buffer);
    v58 = *(std::runtime_error *)buffer;
    v57 = off_1E69A20A0;
    v59 = v56;
    buffer[0] = 0;
    buffer[1] = 0;
    v56 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v57);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v43, (uint64_t)buf);
  }
  buf[0] = 0;
  std::vector<std::byte>::vector(buffer, PropertySize, buf);
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v17 + 4), &v67, v21, BytePtr, Length, buffer[0], &bufferSize);
  errorString = 0;
  v32 = (AMCP::Log::Scope_Registry *)IOCFUnserializeBinary(buffer[0], bufferSize, (CFAllocatorRef)*MEMORY[0x1E0C9AE08], 0, &errorString);
  if (errorString)
  {
    AMCP::Log::Scope_Registry::get(v32);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v44 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      v45 = pthread_self();
      v46 = pthread_mach_thread_np(v45);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v46;
      v69 = 2080;
      v70 = "HALS_IOUAUCDriver.cpp";
      v71 = 1024;
      v72 = 393;
      v73 = 2080;
      *(_QWORD *)v74 = "error";
      _os_log_error_impl(&dword_1B57BA000, v44, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to deserialize string object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v51);
    v47 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v50, "Failed to deserialize string object");
    std::runtime_error::runtime_error(&v60, &v50);
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = -1;
    v60.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v61 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v60);
    *(_QWORD *)&v74[6] = "CFTypeRef HALS_IOUAUCDriver::get_custom_property_value(AudioObjectID, AudioObjectPropertyAddres"
                         "s, applesauce::CF::TypeRef)";
    v75 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v76 = 393;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v48);
    v58 = v48;
    v57 = off_1E69A20A0;
    v59 = v49;
    v48.__vftable = 0;
    v48.__imp_.__imp_ = 0;
    v49 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v57);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v47, (uint64_t)buf);
  }
  v33 = v32;
  if (buffer[0])
  {
    buffer[1] = buffer[0];
    operator delete(buffer[0]);
  }
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOUAUCDriver::get_custom_property_value(unsigned int,AudioObjectPropertyAddress,applesauce::CF::TypeRef)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((const void ***)&v54);
  *a4 = v33;
  if (v15)
    CFRelease(v15);
  if (v18)
  {
    v34 = (unint64_t *)&v18->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  a3->mSelector = 8;
  if (v15)
    CFRelease(v15);
}

void sub_1B5BFF428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, const void *a12, std::runtime_error a13, uint64_t a14, uint64_t a15, std::runtime_error a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,const void **a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,std::runtime_error a32,uint64_t a33,uint64_t a34)
{
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOUAUCDriver::get_custom_property_value(unsigned int,AudioObjectPropertyAddress,applesauce::CF::TypeRef)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(&a23);
  applesauce::CF::TypeRef::~TypeRef((const void **)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  applesauce::CF::TypeRef::~TypeRef(&a12);
  _Unwind_Resume(a1);
}

void HALS_IOUAObject::SetPropertyData(HALS_IOUAObject *this, unsigned int *a2, const AudioObjectPropertyAddress *a3, CFTypeRef *a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  AMCP::Log::Scope_Registry *v12;
  CFTypeRef v13;
  uint64_t v14;
  HALS_IOUAUCDriver *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  AudioObjectPropertyElement v21;
  const void *v22;
  CFDataRef v23;
  const UInt8 *BytePtr;
  CFIndex Length;
  const __CFData *v26;
  const UInt8 *v27;
  CFIndex v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  _opaque_pthread_t *v32;
  mach_port_t v33;
  void *exception;
  NSObject *v35;
  _opaque_pthread_t *v36;
  mach_port_t v37;
  void *v38;
  NSObject *v39;
  _opaque_pthread_t *v40;
  mach_port_t v41;
  void *v42;
  _QWORD v43[2];
  CFTypeRef cf;
  char v45;
  CFDataRef theData;
  const __CFData **v47;
  __int128 v48;
  uint64_t v49;
  uint64_t (**v50)();
  __int128 v51;
  uint64_t v52;
  std::runtime_error v53;
  std::runtime_error v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  const __CFData *v60;
  AudioObjectPropertyAddress v61;
  uint8_t buf[8];
  __int16 v63;
  char *v64;
  __int16 v65;
  int v66;
  __int16 v67;
  _BYTE v68[14];
  const char *v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v12 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_IOUAObject *, _QWORD, const AudioObjectPropertyAddress *, CFTypeRef *, const void *, uint64_t, const void *, HALS_Client *))(*(_QWORD *)this + 16))(this, *a2, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)v12)
  {
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v31 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v32 = pthread_self();
      v33 = pthread_mach_thread_np(v32);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v33;
      v63 = 2080;
      v64 = "HALS_IOUAObject.cpp";
      v65 = 1024;
      v66 = 214;
      _os_log_error_impl(&dword_1B57BA000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Unknown Property", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v43);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v53, "Unknown property");
    std::runtime_error::runtime_error(&v54, &v53);
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = -1;
    v54.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v55 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v54);
    *(_QWORD *)&v68[6] = "void HALS_IOUAObject::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &, UInt32"
                         ", const void *, UInt32, const void *, HALS_Client *)";
    v69 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAObject.cpp";
    v70 = 214;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v48);
    v50 = off_1E69A20A0;
    v51 = v48;
    v52 = v49;
    v48 = 0uLL;
    v49 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v50);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (a4)
  {
    v13 = *a4;
    if (*a4)
      CFRetain(*a4);
  }
  else
  {
    v13 = 0;
  }
  v14 = *((_QWORD *)this + 1);
  v15 = *(HALS_IOUAUCDriver **)(v14 + 792);
  v16 = *(std::__shared_weak_count **)(v14 + 800);
  v43[0] = v15;
  v43[1] = v16;
  cf = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = *((_DWORD *)this + 4);
  v20 = *(_QWORD *)a2;
  v21 = a2[2];
  if (v13)
    CFRetain(v13);
  v22 = *(const void **)&a3->mSelector;
  if (v22)
    CFRetain(v22);
  *(_QWORD *)&v61.mSelector = v20;
  v61.mElement = v21;
  v23 = IOCFSerialize(v22, 0);
  v60 = v23;
  if (!v23)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v35 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v36 = pthread_self();
      v37 = pthread_mach_thread_np(v36);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v37;
      v63 = 2080;
      v64 = "HALS_IOUAUCDriver.cpp";
      v65 = 1024;
      v66 = 404;
      v67 = 2080;
      *(_QWORD *)v68 = "(data_serialized_data) == nullptr";
      _os_log_error_impl(&dword_1B57BA000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to serialized data CF object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v47);
    v38 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v53, "Failed to serialized data CF object");
    std::runtime_error::runtime_error(&v54, &v53);
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = -1;
    v54.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v55 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v54);
    *(_QWORD *)&v68[6] = "void HALS_IOUAUCDriver::set_custom_property_value(AudioObjectID, AudioObjectPropertyAddress, ap"
                         "plesauce::CF::TypeRef, applesauce::CF::TypeRef)";
    v69 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v70 = 404;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v48);
    v50 = off_1E69A20A0;
    v51 = v48;
    v52 = v49;
    v48 = 0uLL;
    v49 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v50);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v38, (uint64_t)buf);
  }
  v47 = &v60;
  BytePtr = CFDataGetBytePtr(v23);
  Length = CFDataGetLength(v60);
  theData = 0;
  if (v13)
  {
    v26 = IOCFSerialize(v13, 0);
    theData = v26;
    if (!v26)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v39 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        v40 = pthread_self();
        v41 = pthread_mach_thread_np(v40);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v41;
        v63 = 2080;
        v64 = "HALS_IOUAUCDriver.cpp";
        v65 = 1024;
        v66 = 414;
        v67 = 2080;
        *(_QWORD *)v68 = "(qualifier_serialized_data) == nullptr";
        _os_log_error_impl(&dword_1B57BA000, v39, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to serialized qualifier CF object", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v45);
      v42 = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v53, "Failed to serialized qualifier CF object");
      std::runtime_error::runtime_error(&v54, &v53);
      v56 = 0;
      v57 = 0;
      v58 = 0;
      v59 = -1;
      v54.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v55 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v54);
      *(_QWORD *)&v68[6] = "void HALS_IOUAUCDriver::set_custom_property_value(AudioObjectID, AudioObjectPropertyAddress, "
                           "applesauce::CF::TypeRef, applesauce::CF::TypeRef)";
      v69 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
      v70 = 414;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v48);
      v50 = off_1E69A20A0;
      v51 = v48;
      v52 = v49;
      v48 = 0uLL;
      v49 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v50);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v42, (uint64_t)buf);
    }
    *(_QWORD *)buf = &theData;
    v27 = CFDataGetBytePtr(v26);
    if (theData)
      v28 = CFDataGetLength(theData);
    else
      v28 = 0;
  }
  else
  {
    v27 = 0;
    v28 = 0;
    *(_QWORD *)buf = &theData;
  }
  HALS_IOUAUCDriver::SetPropertyData(v15, &v61, v19, v27, v28, BytePtr, Length);
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOUAUCDriver::set_custom_property_value(unsigned int,AudioObjectPropertyAddress,applesauce::CF::TypeRef,applesauce::CF::TypeRef)::$_1,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((const void ***)buf);
  CFRelease(v60);
  if (v22)
    CFRelease(v22);
  if (v13)
    CFRelease(v13);
  if (v16)
  {
    v29 = (unint64_t *)&v16->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (cf)
    CFRelease(cf);
}

void sub_1B5BFFE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, __int16 a11, char a12, char a13, uint64_t a14, const void *a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,CFTypeRef *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,std::runtime_error a30,std::runtime_error a31,uint64_t a32,uint64_t a33)
{
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOUAUCDriver::set_custom_property_value(unsigned int,AudioObjectPropertyAddress,applesauce::CF::TypeRef,applesauce::CF::TypeRef)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(&a21);
  applesauce::CF::TypeRef::~TypeRef((const void **)&a9);
  applesauce::CF::TypeRef::~TypeRef(&a10);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  applesauce::CF::TypeRef::~TypeRef(&a15);
  _Unwind_Resume(a1);
}

void HALS_Object::Activate(HALS_Object *this, HALS_Object *a2)
{
  HALS_Object *v3;
  HALS_Object *v4;
  int v5;
  int v6;
  HALS_Object *v11;
  HALS_ObjectMap *v12;
  const void *v13;
  uint64_t v14;
  HALS_Object *v15;
  HALS_ObjectMap *v16;
  int v17;
  int v21;
  HALS_Object *v22;
  HALS_ObjectMap *v23;
  HALS_Object *v24;

  HALS_ObjectMap::RetainObject(this, a2);
  v4 = this;
  while (v4)
  {
    v5 = *((_DWORD *)v4 + 5);
    v6 = *((_DWORD *)v4 + 6);
    if (v5 == v6)
    {
      if (v5 == 1634757735 || v5 == 1953656941)
        goto LABEL_21;
    }
    else if (v5 == 1634757735 || v5 == 1953656941 || v6 == 1634757735 || v6 == 1953656941)
    {
LABEL_21:
      v13 = (const void *)*((_QWORD *)v4 + 6);
      if (v13)
      {
        CFRetain(v13);
        v14 = *((_QWORD *)v4 + 6);
      }
      else
      {
        v14 = 0;
      }
      *((_QWORD *)this + 4) = v14;
      break;
    }
    v11 = (HALS_Object *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v4 + 7));
    v12 = v4;
    v4 = v11;
    HALS_ObjectMap::ReleaseObject(v12, v11);
  }
  HALS_ObjectMap::RetainObject(this, v3);
  v16 = this;
  while (v16)
  {
    v17 = *((_DWORD *)v16 + 5);
    if (v17 <= 1701078389)
    {
      if (v17 == 1633773415 || v17 == 1633969526)
      {
LABEL_50:
        *((_BYTE *)this + 40) = (*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v16 + 224))(v16);
        break;
      }
    }
    else if (v17 == 1701078390 || v17 == 1701733488 || v17 == 1919182198)
    {
      goto LABEL_50;
    }
    v21 = *((_DWORD *)v16 + 6);
    if (v17 != v21)
    {
      if (v21 <= 1701078389)
      {
        if (v21 == 1633773415 || v21 == 1633969526)
          goto LABEL_50;
      }
      else if (v21 == 1701078390 || v21 == 1701733488 || v21 == 1919182198)
      {
        goto LABEL_50;
      }
    }
    v22 = (HALS_Object *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v16 + 7));
    v23 = v16;
    v16 = v22;
    HALS_ObjectMap::ReleaseObject(v23, v22);
  }
  *((_DWORD *)this + 2) = 1;
  HALS_ObjectMap::ReleaseObject(v16, v15);
  HALS_ObjectMap::ReleaseObject(v4, v24);
}

void sub_1B5C002F8(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_Object::Deactivate(HALS_Object *this)
{
  HALB_Mutex *v1;
  _QWORD v2[5];

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN11HALS_Object10DeactivateEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_12398;
  v2[4] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Object *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v2);
}

void sub_1B5C003A0(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  JUMPOUT(0x1B5C00390);
}

void sub_1B5C003BC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C00390);
}

void HALS_Object::~HALS_Object(HALS_Object *this)
{
  HALS_Object::~HALS_Object(this);
  JUMPOUT(0x1B5E50688);
}

{
  const void *v2;
  HALS_ObjectMap *v3;
  HALB_Mutex *v4;
  int v5;

  *(_QWORD *)this = off_1E69976A8;
  v2 = (const void *)*((_QWORD *)this + 4);
  if (v2)
    CFRelease(v2);
  v3 = (HALS_ObjectMap *)*((unsigned int *)this + 4);
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if ((_DWORD)v3)
  {
    v4 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
    v5 = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
    HALS_ObjectMap::_UnmapObject(v3);
    HALB_Mutex::Locker::~Locker(&v4);
  }
}

uint64_t HALS_Object::_Deactivate(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  return this;
}

uint64_t HALS_Object::IsActive(HALS_Object *this)
{
  int v1;
  uint64_t v2;
  HALS_ObjectMap *v3;
  uint64_t v4;
  HALS_Object *v5;
  HALS_ObjectMap *v6;
  BOOL v7;

  v1 = *((_DWORD *)this + 2);
  v2 = v1 != 0;
  v3 = (HALS_ObjectMap *)*((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = HALS_ObjectMap::CopyObjectByObjectID(v3);
    v6 = (HALS_ObjectMap *)v4;
    if (v1)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (v7)
      v2 = 0;
    else
      v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    HALS_ObjectMap::ReleaseObject(v6, v5);
  }
  return v2;
}

void sub_1B5C00468(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_Object::GetCommandGate(HALS_Object *this)
{
  HALS_ObjectMap *v1;
  uint64_t v2;
  HALS_ObjectMap *v3;
  uint64_t v4;
  HALS_Object *v5;
  _DWORD *exception;
  _DWORD *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = (HALS_ObjectMap *)*((unsigned int *)this + 7);
  if (!(_DWORD)v1)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "HALS_Object.cpp";
      v11 = 1024;
      v12 = 186;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Object::GetCommandGate: ownerless objects must implement their own command gate", (uint8_t *)&v9, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  v2 = HALS_ObjectMap::CopyObjectByObjectID(v1);
  v3 = (HALS_ObjectMap *)v2;
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "HALS_Object.cpp";
      v11 = 1024;
      v12 = 188;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Object::GetCommandGate: this object's owner doesn't exist", (uint8_t *)&v9, 0x12u);
    }
    v8 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v8 = &off_1E69A1B30;
    v8[2] = 560947818;
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  HALS_ObjectMap::ReleaseObject(v3, v5);
  return v4;
}

{
  HALS_ObjectMap *v1;
  uint64_t v2;
  HALS_ObjectMap *v3;
  uint64_t v4;
  HALS_Object *v5;
  _DWORD *exception;
  _DWORD *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = (HALS_ObjectMap *)*((unsigned int *)this + 7);
  if (!(_DWORD)v1)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "HALS_Object.cpp";
      v11 = 1024;
      v12 = 194;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Object::GetCommandGate: ownerless objects must implement their own command gate", (uint8_t *)&v9, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  v2 = HALS_ObjectMap::CopyObjectByObjectID(v1);
  v3 = (HALS_ObjectMap *)v2;
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "HALS_Object.cpp";
      v11 = 1024;
      v12 = 196;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Object::GetCommandGate: this object's owner doesn't exist", (uint8_t *)&v9, 0x12u);
    }
    v8 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v8 = &off_1E69A1B30;
    v8[2] = 560947818;
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  HALS_ObjectMap::ReleaseObject(v3, v5);
  return v4;
}

void sub_1B5C0063C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B5C00828(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t HALS_Object::GetMIGDispatchQueue(HALS_Object *this)
{
  HALS_ObjectMap *v1;
  uint64_t v2;
  HALS_ObjectMap *v3;
  uint64_t v4;
  HALS_Object *v5;
  _DWORD *exception;
  _DWORD *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = (HALS_ObjectMap *)*((unsigned int *)this + 7);
  if (!(_DWORD)v1)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "HALS_Object.cpp";
      v11 = 1024;
      v12 = 202;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Object::GetMIGDispatchQueue: ownerless objects must implement their own dispatch queue", (uint8_t *)&v9, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  v2 = HALS_ObjectMap::CopyObjectByObjectID(v1);
  v3 = (HALS_ObjectMap *)v2;
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "HALS_Object.cpp";
      v11 = 1024;
      v12 = 204;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Object::GetMIGDispatchQueue: this object's owner doesn't exist", (uint8_t *)&v9, 0x12u);
    }
    v8 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v8 = &off_1E69A1B30;
    v8[2] = 560947818;
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  HALS_ObjectMap::ReleaseObject(v3, v5);
  return v4;
}

{
  HALS_ObjectMap *v1;
  uint64_t v2;
  HALS_ObjectMap *v3;
  uint64_t v4;
  HALS_Object *v5;
  _DWORD *exception;
  _DWORD *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = (HALS_ObjectMap *)*((unsigned int *)this + 7);
  if (!(_DWORD)v1)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "HALS_Object.cpp";
      v11 = 1024;
      v12 = 210;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Object::GetMIGDispatchQueue: ownerless objects must implement their own dispatch queue", (uint8_t *)&v9, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  v2 = HALS_ObjectMap::CopyObjectByObjectID(v1);
  v3 = (HALS_ObjectMap *)v2;
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "HALS_Object.cpp";
      v11 = 1024;
      v12 = 212;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Object::GetMIGDispatchQueue: this object's owner doesn't exist", (uint8_t *)&v9, 0x12u);
    }
    v8 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v8 = &off_1E69A1B30;
    v8[2] = 560947818;
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  HALS_ObjectMap::ReleaseObject(v3, v5);
  return v4;
}

void sub_1B5C00A14(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B5C00C00(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t HALS_Object::CopyResourceBundle(HALS_Object *this)
{
  HALS_ObjectMap *v1;
  uint64_t v2;
  HALS_ObjectMap *v3;
  uint64_t v4;
  HALS_Object *v5;
  _DWORD *exception;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = (HALS_ObjectMap *)*((unsigned int *)this + 7);
  if (!(_DWORD)v1)
    return 0;
  v2 = HALS_ObjectMap::CopyObjectByObjectID(v1);
  v3 = (HALS_ObjectMap *)v2;
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v8 = 136315394;
      v9 = "HALS_Object.cpp";
      v10 = 1024;
      v11 = 222;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Object::CopyResourceBundle: this object's owner doesn't exist", (uint8_t *)&v8, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
  HALS_ObjectMap::ReleaseObject(v3, v5);
  return v4;
}

void sub_1B5C00D58(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t HALS_Object::IsPropertySettable(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v4;
  BOOL v5;
  int v6;
  _DWORD *exception;

  result = 0;
  v4 = *a3;
  if (*a3 > 1819107690)
  {
    if (v4 <= 1869638758)
    {
      v5 = v4 == 1819107691 || v4 == 1819111268;
      v6 = 1819173229;
    }
    else if (v4 > 1936618860)
    {
      v5 = v4 == 1936618861;
      v6 = 1937007734;
    }
    else
    {
      v5 = v4 == 1869638759;
      v6 = 1870098020;
    }
  }
  else if (v4 <= 1768187245)
  {
    v5 = v4 == 1650682995 || v4 == 1668047219;
    v6 = 1719105134;
  }
  else
  {
    if (v4 <= 1818454125)
    {
      if (v4 == 1768187246)
        return 1;
      if (v4 != 1818452846)
        goto LABEL_27;
      return result;
    }
    v5 = v4 == 1818454126;
    v6 = 1818455662;
  }
  if (!v5 && v4 != v6)
  {
LABEL_27:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  return result;
}

uint64_t HALS_Object::GetPropertyDataSize(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  uint64_t result;
  unsigned __int16 v5;
  int v7;
  _DWORD *exception;

  v3 = *a3;
  result = 4;
  if (*a3 > 1819107690)
  {
    if (v3 <= 1869638758)
    {
      if (v3 == 1819107691 || v3 == 1819111268)
        return 8;
      v7 = 1819173229;
LABEL_22:
      if (v3 == v7)
        return 8;
LABEL_27:
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 2003332927;
    }
    if (v3 <= 1936618860)
    {
      if (v3 != 1869638759)
      {
        if (v3 == 1870098020)
          return 0;
        goto LABEL_27;
      }
      return 8;
    }
    if (v3 == 1936618861)
      return 8;
    if (v3 != 1937007734)
      goto LABEL_27;
  }
  else
  {
    if (v3 > 1768187245)
    {
      if (v3 <= 1818454125)
      {
        if (v3 == 1768187246)
          return result;
        v5 = 25454;
        goto LABEL_21;
      }
      if (v3 != 1818454126)
      {
        v5 = 28270;
LABEL_21:
        v7 = v5 | 0x6C630000;
        goto LABEL_22;
      }
      return 8;
    }
    if (v3 != 1650682995 && v3 != 1668047219)
    {
      v7 = 1719105134;
      goto LABEL_22;
    }
  }
  return result;
}

uint64_t HALS_Object::GetPropertyData(uint64_t result, uint64_t a2, int *a3, unsigned int a4, int *a5, uint64_t *a6)
{
  int v8;
  int v9;
  int v10;
  _DWORD *exception;
  int v12;
  NSObject *v13;
  const char *v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v15 = 136315394;
      v16 = "HALS_Object.cpp";
      v17 = 1024;
      v18 = 452;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Object::GetPropertyData: no where to put the return value", (uint8_t *)&v15, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v12 = 1852797029;
LABEL_38:
    exception[2] = v12;
  }
  v8 = *a3;
  if (*a3 <= 1869638758)
  {
    if (v8 == 1650682995)
    {
      if (a4 > 3)
      {
        v9 = *(_DWORD *)(result + 24);
        if (v9 == *(_DWORD *)(result + 20))
        {
          result = HALB_Info::GetBaseClass((HALB_Info *)*(unsigned int *)(result + 24));
          v9 = result;
        }
        goto LABEL_19;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_37;
      v15 = 136315394;
      v16 = "HALS_Object.cpp";
      v17 = 1024;
      v18 = 459;
      v13 = MEMORY[0x1E0C81028];
      v14 = "%25s:%-5d  HALS_Object::GetPropertyData: bad property data size for kAudioObjectPropertyBaseClass";
      goto LABEL_36;
    }
    if (v8 != 1668047219)
      goto LABEL_29;
    if (a4 > 3)
    {
      v9 = *(_DWORD *)(result + 20);
      goto LABEL_19;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_37;
    v15 = 136315394;
    v16 = "HALS_Object.cpp";
    v17 = 1024;
    v18 = 466;
    v13 = MEMORY[0x1E0C81028];
    v14 = "%25s:%-5d  HALS_Object::GetPropertyData: bad property data size for kAudioObjectPropertyClass";
    goto LABEL_36;
  }
  if (v8 == 1869638759)
  {
    if (a4 > 7)
    {
      if (*(_BYTE *)(result + 40))
      {
        *a6 = (uint64_t)CFSTR("com.apple.audio.V5");
      }
      else
      {
        result = *(_QWORD *)(result + 32);
        *a6 = result;
        if (result)
          result = (uint64_t)CFRetain((CFTypeRef)result);
      }
      v10 = 8;
      goto LABEL_23;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
LABEL_37:
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      v12 = 561211770;
      goto LABEL_38;
    }
    v15 = 136315394;
    v16 = "HALS_Object.cpp";
    v17 = 1024;
    v18 = 480;
    v13 = MEMORY[0x1E0C81028];
    v14 = "%25s:%-5d  HALS_Object::GetPropertyData: bad property data size for kAudioObjectPropertyCreator";
LABEL_36:
    _os_log_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v15, 0x12u);
    goto LABEL_37;
  }
  if (v8 != 1870098020)
  {
    if (v8 == 1937007734)
    {
      if (a4 > 3)
      {
        v9 = *(_DWORD *)(result + 28);
LABEL_19:
        *(_DWORD *)a6 = v9;
        v10 = 4;
        goto LABEL_23;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_37;
      v15 = 136315394;
      v16 = "HALS_Object.cpp";
      v17 = 1024;
      v18 = 473;
      v13 = MEMORY[0x1E0C81028];
      v14 = "%25s:%-5d  HALS_Object::GetPropertyData: bad property data size for kAudioObjectPropertyOwner";
      goto LABEL_36;
    }
LABEL_29:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v12 = 2003332927;
    goto LABEL_38;
  }
  v10 = 0;
LABEL_23:
  *a5 = v10;
  return result;
}

void HALS_Object::SetPropertyData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _DWORD *exception;
  int v10;

  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, a3, a8);
  exception = __cxa_allocate_exception(0x10uLL);
  *(_QWORD *)exception = &off_1E69A1B30;
  if (v8)
    v10 = 1852797029;
  else
    v10 = 2003332927;
  exception[2] = v10;
}

uint64_t HALS_Object::GetPropertyTypeInfo(HALS_Object *this, HALB_Info *a2, BOOL *a3, unsigned int *a4)
{
  BOOL *v8;
  uint64_t result;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  v23 = 0;
  *(_DWORD *)a3 = HALB_Info::GetPropertyDataType(a2, &v23, a3);
  v22 = 0;
  result = HALB_Info::GetPropertyQualifierDataType(a2, &v22, v8);
  *a4 = result;
  if (v23)
    v10 = v22 == 0;
  else
    v10 = 1;
  if (v10)
  {
    v11 = *((unsigned int *)this + 4);
    v24 = 0x676C6F6263757374;
    LODWORD(v25) = 0;
    result = (*(uint64_t (**)(HALS_Object *, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)this + 88))(this, v11, &v24, 0);
    if ((_DWORD)result)
    {
      v12 = *((unsigned int *)this + 4);
      v24 = 0x676C6F6263757374;
      LODWORD(v25) = 0;
      result = (*(uint64_t (**)(HALS_Object *, uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 104))(this, v12, &v24, 0, 0, 0);
      if (result >= 0xC)
      {
        v13 = result / 0xC;
        v23 = 0;
        v14 = operator new[]();
        v15 = *((unsigned int *)this + 4);
        v24 = 0x676C6F6263757374;
        v25 = 0;
        (*(void (**)(HALS_Object *, uint64_t, uint64_t *, _QWORD, char *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v15, &v24, 12 * v13, (char *)&v25 + 4, v14, 0, 0, 0);
        if (!v23 && HIDWORD(v25) >= 0xC)
        {
          v16 = 0;
          LODWORD(v17) = HIDWORD(v25) / 0xC;
          if (HIDWORD(v25) / 0xC <= 1)
            v17 = 1;
          else
            v17 = v17;
          v18 = (int *)v14;
          while (1)
          {
            v19 = *v18;
            v18 += 3;
            if (v19 == (_DWORD)a2)
              break;
            if (v17 == ++v16)
              return MEMORY[0x1B5E50664](v14, 0x1000C803E1C8BA9);
          }
          v23 = 1;
          v20 = v14 + 12 * v16;
          v21 = *(_DWORD *)(v20 + 4);
          LODWORD(v20) = *(_DWORD *)(v20 + 8);
          *(_DWORD *)a3 = v21;
          v22 = 1;
          *a4 = v20;
        }
        return MEMORY[0x1B5E50664](v14, 0x1000C803E1C8BA9);
      }
    }
  }
  return result;
}

void sub_1B5C01628(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E50664](v1, 0x1000C803E1C8BA9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN11HALS_Object10DeactivateEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
}

void HALS_Object::HALS_Object(HALS_Object *this, int a2, int a3, uint64_t a4, HALS_Object *a5)
{
  HALS_ObjectMap *v9;
  HALS_Object *v10;
  int v11;
  int v12;
  HALB_Mutex *v13;
  int v14;

  *(_QWORD *)this = off_1E69976A8;
  *((_DWORD *)this + 2) = 0;
  *((_WORD *)this + 6) = 1;
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  v13 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
  v14 = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
  v9 = (HALS_ObjectMap *)HALS_ObjectMap::sNextObjectID++;
  HALB_Mutex::Locker::~Locker(&v13);
  *((_DWORD *)this + 4) = (_DWORD)v9;
  *((_DWORD *)this + 5) = a2;
  if (a3)
    v11 = a3;
  else
    v11 = a2;
  *((_DWORD *)this + 6) = v11;
  if (a4)
    v12 = *(_DWORD *)(a4 + 16);
  else
    v12 = 0;
  *((_DWORD *)this + 7) = v12;
  *((_QWORD *)this + 4) = &stru_1E69A2360;
  *((_BYTE *)this + 40) = 0;
  *((_DWORD *)this + 11) = 0;
  HALS_ObjectMap::MapObject(v9, (uint64_t)this, v10);
}

const __CFString *HALS_Object::CopyLocalizedString(HALS_Object *this, const AudioObjectPropertyAddress *a2, const __CFString *a3)
{
  uint64_t v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  _QWORD v11[2];
  char v12;

  if (HALB_Info::IsLocalizedStringProperty((HALB_Info *)a2->mSelector, a2))
  {
    v6 = (*(uint64_t (**)(HALS_Object *))(*(_QWORD *)this + 80))(this);
    v11[0] = &off_1E6971AA0;
    v11[1] = v6;
    v12 = 1;
    if (v6)
    {
      v7 = (const __CFString *)(*(uint64_t (**)(HALS_Object *, const AudioObjectPropertyAddress *))(*(_QWORD *)this + 184))(this, a2);
      v9 = HALB_CFBundle::CopyLocalizedString((HALB_CFBundle *)v11, a3, v7, a3, v8);
      if (v9 == a3)
      {
        CFRelease(a3);
        v9 = a3;
      }
    }
    else
    {
      v9 = a3;
    }
    HALB_CFBundle::~HALB_CFBundle((HALB_CFBundle *)v11);
    return v9;
  }
  return a3;
}

void sub_1B5C01894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HALB_CFBundle::~HALB_CFBundle((HALB_CFBundle *)va);
  _Unwind_Resume(a1);
}

void HALS_Object::PropertiesChanged(HALS_Object *this, HALS_NotificationManager *a2, uint64_t a3, uint64_t a4, const AudioObjectPropertyAddress *a5)
{
  _opaque_pthread_t *v9;
  const AudioObjectPropertyAddress *v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v9 = *(_opaque_pthread_t **)((*(uint64_t (**)(HALS_Object *))(*(_QWORD *)this + 48))(this) + 72);
  if (v9 == pthread_self() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v11 = 136315394;
    v12 = "HALS_Object.cpp";
    v13 = 1024;
    v14 = 639;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Object::PropertiesChanged: Notifications are being sent from inside the command gate.", (uint8_t *)&v11, 0x12u);
  }
  HALS_NotificationManager::PropertiesChanged(a2, a3, a4, a5, v10);
}

void HALS_Object::PropertiesChanged_Sync(HALS_Object *this, HALS_NotificationManager *a2, uint64_t a3, unsigned int a4, const AudioObjectPropertyAddress *a5)
{
  _opaque_pthread_t *v9;
  const AudioObjectPropertyAddress *v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v9 = *(_opaque_pthread_t **)((*(uint64_t (**)(HALS_Object *))(*(_QWORD *)this + 48))(this) + 72);
  if (v9 == pthread_self() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v11 = 136315394;
    v12 = "HALS_Object.cpp";
    v13 = 1024;
    v14 = 648;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Object::PropertiesChanged_Sync: Notifications are being sent from inside the command gate.", (uint8_t *)&v11, 0x12u);
  }
  HALS_NotificationManager::PropertiesChanged_Sync(a2, a3, a4, a5, v10);
}

uint64_t HALS_Object::IsObjectClassInClassIDList(HALS_Object *this, uint64_t a2, const unsigned int *a3, HALS_Object *a4)
{
  unsigned int v4;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  HALB_Info *v9;
  HALB_Info *v10;
  int v11;
  _BOOL4 IsSubClass;
  BOOL v13;

  v4 = this;
  result = 1;
  if (v4 && a2)
  {
    v7 = 0;
    v8 = v4;
    v9 = (HALB_Info *)a3[5];
    v10 = (HALB_Info *)a3[6];
    do
    {
      v11 = *(_DWORD *)(a2 + 4 * v7);
      IsSubClass = HALB_Info::IsSubClass(v9, v11);
      v13 = IsSubClass;
      result = ((_DWORD)v9 != (_DWORD)v10) | IsSubClass;
      if ((_DWORD)v9 != (_DWORD)v10 && !v13)
        result = HALB_Info::IsSubClass(v10, v11);
      if ((result & 1) != 0)
        break;
      ++v7;
    }
    while (v7 < v8);
  }
  return result;
}

CFDictionaryRef PropertyListDeepImmutableCopy(const __CFString *cf)
{
  const __CFString *v1;
  CFTypeID v2;
  const char *CStringPtr;
  CFIndex Length;
  const UInt8 *BytePtr;
  CFIndex v7;
  CFIndex ByteSize;
  CFNumberType Type;
  char *v10;
  AMCP::Log::Scope_Registry *TypeID;
  CFAbsoluteTime v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  uint64_t v16;
  __int16 v17;
  uint8_t buf[8];
  _BYTE v19[10];
  __int16 v20;
  int v21;
  uint64_t v22;
  CFRange v23;

  v1 = cf;
  v22 = *MEMORY[0x1E0C80C00];
  if (cf)
  {
    v2 = CFGetTypeID(cf);
    if (v2 == CFStringGetTypeID())
    {
      CStringPtr = CFStringGetCStringPtr(v1, 0x8000100u);
      if (CStringPtr)
        return (CFDictionaryRef)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE08], CStringPtr, 0x8000100u);
      Length = CFStringGetLength(v1);
      v17 = 0;
      std::vector<unsigned short>::vector(buf, Length, &v17);
      v23.length = (uint64_t)(*(_QWORD *)v19 - *(_QWORD *)buf) >> 1;
      v23.location = 0;
      CFStringGetCharacters(v1, v23, *(UniChar **)buf);
      v1 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE08], *(const UniChar **)buf, (uint64_t)(*(_QWORD *)v19 - *(_QWORD *)buf) >> 1);
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)v19 = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
    }
    else
    {
      if (v2 == CFArrayGetTypeID())
        return ArrayDeepImmutableCopy((const __CFArray *)v1);
      if (v2 == CFDictionaryGetTypeID())
        return DictionaryDeepImmutableCopy((const __CFDictionary *)v1);
      if (v2 == CFDataGetTypeID())
      {
        BytePtr = CFDataGetBytePtr((CFDataRef)v1);
        v7 = CFDataGetLength((CFDataRef)v1);
        return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE08], BytePtr, v7);
      }
      if (v2 == CFNumberGetTypeID())
      {
        ByteSize = CFNumberGetByteSize((CFNumberRef)v1);
        Type = CFNumberGetType((CFNumberRef)v1);
        MEMORY[0x1E0C80A78]();
        v10 = (char *)&v16 - ((ByteSize + 15) & 0xFFFFFFFFFFFFFFF0);
        CFNumberGetValue((CFNumberRef)v1, Type, v10);
        return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE08], Type, v10);
      }
      else if (v2 == CFBooleanGetTypeID())
      {
        CFRetain(v1);
      }
      else
      {
        TypeID = (AMCP::Log::Scope_Registry *)CFDateGetTypeID();
        if ((AMCP::Log::Scope_Registry *)v2 == TypeID)
        {
          MEMORY[0x1B5E4F680](v1);
          return CFDateCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE08], v12);
        }
        AMCP::Log::Scope_Registry::get(TypeID);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v13 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          v14 = pthread_self();
          v15 = pthread_mach_thread_np(v14);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v15;
          *(_WORD *)v19 = 2080;
          *(_QWORD *)&v19[2] = "CFDeepCopy.cpp";
          v20 = 1024;
          v21 = 126;
          _os_log_debug_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Not a supported property list type. Can not make a deep copy for this type.", buf, 0x18u);
        }
        return 0;
      }
    }
  }
  return (CFDictionaryRef)v1;
}

void sub_1B5C01ED8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 64);
  if (v3)
  {
    *(_QWORD *)(v1 - 56) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef ArrayDeepImmutableCopy(const __CFArray *a1)
{
  CFIndex Count;
  uint64_t v3;
  unint64_t v4;
  const void **v5;
  size_t v6;
  CFIndex v7;
  CFIndex v8;
  const void *ValueAtIndex;
  uint64_t v10;
  __int128 v12;
  CFArrayCallBacks callBacks;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  Count = CFArrayGetCount(a1);
  if (!Count)
    return CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE08], 0, 0, MEMORY[0x1E0C9B380]);
  v3 = Count;
  MEMORY[0x1E0C80A78]();
  v5 = (const void **)((char *)&callBacks - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v4 >= 0x200)
    v6 = 512;
  else
    v6 = v4;
  bzero((char *)&callBacks - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  if (v3 < 1)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
      v10 = PropertyListDeepImmutableCopy(ValueAtIndex);
      v5[v8] = (const void *)v10;
      if (v10)
        ++v8;
      ++v7;
    }
    while (v3 != v7);
  }
  v12 = *(_OWORD *)(MEMORY[0x1E0C9B380] + 16);
  *(_OWORD *)&callBacks.version = *MEMORY[0x1E0C9B380];
  *(_OWORD *)&callBacks.release = v12;
  callBacks.equal = *(CFArrayEqualCallBack *)(MEMORY[0x1E0C9B380] + 32);
  callBacks.retain = 0;
  return CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE08], v5, v8, &callBacks);
}

CFDictionaryRef DictionaryDeepImmutableCopy(const __CFDictionary *a1)
{
  CFIndex Count;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void **v6;
  size_t v7;
  const void **v8;
  CFIndex v9;
  const void *v10;
  CFIndex v11;
  const void *v12;
  CFIndex v13;
  BOOL v14;
  __int128 v16;
  __int128 v17;
  Boolean (__cdecl *v18)(const void *, const void *);
  CFDictionaryValueCallBacks valueCallBacks;
  CFDictionaryKeyCallBacks keyCallBacks;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  Count = CFDictionaryGetCount(a1);
  if (!Count)
    return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE08], 0, 0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  v3 = Count;
  v4 = 8 * Count;
  MEMORY[0x1E0C80A78]();
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = (const void **)((char *)&valueCallBacks - v5);
  if (v4 >= 0x200)
    v7 = 512;
  else
    v7 = v4;
  bzero((char *)&valueCallBacks - v5, v7);
  MEMORY[0x1E0C80A78]();
  v8 = (const void **)((char *)&valueCallBacks - v5);
  bzero((char *)&valueCallBacks - v5, v7);
  MEMORY[0x1E0C80A78]();
  bzero((char *)&valueCallBacks - v5, v7);
  MEMORY[0x1E0C80A78]();
  bzero((char *)&valueCallBacks - v5, v7);
  CFDictionaryGetKeysAndValues(a1, (const void **)((char *)&valueCallBacks - v5), (const void **)((char *)&valueCallBacks - v5));
  if (v3 < 1)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v10 = *v6++;
      v11 = PropertyListDeepImmutableCopy(v10);
      *(CFIndex *)((char *)&valueCallBacks.version + 8 * v9 - v5) = v11;
      v12 = *v8++;
      v13 = PropertyListDeepImmutableCopy(v12);
      *(CFIndex *)((char *)&valueCallBacks.version + 8 * v9 - v5) = v13;
      if (v11)
        v14 = v13 == 0;
      else
        v14 = 1;
      if (!v14)
        ++v9;
      --v3;
    }
    while (v3);
  }
  v16 = *(_OWORD *)(MEMORY[0x1E0C9B398] + 16);
  *(_OWORD *)&keyCallBacks.version = *MEMORY[0x1E0C9B398];
  *(_OWORD *)&keyCallBacks.release = v16;
  *(_OWORD *)&keyCallBacks.equal = *(_OWORD *)(MEMORY[0x1E0C9B398] + 32);
  v17 = *(_OWORD *)(MEMORY[0x1E0C9B3A8] + 16);
  *(_OWORD *)&valueCallBacks.version = *MEMORY[0x1E0C9B3A8];
  *(_OWORD *)&valueCallBacks.release = v17;
  v18 = *(Boolean (__cdecl **)(const void *, const void *))(MEMORY[0x1E0C9B3A8] + 32);
  keyCallBacks.retain = 0;
  valueCallBacks.equal = v18;
  valueCallBacks.retain = 0;
  return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE08], (const void **)((char *)&valueCallBacks - v5), (const void **)((char *)&valueCallBacks - v5), v9, &keyCallBacks, &valueCallBacks);
}

void AMCP::Graph::File_Task::~File_Task(AMCP::Graph::File_Task *this)
{
  AMCP::Graph::File_Task::~File_Task(this);
  JUMPOUT(0x1B5E50688);
}

{
  *(_QWORD *)this = &off_1E69977A0;
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  std::unique_ptr<AMCP::DAL::File>::reset[abi:ne180100]((std::__shared_weak_count ***)this + 1, 0);
}

std::__shared_weak_count **std::unique_ptr<AMCP::DAL::File>::reset[abi:ne180100](std::__shared_weak_count ***a1, std::__shared_weak_count **a2)
{
  std::__shared_weak_count **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    AMCP::DAL::File::~File(result);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

_QWORD *std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2>,void ()(unsigned int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6997980;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2>,void ()(unsigned int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6997980;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6997980;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2>,void ()(unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6997980;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2>,void ()(unsigned int)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2>,void ()(unsigned int)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

std::__shared_weak_count **std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2>,void ()(unsigned int)>::operator()(std::__shared_weak_count **result)
{
  std::__shared_weak_count *v1;
  int v2;
  AMCP::Log::Scope_Registry *p_shared_owners;
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *v6;
  unint64_t v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  std::string *v10;
  std::logic_error *exception;
  std::string *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  std::logic_error v16;
  __int128 v17;
  uint64_t v18;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  std::string v22;
  std::string v23;
  std::logic_error v24;
  std::string __p;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint8_t buf[8];
  _BYTE v32[10];
  __int16 v33;
  int v34;
  _BYTE v35[24];
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v1 = result[1];
  v2 = LODWORD(v1[4].__vftable) - 1;
  LODWORD(v1[4].__vftable) = v2;
  if (!v2)
  {
    p_shared_owners = (AMCP::Log::Scope_Registry *)&v1->__shared_owners_;
    if (!v1->__shared_owners_)
    {
      AMCP::Log::Scope_Registry::get(p_shared_owners);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v4 = *(std::__shared_weak_count **)v32;
      v5 = **(NSObject ***)buf;
      if (*(_QWORD *)v32)
      {
        v6 = (unint64_t *)(*(_QWORD *)v32 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        AMCP::Terminal_Identifier_to_string(&__p, (const void **)&v1->__shared_weak_owners_);
        v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v9;
        *(_WORD *)v32 = 2080;
        *(_QWORD *)&v32[2] = "Graph_File_Task.cpp";
        v33 = 1024;
        v34 = 116;
        *(_WORD *)v35 = 2080;
        *(_QWORD *)&v35[2] = "not (m_file != nullptr)";
        *(_WORD *)&v35[10] = 2080;
        *(_QWORD *)&v35[12] = v10;
        _os_log_error_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s stop_processing called on a file that does not exists: %s", buf, 0x2Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
      exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
      AMCP::Terminal_Identifier_to_string(&v22, (const void **)&v1->__shared_weak_owners_);
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v22;
      else
        v12 = (std::string *)v22.__r_.__value_.__r.__words[0];
      caulk::make_string((caulk *)"stop_processing called on a file that does not exists: %s", (uint64_t)&v23, v12);
      std::logic_error::logic_error(&v24, &v23);
      v13 = MEMORY[0x1E0DE5018];
      v24.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)&__p, &v24);
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = -1;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
      *(_QWORD *)&v35[8] = "void AMCP::Graph::File_Task::stop_processing()";
      *(_QWORD *)&v35[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_File_Task.cpp";
      v36 = 116;
      std::vector<void *>::vector(&v17);
      v14 = backtrace((void **)v17, (*((_QWORD *)&v17 + 1) - (_QWORD)v17) >> 3);
      std::vector<void *>::resize((char **)&v17, v14);
      v19 = off_1E69A20A0;
      v20 = v17;
      v21 = v18;
      v17 = 0uLL;
      v18 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v19);
      exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::logic_error::logic_error(exception, (const std::logic_error *)buf);
      exception->__vftable = (std::logic_error_vtbl *)(v13 + 16);
      exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
      v15 = *(_QWORD *)v35;
      exception[1].__imp_.__imp_ = *(const char **)v35;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
      v16 = *(std::logic_error *)&v35[8];
      LODWORD(exception[3].__vftable) = v36;
      exception[2] = v16;
      exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
      exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
      exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
    }
    return std::unique_ptr<AMCP::DAL::File>::reset[abi:ne180100]((std::__shared_weak_count ***)p_shared_owners, 0);
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2>,void ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph9File_Task12create_procsERKNS_19Terminal_IdentifierERKN2CA17StreamDescriptionEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2>,void ()(unsigned int)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1>,void ()(unsigned int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6997900;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1>,void ()(unsigned int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6997900;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6997900;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1>,void ()(unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6997900;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1>,void ()(unsigned int)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1>,void ()(unsigned int)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

AMCP::Log::Scope_Registry *std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1>,void ()(unsigned int)>::operator()(AMCP::Log::Scope_Registry *result)
{
  uint64_t v1;
  int v2;
  std::string *v3;
  std::string::size_type v4;
  char v5;
  uint64_t v6;
  uint8_t *v7;
  void (*v8)(_QWORD, uint8_t *, _QWORD, _QWORD);
  AMCP::DAL::DALSupport *v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  std::string *v16;
  std::logic_error *exception;
  std::string *p_p;
  uint64_t v19;
  int v20;
  uint64_t v21;
  std::logic_error v22;
  CFTypeRef cf;
  __int128 v24;
  void *v25;
  void *v26[4];
  std::string __p;
  std::string v28;
  std::string v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD v33[2];
  uint8_t buf[8];
  _BYTE v35[10];
  __int16 v36;
  int v37;
  _QWORD v38[5];
  uint64_t v39[3];
  __int128 v40;
  __int128 v41;
  BOOL (*v42)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  uint64_t v43[3];
  __int128 v44;
  __int128 v45;
  BOOL (*v46)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  uint64_t v47[3];
  __int128 v48;
  void *v49;
  uint64_t v50;
  BOOL (*v51)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD v52[4];
  _BYTE v53[15];
  char v54;
  uint64_t v55;
  BOOL (*v56)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  uint64_t v57[3];
  std::string v58;
  uint64_t v59;
  BOOL (*v60)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD v61[8];
  uint64_t v62[3];
  __int128 v63;
  __int128 v64;
  BOOL (*v65)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  std::logic_error v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)result + 1);
  v2 = *(_DWORD *)(v1 + 96);
  *(_DWORD *)(v1 + 96) = v2 + 1;
  if (!v2)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      AMCP::Log::Scope_Registry::get(result);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v10 = *(std::__shared_weak_count **)v35;
      v11 = **(NSObject ***)buf;
      if (*(_QWORD *)v35)
      {
        v12 = (unint64_t *)(*(_QWORD *)v35 + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v14 = pthread_self();
        v15 = pthread_mach_thread_np(v14);
        AMCP::Terminal_Identifier_to_string(&v29, (const void **)(v1 + 16));
        v16 = (v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v29
            : (std::string *)v29.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v15;
        *(_WORD *)v35 = 2080;
        *(_QWORD *)&v35[2] = "Graph_File_Task.cpp";
        v36 = 1024;
        v37 = 94;
        LOWORD(v38[0]) = 2080;
        *(_QWORD *)((char *)v38 + 2) = "not (m_file == nullptr)";
        WORD1(v38[1]) = 2080;
        *(_QWORD *)((char *)&v38[1] + 4) = v16;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s start_processing called on a file that exists: %s", buf, 0x2Cu);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&cf);
      exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
      AMCP::Terminal_Identifier_to_string(&__p, (const void **)(v1 + 16));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      caulk::make_string((caulk *)"start_processing called on a file that exists: %s", (uint64_t)&v28, p_p);
      std::logic_error::logic_error(&v66, &v28);
      v19 = MEMORY[0x1E0DE5018];
      v66.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)&v29, &v66);
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33[0] = -1;
      v29.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
      v29.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v29);
      v38[1] = "void AMCP::Graph::File_Task::start_processing()";
      v38[2] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_File_Task.cpp";
      LODWORD(v38[3]) = 94;
      std::vector<void *>::vector(&v24);
      v20 = backtrace((void **)v24, (*((_QWORD *)&v24 + 1) - (_QWORD)v24) >> 3);
      std::vector<void *>::resize((char **)&v24, v20);
      *(_OWORD *)&v26[1] = v24;
      v26[3] = v25;
      v24 = 0uLL;
      v25 = 0;
      v26[0] = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v26);
      exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::logic_error::logic_error(exception, (const std::logic_error *)buf);
      exception->__vftable = (std::logic_error_vtbl *)(v19 + 16);
      exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
      v21 = v38[0];
      exception[1].__imp_.__imp_ = (const char *)v38[0];
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
      v22 = *(std::logic_error *)&v38[1];
      LODWORD(exception[3].__vftable) = v38[3];
      exception[2] = v22;
      exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
      exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
      exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "write");
    memset(v38, 0, 32);
    LOBYTE(v38[0]) = 1;
    v38[4] = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
    std::string::basic_string[abi:ne180100]<0>(v39, "write time stamps");
    v40 = 0u;
    v41 = 0u;
    LOBYTE(v40) = 1;
    v42 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
    std::string::basic_string[abi:ne180100]<0>(v43, "create unique name");
    v44 = 0u;
    v45 = 0u;
    LOBYTE(v44) = 1;
    v46 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
    get_audio_capture_folder(v26);
    std::string::basic_string[abi:ne180100]<0>(v47, "file location");
    v48 = *(_OWORD *)v26;
    v49 = v26[2];
    v50 = 0;
    memset(v26, 0, 24);
    v51 = AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
    AMCP::DAL::generate_time_stamp((AMCP::DAL *)&v28);
    v3 = std::string::append(&v28, "_wire_output_", 0xDuLL);
    v4 = v3->__r_.__value_.__r.__words[0];
    v66.__vftable = (std::logic_error_vtbl *)v3->__r_.__value_.__l.__size_;
    *(std::logic_error_vtbl **)((char *)&v66.__vftable + 7) = *(std::logic_error_vtbl **)((char *)&v3->__r_.__value_.__r.__words[1]
                                                                                        + 7);
    v5 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v52, "name");
    *(_QWORD *)&v53[7] = *(std::logic_error_vtbl **)((char *)&v66.__vftable + 7);
    v52[3] = v4;
    *(_QWORD *)v53 = v66.__vftable;
    v54 = v5;
    v66.__vftable = 0;
    *(std::logic_error_vtbl **)((char *)&v66.__vftable + 7) = 0;
    v55 = 0;
    v56 = AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
    AMCP::Terminal_Identifier_to_string(&__p, (const void **)(v1 + 16));
    std::string::basic_string[abi:ne180100]<0>(v57, "wire id");
    v58 = __p;
    v59 = 0;
    memset(&__p, 0, sizeof(__p));
    v60 = AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
    asbd_to_dictionary((const CA::StreamDescription *)&cf, (uint64_t *)(v1 + 56));
    std::string::basic_string[abi:ne180100]<0>(v61, "asbd");
    memset(&v61[4], 0, 24);
    v61[3] = cf;
    cf = 0;
    v61[7] = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
    std::string::basic_string[abi:ne180100]<0>(v62, "write time stamps");
    v63 = 0u;
    v64 = 0u;
    LOBYTE(v63) = 1;
    v65 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
    *(_QWORD *)&v24 = buf;
    *((_QWORD *)&v24 + 1) = 8;
    AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)&v29, (uint64_t *)&v24);
    v6 = 128;
    do
    {
      v7 = &buf[v6 * 4];
      v8 = *(void (**)(_QWORD, uint8_t *, _QWORD, _QWORD))&v33[v6];
      if (v8)
        v8(0, v7 - 40, 0, 0);
      if ((char)*(v7 - 41) < 0)
        operator delete(*((void **)v7 - 8));
      v6 -= 16;
    }
    while (v6 * 4);
    if (cf)
      CFRelease(cf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26[2]) < 0)
      operator delete(v26[0]);
    v9 = (AMCP::DAL::DALSupport *)operator new();
    AMCP::DAL::File::File(v9, *(_DWORD *)(v1 + 64), (uint64_t)&v29);
    std::unique_ptr<AMCP::DAL::File>::reset[abi:ne180100]((std::__shared_weak_count ***)(v1 + 8), (std::__shared_weak_count **)v9);
    return (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)&v29);
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1>,void ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph9File_Task12create_procsERKNS_19Terminal_IdentifierERKN2CA17StreamDescriptionEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1>,void ()(unsigned int)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6997870;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6997870;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6997870;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6997870;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::operator()(AMCP::Log::Scope_Registry *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  std::string *v14;
  std::logic_error *exception;
  std::string *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  std::logic_error v20;
  std::__shared_weak_count *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  std::string *v27;
  std::logic_error *v28;
  std::string *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  std::logic_error v33;
  std::__shared_weak_count *v34;
  NSObject *v35;
  unint64_t *v36;
  unint64_t v37;
  _opaque_pthread_t *v38;
  mach_port_t v39;
  std::string *v40;
  std::logic_error *v41;
  std::string *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  std::logic_error v46;
  __int128 v47;
  uint64_t v48;
  uint64_t (**v49)();
  __int128 v50;
  uint64_t v51;
  std::string v52;
  std::string v53;
  std::logic_error v54;
  std::string __p;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  char v60;
  uint8_t buf[8];
  _BYTE v62[10];
  __int16 v63;
  int v64;
  _BYTE v65[24];
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a1 + 1);
  if (!*(_QWORD *)(v5 + 8))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = *(std::__shared_weak_count **)v62;
    v9 = **(NSObject ***)buf;
    if (*(_QWORD *)v62)
    {
      v10 = (unint64_t *)(*(_QWORD *)v62 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      AMCP::Terminal_Identifier_to_string(&__p, (const void **)(v5 + 16));
      v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)v62 = 2080;
      *(_QWORD *)&v62[2] = "Graph_File_Task.cpp";
      v63 = 1024;
      v64 = 79;
      *(_WORD *)v65 = 2080;
      *(_QWORD *)&v65[2] = "not (m_file != nullptr)";
      *(_WORD *)&v65[10] = 2080;
      *(_QWORD *)&v65[12] = v14;
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s io_proc called on a file that does not exists: %s", buf, 0x2Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v60);
    exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    AMCP::Terminal_Identifier_to_string(&v52, (const void **)(v5 + 16));
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v52;
    else
      v16 = (std::string *)v52.__r_.__value_.__r.__words[0];
    caulk::make_string((caulk *)"io_proc called on a file that does not exists: %s", (uint64_t)&v53, v16);
    std::logic_error::logic_error(&v54, &v53);
    v17 = MEMORY[0x1E0DE5018];
    v54.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&__p, &v54);
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = -1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(_QWORD *)&v65[8] = "void AMCP::Graph::File_Task::io_proc(const IO_Proc_Cycle_Info &, const rt_safe_vector<DAL::Read"
                         "able_Range> &, const rt_safe_vector<DAL::Writable_Range> &)";
    *(_QWORD *)&v65[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_File_Task.cpp";
    v66 = 79;
    std::vector<void *>::vector(&v47);
    v18 = backtrace((void **)v47, (*((_QWORD *)&v47 + 1) - (_QWORD)v47) >> 3);
    std::vector<void *>::resize((char **)&v47, v18);
    v49 = off_1E69A20A0;
    v50 = v47;
    v51 = v48;
    v47 = 0uLL;
    v48 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v49);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(exception, (const std::logic_error *)buf);
    exception->__vftable = (std::logic_error_vtbl *)(v17 + 16);
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v19 = *(_QWORD *)v65;
    exception[1].__imp_.__imp_ = *(const char **)v65;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = *(std::logic_error *)&v65[8];
    LODWORD(exception[3].__vftable) = v66;
    exception[2] = v20;
    exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  if (a4[1] - *a4 != 88)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v21 = *(std::__shared_weak_count **)v62;
    v22 = **(NSObject ***)buf;
    if (*(_QWORD *)v62)
    {
      v23 = (unint64_t *)(*(_QWORD *)v62 + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v25 = pthread_self();
      v26 = pthread_mach_thread_np(v25);
      AMCP::Terminal_Identifier_to_string(&__p, (const void **)(v5 + 16));
      v27 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v26;
      *(_WORD *)v62 = 2080;
      *(_QWORD *)&v62[2] = "Graph_File_Task.cpp";
      v63 = 1024;
      v64 = 80;
      *(_WORD *)v65 = 2080;
      *(_QWORD *)&v65[2] = "not (sources.size() == 1)";
      *(_WORD *)&v65[10] = 2080;
      *(_QWORD *)&v65[12] = v27;
      _os_log_error_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Expecting only one input to a file writer node: %s", buf, 0x2Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v60);
    v28 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    AMCP::Terminal_Identifier_to_string(&v52, (const void **)(v5 + 16));
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v52;
    else
      v29 = (std::string *)v52.__r_.__value_.__r.__words[0];
    caulk::make_string((caulk *)"Expecting only one input to a file writer node: %s", (uint64_t)&v53, v29);
    std::logic_error::logic_error(&v54, &v53);
    v30 = MEMORY[0x1E0DE5018];
    v54.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&__p, &v54);
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = -1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(_QWORD *)&v65[8] = "void AMCP::Graph::File_Task::io_proc(const IO_Proc_Cycle_Info &, const rt_safe_vector<DAL::Read"
                         "able_Range> &, const rt_safe_vector<DAL::Writable_Range> &)";
    *(_QWORD *)&v65[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_File_Task.cpp";
    v66 = 80;
    std::vector<void *>::vector(&v47);
    v31 = backtrace((void **)v47, (*((_QWORD *)&v47 + 1) - (_QWORD)v47) >> 3);
    std::vector<void *>::resize((char **)&v47, v31);
    v49 = off_1E69A20A0;
    v50 = v47;
    v51 = v48;
    v47 = 0uLL;
    v48 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v49);
    v28[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(v28, (const std::logic_error *)buf);
    v28->__vftable = (std::logic_error_vtbl *)(v30 + 16);
    v28[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v32 = *(_QWORD *)v65;
    v28[1].__imp_.__imp_ = *(const char **)v65;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
    v33 = *(std::logic_error *)&v65[8];
    LODWORD(v28[3].__vftable) = v66;
    v28[2] = v33;
    v28->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    v28[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    v28[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  if (*a5 != a5[1])
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v34 = *(std::__shared_weak_count **)v62;
    v35 = **(NSObject ***)buf;
    if (*(_QWORD *)v62)
    {
      v36 = (unint64_t *)(*(_QWORD *)v62 + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v38 = pthread_self();
      v39 = pthread_mach_thread_np(v38);
      AMCP::Terminal_Identifier_to_string(&__p, (const void **)(v5 + 16));
      v40 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v39;
      *(_WORD *)v62 = 2080;
      *(_QWORD *)&v62[2] = "Graph_File_Task.cpp";
      v63 = 1024;
      v64 = 81;
      *(_WORD *)v65 = 2080;
      *(_QWORD *)&v65[2] = "not (dests.empty())";
      *(_WORD *)&v65[10] = 2080;
      *(_QWORD *)&v65[12] = v40;
      _os_log_error_impl(&dword_1B57BA000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Expecting no output from a file writer node: %s", buf, 0x2Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v60);
    v41 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    AMCP::Terminal_Identifier_to_string(&v52, (const void **)(v5 + 16));
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &v52;
    else
      v42 = (std::string *)v52.__r_.__value_.__r.__words[0];
    caulk::make_string((caulk *)"Expecting no output from a file writer node: %s", (uint64_t)&v53, v42);
    std::logic_error::logic_error(&v54, &v53);
    v43 = MEMORY[0x1E0DE5018];
    v54.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&__p, &v54);
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = -1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(_QWORD *)&v65[8] = "void AMCP::Graph::File_Task::io_proc(const IO_Proc_Cycle_Info &, const rt_safe_vector<DAL::Read"
                         "able_Range> &, const rt_safe_vector<DAL::Writable_Range> &)";
    *(_QWORD *)&v65[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_File_Task.cpp";
    v66 = 81;
    std::vector<void *>::vector(&v47);
    v44 = backtrace((void **)v47, (*((_QWORD *)&v47 + 1) - (_QWORD)v47) >> 3);
    std::vector<void *>::resize((char **)&v47, v44);
    v49 = off_1E69A20A0;
    v50 = v47;
    v51 = v48;
    v47 = 0uLL;
    v48 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v49);
    v41[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(v41, (const std::logic_error *)buf);
    v41->__vftable = (std::logic_error_vtbl *)(v43 + 16);
    v41[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v45 = *(_QWORD *)v65;
    v41[1].__imp_.__imp_ = *(const char **)v65;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
    v46 = *(std::logic_error *)&v65[8];
    LODWORD(v41[3].__vftable) = v66;
    v41[2] = v46;
    v41->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    v41[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    v41[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  AMCP::DAL::create_timestamp_data((AMCP::DAL *)buf, (const AMCP::DAL::DAL_Time *)(a3 + 80), *(const AMCP::DAL::DAL_Timed_Segment **)(*a4 + 24), *(std::__shared_weak_count **)(*a4 + 32));
  (*(void (**)(_QWORD, uint8_t *, _QWORD))(***(_QWORD ***)(v5 + 8) + 16))(**(_QWORD **)(v5 + 8), buf, *a4);
  return std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)buf);
}

uint64_t std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph9File_Task12create_procsERKNS_19Terminal_IdentifierERKN2CA17StreamDescriptionEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::target_type()
{
}

void std::__shared_ptr_emplace<AMCP::Graph::File_Task>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69977D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Graph::File_Task>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69977D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Graph::File_Task>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMCP::IOAudio1::Control::~Control(AMCP::IOAudio1::Control *this)
{
  AMCP::IOAudio1::Control::~Control(this);
  JUMPOUT(0x1B5E50688);
}

{
  io_connect_t *v2;
  io_connect_t *v3;

  *(_QWORD *)this = &off_1E6997A00;
  AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 32) + 16), *((_DWORD *)this + 4));
  *((_DWORD *)this + 4) = 0;
  v2 = (io_connect_t *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v2);
  AMCP::Utility::Mach_Port::reset((AMCP::IOAudio1::Control *)((char *)this + 32));
  AMCP::Utility::Mach_Port::~Mach_Port((AMCP::IOAudio1::Control *)((char *)this + 32));
  v3 = (io_connect_t *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v3);
  AMCP::IOAudio1::Device_Sub_Object::~Device_Sub_Object(this);
}

void std::__function::__func<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0,std::allocator<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0,std::allocator<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6997F38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0,std::allocator<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6997F38;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0,std::allocator<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  AMCP::Utility::Kernel_Error_Category *v2;
  int v3;
  _DWORD *v4;
  io_registry_entry_t v5;
  uint64_t v6;
  unsigned int simple_required;
  _QWORD *i;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  __int128 v24;
  void **v25;
  uint64_t v26;
  std::runtime_error *v27;
  void (*v28)(void *);
  struct type_info *v29;
  uint64_t v30;
  void *exception;
  const std::error_category *v32;
  const std::error_category *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  CFTypeRef cf;
  _DWORD *v38;
  std::__shared_weak_count *v39;
  CFMutableDictionaryRef properties;
  int v41;
  void *__p[2];
  __int128 v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v35 = 0u;
  v36 = 0u;
  v34 = 0u;
  v2 = (AMCP::Utility::Kernel_Error_Category *)AMCP::Utility::Mach_Port::receive_message(*(_DWORD *)(v1 + 32), 0x30u, (mach_msg_header_t *)&v34, (mach_msg_header_t *)1);
  v3 = (int)v2;
  AMCP::Utility::Kernel_Error_Category::get(v2);
  if (v3)
    return;
  if (DWORD2(v35) == 1)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 16);
    v14 = *(_QWORD *)(v13 + 32);
    v15 = *(_QWORD *)(v14 + 32);
    v16 = *(_DWORD *)(v13 + 48);
    v17 = *(_DWORD *)(v1 + 16);
    v18 = *(_DWORD *)(v1 + 20);
    if (v18)
    {
      v19 = IOObjectRetain(*(_DWORD *)(v1 + 20));
      if ((_DWORD)v19)
      {
        v30 = v19;
        exception = __cxa_allocate_exception(0x20uLL);
        v32 = std::system_category();
        MEMORY[0x1B5E5022C](exception, v30, v32, "Error on Retain");
        __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
      }
      v13 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 16);
      v14 = *(_QWORD *)(v13 + 32);
    }
    v20 = *(_QWORD *)(v13 + 40);
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    *((_QWORD *)&v43 + 1) = 0;
    v23 = operator new(0x20uLL);
    *(_QWORD *)&v24 = v14;
    *((_QWORD *)&v24 + 1) = v20;
    *v23 = &off_1E6998120;
    v23[1] = __PAIR64__(v18, v17);
    *((_OWORD *)v23 + 1) = v24;
    *((_QWORD *)&v43 + 1) = v23;
    AMCP::Core::Conductor::enqueue_config_change(v15, v16, v17, 0, (uint64_t)__p);
    v25 = (void **)*((_QWORD *)&v43 + 1);
    if (*((void ***)&v43 + 1) == __p)
    {
      v26 = 4;
      v25 = __p;
    }
    else
    {
      if (!*((_QWORD *)&v43 + 1))
        return;
      v26 = 5;
    }
    (*((void (**)(void))*v25 + v26))();
    return;
  }
  if (DWORD2(v35))
    return;
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v38, *(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 16) + 32) + 16), *(_DWORD *)(v1 + 16));
  v4 = v38;
  if (v38)
  {
    *(_OWORD *)__p = 0u;
    v43 = 0u;
    v44 = 1065353216;
    v5 = *(_DWORD *)(v1 + 20);
    if (v5)
    {
      properties = 0;
      v6 = IORegistryEntryCreateCFProperties(v5, &properties, 0, 0);
      if (!(_DWORD)v6)
      {
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, properties);
        simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>((AMCP::Core::Core *)v4);
        AMCP::IOAudio1::update_control_value(simple_required, (uint64_t)__p, (io_object_t *)(v1 + 20), (CFDictionaryRef *)&cf);
        properties = (CFMutableDictionaryRef)(v4 + 12);
        LOBYTE(v41) = 1;
        caulk::concurrent::shared_spin_lock::lock(v4 + 12);
        for (i = (_QWORD *)v43; i; i = (_QWORD *)*i)
          std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)(v4 + 2), (unsigned int *)(i[4] + 40), i + 4);
        std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&properties);
        properties = (CFMutableDictionaryRef)0x676C6F626F776E72;
        v41 = 0;
        v4[1] = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v4, (const AMCP::Address *)&properties, &AMCP::k_object_id_unknown);
        AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 16) + 32) + 32), *(_DWORD *)(v1 + 16));
        if (cf)
          CFRelease(cf);
        std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)v43);
        v9 = __p[0];
        __p[0] = 0;
        if (v9)
          operator delete(v9);
        goto LABEL_14;
      }
      v27 = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
      v33 = std::system_category();
      MEMORY[0x1B5E5022C](v27, v6, v33, "Error on get_properties");
      v28 = (void (*)(void *))MEMORY[0x1E0DE4580];
      v29 = (struct type_info *)MEMORY[0x1E0DE4E38];
    }
    else
    {
      v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v27, "cannot create io_object_proxy from null io_object");
      v28 = (void (*)(void *))MEMORY[0x1E0DE4338];
      v29 = (struct type_info *)MEMORY[0x1E0DE4E80];
    }
    __cxa_throw(v27, v29, v28);
  }
LABEL_14:
  v10 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1B5C0457C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  void *v19;

  if (a2)
  {
    __cxa_free_exception(v19);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0,std::allocator<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio17ControlC1ERNS0_6DeviceERKN10applesauce5iokit16io_object_holderEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0,std::allocator<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  io_object_t v2;

  *(_QWORD *)a1 = &off_1E6998120;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
  v2 = *(_DWORD *)(a1 + 12);
  if (v2)
    IOObjectRelease(v2);
  return a1;
}

void std::__function::__func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  io_object_t v2;

  *(_QWORD *)a1 = &off_1E6998120;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
  v2 = *(_DWORD *)(a1 + 12);
  if (v2)
    IOObjectRelease(v2);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x20uLL);
  *v2 = &off_1E6998120;
  std::__compressed_pair_elem<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5C046E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6998120;
  return std::__compressed_pair_elem<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  _DWORD *v2;
  io_registry_entry_t v3;
  io_object_t *v4;
  io_registry_entry_t v5;
  uint64_t v6;
  unsigned int simple_required;
  _QWORD *i;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::runtime_error *exception;
  void (*v14)(void *);
  struct type_info *v15;
  uint64_t v16;
  const std::error_category *v17;
  CFTypeRef cf;
  void *__p[2];
  __int128 v20;
  int v21;
  _DWORD *v22;
  std::__shared_weak_count *v23;
  CFMutableDictionaryRef properties;
  int v25;

  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v22, *(std::__shared_mutex_base **)(*(_QWORD *)(a1 + 16) + 16), *(_DWORD *)(a1 + 8));
  v2 = v22;
  if (!v22)
    goto LABEL_10;
  *(_OWORD *)__p = 0u;
  v20 = 0u;
  v21 = 1065353216;
  v5 = *(_DWORD *)(a1 + 12);
  v4 = (io_object_t *)(a1 + 12);
  v3 = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    v14 = (void (*)(void *))MEMORY[0x1E0DE4338];
    v15 = (struct type_info *)MEMORY[0x1E0DE4E80];
    goto LABEL_18;
  }
  properties = 0;
  v6 = IORegistryEntryCreateCFProperties(v3, &properties, 0, 0);
  if ((_DWORD)v6)
  {
    v16 = v6;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    v17 = std::system_category();
    MEMORY[0x1B5E5022C](exception, v16, v17, "Error on get_properties");
    v14 = (void (*)(void *))MEMORY[0x1E0DE4580];
    v15 = (struct type_info *)MEMORY[0x1E0DE4E38];
LABEL_18:
    __cxa_throw(exception, v15, v14);
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, properties);
  simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>((AMCP::Core::Core *)v2);
  AMCP::IOAudio1::update_control_value(simple_required, (uint64_t)__p, v4, (CFDictionaryRef *)&cf);
  AMCP::IOAudio1::update_control_range(simple_required, (uint64_t)__p, (CFDictionaryRef *)&cf);
  properties = (CFMutableDictionaryRef)(v2 + 12);
  LOBYTE(v25) = 1;
  caulk::concurrent::shared_spin_lock::lock(v2 + 12);
  for (i = (_QWORD *)v20; i; i = (_QWORD *)*i)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)(v2 + 2), (unsigned int *)(i[4] + 40), i + 4);
  std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&properties);
  properties = (CFMutableDictionaryRef)0x676C6F626F776E72;
  v25 = 0;
  v2[1] = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v2, (const AMCP::Address *)&properties, &AMCP::k_object_id_unknown);
  if (cf)
    CFRelease(cf);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)v20);
  v9 = __p[0];
  __p[0] = 0;
  if (v9)
    operator delete(v9);
LABEL_10:
  v10 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1B5C0492C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  void *v18;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  __cxa_free_exception(v18);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table((uint64_t)&a11);
  v20 = a18;
  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio17Control28handle_range_changed_messageEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::target_type()
{
}

void AMCP::IOAudio1::update_control_value(unsigned int a1, uint64_t a2, io_object_t *a3, CFDictionaryRef *a4)
{
  int v8;
  int v9;
  float v10;
  int v11;
  int v12;
  float v13;
  int v14;
  float v15;
  int v16;
  float v17;
  int v18;
  io_object_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t (***v23)();
  uint64_t v24;
  BOOL BOOL_from;
  io_object_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __n128 v30;
  void **v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t (***v44)();
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  io_object_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t (***v53)();
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t (***v60)();
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void **v67;
  uint64_t v68;
  void **v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  void **v76;
  uint64_t v77;
  void **v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::runtime_error *exception;
  void (*v84)(void *);
  struct type_info *v85;
  const std::error_category *v86;
  void *v87;
  const std::error_category *v88;
  void *v89;
  const std::error_category *v90;
  const std::error_category *v91;
  void *v92;
  const std::error_category *v93;
  void *v94;
  const std::error_category *v95;
  void *v96;
  const std::error_category *v97;
  void *v98;
  const std::error_category *v99;
  void *v100;
  const std::error_category *v101;
  std::runtime_error *v102;
  void (*v103)(void *);
  struct type_info *v104;
  const std::error_category *v105;
  void *v106;
  const std::error_category *v107;
  void *v108;
  const std::error_category *v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  void *v114;
  uint64_t *v115;
  __int16 v116;
  void *__p[2];
  uint64_t v118;
  void **v119;
  io_object_t object;
  uint64_t (**v121)();
  std::__shared_weak_count *v122;
  uint64_t *v123;
  CFTypeRef cf[2];
  __int128 v125;
  void (*v126)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  if (AMCP::is_base_of((AMCP *)0x6C65766C, a1))
  {
    if (*a4)
    {
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *a4, CFSTR("IOAudioLevelControlMinValue"));
      if (!cf[0])
        goto LABEL_162;
      v8 = applesauce::CF::convert_to<int,0>((const __CFNumber *)cf[0]);
      if (cf[0])
        CFRelease(cf[0]);
      if (!*a4)
        goto LABEL_162;
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *a4, CFSTR("IOAudioLevelControlMinDB"));
      if (!cf[0])
        goto LABEL_162;
      v9 = applesauce::CF::convert_to<int,0>((const __CFNumber *)cf[0]);
      if (v9 >= 0)
        v10 = 1.0;
      else
        v10 = -1.0;
      if (cf[0])
        CFRelease(cf[0]);
      if (!*a4)
        goto LABEL_162;
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *a4, CFSTR("IOAudioLevelControlMaxValue"));
      if (!cf[0])
        goto LABEL_162;
      v11 = applesauce::CF::convert_to<int,0>((const __CFNumber *)cf[0]);
      if (cf[0])
        CFRelease(cf[0]);
      if (*a4
        && (applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *a4, CFSTR("IOAudioLevelControlMaxDB")), cf[0]))
      {
        v12 = applesauce::CF::convert_to<int,0>((const __CFNumber *)cf[0]);
        if (v12 >= 0)
          v13 = 1.0;
        else
          v13 = -1.0;
        if (cf[0])
          CFRelease(cf[0]);
        *(float *)cf = v10
                     * (float)((float)((float)(unsigned __int16)(v9 * (int)v10) * 0.000015259)
                             + (float)(((v9 * (int)v10) >> 16) & 0x7FFF));
        HIDWORD(cf[0]) = v8;
        *(float *)&cf[1] = v13
                         * (float)((float)((float)(unsigned __int16)(v12 * (int)v13) * 0.000015259)
                                 + (float)(((v12 * (int)v13) >> 16) & 0x7FFF));
        HIDWORD(cf[1]) = v11;
        AMCP::Utility::Level_Map::Level_Map(&v114, (uint64_t *)cf, 2uLL);
        if (*a4)
        {
          applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *a4, CFSTR("IOAudioControlValue"));
          if (cf[0])
          {
            v14 = applesauce::CF::convert_to<int,0>((const __CFNumber *)cf[0]);
            if (cf[0])
              CFRelease(cf[0]);
            v15 = AMCP::Utility::Level_Map::calculate_decibel_from_raw((AMCP::Utility::Level_Map *)&v114, v14);
            v16 = *((_DWORD *)v114 + 1);
            v17 = 0.0;
            if (v14 > v16)
            {
              v18 = *((_DWORD *)v115 - 1);
              v17 = 1.0;
              if (v18 > v14)
                v17 = (float)(v14 - v16) / (float)(v18 - v16);
            }
            __p[0] = 0;
            __p[1] = 0;
            v118 = 0;
            std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>((char *)__p, (uint64_t *)v114, v115, ((char *)v115 - (_BYTE *)v114) >> 3);
            LOWORD(v119) = v116;
            v19 = *a3;
            object = v19;
            if (v19)
            {
              v20 = IOObjectRetain(v19);
              if ((_DWORD)v20)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
                v86 = std::system_category();
                MEMORY[0x1B5E5022C](exception, v20, v86, "Error on Retain");
LABEL_172:
                v84 = (void (*)(void *))MEMORY[0x1E0DE4580];
                v85 = (struct type_info *)MEMORY[0x1E0DE4E38];
LABEL_167:
                __cxa_throw(exception, v85, v84);
              }
            }
            std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v112, 0, 1.5836601e190);
            v21 = v112;
            v22 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
            v121 = &off_1E6997A38;
            *(float *)&v122 = v17;
            v123 = (uint64_t *)&v121;
            *(_OWORD *)cf = 0u;
            v125 = 0u;
            v126 = 0;
            std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)&v121);
            v126 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
            std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v21, v22, (AMCP *)cf);
            if (v126)
              v126(0, (uint64_t)cf, 0, 0);
            v23 = (uint64_t (***)())v123;
            if (v123 == (uint64_t *)&v121)
            {
              v24 = 4;
              v23 = &v121;
            }
            else
            {
              if (!v123)
              {
LABEL_60:
                AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(v21);
                v39 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
                v110 = *(_OWORD *)__p;
                __p[0] = 0;
                __p[1] = 0;
                v40 = v118;
                v118 = 0;
                if (v19)
                {
                  v41 = IOObjectRetain(v19);
                  if ((_DWORD)v41)
                  {
                    v87 = __cxa_allocate_exception(0x20uLL);
                    v88 = std::system_category();
                    MEMORY[0x1B5E5022C](v87, v41, v88, "Error on Retain");
                    __cxa_throw(v87, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
                  }
                }
                v123 = 0;
                v42 = (char *)operator new(0x30uLL);
                *(_QWORD *)v42 = &off_1E6997AB8;
                *(_OWORD *)(v42 + 8) = v110;
                *((_QWORD *)v42 + 3) = v40;
                *((_DWORD *)v42 + 10) = v19;
                if (v19)
                {
                  v43 = IOObjectRetain(v19);
                  if ((_DWORD)v43)
                  {
                    v89 = __cxa_allocate_exception(0x20uLL);
                    v90 = std::system_category();
                    MEMORY[0x1B5E5022C](v89, v43, v90, "Error on Retain");
                    __cxa_throw(v89, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
                  }
                }
                v123 = (uint64_t *)v42;
                *(_OWORD *)cf = 0u;
                v125 = 0u;
                v126 = 0;
                std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)&v121);
                v126 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
                std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v21, v39, (AMCP *)cf);
                if (v126)
                  v126(0, (uint64_t)cf, 0, 0);
                v44 = (uint64_t (***)())v123;
                if (v123 == (uint64_t *)&v121)
                {
                  v45 = 4;
                  v44 = &v121;
                }
                else
                {
                  if (!v123)
                  {
LABEL_71:
                    if (v19)
                      IOObjectRelease(v19);
                    AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(v21);
                    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v21 + 40), &v112);
                    v46 = v113;
                    if (v113)
                    {
                      p_shared_owners = (unint64_t *)&v113->__shared_owners_;
                      do
                        v48 = __ldaxr(p_shared_owners);
                      while (__stlxr(v48 - 1, p_shared_owners));
                      if (!v48)
                      {
                        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                        std::__shared_weak_count::__release_weak(v46);
                      }
                    }
                    if (object)
                      IOObjectRelease(object);
                    if (__p[0])
                      operator delete(__p[0]);
                    __p[0] = 0;
                    __p[1] = 0;
                    v118 = 0;
                    std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>((char *)__p, (uint64_t *)v114, v115, ((char *)v115 - (_BYTE *)v114) >> 3);
                    LOWORD(v119) = v116;
                    v49 = *a3;
                    object = v49;
                    if (!v49 || (v50 = IOObjectRetain(v49), !(_DWORD)v50))
                    {
                      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v112, 0, 1.5836601e190);
                      v51 = v112;
                      v52 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
                      v121 = &off_1E6997B38;
                      *(float *)&v122 = v15;
                      v123 = (uint64_t *)&v121;
                      *(_OWORD *)cf = 0u;
                      v125 = 0u;
                      v126 = 0;
                      std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)&v121);
                      v126 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
                      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v51, v52, (AMCP *)cf);
                      if (v126)
                        v126(0, (uint64_t)cf, 0, 0);
                      v53 = (uint64_t (***)())v123;
                      if (v123 == (uint64_t *)&v121)
                      {
                        v54 = 4;
                        v53 = &v121;
                      }
                      else
                      {
                        if (!v123)
                        {
LABEL_91:
                          AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(v51);
                          v55 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
                          v111 = *(_OWORD *)__p;
                          __p[0] = 0;
                          __p[1] = 0;
                          v56 = v118;
                          v118 = 0;
                          if (v49)
                          {
                            v57 = IOObjectRetain(v49);
                            if ((_DWORD)v57)
                            {
                              v92 = __cxa_allocate_exception(0x20uLL);
                              v93 = std::system_category();
                              MEMORY[0x1B5E5022C](v92, v57, v93, "Error on Retain");
                              __cxa_throw(v92, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
                            }
                          }
                          v123 = 0;
                          v58 = (char *)operator new(0x30uLL);
                          *(_QWORD *)v58 = &off_1E6997BB8;
                          *(_OWORD *)(v58 + 8) = v111;
                          *((_QWORD *)v58 + 3) = v56;
                          *((_DWORD *)v58 + 10) = v49;
                          if (v49)
                          {
                            v59 = IOObjectRetain(v49);
                            if ((_DWORD)v59)
                            {
                              v94 = __cxa_allocate_exception(0x20uLL);
                              v95 = std::system_category();
                              MEMORY[0x1B5E5022C](v94, v59, v95, "Error on Retain");
                              __cxa_throw(v94, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
                            }
                          }
                          v123 = (uint64_t *)v58;
                          *(_OWORD *)cf = 0u;
                          v125 = 0u;
                          v126 = 0;
                          std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)&v121);
                          v126 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
                          std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v51, v55, (AMCP *)cf);
                          if (v126)
                            v126(0, (uint64_t)cf, 0, 0);
                          v60 = (uint64_t (***)())v123;
                          if (v123 == (uint64_t *)&v121)
                          {
                            v61 = 4;
                            v60 = &v121;
                          }
                          else
                          {
                            if (!v123)
                            {
LABEL_102:
                              if (v49)
                                IOObjectRelease(v49);
                              AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(v51);
                              std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v51 + 40), &v112);
                              v62 = v113;
                              if (v113)
                              {
                                v63 = (unint64_t *)&v113->__shared_owners_;
                                do
                                  v64 = __ldaxr(v63);
                                while (__stlxr(v64 - 1, v63));
                                if (!v64)
                                {
                                  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                                  std::__shared_weak_count::__release_weak(v62);
                                }
                              }
                              if (object)
                                IOObjectRelease(object);
                              if (__p[0])
                                operator delete(__p[0]);
                              if (v114)
                              {
                                v115 = (uint64_t *)v114;
                                operator delete(v114);
                              }
                              return;
                            }
                            v61 = 5;
                          }
                          (*v60)[v61]();
                          goto LABEL_102;
                        }
                        v54 = 5;
                      }
                      (*v53)[v54]();
                      goto LABEL_91;
                    }
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
                    v91 = std::system_category();
                    MEMORY[0x1B5E5022C](exception, v50, v91, "Error on Retain");
                    goto LABEL_172;
                  }
                  v45 = 5;
                }
                (*v44)[v45]();
                goto LABEL_71;
              }
              v24 = 5;
            }
            (*v23)[v24]();
            goto LABEL_60;
          }
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      else
      {
LABEL_162:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
    }
    else
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    v84 = (void (*)(void *))MEMORY[0x1E0DE4338];
    v85 = (struct type_info *)MEMORY[0x1E0DE4E80];
    goto LABEL_167;
  }
  if (AMCP::is_base_of((AMCP *)0x746F676C, a1))
  {
    cf[0] = CFSTR("IOAudioControlValue");
    BOOL_from = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(a4, cf);
    v26 = *a3;
    if (v26)
    {
      v27 = IOObjectRetain(v26);
      if ((_DWORD)v27)
      {
        v96 = __cxa_allocate_exception(0x20uLL);
        v97 = std::system_category();
        MEMORY[0x1B5E5022C](v96, v27, v97, "Error on Retain");
        __cxa_throw(v96, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
      }
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v121, 0, 1.58366006e190);
    v28 = (uint64_t)v121;
    v29 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
    __p[0] = &off_1E6997C38;
    LOBYTE(__p[1]) = BOOL_from;
    v119 = __p;
    *(_OWORD *)cf = 0u;
    v125 = 0u;
    v126 = 0;
    std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)__p);
    v126 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v28, v29, (AMCP *)cf);
    if (v126)
      v30.n128_f64[0] = ((double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))v126)(0, (uint64_t)cf, 0, 0);
    v31 = v119;
    if (v119 == __p)
    {
      v32 = 4;
      v31 = __p;
    }
    else
    {
      if (!v119)
      {
LABEL_117:
        AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v28);
        v65 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
        if (v26)
        {
          v66 = IOObjectRetain(v26);
          if ((_DWORD)v66)
          {
            v98 = __cxa_allocate_exception(0x20uLL);
            v99 = std::system_category();
            MEMORY[0x1B5E5022C](v98, v66, v99, "Error on Retain");
            __cxa_throw(v98, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
          }
        }
        v119 = 0;
        v67 = (void **)operator new(0x10uLL);
        *v67 = &off_1E6997CB8;
        *((_DWORD *)v67 + 2) = v26;
        if (v26)
        {
          v68 = IOObjectRetain(v26);
          if ((_DWORD)v68)
          {
            v100 = __cxa_allocate_exception(0x20uLL);
            v101 = std::system_category();
            MEMORY[0x1B5E5022C](v100, v68, v101, "Error on Retain");
            __cxa_throw(v100, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
          }
        }
        v119 = v67;
        *(_OWORD *)cf = 0u;
        v125 = 0u;
        v126 = 0;
        std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)__p);
        v126 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
        std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v28, v65, (AMCP *)cf);
        if (v126)
          v126(0, (uint64_t)cf, 0, 0);
        v69 = v119;
        if (v119 == __p)
        {
          v70 = 4;
          v69 = __p;
        }
        else
        {
          if (!v119)
            goto LABEL_128;
          v70 = 5;
        }
        (*((void (**)(void))*v69 + v70))();
LABEL_128:
        if (v26)
          IOObjectRelease(v26);
        AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(v28);
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v28 + 40), &v121);
        v71 = v122;
        if (!v122)
          goto LABEL_134;
        v72 = (unint64_t *)&v122->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
          if (!v26)
            return;
        }
        else
        {
LABEL_134:
          if (!v26)
            return;
        }
        goto LABEL_159;
      }
      v32 = 5;
    }
    (*((void (**)(__n128))*v31 + v32))(v30);
    goto LABEL_117;
  }
  if (!AMCP::is_base_of((AMCP *)0x736C6374, a1))
    return;
  if (!*a4)
  {
    v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v102, "Could not construct");
LABEL_180:
    v103 = (void (*)(void *))MEMORY[0x1E0DE4338];
    v104 = (struct type_info *)MEMORY[0x1E0DE4E80];
    goto LABEL_182;
  }
  applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *a4, CFSTR("IOAudioControlValue"));
  if (!cf[0])
  {
    v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v102, "Could not construct");
    goto LABEL_180;
  }
  v33 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf[0]);
  if (cf[0])
    CFRelease(cf[0]);
  v26 = *a3;
  if (v26)
  {
    v34 = IOObjectRetain(v26);
    if ((_DWORD)v34)
    {
      v102 = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
      v105 = std::system_category();
      MEMORY[0x1B5E5022C](v102, v34, v105, "Error on Retain");
      v103 = (void (*)(void *))MEMORY[0x1E0DE4580];
      v104 = (struct type_info *)MEMORY[0x1E0DE4E38];
LABEL_182:
      __cxa_throw(v102, v104, v103);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v121, 0, 1.58366012e190);
  v35 = (uint64_t)v121;
  v36 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  __p[0] = &off_1E6997D38;
  LODWORD(__p[1]) = v33;
  v119 = __p;
  *(_OWORD *)cf = 0u;
  v125 = 0u;
  v126 = 0;
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)__p);
  v126 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v35, v36, (AMCP *)cf);
  if (v126)
    v126(0, (uint64_t)cf, 0, 0);
  v37 = v119;
  if (v119 == __p)
  {
    v38 = 4;
    v37 = __p;
    goto LABEL_139;
  }
  if (v119)
  {
    v38 = 5;
LABEL_139:
    (*((void (**)(void))*v37 + v38))();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(v35);
  v74 = AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>();
  if (v26)
  {
    v75 = IOObjectRetain(v26);
    if ((_DWORD)v75)
    {
      v106 = __cxa_allocate_exception(0x20uLL);
      v107 = std::system_category();
      MEMORY[0x1B5E5022C](v106, v75, v107, "Error on Retain");
      __cxa_throw(v106, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  v119 = 0;
  v76 = (void **)operator new(0x10uLL);
  *v76 = &off_1E6997DB8;
  *((_DWORD *)v76 + 2) = v26;
  if (v26)
  {
    v77 = IOObjectRetain(v26);
    if ((_DWORD)v77)
    {
      v108 = __cxa_allocate_exception(0x20uLL);
      v109 = std::system_category();
      MEMORY[0x1B5E5022C](v108, v77, v109, "Error on Retain");
      __cxa_throw(v108, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  v119 = v76;
  *(_OWORD *)cf = 0u;
  v125 = 0u;
  v126 = 0;
  std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)__p);
  v126 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(std::vector<unsigned int> const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v35, v74, (AMCP *)cf);
  if (v126)
    v126(0, (uint64_t)cf, 0, 0);
  v78 = v119;
  if (v119 == __p)
  {
    v79 = 4;
    v78 = __p;
  }
  else
  {
    if (!v119)
      goto LABEL_151;
    v79 = 5;
  }
  (*((void (**)(void))*v78 + v79))();
LABEL_151:
  if (v26)
    IOObjectRelease(v26);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(v35);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v35 + 40), &v121);
  v80 = v122;
  if (v122)
  {
    v81 = (unint64_t *)&v122->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (v26)
LABEL_159:
    IOObjectRelease(v26);
}

void sub_1B5C05A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;
  void *v23;

  if (a2)
  {
    __cxa_free_exception(v22);
    operator delete(v23);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::IOAudio1::update_control_range(unsigned int a1, uint64_t a2, CFDictionaryRef *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  float v11;
  unsigned int v12;
  int v13;
  float v14;
  unsigned int v15;
  unsigned int v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  CFTypeRef *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  const __CFArray *v35;
  CFIndex Count;
  CFIndex v37;
  CFArrayRef v38;
  CFIndex v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  CFTypeRef *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  void *v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::runtime_error *exception;
  std::runtime_error *v56;
  __int128 v57;
  __int128 v58;
  CFArrayRef theArray[2];
  uint64_t v60;
  __int16 v61;
  CFTypeRef v62;
  std::__shared_weak_count *v63;
  void *__p;
  uint64_t *v65;
  __int16 v66;
  CFTypeRef v67;
  int v68;
  int v69;
  CFTypeRef v70;
  std::__shared_weak_count *v71;
  CFTypeRef *v72;
  CFTypeRef cf[2];
  __int128 v74;
  void (*v75)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (AMCP::is_base_of((AMCP *)0x6C65766C, a1))
  {
    cf[0] = CFSTR("IOAudioControlValueIsReadOnly");
    LOBYTE(v70) = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(a3, cf);
    AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (char *)&v70, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
    v6 = (std::__shared_weak_count *)cf[1];
    if (cf[1])
    {
      v7 = (unint64_t *)((char *)cf[1] + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (!*a3)
      goto LABEL_120;
    applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *a3, CFSTR("IOAudioLevelControlMinValue"));
    if (!cf[0])
      goto LABEL_120;
    v9 = applesauce::CF::convert_to<int,0>((const __CFNumber *)cf[0]);
    if (cf[0])
      CFRelease(cf[0]);
    if (!*a3)
      goto LABEL_120;
    applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *a3, CFSTR("IOAudioLevelControlMinDB"));
    if (!cf[0])
      goto LABEL_120;
    v10 = applesauce::CF::convert_to<int,0>((const __CFNumber *)cf[0]);
    if (v10 >= 0)
      v11 = 1.0;
    else
      v11 = -1.0;
    if (cf[0])
      CFRelease(cf[0]);
    if (!*a3)
      goto LABEL_120;
    applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *a3, CFSTR("IOAudioLevelControlMaxValue"));
    if (!cf[0])
      goto LABEL_120;
    v12 = applesauce::CF::convert_to<int,0>((const __CFNumber *)cf[0]);
    if (cf[0])
      CFRelease(cf[0]);
    if (!*a3
      || (applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *a3, CFSTR("IOAudioLevelControlMaxDB")), !cf[0]))
    {
LABEL_120:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v13 = applesauce::CF::convert_to<int,0>((const __CFNumber *)cf[0]);
    if (v13 >= 0)
      v14 = 1.0;
    else
      v14 = -1.0;
    if (cf[0])
      CFRelease(cf[0]);
    *(float *)&v15 = v11
                   * (float)((float)((float)(unsigned __int16)(v10 * (int)v11) * 0.000015259)
                           + (float)(((v10 * (int)v11) >> 16) & 0x7FFF));
    cf[0] = (CFTypeRef)__PAIR64__(v9, v15);
    *(float *)&v16 = v14
                   * (float)((float)((float)(unsigned __int16)(v13 * (int)v14) * 0.000015259)
                           + (float)(((v13 * (int)v14) >> 16) & 0x7FFF));
    cf[1] = (CFTypeRef)__PAIR64__(v12, v16);
    AMCP::Utility::Level_Map::Level_Map(&__p, (uint64_t *)cf, 2uLL);
    *(double *)cf = *(float *)&v15;
    *(double *)&cf[1] = *(float *)&v16;
    AMCP::Core::Operation_Utilities::make_typed_property<CA::ValueRange,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1}>((uint64_t *)&v70, 0, (__int128 *)cf, 1.5836601e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)v70 + 10, &v70);
    v17 = v71;
    if (v71)
    {
      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v62, 0, 1.5836601e190);
    v20 = (unsigned int *)v62;
    theArray[0] = 0;
    theArray[1] = 0;
    v60 = 0;
    std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>((char *)theArray, (uint64_t *)__p, v65, ((char *)v65 - (_BYTE *)__p) >> 3);
    v61 = v66;
    v21 = AMCP::Implementation::get_type_marker<std::function<float ()(float)>>();
    v57 = *(_OWORD *)theArray;
    theArray[0] = 0;
    theArray[1] = 0;
    v22 = v60;
    v60 = 0;
    v72 = 0;
    v23 = (char *)operator new(0x28uLL);
    *(_QWORD *)v23 = &off_1E6997E38;
    *(_OWORD *)(v23 + 8) = v57;
    *((_QWORD *)v23 + 3) = v22;
    v72 = (CFTypeRef *)v23;
    *(_OWORD *)cf = 0u;
    v74 = 0u;
    v75 = 0;
    std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)&v70);
    v75 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<float ()(float)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v20, v21, (AMCP *)cf);
    if (v75)
      v75(0, (uint64_t)cf, 0, 0);
    v24 = v72;
    if (v72 == &v70)
    {
      v25 = 4;
      v24 = &v70;
    }
    else
    {
      if (!v72)
        goto LABEL_63;
      v25 = 5;
    }
    (*((void (**)(void))*v24 + v25))();
LABEL_63:
    theArray[0] = 0;
    theArray[1] = 0;
    v60 = 0;
    std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>((char *)theArray, (uint64_t *)__p, v65, ((char *)v65 - (_BYTE *)__p) >> 3);
    v61 = v66;
    v40 = AMCP::Implementation::get_type_marker<std::function<float ()(float,BOOL)>>();
    v58 = *(_OWORD *)theArray;
    theArray[0] = 0;
    theArray[1] = 0;
    v41 = v60;
    v60 = 0;
    v72 = 0;
    v42 = (char *)operator new(0x28uLL);
    *(_QWORD *)v42 = &off_1E6997EB8;
    *(_OWORD *)(v42 + 8) = v58;
    *((_QWORD *)v42 + 3) = v41;
    v72 = (CFTypeRef *)v42;
    *(_OWORD *)cf = 0u;
    v74 = 0u;
    v75 = 0;
    std::__function::__value_func<float ()(float,BOOL)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)&v70);
    v75 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<float ()(float,BOOL)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v20, v40, (AMCP *)cf);
    if (v75)
      v75(0, (uint64_t)cf, 0, 0);
    v43 = v72;
    if (v72 == &v70)
    {
      v44 = 4;
      v43 = &v70;
    }
    else
    {
      if (!v72)
        goto LABEL_70;
      v44 = 5;
    }
    (*((void (**)(void))*v43 + v44))();
LABEL_70:
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, v20 + 10, &v62);
    v45 = v63;
    if (v63)
    {
      v46 = (unint64_t *)&v63->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (__p)
    {
      v65 = (uint64_t *)__p;
      operator delete(__p);
    }
    return;
  }
  if (AMCP::is_base_of((AMCP *)0x746F676C, a1))
  {
    cf[0] = CFSTR("IOAudioControlValueIsReadOnly");
    LOBYTE(v70) = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(a3, cf);
    AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (char *)&v70, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
    v26 = (std::__shared_weak_count *)cf[1];
    if (cf[1])
    {
      v27 = (unint64_t *)((char *)cf[1] + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    return;
  }
  if (!AMCP::is_base_of((AMCP *)0x736C6374, a1))
    return;
  cf[0] = CFSTR("IOAudioControlValueIsReadOnly");
  LOBYTE(v70) = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(a3, cf);
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (char *)&v70, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
  v29 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v30 = (unint64_t *)((char *)cf[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  LOBYTE(v70) = 0;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (char *)&v70, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
  v32 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v33 = (unint64_t *)((char *)cf[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  cf[0] = 0;
  cf[1] = 0;
  *(_QWORD *)&v74 = 0;
  if (!*a3)
  {
    v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v56, "Could not construct");
LABEL_123:
    __cxa_throw(v56, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const*>((applesauce::CF::ArrayRef *)theArray, *a3, CFSTR("IOAudioSelectorControlAvailableSelections"));
  v35 = theArray[0];
  if (theArray[0])
  {
    Count = CFArrayGetCount(theArray[0]);
    v37 = Count;
    v38 = theArray[0];
    if (theArray[0])
    {
      v39 = CFArrayGetCount(theArray[0]);
      if (!v37)
        goto LABEL_108;
    }
    else
    {
      v39 = 0;
      if (!Count)
        goto LABEL_108;
    }
    v48 = 0;
    while (1)
    {
      if (v35 == v38 && v39 == v48)
        goto LABEL_108;
      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v62, v35, v48);
      v69 = 0;
      if (!v62)
        goto LABEL_121;
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v70, (CFDictionaryRef)v62, CFSTR("IOAudioSelectorControlSelectionValue"));
      if (!v70)
        goto LABEL_121;
      v49 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v70);
      if (v70)
        CFRelease(v70);
      v69 = v49;
      if (!v62)
      {
LABEL_121:
        v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v56, "Could not construct");
        goto LABEL_123;
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v70, (CFDictionaryRef)v62, CFSTR("IOAudioSelectorControlTransportValue"));
      if ((_BYTE)v71)
        break;
      if (!v62)
        goto LABEL_121;
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&__p, (CFDictionaryRef)v62, CFSTR("IOAudioSelectorControlClockSourceKey"));
      if (v71 == v65)
      {
        if ((_BYTE)v71)
        {
          v50 = (void *)v70;
          v70 = __p;
          __p = v50;
        }
      }
      else if ((_BYTE)v71)
      {
        std::__optional_destruct_base<applesauce::CF::NumberRef,false>::reset[abi:ne180100]((uint64_t)&v70);
      }
      else
      {
        v70 = __p;
        __p = 0;
        LOBYTE(v71) = 1;
      }
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
      v68 = 0;
      if ((_BYTE)v71)
        goto LABEL_96;
      v51 = 0;
LABEL_98:
      v68 = v51;
      if (!v62)
        goto LABEL_121;
      v67 = 0;
      applesauce::CF::at_or<applesauce::CF::StringRef,__CFString const*>(&__p, (const __CFDictionary *)v62, CFSTR("IOAudioSelectorControlSelectionDescriptionKey"), &v67);
      if (v67)
        CFRelease(v67);
      std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::emplace_back<unsigned int &,unsigned int &,applesauce::CF::StringRef&>((uint64_t *)cf, &v69, &v68, (CFTypeRef *)&__p);
      if (__p)
        CFRelease(__p);
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v70);
      if (v62)
        CFRelease(v62);
      if (v37 == ++v48)
        goto LABEL_108;
    }
    v68 = 0;
LABEL_96:
    if (!v70)
      goto LABEL_121;
    v51 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v70);
    goto LABEL_98;
  }
LABEL_108:
  __p = (void *)0x676C6F6273636169;
  LODWORD(v65) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>((uint64_t *)&v70, (uint64_t)&__p, (uint64_t)cf[0], (uint64_t)cf[1]);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)v70 + 10, &v70);
  v52 = v71;
  if (v71)
  {
    v53 = (unint64_t *)&v71->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (theArray[0])
    CFRelease(theArray[0]);
  v70 = cf;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
}

void sub_1B5C06768(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B5C0693C(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

_QWORD *AMCP::Utility::Level_Map::Level_Map(_QWORD *a1, uint64_t *a2, unint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  float *v10;
  float v11;
  float v12;
  float v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<void const*>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    v7 = 8 * a3;
    do
    {
      v8 = *a2++;
      *(_QWORD *)v6 = v8;
      v6 += 8;
      v7 -= 8;
    }
    while (v7);
    a1[1] = v6;
    v9 = (_DWORD *)*a1;
  }
  else
  {
    v9 = 0;
    v6 = 0;
  }
  if ((unint64_t)(v6 - (char *)v9) < 0x10)
LABEL_12:
    __assert_rtn("Level_Map", "Level_Map.h", 49, "data_is_valid()");
  v11 = *(float *)v9;
  v10 = (float *)(v9 + 2);
  v12 = v11;
  do
  {
    v13 = v12;
    v12 = *v10;
    if (v13 >= *v10 || *((_DWORD *)v10 - 1) >= *((_DWORD *)v10 + 1))
      goto LABEL_12;
    v10 += 2;
  }
  while (v10 != (float *)v6);
  return a1;
}

void sub_1B5C06A38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<CA::ValueRange,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1}>(uint64_t *a1, int a2, __int128 *a3, double a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t (***v8)();
  uint64_t v9;
  _OWORD v11[2];
  void (*v12)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t (**v13)();
  __int128 v14;
  uint64_t (***v15)();
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRange ()(void)>>();
  v12 = 0;
  v13 = &off_1E69998F8;
  v14 = *a3;
  v15 = &v13;
  memset(v11, 0, sizeof(v11));
  std::__function::__value_func<CA::ValueRange ()(void)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)&v13);
  v12 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRange ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v11);
  if (v12)
    v12(0, (uint64_t)v11, 0, 0);
  v8 = v15;
  if (v15 == &v13)
  {
    v9 = 4;
    v8 = &v13;
    goto LABEL_7;
  }
  if (v15)
  {
    v9 = 5;
LABEL_7:
    (*v8)[v9]();
  }
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(v6);
}

void sub_1B5C06B64(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

char *std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<void const*>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B5C06BE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

applesauce::CF::ArrayRef *applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const*>(applesauce::CF::ArrayRef *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  std::runtime_error *exception;

  v4 = applesauce::CF::details::at_key<__CFString const*>(theDict, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = v4;
  CFRetain(v4);
  return applesauce::CF::ArrayRef::ArrayRef(a1, v5);
}

void sub_1B5C06C64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  void (*v18)(int, uint64_t, AMCP::Thing *, uint64_t *);
  void **v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v12 = 0;
  v13 = 0;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(&v11, a3, a4, (a4 - a3) >> 4);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>();
  v15 = 0;
  v16 = 0;
  v14 = 0;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(&v14, v11, v12, (v12 - v11) >> 4);
  v21 = 0;
  v8 = operator new(0x20uLL);
  *v8 = &off_1E699A100;
  v8[2] = 0;
  v8[3] = 0;
  v8[1] = 0;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(v8 + 1, v14, v15, (v15 - v14) >> 4);
  v21 = v8;
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  std::__function::__value_func<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v20);
  v18 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v17);
  if (v18)
    v18(0, (uint64_t)v17, 0, 0);
  v9 = v21;
  if (v21 == v20)
  {
    v10 = 4;
    v9 = v20;
    goto LABEL_7;
  }
  if (v21)
  {
    v10 = 5;
LABEL_7:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v19 = (void **)&v14;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v19);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(v6);
  *(_QWORD *)&v17[0] = &v11;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
}

void sub_1B5C06E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E699A100;
  v3 = (void **)(a1 + 8);
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::~__func(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = &off_1E699A100;
  v1 = (void **)(a1 + 8);
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  *v2 = &off_1E699A100;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(v2 + 1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4);
  return v2;
}

void sub_1B5C06F5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E699A100;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  return std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(a2 + 1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 8);
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyINSt3__16vectorINS3_5tupleIJjjN10applesauce2CF9StringRefEEEENS3_9allocatorIS9_EEEEEENS3_10shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1>,float ()(float,BOOL)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E6997EB8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1>,float ()(float,BOOL)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E6997EB8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E50688);
}

void *std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1>,float ()(float,BOOL)>::__clone(uint64_t a1)
{
  void *v2;

  v2 = operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E6997EB8;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 1) = 0;
  std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>((char *)v2 + 8, *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  *((_WORD *)v2 + 16) = *(_WORD *)(a1 + 32);
  return v2;
}

void sub_1B5C0713C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1>,float ()(float,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  char *result;

  *(_QWORD *)a2 = &off_1E6997EB8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>((char *)(a2 + 8), *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 32);
  return result;
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1>,float ()(float,BOOL)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1>,float ()(float,BOOL)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

float std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1>,float ()(float,BOOL)>::operator()(uint64_t a1, float *a2)
{
  return AMCP::Utility::Level_Map::calculate_scalar_from_decibel((float **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1>,float ()(float,BOOL)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L27update_volume_control_rangeERNS_4Core13Operation_SetERKN10applesauce2CF13DictionaryRefEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1>,float ()(float,BOOL)>::target_type()
{
}

float AMCP::Utility::Level_Map::calculate_scalar_from_decibel(float **this, float a2)
{
  float v2;
  int v4;
  int v5;
  int v6;

  v2 = 0.0;
  if (**this < a2)
  {
    if (*(this[1] - 2) <= a2)
    {
      return 1.0;
    }
    else
    {
      v4 = AMCP::Utility::Level_Map::calculate_raw_from_decibel(this, a2);
      v5 = *((_DWORD *)*this + 1);
      if (v4 > v5)
      {
        v6 = *((_DWORD *)this[1] - 1);
        v2 = 1.0;
        if (v6 > v4)
          return (float)(v4 - v5) / (float)(v6 - v5);
      }
    }
  }
  return v2;
}

uint64_t AMCP::Utility::Level_Map::calculate_raw_from_decibel(float **this, float a2)
{
  float *v2;
  float *v3;
  unint64_t v4;
  float *v5;
  unint64_t v6;
  float *v7;
  float *v8;
  float v9;
  const char *v11;
  int v12;

  v2 = *this;
  if (**this >= a2)
    return *((unsigned int *)v2 + 1);
  v3 = this[1];
  if (*(v3 - 2) > a2)
  {
    if (v3 == v2)
      goto LABEL_17;
    v4 = ((char *)v3 - (char *)v2) >> 3;
    v5 = *this;
    do
    {
      v6 = v4 >> 1;
      v7 = &v5[2 * (v4 >> 1)];
      v9 = *v7;
      v8 = v7 + 2;
      v4 += ~(v4 >> 1);
      if (v9 < a2)
        v5 = v8;
      else
        v4 = v6;
    }
    while (v4);
    if (v3 == v5)
    {
LABEL_17:
      v11 = "search_result != m_map.end()";
      v12 = 261;
    }
    else
    {
      if (v2 != v5)
        return (*((_DWORD *)v5 - 1)
                            + (int)(float)((float)((float)(a2 - *(v5 - 2)) / (float)(*v5 - *(v5 - 2)))
                                         * (float)(*((_DWORD *)v5 + 1) - *((_DWORD *)v5 - 1))));
      v11 = "search_result != m_map.begin()";
      v12 = 265;
    }
    __assert_rtn("find_span_for_decibel", "Level_Map.h", v12, v11);
  }
  return *((unsigned int *)v3 - 1);
}

_QWORD *std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0>,float ()(float)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E6997E38;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0>,float ()(float)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E6997E38;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E50688);
}

void *std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  void *v2;

  v2 = operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E6997E38;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 1) = 0;
  std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>((char *)v2 + 8, *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  *((_WORD *)v2 + 16) = *(_WORD *)(a1 + 32);
  return v2;
}

void sub_1B5C07498(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  char *result;

  *(_QWORD *)a2 = &off_1E6997E38;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>((char *)(a2 + 8), *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 32);
  return result;
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0>,float ()(float)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0>,float ()(float)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

float std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  return AMCP::Utility::Level_Map::calculate_decibel_from_raw((AMCP::Utility::Level_Map *)(a1 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4)+ (int)(float)(fmaxf(fminf(*a2, 1.0), 0.0)* (float)(*(_DWORD *)(*(_QWORD *)(a1 + 16) - 4) - *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4))));
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L27update_volume_control_rangeERNS_4Core13Operation_SetERKN10applesauce2CF13DictionaryRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0>,float ()(float)>::target_type()
{
}

float AMCP::Utility::Level_Map::calculate_decibel_from_raw(AMCP::Utility::Level_Map *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  const char *v11;
  int v12;

  v2 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 4) >= a2)
    return *(float *)v2;
  v3 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v3 - 4) > a2)
  {
    if (v3 == v2)
      goto LABEL_16;
    v4 = (v3 - v2) >> 3;
    v5 = *(_QWORD *)this;
    do
    {
      v6 = v4 >> 1;
      v7 = v5 + 8 * (v4 >> 1);
      v8 = *(_DWORD *)(v7 + 4);
      v9 = v7 + 8;
      v4 += ~(v4 >> 1);
      if (v8 < a2)
        v5 = v9;
      else
        v4 = v6;
    }
    while (v4);
    if (v3 == v5)
    {
LABEL_16:
      v11 = "search_result != m_map.end()";
      v12 = 238;
    }
    else
    {
      if (v2 != v5)
        return *(float *)(v5 - 8)
             + (float)((float)((float)(a2 - *(_DWORD *)(v5 - 4)) / (float)(*(_DWORD *)(v5 + 4) - *(_DWORD *)(v5 - 4)))
                     * (float)(*(float *)v5 - *(float *)(v5 - 8)));
      v11 = "search_result != m_map.begin()";
      v12 = 242;
    }
    __assert_rtn("find_span_for_raw", "Level_Map.h", v12, v11);
  }
  return *(float *)(v3 - 8);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1}>,CA::ValueRange ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1}>,CA::ValueRange ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E69998F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1}>,CA::ValueRange ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69998F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1}>,CA::ValueRange ()(void)>::operator()(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1}>,CA::ValueRange ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyIN2CA10ValueRangeEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1}>,CA::ValueRange ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::~__func(uint64_t a1)
{
  io_object_t v2;

  *(_QWORD *)a1 = &off_1E6997DB8;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
    IOObjectRelease(v2);
  return a1;
}

void std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::~__func(uint64_t a1)
{
  io_object_t v1;

  *(_QWORD *)a1 = &off_1E6997DB8;
  v1 = *(_DWORD *)(a1 + 8);
  if (v1)
    IOObjectRelease(v1);
  JUMPOUT(0x1B5E50688);
}

io_object_t *std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::__clone(uint64_t a1)
{
  io_object_t *v1;
  io_object_t *v2;

  v1 = (io_object_t *)(a1 + 8);
  v2 = (io_object_t *)operator new(0x10uLL);
  *(_QWORD *)v2 = &off_1E6997DB8;
  std::__compressed_pair_elem<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>(v2 + 2, v1);
  return v2;
}

void sub_1B5C07838(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

io_object_t *std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E6997DB8;
  return std::__compressed_pair_elem<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>((io_object_t *)(a2 + 8), (io_object_t *)(a1 + 8));
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::destroy[abi:ne180100](*(unsigned int *)(a1 + 8));
}

void std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::destroy_deallocate(unsigned int *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::destroy[abi:ne180100](a1[2]);
  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  CFNumberRef v4;
  CFNumberRef v5;
  std::runtime_error *exception;
  std::runtime_error *v7;
  CFNumberRef v8;
  CFTypeRef cf;

  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    if (!*(_DWORD *)(a1 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "IOAudioControlValue");
    LODWORD(v8) = **(_DWORD **)a2;
    v4 = CFNumberCreate(0, kCFNumberIntType, &v8);
    v5 = v4;
    if (!v4)
    {
      v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v7, "Could not construct");
      __cxa_throw(v7, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    CFRetain(v4);
    v8 = v5;
    applesauce::iokit::io_object_proxy::set_properties(*(_DWORD *)(a1 + 8), (const __CFString *)cf, (const void **)&v8);
    CFRelease(v5);
    CFRelease(v5);
    if (cf)
      CFRelease(cf);
  }
}

void sub_1B5C079A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L29update_selector_control_valueERNS_4Core13Operation_SetERKN10applesauce5iokit16io_object_holderERKNS4_2CF13DictionaryRefEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::target_type()
{
}

uint64_t std::__function::__alloc_func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::destroy[abi:ne180100](uint64_t result)
{
  if ((_DWORD)result)
    return IOObjectRelease(result);
  return result;
}

io_object_t *std::__compressed_pair_elem<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>(io_object_t *a1, io_object_t *a2)
{
  io_object_t v3;
  uint64_t v4;
  uint64_t v6;
  void *exception;
  const std::error_category *v8;

  v3 = *a2;
  *a1 = *a2;
  if (v3)
  {
    v4 = IOObjectRetain(v3);
    if ((_DWORD)v4)
    {
      v6 = v4;
      exception = __cxa_allocate_exception(0x20uLL);
      v8 = std::system_category();
      MEMORY[0x1B5E5022C](exception, v6, v8, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  return a1;
}

void sub_1B5C07AEC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,std::vector<unsigned int> ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E6997D38;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,std::vector<unsigned int> ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E6997D38;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,std::vector<unsigned int> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  _DWORD *v4;
  _DWORD *result;

  v3 = *(_DWORD *)(a1 + 8);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v4 = operator new(4uLL);
  *a2 = v4;
  *v4 = v3;
  result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,std::vector<unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L29update_selector_control_valueERNS_4Core13Operation_SetERKN10applesauce5iokit16io_object_holderERKNS4_2CF13DictionaryRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,std::vector<unsigned int> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::~__func(uint64_t a1)
{
  io_object_t v2;

  *(_QWORD *)a1 = &off_1E6997CB8;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
    IOObjectRelease(v2);
  return a1;
}

void std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::~__func(uint64_t a1)
{
  io_object_t v1;

  *(_QWORD *)a1 = &off_1E6997CB8;
  v1 = *(_DWORD *)(a1 + 8);
  if (v1)
    IOObjectRelease(v1);
  JUMPOUT(0x1B5E50688);
}

io_object_t *std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::__clone(uint64_t a1)
{
  io_object_t *v1;
  io_object_t *v2;

  v1 = (io_object_t *)(a1 + 8);
  v2 = (io_object_t *)operator new(0x10uLL);
  *(_QWORD *)v2 = &off_1E6997CB8;
  std::__compressed_pair_elem<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>(v2 + 2, v1);
  return v2;
}

void sub_1B5C07CB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

io_object_t *std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E6997CB8;
  return std::__compressed_pair_elem<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>((io_object_t *)(a2 + 8), (io_object_t *)(a1 + 8));
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::destroy[abi:ne180100](*(unsigned int *)(a1 + 8));
}

void std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::destroy_deallocate(unsigned int *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::destroy[abi:ne180100](a1[2]);
  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  CFNumberRef v4;
  CFNumberRef v5;
  std::runtime_error *exception;
  std::runtime_error *v7;
  CFNumberRef v8;
  CFTypeRef cf;

  if (!*(_DWORD *)(a1 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "IOAudioControlValue");
  LODWORD(v8) = *a2;
  v4 = CFNumberCreate(0, kCFNumberIntType, &v8);
  v5 = v4;
  if (!v4)
  {
    v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v7, "Could not construct");
    __cxa_throw(v7, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(v4);
  v8 = v5;
  applesauce::iokit::io_object_proxy::set_properties(*(_DWORD *)(a1 + 8), (const __CFString *)cf, (const void **)&v8);
  CFRelease(v5);
  CFRelease(v5);
  if (cf)
    CFRelease(cf);
}

void sub_1B5C07E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L28update_BOOLean_control_valueERNS_4Core13Operation_SetERKN10applesauce5iokit16io_object_holderERKNS4_2CF13DictionaryRefEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::target_type()
{
}

uint64_t std::__function::__alloc_func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::destroy[abi:ne180100](uint64_t result)
{
  if ((_DWORD)result)
    return IOObjectRelease(result);
  return result;
}

io_object_t *std::__compressed_pair_elem<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>(io_object_t *a1, io_object_t *a2)
{
  io_object_t v3;
  uint64_t v4;
  uint64_t v6;
  void *exception;
  const std::error_category *v8;

  v3 = *a2;
  *a1 = *a2;
  if (v3)
  {
    v4 = IOObjectRetain(v3);
    if ((_DWORD)v4)
    {
      v6 = v4;
      exception = __cxa_allocate_exception(0x20uLL);
      v8 = std::system_category();
      MEMORY[0x1B5E5022C](exception, v6, v8, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  return a1;
}

void sub_1B5C07F5C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_BYTE *std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E6997C38;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,BOOL ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E6997C38;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L28update_BOOLean_control_valueERNS_4Core13Operation_SetERKN10applesauce5iokit16io_object_holderERKNS4_2CF13DictionaryRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::~__func(uint64_t a1)
{
  io_object_t v2;
  void *v3;

  *(_QWORD *)a1 = &off_1E6997BB8;
  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
    IOObjectRelease(v2);
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::~__func(uint64_t a1)
{
  io_object_t v2;
  void *v3;

  *(_QWORD *)a1 = &off_1E6997BB8;
  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
    IOObjectRelease(v2);
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1E6997BB8;
  std::__compressed_pair_elem<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5C08114(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6997BB8;
  return std::__compressed_pair_elem<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::operator()(uint64_t a1, float *a2)
{
  int v3;
  int v4;
  CFNumberRef v5;
  CFNumberRef v6;
  std::runtime_error *exception;
  std::runtime_error *v8;
  CFNumberRef v9;
  CFTypeRef cf;

  v3 = AMCP::Utility::Level_Map::calculate_raw_from_decibel((float **)(a1 + 8), *a2);
  if (!*(_DWORD *)(a1 + 40))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = v3;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "IOAudioControlValue");
  LODWORD(v9) = v4;
  v5 = CFNumberCreate(0, kCFNumberIntType, &v9);
  v6 = v5;
  if (!v5)
  {
    v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "Could not construct");
    __cxa_throw(v8, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(v5);
  v9 = v6;
  applesauce::iokit::io_object_proxy::set_properties(*(_DWORD *)(a1 + 40), (const __CFString *)cf, (const void **)&v9);
  CFRelease(v6);
  CFRelease(v6);
  if (cf)
    CFRelease(cf);
}

void sub_1B5C08278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L27update_volume_control_valueERNS_4Core13Operation_SetERKN10applesauce5iokit16io_object_holderERKNS4_2CF13DictionaryRefEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::target_type()
{
}

void std::__function::__alloc_func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::destroy[abi:ne180100](uint64_t a1)
{
  io_object_t v2;
  void *v3;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2)
    IOObjectRelease(v2);
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3 const&,0ul>(uint64_t a1, uint64_t a2)
{
  io_object_t v4;
  uint64_t v5;
  void *exception;
  const std::error_category *v8;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>((char *)a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  v4 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 32) = v4;
  if (v4)
  {
    v5 = IOObjectRetain(v4);
    if ((_DWORD)v5)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v8 = std::system_category();
      MEMORY[0x1B5E5022C](exception, v5, v8, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  return a1;
}

void sub_1B5C0841C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v4;

  __cxa_free_exception(v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2>,float ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2>,float ()(void)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E6997B38;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2>,float ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E6997B38;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

float std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2>,float ()(void)>::operator()(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2>,float ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L27update_volume_control_valueERNS_4Core13Operation_SetERKN10applesauce5iokit16io_object_holderERKNS4_2CF13DictionaryRefEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2>,float ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::~__func(uint64_t a1)
{
  io_object_t v2;
  void *v3;

  *(_QWORD *)a1 = &off_1E6997AB8;
  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
    IOObjectRelease(v2);
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::~__func(uint64_t a1)
{
  io_object_t v2;
  void *v3;

  *(_QWORD *)a1 = &off_1E6997AB8;
  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
    IOObjectRelease(v2);
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1E6997AB8;
  std::__compressed_pair_elem<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5C085EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6997AB8;
  return std::__compressed_pair_elem<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::operator()(uint64_t a1, float *a2)
{
  int v3;
  CFNumberRef v4;
  CFNumberRef v5;
  std::runtime_error *exception;
  std::runtime_error *v7;
  CFNumberRef v8;
  CFTypeRef cf;

  if (!*(_DWORD *)(a1 + 40))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4)
     + (int)(float)(fmaxf(fminf(*a2, 1.0), 0.0)
                  * (float)(*(_DWORD *)(*(_QWORD *)(a1 + 16) - 4) - *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4)));
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "IOAudioControlValue");
  LODWORD(v8) = v3;
  v4 = CFNumberCreate(0, kCFNumberIntType, &v8);
  v5 = v4;
  if (!v4)
  {
    v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v7, "Could not construct");
    __cxa_throw(v7, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(v4);
  v8 = v5;
  applesauce::iokit::io_object_proxy::set_properties(*(_DWORD *)(a1 + 40), (const __CFString *)cf, (const void **)&v8);
  CFRelease(v5);
  CFRelease(v5);
  if (cf)
    CFRelease(cf);
}

void sub_1B5C08774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L27update_volume_control_valueERNS_4Core13Operation_SetERKN10applesauce5iokit16io_object_holderERKNS4_2CF13DictionaryRefEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::target_type()
{
}

void std::__function::__alloc_func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::destroy[abi:ne180100](uint64_t a1)
{
  io_object_t v2;
  void *v3;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2)
    IOObjectRelease(v2);
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  io_object_t v4;
  uint64_t v5;
  void *exception;
  const std::error_category *v8;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>((char *)a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  v4 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 32) = v4;
  if (v4)
  {
    v5 = IOObjectRetain(v4);
    if ((_DWORD)v5)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v8 = std::system_category();
      MEMORY[0x1B5E5022C](exception, v5, v8, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  return a1;
}

void sub_1B5C08918(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v4;

  __cxa_free_exception(v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,float ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,float ()(void)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E6997A38;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,float ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E6997A38;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

float std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,float ()(void)>::operator()(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,float ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L27update_volume_control_valueERNS_4Core13Operation_SetERKN10applesauce5iokit16io_object_holderERKNS4_2CF13DictionaryRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,float ()(void)>::target_type()
{
}

uint64_t std::__function::__alloc_func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t result;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
  result = *(unsigned int *)(a1 + 4);
  if ((_DWORD)result)
    return IOObjectRelease(result);
  return result;
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  io_object_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  void *exception;
  const std::error_category *v12;

  v4 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v4;
  if (v4)
  {
    v5 = IOObjectRetain(v4);
    if ((_DWORD)v5)
    {
      v10 = v5;
      exception = __cxa_allocate_exception(0x20uLL);
      v12 = std::system_category();
      MEMORY[0x1B5E5022C](exception, v10, v12, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return a1;
}

void sub_1B5C08AD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::IOAudio1::Control::build_core(AMCP::IOAudio1::Control *this)
{
  io_registry_entry_t v2;
  uint64_t v3;
  int v4;
  signed int v5;
  AMCP::Log::Scope_Registry *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  std::__shared_weak_count *imp;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  void *v46;
  std::__shared_weak_count *v47;
  NSObject *v48;
  unint64_t *v49;
  unint64_t v50;
  _opaque_pthread_t *v51;
  mach_port_t v52;
  void *v53;
  std::runtime_error *exception;
  void (*v55)(void *);
  struct type_info *v56;
  const std::error_category *v57;
  std::runtime_error *v58;
  std::runtime_error *v59;
  std::runtime_error *v60;
  std::runtime_error *v61;
  std::runtime_error *v62;
  std::runtime_error *v63;
  std::runtime_error *v64;
  std::runtime_error *v65;
  AMCP::Core::Core *v66;
  std::__shared_weak_count *v67;
  CFTypeRef v68;
  void *__p[2];
  __int128 v70;
  int v71;
  __int128 v72;
  uint64_t v73;
  CFTypeRef cf;
  __int128 v75;
  uint64_t v76;
  std::runtime_error v77;
  std::runtime_error v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  char v84;
  CFMutableDictionaryRef properties;
  __int128 v86;
  __int128 v87;
  const char *v88;
  void *v89;
  char v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 4) = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                                                                                                  + 32)
                                                                                      + 16));
  *(_OWORD *)__p = 0u;
  v70 = 0u;
  v71 = 1065353216;
  v2 = *((_DWORD *)this + 5);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    v55 = (void (*)(void *))MEMORY[0x1E0DE4338];
    v56 = (struct type_info *)MEMORY[0x1E0DE4E80];
    goto LABEL_134;
  }
  properties = 0;
  v3 = IORegistryEntryCreateCFProperties(v2, &properties, 0, 0);
  if ((_DWORD)v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    v57 = std::system_category();
    MEMORY[0x1B5E5022C](exception, v3, v57, "Error on get_properties");
    v55 = (void (*)(void *))MEMORY[0x1E0DE4580];
    v56 = (struct type_info *)MEMORY[0x1E0DE4E38];
LABEL_134:
    __cxa_throw(exception, v56, v55);
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v68, properties);
  if (!v68)
  {
    v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v58, "Could not construct");
    __cxa_throw(v58, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&properties, (CFDictionaryRef)v68, CFSTR("IOAudioControlType"));
  if (!properties)
  {
    v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v59, "Could not construct");
    __cxa_throw(v59, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = applesauce::CF::convert_to<unsigned int,0>(properties);
  if (properties)
    CFRelease(properties);
  if (!v68)
  {
    v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v60, "Could not construct");
    __cxa_throw(v60, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&properties, (CFDictionaryRef)v68, CFSTR("IOAudioControlSubType"));
  if (!properties)
  {
    v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v61, "Could not construct");
    __cxa_throw(v61, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = applesauce::CF::convert_to<unsigned int,0>(properties);
  v6 = properties;
  if (properties)
    CFRelease(properties);
  if (v4 == 1953458028)
  {
    v7 = 1953458028;
    if (v5 <= 1885888877)
    {
      if (v5 == 1702259059 || v5 == 1784767339)
        goto LABEL_35;
      v8 = 1836414053;
    }
    else
    {
      if (v5 <= 1936682094)
      {
        if (v5 != 1885888878)
        {
          v8 = 1885893481;
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      if (v5 == 1936682095)
        goto LABEL_35;
      v8 = 1937072749;
    }
LABEL_34:
    if (v5 != v8)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (v4 != 1936483188)
  {
    if (v4 != 1818588780)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&properties, "com.apple.coreaudio", "AMCP");
      v47 = (std::__shared_weak_count *)v86;
      v48 = *(NSObject **)properties;
      if ((_QWORD)v86)
      {
        v49 = (unint64_t *)(v86 + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        v51 = pthread_self();
        v52 = pthread_mach_thread_np(v51);
        LODWORD(properties) = 67109890;
        HIDWORD(properties) = v52;
        LOWORD(v86) = 2080;
        *(_QWORD *)((char *)&v86 + 2) = "IOAudio1_Control.cpp";
        WORD5(v86) = 1024;
        HIDWORD(v86) = 148;
        LOWORD(v87) = 2080;
        *(_QWORD *)((char *)&v87 + 2) = "stock_class_id == k_class_id_unknown";
        _os_log_error_impl(&dword_1B57BA000, v48, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&properties, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v84);
      v53 = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v77, "failed to identify the control");
      std::runtime_error::runtime_error(&v78, &v77);
      v80 = 0;
      v81 = 0;
      v82 = 0;
      v83 = -1;
      v78.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v79 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&properties, (uint64_t)&v78);
      *((_QWORD *)&v87 + 1) = "std::tuple<Class_ID, Class_ID> AMCP::IOAudio1::calculate_control_class_info(uint32_t, uint32_t)";
      v88 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IOAudio1/IOAudio1_Control.cpp";
      LODWORD(v89) = 148;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v72);
      cf = off_1E69A20A0;
      v75 = v72;
      v76 = v73;
      v72 = 0uLL;
      v73 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&properties, (uint64_t)&cf);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v53, (uint64_t)&properties);
    }
    if (v5 != 1937072758 && v5 != 1986817381)
    {
      v7 = 1818588780;
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  v7 = 1936483188;
  if (v5 <= 1768845427)
  {
    if (v5 != 1668047723 && v5 != 1684370292)
    {
      v8 = 1751740518;
      goto LABEL_34;
    }
LABEL_35:
    v7 = v5;
    goto LABEL_36;
  }
  if (v5 == 1768845428)
  {
LABEL_28:
    v5 = 1685287523;
    v7 = 1685287523;
    goto LABEL_36;
  }
  if (v5 != 1852597622)
  {
    if (v5 != 1869968496)
      goto LABEL_36;
    goto LABEL_28;
  }
  v5 = 1852601964;
  v7 = 1852601964;
LABEL_36:
  if (!v68)
  {
    v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v62, "Could not construct");
    __cxa_throw(v62, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&properties, (CFDictionaryRef)v68, CFSTR("IOAudioControlUsage"));
  if (!properties)
  {
    v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v63, "Could not construct");
    __cxa_throw(v63, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = applesauce::CF::convert_to<unsigned int,0>(properties);
  if (properties)
    CFRelease(properties);
  if (v9 != 1768845428)
  {
    if (v9 == 1885434739)
    {
      v9 = 1886679669;
    }
    else if (v9 != 1869968496)
    {
      v9 = 1735159650;
    }
  }
  if (!v68)
  {
    v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v64, "Could not construct");
    __cxa_throw(v64, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&properties, (CFDictionaryRef)v68, CFSTR("IOAudioControlChannelNumber"));
  if (!properties)
  {
    v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v65, "Could not construct");
    __cxa_throw(v65, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = applesauce::CF::convert_to<unsigned int,0>(properties);
  if (properties)
    CFRelease(properties);
  LODWORD(v78.__vftable) = *((_DWORD *)this + 4);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&properties, 0, (int *)&v78, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)properties + 10, &properties);
  v11 = (std::__shared_weak_count *)v86;
  if ((_QWORD)v86)
  {
    v12 = (unint64_t *)(v86 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  LODWORD(v78.__vftable) = v7;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&properties, 0, (int *)&v78, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)properties + 10, &properties);
  v14 = (std::__shared_weak_count *)v86;
  if ((_QWORD)v86)
  {
    v15 = (unint64_t *)(v86 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  LODWORD(v78.__vftable) = v5;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&properties, 0, (int *)&v78, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)properties + 10, &properties);
  v17 = (std::__shared_weak_count *)v86;
  if ((_QWORD)v86)
  {
    v18 = (unint64_t *)(v86 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  LODWORD(v78.__vftable) = *(_DWORD *)(*((_QWORD *)this + 1) + 32);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&properties, 0, (int *)&v78, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)properties + 10, &properties);
  v20 = (std::__shared_weak_count *)v86;
  if ((_QWORD)v86)
  {
    v21 = (unint64_t *)(v86 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "com.apple.iokit.IOAudio1");
  v78.__vftable = (std::runtime_error_vtbl *)0x676C6F626F706C67;
  LODWORD(v78.__imp_.__imp_) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)&properties, (uint64_t)&v78, cf);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)properties + 10, &properties);
  v23 = (std::__shared_weak_count *)v86;
  if ((_QWORD)v86)
  {
    v24 = (unint64_t *)(v86 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (cf)
    CFRelease(cf);
  v26 = *((_DWORD *)this + 4);
  properties = *(CFMutableDictionaryRef *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 32) + 16);
  LODWORD(v86) = v26;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>((uint64_t *)&v78, 0, (__int128 *)&properties, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)&v78.__vftable[1].what, &v78);
  imp = (std::__shared_weak_count *)v78.__imp_.__imp_;
  if (v78.__imp_.__imp_)
  {
    v28 = (unint64_t *)(v78.__imp_.__imp_ + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
  }
  LODWORD(v78.__vftable) = v9;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&properties, 0, (int *)&v78, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)properties + 10, &properties);
  v30 = (std::__shared_weak_count *)v86;
  if ((_QWORD)v86)
  {
    v31 = (unint64_t *)(v86 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  LODWORD(v78.__vftable) = v10;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&properties, 0, (int *)&v78, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)properties + 10, &properties);
  v33 = (std::__shared_weak_count *)v86;
  if ((_QWORD)v86)
  {
    v34 = (unint64_t *)(v86 + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  AMCP::IOAudio1::Device::get_resource_bundle_url((AMCP::IOAudio1::Device *)&cf, *((_QWORD *)this + 1));
  if (cf)
  {
    v78.__vftable = (std::runtime_error_vtbl *)0x676C6F6272737263;
    LODWORD(v78.__imp_.__imp_) = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>((uint64_t *)&properties, (uint64_t)&v78, cf);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)properties + 10, &properties);
    v36 = (std::__shared_weak_count *)v86;
    if ((_QWORD)v86)
    {
      v37 = (unint64_t *)(v86 + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  AMCP::get_class_traits((AMCP *)&properties, v5);
  v39 = v86;
  if (v90 < 0)
    operator delete(v89);
  if (*((_QWORD *)&v86 + 1))
  {
    *(_QWORD *)&v87 = *((_QWORD *)&v86 + 1);
    operator delete(*((void **)&v86 + 1));
  }
  if (v39)
    v40 = v5;
  else
    v40 = v7;
  AMCP::IOAudio1::update_control_value(v40, (uint64_t)__p, (io_object_t *)this + 5, (CFDictionaryRef *)&v68);
  AMCP::get_class_traits((AMCP *)&properties, v5);
  v41 = v86;
  if (v90 < 0)
    operator delete(v89);
  if (*((_QWORD *)&v86 + 1))
  {
    *(_QWORD *)&v87 = *((_QWORD *)&v86 + 1);
    operator delete(*((void **)&v86 + 1));
  }
  if (v41)
    v42 = v5;
  else
    v42 = v7;
  AMCP::IOAudio1::update_control_range(v42, (uint64_t)__p, (CFDictionaryRef *)&v68);
  AMCP::Core::Broker::make_core(&v66, *(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 32) + 16), (uint64_t)__p, *((unsigned int *)this + 4));
  v43 = v67;
  if (v67)
  {
    p_shared_owners = (unint64_t *)&v67->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (cf)
    CFRelease(cf);
  if (v68)
    CFRelease(v68);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)v70);
  v46 = __p[0];
  __p[0] = 0;
  if (v46)
    operator delete(v46);
}

void sub_1B5C0972C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, void *__p, uint64_t a14, _QWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24,uint64_t a25,uint64_t a26,std::runtime_error a27,std::runtime_error a28,uint64_t a29,uint64_t a30)
{
  void *v30;
  uint64_t v31;

  __cxa_free_exception(v30);
  applesauce::CF::NumberRef::~NumberRef((const void **)(v31 - 160));
  if (cf)
    CFRelease(cf);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(a15);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void AMCP::IOAudio1::Control::create_from_service_list(uint64_t **a1, uint64_t a2, io_object_t *a3, io_object_t *a4)
{
  io_object_t *v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  io_object_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  io_connect_t *v15;
  io_connect_t *v16;
  AMCP::Utility::Kernel_Error_Category *v17;
  unsigned int v18;
  AMCP::Log::Scope_Registry *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  int64x2_t v33;
  unint64_t v34;
  NSObject *v35;
  _opaque_pthread_t *v36;
  mach_port_t v37;
  void *v38;
  void *exception;
  const std::error_category *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t (**v43)();
  __int128 v44;
  uint64_t v45;
  std::runtime_error v46;
  __int128 v47;
  std::runtime_error v48;
  __int128 v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char v55;
  uint8_t buf[8];
  __int16 v57;
  char *v58;
  __int16 v59;
  int v60;
  __int16 v61;
  const char *v62;
  const char *v63;
  const char *v64;
  int v65;
  _QWORD v66[3];
  _QWORD *v67;
  dispatch_object_t object[40];
  dispatch_queue_t queue[9];
  dispatch_object_t v70;
  int64x2_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3 != a4)
  {
    v5 = a3;
    v8 = a1 + 2;
    while (1)
    {
      v9 = operator new();
      v10 = v9;
      v11 = *v5;
      if (*v5)
      {
        v9 = IOObjectRetain(*v5);
        v12 = v9;
        if ((_DWORD)v9)
        {
          exception = __cxa_allocate_exception(0x20uLL);
          v40 = std::system_category();
          MEMORY[0x1B5E5022C](exception, v12, v40, "Error on Retain");
          __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
        }
      }
      *(_DWORD *)(v10 + 16) = 0;
      *(_DWORD *)(v10 + 20) = v11;
      *(_QWORD *)v10 = &off_1E6997A00;
      *(_QWORD *)(v10 + 8) = a2;
      *(_QWORD *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = AMCP::Utility::Mach_Port::create_port((AMCP::Utility::Mach_Port *)v9);
      *(_WORD *)(v10 + 36) = 257;
      *(_QWORD *)(v10 + 40) = 850045863;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      *(_OWORD *)(v10 + 80) = 0u;
      *(_OWORD *)(v10 + 96) = 0u;
      AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&v70, *(dispatch_object_t *)(a2 + 40));
      AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue, *(dispatch_object_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 16) + 32) + 32) + 672));
      AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)object, v70);
      dispatch_set_target_queue(object[0], queue[0]);
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)object);
      v66[0] = &off_1E6997F38;
      v66[1] = v10;
      v67 = v66;
      AMCP::Utility::Mach_Port::set_receive_handler((unsigned int *)(v10 + 32), &v70, (uint64_t)v66);
      v13 = v67;
      if (v67 == v66)
        break;
      if (v67)
      {
        v14 = 5;
LABEL_9:
        (*(void (**)(void))(*v13 + 8 * v14))();
      }
      v15 = (io_connect_t *)operator new();
      applesauce::iokit::io_connect_holder::io_connect_holder(v15, *(_DWORD *)(v10 + 20));
      v16 = *(io_connect_t **)(v10 + 24);
      *(_QWORD *)(v10 + 24) = v15;
      if (v16)
        std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v16);
      v17 = (AMCP::Utility::Kernel_Error_Category *)MEMORY[0x1B5E4FAB8](*v15, 0, *(unsigned int *)(v10 + 32), 0);
      v18 = v17;
      AMCP::Utility::Kernel_Error_Category::get(v17);
      if (v18)
      {
        AMCP::Log::Scope_Registry::get(v19);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v35 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          v36 = pthread_self();
          v37 = pthread_mach_thread_np(v36);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v37;
          v57 = 2080;
          v58 = "IOAudio1_Control.cpp";
          v59 = 1024;
          v60 = 216;
          v61 = 2080;
          v62 = "kernel_error.operator BOOL()";
          _os_log_error_impl(&dword_1B57BA000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set the notification port", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v55);
        v38 = __cxa_allocate_exception(0x50uLL);
        MEMORY[0x1B5E50220](&v46, v18, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
        std::runtime_error::runtime_error(&v48, &v46);
        v49 = v47;
        v52 = 0;
        v53 = 0;
        v54 = -1;
        v48.__vftable = (std::runtime_error_vtbl *)&off_1E69A12F8;
        v50 = &unk_1E69A1320;
        v51 = 0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v48);
        v63 = "AMCP::IOAudio1::Control::Control(Device &, const IOKit::Service &)";
        v64 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IOAudio1/IOAudio1_Control.cpp";
        v65 = 216;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v41);
        v43 = off_1E69A20A0;
        v44 = v41;
        v45 = v42;
        v41 = 0uLL;
        v42 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)buf, (uint64_t)&v43);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)v38, (uint64_t)buf);
      }
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue);
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&v70);
      v21 = a1[1];
      v20 = (unint64_t)a1[2];
      if ((unint64_t)v21 >= v20)
      {
        v23 = v21 - *a1;
        if ((unint64_t)(v23 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v24 = v20 - (_QWORD)*a1;
        v25 = v24 >> 2;
        if (v24 >> 2 <= (unint64_t)(v23 + 1))
          v25 = v23 + 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        v73 = v8;
        if (v26)
          v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v26);
        else
          v27 = 0;
        v28 = (uint64_t *)(v26 + 8 * v23);
        v29 = v26 + 8 * v27;
        v72 = v29;
        *v28 = v10;
        v22 = v28 + 1;
        v71.i64[1] = (uint64_t)(v28 + 1);
        v31 = *a1;
        v30 = a1[1];
        if (v30 == *a1)
        {
          v33 = vdupq_n_s64((unint64_t)v30);
        }
        else
        {
          do
          {
            v32 = *--v30;
            *v30 = 0;
            *--v28 = v32;
          }
          while (v30 != v31);
          v33 = *(int64x2_t *)a1;
          v22 = (uint64_t *)v71.i64[1];
          v29 = v72;
        }
        *a1 = v28;
        a1[1] = v22;
        v71 = v33;
        v34 = (unint64_t)a1[2];
        a1[2] = (uint64_t *)v29;
        v72 = v34;
        v70 = (dispatch_object_t)v33.i64[0];
        std::__split_buffer<std::unique_ptr<AMCP::IOAudio1::Stream>>::~__split_buffer((uint64_t)&v70);
      }
      else
      {
        *v21 = v10;
        v22 = v21 + 1;
      }
      a1[1] = v22;
      if (++v5 == a4)
        return;
    }
    v13 = v66;
    v14 = 4;
    goto LABEL_9;
  }
}

void sub_1B5C09E48()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  JUMPOUT(0x1B5C0A1C0);
}

void sub_1B5C09E80()
{
  JUMPOUT(0x1B5C0A190);
}

void sub_1B5C09E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char *a45)
{
  char *v45;
  uint64_t v46;

  v45 = a45;
  if (a45 == &a42)
  {
    v46 = 4;
    v45 = &a42;
  }
  else
  {
    if (!a45)
      goto LABEL_6;
    v46 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v45 + 8 * v46))();
LABEL_6:
  JUMPOUT(0x1B5C0A178);
}

void sub_1B5C09EC0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,NSObject **buf,__int128 a32,__int128 a33)
{
  AMCP::Log::Scope_Registry *v34;
  AMCP::Log::Scope_Registry *v35;
  NSObject *v36;
  _opaque_pthread_t *v37;
  mach_port_t v38;
  uint64_t v39;
  NSObject *v40;
  _opaque_pthread_t *v41;
  mach_port_t v42;

  if (a2)
  {
    v34 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    if (a2 == 2)
    {
      v35 = v34;
      AMCP::Log::Scope_Registry::get(v34);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      v36 = *buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        v37 = pthread_self();
        v38 = pthread_mach_thread_np(v37);
        v39 = (*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(_QWORD *)v35 + 16))(v35);
        LODWORD(buf) = 67109890;
        HIDWORD(buf) = v38;
        LOWORD(a32) = 2080;
        *(_QWORD *)((char *)&a32 + 2) = "IOAudio1_Control.cpp";
        WORD5(a32) = 1024;
        HIDWORD(a32) = 207;
        LOWORD(a33) = 2080;
        *(_QWORD *)((char *)&a33 + 2) = v39;
        _os_log_error_impl(&dword_1B57BA000, v36, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d failed to open a connect to a driver's control: %s", (uint8_t *)&buf, 0x22u);
      }
      __cxa_rethrow();
    }
    AMCP::Log::Scope_Registry::get(v34);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v40 = *buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v41 = pthread_self();
      v42 = pthread_mach_thread_np(v41);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v42;
      LOWORD(a32) = 2080;
      *(_QWORD *)((char *)&a32 + 2) = "IOAudio1_Control.cpp";
      WORD5(a32) = 1024;
      HIDWORD(a32) = 212;
      _os_log_error_impl(&dword_1B57BA000, v40, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d failed to open a connect to a driver's control", (uint8_t *)&buf, 0x18u);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x1B5C0A1CCLL);
}

void sub_1B5C0A074()
{
  __cxa_end_catch();
  JUMPOUT(0x1B5C0A178);
}

void sub_1B5C0A094(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, uint64_t a18, uint64_t a19, std::runtime_error a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,std::runtime_error a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B5C0A1CCLL);
}

void sub_1B5C0A174(_Unwind_Exception *a1)
{
  unint64_t v1;
  AMCP::IOAudio1::Device_Sub_Object *v2;
  AMCP::Utility::Mach_Port *v3;
  io_connect_t *v5;

  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&STACK[0x268]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&STACK[0x3A8]);
  AMCP::Utility::Mach_Port::~Mach_Port(v3);
  v5 = (io_connect_t *)*((_QWORD *)v2 + 3);
  *((_QWORD *)v2 + 3) = 0;
  if (v5)
    std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v5);
  AMCP::IOAudio1::Device_Sub_Object::~Device_Sub_Object(v2);
  MEMORY[0x1B5E50688](v2, 0x10A1C40330624E4);
  STACK[0x268] = v1;
  std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x268]);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::PCM_Operation_Context::PCM_Operation_Context(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  std::__shared_weak_count *imp;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  __int128 v24;
  unsigned __int8 *v25;
  __int128 v26;
  double v27;
  double v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned __int8 *v33;
  _BOOL4 v34;
  unsigned __int8 *v35;
  int v36;
  unsigned __int8 *v37;
  _BOOL4 v38;
  unsigned __int8 *v39;
  _BOOL4 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  const char *v47;
  void *v48;
  char v49;
  __int128 v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  double sample_time;
  uint64_t v56;
  double v57;
  __int128 v58;
  float v59;
  float v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  _DWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  BOOL v72;
  unint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  unint64_t v76;
  int v77;
  _BOOL4 v78;
  unsigned __int8 *v79;
  uint64_t v80;
  unsigned int *v81;
  uint64_t v82;
  __int128 v83;
  AMCP::Log::Scope_Registry *v84;
  uint64_t *v85;
  uint64_t *v86;
  int v87;
  std::string::size_type size;
  std::string::size_type *p_size;
  std::string::size_type v90;
  std::string::size_type *v91;
  BOOL v92;
  std::string::size_type *v93;
  std::string::size_type *v94;
  uint64_t *v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int *v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  _DWORD *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _DWORD *v110;
  unint64_t v111;
  int v112;
  double v113;
  double v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  _QWORD *v118;
  const char *v119;
  std::logic_error_vtbl *v120;
  unint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  _DWORD *v133;
  unint64_t v134;
  int *v135;
  int v136;
  unint64_t v137;
  _DWORD *v138;
  unint64_t v139;
  char *v140;
  _DWORD *v141;
  int *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  _DWORD *v165;
  unint64_t v166;
  int v167;
  _DWORD *v168;
  unint64_t v169;
  int v170;
  unint64_t v171;
  int *v172;
  int v173;
  int *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  _DWORD *v180;
  unint64_t v181;
  int v182;
  unint64_t v183;
  _DWORD *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  _DWORD *v190;
  unint64_t v191;
  int v192;
  int v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  int v197;
  _DWORD *v198;
  unint64_t v199;
  _DWORD *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  _DWORD *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  _DWORD *v208;
  int v209;
  std::__shared_weak_count *v211;
  NSObject *v212;
  unint64_t *v213;
  unint64_t v214;
  _opaque_pthread_t *v215;
  mach_port_t v216;
  std::logic_error *v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  std::logic_error v221;
  NSObject *v222;
  _opaque_pthread_t *v223;
  mach_port_t v224;
  void *exception;
  NSObject *v226;
  _opaque_pthread_t *v227;
  mach_port_t v228;
  void *v229;
  NSObject *v230;
  _opaque_pthread_t *v231;
  mach_port_t v232;
  void *v233;
  NSObject *v234;
  _opaque_pthread_t *v235;
  mach_port_t v236;
  void *v237;
  std::__shared_weak_count *v238;
  NSObject *v239;
  unint64_t *v240;
  unint64_t v241;
  _opaque_pthread_t *v242;
  mach_port_t v243;
  std::logic_error *v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  std::logic_error v248;
  std::__shared_weak_count *v249;
  NSObject *v250;
  unint64_t *v251;
  unint64_t v252;
  _opaque_pthread_t *v253;
  mach_port_t v254;
  std::logic_error *v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  std::logic_error v259;
  std::__shared_weak_count *v260;
  NSObject *v261;
  unint64_t *v262;
  unint64_t v263;
  _opaque_pthread_t *v264;
  mach_port_t v265;
  std::logic_error *v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  std::logic_error v270;
  std::__shared_weak_count *v271;
  NSObject *v272;
  unint64_t *v273;
  unint64_t v274;
  _opaque_pthread_t *v275;
  mach_port_t v276;
  std::logic_error *v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  std::logic_error v281;
  uint64_t v282;
  int v283;
  int v284;
  int v285;
  int v286;
  uint64_t *v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int *v290;
  unsigned int *v291;
  uint64_t v292;
  std::logic_error v293;
  std::string::size_type v294;
  std::logic_error v295;
  char v296;
  std::string v297;
  uint64_t (**v298)();
  std::string v299;
  std::string v300;
  std::logic_error v301;
  void *v302;
  __int128 v303;
  uint64_t v304;
  int v305;
  _BYTE __p[48];
  int v307;
  const char *v308;
  void *v309;
  int v310;
  uint64_t v311;

  v311 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a1 + 128) = 0u;
  v4 = a1 + 128;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v289 = a1 + 56;
  v287 = (uint64_t *)(a1 + 8);
  v288 = a1 + 72;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "source format");
  v5 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, __p);
  v6 = v5;
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (!v6)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    v222 = **(NSObject ***)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
    {
      v223 = pthread_self();
      v224 = pthread_mach_thread_np(v223);
      *(_DWORD *)__p = 67109890;
      *(_DWORD *)&__p[4] = v224;
      *(_WORD *)&__p[8] = 2080;
      *(_QWORD *)&__p[10] = "PCM_Operation_Context.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 39;
      *(_WORD *)&__p[24] = 2080;
      *(_QWORD *)&__p[26] = "not (settings.has_key(kFormatConversion_Source_Format))";
      _os_log_error_impl(&dword_1B57BA000, v222, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_Operation_Context requires a source format", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v290);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"PCM_Operation_Context requires a source format", (uint64_t)&v300);
    std::logic_error::logic_error(&v293, &v300);
    v293.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v301, &v293);
    v303 = 0uLL;
    v304 = 0;
    v305 = -1;
    v301.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v302 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v301);
    *(_QWORD *)&__p[32] = "AMCP::DAL::PCM_Operation_Context::PCM_Operation_Context(const DAL_Settings &)";
    *(_QWORD *)&__p[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    v307 = 39;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v297.__r_.__value_.__l.__data_);
    v298 = off_1E69A20A0;
    v299 = v297;
    memset(&v297, 0, sizeof(v297));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v298);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "dest format");
  v7 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, __p);
  v8 = v7;
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (!v8)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    v226 = **(NSObject ***)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (os_log_type_enabled(v226, OS_LOG_TYPE_ERROR))
    {
      v227 = pthread_self();
      v228 = pthread_mach_thread_np(v227);
      *(_DWORD *)__p = 67109890;
      *(_DWORD *)&__p[4] = v228;
      *(_WORD *)&__p[8] = 2080;
      *(_QWORD *)&__p[10] = "PCM_Operation_Context.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 40;
      *(_WORD *)&__p[24] = 2080;
      *(_QWORD *)&__p[26] = "not (settings.has_key(kFormatConversion_Dest_Format))";
      _os_log_error_impl(&dword_1B57BA000, v226, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_Operation_Context requires a dest format", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v290);
    v229 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"PCM_Operation_Context requires a dest format", (uint64_t)&v300);
    std::logic_error::logic_error(&v293, &v300);
    v293.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v301, &v293);
    v303 = 0uLL;
    v304 = 0;
    v305 = -1;
    v301.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v302 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v301);
    *(_QWORD *)&__p[32] = "AMCP::DAL::PCM_Operation_Context::PCM_Operation_Context(const DAL_Settings &)";
    *(_QWORD *)&__p[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    v307 = 40;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v297.__r_.__value_.__l.__data_);
    v298 = off_1E69A20A0;
    v299 = v297;
    memset(&v297, 0, sizeof(v297));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v298);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v229, (uint64_t)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "size bias");
  v9 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, __p);
  v10 = v9;
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (!v10)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    v230 = **(NSObject ***)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (os_log_type_enabled(v230, OS_LOG_TYPE_ERROR))
    {
      v231 = pthread_self();
      v232 = pthread_mach_thread_np(v231);
      *(_DWORD *)__p = 67109890;
      *(_DWORD *)&__p[4] = v232;
      *(_WORD *)&__p[8] = 2080;
      *(_QWORD *)&__p[10] = "PCM_Operation_Context.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 41;
      *(_WORD *)&__p[24] = 2080;
      *(_QWORD *)&__p[26] = "not (settings.has_key(kFormatConversion_Size_Bias))";
      _os_log_error_impl(&dword_1B57BA000, v230, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_Operation_Context requires a size bias", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v290);
    v233 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"PCM_Operation_Context requires a size bias", (uint64_t)&v300);
    std::logic_error::logic_error(&v293, &v300);
    v293.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v301, &v293);
    v303 = 0uLL;
    v304 = 0;
    v305 = -1;
    v301.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v302 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v301);
    *(_QWORD *)&__p[32] = "AMCP::DAL::PCM_Operation_Context::PCM_Operation_Context(const DAL_Settings &)";
    *(_QWORD *)&__p[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    v307 = 41;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v297.__r_.__value_.__l.__data_);
    v298 = off_1E69A20A0;
    v299 = v297;
    memset(&v297, 0, sizeof(v297));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v298);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v233, (uint64_t)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "source timebase");
  v298 = 0;
  v299.__r_.__value_.__r.__words[0] = 0;
  AMCP::DAL::DAL_Settings::at_or<std::shared_ptr<AMCP::Graph::Timebase>>((__n128 *)&v301, a2, __p, (__n128 *)&v298);
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v289, (__int128 *)&v301);
  imp = (std::__shared_weak_count *)v301.__imp_.__imp_;
  if (v301.__imp_.__imp_)
  {
    v12 = (unint64_t *)(v301.__imp_.__imp_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
  }
  v14 = (std::__shared_weak_count *)v299.__r_.__value_.__r.__words[0];
  if (v299.__r_.__value_.__r.__words[0])
  {
    v15 = (unint64_t *)(v299.__r_.__value_.__r.__words[0] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "dest timebase");
  v298 = 0;
  v299.__r_.__value_.__r.__words[0] = 0;
  AMCP::DAL::DAL_Settings::at_or<std::shared_ptr<AMCP::Graph::Timebase>>((__n128 *)&v301, a2, __p, (__n128 *)&v298);
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v288, (__int128 *)&v301);
  v17 = (std::__shared_weak_count *)v301.__imp_.__imp_;
  if (v301.__imp_.__imp_)
  {
    v18 = (unint64_t *)(v301.__imp_.__imp_ + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)v299.__r_.__value_.__r.__words[0];
  if (v299.__r_.__value_.__r.__words[0])
  {
    v21 = (unint64_t *)(v299.__r_.__value_.__r.__words[0] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&v301, "source format");
  v23 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)&v301);
  if (v23)
    AMCP::Thing::convert_to<CA::StreamDescription>((uint64_t)__p, (uint64_t)(v23 + 40));
  else
    memset(__p, 0, 40);
  v24 = *(_OWORD *)&__p[16];
  *(_OWORD *)(a1 + 88) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 104) = v24;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)&__p[32];
  if (SHIBYTE(v302) < 0)
    operator delete(v301.__vftable);
  std::string::basic_string[abi:ne180100]<0>(&v301, "dest format");
  v25 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)&v301);
  if (v25)
    AMCP::Thing::convert_to<CA::StreamDescription>((uint64_t)__p, (uint64_t)(v25 + 40));
  else
    memset(__p, 0, 40);
  v26 = *(_OWORD *)&__p[16];
  *(_OWORD *)v4 = *(_OWORD *)__p;
  *(_OWORD *)(v4 + 16) = v26;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)&__p[32];
  if (SHIBYTE(v302) < 0)
    operator delete(v301.__vftable);
  v27 = *(double *)(a1 + 128);
  v28 = *(double *)(a1 + 88);
  v29 = *(_DWORD *)(a1 + 152);
  v30 = *(_DWORD *)(a1 + 156);
  v32 = *(_DWORD *)(a1 + 112);
  v31 = *(_DWORD *)(a1 + 116);
  std::string::basic_string[abi:ne180100]<0>(__p, "change clock with drift correction disabled");
  v285 = v32;
  v286 = v31;
  v33 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, __p);
  if (v33)
    v34 = AMCP::Thing::convert_to<BOOL>((uint64_t)(v33 + 40));
  else
    v34 = 0;
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  v284 = v29;
  v35 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, __p);
  if (v35)
  {
    v35 = (unsigned __int8 *)AMCP::Thing::convert_to<BOOL>((uint64_t)(v35 + 40));
    v36 = (int)v35;
  }
  else
  {
    v36 = 0;
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v34 & v36) == 1)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v35);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    v234 = **(NSObject ***)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (os_log_type_enabled(v234, OS_LOG_TYPE_ERROR))
    {
      v235 = pthread_self();
      v236 = pthread_mach_thread_np(v235);
      *(_DWORD *)__p = 67109890;
      *(_DWORD *)&__p[4] = v236;
      *(_WORD *)&__p[8] = 2080;
      *(_QWORD *)&__p[10] = "PCM_Operation_Context.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 54;
      *(_WORD *)&__p[24] = 2080;
      *(_QWORD *)&__p[26] = "not (!change_clock_without_resampling || !needs_resampling)";
      _os_log_error_impl(&dword_1B57BA000, v234, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Contradictory resampling settings.", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v290);
    v237 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Contradictory resampling settings.", (uint64_t)&v300);
    std::logic_error::logic_error(&v293, &v300);
    v293.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v301, &v293);
    v303 = 0uLL;
    v304 = 0;
    v305 = -1;
    v301.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v302 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v301);
    *(_QWORD *)&__p[32] = "AMCP::DAL::PCM_Operation_Context::PCM_Operation_Context(const DAL_Settings &)";
    *(_QWORD *)&__p[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    v307 = 54;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v297.__r_.__value_.__l.__data_);
    v298 = off_1E69A20A0;
    v299 = v297;
    memset(&v297, 0, sizeof(v297));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v298);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v237, (uint64_t)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "volume processing");
  v37 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, __p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "map channels");
  v283 = v30;
  if (std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, __p))
  {
    v38 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v301, "convert format");
    v38 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)&v301) != 0;
    if (SHIBYTE(v302) < 0)
      operator delete(v301.__vftable);
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "mix channels to mono");
  v39 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, __p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if (v37)
      goto LABEL_65;
LABEL_69:
    if (!v39)
      goto LABEL_199;
LABEL_123:
    std::string::basic_string[abi:ne180100]<0>(__p, "mix channels to mono");
    if (std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, __p))
    {
      std::string::basic_string[abi:ne180100]<0>(&v301, "mix map");
      v78 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)&v301) != 0;
      if (SHIBYTE(v302) < 0)
        operator delete(v301.__vftable);
    }
    else
    {
      v78 = 0;
    }
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if (!v78)
      {
LABEL_183:
        v102 = *(char **)(a1 + 176);
        v101 = *(_QWORD *)(a1 + 184);
        if ((unint64_t)v102 >= v101)
        {
          v104 = *(char **)(a1 + 168);
          v105 = (v102 - v104) >> 2;
          v106 = v105 + 1;
          if ((unint64_t)(v105 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v107 = v101 - (_QWORD)v104;
          if (v107 >> 1 > v106)
            v106 = v107 >> 1;
          v72 = (unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL;
          v108 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v72)
            v108 = v106;
          if (v108)
          {
            v108 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v108);
            v104 = *(char **)(a1 + 168);
            v102 = *(char **)(a1 + 176);
          }
          else
          {
            v109 = 0;
          }
          v110 = (_DWORD *)(v108 + 4 * v105);
          v111 = v108 + 4 * v109;
          *v110 = 3;
          v103 = v110 + 1;
          while (v102 != v104)
          {
            v112 = *((_DWORD *)v102 - 1);
            v102 -= 4;
            *--v110 = v112;
          }
          *(_QWORD *)(a1 + 168) = v110;
          *(_QWORD *)(a1 + 176) = v103;
          *(_QWORD *)(a1 + 184) = v111;
          if (v104)
            operator delete(v104);
        }
        else
        {
          *(_DWORD *)v102 = 3;
          v103 = v102 + 4;
        }
        *(_QWORD *)(a1 + 176) = v103;
        goto LABEL_199;
      }
    }
    else if (!v78)
    {
      goto LABEL_183;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "mix map");
    v79 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, __p);
    if (v79)
    {
      AMCP::Thing::convert_to<std::vector<unsigned int>>(&v290, (uint64_t)(v79 + 40));
    }
    else
    {
      v290 = 0;
      v291 = 0;
      v292 = 0;
    }
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v81 = v290;
    v80 = (uint64_t)v291;
    if (v290 != v291)
    {
      v82 = operator new();
      v83 = *(_OWORD *)(a1 + 104);
      *(_OWORD *)v82 = *(_OWORD *)(a1 + 88);
      *(_OWORD *)(v82 + 16) = v83;
      *(_QWORD *)(v82 + 32) = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(v82 + 40) = 0;
      *(_QWORD *)(v82 + 48) = 0;
      *(_QWORD *)(v82 + 56) = 0;
      v282 = v82;
      v84 = (AMCP::Log::Scope_Registry *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v82 + 40), v81, v80, (v80 - (uint64_t)v81) >> 2);
      if (*(_DWORD *)(a1 + 96) != 1819304813 || (*(_BYTE *)(a1 + 100) & 0x40) != 0)
      {
        AMCP::Log::Scope_Registry::get(v84);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
        v238 = *(std::__shared_weak_count **)&__p[8];
        v239 = **(NSObject ***)__p;
        if (*(_QWORD *)&__p[8])
        {
          v240 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
          do
            v241 = __ldaxr(v240);
          while (__stlxr(v241 - 1, v240));
          if (!v241)
          {
            ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
            std::__shared_weak_count::__release_weak(v238);
          }
        }
        if (os_log_type_enabled(v239, OS_LOG_TYPE_ERROR))
        {
          v242 = pthread_self();
          v243 = pthread_mach_thread_np(v242);
          *(_DWORD *)__p = 67109890;
          *(_DWORD *)&__p[4] = v243;
          *(_WORD *)&__p[8] = 2080;
          *(_QWORD *)&__p[10] = "DAL_Stereo_To_Mono_Mixer.cpp";
          *(_WORD *)&__p[18] = 1024;
          *(_DWORD *)&__p[20] = 25;
          *(_WORD *)&__p[24] = 2080;
          *(_QWORD *)&__p[26] = "not (format.IsMixable())";
          _os_log_error_impl(&dword_1B57BA000, v239, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We can only mix channels to mono for PCM data", __p, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v295);
        v244 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"We can only mix channels to mono for PCM data", (uint64_t)&v300);
        std::logic_error::logic_error(&v293, &v300);
        v245 = MEMORY[0x1E0DE5018];
        v293.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v301, &v293);
        v303 = 0uLL;
        v304 = 0;
        v305 = -1;
        v301.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v302 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v301);
        *(_QWORD *)&__p[32] = "AMCP::DAL::DAL_Stereo_To_Mono_Mixer::DAL_Stereo_To_Mono_Mixer(const CA::StreamDescription "
                              "&, const Mono_Mix_Map &)";
        *(_QWORD *)&__p[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Stereo_To_Mono_Mixer.cpp";
        v307 = 25;
        std::vector<void *>::vector(&v297);
        v246 = backtrace((void **)v297.__r_.__value_.__l.__data_, (v297.__r_.__value_.__l.__size_ - v297.__r_.__value_.__r.__words[0]) >> 3);
        std::vector<void *>::resize(&v297.__r_.__value_.__l.__data_, v246);
        v298 = off_1E69A20A0;
        v299 = v297;
        memset(&v297, 0, sizeof(v297));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v298);
        v244[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(v244, (const std::logic_error *)__p);
        v244->__vftable = (std::logic_error_vtbl *)(v245 + 16);
        v244[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v247 = *(_QWORD *)&__p[24];
        v244[1].__imp_.__imp_ = *(const char **)&__p[24];
        if (v247)
          (*(void (**)(uint64_t))(*(_QWORD *)v247 + 24))(v247);
        v248 = *(std::logic_error *)&__p[32];
        LODWORD(v244[3].__vftable) = v307;
        v244[2] = v248;
        v244->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        v244[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        v244[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      if ((unint64_t)(v80 - (_QWORD)v81) <= 7)
      {
        AMCP::Log::Scope_Registry::get(v84);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
        v249 = *(std::__shared_weak_count **)&__p[8];
        v250 = **(NSObject ***)__p;
        if (*(_QWORD *)&__p[8])
        {
          v251 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
          do
            v252 = __ldaxr(v251);
          while (__stlxr(v252 - 1, v251));
          if (!v252)
          {
            ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
            std::__shared_weak_count::__release_weak(v249);
          }
        }
        if (os_log_type_enabled(v250, OS_LOG_TYPE_ERROR))
        {
          v253 = pthread_self();
          v254 = pthread_mach_thread_np(v253);
          *(_DWORD *)__p = 67109890;
          *(_DWORD *)&__p[4] = v254;
          *(_WORD *)&__p[8] = 2080;
          *(_QWORD *)&__p[10] = "DAL_Stereo_To_Mono_Mixer.cpp";
          *(_WORD *)&__p[18] = 1024;
          *(_DWORD *)&__p[20] = 27;
          *(_WORD *)&__p[24] = 2080;
          *(_QWORD *)&__p[26] = "not (mix_map.size() >= 2)";
          _os_log_error_impl(&dword_1B57BA000, v250, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We need at least two channels to mix stereo to mono", __p, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v295);
        v255 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"We need at least two channels to mix stereo to mono", (uint64_t)&v300);
        std::logic_error::logic_error(&v293, &v300);
        v256 = MEMORY[0x1E0DE5018];
        v293.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v301, &v293);
        v303 = 0uLL;
        v304 = 0;
        v305 = -1;
        v301.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v302 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v301);
        *(_QWORD *)&__p[32] = "AMCP::DAL::DAL_Stereo_To_Mono_Mixer::DAL_Stereo_To_Mono_Mixer(const CA::StreamDescription "
                              "&, const Mono_Mix_Map &)";
        *(_QWORD *)&__p[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Stereo_To_Mono_Mixer.cpp";
        v307 = 27;
        std::vector<void *>::vector(&v297);
        v257 = backtrace((void **)v297.__r_.__value_.__l.__data_, (v297.__r_.__value_.__l.__size_ - v297.__r_.__value_.__r.__words[0]) >> 3);
        std::vector<void *>::resize(&v297.__r_.__value_.__l.__data_, v257);
        v298 = off_1E69A20A0;
        v299 = v297;
        memset(&v297, 0, sizeof(v297));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v298);
        v255[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(v255, (const std::logic_error *)__p);
        v255->__vftable = (std::logic_error_vtbl *)(v256 + 16);
        v255[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v258 = *(_QWORD *)&__p[24];
        v255[1].__imp_.__imp_ = *(const char **)&__p[24];
        if (v258)
          (*(void (**)(uint64_t))(*(_QWORD *)v258 + 24))(v258);
        v259 = *(std::logic_error *)&__p[32];
        LODWORD(v255[3].__vftable) = v307;
        v255[2] = v259;
        v255->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        v255[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        v255[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      *(_OWORD *)&v300.__r_.__value_.__r.__words[1] = 0uLL;
      v300.__r_.__value_.__r.__words[0] = (std::string::size_type)&v300.__r_.__value_.__l.__size_;
      do
      {
        v85 = (uint64_t *)operator new(0x20uLL);
        v86 = v85;
        v87 = *v81;
        *((_DWORD *)v85 + 7) = *v81;
        size = v300.__r_.__value_.__l.__size_;
        p_size = &v300.__r_.__value_.__l.__size_;
        if ((std::string::size_type *)v300.__r_.__value_.__l.__data_ == &v300.__r_.__value_.__r.__words[1])
          goto LABEL_147;
        v90 = v300.__r_.__value_.__l.__size_;
        v91 = &v300.__r_.__value_.__l.__size_;
        if (v300.__r_.__value_.__l.__size_)
        {
          do
          {
            p_size = (std::string::size_type *)v90;
            v90 = *(_QWORD *)(v90 + 8);
          }
          while (v90);
        }
        else
        {
          do
          {
            p_size = (std::string::size_type *)v91[2];
            v92 = *p_size == (_QWORD)v91;
            v91 = p_size;
          }
          while (v92);
        }
        if (*((_DWORD *)p_size + 7) < v87)
        {
LABEL_147:
          if (v300.__r_.__value_.__l.__size_)
            v93 = p_size;
          else
            v93 = &v300.__r_.__value_.__l.__size_;
          if (v300.__r_.__value_.__l.__size_)
            v94 = p_size + 1;
          else
            v94 = &v300.__r_.__value_.__l.__size_;
        }
        else
        {
          v93 = &v300.__r_.__value_.__l.__size_;
          v94 = &v300.__r_.__value_.__l.__size_;
          if (v300.__r_.__value_.__l.__size_)
          {
            v94 = &v300.__r_.__value_.__l.__size_;
            while (1)
            {
              while (1)
              {
                v93 = (std::string::size_type *)size;
                v96 = *(_DWORD *)(size + 28);
                if (v87 >= v96)
                  break;
                size = *v93;
                v94 = v93;
                if (!*v93)
                  goto LABEL_162;
              }
              if (v96 >= v87)
                break;
              v94 = v93 + 1;
              size = v93[1];
              if (!size)
                goto LABEL_162;
            }
          }
        }
        if (*v94)
        {
          operator delete(v85);
        }
        else
        {
LABEL_162:
          *v85 = 0;
          v85[1] = 0;
          v85[2] = (uint64_t)v93;
          *v94 = (std::string::size_type)v85;
          if (*(_QWORD *)v300.__r_.__value_.__l.__data_)
          {
            v300.__r_.__value_.__r.__words[0] = *(_QWORD *)v300.__r_.__value_.__l.__data_;
            v86 = (uint64_t *)*v94;
          }
          v95 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v300.__r_.__value_.__l.__size_, v86);
          ++v300.__r_.__value_.__r.__words[2];
        }
        ++v81;
      }
      while (v81 != (unsigned int *)v80);
      v81 = v290;
      if (v300.__r_.__value_.__r.__words[2] != v291 - v290)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v95);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
        v260 = *(std::__shared_weak_count **)&__p[8];
        v261 = **(NSObject ***)__p;
        if (*(_QWORD *)&__p[8])
        {
          v262 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
          do
            v263 = __ldaxr(v262);
          while (__stlxr(v263 - 1, v262));
          if (!v263)
          {
            ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
            std::__shared_weak_count::__release_weak(v260);
          }
        }
        if (os_log_type_enabled(v261, OS_LOG_TYPE_ERROR))
        {
          v264 = pthread_self();
          v265 = pthread_mach_thread_np(v264);
          *(_DWORD *)__p = 67109890;
          *(_DWORD *)&__p[4] = v265;
          *(_WORD *)&__p[8] = 2080;
          *(_QWORD *)&__p[10] = "DAL_Stereo_To_Mono_Mixer.cpp";
          *(_WORD *)&__p[18] = 1024;
          *(_DWORD *)&__p[20] = 29;
          *(_WORD *)&__p[24] = 2080;
          *(_QWORD *)&__p[26] = "not (validate.size() == mix_map.size())";
          _os_log_error_impl(&dword_1B57BA000, v261, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no duplicate channels when mixing stereo to mono", __p, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v296);
        v266 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"no duplicate channels when mixing stereo to mono", (uint64_t)&v297);
        std::logic_error::logic_error(&v295, &v297);
        v267 = MEMORY[0x1E0DE5018];
        v295.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v301, &v295);
        v303 = 0uLL;
        v304 = 0;
        v305 = -1;
        v301.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v302 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v301);
        *(_QWORD *)&__p[32] = "AMCP::DAL::DAL_Stereo_To_Mono_Mixer::DAL_Stereo_To_Mono_Mixer(const CA::StreamDescription "
                              "&, const Mono_Mix_Map &)";
        *(_QWORD *)&__p[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Stereo_To_Mono_Mixer.cpp";
        v307 = 29;
        std::vector<void *>::vector(&v293);
        v268 = backtrace((void **)&v293.~logic_error, (unint64_t)(v293.__imp_.__imp_ - (const char *)v293.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v293, v268);
        v298 = off_1E69A20A0;
        *(std::logic_error *)&v299.__r_.__value_.__l.__data_ = v293;
        v299.__r_.__value_.__r.__words[2] = v294;
        v293.__vftable = 0;
        v293.__imp_.__imp_ = 0;
        v294 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v298);
        v266[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(v266, (const std::logic_error *)__p);
        v266->__vftable = (std::logic_error_vtbl *)(v267 + 16);
        v266[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v269 = *(_QWORD *)&__p[24];
        v266[1].__imp_.__imp_ = *(const char **)&__p[24];
        if (v269)
          (*(void (**)(uint64_t))(*(_QWORD *)v269 + 24))(v269);
        v270 = *(std::logic_error *)&__p[32];
        LODWORD(v266[3].__vftable) = v307;
        v266[2] = v270;
        v266->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        v266[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        v266[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      v97 = *(_DWORD *)(v282 + 28);
      if ((*(_DWORD *)(v282 + 12) & 0x20) != 0)
        v98 = *(_DWORD *)(v282 + 28);
      else
        v98 = 1;
      if ((*(_DWORD *)(v282 + 12) & 0x20) != 0)
        v97 = 1;
      if (v98 <= v97)
        v98 = v97;
      if (v290 != v291)
      {
        v99 = v290;
        do
        {
          if (*v99 >= v98)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v95);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
            v211 = *(std::__shared_weak_count **)&__p[8];
            v212 = **(NSObject ***)__p;
            if (*(_QWORD *)&__p[8])
            {
              v213 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
              do
                v214 = __ldaxr(v213);
              while (__stlxr(v214 - 1, v213));
              if (!v214)
              {
                ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                std::__shared_weak_count::__release_weak(v211);
              }
            }
            if (os_log_type_enabled(v212, OS_LOG_TYPE_ERROR))
            {
              v215 = pthread_self();
              v216 = pthread_mach_thread_np(v215);
              *(_DWORD *)__p = 67109890;
              *(_DWORD *)&__p[4] = v216;
              *(_WORD *)&__p[8] = 2080;
              *(_QWORD *)&__p[10] = "DAL_Stereo_To_Mono_Mixer.cpp";
              *(_WORD *)&__p[18] = 1024;
              *(_DWORD *)&__p[20] = 33;
              *(_WORD *)&__p[24] = 2080;
              *(_QWORD *)&__p[26] = "not ((channel < num_channels))";
              _os_log_error_impl(&dword_1B57BA000, v212, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Channel out of range for mix stereo to mono", __p, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v296);
            v217 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"Channel out of range for mix stereo to mono", (uint64_t)&v297);
            std::logic_error::logic_error(&v295, &v297);
            v218 = MEMORY[0x1E0DE5018];
            v295.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
            std::logic_error::logic_error(&v301, &v295);
            v303 = 0uLL;
            v304 = 0;
            v305 = -1;
            v301.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
            v302 = &unk_1E69A1230;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v301);
            *(_QWORD *)&__p[32] = "AMCP::DAL::DAL_Stereo_To_Mono_Mixer::DAL_Stereo_To_Mono_Mixer(const CA::StreamDescript"
                                  "ion &, const Mono_Mix_Map &)";
            *(_QWORD *)&__p[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Stereo_To_Mono_Mixer.cpp";
            v307 = 33;
            std::vector<void *>::vector(&v293);
            v219 = backtrace((void **)&v293.~logic_error, (unint64_t)(v293.__imp_.__imp_ - (const char *)v293.__vftable) >> 3);
            std::vector<void *>::resize((char **)&v293, v219);
            v298 = off_1E69A20A0;
            *(std::logic_error *)&v299.__r_.__value_.__l.__data_ = v293;
            v299.__r_.__value_.__r.__words[2] = v294;
            v293.__vftable = 0;
            v293.__imp_.__imp_ = 0;
            v294 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v298);
            v217[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
            std::logic_error::logic_error(v217, (const std::logic_error *)__p);
            v217->__vftable = (std::logic_error_vtbl *)(v218 + 16);
            v217[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
            v220 = *(_QWORD *)&__p[24];
            v217[1].__imp_.__imp_ = *(const char **)&__p[24];
            if (v220)
              (*(void (**)(uint64_t))(*(_QWORD *)v220 + 24))(v220);
            v221 = *(std::logic_error *)&__p[32];
            LODWORD(v217[3].__vftable) = v307;
            v217[2] = v221;
            v217->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
            v217[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
            v217[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
          }
          ++v99;
        }
        while (v99 != v291);
      }
      if ((*(_BYTE *)(a1 + 100) & 1) == 0)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v95);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
        v271 = *(std::__shared_weak_count **)&__p[8];
        v272 = **(NSObject ***)__p;
        if (*(_QWORD *)&__p[8])
        {
          v273 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
          do
            v274 = __ldaxr(v273);
          while (__stlxr(v274 - 1, v273));
          if (!v274)
          {
            ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
            std::__shared_weak_count::__release_weak(v271);
          }
        }
        if (os_log_type_enabled(v272, OS_LOG_TYPE_ERROR))
        {
          v275 = pthread_self();
          v276 = pthread_mach_thread_np(v275);
          *(_DWORD *)__p = 67109890;
          *(_DWORD *)&__p[4] = v276;
          *(_WORD *)&__p[8] = 2080;
          *(_QWORD *)&__p[10] = "DAL_Stereo_To_Mono_Mixer.cpp";
          *(_WORD *)&__p[18] = 1024;
          *(_DWORD *)&__p[20] = 35;
          *(_WORD *)&__p[24] = 2080;
          *(_QWORD *)&__p[26] = "not (format.IsFloatingPoint())";
          _os_log_error_impl(&dword_1B57BA000, v272, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s DAL_Stereo_To_Mono_Mixer only supports floating point samples", __p, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v296);
        v277 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"DAL_Stereo_To_Mono_Mixer only supports floating point samples", (uint64_t)&v297);
        std::logic_error::logic_error(&v295, &v297);
        v278 = MEMORY[0x1E0DE5018];
        v295.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v301, &v295);
        v303 = 0uLL;
        v304 = 0;
        v305 = -1;
        v301.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v302 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v301);
        *(_QWORD *)&__p[32] = "AMCP::DAL::DAL_Stereo_To_Mono_Mixer::DAL_Stereo_To_Mono_Mixer(const CA::StreamDescription "
                              "&, const Mono_Mix_Map &)";
        *(_QWORD *)&__p[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Stereo_To_Mono_Mixer.cpp";
        v307 = 35;
        std::vector<void *>::vector(&v293);
        v279 = backtrace((void **)&v293.~logic_error, (unint64_t)(v293.__imp_.__imp_ - (const char *)v293.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v293, v279);
        v298 = off_1E69A20A0;
        *(std::logic_error *)&v299.__r_.__value_.__l.__data_ = v293;
        v299.__r_.__value_.__r.__words[2] = v294;
        v293.__vftable = 0;
        v293.__imp_.__imp_ = 0;
        v294 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v298);
        v277[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(v277, (const std::logic_error *)__p);
        v277->__vftable = (std::logic_error_vtbl *)(v278 + 16);
        v277[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v280 = *(_QWORD *)&__p[24];
        v277[1].__imp_.__imp_ = *(const char **)&__p[24];
        if (v280)
          (*(void (**)(uint64_t))(*(_QWORD *)v280 + 24))(v280);
        v281 = *(std::logic_error *)&__p[32];
        LODWORD(v277[3].__vftable) = v307;
        v277[2] = v281;
        v277->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        v277[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        v277[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v300.__r_.__value_.__l.__size_);
      v100 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v282;
      if (v100)
        std::default_delete<AMCP::DAL::DAL_Stereo_To_Mono_Mixer>::operator()[abi:ne180100](v100);
    }
    if (v81)
    {
      v291 = v81;
      operator delete(v81);
    }
    goto LABEL_183;
  }
  operator delete(*(void **)__p);
  if (!v37)
    goto LABEL_69;
LABEL_65:
  std::string::basic_string[abi:ne180100]<0>(__p, "volume processing");
  if (std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, __p))
  {
    std::string::basic_string[abi:ne180100]<0>(&v301, "volume connection");
    v40 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)&v301) != 0;
    if (SHIBYTE(v302) < 0)
      operator delete(v301.__vftable);
  }
  else
  {
    v40 = 0;
  }
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v40)
      goto LABEL_107;
  }
  else if (!v40)
  {
    goto LABEL_107;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "volume connection");
  v298 = 0;
  v299.__r_.__value_.__r.__words[0] = 0;
  AMCP::DAL::DAL_Settings::at_or<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>((__n128 *)&v301, a2, __p, (__n128 *)&v298);
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)v287, (__int128 *)&v301);
  v41 = (std::__shared_weak_count *)v301.__imp_.__imp_;
  if (v301.__imp_.__imp_)
  {
    v42 = (unint64_t *)(v301.__imp_.__imp_ + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)v299.__r_.__value_.__r.__words[0];
  if (v299.__r_.__value_.__r.__words[0])
  {
    v45 = (unint64_t *)(v299.__r_.__value_.__r.__words[0] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::load((uint64_t)__p, *v287);
  v47 = v308;
  v48 = v309;
  v49 = v310;
  v50 = *(_OWORD *)v289;
  v51 = *(_QWORD *)(v289 + 8);
  if (v51)
  {
    v52 = (unint64_t *)(v51 + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  LODWORD(v301.__vftable) = 0;
  v301.__imp_.__imp_ = 0;
  v302 = 0;
  v303 = v50;
  if ((v49 & 1) != 0)
  {
    v301.__imp_.__imp_ = v47;
    LODWORD(v301.__vftable) = 2;
    v54 = 3;
  }
  else
  {
    v54 = 1;
  }
  if ((v49 & 2) != 0)
  {
    v302 = v48;
    LODWORD(v301.__vftable) = v54;
  }
  sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v301);
  v56 = operator new();
  v57 = *(double *)(a1 + 88);
  v58 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v56 + 8) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v56 + 24) = v58;
  v59 = *(float *)__p;
  *(double *)v56 = v57;
  if (round(sample_time) == 0.0)
  {
    v57 = (double)(unint64_t)(v57 * 0.05);
  }
  else if (sample_time < v57)
  {
    v57 = sample_time;
  }
  *(double *)(v56 + 40) = v57;
  v60 = fmaxf(fminf(v59, 1.0), 0.0);
  *(float *)(v56 + 48) = v60;
  *(float *)(v56 + 52) = v60;
  *(_QWORD *)(v56 + 56) = 0;
  *(double *)(v56 + 64) = v57;
  *(_DWORD *)(v56 + 72) = 0;
  v61 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v56;
  if (v61)
    MEMORY[0x1B5E50688](v61, 0x1000C40D9C97D19);
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v303 + 1);
  if (*((_QWORD *)&v303 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v303 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
LABEL_107:
  v66 = *(char **)(a1 + 176);
  v65 = *(_QWORD *)(a1 + 184);
  if ((unint64_t)v66 >= v65)
  {
    v68 = *(char **)(a1 + 168);
    v69 = (v66 - v68) >> 2;
    v70 = v69 + 1;
    if ((unint64_t)(v69 + 1) >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v71 = v65 - (_QWORD)v68;
    if (v71 >> 1 > v70)
      v70 = v71 >> 1;
    v72 = (unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL;
    v73 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v72)
      v73 = v70;
    if (v73)
    {
      v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v73);
      v68 = *(char **)(a1 + 168);
      v66 = *(char **)(a1 + 176);
    }
    else
    {
      v74 = 0;
    }
    v75 = (_DWORD *)(v73 + 4 * v69);
    v76 = v73 + 4 * v74;
    *v75 = 0;
    v67 = v75 + 1;
    while (v66 != v68)
    {
      v77 = *((_DWORD *)v66 - 1);
      v66 -= 4;
      *--v75 = v77;
    }
    *(_QWORD *)(a1 + 168) = v75;
    *(_QWORD *)(a1 + 176) = v67;
    *(_QWORD *)(a1 + 184) = v76;
    if (v68)
      operator delete(v68);
  }
  else
  {
    *(_DWORD *)v66 = 0;
    v67 = v66 + 4;
  }
  *(_QWORD *)(a1 + 176) = v67;
  if (v39)
    goto LABEL_123;
LABEL_199:
  if ((v36 & v38) != 1)
  {
    if (v36)
    {
      AMCP::DAL::PCM_Operation_Context::configure_resampler(a1, a2, a1 + 88, v4);
      v135 = *(int **)(a1 + 176);
      v134 = *(_QWORD *)(a1 + 184);
      if ((unint64_t)v135 < v134)
      {
        v136 = 1;
LABEL_228:
        *v135 = v136;
        v138 = v135 + 1;
        goto LABEL_317;
      }
      v142 = *(int **)(a1 + 168);
      v143 = v135 - v142;
      v144 = v143 + 1;
      if ((unint64_t)(v143 + 1) >> 62)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v145 = v134 - (_QWORD)v142;
      if (v145 >> 1 > v144)
        v144 = v145 >> 1;
      v72 = (unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL;
      v146 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v72)
        v146 = v144;
      if (v146)
      {
        v146 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v146);
        v142 = *(int **)(a1 + 168);
        v135 = *(int **)(a1 + 176);
      }
      else
      {
        v147 = 0;
      }
      v165 = (_DWORD *)(v146 + 4 * v143);
      v166 = v146 + 4 * v147;
      *v165 = 1;
      v138 = v165 + 1;
      while (v135 != v142)
      {
        v167 = *--v135;
        *--v165 = v167;
      }
    }
    else
    {
      if (!v38)
        goto LABEL_309;
      AMCP::DAL::PCM_Operation_Context::configure_audio_converter(a1, a2, (const AudioStreamBasicDescription *)(a1 + 88), (const AudioStreamBasicDescription *)v4);
      v135 = *(int **)(a1 + 176);
      v137 = *(_QWORD *)(a1 + 184);
      if ((unint64_t)v135 < v137)
      {
        v136 = 2;
        goto LABEL_228;
      }
      v142 = *(int **)(a1 + 168);
      v160 = v135 - v142;
      v161 = v160 + 1;
      if ((unint64_t)(v160 + 1) >> 62)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v162 = v137 - (_QWORD)v142;
      if (v162 >> 1 > v161)
        v161 = v162 >> 1;
      v72 = (unint64_t)v162 >= 0x7FFFFFFFFFFFFFFCLL;
      v163 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v72)
        v163 = v161;
      if (v163)
      {
        v163 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v163);
        v142 = *(int **)(a1 + 168);
        v135 = *(int **)(a1 + 176);
      }
      else
      {
        v164 = 0;
      }
      v165 = (_DWORD *)(v163 + 4 * v160);
      v166 = v163 + 4 * v164;
      *v165 = 2;
      v138 = v165 + 1;
      while (v135 != v142)
      {
        v197 = *--v135;
        *--v165 = v197;
      }
    }
    *(_QWORD *)(a1 + 168) = v165;
    *(_QWORD *)(a1 + 176) = v138;
    *(_QWORD *)(a1 + 184) = v166;
    if (v142)
      operator delete(v142);
LABEL_317:
    *(_QWORD *)(a1 + 176) = v138;
    if (!v34)
      return a1;
    goto LABEL_318;
  }
  v113 = v27 / v28;
  v114 = (double)(v284 * v283) / (double)(v285 * v286);
  if (v114 >= v113)
    v115 = a1 + 88;
  else
    v115 = v4;
  v116 = *(_OWORD *)(v115 + 16);
  *(_OWORD *)__p = *(_OWORD *)v115;
  *(_OWORD *)&__p[16] = v116;
  *(_QWORD *)&__p[32] = *(_QWORD *)(v115 + 32);
  v117 = v289;
  if (v114 < v113)
  {
    v118 = (_QWORD *)(a1 + 88);
  }
  else
  {
    v117 = v288;
    v118 = (_QWORD *)v4;
  }
  *(_QWORD *)__p = *v118;
  v120 = *(std::logic_error_vtbl **)v117;
  v119 = *(const char **)(v117 + 8);
  v298 = *(uint64_t (***)())v117;
  v299.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
  if (v119)
  {
    v121 = (unint64_t *)(v119 + 8);
    do
      v122 = __ldxr(v121);
    while (__stxr(v122 + 1, v121));
  }
  v123 = (_QWORD *)operator new();
  v124 = v123;
  v301.__vftable = v120;
  v301.__imp_.__imp_ = v119;
  if (v119)
  {
    v125 = (unint64_t *)(v119 + 8);
    do
      v126 = __ldxr(v125);
    while (__stxr(v126 + 1, v125));
  }
  AMCP::DAL::Fixed_Buffer::Fixed_Buffer(v123, (uint64_t)__p, &v301, 4096.0);
  v127 = (std::__shared_weak_count *)v301.__imp_.__imp_;
  if (v301.__imp_.__imp_)
  {
    v128 = (unint64_t *)(v301.__imp_.__imp_ + 8);
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v124;
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  if (v114 >= v113)
  {
    AMCP::DAL::PCM_Operation_Context::configure_resampler(a1, a2, a1 + 88, (uint64_t)__p);
    v140 = *(char **)(a1 + 176);
    v139 = *(_QWORD *)(a1 + 184);
    if ((unint64_t)v140 >= v139)
    {
      v154 = *(char **)(a1 + 168);
      v155 = (v140 - v154) >> 2;
      v156 = v155 + 1;
      if ((unint64_t)(v155 + 1) >> 62)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v157 = v139 - (_QWORD)v154;
      if (v157 >> 1 > v156)
        v156 = v157 >> 1;
      v72 = (unint64_t)v157 >= 0x7FFFFFFFFFFFFFFCLL;
      v158 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v72)
        v158 = v156;
      if (v158)
      {
        v158 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v158);
        v154 = *(char **)(a1 + 168);
        v140 = *(char **)(a1 + 176);
      }
      else
      {
        v159 = 0;
      }
      v180 = (_DWORD *)(v158 + 4 * v155);
      v181 = v158 + 4 * v159;
      *v180 = 1;
      v141 = v180 + 1;
      while (v140 != v154)
      {
        v182 = *((_DWORD *)v140 - 1);
        v140 -= 4;
        *--v180 = v182;
      }
      *(_QWORD *)(a1 + 168) = v180;
      *(_QWORD *)(a1 + 176) = v141;
      *(_QWORD *)(a1 + 184) = v181;
      if (v154)
        operator delete(v154);
    }
    else
    {
      *(_DWORD *)v140 = 1;
      v141 = v140 + 4;
    }
    *(_QWORD *)(a1 + 176) = v141;
    AMCP::DAL::PCM_Operation_Context::configure_audio_converter(a1, a2, (const AudioStreamBasicDescription *)__p, (const AudioStreamBasicDescription *)v4);
    v172 = *(int **)(a1 + 176);
    v183 = *(_QWORD *)(a1 + 184);
    if ((unint64_t)v172 < v183)
    {
      v173 = 2;
      goto LABEL_286;
    }
    v174 = *(int **)(a1 + 168);
    v185 = v172 - v174;
    v186 = v185 + 1;
    if ((unint64_t)(v185 + 1) >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v187 = v183 - (_QWORD)v174;
    if (v187 >> 1 > v186)
      v186 = v187 >> 1;
    v72 = (unint64_t)v187 >= 0x7FFFFFFFFFFFFFFCLL;
    v188 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v72)
      v188 = v186;
    if (v188)
    {
      v188 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v188);
      v174 = *(int **)(a1 + 168);
      v172 = *(int **)(a1 + 176);
    }
    else
    {
      v189 = 0;
    }
    v190 = (_DWORD *)(v188 + 4 * v185);
    v191 = v188 + 4 * v189;
    *v190 = 2;
    v184 = v190 + 1;
    while (v172 != v174)
    {
      v193 = *--v172;
      *--v190 = v193;
    }
LABEL_302:
    *(_QWORD *)(a1 + 168) = v190;
    *(_QWORD *)(a1 + 176) = v184;
    *(_QWORD *)(a1 + 184) = v191;
    if (v174)
      operator delete(v174);
    goto LABEL_304;
  }
  AMCP::DAL::PCM_Operation_Context::configure_audio_converter(a1, a2, (const AudioStreamBasicDescription *)(a1 + 88), (const AudioStreamBasicDescription *)__p);
  v132 = *(char **)(a1 + 176);
  v131 = *(_QWORD *)(a1 + 184);
  if ((unint64_t)v132 >= v131)
  {
    v148 = *(char **)(a1 + 168);
    v149 = (v132 - v148) >> 2;
    v150 = v149 + 1;
    if ((unint64_t)(v149 + 1) >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v151 = v131 - (_QWORD)v148;
    if (v151 >> 1 > v150)
      v150 = v151 >> 1;
    v72 = (unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL;
    v152 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v72)
      v152 = v150;
    if (v152)
    {
      v152 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v152);
      v148 = *(char **)(a1 + 168);
      v132 = *(char **)(a1 + 176);
    }
    else
    {
      v153 = 0;
    }
    v168 = (_DWORD *)(v152 + 4 * v149);
    v169 = v152 + 4 * v153;
    *v168 = 2;
    v133 = v168 + 1;
    while (v132 != v148)
    {
      v170 = *((_DWORD *)v132 - 1);
      v132 -= 4;
      *--v168 = v170;
    }
    *(_QWORD *)(a1 + 168) = v168;
    *(_QWORD *)(a1 + 176) = v133;
    *(_QWORD *)(a1 + 184) = v169;
    if (v148)
      operator delete(v148);
  }
  else
  {
    *(_DWORD *)v132 = 2;
    v133 = v132 + 4;
  }
  *(_QWORD *)(a1 + 176) = v133;
  AMCP::DAL::PCM_Operation_Context::configure_resampler(a1, a2, (uint64_t)__p, v4);
  v172 = *(int **)(a1 + 176);
  v171 = *(_QWORD *)(a1 + 184);
  if ((unint64_t)v172 >= v171)
  {
    v174 = *(int **)(a1 + 168);
    v175 = v172 - v174;
    v176 = v175 + 1;
    if ((unint64_t)(v175 + 1) >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v177 = v171 - (_QWORD)v174;
    if (v177 >> 1 > v176)
      v176 = v177 >> 1;
    v72 = (unint64_t)v177 >= 0x7FFFFFFFFFFFFFFCLL;
    v178 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v72)
      v178 = v176;
    if (v178)
    {
      v178 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v178);
      v174 = *(int **)(a1 + 168);
      v172 = *(int **)(a1 + 176);
    }
    else
    {
      v179 = 0;
    }
    v190 = (_DWORD *)(v178 + 4 * v175);
    v191 = v178 + 4 * v179;
    *v190 = 1;
    v184 = v190 + 1;
    while (v172 != v174)
    {
      v192 = *--v172;
      *--v190 = v192;
    }
    goto LABEL_302;
  }
  v173 = 1;
LABEL_286:
  *v172 = v173;
  v184 = v172 + 1;
LABEL_304:
  *(_QWORD *)(a1 + 176) = v184;
  v194 = (std::__shared_weak_count *)v299.__r_.__value_.__r.__words[0];
  if (v299.__r_.__value_.__r.__words[0])
  {
    v195 = (unint64_t *)(v299.__r_.__value_.__r.__words[0] + 8);
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
LABEL_309:
  if (!v34)
    return a1;
LABEL_318:
  v198 = *(_DWORD **)(a1 + 168);
  if (v198 == *(_DWORD **)(a1 + 176))
  {
    v199 = *(_QWORD *)(a1 + 184);
    if ((unint64_t)v198 >= v199)
    {
      v201 = v199 - (_QWORD)v198;
      v202 = v201 >> 1;
      if ((unint64_t)(v201 >> 1) <= 1)
        v202 = 1;
      if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFFCLL)
        v203 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v203 = v202;
      v204 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v203);
      v205 = *(char **)(a1 + 168);
      v206 = *(char **)(a1 + 176);
      v208 = &v204[v207];
      *v204 = 4;
      v200 = v204 + 1;
      while (v206 != v205)
      {
        v209 = *((_DWORD *)v206 - 1);
        v206 -= 4;
        *--v204 = v209;
      }
      *(_QWORD *)(a1 + 168) = v204;
      *(_QWORD *)(a1 + 176) = v200;
      *(_QWORD *)(a1 + 184) = v208;
      if (v205)
        operator delete(v205);
    }
    else
    {
      *v198 = 4;
      v200 = v198 + 1;
    }
    *(_QWORD *)(a1 + 176) = v200;
  }
  return a1;
}

void sub_1B5C0C6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,void *a38,uint64_t a39,uint64_t a40,void *a41,_QWORD *a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a42);
  v62 = *a10;
  v63 = a11;
  if (*a10)
  {
    *(_QWORD *)(a11 + 48) = v62;
    operator delete(v62);
    v63 = a11;
  }
  MEMORY[0x1B5E50688](v63, 0x1010C409ECD0874);
  if (__p)
    operator delete(__p);
  v64 = (void *)v60[21];
  if (v64)
  {
    v60[22] = (uint64_t)v64;
    operator delete(v64);
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a15);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a16);
  v65 = v60[5];
  v60[5] = 0;
  if (v65)
    std::default_delete<AMCP::DAL::DAL_Stereo_To_Mono_Mixer>::operator()[abi:ne180100](v65);
  v66 = v60[4];
  v60[4] = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  v67 = v60[3];
  v60[3] = 0;
  if (v67)
    MEMORY[0x1B5E50688](v67, 0x1000C40D9C97D19);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a14);
  v68 = *v60;
  *v60 = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  _Unwind_Resume(a1);
}

void AMCP::DAL::PCM_Operation_Context::configure_audio_converter(uint64_t a1, _QWORD *a2, const AudioStreamBasicDescription *a3, const AudioStreamBasicDescription *a4)
{
  unsigned __int8 *v8;
  _BOOL4 v9;
  AudioConverterRef *v10;
  AMCP::Log::Scope_Registry *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  void *v15;
  AMCP::Log::Scope_Registry *v16;
  NSObject *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  void *exception;
  NSObject *v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  void *v24;
  NSObject *v25;
  _opaque_pthread_t *v26;
  mach_port_t v27;
  void *v28;
  unsigned __int128 v29;
  std::string::size_type v30;
  std::logic_error v31;
  char v32;
  std::string v33;
  uint64_t (**v34)();
  std::string v35;
  std::string v36;
  std::logic_error __p;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint8_t buf[8];
  __int16 v44;
  char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  _BYTE v49[14];
  const char *v50;
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(buf, "map channels");
  v8 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, buf);
  if (v8)
  {
    v9 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "convert format");
    v8 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
    v9 = v8 != 0;
    if (SHIBYTE(v38) < 0)
      operator delete(__p.__vftable);
  }
  if (SHIBYTE(v47) < 0)
  {
    operator delete(*(void **)buf);
    if (!v9)
      return;
  }
  else if (!v9)
  {
    return;
  }
  if (a3->mSampleRate != a4->mSampleRate)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v19;
      v44 = 2080;
      v45 = "PCM_Operation_Context.cpp";
      v46 = 1024;
      v47 = 173;
      v48 = 2080;
      *(_QWORD *)v49 = "not (source_fmt.mSampleRate == dest_fmt.mSampleRate)";
      _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s format conersion can only apply to formats with the same sample rates", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"format conersion can only apply to formats with the same sample rates", (uint64_t)&v36);
    std::logic_error::logic_error((std::logic_error *)&v29, &v36);
    *(_QWORD *)&v29 = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&__p, (const std::logic_error *)&v29);
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = -1;
    __p.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v38 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(_QWORD *)&v49[6] = "void AMCP::DAL::PCM_Operation_Context::configure_audio_converter(const DAL_Settings &, const CA"
                         "::StreamDescription &, const CA::StreamDescription &)";
    v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    v51 = 173;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v33.__r_.__value_.__l.__data_);
    v34 = off_1E69A20A0;
    v35 = v33;
    memset(&v33, 0, sizeof(v33));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v34);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v10 = (AudioConverterRef *)(a1 + 48);
  v11 = (AMCP::Log::Scope_Registry *)AudioConverterNew(a3, a4, v10);
  if ((_DWORD)v11)
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v21 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = pthread_self();
      v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v23;
      v44 = 2080;
      v45 = "PCM_Operation_Context.cpp";
      v46 = 1024;
      v47 = 175;
      v48 = 2080;
      *(_QWORD *)v49 = "not (err == noErr)";
      _os_log_error_impl(&dword_1B57BA000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_Operation_Context::configure_audio_converter: failed to create the AudioConverter", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
    v24 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"PCM_Operation_Context::configure_audio_converter: failed to create the AudioConverter", (uint64_t)&v36);
    std::logic_error::logic_error((std::logic_error *)&v29, &v36);
    *(_QWORD *)&v29 = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&__p, (const std::logic_error *)&v29);
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = -1;
    __p.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v38 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(_QWORD *)&v49[6] = "void AMCP::DAL::PCM_Operation_Context::configure_audio_converter(const DAL_Settings &, const CA"
                         "::StreamDescription &, const CA::StreamDescription &)";
    v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    v51 = 175;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v33.__r_.__value_.__l.__data_);
    v34 = off_1E69A20A0;
    v35 = v33;
    memset(&v33, 0, sizeof(v33));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v34);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v24, (uint64_t)buf);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "channel map");
  v12 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, buf);
  v13 = v12;
  if (SHIBYTE(v47) < 0)
  {
    operator delete(*(void **)buf);
    if (!v13)
      return;
  }
  else if (!v12)
  {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "channel map");
  v14 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, buf);
  if (v14)
    AMCP::Thing::convert_to<std::vector<int>>(&v36, (uint64_t)(v14 + 40));
  else
    memset(&v36, 0, sizeof(v36));
  if (SHIBYTE(v47) < 0)
    operator delete(*(void **)buf);
  v15 = (void *)v36.__r_.__value_.__r.__words[0];
  if (v36.__r_.__value_.__r.__words[0] != v36.__r_.__value_.__l.__size_)
  {
    v16 = (AMCP::Log::Scope_Registry *)AudioConverterSetProperty(*v10, 0x63686D70u, (LODWORD(v36.__r_.__value_.__r.__words[1])- LODWORD(v36.__r_.__value_.__l.__data_)) & 0xFFFFFFFC, v36.__r_.__value_.__l.__data_);
    if ((_DWORD)v16)
    {
      AMCP::Log::Scope_Registry::get(v16);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v25 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        v26 = pthread_self();
        v27 = pthread_mach_thread_np(v26);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v27;
        v44 = 2080;
        v45 = "PCM_Operation_Context.cpp";
        v46 = 1024;
        v47 = 184;
        v48 = 2080;
        *(_QWORD *)v49 = "not (err == noErr)";
        _os_log_error_impl(&dword_1B57BA000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_Operation_Context::configure_audio_converter: failed to set the channel map on the converter", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
      v28 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"PCM_Operation_Context::configure_audio_converter: failed to set the channel map on the converter", (uint64_t)&v33);
      std::logic_error::logic_error(&v31, &v33);
      v31.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&__p, &v31);
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v42 = -1;
      __p.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v38 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
      *(_QWORD *)&v49[6] = "void AMCP::DAL::PCM_Operation_Context::configure_audio_converter(const DAL_Settings &, const "
                           "CA::StreamDescription &, const CA::StreamDescription &)";
      v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
      v51 = 184;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v29);
      v34 = off_1E69A20A0;
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v29;
      v35.__r_.__value_.__r.__words[2] = v30;
      v29 = 0uLL;
      v30 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v34);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v28, (uint64_t)buf);
    }
  }
  if (v15)
    operator delete(v15);
}

void sub_1B5C0D644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  void *v38;

  if (v38)
    operator delete(v38);
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::PCM_Operation_Context::configure_resampler(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  int v22;
  _BOOL4 v24;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v27;
  int v28;
  _BOOL4 v30;
  uint64_t v31;
  std::string::size_type v32;
  std::string *v33;
  std::string::size_type v34;
  int v35;
  _BOOL4 v37;
  __int128 v38;
  __int128 v39;
  uint64_t **v40;
  unsigned int v41;
  double v42;
  double v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  int64x2_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  Resampler2 ***v64;
  unsigned __int8 *v65;
  int v66;
  __int128 v67;
  __int128 v68;
  unsigned __int8 *v69;
  uint64_t v70;
  unsigned __int8 *v71;
  double v72;
  unint64_t v73;
  uint64_t i;
  int v75;
  unsigned int v76;
  RamstadSRC *v77;
  double v78;
  std::string::size_type v79;
  unsigned int v80;
  unint64_t v81;
  std::string::size_type *v82;
  char *v83;
  char *v84;
  std::string::size_type *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  std::string::size_type *v93;
  std::string::size_type v94;
  int64x2_t v95;
  RamstadSRC *v96;
  RamstadSRC **v97;
  RamstadSRC **v98;
  float v99;
  Resampler2 *v100;
  double v101;
  unint64_t v102;
  Resampler2 **v103;
  _QWORD *v104;
  _QWORD *v105;
  Resampler2 **v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  Resampler2 **v112;
  Resampler2 *v113;
  int64x2_t v114;
  Resampler2 *v115;
  Resampler2 **v116;
  Resampler2 **v117;
  NSObject *v118;
  _opaque_pthread_t *v119;
  mach_port_t v120;
  void *exception;
  NSObject *v122;
  _opaque_pthread_t *v123;
  mach_port_t v124;
  void *v125;
  uint64_t v126;
  std::string::size_type **v127;
  __int128 v128;
  uint64_t v129;
  void *v130;
  __int128 v131;
  uint64_t v132;
  std::string v133;
  std::logic_error v134;
  std::logic_error v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  char v141;
  std::string __p;
  __int16 v143;
  _BYTE v144[14];
  const char *v145;
  int v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "scale");
  v8 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (v8)
  {
    v8 = (unsigned __int8 *)AMCP::Thing::convert_to<BOOL>((uint64_t)(v8 + 40));
    v9 = (int)v8;
  }
  else
  {
    v9 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v9)
      return;
  }
  else if (!v9)
  {
    return;
  }
  v10 = *(_DWORD *)(a3 + 12);
  if ((v10 & 0x20) != 0)
    v11 = 1;
  else
    v11 = *(_DWORD *)(a3 + 28);
  v12 = *(_DWORD *)(a4 + 12);
  if ((v12 & 0x20) != 0)
    v13 = 1;
  else
    v13 = *(_DWORD *)(a4 + 28);
  if (v11 != v13)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v118 = *(NSObject **)__p.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
    if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
    {
      v119 = pthread_self();
      v120 = pthread_mach_thread_np(v119);
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v120;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"PCM_Operation_Context.cpp";
      WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = 148;
      v143 = 2080;
      *(_QWORD *)v144 = "not (source_fmt.GetNumberInterleavedChannels() == dest_fmt.GetNumberInterleavedChannels())";
      _os_log_error_impl(&dword_1B57BA000, v118, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s resample source and dest must have the same numnber of interleaved channels", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v141);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"resample source and dest must have the same numnber of interleaved channels", (uint64_t)&v133);
    std::logic_error::logic_error(&v134, &v133);
    v134.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v135, &v134);
    v137 = 0;
    v138 = 0;
    v139 = 0;
    v140 = -1;
    v135.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v136 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v135);
    *(_QWORD *)&v144[6] = "void AMCP::DAL::PCM_Operation_Context::configure_resampler(const DAL_Settings &, const CA::Str"
                          "eamDescription &, const CA::StreamDescription &)";
    v145 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    v146 = 148;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v128);
    v131 = v128;
    v132 = v129;
    v128 = 0uLL;
    v129 = 0;
    v130 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&__p, (uint64_t)&v130);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&__p);
  }
  if ((v10 & 0x20) != 0)
    v14 = *(_DWORD *)(a3 + 28);
  else
    v14 = 1;
  if ((v12 & 0x20) != 0)
    v15 = *(_DWORD *)(a4 + 28);
  else
    v15 = 1;
  if (v14 != v15)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v122 = *(NSObject **)__p.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
    if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
    {
      v123 = pthread_self();
      v124 = pthread_mach_thread_np(v123);
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v124;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"PCM_Operation_Context.cpp";
      WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = 149;
      v143 = 2080;
      *(_QWORD *)v144 = "not (source_fmt.GetNumberChannelStreams() == dest_fmt.GetNumberChannelStreams())";
      _os_log_error_impl(&dword_1B57BA000, v122, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s resample source and dest must have the same numnber of noninterleaved channels", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v141);
    v125 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"resample source and dest must have the same numnber of noninterleaved channels", (uint64_t)&v133);
    std::logic_error::logic_error(&v134, &v133);
    v134.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v135, &v134);
    v137 = 0;
    v138 = 0;
    v139 = 0;
    v140 = -1;
    v135.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v136 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v135);
    *(_QWORD *)&v144[6] = "void AMCP::DAL::PCM_Operation_Context::configure_resampler(const DAL_Settings &, const CA::Str"
                          "eamDescription &, const CA::StreamDescription &)";
    v145 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    v146 = 149;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v128);
    v131 = v128;
    v132 = v129;
    v128 = 0uLL;
    v129 = 0;
    v130 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&__p, (uint64_t)&v130);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v125, (uint64_t)&__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "resampler type");
  v16 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (v16)
    v17 = AMCP::Thing::convert_to<AMCP::Resampler_Type>((uint64_t)(v16 + 40));
  else
    v17 = 2;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v17)
      goto LABEL_27;
LABEL_43:
    v18 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v135, "size bias");
    v130 = 0;
    v131 = 0uLL;
    AMCP::DAL::DAL_Settings::at_or<std::string>(&__p, a2, (unsigned __int8 *)&v135, (__n128 *)&v130);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size == 10)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      v27 = p_p->__r_.__value_.__r.__words[0];
      v28 = LOWORD(p_p->__r_.__value_.__r.__words[1]);
      v30 = v27 != 0x6962207475706E69 || v28 != 29537;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_104;
    }
    else
    {
      v30 = 1;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_104:
        if (SHIBYTE(v131) < 0)
          operator delete(v130);
        if (SHIBYTE(v136) < 0)
          operator delete(v135.__vftable);
        v62 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)(v18 + 8) = *(_OWORD *)a3;
        *(_OWORD *)(v18 + 24) = v62;
        *(_QWORD *)(v18 + 40) = *(_QWORD *)(a3 + 32);
        v63 = *(_OWORD *)(a4 + 16);
        *(_OWORD *)(v18 + 48) = *(_OWORD *)a4;
        *(_OWORD *)(v18 + 64) = v63;
        *(_QWORD *)(v18 + 80) = *(_QWORD *)(a4 + 32);
        *(_DWORD *)(v18 + 88) = v30;
        *(_QWORD *)v18 = &off_1E6973F68;
        *(_QWORD *)(v18 + 96) = 0;
        v64 = (Resampler2 ***)(v18 + 96);
        *(_QWORD *)(v18 + 104) = 0;
        *(_QWORD *)(v18 + 112) = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "resampler quality");
        v65 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
        if (v65)
          v66 = AMCP::Thing::convert_to<AMCP::Resampler_Quality>((uint64_t)(v65 + 40));
        else
          v66 = 64;
        *(_DWORD *)(v18 + 120) = v66;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&__p, "scale ratio");
        v71 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
        if (v71)
          v72 = AMCP::Thing::convert_to<double>((uint64_t)(v71 + 40));
        else
          v72 = 1.0;
        v126 = a1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v99 = ceilf((float)*(unsigned int *)(a4 + 28) * 0.5);
        while (v99 > (float)(unint64_t)((uint64_t)(*(_QWORD *)(v18 + 104) - *(_QWORD *)(v18 + 96)) >> 3))
        {
          Resampler2::InitializeVarispeedMode((Resampler2 *)*(unsigned int *)(v18 + 120));
          v100 = (Resampler2 *)operator new();
          Resampler2::Resampler2(v100, *(double *)a3, *(double *)a4, *(_DWORD *)(v18 + 120), v101);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v100;
          v103 = *(Resampler2 ***)(v18 + 104);
          v102 = *(_QWORD *)(v18 + 112);
          if ((unint64_t)v103 >= v102)
          {
            v106 = *v64;
            v107 = v103 - *v64;
            v108 = v107 + 1;
            if ((unint64_t)(v107 + 1) >> 61)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v109 = v102 - (_QWORD)v106;
            if (v109 >> 2 > v108)
              v108 = v109 >> 2;
            if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
              v110 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v110 = v108;
            if (v110)
            {
              if (v110 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v111 = (char *)operator new(8 * v110);
            }
            else
            {
              v111 = 0;
            }
            v112 = (Resampler2 **)&v111[8 * v107];
            __p.__r_.__value_.__r.__words[0] = 0;
            *v112 = v100;
            v105 = v112 + 1;
            if (v103 == v106)
            {
              v115 = 0;
              v114 = vdupq_n_s64((unint64_t)v103);
            }
            else
            {
              do
              {
                v113 = *--v103;
                *v103 = 0;
                *--v112 = v113;
              }
              while (v103 != v106);
              v114 = *(int64x2_t *)v64;
              v115 = (Resampler2 *)__p.__r_.__value_.__r.__words[0];
            }
            *(_QWORD *)(v18 + 96) = v112;
            *(_QWORD *)(v18 + 104) = v105;
            *(_QWORD *)(v18 + 112) = &v111[8 * v110];
            v117 = (Resampler2 **)v114.i64[1];
            v116 = (Resampler2 **)v114.i64[0];
            while (v117 != v116)
              std::unique_ptr<Resampler2>::reset[abi:ne180100](--v117);
            if (v116)
              operator delete(v116);
            *(_QWORD *)(v18 + 104) = v105;
            if (v115)
            {
              Resampler2::~Resampler2(v115);
              MEMORY[0x1B5E50688]();
              v105 = *(_QWORD **)(v18 + 104);
            }
          }
          else
          {
            *v103 = v100;
            v104 = v103 + 1;
            *(_QWORD *)(v18 + 104) = v104;
            v105 = v104;
          }
          Resampler2::SetPrimeMethod(*(v105 - 1), 2);
          Resampler2::SetVarispeedRate(*(v105 - 1), v72);
        }
LABEL_187:
        v61 = *(_QWORD *)(v126 + 32);
        *(_QWORD *)(v126 + 32) = v18;
        if (!v61)
          return;
        goto LABEL_188;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_104;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v17)
    goto LABEL_43;
LABEL_27:
  if (v17 != 1)
  {
    if (v17 != 2)
      return;
    v18 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v135, "size bias");
    v130 = 0;
    v131 = 0uLL;
    AMCP::DAL::DAL_Settings::at_or<std::string>(&__p, a2, (unsigned __int8 *)&v135, (__n128 *)&v130);
    v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v19 = __p.__r_.__value_.__l.__size_;
    if (v19 == 10)
    {
      v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      v21 = v20->__r_.__value_.__r.__words[0];
      v22 = LOWORD(v20->__r_.__value_.__r.__words[1]);
      v24 = v21 != 0x6962207475706E69 || v22 != 29537;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_112;
    }
    else
    {
      v24 = 1;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_112:
        if (SHIBYTE(v131) < 0)
          operator delete(v130);
        if (SHIBYTE(v136) < 0)
          operator delete(v135.__vftable);
        v67 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)(v18 + 8) = *(_OWORD *)a3;
        *(_OWORD *)(v18 + 24) = v67;
        *(_QWORD *)(v18 + 40) = *(_QWORD *)(a3 + 32);
        v68 = *(_OWORD *)(a4 + 16);
        *(_OWORD *)(v18 + 48) = *(_OWORD *)a4;
        *(_OWORD *)(v18 + 64) = v68;
        *(_QWORD *)(v18 + 80) = *(_QWORD *)(a4 + 32);
        *(_DWORD *)(v18 + 88) = v24;
        *(_QWORD *)v18 = &off_1E697CAD0;
        *(_QWORD *)(v18 + 96) = 0;
        v127 = (std::string::size_type **)(v18 + 96);
        *(_QWORD *)(v18 + 104) = 0;
        *(_QWORD *)(v18 + 112) = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "resampler quality");
        v69 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
        if (v69)
          v70 = AMCP::Thing::convert_to<AMCP::Resampler_Quality>((uint64_t)(v69 + 40));
        else
          v70 = 64;
        v126 = a1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if ((*(_BYTE *)(a4 + 12) & 0x20) != 0)
          v73 = 1;
        else
          v73 = *(unsigned int *)(a4 + 28);
        for (i = *(_QWORD *)(v18 + 104) - *(_QWORD *)(v18 + 96); v73 > i >> 3; i = v84 - (char *)*v127)
        {
          v75 = *(_DWORD *)(a3 + 12);
          v76 = *(_DWORD *)(a3 + 28);
          v77 = (RamstadSRC *)operator new();
          v79 = (std::string::size_type)v77;
          if ((v75 & 0x20) != 0)
            v80 = v76;
          else
            v80 = 1;
          RamstadSRC::RamstadSRC(v77, *(double *)a3, *(double *)a4, v80, v70, v78);
          __p.__r_.__value_.__r.__words[0] = v79;
          v82 = *(std::string::size_type **)(v18 + 104);
          v81 = *(_QWORD *)(v18 + 112);
          if ((unint64_t)v82 >= v81)
          {
            v85 = *v127;
            v86 = v82 - *v127;
            v87 = v86 + 1;
            if ((unint64_t)(v86 + 1) >> 61)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v88 = a4;
            v89 = v70;
            v90 = v81 - (_QWORD)v85;
            if (v90 >> 2 > v87)
              v87 = v90 >> 2;
            if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
              v91 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v91 = v87;
            if (v91)
            {
              if (v91 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v92 = (char *)operator new(8 * v91);
            }
            else
            {
              v92 = 0;
            }
            v93 = (std::string::size_type *)&v92[8 * v86];
            __p.__r_.__value_.__r.__words[0] = 0;
            *v93 = v79;
            v84 = (char *)(v93 + 1);
            if (v82 == v85)
            {
              v96 = 0;
              v95 = vdupq_n_s64((unint64_t)v82);
            }
            else
            {
              do
              {
                v94 = *--v82;
                *v82 = 0;
                *--v93 = v94;
              }
              while (v82 != v85);
              v95 = *(int64x2_t *)v127;
              v96 = (RamstadSRC *)__p.__r_.__value_.__r.__words[0];
            }
            *(_QWORD *)(v18 + 96) = v93;
            *(_QWORD *)(v18 + 104) = v84;
            *(_QWORD *)(v18 + 112) = &v92[8 * v91];
            v98 = (RamstadSRC **)v95.i64[1];
            v97 = (RamstadSRC **)v95.i64[0];
            while (v98 != v97)
              std::unique_ptr<RamstadSRC>::reset[abi:ne180100](--v98);
            if (v97)
              operator delete(v97);
            *(_QWORD *)(v18 + 104) = v84;
            v70 = v89;
            a4 = v88;
            if (v96)
            {
              RamstadSRC::~RamstadSRC(v96);
              MEMORY[0x1B5E50688]();
              v84 = *(char **)(v18 + 104);
            }
          }
          else
          {
            *v82 = v79;
            v83 = (char *)(v82 + 1);
            *(_QWORD *)(v18 + 104) = v83;
            v84 = v83;
          }
        }
        goto LABEL_187;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_112;
  }
  v31 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v135, "size bias");
  v130 = 0;
  v131 = 0uLL;
  AMCP::DAL::DAL_Settings::at_or<std::string>(&__p, a2, (unsigned __int8 *)&v135, (__n128 *)&v130);
  v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v32 = __p.__r_.__value_.__l.__size_;
  if (v32 != 10)
  {
    v37 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_71;
    goto LABEL_70;
  }
  v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &__p;
  v34 = v33->__r_.__value_.__r.__words[0];
  v35 = LOWORD(v33->__r_.__value_.__r.__words[1]);
  v37 = v34 != 0x6962207475706E69 || v35 != 29537;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_70:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_71:
  if (SHIBYTE(v131) < 0)
    operator delete(v130);
  if (SHIBYTE(v136) < 0)
    operator delete(v135.__vftable);
  v38 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v31 + 8) = *(_OWORD *)a3;
  *(_OWORD *)(v31 + 24) = v38;
  *(_QWORD *)(v31 + 40) = *(_QWORD *)(a3 + 32);
  v39 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v31 + 48) = *(_OWORD *)a4;
  *(_OWORD *)(v31 + 64) = v39;
  *(_QWORD *)(v31 + 80) = *(_QWORD *)(a4 + 32);
  *(_DWORD *)(v31 + 88) = v37;
  *(_QWORD *)v31 = &off_1E6993700;
  *(_QWORD *)(v31 + 96) = 0;
  v40 = (uint64_t **)(v31 + 96);
  v41 = (*(unsigned __int8 *)(a4 + 12) << 26 >> 31) & (*(_DWORD *)(a4 + 28) >> 1);
  *(_QWORD *)(v31 + 104) = 0;
  *(_QWORD *)(v31 + 112) = 0;
  if (v41)
  {
    v42 = (double)v41;
    v43 = *(double *)a3 / *(double *)a4;
    do
    {
      v44 = operator new();
      *(_BYTE *)v44 = 0;
      ShortTermLinearInterpolationResampler::SetRate(v44, v43);
      *(_QWORD *)(v44 + 32) = 0;
      *(_QWORD *)(v44 + 8) = 0;
      *(_QWORD *)(v44 + 16) = 0;
      v46 = *(uint64_t **)(v31 + 104);
      v45 = *(_QWORD *)(v31 + 112);
      if ((unint64_t)v46 >= v45)
      {
        v48 = *v40;
        v49 = v46 - *v40;
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v51 = v45 - (_QWORD)v48;
        if (v51 >> 2 > v50)
          v50 = v51 >> 2;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
          v52 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v52 = v50;
        if (v52)
        {
          if (v52 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v53 = (char *)operator new(8 * v52);
        }
        else
        {
          v53 = 0;
        }
        v54 = (uint64_t *)&v53[8 * v49];
        *v54 = v44;
        v47 = v54 + 1;
        if (v46 == v48)
        {
          v56 = vdupq_n_s64((unint64_t)v46);
        }
        else
        {
          do
          {
            v55 = *--v46;
            *v46 = 0;
            *--v54 = v55;
          }
          while (v46 != v48);
          v56 = *(int64x2_t *)v40;
        }
        *(_QWORD *)(v31 + 96) = v54;
        *(_QWORD *)(v31 + 104) = v47;
        *(_QWORD *)(v31 + 112) = &v53[8 * v52];
        v58 = (_QWORD *)v56.i64[1];
        v57 = (_QWORD *)v56.i64[0];
        while (v58 != v57)
        {
          v60 = *--v58;
          v59 = v60;
          *v58 = 0;
          if (v60)
            MEMORY[0x1B5E50688](v59, 0x1000C40AC875A91);
        }
        if (v57)
          operator delete(v57);
      }
      else
      {
        *v46 = v44;
        v47 = v46 + 1;
      }
      *(_QWORD *)(v31 + 104) = v47;
    }
    while (v42 > (double)(unint64_t)(((uint64_t)v47 - *(_QWORD *)(v31 + 96)) >> 3));
  }
  v61 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v31;
  if (v61)
LABEL_188:
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
}

void sub_1B5C0E684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49)
{
  uint64_t v49;

  if (a48 < 0)
    operator delete(__p);
  std::vector<std::unique_ptr<Resampler2>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  MEMORY[0x1B5E50688](v49, 0x10A1C40B03752CALL);
  _Unwind_Resume(a1);
}

void std::default_delete<AMCP::DAL::DAL_Stereo_To_Mono_Mixer>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E50688);
}

void AMCP::DAL::PCM_Operation_Context::~PCM_Operation_Context(AMCP::DAL::PCM_Operation_Context *this)
{
  OpaqueAudioConverter *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (OpaqueAudioConverter *)*((_QWORD *)this + 6);
  if (v2)
    AudioConverterDispose(v2);
  v3 = (void *)*((_QWORD *)this + 21);
  if (v3)
  {
    *((_QWORD *)this + 22) = v3;
    operator delete(v3);
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    std::default_delete<AMCP::DAL::DAL_Stereo_To_Mono_Mixer>::operator()[abi:ne180100](v4);
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    MEMORY[0x1B5E50688](v6, 0x1000C40D9C97D19);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  v7 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

double AMCP::DAL::PCM_Operation_Context::apply(uint64_t is_format_equivalent_besides_sample_rate, uint64_t *a2, double *a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  double v8;
  double v9;
  uint64_t v11;
  double v12;
  char *v13;
  char *v14;
  char *v16;
  AMCP::DAL::PCM_Data_Handler *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  double v23;
  unint64_t v24;
  double v25;
  double v26;
  float v27;
  const char *imp;
  void *v29;
  char v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  AudioConverterRef v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  int64_t v41;
  int64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  unsigned int *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  AudioConverterRef v60;
  uint64_t v61;
  unsigned int *v62;
  uint64_t v63;
  const float **v64;
  vDSP_Length v65;
  unint64_t v66;
  uint64_t v67;
  size_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  double v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  double v79;
  unint64_t *v80;
  double v81;
  double v82;
  unint64_t *v83;
  unint64_t v84;
  double v85;
  unint64_t *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  double v90;
  unint64_t *v91;
  double sample_time;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  std::string::size_type v102;
  unint64_t *v103;
  unint64_t v104;
  int v105;
  double v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *size;
  unint64_t *v111;
  unint64_t v112;
  double v113;
  double v114;
  uint64_t v115;
  float v116;
  double v117;
  double v118;
  double v119;
  char *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  double v128;
  unint64_t *v129;
  unint64_t v130;
  char *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  double v140;
  unint64_t *v141;
  double v142;
  double v143;
  float v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  float v150;
  uint64_t v151;
  uint64_t v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  const float *v159;
  float v160;
  float v161;
  uint64_t v162;
  uint64_t v163;
  float *v164;
  uint64_t v165;
  uint64_t v166;
  double v167;
  float **v168;
  uint64_t v169;
  vDSP_Length v170;
  float *v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  float **v176;
  float v177;
  float *v178;
  unint64_t v179;
  float *v180;
  uint64_t i;
  float v182;
  float v183;
  vDSP_Length v184;
  unint64_t v185;
  float *v186;
  AMCP::DAL::PCM_Data_Handler *v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  NSObject *v193;
  _opaque_pthread_t *v194;
  mach_port_t v195;
  void *v196;
  NSObject *v197;
  _opaque_pthread_t *v198;
  mach_port_t v199;
  void *v200;
  NSObject *v201;
  _opaque_pthread_t *v202;
  mach_port_t v203;
  void *v204;
  NSObject *v205;
  _opaque_pthread_t *v206;
  mach_port_t v207;
  void *exception;
  NSObject *v209;
  _opaque_pthread_t *v210;
  mach_port_t v211;
  void *v212;
  NSObject *v213;
  _opaque_pthread_t *v214;
  mach_port_t v215;
  void *v216;
  NSObject *v217;
  _opaque_pthread_t *v218;
  mach_port_t v219;
  void *v220;
  uint64_t v221;
  double v222;
  double *v224;
  double v226;
  char v227;
  uint64_t v228[2];
  uint64_t v229[2];
  std::logic_error v230;
  uint64_t v231;
  std::string v232;
  uint64_t v233;
  std::logic_error v234;
  char v235;
  _OWORD v236[2];
  uint64_t v237;
  uint64_t v238[2];
  uint64_t v239;
  std::__shared_weak_count *v240;
  AMCP::DAL::PCM_Data_Handler *v241;
  std::__shared_weak_count *v242;
  AMCP::DAL::PCM_Data_Handler *v243;
  std::__shared_weak_count *v244;
  AMCP::DAL::PCM_Data_Handler *v245;
  std::__shared_weak_count *v246;
  std::string v247;
  std::logic_error v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  double v258;
  double v259;
  char v260;
  _BYTE __B[40];
  const char *v262;
  int v263;
  char v264;
  uint64_t v265;

  v8 = a7;
  v9 = a6;
  v11 = is_format_equivalent_besides_sample_rate;
  v265 = *MEMORY[0x1E0C80C00];
  v226 = a3[1] - *a3;
  v12 = a6 + v226;
  v14 = *(char **)(is_format_equivalent_besides_sample_rate + 168);
  v13 = *(char **)(is_format_equivalent_besides_sample_rate + 176);
  if (v14 == v13)
  {
    v23 = a6;
    goto LABEL_224;
  }
  v16 = *(char **)(is_format_equivalent_besides_sample_rate + 168);
  while (*(_DWORD *)v16 != 4)
  {
    v16 += 4;
    if (v16 == v13)
    {
      v16 = *(char **)(is_format_equivalent_besides_sample_rate + 176);
      break;
    }
  }
  if (v16 != v13)
  {
    if (*(double *)(is_format_equivalent_besides_sample_rate + 88) != *(double *)(is_format_equivalent_besides_sample_rate
                                                                                 + 128))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_format_equivalent_besides_sample_rate);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__B, "com.apple.coreaudio", "AMCP");
      v205 = **(NSObject ***)__B;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__B);
      if (os_log_type_enabled(v205, OS_LOG_TYPE_ERROR))
      {
        v206 = pthread_self();
        v207 = pthread_mach_thread_np(v206);
        *(_DWORD *)__B = 67109890;
        *(_DWORD *)&__B[4] = v207;
        *(_WORD *)&__B[8] = 2080;
        *(_QWORD *)&__B[10] = "PCM_Operation_Context.cpp";
        *(_WORD *)&__B[18] = 1024;
        *(_DWORD *)&__B[20] = 219;
        *(_WORD *)&__B[24] = 2080;
        *(_QWORD *)&__B[26] = "not (m_source_format.mSampleRate == m_dest_format.mSampleRate)";
        _os_log_error_impl(&dword_1B57BA000, v205, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s direct copies should never have different sample rates", __B, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v234);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"direct copies should never have different sample rates", (uint64_t)&v232);
      std::logic_error::logic_error(&v230, &v232);
      v230.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v248, &v230);
      v250 = 0;
      v251 = 0;
      v252 = 0;
      v253 = -1;
      v248.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v249 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__B, (uint64_t)&v248);
      *(_QWORD *)&__B[32] = "Sample_Time_Range AMCP::DAL::PCM_Operation_Context::apply(const Sample_Group<float> &, const"
                            " Sample_Time_Range &, Container, Sample_Time_Range, const DAL_Settings &) const";
      v262 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
      v263 = 219;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v247.__r_.__value_.__l.__data_);
      *(std::string *)((char *)v236 + 8) = v247;
      *(_QWORD *)&v236[0] = off_1E69A20A0;
      memset(&v247, 0, sizeof(v247));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__B, (uint64_t)v236);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)__B);
    }
    if (v13 - v14 != 4)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_format_equivalent_besides_sample_rate);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__B, "com.apple.coreaudio", "AMCP");
      v209 = **(NSObject ***)__B;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__B);
      if (os_log_type_enabled(v209, OS_LOG_TYPE_ERROR))
      {
        v210 = pthread_self();
        v211 = pthread_mach_thread_np(v210);
        *(_DWORD *)__B = 67109890;
        *(_DWORD *)&__B[4] = v211;
        *(_WORD *)&__B[8] = 2080;
        *(_QWORD *)&__B[10] = "PCM_Operation_Context.cpp";
        *(_WORD *)&__B[18] = 1024;
        *(_DWORD *)&__B[20] = 220;
        *(_WORD *)&__B[24] = 2080;
        *(_QWORD *)&__B[26] = "not (m_order_of_operations.size() == 1)";
        _os_log_error_impl(&dword_1B57BA000, v209, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Change Clock operation should be processed only independently", __B, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v234);
      v212 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Change Clock operation should be processed only independently", (uint64_t)&v232);
      std::logic_error::logic_error(&v230, &v232);
      v230.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v248, &v230);
      v250 = 0;
      v251 = 0;
      v252 = 0;
      v253 = -1;
      v248.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v249 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__B, (uint64_t)&v248);
      *(_QWORD *)&__B[32] = "Sample_Time_Range AMCP::DAL::PCM_Operation_Context::apply(const Sample_Group<float> &, const"
                            " Sample_Time_Range &, Container, Sample_Time_Range, const DAL_Settings &) const";
      v262 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
      v263 = 220;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v247.__r_.__value_.__l.__data_);
      *(std::string *)((char *)v236 + 8) = v247;
      *(_QWORD *)&v236[0] = off_1E69A20A0;
      memset(&v247, 0, sizeof(v247));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__B, (uint64_t)v236);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v212, (uint64_t)__B);
    }
    v17 = *(AMCP::DAL::PCM_Data_Handler **)a4;
    v18 = *(std::__shared_weak_count **)(a4 + 8);
    v245 = *(AMCP::DAL::PCM_Data_Handler **)a4;
    v246 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    AMCP::DAL::PCM_Operation_Context::copy_directly_to_destination(a2, v17, a6, a7);
    if (!v18)
      return v9;
    v21 = (unint64_t *)&v18->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    v23 = v9;
    if (!v22)
      goto LABEL_232;
    return v23;
  }
  v24 = 0;
  v224 = (double *)(is_format_equivalent_besides_sample_rate + 88);
  v222 = a7 - a6;
  v221 = is_format_equivalent_besides_sample_rate + 128;
  v227 = 1;
  v23 = a6;
  while (2)
  {
    switch(*(_DWORD *)&v14[4 * v24])
    {
      case 0:
        if (!*(_QWORD *)(v11 + 24))
          goto LABEL_222;
        v26 = *a3;
        v25 = a3[1];
        is_format_equivalent_besides_sample_rate = caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::load((uint64_t)&v248, *(_QWORD *)(v11 + 8));
        if (v260)
          goto LABEL_180;
        v27 = *(float *)&v248.__vftable;
        imp = v248.__imp_.__imp_;
        v29 = v249;
        v30 = v254;
        v31 = *(_QWORD *)(v11 + 64);
        *(_QWORD *)&v236[0] = *(_QWORD *)(v11 + 56);
        *((_QWORD *)&v236[0] + 1) = v31;
        if (v31)
        {
          v32 = (unint64_t *)(v31 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        *(_DWORD *)__B = 0;
        *(_QWORD *)&__B[8] = 0;
        *(_QWORD *)&__B[16] = 0;
        *(_OWORD *)&__B[24] = v236[0];
        v236[0] = 0uLL;
        if ((v30 & 1) != 0)
        {
          *(_QWORD *)&__B[8] = imp;
          *(_DWORD *)__B = 2;
          v34 = 3;
          if ((v30 & 2) == 0)
            goto LABEL_95;
        }
        else
        {
          v34 = 1;
          if ((v30 & 2) == 0)
            goto LABEL_95;
        }
        *(_QWORD *)&__B[16] = v29;
        *(_DWORD *)__B = v34;
LABEL_95:
        sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)__B);
        v93 = *(std::__shared_weak_count **)&__B[32];
        if (*(_QWORD *)&__B[32])
        {
          v94 = (unint64_t *)(*(_QWORD *)&__B[32] + 8);
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
          }
        }
        v96 = (std::__shared_weak_count *)*((_QWORD *)&v236[0] + 1);
        if (*((_QWORD *)&v236[0] + 1))
        {
          v97 = (unint64_t *)(*((_QWORD *)&v236[0] + 1) + 8);
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        v99 = v255;
        v100 = v256;
        v101 = v257;
        v102 = *(_QWORD *)(v11 + 64);
        v232.__r_.__value_.__r.__words[0] = *(_QWORD *)(v11 + 56);
        v232.__r_.__value_.__l.__size_ = v102;
        if (v102)
        {
          v103 = (unint64_t *)(v102 + 8);
          do
            v104 = __ldxr(v103);
          while (__stxr(v104 + 1, v103));
        }
        *(_DWORD *)__B = 0;
        *(_QWORD *)&__B[8] = 0;
        *(_QWORD *)&__B[16] = 0;
        *(_OWORD *)&__B[24] = *(_OWORD *)&v232.__r_.__value_.__l.__data_;
        *(_OWORD *)&v232.__r_.__value_.__l.__data_ = 0uLL;
        if ((v101 & 1) != 0)
        {
          *(_QWORD *)&__B[8] = v99;
          *(_DWORD *)__B = 2;
          v105 = 3;
          if ((v101 & 2) == 0)
            goto LABEL_113;
        }
        else
        {
          v105 = 1;
          if ((v101 & 2) == 0)
            goto LABEL_113;
        }
        *(_QWORD *)&__B[16] = v100;
        *(_DWORD *)__B = v105;
LABEL_113:
        v106 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)__B);
        v107 = *(std::__shared_weak_count **)&__B[32];
        if (*(_QWORD *)&__B[32])
        {
          v108 = (unint64_t *)(*(_QWORD *)&__B[32] + 8);
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        size = (std::__shared_weak_count *)v232.__r_.__value_.__l.__size_;
        if (v232.__r_.__value_.__l.__size_)
        {
          v111 = (unint64_t *)(v232.__r_.__value_.__l.__size_ + 8);
          do
            v112 = __ldaxr(v111);
          while (__stlxr(v112 - 1, v111));
          if (!v112)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v113 = round(sample_time);
        v114 = round(v26);
        if (v113 >= v114)
        {
          v115 = *(_QWORD *)(v11 + 24);
          v116 = v27;
          v117 = sample_time;
          v118 = v106;
LABEL_173:
          AMCP::DAL::DAL_Volume_Processor::set_ramp(v115, v116, v117, v118);
          goto LABEL_178;
        }
        v119 = round(sample_time + v106);
        if (v113 < v119)
        {
          v142 = round(v25);
          if (v114 < v142)
          {
            if (v142 >= v119)
              v143 = sample_time + v106;
            else
              v143 = v25;
            v119 = round(v143);
          }
          else
          {
            v119 = v142;
          }
        }
        else
        {
          v114 = v113;
        }
        v115 = *(_QWORD *)(v11 + 24);
        if (v114 < v119)
        {
          v118 = v106 - (v26 - sample_time);
          v116 = v27;
          v117 = v26;
          goto LABEL_173;
        }
        v144 = fmaxf(fminf(v27, 1.0), 0.0);
        *(float *)(v115 + 52) = v144;
        v145 = *(double *)(v115 + 40);
        *(double *)(v115 + 56) = v26;
        *(double *)(v115 + 64) = v145;
        v146 = (v144 - *(float *)(v115 + 48)) / v145;
        v147 = ceil(v146 * 1000000.0);
        v148 = floor(v146 * 1000000.0);
        if (v146 <= 0.0)
          v149 = v148;
        else
          v149 = v147;
        v150 = v149 / 1000000.0;
        *(float *)(v115 + 72) = v150;
LABEL_178:
        v151 = *(_QWORD *)(v11 + 8);
        is_format_equivalent_besides_sample_rate = caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::load((uint64_t)__B, v151);
        v8 = a7;
        if (!v264)
        {
          v264 = 1;
          is_format_equivalent_besides_sample_rate = caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::store(v151, (__int128 *)__B);
        }
LABEL_180:
        v152 = *(_QWORD *)(v11 + 24);
        v153 = *(double *)(v152 + 56);
        v154 = v153 + *(double *)(v152 + 64);
        v155 = round(v153);
        v156 = round(v154);
        if (v155 < v156)
        {
          v157 = round(v258);
          v158 = round(v259);
          if (v157 < v158)
          {
            if (v155 < v157)
              v153 = v258;
            if (v158 < v156)
              v154 = v259;
            v155 = round(v153);
            v156 = round(v154);
          }
          else
          {
            v156 = v158;
            v155 = v157;
            v154 = v259;
            v153 = v258;
          }
        }
        if (v155 < v156)
        {
          if ((*(_BYTE *)(v152 + 12) & 0x20) != 0)
            v166 = 1;
          else
            v166 = *(unsigned int *)(v152 + 28);
          v167 = v258;
          v168 = (float **)*a2;
          v169 = a2[1];
          if (round(v258) < v155)
          {
            if (v168 == (float **)v169)
            {
              v169 = *a2;
            }
            else
            {
              v170 = v166 * vcvtmd_s64_f64(v153 - v258);
              do
              {
                v171 = *v168;
                *(_DWORD *)__B = *(_DWORD *)(v152 + 48);
                vDSP_vsmul(v171, 1, (const float *)__B, v171, 1, v170);
                v168 += 2;
              }
              while (v168 != (float **)v169);
              v168 = (float **)*a2;
              v169 = a2[1];
            }
          }
          if (v168 != (float **)v169)
          {
            v172 = vcvtmd_s64_f64(v153) - vcvtmd_s64_f64(v167);
            v173 = v172 * v166;
            v174 = (v172 + vcvtmd_s64_f64(v154 - v153)) * v166;
            v175 = 4 * v166 * v172;
            v176 = v168;
            do
            {
              v177 = *(float *)(v152 + 48);
              if (v173 < v174)
              {
                v178 = (float *)((char *)*v176 + v175);
                v179 = v173;
                do
                {
                  v180 = v178;
                  for (i = v166; i; --i)
                  {
                    *v180 = v177 * *v180;
                    ++v180;
                  }
                  v182 = *(float *)(v152 + 72);
                  v183 = v177 + v182;
                  if (v182 <= 0.0 || (v177 = *(float *)(v152 + 52), v183 < v177))
                  {
                    if (v182 >= 0.0)
                    {
                      v177 = v183;
                    }
                    else
                    {
                      v177 = v183;
                      if (v183 <= *(float *)(v152 + 52))
                        v177 = *(float *)(v152 + 52);
                    }
                  }
                  v179 += v166;
                  v178 += v166;
                }
                while (v179 < v174);
              }
              v176 += 2;
            }
            while (v176 != (float **)v169);
            *(float *)(v152 + 48) = v177;
            if (v156 < round(v259))
            {
              v184 = v166 * vcvtmd_s64_f64(v259 - v154);
              v185 = v166 * vcvtmd_s64_f64(v154 - v167);
              do
              {
                v186 = &(*v168)[v185];
                *(_DWORD *)__B = *(_DWORD *)(v152 + 48);
                vDSP_vsmul(v186, 1, (const float *)__B, v186, 1, v184);
                v168 += 2;
              }
              while (v168 != (float **)v169);
            }
          }
        }
        else
        {
          v160 = *(float *)(v152 + 48);
          v159 = (const float *)(v152 + 48);
          v161 = v160;
          if (v160 != 1.0)
          {
            v162 = *a2;
            v163 = a2[1];
            if (v161 == 0.0)
            {
              while (v162 != v163)
              {
                v164 = *(float **)v162;
                v165 = *(_QWORD *)(v162 + 8);
                v162 += 16;
                bzero(v164, 4 * v165);
              }
            }
            else
            {
              while (v162 != v163)
              {
                vDSP_vsmul(*(const float **)v162, 1, v159, *(float **)v162, 1, *(_QWORD *)(v162 + 8));
                v162 += 16;
              }
            }
          }
        }
        goto LABEL_222;
      case 1:
        is_format_equivalent_besides_sample_rate = *(_QWORD *)(v11 + 32);
        if (!is_format_equivalent_besides_sample_rate)
          goto LABEL_222;
        v59 = ((v13 - v14) >> 2) - 1;
        v60 = *(AudioConverterRef *)v11;
        if (*(_QWORD *)v11)
        {
          if (v24 == v59)
          {
            if (!v24
              || ((v61 = *((_QWORD *)v60 + 11)) == 0
                ? memset(__B, 0, sizeof(__B))
                : (void *)(*(_OWORD *)__B = *(_OWORD *)(v61 + 8),
                           *(_OWORD *)&__B[16] = *(_OWORD *)(v61 + 24),
                           *(_QWORD *)&__B[32] = *(_QWORD *)(v61 + 40)),
                  is_format_equivalent_besides_sample_rate = AMCP::DAL::is_format_equivalent_besides_sample_rate(v221, (uint64_t)__B), (is_format_equivalent_besides_sample_rate & 1) == 0))
            {
              AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_format_equivalent_besides_sample_rate);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__B, "com.apple.coreaudio", "AMCP");
              v197 = **(NSObject ***)__B;
              std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__B);
              if (os_log_type_enabled(v197, OS_LOG_TYPE_ERROR))
              {
                v198 = pthread_self();
                v199 = pthread_mach_thread_np(v198);
                *(_DWORD *)__B = 67109890;
                *(_DWORD *)&__B[4] = v199;
                *(_WORD *)&__B[8] = 2080;
                *(_QWORD *)&__B[10] = "PCM_Operation_Context.cpp";
                *(_WORD *)&__B[18] = 1024;
                *(_DWORD *)&__B[20] = 269;
                *(_WORD *)&__B[24] = 2080;
                *(_QWORD *)&__B[26] = "not (intermediate_buffer_is_source)";
                _os_log_error_impl(&dword_1B57BA000, v197, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s multi processing operations requires an intermediate buffer", __B, 0x22u);
              }
              AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v234);
              v200 = __cxa_allocate_exception(0x40uLL);
              caulk::make_string((caulk *)"multi processing operations requires an intermediate buffer", (uint64_t)&v232, &__B[24]);
              std::logic_error::logic_error(&v230, &v232);
              v230.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
              std::logic_error::logic_error(&v248, &v230);
              v250 = 0;
              v251 = 0;
              v252 = 0;
              v253 = -1;
              v248.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
              v249 = &unk_1E69A1230;
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__B, (uint64_t)&v248);
              *(_QWORD *)&__B[32] = "Sample_Time_Range AMCP::DAL::PCM_Operation_Context::apply(const Sample_Group<float> "
                                    "&, const Sample_Time_Range &, Container, Sample_Time_Range, const DAL_Settings &) const";
              v262 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
              v263 = 269;
              applesauce::backtrace::snapshot_N<64>::snapshot_N(&v247.__r_.__value_.__l.__data_);
              *(std::string *)((char *)v236 + 8) = v247;
              *(_QWORD *)&v236[0] = off_1E69A20A0;
              memset(&v247, 0, sizeof(v247));
              boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__B, (uint64_t)v236);
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v200, (uint64_t)__B);
            }
            v131 = (char *)*((_QWORD *)v60 + 12);
            v248.__vftable = (std::logic_error_vtbl *)v61;
            v248.__imp_.__imp_ = v131;
            if (v131)
            {
              v132 = (unint64_t *)(v131 + 8);
              do
                v133 = __ldxr(v132);
              while (__stxr(v133 + 1, v132));
            }
            AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(v61);
            AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)__B, (AMCP::DAL::PCM_Data_Handler *)v61, v23, v12);
            if (v131)
            {
              v134 = (unint64_t *)(v131 + 8);
              do
                v135 = __ldaxr(v134);
              while (__stlxr(v135 - 1, v134));
              if (!v135)
              {
                (*(void (**)(char *))(*(_QWORD *)v131 + 16))(v131);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v131);
              }
            }
            v136 = *(_QWORD *)(v11 + 32);
            v137 = *(std::__shared_weak_count **)(a4 + 8);
            v241 = *(AMCP::DAL::PCM_Data_Handler **)a4;
            v242 = v137;
            if (v137)
            {
              v138 = (unint64_t *)&v137->__shared_owners_;
              do
                v139 = __ldxr(v138);
              while (__stxr(v139 + 1, v138));
            }
            v23 = (*(double (**)(uint64_t, _BYTE *, AMCP::DAL::PCM_Data_Handler **, uint64_t, double, double, double))(*(_QWORD *)v136 + 16))(v136, __B, &v241, a5, v12 - v23, v9, v8);
            v12 = v140;
            v125 = v242;
            if (v242)
            {
              v141 = (unint64_t *)&v242->__shared_owners_;
              do
                v130 = __ldaxr(v141);
              while (__stlxr(v130 - 1, v141));
              goto LABEL_160;
            }
            goto LABEL_162;
          }
          v87 = (std::__shared_weak_count *)*((_QWORD *)v60 + 12);
          v239 = *((_QWORD *)v60 + 11);
          v240 = v87;
          if (v87)
          {
            v88 = (unint64_t *)&v87->__shared_owners_;
            do
              v89 = __ldxr(v88);
            while (__stxr(v89 + 1, v88));
          }
          v23 = (*(double (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, double, double, double))(*(_QWORD *)is_format_equivalent_besides_sample_rate + 16))(is_format_equivalent_besides_sample_rate, a2, &v239, a5, v226, 0.0, v222);
          v12 = v90;
          v70 = v240;
          if (v240)
          {
            v91 = (unint64_t *)&v240->__shared_owners_;
            do
              v75 = __ldaxr(v91);
            while (__stlxr(v75 - 1, v91));
            goto LABEL_91;
          }
        }
        else
        {
          if (v24 != v59)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_format_equivalent_besides_sample_rate);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__B, "com.apple.coreaudio", "AMCP");
            v217 = **(NSObject ***)__B;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__B);
            if (os_log_type_enabled(v217, OS_LOG_TYPE_ERROR))
            {
              v218 = pthread_self();
              v219 = pthread_mach_thread_np(v218);
              *(_DWORD *)__B = 67109890;
              *(_DWORD *)&__B[4] = v219;
              *(_WORD *)&__B[8] = 2080;
              *(_QWORD *)&__B[10] = "PCM_Operation_Context.cpp";
              *(_WORD *)&__B[18] = 1024;
              *(_DWORD *)&__B[20] = 260;
              *(_WORD *)&__B[24] = 2080;
              *(_QWORD *)&__B[26] = "not (is_last_command)";
              _os_log_error_impl(&dword_1B57BA000, v217, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not intermediate buffer requires k_resampling to be the last command", __B, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v234);
            v220 = __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"not intermediate buffer requires k_resampling to be the last command", (uint64_t)&v232, &__B[24]);
            std::logic_error::logic_error(&v230, &v232);
            v230.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
            std::logic_error::logic_error(&v248, &v230);
            v250 = 0;
            v251 = 0;
            v252 = 0;
            v253 = -1;
            v248.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
            v249 = &unk_1E69A1230;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__B, (uint64_t)&v248);
            *(_QWORD *)&__B[32] = "Sample_Time_Range AMCP::DAL::PCM_Operation_Context::apply(const Sample_Group<float> &,"
                                  " const Sample_Time_Range &, Container, Sample_Time_Range, const DAL_Settings &) const";
            v262 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
            v263 = 260;
            applesauce::backtrace::snapshot_N<64>::snapshot_N(&v247.__r_.__value_.__l.__data_);
            *(std::string *)((char *)v236 + 8) = v247;
            *(_QWORD *)&v236[0] = off_1E69A20A0;
            memset(&v247, 0, sizeof(v247));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__B, (uint64_t)v236);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v220, (uint64_t)__B);
          }
          v76 = *(std::__shared_weak_count **)(a4 + 8);
          v243 = *(AMCP::DAL::PCM_Data_Handler **)a4;
          v244 = v76;
          if (v76)
          {
            v77 = (unint64_t *)&v76->__shared_owners_;
            do
              v78 = __ldxr(v77);
            while (__stxr(v78 + 1, v77));
          }
          v23 = (*(double (**)(uint64_t, uint64_t *, AMCP::DAL::PCM_Data_Handler **, uint64_t, double, double, double))(*(_QWORD *)is_format_equivalent_besides_sample_rate + 16))(is_format_equivalent_besides_sample_rate, a2, &v243, a5, v226, v9, v8);
          v12 = v79;
          v70 = v244;
          if (v244)
          {
            v80 = (unint64_t *)&v244->__shared_owners_;
            do
              v75 = __ldaxr(v80);
            while (__stlxr(v75 - 1, v80));
            goto LABEL_91;
          }
        }
        goto LABEL_164;
      case 2:
        if (!*(_QWORD *)(v11 + 48))
          goto LABEL_222;
        v35 = ((v13 - v14) >> 2) - 1;
        v36 = *(AudioConverterRef *)v11;
        if (*(_QWORD *)v11)
        {
          if (v24 == v35)
          {
            v37 = *((_QWORD *)v36 + 11);
            if (v37)
            {
              v236[0] = *(_OWORD *)(v37 + 8);
              v236[1] = *(_OWORD *)(v37 + 24);
              v237 = *(_QWORD *)(v37 + 40);
              if (!v24)
                goto LABEL_235;
            }
            else
            {
              v237 = 0;
              memset(v236, 0, sizeof(v236));
              if (!v24)
                goto LABEL_235;
            }
            is_format_equivalent_besides_sample_rate = AMCP::DAL::is_format_equivalent_besides_sample_rate((uint64_t)v224, (uint64_t)v236);
            if ((is_format_equivalent_besides_sample_rate & 1) == 0)
            {
LABEL_235:
              AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_format_equivalent_besides_sample_rate);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__B, "com.apple.coreaudio", "AMCP");
              v193 = **(NSObject ***)__B;
              std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__B);
              if (os_log_type_enabled(v193, OS_LOG_TYPE_ERROR))
              {
                v194 = pthread_self();
                v195 = pthread_mach_thread_np(v194);
                *(_DWORD *)__B = 67109890;
                *(_DWORD *)&__B[4] = v195;
                *(_WORD *)&__B[8] = 2080;
                *(_QWORD *)&__B[10] = "PCM_Operation_Context.cpp";
                *(_WORD *)&__B[18] = 1024;
                *(_DWORD *)&__B[20] = 301;
                *(_WORD *)&__B[24] = 2080;
                *(_QWORD *)&__B[26] = "not (intermediate_buffer_is_source)";
                _os_log_error_impl(&dword_1B57BA000, v193, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s multi processing operations requires an intermediate buffer", __B, 0x22u);
              }
              AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v235);
              v196 = __cxa_allocate_exception(0x40uLL);
              caulk::make_string((caulk *)"multi processing operations requires an intermediate buffer", (uint64_t)&v247, &__B[24]);
              std::logic_error::logic_error(&v234, &v247);
              v234.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
              std::logic_error::logic_error(&v248, &v234);
              v250 = 0;
              v251 = 0;
              v252 = 0;
              v253 = -1;
              v248.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
              v249 = &unk_1E69A1230;
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__B, (uint64_t)&v248);
              *(_QWORD *)&__B[32] = "Sample_Time_Range AMCP::DAL::PCM_Operation_Context::apply(const Sample_Group<float> "
                                    "&, const Sample_Time_Range &, Container, Sample_Time_Range, const DAL_Settings &) const";
              v262 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
              v263 = 301;
              applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v230);
              v232.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
              *(std::logic_error *)&v232.__r_.__value_.__r.__words[1] = v230;
              v233 = v231;
              v230.__vftable = 0;
              v230.__imp_.__imp_ = 0;
              v231 = 0;
              boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__B, (uint64_t)&v232);
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v196, (uint64_t)__B);
            }
            v120 = (char *)*((_QWORD *)v36 + 12);
            v248.__vftable = (std::logic_error_vtbl *)v37;
            v248.__imp_.__imp_ = v120;
            if (v120)
            {
              v121 = (unint64_t *)(v120 + 8);
              do
                v122 = __ldxr(v121);
              while (__stxr(v122 + 1, v121));
            }
            AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(v37);
            AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)__B, (AMCP::DAL::PCM_Data_Handler *)v37, v23, v12);
            if (v120)
            {
              v123 = (unint64_t *)(v120 + 8);
              do
                v124 = __ldaxr(v123);
              while (__stlxr(v124 - 1, v123));
              if (!v124)
              {
                (*(void (**)(char *))(*(_QWORD *)v120 + 16))(v120);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v120);
              }
            }
            v125 = *(std::__shared_weak_count **)(a4 + 8);
            v229[0] = *(_QWORD *)a4;
            v229[1] = (uint64_t)v125;
            if (v125)
            {
              v126 = (unint64_t *)&v125->__shared_owners_;
              do
                v127 = __ldxr(v126);
              while (__stxr(v127 + 1, v126));
            }
            v23 = AMCP::DAL::PCM_Operation_Context::convert_audio_format((AudioConverterRef *)v11, (uint64_t *)__B, (double *)v236, v229, v12 - v23, v9, v8);
            v12 = v128;
            if (v125)
            {
              v129 = (unint64_t *)&v125->__shared_owners_;
              do
                v130 = __ldaxr(v129);
              while (__stlxr(v130 - 1, v129));
LABEL_160:
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }
LABEL_162:
            is_format_equivalent_besides_sample_rate = *(_QWORD *)__B;
            if (*(_QWORD *)__B)
            {
              *(_QWORD *)&__B[8] = *(_QWORD *)__B;
              is_format_equivalent_besides_sample_rate = (uint64_t)std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)__B, (uint64_t)(*(_QWORD *)&__B[16] - *(_QWORD *)__B) >> 4);
            }
            goto LABEL_164;
          }
          v82 = *a3;
          v81 = a3[1];
          v70 = (std::__shared_weak_count *)*((_QWORD *)v36 + 12);
          v228[0] = *((_QWORD *)v36 + 11);
          v228[1] = (uint64_t)v70;
          if (v70)
          {
            v83 = (unint64_t *)&v70->__shared_owners_;
            do
              v84 = __ldxr(v83);
            while (__stxr(v84 + 1, v83));
          }
          v23 = AMCP::DAL::PCM_Operation_Context::convert_audio_format((AudioConverterRef *)v11, a2, v224, v228, v226, 0.0, v81 - v82);
          v12 = v85;
          if (v70)
          {
            v86 = (unint64_t *)&v70->__shared_owners_;
            do
              v75 = __ldaxr(v86);
            while (__stlxr(v75 - 1, v86));
            goto LABEL_91;
          }
        }
        else
        {
          if (v24 != v35)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_format_equivalent_besides_sample_rate);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__B, "com.apple.coreaudio", "AMCP");
            v213 = **(NSObject ***)__B;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__B);
            if (os_log_type_enabled(v213, OS_LOG_TYPE_ERROR))
            {
              v214 = pthread_self();
              v215 = pthread_mach_thread_np(v214);
              *(_DWORD *)__B = 67109890;
              *(_DWORD *)&__B[4] = v215;
              *(_WORD *)&__B[8] = 2080;
              *(_QWORD *)&__B[10] = "PCM_Operation_Context.cpp";
              *(_WORD *)&__B[18] = 1024;
              *(_DWORD *)&__B[20] = 291;
              *(_WORD *)&__B[24] = 2080;
              *(_QWORD *)&__B[26] = "not (is_last_command)";
              _os_log_error_impl(&dword_1B57BA000, v213, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not intermediate buffer requires k_format_conversion to be the last command", __B, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v234);
            v216 = __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"not intermediate buffer requires k_format_conversion to be the last command", (uint64_t)&v232, &__B[24]);
            std::logic_error::logic_error(&v230, &v232);
            v230.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
            std::logic_error::logic_error(&v248, &v230);
            v250 = 0;
            v251 = 0;
            v252 = 0;
            v253 = -1;
            v248.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
            v249 = &unk_1E69A1230;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__B, (uint64_t)&v248);
            *(_QWORD *)&__B[32] = "Sample_Time_Range AMCP::DAL::PCM_Operation_Context::apply(const Sample_Group<float> &,"
                                  " const Sample_Time_Range &, Container, Sample_Time_Range, const DAL_Settings &) const";
            v262 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
            v263 = 291;
            applesauce::backtrace::snapshot_N<64>::snapshot_N(&v247.__r_.__value_.__l.__data_);
            *(std::string *)((char *)v236 + 8) = v247;
            *(_QWORD *)&v236[0] = off_1E69A20A0;
            memset(&v247, 0, sizeof(v247));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__B, (uint64_t)v236);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v216, (uint64_t)__B);
          }
          v70 = *(std::__shared_weak_count **)(a4 + 8);
          v238[0] = *(_QWORD *)a4;
          v238[1] = (uint64_t)v70;
          if (v70)
          {
            v71 = (unint64_t *)&v70->__shared_owners_;
            do
              v72 = __ldxr(v71);
            while (__stxr(v72 + 1, v71));
          }
          v23 = AMCP::DAL::PCM_Operation_Context::convert_audio_format((AudioConverterRef *)v11, a2, v224, v238, v226, v9, v8);
          v12 = v73;
          if (v70)
          {
            v74 = (unint64_t *)&v70->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
LABEL_91:
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
        }
LABEL_164:
        v227 = 0;
LABEL_222:
        ++v24;
        v14 = *(char **)(v11 + 168);
        v13 = *(char **)(v11 + 176);
        if (v24 < (v13 - v14) >> 2)
          continue;
        if ((v227 & 1) != 0)
        {
LABEL_224:
          if (*(double *)(v11 + 88) != *(double *)(v11 + 128))
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_format_equivalent_besides_sample_rate);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__B, "com.apple.coreaudio", "AMCP");
            v201 = **(NSObject ***)__B;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__B);
            if (os_log_type_enabled(v201, OS_LOG_TYPE_ERROR))
            {
              v202 = pthread_self();
              v203 = pthread_mach_thread_np(v202);
              *(_DWORD *)__B = 67109890;
              *(_DWORD *)&__B[4] = v203;
              *(_WORD *)&__B[8] = 2080;
              *(_QWORD *)&__B[10] = "PCM_Operation_Context.cpp";
              *(_WORD *)&__B[18] = 1024;
              *(_DWORD *)&__B[20] = 318;
              *(_WORD *)&__B[24] = 2080;
              *(_QWORD *)&__B[26] = "not (m_source_format.mSampleRate == m_dest_format.mSampleRate)";
              _os_log_error_impl(&dword_1B57BA000, v201, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s direct copies should never have different sample rates", __B, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v234);
            v204 = __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"direct copies should never have different sample rates", (uint64_t)&v232);
            std::logic_error::logic_error(&v230, &v232);
            v230.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
            std::logic_error::logic_error(&v248, &v230);
            v250 = 0;
            v251 = 0;
            v252 = 0;
            v253 = -1;
            v248.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
            v249 = &unk_1E69A1230;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__B, (uint64_t)&v248);
            *(_QWORD *)&__B[32] = "Sample_Time_Range AMCP::DAL::PCM_Operation_Context::apply(const Sample_Group<float> &,"
                                  " const Sample_Time_Range &, Container, Sample_Time_Range, const DAL_Settings &) const";
            v262 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
            v263 = 318;
            applesauce::backtrace::snapshot_N<64>::snapshot_N(&v247.__r_.__value_.__l.__data_);
            *(std::string *)((char *)v236 + 8) = v247;
            *(_QWORD *)&v236[0] = off_1E69A20A0;
            memset(&v247, 0, sizeof(v247));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__B, (uint64_t)v236);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v204, (uint64_t)__B);
          }
          v187 = *(AMCP::DAL::PCM_Data_Handler **)a4;
          v18 = *(std::__shared_weak_count **)(a4 + 8);
          if (v18)
          {
            v188 = (unint64_t *)&v18->__shared_owners_;
            do
              v189 = __ldxr(v188);
            while (__stxr(v189 + 1, v188));
          }
          AMCP::DAL::PCM_Operation_Context::copy_directly_to_destination(a2, v187, v9, v8);
          if (v18)
          {
            v190 = (unint64_t *)&v18->__shared_owners_;
            do
              v191 = __ldaxr(v190);
            while (__stlxr(v191 - 1, v190));
            v9 = v23;
            if (!v191)
            {
LABEL_232:
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
              return v9;
            }
          }
        }
        return v23;
      case 3:
        v38 = *(_QWORD *)(v11 + 40);
        if (v38)
        {
          v39 = a3[1] - *a3;
          if ((*(_BYTE *)(v38 + 12) & 0x20) != 0)
          {
            v62 = *(unsigned int **)(v38 + 40);
            v63 = *(_QWORD *)(v38 + 48) - (_QWORD)v62;
            *(float *)__B = (float)(unint64_t)(v63 >> 2);
            v64 = (const float **)(*a2 + 16 * *v62);
            v65 = vcvtmd_s64_f64(v39);
            if ((unint64_t)v63 >= 5)
            {
              v66 = 1;
              do
              {
                vDSP_vadd(*(const float **)(*a2 + 16 * v62[v66++]), 1, *v64, 1, (float *)*v64, 1, v65);
                v62 = *(unsigned int **)(v38 + 40);
              }
              while (v66 < (uint64_t)(*(_QWORD *)(v38 + 48) - (_QWORD)v62) >> 2);
            }
            vDSP_vsdiv(*v64, 1, (const float *)__B, (float *)*v64, 1, v65);
            v67 = *(_QWORD *)(v38 + 40);
            if ((unint64_t)(*(_QWORD *)(v38 + 48) - v67) >= 5)
            {
              v68 = 4 * v65;
              v69 = 1;
              do
              {
                is_format_equivalent_besides_sample_rate = (uint64_t)memcpy(*(void **)(*a2+ 16* *(unsigned int *)(v67 + 4 * v69++)), *v64, v68);
                v67 = *(_QWORD *)(v38 + 40);
              }
              while (v69 < (*(_QWORD *)(v38 + 48) - v67) >> 2);
            }
          }
          else
          {
            v40 = *(unsigned int *)(v38 + 28);
            v41 = v40 * vcvtmd_s64_f64(v39);
            if (v41 >= 1)
            {
              v42 = 0;
              v43 = *(unsigned int **)(v38 + 40);
              v44 = *(_QWORD *)(v38 + 48) - (_QWORD)v43;
              v45 = v44 >> 2;
              v46 = (float)(unint64_t)(v44 >> 2);
              v49 = *v43;
              v47 = v43 + 1;
              v48 = v49;
              v50 = *(_QWORD *)*a2;
              if ((unint64_t)(v44 >> 2) <= 2)
                v45 = 2;
              v51 = v45 - 1;
              do
              {
                v52 = v42 + v48;
                v53 = *(float *)(v50 + 4 * (v42 + v48));
                if ((unint64_t)v44 < 5)
                {
                  *(float *)(v50 + 4 * v52) = v53 / v46;
                }
                else
                {
                  v54 = v47;
                  v55 = v51;
                  do
                  {
                    v56 = *v54++;
                    v53 = *(float *)(v50 + 4 * (v42 + v56)) + v53;
                    *(float *)(v50 + 4 * v52) = v53;
                    --v55;
                  }
                  while (v55);
                  *(float *)(v50 + 4 * v52) = v53 / v46;
                  v57 = v47;
                  is_format_equivalent_besides_sample_rate = v51;
                  do
                  {
                    v58 = *v57++;
                    *(_DWORD *)(v50 + 4 * (v42 + v58)) = *(_DWORD *)(v50 + 4 * v52);
                    --is_format_equivalent_besides_sample_rate;
                  }
                  while (is_format_equivalent_besides_sample_rate);
                }
                v42 += v40;
              }
              while (v42 < v41);
            }
          }
        }
        goto LABEL_222;
      default:
        goto LABEL_222;
    }
  }
}

void sub_1B5C104EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  caulk::rt_safe_memory_resource *v16;
  va_list va;

  va_start(va, a15);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v16 = (caulk::rt_safe_memory_resource *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v16;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](v16, (uint64_t)(STACK[0x230] - (_QWORD)v16) >> 4);
  }
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *AMCP::DAL::PCM_Operation_Context::copy_directly_to_destination(uint64_t *a1, AMCP::DAL::PCM_Data_Handler *a2, double a3, double a4)
{
  AMCP::Log::Scope_Registry *result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  NSObject *v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  void *exception;
  __int128 v20;
  uint64_t v21;
  uint64_t (**v22)();
  __int128 v23;
  uint64_t v24;
  std::string v25;
  std::logic_error v26;
  std::logic_error v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  AMCP::Log::Scope_Registry *v34;
  AMCP::Log::Scope_Registry *v35;
  uint64_t v36;
  uint8_t buf[8];
  __int16 v38;
  char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  _BYTE v43[14];
  const char *v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>((uint64_t)a2);
  AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)&v34, a2, a3, a4);
  result = v34;
  v9 = (char *)v35;
  v11 = *a1;
  v10 = a1[1];
  if (v35 - v34 != v10 - *a1)
  {
    AMCP::Log::Scope_Registry::get(v34);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v16 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = pthread_self();
      v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v18;
      v38 = 2080;
      v39 = "PCM_Operation_Context.cpp";
      v40 = 1024;
      v41 = 430;
      v42 = 2080;
      *(_QWORD *)v43 = "not (dest_data.size() == samples.size())";
      _os_log_error_impl(&dword_1B57BA000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s source and dest layout must be the same!", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v33);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"source and dest layout must be the same!", (uint64_t)&v25);
    std::logic_error::logic_error(&v26, &v25);
    v26.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v27, &v26);
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = -1;
    v27.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v28 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
    *(_QWORD *)&v43[6] = "void AMCP::DAL::PCM_Operation_Context::copy_directly_to_destination(const Sample_Group<float> &"
                         ", Container, Sample_Time_Range) const";
    v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    v45 = 430;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v20);
    v22 = off_1E69A20A0;
    v23 = v20;
    v24 = v21;
    v20 = 0uLL;
    v21 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v22);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v12 = v11 == v10 || v34 == v35;
  if (!v12)
  {
    v13 = v11 + 16;
    v14 = (char *)v34 + 16;
    do
    {
      v15 = *((_QWORD *)v14 - 1);
      if (v15 >= *(_QWORD *)(v13 - 8))
        v15 = *(_QWORD *)(v13 - 8);
      if (v15)
      {
        memcpy(*((void **)v14 - 2), *(const void **)(v13 - 16), 4 * v15);
        v10 = a1[1];
        v9 = (char *)v35;
      }
      if (v13 == v10)
        break;
      v13 += 16;
      v12 = v14 == v9;
      v14 += 16;
    }
    while (!v12);
    result = v34;
  }
  if (result)
  {
    v35 = result;
    return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](result, (v36 - (uint64_t)result) >> 4);
  }
  return result;
}

void sub_1B5C10D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  caulk::rt_safe_memory_resource *v30;

  v30 = *(caulk::rt_safe_memory_resource **)(v28 - 152);
  if (v30)
  {
    *(_QWORD *)(v28 - 144) = v30;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](v30, (uint64_t)(*(_QWORD *)(v28 - 136) - (_QWORD)v30) >> 4);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::DAL::is_format_equivalent_besides_sample_rate(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
      && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 32) == (unint64_t)*(unsigned int *)(a2 + 32);
}

double AMCP::DAL::PCM_Operation_Context::convert_audio_format(AudioConverterRef *a1, uint64_t *a2, double *a3, uint64_t *a4, double a5, double a6, double a7)
{
  double *v14;
  double v15;
  uint64_t v16;
  AMCP::Log::Scope_Registry *v17;
  NSObject *v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  void *exception;
  NSObject *v23;
  _opaque_pthread_t *v24;
  mach_port_t v25;
  void *v26;
  NSObject *v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  void *v30;
  __int128 v31;
  uint64_t v32;
  _BYTE v33[24];
  uint64_t v34;
  std::string v35;
  std::logic_error v36;
  char v37;
  std::logic_error v38;
  uint64_t v39;
  std::logic_error v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  std::string outOutputData;
  const AudioBufferList *v47;
  __int128 v48;
  uint64_t v49;
  uint8_t buf[40];
  const char *v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (!a1[6])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v20 = pthread_self();
      v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v21;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "PCM_Operation_Context.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 372;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not (m_audio_converter)";
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&outOutputData);
    std::logic_error::logic_error(&v38, &outOutputData);
    v38.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v40, &v38);
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = -1;
    v40.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v41 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v40);
    *(_QWORD *)&buf[32] = "Sample_Time_Range AMCP::DAL::PCM_Operation_Context::convert_audio_format(const Sample_Group<fl"
                          "oat> &, Sample_Time, const CA::StreamDescription &, Container, Sample_Time_Range) const";
    v51 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    v52 = 372;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v33);
    v48 = *(_OWORD *)v33;
    v47 = (const AudioBufferList *)off_1E69A20A0;
    v49 = *(_QWORD *)&v33[16];
    memset(v33, 0, sizeof(v33));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v47);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v14 = (double *)*a4;
  if (*a4)
    v15 = v14[1];
  else
    v15 = 0.0;
  if (*a3 != v15)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v23 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = pthread_self();
      v25 = pthread_mach_thread_np(v24);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v25;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "PCM_Operation_Context.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 373;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not (source_format.mSampleRate == dest_container.get_format().mSampleRate)";
      _os_log_error_impl(&dword_1B57BA000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
    v26 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&outOutputData);
    std::logic_error::logic_error(&v38, &outOutputData);
    v38.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v40, &v38);
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = -1;
    v40.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v41 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v40);
    *(_QWORD *)&buf[32] = "Sample_Time_Range AMCP::DAL::PCM_Operation_Context::convert_audio_format(const Sample_Group<fl"
                          "oat> &, Sample_Time, const CA::StreamDescription &, Container, Sample_Time_Range) const";
    v51 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    v52 = 373;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v33);
    v48 = *(_OWORD *)v33;
    v47 = (const AudioBufferList *)off_1E69A20A0;
    v49 = *(_QWORD *)&v33[16];
    memset(v33, 0, sizeof(v33));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v47);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v26, (uint64_t)buf);
  }
  AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(*a4);
  AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)&v38, (AMCP::DAL::PCM_Data_Handler *)v14, a6, a7);
  AMCP::DAL::create_abl((caulk::rt_safe_memory_resource **)&v47, a2, (uint64_t)a3);
  v16 = *a4;
  if (*a4)
  {
    *(_OWORD *)buf = *(_OWORD *)(v16 + 8);
    *(_OWORD *)&buf[16] = *(_OWORD *)(v16 + 24);
    *(_QWORD *)&buf[32] = *(_QWORD *)(v16 + 40);
  }
  else
  {
    memset(buf, 0, sizeof(buf));
  }
  AMCP::DAL::create_abl((caulk::rt_safe_memory_resource **)&outOutputData, (uint64_t *)&v38, (uint64_t)buf);
  v17 = (AMCP::Log::Scope_Registry *)AudioConverterConvertComplexBuffer(a1[6], vcvtmd_s64_f64(a5), v47, (AudioBufferList *)outOutputData.__r_.__value_.__l.__data_);
  if ((_DWORD)v17)
  {
    AMCP::Log::Scope_Registry::get(v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v27 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      v28 = pthread_self();
      v29 = pthread_mach_thread_np(v28);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v29;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "PCM_Operation_Context.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 381;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not (the_error == noErr)";
      _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_Operation_Context::convert_audio_format: AudioConverterConvertComplexBuffer failed", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v37);
    v30 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"PCM_Operation_Context::convert_audio_format: AudioConverterConvertComplexBuffer failed", (uint64_t)&v35);
    std::logic_error::logic_error(&v36, &v35);
    v36.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v40, &v36);
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = -1;
    v40.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v41 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v40);
    *(_QWORD *)&buf[32] = "Sample_Time_Range AMCP::DAL::PCM_Operation_Context::convert_audio_format(const Sample_Group<fl"
                          "oat> &, Sample_Time, const CA::StreamDescription &, Container, Sample_Time_Range) const";
    v51 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    v52 = 381;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    *(_QWORD *)v33 = off_1E69A20A0;
    *(_OWORD *)&v33[8] = v31;
    v34 = v32;
    v31 = 0uLL;
    v32 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v33);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v30, (uint64_t)buf);
  }
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)&outOutputData);
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v47);
  if (v38.__vftable)
  {
    v38.__imp_.__imp_ = (const char *)v38.__vftable;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v38.__vftable, (int64_t)(v39 - (unint64_t)v38.__vftable) >> 4);
  }
  return a6;
}

void sub_1B5C114C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,caulk::rt_safe_memory_resource *a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)&a39);
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)(v44 - 216));
  if (a29)
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](a29, (a31 - (uint64_t)a29) >> 4);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::Device::~Device(AMCP::IO_Core::Device *this)
{
  AMCP::IO_Core::Node::~Node(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::IO_Core::Device::get_class_id(AMCP::IO_Core::Device *this)
{
  return 1684371054;
}

uint64_t AMCP::IO_Core::Device_Node_State::for_each_stream_connection(uint64_t result, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *i;
  uint64_t v8;
  _QWORD v9[2];

  v3 = 0;
  v4 = 0;
  v9[1] = *MEMORY[0x1E0C80C00];
  v9[0] = 1;
  v5 = result + 8;
  do
  {
    v6 = v3;
    for (i = *(_QWORD **)(v5 + 40 * *((unsigned int *)v9 + v4) + 16); i; i = (_QWORD *)*i)
    {
      v8 = *(_QWORD *)(a2 + 24);
      if (!v8)
        std::__throw_bad_function_call[abi:ne180100]();
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 48))(v8, i + 7);
    }
    v3 = 1;
    v4 = 1;
  }
  while ((v6 & 1) == 0);
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6998238;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6998238;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;

  v2 = *(_QWORD *)(a2 + 208);
  if (v2)
  {
    if (!*(_QWORD *)(a2 + 272))
    {
      v4 = operator new(0x28uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = &off_1E6995E78;
      *(_QWORD *)&v8 = AMCP::DAL::File::File((AMCP::DAL::DALSupport *)(v4 + 3), *(_DWORD *)(a2 + 160), v2);
      *((_QWORD *)&v8 + 1) = v4;
      std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a2 + 272, &v8);
      v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
      if (*((_QWORD *)&v8 + 1))
      {
        v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void sub_1B5C11960(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::__shared_weak_count *v16;
  void *v18;

  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v18);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core17Device_Node_State14prepare_deviceEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69982C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69982C8;
  a2[1] = v2;
  return result;
}

AMCP::DAL::DAL_Time *std::__function::__func<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::operator()(AMCP::DAL::DAL_Time *result, uint64_t a2)
{
  _QWORD *v3;
  AMCP::DAL::DAL_Time *v4;
  unint64_t host_time;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (*(_QWORD *)(a2 + 208))
  {
    v3 = (_QWORD *)*((_QWORD *)result + 1);
    v4 = (AMCP::DAL::DAL_Time *)(a2 + 224);
    result = (AMCP::DAL::DAL_Time *)(v3 + 10);
    if (*(_BYTE *)(a2 + 264))
    {
      host_time = AMCP::DAL::DAL_Time::get_host_time(result);
      result = (AMCP::DAL::DAL_Time *)AMCP::DAL::DAL_Time::get_host_time(v4);
      if (host_time <= (unint64_t)result)
        return result;
      if (*(_BYTE *)(a2 + 264))
      {
        *(_DWORD *)(a2 + 224) = *((_DWORD *)v3 + 20);
        *(_QWORD *)(a2 + 232) = v3[11];
        v6 = v3[13];
        *(_QWORD *)(a2 + 240) = v3[12];
        return (AMCP::DAL::DAL_Time *)std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a2 + 248), v6, v3[14]);
      }
      result = (AMCP::DAL::DAL_Time *)(v3 + 10);
    }
    v7 = *(_OWORD *)result;
    *((_QWORD *)v4 + 2) = *((_QWORD *)result + 2);
    *(_OWORD *)v4 = v7;
    v8 = v3[14];
    *(_QWORD *)(a2 + 248) = v3[13];
    *(_QWORD *)(a2 + 256) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    *(_BYTE *)(a2 + 264) = 1;
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core17Device_Node_State37set_cycle_meta_data_for_audio_captureERKNS_5Graph18IO_Proc_Cycle_InfoEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6998348;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6998348;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::operator()(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<AMCP::DAL::File>::reset[abi:ne180100]((_QWORD *)(a2 + 272));
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core17Device_Node_State14end_processingEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69983C8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69983C8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69983C8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E69983C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::operator()(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21[6];

  v21[5] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a2 + 192);
  v8 = *(std::__shared_weak_count **)(a2 + 200);
  v18 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v7 + 56))(&v19);
  if (v19)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v19 + 56))(v21, v19, &v19);
  }
  else
  {
    v21[0] = 0;
    v21[4] = 0;
  }
  v11 = v20;
  if (v20)
  {
    v12 = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v4 + 384))(v4, *(unsigned int *)(a2 + 48), *(unsigned int *)(a2 + 40), *(unsigned int *)(v21[0] + 12), *(_QWORD *)(v21[0] + 16));
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100](v21);
  if (v3)
  {
    v16 = (unint64_t *)&v3->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B5C11EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core17Device_Node_State16register_buffersEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6998448;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6998448;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6998448;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6998448;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::operator()(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21[6];

  v21[5] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a2 + 192);
  v8 = *(std::__shared_weak_count **)(a2 + 200);
  v18 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v7 + 56))(&v19);
  if (v19)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v19 + 56))(v21, v19, &v19);
  }
  else
  {
    v21[0] = 0;
    v21[4] = 0;
  }
  v11 = v20;
  if (v20)
  {
    v12 = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v4 + 392))(v4, *(unsigned int *)(a2 + 48), *(unsigned int *)(a2 + 40), *(unsigned int *)(v21[0] + 12), *(_QWORD *)(v21[0] + 16));
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100](v21);
  if (v3)
  {
    v16 = (unint64_t *)&v3->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B5C12214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core17Device_Node_State18unregister_buffersEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::target_type()
{
}

void std::__shared_ptr_pointer<AMCP::DAL::Multi_Reader_Ring_Buffer  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Multi_Reader_Ring_Buffer  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Multi_Reader_Ring_Buffer  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN4AMCP3DAL24Multi_Reader_Ring_BufferEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void CADeprecated::CAMutex::~CAMutex(CADeprecated::CAMutex *this)
{
  *(_QWORD *)this = &off_1E69985F8;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 24));
}

{
  *(_QWORD *)this = &off_1E69985F8;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 24));
  JUMPOUT(0x1B5E50688);
}

BOOL CADeprecated::CAMutex::Lock(CADeprecated::CAMutex *this)
{
  _opaque_pthread_t *v2;
  _opaque_pthread_t *v3;
  int v4;
  int v5;
  int v7;
  _DWORD *exception;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = pthread_self();
  v3 = (_opaque_pthread_t *)atomic_load((unint64_t *)this + 2);
  v4 = pthread_equal(v2, v3);
  if (!v4)
  {
    v5 = pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
    if (v5)
    {
      v7 = v5;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v9 = 136315394;
        v10 = "CAMutex.cpp";
        v11 = 1024;
        v12 = 106;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  CAMutex::Lock: Could not lock the mutex", (uint8_t *)&v9, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = v7;
    }
    atomic_store((unint64_t)v2, (unint64_t *)this + 2);
  }
  return v4 == 0;
}

void CADeprecated::CAMutex::Unlock(CADeprecated::CAMutex *this)
{
  _opaque_pthread_t *v2;
  _opaque_pthread_t *v3;
  int v4;
  int v5;
  _DWORD *exception;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = pthread_self();
  v3 = (_opaque_pthread_t *)atomic_load((unint64_t *)this + 2);
  if (pthread_equal(v2, v3))
  {
    atomic_store(0, (unint64_t *)this + 2);
    v4 = pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 24));
    if (v4)
    {
      v5 = v4;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v7 = 136315394;
        v8 = "CAMutex.cpp";
        v9 = 1024;
        v10 = 152;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  CAMutex::Unlock: Could not unlock the mutex", (uint8_t *)&v7, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = v5;
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136315394;
    v8 = "CAMutex.cpp";
    v9 = 1024;
    v10 = 160;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  CAMutex::Unlock: A thread is attempting to unlock a Mutex it doesn't own", (uint8_t *)&v7, 0x12u);
  }
}

uint64_t CADeprecated::CAMutex::Try(CADeprecated::CAMutex *this, BOOL *a2)
{
  _opaque_pthread_t *v4;
  _opaque_pthread_t *v5;
  BOOL v6;
  int v7;
  uint64_t result;
  int v9;
  _DWORD *exception;
  _BYTE v11[5];
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  v4 = pthread_self();
  v5 = (_opaque_pthread_t *)atomic_load((unint64_t *)this + 2);
  if (pthread_equal(v4, v5))
  {
    v6 = 0;
  }
  else
  {
    v7 = pthread_mutex_trylock((pthread_mutex_t *)((char *)this + 24));
    if (v7 == 16)
    {
      v6 = 0;
      result = 0;
      goto LABEL_7;
    }
    if (v7)
    {
      v11[0] = HIBYTE(v7);
      v11[1] = BYTE2(v7);
      v11[2] = BYTE1(v7);
      v9 = v7;
      v11[3] = v7;
      v11[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        v13 = "CAMutex.cpp";
        v14 = 1024;
        v15 = 224;
        v16 = 1024;
        v17 = v9;
        v18 = 2080;
        v19 = v11;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  CAMutex::Try: call to pthread_mutex_trylock failed, Error: %d (%s)", buf, 0x22u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = v9;
    }
    atomic_store((unint64_t)v4, (unint64_t *)this + 2);
    v6 = 1;
  }
  result = 1;
LABEL_7:
  *a2 = v6;
  return result;
}

BOOL CADeprecated::CAMutex::IsFree(CADeprecated::CAMutex *this)
{
  unint64_t v1;

  v1 = atomic_load((unint64_t *)this + 2);
  return v1 == 0;
}

BOOL CADeprecated::CAMutex::IsOwnedByCurrentThread(CADeprecated::CAMutex *this)
{
  _opaque_pthread_t *v2;
  _opaque_pthread_t *v3;

  v2 = pthread_self();
  v3 = (_opaque_pthread_t *)atomic_load((unint64_t *)this + 2);
  return pthread_equal(v2, v3) != 0;
}

CADeprecated::CAMutex *CADeprecated::CAMutex::CAMutex(CADeprecated::CAMutex *this, const char *a2)
{
  int v3;
  int v5;
  _DWORD *exception;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E69985F8;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  v3 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 24), 0);
  if (v3)
  {
    v5 = v3;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v7 = 136315394;
      v8 = "CAMutex.cpp";
      v9 = 1024;
      v10 = 56;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  CAMutex::CAMutex: Could not init the mutex", (uint8_t *)&v7, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v5;
  }
  return this;
}

void HALS_OverloadMessage::perform(HALS_OverloadMessage *this)
{
  HALS_OverloadMessage *v1;
  HALS_ObjectMap *v2;
  uint64_t v3;
  HALS_Object *v4;
  HALS_ObjectMap *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unsigned int *v19;
  HALS_Object *v20;
  uint64_t v21;
  unsigned int i;
  CFIndex v23;
  const __CFArray *Size;
  std::string::size_type v25;
  std::string *p_p;
  std::string *v27;
  std::string::size_type v28;
  HALS_Object *v29;
  HALS_ObjectMap *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  uint64_t v37;
  const char *DeviceTransportName;
  size_t v39;
  int MasterDataSourceValue;
  const char *MasterDataSourceName;
  size_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int j;
  CFIndex v48;
  const __CFArray *v49;
  unsigned int k;
  CFIndex v51;
  const __CFArray *v52;
  const __CFArray *v53;
  unsigned int v54;
  _BOOL4 v56;
  unint64_t v57;
  const __CFArray *v58;
  std::string::size_type v59;
  std::string *v60;
  std::string *v61;
  std::string::size_type v62;
  HALS_Object *v63;
  HALS_ObjectMap *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  const char *v72;
  size_t v73;
  int v74;
  const char *v75;
  size_t v76;
  int v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  int v81;
  _BOOL4 v82;
  uint64_t v83;
  __int128 *v84;
  char *v85;
  std::string *v86;
  const char *v87;
  const char *v88;
  NSObject *v89;
  const char *v90;
  uint32_t v91;
  uint64_t v92;
  __int128 *v93;
  char *v94;
  std::string *v95;
  const char *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  HALS_ObjectMap *v101;
  HALS_OverloadMessage *v102;
  HALS_OverloadMessage *v103;
  char *v104;
  CFIndex v105;
  const __CFArray *v106;
  void *v107[2];
  char *v108;
  void (**v109)(OS::CF::Dictionary *__hidden);
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  std::string v114[2];
  std::string v115[2];
  uint64_t v116;
  void (**v117)(OS::CF::Dictionary *__hidden);
  CFDictionaryRef v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::string __p;
  std::string v122;
  char v123[8];
  __CFString *v124;
  unsigned int v125;
  CFDictionaryRef theDict;
  uint64_t v127;
  std::__shared_weak_count *v128;
  char v129[8];
  __CFString *v130;
  char v131[8];
  CFDictionaryRef v132;
  char v133[8];
  const __CFArray *v134;
  int v135;
  _BYTE v136[12];
  __int16 v137;
  int v138;
  __int16 v139;
  uint64_t v140;
  __int16 v141;
  __int128 *v142;
  __int16 v143;
  char *v144;
  _BYTE v145[10];
  __int16 v146;
  const char *v147;
  __int16 v148;
  const char *v149;
  uint64_t v150;

  v1 = this;
  v150 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v107 = 0u;
  v108 = 0;
  v109 = &off_1E69A0DE0;
  v110 = 0;
  v111 = 0u;
  v112 = 0u;
  v113 = 0u;
  memset(v114, 0, sizeof(v114));
  memset(v115, 0, sizeof(v115));
  v116 = 0;
  v2 = (HALS_ObjectMap *)*((unsigned int *)this + 1);
  v3 = HALS_ObjectMap::CopyObjectByObjectID(v2);
  v5 = (HALS_ObjectMap *)v3;
  if (v3)
  {
    strcpy(v136, "sriabolg");
    v136[9] = 0;
    *(_WORD *)&v136[10] = 0;
    v6 = (*(uint64_t (**)(uint64_t, HALS_ObjectMap *, _BYTE *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v3 + 104))(v3, v2, v136, 0, 0, 0);
    v7 = v6;
    v107[1] = v107[0];
    if ((_DWORD)v6)
    {
      if (v6 >= 8)
      {
        v8 = v6 >> 3;
        v9 = v108 - (char *)v107[0];
        if (v8 <= (v108 - (char *)v107[0]) >> 3)
        {
          bzero(v107[0], 8 * v8);
          v107[1] = (char *)v107[0] + 8 * v8;
        }
        else
        {
          v10 = v9 >> 2;
          if (v9 >> 2 <= v8)
            v10 = v6 >> 3;
          if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v10;
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v11);
          v102 = v1;
          v13 = (char *)v107[0];
          v14 = (char *)v107[1];
          v16 = &v12[8 * v15];
          bzero(v12, 8 * v8);
          v17 = &v12[8 * v8];
          while (v14 != v13)
          {
            v18 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v12 - 1) = v18;
            v12 -= 8;
          }
          v107[0] = v12;
          v107[1] = v17;
          v108 = v16;
          v1 = v102;
          if (v13)
            operator delete(v13);
        }
      }
      LODWORD(v122.__r_.__value_.__l.__data_) = 0;
      (*(void (**)(HALS_ObjectMap *, HALS_ObjectMap *, _BYTE *, uint64_t, std::string *, void *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v5 + 112))(v5, v2, v136, v7, &v122, v107[0], 0, 0, 0);
    }
  }
  HALS_ObjectMap::ReleaseObject(v5, v4);
  v19 = (unsigned int *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v1 + 1));
  if (!v19)
    goto LABEL_120;
  v21 = v19[4];
  strcpy(v136, "mocabolg");
  v136[9] = 0;
  *(_WORD *)&v136[10] = 0;
  v122.__r_.__value_.__r.__words[0] = 0;
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  v101 = (HALS_ObjectMap *)v19;
  (*(void (**)(unsigned int *, uint64_t, _BYTE *, uint64_t, std::string *, std::string *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v19 + 112))(v19, v21, v136, 8, &__p, &v122, 0, 0, 0);
  v117 = &off_1E69A0DE0;
  v118 = (CFDictionaryRef)v122.__r_.__value_.__r.__words[0];
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v133, (CFDictionaryRef)v122.__r_.__value_.__l.__data_, CFSTR("grid-in"));
  v103 = v1;
  if (!v134)
    goto LABEL_60;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)v136, "[a-fA-F0-9:]{17}|[a-fA-F0-9]{12}|[a-fA-F0-9.]{5}|[a-fA-F0-9-]{4}");
  for (i = 0; (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v134) > i; i = v23 + 1)
  {
    v23 = i;
    Size = OS::CF::ArrayBase<__CFArray const*>::GetSize(v134);
    OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v131, (uint64_t)v133, v23);
    if (!v132)
      goto LABEL_51;
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v129, v132, CFSTR("uid"));
    OS::CF::String::AsStdString(&__p, (uint64_t)v129);
    memset(&v122, 0, sizeof(v122));
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v25 = __p.__r_.__value_.__l.__size_;
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v122, (char *)p_p, (char *)p_p + v25, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)v136, "");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v122;
    else
      v27 = (std::string *)v122.__r_.__value_.__r.__words[0];
    if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(v122.__r_.__value_.__r.__words[2]);
    else
      v28 = v122.__r_.__value_.__l.__size_;
    std::string::append((std::string *)&v111, (const std::string::value_type *)v27, v28);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v122.__r_.__value_.__l.__data_);
    v127 = 0;
    v128 = 0;
    HALS_System::GetInstance(&v122, 0, &v127);
    v30 = HALS_System::CopyDeviceByUID((HALS_System *)v122.__r_.__value_.__l.__data_, v130, 0);
    v31 = (std::__shared_weak_count *)v122.__r_.__value_.__l.__size_;
    if (v122.__r_.__value_.__l.__size_)
    {
      v32 = (unint64_t *)(v122.__r_.__value_.__l.__size_ + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = v128;
    if (v128)
    {
      p_shared_owners = (unint64_t *)&v128->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        if (!v30)
          goto LABEL_48;
LABEL_47:
        v37 = *((unsigned int *)v30 + 4);
        v122.__r_.__value_.__r.__words[0] = 0x676C6F627472616ELL;
        LODWORD(v122.__r_.__value_.__r.__words[1]) = 0;
        LODWORD(__p.__r_.__value_.__l.__data_) = 4;
        v125 = 0;
        (*(void (**)(HALS_ObjectMap *, uint64_t, std::string *, uint64_t, std::string *, unsigned int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v30 + 112))(v30, v37, &v122, 4, &__p, &v125, 0, 0, 0);
        DeviceTransportName = GetDeviceTransportName(v125);
        v39 = strlen(DeviceTransportName);
        std::string::append(v114, DeviceTransportName, v39);
        MasterDataSourceValue = GetMasterDataSourceValue(v30, 1);
        MasterDataSourceName = GetMasterDataSourceName(MasterDataSourceValue);
        v42 = strlen(MasterDataSourceName);
        std::string::append(v115, MasterDataSourceName, v42);
        goto LABEL_48;
      }
    }
    if (v30)
      goto LABEL_47;
LABEL_48:
    if ((const __CFArray *)((char *)Size - 1) != (const __CFArray *)v23)
    {
      std::string::append((std::string *)&v111, ", ", 2uLL);
      std::string::append(v114, ", ", 2uLL);
      std::string::append(v115, ", ", 2uLL);
    }
    HALS_ObjectMap::ReleaseObject(v30, v29);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v129);
LABEL_51:
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v131);
  }
  v43 = *(std::__shared_weak_count **)v145;
  v1 = v103;
  if (*(_QWORD *)v145)
  {
    v44 = (unint64_t *)(*(_QWORD *)v145 + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  std::locale::~locale((std::locale *)v136);
LABEL_60:
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v133);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>(v46, v118, CFSTR("grid-out"));
  if (v134)
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)v136, "[a-fA-F0-9:]{17}|[a-fA-F0-9]{12}|[a-fA-F0-9.]{5}|[a-fA-F0-9-]{4}");
    for (j = 0; (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v134) > j; j = v105 + 1)
    {
      v48 = j;
      v49 = OS::CF::ArrayBase<__CFArray const*>::GetSize(v134);
      v105 = v48;
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v131, (uint64_t)v133, v48);
      if (v132)
      {
        v104 = (char *)v49 - 1;
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v129, v132, CFSTR("stream groups"));
        for (k = 0;
              (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize((const __CFArray *)v130) > k;
              k = (_DWORD)v106 + 1)
        {
          v51 = k;
          v52 = OS::CF::ArrayBase<__CFArray const*>::GetSize((const __CFArray *)v130);
          v106 = (const __CFArray *)v51;
          OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Array>((const __CFArray *)&v127, (uint64_t)v129, v51);
          v53 = (const __CFArray *)v128;
          if (v128)
          {
            v54 = 0;
            v56 = v104 != (char *)v105 || (const __CFArray *)((char *)v52 - 1) != v106;
            while ((unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v53) > v54)
            {
              v57 = v54;
              v58 = OS::CF::ArrayBase<__CFArray const*>::GetSize((const __CFArray *)v128);
              OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)&v125, (uint64_t)&v127, v54);
              if (theDict)
              {
                OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v123, theDict, CFSTR("uid"));
                OS::CF::String::AsStdString(&__p, (uint64_t)v123);
                memset(&v122, 0, sizeof(v122));
                v59 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v60 = &__p;
                else
                  v60 = (std::string *)__p.__r_.__value_.__r.__words[0];
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v59 = __p.__r_.__value_.__l.__size_;
                std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v122, (char *)v60, (char *)v60 + v59, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)v136, "");
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v61 = &v122;
                else
                  v61 = (std::string *)v122.__r_.__value_.__r.__words[0];
                if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v62 = HIBYTE(v122.__r_.__value_.__r.__words[2]);
                else
                  v62 = v122.__r_.__value_.__l.__size_;
                std::string::append((std::string *)((char *)&v112 + 8), (const std::string::value_type *)v61, v62);
                if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v122.__r_.__value_.__l.__data_);
                v119 = 0;
                v120 = 0;
                HALS_System::GetInstance(&v122, 0, &v119);
                v64 = HALS_System::CopyDeviceByUID((HALS_System *)v122.__r_.__value_.__l.__data_, v124, 0);
                v65 = (std::__shared_weak_count *)v122.__r_.__value_.__l.__size_;
                if (v122.__r_.__value_.__l.__size_)
                {
                  v66 = (unint64_t *)(v122.__r_.__value_.__l.__size_ + 8);
                  do
                    v67 = __ldaxr(v66);
                  while (__stlxr(v67 - 1, v66));
                  if (!v67)
                  {
                    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                    std::__shared_weak_count::__release_weak(v65);
                  }
                }
                v68 = v120;
                if (!v120)
                  goto LABEL_99;
                v69 = (unint64_t *)&v120->__shared_owners_;
                do
                  v70 = __ldaxr(v69);
                while (__stlxr(v70 - 1, v69));
                if (!v70)
                {
                  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                  std::__shared_weak_count::__release_weak(v68);
                  if (v64)
                  {
LABEL_100:
                    v71 = *((unsigned int *)v64 + 4);
                    v122.__r_.__value_.__r.__words[0] = 0x676C6F627472616ELL;
                    LODWORD(v122.__r_.__value_.__r.__words[1]) = 0;
                    LODWORD(__p.__r_.__value_.__l.__data_) = 4;
                    v135 = 0;
                    (*(void (**)(HALS_ObjectMap *, uint64_t, std::string *, uint64_t, std::string *, int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v64 + 112))(v64, v71, &v122, 4, &__p, &v135, 0, 0, 0);
                    v72 = GetDeviceTransportName(v135);
                    v73 = strlen(v72);
                    std::string::append(&v114[1], v72, v73);
                    v74 = GetMasterDataSourceValue(v64, 0);
                    v75 = GetMasterDataSourceName(v74);
                    v76 = strlen(v75);
                    std::string::append(&v115[1], v75, v76);
                  }
                }
                else
                {
LABEL_99:
                  if (v64)
                    goto LABEL_100;
                }
                v77 = (const __CFArray *)((char *)v58 - 1) != (const __CFArray *)v57 || v56;
                if (v77 == 1)
                {
                  std::string::append((std::string *)((char *)&v112 + 8), ", ", 2uLL);
                  std::string::append(&v114[1], ", ", 2uLL);
                  std::string::append(&v115[1], ", ", 2uLL);
                }
                HALS_ObjectMap::ReleaseObject(v64, v63);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v123);
              }
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v125);
              v54 = v57 + 1;
              v53 = (const __CFArray *)v128;
              continue;
            }
          }
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v127);
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v129);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v131);
    }
    v78 = *(std::__shared_weak_count **)v145;
    v1 = v103;
    if (*(_QWORD *)v145)
    {
      v79 = (unint64_t *)(*(_QWORD *)v145 + 8);
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    std::locale::~locale((std::locale *)v136);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v133);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v117);
  v19 = (unsigned int *)v101;
LABEL_120:
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v19, v20);
  HALS_OverloadMessage::OverloadDictionary::AssembleDictionary((uint64_t)v107, (unsigned __int8 *)v1);
  OverloadReasonSet::getOverloadReasonList(&v122, &v116);
  v81 = *((unsigned __int8 *)v1 + 13);
  v82 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
  if (v81)
  {
    if (v82)
    {
      v83 = *((_QWORD *)v1 + 6);
      v84 = &v111;
      if (SBYTE7(v112) < 0)
        v84 = (__int128 *)v111;
      v85 = (char *)&v112 + 8;
      if (v113 < 0)
        v85 = (char *)*((_QWORD *)&v112 + 1);
      v86 = &v122;
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v86 = (std::string *)v122.__r_.__value_.__r.__words[0];
      v87 = "yes";
      if (*((_BYTE *)v1 + 12))
        v88 = "yes";
      else
        v88 = "no";
      if (!*((_BYTE *)v1 + 14))
        v87 = "no";
      *(_DWORD *)v136 = 136316930;
      *(_QWORD *)&v136[4] = "HALS_OverloadMessage.cpp";
      v137 = 1024;
      v138 = 172;
      v139 = 2048;
      v140 = v83;
      v141 = 2080;
      v142 = v84;
      v143 = 2080;
      v144 = v85;
      *(_WORD *)v145 = 2080;
      *(_QWORD *)&v145[2] = v86;
      v146 = 2080;
      v147 = v88;
      v148 = 2080;
      v149 = v87;
      v89 = MEMORY[0x1E0C81028];
      v90 = "%25s:%-5d  Audio IO Overload thread: %llx inputs: '%s' outputs: '%s' cause: '%s' prewarming: %s recovering: "
            "yes able-to-recover: %s";
      v91 = 78;
      goto LABEL_145;
    }
  }
  else if (v82)
  {
    v92 = *((_QWORD *)v1 + 6);
    v93 = &v111;
    if (SBYTE7(v112) < 0)
      v93 = (__int128 *)v111;
    v94 = (char *)&v112 + 8;
    if (v113 < 0)
      v94 = (char *)*((_QWORD *)&v112 + 1);
    v95 = &v122;
    if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v95 = (std::string *)v122.__r_.__value_.__r.__words[0];
    if (*((_BYTE *)v1 + 12))
      v96 = "yes";
    else
      v96 = "no";
    *(_DWORD *)v136 = 136316674;
    *(_QWORD *)&v136[4] = "HALS_OverloadMessage.cpp";
    v137 = 1024;
    v138 = 168;
    v139 = 2048;
    v140 = v92;
    v141 = 2080;
    v142 = v93;
    v143 = 2080;
    v144 = v94;
    *(_WORD *)v145 = 2080;
    *(_QWORD *)&v145[2] = v95;
    v146 = 2080;
    v147 = v96;
    v89 = MEMORY[0x1E0C81028];
    v90 = "%25s:%-5d  Audio IO Overload thread: %llx inputs: '%s' outputs: '%s' cause: '%s' prewarming: %s recovering: no";
    v91 = 68;
LABEL_145:
    _os_log_impl(&dword_1B57BA000, v89, OS_LOG_TYPE_DEFAULT, v90, v136, v91);
  }
  v97 = v110;
  v99 = (uint64_t *)v107[0];
  v98 = (uint64_t *)v107[1];
  if (v107[1] == v107[0])
  {
    if (AudioStatisticsLibraryLoader(void)::once != -1)
      dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_12731);
    if (AudioStatisticsLibraryLoader(void)::libSym)
      AudioStatisticsLibraryLoader(void)::libSym(v97, 7, 6);
  }
  else
  {
    do
    {
      v100 = *v99;
      if (AudioStatisticsLibraryLoader(void)::once != -1)
        dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_12731);
      if (AudioStatisticsLibraryLoader(void)::libSym)
        AudioStatisticsLibraryLoader(void)::libSym(v100, v97, 7, 6);
      ++v99;
    }
    while (v99 != v98);
  }
  kdebug_trace();
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v122.__r_.__value_.__l.__data_);
  HALS_OverloadMessage::OverloadDictionary::~OverloadDictionary(v107);
}

void sub_1B5C13614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, HALS_ObjectMap *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,uint64_t a56,char a57,uint64_t a58,char a59,uint64_t a60,char a61)
{
  uint64_t v61;
  HALS_Object *v63;

  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a61);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v61 - 248));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v61 - 168);
  std::locale::~locale((std::locale *)(v61 - 208));
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v61 - 232));
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a42);
  HALS_ObjectMap::ReleaseObject(a11, v63);
  HALS_OverloadMessage::OverloadDictionary::~OverloadDictionary(&a17);
  _Unwind_Resume(a1);
}

void sub_1B5C137C0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5C137CCLL);
  JUMPOUT(0x1B5C137D4);
}

uint64_t HALS_OverloadMessage::OverloadDictionary::AssembleDictionary(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  pid_t v5;
  AMCP::Log::Scope_Registry *v6;
  unsigned int v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string::size_type v27;
  uint64_t v28;
  std::string::size_type v29;
  std::string::size_type v30;
  uint64_t v31;
  std::string::size_type *v32;
  std::string::size_type v33;
  std::string::size_type v35;
  std::string::size_type v36;
  uint64_t v37;
  uint64_t v38;
  std::string::size_type v39;
  uint64_t v40;
  uint64_t v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  std::string::size_type v44;
  uint64_t v45;
  uint64_t v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  std::string::size_type v49;
  uint64_t v50;
  uint64_t v51;
  __int128 *v52;
  std::string::size_type v53;
  std::string::size_type v54;
  std::string::size_type v55;
  uint64_t v56;
  const __CFString *v57;
  std::string::size_type v58;
  std::string::size_type v59;
  AMCP::Log::Scope_Registry *v60;
  std::__shared_weak_count *v61;
  NSObject *v62;
  unint64_t *v63;
  unint64_t v64;
  _opaque_pthread_t *v65;
  mach_port_t v66;
  AMCP::Log::Scope_Registry *v67;
  std::__shared_weak_count *v68;
  NSObject *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  AMCP::Log::Scope_Registry *v77;
  std::__shared_weak_count *v78;
  NSObject *v79;
  unint64_t *v80;
  unint64_t v81;
  _BOOL8 v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  NSObject *v87;
  unint64_t *v88;
  unint64_t v89;
  _opaque_pthread_t *v90;
  mach_port_t v91;
  id_t v92;
  AMCP::Log::Scope_Registry *v93;
  std::__shared_weak_count *v94;
  NSObject *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  NSObject *v101;
  unint64_t *v102;
  unint64_t v103;
  double v104;
  std::__shared_weak_count *v105;
  NSObject *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  NSObject *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  NSObject *v114;
  unint64_t *v115;
  unint64_t v116;
  int v117;
  const char *v118;
  const char *v119;
  const char *v120;
  const char *v121;
  const char *v122;
  const char *v123;
  const char *v124;
  const char *v125;
  double *v126;
  const char *v127;
  uint64_t v128;
  HALB_Mutex *v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  std::__shared_weak_count *size;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *p_shared_owners;
  unint64_t v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  BOOL v147;
  int v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  int v152;
  int v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  double v170;
  double v171;
  double v172;
  double v173;
  int v174;
  HALB_Mutex *v175;
  HALS_ObjectMap **v176;
  HALS_ObjectMap **v177;
  HALS_Object *v178;
  unsigned int **v179;
  HALS_ObjectMap *v180;
  HALS_Object *v181;
  HALS_Object *v182;
  HALS_ObjectMap *v183;
  char *v184;
  char *v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  char *v189;
  char *v190;
  void *v191;
  __int128 v192;
  char *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  char *v200;
  char *v201;
  char v202;
  int v203;
  const std::string::value_type *v204;
  std::string::size_type v205;
  const std::string::value_type *v206;
  std::string::size_type v207;
  const std::string::value_type *v208;
  std::string::size_type v209;
  std::string *v210;
  CFDictionaryRef Copy;
  _opaque_pthread_t *v213;
  mach_port_t v214;
  _opaque_pthread_t *v215;
  mach_port_t v216;
  _opaque_pthread_t *v217;
  mach_port_t v218;
  int *v219;
  char *v220;
  _opaque_pthread_t *v221;
  mach_port_t v222;
  _opaque_pthread_t *v223;
  mach_port_t v224;
  _opaque_pthread_t *v225;
  mach_port_t v226;
  _opaque_pthread_t *v227;
  mach_port_t v228;
  _opaque_pthread_t *v229;
  mach_port_t v230;
  _opaque_pthread_t *v231;
  mach_port_t v232;
  uint64_t v233;
  uint64_t v234;
  unsigned __int8 *v235;
  uint64_t v236;
  std::string::size_type v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  std::string::size_type v242;
  std::string::size_type v243;
  NSObject *oslog;
  uint64_t v245;
  unint64_t v246;
  std::string v247;
  char v248[8];
  uint64_t v249;
  _QWORD v250[2];
  _QWORD v251[2];
  char v252[8];
  uint64_t v253;
  _QWORD v254[2];
  _QWORD v255[2];
  _QWORD v256[2];
  _QWORD v257[2];
  _QWORD v258[2];
  _QWORD v259[2];
  _QWORD v260[2];
  _QWORD v261[2];
  _QWORD v262[2];
  _QWORD v263[2];
  _QWORD v264[2];
  uint64_t v265;
  std::__shared_weak_count *v266;
  _QWORD v267[2];
  _QWORD v268[2];
  _QWORD v269[2];
  _QWORD v270[2];
  _QWORD v271[2];
  _QWORD v272[2];
  _QWORD v273[2];
  _QWORD v274[2];
  char v275[8];
  uint64_t v276;
  _QWORD v277[2];
  _QWORD v278[2];
  _QWORD v279[2];
  _QWORD v280[2];
  _QWORD v281[2];
  _QWORD v282[2];
  _QWORD v283[2];
  _QWORD v284[2];
  char v285[8];
  uint64_t v286;
  char v287[8];
  uint64_t v288;
  _QWORD v289[2];
  char v290[8];
  uint64_t v291;
  char v292[8];
  uint64_t v293;
  char v294[8];
  uint64_t v295;
  char v296[8];
  uint64_t v297;
  char v298[8];
  uint64_t v299;
  char v300[8];
  uint64_t v301;
  char v302[8];
  uint64_t v303;
  _QWORD v304[2];
  char v305[8];
  uint64_t v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  uint64_t v311;
  std::string __p;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  uint64_t v324;
  std::__shared_weak_count *v325;
  std::string::size_type v326;
  std::__shared_weak_count *v327;
  char *v328;
  void *v329;
  unint64_t v330;
  std::string v331;
  __int128 v332;
  std::string __s;
  __int128 v334;
  __int128 v335;
  _BYTE *v336;
  std::string::size_type v337;
  _BYTE buf[64];
  _BYTE v339[32];
  const __CFString *v340;
  __int128 v341;
  uint64_t v342;
  const __CFString *v343;
  uint64_t v344;
  const __CFString *v345;
  uint64_t v346;
  const __CFString *v347;
  uint64_t v348;
  const __CFString *v349;
  uint64_t v350;
  const __CFString *v351;
  uint64_t v352;
  const __CFString *v353;
  uint64_t v354;
  const __CFString *v355;
  uint64_t v356;
  const __CFString *v357;
  uint64_t v358;
  const __CFString *v359;
  uint64_t v360;
  const __CFString *v361;
  uint64_t v362;
  const __CFString *v363;
  uint64_t v364;
  const __CFString *v365;
  uint64_t v366;
  const __CFString *v367;
  uint64_t v368;
  const __CFString *v369;
  uint64_t v370;
  const __CFString *v371;
  uint64_t v372;
  const __CFString *v373;
  uint64_t v374;
  const __CFString *v375;
  uint64_t v376;
  const __CFString *v377;
  uint64_t v378;
  const __CFString *v379;
  uint64_t v380;
  const __CFString *v381;
  uint64_t v382;
  const __CFString *v383;
  uint64_t v384;
  const __CFString *v385;
  uint64_t v386;
  const __CFString *v387;
  uint64_t v388;
  const __CFString *v389;
  uint64_t v390;
  const __CFString *v391;
  uint64_t v392;
  const __CFString *v393;
  uint64_t v394;
  const __CFString *v395;
  uint64_t v396;
  const __CFString *v397;
  uint64_t v398;
  const __CFString *v399;
  uint64_t v400;
  const __CFString *v401;
  uint64_t v402;
  const __CFString *v403;
  uint64_t v404;
  const __CFString *v405;
  uint64_t v406;
  const __CFString *v407;
  uint64_t v408;
  const __CFString *v409;
  uint64_t v410;
  const __CFString *v411;
  uint64_t v412;
  const __CFString *v413;
  uint64_t v414;
  uint64_t v415;

  v415 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  bzero((void *)v4, 0xE010uLL);
  v5 = getpid();
  v6 = (AMCP::Log::Scope_Registry *)proc_pidinfo(v5, 29, 0, (void *)v4, 57344);
  v7 = v6;
  v8 = (uint64_t *)(v4 + 57344);
  if ((int)v6 < 1)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v14 = *(std::__shared_weak_count **)&buf[8];
    v15 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v229 = pthread_self();
      v230 = pthread_mach_thread_np(v229);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v230;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_OverloadMessage.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 573;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v7;
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d proc_pidinfo failed to find vm_rtfault_records. ret: %d", buf, 0x1Eu);
    }
    *(_OWORD *)(v4 + 57344) = 0u;
  }
  else
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = *(std::__shared_weak_count **)&buf[8];
    v10 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v11 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v215 = pthread_self();
      v216 = pthread_mach_thread_np(v215);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v216;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_OverloadMessage.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 567;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v7;
      _os_log_debug_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d proc_pidinfo found %d vm_rtfault_records", buf, 0x1Eu);
    }
    if (v7 >= 0x400)
      v13 = 1024;
    else
      v13 = v7;
    *v8 = v4;
    *(_QWORD *)(v4 + 57352) = v13;
  }
  v18 = *((_OWORD *)a2 + 3);
  v309 = *((_OWORD *)a2 + 2);
  v310 = v18;
  v311 = *((_QWORD *)a2 + 8);
  v19 = *((_OWORD *)a2 + 1);
  v307 = *(_OWORD *)a2;
  v308 = v19;
  if ((char)a2[95] < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  else
    __p = *(std::string *)(a2 + 3);
  v20 = *((_OWORD *)a2 + 15);
  v321 = *((_OWORD *)a2 + 14);
  v322 = v20;
  v323 = *((_OWORD *)a2 + 16);
  v21 = *((_OWORD *)a2 + 11);
  v317 = *((_OWORD *)a2 + 10);
  v318 = v21;
  v22 = *((_OWORD *)a2 + 13);
  v319 = *((_OWORD *)a2 + 12);
  v320 = v22;
  v23 = *((_OWORD *)a2 + 7);
  v313 = *((_OWORD *)a2 + 6);
  v314 = v23;
  v24 = *((_OWORD *)a2 + 9);
  v315 = *((_OWORD *)a2 + 8);
  v316 = v24;
  v331.__r_.__value_.__r.__words[0] = 0;
  __s.__r_.__value_.__r.__words[0] = 0;
  v233 = v4;
  mach_get_times();
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = "HALS_OverloadMessage.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 603;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v310;
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = *((_QWORD *)&v310 + 1);
    *(_WORD *)&buf[38] = 2048;
    *(_QWORD *)&buf[40] = v311;
    *(_WORD *)&buf[48] = 2048;
    *(_QWORD *)&buf[50] = __s.__r_.__value_.__r.__words[0] - v331.__r_.__value_.__r.__words[0];
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALthreadID: %llX, start: %llu, wake: %llu, (continuous - absolute): %lld\n", buf, 0x3Au);
  }
  v25 = __s.__r_.__value_.__r.__words[0] - v331.__r_.__value_.__r.__words[0];
  if (__s.__r_.__value_.__r.__words[0] < v331.__r_.__value_.__r.__words[0])
    v25 = 0;
  v26 = v25 + v311;
  v27 = v25 + *((_QWORD *)&v310 + 1);
  if (*(double *)&v313 <= 0.0)
  {
    v242 = v25 + *((_QWORD *)&v310 + 1);
    v30 = v25 + v311;
  }
  else
  {
    v28 = __udivti3();
    v29 = v27 - v28;
    v30 = v26 + v28;
    v242 = v27 - v28;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "HALS_OverloadMessage.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 630;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v27;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v26;
      *(_WORD *)&buf[38] = 2048;
      *(_QWORD *)&buf[40] = v29;
      *(_WORD *)&buf[48] = 2048;
      *(_QWORD *)&buf[50] = v30;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  adjusted start: %llu, adjusted wake: %llu, pastCyclesStartTime: %llu, laterCyclesWakeTime: %llu\n", buf, 0x3Au);
    }
  }
  v234 = a1;
  v235 = a2;
  v31 = *(_QWORD *)(v4 + 57352);
  if (v31)
  {
    v243 = v27;
    v237 = v26;
    v238 = 0;
    v239 = 0;
    v240 = 0;
    v241 = 0;
    v236 = 0;
    v32 = (std::string::size_type *)*v8;
    v245 = *v8 + 56 * v31;
    v246 = v30;
    v33 = v242;
    do
    {
      if (*v32 >= v33 && *v32 <= v246)
      {
        std::string::basic_string[abi:ne180100]<0>(&v334, "");
        v35 = v32[4];
        if (v35 == (_QWORD)v310)
        {
          v36 = *v32;
          v37 = __udivti3();
          v38 = v37;
          if (v36 < v243 || v36 > v237)
          {
            v239 = v236 + v37 + 1;
            if (v36 >= v243)
            {
              std::string::append((std::string *)&v334, "onIOThreadFaultDurationMultipleCycles, ms after wake: ", 0x36uLL);
              v49 = *v32;
              v50 = __udivti3();
              if (v49 >= v237)
                v51 = v50;
              else
                v51 = -v50;
              std::to_string((std::string *)buf, (double)v51 * 0.000001);
              if (buf[23] >= 0)
                v47 = buf;
              else
                v47 = *(const std::string::value_type **)buf;
              if (buf[23] >= 0)
                v48 = buf[23];
              else
                v48 = *(_QWORD *)&buf[8];
            }
            else
            {
              std::string::append((std::string *)&v334, "onIOThreadFaultDurationMultipleCycles, ms before start: ", 0x38uLL);
              v44 = *v32;
              v45 = __udivti3();
              if (v243 >= v44)
                v46 = v45;
              else
                v46 = -v45;
              std::to_string((std::string *)buf, (double)v46 * 0.000001);
              if (buf[23] >= 0)
                v47 = buf;
              else
                v47 = *(const std::string::value_type **)buf;
              if (buf[23] >= 0)
                v48 = buf[23];
              else
                v48 = *(_QWORD *)&buf[8];
            }
            std::string::append((std::string *)&v334, v47, v48);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            v236 = v239;
          }
          else
          {
            std::string::append((std::string *)&v334, "onIOThreadLastCycle, ms after start: ", 0x25uLL);
            v39 = *v32;
            v40 = __udivti3();
            if (v39 >= v243)
              v41 = v40;
            else
              v41 = -v40;
            std::to_string((std::string *)buf, (double)v41 * 0.000001);
            if (buf[23] >= 0)
              v42 = buf;
            else
              v42 = *(const std::string::value_type **)buf;
            if (buf[23] >= 0)
              v43 = buf[23];
            else
              v43 = *(_QWORD *)&buf[8];
            std::string::append((std::string *)&v334, v42, v43);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            ++v240;
            v238 += v38;
          }
        }
        else if (v35)
        {
          std::string::append((std::string *)&v334, "offIOThread", 0xBuLL);
          ++v241;
        }
        if ((SBYTE7(v335) & 0x80u) == 0)
          v52 = &v334;
        else
          v52 = (__int128 *)v334;
        v53 = *v32;
        v54 = v32[1];
        v56 = v32[2];
        v55 = v32[3];
        v57 = (const __CFString *)v32[5];
        v58 = v32[6];
        v59 = v32[4];
        v60 = (AMCP::Log::Scope_Registry *)proc_regionfilename((int)v57, v56, &PageFaultRecords_Pimpl::LogPageFaultRecord(vm_rtfault_record_t const&,char const*)const::buffer, 0x400u);
        AMCP::Log::Scope_Registry::get(v60);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v61 = *(std::__shared_weak_count **)&buf[8];
        v62 = **(NSObject ***)buf;
        oslog = **(NSObject ***)buf;
        if (*(_QWORD *)&buf[8])
        {
          v63 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
            v62 = oslog;
          }
        }
        v33 = v242;
        if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
        {
          v65 = pthread_self();
          v66 = pthread_mach_thread_np(v65);
          *(_DWORD *)buf = 67111938;
          *(_DWORD *)&buf[4] = v66;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "HALS_OverloadMessage.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 591;
          *(_WORD *)&buf[24] = 2082;
          *(_QWORD *)&buf[26] = v52;
          *(_WORD *)&buf[34] = 2048;
          *(_QWORD *)&buf[36] = v53;
          *(_WORD *)&buf[44] = 2048;
          *(_QWORD *)&buf[46] = v54;
          *(_WORD *)&buf[54] = 2048;
          *(_QWORD *)&buf[56] = v56;
          *(_WORD *)v339 = 2048;
          *(_QWORD *)&v339[2] = v55;
          *(_WORD *)&v339[10] = 2048;
          *(_QWORD *)&v339[12] = v59;
          *(_WORD *)&v339[20] = 2048;
          *(_QWORD *)&v339[22] = v58;
          *(_WORD *)&v339[30] = 2048;
          v340 = v57;
          LOWORD(v341) = 2082;
          *(_QWORD *)((char *)&v341 + 2) = &PageFaultRecords_Pimpl::LogPageFaultRecord(vm_rtfault_record_t const&,char const*)const::buffer;
          _os_log_impl(&dword_1B57BA000, oslog, OS_LOG_TYPE_INFO, "%6u %32s:%-5d %{public}s, start: %llu, duration: %llu, fault address: %llX, fault pc: %llX, faulting TID: %llX, fault type: %llX, PID: %llX, Path: %{public}s\n", buf, 0x72u);
        }
        if (SBYTE7(v335) < 0)
          operator delete((void *)v334);
      }
      v32 += 7;
    }
    while (v32 != (std::string::size_type *)v245);
  }
  else
  {
    v239 = 0;
    v240 = 0;
    v238 = 0;
    v241 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v240)
    *(_QWORD *)(v234 + 184) |= 1uLL;
  v334 = 0u;
  v335 = 0u;
  v331.__r_.__value_.__r.__words[0] = 32;
  v67 = (AMCP::Log::Scope_Registry *)sysctlbyname("kern.stackshot_stats", &v334, (size_t *)&v331, 0, 0);
  if ((_DWORD)v67)
  {
    AMCP::Log::Scope_Registry::get(v67);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v68 = *(std::__shared_weak_count **)&buf[8];
    v69 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v70 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      v217 = pthread_self();
      v218 = pthread_mach_thread_np(v217);
      v219 = __error();
      v220 = strerror(*v219);
      *(_DWORD *)buf = 67109891;
      *(_DWORD *)&buf[4] = v218;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_OverloadMessage.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 686;
      *(_WORD *)&buf[24] = 2081;
      *(_QWORD *)&buf[26] = v220;
      _os_log_error_impl(&dword_1B57BA000, v69, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Error querying stackshot_stats: %{private}s", buf, 0x22u);
    }
    v72 = 0;
    v73 = 0;
    v74 = 0;
  }
  else
  {
    v73 = *((_QWORD *)&v334 + 1);
    v72 = v334;
    v74 = v335;
  }
  v75 = __udivti3();
  v76 = __udivti3();
  v77 = (AMCP::Log::Scope_Registry *)__udivti3();
  AMCP::Log::Scope_Registry::get(v77);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v78 = *(std::__shared_weak_count **)&buf[8];
  v79 = **(NSObject ***)buf;
  if (*(_QWORD *)&buf[8])
  {
    v80 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v82 = os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG);
  if (v82)
  {
    v213 = pthread_self();
    v214 = pthread_mach_thread_np(v213);
    *(_DWORD *)buf = 67110658;
    *(_DWORD *)&buf[4] = v214;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = "HALS_OverloadMessage.cpp";
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = 699;
    *(_WORD *)&buf[24] = 2048;
    *(_QWORD *)&buf[26] = v75;
    *(_WORD *)&buf[34] = 2048;
    *(_QWORD *)&buf[36] = v76;
    *(_WORD *)&buf[44] = 2048;
    *(_QWORD *)&buf[46] = v74;
    *(_WORD *)&buf[54] = 2048;
    *(_QWORD *)&buf[56] = v77;
    _os_log_debug_impl(&dword_1B57BA000, v79, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d lastStackshotStart: %llu, lastStackshotEnd: %llu, numStackshotsTaken: %llu, sumOfTakenStackshots: %llu", buf, 0x40u);
  }
  v83 = *((_QWORD *)v235 + 8);
  v84 = *((_QWORD *)v235 + 7) - 6000000;
  v85 = v83 + 6000000;
  if (v84 > v72)
    v72 = *((_QWORD *)v235 + 7) - 6000000;
  if (v85 < v73)
    v73 = v83 + 6000000;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v82);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v86 = *(std::__shared_weak_count **)&buf[8];
  v87 = **(NSObject ***)buf;
  if (*(_QWORD *)&buf[8])
  {
    v88 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
  {
    v90 = pthread_self();
    v91 = pthread_mach_thread_np(v90);
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&buf[4] = v91;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = "HALS_OverloadMessage.cpp";
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = 709;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v72 < v73;
    *(_WORD *)&buf[30] = 2048;
    *(_QWORD *)&buf[32] = v84;
    *(_WORD *)&buf[40] = 2048;
    *(_QWORD *)&buf[42] = v85;
    _os_log_impl(&dword_1B57BA000, v87, OS_LOG_TYPE_INFO, "%6u %32s:%-5d doesStackshotOverlapIOCycle: %d, adjustedIOCycleStart: %llu, adjustedIOCycleEnd: %llu", buf, 0x32u);
  }
  if (v72 < v73)
    *(_QWORD *)(v234 + 184) |= 0x10uLL;
  v92 = *((_DWORD *)v235 + 26);
  v93 = (AMCP::Log::Scope_Registry *)proc_pidinfo(v92, 13, 0, buf, 64);
  if ((int)v93 >= 64 && (*(_DWORD *)&buf[32] & 0x300000) == 0x100000
    || (v93 = (AMCP::Log::Scope_Registry *)getpriority(6, v92), (_DWORD)v93 == 6))
  {
    AMCP::Log::Scope_Registry::get(v93);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v94 = *(std::__shared_weak_count **)&buf[8];
    v95 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v96 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    v93 = (AMCP::Log::Scope_Registry *)os_log_type_enabled(v95, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v93)
    {
      v221 = pthread_self();
      v222 = pthread_mach_thread_np(v221);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v222;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_OverloadMessage.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 229;
      _os_log_error_impl(&dword_1B57BA000, v95, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_OverloadMessage: Overload possibly due to client running as an adaptive unboosted daemon.", buf, 0x18u);
    }
    *(_QWORD *)(v234 + 184) |= 2uLL;
  }
  v98 = *((_QWORD *)v235 + 15);
  if (v98 >= 1)
  {
    v99 = *((_QWORD *)v235 + 14);
    if (v99 >= 1 && v99 > v98)
    {
      AMCP::Log::Scope_Registry::get(v93);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v100 = *(std::__shared_weak_count **)&buf[8];
      v101 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v102 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      v93 = (AMCP::Log::Scope_Registry *)os_log_type_enabled(v101, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v93)
      {
        v231 = pthread_self();
        v232 = pthread_mach_thread_np(v231);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v232;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "HALS_OverloadMessage.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 238;
        _os_log_error_impl(&dword_1B57BA000, v101, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_OverloadMessage: Overload possibly due to HAL client proc exceeding io cycle budget.", buf, 0x18u);
      }
      *(_QWORD *)(v234 + 184) |= 4uLL;
    }
  }
  v104 = *((double *)v235 + 21);
  if (v104 < 0.0)
  {
    AMCP::Log::Scope_Registry::get(v93);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v105 = *(std::__shared_weak_count **)&buf[8];
    v106 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v107 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
    v93 = (AMCP::Log::Scope_Registry *)os_log_type_enabled(v106, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v93)
    {
      v225 = pthread_self();
      v226 = pthread_mach_thread_np(v225);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v226;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_OverloadMessage.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 245;
      _os_log_error_impl(&dword_1B57BA000, v106, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_OverloadMessage: Overload possibly due to safety violation.", buf, 0x18u);
    }
    *(_QWORD *)(v234 + 184) |= 8uLL;
  }
  if (*v235 - 1 <= 1)
  {
    AMCP::Log::Scope_Registry::get(v93);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v109 = *(std::__shared_weak_count **)&buf[8];
    v110 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v111 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    v93 = (AMCP::Log::Scope_Registry *)os_log_type_enabled(v110, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v93)
    {
      v227 = pthread_self();
      v228 = pthread_mach_thread_np(v227);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v228;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_OverloadMessage.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 252;
      _os_log_error_impl(&dword_1B57BA000, v110, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_OverloadMessage: Overload possibly due to client timeout.", buf, 0x18u);
    }
    *(_QWORD *)(v234 + 184) |= 0x20uLL;
  }
  if (v235[15])
  {
    AMCP::Log::Scope_Registry::get(v93);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v113 = *(std::__shared_weak_count **)&buf[8];
    v114 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v115 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
    if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
    {
      v223 = pthread_self();
      v224 = pthread_mach_thread_np(v223);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v224;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_OverloadMessage.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 258;
      _os_log_error_impl(&dword_1B57BA000, v114, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_OverloadMessage: Overload possibly due to hosted DSP overload.", buf, 0x18u);
    }
    *(_QWORD *)(v234 + 184) |= 0x40uLL;
  }
  v117 = *v235;
  v118 = "Overload";
  if (v117 == 1)
    v118 = "ClientTimeoutStart";
  if (v117 == 2)
    v119 = "ClientTimeoutEnd";
  else
    v119 = v118;
  OS::CF::String::String((OS::CF::String *)v305, v119);
  OS::CF::Number::Number<unsigned long long>(v304, *((_QWORD *)v235 + 7));
  if (*(char *)(v234 + 63) >= 0)
    v120 = (const char *)(v234 + 40);
  else
    v120 = *(const char **)(v234 + 40);
  OS::CF::String::String((OS::CF::String *)v302, v120);
  if (*(char *)(v234 + 87) >= 0)
    v121 = (const char *)(v234 + 64);
  else
    v121 = *(const char **)(v234 + 64);
  OS::CF::String::String((OS::CF::String *)v300, v121);
  if (*(char *)(v234 + 111) >= 0)
    v122 = (const char *)(v234 + 88);
  else
    v122 = *(const char **)(v234 + 88);
  OS::CF::String::String((OS::CF::String *)v298, v122);
  if (*(char *)(v234 + 135) >= 0)
    v123 = (const char *)(v234 + 112);
  else
    v123 = *(const char **)(v234 + 112);
  OS::CF::String::String((OS::CF::String *)v296, v123);
  if (*(char *)(v234 + 159) >= 0)
    v124 = (const char *)(v234 + 136);
  else
    v124 = *(const char **)(v234 + 136);
  OS::CF::String::String((OS::CF::String *)v294, v124);
  if (*(char *)(v234 + 183) >= 0)
    v125 = (const char *)(v234 + 160);
  else
    v125 = *(const char **)(v234 + 160);
  OS::CF::String::String((OS::CF::String *)v292, v125);
  OS::CF::String::String((OS::CF::String *)v290, "overload");
  OS::CF::Number::Number<unsigned int>(v289, *((_DWORD *)v235 + 2));
  OS::CF::Boolean::Boolean((OS::CF::Boolean *)v287, v235[12]);
  OS::CF::Boolean::Boolean((OS::CF::Boolean *)v285, v235[13]);
  OS::CF::Number::Number<double>(v284, *((double *)v235 + 2));
  OS::CF::Number::Number<double>(v283, *((double *)v235 + 3));
  OS::CF::Number::Number<unsigned int>(v282, *((_DWORD *)v235 + 10));
  OS::CF::Number::Number<double>(v281, *((double *)v235 + 18));
  OS::CF::Number::Number<double>(v280, *((double *)v235 + 19));
  OS::CF::Number::Number<unsigned int>(v279, *((_DWORD *)v235 + 40));
  OS::CF::Number::Number<unsigned int>(v278, *((_DWORD *)v235 + 44));
  OS::CF::Number::Number<unsigned int>(v277, *((_DWORD *)v235 + 46));
  OverloadReasonSet::getOverloadReasonList((std::string *)buf, (_QWORD *)(v234 + 184));
  v126 = (double *)(v235 + 96);
  if (buf[23] >= 0)
    v127 = buf;
  else
    v127 = *(const char **)buf;
  OS::CF::String::String((OS::CF::String *)v275, v127);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  OS::CF::Number::Number<unsigned long long>(v274, *(_QWORD *)(v234 + 184));
  OS::CF::Number::Number<unsigned long long>(v273, v240);
  OS::CF::Number::Number<unsigned long long>(v272, v238);
  OS::CF::Number::Number<unsigned long long>(v271, 0);
  OS::CF::Number::Number<unsigned long long>(v270, v239);
  OS::CF::Number::Number<unsigned long long>(v269, v241);
  OS::CF::Number::Number<double>(v268, *v126);
  v265 = 0;
  v266 = 0;
  HALS_System::GetInstance(&v331, 0, &v265);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x4002000000;
  *(_QWORD *)&buf[24] = __Block_byref_object_copy__35;
  *(_QWORD *)&buf[32] = __Block_byref_object_dispose__36;
  memset(&buf[40], 0, 24);
  v128 = MEMORY[0x1E0C809B0];
  *(_QWORD *)&v334 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v334 + 1) = 0x40000000;
  *(_QWORD *)&v335 = ___ZNK11HALS_System32GetSmallestActiveBufferFrameSizeEv_block_invoke;
  *((_QWORD *)&v335 + 1) = &unk_1E697E2B0;
  v337 = v331.__r_.__value_.__r.__words[0];
  v336 = buf;
  v129 = (HALB_Mutex *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v331.__r_.__value_.__l.__data_
                                                                         + 56))(v331.__r_.__value_.__r.__words[0]);
  HALB_CommandGate::ExecuteCommand(v129, (uint64_t)&v334);
  v130 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
  v131 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
  v132 = 0x7FFFFFFF;
  while (v130 != v131)
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v130 + 96) + 152))(*(_QWORD *)(*(_QWORD *)v130 + 96)) & 1) != 0)
    {
      v133 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v130 + 96) + 272))(*(_QWORD *)(*(_QWORD *)v130 + 96));
      if (v133 < v132 && v133 != 0)
        v132 = v133;
    }
    v130 += 8;
  }
  _Block_object_dispose(buf, 8);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf[40];
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
  OS::CF::Number::Number<unsigned int>(v267, v132);
  size = (std::__shared_weak_count *)v331.__r_.__value_.__l.__size_;
  if (v331.__r_.__value_.__l.__size_)
  {
    v136 = (unint64_t *)(v331.__r_.__value_.__l.__size_ + 8);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v138 = v266;
  if (v266)
  {
    p_shared_owners = (unint64_t *)&v266->__shared_owners_;
    do
      v140 = __ldaxr(p_shared_owners);
    while (__stlxr(v140 - 1, p_shared_owners));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  OS::CF::Number::Number<long long>(v264, *((_QWORD *)v235 + 14));
  OS::CF::Number::Number<long long>(v263, *((_QWORD *)v235 + 15));
  OS::CF::Number::Number<long long>(v262, *((_QWORD *)v235 + 16));
  v141 = *((double *)v235 + 4);
  v142 = mach_absolute_time();
  v143 = __udivti3();
  if (v142 >= (unint64_t)v141)
    v144 = v143;
  else
    v144 = -v143;
  OS::CF::Number::Number<long long>(v261, v144);
  v145 = *((_DWORD *)v235 + 58);
  v146 = *((_DWORD *)v235 + 48);
  v147 = v145 >= v146;
  v148 = v145 - v146;
  if (v147)
    v149 = v148;
  else
    v149 = 0;
  OS::CF::Number::Number<unsigned int>(v260, v149);
  v150 = *((_DWORD *)v235 + 59);
  v151 = *((_DWORD *)v235 + 49);
  v147 = v150 >= v151;
  v152 = v150 - v151;
  if (v147)
    v153 = v152;
  else
    v153 = 0;
  OS::CF::Number::Number<unsigned int>(v259, v153);
  v154 = *((_QWORD *)v235 + 30);
  v155 = *((_QWORD *)v235 + 25);
  v147 = v154 >= v155;
  v156 = v154 - v155;
  if (v147)
    v157 = v156;
  else
    v157 = 0;
  OS::CF::Number::Number<unsigned long long>(v258, v157);
  v158 = *((_QWORD *)v235 + 31);
  v159 = *((_QWORD *)v235 + 26);
  v147 = v158 >= v159;
  v160 = v158 - v159;
  if (v147)
    v161 = v160;
  else
    v161 = 0;
  OS::CF::Number::Number<unsigned long long>(v257, v161);
  v162 = *((_QWORD *)v235 + 32);
  v163 = *((_QWORD *)v235 + 27);
  v147 = v162 >= v163;
  v164 = v162 - v163;
  if (v147)
    v165 = v164;
  else
    v165 = 0;
  OS::CF::Number::Number<unsigned long long>(v256, v165);
  v166 = *((_QWORD *)v235 + 33);
  v167 = *((_QWORD *)v235 + 28);
  v147 = v166 >= v167;
  v168 = v166 - v167;
  if (v147)
    v169 = v168;
  else
    v169 = 0;
  OS::CF::Number::Number<unsigned long long>(v255, v169);
  OS::CF::Number::Number<long long>(v254, *((_QWORD *)v235 + 17));
  OS::CF::Boolean::Boolean((OS::CF::Boolean *)v252, v104 < 0.0);
  v170 = *((double *)v235 + 21);
  v171 = 0.0;
  if (v170 >= 0.0)
    v172 = 0.0;
  else
    v172 = -v170;
  OS::CF::Number::Number<double>(v251, v172);
  v173 = *((double *)v235 + 21);
  if (v173 < 0.0 && *v126 > 0.0)
    v171 = -v173 / *v126;
  OS::CF::Number::Number<double>(v250, v171);
  v174 = *((_DWORD *)v235 + 1);
  std::string::basic_string[abi:ne180100]<0>(&v247, "[ ");
  v325 = 0;
  v324 = 0;
  HALS_System::GetInstance(&v326, 0, &v324);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x4002000000;
  *(_QWORD *)&buf[24] = __Block_byref_object_copy__35;
  *(_QWORD *)&buf[32] = __Block_byref_object_dispose__36;
  memset(&buf[40], 0, 24);
  *(_QWORD *)&v334 = v128;
  *((_QWORD *)&v334 + 1) = 0x40000000;
  *(_QWORD *)&v335 = ___ZNK11HALS_System23GetActiveIOContextsInfoEv_block_invoke;
  *((_QWORD *)&v335 + 1) = &unk_1E697E2D8;
  v337 = v326;
  v336 = buf;
  v175 = (HALB_Mutex *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v326 + 56))(v326);
  HALB_CommandGate::ExecuteCommand(v175, (uint64_t)&v334);
  v329 = 0;
  v328 = 0;
  v330 = 0;
  v176 = *(HALS_ObjectMap ***)(*(_QWORD *)&buf[8] + 40);
  v177 = *(HALS_ObjectMap ***)(*(_QWORD *)&buf[8] + 48);
  if (v176 != v177)
  {
    while (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)*v176 + 12) + 152))(*((_QWORD *)*v176 + 12)))
    {
LABEL_282:
      if (++v176 == v177)
        goto LABEL_288;
    }
    v179 = (unsigned int **)*v176;
    HALS_ObjectMap::RetainObject(*v176, v178);
    v180 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v179[8]);
    if (v180)
      HALS_Client::GetUniqueDebugString((HALS_Client *)&__s, (uint64_t)v180);
    else
      std::string::basic_string[abi:ne180100]<0>(&__s, "Unknown");
    HALS_ObjectMap::ReleaseObject(v180, v181);
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v179, v182);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v331, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      v331 = __s;
    v183 = *v176;
    LODWORD(v332) = *((_DWORD *)*v176 + 4);
    DWORD1(v332) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v183 + 12) + 272))(*((_QWORD *)v183 + 12));
    *((_QWORD *)&v332 + 1) = (*(double (**)(_QWORD))(**((_QWORD **)*v176 + 12) + 704))(*((_QWORD *)*v176 + 12));
    v184 = (char *)v329;
    if ((unint64_t)v329 < v330)
    {
      *(_OWORD *)v329 = *(_OWORD *)&v331.__r_.__value_.__l.__data_;
      *((_QWORD *)v184 + 2) = *((_QWORD *)&v331.__r_.__value_.__l + 2);
      memset(&v331, 0, sizeof(v331));
      *(_OWORD *)(v184 + 24) = v332;
      v329 = v184 + 40;
LABEL_280:
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      goto LABEL_282;
    }
    v185 = v328;
    v186 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)v329 - v328) >> 3);
    v187 = v186 + 1;
    if (v186 + 1 > 0x666666666666666)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    if (0x999999999999999ALL * ((uint64_t)(v330 - (_QWORD)v328) >> 3) > v187)
      v187 = 0x999999999999999ALL * ((uint64_t)(v330 - (_QWORD)v328) >> 3);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v330 - (_QWORD)v328) >> 3) >= 0x333333333333333)
      v188 = 0x666666666666666;
    else
      v188 = v187;
    if (v188)
    {
      if (v188 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v189 = (char *)operator new(40 * v188);
    }
    else
    {
      v189 = 0;
    }
    v190 = &v189[40 * v186];
    *(std::string *)v190 = v331;
    memset(&v331, 0, sizeof(v331));
    *(_OWORD *)(v190 + 24) = v332;
    v191 = v190 + 40;
    if (v184 == v185)
    {
      v328 = v190;
      v329 = v190 + 40;
      v330 = (unint64_t)&v189[40 * v188];
      if (!v184)
      {
LABEL_278:
        v329 = v191;
        if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v331.__r_.__value_.__l.__data_);
        goto LABEL_280;
      }
    }
    else
    {
      do
      {
        v192 = *(_OWORD *)(v184 - 40);
        *((_QWORD *)v190 - 3) = *((_QWORD *)v184 - 3);
        *(_OWORD *)(v190 - 40) = v192;
        *((_QWORD *)v184 - 4) = 0;
        *((_QWORD *)v184 - 3) = 0;
        *((_QWORD *)v184 - 5) = 0;
        *((_OWORD *)v190 - 1) = *((_OWORD *)v184 - 1);
        v190 -= 40;
        v184 -= 40;
      }
      while (v184 != v185);
      v193 = v328;
      v184 = (char *)v329;
      v328 = v190;
      v329 = v191;
      v330 = (unint64_t)&v189[40 * v188];
      if (v184 != v193)
      {
        do
        {
          if (*(v184 - 17) < 0)
            operator delete(*((void **)v184 - 5));
          v184 -= 40;
        }
        while (v184 != v193);
        v184 = v193;
      }
      if (!v184)
        goto LABEL_278;
    }
    operator delete(v184);
    goto LABEL_278;
  }
LABEL_288:
  _Block_object_dispose(buf, 8);
  v331.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf[40];
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
  v194 = v327;
  if (v327)
  {
    v195 = (unint64_t *)&v327->__shared_owners_;
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  v197 = v325;
  if (v325)
  {
    v198 = (unint64_t *)&v325->__shared_owners_;
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  v200 = v328;
  v201 = (char *)v329;
  if (v328 != v329)
  {
    v202 = 1;
    do
    {
      if (*((_DWORD *)v200 + 6) != v174)
      {
        if ((v202 & 1) == 0)
          std::string::append(&v247, ", ", 2uLL);
        std::string::append(&v247, "{ ", 2uLL);
        std::string::append(&v247, "HostApplicationDisplayID_other_client", 0x25uLL);
        std::string::append(&v247, ": ", 2uLL);
        v203 = v200[23];
        if (v203 >= 0)
          v204 = v200;
        else
          v204 = *(const std::string::value_type **)v200;
        if (v203 >= 0)
          v205 = v200[23];
        else
          v205 = *((_QWORD *)v200 + 1);
        std::string::append(&v247, v204, v205);
        std::string::append(&v247, ", ", 2uLL);
        std::string::append(&v247, "sample_rate_other_client", 0x18uLL);
        std::string::append(&v247, ": ", 2uLL);
        std::to_string((std::string *)buf, *((double *)v200 + 4));
        if (buf[23] >= 0)
          v206 = buf;
        else
          v206 = *(const std::string::value_type **)buf;
        if (buf[23] >= 0)
          v207 = buf[23];
        else
          v207 = *(_QWORD *)&buf[8];
        std::string::append(&v247, v206, v207);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        std::string::append(&v247, ", ", 2uLL);
        std::string::append(&v247, "io_buffer_size_other_client", 0x1BuLL);
        std::string::append(&v247, ": ", 2uLL);
        std::to_string((std::string *)buf, *((_DWORD *)v200 + 7));
        if (buf[23] >= 0)
          v208 = buf;
        else
          v208 = *(const std::string::value_type **)buf;
        if (buf[23] >= 0)
          v209 = buf[23];
        else
          v209 = *(_QWORD *)&buf[8];
        std::string::append(&v247, v208, v209);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        std::string::append(&v247, " }", 2uLL);
        v202 = 0;
      }
      v200 += 40;
    }
    while (v200 != v201);
  }
  std::string::append(&v247, " ]", 2uLL);
  *(_QWORD *)buf = &v328;
  std::vector<IOContextInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v210 = &v247;
  else
    v210 = (std::string *)v247.__r_.__value_.__r.__words[0];
  OS::CF::String::String((OS::CF::String *)v248, (const char *)v210);
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v247.__r_.__value_.__l.__data_);
  *(_QWORD *)buf = CFSTR("overload_type");
  *(_QWORD *)&buf[8] = v306;
  *(_QWORD *)&buf[16] = CFSTR("start_time");
  *(_QWORD *)&buf[24] = v304[1];
  *(_QWORD *)&buf[32] = CFSTR("issue_type");
  *(_QWORD *)&buf[40] = v291;
  *(_QWORD *)&buf[48] = CFSTR("input_device_uid_list");
  *(_QWORD *)&buf[56] = v303;
  *(_QWORD *)v339 = CFSTR("output_device_uid_list");
  *(_QWORD *)&v339[8] = v301;
  *(_QWORD *)&v339[16] = CFSTR("input_device_transport_list");
  *(_QWORD *)&v339[24] = v299;
  v340 = CFSTR("output_device_transport_list");
  *(_QWORD *)&v341 = v297;
  *((_QWORD *)&v341 + 1) = CFSTR("input_device_source_list");
  v342 = v295;
  v343 = CFSTR("output_device_source_list");
  v344 = v293;
  v345 = CFSTR("io_cycle");
  v346 = v289[1];
  v347 = CFSTR("is_prewarming");
  v348 = v288;
  v349 = CFSTR("is_recovering");
  v350 = v286;
  v351 = CFSTR("lateness");
  v352 = v284[1];
  v353 = CFSTR("deadline");
  v354 = v283[1];
  v355 = CFSTR("io_buffer_size");
  v356 = v282[1];
  v357 = CFSTR("io_cycle_usage");
  v358 = v281[1];
  v359 = CFSTR("anchor_sample_time");
  v360 = v280[1];
  v361 = CFSTR("io_frame_counter");
  v362 = v279[1];
  v363 = CFSTR("num_continuous_silent_io_cycles");
  v364 = v278[1];
  v365 = CFSTR("num_continuous_nonzero_io_cycles");
  v366 = v277[1];
  v367 = CFSTR("cause");
  v368 = v276;
  v369 = CFSTR("cause_set");
  v370 = v274[1];
  v371 = CFSTR("io_page_faults");
  v372 = v273[1];
  v373 = CFSTR("io_page_faults_duration");
  v374 = v272[1];
  v375 = CFSTR("multi_cycle_io_page_faults");
  v376 = v271[1];
  v377 = CFSTR("multi_cycle_io_page_faults_duration");
  v378 = v270[1];
  v379 = CFSTR("other_page_faults");
  v380 = v269[1];
  v381 = CFSTR("sample_rate");
  v382 = v268[1];
  v383 = CFSTR("smallest_buffer_frame_size");
  v384 = v267[1];
  v385 = CFSTR("HAL_client_IO_duration");
  v386 = v264[1];
  v387 = CFSTR("io_cycle_budget");
  v388 = v263[1];
  v389 = CFSTR("scheduler_latency");
  v390 = v262[1];
  v391 = CFSTR("time_since_prev_overload");
  v392 = v254[1];
  v393 = CFSTR("safety_violation");
  v394 = v253;
  v395 = CFSTR("safety_violation_sample_gap");
  v396 = v251[1];
  v397 = CFSTR("safety_violation_time_gap");
  v398 = v250[1];
  v399 = CFSTR("other_active_clients");
  v400 = v249;
  v401 = CFSTR("reporting_latency");
  v402 = v261[1];
  v403 = CFSTR("wg_external_wakeups");
  v404 = v260[1];
  v405 = CFSTR("wg_total_wakeups");
  v406 = v259[1];
  v407 = CFSTR("wg_user_time_mach");
  v408 = v258[1];
  v409 = CFSTR("wg_system_time_mach");
  v410 = v257[1];
  v411 = CFSTR("wg_cycles");
  v412 = v256[1];
  v413 = CFSTR("wg_instructions");
  v414 = v255[1];
  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v334, (uint64_t)buf, 0x2CuLL);
  if (v235[13])
  {
    OS::CF::Boolean::Boolean((OS::CF::Boolean *)buf, v235[14]);
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>(*((__CFDictionary **)&v334 + 1), CFSTR("was_able_to_recover"), *(const void **)&buf[8]);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
  }
  Copy = (CFDictionaryRef)*((_QWORD *)&v334 + 1);
  if (*((_QWORD *)&v334 + 1))
    Copy = CFDictionaryCreateCopy(0, *((CFDictionaryRef *)&v334 + 1));
  OS::CF::UntypedObject::operator=(v234 + 24, (uint64_t)Copy);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v334);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v248);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v250);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v251);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v252);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v254);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v255);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v256);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v257);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v258);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v259);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v260);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v261);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v262);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v263);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v264);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v267);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v268);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v269);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v270);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v271);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v272);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v273);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v274);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v275);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v277);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v278);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v279);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v280);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v281);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v282);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v283);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v284);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v285);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v287);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v289);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v290);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v292);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v294);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v296);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v298);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v300);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v302);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v304);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v305);
  return MEMORY[0x1B5E50688](v233, 0x1020C40374504DCLL);
}

void sub_1B5C15AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,char a40,uint64_t a41,char a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48,uint64_t a49,char a50,uint64_t a51,char a52,uint64_t a53,char a54,uint64_t a55,char a56,uint64_t a57,char a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  char a66;
  char a68;
  char a70;
  char a72;
  char a73;

  STACK[0x4C0] = (unint64_t)&STACK[0x4A8];
  std::vector<IOContextInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4C0]);
  _Block_object_dispose(&STACK[0x530], 8);
  STACK[0x4C0] = a25;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4C0]);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x498]);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x488]);
  if (a31 < 0)
    operator delete(__p);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a34);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a36);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a38);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a40);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a42);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a44);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a46);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a48);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a50);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a52);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a54);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a56);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a58);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a60);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a64);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a66);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a68);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a70);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a72);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a73);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x200]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x210]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x220]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x230]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x240]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x250]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x260]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x270]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x280]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x290]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x2A0]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x2B0]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x2C0]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x2D0]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x2E0]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x2F0]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x300]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x310]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x320]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x330]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x340]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x350]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x360]);
  MEMORY[0x1B5E50688](a10, 0x1020C40374504DCLL);
  _Unwind_Resume(a1);
}

std::string *OverloadReasonSet::getOverloadReasonList(std::string *this, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  const char *v5;
  size_t v6;

  v2 = (uint64_t)this;
  if (*a2)
  {
    v4 = 0;
    this->__r_.__value_.__r.__words[0] = 0;
    this->__r_.__value_.__l.__size_ = 0;
    this->__r_.__value_.__r.__words[2] = 0;
    while (((*a2 >> v4) & 1) == 0)
    {
LABEL_12:
      if (++v4 == 64)
        return this;
    }
    if (*(char *)(v2 + 23) < 0)
    {
      if (!*(_QWORD *)(v2 + 8))
      {
LABEL_9:
        v5 = "PageFaultsOnIOThread";
        if ((v4 - 1) <= 5u)
          v5 = off_1E6998DC0[(v4 - 1)];
        v6 = strlen(v5);
        this = std::string::append((std::string *)v2, v5, v6);
        goto LABEL_12;
      }
    }
    else if (!*(_BYTE *)(v2 + 23))
    {
      goto LABEL_9;
    }
    std::string::append((std::string *)v2, ",", 1uLL);
    goto LABEL_9;
  }
  return (std::string *)std::string::basic_string[abi:ne180100]<0>(this, "Unknown");
}

void sub_1B5C15F38(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void HALS_OverloadMessage::OverloadDictionary::~OverloadDictionary(void **this)
{
  void *v2;

  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(this + 3));
  v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

_QWORD *OS::CF::Number::Number<unsigned long long>(_QWORD *a1, uint64_t a2)
{
  CFNumberRef v3;
  uint64_t valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  *a1 = &off_1E69A0F10;
  a1[1] = v3;
  return a1;
}

_QWORD *OS::CF::Number::Number<double>(_QWORD *a1, double a2)
{
  CFNumberRef v3;
  double valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  *a1 = &off_1E69A0F10;
  a1[1] = v3;
  return a1;
}

_QWORD *OS::CF::Number::Number<long long>(_QWORD *a1, uint64_t a2)
{
  CFNumberRef v3;
  uint64_t valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  *a1 = &off_1E69A0F10;
  a1[1] = v3;
  return a1;
}

const char *GetDeviceTransportName(int a1)
{
  if (a1 > 1735554415)
  {
    if (a1 > 1953002861)
    {
      if (a1 > 1986622067)
      {
        if (a1 == 1986622068)
          return "Virtual";
        if (a1 == 1986818665)
          return "SystemCapture";
      }
      else
      {
        if (a1 == 1953002862)
          return "Thunderbolt";
        if (a1 == 1970496032)
          return "USB";
      }
    }
    else if (a1 > 1835169138)
    {
      if (a1 == 1835169139)
        return "MikeyBus";
      if (a1 == 1885563168)
        return "PCI";
    }
    else
    {
      if (a1 == 1735554416)
        return "Aggregate";
      if (a1 == 1751412073)
        return "HDMI";
    }
  }
  else if (a1 > 1651275108)
  {
    if (a1 > 1685090931)
    {
      if (a1 == 1685090932)
        return "DisplayPort";
      if (a1 == 1700886114)
        return "AVB";
    }
    else
    {
      if (a1 == 1651275109)
        return "Bluetooth";
      if (a1 == 1668506482)
        return "ContinuityScreen";
    }
  }
  else if (a1 > 1651271008)
  {
    if (a1 == 1651271009)
      return "BluetoothLE";
    if (a1 == 1651274862)
      return "BuiltIn";
  }
  else
  {
    if (a1 == 825440564)
      return "FireWire";
    if (a1 == 1634300528)
      return "AirPlay";
  }
  return "Unknown";
}

uint64_t GetMasterDataSourceValue(const HALS_Device *a1, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  HALS_Object *v4;
  HALS_ObjectMap *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;

  if (a2)
    v2 = 1768845428;
  else
    v2 = 1869968496;
  v3 = (unsigned int *)(*(uint64_t (**)(const HALS_Device *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 640))(a1, 1685287523, v2, 0);
  v5 = (HALS_ObjectMap *)v3;
  if (v3)
  {
    v6 = v3[4];
    v9 = 0x676C6F6273636369;
    v10 = 0;
    v12 = 0;
    v11 = 0;
    (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, int *, unsigned int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v3 + 112))(v3, v6, &v9, 4, &v11, &v12, 0, 0, 0);
    v7 = v12;
  }
  else
  {
    v7 = 0;
  }
  HALS_ObjectMap::ReleaseObject(v5, v4);
  return v7;
}

void sub_1B5C16540(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

const char *GetMasterDataSourceName(int a1)
{
  if (a1 > 1768778082)
  {
    if (a1 > 1818848868)
    {
      if (a1 == 1818848869)
        return "Line";
      if (a1 == 1936745574)
        return "SPDIF";
    }
    else
    {
      if (a1 == 1768778083)
        return "Internal Microphone";
      if (a1 == 1769173099)
        return "Internal Speaker";
    }
  }
  else if (a1 > 1702064234)
  {
    if (a1 == 1702064235)
      return "External Speaker";
    if (a1 == 1751412846)
      return "Headphones";
  }
  else
  {
    if (a1 == 1667506208)
      return "CD";
    if (a1 == 1701669219)
      return "External Microphone";
  }
  return "Unknown";
}

uint64_t AMCP::get_box_property_traits_list(AMCP *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  if ((v1 & 1) == 0
  {
    AMCP::get_box_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  v2 = atomic_load(&AMCP::get_box_property_traits_list(void)::once);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&AMCP::get_box_property_traits_list(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_box_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_box_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_box_property_traits_list(void)::$_0 &&>>()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  void **v7[2];
  char v8;
  int v9[12];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v9, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v24, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v25, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v26, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v27, 1651861860, 1, 1, 0, &AMCP::Property_Traits<1651861860u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1953653102u>::k_valid_scopes, 0, 1651861860, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v28, 1953653102, 1, 0, 0, &AMCP::Property_Traits<1953653102u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651007861u>::k_valid_scopes, 0, 1953653102, 23);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v29, 1651007861, 1, 0, 0, &AMCP::Property_Traits<1651007861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651013225u>::k_valid_scopes, 0, 1651007861, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v30, 1651013225, 1, 0, 0, &AMCP::Property_Traits<1651013225u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651010921u>::k_valid_scopes, 0, 1651013225, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v31, 1651010921, 1, 0, 0, &AMCP::Property_Traits<1651010921u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651536495u>::k_valid_scopes, 0, 1651010921, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v32, 1651536495, 1, 0, 0, &AMCP::Property_Traits<1651536495u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1652060014u>::k_valid_scopes, 0, 1651536495, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v33, 1652060014, 1, 0, 1, &AMCP::Property_Traits<1652060014u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1652060006u>::k_valid_scopes, 0, 1652060014, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v34, 1652060006, 1, 0, 0, &AMCP::Property_Traits<1652060006u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650751011u>::k_valid_scopes, 0, 1652060006, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v35, 1650751011, 1, 0, 0, &AMCP::Property_Traits<1650751011u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682915u>::k_valid_scopes, 0, 0, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v36, 1650682915, 1, 0, 0, &AMCP::Property_Traits<1650682915u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1969841184u>::k_valid_scopes, 0, 0, 14);
  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  v7[1] = (void **)v0;
  v8 = 0;
  v1 = (char *)operator new(0x540uLL);
  *(_QWORD *)v0 = v1;
  *(_QWORD *)(v0 + 8) = v1;
  *(_QWORD *)(v0 + 16) = v1 + 1344;
  *(_QWORD *)(v0 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits*>(v0 + 16, v9, (int *)&v37, (uint64_t)v1);
  v7[0] = 0;
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100]((void ***)&AMCP::get_box_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, (void **)v0);
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100](v7, 0);
  v2 = 336;
  do
  {
    v3 = *(void **)&v9[v2 - 10];
    if (v3)
    {
      *(_QWORD *)&v9[v2 - 8] = v3;
      operator delete(v3);
    }
    v2 -= 12;
  }
  while (v2 * 4);
  v4 = *(unsigned int **)(AMCP::get_box_property_traits_list(void)::s_indesctructible_property_traits_list_ptr + 8);
  v5 = 126
     - 2
     * __clz(0xAAAAAAAAAAAAAAABLL* (((uint64_t)v4 - *(_QWORD *)AMCP::get_box_property_traits_list(void)::s_indesctructible_property_traits_list_ptr) >> 4));
  if (v4 == *(unsigned int **)AMCP::get_box_property_traits_list(void)::s_indesctructible_property_traits_list_ptr)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *,false>(*(unsigned int **)AMCP::get_box_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, v4, v6, 1);
}

void sub_1B5C16E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v16 = v15;
  *(_QWORD *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1B5E50688](v14, 0x20C40960023A9);
  v18 = 1344;
  while (1)
  {
    v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(_QWORD *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18)
      _Unwind_Resume(a1);
  }
}

void AMCP::IOAudio2::Control::~Control(AMCP::IOAudio2::Control *this)
{
  AMCP::IOAudio2::Control::~Control(this);
  JUMPOUT(0x1B5E50688);
}

{
  AMCP::Log::Scope_Registry *v2;
  int v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *v6;
  unint64_t v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  int v10;
  NSObject *v11;
  os_log_type_t v12;
  std::__shared_weak_count *v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  int v19;
  std::__shared_weak_count *v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint8_t buf[8];
  _BYTE v33[10];
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E6998E00;
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v30, "com.apple.coreaudio", "AMCP");
  v3 = *(_DWORD *)(v30 + 16);
  switch(v3)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v13 = *(std::__shared_weak_count **)v33;
      v14 = **(NSObject ***)buf;
      if (*(_QWORD *)v33)
      {
        v15 = (unint64_t *)(*(_QWORD *)v33 + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v17 = pthread_self();
        v18 = pthread_mach_thread_np(v17);
        v19 = *((_DWORD *)this + 8);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v18;
        *(_WORD *)v33 = 2080;
        *(_QWORD *)&v33[2] = "IOAudio2_Control.cpp";
        v34 = 1024;
        v35 = 56;
        v36 = 1024;
        v37 = v19;
        v11 = v14;
        v12 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v20 = *(std::__shared_weak_count **)v33;
      v21 = **(NSObject ***)buf;
      if (*(_QWORD *)v33)
      {
        v22 = (unint64_t *)(*(_QWORD *)v33 + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        v27 = pthread_self();
        v28 = pthread_mach_thread_np(v27);
        v29 = *((_DWORD *)this + 8);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v28;
        *(_WORD *)v33 = 2080;
        *(_QWORD *)&v33[2] = "IOAudio2_Control.cpp";
        v34 = 1024;
        v35 = 56;
        v36 = 1024;
        v37 = v29;
        _os_log_debug_impl(&dword_1B57BA000, v21, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tore down Control with object id %u", buf, 0x1Eu);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v4 = *(std::__shared_weak_count **)v33;
      v5 = **(NSObject ***)buf;
      if (*(_QWORD *)v33)
      {
        v6 = (unint64_t *)(*(_QWORD *)v33 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        v10 = *((_DWORD *)this + 8);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v9;
        *(_WORD *)v33 = 2080;
        *(_QWORD *)&v33[2] = "IOAudio2_Control.cpp";
        v34 = 1024;
        v35 = 56;
        v36 = 1024;
        v37 = v10;
        v11 = v5;
        v12 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v11, v12, "%6u %32s:%-5d Tore down Control with object id %u", buf, 0x1Eu);
      }
      break;
  }
  v24 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  AMCP::IOAudio2::Device_Sub_Object::~Device_Sub_Object(this);
}

void sub_1B5C17268(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::IOAudio2::Control::build_core(AMCP::IOAudio2::Control *this)
{
  AMCP::Log::Scope_Registry *v2;
  AMCP::Log::Scope_Registry *v3;
  int v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *v7;
  unint64_t v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  int v11;
  unsigned int v12;
  int8x8_t v13;
  int8x8_t v14;
  int32x4_t v15;
  int32x4_t v16;
  uint32x4_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int v20;
  NSObject *v21;
  os_log_type_t v22;
  std::__shared_weak_count *v23;
  NSObject *v24;
  unint64_t *v25;
  unint64_t v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  int v29;
  unsigned int v30;
  int8x8_t v31;
  int8x8_t v32;
  int32x4_t v33;
  int32x4_t v34;
  uint32x4_t v35;
  int16x8_t v36;
  int32x4_t v37;
  int v38;
  std::__shared_weak_count *v39;
  NSObject *v40;
  unint64_t *v41;
  unint64_t v42;
  _opaque_pthread_t *v43;
  mach_port_t v44;
  int v45;
  unsigned int v46;
  int8x8_t v47;
  int8x8_t v48;
  int32x4_t v49;
  int32x4_t v50;
  uint32x4_t v51;
  int16x8_t v52;
  int32x4_t v53;
  int v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  int v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  const __CFDictionary *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  void *v90;
  std::runtime_error *exception;
  AMCP::Core::Core *v92;
  std::__shared_weak_count *v93;
  void *__p[2];
  char v95;
  CFTypeRef cf;
  int v97;
  char v98;
  void *v99;
  std::__shared_weak_count *v100;
  char v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  void *v104[2];
  __int128 v105;
  int v106;
  uint8_t buf[8];
  _BYTE v108[10];
  __int16 v109;
  int v110;
  __int16 v111;
  int v112;
  __int16 v113;
  void **v114;
  __int16 v115;
  CFTypeRef *p_cf;
  __int16 v117;
  void **v118;
  __int16 v119;
  int v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v2 = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*(_QWORD *)(**((_QWORD **)this + 3) + 32)
                                                                                                + 16));
  *((_DWORD *)this + 8) = (_DWORD)v2;
  *(_OWORD *)v104 = 0u;
  v105 = 0u;
  v106 = 1065353216;
  AMCP::Log::Scope_Registry::get(v2);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v102, "com.apple.coreaudio", "AMCP");
  v4 = *(_DWORD *)(v102 + 16);
  switch(v4)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v39 = *(std::__shared_weak_count **)v108;
      v40 = **(NSObject ***)buf;
      if (*(_QWORD *)v108)
      {
        v41 = (unint64_t *)(*(_QWORD *)v108 + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        v43 = pthread_self();
        v44 = pthread_mach_thread_np(v43);
        v45 = *((_DWORD *)this + 8);
        v46 = *((_DWORD *)this + 12);
        v47.i32[0] = bswap32(*((_DWORD *)this + 13));
        v48 = vzip1_s8(v47, v47);
        v49.i64[0] = 0x1F0000001FLL;
        v49.i64[1] = 0x1F0000001FLL;
        v50.i64[0] = 0x1F0000001FLL;
        v50.i64[1] = 0x1F0000001FLL;
        v51.i64[0] = 0x5F0000005FLL;
        v51.i64[1] = 0x5F0000005FLL;
        *(int8x8_t *)v52.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v51, (uint32x4_t)vsraq_n_s32(v50, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v48), 0x18uLL), 0x18uLL))), v48, (int8x8_t)0x2E002E002E002ELL);
        v101 = 4;
        *(int8x8_t *)v52.i8 = vmovn_s16(v52);
        LODWORD(v99) = v52.i32[0];
        BYTE4(v99) = 0;
        v52.i32[0] = bswap32(v46);
        *(int8x8_t *)v52.i8 = vzip1_s8(*(int8x8_t *)v52.i8, *(int8x8_t *)v52.i8);
        v53.i64[0] = 0x1F0000001FLL;
        v53.i64[1] = 0x1F0000001FLL;
        *(int8x8_t *)v52.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v51, (uint32x4_t)vsraq_n_s32(v53, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v52.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v52.i8, (int8x8_t)0x2E002E002E002ELL);
        v98 = 4;
        *(int8x8_t *)v52.i8 = vmovn_s16(v52);
        LODWORD(cf) = v52.i32[0];
        BYTE4(cf) = 0;
        v54 = *((_DWORD *)this + 15);
        v52.i32[0] = bswap32(*((_DWORD *)this + 14));
        *(int8x8_t *)v52.i8 = vzip1_s8(*(int8x8_t *)v52.i8, *(int8x8_t *)v52.i8);
        v95 = 4;
        *(int8x8_t *)v52.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v51, (uint32x4_t)vsraq_n_s32(v49, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v52.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v52.i8, (int8x8_t)0x2E002E002E002ELL);
        LODWORD(__p[0]) = vmovn_s16(v52).u32[0];
        BYTE4(__p[0]) = 0;
        *(_DWORD *)buf = 67110914;
        *(_DWORD *)&buf[4] = v44;
        *(_WORD *)v108 = 2080;
        *(_QWORD *)&v108[2] = "IOAudio2_Control.cpp";
        v109 = 1024;
        v110 = 64;
        v111 = 1024;
        v112 = v45;
        v113 = 2080;
        v114 = &v99;
        v115 = 2080;
        p_cf = &cf;
        v117 = 2080;
        v118 = __p;
        v119 = 1024;
        v120 = v54;
        v21 = v40;
        v22 = OS_LOG_TYPE_INFO;
        goto LABEL_25;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v23 = *(std::__shared_weak_count **)v108;
      v24 = **(NSObject ***)buf;
      if (*(_QWORD *)v108)
      {
        v25 = (unint64_t *)(*(_QWORD *)v108 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        v27 = pthread_self();
        v28 = pthread_mach_thread_np(v27);
        v29 = *((_DWORD *)this + 8);
        v30 = *((_DWORD *)this + 12);
        v31.i32[0] = bswap32(*((_DWORD *)this + 13));
        v32 = vzip1_s8(v31, v31);
        v33.i64[0] = 0x1F0000001FLL;
        v33.i64[1] = 0x1F0000001FLL;
        v34.i64[0] = 0x1F0000001FLL;
        v34.i64[1] = 0x1F0000001FLL;
        v35.i64[0] = 0x5F0000005FLL;
        v35.i64[1] = 0x5F0000005FLL;
        *(int8x8_t *)v36.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v35, (uint32x4_t)vsraq_n_s32(v34, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v32), 0x18uLL), 0x18uLL))), v32, (int8x8_t)0x2E002E002E002ELL);
        v101 = 4;
        *(int8x8_t *)v36.i8 = vmovn_s16(v36);
        LODWORD(v99) = v36.i32[0];
        BYTE4(v99) = 0;
        v36.i32[0] = bswap32(v30);
        *(int8x8_t *)v36.i8 = vzip1_s8(*(int8x8_t *)v36.i8, *(int8x8_t *)v36.i8);
        v37.i64[0] = 0x1F0000001FLL;
        v37.i64[1] = 0x1F0000001FLL;
        *(int8x8_t *)v36.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v35, (uint32x4_t)vsraq_n_s32(v37, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v36.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v36.i8, (int8x8_t)0x2E002E002E002ELL);
        v98 = 4;
        *(int8x8_t *)v36.i8 = vmovn_s16(v36);
        LODWORD(cf) = v36.i32[0];
        BYTE4(cf) = 0;
        v38 = *((_DWORD *)this + 15);
        v36.i32[0] = bswap32(*((_DWORD *)this + 14));
        *(int8x8_t *)v36.i8 = vzip1_s8(*(int8x8_t *)v36.i8, *(int8x8_t *)v36.i8);
        v95 = 4;
        *(int8x8_t *)v36.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v35, (uint32x4_t)vsraq_n_s32(v33, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v36.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v36.i8, (int8x8_t)0x2E002E002E002ELL);
        LODWORD(__p[0]) = vmovn_s16(v36).u32[0];
        BYTE4(__p[0]) = 0;
        *(_DWORD *)buf = 67110914;
        *(_DWORD *)&buf[4] = v28;
        *(_WORD *)v108 = 2080;
        *(_QWORD *)&v108[2] = "IOAudio2_Control.cpp";
        v109 = 1024;
        v110 = 64;
        v111 = 1024;
        v112 = v29;
        v113 = 2080;
        v114 = &v99;
        v115 = 2080;
        p_cf = &cf;
        v117 = 2080;
        v118 = __p;
        v119 = 1024;
        v120 = v38;
        _os_log_debug_impl(&dword_1B57BA000, v24, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Building Core %u for Control (%s, %s, %s, %u)", buf, 0x42u);
LABEL_26:
        if (v95 < 0)
          operator delete(__p[0]);
        if (v98 < 0)
          operator delete((void *)cf);
        if (v101 < 0)
          operator delete(v99);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v5 = *(std::__shared_weak_count **)v108;
      v6 = **(NSObject ***)buf;
      if (*(_QWORD *)v108)
      {
        v7 = (unint64_t *)(*(_QWORD *)v108 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v9 = pthread_self();
        v10 = pthread_mach_thread_np(v9);
        v11 = *((_DWORD *)this + 8);
        v12 = *((_DWORD *)this + 12);
        v13.i32[0] = bswap32(*((_DWORD *)this + 13));
        v14 = vzip1_s8(v13, v13);
        v15.i64[0] = 0x1F0000001FLL;
        v15.i64[1] = 0x1F0000001FLL;
        v16.i64[0] = 0x1F0000001FLL;
        v16.i64[1] = 0x1F0000001FLL;
        v17.i64[0] = 0x5F0000005FLL;
        v17.i64[1] = 0x5F0000005FLL;
        *(int8x8_t *)v18.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v17, (uint32x4_t)vsraq_n_s32(v16, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v14), 0x18uLL), 0x18uLL))), v14, (int8x8_t)0x2E002E002E002ELL);
        v101 = 4;
        *(int8x8_t *)v18.i8 = vmovn_s16(v18);
        LODWORD(v99) = v18.i32[0];
        BYTE4(v99) = 0;
        v18.i32[0] = bswap32(v12);
        *(int8x8_t *)v18.i8 = vzip1_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v18.i8);
        v19.i64[0] = 0x1F0000001FLL;
        v19.i64[1] = 0x1F0000001FLL;
        *(int8x8_t *)v18.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v17, (uint32x4_t)vsraq_n_s32(v19, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v18.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v18.i8, (int8x8_t)0x2E002E002E002ELL);
        v98 = 4;
        *(int8x8_t *)v18.i8 = vmovn_s16(v18);
        LODWORD(cf) = v18.i32[0];
        BYTE4(cf) = 0;
        v20 = *((_DWORD *)this + 15);
        v18.i32[0] = bswap32(*((_DWORD *)this + 14));
        *(int8x8_t *)v18.i8 = vzip1_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v18.i8);
        v95 = 4;
        *(int8x8_t *)v18.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v17, (uint32x4_t)vsraq_n_s32(v15, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v18.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v18.i8, (int8x8_t)0x2E002E002E002ELL);
        LODWORD(__p[0]) = vmovn_s16(v18).u32[0];
        BYTE4(__p[0]) = 0;
        *(_DWORD *)buf = 67110914;
        *(_DWORD *)&buf[4] = v10;
        *(_WORD *)v108 = 2080;
        *(_QWORD *)&v108[2] = "IOAudio2_Control.cpp";
        v109 = 1024;
        v110 = 64;
        v111 = 1024;
        v112 = v11;
        v113 = 2080;
        v114 = &v99;
        v115 = 2080;
        p_cf = &cf;
        v117 = 2080;
        v118 = __p;
        v119 = 1024;
        v120 = v20;
        v21 = v6;
        v22 = OS_LOG_TYPE_DEFAULT;
LABEL_25:
        _os_log_impl(&dword_1B57BA000, v21, v22, "%6u %32s:%-5d Building Core %u for Control (%s, %s, %s, %u)", buf, 0x42u);
        goto LABEL_26;
      }
      break;
  }
  v55 = v103;
  if (v103)
  {
    p_shared_owners = (unint64_t *)&v103->__shared_owners_;
    do
      v57 = __ldaxr(p_shared_owners);
    while (__stlxr(v57 - 1, p_shared_owners));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  LODWORD(v99) = *((_DWORD *)this + 8);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v99, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v104, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v58 = *(std::__shared_weak_count **)v108;
  if (*(_QWORD *)v108)
  {
    v59 = (unint64_t *)(*(_QWORD *)v108 + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  LODWORD(v99) = *((_DWORD *)this + 13);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v99, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v104, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v61 = *(std::__shared_weak_count **)v108;
  if (*(_QWORD *)v108)
  {
    v62 = (unint64_t *)(*(_QWORD *)v108 + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  LODWORD(v99) = *((_DWORD *)this + 12);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v99, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v104, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v64 = *(std::__shared_weak_count **)v108;
  if (*(_QWORD *)v108)
  {
    v65 = (unint64_t *)(*(_QWORD *)v108 + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  LODWORD(v99) = *(_DWORD *)(*((_QWORD *)this + 3) + 16);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v99, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v104, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v67 = *(std::__shared_weak_count **)v108;
  if (*(_QWORD *)v108)
  {
    v68 = (unint64_t *)(*(_QWORD *)v108 + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "com.apple.iokit.IOAudio2");
  v99 = (void *)0x676C6F626F706C67;
  LODWORD(v100) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)buf, (uint64_t)&v99, cf);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v104, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v70 = *(std::__shared_weak_count **)v108;
  if (*(_QWORD *)v108)
  {
    v71 = (unint64_t *)(*(_QWORD *)v108 + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (cf)
    CFRelease(cf);
  v73 = *((_DWORD *)this + 8);
  *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(**((_QWORD **)this + 3) + 32) + 16);
  *(_DWORD *)v108 = v73;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>((uint64_t *)&v99, 0, (__int128 *)buf, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v104, (unsigned int *)v99 + 10, &v99);
  v74 = v100;
  if (v100)
  {
    v75 = (unint64_t *)&v100->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  LODWORD(v99) = *((_DWORD *)this + 14);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v99, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v104, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v77 = *(std::__shared_weak_count **)v108;
  if (*(_QWORD *)v108)
  {
    v78 = (unint64_t *)(*(_QWORD *)v108 + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  LODWORD(v99) = *((_DWORD *)this + 15);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v99, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v104, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v80 = *(std::__shared_weak_count **)v108;
  if (*(_QWORD *)v108)
  {
    v81 = (unint64_t *)(*(_QWORD *)v108 + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = (const __CFDictionary *)*((_QWORD *)this + 5);
  if (!v83)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(buf, v83, CFSTR("name"));
  if (v108[0])
  {
    cf = (CFTypeRef)0x676C6F626C6E616DLL;
    v97 = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)&v99, (uint64_t)&cf, *(CFTypeRef *)buf);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v104, (unsigned int *)v99 + 10, &v99);
    v84 = v100;
    if (v100)
    {
      v85 = (unint64_t *)&v100->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
  }
  AMCP::IOAudio2::Control::update_value((uint64_t)this, (uint64_t)v104);
  AMCP::IOAudio2::Control::update_range((uint64_t)this, (uint64_t)v104);
  AMCP::Core::Broker::make_core(&v92, *(std::__shared_mutex_base **)(*(_QWORD *)(**((_QWORD **)this + 3) + 32) + 16), (uint64_t)v104, *((unsigned int *)this + 8));
  v87 = v93;
  if (v93)
  {
    v88 = (unint64_t *)&v93->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)v105);
  v90 = v104[0];
  v104[0] = 0;
  if (v90)
    operator delete(v90);
}

void sub_1B5C17DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

void AMCP::IOAudio2::Control::update_value(uint64_t a1, uint64_t a2)
{
  const __CFDictionary *v3;
  int v4;
  _QWORD *v5;
  unint64_t *v6;
  const void *v7;
  uint64_t v8;
  unint64_t *v9;
  const void *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t (***v20)();
  uint64_t v21;
  const __CFDictionary *v22;
  char *v23;
  unint64_t *v24;
  uint64_t (**v25)();
  const __CFDictionary *v26;
  int v27;
  int v28;
  float v29;
  int v30;
  _QWORD *v31;
  unint64_t *v32;
  int v33;
  uint64_t v34;
  unint64_t *v35;
  const void *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t (***v48)();
  uint64_t (***v49)();
  uint64_t v50;
  BOOL BOOL_from;
  _QWORD *v52;
  unint64_t *v53;
  const void *v54;
  uint64_t v55;
  unint64_t *v56;
  const void *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  __n128 v67;
  uint64_t (***v68)();
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  __int128 v72;
  int v73;
  uint64_t v74;
  char *v75;
  uint64_t (***v76)();
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  CFDictionaryRef *v96;
  const void *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *p_shared_owners;
  void **v104;
  const __CFArray *v105;
  CFIndex Count;
  const __CFArray *v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  char *v112;
  uint64_t (***v113)();
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  __int128 v133;
  unint64_t *v134;
  unint64_t v135;
  __int128 v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t (***v149)();
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  int v153;
  uint64_t v154;
  char *v155;
  uint64_t (***v156)();
  uint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t *v182;
  const __CFDictionary *v183;
  int v184;
  _QWORD *v185;
  unint64_t *v186;
  const __CFDictionary *v187;
  unsigned int v188;
  const __CFDictionary *v189;
  unsigned int v190;
  const __CFDictionary *v191;
  unsigned int v192;
  const void *v193;
  uint64_t v194;
  unint64_t *v195;
  const void *v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t (***v208)();
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  __int128 v212;
  int v213;
  uint64_t v214;
  char *v215;
  uint64_t (***v216)();
  uint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t *v233;
  int v234;
  int v235;
  unint64_t v236;
  char *v237;
  _DWORD *v238;
  char *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  BOOL v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  __int128 v248;
  int v249;
  CFTypeRef v250;
  char *v251;
  uint64_t (***v252)();
  uint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  const void *ValueAtIndex;
  const void *v272;
  int v273;
  int v274;
  unint64_t shared_weak_owners;
  char *shared_owners;
  _DWORD *v277;
  char *v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  _DWORD *v284;
  int v285;
  _DWORD *v286;
  unint64_t v287;
  int v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t (***v296)();
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  char v300;
  __int128 v301;
  int v302;
  uint64_t v303;
  char *v304;
  uint64_t (***v305)();
  uint64_t v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::runtime_error *exception;
  void *v326;
  const std::error_category *v327;
  std::runtime_error *v328;
  std::runtime_error *v329;
  std::runtime_error *v330;
  std::runtime_error *v331;
  void *v332;
  const std::error_category *v333;
  void *v334;
  const std::error_category *v335;
  std::runtime_error *v336;
  void *v337;
  const std::error_category *v338;
  std::runtime_error *v339;
  void *v340;
  const std::error_category *v341;
  std::runtime_error *v342;
  std::runtime_error *v343;
  std::runtime_error *v344;
  std::runtime_error *v345;
  std::runtime_error *v346;
  std::runtime_error *v347;
  std::runtime_error *v348;
  void *v349;
  const std::error_category *v350;
  std::runtime_error *v351;
  std::runtime_error *v352;
  __int128 v353;
  const void *v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  BOOL v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  int v364;
  __int128 v365;
  CFIndex v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  CFTypeRef cf[9];
  io_connect_t connect[2];
  std::__shared_weak_count *v374;
  io_connect_t v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  void (*v383)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t (**v384)();
  std::__shared_weak_count *v385;
  _QWORD *v386;
  uint64_t (***v387)();
  uint64_t v388;

  v388 = *MEMORY[0x1E0C80C00];
  if (AMCP::is_base_of((AMCP *)0x736C6472, *(_DWORD *)(a1 + 52)))
  {
    v3 = *(const __CFDictionary **)(a1 + 40);
    if (v3)
    {
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, v3, CFSTR("value"));
      if (!cf[0])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v4 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf[0]);
      v5 = operator new(0x20uLL);
      v5[1] = 0;
      v6 = v5 + 1;
      v5[2] = 0;
      *v5 = &off_1E6998ED0;
      *((_DWORD *)v5 + 6) = v4;
      *(_QWORD *)&v376 = v5 + 3;
      *((_QWORD *)&v376 + 1) = v5;
      if (cf[0])
        CFRelease(cf[0]);
      AMCP::IOAudio2::Device::get_device_connection((AMCP::IOAudio2::Device *)connect, **(_DWORD **)(*(_QWORD *)(a1 + 24) + 360));
      v7 = *(const void **)(a1 + 32);
      v8 = **(_QWORD **)(a1 + 24);
      v10 = *(const void **)(v8 + 32);
      v9 = *(unint64_t **)(v8 + 40);
      *(_QWORD *)&v380 = v10;
      *((_QWORD *)&v380 + 1) = v9;
      if (v9)
      {
        v11 = v9 + 1;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      *(_QWORD *)&v378 = v5 + 3;
      *((_QWORD *)&v378 + 1) = v5;
      do
        v13 = __ldxr(v6);
      while (__stxr(v13 + 1, v6));
      cf[0] = v5 + 3;
      cf[1] = v5;
      do
        v14 = __ldxr(v6);
      while (__stxr(v14 + 1, v6));
      LODWORD(cf[2]) = connect[0];
      v15 = IOConnectAddRef(connect[0]);
      if ((_DWORD)v15)
      {
        v326 = __cxa_allocate_exception(0x20uLL);
        v327 = std::system_category();
        MEMORY[0x1B5E5022C](v326, v15, v327, "Error on IOConnectAddRef");
        __cxa_throw(v326, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
      }
      *(CFTypeRef *)((char *)&cf[2] + 4) = v7;
      cf[4] = v10;
      cf[5] = v9;
      if (v9)
      {
        v16 = v9 + 1;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v379, 0, 1.58366012e190);
      v18 = v379;
      v19 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
      v378 = 0uLL;
      v384 = &off_1E6998F20;
      v385 = (std::__shared_weak_count *)(v5 + 3);
      v386 = v5;
      v387 = &v384;
      v381 = 0u;
      v382 = 0u;
      v383 = 0;
      std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)&v381, (uint64_t)&v384);
      v383 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v18, v19, (AMCP *)&v381);
      if (v383)
        v383(0, (uint64_t)&v381, 0, 0);
      v20 = v387;
      if (v387 == &v384)
      {
        v21 = 4;
        v20 = &v384;
      }
      else
      {
        if (!v387)
          goto LABEL_72;
        v21 = 5;
      }
      (*v20)[v21]();
LABEL_72:
      AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v379);
      v70 = v379;
      v71 = AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>();
      v72 = *(_OWORD *)cf;
      memset(cf, 0, 20);
      v73 = (int)cf[2];
      v74 = *(uint64_t *)((char *)&cf[2] + 4);
      v357 = *(_OWORD *)&cf[4];
      v365 = v72;
      cf[4] = 0;
      cf[5] = 0;
      v387 = 0;
      v75 = (char *)operator new(0x38uLL);
      *(_QWORD *)v75 = &off_1E6999010;
      *(_OWORD *)(v75 + 8) = v365;
      *((_DWORD *)v75 + 6) = v73;
      *(_QWORD *)(v75 + 28) = v74;
      *(_OWORD *)(v75 + 40) = v357;
      v387 = (uint64_t (***)())v75;
      v381 = 0u;
      v382 = 0u;
      v383 = 0;
      std::__function::__value_func<void ()(unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)&v381, (uint64_t)&v384);
      v383 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(unsigned int const&)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v70, v71, (AMCP *)&v381);
      if (v383)
        v383(0, (uint64_t)&v381, 0, 0);
      v76 = v387;
      if (v387 == &v384)
      {
        v77 = 4;
        v76 = &v384;
      }
      else
      {
        if (!v387)
        {
LABEL_79:
          IOConnectRelease(0);
          AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(v379);
          std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v379 + 40), &v379);
          v78 = (std::__shared_weak_count *)*((_QWORD *)&v379 + 1);
          if (*((_QWORD *)&v379 + 1))
          {
            v79 = (unint64_t *)(*((_QWORD *)&v379 + 1) + 8);
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          v81 = (std::__shared_weak_count *)cf[5];
          if (cf[5])
          {
            v82 = (unint64_t *)((char *)cf[5] + 8);
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          IOConnectRelease((io_connect_t)cf[2]);
          v84 = (std::__shared_weak_count *)cf[1];
          if (cf[1])
          {
            v85 = (unint64_t *)((char *)cf[1] + 8);
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
          v87 = (std::__shared_weak_count *)*((_QWORD *)&v378 + 1);
          if (*((_QWORD *)&v378 + 1))
          {
            v88 = (unint64_t *)(*((_QWORD *)&v378 + 1) + 8);
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
            }
          }
          v90 = (std::__shared_weak_count *)*((_QWORD *)&v380 + 1);
          if (*((_QWORD *)&v380 + 1))
          {
            v91 = (unint64_t *)(*((_QWORD *)&v380 + 1) + 8);
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v90);
            }
          }
          IOConnectRelease(connect[0]);
          v93 = (std::__shared_weak_count *)*((_QWORD *)&v376 + 1);
          if (*((_QWORD *)&v376 + 1))
          {
            v94 = (unint64_t *)(*((_QWORD *)&v376 + 1) + 8);
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
LABEL_300:
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
            return;
          }
          return;
        }
        v77 = 5;
      }
      (*v76)[v77]();
      goto LABEL_79;
    }
LABEL_444:
    v329 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v329);
    __cxa_throw(v329, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!AMCP::is_base_of((AMCP *)0x6C65766C, *(_DWORD *)(a1 + 52)))
  {
    if (AMCP::is_base_of((AMCP *)0x746F676C, *(_DWORD *)(a1 + 52)))
    {
      cf[0] = CFSTR("value");
      BOOL_from = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>((CFDictionaryRef *)(a1 + 40), cf);
      v52 = operator new(0x20uLL);
      v52[1] = 0;
      v53 = v52 + 1;
      v52[2] = 0;
      *((_BYTE *)v52 + 24) = BOOL_from;
      *v52 = &off_1E6999C08;
      *(_QWORD *)&v376 = v52 + 3;
      *((_QWORD *)&v376 + 1) = v52;
      AMCP::IOAudio2::Device::get_device_connection((AMCP::IOAudio2::Device *)connect, **(_DWORD **)(*(_QWORD *)(a1 + 24) + 360));
      v54 = *(const void **)(a1 + 32);
      v55 = **(_QWORD **)(a1 + 24);
      v57 = *(const void **)(v55 + 32);
      v56 = *(unint64_t **)(v55 + 40);
      *(_QWORD *)&v380 = v57;
      *((_QWORD *)&v380 + 1) = v56;
      if (v56)
      {
        v58 = v56 + 1;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      *(_QWORD *)&v378 = v52 + 3;
      *((_QWORD *)&v378 + 1) = v52;
      do
        v60 = __ldxr(v53);
      while (__stxr(v60 + 1, v53));
      cf[0] = v52 + 3;
      cf[1] = v52;
      do
        v61 = __ldxr(v53);
      while (__stxr(v61 + 1, v53));
      LODWORD(cf[2]) = connect[0];
      v62 = IOConnectAddRef(connect[0]);
      if ((_DWORD)v62)
      {
        v337 = __cxa_allocate_exception(0x20uLL);
        v338 = std::system_category();
        MEMORY[0x1B5E5022C](v337, v62, v338, "Error on IOConnectAddRef");
        __cxa_throw(v337, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
      }
      *(CFTypeRef *)((char *)&cf[2] + 4) = v54;
      cf[4] = v57;
      cf[5] = v56;
      if (v56)
      {
        v63 = v56 + 1;
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v379, 0, 1.58366006e190);
      v65 = v379;
      v66 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
      v378 = 0uLL;
      v384 = &off_1E6999C58;
      v385 = (std::__shared_weak_count *)(v52 + 3);
      v386 = v52;
      v387 = &v384;
      v381 = 0u;
      v382 = 0u;
      v383 = 0;
      std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v381, (uint64_t)&v384);
      v383 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v65, v66, (AMCP *)&v381);
      if (v383)
        v67.n128_f64[0] = ((double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))v383)(0, (uint64_t)&v381, 0, 0);
      v68 = v387;
      if (v387 == &v384)
      {
        v69 = 4;
        v68 = &v384;
      }
      else
      {
        if (!v387)
          goto LABEL_265;
        v69 = 5;
      }
      ((void (*)(__n128))(*v68)[v69])(v67);
LABEL_265:
      AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v379);
      v210 = v379;
      v211 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
      v212 = *(_OWORD *)cf;
      memset(cf, 0, 20);
      v213 = (int)cf[2];
      v214 = *(uint64_t *)((char *)&cf[2] + 4);
      v361 = *(_OWORD *)&cf[4];
      v368 = v212;
      cf[4] = 0;
      cf[5] = 0;
      v387 = 0;
      v215 = (char *)operator new(0x38uLL);
      *(_QWORD *)v215 = &off_1E6999D48;
      *(_OWORD *)(v215 + 8) = v368;
      *((_DWORD *)v215 + 6) = v213;
      *(_QWORD *)(v215 + 28) = v214;
      *(_OWORD *)(v215 + 40) = v361;
      v387 = (uint64_t (***)())v215;
      v381 = 0u;
      v382 = 0u;
      v383 = 0;
      std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)&v381, (uint64_t)&v384);
      v383 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v210, v211, (AMCP *)&v381);
      if (v383)
        v383(0, (uint64_t)&v381, 0, 0);
      v216 = v387;
      if (v387 == &v384)
      {
        v217 = 4;
        v216 = &v384;
      }
      else
      {
        if (!v387)
        {
LABEL_272:
          IOConnectRelease(0);
          AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(v379);
          std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v379 + 40), &v379);
          v218 = (std::__shared_weak_count *)*((_QWORD *)&v379 + 1);
          if (*((_QWORD *)&v379 + 1))
          {
            v219 = (unint64_t *)(*((_QWORD *)&v379 + 1) + 8);
            do
              v220 = __ldaxr(v219);
            while (__stlxr(v220 - 1, v219));
            if (!v220)
            {
              ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
              std::__shared_weak_count::__release_weak(v218);
            }
          }
          v221 = (std::__shared_weak_count *)cf[5];
          if (cf[5])
          {
            v222 = (unint64_t *)((char *)cf[5] + 8);
            do
              v223 = __ldaxr(v222);
            while (__stlxr(v223 - 1, v222));
            if (!v223)
            {
              ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
              std::__shared_weak_count::__release_weak(v221);
            }
          }
          IOConnectRelease((io_connect_t)cf[2]);
          v224 = (std::__shared_weak_count *)cf[1];
          if (cf[1])
          {
            v225 = (unint64_t *)((char *)cf[1] + 8);
            do
              v226 = __ldaxr(v225);
            while (__stlxr(v226 - 1, v225));
            if (!v226)
            {
              ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
              std::__shared_weak_count::__release_weak(v224);
            }
          }
          v227 = (std::__shared_weak_count *)*((_QWORD *)&v378 + 1);
          if (*((_QWORD *)&v378 + 1))
          {
            v228 = (unint64_t *)(*((_QWORD *)&v378 + 1) + 8);
            do
              v229 = __ldaxr(v228);
            while (__stlxr(v229 - 1, v228));
            if (!v229)
            {
              ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
              std::__shared_weak_count::__release_weak(v227);
            }
          }
          v230 = (std::__shared_weak_count *)*((_QWORD *)&v380 + 1);
          if (*((_QWORD *)&v380 + 1))
          {
            v231 = (unint64_t *)(*((_QWORD *)&v380 + 1) + 8);
            do
              v232 = __ldaxr(v231);
            while (__stlxr(v232 - 1, v231));
            if (!v232)
            {
              ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
              std::__shared_weak_count::__release_weak(v230);
            }
          }
          IOConnectRelease(connect[0]);
          v93 = (std::__shared_weak_count *)*((_QWORD *)&v376 + 1);
          if (*((_QWORD *)&v376 + 1))
          {
            v233 = (unint64_t *)(*((_QWORD *)&v376 + 1) + 8);
            do
              v95 = __ldaxr(v233);
            while (__stlxr(v95 - 1, v233));
            goto LABEL_300;
          }
          return;
        }
        v217 = 5;
      }
      (*v216)[v217]();
      goto LABEL_272;
    }
    if (AMCP::is_base_of((AMCP *)0x736C6374, *(_DWORD *)(a1 + 52)))
    {
      v96 = (CFDictionaryRef *)(a1 + 40);
      cf[0] = CFSTR("multi-selector");
      v358 = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>((CFDictionaryRef *)(a1 + 40), cf);
      AMCP::IOAudio2::Device::get_device_connection((AMCP::IOAudio2::Device *)&v375, **(_DWORD **)(*(_QWORD *)(a1 + 24) + 360));
      v97 = *(const void **)(a1 + 32);
      v98 = **(_QWORD **)(a1 + 24);
      v99 = *(unint64_t **)(v98 + 40);
      v354 = *(const void **)(v98 + 32);
      *(_QWORD *)&v376 = v354;
      *((_QWORD *)&v376 + 1) = v99;
      if (v99)
      {
        v100 = v99 + 1;
        do
          v101 = __ldxr(v100);
        while (__stxr(v101 + 1, v100));
      }
      v102 = (std::__shared_weak_count *)operator new(0x30uLL);
      v102->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v102->__shared_owners_;
      v102->__shared_weak_owners_ = 0;
      v102[1].__vftable = 0;
      v104 = (void **)&v102[1].__vftable;
      v102->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6999E58;
      v102[1].__shared_owners_ = 0;
      v102[1].__shared_weak_owners_ = 0;
      *(_QWORD *)&v380 = v102 + 1;
      *((_QWORD *)&v380 + 1) = v102;
      if (!*v96)
      {
        v339 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v339, "Could not construct");
        __cxa_throw(v339, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*>(&v379, *v96, CFSTR("value"));
      if (BYTE8(v379))
      {
        v105 = (const __CFArray *)v379;
        if ((_QWORD)v379)
        {
          Count = CFArrayGetCount((CFArrayRef)v379);
          v107 = (const __CFArray *)v379;
          v366 = (_QWORD)v379 ? CFArrayGetCount((CFArrayRef)v379) : 0;
          if (Count)
          {
            v270 = 0;
            do
            {
              if (v105 == v107 && v270 == v366)
                break;
              if (CFArrayGetCount(v105) > v270)
              {
                ValueAtIndex = CFArrayGetValueAtIndex(v105, v270);
                v272 = ValueAtIndex;
                if (ValueAtIndex)
                  continue;
              }
              v328 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v328, "Could not find item");
              __cxa_throw(v328, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              CFRetain(ValueAtIndex);
              applesauce::CF::NumberRef::NumberRef((applesauce::CF::NumberRef *)cf, v272);
              if (!cf[0])
              {
                v336 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v336, "Could not construct");
                __cxa_throw(v336, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              v273 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf[0]);
              v274 = v273;
              shared_owners = (char *)v102[1].__shared_owners_;
              shared_weak_owners = v102[1].__shared_weak_owners_;
              if ((unint64_t)shared_owners >= shared_weak_owners)
              {
                v278 = (char *)*v104;
                v279 = (shared_owners - (_BYTE *)*v104) >> 2;
                v280 = v279 + 1;
                if ((unint64_t)(v279 + 1) >> 62)
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                v281 = shared_weak_owners - (_QWORD)v278;
                if (v281 >> 1 > v280)
                  v280 = v281 >> 1;
                v243 = (unint64_t)v281 >= 0x7FFFFFFFFFFFFFFCLL;
                v282 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v243)
                  v282 = v280;
                if (v282)
                {
                  v282 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v282);
                  v278 = (char *)v102[1].__vftable;
                  shared_owners = (char *)v102[1].__shared_owners_;
                }
                else
                {
                  v283 = 0;
                }
                v284 = (_DWORD *)(v282 + 4 * v279);
                *v284 = v274;
                v277 = v284 + 1;
                while (shared_owners != v278)
                {
                  v285 = *((_DWORD *)shared_owners - 1);
                  shared_owners -= 4;
                  *--v284 = v285;
                }
                v102[1].__vftable = (std::__shared_weak_count_vtbl *)v284;
                v102[1].__shared_owners_ = (uint64_t)v277;
                v102[1].__shared_weak_owners_ = v282 + 4 * v283;
                if (v278)
                  operator delete(v278);
              }
              else
              {
                *(_DWORD *)shared_owners = v273;
                v277 = shared_owners + 4;
              }
              v102[1].__shared_owners_ = (uint64_t)v277;
              if (cf[0])
                CFRelease(cf[0]);
              ++v270;
            }
            while (v270 != Count);
          }
        }
      }
      else
      {
        if (!*v96)
        {
          v351 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v351, "Could not construct");
          __cxa_throw(v351, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *v96, CFSTR("value"));
        if (!cf[0])
        {
          v352 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v352, "Could not construct");
          __cxa_throw(v352, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v234 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf[0]);
        v235 = v234;
        v237 = (char *)v102[1].__shared_owners_;
        v236 = v102[1].__shared_weak_owners_;
        if ((unint64_t)v237 >= v236)
        {
          v239 = (char *)*v104;
          v240 = (v237 - (_BYTE *)*v104) >> 2;
          v241 = v240 + 1;
          if ((unint64_t)(v240 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v242 = v236 - (_QWORD)v239;
          if (v242 >> 1 > v241)
            v241 = v242 >> 1;
          v243 = (unint64_t)v242 >= 0x7FFFFFFFFFFFFFFCLL;
          v244 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v243)
            v244 = v241;
          if (v244)
          {
            v244 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v244);
            v239 = (char *)v102[1].__vftable;
            v237 = (char *)v102[1].__shared_owners_;
          }
          else
          {
            v245 = 0;
          }
          v286 = (_DWORD *)(v244 + 4 * v240);
          v287 = v244 + 4 * v245;
          *v286 = v235;
          v238 = v286 + 1;
          while (v237 != v239)
          {
            v288 = *((_DWORD *)v237 - 1);
            v237 -= 4;
            *--v286 = v288;
          }
          v102[1].__vftable = (std::__shared_weak_count_vtbl *)v286;
          v102[1].__shared_owners_ = (uint64_t)v238;
          v102[1].__shared_weak_owners_ = v287;
          if (v239)
            operator delete(v239);
        }
        else
        {
          *(_DWORD *)v237 = v234;
          v238 = v237 + 4;
        }
        v102[1].__shared_owners_ = (uint64_t)v238;
        if (cf[0])
          CFRelease(cf[0]);
      }
      *(_QWORD *)connect = v102 + 1;
      v374 = v102;
      do
        v289 = __ldxr(p_shared_owners);
      while (__stxr(v289 + 1, p_shared_owners));
      LOBYTE(cf[0]) = v358;
      cf[1] = &v102[1];
      cf[2] = v102;
      do
        v290 = __ldxr(p_shared_owners);
      while (__stxr(v290 + 1, p_shared_owners));
      LODWORD(cf[3]) = v375;
      v291 = IOConnectAddRef(v375);
      if ((_DWORD)v291)
      {
        v340 = __cxa_allocate_exception(0x20uLL);
        v341 = std::system_category();
        MEMORY[0x1B5E5022C](v340, v291, v341, "Error on IOConnectAddRef");
        __cxa_throw(v340, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
      }
      *(CFTypeRef *)((char *)&cf[3] + 4) = v97;
      cf[5] = v354;
      cf[6] = v99;
      if (v99)
      {
        v292 = v99 + 1;
        do
          v293 = __ldxr(v292);
        while (__stxr(v293 + 1, v292));
      }
      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v378, 0, 1.58366012e190);
      v294 = v378;
      v295 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
      *(_QWORD *)connect = 0;
      v374 = 0;
      v384 = &off_1E6999EA8;
      v385 = v102 + 1;
      v386 = &v102->__vftable;
      v387 = &v384;
      v381 = 0u;
      v382 = 0u;
      v383 = 0;
      std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v381, (uint64_t)&v384);
      v383 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v294, v295, (AMCP *)&v381);
      if (v383)
        v383(0, (uint64_t)&v381, 0, 0);
      v296 = v387;
      if (v387 == &v384)
      {
        v297 = 4;
        v296 = &v384;
      }
      else
      {
        if (!v387)
          goto LABEL_401;
        v297 = 5;
      }
      (*v296)[v297]();
LABEL_401:
      AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(v378);
      v298 = v378;
      v299 = AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>();
      v300 = (char)cf[0];
      v301 = *(_OWORD *)&cf[1];
      memset(&cf[1], 0, 20);
      v302 = (int)cf[3];
      v303 = *(uint64_t *)((char *)&cf[3] + 4);
      v363 = *(_OWORD *)&cf[5];
      v370 = v301;
      cf[5] = 0;
      cf[6] = 0;
      v387 = 0;
      v304 = (char *)operator new(0x40uLL);
      *(_QWORD *)v304 = &off_1E6999F98;
      v304[8] = v300;
      *((_OWORD *)v304 + 1) = v370;
      *((_DWORD *)v304 + 8) = v302;
      *(_QWORD *)(v304 + 36) = v303;
      *((_OWORD *)v304 + 3) = v363;
      v387 = (uint64_t (***)())v304;
      v381 = 0u;
      v382 = 0u;
      v383 = 0;
      std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)&v381, (uint64_t)&v384);
      v383 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(std::vector<unsigned int> const&)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v298, v299, (AMCP *)&v381);
      if (v383)
        v383(0, (uint64_t)&v381, 0, 0);
      v305 = v387;
      if (v387 == &v384)
      {
        v306 = 4;
        v305 = &v384;
      }
      else
      {
        if (!v387)
          goto LABEL_408;
        v306 = 5;
      }
      (*v305)[v306]();
LABEL_408:
      IOConnectRelease(0);
      AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(v378);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v378 + 40), &v378);
      v307 = (std::__shared_weak_count *)*((_QWORD *)&v378 + 1);
      if (*((_QWORD *)&v378 + 1))
      {
        v308 = (unint64_t *)(*((_QWORD *)&v378 + 1) + 8);
        do
          v309 = __ldaxr(v308);
        while (__stlxr(v309 - 1, v308));
        if (!v309)
        {
          ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
          std::__shared_weak_count::__release_weak(v307);
        }
      }
      v310 = (std::__shared_weak_count *)cf[6];
      if (cf[6])
      {
        v311 = (unint64_t *)((char *)cf[6] + 8);
        do
          v312 = __ldaxr(v311);
        while (__stlxr(v312 - 1, v311));
        if (!v312)
        {
          ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
          std::__shared_weak_count::__release_weak(v310);
        }
      }
      IOConnectRelease((io_connect_t)cf[3]);
      v313 = (std::__shared_weak_count *)cf[2];
      if (cf[2])
      {
        v314 = (unint64_t *)((char *)cf[2] + 8);
        do
          v315 = __ldaxr(v314);
        while (__stlxr(v315 - 1, v314));
        if (!v315)
        {
          ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
          std::__shared_weak_count::__release_weak(v313);
        }
      }
      v316 = v374;
      if (v374)
      {
        v317 = (unint64_t *)&v374->__shared_owners_;
        do
          v318 = __ldaxr(v317);
        while (__stlxr(v318 - 1, v317));
        if (!v318)
        {
          ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
          std::__shared_weak_count::__release_weak(v316);
        }
      }
      std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v379);
      v319 = (std::__shared_weak_count *)*((_QWORD *)&v380 + 1);
      if (*((_QWORD *)&v380 + 1))
      {
        v320 = (unint64_t *)(*((_QWORD *)&v380 + 1) + 8);
        do
          v321 = __ldaxr(v320);
        while (__stlxr(v321 - 1, v320));
        if (!v321)
        {
          ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
          std::__shared_weak_count::__release_weak(v319);
        }
      }
      v322 = (std::__shared_weak_count *)*((_QWORD *)&v376 + 1);
      if (*((_QWORD *)&v376 + 1))
      {
        v323 = (unint64_t *)(*((_QWORD *)&v376 + 1) + 8);
        do
          v324 = __ldaxr(v323);
        while (__stlxr(v324 - 1, v323));
        if (!v324)
        {
          ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
          std::__shared_weak_count::__release_weak(v322);
        }
      }
      IOConnectRelease(v375);
      return;
    }
    if (!AMCP::is_base_of((AMCP *)0x7370616E, *(_DWORD *)(a1 + 52)))
      return;
    v183 = *(const __CFDictionary **)(a1 + 40);
    if (!v183)
      goto LABEL_444;
    applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, v183, CFSTR("value"));
    if (!cf[0])
    {
      v342 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v342, "Could not construct");
      __cxa_throw(v342, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v184 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf[0]);
    v185 = operator new(0x20uLL);
    v185[1] = 0;
    v186 = v185 + 1;
    v185[2] = 0;
    *v185 = &off_1E6998ED0;
    *((_DWORD *)v185 + 6) = v184;
    *(_QWORD *)&v380 = v185 + 3;
    *((_QWORD *)&v380 + 1) = v185;
    if (cf[0])
      CFRelease(cf[0]);
    v187 = *(const __CFDictionary **)(a1 + 40);
    if (!v187)
    {
      v343 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v343, "Could not construct");
      __cxa_throw(v343, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, v187, CFSTR("left value"));
    if (!cf[0])
    {
      v344 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v344, "Could not construct");
      __cxa_throw(v344, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v188 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf[0]);
    if (cf[0])
      CFRelease(cf[0]);
    v189 = *(const __CFDictionary **)(a1 + 40);
    if (!v189)
    {
      v345 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v345, "Could not construct");
      __cxa_throw(v345, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, v189, CFSTR("center value"));
    if (!cf[0])
    {
      v346 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v346, "Could not construct");
      __cxa_throw(v346, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v190 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf[0]);
    if (cf[0])
      CFRelease(cf[0]);
    v191 = *(const __CFDictionary **)(a1 + 40);
    if (!v191)
    {
      v347 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v347, "Could not construct");
      __cxa_throw(v347, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, v191, CFSTR("right value"));
    if (!cf[0])
    {
      v348 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v348, "Could not construct");
      __cxa_throw(v348, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v192 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf[0]);
    if (cf[0])
      CFRelease(cf[0]);
    AMCP::IOAudio2::Device::get_device_connection((AMCP::IOAudio2::Device *)connect, **(_DWORD **)(*(_QWORD *)(a1 + 24) + 360));
    v193 = *(const void **)(a1 + 32);
    v194 = **(_QWORD **)(a1 + 24);
    v196 = *(const void **)(v194 + 32);
    v195 = *(unint64_t **)(v194 + 40);
    *(_QWORD *)&v379 = v196;
    *((_QWORD *)&v379 + 1) = v195;
    if (v195)
    {
      v197 = v195 + 1;
      do
        v198 = __ldxr(v197);
      while (__stxr(v198 + 1, v197));
    }
    *(_QWORD *)&v376 = v185 + 3;
    *((_QWORD *)&v376 + 1) = v185;
    do
      v199 = __ldxr(v186);
    while (__stxr(v199 + 1, v186));
    *(_QWORD *)&v377 = __PAIR64__(v190, v188);
    DWORD2(v377) = v192;
    cf[0] = v185 + 3;
    cf[1] = v185;
    do
      v200 = __ldxr(v186);
    while (__stxr(v200 + 1, v186));
    cf[2] = (CFTypeRef)__PAIR64__(v190, v188);
    cf[3] = (CFTypeRef)__PAIR64__(connect[0], v192);
    v201 = IOConnectAddRef(connect[0]);
    if ((_DWORD)v201)
    {
      v349 = __cxa_allocate_exception(0x20uLL);
      v350 = std::system_category();
      MEMORY[0x1B5E5022C](v349, v201, v350, "Error on IOConnectAddRef");
      __cxa_throw(v349, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
    cf[4] = v193;
    cf[5] = v196;
    cf[6] = v195;
    if (v195)
    {
      v202 = v195 + 1;
      do
        v203 = __ldxr(v202);
      while (__stxr(v203 + 1, v202));
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v378, 0, 1.58366012e190);
    v204 = v378;
    v205 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
    v376 = 0uLL;
    v387 = 0;
    v206 = operator new(0x28uLL);
    *v206 = &off_1E699A210;
    v206[1] = v185 + 3;
    v207 = v377;
    v206[2] = v185;
    v206[3] = v207;
    *((_DWORD *)v206 + 8) = DWORD2(v377);
    v387 = (uint64_t (***)())v206;
    v381 = 0u;
    v382 = 0u;
    v383 = 0;
    std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)&v381, (uint64_t)&v384);
    v383 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v204, v205, (AMCP *)&v381);
    if (v383)
      v383(0, (uint64_t)&v381, 0, 0);
    v208 = v387;
    if (v387 == &v384)
    {
      v209 = 4;
      v208 = &v384;
    }
    else
    {
      if (!v387)
        goto LABEL_315;
      v209 = 5;
    }
    (*v208)[v209]();
LABEL_315:
    AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(v378);
    v246 = v378;
    v247 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
    v248 = *(_OWORD *)cf;
    cf[0] = 0;
    cf[1] = 0;
    v249 = HIDWORD(cf[3]);
    HIDWORD(cf[3]) = 0;
    v250 = cf[4];
    v362 = *(_OWORD *)&cf[5];
    v369 = v248;
    cf[5] = 0;
    cf[6] = 0;
    v387 = 0;
    v251 = (char *)operator new(0x40uLL);
    *(_QWORD *)v251 = &off_1E699A290;
    *(_OWORD *)(v251 + 8) = v369;
    *((CFTypeRef *)v251 + 3) = cf[2];
    *((_DWORD *)v251 + 8) = cf[3];
    *((_DWORD *)v251 + 9) = v249;
    *((_QWORD *)v251 + 5) = v250;
    *((_OWORD *)v251 + 3) = v362;
    v387 = (uint64_t (***)())v251;
    v381 = 0u;
    v382 = 0u;
    v383 = 0;
    std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)&v381, (uint64_t)&v384);
    v383 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v246, v247, (AMCP *)&v381);
    if (v383)
      v383(0, (uint64_t)&v381, 0, 0);
    v252 = v387;
    if (v387 == &v384)
    {
      v253 = 4;
      v252 = &v384;
    }
    else
    {
      if (!v387)
      {
LABEL_322:
        IOConnectRelease(0);
        AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(v378);
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v378 + 40), &v378);
        v254 = (std::__shared_weak_count *)*((_QWORD *)&v378 + 1);
        if (*((_QWORD *)&v378 + 1))
        {
          v255 = (unint64_t *)(*((_QWORD *)&v378 + 1) + 8);
          do
            v256 = __ldaxr(v255);
          while (__stlxr(v256 - 1, v255));
          if (!v256)
          {
            ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
            std::__shared_weak_count::__release_weak(v254);
          }
        }
        v257 = (std::__shared_weak_count *)cf[6];
        if (cf[6])
        {
          v258 = (unint64_t *)((char *)cf[6] + 8);
          do
            v259 = __ldaxr(v258);
          while (__stlxr(v259 - 1, v258));
          if (!v259)
          {
            ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
            std::__shared_weak_count::__release_weak(v257);
          }
        }
        IOConnectRelease(HIDWORD(cf[3]));
        v260 = (std::__shared_weak_count *)cf[1];
        if (cf[1])
        {
          v261 = (unint64_t *)((char *)cf[1] + 8);
          do
            v262 = __ldaxr(v261);
          while (__stlxr(v262 - 1, v261));
          if (!v262)
          {
            ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
            std::__shared_weak_count::__release_weak(v260);
          }
        }
        v263 = (std::__shared_weak_count *)*((_QWORD *)&v376 + 1);
        if (*((_QWORD *)&v376 + 1))
        {
          v264 = (unint64_t *)(*((_QWORD *)&v376 + 1) + 8);
          do
            v265 = __ldaxr(v264);
          while (__stlxr(v265 - 1, v264));
          if (!v265)
          {
            ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
            std::__shared_weak_count::__release_weak(v263);
          }
        }
        v266 = (std::__shared_weak_count *)*((_QWORD *)&v379 + 1);
        if (*((_QWORD *)&v379 + 1))
        {
          v267 = (unint64_t *)(*((_QWORD *)&v379 + 1) + 8);
          do
            v268 = __ldaxr(v267);
          while (__stlxr(v268 - 1, v267));
          if (!v268)
          {
            ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
            std::__shared_weak_count::__release_weak(v266);
          }
        }
        IOConnectRelease(connect[0]);
        v93 = (std::__shared_weak_count *)*((_QWORD *)&v380 + 1);
        if (*((_QWORD *)&v380 + 1))
        {
          v269 = (unint64_t *)(*((_QWORD *)&v380 + 1) + 8);
          do
            v95 = __ldaxr(v269);
          while (__stlxr(v95 - 1, v269));
          goto LABEL_300;
        }
        return;
      }
      v253 = 5;
    }
    (*v252)[v253]();
    goto LABEL_322;
  }
  v22 = *(const __CFDictionary **)(a1 + 40);
  if (!v22)
    goto LABEL_444;
  applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const*>((applesauce::CF::ArrayRef *)&v381, v22, CFSTR("range map"));
  AMCP::IOAudio2::make_level_map((AMCP::IOAudio2 *)cf, (CFArrayRef *)&v381);
  v23 = (char *)operator new(0x38uLL);
  *((_QWORD *)v23 + 1) = 0;
  v24 = (unint64_t *)(v23 + 8);
  *((_QWORD *)v23 + 2) = 0;
  *(_QWORD *)v23 = &off_1E6999418;
  *(_OWORD *)(v23 + 24) = *(_OWORD *)cf;
  v25 = (uint64_t (**)())(v23 + 24);
  cf[0] = 0;
  cf[1] = 0;
  *((CFTypeRef *)v23 + 5) = cf[2];
  cf[2] = 0;
  *(_QWORD *)&v380 = v23 + 24;
  *((_QWORD *)&v380 + 1) = v23;
  if ((_QWORD)v381)
    CFRelease((CFTypeRef)v381);
  v26 = *(const __CFDictionary **)(a1 + 40);
  if (!v26)
  {
    v330 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v330, "Could not construct");
    __cxa_throw(v330, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, v26, CFSTR("value"));
  if (!cf[0])
  {
    v331 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v331, "Could not construct");
    __cxa_throw(v331, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v27 = applesauce::CF::convert_to<int,0>((const __CFNumber *)cf[0]);
  v28 = *((_DWORD *)*v25 + 1);
  v29 = 0.0;
  if (v27 > v28)
  {
    v30 = *(_DWORD *)(*((_QWORD *)v23 + 4) - 4);
    v29 = 1.0;
    if (v30 > v27)
      v29 = (float)(v27 - v28) / (float)(v30 - v28);
  }
  v31 = operator new(0x20uLL);
  v31[1] = 0;
  v32 = v31 + 1;
  v31[2] = 0;
  *v31 = &off_1E6999468;
  *((_DWORD *)v31 + 6) = (int)v29;
  *(_QWORD *)&v379 = v31 + 3;
  *((_QWORD *)&v379 + 1) = v31;
  if (cf[0])
    CFRelease(cf[0]);
  AMCP::IOAudio2::Device::get_device_connection((AMCP::IOAudio2::Device *)&v375, **(_DWORD **)(*(_QWORD *)(a1 + 24) + 360));
  v33 = *(_DWORD *)(a1 + 36);
  v364 = *(_DWORD *)(a1 + 32);
  v34 = **(_QWORD **)(a1 + 24);
  v36 = *(const void **)(v34 + 32);
  v35 = *(unint64_t **)(v34 + 40);
  *(_QWORD *)&v378 = v36;
  *((_QWORD *)&v378 + 1) = v35;
  if (v35)
  {
    v37 = v35 + 1;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  *(_QWORD *)&v376 = v23 + 24;
  *((_QWORD *)&v376 + 1) = v23;
  do
    v39 = __ldxr(v24);
  while (__stxr(v39 + 1, v24));
  *(_QWORD *)&v377 = v31 + 3;
  *((_QWORD *)&v377 + 1) = v31;
  do
    v40 = __ldxr(v32);
  while (__stxr(v40 + 1, v32));
  cf[0] = v23 + 24;
  cf[1] = v23;
  do
    v41 = __ldxr(v24);
  while (__stxr(v41 + 1, v24));
  cf[2] = v31 + 3;
  cf[3] = v31;
  do
    v42 = __ldxr(v32);
  while (__stxr(v42 + 1, v32));
  LODWORD(cf[4]) = v375;
  v43 = IOConnectAddRef(v375);
  if ((_DWORD)v43)
  {
    v332 = __cxa_allocate_exception(0x20uLL);
    v333 = std::system_category();
    MEMORY[0x1B5E5022C](v332, v43, v333, "Error on IOConnectAddRef");
    __cxa_throw(v332, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  HIDWORD(cf[4]) = v364;
  LODWORD(cf[5]) = v33;
  cf[6] = v36;
  cf[7] = v35;
  if (v35)
  {
    v44 = v35 + 1;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)connect, 0, 1.5836601e190);
  v46 = *(_QWORD *)connect;
  v47 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
  v376 = 0u;
  v377 = 0u;
  v387 = 0;
  v48 = (uint64_t (***)())operator new(0x28uLL);
  *v48 = &off_1E6999510;
  v48[1] = v25;
  v48[2] = (uint64_t (**)())v23;
  v48[3] = (uint64_t (**)())(v31 + 3);
  v48[4] = (uint64_t (**)())v31;
  v387 = v48;
  v381 = 0u;
  v382 = 0u;
  v383 = 0;
  std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)&v381, (uint64_t)&v384);
  v383 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v46, v47, (AMCP *)&v381);
  if (v383)
    v383(0, (uint64_t)&v381, 0, 0);
  v49 = v387;
  if (v387 == &v384)
  {
    v50 = 4;
    v49 = &v384;
  }
  else
  {
    if (!v387)
      goto LABEL_119;
    v50 = 5;
  }
  (*v49)[v50]();
LABEL_119:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(*(uint64_t *)connect);
  v108 = *(_QWORD *)connect;
  v109 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
  v355 = *(_OWORD *)&cf[2];
  v359 = *(_OWORD *)cf;
  memset(cf, 0, 36);
  v110 = (int)cf[4];
  v111 = *(uint64_t *)((char *)&cf[4] + 4);
  v353 = *(_OWORD *)&cf[6];
  *(_OWORD *)&cf[6] = 0uLL;
  v387 = 0;
  v112 = (char *)operator new(0x48uLL);
  *(_QWORD *)v112 = &off_1E6999690;
  *(_OWORD *)(v112 + 8) = v359;
  *(_OWORD *)(v112 + 24) = v355;
  *((_DWORD *)v112 + 10) = v110;
  *(_QWORD *)(v112 + 44) = v111;
  *(_OWORD *)(v112 + 56) = v353;
  v387 = (uint64_t (***)())v112;
  v381 = 0u;
  v382 = 0u;
  v383 = 0;
  std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)&v381, (uint64_t)&v384);
  v383 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v108, v109, (AMCP *)&v381);
  if (v383)
    v383(0, (uint64_t)&v381, 0, 0);
  v113 = v387;
  if (v387 == &v384)
  {
    v114 = 4;
    v113 = &v384;
    goto LABEL_125;
  }
  if (v387)
  {
    v114 = 5;
LABEL_125:
    (*v113)[v114]();
  }
  IOConnectRelease(0);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(*(uint64_t *)connect);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)connect + 40), connect);
  v115 = v374;
  if (v374)
  {
    v116 = (unint64_t *)&v374->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = (std::__shared_weak_count *)cf[7];
  if (cf[7])
  {
    v119 = (unint64_t *)((char *)cf[7] + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  IOConnectRelease((io_connect_t)cf[4]);
  v121 = (std::__shared_weak_count *)cf[3];
  if (cf[3])
  {
    v122 = (unint64_t *)((char *)cf[3] + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v125 = (unint64_t *)((char *)cf[1] + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = (std::__shared_weak_count *)*((_QWORD *)&v377 + 1);
  if (*((_QWORD *)&v377 + 1))
  {
    v128 = (unint64_t *)(*((_QWORD *)&v377 + 1) + 8);
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = (std::__shared_weak_count *)*((_QWORD *)&v376 + 1);
  if (*((_QWORD *)&v376 + 1))
  {
    v131 = (unint64_t *)(*((_QWORD *)&v376 + 1) + 8);
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v380;
  v376 = v380;
  if (*((_QWORD *)&v380 + 1))
  {
    v134 = (unint64_t *)(*((_QWORD *)&v380 + 1) + 8);
    do
      v135 = __ldxr(v134);
    while (__stxr(v135 + 1, v134));
  }
  v136 = v379;
  v377 = v379;
  if (*((_QWORD *)&v379 + 1))
  {
    v137 = (unint64_t *)(*((_QWORD *)&v379 + 1) + 8);
    do
      v138 = __ldxr(v137);
    while (__stxr(v138 + 1, v137));
  }
  *(_OWORD *)cf = v133;
  if (*((_QWORD *)&v133 + 1))
  {
    v139 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
    do
      v140 = __ldxr(v139);
    while (__stxr(v140 + 1, v139));
  }
  *(_OWORD *)&cf[2] = v136;
  if (*((_QWORD *)&v136 + 1))
  {
    v141 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 1, v141));
  }
  LODWORD(cf[4]) = v375;
  v143 = IOConnectAddRef(v375);
  if ((_DWORD)v143)
  {
    v334 = __cxa_allocate_exception(0x20uLL);
    v335 = std::system_category();
    MEMORY[0x1B5E5022C](v334, v143, v335, "Error on IOConnectAddRef");
    __cxa_throw(v334, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  HIDWORD(cf[4]) = v364;
  LODWORD(cf[5]) = v33;
  *(_OWORD *)&cf[6] = v378;
  if (*((_QWORD *)&v378 + 1))
  {
    v144 = (unint64_t *)(*((_QWORD *)&v378 + 1) + 8);
    do
      v145 = __ldxr(v144);
    while (__stxr(v145 + 1, v144));
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)connect, 0, 1.5836601e190);
  v146 = *(_QWORD *)connect;
  v147 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
  v376 = 0u;
  v377 = 0u;
  v387 = 0;
  v148 = (char *)operator new(0x28uLL);
  *(_QWORD *)v148 = &off_1E69997A0;
  *(_OWORD *)(v148 + 8) = v133;
  *(_OWORD *)(v148 + 24) = v136;
  v387 = (uint64_t (***)())v148;
  v381 = 0u;
  v382 = 0u;
  v383 = 0;
  std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)&v381, (uint64_t)&v384);
  v383 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v146, v147, (AMCP *)&v381);
  if (v383)
    v383(0, (uint64_t)&v381, 0, 0);
  v149 = v387;
  if (v387 == &v384)
  {
    v150 = 4;
    v149 = &v384;
  }
  else
  {
    if (!v387)
      goto LABEL_179;
    v150 = 5;
  }
  (*v149)[v150]();
LABEL_179:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(*(uint64_t *)connect);
  v151 = *(_QWORD *)connect;
  v152 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
  v360 = *(_OWORD *)&cf[2];
  v367 = *(_OWORD *)cf;
  memset(cf, 0, 36);
  v153 = (int)cf[4];
  v154 = *(uint64_t *)((char *)&cf[4] + 4);
  v356 = *(_OWORD *)&cf[6];
  *(_OWORD *)&cf[6] = 0uLL;
  v387 = 0;
  v155 = (char *)operator new(0x48uLL);
  *(_QWORD *)v155 = &off_1E6999820;
  *(_OWORD *)(v155 + 8) = v367;
  *(_OWORD *)(v155 + 24) = v360;
  *((_DWORD *)v155 + 10) = v153;
  *(_QWORD *)(v155 + 44) = v154;
  *(_OWORD *)(v155 + 56) = v356;
  v387 = (uint64_t (***)())v155;
  v381 = 0u;
  v382 = 0u;
  v383 = 0;
  std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)&v381, (uint64_t)&v384);
  v383 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v151, v152, (AMCP *)&v381);
  if (v383)
    v383(0, (uint64_t)&v381, 0, 0);
  v156 = v387;
  if (v387 == &v384)
  {
    v157 = 4;
    v156 = &v384;
    goto LABEL_185;
  }
  if (v387)
  {
    v157 = 5;
LABEL_185:
    (*v156)[v157]();
  }
  IOConnectRelease(0);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(*(uint64_t *)connect);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)connect + 40), connect);
  v158 = v374;
  if (v374)
  {
    v159 = (unint64_t *)&v374->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = (std::__shared_weak_count *)cf[7];
  if (cf[7])
  {
    v162 = (unint64_t *)((char *)cf[7] + 8);
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  IOConnectRelease((io_connect_t)cf[4]);
  v164 = (std::__shared_weak_count *)cf[3];
  if (cf[3])
  {
    v165 = (unint64_t *)((char *)cf[3] + 8);
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v168 = (unint64_t *)((char *)cf[1] + 8);
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = (std::__shared_weak_count *)*((_QWORD *)&v377 + 1);
  if (*((_QWORD *)&v377 + 1))
  {
    v171 = (unint64_t *)(*((_QWORD *)&v377 + 1) + 8);
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = (std::__shared_weak_count *)*((_QWORD *)&v376 + 1);
  if (*((_QWORD *)&v376 + 1))
  {
    v174 = (unint64_t *)(*((_QWORD *)&v376 + 1) + 8);
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  v176 = (std::__shared_weak_count *)*((_QWORD *)&v378 + 1);
  if (*((_QWORD *)&v378 + 1))
  {
    v177 = (unint64_t *)(*((_QWORD *)&v378 + 1) + 8);
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  IOConnectRelease(v375);
  v179 = (std::__shared_weak_count *)*((_QWORD *)&v379 + 1);
  if (*((_QWORD *)&v379 + 1))
  {
    v180 = (unint64_t *)(*((_QWORD *)&v379 + 1) + 8);
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v380 + 1);
  if (*((_QWORD *)&v380 + 1))
  {
    v182 = (unint64_t *)(*((_QWORD *)&v380 + 1) + 8);
    do
      v95 = __ldaxr(v182);
    while (__stlxr(v95 - 1, v182));
    goto LABEL_300;
  }
}

void sub_1B5C1A214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,int a32,io_connect_t connect,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  void *v38;
  uint64_t v39;

  __cxa_free_exception(v38);
  applesauce::CF::NumberRef::~NumberRef((const void **)&__p);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v39 - 224);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v39 - 208);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  IOConnectRelease(connect);
  _Unwind_Resume(a1);
}

void AMCP::IOAudio2::Control::update_range(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  CFDictionaryRef *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  float *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  CFDictionaryRef *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  const __CFArray *v29;
  CFIndex Count;
  CFIndex v31;
  CFArrayRef v32;
  CFIndex v33;
  double v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  CFArrayRef v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  CFTypeRef *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  CFTypeRef *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  CFDictionaryRef *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  int v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  std::runtime_error *v70;
  std::runtime_error *v71;
  std::runtime_error *v72;
  std::runtime_error *v73;
  std::runtime_error *v74;
  std::runtime_error *v75;
  std::runtime_error *v76;
  std::runtime_error *v77;
  std::runtime_error *v78;
  std::runtime_error *v79;
  std::runtime_error *v80;
  std::runtime_error *v81;
  std::runtime_error *v82;
  CFArrayRef theArray;
  std::__shared_weak_count *v84;
  CFTypeRef v85;
  std::__shared_weak_count *v86;
  CFTypeRef cf[4];
  void (*v88)(int, uint64_t, AMCP::Thing *, uint64_t *);
  CFTypeRef v89;
  CFTypeRef v90;
  int v91;
  int v92;
  CFTypeRef v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  CFTypeRef *v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  if (AMCP::is_base_of((AMCP *)0x736C6472, *(_DWORD *)(a1 + 52)))
  {
    v4 = (CFDictionaryRef *)(a1 + 40);
    cf[0] = CFSTR("read only");
    LOBYTE(v93) = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(v4, cf);
    AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (char *)&v93, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
    v5 = (std::__shared_weak_count *)cf[1];
    if (cf[1])
    {
      v6 = (unint64_t *)((char *)cf[1] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (!*v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *v4, CFSTR("minimum value"));
    if (!cf[0])
    {
      v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v69, "Could not construct");
      __cxa_throw(v69, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v8 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf[0]);
    if (cf[0])
      CFRelease(cf[0]);
    if (!*v4)
    {
      v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(v70);
      __cxa_throw(v70, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *v4, CFSTR("maximum value"));
    if (!cf[0])
    {
      v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v71, "Could not construct");
      __cxa_throw(v71, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v9 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf[0]);
    if (cf[0])
      CFRelease(cf[0]);
    v93 = (CFTypeRef)(v8 | (v9 << 32));
    AMCP::Core::Operation_Utilities::make_typed_property<std::tuple<unsigned int,unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (uint64_t *)&v93, 1.58366012e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
    v10 = (std::__shared_weak_count *)cf[1];
    if (cf[1])
    {
      v11 = (unint64_t *)((char *)cf[1] + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
LABEL_83:
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      return;
    }
    return;
  }
  if (!AMCP::is_base_of((AMCP *)0x6C65766C, *(_DWORD *)(a1 + 52)))
  {
    if (AMCP::is_base_of((AMCP *)0x746F676C, *(_DWORD *)(a1 + 52)))
    {
      cf[0] = CFSTR("read only");
      LOBYTE(v93) = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>((CFDictionaryRef *)(a1 + 40), cf);
      AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (char *)&v93, 1.58366007e190);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
      v10 = (std::__shared_weak_count *)cf[1];
      if (!cf[1])
        return;
      v21 = (unint64_t *)((char *)cf[1] + 8);
      do
        v12 = __ldaxr(v21);
      while (__stlxr(v12 - 1, v21));
      goto LABEL_83;
    }
    if (!AMCP::is_base_of((AMCP *)0x736C6374, *(_DWORD *)(a1 + 52)))
    {
      if (AMCP::is_base_of((AMCP *)0x7370616E, *(_DWORD *)(a1 + 52)))
      {
        v55 = (CFDictionaryRef *)(a1 + 40);
        cf[0] = CFSTR("read only");
        LOBYTE(v93) = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(v55, cf);
        AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (char *)&v93, 1.58366007e190);
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
        v56 = (std::__shared_weak_count *)cf[1];
        if (cf[1])
        {
          v57 = (unint64_t *)((char *)cf[1] + 8);
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        if (!*v55)
        {
          v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          applesauce::CF::construct_error(v79);
          __cxa_throw(v79, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *v55, CFSTR("left channel"));
        if (!cf[0])
        {
          v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v80, "Could not construct");
          __cxa_throw(v80, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v59 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf[0]);
        if (cf[0])
          CFRelease(cf[0]);
        if (!*v55)
        {
          v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          applesauce::CF::construct_error(v81);
          __cxa_throw(v81, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *v55, CFSTR("right channel"));
        if (!cf[0])
        {
          v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v82, "Could not construct");
          __cxa_throw(v82, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v60 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf[0]);
        if (cf[0])
          CFRelease(cf[0]);
        v93 = (CFTypeRef)(v59 | (v60 << 32));
        AMCP::Core::Operation_Utilities::make_typed_property<std::tuple<unsigned int,unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (uint64_t *)&v93, 1.58366012e190);
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
        v10 = (std::__shared_weak_count *)cf[1];
        if (cf[1])
        {
          v61 = (unint64_t *)((char *)cf[1] + 8);
          do
            v12 = __ldaxr(v61);
          while (__stlxr(v12 - 1, v61));
          goto LABEL_83;
        }
      }
      return;
    }
    v22 = (CFDictionaryRef *)(a1 + 40);
    cf[0] = CFSTR("read only");
    LOBYTE(v93) = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(v22, cf);
    AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (char *)&v93, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
    v23 = (std::__shared_weak_count *)cf[1];
    if (cf[1])
    {
      v24 = (unint64_t *)((char *)cf[1] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    cf[0] = CFSTR("multi-selector");
    LOBYTE(v93) = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(v22, cf);
    AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (char *)&v93, 1.58366012e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
    v26 = (std::__shared_weak_count *)cf[1];
    if (cf[1])
    {
      v27 = (unint64_t *)((char *)cf[1] + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    memset(cf, 0, 24);
    if (!*v22)
    {
      v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v78, "Could not construct");
      __cxa_throw(v78, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const*>((applesauce::CF::ArrayRef *)&theArray, *v22, CFSTR("selectors"));
    v29 = theArray;
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      v31 = Count;
      v32 = theArray;
      if (theArray)
      {
        v33 = CFArrayGetCount(theArray);
        if (!v31)
          goto LABEL_124;
      }
      else
      {
        v33 = 0;
        if (!Count)
          goto LABEL_124;
      }
      v62 = 0;
      do
      {
        if (v29 == v32 && v33 == v62)
          break;
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v85, v29, v62);
        v92 = 0;
        if (!v85)
        {
          v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v72, "Could not construct");
          __cxa_throw(v72, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v93, (CFDictionaryRef)v85, CFSTR("value"));
        if (!v93)
        {
          v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v74, "Could not construct");
          __cxa_throw(v74, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v63 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v93);
        if (v93)
          CFRelease(v93);
        v92 = v63;
        if (!v85)
        {
          v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v73, "Could not construct");
          __cxa_throw(v73, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v93, (CFDictionaryRef)v85, CFSTR("kind"));
        if ((_BYTE)v94)
        {
          if (!v93)
          {
            v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v77, "Could not construct");
            __cxa_throw(v77, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v64 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v93);
        }
        else
        {
          v64 = 0;
        }
        v91 = v64;
        if (!v85)
        {
          v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v75, "Could not construct");
          __cxa_throw(v75, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v89 = 0;
        applesauce::CF::at_or<applesauce::CF::StringRef,__CFString const*>(&v90, (const __CFDictionary *)v85, CFSTR("name"), &v89);
        if (v89)
          CFRelease(v89);
        std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::emplace_back<unsigned int &,unsigned int &,applesauce::CF::StringRef&>((uint64_t *)cf, &v92, &v91, &v90);
        if (v90)
          CFRelease(v90);
        std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v93);
        if (v85)
          CFRelease(v85);
        ++v62;
      }
      while (v31 != v62);
    }
LABEL_124:
    v85 = (CFTypeRef)0x676C6F6273636169;
    LODWORD(v86) = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>((uint64_t *)&v93, (uint64_t)&v85, (uint64_t)cf[0], (uint64_t)cf[1]);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)v93 + 10, &v93);
    v65 = v94;
    if (v94)
    {
      p_shared_owners = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(p_shared_owners);
      while (__stlxr(v67 - 1, p_shared_owners));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    if (theArray)
      CFRelease(theArray);
    v93 = cf;
    std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
    return;
  }
  v13 = (CFDictionaryRef *)(a1 + 40);
  cf[0] = CFSTR("read only");
  LOBYTE(v93) = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(v13, cf);
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (char *)&v93, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
  v14 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v15 = (unint64_t *)((char *)cf[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!*v13)
  {
    v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v76);
    __cxa_throw(v76, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const*>((applesauce::CF::ArrayRef *)&v93, *v13, CFSTR("range map"));
  AMCP::IOAudio2::make_level_map((AMCP::IOAudio2 *)cf, (CFArrayRef *)&v93);
  v17 = operator new(0x38uLL);
  v17[1] = 0;
  v17[2] = 0;
  *v17 = &off_1E6999418;
  v18 = (float *)cf[0];
  v17[3] = cf[0];
  v19 = *(_OWORD *)&cf[1];
  cf[0] = 0;
  cf[1] = 0;
  *((_OWORD *)v17 + 2) = v19;
  cf[2] = 0;
  v85 = v17 + 3;
  v86 = (std::__shared_weak_count *)v17;
  if (v93)
  {
    CFRelease(v93);
    v18 = (float *)v17[3];
    v20 = v17[4];
  }
  else
  {
    v20 = v19;
  }
  v34 = *(float *)(v20 - 8);
  *(double *)cf = *v18;
  cf[1] = *(CFTypeRef *)&v34;
  AMCP::Core::Operation_Utilities::make_typed_property<CA::ValueRange,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1}>((uint64_t *)&v93, 0, (__int128 *)cf, 1.5836601e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)v93 + 10, &v93);
  v35 = v94;
  if (v94)
  {
    v36 = (unint64_t *)&v94->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&theArray, 0, 1.5836601e190);
  v38 = theArray;
  v40 = (std::__shared_weak_count *)v85;
  v39 = v86;
  if (v86)
  {
    v41 = (unint64_t *)&v86->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = AMCP::Implementation::get_type_marker<std::function<float ()(float)>>();
  v93 = &off_1E6999A78;
  v94 = v40;
  v95 = v39;
  v96 = &v93;
  memset(cf, 0, sizeof(cf));
  v88 = 0;
  std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)&v93);
  v88 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<float ()(float)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v38, v43, (AMCP *)cf);
  if (v88)
    v88(0, (uint64_t)cf, 0, 0);
  v44 = v96;
  if (v96 == &v93)
  {
    v45 = 4;
    v44 = &v93;
  }
  else
  {
    if (!v96)
      goto LABEL_65;
    v45 = 5;
  }
  (*((void (**)(void))*v44 + v45))();
LABEL_65:
  if (v39)
  {
    v46 = (unint64_t *)&v39->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = AMCP::Implementation::get_type_marker<std::function<float ()(float,BOOL)>>();
  v93 = &off_1E6999B78;
  v94 = v40;
  v95 = v39;
  v96 = &v93;
  memset(cf, 0, sizeof(cf));
  v88 = 0;
  std::__function::__value_func<float ()(float,BOOL)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)&v93);
  v88 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<float ()(float,BOOL)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v38, v48, (AMCP *)cf);
  if (v88)
    v88(0, (uint64_t)cf, 0, 0);
  v49 = v96;
  if (v96 == &v93)
  {
    v50 = 4;
    v49 = &v93;
    goto LABEL_74;
  }
  if (v96)
  {
    v50 = 5;
LABEL_74:
    (*((void (**)(void))*v49 + v50))();
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)v38 + 10, &theArray);
  v51 = v84;
  if (v84)
  {
    v52 = (unint64_t *)&v84->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v10 = v86;
  if (v86)
  {
    v54 = (unint64_t *)&v86->__shared_owners_;
    do
      v12 = __ldaxr(v54);
    while (__stlxr(v12 - 1, v54));
    goto LABEL_83;
  }
}

void sub_1B5C1B41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  __cxa_free_exception(v22);
  applesauce::CF::NumberRef::~NumberRef((const void **)&__p);
  _Unwind_Resume(a1);
}

void sub_1B5C1B750(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<std::tuple<unsigned int,unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1}>(uint64_t *a1, int a2, uint64_t *a3, double a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD v12[2];
  void (*v13)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>();
  v8 = *a3;
  v14[0] = &off_1E6999308;
  v14[1] = v8;
  v15 = v14;
  memset(v12, 0, sizeof(v12));
  v13 = 0;
  std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v14);
  v13 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v12);
  if (v13)
    v13(0, (uint64_t)v12, 0, 0);
  v9 = v15;
  if (v15 == v14)
  {
    v10 = 4;
    v9 = v14;
    goto LABEL_7;
  }
  if (v15)
  {
    v10 = 5;
LABEL_7:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(v6);
}

void sub_1B5C1B884(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6999308;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E6999308;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::operator()(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyINSt3__15tupleIJjjEEEEENS3_10shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::target_type()
{
}

void AMCP::IOAudio2::make_level_map(AMCP::IOAudio2 *this, CFArrayRef *a2)
{
  unint64_t v4;
  unint64_t v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFArrayRef v9;
  float *v10;
  float *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int64_t v15;
  double v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  float v23;
  char *v24;
  uint64_t v25;
  unsigned int v26;
  float *v27;
  int v28;
  float *v29;
  float *v30;
  float *v31;
  float v32;
  float v33;
  float v34;
  NSObject *v35;
  _opaque_pthread_t *v36;
  mach_port_t v37;
  std::runtime_error *v38;
  std::runtime_error *v39;
  std::runtime_error *v40;
  std::runtime_error *v41;
  std::runtime_error *exception;
  std::runtime_error *v43;
  std::runtime_error *v44;
  std::runtime_error *v45;
  std::runtime_error *v46;
  std::runtime_error *v47;
  unint64_t v48;
  uint64_t v49;
  CFIndex v50;
  CFTypeRef v51;
  CFTypeRef cf;
  __int16 v53;
  char *v54;
  __int16 v55;
  int v56;
  __int16 v57;
  const char *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (!*a2)
    goto LABEL_74;
  if (!CFArrayGetCount(*a2))
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
    v35 = *(NSObject **)cf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&cf);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v36 = pthread_self();
      v37 = pthread_mach_thread_np(v36);
      LODWORD(cf) = 67109890;
      HIDWORD(cf) = v37;
      v53 = 2080;
      v54 = "IOAudio2_Control.cpp";
      v55 = 1024;
      v56 = 32;
      v57 = 2080;
      v58 = "in_range_map->get_size() > 0";
      _os_log_error_impl(&dword_1B57BA000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s there needs to be at least one item in the range map", (uint8_t *)&cf, 0x22u);
    }
    abort();
  }
  if (!*a2)
  {
LABEL_74:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v51, *a2, 0);
  if (!v51)
  {
    v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v43, "Could not construct");
    __cxa_throw(v43, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&cf, (CFDictionaryRef)v51, CFSTR("start int value"));
  if (!cf)
  {
    v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v44, "Could not construct");
    __cxa_throw(v44, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
  if (cf)
    CFRelease(cf);
  if (v51)
    CFRelease(v51);
  if (!*a2)
  {
    v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v45);
    __cxa_throw(v45, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v51, *a2, 0);
  if (!v51)
  {
    v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "Could not construct");
    __cxa_throw(v46, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&cf, (CFDictionaryRef)v51, CFSTR("start db value"));
  if (!cf)
  {
    v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v47, "Could not construct");
    __cxa_throw(v47, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = applesauce::CF::convert_to<long long,0>((const __CFNumber *)cf);
  if (cf)
    CFRelease(cf);
  v49 = v5;
  if (v51)
    CFRelease(v51);
  v6 = *a2;
  v48 = v4;
  if (!*a2)
    goto LABEL_53;
  Count = CFArrayGetCount(v6);
  v8 = Count;
  v9 = *a2;
  if (*a2)
  {
    v50 = CFArrayGetCount(*a2);
    if (v8)
      goto LABEL_20;
LABEL_53:
    v10 = 0;
    v11 = 0;
    goto LABEL_54;
  }
  v50 = 0;
  if (!Count)
    goto LABEL_53;
LABEL_20:
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  do
  {
    if (v6 == v9 && v13 == v50)
      break;
    applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&cf, v6, v13);
    if (!cf)
    {
      v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v38, "Could not construct");
      __cxa_throw(v38, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v51, (CFDictionaryRef)cf, CFSTR("integer steps"));
    if (!v51)
    {
      v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v40, "Could not construct");
      __cxa_throw(v40, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v14 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v51);
    if (v51)
      CFRelease(v51);
    if (!cf)
    {
      v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v39, "Could not construct");
      __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v51, (CFDictionaryRef)cf, CFSTR("db per step"));
    if (!v51)
    {
      v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v41, "Could not construct");
      __cxa_throw(v41, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v15 = applesauce::CF::convert_to<long long,0>((const __CFNumber *)v51);
    if (v51)
      CFRelease(v51);
    v16 = (double)v15 * 2.32830644e-10 + (float)(v15 >> 32);
    if ((unint64_t)v11 >= v12)
    {
      v18 = ((char *)v11 - (char *)v10) >> 3;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v12 - (_QWORD)v10) >> 2 > v19)
        v19 = (uint64_t)(v12 - (_QWORD)v10) >> 2;
      if (v12 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
        v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v20);
      else
        v21 = 0;
      v22 = v20 + 8 * v18;
      v23 = v16;
      *(float *)v22 = v23;
      *(_DWORD *)(v22 + 4) = v14;
      v24 = (char *)v22;
      while (v11 != v10)
      {
        v25 = *((_QWORD *)v11 - 1);
        v11 -= 2;
        *((_QWORD *)v24 - 1) = v25;
        v24 -= 8;
      }
      v12 = v20 + 8 * v21;
      v11 = (float *)(v22 + 8);
      if (v10)
        operator delete(v10);
      v10 = (float *)v24;
    }
    else
    {
      v17 = v16;
      *v11 = v17;
      *((_DWORD *)v11 + 1) = v14;
      v11 += 2;
    }
    if (cf)
      CFRelease(cf);
    ++v13;
  }
  while (v13 != v8);
LABEL_54:
  *(float *)&v26 = (double)v49 * 2.32830644e-10 + (float)(v49 >> 32);
  cf = (CFTypeRef)(v26 | (v48 << 32));
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  AMCP::Utility::Sorted_Vector<std::tuple<float,int>,AMCP::Utility::Extract_Key_Self<std::tuple<float,int>>,std::less<std::tuple<float,int>>,std::allocator<std::tuple<float,int>>>::insert_unique((char **)this, (float *)&cf);
  if (v10 != v11)
  {
    v27 = v10;
    do
    {
      v28 = *((_DWORD *)v27 + 1);
      *(float *)&cf = *(float *)&cf + (float)(*v27 * (float)v28);
      HIDWORD(cf) += v28;
      AMCP::Utility::Sorted_Vector<std::tuple<float,int>,AMCP::Utility::Extract_Key_Self<std::tuple<float,int>>,std::less<std::tuple<float,int>>,std::allocator<std::tuple<float,int>>>::insert_unique((char **)this, (float *)&cf);
      v27 += 2;
    }
    while (v27 != v11);
  }
  v30 = *(float **)this;
  v29 = (float *)*((_QWORD *)this + 1);
  if ((unint64_t)v29 - *(_QWORD *)this < 0x10)
LABEL_65:
    __assert_rtn("Level_Map", "Level_Map.h", 67, "data_is_valid()");
  v32 = *v30;
  v31 = v30 + 2;
  v33 = v32;
  do
  {
    v34 = v33;
    v33 = *v31;
    if (v34 >= *v31 || *((_DWORD *)v31 - 1) >= *((_DWORD *)v31 + 1))
      goto LABEL_65;
    v31 += 2;
  }
  while (v31 != v29);
  if (v10)
    operator delete(v10);
}

void sub_1B5C1C028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999B78;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999B78;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6999B78;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6999B78;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

float std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::operator()(uint64_t a1, float *a2)
{
  return AMCP::Utility::Level_Map::calculate_scalar_from_decibel(*(float ***)(a1 + 8), *a2);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control27update_volume_control_rangeERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999A78;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999A78;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6999A78;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6999A78;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

float std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  return AMCP::Utility::Level_Map::calculate_decibel_from_raw(*(AMCP::Utility::Level_Map **)(a1 + 8), *(_DWORD *)(**(_QWORD **)(a1 + 8) + 4)+ (int)(float)(fmaxf(fminf(*a2, 1.0), 0.0)* (float)(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - 4)- *(_DWORD *)(**(_QWORD **)(a1 + 8) + 4))));
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control27update_volume_control_rangeERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::target_type()
{
}

void std::__shared_ptr_emplace<AMCP::Utility::Level_Map>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6999418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Utility::Level_Map>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6999418;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::Utility::Level_Map>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void AMCP::Utility::Sorted_Vector<std::tuple<float,int>,AMCP::Utility::Extract_Key_Self<std::tuple<float,int>>,std::less<std::tuple<float,int>>,std::allocator<std::tuple<float,int>>>::insert_unique(char **a1, float *a2)
{
  float *v2;
  char *v4;
  float *v5;
  uint64_t v6;
  unint64_t v7;
  float v8;
  int v10;
  float *v11;
  float *v12;
  _BOOL4 v13;
  float v14;
  int v15;
  float v16;
  int v17;
  unint64_t v18;
  float *v19;
  float *v20;
  float *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  _BOOL4 v34;
  float *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  float *v44;
  uint64_t v45;
  float *i;
  uint64_t v47;
  char *v48;
  char *v49;

  v2 = a2;
  v4 = *a1;
  v5 = (float *)a1[1];
  v6 = (char *)v5 - *a1;
  if (v5 == (float *)*a1)
  {
    v11 = (float *)*a1;
  }
  else
  {
    v49 = (char *)((char *)v5 - *a1);
    v7 = v6 >> 3;
    v8 = *a2;
    v10 = *((_DWORD *)a2 + 1);
    v11 = (float *)*a1;
    do
    {
      v12 = &v11[2 * (v7 >> 1)];
      v13 = std::less<std::tuple<float,int>>::operator()[abi:ne180100](*((_DWORD *)v12 + 1), v10, *v12, v8);
      if (v13)
        v7 += ~(v7 >> 1);
      else
        v7 >>= 1;
      if (v13)
        v11 = v12 + 2;
    }
    while (v7);
    v2 = a2;
    v6 = (uint64_t)v49;
  }
  if (v5 == v11
    || (v14 = *v11,
        v15 = *((_DWORD *)v11 + 1),
        v16 = *v2,
        v17 = *((_DWORD *)v2 + 1),
        std::less<std::tuple<float,int>>::operator()[abi:ne180100](v15, v17, *v11, *v2))
    || std::less<std::tuple<float,int>>::operator()[abi:ne180100](v17, v15, v16, v14))
  {
    v18 = (unint64_t)a1[2];
    if ((unint64_t)v5 >= v18)
    {
      v23 = (v6 >> 3) + 1;
      if (v23 >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v24 = (char *)v11 - v4;
      v25 = ((char *)v11 - v4) >> 3;
      v26 = v18 - (_QWORD)v4;
      if (v26 >> 2 > v23)
        v23 = v26 >> 2;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v23;
      if (v27)
      {
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v27);
      }
      else
      {
        v29 = 0;
        v28 = 0;
      }
      v36 = &v29[8 * v25];
      v37 = &v29[8 * v28];
      if (v25 == v28)
      {
        if (v24 < 1)
        {
          if (v11 == (float *)v4)
            v39 = 1;
          else
            v39 = v24 >> 2;
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v39);
          v36 = &v40[8 * (v39 >> 2)];
          v37 = &v40[8 * v41];
          if (v29)
            operator delete(v29);
        }
        else
        {
          v38 = v25 + 2;
          if (v25 >= -1)
            v38 = v25 + 1;
          v36 -= 8 * (v38 >> 1);
        }
      }
      *(_QWORD *)v36 = *(_QWORD *)v2;
      v42 = v36 + 8;
      v43 = *a1;
      if (*a1 != (char *)v11)
      {
        v44 = v11;
        do
        {
          v45 = *((_QWORD *)v44 - 1);
          v44 -= 2;
          *((_QWORD *)v36 - 1) = v45;
          v36 -= 8;
        }
        while (v44 != (float *)v43);
      }
      for (i = (float *)a1[1]; v11 != i; v42 += 8)
      {
        v47 = *(_QWORD *)v11;
        v11 += 2;
        *(_QWORD *)v42 = v47;
      }
      v48 = *a1;
      *a1 = v36;
      a1[1] = v42;
      a1[2] = v37;
      if (v48)
        operator delete(v48);
    }
    else if (v11 == v5)
    {
      *(_QWORD *)v5 = *(_QWORD *)v2;
      a1[1] = (char *)(v5 + 2);
    }
    else
    {
      v19 = v11 + 2;
      v20 = v5 - 2;
      v21 = v5;
      while (v20 < v5)
      {
        v22 = *(_QWORD *)v20;
        v20 += 2;
        *(_QWORD *)v21 = v22;
        v21 += 2;
      }
      a1[1] = (char *)v21;
      if (v5 != v19)
      {
        v30 = ((char *)v5 - (char *)v19) >> 3;
        v31 = v5 - 1;
        v32 = 2 * v30;
        do
        {
          *(v31 - 1) = v11[v32 - 2];
          *v31 = v11[v32 - 1];
          v31 -= 2;
          v32 -= 2;
        }
        while (v32 * 4);
      }
      v34 = v11 <= v2 && v21 > v2;
      v35 = &v2[2 * v34];
      *v11 = *v35;
      v11[1] = v35[1];
    }
  }
  else
  {
    *v11 = v16;
    *((_DWORD *)v11 + 1) = v17;
  }
}

void sub_1B5C1C7CC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

BOOL std::less<std::tuple<float,int>>::operator()[abi:ne180100](int a1, int a2, float a3, float a4)
{
  int v4;
  int v5;

  if (a3 == a4)
    v4 = 0;
  else
    v4 = -127;
  if (a3 > a4)
    v4 = 1;
  if (a3 < a4)
    v4 = -1;
  if (a1 < a2)
    v5 = -1;
  else
    v5 = 1;
  if (a1 == a2)
    v5 = 0;
  if (!v4)
    v4 = v5;
  return v4 != -127 && v4 < 0;
}

uint64_t AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1::~$_1(uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 40);
  IOConnectRelease(*(_DWORD *)(a1 + 28));
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E699A290;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 48);
  IOConnectRelease(*(_DWORD *)(a1 + 36));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E699A290;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 48);
  IOConnectRelease(*(_DWORD *)(a1 + 36));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x40uLL);
  *v2 = &off_1E699A290;
  std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5C1C92C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E699A290;
  return std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::operator()(uint64_t a1, float *a2)
{
  float v3;
  unsigned int v4;
  mach_port_t v5;
  void *v6;
  float v7;
  int v8;
  int v9;
  std::runtime_error *exception;
  void *__p;

  v3 = *a2;
  if (*a2 <= 0.0)
  {
    v4 = *(_DWORD *)(a1 + 24);
  }
  else if (v3 == 0.5)
  {
    v4 = *(_DWORD *)(a1 + 28);
  }
  else if (v3 >= 1.0)
  {
    v4 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    if (v3 >= 0.5)
    {
      v7 = (float)(v3 + -0.5) + (float)(v3 + -0.5);
      v9 = *(_DWORD *)(a1 + 28);
      v8 = *(_DWORD *)(a1 + 32);
    }
    else
    {
      v7 = v3 + v3;
      v9 = *(_DWORD *)(a1 + 24);
      v8 = *(_DWORD *)(a1 + 28);
    }
    v4 = v9 + (float)(v7 * (float)(v8 - v9));
  }
  v5 = *(_DWORD *)(a1 + 36);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned int const&,unsigned int &>((uint64_t)&__p, v5, *(_DWORD *)(a1 + 44), v4);
  v6 = __p;
  if (*(_QWORD *)__p == v4)
  {
    **(_DWORD **)(a1 + 8) = v4;
    AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*(_QWORD *)(a1 + 48) + 32), *(_DWORD *)(a1 + 40));
  }
  operator delete(v6);
}

void sub_1B5C1CAA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control31update_stereo_pan_control_valueERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::target_type()
{
}

void applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned int const&,unsigned int &>(uint64_t a1, mach_port_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  void *v7;
  void *exception;
  const std::error_category *v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  __int128 v13;
  std::string v14;
  std::string v15;
  __int128 v16;
  std::string::size_type v17;
  size_t v18;
  unint64_t v19[3];
  uint32_t outputCnt;
  __int128 v21;
  uint64_t v22;
  uint64_t input[2];

  input[0] = a3;
  input[1] = a4;
  std::vector<unsigned long long>::vector(&v21);
  outputCnt = 1;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  v6 = IOConnectCallMethod(a2, 2u, input, 2u, 0, 0, (uint64_t *)v21, &outputCnt, 0, &v18);
  if ((_DWORD)v6)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v9 = std::system_category();
    v15.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v15.__r_.__value_.__r.__words[1] = xmmword_1B5D68C20;
    strcpy(v15.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v14, 2u);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v14;
    else
      v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    else
      size = v14.__r_.__value_.__l.__size_;
    v12 = std::string::append(&v15, (const std::string::value_type *)v10, size);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v17 = v12->__r_.__value_.__r.__words[2];
    v16 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1B5E50238](exception, v6, v9, &v16);
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  std::vector<unsigned long long>::resize((char **)&v21, outputCnt);
  if (v18)
  {
    std::vector<unsigned char>::__append(v19, v18);
    v7 = (void *)v19[0];
  }
  else
  {
    v7 = 0;
  }
  *(_OWORD *)a1 = v21;
  *(_QWORD *)(a1 + 16) = v22;
  v22 = 0;
  v21 = 0uLL;
  if (v7)
  {
    operator delete(v7);
    if ((_QWORD)v21)
    {
      *((_QWORD *)&v21 + 1) = v21;
      operator delete((void *)v21);
    }
  }
}

void sub_1B5C1CCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  if (a28 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v31 & 1) == 0)
    {
LABEL_10:
      v34 = *(void **)(v32 - 96);
      if (v34)
      {
        *(_QWORD *)(v32 - 88) = v34;
        operator delete(v34);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v30);
  goto LABEL_10;
}

uint64_t std::__function::__alloc_func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::destroy[abi:ne180100](uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 40);
  IOConnectRelease(*(_DWORD *)(a1 + 28));
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  io_connect_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  void *exception;
  const std::error_category *v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 28) = v8;
  v9 = IOConnectAddRef(v8);
  if ((_DWORD)v9)
  {
    v14 = v9;
    exception = __cxa_allocate_exception(0x20uLL);
    v16 = std::system_category();
    MEMORY[0x1B5E5022C](exception, v14, v16, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return a1;
}

void sub_1B5C1CE5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E699A210;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E699A210;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E699A210;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = *(_QWORD *)(a1 + 24);
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_1E699A210;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
  *(_QWORD *)(a2 + 24) = v6;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

float std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::operator()(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  float result;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  v1 = **(_DWORD **)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 24);
  result = 0.0;
  v4 = v1 - v2;
  if (v1 < v2)
  {
    v5 = *(_DWORD *)(a1 + 28);
    result = 0.5;
    if (v1 != v5)
    {
      v6 = *(_DWORD *)(a1 + 32);
      result = 1.0;
      if (v1 > v6)
      {
        v7 = v1 >= v5;
        v8 = v1 - v5;
        if (v7)
          return (float)((float)((float)v8 / (float)(v6 - v5)) * 0.5) + 0.5;
        else
          return (float)((float)v4 / (float)(v5 - v2)) * 0.5;
      }
    }
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control31update_stereo_pan_control_valueERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<unsigned int>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6998ED0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<unsigned int>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6998ED0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1::~$_1(uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 40);
  IOConnectRelease(*(_DWORD *)(a1 + 24));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E6999F98;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 48);
  IOConnectRelease(*(_DWORD *)(a1 + 32));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
  return a1;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E6999F98;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 48);
  IOConnectRelease(*(_DWORD *)(a1 + 32));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x40uLL);
  *v2 = &off_1E6999F98;
  std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5C1D1DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6999F98;
  return std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::operator()(uint64_t a1, unsigned int **a2)
{
  std::vector<unsigned int>::pointer begin;
  char *v5;
  mach_port_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unsigned int *v11;
  mach_port_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unsigned int *v20;
  std::vector<unsigned int> *v21;
  unsigned int *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  std::runtime_error *v32;
  void *v33;
  const std::error_category *v34;
  std::string *v35;
  std::string::size_type size;
  std::string *v37;
  __int128 v38;
  std::runtime_error *exception;
  unsigned int *v40;
  char *v41;
  uint64_t v42;
  std::string v43;
  std::string v44;
  __int128 v45;
  std::string::size_type v46;
  size_t v47;
  char *outputStruct;
  char *v49;
  uint32_t outputCnt;
  std::vector<unsigned int> v51;

  if (!*(_BYTE *)(a1 + 8))
  {
    v11 = *a2;
    if (*a2 == a2[1])
      return;
    v12 = *(_DWORD *)(a1 + 32);
    if (!v12)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned int const&,unsigned int const&>((uint64_t)&v51, v12, *(_DWORD *)(a1 + 40), *v11);
    v13 = *a2;
    v14 = **a2;
    begin = v51.__begin_;
    if (*(_QWORD *)v51.__begin_ == v14)
    {
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_DWORD **)v15;
      *(_QWORD *)(v15 + 8) = *(_QWORD *)v15;
      v17 = *(_QWORD *)(v15 + 16);
      if ((unint64_t)v16 >= v17)
      {
        v23 = v17 - (_QWORD)v16;
        v24 = (uint64_t)(v17 - (_QWORD)v16) >> 1;
        if (v24 <= 1)
          v24 = 1;
        if (v23 >= 0x7FFFFFFFFFFFFFFCLL)
          v25 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        v26 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v25);
        v27 = *(_DWORD **)v15;
        v28 = *(_DWORD **)(v15 + 8);
        v30 = &v26[v29];
        *v26 = *v13;
        v18 = v26 + 1;
        while (v28 != v27)
        {
          v31 = *--v28;
          *--v26 = v31;
        }
        *(_QWORD *)v15 = v26;
        *(_QWORD *)(v15 + 8) = v18;
        *(_QWORD *)(v15 + 16) = v30;
        if (v27)
          operator delete(v27);
      }
      else
      {
        *v16 = v14;
        v18 = v16 + 1;
      }
      *(_QWORD *)(v15 + 8) = v18;
      AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*(_QWORD *)(a1 + 48) + 32), *(_DWORD *)(a1 + 36));
    }
    goto LABEL_36;
  }
  v40 = 0;
  v41 = 0;
  v42 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v40, *a2, (uint64_t)a2[1], a2[1] - *a2);
  begin = v40;
  v5 = v41;
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v6 = *(_DWORD *)(a1 + 32);
  if (!v6)
  {
    v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v32, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(v32, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  memset(&v51, 0, sizeof(v51));
  outputCnt = 0;
  std::vector<unsigned char>::vector(&outputStruct, 0x400uLL);
  v7 = v5 - (char *)begin;
  v47 = 1024;
  v8 = IOConnectCallMethod(v6, 8u, 0, 0, begin, v5 - (char *)begin, 0, &outputCnt, outputStruct, &v47);
  if ((_DWORD)v8)
  {
    v33 = __cxa_allocate_exception(0x20uLL);
    v34 = std::system_category();
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v44.__r_.__value_.__r.__words[1] = xmmword_1B5D68C20;
    strcpy(v44.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v43, 8u);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &v43;
    else
      v35 = (std::string *)v43.__r_.__value_.__r.__words[0];
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    else
      size = v43.__r_.__value_.__l.__size_;
    v37 = std::string::append(&v44, (const std::string::value_type *)v35, size);
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v46 = v37->__r_.__value_.__r.__words[2];
    v45 = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1B5E50238](v33, v8, v34, &v45);
    __cxa_throw(v33, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  std::vector<unsigned long long>::resize((char **)&v51, outputCnt);
  v9 = outputStruct;
  if (v47 <= v49 - outputStruct)
  {
    if (v47 >= v49 - outputStruct)
      v10 = v49;
    else
      v10 = &outputStruct[v47];
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)&outputStruct, v47 - (v49 - outputStruct));
    v9 = outputStruct;
    v10 = v49;
  }
  if (v51.__begin_)
    operator delete(v51.__begin_);
  v19 = v10 - v9;
  std::vector<unsigned int>::vector(&v51, v19 >> 2);
  memcpy(v51.__begin_, v9, v19 & 0xFFFFFFFFFFFFFFFCLL);
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v20 = v51.__begin_;
  if (v7 == (char *)v51.__end_ - (char *)v51.__begin_ && !memcmp(begin, v51.__begin_, v5 - (char *)begin))
  {
    v21 = *(std::vector<unsigned int> **)(a1 + 16);
    v22 = v21->__begin_;
    v21->__end_ = v21->__begin_;
    std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(v21, v22, (char *)begin, v5, v7 >> 2);
    AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*(_QWORD *)(a1 + 48) + 32), *(_DWORD *)(a1 + 36));
    v20 = v51.__begin_;
  }
  if (v20)
  {
    v51.__end_ = v20;
    operator delete(v20);
  }
  if (v9)
    operator delete(v9);
  if (begin)
LABEL_36:
    operator delete(begin);
}

void sub_1B5C1D608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;

  operator delete(v32);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control29update_selector_control_valueERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::target_type()
{
}

void applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned int const&,unsigned int const&>(uint64_t a1, mach_port_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  void *v7;
  void *exception;
  const std::error_category *v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  __int128 v13;
  std::string v14;
  std::string v15;
  __int128 v16;
  std::string::size_type v17;
  size_t v18;
  unint64_t v19[3];
  uint32_t outputCnt;
  __int128 v21;
  uint64_t v22;
  uint64_t input[2];

  input[0] = a3;
  input[1] = a4;
  std::vector<unsigned long long>::vector(&v21);
  outputCnt = 1;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  v6 = IOConnectCallMethod(a2, 2u, input, 2u, 0, 0, (uint64_t *)v21, &outputCnt, 0, &v18);
  if ((_DWORD)v6)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v9 = std::system_category();
    v15.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v15.__r_.__value_.__r.__words[1] = xmmword_1B5D68C20;
    strcpy(v15.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v14, 2u);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v14;
    else
      v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    else
      size = v14.__r_.__value_.__l.__size_;
    v12 = std::string::append(&v15, (const std::string::value_type *)v10, size);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v17 = v12->__r_.__value_.__r.__words[2];
    v16 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1B5E50238](exception, v6, v9, &v16);
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  std::vector<unsigned long long>::resize((char **)&v21, outputCnt);
  if (v18)
  {
    std::vector<unsigned char>::__append(v19, v18);
    v7 = (void *)v19[0];
  }
  else
  {
    v7 = 0;
  }
  *(_OWORD *)a1 = v21;
  *(_QWORD *)(a1 + 16) = v22;
  v22 = 0;
  v21 = 0uLL;
  if (v7)
  {
    operator delete(v7);
    if ((_QWORD)v21)
    {
      *((_QWORD *)&v21 + 1) = v21;
      operator delete((void *)v21);
    }
  }
}

void sub_1B5C1D910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  if (a28 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v31 & 1) == 0)
    {
LABEL_10:
      v34 = *(void **)(v32 - 96);
      if (v34)
      {
        *(_QWORD *)(v32 - 88) = v34;
        operator delete(v34);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v30);
  goto LABEL_10;
}

uint64_t std::__function::__alloc_func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::destroy[abi:ne180100](uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 40);
  IOConnectRelease(*(_DWORD *)(a1 + 24));
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  io_connect_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  void *exception;
  const std::error_category *v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 24) = v7;
  v8 = IOConnectAddRef(v7);
  if ((_DWORD)v8)
  {
    v13 = v8;
    exception = __cxa_allocate_exception(0x20uLL);
    v15 = std::system_category();
    MEMORY[0x1B5E5022C](exception, v13, v15, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return a1;
}

void sub_1B5C1DAB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0>,std::vector<unsigned int> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999EA8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0>,std::vector<unsigned int> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999EA8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6999EA8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0>,std::vector<unsigned int> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6999EA8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0>,std::vector<unsigned int> ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0>,std::vector<unsigned int> ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0>,std::vector<unsigned int> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, *(const void **)v2, *(_QWORD *)(v2 + 8), (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 2);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0>,std::vector<unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control29update_selector_control_valueERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0>,std::vector<unsigned int> ()(void)>::target_type()
{
}

uint64_t AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1::~$_1(uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 32);
  IOConnectRelease(*(_DWORD *)(a1 + 16));
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E6999D48;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 40);
  IOConnectRelease(*(_DWORD *)(a1 + 24));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E6999D48;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 40);
  IOConnectRelease(*(_DWORD *)(a1 + 24));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = &off_1E6999D48;
  std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5C1DD6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6999D48;
  return std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  mach_port_t v3;
  unsigned int v5;
  void *v6;
  std::runtime_error *exception;
  void *__p;

  v3 = *(_DWORD *)(a1 + 24);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = *a2;
  applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned int const&,unsigned int &>((uint64_t)&__p, v3, *(_DWORD *)(a1 + 32), v5);
  v6 = __p;
  if ((v5 == 0) != (*(_QWORD *)__p != 0))
  {
    **(_BYTE **)(a1 + 8) = v5;
    AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*(_QWORD *)(a1 + 40) + 32), *(_DWORD *)(a1 + 28));
  }
  operator delete(v6);
}

void sub_1B5C1DE84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control28update_BOOLean_control_valueERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::target_type()
{
}

uint64_t std::__function::__alloc_func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::destroy[abi:ne180100](uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 32);
  IOConnectRelease(*(_DWORD *)(a1 + 16));
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  io_connect_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  void *exception;
  const std::error_category *v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v7;
  v8 = IOConnectAddRef(v7);
  if ((_DWORD)v8)
  {
    v13 = v8;
    exception = __cxa_allocate_exception(0x20uLL);
    v15 = std::system_category();
    MEMORY[0x1B5E5022C](exception, v13, v15, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 20);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return a1;
}

void sub_1B5C1DFDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999C58;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999C58;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6999C58;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6999C58;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return **(unsigned __int8 **)(a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control28update_BOOLean_control_valueERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6999C08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6999C08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1::~$_1(uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 48);
  IOConnectRelease(*(_DWORD *)(a1 + 32));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1);
}

uint64_t AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3::~$_3(uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 48);
  IOConnectRelease(*(_DWORD *)(a1 + 32));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E6999820;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 56);
  IOConnectRelease(*(_DWORD *)(a1 + 40));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 24);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E6999820;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 56);
  IOConnectRelease(*(_DWORD *)(a1 + 40));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 24);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x48uLL);
  *v2 = &off_1E6999820;
  std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5C1E320(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6999820;
  return std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::operator()(uint64_t a1, float *a2)
{
  int v3;
  mach_port_t v4;
  int v5;
  void *v6;
  std::runtime_error *exception;
  void *__p;

  v3 = AMCP::Utility::Level_Map::calculate_raw_from_decibel(*(float ***)(a1 + 8), *a2);
  v4 = *(_DWORD *)(a1 + 40);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = v3;
  applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned int const&,int &>((uint64_t)&__p, v4, *(_DWORD *)(a1 + 48), v3);
  v6 = __p;
  if (*(_QWORD *)__p == v5)
  {
    **(_DWORD **)(a1 + 24) = v5;
    AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*(_QWORD *)(a1 + 56) + 32), *(_DWORD *)(a1 + 44));
  }
  operator delete(v6);
}

void sub_1B5C1E430(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control27update_volume_control_valueERNS_4Core13Operation_SetEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::target_type()
{
}

void applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned int const&,int &>(uint64_t a1, mach_port_t a2, unsigned int a3, int a4)
{
  uint64_t v6;
  void *v7;
  void *exception;
  const std::error_category *v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  __int128 v13;
  std::string v14;
  std::string v15;
  __int128 v16;
  std::string::size_type v17;
  size_t v18;
  unint64_t v19[3];
  uint32_t outputCnt;
  __int128 v21;
  uint64_t v22;
  uint64_t input[2];

  input[0] = a3;
  input[1] = a4;
  std::vector<unsigned long long>::vector(&v21);
  outputCnt = 1;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  v6 = IOConnectCallMethod(a2, 2u, input, 2u, 0, 0, (uint64_t *)v21, &outputCnt, 0, &v18);
  if ((_DWORD)v6)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v9 = std::system_category();
    v15.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v15.__r_.__value_.__r.__words[1] = xmmword_1B5D68C20;
    strcpy(v15.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v14, 2u);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v14;
    else
      v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    else
      size = v14.__r_.__value_.__l.__size_;
    v12 = std::string::append(&v15, (const std::string::value_type *)v10, size);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v17 = v12->__r_.__value_.__r.__words[2];
    v16 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1B5E50238](exception, v6, v9, &v16);
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  std::vector<unsigned long long>::resize((char **)&v21, outputCnt);
  if (v18)
  {
    std::vector<unsigned char>::__append(v19, v18);
    v7 = (void *)v19[0];
  }
  else
  {
    v7 = 0;
  }
  *(_OWORD *)a1 = v21;
  *(_QWORD *)(a1 + 16) = v22;
  v22 = 0;
  v21 = 0uLL;
  if (v7)
  {
    operator delete(v7);
    if ((_QWORD)v21)
    {
      *((_QWORD *)&v21 + 1) = v21;
      operator delete((void *)v21);
    }
  }
}

void sub_1B5C1E640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  if (a28 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v31 & 1) == 0)
    {
LABEL_10:
      v34 = *(void **)(v32 - 96);
      if (v34)
      {
        *(_QWORD *)(v32 - 88) = v34;
        operator delete(v34);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v30);
  goto LABEL_10;
}

uint64_t std::__function::__alloc_func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::destroy[abi:ne180100](uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 48);
  IOConnectRelease(*(_DWORD *)(a1 + 32));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  io_connect_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  void *exception;
  const std::error_category *v18;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 32) = v10;
  v11 = IOConnectAddRef(v10);
  if ((_DWORD)v11)
  {
    v16 = v11;
    exception = __cxa_allocate_exception(0x20uLL);
    v18 = std::system_category();
    MEMORY[0x1B5E5022C](exception, v16, v18, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 36);
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return a1;
}

void sub_1B5C1E804(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  __cxa_free_exception(v3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69997A0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69997A0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E69997A0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E69997A0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 24);
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::destroy_deallocate(void *a1)
{
  uint64_t v2;

  v2 = (uint64_t)a1 + 8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  operator delete(a1);
}

float std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::operator()(uint64_t a1)
{
  return AMCP::Utility::Level_Map::calculate_decibel_from_raw(*(AMCP::Utility::Level_Map **)(a1 + 8), **(_DWORD **)(a1 + 24));
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control27update_volume_control_valueERNS_4Core13Operation_SetEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E6999690;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 56);
  IOConnectRelease(*(_DWORD *)(a1 + 40));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 24);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E6999690;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 56);
  IOConnectRelease(*(_DWORD *)(a1 + 40));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 24);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x48uLL);
  *v2 = &off_1E6999690;
  std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5C1EB1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6999690;
  return std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::operator()(uint64_t a1, float *a2)
{
  mach_port_t v3;
  int v5;
  int v6;
  void *v7;
  std::runtime_error *exception;
  void *__p;

  v3 = *(_DWORD *)(a1 + 40);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = *(_DWORD *)(**(_QWORD **)(a1 + 8) + 4);
  v6 = v5
     + (int)(float)(fmaxf(fminf(*a2, 1.0), 0.0) * (float)(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - 4) - v5));
  applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned int const&,int &>((uint64_t)&__p, v3, *(_DWORD *)(a1 + 48), v6);
  v7 = __p;
  if (*(_QWORD *)__p == v6)
  {
    **(_DWORD **)(a1 + 24) = v6;
    AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*(_QWORD *)(a1 + 56) + 32), *(_DWORD *)(a1 + 44));
  }
  operator delete(v7);
}

void sub_1B5C1EC58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control27update_volume_control_valueERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::target_type()
{
}

uint64_t std::__function::__alloc_func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::destroy[abi:ne180100](uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 48);
  IOConnectRelease(*(_DWORD *)(a1 + 32));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  io_connect_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  void *exception;
  const std::error_category *v18;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 32) = v10;
  v11 = IOConnectAddRef(v10);
  if ((_DWORD)v11)
  {
    v16 = v11;
    exception = __cxa_allocate_exception(0x20uLL);
    v18 = std::system_category();
    MEMORY[0x1B5E5022C](exception, v16, v18, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 36);
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return a1;
}

void sub_1B5C1EDDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  __cxa_free_exception(v3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999510;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999510;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E6999510;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E6999510;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 24);
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::destroy_deallocate(void *a1)
{
  uint64_t v2;

  v2 = (uint64_t)a1 + 8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  operator delete(a1);
}

float std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v1;
  int v2;
  int v3;
  float result;
  int v5;

  v1 = *(_QWORD **)(a1 + 8);
  v2 = **(_DWORD **)(a1 + 24);
  v3 = *(_DWORD *)(*v1 + 4);
  result = 0.0;
  if (v2 > v3)
  {
    v5 = *(_DWORD *)(v1[1] - 4);
    result = 1.0;
    if (v5 > v2)
      return (float)(v2 - v3) / (float)(v5 - v3);
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control27update_volume_control_valueERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<int>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6999468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<int>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6999468;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1::~$_1(uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 32);
  IOConnectRelease(*(_DWORD *)(a1 + 16));
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E6999010;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 40);
  IOConnectRelease(*(_DWORD *)(a1 + 24));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E6999010;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 40);
  IOConnectRelease(*(_DWORD *)(a1 + 24));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = &off_1E6999010;
  std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5C1F18C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6999010;
  return std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2)
{
  mach_port_t v3;
  uint64_t v5;
  void *v6;
  std::runtime_error *exception;
  void *__p;

  v3 = *(_DWORD *)(a1 + 24);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned int const&,unsigned int const&>((uint64_t)&__p, v3, *(_DWORD *)(a1 + 32), *a2);
  v5 = *a2;
  v6 = __p;
  if (*(_QWORD *)__p == v5)
  {
    **(_DWORD **)(a1 + 8) = v5;
    AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*(_QWORD *)(a1 + 40) + 32), *(_DWORD *)(a1 + 28));
  }
  operator delete(v6);
}

void sub_1B5C1F28C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control27update_slider_control_valueERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::target_type()
{
}

uint64_t std::__function::__alloc_func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::destroy[abi:ne180100](uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 32);
  IOConnectRelease(*(_DWORD *)(a1 + 16));
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  io_connect_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  void *exception;
  const std::error_category *v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v7;
  v8 = IOConnectAddRef(v7);
  if ((_DWORD)v8)
  {
    v13 = v8;
    exception = __cxa_allocate_exception(0x20uLL);
    v15 = std::system_category();
    MEMORY[0x1B5E5022C](exception, v13, v15, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 20);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return a1;
}

void sub_1B5C1F3E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0>,unsigned int ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6998F20;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0>,unsigned int ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6998F20;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6998F20;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0>,unsigned int ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6998F20;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0>,unsigned int ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0>,unsigned int ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  return **(unsigned int **)(a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control27update_slider_control_valueERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0>,unsigned int ()(void)>::target_type()
{
}

void AMCP::IOAudio2::Control::create_from_dictionary_list(int64x2_t *this, AMCP::IOAudio2::Device *a2, CFArrayRef *a3)
{
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v8;
  CFArrayRef v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  const __CFDictionary *shared_weak_owners;
  int v16;
  const __CFDictionary *v17;
  int v18;
  const __CFDictionary *v19;
  int v20;
  const __CFDictionary *v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t v24;
  unint64_t *p_shared_weak_owners;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  _QWORD *v42;
  char *v43;
  __int128 v44;
  int64x2_t v45;
  uint64_t v46;
  std::runtime_error *exception;
  std::runtime_error *v48;
  std::runtime_error *v49;
  std::runtime_error *v50;
  std::runtime_error *v51;
  std::runtime_error *v52;
  std::runtime_error *v53;
  std::runtime_error *v54;
  CFIndex v55;
  __int128 v56;
  CFTypeRef cf;
  CFTypeRef v58;
  int64x2_t v59;
  uint64_t v60;
  int64x2_t *v61;
  uint64_t v62;
  CFTypeRef v63;

  this->i64[0] = 0;
  this->i64[1] = 0;
  this[1].i64[0] = 0;
  v3 = *a3;
  if (*a3)
  {
    Count = CFArrayGetCount(*a3);
    v8 = Count;
    v9 = *a3;
    if (*a3)
    {
      v55 = CFArrayGetCount(*a3);
      if (!v8)
        return;
      goto LABEL_6;
    }
    v55 = 0;
    if (Count)
    {
LABEL_6:
      v10 = 0;
      while (1)
      {
        if (v3 == v9 && v10 == v55)
          return;
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&cf, v3, v10);
        v11 = (std::__shared_weak_count *)operator new(0x58uLL);
        v11->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        v11->__shared_weak_owners_ = 0;
        v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6998E80;
        v13 = cf;
        if (cf)
          CFRetain(cf);
        v14 = v11 + 1;
        v58 = v13;
        v62 = 0;
        AMCP::IOAudio2::Device_Sub_Object::Device_Sub_Object((uint64_t)&v11[1], (uint64_t)a2, CFSTR("control ID"), (CFDictionaryRef *)&v58);
        if (v58)
          CFRelease(v58);
        v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E6998E00;
        shared_weak_owners = (const __CFDictionary *)v11[2].__shared_weak_owners_;
        if (!shared_weak_owners)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v63, shared_weak_owners, CFSTR("class"));
        if (!v63)
        {
          v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v50, "Could not construct");
          __cxa_throw(v50, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v16 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v63);
        if (v63)
          CFRelease(v63);
        LODWORD(v11[3].__vftable) = v16;
        v17 = (const __CFDictionary *)v11[2].__shared_weak_owners_;
        if (!v17)
        {
          v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v48, "Could not construct");
          __cxa_throw(v48, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v63, v17, CFSTR("base class"));
        if (!v63)
        {
          v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v51, "Could not construct");
          __cxa_throw(v51, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v18 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v63);
        if (v63)
          CFRelease(v63);
        HIDWORD(v11[3].__vftable) = v18;
        v19 = (const __CFDictionary *)v11[2].__shared_weak_owners_;
        if (!v19)
        {
          v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v49, "Could not construct");
          __cxa_throw(v49, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v63, v19, CFSTR("scope"));
        if (!v63)
        {
          v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v52, "Could not construct");
          __cxa_throw(v52, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v20 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v63);
        if (v63)
          CFRelease(v63);
        LODWORD(v11[3].__shared_owners_) = v20;
        v21 = (const __CFDictionary *)v11[2].__shared_weak_owners_;
        if (!v21)
        {
          v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v53, "Could not construct");
          __cxa_throw(v53, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v63, v21, CFSTR("element"));
        if (!v63)
        {
          v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v54, "Could not construct");
          __cxa_throw(v54, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v22 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v63);
        if (v63)
          CFRelease(v63);
        HIDWORD(v11[3].__shared_owners_) = v22;
        v23 = (std::__shared_weak_count *)v11[1].__shared_weak_owners_;
        *(_QWORD *)&v56 = v11 + 1;
        *((_QWORD *)&v56 + 1) = v11;
        if (!v23)
          break;
        if (v23->__shared_owners_ == -1)
        {
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
          p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
          do
            v26 = __ldxr(p_shared_weak_owners);
          while (__stxr(v26 + 1, p_shared_weak_owners));
          v11[1].__shared_owners_ = (uint64_t)v14;
          v11[1].__shared_weak_owners_ = (uint64_t)v11;
          std::__shared_weak_count::__release_weak(v23);
          goto LABEL_39;
        }
LABEL_42:
        v32 = (_OWORD *)this->i64[1];
        v31 = this[1].u64[0];
        if ((unint64_t)v32 >= v31)
        {
          v34 = ((uint64_t)v32 - this->i64[0]) >> 4;
          if ((unint64_t)(v34 + 1) >> 60)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v35 = v31 - this->i64[0];
          v36 = v35 >> 3;
          if (v35 >> 3 <= (unint64_t)(v34 + 1))
            v36 = v34 + 1;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
            v37 = 0xFFFFFFFFFFFFFFFLL;
          else
            v37 = v36;
          v61 = this + 1;
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v37);
          v40 = &v38[16 * v34];
          *(_OWORD *)v40 = v56;
          v42 = (_QWORD *)this->i64[0];
          v41 = (_QWORD *)this->i64[1];
          if (v41 == (_QWORD *)this->i64[0])
          {
            v45 = vdupq_n_s64((unint64_t)v41);
            v43 = &v38[16 * v34];
          }
          else
          {
            v43 = &v38[16 * v34];
            do
            {
              v44 = *((_OWORD *)v41 - 1);
              v41 -= 2;
              *((_OWORD *)v43 - 1) = v44;
              v43 -= 16;
              *v41 = 0;
              v41[1] = 0;
            }
            while (v41 != v42);
            v45 = *this;
          }
          v33 = v40 + 16;
          this->i64[0] = (uint64_t)v43;
          this->i64[1] = (uint64_t)(v40 + 16);
          v59 = v45;
          v46 = this[1].i64[0];
          this[1].i64[0] = (uint64_t)&v38[16 * v39];
          v60 = v46;
          v58 = (CFTypeRef)v45.i64[0];
          std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v58);
        }
        else
        {
          *v32 = v56;
          v33 = v32 + 1;
        }
        this->i64[1] = (uint64_t)v33;
        if (cf)
          CFRelease(cf);
        if (++v10 == v8)
          return;
      }
      do
        v27 = __ldxr(p_shared_owners);
      while (__stxr(v27 + 1, p_shared_owners));
      v28 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      v11[1].__shared_owners_ = (uint64_t)v14;
      v11[1].__shared_weak_owners_ = (uint64_t)v11;
      do
LABEL_39:
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      goto LABEL_42;
    }
  }
}

void sub_1B5C1FAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  AMCP::IOAudio2::Device_Sub_Object *v3;
  std::__shared_weak_count *v4;
  void *v6;
  void **v7;
  va_list va;
  uint64_t v9;
  const void *v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  va_list va2;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, void **);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, const void *);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, const void *);
  applesauce::CF::NumberRef::~NumberRef((const void **)va3);
  AMCP::IOAudio2::Device_Sub_Object::~Device_Sub_Object(v3);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va2);
  std::__shared_weak_count::~__shared_weak_count(v4);
  operator delete(v6);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va1);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMCP::IOAudio2::Control>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6998E80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::IOAudio2::Control>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6998E80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::IOAudio2::Control>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void DSP_HAL_BypassCallbacks::~DSP_HAL_BypassCallbacks(DSP_HAL_BypassCallbacks *this)
{
  _QWORD *v1;

  *(_QWORD *)this = &off_1E699A310;
  v1 = (_QWORD *)((char *)this + 8);
  atomic_load((unsigned __int8 *)this + 316);
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus((_QWORD *)this + 20);
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus(v1);
}

{
  _QWORD *v1;

  *(_QWORD *)this = &off_1E699A310;
  v1 = (_QWORD *)((char *)this + 8);
  atomic_load((unsigned __int8 *)this + 316);
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus((_QWORD *)this + 20);
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus(v1);
  JUMPOUT(0x1B5E50688);
}

{
  _QWORD *v1;

  *(_QWORD *)this = &off_1E699A310;
  v1 = (_QWORD *)((char *)this + 8);
  atomic_load((unsigned __int8 *)this + 316);
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus((_QWORD *)this + 20);
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus(v1);
}

BOOL DSP_HAL_BypassCallbacks::expectFormat(DSP_HAL_BypassCallbacks *this, const DSP_Host_Types::AdaptRequest *a2)
{
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _BOOL8 v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t k;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t i;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t j;
  int v26;
  int v27;
  int v28;
  void (**v30)();
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;

  *((_BYTE *)this + 317) = 0;
  if (*((_QWORD *)a2 + 14))
    v4 = *(_DWORD *)(*((_QWORD *)a2 + 12) + 28);
  else
    v4 = 1;
  if (*((_QWORD *)a2 + 82) != *((_QWORD *)a2 + 83))
  {
    DSP_Host_Types::AdaptRequest::AdaptRequest((DSP_Host_Types::AdaptRequest *)&v30, a2);
    v5 = (_QWORD *)*((_QWORD *)a2 + 82);
    v6 = (_QWORD *)*v5;
    v7 = (std::__shared_weak_count *)v5[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v10 = 0;
    if (v4 > 9)
    {
      if (!v7)
        goto LABEL_30;
LABEL_26:
      v18 = (unint64_t *)&v7->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v10)
          goto LABEL_58;
      }
      else
      {
LABEL_30:
        if (!v10)
          goto LABEL_58;
      }
      DSP_Host_Types::FormatDescription::operator=((uint64_t)this + 8, v10);
      DSP_Host_Types::FormatDescription::operator=((uint64_t)this + 160, v10);
      if ((v4 & 0xFFFFFFFE) == 4)
      {
        v21 = (_QWORD *)*((_QWORD *)a2 + 31);
        v20 = (_QWORD *)*((_QWORD *)a2 + 32);
        for (i = v20 - v21; v21 != v20; ++v21)
          i -= (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v21 + 32))(*v21);
        if (!i)
        {
          v24 = (_QWORD *)*((_QWORD *)a2 + 31);
          v23 = (_QWORD *)*((_QWORD *)a2 + 32);
          for (j = v23 - v24; v24 != v23; ++v24)
            j -= (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v24 + 32))(*v24);
          if (!j)
          {
            if (!*((_BYTE *)a2 + 244))
              goto LABEL_64;
            if (*((_DWORD *)a2 + 60) == 1)
            {
              if (!*((_BYTE *)a2 + 217))
                goto LABEL_64;
              if (*((_BYTE *)a2 + 216))
                goto LABEL_44;
              if (!*((_BYTE *)a2 + 196))
                goto LABEL_64;
              if (*((_DWORD *)a2 + 48) == 1)
LABEL_44:
                DSP_Host_Types::FormatDescription::operator=((uint64_t)this + 8, (uint64_t)a2 + 120);
            }
          }
        }
      }
      if (*((_BYTE *)a2 + 444))
        v26 = *((_DWORD *)a2 + 110);
      else
        v26 = 0;
      *((_DWORD *)this + 78) = v26;
      v27 = *((unsigned __int8 *)this + 132);
      if (*((_BYTE *)this + 132))
        v27 = *((_DWORD *)this + 32);
      v28 = *((unsigned __int8 *)this + 284);
      if (*((_BYTE *)this + 284))
        v28 = *((_DWORD *)this + 70);
      if (v27 != v28)
        goto LABEL_58;
      if (*((_BYTE *)this + 56) && *((_BYTE *)this + 208))
      {
        if (*((double *)this + 6) == *((double *)this + 25))
        {
          v13 = 1;
          *((_BYTE *)this + 317) = 1;
LABEL_59:
          v30 = (void (**)())&off_1E699D0D8;
          v36 = (void **)&v35;
          std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v36);
          DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)&v34);
          DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v33);
          DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v32);
          v30 = off_1E699D128;
          std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v31);
          return v13;
        }
LABEL_58:
        v13 = *((_BYTE *)this + 317) != 0;
        goto LABEL_59;
      }
LABEL_64:
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    if (((1 << v4) & 0x1CE) == 0)
    {
      if (((1 << v4) & 0x30) != 0)
      {
        v11 = (uint64_t *)v6[86];
        v12 = (uint64_t *)v6[87];
LABEL_14:
        if (v11 == v12)
          goto LABEL_25;
        goto LABEL_15;
      }
      if (v4 != 9)
        goto LABEL_26;
      v11 = (uint64_t *)v6[89];
      if (v11 != (uint64_t *)v6[90])
      {
LABEL_15:
        v14 = *v11;
        v16 = *(_QWORD **)(*v11 + 240);
        v15 = *(_QWORD **)(*v11 + 248);
        for (k = v15 - v16; v16 != v15; ++v16)
          k -= (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v16 + 32))(*v16);
        if (k)
          goto LABEL_25;
        if (!*(_BYTE *)(v14 + 236))
          goto LABEL_65;
        if (*(_DWORD *)(v14 + 232) != 1)
          goto LABEL_25;
        if (!*(_BYTE *)(v14 + 209))
          goto LABEL_65;
        if (*(_BYTE *)(v14 + 208))
        {
LABEL_24:
          v10 = v14 + 112;
          goto LABEL_26;
        }
        if (!*(_BYTE *)(v14 + 188))
LABEL_65:
          std::__throw_bad_optional_access[abi:ne180100]();
        if (*(_DWORD *)(v14 + 184) == 1)
          goto LABEL_24;
LABEL_25:
        v10 = 0;
        goto LABEL_26;
      }
    }
    v11 = (uint64_t *)v6[83];
    v12 = (uint64_t *)v6[84];
    goto LABEL_14;
  }
  return 0;
}

void sub_1B5C20020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  DSP_HAL_BypassCallbacks::expectFormat(DSP_Host_Types::AdaptRequest const&)::$_1::~$_1((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t (***DSP_HAL_BypassCallbacks::onClientIO(uint64_t (***result)(), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))()
{
  _QWORD v7[5];

  v7[0] = a3;
  v7[1] = a4;
  v7[2] = a5;
  v7[3] = a6;
  v7[4] = a7;
  if (!*((_BYTE *)result + 317))
    return DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>((uint64_t)v7);
  if (a6 && a4 && a5)
  {
    if (a7)
      return DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(v7);
  }
  return result;
}

uint64_t DSP_HAL_BypassCallbacks::expectFormat(DSP_Host_Types::AdaptRequest const&)::$_1::~$_1(uint64_t a1)
{
  void **v3;

  *(_QWORD *)(a1 + 8) = &off_1E699D0D8;
  v3 = (void **)(a1 + 664);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)(a1 + 80));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(a1 + 56));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(a1 + 32));
  *(_QWORD *)(a1 + 8) = off_1E699D128;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](a1 + 16);
  return a1;
}

_QWORD *DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E699D270;
  v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(a1 + 13));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(a1 + 10));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(a1 + 7));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(a1 + 3));
  *a1 = off_1E699D2B0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

uint64_t DSP_HAL_BypassCallbacks::DSP_HAL_BypassCallbacks(uint64_t a1, _QWORD *a2)
{
  char *v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E699A310;
  DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)(a1 + 8), "");
  *(_QWORD *)(a1 + 8) = &off_1E699A3C0;
  DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)(a1 + 160), "");
  *(_QWORD *)(a1 + 160) = &off_1E699A3C0;
  *(_BYTE *)(a1 + 316) = 0;
  atomic_store(0, (unsigned __int8 *)(a1 + 316));
  v8 = xmmword_1B5D68E20;
  v9 = a1;
  std::function<void ()>::operator=<std::__bind<void (DSP_HAL_BypassCallbacks::*),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,void>(a2, (uint64_t)&v8);
  v4 = (char *)operator new(0x20uLL);
  *(_QWORD *)v4 = &off_1E699A4F0;
  *(_OWORD *)(v4 + 8) = xmmword_1B5D68E30;
  *((_QWORD *)v4 + 3) = a1;
  v10 = (__int128 *)v4;
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::swap[abi:ne180100](&v8, a2 + 4);
  v5 = v10;
  if (v10 == &v8)
  {
    v6 = 4;
    v5 = &v8;
    goto LABEL_5;
  }
  if (v10)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
  }
  v8 = xmmword_1B5D68E40;
  v9 = a1;
  std::function<void ()>::operator=<std::__bind<void (DSP_HAL_BypassCallbacks::*),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,void>(a2 + 8, (uint64_t)&v8);
  v8 = xmmword_1B5D68E50;
  v9 = a1;
  std::function<void ()>::operator=<std::__bind<void (DSP_HAL_BypassCallbacks::*),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,void>(a2 + 12, (uint64_t)&v8);
  v8 = xmmword_1B5D68E60;
  v9 = a1;
  std::function<void ()>::operator=<std::__bind<void (DSP_HAL_BypassCallbacks::*),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,void>(a2 + 16, (uint64_t)&v8);
  return a1;
}

void sub_1B5C2031C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus(v2);
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus(v1);
  _Unwind_Resume(a1);
}

void sub_1B5C20348()
{
  JUMPOUT(0x1B5C20338);
}

_QWORD *std::function<void ()(unsigned int)>::operator=<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0x20uLL);
  *(_QWORD *)v4 = &off_1E699A430;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *((_QWORD *)v4 + 3) = *(_QWORD *)(a2 + 16);
  v9 = v4;
  std::__function::__value_func<void ()>::swap[abi:ne180100](v8, a1);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E699A4F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E699A4F0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(_QWORD *a1, unsigned int *a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD *v9;

  v7 = a1[2];
  v8 = (uint64_t (*)(_QWORD *, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))a1[1];
  v9 = (_QWORD *)(a1[3] + (v7 >> 1));
  if ((v7 & 1) != 0)
    v8 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*v9 + v8);
  return v8(v9, *a2, a3, *a4, *a5, *a6, *a7);
}

uint64_t std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__16__bindIM23DSP_HAL_BypassCallbacksFvjRKN4AMCP15Proc_Cycle_InfoEmPNS2_11Proc_StreamEmS7_EJPS1_RKNS_12placeholders4__phILi1EEERKNSC_ILi2EEERKNSC_ILi3EEERKNSC_ILi4EEERKNSC_ILi5EEERKNSC_ILi6EEEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::target_type()
{
}

void std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E699A430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E699A430;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::operator()(_QWORD *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v3);
  return v3(v4, *a2);
}

uint64_t std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__16__bindIM23DSP_HAL_BypassCallbacksFvjEJPS1_RKNS_12placeholders4__phILi1EEEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::target_type()
{
}

void DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus(_QWORD *a1)
{
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus(a1);
  JUMPOUT(0x1B5E50688);
}

void HALS_PDPEngine::~HALS_PDPEngine(HALS_PDPEngine *this)
{
  HALS_IOEngine2::~HALS_IOEngine2(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_PDPEngine::GetZeroTimeStamp(HALS_PDPEngine *this, unsigned int a2, double *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result;
  int v6;
  _DWORD *exception;
  _BYTE v8[5];
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, double *, unint64_t *, unint64_t *))(*((_QWORD *)this + 140)
                                                                                               + 88))(*(unsigned int *)(*((_QWORD *)this + 139) + 16), a3, a4, a5);
  if ((_DWORD)result)
  {
    v8[0] = BYTE3(result);
    v8[1] = BYTE2(result);
    v8[2] = BYTE1(result);
    v6 = result;
    v8[3] = result;
    v8[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v10 = "HALS_PDPUCPlugIn.cpp";
      v11 = 1024;
      v12 = 163;
      v13 = 1024;
      v14 = v6;
      v15 = 2080;
      v16 = v8;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPUCPlugIn::GetZeroTimeStamp: got an error from the plug-in, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v6;
  }
  return result;
}

void sub_1B5C207BC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5C206C0);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_PDPEngine::_TellHardwareToStart(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  AudioObjectPropertyAddress v4;
  int v5;

  v4.mElement = 0;
  v5 = 1;
  v1 = *(_QWORD *)(a1 + 1120);
  v2 = *(unsigned int *)(*(_QWORD *)(a1 + 1112) + 16);
  *(_QWORD *)&v4.mSelector = 0x676C6F62676F696ELL;
  HALS_PDPUCPlugIn::ObjectSetPropertyData(*(HALS_PDPUCPlugIn **)(v1 + 80), v2, &v4, 0, 0, 4, &v5);
  return 0;
}

void sub_1B5C20850(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C20840);
}

uint64_t HALS_PDPEngine::_TellHardwareToStop(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  AudioObjectPropertyAddress v4;
  int v5;

  v5 = 0;
  v1 = *(_QWORD *)(a1 + 1120);
  v2 = *(unsigned int *)(*(_QWORD *)(a1 + 1112) + 16);
  *(_QWORD *)&v4.mSelector = 0x676C6F62676F696ELL;
  v4.mElement = 0;
  return HALS_PDPUCPlugIn::ObjectSetPropertyData(*(HALS_PDPUCPlugIn **)(v1 + 80), v2, &v4, 0, 0, 4, &v5);
}

void sub_1B5C208D4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C208C8);
}

uint64_t HALS_PDPEngine::_BeginIOCycle(HALS_PDPEngine *this, unsigned int a2, const HALS_IOEngineInfo *a3)
{
  uint64_t result;
  int v6;
  _DWORD *exception;
  _BYTE v8[5];
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  HALS_IOEngine2::_BeginIOCycle(this, a2, a3);
  result = (*(uint64_t (**)(_QWORD, _QWORD, char *, char *, double, double))(*((_QWORD *)this + 140) + 96))(*(unsigned int *)(*((_QWORD *)this + 139) + 16), *((unsigned int *)a3 + 110), (char *)a3 + 512, (char *)a3 + 576, *((double *)a3 + 80), *((double *)a3 + 81));
  if ((_DWORD)result)
  {
    v8[0] = BYTE3(result);
    v8[1] = BYTE2(result);
    v8[2] = BYTE1(result);
    v6 = result;
    v8[3] = result;
    v8[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v10 = "HALS_PDPUCPlugIn.cpp";
      v11 = 1024;
      v12 = 169;
      v13 = 1024;
      v14 = v6;
      v15 = 2080;
      v16 = v8;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPUCPlugIn::BeginIOCycle: got an error from the plug-in, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v6;
  }
  return result;
}

void sub_1B5C20A34(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5C20938);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_PDPEngine::_EndIOCycle(HALS_PDPEngine *this, const BOOL *a2, const HALS_IOEngineInfo *a3)
{
  uint64_t result;
  int v6;
  _DWORD *exception;
  _BYTE v8[5];
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  HALS_IOEngine2::_EndIOCycle(this, a2, a3);
  result = (*(uint64_t (**)(_QWORD, _QWORD, char *, char *, double, double))(*((_QWORD *)this + 140) + 136))(*(unsigned int *)(*((_QWORD *)this + 139) + 16), *((unsigned int *)a3 + 110), (char *)a3 + 512, (char *)a3 + 576, *((double *)a3 + 80), *((double *)a3 + 81));
  if ((_DWORD)result)
  {
    v8[0] = BYTE3(result);
    v8[1] = BYTE2(result);
    v8[2] = BYTE1(result);
    v6 = result;
    v8[3] = result;
    v8[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v10 = "HALS_PDPUCPlugIn.cpp";
      v11 = 1024;
      v12 = 201;
      v13 = 1024;
      v14 = v6;
      v15 = 2080;
      v16 = v8;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPUCPlugIn::EndIOCycle: got an error from the plug-in, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v6;
  }
  return result;
}

void sub_1B5C20BBC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5C20AC0);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_PDPEngine::_ReadFromStream_Read(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t result;
  _DWORD *exception;
  int v10;
  _BYTE v11[5];
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a6)
    v7 = *(_QWORD *)a6 + *(unsigned int *)(a6 + 8);
  else
    v7 = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, double, double))(*(_QWORD *)(a1 + 1120)
                                                                                                + 112))(*(unsigned int *)(*(_QWORD *)(a1 + 1112) + 16), *(unsigned int *)(a3 + 8), a5, a4 + 80, v7, *(double *)(a4 + 208), *(double *)(a4 + 216));
  if ((_DWORD)result)
  {
    v11[0] = BYTE3(result);
    v11[1] = BYTE2(result);
    v11[2] = BYTE1(result);
    v10 = result;
    v11[3] = result;
    v11[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v13 = "HALS_PDPUCPlugIn.cpp";
      v14 = 1024;
      v15 = 183;
      v16 = 1024;
      v17 = v10;
      v18 = 2080;
      v19 = v11;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPUCPlugIn::ReadFromStream: got an error from the plug-in, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v10;
  }
  return result;
}

uint64_t HALS_PDPEngine::_WriteToStream_Write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t result;
  _DWORD *exception;
  int v10;
  _BYTE v11[5];
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a6)
    v7 = *(_QWORD *)a6 + *(unsigned int *)(a6 + 8);
  else
    v7 = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, double, double))(*(_QWORD *)(a1 + 1120)
                                                                                                + 120))(*(unsigned int *)(*(_QWORD *)(a1 + 1112) + 16), *(unsigned int *)(a3 + 8), a5, a4 + 144, v7, *(double *)(a4 + 208), *(double *)(a4 + 216));
  if ((_DWORD)result)
  {
    v11[0] = BYTE3(result);
    v11[1] = BYTE2(result);
    v11[2] = BYTE1(result);
    v10 = result;
    v11[3] = result;
    v11[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v13 = "HALS_PDPUCPlugIn.cpp";
      v14 = 1024;
      v15 = 189;
      v16 = 1024;
      v17 = v10;
      v18 = 2080;
      v19 = v11;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPUCPlugIn::WriteToStream: got an error from the plug-in, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v10;
  }
  return result;
}

void sub_1B5C20EE0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5C20DE0);
  }
  _Unwind_Resume(a1);
}

void AMCP::Utility::Mach_Port::reset(AMCP::Utility::Mach_Port *this)
{
  std::unique_lock<std::mutex>::mutex_type *m;
  NSObject *v3;
  _QWORD *v4;
  char *v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  mach_port_name_t v9;
  ipc_space_t *v10;
  char v11;
  std::unique_lock<std::mutex> __lk;
  _QWORD handler[4];
  _BYTE v14[24];
  _BYTE *v15;
  std::condition_variable v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  m = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 8);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 8);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 8));
  v3 = *((_QWORD *)this + 9);
  if (!v3)
    goto LABEL_14;
  v16.__cv_.__sig = 1018212795;
  memset(v16.__cv_.__opaque, 0, sizeof(v16.__cv_.__opaque));
  v11 = 0;
  v4 = operator new(0x20uLL);
  *v4 = &off_1E699ADC8;
  v4[1] = &v16;
  v4[2] = &v11;
  v4[3] = this;
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 1174405120;
  handler[2] = ___ZN4AMCP7Utility9Mach_Port21reset_receive_handlerEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_8_13052;
  v5 = (char *)operator new(0x20uLL);
  *(_QWORD *)v5 = &off_1E699ADC8;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(v4 + 1);
  *((_QWORD *)v5 + 3) = v4[3];
  v15 = v5;
  dispatch_source_set_cancel_handler(v3, handler);
  dispatch_source_cancel(*((dispatch_source_t *)this + 9));
  while (!v11)
    std::condition_variable::wait(&v16, &__lk);
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
    dispatch_release(v6);
  v7 = v15;
  if (v15 == v14)
  {
    v8 = 4;
    v7 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_12;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_12:
  operator delete(v4);
  std::condition_variable::~condition_variable(&v16);
  if (__lk.__owns_)
  {
    m = __lk.__m_;
LABEL_14:
    std::mutex::unlock(m);
  }
  v9 = *(_DWORD *)this;
  if (*(_DWORD *)this)
  {
    v10 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
    if (!*((_BYTE *)this + 4) || (mach_port_deallocate(*MEMORY[0x1E0C83DA0], v9), (v9 = *(_DWORD *)this) != 0))
    {
      if (*((_BYTE *)this + 5))
        mach_port_mod_refs(*v10, v9, 1u, -1);
    }
  }
  *(_DWORD *)this = 0;
  *((_WORD *)this + 2) = 0;
}

void sub_1B5C210EC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4AMCP7Utility9Mach_Port21reset_receive_handlerEv_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void std::__function::__func<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0,std::allocator<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0,std::allocator<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E699ADC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0,std::allocator<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E699ADC8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0,std::allocator<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  std::mutex *v2;
  std::condition_variable *v3;

  v2 = (std::mutex *)(*(_QWORD *)(a1 + 24) + 8);
  std::mutex::lock(v2);
  v3 = *(std::condition_variable **)(a1 + 8);
  **(_BYTE **)(a1 + 16) = 1;
  std::condition_variable::notify_all(v3);
  std::mutex::unlock(v2);
}

uint64_t std::__function::__func<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0,std::allocator<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7Utility9Mach_Port21reset_receive_handlerEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0,std::allocator<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0>,void ()(void)>::target_type()
{
}

uint64_t AMCP::Utility::Mach_Port::create_port(AMCP::Utility::Mach_Port *this)
{
  ipc_space_t *v1;
  AMCP::Utility::Kernel_Error_Category *v2;
  unsigned int v3;
  AMCP::Log::Scope_Registry *v4;
  AMCP::Utility::Kernel_Error_Category *inserted;
  unsigned int v6;
  AMCP::Log::Scope_Registry *v7;
  uint64_t v8;
  NSObject *v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  void *exception;
  NSObject *v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  void *v17;
  char v18;
  int v19;
  mach_port_name_t *p_name;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();
  __int128 v24;
  uint64_t v25;
  std::runtime_error v26;
  __int128 v27;
  std::runtime_error v28;
  __int128 v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  mach_port_name_t name;
  NSObject **buf;
  __int16 v37;
  char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  const char *v42;
  const char *v43;
  const char *v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  name = 0;
  v1 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
  v2 = (AMCP::Utility::Kernel_Error_Category *)mach_port_allocate(*MEMORY[0x1E0C83DA0], 1u, &name);
  v3 = v2;
  AMCP::Utility::Kernel_Error_Category::get(v2);
  if (v3)
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v10 = *buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v12;
      v37 = 2080;
      v38 = "Mach_Port.cpp";
      v39 = 1024;
      v40 = 69;
      v41 = 2080;
      v42 = "kernel_error.operator BOOL()";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to allocate the mach port", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    exception = __cxa_allocate_exception(0x50uLL);
    MEMORY[0x1B5E50220](&v26, v3, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error(&v28, &v26);
    v29 = v27;
    v32 = 0;
    v33 = 0;
    v34 = -1;
    v28.__vftable = (std::runtime_error_vtbl *)&off_1E69A12F8;
    v30 = &unk_1E69A1320;
    v31 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v28);
    v43 = "static mach_port_t AMCP::Utility::Mach_Port::create_port(mach_port_msgcount_t)";
    v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Utility/Mach_Port.cpp";
    v45 = 69;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    v23 = off_1E69A20A0;
    v24 = v21;
    v25 = v22;
    v21 = 0uLL;
    v22 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)&buf, (uint64_t)&v23);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)exception, (uint64_t)&buf);
  }
  v19 = MEMORY[0x1B5E5064C]();
  p_name = &name;
  inserted = (AMCP::Utility::Kernel_Error_Category *)mach_port_insert_right(*v1, name, name, 0x14u);
  v6 = inserted;
  AMCP::Utility::Kernel_Error_Category::get(inserted);
  if (v6)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v14 = *buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = pthread_self();
      v16 = pthread_mach_thread_np(v15);
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v16;
      v37 = 2080;
      v38 = "Mach_Port.cpp";
      v39 = 1024;
      v40 = 85;
      v41 = 2080;
      v42 = "kernel_error.operator BOOL()";
      _os_log_error_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to create the send right", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v18);
    v17 = __cxa_allocate_exception(0x50uLL);
    MEMORY[0x1B5E50220](&v26, v6, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error(&v28, &v26);
    v29 = v27;
    v32 = 0;
    v33 = 0;
    v34 = -1;
    v28.__vftable = (std::runtime_error_vtbl *)&off_1E69A12F8;
    v30 = &unk_1E69A1320;
    v31 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v28);
    v43 = "static mach_port_t AMCP::Utility::Mach_Port::create_port(mach_port_msgcount_t)";
    v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Utility/Mach_Port.cpp";
    v45 = 85;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    v23 = off_1E69A20A0;
    v24 = v21;
    v25 = v22;
    v21 = 0uLL;
    v22 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)&buf, (uint64_t)&v23);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)v17, (uint64_t)&buf);
  }
  v8 = name;
  applesauce::raii::v1::detail::ScopeGuard<AMCP::Utility::Mach_Port::create_port::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&v19);
  return v8;
}

void sub_1B5C21624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,std::runtime_error a24,uint64_t a25,uint64_t a26,std::runtime_error a27)
{
  applesauce::raii::v1::detail::ScopeGuard<AMCP::Utility::Mach_Port::create_port::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<AMCP::Utility::Mach_Port::create_port(unsigned int)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1B5E5064C]() > *(_DWORD *)a1)
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], **(_DWORD **)(a1 + 8));
  return a1;
}

void AMCP::Utility::Mach_Port::set_receive_handler(unsigned int *a1, dispatch_queue_t *a2, uint64_t a3)
{
  std::mutex *v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  NSObject *v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  void *exception;
  __int128 v18;
  uint64_t v19;
  uint64_t (**v20)();
  __int128 v21;
  uint64_t v22;
  std::runtime_error v23;
  std::runtime_error v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  _QWORD handler[4];
  _BYTE v32[24];
  _BYTE *v33;
  uint8_t buf[8];
  __int16 v35;
  char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  _BYTE v40[14];
  const char *v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (!*a1)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v13;
      v35 = 2080;
      v36 = "Mach_Port.cpp";
      v37 = 1024;
      v38 = 123;
      v39 = 2080;
      *(_QWORD *)v40 = "m_port != MACH_PORT_NULL";
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  v6 = (std::mutex *)(a1 + 2);
  std::mutex::lock((std::mutex *)(a1 + 2));
  v7 = dispatch_source_create(MEMORY[0x1E0C80D98], *a1, 0, *a2);
  v8 = *((_QWORD *)a1 + 9);
  *((_QWORD *)a1 + 9) = v7;
  if (v8)
  {
    dispatch_release(v8);
    v7 = *((_QWORD *)a1 + 9);
  }
  if (!v7)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v14 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = pthread_self();
      v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v16;
      v35 = 2080;
      v36 = "Mach_Port.cpp";
      v37 = 1024;
      v38 = 127;
      v39 = 2080;
      *(_QWORD *)v40 = "!m_receive_source";
      _os_log_error_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to allocate the dispatch source", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v23, "failed to allocate the dispatch source");
    std::runtime_error::runtime_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v25 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    *(_QWORD *)&v40[6] = "void AMCP::Utility::Mach_Port::set_receive_handler(const applesauce::dispatch::queue &, Receive_Handler)";
    v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Utility/Mach_Port.cpp";
    v42 = 127;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v18);
    v20 = off_1E69A20A0;
    v21 = v18;
    v22 = v19;
    v18 = 0uLL;
    v19 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v20);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 1174405120;
  handler[2] = ___ZN4AMCP7Utility9Mach_Port19set_receive_handlerERKN10applesauce8dispatch2v15queueENSt3__18functionIFvvEEE_block_invoke;
  handler[3] = &__block_descriptor_tmp_13069;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v32, a3);
  dispatch_source_set_event_handler(v7, handler);
  dispatch_resume(*((dispatch_object_t *)a1 + 9));
  v9 = v33;
  if (v33 == v32)
  {
    v10 = 4;
    v9 = v32;
    goto LABEL_9;
  }
  if (v33)
  {
    v10 = 5;
LABEL_9:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  std::mutex::unlock(v6);
}

void sub_1B5C21BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::mutex *v27;

  std::mutex::unlock(v27);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4AMCP7Utility9Mach_Port19set_receive_handlerERKN10applesauce8dispatch2v15queueENSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t AMCP::Utility::Mach_Port::receive_message(mach_port_name_t rcv_name, mach_msg_size_t rcv_size, mach_msg_header_t *msg, mach_msg_header_t *a4)
{
  mach_msg_option_t v5;

  if (!rcv_name)
    return 268451842;
  if ((_DWORD)a4)
    v5 = 258;
  else
    v5 = 2;
  *(_QWORD *)&msg->msgh_bits = 0;
  *(_QWORD *)&msg->msgh_remote_port = 0;
  *(_QWORD *)&msg->msgh_voucher_port = 0;
  return mach_msg(msg, v5, 0, rcv_size, rcv_name, 0, 0);
}

void AMCP::Time_Stamp_Historian::clear_time_stamp_buffer(AMCP::Time_Stamp_Historian *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *exception;
  __int128 v11;
  uint64_t v12;
  uint64_t (**v13)();
  __int128 v14;
  uint64_t v15;
  std::string v16;
  std::logic_error v17;
  std::logic_error v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint8_t buf[8];
  __int16 v28;
  char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE v33[14];
  const char *v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v2 = (os_unfair_lock_s *)((char *)this + 60);
  os_unfair_lock_lock((os_unfair_lock_t)this + 15);
  v3 = *((_QWORD *)this + 12);
  if (v3)
  {
    v4 = *((_QWORD *)this + 10);
    do
    {
      v4 += 24;
      if (v4 == *((_QWORD *)this + 9))
        v4 = *((_QWORD *)this + 8);
      --v3;
    }
    while (v3);
    *((_QWORD *)this + 10) = v4;
  }
  *((_QWORD *)this + 12) = 0;
  v25 = 0uLL;
  v5 = 3;
  v26 = 0;
  do
  {
    v6 = boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::push_back_impl<AMCP::Zero_Time_Stamp_Delta const&>((uint64_t *)this + 8, &v25);
    --v5;
  }
  while (v5);
  *((_DWORD *)this + 6) = 0;
  if (*((_QWORD *)this + 12) != 3)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v9;
      v28 = 2080;
      v29 = "Time_Stamp_Historian.cpp";
      v30 = 1024;
      v31 = 85;
      v32 = 2080;
      *(_QWORD *)v33 = "not (m_time_stamp_buffer.size() == k_time_stamp_history_buffer_size)";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v16);
    std::logic_error::logic_error(&v17, &v16);
    v17.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v18, &v17);
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = -1;
    v18.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v19 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
    *(_QWORD *)&v33[6] = "void AMCP::Time_Stamp_Historian::clear_time_stamp_buffer()";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Clock/Time_Stamp_Historian.cpp";
    v35 = 85;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    v13 = off_1E69A20A0;
    v14 = v11;
    v15 = v12;
    v11 = 0uLL;
    v12 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v13);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  os_unfair_lock_unlock(v2);
}

void sub_1B5C21FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  os_unfair_lock_s *v28;

  os_unfair_lock_unlock(v28);
  _Unwind_Resume(a1);
}

void AMCP::Time_Stamp_Historian::clear_time_stamp_deltas(AMCP::Time_Stamp_Historian *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  void *exception;
  __int128 v10;
  uint64_t v11;
  uint64_t (**v12)();
  __int128 v13;
  uint64_t v14;
  std::string v15;
  std::logic_error v16;
  std::logic_error v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  uint8_t buf[8];
  __int16 v27;
  char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  _BYTE v32[14];
  const char *v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = (os_unfair_lock_s *)((char *)this + 104);
  os_unfair_lock_lock((os_unfair_lock_t)this + 26);
  v3 = *((_QWORD *)this + 18);
  if (v3)
  {
    v4 = *((_QWORD *)this + 16);
    do
    {
      v4 += 24;
      if (v4 == *((_QWORD *)this + 15))
        v4 = *((_QWORD *)this + 14);
      --v3;
    }
    while (v3);
    *((_QWORD *)this + 16) = v4;
  }
  *((_QWORD *)this + 18) = 0;
  v24 = 0uLL;
  v25 = 0;
  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::push_back_impl<AMCP::Zero_Time_Stamp_Delta const&>((uint64_t *)this + 14, &v24);
  v5 = boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::push_back_impl<AMCP::Zero_Time_Stamp_Delta const&>((uint64_t *)this + 14, &v24);
  if (*((_QWORD *)this + 18) != 2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      v27 = 2080;
      v28 = "Time_Stamp_Historian.cpp";
      v29 = 1024;
      v30 = 104;
      v31 = 2080;
      *(_QWORD *)v32 = "not (m_time_stamp_delta_buffer.size() == k_time_stamp_history_buffer_size - 1)";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v23);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v15);
    std::logic_error::logic_error(&v16, &v15);
    v16.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v17, &v16);
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = -1;
    v17.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v18 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v17);
    *(_QWORD *)&v32[6] = "void AMCP::Time_Stamp_Historian::clear_time_stamp_deltas()";
    v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Clock/Time_Stamp_Historian.cpp";
    v34 = 104;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v10);
    v12 = off_1E69A20A0;
    v13 = v10;
    v14 = v11;
    v10 = 0uLL;
    v11 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v12);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  os_unfair_lock_unlock(v2);
}

void sub_1B5C22318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  os_unfair_lock_s *v28;

  os_unfair_lock_unlock(v28);
  _Unwind_Resume(a1);
}

void boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::destroy(void **a1)
{
  char *v1;
  char *v2;
  void *v3;

  v1 = (char *)a1[4];
  if (v1)
  {
    v2 = (char *)a1[2];
    do
    {
      v2 += 24;
      if (v2 == a1[1])
        v2 = (char *)*a1;
      --v1;
    }
    while (v1);
    a1[2] = v2;
  }
  v3 = *a1;
  if (v3)
    operator delete(v3);
}

uint64_t *boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::push_back_impl<AMCP::Zero_Time_Stamp_Delta const&>(uint64_t *result, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v2 = result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v2 - *result) >> 3) == result[4])
  {
    if (v2 != *result)
    {
      v3 = result[3];
      v4 = *a2;
      *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v3 = v4;
      v5 = result[3] + 24;
      result[3] = v5;
      if (v5 == result[1])
      {
        v5 = *result;
        result[3] = *result;
      }
      result[2] = v5;
    }
  }
  else
  {
    v6 = result[3];
    v7 = *a2;
    *(_QWORD *)(v6 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v6 = v7;
    v8 = result[3] + 24;
    result[3] = v8;
    if (v8 == result[1])
      result[3] = *result;
    ++result[4];
  }
  return result;
}

void AMCP::Time_Stamp_Historian::calculate_and_save_delta(AMCP::Time_Stamp_Historian *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if (*((_QWORD *)this + 12) >= 2uLL)
  {
    v2 = (_QWORD *)((char *)this + 64);
    v3 = boost::circular_buffer<AMCP::Zero_Time_Stamp,std::allocator<AMCP::Zero_Time_Stamp>>::at((_QWORD *)this + 8, 2);
    v4 = boost::circular_buffer<AMCP::Zero_Time_Stamp,std::allocator<AMCP::Zero_Time_Stamp>>::at(v2, 1);
    v5 = *(_QWORD *)(v4 + 16);
    v6 = *(_QWORD *)(v3 + 8) - *(_QWORD *)(v4 + 8);
    *(double *)&v7 = *(double *)v3 - *(double *)v4;
    *((_QWORD *)&v7 + 1) = v6;
    v8 = v5;
    os_unfair_lock_lock((os_unfair_lock_t)this + 26);
    boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::push_back_impl<AMCP::Zero_Time_Stamp_Delta const&>((uint64_t *)this + 14, &v7);
    os_unfair_lock_unlock((os_unfair_lock_t)this + 26);
  }
}

void HALS_IOProc::~HALS_IOProc(HALS_IOProc *this)
{
  NSObject *v2;
  const void *v3;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)*((_QWORD *)this + 3);
  if (v3)
    _Block_release(v3);
}

void HALS_MultiTap_Engine::~HALS_MultiTap_Engine(HALS_MultiTap_Engine *this)
{
  HALS_MultiTap_Engine::~HALS_MultiTap_Engine(this);
  JUMPOUT(0x1B5E50688);
}

{
  *(_QWORD *)this = off_1E699AFA0;
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)this + 728);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 712);
  HALS_IOEngine::~HALS_IOEngine(this);
}

void HALS_MultiTap_Engine::RegisterIOContext(os_unfair_lock_s *this, HALS_IOContext *a2)
{
  int v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_DWORD *)a2 + 4);
    v5 = 136315650;
    v6 = "HALS_MultiTap.cpp";
    v7 = 1024;
    v8 = 1205;
    v9 = 1024;
    v10 = v4;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_MultiTap_Engine::RegisterIOContext: registering IOContext %d", (uint8_t *)&v5, 0x18u);
  }
  os_unfair_lock_lock(this + 177);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)&this[182], *((_DWORD *)a2 + 4), *((_DWORD *)a2 + 4));
  os_unfair_lock_unlock(this + 177);
}

void sub_1B5C226F4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void HALS_MultiTap_Engine::UnregisterIOContext(os_unfair_lock_s *this, HALS_IOContext *a2)
{
  unsigned int v4;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  unsigned int v7;
  uint64_t *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  unsigned int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_DWORD *)a2 + 4);
    v9 = 136315650;
    v10 = "HALS_MultiTap.cpp";
    v11 = 1024;
    v12 = 1213;
    v13 = 1024;
    v14 = v4;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_MultiTap_Engine::UnregisterIOContext: unregistering IOContext %d", (uint8_t *)&v9, 0x18u);
  }
  v5 = this + 177;
  os_unfair_lock_lock(this + 177);
  v6 = this + 182;
  v7 = *((_DWORD *)a2 + 4);
  v8 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v6, v7);
  if (v8)
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(v6, v8);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v9 = 136315650;
    v10 = "HALS_MultiTap.cpp";
    v11 = 1024;
    v12 = 1223;
    v13 = 1024;
    v14 = v7;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_MultiTap_Engine::UnregisterIOContext: unregistering IOContext %d, but it wasn't registered", (uint8_t *)&v9, 0x18u);
  }
  os_unfair_lock_unlock(v5);
}

void HALS_MultiTap_Engine::PauseAllContexts(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  HALS_Object *v13;
  HALS_ObjectMap *v14;
  unint64_t v15;
  unsigned int *v16;
  _DWORD *v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v27;

  v4 = (os_unfair_lock_s *)(a1 + 708);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 708));
  v5 = *(uint64_t **)(a1 + 744);
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v6 = 0;
  if (v5)
  {
    v7 = v5;
    do
    {
      ++v6;
      v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>,std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>>((char *)&v25, v5, v6);
  v8 = v25;
  v9 = v26;
  os_unfair_lock_unlock(v4);
  if (v8 != v9)
  {
    v10 = v8;
    do
    {
      v11 = *v10;
      v12 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v10);
      v14 = (HALS_ObjectMap *)v12;
      if (v12
        && (*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(v12 + 96) + 192))(*(_QWORD *)(v12 + 96), *(unsigned int *)(a1 + 16)))
      {
        v16 = *(unsigned int **)(a2 + 8);
        v15 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v16 >= v15)
        {
          v18 = *(unsigned int **)a2;
          v19 = ((uint64_t)v16 - *(_QWORD *)a2) >> 2;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v21 = v15 - (_QWORD)v18;
          if (v21 >> 1 > v20)
            v20 = v21 >> 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
            v22 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
          {
            v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v22);
            v18 = *(unsigned int **)a2;
            v16 = *(unsigned int **)(a2 + 8);
          }
          else
          {
            v13 = 0;
          }
          v23 = (unsigned int *)(v22 + 4 * v19);
          *v23 = v11;
          v17 = v23 + 1;
          while (v16 != v18)
          {
            v24 = *--v16;
            *--v23 = v24;
          }
          *(_QWORD *)a2 = v23;
          *(_QWORD *)(a2 + 8) = v17;
          *(_QWORD *)(a2 + 16) = v22 + 4 * (_QWORD)v13;
          if (v18)
            operator delete(v18);
        }
        else
        {
          *v16 = v11;
          v17 = v16 + 1;
        }
        *(_QWORD *)(a2 + 8) = v17;
      }
      HALS_ObjectMap::ReleaseObject(v14, v13);
      ++v10;
    }
    while (v10 != v9);
  }
  if (v8)
    operator delete(v8);
}

void sub_1B5C22A24(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void HALS_MultiTap_Engine::ResumeAllContexts(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  HALS_Object *v10;
  HALS_ObjectMap *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;

  v2 = (os_unfair_lock_s *)(a1 + 708);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 708));
  v3 = *(uint64_t **)(a1 + 744);
  v13 = 0;
  v14 = 0;
  v12 = 0;
  v4 = 0;
  if (v3)
  {
    v5 = v3;
    do
    {
      ++v4;
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>,std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>>((char *)&v12, v3, v4);
  v6 = v12;
  v7 = v13;
  os_unfair_lock_unlock(v2);
  if (v6 != v7)
  {
    v8 = v6;
    do
    {
      v9 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v8);
      v11 = (HALS_ObjectMap *)v9;
      if (v9)
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 96) + 200))(*(_QWORD *)(v9 + 96), *(unsigned int *)(a1 + 16));
      HALS_ObjectMap::ReleaseObject(v11, v10);
      ++v8;
    }
    while (v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B5C22B44(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void HALS_MultiTap_Engine::AssessAllContexts(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  HALS_Object *v10;
  HALS_ObjectMap *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;

  v2 = this + 177;
  os_unfair_lock_lock(this + 177);
  v3 = *(uint64_t **)&this[186]._os_unfair_lock_opaque;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  v4 = 0;
  if (v3)
  {
    v5 = v3;
    do
    {
      ++v4;
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>,std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>>((char *)&v12, v3, v4);
  v6 = v12;
  v7 = v13;
  os_unfair_lock_unlock(v2);
  if (v6 != v7)
  {
    v8 = v6;
    do
    {
      v9 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v8);
      v11 = (HALS_ObjectMap *)v9;
      if (v9)
        (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 96) + 216))(*(_QWORD *)(v9 + 96));
      HALS_ObjectMap::ReleaseObject(v11, v10);
      ++v8;
    }
    while (v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B5C22C50(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void HALS_MultiTap_Engine::CopyAllContexts(uint64_t a1, char **a2)
{
  os_unfair_lock_s *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v27;

  a2[1] = *a2;
  v4 = (os_unfair_lock_s *)(a1 + 708);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 708));
  v5 = *(uint64_t **)(a1 + 744);
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v6 = 0;
  if (v5)
  {
    v7 = v5;
    do
    {
      ++v6;
      v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>,std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>>((char *)&v25, v5, v6);
  v8 = v25;
  v9 = v26;
  os_unfair_lock_unlock(v4);
  if (v8 != v9)
  {
    v10 = v8;
    do
    {
      v11 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v10);
      v12 = v11;
      if (v11)
      {
        v14 = (uint64_t *)a2[1];
        v13 = (unint64_t)a2[2];
        if ((unint64_t)v14 >= v13)
        {
          v16 = ((char *)v14 - *a2) >> 3;
          if ((unint64_t)(v16 + 1) >> 61)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v17 = v13 - (_QWORD)*a2;
          v18 = v17 >> 2;
          if (v17 >> 2 <= (unint64_t)(v16 + 1))
            v18 = v16 + 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
            v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v19);
          else
            v20 = 0;
          v21 = (uint64_t *)(v19 + 8 * v16);
          *v21 = v12;
          v15 = (char *)(v21 + 1);
          v23 = *a2;
          v22 = a2[1];
          if (v22 != *a2)
          {
            do
            {
              v24 = *((_QWORD *)v22 - 1);
              v22 -= 8;
              *--v21 = v24;
            }
            while (v22 != v23);
            v22 = *a2;
          }
          *a2 = (char *)v21;
          a2[1] = v15;
          a2[2] = (char *)(v19 + 8 * v20);
          if (v22)
            operator delete(v22);
        }
        else
        {
          *v14 = v11;
          v15 = (char *)(v14 + 1);
        }
        a2[1] = v15;
      }
      ++v10;
    }
    while (v10 != v9);
  }
  if (v8)
    operator delete(v8);
}

void sub_1B5C22E14(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

float HALS_MultiTap_Engine::GetCombinedIOContextVolumeScalarForClient(HALS_MultiTap_Engine *this)
{
  return 1.0;
}

uint64_t HALS_MultiTap_Engine::NeedNoDisplaySleepPowerAssertion(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::GetOwningDevice(HALS_MultiTap_Engine *this)
{
  return 0;
}

double HALS_MultiTap_Engine::GetNominalSampleRate(HALS_MultiTap_Engine *this)
{
  return *(double *)(*((_QWORD *)this + 89) + 24);
}

uint64_t HALS_MultiTap_Engine::GetRingBufferFrameSize(HALS_MultiTap_Engine *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 89) + 416);
}

uint64_t HALS_MultiTap_Engine::GetSafetyOffset(HALS_MultiTap_Engine *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 89) + 68);
}

uint64_t HALS_MultiTap_Engine::GetLatency(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::GetClockAlgorithm(HALS_MultiTap_Engine *this)
{
  return 1918990199;
}

uint64_t HALS_MultiTap_Engine::IsClockStable(HALS_MultiTap_Engine *this)
{
  return 1;
}

uint64_t HALS_MultiTap_Engine::UseClockBoundsCheck(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::GetDataStartByteOffset(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::GetNumberStreams(HALS_MultiTap_Engine *this, uint64_t a2)
{
  return a2;
}

uint64_t HALS_MultiTap_Engine::GetNumberStreamsVisibleToClient(HALS_MultiTap_Engine *this)
{
  return (*(uint64_t (**)(HALS_MultiTap_Engine *))(*(_QWORD *)this + 400))(this);
}

uint64_t HALS_MultiTap_Engine::IsStreamAtIndexActive(HALS_MultiTap_Engine *this)
{
  return 1;
}

uint64_t HALS_MultiTap_Engine::GetStartingChannelForStreamAtIndex(HALS_MultiTap_Engine *this, uint64_t a2)
{
  return a2;
}

__n128 HALS_MultiTap_Engine::GetVirtualFormatForStreamAtIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v4 = *(_QWORD *)(a1 + 712);
  result = *(__n128 *)(v4 + 24);
  v6 = *(_OWORD *)(v4 + 40);
  *(_QWORD *)(a4 + 32) = *(_QWORD *)(v4 + 56);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v6;
  return result;
}

__n128 HALS_MultiTap_Engine::GetPhysicalFormatForStreamAtIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v4 = *(_QWORD *)(a1 + 712);
  result = *(__n128 *)(v4 + 24);
  v6 = *(_OWORD *)(v4 + 40);
  *(_QWORD *)(a4 + 32) = *(_QWORD *)(v4 + 56);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v6;
  return result;
}

uint64_t HALS_MultiTap_Engine::CalculateBufferByteSizeForStreamAtIndex(HALS_MultiTap_Engine *this, BOOL a2, unsigned int a3, int a4)
{
  return (*(_DWORD *)(*((_QWORD *)this + 89) + 48) * a4);
}

uint64_t HALS_MultiTap_Engine::HasAnyNonMixableFormats(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::GetStartSample(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::SetDSPForStreamAtIndex(HALS_MultiTap_Engine *this, BOOL a2, unsigned int a3, const HALS_DSPSettings *a4)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::HasSoftwareReferenceStreamAtIndex(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::HasSoftwareReferenceStream(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::SetDSPPropertyForStreamAtIndex(HALS_MultiTap_Engine *this, BOOL a2, unsigned int a3, unsigned int a4, unsigned int a5, const void *a6)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::GetDSPPropertyInfoForStreamAtIndex(HALS_MultiTap_Engine *this, BOOL a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::GetDSPPropertyForStreamAtIndex(HALS_MultiTap_Engine *this, BOOL a2, unsigned int a3, unsigned int a4, unsigned int *a5, void *a6)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::HasDSPPropertyForStreamAtIndex(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::SetDSPParameterForStreamAtIndex(HALS_MultiTap_Engine *this, float a2)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::GetDSPParameterForStreamAtIndex(HALS_MultiTap_Engine *this, BOOL a2, unsigned int a3, unsigned int a4, float *a5)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::HasDSPParameterForStreamAtIndex(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::IsCaptureFileEnabled(HALS_MultiTap_Engine *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK20HALS_MultiTap_Engine20IsCaptureFileEnabledEv_block_invoke;
  v4[3] = &unk_1E699B328;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MultiTap_Engine *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5C2301C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void HALS_MultiTap_Engine::SetAudioCaptureMode(uint64_t a1, int a2)
{
  HALB_Mutex *v2;
  _QWORD v3[5];
  int v4;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN20HALS_MultiTap_Engine19SetAudioCaptureModeE17AudioCapturerMode_block_invoke;
  v3[3] = &__block_descriptor_tmp_19_13135;
  v3[4] = a1;
  v4 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

uint64_t HALS_MultiTap_Engine::GetZeroTimeStamp(HALS_MultiTap_Engine *this, unsigned int a2, double *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  Float64 v17;
  AudioTimeStamp v19;
  AudioTimeStamp v20;

  v9 = *((_QWORD *)this + 89);
  v10 = mach_absolute_time();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 120));
  v11 = *(_QWORD *)(v9 + 136);
  v12 = *(double *)(v9 + 144);
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 120));
  if (v11)
  {
    v13 = -(double)(v11 - v10);
    if (v10 >= v11)
      v13 = (double)(v10 - v11);
    v14 = round(v13 / v12);
  }
  else
  {
    v14 = 0.0;
  }
  v15 = *((_QWORD *)this + 89);
  v16 = *(_QWORD *)(v15 + 416);
  memset(&v20.mHostTime, 0, 48);
  *(_QWORD *)&v20.mFlags = 1;
  v17 = floor(v14 / (double)v16) * (double)v16;
  memset(&v19, 0, 56);
  *(_QWORD *)&v19.mFlags = 2;
  v20.mSampleTime = v17;
  HALS_MultiTap::translate_time((os_unfair_lock_s *)v15, &v20, &v19);
  *a3 = v17;
  *a4 = v19.mHostTime;
  *a5 = 1;
  return 0;
}

uint64_t HALS_MultiTap_Engine::Register_IOThread(HALS_MultiTap_Engine *this, double a2)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::Unregister_IOThread(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::RegisterIOBuffer(HALS_MultiTap_Engine *this, BOOL a2, unsigned int a3, unsigned int a4, unsigned int a5, void *a6)
{
  return 0;
}

BOOL HALS_MultiTap_Engine::IsIORunning(HALS_MultiTap_Engine *this)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  _BOOL8 v3;

  v1 = *((_QWORD *)this + 89);
  v2 = (os_unfair_lock_s *)(v1 + 360);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 360));
  v3 = *(_QWORD *)(v1 + 392) != 0;
  os_unfair_lock_unlock(v2);
  return v3;
}

BOOL HALS_MultiTap_Engine::IsIORunningForReferenceStream(HALS_MultiTap_Engine *this)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  _BOOL8 v3;

  v1 = *((_QWORD *)this + 89);
  v2 = (os_unfair_lock_s *)(v1 + 360);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 360));
  v3 = *(_QWORD *)(v1 + 392) != 0;
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t HALS_MultiTap_Engine::StartIO(os_unfair_lock_s *this, HALS_IOContext *a2)
{
  os_unfair_lock_s *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v9;
  uint64_t *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned int v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  void *__p[2];
  char v21;
  uint64_t v22[3];
  unsigned int v23;

  v4 = this + 177;
  os_unfair_lock_lock(this + 177);
  v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(&this[182]._os_unfair_lock_opaque, *((_DWORD *)a2 + 4));
  os_unfair_lock_unlock(v4);
  if (!v5)
    return 1852797029;
  kdebug_trace();
  v6 = *(_QWORD *)&this[178]._os_unfair_lock_opaque;
  v23 = *((_DWORD *)a2 + 4);
  v7 = v23;
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 360));
  if (std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)(v6 + 368), v23))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 360));
  }
  else
  {
    v9 = operator new(0x28uLL);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = &off_1E699B528;
    *((_DWORD *)v9 + 6) = v7;
    v9[4] = 0;
    v10 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v6 + 368, v7, &v23);
    *(_QWORD *)&v11 = v9 + 3;
    *((_QWORD *)&v11 + 1) = v9;
    v12 = (std::__shared_weak_count *)v10[4];
    *(_OWORD *)(v10 + 3) = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (*(_DWORD *)(v6 + 512))
    {
      v15 = v23;
      if (!*(_QWORD *)(std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v6 + 368, v23, &v23)[3]+ 8)&& *(_DWORD *)(v6 + 32) == 1819304813)
      {
        memset(v22, 0, sizeof(v22));
        std::string::basic_string[abi:ne180100]<0>(__p, "MultiTap");
        HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)0>(v22, (uint64_t)__p);
        HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)4>(v22, &v23);
        v19 = 1;
        HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)2>(v22, &v19);
        if (v21 < 0)
          operator delete(__p[0]);
        v16 = (char *)operator new();
        HALB_CaptureFile::HALB_CaptureFile(v16, v22, v6 + 24, *(_DWORD *)(v6 + 512));
        v17 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v6 + 368, v15, &v23);
        std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100]((ca::concurrent::details::service_thread ****)(v17[3] + 8), (ca::concurrent::details::service_thread ***)v16);
        __p[0] = v22;
        std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 360));
    HALS_MultiTap::start((os_unfair_lock_s *)v6);
    if (*(_BYTE *)(v6 + 464))
    {
      LODWORD(v22[0]) = 0;
      v18 = *(_QWORD *)(v6 + 456);
      if (!v18)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 48))(v18, v22);
    }
  }
  return 0;
}

void sub_1B5C234C4(void *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E50688](v1, 0x1020C40C1DD3C34);
  __clang_call_terminate(a1);
}

void HALS_MultiTap_Engine::StopIO(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t *v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _QWORD v25[2];
  char v26;

  v4 = (os_unfair_lock_s *)(a1 + 708);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 708));
  v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)(a1 + 728), *(_DWORD *)(a2 + 16));
  os_unfair_lock_unlock(v4);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 712);
    v7 = *(_DWORD *)(a2 + 16);
    HALS_MultiTap::fetch_reader_state((HALS_MultiTap *)&v23, v6, v7);
    if (v23)
    {
      HALS_MultiTap::stop((os_unfair_lock_s *)v6);
      os_unfair_lock_lock((os_unfair_lock_t)(v6 + 360));
      v8 = (_QWORD *)(v6 + 368);
      v9 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)(v6 + 368), v7);
      if (v9)
      {
        v10 = *(int8x8_t *)(v6 + 376);
        v11 = v9[1];
        v12 = (uint8x8_t)vcnt_s8(v10);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          if (v11 >= *(_QWORD *)&v10)
            v11 %= *(_QWORD *)&v10;
        }
        else
        {
          v11 &= *(_QWORD *)&v10 - 1;
        }
        v13 = *(uint64_t **)(*v8 + 8 * v11);
        do
        {
          v14 = v13;
          v13 = (uint64_t *)*v13;
        }
        while (v13 != v9);
        if (v14 == (uint64_t *)(v6 + 384))
          goto LABEL_21;
        v15 = v14[1];
        if (v12.u32[0] > 1uLL)
        {
          if (v15 >= *(_QWORD *)&v10)
            v15 %= *(_QWORD *)&v10;
        }
        else
        {
          v15 &= *(_QWORD *)&v10 - 1;
        }
        if (v15 != v11)
        {
LABEL_21:
          if (!*v9)
            goto LABEL_22;
          v16 = *(_QWORD *)(*v9 + 8);
          if (v12.u32[0] > 1uLL)
          {
            if (v16 >= *(_QWORD *)&v10)
              v16 %= *(_QWORD *)&v10;
          }
          else
          {
            v16 &= *(_QWORD *)&v10 - 1;
          }
          if (v16 != v11)
LABEL_22:
            *(_QWORD *)(*v8 + 8 * v11) = 0;
        }
        v17 = *v9;
        if (*v9)
        {
          v18 = *(_QWORD *)(v17 + 8);
          if (v12.u32[0] > 1uLL)
          {
            if (v18 >= *(_QWORD *)&v10)
              v18 %= *(_QWORD *)&v10;
          }
          else
          {
            v18 &= *(_QWORD *)&v10 - 1;
          }
          if (v18 != v11)
          {
            *(_QWORD *)(*v8 + 8 * v18) = v14;
            v17 = *v9;
          }
        }
        *v14 = v17;
        *v9 = 0;
        --*(_QWORD *)(v6 + 392);
        v25[0] = v9;
        v25[1] = v6 + 384;
        v26 = 1;
        std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 360));
      if (*(_BYTE *)(v6 + 464))
      {
        LODWORD(v25[0]) = 1;
        v19 = *(_QWORD *)(v6 + 456);
        if (!v19)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v19 + 48))(v19, v25);
      }
    }
    v20 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    kdebug_trace();
  }
}

uint64_t HALS_MultiTap_Engine::BeginIOThread(HALS_MultiTap_Engine *this, unsigned int a2, const HALS_IOEngineInfo *a3)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::EndIOThread(HALS_MultiTap_Engine *this, unsigned int a2, const HALS_IOEngineInfo *a3)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::BeginIOCycle(HALS_MultiTap_Engine *this, unsigned int a2, const HALS_IOEngineInfo *a3)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::EndIOCycle(HALS_MultiTap_Engine *this, unsigned int a2, const HALS_IOEngineInfo *a3)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::BeginReading(HALS_MultiTap_Engine *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::ReadFromStream(uint64_t *a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  uint64_t result;
  void *v14;
  uint64_t v15;
  double v16;
  std::__shared_weak_count *mHostTime;
  unint64_t *v18;
  unint64_t v19;
  unsigned int *v20;
  __int128 v21;
  __int128 v22;
  HALS_IOClock *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  double v27;
  unint64_t v28[2];
  AudioTimeStamp v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v12 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(a1 + 91, a2);
  result = 1852797029;
  if (!a3 && v12)
  {
    v14 = (void *)(*(_QWORD *)a6 + *(unsigned int *)(a6 + 8));
    v15 = a1[89];
    v16 = *(double *)(a5 + 512);
    HALS_MultiTap::fetch_reader_state((HALS_MultiTap *)&v29, v15, a2);
    if (*(_QWORD *)&v29.mSampleTime)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v15 + 408));
      read_from_dal_buffer(a4, (uint64_t)v16, v15 + 24, *(_QWORD *)(v15 + 520), (uint64_t **)(v15 + 528), (uint64_t *)(v15 + 536), v14);
      os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 408));
    }
    mHostTime = (std::__shared_weak_count *)v29.mHostTime;
    if (v29.mHostTime)
    {
      v18 = (unint64_t *)(v29.mHostTime + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))mHostTime->__on_zero_shared)(mHostTime);
        std::__shared_weak_count::__release_weak(mHostTime);
      }
    }
    HALS_MultiTap::fetch_reader_state((HALS_MultiTap *)&v30, a1[89], a2);
    if (v30)
    {
      v20 = *(unsigned int **)(v30 + 8);
      if (v20)
      {
        if ((*(unsigned int (**)(uint64_t *))(*a1 + 880))(a1))
        {
          v21 = *(_OWORD *)(a5 + 528);
          *(_OWORD *)&v29.mSampleTime = *(_OWORD *)(a5 + 512);
          *(_OWORD *)&v29.mRateScalar = v21;
          v22 = *(_OWORD *)(a5 + 560);
          *(_OWORD *)&v29.mSMPTETime.mSubframes = *(_OWORD *)(a5 + 544);
          *(_OWORD *)&v29.mSMPTETime.mHours = v22;
          v29.mFlags = DWORD2(v22) | 6;
          HALS_IOClock::TranslateTime(*(_QWORD *)(a5 + 288), (const AudioTimeStamp *)(a5 + 512), &v29);
          v23 = *(HALS_IOClock **)(a5 + 288);
          v28[0] = 0;
          v28[1] = 0;
          v27 = 0.0;
          HALS_IOClock::GetRaw0Time(v23, &v27, v28);
          HALB_CaptureFile::Write(v20, a5 + 448, &v29.mSampleTime, (uint64_t)&v27, a4, (uint64_t)v14);
        }
      }
    }
    v24 = v31;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    return 0;
  }
  return result;
}

void sub_1B5C23978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_MultiTap_Engine::EndReading(HALS_MultiTap_Engine *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::BeginWriting(HALS_MultiTap_Engine *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::WriteToStream()
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::WriteToStream_CommitTrailingSilence()
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::EndWriting(HALS_MultiTap_Engine *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::HandleOverload()
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::ProcessInputStreamData(HALS_MultiTap_Engine *this, HALS_IOContext *a2, unsigned int a3, const HALS_IOEngineInfo *a4, unsigned __int8 *a5)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::ProcessOutputStreamData(HALS_MultiTap_Engine *this, HALS_IOContext *a2, unsigned int a3, const HALS_IOEngineInfo *a4, unsigned __int8 *a5)
{
  return 0;
}

double HALS_MultiTap_Engine::GetEarliestCurrentPositionForOutputStream(HALS_MultiTap_Engine *this)
{
  return 0.0;
}

uint64_t HALS_MultiTap_Engine::CanSkipBeginEndIOOperation(HALS_MultiTap_Engine *this)
{
  return 1;
}

uint64_t HALS_MultiTap_Engine::NotifyWaitingTapThatIOHasFullyStarted(HALS_MultiTap_Engine *this)
{
  uint64_t v1;
  unsigned int **v2;
  unsigned int **v3;
  uint64_t v4;
  HALS_Object *v5;
  uint64_t v6;

  v1 = *((_QWORD *)this + 89);
  v2 = *(unsigned int ***)(v1 + 328);
  v3 = *(unsigned int ***)(v1 + 336);
  while (v2 != v3)
  {
    v4 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**v2);
    v6 = v4;
    if (v4)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 96) + 152))(*(_QWORD *)(v4 + 96)) & 1) == 0)
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 96) + 760))(*(_QWORD *)(v6 + 96), *(unsigned int *)(v6 + 16));
    }
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v6, v5);
    v2 += 2;
  }
  return 0;
}

void sub_1B5C23A68(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

BOOL HALS_MultiTap_Engine::_IsCaptureFileEnabled(HALS_MultiTap_Engine *this)
{
  return *((_DWORD *)this + 176) != 0;
}

uint64_t HALS_MultiTap_Engine::_SetAudioCaptureMode(uint64_t result, int a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(result + 704);
  if (a2)
  {
    *(_DWORD *)(result + 704) = v2 + 1;
    if (v2)
      return result;
LABEL_7:
    *(_DWORD *)(*(_QWORD *)(result + 712) + 512) = a2;
    return result;
  }
  if (v2)
  {
    v3 = v2 - 1;
    *(_DWORD *)(result + 704) = v3;
    if (!v3)
    {
      a2 = 0;
      goto LABEL_7;
    }
  }
  return result;
}

void HALS_MultiTap::fetch_reader_state(HALS_MultiTap *this, uint64_t a2, unsigned int a3)
{
  os_unfair_lock_s *v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v6 = (os_unfair_lock_s *)(a2 + 360);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 360));
  v7 = *(_QWORD *)(a2 + 376);
  if (!v7)
    goto LABEL_17;
  v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = a3;
    if (v7 <= a3)
      v9 = a3 % v7;
  }
  else
  {
    v9 = ((_DWORD)v7 - 1) & a3;
  }
  v10 = *(uint64_t ***)(*(_QWORD *)(a2 + 368) + 8 * v9);
  if (!v10 || (v11 = *v10) == 0)
  {
LABEL_17:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    goto LABEL_18;
  }
  while (1)
  {
    v12 = v11[1];
    if (v12 == a3)
      break;
    if (v8.u32[0] > 1uLL)
    {
      if (v12 >= v7)
        v12 %= v7;
    }
    else
    {
      v12 &= v7 - 1;
    }
    if (v12 != v9)
      goto LABEL_17;
LABEL_16:
    v11 = (uint64_t *)*v11;
    if (!v11)
      goto LABEL_17;
  }
  if (*((_DWORD *)v11 + 4) != a3)
    goto LABEL_16;
  v13 = v11[4];
  *(_QWORD *)this = v11[3];
  *((_QWORD *)this + 1) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
LABEL_18:
  os_unfair_lock_unlock(v6);
}

void HALS_MultiTap::stop(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = this + 30;
  os_unfair_lock_lock(this + 30);
  v3 = *(_QWORD *)&this[32]._os_unfair_lock_opaque;
  if (!v3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_QWORD *)&this[32]._os_unfair_lock_opaque = -1;
      goto LABEL_9;
    }
    v6 = 136315394;
    v7 = "HALS_MultiTap.cpp";
    v8 = 1024;
    v9 = 886;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MultiTap::stop: too many stops", (uint8_t *)&v6, 0x12u);
    v3 = *(_QWORD *)&this[32]._os_unfair_lock_opaque;
  }
  v4 = v3 - 1;
  *(_QWORD *)&this[32]._os_unfair_lock_opaque = v4;
  if (!v4)
  {
    *(_QWORD *)&this[34]._os_unfair_lock_opaque = 0;
    os_unfair_lock_lock(this + 102);
    v5 = *(_QWORD *)&this[130]._os_unfair_lock_opaque;
    *(_QWORD *)&this[130]._os_unfair_lock_opaque = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)&this[104]._os_unfair_lock_opaque = (uint64_t)(*(double *)&this[6]._os_unfair_lock_opaque * 0.25);
    *(_QWORD *)&this[106]._os_unfair_lock_opaque = 0;
    os_unfair_lock_unlock(this + 102);
  }
LABEL_9:
  os_unfair_lock_unlock(v2);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;
  _QWORD v35[2];
  char v36;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = operator new(0x28uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = *a3;
  v13[3] = 0;
  v13[4] = 0;
  v36 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
    goto LABEL_64;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = (int8x8_t)v18;
  else
    prime = (int8x8_t)v17;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      v26 = std::__next_prime(v26);
    }
    else
    {
      v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2)
        v26 = v28;
    }
    if (*(_QWORD *)&prime <= v26)
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *(_QWORD *)(a1 + 8);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v20 = operator new(8 * *(_QWORD *)&prime);
  v21 = *(void **)a1;
  *(_QWORD *)a1 = v20;
  if (v21)
    operator delete(v21);
  v22 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
  while (*(_QWORD *)&prime != v22);
  v23 = (_QWORD *)*v12;
  if (*v12)
  {
    v24 = v23[1];
    v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(_QWORD *)&prime)
        v24 %= *(_QWORD *)&prime;
    }
    else
    {
      v24 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
    v29 = (_QWORD *)*v23;
    if (*v23)
    {
      do
      {
        v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(_QWORD *)&prime)
            v30 %= *(_QWORD *)&prime;
        }
        else
        {
          v30 &= *(_QWORD *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          *v23 = *v29;
          *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
          v29 = v23;
        }
        v30 = v24;
LABEL_56:
        v23 = v29;
        v29 = (_QWORD *)*v29;
        v24 = v30;
      }
      while (v29);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_64:
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  i = (uint64_t *)v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_1B5C24114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void HALS_MultiTap::start(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = this + 30;
  os_unfair_lock_lock(this + 30);
  v3 = *(_QWORD *)&this[32]._os_unfair_lock_opaque;
  if (v3 == -1)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
LABEL_6:
      *(_QWORD *)&this[32]._os_unfair_lock_opaque = 0;
      goto LABEL_7;
    }
    v4 = 136315394;
    v5 = "HALS_MultiTap.cpp";
    v6 = 1024;
    v7 = 870;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MultiTap::start: too many starts", (uint8_t *)&v4, 0x12u);
    v3 = *(_QWORD *)&this[32]._os_unfair_lock_opaque;
  }
  *(_QWORD *)&this[32]._os_unfair_lock_opaque = v3 + 1;
  if (!v3)
  {
    *(_QWORD *)&this[34]._os_unfair_lock_opaque = mach_absolute_time();
    os_unfair_lock_lock(this + 102);
    HALS_MultiTap::_allocate_ring_buffer((HALS_MultiTap *)this);
    os_unfair_lock_unlock(this + 102);
    if (!*(_QWORD *)&this[130]._os_unfair_lock_opaque)
      goto LABEL_6;
  }
LABEL_7:
  os_unfair_lock_unlock(v2);
}

void sub_1B5C24244(_Unwind_Exception *exception_object, int a2)
{
  os_unfair_lock_s *v2;

  if (a2)
  {
    os_unfair_lock_unlock(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void HALS_MultiTap::_allocate_ring_buffer(HALS_MultiTap *this)
{
  const CA::StreamDescription *v2;
  double v3;
  std::string *v4;
  std::string::size_type size;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  double v13;
  uint64_t v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  AMCP::DAL::Ring_Buffer_Base *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::string v23;
  std::string v24;
  std::string __p;
  __int128 v26;
  std::string v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = (HALS_MultiTap *)((char *)this + 24);
  v3 = *((double *)this + 3);
  *((_QWORD *)this + 52) = (uint64_t)(v3 * 0.25);
  *((_QWORD *)this + 53) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v24, "tap timebase ");
  std::to_string(&v23, 5);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v23;
  else
    v4 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  else
    size = v23.__r_.__value_.__l.__size_;
  v6 = std::string::append(&v24, (const std::string::value_type *)v4, size);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v27, ":", 1uLL);
  __p = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  AMCP::Graph::make_mock_timebase((std::__shared_weak_count **)&v26, 0x17395u, 0, (uint64_t)&__p, v3);
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)this + 536, &v26);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  v12 = (_QWORD *)operator new();
  AMCP::DAL::Container::Container(v12, (uint64_t)v2, 0.0);
  std::unique_ptr<AMCP::DAL::Container>::reset[abi:ne180100]((uint64_t *)this + 66, (uint64_t)v12);
  v13 = (double)*((uint64_t *)this + 52);
  v14 = *((_QWORD *)this + 68);
  *(_QWORD *)&v15 = *((_QWORD *)this + 67);
  *((_QWORD *)&v15 + 1) = v14;
  if (v14)
  {
    v16 = (unint64_t *)(v14 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  LODWORD(v27.__r_.__value_.__l.__data_) = 2;
  *(_OWORD *)&v27.__r_.__value_.__r.__words[1] = *(unint64_t *)&v13;
  v28 = v15;
  v18 = (AMCP::DAL::Ring_Buffer_Base *)operator new();
  AMCP::DAL::Ring_Buffer_Base::Ring_Buffer_Base(v18, v2, (const AMCP::DAL::DAL_Time_Delta *)&v27);
  *(_QWORD *)v18 = &off_1E6993510;
  v19 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = v18;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B5C24504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,__int128 buf,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;

  if (a2)
  {
    MEMORY[0x1B5E50688](v33, 0x10A1C404618BBCFLL);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
    __cxa_begin_catch(exception_object);
    v35 = *(_QWORD *)(v32 + 520);
    *(_QWORD *)(v32 + 520) = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136315394;
      *(_QWORD *)((char *)&buf + 4) = "HALS_MultiTap.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 937;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_MultiTap::_allocate_ring_buffer: failed to allocate Mixing_Ring_Buffer", (uint8_t *)&buf, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5C244D0);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<HALS_MultiTap_Reader_State>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699B528;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_MultiTap_Reader_State>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699B528;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

ca::concurrent::details::service_thread ***std::__shared_ptr_emplace<HALS_MultiTap_Reader_State>::__on_zero_shared(uint64_t a1)
{
  return std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100]((ca::concurrent::details::service_thread ****)(a1 + 32), 0);
}

void HALS_MultiTap::translate_time(os_unfair_lock_s *this, const AudioTimeStamp *a2, AudioTimeStamp *a3)
{
  AudioTimeStampFlags mFlags;
  UInt64 v7;
  double v8;
  AudioTimeStampFlags v9;
  double mSampleTime;
  UInt64 mHostTime;
  double v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  AudioTimeStampFlags v17;
  UInt64 v18;
  double v19;

  mFlags = a3->mFlags;
  if ((mFlags & 1) != 0)
  {
    os_unfair_lock_lock(this + 30);
    v7 = *(_QWORD *)&this[34]._os_unfair_lock_opaque;
    v8 = *(double *)&this[36]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(this + 30);
    v9 = a2->mFlags;
    if ((v9 & 1) != 0)
    {
      mSampleTime = a2->mSampleTime;
    }
    else
    {
      mSampleTime = 0.0;
      if (v7 && (v9 & 2) != 0)
      {
        mHostTime = a2->mHostTime;
        v12 = -(double)(v7 - mHostTime);
        v13 = mHostTime >= v7;
        v14 = mHostTime - v7;
        if (v13)
          v12 = (double)v14;
        mSampleTime = round(v12 / v8);
      }
    }
    a3->mSampleTime = mSampleTime;
    mFlags = a3->mFlags;
    if ((mFlags & 2) == 0)
    {
LABEL_3:
      if ((mFlags & 4) == 0)
        return;
      goto LABEL_4;
    }
  }
  else if ((mFlags & 2) == 0)
  {
    goto LABEL_3;
  }
  os_unfair_lock_lock(this + 30);
  v15 = *(_QWORD *)&this[34]._os_unfair_lock_opaque;
  v16 = *(double *)&this[36]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(this + 30);
  v17 = a2->mFlags;
  if ((v17 & 2) != 0)
  {
    v18 = a2->mHostTime;
  }
  else
  {
    v18 = 0;
    if (v15 && (v17 & 1) != 0)
    {
      v19 = a2->mSampleTime;
      if (a2->mSampleTime >= 0.0)
        v18 = v15 + vcvtad_u64_f64(v16 * v19);
      else
        v18 = v15 - vcvtad_u64_f64(v16 * (0.0 - v19));
    }
  }
  a3->mHostTime = v18;
  if ((a3->mFlags & 4) != 0)
LABEL_4:
    a3->mRateScalar = 1.0;
}

uint64_t ___ZN20HALS_MultiTap_Engine19SetAudioCaptureModeE17AudioCapturerMode_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 888))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t ___ZNK20HALS_MultiTap_Engine20IsCaptureFileEnabledEv_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 880))(*(_QWORD *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

vm_address_t HALS_MultiTap_Writer_State::initialize(HALS_MultiTap_Writer_State *this)
{
  const AudioStreamBasicDescription *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  NSObject *v8;
  const char *v9;
  HALS_IOProcessor *v10;
  unsigned int v11;
  uint64_t v12;
  vm_address_t result;
  __int128 v14[2];
  uint64_t v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (const AudioStreamBasicDescription *)((char *)this + 176);
  v3 = *((_OWORD *)this + 12);
  v14[0] = *((_OWORD *)this + 11);
  v14[1] = v3;
  v15 = *((_QWORD *)this + 26);
  *(_QWORD *)&v14[0] = **((_QWORD **)this + 1);
  v4 = operator new();
  HALS_IOProcessor::HALS_IOProcessor(v4, 0, 0, v14, v2, *((unsigned __int8 *)this + 32), 0, 0x40u, 0, 0, 0, 0);
  v5 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v4 = *((_QWORD *)this + 16);
  }
  (*(void (**)(uint64_t, double, double))(*(_QWORD *)v4 + 32))(v4, 24000000.0 / *(double *)v14, 24000000.0 / *((double *)this + 22));
  v6 = *((unsigned __int8 *)this + 32);
  v7 = HALS_IOProcessor::NeedsLocalBuffer(*((HALS_IOProcessor **)this + 16));
  if (v6)
  {
    if ((v7 & 1) == 0 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v17 = "HALS_MultiTap.cpp";
      v18 = 1024;
      v19 = 102;
      v8 = MEMORY[0x1E0C81028];
      v9 = "%25s:%-5d  HALS_MultiTap_Writer_State::initialize: processor doesn't need the local buffer with drift correction enabled?";
LABEL_10:
      _os_log_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, v9, buf, 0x12u);
    }
  }
  else if (v7 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v17 = "HALS_MultiTap.cpp";
    v18 = 1024;
    v19 = 106;
    v8 = MEMORY[0x1E0C81028];
    v9 = "%25s:%-5d  HALS_MultiTap_Writer_State::initialize: processor needs the local buffer even with drift correction disabled?";
    goto LABEL_10;
  }
  v10 = (HALS_IOProcessor *)*((_QWORD *)this + 16);
  if (HALS_IOProcessor::NeedsIntermediate1Buffer(v10) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v17 = "HALS_MultiTap.cpp";
    v18 = 1024;
    v19 = 108;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MultiTap_Writer_State::initialize: processor needs the intermediate 1 buffer?", buf, 0x12u);
    v10 = (HALS_IOProcessor *)*((_QWORD *)this + 16);
  }
  if (HALS_IOProcessor::NeedsIntermediate2Buffer(v10)
    && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v17 = "HALS_MultiTap.cpp";
    v18 = 1024;
    v19 = 109;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MultiTap_Writer_State::initialize: processor needs the intermediate 2 buffer?", buf, 0x12u);
    v10 = (HALS_IOProcessor *)*((_QWORD *)this + 16);
  }
  v11 = (*(uint64_t (**)(HALS_IOProcessor *, _QWORD, uint64_t))(*(_QWORD *)v10 + 16))(v10, 0, 0x2000);
  if (v11 <= 0x2000)
    v12 = 0x2000;
  else
    v12 = v11;
  *((_QWORD *)this + 17) = v12;
  *((_QWORD *)this + 18) = HALB_IOBufferManager_Server::AllocateBuffer((*((_DWORD *)this + 50) * v12));
  result = HALB_IOBufferManager_Server::AllocateBuffer((*((_DWORD *)this + 50) * *((_DWORD *)this + 34)));
  *((_QWORD *)this + 19) = result;
  *((_QWORD *)this + 20) = 0;
  return result;
}

void sub_1B5C24BA0(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    *(_QWORD *)(v2 + 152) = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)(v3 - 64) = 136315394;
      *(_QWORD *)(v3 - 60) = "HALS_MultiTap.cpp";
      *(_WORD *)(v3 - 52) = 1024;
      *(_DWORD *)(v3 - 50) = 128;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_MultiTap_Writer_State::initialize: HALB_IOBufferManager_Server::AllocateBuffer failed for m_corrected_buffer", (uint8_t *)(v3 - 64), 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5C24B6CLL);
  }
  _Unwind_Resume(exception_object);
}

void HALS_MultiTap_Writer_State::teardown(HALS_MultiTap_Writer_State *this)
{
  uint64_t v2;
  HALB_IOBufferManager_Server *v3;
  HALB_IOBufferManager_Server *v4;

  v2 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (HALB_IOBufferManager_Server *)*((_QWORD *)this + 18);
  if (v3)
  {
    HALB_IOBufferManager_Server::FreeBuffer(v3, *((_DWORD *)this + 50) * *((_DWORD *)this + 34));
    *((_QWORD *)this + 18) = 0;
  }
  v4 = (HALB_IOBufferManager_Server *)*((_QWORD *)this + 19);
  if (v4)
  {
    HALB_IOBufferManager_Server::FreeBuffer(v4, *((_DWORD *)this + 50) * *((_DWORD *)this + 34));
    *((_QWORD *)this + 19) = 0;
  }
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 20) = 0;
}

uint64_t HALS_MultiTap::copy_engine(HALS_MultiTap *this)
{
  HALS_ObjectMap *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  HALS_Object *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t (**v19)(HALS_Object *__hidden);
  unint64_t v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _BYTE buf[18];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = (HALS_ObjectMap *)*((unsigned int *)this + 4);
  if (!(_DWORD)v2)
  {
    v3 = operator new();
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v4 || (v5 = *(_QWORD *)this, (v6 = std::__shared_weak_count::lock(v4)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v7 = v6;
    v22 = 0;
    v23 = 0;
    HALS_System::GetInstance(buf, 0, &v22);
    HALS_IOEngine::HALS_IOEngine((HALS_IOEngine *)v3, *(HALS_IODevice **)buf, v8, v9, v10);
    v11 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    *(_QWORD *)v3 = off_1E699AFA0;
    *(_QWORD *)(v3 + 704) = 0;
    *(_QWORD *)(v3 + 712) = v5;
    *(_QWORD *)(v3 + 720) = v7;
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *(_OWORD *)(v3 + 728) = 0u;
    *(_OWORD *)(v3 + 744) = 0u;
    *(_DWORD *)(v3 + 760) = 1065353216;
    if (v5 || !os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v19 = off_1E699AFA0;
    }
    else
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_MultiTap.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1194;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MultiTap_Engine::HALS_MultiTap_Engine: no MultiTap", buf, 0x12u);
      v19 = *(uint64_t (***)(HALS_Object *__hidden))v3;
    }
    ((void (*)(uint64_t, uint64_t))v19[73])(v3, 1);
    do
      v20 = __ldaxr(v17);
    while (__stlxr(v20 - 1, v17));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    (**(void (***)(uint64_t))v3)(v3);
    v2 = (HALS_ObjectMap *)*(unsigned int *)(v3 + 16);
    *((_DWORD *)this + 4) = (_DWORD)v2;
  }
  return HALS_ObjectMap::CopyObjectByObjectID(v2);
}

void sub_1B5C24F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  HALS_IOEngine *v11;
  uint64_t v12;
  uint64_t v13;

  if (a2)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(v13);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v12);
    HALS_IOEngine::~HALS_IOEngine(v11);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void HALS_MultiTap::register_meta_device(os_unfair_lock_s *this, unsigned int a2)
{
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  unsigned int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v6 = 136315650;
    v7 = "HALS_MultiTap.cpp";
    v8 = 1024;
    v9 = 211;
    v10 = 1024;
    v11 = a2;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_MultiTap::register_meta_device: registering IOContext %d", (uint8_t *)&v6, 0x18u);
  }
  v4 = this + 18;
  os_unfair_lock_lock(this + 18);
  v5 = this + 20;
  if (std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v5, a2)&& os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v6 = 136315394;
    v7 = "HALS_MultiTap.cpp";
    v8 = 1024;
    v9 = 214;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MultiTap::register_meta_device: meta device already is already registered", (uint8_t *)&v6, 0x12u);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v5, a2, a2);
  os_unfair_lock_unlock(v4);
}

void sub_1B5C25160(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void HALS_MultiTap::unregister_meta_device(os_unfair_lock_s *a1, unsigned int a2)
{
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136315650;
    v8 = "HALS_MultiTap.cpp";
    v9 = 1024;
    v10 = 220;
    v11 = 1024;
    v12 = a2;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_MultiTap::unregister_meta_device: unregistering IOContext %d", (uint8_t *)&v7, 0x18u);
  }
  v4 = a1 + 18;
  os_unfair_lock_lock(a1 + 18);
  v5 = a1 + 20;
  v6 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v5, a2);
  if (v6)
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(v5, v6);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v7 = 136315394;
    v8 = "HALS_MultiTap.cpp";
    v9 = 1024;
    v10 = 223;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MultiTap::unregister_meta_device: meta device already is not registered", (uint8_t *)&v7, 0x12u);
  }
  os_unfair_lock_unlock(v4);
}

void HALS_MultiTap::set_format(HALS_MultiTap *this, __int128 *a2, uint64_t a3)
{
  int v3;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  void *exception;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  HALS_MultiTap_Writer_State **v14;
  HALS_MultiTap_Writer_State **v15;
  HALS_MultiTap_Writer_State *v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *i;
  _QWORD *v21;
  int v22;
  __int128 v23;
  __int128 v24;
  int v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  HALS_ObjectMap *v32;
  HALS_IOContext **v33;
  HALS_IOContext **v34;
  HALS_IOContext *v35;
  const __CFDictionary *v36;
  AMCP::Log::Scope_Registry *v37;
  int v38;
  std::__shared_weak_count *v39;
  NSObject *v40;
  unint64_t *v41;
  unint64_t v42;
  _opaque_pthread_t *v43;
  mach_port_t v44;
  os_unfair_lock_s *v45;
  void *v46;
  _BYTE *v47;
  unsigned __int8 v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  HALS_Object *v59;
  NSObject *v60;
  _opaque_pthread_t *v61;
  mach_port_t v62;
  HALS_ObjectMap *v63;
  uint64_t v64[5];
  uint64_t v65;
  std::__shared_weak_count *v66;
  __int128 v67;
  uint64_t v68;
  void *__p;
  __int128 v70;
  uint64_t v71;
  std::string v72;
  std::logic_error v73;
  std::logic_error v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  char v80;
  _BYTE v81[24];
  _BYTE *v82;
  uint8_t buf[8];
  __int128 v84;
  __int128 v85;
  const char *v86;
  int v87;
  _OWORD *v88;
  uint64_t v89;

  v3 = a3;
  v89 = *MEMORY[0x1E0C80C00];
  if ((a3 & 0xFF00000000) == 0)
    v3 = *((_DWORD *)this + 16);
  if (v3 == 1)
  {
    if (*((_DWORD *)a2 + 7) != 2)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v60 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        v61 = pthread_self();
        v62 = pthread_mach_thread_np(v61);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v62;
        LOWORD(v84) = 2080;
        *(_QWORD *)((char *)&v84 + 2) = "HALS_MultiTap.cpp";
        WORD5(v84) = 1024;
        HIDWORD(v84) = 439;
        LOWORD(v85) = 2080;
        *(_QWORD *)((char *)&v85 + 2) = "not (format.mChannelsPerFrame == 2)";
        _os_log_error_impl(&dword_1B57BA000, v60, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Format must be stereo for stereo mixdown", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v80);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Format must be stereo for stereo mixdown", (uint64_t)&v72);
      std::logic_error::logic_error(&v73, &v72);
      v73.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v74, &v73);
      v76 = 0;
      v77 = 0;
      v78 = 0;
      v79 = -1;
      v74.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v75 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v74);
      *((_QWORD *)&v85 + 1) = "void HALS_MultiTap::set_format(const CA::StreamDescription &, std::optional<HALS_MultiChan"
                              "nelMixer::Mixdown>)";
      v86 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_MultiTap.cpp";
      v87 = 439;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v67);
      v70 = v67;
      v71 = v68;
      v67 = 0uLL;
      v68 = 0;
      __p = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&__p);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
LABEL_68:
    }
  }
  else if (!v3 && *((_DWORD *)a2 + 7) != 1)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      LOWORD(v84) = 2080;
      *(_QWORD *)((char *)&v84 + 2) = "HALS_MultiTap.cpp";
      WORD5(v84) = 1024;
      HIDWORD(v84) = 436;
      LOWORD(v85) = 2080;
      *(_QWORD *)((char *)&v85 + 2) = "not (format.mChannelsPerFrame == 1)";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Format must be mono for mono mixdown", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v80);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Format must be mono for mono mixdown", (uint64_t)&v72);
    std::logic_error::logic_error(&v73, &v72);
    v73.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v74, &v73);
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v79 = -1;
    v74.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v75 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v74);
    *((_QWORD *)&v85 + 1) = "void HALS_MultiTap::set_format(const CA::StreamDescription &, std::optional<HALS_MultiChanne"
                            "lMixer::Mixdown>)";
    v86 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_MultiTap.cpp";
    v87 = 436;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v67);
    v70 = v67;
    v71 = v68;
    v67 = 0uLL;
    v68 = 0;
    __p = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&__p);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    goto LABEL_68;
  }
  v10 = HALS_MultiTap::copy_engine(this);
  v11 = v10;
  v74.__vftable = 0;
  v74.__imp_.__imp_ = 0;
  v75 = 0;
  if (v10)
    (*(void (**)(uint64_t, std::logic_error *))(*(_QWORD *)v10 + 216))(v10, &v74);
  *(_QWORD *)buf = (char *)this + 152;
  LOBYTE(v84) = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)((char *)this + 152));
  os_unfair_lock_lock((os_unfair_lock_t)this + 30);
  os_unfair_lock_lock((os_unfair_lock_t)this + 102);
  v12 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = (__int128 *)((char *)this + 24);
  *((_QWORD *)this + 52) = (uint64_t)(*((double *)this + 3) * 0.25);
  *((_QWORD *)this + 53) = 0;
  v14 = (HALS_MultiTap_Writer_State **)*((_QWORD *)this + 41);
  v15 = (HALS_MultiTap_Writer_State **)*((_QWORD *)this + 42);
  while (v14 != v15)
  {
    v16 = *v14;
    v14 += 2;
    HALS_MultiTap_Writer_State::teardown(v16);
  }
  v17 = *a2;
  v18 = a2[1];
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 4);
  *v13 = v17;
  *(_OWORD *)((char *)this + 40) = v18;
  *((_DWORD *)this + 16) = v3;
  *(_QWORD *)&v17 = *((_QWORD *)this + 3);
  *((double *)this + 18) = 24000000.0 / *(double *)&v17;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 52) = (uint64_t)(*(double *)&v17 * 0.25);
  if (*((_QWORD *)this + 16))
  {
    *((_QWORD *)this + 17) = mach_absolute_time();
    HALS_MultiTap::_allocate_ring_buffer(this);
  }
  v63 = (HALS_ObjectMap *)v11;
  v19 = (_QWORD *)*((_QWORD *)this + 41);
  for (i = (_QWORD *)*((_QWORD *)this + 42); v19 != i; v31[35] = 0)
  {
    v21 = (_QWORD *)*v19;
    v22 = *((_DWORD *)this + 16);
    v23 = *v13;
    v24 = *(_OWORD *)((char *)this + 40);
    v21[26] = *((_QWORD *)this + 7);
    *((_OWORD *)v21 + 11) = v23;
    *((_OWORD *)v21 + 12) = v24;
    v25 = *((_DWORD *)v21 + 10);
    v26 = *v13;
    v27 = *(_OWORD *)((char *)this + 40);
    v21[13] = *((_QWORD *)this + 7);
    *(_OWORD *)(v21 + 11) = v27;
    *(_OWORD *)(v21 + 9) = v26;
    if (v22 == 2 || v25 != v22)
    {
      *((_DWORD *)v21 + 10) = v22;
      v28 = v21[6];
      if (v21[7] != v28)
      {
        v29 = 0;
        v30 = 56;
        do
        {
          std::vector<std::vector<std::byte>>::__clear[abi:ne180100]((uint64_t *)(v28 + v30));
          HALS_MultiChannelMixer::SetupGainTable((HALS_MultiChannelMixer *)(v21 + 5), v29++);
          v28 = v21[6];
          v30 += 80;
        }
        while (v29 < 0xCCCCCCCCCCCCCCCDLL * ((v21[7] - v28) >> 4));
      }
    }
    HALS_MultiTap_Writer_State::initialize((HALS_MultiTap_Writer_State *)v21);
    v31 = (_QWORD *)*v19;
    v19 += 2;
    v31[27] = 0;
    v31[28] = *((_QWORD *)this + 17);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 102);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 30);
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
  v32 = v63;
  if (v63)
  {
    __p = 0;
    v70 = 0uLL;
    (*(void (**)(HALS_ObjectMap *, void **))(*(_QWORD *)v63 + 240))(v63, &__p);
    v34 = (HALS_IOContext **)__p;
    v33 = (HALS_IOContext **)v70;
    if (__p != (void *)v70)
    {
      do
      {
        v35 = *v34;
        v36 = (const __CFDictionary *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)*v34 + 12) + 560))(*((_QWORD *)*v34 + 12));
        v37 = (AMCP::Log::Scope_Registry *)HALS_IOContext::SetComposition(v35, v36);
        v38 = (int)v37;
        if ((_DWORD)v37)
        {
          AMCP::Log::Scope_Registry::get(v37);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v39 = (std::__shared_weak_count *)v84;
          v40 = **(NSObject ***)buf;
          if ((_QWORD)v84)
          {
            v41 = (unint64_t *)(v84 + 8);
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            v43 = pthread_self();
            v44 = pthread_mach_thread_np(v43);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v44;
            LOWORD(v84) = 2080;
            *(_QWORD *)((char *)&v84 + 2) = "HALS_MultiTap.cpp";
            WORD5(v84) = 1024;
            HIDWORD(v84) = 498;
            LOWORD(v85) = 1024;
            *(_DWORD *)((char *)&v85 + 2) = v38;
            _os_log_error_impl(&dword_1B57BA000, v40, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_IOContext::SetComposition returned an error during tap sample rate change: %u", buf, 0x1Eu);
          }
        }
        ++v34;
      }
      while (v34 != v33);
    }
    v32 = v63;
    (*(void (**)(HALS_ObjectMap *, std::logic_error *))(*(_QWORD *)v63 + 224))(v63, &v74);
    if (__p)
    {
      *(_QWORD *)&v70 = __p;
      operator delete(__p);
    }
  }
  v45 = (os_unfair_lock_s *)((char *)this + 72);
  os_unfair_lock_lock((os_unfair_lock_t)this + 18);
  if (*((_QWORD *)this + 13))
  {
    v65 = 0;
    v66 = 0;
    HALS_System::GetInstance(&__p, 0, &v65);
    v46 = __p;
    std::unordered_set<unsigned int>::unordered_set((uint64_t)v64, (uint64_t)this + 80);
    v82 = 0;
    v47 = operator new(0x30uLL);
    *(_QWORD *)v47 = &off_1E699B3A8;
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v47 + 8), v64);
    v82 = v47;
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&v84 = 1174405120;
    *((_QWORD *)&v84 + 1) = ___ZN11HALS_System31ServerHighPriorityAsyncDispatchENSt3__18functionIFvvEEE_block_invoke;
    *(_QWORD *)&v85 = &__block_descriptor_tmp_163;
    v88 = (_OWORD *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v47 + 16))(v47);
    v48 = atomic_load((unsigned __int8 *)v46 + 928);
    if ((v48 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)v46 + 929);
    dispatch_async(*((dispatch_queue_t *)v46 + 112), buf);
    v49 = v88;
    if (v88 == (__int128 *)((char *)&v85 + 8))
    {
      v50 = 4;
      v49 = (_QWORD *)&v85 + 1;
    }
    else
    {
      if (!v88)
        goto LABEL_47;
      v50 = 5;
    }
    (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_47:
    v51 = v82;
    if (v82 == v81)
    {
      v52 = 4;
      v51 = v81;
    }
    else
    {
      if (!v82)
        goto LABEL_52;
      v52 = 5;
    }
    (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_52:
    std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)v64);
    v53 = (std::__shared_weak_count *)v70;
    if ((_QWORD)v70)
    {
      v54 = (unint64_t *)(v70 + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = v66;
    if (v66)
    {
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        v58 = __ldaxr(p_shared_owners);
      while (__stlxr(v58 - 1, p_shared_owners));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }
  os_unfair_lock_unlock(v45);
  if (v74.__vftable)
  {
    v74.__imp_.__imp_ = (const char *)v74.__vftable;
    operator delete(v74.__vftable);
  }
  HALS_ObjectMap::ReleaseObject(v32, v59);
}

void sub_1B5C25BBC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0,std::allocator<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E699B3A8;
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0,std::allocator<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E699B3A8;
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0,std::allocator<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1E699B3A8;
  std::unordered_set<unsigned int>::unordered_set((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5C25C94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0,std::allocator<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E699B3A8;
  return std::unordered_set<unsigned int>::unordered_set((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0,std::allocator<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0,std::allocator<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0,std::allocator<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t **v1;
  uint64_t v2;
  HALS_Object *v3;
  unsigned int *v4;
  HALB_Mutex *v5;
  const AudioObjectPropertyAddress *v6;
  const AudioObjectPropertyAddress *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  HALS_Object *v14;
  HALS_ObjectMap *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD v19[7];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  _BYTE v25[24];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char *(*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t);
  __int128 __p;
  __int128 v32;
  void **v33;

  v1 = (uint64_t **)(a1 + 24);
  while (1)
  {
    v1 = (uint64_t **)*v1;
    if (!v1)
      break;
    v2 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v1 + 4));
    v4 = (unsigned int *)v2;
    if (v2)
    {
      v26 = 0;
      v27 = &v26;
      v28 = 0x4802000000;
      v29 = __Block_byref_object_copy__4100;
      v30 = __Block_byref_object_dispose__4101;
      __p = 0u;
      v32 = 0u;
      v20 = 0;
      v21 = &v20;
      v22 = 0x4002000000;
      v23 = __Block_byref_object_copy__1;
      v24 = __Block_byref_object_dispose__2;
      memset(v25, 0, sizeof(v25));
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 0x40000000;
      v19[2] = ___ZN15HALS_MetaDevice25HandleTapSampleRateChangeEv_block_invoke;
      v19[3] = &unk_1E6979D30;
      v19[5] = &v20;
      v19[6] = v2;
      v19[4] = &v26;
      v5 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
      HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v19);
      v6 = (const AudioObjectPropertyAddress *)v27[5];
      v7 = (const AudioObjectPropertyAddress *)v27[6];
      if (v6 != v7)
        HALS_Object::PropertiesChanged((HALS_Object *)v4, (HALS_NotificationManager *)v4[4], 0, -1431655765 * ((unint64_t)((char *)v7 - (char *)v6) >> 2), v6);
      v8 = v21[5];
      v9 = v21[6];
      if (((v9 - v8) & 0x1FFFFFFFE0) != 0)
      {
        if (v9 == v8)
LABEL_21:
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v8 + v10;
          v13 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v8 + v10 + 24));
          v15 = (HALS_ObjectMap *)v13;
          v16 = *(_QWORD *)(v12 + 8);
          if (*(_QWORD *)v12 != v16 && v13 != 0)
            HALS_Object::PropertiesChanged((HALS_Object *)v4, (HALS_NotificationManager *)*(unsigned int *)(v13 + 16), 0, -1431655765 * ((unint64_t)(v16 - *(_QWORD *)v12) >> 2), *(const AudioObjectPropertyAddress **)v12);
          HALS_ObjectMap::ReleaseObject(v15, v14);
          ++v11;
          v8 = v21[5];
          v18 = v21[6] - v8;
          if (v11 >= ((unint64_t)v18 >> 5))
            break;
          v10 += 32;
          if (v11 >= v18 >> 5)
            goto LABEL_21;
        }
      }
      _Block_object_dispose(&v20, 8);
      v33 = (void **)v25;
      std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&v33);
      _Block_object_dispose(&v26, 8);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
    }
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v4, v3);
  }
}

void sub_1B5C25F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  HALS_ObjectMap *v30;
  uint64_t v31;
  uint64_t v32;
  HALS_Object *v34;

  _Block_object_dispose(&a16, 8);
  *(_QWORD *)(v32 - 128) = v31;
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 128));
  _Block_object_dispose(&a24, 8);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  HALS_ObjectMap::ReleaseObject(v30, v34);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0,std::allocator<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13HALS_MultiTap10set_formatERKN2CA17StreamDescriptionENSt3__18optionalIN22HALS_MultiChannelMixer7MixdownEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0,std::allocator<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0>,void ()(void)>::target_type()
{
}

void HALS_MultiTap::fetch_writer_state(HALS_MultiTap *this, uint64_t a2, unsigned int a3)
{
  os_unfair_lock_s *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unsigned int *v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v6 = (os_unfair_lock_s *)(a2 + 320);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 320));
  v7 = *(char **)(a2 + 328);
  v8 = *(char **)(a2 + 336);
  if (v8 == v7)
    goto LABEL_13;
  v9 = (v8 - v7) >> 4;
  do
  {
    v10 = v9 >> 1;
    v11 = &v7[16 * (v9 >> 1)];
    v13 = *(unsigned int **)v11;
    v12 = v11 + 16;
    v9 += ~(v9 >> 1);
    if (*v13 < a3)
      v7 = v12;
    else
      v9 = v10;
  }
  while (v9);
  if (v8 == v7 || (v14 = *(_DWORD **)v7, **(_DWORD **)v7 != a3))
  {
LABEL_13:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  else
  {
    v15 = *((_QWORD *)v7 + 1);
    *(_QWORD *)this = v14;
    *((_QWORD *)this + 1) = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  os_unfair_lock_unlock(v6);
}

BOOL AMCP::Utility::Sorted_Vector<std::shared_ptr<HALS_MultiTap_Writer_State>,HALS_MultiTap_Writer_State_Ptr_Extract_Key,std::less<unsigned int>,std::allocator<std::shared_ptr<HALS_MultiTap_Writer_State>>>::find(_DWORD **a1, _DWORD **a2, unsigned int a3)
{
  _DWORD **v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int **v6;
  _DWORD **v7;
  unsigned int *v8;

  if (a2 == a1)
  {
    v3 = a2;
  }
  else
  {
    v3 = a1;
    v4 = ((char *)a2 - (char *)a1) >> 4;
    do
    {
      v5 = v4 >> 1;
      v6 = &v3[2 * (v4 >> 1)];
      v8 = *v6;
      v7 = v6 + 2;
      v4 += ~(v4 >> 1);
      if (*v8 < a3)
        v3 = v7;
      else
        v4 = v5;
    }
    while (v4);
  }
  return v3 != a2 && **v3 == a3;
}

void std::__shared_ptr_emplace<HALS_MultiTap_Writer_State>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699B428;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_MultiTap_Writer_State>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699B428;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<HALS_MultiTap_Writer_State>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void **v4;

  HALS_MultiTap_Writer_State::teardown((HALS_MultiTap_Writer_State *)(a1 + 24));
  v2 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = (void **)(a1 + 72);
  std::vector<HALS_MultiChannelMixer::StreamInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
}

uint64_t HALS_MultiTap::writer_stop(HALS_MultiTap *this, unsigned int a2)
{
  _DWORD **v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  _DWORD *v8;
  _DWORD **v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;
  char *v18;
  char v19;

  v18 = (char *)this + 152;
  v19 = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 152));
  HALS_MultiTap::fetch_writer_state((HALS_MultiTap *)&v16, (uint64_t)this, a2);
  if (v16)
  {
    HALS_MultiTap::stop((os_unfair_lock_s *)this);
    os_unfair_lock_lock((os_unfair_lock_t)this + 80);
    v4 = (_DWORD **)*((_QWORD *)this + 42);
    if (AMCP::Utility::Sorted_Vector<std::shared_ptr<HALS_MultiTap_Writer_State>,HALS_MultiTap_Writer_State_Ptr_Extract_Key,std::less<unsigned int>,std::allocator<std::shared_ptr<HALS_MultiTap_Writer_State>>>::find(*((_DWORD ***)this + 41), v4, a2))
    {
      v6 = v5;
      v7 = (_DWORD **)(v5 + 16);
      while (v7 != v4)
      {
        v8 = *v7;
        v7 += 2;
        if (*v8 != a2)
        {
          v9 = v7 - 2;
          goto LABEL_8;
        }
      }
      v9 = v4;
LABEL_8:
      v10 = (uint64_t)v9 - v5;
      if (v10)
      {
        if ((_DWORD **)(v5 + v10) != v4)
        {
          v11 = 16 * (v10 >> 4);
          do
          {
            std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v6, (__int128 *)(v6 + v11));
            v6 += 16;
          }
          while ((_DWORD **)(v6 + v11) != v4);
          v4 = (_DWORD **)*((_QWORD *)this + 42);
        }
        while (v4 != (_DWORD **)v6)
        {
          v4 -= 2;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v4);
        }
        *((_QWORD *)this + 42) = v6;
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)this + 80);
    kdebug_trace();
  }
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v18);
}

uint64_t HALS_MultiTap::writer_anchor_time(HALS_MultiTap *this, unsigned int a2, const AudioTimeStamp *a3)
{
  _BOOL4 v6;
  uint64_t v7;
  UInt64 mHostTime;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  AudioTimeStamp v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  char *v16;
  BOOL v17;

  v16 = (char *)this + 152;
  v6 = std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)((char *)this + 152));
  v17 = v6;
  if (v6)
  {
    HALS_MultiTap::fetch_writer_state((HALS_MultiTap *)&v14, (uint64_t)this, a2);
    v7 = v14;
    if (v14)
    {
      *(_QWORD *)(v14 + 280) = 0;
      mHostTime = a3->mHostTime;
      v13.mSampleTime = 0.0;
      v13.mHostTime = mHostTime;
      memset(&v13.mRateScalar, 0, 40);
      *(_QWORD *)&v13.mFlags = 2;
      *(_DWORD *)(v7 + 272) = 3;
      HALS_MultiTap::translate_time((os_unfair_lock_s *)this, &v13, (AudioTimeStamp *)(v7 + 216));
      *(double *)(v7 + 216) = floor(*(double *)(v7 + 216) * (**(double **)(v7 + 8) / *((double *)this + 3)));
    }
    v9 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v16);
}

void caulk::concurrent::details::rt_message_call<HALS_MultiTap::write(unsigned int,long long,AudioBufferList const*,AudioTimeStamp const*)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_MultiTap::write(unsigned int,long long,AudioBufferList const*,AudioTimeStamp const*)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_MultiTap::write clip resampler output frames from %u to %u", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_MultiTap::write(unsigned int,long long,AudioBufferList const*,AudioTimeStamp const*)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_MultiTap::write(unsigned int,long long,AudioBufferList const*,AudioTimeStamp const*)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_MultiTap::write(unsigned int,long long,AudioBufferList const*,AudioTimeStamp const*)::$_0,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_MultiTap::write(unsigned int,long long,AudioBufferList const*,AudioTimeStamp const*)::$_0,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_MultiTap::write clip resampler input frames 0", buf, 0x18u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_MultiTap::write(unsigned int,long long,AudioBufferList const*,AudioTimeStamp const*)::$_0,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_MultiTap::write(unsigned int,long long,AudioBufferList const*,AudioTimeStamp const*)::$_0,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void HALS_MultiTap::register_autostart_context(os_unfair_lock_s *this, unsigned int a2)
{
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  unsigned int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v6 = 136315650;
    v7 = "HALS_MultiTap.cpp";
    v8 = 1024;
    v9 = 1058;
    v10 = 1024;
    v11 = a2;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_MultiTap::register_autostart_context: registering IOContext %d", (uint8_t *)&v6, 0x18u);
  }
  v4 = this + 18;
  os_unfair_lock_lock(this + 18);
  v5 = this + 118;
  if (std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v5, a2)&& os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v6 = 136315394;
    v7 = "HALS_MultiTap.cpp";
    v8 = 1024;
    v9 = 1061;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MultiTap::register_autostart_context: context already is already registered", (uint8_t *)&v6, 0x12u);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v5, a2, a2);
  os_unfair_lock_unlock(v4);
}

void sub_1B5C268F0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void HALS_MultiTap::unregister_autostart_context(os_unfair_lock_s *this, unsigned int a2)
{
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136315650;
    v8 = "HALS_MultiTap.cpp";
    v9 = 1024;
    v10 = 1069;
    v11 = 1024;
    v12 = a2;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_MultiTap::unregister_autostart_context: unregistering IOContext %d", (uint8_t *)&v7, 0x18u);
  }
  v4 = this + 18;
  os_unfair_lock_lock(this + 18);
  v5 = this + 118;
  v6 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v5, a2);
  if (v6)
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(v5, v6);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v7 = 136315394;
    v8 = "HALS_MultiTap.cpp";
    v9 = 1024;
    v10 = 1072;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MultiTap::unregister_autostart_context: context is not registered", (uint8_t *)&v7, 0x12u);
  }
  os_unfair_lock_unlock(v4);
}

uint64_t HALB_IOThread::ConfigureThreadForRealtimePriority(_opaque_pthread_t **this, _opaque_pthread_t *a2, int a3)
{
  _opaque_pthread_t *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!HALB_IOThread::IsCurrentThread((HALB_IOThread *)this, 1)
    && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v8 = 136315394;
    v9 = "HALB_IOThread.cpp";
    v10 = 1024;
    v11 = 57;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::ConfigureThreadForRealtimePriority - must be called from on the thread", (uint8_t *)&v8, 0x12u);
  }
  v6 = this[11];
  if (v6 != pthread_self() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v8 = 136315394;
    v9 = "HALB_IOThread.cpp";
    v10 = 1024;
    v11 = 58;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::ConfigureThreadForRealtimePriority - this thread ought to lock the lock", (uint8_t *)&v8, 0x12u);
  }
  AMCP::Utility::configure_thread_for_realtime(this[1], a2, a3);
  return 0;
}

uint64_t HALB_IOThread::DispatchPThread(HALB_IOThread *this, void *(__cdecl *a2)(void *), void *a3)
{
  pthread_t *v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  sched_param v18;
  uint8_t v19[4];
  const char *v20;
  __int16 v21;
  int v22;
  pthread_attr_t buf;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (pthread_t *)((char *)this + 8);
  if (*((_QWORD *)this + 1))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 37;
    LODWORD(buf.__sig) = 136315394;
    *(uint64_t *)((char *)&buf.__sig + 4) = (uint64_t)"HALB_IOThread.cpp";
    *(_WORD *)&buf.__opaque[4] = 1024;
    *(_DWORD *)&buf.__opaque[6] = 326;
    v4 = MEMORY[0x1E0C81028];
    v5 = "%25s:%-5d  HALB_IOThread::_Start: there already is a thread";
LABEL_4:
    _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&buf, 0x12u);
    return 37;
  }
  if (*((_DWORD *)this + 40) != 1735552612 && *((_DWORD *)this + 40) != 2002872692)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 37;
    LODWORD(buf.__sig) = 136315394;
    *(uint64_t *)((char *)&buf.__sig + 4) = (uint64_t)"HALB_IOThread.cpp";
    *(_WORD *)&buf.__opaque[4] = 1024;
    *(_DWORD *)&buf.__opaque[6] = 327;
    v4 = MEMORY[0x1E0C81028];
    v5 = "%25s:%-5d  HALB_IOThread::_Start: the state is not the ground or waiting state";
    goto LABEL_4;
  }
  v11 = pthread_attr_init(&buf);
  if (!(_DWORD)v11)
  {
    v12 = pthread_attr_setdetachstate(&buf, 2);
    if ((_DWORD)v12)
    {
      v6 = v12;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v19 = 136315394;
        v20 = "HALB_IOThread.cpp";
        v21 = 1024;
        v22 = 334;
        v13 = MEMORY[0x1E0C81028];
        v14 = "%25s:%-5d  HALB_IOThread::_Start: failed to set the detached attribute";
LABEL_29:
        _os_log_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, v14, v19, 0x12u);
      }
    }
    else
    {
      v15 = pthread_attr_getschedparam(&buf, &v18);
      if ((_DWORD)v15)
      {
        v6 = v15;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v19 = 136315394;
          v20 = "HALB_IOThread.cpp";
          v21 = 1024;
          v22 = 339;
          v13 = MEMORY[0x1E0C81028];
          v14 = "%25s:%-5d  HALB_IOThread::_Start: failed to get the default scheduling parameters";
          goto LABEL_29;
        }
      }
      else
      {
        v18.sched_priority = 63;
        v16 = pthread_attr_setschedparam(&buf, &v18);
        if ((_DWORD)v16)
        {
          v6 = v16;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v19 = 136315394;
            v20 = "HALB_IOThread.cpp";
            v21 = 1024;
            v22 = 343;
            v13 = MEMORY[0x1E0C81028];
            v14 = "%25s:%-5d  HALB_IOThread::_Start: failed to set the priority";
            goto LABEL_29;
          }
        }
        else
        {
          v17 = pthread_attr_setschedpolicy(&buf, 4);
          if ((_DWORD)v17)
          {
            v6 = v17;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v19 = 136315394;
              v20 = "HALB_IOThread.cpp";
              v21 = 1024;
              v22 = 346;
              v13 = MEMORY[0x1E0C81028];
              v14 = "%25s:%-5d  HALB_IOThread::_Start: failed to set the scheduling policy";
              goto LABEL_29;
            }
          }
          else
          {
            v6 = pthread_create(v3, &buf, a2, a3);
            if (!(_DWORD)v6)
            {
              if (*v3)
              {
                v6 = 0;
                *((_DWORD *)this + 40) = 1937011316;
                goto LABEL_30;
              }
              v6 = 35;
            }
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v19 = 136315394;
              v20 = "HALB_IOThread.cpp";
              v21 = 1024;
              v22 = 354;
              v13 = MEMORY[0x1E0C81028];
              v14 = "%25s:%-5d  HALB_IOThread::_Start: could not create a thread";
              goto LABEL_29;
            }
          }
        }
      }
    }
LABEL_30:
    pthread_attr_destroy(&buf);
    return v6;
  }
  v6 = v11;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v19 = 136315394;
    v20 = "HALB_IOThread.cpp";
    v21 = 1024;
    v22 = 330;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::_Start: the attributes could not be created", v19, 0x12u);
  }
  return v6;
}

BOOL HALB_IOThread::IsCurrentThread(HALB_IOThread *this, int a2)
{
  _opaque_pthread_t *v3;
  _opaque_pthread_t *v4;
  _opaque_pthread_t *v5;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = (_opaque_pthread_t *)*((_QWORD *)this + 11);
    if (v3 != pthread_self() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v7 = 136315394;
      v8 = "HALB_IOThread.cpp";
      v9 = 1024;
      v10 = 46;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::IsCurrentThread: this thread ought to lock the lock", (uint8_t *)&v7, 0x12u);
    }
  }
  v4 = (_opaque_pthread_t *)*((_QWORD *)this + 1);
  v5 = pthread_self();
  return pthread_equal(v4, v5) != 0;
}

AMCP::Log::Scope_Registry *HALB_IOThread::ConfigureThreadForNormalPriority(_opaque_pthread_t **this)
{
  _opaque_pthread_t *v2;
  _opaque_pthread_t *v3;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!HALB_IOThread::IsCurrentThread((HALB_IOThread *)this, 1)
    && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v5 = 136315394;
    v6 = "HALB_IOThread.cpp";
    v7 = 1024;
    v8 = 72;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::ConfigureThreadForNormalPriority - must be called from on the thread", (uint8_t *)&v5, 0x12u);
  }
  v2 = this[11];
  if (v2 != pthread_self() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v5 = 136315394;
    v6 = "HALB_IOThread.cpp";
    v7 = 1024;
    v8 = 73;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::ConfigureThreadForNormalPriority - this thread ought to lock the lock", (uint8_t *)&v5, 0x12u);
  }
  return AMCP::Utility::configure_thread_for_normal_priority(this[1], v3);
}

uint64_t HALB_IOThread::WaitForState(HALB_IOThread *this, int a2)
{
  uint64_t v4;
  HALB_Mutex *v6;
  int v7;

  v6 = (HALB_IOThread *)((char *)this + 16);
  v7 = HALB_Mutex::Lock((HALB_IOThread *)((char *)this + 16));
  v4 = HALB_IOThread::_WaitForState(this, a2);
  HALB_Guard::Locker::~Locker(&v6);
  return v4;
}

void sub_1B5C27274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HALB_Mutex *a9)
{
  HALB_Guard::Locker::~Locker(&a9);
  _Unwind_Resume(a1);
}

uint64_t HALB_IOThread::_WaitForState(HALB_IOThread *this, int a2)
{
  _opaque_pthread_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (_opaque_pthread_t *)*((_QWORD *)this + 11);
  if (v4 != pthread_self())
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v13 = 136315394;
      v14 = "HALB_IOThread.cpp";
      v15 = 1024;
      v16 = 184;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::_WaitForState: this thread ought to lock the lock", (uint8_t *)&v13, 0x12u);
    }
    return 1;
  }
  if (*((_DWORD *)this + 40) != a2)
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = v8;
      if (*((_DWORD *)this + 40) == 1735552612 && *((_DWORD *)this + 42) != 1735552612)
        break;
      v7 = HALB_Guard::WaitFor((HALB_IOThread *)((char *)this + 16), 0x3B9ACA00uLL);
      if ((v7 == 60 || v7 == 0) && v9 < 0xE)
      {
        v8 = v9 + 1;
        if (*((_DWORD *)this + 40) != a2)
          continue;
      }
      ++v9;
      break;
    }
    v6 = (unsigned int *)((char *)this + 164);
    if (!*((_DWORD *)this + 41))
    {
      if (v9 >= 0xF && *((_DWORD *)this + 40) != a2)
        return 60;
      goto LABEL_25;
    }
    return *v6;
  }
  v6 = (unsigned int *)((char *)this + 164);
  if (*((_DWORD *)this + 41))
    return *v6;
  v7 = 0;
LABEL_25:
  if (*((_DWORD *)this + 40) == 1735552612 && *((_DWORD *)this + 40) != a2)
    return 89;
  v5 = 0;
  if (v7 && v7 != 60)
  {
    if (*((_DWORD *)this + 40) == a2)
      return 0;
    else
      return v7;
  }
  return v5;
}

void HALB_IOThread::PostStateChange(HALB_IOThread *this, int a2)
{
  _opaque_pthread_t *v4;
  _opaque_pthread_t *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!HALB_IOThread::IsCurrentThread(this, 1) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v6 = 136315394;
    v7 = "HALB_IOThread.cpp";
    v8 = 1024;
    v9 = 143;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::PostStateChange: must be called from on the thread", (uint8_t *)&v6, 0x12u);
  }
  v4 = (_opaque_pthread_t *)*((_QWORD *)this + 11);
  if (v4 != pthread_self() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v6 = 136315394;
    v7 = "HALB_IOThread.cpp";
    v8 = 1024;
    v9 = 144;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::PostStateChange: this thread ought to lock the lock", (uint8_t *)&v6, 0x12u);
  }
  if (HALB_IOThread::IsCurrentThread(this, 1))
  {
    v5 = (_opaque_pthread_t *)*((_QWORD *)this + 11);
    if (v5 == pthread_self())
    {
      *((_DWORD *)this + 42) = *((_DWORD *)this + 40);
      *((_DWORD *)this + 40) = a2;
      HALB_Guard::NotifyAll((pthread_cond_t *)((char *)this + 16));
    }
  }
}

void Mock_Power_Manager_System_Interface::~Mock_Power_Manager_System_Interface(const void **this)
{
  Mock_Power_Manager_System_Interface::~Mock_Power_Manager_System_Interface(this);
  JUMPOUT(0x1B5E50688);
}

{
  *this = &off_1E699B5C0;
  _Block_release(this[3]);
}

uint64_t Mock_Power_Manager_System_Interface::set_power_manager(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t Mock_Power_Manager_System_Interface::PMGetUserActivityLevel(Mock_Power_Manager_System_Interface *this, unint64_t *a2, unint64_t *a3)
{
  NSObject *v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  unint64_t v7;
  char *v8;
  int v9;
  char *v10;
  BOOL v11;
  const char *v12;
  void *exception;
  NSObject *v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  unint64_t v17;
  char *v18;
  int v19;
  char *v20;
  const char *v21;
  void *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t (**v25)();
  __int128 v26;
  uint64_t v27;
  std::string v28;
  std::runtime_error v29;
  std::runtime_error v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint8_t buf[8];
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  _BYTE v43[14];
  const char *v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v4 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = pthread_self();
      v6 = pthread_mach_thread_np(v5);
      v7 = 0;
      v8 = 0;
      v9 = 47;
      do
      {
        v10 = &aLibraryCachesC_166[v7];
        if (v9 == 47)
          v8 = &aLibraryCachesC_166[v7];
        v9 = v10[1];
        if (!v10[1])
          break;
        v11 = v7++ >= 0xFFF;
      }
      while (!v11);
      if (v8)
        v12 = v8 + 1;
      else
        v12 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v6;
      v38 = 2080;
      v39 = v12;
      v40 = 1024;
      v41 = 105;
      v42 = 2080;
      *(_QWORD *)v43 = "(outUserActive) == nullptr";
      _os_log_error_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v28);
    std::runtime_error::runtime_error(&v29, &v28);
    std::runtime_error::runtime_error(&v30, &v29);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = -1;
    v30.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v31 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
    *(_QWORD *)&v43[6] = "virtual IOReturn Mock_Power_Manager_System_Interface::PMGetUserActivityLevel(uint64_t *, uint64_t *)";
    v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
    v45 = 105;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
    v26 = v23;
    v27 = v24;
    v23 = 0uLL;
    v24 = 0;
    v25 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v25);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (!a3)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v14 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = pthread_self();
      v16 = pthread_mach_thread_np(v15);
      v17 = 0;
      v18 = 0;
      v19 = 47;
      do
      {
        v20 = &aLibraryCachesC_166[v17];
        if (v19 == 47)
          v18 = &aLibraryCachesC_166[v17];
        v19 = v20[1];
        if (!v20[1])
          break;
        v11 = v17++ >= 0xFFF;
      }
      while (!v11);
      if (v18)
        v21 = v18 + 1;
      else
        v21 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v16;
      v38 = 2080;
      v39 = v21;
      v40 = 1024;
      v41 = 106;
      v42 = 2080;
      *(_QWORD *)v43 = "(mostSignificantActivity) == nullptr";
      _os_log_error_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    v22 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v28);
    std::runtime_error::runtime_error(&v29, &v28);
    std::runtime_error::runtime_error(&v30, &v29);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = -1;
    v30.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v31 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
    *(_QWORD *)&v43[6] = "virtual IOReturn Mock_Power_Manager_System_Interface::PMGetUserActivityLevel(uint64_t *, uint64_t *)";
    v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
    v45 = 106;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
    v26 = v23;
    v27 = v24;
    v23 = 0uLL;
    v24 = 0;
    v25 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v25);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v22, (uint64_t)buf);
  }
  *a2 = *((_QWORD *)this + 2);
  *a3 = *((_QWORD *)this + 2);
  return 0;
}

void sub_1B5C27A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,void *a24,uint64_t a25)
{
  void *v25;
  int v26;
  uint64_t v27;
  uint64_t v29;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v27 - 96) = &unk_1E69A2000;
  v29 = *(_QWORD *)(v27 - 88);
  if (v29 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29))
    *(_QWORD *)(v27 - 88) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v27 - 112));
  a24 = &unk_1E69A2000;
  if (a25 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a25 + 32))(a25))
    a25 = 0;
  std::runtime_error::~runtime_error(&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v26)
    __cxa_free_exception(v25);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v27 - 113));
  _Unwind_Resume(a1);
}

uint64_t Mock_Power_Manager_System_Interface::PMScheduleUserActivityLevelNotification(uint64_t a1, uint64_t a2, void *aBlock)
{
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 24) = _Block_copy(aBlock);
  return 1;
}

AMCP::Log::Scope_Registry *Mock_Power_Manager_System_Interface::PMUnregisterNotification(AMCP::Log::Scope_Registry *this, uint64_t a2)
{
  NSObject *v2;
  _opaque_pthread_t *v3;
  mach_port_t v4;
  unint64_t v5;
  char *v6;
  int v7;
  char *v8;
  const char *v10;
  void *exception;
  __int128 v12;
  uint64_t v13;
  uint64_t (**v14)();
  __int128 v15;
  uint64_t v16;
  std::string v17;
  std::runtime_error v18;
  std::runtime_error v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint8_t buf[8];
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  _BYTE v32[14];
  const char *v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (a2 != 1)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v2 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = pthread_self();
      v4 = pthread_mach_thread_np(v3);
      v5 = 0;
      v6 = 0;
      v7 = 47;
      do
      {
        v8 = &aLibraryCachesC_166[v5];
        if (v7 == 47)
          v6 = &aLibraryCachesC_166[v5];
        v7 = v8[1];
        if (!v8[1])
          break;
      }
      while (v5++ < 0xFFF);
      if (v6)
        v10 = v6 + 1;
      else
        v10 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v4;
      v27 = 2080;
      v28 = v10;
      v29 = 1024;
      v30 = 128;
      v31 = 2080;
      *(_QWORD *)v32 = "(handle == 1) == false";
      _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s FAILURE: Expected NotificationHandle with value of 1", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"FAILURE: Expected NotificationHandle with value of 1", (uint64_t)&v17);
    std::runtime_error::runtime_error(&v18, &v17);
    std::runtime_error::runtime_error(&v19, &v18);
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = -1;
    v19.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v20 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(_QWORD *)&v32[6] = "virtual void Mock_Power_Manager_System_Interface::PMUnregisterNotification(IOPMNotificationHandle)";
    v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
    v34 = 128;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    v15 = v12;
    v16 = v13;
    v12 = 0uLL;
    v13 = 0;
    v14 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v14);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return this;
}

void sub_1B5C27DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,void *a24,uint64_t a25)
{
  void *v25;
  int v26;
  uint64_t v27;
  uint64_t v29;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v27 - 96) = &unk_1E69A2000;
  v29 = *(_QWORD *)(v27 - 88);
  if (v29 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29))
    *(_QWORD *)(v27 - 88) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v27 - 112));
  a24 = &unk_1E69A2000;
  if (a25 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a25 + 32))(a25))
    a25 = 0;
  std::runtime_error::~runtime_error(&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v26)
    __cxa_free_exception(v25);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v27 - 113));
  _Unwind_Resume(a1);
}

uint64_t Mock_Power_Manager_System_Interface::RegisterForSystemPower(Mock_Power_Manager_System_Interface *this, void *a2, IONotificationPort **a3, void (*a4)(void *, unsigned int, unsigned int, void *), unsigned int *a5)
{
  *((_QWORD *)this + 4) = a4;
  *a3 = (IONotificationPort *)&Mock_Power_Manager_System_Interface::RegisterForSystemPower(void *,IONotificationPort **,void (*)(void *,unsigned int,unsigned int,void *),unsigned int *)::dummy;
  *a5 = 1;
  return 1;
}

uint64_t Mock_Power_Manager_System_Interface::NotificationPortSetDispatchQueue(uint64_t this, IONotificationPort *a2, dispatch_queue_s *a3)
{
  *(_QWORD *)(this + 40) = a3;
  return this;
}

uint64_t Mock_Power_Manager_System_Interface::DeregisterForSystemPower(Mock_Power_Manager_System_Interface *this, unsigned int *a2)
{
  return 0;
}

uint64_t Mock_Power_Manager_System_Interface::ServiceClose(Mock_Power_Manager_System_Interface *this)
{
  return 0;
}

uint64_t Mock_Power_Manager_System_Interface::AllowPowerChange(Mock_Power_Manager_System_Interface *this)
{
  return 0;
}

uint64_t Mock_Power_Manager_System_Interface::CancelPowerChange(Mock_Power_Manager_System_Interface *this)
{
  return 0;
}

uint64_t Mock_Power_Manager_System_Interface::PMConnectionGetSystemCapabilities(Mock_Power_Manager_System_Interface *this)
{
  return 3;
}

uint64_t Mock_Power_Manager_System_Interface::PMConnectionCreate(AMCP::Log::Scope_Registry *a1, uint64_t a2, uint64_t a3, AMCP::Log::Scope_Registry **a4)
{
  NSObject *v5;
  _opaque_pthread_t *v6;
  mach_port_t v7;
  unint64_t v8;
  char *v9;
  int v10;
  char *v11;
  const char *v13;
  void *exception;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::runtime_error v21;
  std::runtime_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  __int16 v30;
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  _BYTE v35[14];
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v5 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = pthread_self();
      v7 = pthread_mach_thread_np(v6);
      v8 = 0;
      v9 = 0;
      v10 = 47;
      do
      {
        v11 = &aLibraryCachesC_166[v8];
        if (v10 == 47)
          v9 = &aLibraryCachesC_166[v8];
        v10 = v11[1];
        if (!v11[1])
          break;
      }
      while (v8++ < 0xFFF);
      if (v9)
        v13 = v9 + 1;
      else
        v13 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v7;
      v30 = 2080;
      v31 = v13;
      v32 = 1024;
      v33 = 198;
      v34 = 2080;
      *(_QWORD *)v35 = "(connection) == nullptr";
      _os_log_error_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(_QWORD *)&v35[6] = "virtual IOReturn Mock_Power_Manager_System_Interface::PMConnectionCreate(CFStringRef, IOPMCapab"
                         "ilityBits, IOPMConnection *)";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
    v37 = 198;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  *a4 = a1;
  return 0;
}

void sub_1B5C28158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,void *a24,uint64_t a25)
{
  void *v25;
  int v26;
  uint64_t v27;
  uint64_t v29;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v27 - 96) = &unk_1E69A2000;
  v29 = *(_QWORD *)(v27 - 88);
  if (v29 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29))
    *(_QWORD *)(v27 - 88) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v27 - 112));
  a24 = &unk_1E69A2000;
  if (a25 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a25 + 32))(a25))
    a25 = 0;
  std::runtime_error::~runtime_error(&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v26)
    __cxa_free_exception(v25);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v27 - 113));
  _Unwind_Resume(a1);
}

uint64_t Mock_Power_Manager_System_Interface::PMConnectionAcknowledgeEvent(AMCP::Log::Scope_Registry *a1, AMCP::Log::Scope_Registry *a2)
{
  NSObject *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  unint64_t v6;
  char *v7;
  int v8;
  char *v9;
  const char *v11;
  void *exception;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  std::string v18;
  std::runtime_error v19;
  std::runtime_error v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint8_t buf[8];
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE v33[14];
  const char *v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (a2 != a1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v3 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = pthread_self();
      v5 = pthread_mach_thread_np(v4);
      v6 = 0;
      v7 = 0;
      v8 = 47;
      do
      {
        v9 = &aLibraryCachesC_166[v6];
        if (v8 == 47)
          v7 = &aLibraryCachesC_166[v6];
        v8 = v9[1];
        if (!v9[1])
          break;
      }
      while (v6++ < 0xFFF);
      if (v7)
        v11 = v7 + 1;
      else
        v11 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v5;
      v28 = 2080;
      v29 = v11;
      v30 = 1024;
      v31 = 207;
      v32 = 2080;
      *(_QWORD *)v33 = "connection != reinterpret_cast<__IOPMConnection*>(this)";
      _os_log_error_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v21 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(_QWORD *)&v33[6] = "virtual IOReturn Mock_Power_Manager_System_Interface::PMConnectionAcknowledgeEvent(IOPMConnecti"
                         "on, IOPMConnectionMessageToken)";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
    v35 = 207;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    v16 = v13;
    v17 = v14;
    v13 = 0uLL;
    v14 = 0;
    v15 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v15);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return 0;
}

void sub_1B5C28474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,void *a24,uint64_t a25)
{
  void *v25;
  int v26;
  uint64_t v27;
  uint64_t v29;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v27 - 96) = &unk_1E69A2000;
  v29 = *(_QWORD *)(v27 - 88);
  if (v29 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29))
    *(_QWORD *)(v27 - 88) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v27 - 112));
  a24 = &unk_1E69A2000;
  if (a25 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a25 + 32))(a25))
    a25 = 0;
  std::runtime_error::~runtime_error(&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v26)
    __cxa_free_exception(v25);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v27 - 113));
  _Unwind_Resume(a1);
}

uint64_t Mock_Power_Manager_System_Interface::PMConnectionSetNotification(AMCP::Log::Scope_Registry *a1, AMCP::Log::Scope_Registry *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  _opaque_pthread_t *v6;
  mach_port_t v7;
  unint64_t v8;
  char *v9;
  int v10;
  char *v11;
  const char *v13;
  void *exception;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::runtime_error v21;
  std::runtime_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  __int16 v30;
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  _BYTE v35[14];
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a2 != a1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v5 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = pthread_self();
      v7 = pthread_mach_thread_np(v6);
      v8 = 0;
      v9 = 0;
      v10 = 47;
      do
      {
        v11 = &aLibraryCachesC_166[v8];
        if (v10 == 47)
          v9 = &aLibraryCachesC_166[v8];
        v10 = v11[1];
        if (!v11[1])
          break;
      }
      while (v8++ < 0xFFF);
      if (v9)
        v13 = v9 + 1;
      else
        v13 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v7;
      v30 = 2080;
      v31 = v13;
      v32 = 1024;
      v33 = 215;
      v34 = 2080;
      *(_QWORD *)v35 = "connection != reinterpret_cast<__IOPMConnection*>(this)";
      _os_log_error_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(_QWORD *)&v35[6] = "virtual IOReturn Mock_Power_Manager_System_Interface::PMConnectionSetNotification(IOPMConnectio"
                         "n, void *, IOPMEventHandlerType)";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
    v37 = 215;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  *((_QWORD *)a2 + 7) = a4;
  return 0;
}

void sub_1B5C28794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,void *a24,uint64_t a25)
{
  void *v25;
  int v26;
  uint64_t v27;
  uint64_t v29;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v27 - 96) = &unk_1E69A2000;
  v29 = *(_QWORD *)(v27 - 88);
  if (v29 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29))
    *(_QWORD *)(v27 - 88) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v27 - 112));
  a24 = &unk_1E69A2000;
  if (a25 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a25 + 32))(a25))
    a25 = 0;
  std::runtime_error::~runtime_error(&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v26)
    __cxa_free_exception(v25);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v27 - 113));
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *Mock_Power_Manager_System_Interface::PMConnectionSetDispatchQueue(AMCP::Log::Scope_Registry *result, AMCP::Log::Scope_Registry *a2, uint64_t a3)
{
  NSObject *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  unint64_t v6;
  char *v7;
  int v8;
  char *v9;
  const char *v11;
  void *exception;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  std::string v18;
  std::runtime_error v19;
  std::runtime_error v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint8_t buf[8];
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE v33[14];
  const char *v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v3 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = pthread_self();
      v5 = pthread_mach_thread_np(v4);
      v6 = 0;
      v7 = 0;
      v8 = 47;
      do
      {
        v9 = &aLibraryCachesC_166[v6];
        if (v8 == 47)
          v7 = &aLibraryCachesC_166[v6];
        v8 = v9[1];
        if (!v9[1])
          break;
      }
      while (v6++ < 0xFFF);
      if (v7)
        v11 = v7 + 1;
      else
        v11 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v5;
      v28 = 2080;
      v29 = v11;
      v30 = 1024;
      v31 = 224;
      v32 = 2080;
      *(_QWORD *)v33 = "connection != reinterpret_cast<__IOPMConnection*>(this)";
      _os_log_error_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v21 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(_QWORD *)&v33[6] = "virtual void Mock_Power_Manager_System_Interface::PMConnectionSetDispatchQueue(IOPMConnection, "
                         "dispatch_queue_t)";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
    v35 = 224;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    v16 = v13;
    v17 = v14;
    v13 = 0uLL;
    v14 = 0;
    v15 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v15);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  *((_QWORD *)a2 + 5) = a3;
  return result;
}

void sub_1B5C28AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,void *a24,uint64_t a25)
{
  void *v25;
  int v26;
  uint64_t v27;
  uint64_t v29;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v27 - 96) = &unk_1E69A2000;
  v29 = *(_QWORD *)(v27 - 88);
  if (v29 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29))
    *(_QWORD *)(v27 - 88) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v27 - 112));
  a24 = &unk_1E69A2000;
  if (a25 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a25 + 32))(a25))
    a25 = 0;
  std::runtime_error::~runtime_error(&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v26)
    __cxa_free_exception(v25);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v27 - 113));
  _Unwind_Resume(a1);
}

uint64_t Mock_Power_Manager_System_Interface::PMConnectionRelease(AMCP::Log::Scope_Registry *a1, AMCP::Log::Scope_Registry *a2)
{
  NSObject *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  unint64_t v6;
  char *v7;
  int v8;
  char *v9;
  const char *v11;
  void *exception;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  std::string v18;
  std::runtime_error v19;
  std::runtime_error v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint8_t buf[8];
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE v33[14];
  const char *v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (a2 != a1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v3 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = pthread_self();
      v5 = pthread_mach_thread_np(v4);
      v6 = 0;
      v7 = 0;
      v8 = 47;
      do
      {
        v9 = &aLibraryCachesC_166[v6];
        if (v8 == 47)
          v7 = &aLibraryCachesC_166[v6];
        v8 = v9[1];
        if (!v9[1])
          break;
      }
      while (v6++ < 0xFFF);
      if (v7)
        v11 = v7 + 1;
      else
        v11 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v5;
      v28 = 2080;
      v29 = v11;
      v30 = 1024;
      v31 = 232;
      v32 = 2080;
      *(_QWORD *)v33 = "connection != reinterpret_cast<__IOPMConnection*>(this)";
      _os_log_error_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v21 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(_QWORD *)&v33[6] = "virtual IOReturn Mock_Power_Manager_System_Interface::PMConnectionRelease(IOPMConnection)";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
    v35 = 232;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    v16 = v13;
    v17 = v14;
    v13 = 0uLL;
    v14 = 0;
    v15 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v15);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return 0;
}

void sub_1B5C28DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,void *a24,uint64_t a25)
{
  void *v25;
  int v26;
  uint64_t v27;
  uint64_t v29;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v27 - 96) = &unk_1E69A2000;
  v29 = *(_QWORD *)(v27 - 88);
  if (v29 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29))
    *(_QWORD *)(v27 - 88) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v27 - 112));
  a24 = &unk_1E69A2000;
  if (a25 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a25 + 32))(a25))
    a25 = 0;
  std::runtime_error::~runtime_error(&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v26)
    __cxa_free_exception(v25);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v27 - 113));
  _Unwind_Resume(a1);
}

void HALS_IOA2Manager::Activate(io_iterator_t *this, HALS_Object *a2)
{
  kern_return_t v3;
  IONotificationPortRef v4;
  CFMutableDictionaryRef v5;
  IONotificationPort *v6;
  const __CFDictionary *v7;
  kern_return_t v8;
  IONotificationPort *v9;
  dispatch_queue_t *v10;
  kern_return_t v11;
  _DWORD *exception;
  _DWORD *v13;
  kern_return_t v14;
  _DWORD *v15;
  const __CFDictionary *v16;
  __int16 v17;
  mach_port_t mainPort;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  kern_return_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  HALS_Object::Activate((HALS_Object *)this, a2);
  mainPort = 0;
  v3 = MEMORY[0x1B5E4FB0C](*MEMORY[0x1E0C81720], &mainPort);
  if (v3)
  {
    v11 = v3;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v20 = "HALS_IOA2Manager.cpp";
      v21 = 1024;
      v22 = 70;
      v23 = 1024;
      v24 = v11;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Manager::Activate: IOMainPort failed, Error: 0x%X", buf, 0x18u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v11;
  }
  v4 = IONotificationPortCreate(mainPort);
  *((_QWORD *)this + 96) = v4;
  if (!v4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v20 = "HALS_IOA2Manager.cpp";
      v21 = 1024;
      v22 = 74;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Manager::Activate: IONotificationPortCreate failed", buf, 0x12u);
    }
    v13 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v13 = &off_1E69A1B30;
    v13[2] = 2003329396;
  }
  v5 = IOServiceMatching("IOAudio2Device");
  v16 = v5;
  v17 = 257;
  v6 = (IONotificationPort *)*((_QWORD *)this + 96);
  if (v5)
  {
    CFRetain(v5);
    v7 = v16;
  }
  else
  {
    v7 = 0;
  }
  v8 = IOServiceAddMatchingNotification(v6, "IOServiceFirstPublish", v7, (IOServiceMatchingCallback)HALS_IOA2Manager::IOServiceMatchingHandler, (void *)this[4], this + 194);
  if (v8)
  {
    v14 = v8;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v20 = "HALS_IOA2Manager.cpp";
      v21 = 1024;
      v22 = 81;
      v23 = 1024;
      v24 = v14;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Manager::Activate: IOServiceAddMatchingNotification failed, Error: 0x%X", buf, 0x18u);
    }
    v15 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v15 = &off_1E69A1B30;
    v15[2] = v14;
  }
  HALS_IOA2Manager::IOServiceMatchingHandler((HALS_IOA2Manager *)this[4], (void *)this[194]);
  v9 = (IONotificationPort *)*((_QWORD *)this + 96);
  v10 = (dispatch_queue_t *)(*(uint64_t (**)(io_iterator_t *))(*(_QWORD *)this + 64))(this);
  IONotificationPortSetDispatchQueue(v9, *v10);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v16);
}

void sub_1B5C291D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

void HALS_IOA2Manager::~HALS_IOA2Manager(HALS_IOA2Manager *this)
{
  HALS_IOA2Manager::~HALS_IOA2Manager(this);
  JUMPOUT(0x1B5E50688);
}

{
  void *v2;

  *(_QWORD *)this = off_1E699B680;
  v2 = (void *)*((_QWORD *)this + 93);
  if (v2)
  {
    *((_QWORD *)this + 94) = v2;
    operator delete(v2);
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_IOA2Manager *)((char *)this + 424));
  HALB_Mutex::~HALB_Mutex((HALS_IOA2Manager *)((char *)this + 328));
  *(_QWORD *)this = off_1E6985A90;
  CACFString::~CACFString((HALS_IOA2Manager *)((char *)this + 48));
  HALS_Object::~HALS_Object(this);
}

void HALS_IOA2Manager::_Deactivate(HALS_IOA2Manager *this)
{
  io_object_t v2;
  IONotificationPort *v3;

  *((_DWORD *)this + 2) = 0;
  v2 = *((_DWORD *)this + 194);
  if (v2)
  {
    IOObjectRelease(v2);
    *((_DWORD *)this + 194) = 0;
  }
  v3 = (IONotificationPort *)*((_QWORD *)this + 96);
  if (v3)
  {
    IONotificationPortDestroy(v3);
    *((_QWORD *)this + 96) = 0;
  }
}

uint64_t HALS_IOA2Manager::GetCommandGate(HALS_IOA2Manager *this)
{
  return (uint64_t)this + 328;
}

{
  return (uint64_t)this + 328;
}

uint64_t HALS_IOA2Manager::GetMIGDispatchQueue(HALS_IOA2Manager *this)
{
  return (uint64_t)this + 424;
}

{
  return (uint64_t)this + 424;
}

void HALS_IOA2Manager::_CopyIODeviceList(HALS_IOA2Manager *this, HALS_DeviceManager::BasicIODeviceList *a2)
{
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  HALS_DeviceManager::BasicIODeviceList *v4;
  HALS_ObjectMap *v5;
  unint64_t v6;
  HALS_ObjectMap **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  HALS_ObjectMap **v13;
  char *v14;
  char *v15;
  HALS_ObjectMap *v16;

  v2 = (HALS_ObjectMap **)*((_QWORD *)this + 93);
  v3 = (HALS_ObjectMap **)*((_QWORD *)this + 94);
  if (v2 != v3)
  {
    v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, a2);
      v5 = *v2;
      v7 = (HALS_ObjectMap **)*((_QWORD *)v4 + 1);
      v6 = *((_QWORD *)v4 + 2);
      if ((unint64_t)v7 >= v6)
      {
        v9 = ((uint64_t)v7 - *(_QWORD *)v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v10 = v6 - *(_QWORD *)v4;
        v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        else
          a2 = 0;
        v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *v13 = v5;
        v8 = v13 + 1;
        v15 = *(char **)v4;
        v14 = (char *)*((_QWORD *)v4 + 1);
        if (v14 != *(char **)v4)
        {
          do
          {
            v16 = (HALS_ObjectMap *)*((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v13 = v16;
          }
          while (v14 != v15);
          v14 = *(char **)v4;
        }
        *(_QWORD *)v4 = v13;
        *((_QWORD *)v4 + 1) = v8;
        *((_QWORD *)v4 + 2) = v12 + 8 * (_QWORD)a2;
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v7 = v5;
        v8 = v7 + 1;
      }
      *((_QWORD *)v4 + 1) = v8;
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void HALS_IOA2Manager::_CopyDeviceList(HALS_IOA2Manager *this, HALS_DeviceManager::BasicDeviceList *a2)
{
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  HALS_DeviceManager::BasicDeviceList *v4;
  HALS_ObjectMap *v5;
  unint64_t v6;
  HALS_ObjectMap **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  HALS_ObjectMap **v13;
  char *v14;
  char *v15;
  HALS_ObjectMap *v16;

  v2 = (HALS_ObjectMap **)*((_QWORD *)this + 93);
  v3 = (HALS_ObjectMap **)*((_QWORD *)this + 94);
  if (v2 != v3)
  {
    v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, a2);
      v5 = *v2;
      v7 = (HALS_ObjectMap **)*((_QWORD *)v4 + 1);
      v6 = *((_QWORD *)v4 + 2);
      if ((unint64_t)v7 >= v6)
      {
        v9 = ((uint64_t)v7 - *(_QWORD *)v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v10 = v6 - *(_QWORD *)v4;
        v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        else
          a2 = 0;
        v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *v13 = v5;
        v8 = v13 + 1;
        v15 = *(char **)v4;
        v14 = (char *)*((_QWORD *)v4 + 1);
        if (v14 != *(char **)v4)
        {
          do
          {
            v16 = (HALS_ObjectMap *)*((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v13 = v16;
          }
          while (v14 != v15);
          v14 = *(char **)v4;
        }
        *(_QWORD *)v4 = v13;
        *((_QWORD *)v4 + 1) = v8;
        *((_QWORD *)v4 + 2) = v12 + 8 * (_QWORD)a2;
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v7 = v5;
        v8 = v7 + 1;
      }
      *((_QWORD *)v4 + 1) = v8;
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void HALS_IOA2Manager::IOServiceMatchingHandler(HALS_IOA2Manager *this, void *a2)
{
  io_iterator_t v2;
  const AudioObjectPropertyAddress *v3;
  const __CFString *v4;
  io_object_t v5;
  NSObject *v6;
  const __CFString *v7;
  BOOL *v8;
  HALS_ObjectMap *v9;
  char *v10;
  HALB_Mutex *v11;
  HALS_Object *v12;
  uint64_t v13;
  const __CFString *v14;
  HALS_ObjectMap *v15;
  HALB_UCObject *v16;
  HALS_Object *v17;
  const __CFString *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL *v25;
  io_object_t v26;
  CFTypeRef CFProperty;
  CFTypeID v28;
  CFTypeRef v29;
  uint64_t v30;
  HALB_Mutex *v31;
  int v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  _DWORD *v43;
  _DWORD *v44;
  void *v45;
  HALS_NotificationManager *v46;
  HALS_Object *v47;
  _DWORD *exception;
  HALS_ObjectMap *v49;
  const __CFString *v50;
  char v51;
  void (**v52)(HALB_UCObject *__hidden);
  io_object_t object;
  io_connect_t connect;
  CFMutableDictionaryRef Mutable;
  __int16 v56;
  __int16 v57;
  char v58;
  io_iterator_t iterator;
  char v60;
  HALS_ObjectMap *v61;
  _DWORD *v62;
  _DWORD *v63;
  unint64_t v64;
  _QWORD v65[6];
  char v66;
  CFTypeRef v67;
  char v68;
  _QWORD v69[3];
  _QWORD *v70;
  _QWORD v71[3];
  _QWORD *v72;
  _BYTE v73[24];
  void *v74;
  __CFString *p_buf;
  HALS_ObjectMap *v76;
  HALS_ObjectMap *v77;
  __CFString buf;
  uint64_t v79;

  v2 = a2;
  v79 = *MEMORY[0x1E0C80C00];
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v61 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(this);
  if (!v61)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v73 = 136315394;
      *(_QWORD *)&v73[4] = "HALS_IOA2Manager.cpp";
      *(_WORD *)&v73[12] = 1024;
      *(_DWORD *)&v73[14] = 243;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Manager::IOServiceMatchingHandler: no device manager object", v73, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  iterator = v2;
  v60 = 0;
  v52 = &off_1E6984E78;
  object = IOIteratorNext(v2);
  connect = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  v56 = 257;
  v57 = 1;
  v4 = CFSTR("is private");
  v58 = 1;
  v5 = object;
  v6 = MEMORY[0x1E0C81028];
  if (object)
  {
    while (!IOObjectConformsTo(v5, "IOAudio2Device"))
    {
LABEL_55:
      v5 = IOIteratorNext(iterator);
      if (connect)
      {
        IOServiceClose(connect);
        connect = 0;
      }
      v52[5]((HALB_UCObject *)&v52);
      object = v5;
      v58 = 1;
      LOBYTE(v57) = 1;
      if (!v5)
        goto LABEL_66;
    }
    v7 = (const __CFString *)HALS_IOA2UCDevice::CopyDeviceUID((HALS_IOA2UCDevice *)object);
    v49 = 0;
    v50 = v7;
    v51 = 1;
    v9 = HALS_DeviceManager::CopyDeviceByUID(v61, v7, 0);
    v49 = v9;
    if (v9)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v10 = (char *)(*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v9 + 216))(v9);
        LODWORD(buf.isa) = 136315650;
        *(void **)((char *)&buf.isa + 4) = "HALS_IOA2Manager.cpp";
        WORD2(buf.info) = 1024;
        *(_DWORD *)((char *)&buf.info + 6) = 258;
        WORD1(buf.data) = 2082;
        *(char **)((char *)&buf.data + 4) = v10;
        _os_log_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOA2Manager::IOServiceMatchingHandler: device already exists for uid: %{public}s", (uint8_t *)&buf, 0x1Cu);
        v9 = v49;
      }
      *((_BYTE *)v9 + 1842) = 0;
      HALS_System::DeviceDied(*((HALS_System **)v61 + 40), v9);
      (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v49 + 456))(v49);
      (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v49 + 8))(v49);
      v65[0] = MEMORY[0x1E0C809B0];
      v65[1] = 0x40000000;
      v65[2] = ___ZN16HALS_IOA2Manager12RemoveDeviceEP15HALS_IOA2Device_block_invoke;
      v65[3] = &__block_descriptor_tmp_7_13345;
      v65[4] = v61;
      v65[5] = v49;
      v11 = (HALB_Mutex *)(*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v61 + 56))(v61);
      HALB_CommandGate::ExecuteCommand(v11, (uint64_t)v65);
      HALS_ObjectMap::ObjectIsDead(v49, v12);
      v49 = 0;
    }
    LOBYTE(buf.isa) = 0;
    HALB_UCObject::CopyProperty_BOOL((HALB_UCObject *)object, v4, &buf, v8);
    if (LOBYTE(buf.isa))
    {
LABEL_54:
      CACFString::~CACFString((CACFString *)&v50);
      goto LABEL_55;
    }
    v13 = operator new();
    v14 = v4;
    v15 = v61;
    v52[4]((HALB_UCObject *)&v52);
    v16 = (HALB_UCObject *)object;
    v17 = (HALS_Object *)HALS_IOA2UCDevice::CopyDeviceUID((HALS_IOA2UCDevice *)object);
    HALS_Device::HALS_Device((HALS_Device *)v13, (HALB_Info *)0x61646576, (uint64_t)v15, v17, v18);
    *(_QWORD *)v13 = off_1E69786F8;
    *(_QWORD *)(v13 + 1392) = 0;
    *(_QWORD *)(v13 + 1384) = 0;
    *(_QWORD *)(v13 + 1368) = 0;
    *(_OWORD *)(v13 + 1304) = 0u;
    *(_OWORD *)(v13 + 1320) = 0u;
    *(_OWORD *)(v13 + 1336) = 0u;
    *(_OWORD *)(v13 + 1352) = 0u;
    *(_QWORD *)(v13 + 1376) = v13 + 1384;
    buf.isa = &off_1E6979200;
    buf.length = (uint64_t)&buf;
    v70 = v69;
    _ZNKSt3__110__function6__funcIZN17CAPropertyAddress8LessThanC1EvEUlRKT_RKT0_E_NS_9allocatorISA_EEFbRK26AudioObjectPropertyAddressSF_EE7__cloneEPNS0_6__baseISG_EE((uint64_t)&buf, v69);
    if (v70)
    {
      if (v70 == v69)
      {
        v72 = v71;
        (*(void (**)(_QWORD *, _QWORD *))(v69[0] + 24))(v69, v71);
        v19 = v72;
      }
      else
      {
        v19 = (_QWORD *)(*(uint64_t (**)(void))(*v70 + 16))();
        v72 = v19;
      }
      v20 = v13 + 1408;
      *(_QWORD *)(v13 + 1416) = 0;
      *(_QWORD *)(v13 + 1408) = 0;
      if (v19)
      {
        if (v19 == v71)
        {
          *(_QWORD *)(v13 + 1448) = v13 + 1424;
          (*(void (**)(_QWORD *))(v71[0] + 24))(v71);
        }
        else
        {
          *(_QWORD *)(v13 + 1448) = (*(uint64_t (**)(_QWORD *))(*v19 + 16))(v19);
        }
        v21 = v72;
        *(_QWORD *)(v13 + 1400) = v20;
        if (v21 == v71)
        {
          v21 = v71;
          v22 = 4;
        }
        else
        {
          if (!v21)
            goto LABEL_24;
          v22 = 5;
        }
        (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_24:
        v23 = v70;
        if (v70 == v69)
        {
          v23 = v69;
          v24 = 4;
        }
        else
        {
          if (!v70)
            goto LABEL_29;
          v24 = 5;
        }
        (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_29:
        *(_QWORD *)(v13 + 1504) = 0;
        *(_QWORD *)(v13 + 1496) = 0;
        *(_QWORD *)(v13 + 1512) = 0;
        *(_OWORD *)(v13 + 1456) = 0u;
        *(_OWORD *)(v13 + 1472) = 0u;
        *(_WORD *)(v13 + 1488) = 0;
        *(_QWORD *)(v13 + 1520) = 850045863;
        *(_OWORD *)(v13 + 1528) = 0u;
        *(_OWORD *)(v13 + 1544) = 0u;
        *(_OWORD *)(v13 + 1560) = 0u;
        *(_OWORD *)(v13 + 1576) = 0u;
        *(_OWORD *)(v13 + 1592) = 0u;
        *(_QWORD *)(v13 + 1608) = 850045863;
        *(_OWORD *)(v13 + 1616) = 0u;
        *(_OWORD *)(v13 + 1632) = 0u;
        *(_OWORD *)(v13 + 1648) = 0u;
        *(_OWORD *)(v13 + 1664) = 0u;
        *(_OWORD *)(v13 + 1680) = 0u;
        *(_QWORD *)(v13 + 1696) = 850045863;
        *(_OWORD *)(v13 + 1704) = 0u;
        *(_OWORD *)(v13 + 1720) = 0u;
        *(_OWORD *)(v13 + 1736) = 0u;
        *(_OWORD *)(v13 + 1752) = 0u;
        *(_QWORD *)(v13 + 1768) = dispatch_semaphore_create(0);
        *(_QWORD *)(v13 + 1776) = 0;
        *(_QWORD *)(v13 + 1792) = 0;
        *(_QWORD *)(v13 + 1784) = &off_1E69A0EA8;
        *(_BYTE *)(v13 + 1800) = 0;
        *(_QWORD *)(v13 + 1808) = &off_1E6984E78;
        *(_DWORD *)(v13 + 1816) = (_DWORD)v16;
        *(_DWORD *)(v13 + 1820) = 0;
        *(_QWORD *)(v13 + 1824) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
        *(_WORD *)(v13 + 1832) = 257;
        *(_WORD *)(v13 + 1840) = 1;
        *(_BYTE *)(v13 + 1842) = 1;
        *(_QWORD *)(v13 + 1808) = &off_1E696EBF0;
        v66 = 0;
        HALB_UCObject::CopyProperty_BOOL(v16, CFSTR("supports prewarming"), (const __CFString *)&v66, v25);
        *(_BYTE *)(v13 + 1843) = v66;
        v26 = *(_DWORD *)(v13 + 1816);
        if (v26 && !IOObjectConformsTo(v26, "IOAudio2Device"))
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.isa) = 136315394;
            *(void **)((char *)&buf.isa + 4) = "HALS_IOA2UCDevice.cpp";
            WORD2(buf.info) = 1024;
            *(_DWORD *)((char *)&buf.info + 6) = 70;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::HALS_IOA2UCDevice: this is not an IOAudio2Device", (uint8_t *)&buf, 0x12u);
          }
          v44 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v44 = &off_1E69A1B30;
          v44[2] = 1852797029;
        }
        *(_DWORD *)(v13 + 1848) = HALB_MachPort::CreatePort(0);
        *(_WORD *)(v13 + 1852) = 257;
        *(_QWORD *)(v13 + 1856) = 0;
        *(_BYTE *)(v13 + 1864) = 0;
        *(_QWORD *)(v13 + 1872) = 0;
        CFProperty = IORegistryEntryCreateCFProperty((io_registry_entry_t)v16, CFSTR("data exchange blocks"), 0, 0);
        v67 = CFProperty;
        v68 = 1;
        if (CFProperty && (v28 = CFGetTypeID(CFProperty), v28 == CFArrayGetTypeID()) && v67)
        {
          CFRetain(v67);
          v29 = v67;
        }
        else
        {
          v29 = 0;
        }
        CACFObject<void const*>::~CACFObject((uint64_t)&v67);
        *(_QWORD *)(v13 + 1880) = v29;
        *(_WORD *)(v13 + 1888) = 1;
        *(_QWORD *)(v13 + 1912) = 0;
        *(_QWORD *)(v13 + 1904) = 0;
        *(_QWORD *)(v13 + 1896) = v13 + 1904;
        if (!*(_DWORD *)(v13 + 1816))
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.isa) = 136315394;
            *(void **)((char *)&buf.isa + 4) = "HALS_IOA2Device.cpp";
            WORD2(buf.info) = 1024;
            *(_DWORD *)((char *)&buf.info + 6) = 93;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::HALS_IOA2Device: no IOAudio2Device", (uint8_t *)&buf, 0x12u);
          }
          v43 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v43 = &off_1E69A1B30;
          v43[2] = 1852797029;
        }
        *(_BYTE *)(v13 + 1841) = 0;
        HALB_UCObject::CacheProperties((HALB_UCObject *)(v13 + 1808));
        v49 = (HALS_ObjectMap *)v13;
        LODWORD(v71[0]) = MEMORY[0x1B5E5064C]();
        v71[1] = &v49;
        v30 = (**(uint64_t (***)(HALS_ObjectMap *))v49)(v49);
        LODWORD(v69[0]) = MEMORY[0x1B5E5064C](v30);
        v69[1] = &v49;
        buf.isa = 0;
        buf.info = (uint64_t)&buf;
        buf.data = (char *)0x2000000000;
        LODWORD(buf.length) = 0;
        *(_QWORD *)v73 = MEMORY[0x1E0C809B0];
        *(_QWORD *)&v73[8] = 0x40000000;
        *(_QWORD *)&v73[16] = ___ZN16HALS_IOA2Manager9AddDeviceEP15HALS_IOA2Device_block_invoke;
        v74 = &unk_1E699B7B8;
        p_buf = &buf;
        v76 = v61;
        v77 = v49;
        v31 = (HALB_Mutex *)(*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v61 + 56))(v61);
        HALB_CommandGate::ExecuteCommand(v31, (uint64_t)v73);
        _Block_object_dispose(&buf, 8);
        *(_DWORD *)v73 = MEMORY[0x1B5E5064C]();
        *(_QWORD *)&v73[8] = &v61;
        *(_QWORD *)&v73[16] = &v49;
        HALS_Device::UpdateInternalIOContext(v49);
        HALS_System::DeviceArrived(*((os_unfair_lock_s ***)v61 + 40), v49);
        LODWORD(buf.isa) = MEMORY[0x1B5E5064C]();
        buf.info = (uint64_t)&v61;
        buf.data = (char *)&v49;
        v32 = *((_DWORD *)v49 + 4);
        v33 = v63;
        if ((unint64_t)v63 >= v64)
        {
          v35 = v62;
          v36 = v63 - v62;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v38 = v64 - (_QWORD)v62;
          if ((uint64_t)(v64 - (_QWORD)v62) >> 1 > v37)
            v37 = v38 >> 1;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
            v39 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          if (v39)
            v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v39);
          else
            v40 = 0;
          v41 = (_DWORD *)(v39 + 4 * v36);
          *v41 = v32;
          v34 = v41 + 1;
          while (v33 != v35)
          {
            v42 = *--v33;
            *--v41 = v42;
          }
          v62 = v41;
          v63 = v34;
          v64 = v39 + 4 * v40;
          if (v35)
            operator delete(v35);
        }
        else
        {
          *v63 = v32;
          v34 = v33 + 1;
        }
        v63 = v34;
        applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Manager::IOServiceMatchingHandler(void *,unsigned int)::$_3,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&buf);
        applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Manager::IOServiceMatchingHandler(void *,unsigned int)::$_2,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)v73);
        applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Manager::IOServiceMatchingHandler(void *,unsigned int)::$_1,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)v69);
        applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Manager::IOServiceMatchingHandler(void *,unsigned int)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)v71);
        v4 = v14;
        v6 = MEMORY[0x1E0C81028];
        goto LABEL_54;
      }
    }
    else
    {
      v72 = 0;
      v20 = v13 + 1408;
      *(_QWORD *)(v13 + 1416) = 0;
      *(_QWORD *)(v13 + 1408) = 0;
    }
    *(_QWORD *)(v13 + 1448) = 0;
    *(_QWORD *)(v13 + 1400) = v20;
    goto LABEL_24;
  }
LABEL_66:
  v45 = v62;
  if (v62 != v63)
  {
    v46 = (HALS_NotificationManager *)*((unsigned int *)v61 + 4);
    strcpy((char *)&buf, "#vedbolg");
    BYTE1(buf.info) = 0;
    WORD1(buf.info) = 0;
    HALS_NotificationManager::PropertiesChanged(v46, 0, 1, (const AudioObjectPropertyAddress *)&buf, v3);
    HALS_System::CheckForDefaultDeviceChanges(*((HALS_PlatformBehaviors **)v61 + 40), (uint64_t)&v62);
  }
  HALB_UCObject::~HALB_UCObject((HALB_UCObject *)&v52);
  HALB_UCIterator::~HALB_UCIterator(&iterator);
  HALS_ObjectMap::ReleaseObject(v61, v47);
  if (v45)
    operator delete(v45);
}

void sub_1B5C2A130(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5C2A138);
  __clang_call_terminate(a1);
}

void sub_1B5C2A148(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,HALS_ObjectMap *a24,void *__p)
{
  _Unwind_Exception *v25;

  if ((_DWORD)a2)
  {
    HALS_ObjectMap::ReleaseObject(a24, a2);
    if (__p)
      operator delete(__p);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5C2A050);
  }
  _Unwind_Resume(v25);
}

void sub_1B5C2A1E8()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

void ___ZN16HALS_IOA2Manager12RemoveDeviceEP15HALS_IOA2Device_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  HALS_ObjectMap *v4;
  void *v5;
  HALS_ObjectMap **v6;
  int64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (HALS_ObjectMap **)v1[93];
  v3 = (HALS_ObjectMap **)v1[94];
  if (v2 != v3)
  {
    v4 = *(HALS_ObjectMap **)(a1 + 40);
    while (*v2 != v4)
    {
      v2 += 2;
      if (v2 == v3)
        return;
    }
    IOObjectRelease(*((_DWORD *)v2 + 2));
    *((_DWORD *)v2 + 2) = 0;
    *v2 = 0;
    v5 = v2 + 2;
    v6 = (HALS_ObjectMap **)v1[94];
    v7 = (char *)v6 - (char *)(v2 + 2);
    if (v6 != v2 + 2)
      memmove(v2, v5, v7 - 4);
    v8 = (char *)v1[93];
    v9 = (char *)v2 + v7;
    v1[94] = (char *)v2 + v7;
    v10 = v1[95];
    if ((((char *)v2 + v7 - v8) >> 4) + 20 >= (unint64_t)((v10 - (uint64_t)v8) >> 4))
      goto LABEL_19;
    v11 = (v9 - v8) >> 4;
    if (v11 >= (v10 - (uint64_t)v8) >> 4)
      goto LABEL_19;
    if (v9 == v8)
    {
      v15 = 0;
      v14 = 16 * v11;
    }
    else
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>((v9 - v8) >> 4);
      v8 = (char *)v1[94];
      v13 = (char *)v1[93];
      v14 = (uint64_t)&v12[16 * v11];
      v15 = &v12[16 * (_QWORD)v5];
      if (v8 != v13)
      {
        v16 = v14;
        do
        {
          v17 = *((_QWORD *)v8 - 2);
          v8 -= 16;
          v18 = *((_DWORD *)v8 + 2);
          *(_QWORD *)(v16 - 16) = v17;
          v16 -= 16;
          *(_DWORD *)(v16 + 8) = v18;
        }
        while (v8 != v13);
        v8 = (char *)v1[93];
        goto LABEL_17;
      }
    }
    v16 = v14;
LABEL_17:
    v1[93] = v16;
    v1[94] = v14;
    v1[95] = v15;
    if (v8)
      operator delete(v8);
LABEL_19:
    HALS_ObjectMap::ReleaseObject(v4, (HALS_Object *)v5);
  }
}

void sub_1B5C2A330(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C2A31CLL);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Manager::IOServiceMatchingHandler(void *,unsigned int)::$_3,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1B5E5064C]() > *(_DWORD *)a1)
    HALS_System::DeviceDied(*(HALS_System **)(**(_QWORD **)(a1 + 8) + 320), **(HALS_Device ***)(a1 + 16));
  return a1;
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Manager::IOServiceMatchingHandler(void *,unsigned int)::$_2,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  HALB_Mutex *v4;
  _QWORD v6[6];

  if ((int)MEMORY[0x1B5E5064C]() > *(_DWORD *)a1)
  {
    v2 = **(_QWORD **)(a1 + 8);
    v3 = **(_QWORD **)(a1 + 16);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 0x40000000;
    v6[2] = ___ZN16HALS_IOA2Manager12RemoveDeviceEP15HALS_IOA2Device_block_invoke;
    v6[3] = &__block_descriptor_tmp_7_13345;
    v6[4] = v2;
    v6[5] = v3;
    v4 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
    HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v6);
  }
  return a1;
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Manager::IOServiceMatchingHandler(void *,unsigned int)::$_1,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1B5E5064C]() > *(_DWORD *)a1)
    (*(void (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 8))(**(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Manager::IOServiceMatchingHandler(void *,unsigned int)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  HALS_Object *v2;

  if ((int)MEMORY[0x1B5E5064C]() > *(_DWORD *)a1)
    HALS_ObjectMap::ReleaseObject(**(HALS_ObjectMap ***)(a1 + 8), v2);
  return a1;
}

void ___ZN16HALS_IOA2Manager9AddDeviceEP15HALS_IOA2Device_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  io_service_t *v3;
  HALS_ObjectMap *v4;
  HALS_Object *v5;
  int v6;
  kern_return_t v7;
  IONotificationPort *v8;
  dispatch_queue_t *v9;
  _OWORD *v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  kern_return_t v25;
  _DWORD *exception;
  __int128 v27;
  const __CFString *v28;
  char v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  kern_return_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v2 = a1[5];
  v3 = (io_service_t *)a1[6];
  v28 = (const __CFString *)(*(uint64_t (**)(io_service_t *))(*(_QWORD *)v3 + 208))(v3);
  v29 = 1;
  v4 = HALS_DeviceManager::CopyDeviceByUID((HALS_DeviceManager *)v2, v28, 0);
  if (v4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v31 = "HALS_IOA2Manager.cpp";
      v32 = 1024;
      v33 = 186;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOA2Manager::_AddDevice: there is already a device with this UID", buf, 0x12u);
    }
    HALS_ObjectMap::ReleaseObject(v4, v5);
    v6 = 1852797029;
  }
  else
  {
    *(_QWORD *)&v27 = v3;
    DWORD2(v27) = 0;
    v7 = IOServiceAddInterestNotification(*(IONotificationPortRef *)(v2 + 768), v3[454], "IOGeneralInterest", (IOServiceInterestCallback)HALS_IOA2Manager::IOServiceInterestHandler, (void *)*(unsigned int *)(v2 + 16), (io_object_t *)&v27 + 2);
    if (v7)
    {
      v25 = v7;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v31 = "HALS_IOA2Manager.cpp";
        v32 = 1024;
        v33 = 176;
        v34 = 1024;
        v35 = v25;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Manager::_AddDevice: Cannot add an interest callback., Error: 0x%X", buf, 0x18u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = v25;
    }
    v8 = *(IONotificationPort **)(v2 + 768);
    v9 = (dispatch_queue_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
    IONotificationPortSetDispatchQueue(v8, *v9);
    v10 = *(_OWORD **)(v2 + 752);
    v11 = *(_QWORD *)(v2 + 760);
    if ((unint64_t)v10 >= v11)
    {
      v13 = *(_QWORD *)(v2 + 744);
      v14 = ((uint64_t)v10 - v13) >> 4;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v16 = v11 - v13;
      if (v16 >> 3 > v15)
        v15 = v16 >> 3;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
        v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v17);
      else
        v18 = 0;
      v19 = v17 + 16 * v14;
      v20 = v17 + 16 * v18;
      *(_OWORD *)v19 = v27;
      v12 = (_OWORD *)(v19 + 16);
      v21 = *(_DWORD **)(v2 + 752);
      v22 = *(_DWORD **)(v2 + 744);
      if (v21 != v22)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 2);
          v21 -= 4;
          v24 = v21[2];
          *(_QWORD *)(v19 - 16) = v23;
          v19 -= 16;
          *(_DWORD *)(v19 + 8) = v24;
        }
        while (v21 != v22);
        v21 = *(_DWORD **)(v2 + 744);
      }
      *(_QWORD *)(v2 + 744) = v19;
      *(_QWORD *)(v2 + 752) = v12;
      *(_QWORD *)(v2 + 760) = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v10 = v27;
      v12 = v10 + 1;
    }
    v6 = 0;
    *(_QWORD *)(v2 + 752) = v12;
  }
  CACFString::~CACFString((CACFString *)&v28);
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v6;
}

void sub_1B5C2A778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    CACFString::~CACFString((CACFString *)&a11);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5C2A694);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOA2Manager::IOServiceInterestHandler(HALS_IOA2Manager *this, HALS_IOA2UCDevice *a2, int a3, unsigned int a4, void *a5)
{
  uint64_t v7;
  HALS_ObjectMap *v8;
  HALS_Object *v9;
  HALB_Mutex *v10;
  HALS_NotificationManager *v11;
  const AudioObjectPropertyAddress *v12;
  HALS_Object *v13;
  _DWORD *exception;
  _BYTE v15[24];
  void *v16;
  uint64_t v17;
  HALS_ObjectMap *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (((_DWORD)a2 - 1) <= 0xFFFFFFFD && a3 == -536870896)
  {
    v7 = HALS_ObjectMap::CopyObjectByObjectID(this);
    if (!v7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v15 = 136315394;
        *(_QWORD *)&v15[4] = "HALS_IOA2Manager.cpp";
        *(_WORD *)&v15[12] = 1024;
        *(_DWORD *)&v15[14] = 341;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Manager::IOServiceInterestHandler: no device manager object", v15, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    *(_QWORD *)v15 = HALS_IOA2UCDevice::CopyDeviceUID(a2);
    v15[8] = 1;
    v8 = HALS_DeviceManager::CopyDeviceByUID((HALS_DeviceManager *)v7, *(const __CFString **)v15, 0);
    CACFString::~CACFString((CACFString *)v15);
    if (v8)
    {
      *((_BYTE *)v8 + 1842) = 0;
      HALS_System::DeviceDied(*(HALS_System **)(v7 + 320), v8);
      (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v8 + 456))(v8);
      (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v8 + 8))(v8);
      *(_QWORD *)v15 = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v15[8] = 0x40000000;
      *(_QWORD *)&v15[16] = ___ZN16HALS_IOA2Manager12RemoveDeviceEP15HALS_IOA2Device_block_invoke;
      v16 = &__block_descriptor_tmp_7_13345;
      v17 = v7;
      v18 = v8;
      v10 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
      HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v15);
      v11 = (HALS_NotificationManager *)*(unsigned int *)(v7 + 16);
      strcpy(v15, "#vedbolg");
      v15[9] = 0;
      *(_WORD *)&v15[10] = 0;
      HALS_NotificationManager::PropertiesChanged(v11, 0, 1, (const AudioObjectPropertyAddress *)v15, v12);
      HALS_System::CheckForDefaultDeviceChanges(*(HALS_System **)(v7 + 320));
    }
    HALS_ObjectMap::ReleaseObject(v8, v9);
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v7, v13);
  }
}

void sub_1B5C2A9F0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B5C2AA0C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HALS_ObjectMap *v9;
  HALS_Object *v11;

  if (a2)
  {
    CACFString::~CACFString((CACFString *)&a9);
    HALS_ObjectMap::ReleaseObject(v9, v11);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5C2A924);
  }
  JUMPOUT(0x1B5C2A9FCLL);
}

void sub_1B5C2AA6C()
{
  JUMPOUT(0x1B5C2A9FCLL);
}

void AMCP::get_enum_string_bimap<AMCP::Wire_Connection_Policy>()
{
  unsigned __int8 v0;
  std::string v1;
  int v2;
  std::string __p;

  if ((v0 & 1) == 0
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Wire_Connection_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(_QWORD *)(qword_1EF130BD8 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v1, "Wire_ConnectionRequired");
    v2 = 0;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Connection_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130BB0 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1, "Wire_ConnectionTransient");
    v2 = 1;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Connection_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130BB0 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
  }
}

void sub_1B5C2ABC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

_QWORD *applesauce::indestructible<boost::bimaps::bimap<AMCP::Wire_Connection_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  _QWORD *result;

  qword_1EF130BB0 = (uint64_t)algn_1EF130BC8;
  result = operator new(0x50uLL);
  qword_1EF130BC0 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1EF130BD0 = 0;
  qword_1EF130BD8 = (uint64_t)algn_1EF130BC8;
  qword_1EF130BE0 = (uint64_t)algn_1EF130BC8;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Connection_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  int v22;
  int *v23;
  char *v24;
  std::string *v25;
  _QWORD *v26;

  v3 = result;
  v4 = a2 + 2;
  v5 = *(_QWORD **)(result + 8);
  v6 = v5;
  v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7)
    goto LABEL_8;
  do
  {
    v6 = (_QWORD *)(v7 - 56);
    result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (_QWORD *)(v7 - 48));
    if ((result & 0x80u) == 0)
      v8 = 9;
    else
      v8 = 8;
    v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    v11 = v5[8];
    if (v11)
      v12 = (_QWORD *)(v11 - 56);
    else
      v12 = 0;
    v13 = v6 + 7;
    if (v6 == v12)
    {
      v9 = 0;
      goto LABEL_20;
    }
    v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v9 = 0;
    if (v26)
      v10 = v26 - 7;
    else
      v10 = 0;
  }
  else
  {
    v9 = 1;
    v10 = v6;
  }
  result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10)
      return result;
    goto LABEL_42;
  }
  v13 = v6 + 7;
LABEL_20:
  v14 = *a2;
  v15 = v5;
  v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      v15 = (_QWORD *)(v16 - 32);
      v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14)
        v18 = 6;
      else
        v18 = 5;
      v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      v22 = 1;
LABEL_35:
      if (v17 >= v14)
        return result;
      v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  v19 = v5[5];
  if (v19)
    v20 = (_QWORD *)(v19 - 32);
  else
    v20 = 0;
  v21 = v15 + 4;
  if (v15 != v20)
  {
    v26 = v15 + 4;
    result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v22 = 0;
    if (v26)
      v23 = (int *)(v26 - 4);
    else
      v23 = 0;
    v17 = *v23;
    goto LABEL_35;
  }
  v22 = 0;
LABEL_38:
  v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)v24 = v14;
  v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((_QWORD *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(_QWORD *)(v3 + 8) + 32));
  result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(_QWORD *)(v3 + 8) + 56));
LABEL_42:
  ++*(_QWORD *)(v3 + 24);
  return result;
}

void sub_1B5C2AE68(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1B5C2AE7C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link(unint64_t *result, int a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;

  v5 = result;
  if (a2)
  {
    a3[2] = (unint64_t)result;
    v6 = a4 + 2;
    v7 = (unint64_t *)a4[2];
    goto LABEL_5;
  }
  a3[1] = (unint64_t)result;
  if (a3 != a4)
  {
    v6 = a4 + 1;
    v7 = (unint64_t *)a4[1];
LABEL_5:
    if (v7 != a3)
      goto LABEL_9;
    goto LABEL_8;
  }
  *a3 = *a3 & 1 | (unint64_t)result;
  v6 = a3 + 2;
LABEL_8:
  *v6 = result;
LABEL_9:
  result[1] = 0;
  result[2] = 0;
  v8 = (unint64_t)a3 & 0xFFFFFFFFFFFFFFFELL;
  *result = (unint64_t)a3 & 0xFFFFFFFFFFFFFFFELL;
  v9 = *a4 & 0xFFFFFFFFFFFFFFFELL;
  if ((unint64_t *)v9 == result)
    goto LABEL_29;
  while (1)
  {
    v10 = *(_QWORD *)v8;
    if ((*(_QWORD *)v8 & 1) != 0)
      break;
    v11 = *(_QWORD **)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if (v11 == (_QWORD *)v8)
    {
      v11 = *(_QWORD **)((v10 & 0xFFFFFFFFFFFFFFFELL) + 16);
      if (v11 && (*(_BYTE *)v11 & 1) == 0)
      {
LABEL_18:
        *(_QWORD *)v8 = v10 | 1;
        *v11 |= 1uLL;
        *(_QWORD *)(*(_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
        v5 = (unint64_t *)(*(_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL);
        goto LABEL_25;
      }
      if (v5 == *(unint64_t **)(v8 + 16))
      {
        v19 = a4;
        boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left((unint64_t *)v8, &v19);
        v13 = (unint64_t *)(*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFFELL);
        v10 = *v13;
        v5 = (unint64_t *)v8;
      }
      else
      {
        v13 = (unint64_t *)v8;
        v8 = (unint64_t)v5;
      }
      *v13 = v10 | 1;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
      v15 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL);
      v18 = a4;
      result = boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(v15, &v18);
    }
    else
    {
      if (v11 && (*(_BYTE *)v11 & 1) == 0)
        goto LABEL_18;
      if (v5 == *(unint64_t **)(v8 + 8))
      {
        v17 = a4;
        boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right((unint64_t *)v8, &v17);
        v12 = (unint64_t *)(*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFFELL);
        v10 = *v12;
        v5 = (unint64_t *)v8;
      }
      else
      {
        v12 = (unint64_t *)v8;
        v8 = (unint64_t)v5;
      }
      *v12 = v10 | 1;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
      v14 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL);
      v16 = a4;
      result = boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(v14, &v16);
    }
LABEL_25:
    v9 = *a4 & 0xFFFFFFFFFFFFFFFELL;
    if (v5 == (unint64_t *)v9)
      goto LABEL_28;
    v8 = *v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  v5 = (unint64_t *)v9;
LABEL_28:
  v8 = *v5;
LABEL_29:
  *v5 = v8 | 1;
  return result;
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(unint64_t *result, unint64_t **a2)
{
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = result[2];
  result[2] = *(_QWORD *)(v2 + 8);
  v3 = *(unint64_t **)(v2 + 8);
  if (v3)
    *v3 = *v3 & 1 | (unint64_t)result;
  *(_QWORD *)v2 = *result & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v2 & 1;
  if ((unint64_t *)(**a2 & 0xFFFFFFFFFFFFFFFELL) == result)
  {
    **a2 = **a2 & 1 | v2;
    v4 = *result;
  }
  else
  {
    v4 = *result;
    v5 = *result & 0xFFFFFFFFFFFFFFFELL;
    if (*(unint64_t **)(v5 + 8) == result)
      *(_QWORD *)(v5 + 8) = v2;
    else
      *(_QWORD *)(v5 + 16) = v2;
  }
  *(_QWORD *)(v2 + 8) = result;
  *result = v4 & 1 | v2;
  return result;
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(unint64_t *result, unint64_t **a2)
{
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = result[1];
  result[1] = *(_QWORD *)(v2 + 16);
  v3 = *(unint64_t **)(v2 + 16);
  if (v3)
    *v3 = *v3 & 1 | (unint64_t)result;
  *(_QWORD *)v2 = *result & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v2 & 1;
  if ((unint64_t *)(**a2 & 0xFFFFFFFFFFFFFFFELL) == result)
  {
    **a2 = **a2 & 1 | v2;
    v4 = *result;
  }
  else
  {
    v4 = *result;
    v5 = *result & 0xFFFFFFFFFFFFFFFELL;
    if (*(unint64_t **)(v5 + 16) == result)
      *(_QWORD *)(v5 + 16) = v2;
    else
      *(_QWORD *)(v5 + 8) = v2;
  }
  *(_QWORD *)(v2 + 16) = result;
  *result = v4 & 1 | v2;
  return result;
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement(unint64_t *result)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  BOOL v6;

  v1 = (_QWORD *)*result;
  v2 = *(_QWORD *)*result;
  if ((v2 & 1) == 0 && v1 == (_QWORD *)(*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL))
  {
    v4 = v1[2];
  }
  else
  {
    v3 = v1[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
    }
    else
    {
      v4 = v2 & 0xFFFFFFFFFFFFFFFELL;
      if (v1 == *(_QWORD **)(v4 + 8))
      {
        v5 = (_QWORD *)v4;
        do
        {
          *result = (unint64_t)v5;
          v4 = *v5 & 0xFFFFFFFFFFFFFFFELL;
          v6 = v5 == *(_QWORD **)(v4 + 8);
          v5 = (_QWORD *)v4;
        }
        while (v6);
      }
    }
  }
  *result = v4;
  return result;
}

void AMCP::get_enum_string_bimap<AMCP::Wire_Resampler_Policy>()
{
  unsigned __int8 v0;
  std::string v1;
  int v2;
  std::string __p;

  if ((v0 & 1) == 0
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Wire_Resampler_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(_QWORD *)(qword_1EF130C20 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v1, "Wire_NeverResample");
    v2 = 1;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Resampler_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130BF8 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1, "Wire_ResampleIfRequired");
    v2 = 0;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Resampler_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130BF8 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
  }
}

void sub_1B5C2B3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

_QWORD *applesauce::indestructible<boost::bimaps::bimap<AMCP::Wire_Resampler_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  _QWORD *result;

  qword_1EF130BF8 = (uint64_t)&unk_1EF130C10;
  result = operator new(0x50uLL);
  qword_1EF130C08 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1EF130C18 = 0;
  qword_1EF130C20 = (uint64_t)&unk_1EF130C10;
  qword_1EF130C28 = (uint64_t)&unk_1EF130C10;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Resampler_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  int v22;
  int *v23;
  char *v24;
  std::string *v25;
  _QWORD *v26;

  v3 = result;
  v4 = a2 + 2;
  v5 = *(_QWORD **)(result + 8);
  v6 = v5;
  v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7)
    goto LABEL_8;
  do
  {
    v6 = (_QWORD *)(v7 - 56);
    result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (_QWORD *)(v7 - 48));
    if ((result & 0x80u) == 0)
      v8 = 9;
    else
      v8 = 8;
    v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    v11 = v5[8];
    if (v11)
      v12 = (_QWORD *)(v11 - 56);
    else
      v12 = 0;
    v13 = v6 + 7;
    if (v6 == v12)
    {
      v9 = 0;
      goto LABEL_20;
    }
    v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v9 = 0;
    if (v26)
      v10 = v26 - 7;
    else
      v10 = 0;
  }
  else
  {
    v9 = 1;
    v10 = v6;
  }
  result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10)
      return result;
    goto LABEL_42;
  }
  v13 = v6 + 7;
LABEL_20:
  v14 = *a2;
  v15 = v5;
  v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      v15 = (_QWORD *)(v16 - 32);
      v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14)
        v18 = 6;
      else
        v18 = 5;
      v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      v22 = 1;
LABEL_35:
      if (v17 >= v14)
        return result;
      v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  v19 = v5[5];
  if (v19)
    v20 = (_QWORD *)(v19 - 32);
  else
    v20 = 0;
  v21 = v15 + 4;
  if (v15 != v20)
  {
    v26 = v15 + 4;
    result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v22 = 0;
    if (v26)
      v23 = (int *)(v26 - 4);
    else
      v23 = 0;
    v17 = *v23;
    goto LABEL_35;
  }
  v22 = 0;
LABEL_38:
  v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)v24 = v14;
  v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((_QWORD *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(_QWORD *)(v3 + 8) + 32));
  result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(_QWORD *)(v3 + 8) + 56));
LABEL_42:
  ++*(_QWORD *)(v3 + 24);
  return result;
}

void sub_1B5C2B64C(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1B5C2B660(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void AMCP::get_enum_string_bimap<AMCP::Wire_Format_Conversion_Policy>()
{
  unsigned __int8 v0;
  std::string v1;
  int v2;
  std::string __p;

  if ((v0 & 1) == 0
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Wire_Format_Conversion_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(_QWORD *)(qword_1EF130C68 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v1, "Wire_NeverConvertFormat");
    v2 = 0;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Format_Conversion_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130C40 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1, "Wire_ConvertFormatIfRequired");
    v2 = 1;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Format_Conversion_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130C40 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
  }
}

void sub_1B5C2B7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

_QWORD *applesauce::indestructible<boost::bimaps::bimap<AMCP::Wire_Format_Conversion_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  _QWORD *result;

  qword_1EF130C40 = (uint64_t)algn_1EF130C58;
  result = operator new(0x50uLL);
  qword_1EF130C50 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1EF130C60 = 0;
  qword_1EF130C68 = (uint64_t)algn_1EF130C58;
  qword_1EF130C70 = (uint64_t)algn_1EF130C58;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Format_Conversion_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  int v22;
  int *v23;
  char *v24;
  std::string *v25;
  _QWORD *v26;

  v3 = result;
  v4 = a2 + 2;
  v5 = *(_QWORD **)(result + 8);
  v6 = v5;
  v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7)
    goto LABEL_8;
  do
  {
    v6 = (_QWORD *)(v7 - 56);
    result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (_QWORD *)(v7 - 48));
    if ((result & 0x80u) == 0)
      v8 = 9;
    else
      v8 = 8;
    v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    v11 = v5[8];
    if (v11)
      v12 = (_QWORD *)(v11 - 56);
    else
      v12 = 0;
    v13 = v6 + 7;
    if (v6 == v12)
    {
      v9 = 0;
      goto LABEL_20;
    }
    v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v9 = 0;
    if (v26)
      v10 = v26 - 7;
    else
      v10 = 0;
  }
  else
  {
    v9 = 1;
    v10 = v6;
  }
  result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10)
      return result;
    goto LABEL_42;
  }
  v13 = v6 + 7;
LABEL_20:
  v14 = *a2;
  v15 = v5;
  v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      v15 = (_QWORD *)(v16 - 32);
      v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14)
        v18 = 6;
      else
        v18 = 5;
      v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      v22 = 1;
LABEL_35:
      if (v17 >= v14)
        return result;
      v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  v19 = v5[5];
  if (v19)
    v20 = (_QWORD *)(v19 - 32);
  else
    v20 = 0;
  v21 = v15 + 4;
  if (v15 != v20)
  {
    v26 = v15 + 4;
    result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v22 = 0;
    if (v26)
      v23 = (int *)(v26 - 4);
    else
      v23 = 0;
    v17 = *v23;
    goto LABEL_35;
  }
  v22 = 0;
LABEL_38:
  v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)v24 = v14;
  v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((_QWORD *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(_QWORD *)(v3 + 8) + 32));
  result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(_QWORD *)(v3 + 8) + 56));
LABEL_42:
  ++*(_QWORD *)(v3 + 24);
  return result;
}

void sub_1B5C2BA68(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1B5C2BA7C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void AMCP::get_enum_string_bimap<AMCP::Wire_Drift_Correction_Policy>()
{
  unsigned __int8 v0;
  std::string v1;
  int v2;
  std::string __p;

  if ((v0 & 1) == 0
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Wire_Drift_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(_QWORD *)(qword_1EF130CB0 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v1, "Wire_NeverDriftCorrect");
    v2 = 1;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Drift_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130C88 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1, "Wire_ShouldDriftCorrect");
    v2 = 0;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Drift_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130C88 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
  }
}

void sub_1B5C2BBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

_QWORD *applesauce::indestructible<boost::bimaps::bimap<AMCP::Wire_Drift_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  _QWORD *result;

  qword_1EF130C88 = (uint64_t)&unk_1EF130CA0;
  result = operator new(0x50uLL);
  qword_1EF130C98 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1EF130CA8 = 0;
  qword_1EF130CB0 = (uint64_t)&unk_1EF130CA0;
  qword_1EF130CB8 = (uint64_t)&unk_1EF130CA0;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Drift_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  int v22;
  int *v23;
  char *v24;
  std::string *v25;
  _QWORD *v26;

  v3 = result;
  v4 = a2 + 2;
  v5 = *(_QWORD **)(result + 8);
  v6 = v5;
  v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7)
    goto LABEL_8;
  do
  {
    v6 = (_QWORD *)(v7 - 56);
    result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (_QWORD *)(v7 - 48));
    if ((result & 0x80u) == 0)
      v8 = 9;
    else
      v8 = 8;
    v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    v11 = v5[8];
    if (v11)
      v12 = (_QWORD *)(v11 - 56);
    else
      v12 = 0;
    v13 = v6 + 7;
    if (v6 == v12)
    {
      v9 = 0;
      goto LABEL_20;
    }
    v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v9 = 0;
    if (v26)
      v10 = v26 - 7;
    else
      v10 = 0;
  }
  else
  {
    v9 = 1;
    v10 = v6;
  }
  result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10)
      return result;
    goto LABEL_42;
  }
  v13 = v6 + 7;
LABEL_20:
  v14 = *a2;
  v15 = v5;
  v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      v15 = (_QWORD *)(v16 - 32);
      v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14)
        v18 = 6;
      else
        v18 = 5;
      v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      v22 = 1;
LABEL_35:
      if (v17 >= v14)
        return result;
      v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  v19 = v5[5];
  if (v19)
    v20 = (_QWORD *)(v19 - 32);
  else
    v20 = 0;
  v21 = v15 + 4;
  if (v15 != v20)
  {
    v26 = v15 + 4;
    result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v22 = 0;
    if (v26)
      v23 = (int *)(v26 - 4);
    else
      v23 = 0;
    v17 = *v23;
    goto LABEL_35;
  }
  v22 = 0;
LABEL_38:
  v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)v24 = v14;
  v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((_QWORD *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(_QWORD *)(v3 + 8) + 32));
  result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(_QWORD *)(v3 + 8) + 56));
LABEL_42:
  ++*(_QWORD *)(v3 + 24);
  return result;
}

void sub_1B5C2BE84(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1B5C2BE98(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void AMCP::get_enum_string_bimap<AMCP::Wire_Latency_Correction_Policy>()
{
  unsigned __int8 v0;
  std::string v1;
  int v2;
  std::string __p;

  if ((v0 & 1) == 0
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Wire_Latency_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(_QWORD *)(qword_1EF130CF8 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v1, "Wire_NeverLatencyCorrect");
    v2 = 1;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Latency_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130CD0 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1, "Wire_ShouldLatencyCorrect");
    v2 = 0;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Latency_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130CD0 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
  }
}

void sub_1B5C2BFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

_QWORD *applesauce::indestructible<boost::bimaps::bimap<AMCP::Wire_Latency_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  _QWORD *result;

  qword_1EF130CD0 = (uint64_t)algn_1EF130CE8;
  result = operator new(0x50uLL);
  qword_1EF130CE0 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1EF130CF0 = 0;
  qword_1EF130CF8 = (uint64_t)algn_1EF130CE8;
  qword_1EF130D00 = (uint64_t)algn_1EF130CE8;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Latency_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  int v22;
  int *v23;
  char *v24;
  std::string *v25;
  _QWORD *v26;

  v3 = result;
  v4 = a2 + 2;
  v5 = *(_QWORD **)(result + 8);
  v6 = v5;
  v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7)
    goto LABEL_8;
  do
  {
    v6 = (_QWORD *)(v7 - 56);
    result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (_QWORD *)(v7 - 48));
    if ((result & 0x80u) == 0)
      v8 = 9;
    else
      v8 = 8;
    v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    v11 = v5[8];
    if (v11)
      v12 = (_QWORD *)(v11 - 56);
    else
      v12 = 0;
    v13 = v6 + 7;
    if (v6 == v12)
    {
      v9 = 0;
      goto LABEL_20;
    }
    v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v9 = 0;
    if (v26)
      v10 = v26 - 7;
    else
      v10 = 0;
  }
  else
  {
    v9 = 1;
    v10 = v6;
  }
  result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10)
      return result;
    goto LABEL_42;
  }
  v13 = v6 + 7;
LABEL_20:
  v14 = *a2;
  v15 = v5;
  v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      v15 = (_QWORD *)(v16 - 32);
      v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14)
        v18 = 6;
      else
        v18 = 5;
      v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      v22 = 1;
LABEL_35:
      if (v17 >= v14)
        return result;
      v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  v19 = v5[5];
  if (v19)
    v20 = (_QWORD *)(v19 - 32);
  else
    v20 = 0;
  v21 = v15 + 4;
  if (v15 != v20)
  {
    v26 = v15 + 4;
    result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v22 = 0;
    if (v26)
      v23 = (int *)(v26 - 4);
    else
      v23 = 0;
    v17 = *v23;
    goto LABEL_35;
  }
  v22 = 0;
LABEL_38:
  v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)v24 = v14;
  v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((_QWORD *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(_QWORD *)(v3 + 8) + 32));
  result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(_QWORD *)(v3 + 8) + 56));
LABEL_42:
  ++*(_QWORD *)(v3 + 24);
  return result;
}

void sub_1B5C2C2A0(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1B5C2C2B4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void AMCP::get_enum_string_bimap<AMCP::Node_Clock_Policy>()
{
  unsigned __int8 v0;
  std::string v1;
  int v2;
  std::string __p;

  if ((v0 & 1) == 0
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Node_Clock_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(_QWORD *)(qword_1EF130D40 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v1, "IsCalculatedFromTerminals");
    v2 = 0;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Clock_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130D18 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1, "IsSetFromClockUID");
    v2 = 1;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Clock_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130D18 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1, "IsAClockSource");
    v2 = 2;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Clock_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130D18 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
  }
}

void sub_1B5C2C488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

_QWORD *applesauce::indestructible<boost::bimaps::bimap<AMCP::Node_Clock_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  _QWORD *result;

  qword_1EF130D18 = (uint64_t)&unk_1EF130D30;
  result = operator new(0x50uLL);
  qword_1EF130D28 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1EF130D38 = 0;
  qword_1EF130D40 = (uint64_t)&unk_1EF130D30;
  qword_1EF130D48 = (uint64_t)&unk_1EF130D30;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Clock_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  int v22;
  int *v23;
  char *v24;
  std::string *v25;
  _QWORD *v26;

  v3 = result;
  v4 = a2 + 2;
  v5 = *(_QWORD **)(result + 8);
  v6 = v5;
  v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7)
    goto LABEL_8;
  do
  {
    v6 = (_QWORD *)(v7 - 56);
    result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (_QWORD *)(v7 - 48));
    if ((result & 0x80u) == 0)
      v8 = 9;
    else
      v8 = 8;
    v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    v11 = v5[8];
    if (v11)
      v12 = (_QWORD *)(v11 - 56);
    else
      v12 = 0;
    v13 = v6 + 7;
    if (v6 == v12)
    {
      v9 = 0;
      goto LABEL_20;
    }
    v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v9 = 0;
    if (v26)
      v10 = v26 - 7;
    else
      v10 = 0;
  }
  else
  {
    v9 = 1;
    v10 = v6;
  }
  result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10)
      return result;
    goto LABEL_42;
  }
  v13 = v6 + 7;
LABEL_20:
  v14 = *a2;
  v15 = v5;
  v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      v15 = (_QWORD *)(v16 - 32);
      v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14)
        v18 = 6;
      else
        v18 = 5;
      v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      v22 = 1;
LABEL_35:
      if (v17 >= v14)
        return result;
      v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  v19 = v5[5];
  if (v19)
    v20 = (_QWORD *)(v19 - 32);
  else
    v20 = 0;
  v21 = v15 + 4;
  if (v15 != v20)
  {
    v26 = v15 + 4;
    result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v22 = 0;
    if (v26)
      v23 = (int *)(v26 - 4);
    else
      v23 = 0;
    v17 = *v23;
    goto LABEL_35;
  }
  v22 = 0;
LABEL_38:
  v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)v24 = v14;
  v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((_QWORD *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(_QWORD *)(v3 + 8) + 32));
  result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(_QWORD *)(v3 + 8) + 56));
LABEL_42:
  ++*(_QWORD *)(v3 + 24);
  return result;
}

void sub_1B5C2C738(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1B5C2C74C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void AMCP::get_enum_string_bimap<AMCP::Node_Thread_Policy>()
{
  unsigned __int8 v0;
  std::string v1;
  int v2;
  std::string __p;

  if ((v0 & 1) == 0
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Node_Thread_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(_QWORD *)(qword_1EF130D88 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v1, "Node_Is_Used_By_One_Thread");
    v2 = 0;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Thread_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130D60 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1, "Node_Is_Shared_Across_Threads");
    v2 = 1;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Thread_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130D60 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
  }
}

void sub_1B5C2C8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

_QWORD *applesauce::indestructible<boost::bimaps::bimap<AMCP::Node_Thread_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  _QWORD *result;

  qword_1EF130D60 = (uint64_t)algn_1EF130D78;
  result = operator new(0x50uLL);
  qword_1EF130D70 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1EF130D80 = 0;
  qword_1EF130D88 = (uint64_t)algn_1EF130D78;
  qword_1EF130D90 = (uint64_t)algn_1EF130D78;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Thread_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  int v22;
  int *v23;
  char *v24;
  std::string *v25;
  _QWORD *v26;

  v3 = result;
  v4 = a2 + 2;
  v5 = *(_QWORD **)(result + 8);
  v6 = v5;
  v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7)
    goto LABEL_8;
  do
  {
    v6 = (_QWORD *)(v7 - 56);
    result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (_QWORD *)(v7 - 48));
    if ((result & 0x80u) == 0)
      v8 = 9;
    else
      v8 = 8;
    v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    v11 = v5[8];
    if (v11)
      v12 = (_QWORD *)(v11 - 56);
    else
      v12 = 0;
    v13 = v6 + 7;
    if (v6 == v12)
    {
      v9 = 0;
      goto LABEL_20;
    }
    v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v9 = 0;
    if (v26)
      v10 = v26 - 7;
    else
      v10 = 0;
  }
  else
  {
    v9 = 1;
    v10 = v6;
  }
  result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10)
      return result;
    goto LABEL_42;
  }
  v13 = v6 + 7;
LABEL_20:
  v14 = *a2;
  v15 = v5;
  v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      v15 = (_QWORD *)(v16 - 32);
      v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14)
        v18 = 6;
      else
        v18 = 5;
      v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      v22 = 1;
LABEL_35:
      if (v17 >= v14)
        return result;
      v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  v19 = v5[5];
  if (v19)
    v20 = (_QWORD *)(v19 - 32);
  else
    v20 = 0;
  v21 = v15 + 4;
  if (v15 != v20)
  {
    v26 = v15 + 4;
    result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v22 = 0;
    if (v26)
      v23 = (int *)(v26 - 4);
    else
      v23 = 0;
    v17 = *v23;
    goto LABEL_35;
  }
  v22 = 0;
LABEL_38:
  v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)v24 = v14;
  v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((_QWORD *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(_QWORD *)(v3 + 8) + 32));
  result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(_QWORD *)(v3 + 8) + 56));
LABEL_42:
  ++*(_QWORD *)(v3 + 24);
  return result;
}

void sub_1B5C2CB54(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1B5C2CB68(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>()
{
  unsigned __int8 v0;
  std::string v1;
  int v2;
  std::string __p;

  if ((v0 & 1) == 0
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Node_Buffer_Size_Change_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(_QWORD *)(qword_1EF130DD0 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v1, "Favor_Input_Buffer_Alignment");
    v2 = 0;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Buffer_Size_Change_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130DA8 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1, "Favor_Output_Buffer_Alignment");
    v2 = 1;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Buffer_Size_Change_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130DA8 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
  }
}

void sub_1B5C2CCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

_QWORD *applesauce::indestructible<boost::bimaps::bimap<AMCP::Node_Buffer_Size_Change_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  _QWORD *result;

  qword_1EF130DA8 = (uint64_t)&unk_1EF130DC0;
  result = operator new(0x50uLL);
  qword_1EF130DB8 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1EF130DC8 = 0;
  qword_1EF130DD0 = (uint64_t)&unk_1EF130DC0;
  qword_1EF130DD8 = (uint64_t)&unk_1EF130DC0;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Buffer_Size_Change_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  int v22;
  int *v23;
  char *v24;
  std::string *v25;
  _QWORD *v26;

  v3 = result;
  v4 = a2 + 2;
  v5 = *(_QWORD **)(result + 8);
  v6 = v5;
  v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7)
    goto LABEL_8;
  do
  {
    v6 = (_QWORD *)(v7 - 56);
    result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (_QWORD *)(v7 - 48));
    if ((result & 0x80u) == 0)
      v8 = 9;
    else
      v8 = 8;
    v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    v11 = v5[8];
    if (v11)
      v12 = (_QWORD *)(v11 - 56);
    else
      v12 = 0;
    v13 = v6 + 7;
    if (v6 == v12)
    {
      v9 = 0;
      goto LABEL_20;
    }
    v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v9 = 0;
    if (v26)
      v10 = v26 - 7;
    else
      v10 = 0;
  }
  else
  {
    v9 = 1;
    v10 = v6;
  }
  result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10)
      return result;
    goto LABEL_42;
  }
  v13 = v6 + 7;
LABEL_20:
  v14 = *a2;
  v15 = v5;
  v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      v15 = (_QWORD *)(v16 - 32);
      v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14)
        v18 = 6;
      else
        v18 = 5;
      v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      v22 = 1;
LABEL_35:
      if (v17 >= v14)
        return result;
      v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  v19 = v5[5];
  if (v19)
    v20 = (_QWORD *)(v19 - 32);
  else
    v20 = 0;
  v21 = v15 + 4;
  if (v15 != v20)
  {
    v26 = v15 + 4;
    result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v22 = 0;
    if (v26)
      v23 = (int *)(v26 - 4);
    else
      v23 = 0;
    v17 = *v23;
    goto LABEL_35;
  }
  v22 = 0;
LABEL_38:
  v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)v24 = v14;
  v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((_QWORD *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(_QWORD *)(v3 + 8) + 32));
  result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(_QWORD *)(v3 + 8) + 56));
LABEL_42:
  ++*(_QWORD *)(v3 + 24);
  return result;
}

void sub_1B5C2CF70(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1B5C2CF84(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void AMCP::get_enum_string_bimap<AMCP::Direction>()
{
  unsigned __int8 v0;
  std::string v1;
  int v2;
  std::string __p;

  if ((v0 & 1) == 0
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(_QWORD *)(qword_1EF130E18 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v1, "Out");
    v2 = 0;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130DF0 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1, "In");
    v2 = 1;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130DF0 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
  }
}

void sub_1B5C2D0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

_QWORD *applesauce::indestructible<boost::bimaps::bimap<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  _QWORD *result;

  qword_1EF130DF0 = (uint64_t)algn_1EF130E08;
  result = operator new(0x50uLL);
  qword_1EF130E00 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1EF130E10 = 0;
  qword_1EF130E18 = (uint64_t)algn_1EF130E08;
  qword_1EF130E20 = (uint64_t)algn_1EF130E08;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unsigned int v14;
  _QWORD *v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  int v22;
  unsigned int *v23;
  char *v24;
  std::string *v25;
  _QWORD *v26;

  v3 = result;
  v4 = a2 + 2;
  v5 = *(_QWORD **)(result + 8);
  v6 = v5;
  v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7)
    goto LABEL_8;
  do
  {
    v6 = (_QWORD *)(v7 - 56);
    result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (_QWORD *)(v7 - 48));
    if ((result & 0x80u) == 0)
      v8 = 9;
    else
      v8 = 8;
    v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    v11 = v5[8];
    if (v11)
      v12 = (_QWORD *)(v11 - 56);
    else
      v12 = 0;
    v13 = v6 + 7;
    if (v6 == v12)
    {
      v9 = 0;
      goto LABEL_20;
    }
    v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v9 = 0;
    if (v26)
      v10 = v26 - 7;
    else
      v10 = 0;
  }
  else
  {
    v9 = 1;
    v10 = v6;
  }
  result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10)
      return result;
    goto LABEL_42;
  }
  v13 = v6 + 7;
LABEL_20:
  v14 = *a2;
  v15 = v5;
  v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      v15 = (_QWORD *)(v16 - 32);
      v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14)
        v18 = 6;
      else
        v18 = 5;
      v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      v22 = 1;
LABEL_35:
      if (v17 >= v14)
        return result;
      v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  v19 = v5[5];
  if (v19)
    v20 = (_QWORD *)(v19 - 32);
  else
    v20 = 0;
  v21 = v15 + 4;
  if (v15 != v20)
  {
    v26 = v15 + 4;
    result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v22 = 0;
    if (v26)
      v23 = (unsigned int *)(v26 - 4);
    else
      v23 = 0;
    v17 = *v23;
    goto LABEL_35;
  }
  v22 = 0;
LABEL_38:
  v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)v24 = v14;
  v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((_QWORD *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(_QWORD *)(v3 + 8) + 32));
  result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(_QWORD *)(v3 + 8) + 56));
LABEL_42:
  ++*(_QWORD *)(v3 + 24);
  return result;
}

void sub_1B5C2D38C(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1B5C2D3A0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void AMCP::get_enum_string_bimap<AMCP::Node_Type>()
{
  unsigned __int8 v0;
  std::string v1;
  int v2;
  std::string __p;

  if ((v0 & 1) == 0
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Node_Type,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(_QWORD *)(qword_1EF130E60 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v1, "IOContextNode");
    v2 = 0;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130E38 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1, "DSPNode");
    v2 = 1;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130E38 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1, "ReflectorNode");
    v2 = 2;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130E38 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1, "DeviceNode");
    v2 = 3;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130E38 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
  }
}

void sub_1B5C2D5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

_QWORD *applesauce::indestructible<boost::bimaps::bimap<AMCP::Node_Type,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  _QWORD *result;

  qword_1EF130E38 = (uint64_t)&unk_1EF130E50;
  result = operator new(0x50uLL);
  qword_1EF130E48 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1EF130E58 = 0;
  qword_1EF130E60 = (uint64_t)&unk_1EF130E50;
  qword_1EF130E68 = (uint64_t)&unk_1EF130E50;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  int v22;
  int *v23;
  char *v24;
  std::string *v25;
  _QWORD *v26;

  v3 = result;
  v4 = a2 + 2;
  v5 = *(_QWORD **)(result + 8);
  v6 = v5;
  v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7)
    goto LABEL_8;
  do
  {
    v6 = (_QWORD *)(v7 - 56);
    result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (_QWORD *)(v7 - 48));
    if ((result & 0x80u) == 0)
      v8 = 9;
    else
      v8 = 8;
    v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    v11 = v5[8];
    if (v11)
      v12 = (_QWORD *)(v11 - 56);
    else
      v12 = 0;
    v13 = v6 + 7;
    if (v6 == v12)
    {
      v9 = 0;
      goto LABEL_20;
    }
    v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v9 = 0;
    if (v26)
      v10 = v26 - 7;
    else
      v10 = 0;
  }
  else
  {
    v9 = 1;
    v10 = v6;
  }
  result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10)
      return result;
    goto LABEL_42;
  }
  v13 = v6 + 7;
LABEL_20:
  v14 = *a2;
  v15 = v5;
  v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      v15 = (_QWORD *)(v16 - 32);
      v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14)
        v18 = 6;
      else
        v18 = 5;
      v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      v22 = 1;
LABEL_35:
      if (v17 >= v14)
        return result;
      v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  v19 = v5[5];
  if (v19)
    v20 = (_QWORD *)(v19 - 32);
  else
    v20 = 0;
  v21 = v15 + 4;
  if (v15 != v20)
  {
    v26 = v15 + 4;
    result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v22 = 0;
    if (v26)
      v23 = (int *)(v26 - 4);
    else
      v23 = 0;
    v17 = *v23;
    goto LABEL_35;
  }
  v22 = 0;
LABEL_38:
  v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)v24 = v14;
  v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((_QWORD *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(_QWORD *)(v3 + 8) + 32));
  result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(_QWORD *)(v3 + 8) + 56));
LABEL_42:
  ++*(_QWORD *)(v3 + 24);
  return result;
}

void sub_1B5C2D8A0(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1B5C2D8B4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void AMCP::get_enum_string_bimap<AMCP::Terminal_Source_Mix_Policy>()
{
  unsigned __int8 v0;
  std::string v1;
  int v2;
  std::string __p;

  if ((v0 & 1) == 0
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Terminal_Source_Mix_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(_QWORD *)(qword_1EF130EA8 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v1, "Wire_SingleSource");
    v2 = 0;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Terminal_Source_Mix_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130E80 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1, "Wire_MultiSource");
    v2 = 1;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Terminal_Source_Mix_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130E80 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
  }
}

void sub_1B5C2DA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

_QWORD *applesauce::indestructible<boost::bimaps::bimap<AMCP::Terminal_Source_Mix_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  _QWORD *result;

  qword_1EF130E80 = (uint64_t)algn_1EF130E98;
  result = operator new(0x50uLL);
  qword_1EF130E90 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1EF130EA0 = 0;
  qword_1EF130EA8 = (uint64_t)algn_1EF130E98;
  qword_1EF130EB0 = (uint64_t)algn_1EF130E98;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Terminal_Source_Mix_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  int v22;
  int *v23;
  char *v24;
  std::string *v25;
  _QWORD *v26;

  v3 = result;
  v4 = a2 + 2;
  v5 = *(_QWORD **)(result + 8);
  v6 = v5;
  v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7)
    goto LABEL_8;
  do
  {
    v6 = (_QWORD *)(v7 - 56);
    result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (_QWORD *)(v7 - 48));
    if ((result & 0x80u) == 0)
      v8 = 9;
    else
      v8 = 8;
    v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    v11 = v5[8];
    if (v11)
      v12 = (_QWORD *)(v11 - 56);
    else
      v12 = 0;
    v13 = v6 + 7;
    if (v6 == v12)
    {
      v9 = 0;
      goto LABEL_20;
    }
    v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v9 = 0;
    if (v26)
      v10 = v26 - 7;
    else
      v10 = 0;
  }
  else
  {
    v9 = 1;
    v10 = v6;
  }
  result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10)
      return result;
    goto LABEL_42;
  }
  v13 = v6 + 7;
LABEL_20:
  v14 = *a2;
  v15 = v5;
  v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      v15 = (_QWORD *)(v16 - 32);
      v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14)
        v18 = 6;
      else
        v18 = 5;
      v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      v22 = 1;
LABEL_35:
      if (v17 >= v14)
        return result;
      v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  v19 = v5[5];
  if (v19)
    v20 = (_QWORD *)(v19 - 32);
  else
    v20 = 0;
  v21 = v15 + 4;
  if (v15 != v20)
  {
    v26 = v15 + 4;
    result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v22 = 0;
    if (v26)
      v23 = (int *)(v26 - 4);
    else
      v23 = 0;
    v17 = *v23;
    goto LABEL_35;
  }
  v22 = 0;
LABEL_38:
  v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)v24 = v14;
  v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((_QWORD *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(_QWORD *)(v3 + 8) + 32));
  result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(_QWORD *)(v3 + 8) + 56));
LABEL_42:
  ++*(_QWORD *)(v3 + 24);
  return result;
}

void sub_1B5C2DCBC(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1B5C2DCD0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void AMCP::get_enum_string_bimap<AMCP::Resampler_Type>()
{
  unsigned __int8 v0;
  std::string v1;
  int v2;
  std::string __p;

  if ((v0 & 1) == 0
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Resampler_Type,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(_QWORD *)(qword_1EF130EF0 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v1, "RamstadSRC");
    v2 = 2;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130EC8 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1, "Resampler2");
    v2 = 0;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130EC8 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1, "STLI");
    v2 = 1;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130EC8 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
  }
}

void sub_1B5C2DEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

_QWORD *applesauce::indestructible<boost::bimaps::bimap<AMCP::Resampler_Type,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  _QWORD *result;

  qword_1EF130EC8 = (uint64_t)&unk_1EF130EE0;
  result = operator new(0x50uLL);
  qword_1EF130ED8 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1EF130EE8 = 0;
  qword_1EF130EF0 = (uint64_t)&unk_1EF130EE0;
  qword_1EF130EF8 = (uint64_t)&unk_1EF130EE0;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  int v22;
  int *v23;
  char *v24;
  std::string *v25;
  _QWORD *v26;

  v3 = result;
  v4 = a2 + 2;
  v5 = *(_QWORD **)(result + 8);
  v6 = v5;
  v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7)
    goto LABEL_8;
  do
  {
    v6 = (_QWORD *)(v7 - 56);
    result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (_QWORD *)(v7 - 48));
    if ((result & 0x80u) == 0)
      v8 = 9;
    else
      v8 = 8;
    v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    v11 = v5[8];
    if (v11)
      v12 = (_QWORD *)(v11 - 56);
    else
      v12 = 0;
    v13 = v6 + 7;
    if (v6 == v12)
    {
      v9 = 0;
      goto LABEL_20;
    }
    v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v9 = 0;
    if (v26)
      v10 = v26 - 7;
    else
      v10 = 0;
  }
  else
  {
    v9 = 1;
    v10 = v6;
  }
  result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10)
      return result;
    goto LABEL_42;
  }
  v13 = v6 + 7;
LABEL_20:
  v14 = *a2;
  v15 = v5;
  v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      v15 = (_QWORD *)(v16 - 32);
      v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14)
        v18 = 6;
      else
        v18 = 5;
      v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      v22 = 1;
LABEL_35:
      if (v17 >= v14)
        return result;
      v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  v19 = v5[5];
  if (v19)
    v20 = (_QWORD *)(v19 - 32);
  else
    v20 = 0;
  v21 = v15 + 4;
  if (v15 != v20)
  {
    v26 = v15 + 4;
    result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v22 = 0;
    if (v26)
      v23 = (int *)(v26 - 4);
    else
      v23 = 0;
    v17 = *v23;
    goto LABEL_35;
  }
  v22 = 0;
LABEL_38:
  v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)v24 = v14;
  v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((_QWORD *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(_QWORD *)(v3 + 8) + 32));
  result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(_QWORD *)(v3 + 8) + 56));
LABEL_42:
  ++*(_QWORD *)(v3 + 24);
  return result;
}

void sub_1B5C2E154(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1B5C2E168(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void AMCP::get_enum_string_bimap<AMCP::Resampler_Quality>()
{
  unsigned __int8 v0;
  std::string v1;
  int v2;
  std::string __p;

  if ((v0 & 1) == 0
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(_QWORD *)(qword_1EF130F38 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v1, "Min");
    v2 = 0;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130F10 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1, "Low");
    v2 = 32;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130F10 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1, "Medium");
    v2 = 64;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130F10 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1, "High");
    v2 = 96;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130F10 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1, "Max");
    v2 = 127;
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v1.__r_.__value_.__l.__data_, v1.__r_.__value_.__l.__size_);
    else
      __p = v1;
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1EF130F10 - 16, &v2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1.__r_.__value_.__l.__data_);
  }
}

void sub_1B5C2E424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

_QWORD *applesauce::indestructible<boost::bimaps::bimap<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  _QWORD *result;

  qword_1EF130F10 = (uint64_t)algn_1EF130F28;
  result = operator new(0x50uLL);
  qword_1EF130F20 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1EF130F30 = 0;
  qword_1EF130F38 = (uint64_t)algn_1EF130F28;
  qword_1EF130F40 = (uint64_t)algn_1EF130F28;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  int v22;
  int *v23;
  char *v24;
  std::string *v25;
  _QWORD *v26;

  v3 = result;
  v4 = a2 + 2;
  v5 = *(_QWORD **)(result + 8);
  v6 = v5;
  v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7)
    goto LABEL_8;
  do
  {
    v6 = (_QWORD *)(v7 - 56);
    result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (_QWORD *)(v7 - 48));
    if ((result & 0x80u) == 0)
      v8 = 9;
    else
      v8 = 8;
    v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    v11 = v5[8];
    if (v11)
      v12 = (_QWORD *)(v11 - 56);
    else
      v12 = 0;
    v13 = v6 + 7;
    if (v6 == v12)
    {
      v9 = 0;
      goto LABEL_20;
    }
    v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v9 = 0;
    if (v26)
      v10 = v26 - 7;
    else
      v10 = 0;
  }
  else
  {
    v9 = 1;
    v10 = v6;
  }
  result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10)
      return result;
    goto LABEL_42;
  }
  v13 = v6 + 7;
LABEL_20:
  v14 = *a2;
  v15 = v5;
  v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      v15 = (_QWORD *)(v16 - 32);
      v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14)
        v18 = 6;
      else
        v18 = 5;
      v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      v22 = 1;
LABEL_35:
      if (v17 >= v14)
        return result;
      v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  v19 = v5[5];
  if (v19)
    v20 = (_QWORD *)(v19 - 32);
  else
    v20 = 0;
  v21 = v15 + 4;
  if (v15 != v20)
  {
    v26 = v15 + 4;
    result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    v22 = 0;
    if (v26)
      v23 = (int *)(v26 - 4);
    else
      v23 = 0;
    v17 = *v23;
    goto LABEL_35;
  }
  v22 = 0;
LABEL_38:
  v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)v24 = v14;
  v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((_QWORD *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(_QWORD *)(v3 + 8) + 32));
  result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(_QWORD *)(v3 + 8) + 56));
LABEL_42:
  ++*(_QWORD *)(v3 + 24);
  return result;
}

void sub_1B5C2E6E4(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1B5C2E6F8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>(uint64_t result, char *a2, uint64_t a3)
{
  uint64_t **v5;
  unsigned __int8 *v6;

  if (*(_DWORD *)(result + 4) != 2)
  {
    v5 = (uint64_t **)result;
    minijson::writer::next_field((minijson::writer *)v5);
    if (a2)
      minijson::writer::write_field_name(v5, a2);
    if (*(char *)(a3 + 23) >= 0)
      v6 = (unsigned __int8 *)a3;
    else
      v6 = *(unsigned __int8 **)a3;
  }
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  std::string *v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  char v123;
  uint64_t v124;

  v2 = operator new(0x50uLL);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = qword_1EF130E10;
  v4 = (_QWORD *)qword_1EF130E00;
  v117 = qword_1EF130E10;
  v118 = qword_1EF130E10;
  if (qword_1EF130E10)
  {
    if ((unint64_t)qword_1EF130E10 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v5 = operator new(16 * qword_1EF130E10);
  }
  else
  {
    v5 = 0;
  }
  v119 = v5;
  v120 = 0;
  v121 = v4;
  v122 = v2;
  v123 = 0;
  v6 = v4[8];
  if (v6)
    v7 = v6 - 56;
  else
    v7 = 0;
  if ((_QWORD *)v7 == v4)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = (uint64_t)v119;
      v119[2 * v8] = v7;
      v10 = operator new(0x50uLL);
      *(_QWORD *)(v9 + 16 * v8 + 8) = v10;
      *v10 = *(_DWORD *)v7;
      v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        v8 = v120;
        v3 = v117;
      }
      else
      {
        v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      v120 = ++v8;
      if (v8 == v3)
      {
        v13 = 126 - 2 * __clz(v3);
        if (v3)
          v14 = v13;
        else
          v14 = 0;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((uint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124)
        v7 = v124 - 56;
      else
        v7 = 0;
    }
    while ((_QWORD *)v7 != v4);
    v4 = (_QWORD *)qword_1EF130E00;
    v2 = *(_QWORD **)(a1 + 8);
  }
  v15 = v4[7];
  v16 = v2 + 7;
  if (v15 > 1)
  {
    *v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    v17 = v4[7];
    v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v20 = v15 & 1;
    if (v19)
      v21 = 0;
    else
      v21 = v18;
    v22 = v121;
    v23 = &v122;
    if (v121 != (_QWORD *)v21)
    {
      v24 = (uint64_t)v119;
      if (v8)
      {
        v25 = v8;
        do
        {
          v26 = v25 >> 1;
          v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          v29 = *v27;
          v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21)
            v24 = (uint64_t)v28;
          else
            v25 = v26;
        }
        while (v25);
      }
      v23 = (_QWORD *)(v24 + 8);
    }
    *v16 = v20 | (*v23 + 56);
    v30 = v4[8];
    v31 = (_QWORD *)(v30 - 56);
    if (!v30)
      v31 = 0;
    v32 = &v122;
    if (v22 != v31)
    {
      v33 = (uint64_t)v119;
      if (v8)
      {
        v34 = v8;
        do
        {
          v35 = v34 >> 1;
          v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          v38 = *v36;
          v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31)
            v33 = (uint64_t)v37;
          else
            v34 = v35;
        }
        while (v34);
      }
      v32 = (_QWORD *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    v39 = v4[9];
    v40 = (_QWORD *)(v39 - 56);
    if (!v39)
      v40 = 0;
    v41 = (uint64_t)v119;
    v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        v43 = (uint64_t)v119;
        v44 = v8;
        do
        {
          v45 = v44 >> 1;
          v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          v48 = *v46;
          v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40)
            v43 = (uint64_t)v47;
          else
            v44 = v45;
        }
        while (v44);
      }
      else
      {
        v43 = (uint64_t)v119;
      }
      v42 = (_QWORD *)(v43 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      v49 = (_QWORD *)v41;
      do
      {
        v51 = *v49;
        v50 = (_QWORD *)v49[1];
        v52 = (_QWORD *)(*v49 + 56);
        v53 = v50 + 7;
        v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          v56 = (uint64_t *)&v122;
          if (v22 != (_QWORD *)(v55 - 56))
          {
            v57 = v41;
            v58 = v8;
            do
            {
              v59 = v58 >> 1;
              v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              v62 = *v60;
              v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56)
                v57 = (uint64_t)v61;
              else
                v58 = v59;
            }
            while (v58);
            v56 = (uint64_t *)(v57 + 8);
          }
          v63 = *v56;
          *v53 = v54 | (*v56 + 56);
          if (*(_QWORD **)(v55 + 8) == v52)
          {
            *(_QWORD *)(v63 + 64) = v53;
          }
          else if (*(_QWORD **)(v55 + 16) == v52)
          {
            *(_QWORD *)(v63 + 72) = v53;
          }
        }
        else
        {
          *v53 = v54;
        }
        if (!*(_QWORD *)(v51 + 64))
          v50[8] = 0;
        if (!*(_QWORD *)(v51 + 72))
          v50[9] = 0;
        v49 += 2;
      }
      while (v49 != (_QWORD *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *(_QWORD *)(a1 + 8) + 56;
  }
  v64 = v4[4];
  v65 = *(_QWORD *)(a1 + 8);
  v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    v67 = v4[4];
    v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v69 = v64 & 1;
    if (v19)
      v70 = 0;
    else
      v70 = v68;
    v71 = v121;
    v72 = &v122;
    if (v121 != (_QWORD *)v70)
    {
      v73 = (uint64_t)v119;
      v74 = v120;
      if (v120)
      {
        do
        {
          v75 = v74 >> 1;
          v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          v78 = *v76;
          v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70)
            v73 = (uint64_t)v77;
          else
            v74 = v75;
        }
        while (v74);
      }
      v72 = (_QWORD *)(v73 + 8);
    }
    *v66 = v69 | (*v72 + 32);
    v79 = v4[5];
    v80 = (_QWORD *)(v79 - 32);
    if (!v79)
      v80 = 0;
    v81 = &v122;
    if (v71 != v80)
    {
      v82 = (uint64_t)v119;
      v83 = v120;
      if (v120)
      {
        do
        {
          v84 = v83 >> 1;
          v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          v87 = *v85;
          v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80)
            v82 = (uint64_t)v86;
          else
            v83 = v84;
        }
        while (v83);
      }
      v81 = (_QWORD *)(v82 + 8);
    }
    *(_QWORD *)(v65 + 40) = *v81 + 32;
    v88 = v4[6];
    if (v88)
      v89 = (_QWORD *)(v88 - 32);
    else
      v89 = 0;
    if (v121 == v89)
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      v98 = &v122;
    }
    else
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      if (v120)
      {
        v92 = (uint64_t)v119;
        v93 = v120;
        do
        {
          v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          v97 = *v95;
          v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89)
            v92 = (uint64_t)v96;
          else
            v93 = v94;
        }
        while (v93);
      }
      else
      {
        v92 = (uint64_t)v119;
      }
      v98 = (_QWORD *)(v92 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      v99 = (_QWORD *)(v90 + 16 * v91);
      v100 = (_QWORD *)v90;
      do
      {
        v102 = *v100;
        v101 = (_QWORD *)v100[1];
        v103 = (_QWORD *)(*v100 + 32);
        v104 = v101 + 4;
        v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          v107 = (uint64_t *)&v122;
          if (v121 != (_QWORD *)(v106 - 32))
          {
            v108 = v120;
            if (v120)
            {
              v109 = v90;
              do
              {
                v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                v113 = *v111;
                v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32)
                  v109 = (uint64_t)v112;
                else
                  v108 = v110;
              }
              while (v108);
            }
            else
            {
              v109 = v90;
            }
            v107 = (uint64_t *)(v109 + 8);
          }
          v114 = *v107;
          *v104 = v105 | (*v107 + 32);
          if (*(_QWORD **)(v106 + 8) == v103)
          {
            *(_QWORD *)(v114 + 40) = v104;
          }
          else if (*(_QWORD **)(v106 + 16) == v103)
          {
            *(_QWORD *)(v114 + 48) = v104;
          }
        }
        else
        {
          *v104 = v105;
        }
        if (!*(_QWORD *)(v102 + 40))
          v101[5] = 0;
        if (!*(_QWORD *)(v102 + 48))
          v101[6] = 0;
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(_QWORD *)(v65 + 32) = 0;
    *(_QWORD *)(v65 + 40) = v66;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *(_QWORD *)(a1 + 8) + 32;
  }
  v123 = 1;
  *(_QWORD *)(a1 + 24) = qword_1EF130E10;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1B5C2EDF4()
{
  __break(1u);
}

void sub_1B5C2EE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&a9);
  JUMPOUT(0x1B5C2EE38);
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
  v3 = a1 + 16;
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v4 = (v2 & 0xFFFFFFFFFFFFFFFELL) - 56;
  else
    v4 = 0;
  boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes(v3, v4);
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v4 = *(_QWORD *)(a2 + 64);
    if (v4)
      v5 = v4 - 56;
    else
      v5 = 0;
    boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes(a1, v5);
    v6 = *(_QWORD *)(a2 + 72);
    if (v6)
      v7 = v6 - 56;
    else
      v7 = 0;
    boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes(a1, v7);
    if (*(char *)(a2 + 31) < 0)
      operator delete(*(void **)(a2 + 8));
    operator delete((void *)a2);
  }
}

uint64_t boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *(_QWORD **)result;
  v2 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v2)
  {
    do
    {
      *(_QWORD *)result = v2;
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
  }
  else
  {
    v3 = (_QWORD *)(*v1 & 0xFFFFFFFFFFFFFFFELL);
    if (v1 == (_QWORD *)v3[2])
    {
      do
      {
        v5 = v3;
        *(_QWORD *)result = v3;
        v3 = (_QWORD *)(*v3 & 0xFFFFFFFFFFFFFFFELL);
      }
      while (v5 == (_QWORD *)v3[2]);
      v4 = (_QWORD *)v5[2];
    }
    else
    {
      v4 = 0;
    }
    if (v4 != v3)
      *(_QWORD *)result = v3;
  }
  return result;
}

uint64_t boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 64) && *(_QWORD *)(a1 + 40))
  {
    v2 = 0;
    v3 = 8;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v3);
      if (*(char *)(v4 + 31) < 0)
      {
        operator delete(*(void **)(v4 + 8));
        v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v3);
      }
      operator delete((void *)v4);
      ++v2;
      v3 += 16;
    }
    while (v2 < *(_QWORD *)(a1 + 40));
  }
  if (*(_QWORD *)(a1 + 24))
    operator delete(*(void **)(a1 + 32));
  return a1;
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(uint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  __int128 *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  __n128 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *n128_u64;
  BOOL v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  int64_t v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  __n128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __n128 *v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  __n128 *v77;
  unint64_t v78;
  __n128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

LABEL_1:
  v9 = (__int128 *)(a2 - 2);
  v10 = (unint64_t *)a1;
  while (2)
  {
    a1 = (uint64_t)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        if (*(_QWORD *)v9 < *v10)
        {
          v82 = *(_OWORD *)v10;
          *(_OWORD *)v10 = *v9;
          a5.n128_u64[0] = v82;
          *v9 = v82;
        }
        return a5.n128_f64[0];
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, a2 - 2);
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (_OWORD *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (__n128 *)v10 + 3, (__n128 *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v11 <= 383)
        {
          n128_u64 = v10 + 2;
          v39 = v10 == a2 || n128_u64 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v10;
              do
              {
                v42 = n128_u64;
                v43 = v41[2];
                if (v43 < *v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    a5 = *(__n128 *)((char *)v10 + v45);
                    *(__n128 *)((char *)v10 + v45 + 16) = a5;
                    if (!v45)
                      break;
                    v46 = *(unint64_t *)((char *)v10 + v45 - 16);
                    v45 -= 16;
                    if (v43 >= v46)
                    {
                      v47 = (unint64_t *)((char *)v10 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v10;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                n128_u64 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v74 = (__n128 *)n128_u64;
              v75 = *(_QWORD *)(a1 + 16);
              if (v75 < *(_QWORD *)a1)
              {
                v76 = *(_QWORD *)(a1 + 24);
                v77 = v74;
                do
                {
                  a5 = v77[-1];
                  *v77 = a5;
                  v78 = v77[-2].n128_u64[0];
                  --v77;
                }
                while (v75 < v78);
                v77->n128_u64[0] = v75;
                v77->n128_u64[1] = v76;
              }
              n128_u64 = v74[1].n128_u64;
              a1 = (uint64_t)v74;
            }
            while (&v74[1] != (__n128 *)a2);
          }
          return a5.n128_f64[0];
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v48 = (v12 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v10[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v12)
                {
                  v53 = *v52;
                }
                else
                {
                  v53 = v52[2];
                  v54 = *v52 >= v53;
                  if (*v52 < v53)
                    v52 += 2;
                  else
                    v53 = *v52;
                  if (!v54)
                    v51 = 2 * v50 + 2;
                }
                v55 = &v10[2 * v50];
                v56 = *v55;
                if (v53 >= *v55)
                {
                  v57 = v55[1];
                  do
                  {
                    v58 = v55;
                    v55 = v52;
                    *(_OWORD *)v58 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v59 = (2 * v51) | 1;
                    v52 = &v10[2 * v59];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v12)
                    {
                      v60 = *v52;
                      v51 = v59;
                    }
                    else
                    {
                      v60 = *v52;
                      if (*v52 >= v52[2])
                      {
                        v51 = v59;
                      }
                      else
                      {
                        v60 = v52[2];
                        v52 += 2;
                      }
                    }
                  }
                  while (v60 >= v56);
                  *v55 = v56;
                  v55[1] = v57;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v61 = (unint64_t)v11 >> 4;
            do
            {
              v62 = 0;
              v83 = *(_OWORD *)v10;
              v63 = (__n128 *)v10;
              do
              {
                v64 = &v63[v62 + 1];
                v65 = (2 * v62) | 1;
                v66 = 2 * v62 + 2;
                if (v66 < v61 && v64->n128_u64[0] < v64[1].n128_u64[0])
                {
                  ++v64;
                  v65 = v66;
                }
                *v63 = *v64;
                v63 = v64;
                v62 = v65;
              }
              while (v65 <= (uint64_t)((unint64_t)(v61 - 2) >> 1));
              a2 -= 2;
              if (v64 == (__n128 *)a2)
              {
                a5.n128_u64[0] = v83;
                *v64 = (__n128)v83;
              }
              else
              {
                *v64 = *(__n128 *)a2;
                a5.n128_u64[0] = v83;
                *(_OWORD *)a2 = v83;
                v67 = (char *)v64 - (char *)v10 + 16;
                if (v67 >= 17)
                {
                  v68 = (((unint64_t)v67 >> 4) - 2) >> 1;
                  v69 = (__n128 *)&v10[2 * v68];
                  v70 = v64->n128_u64[0];
                  if (v69->n128_u64[0] < v64->n128_u64[0])
                  {
                    v71 = v64->n128_u64[1];
                    do
                    {
                      v72 = v64;
                      v64 = v69;
                      a5 = *v69;
                      *v72 = *v69;
                      if (!v68)
                        break;
                      v68 = (v68 - 1) >> 1;
                      v69 = (__n128 *)&v10[2 * v68];
                    }
                    while (v69->n128_u64[0] < v70);
                    v64->n128_u64[0] = v70;
                    v64->n128_u64[1] = v71;
                  }
                }
              }
            }
            while (v61-- > 2);
          }
          return a5.n128_f64[0];
        }
        v13 = v12 >> 1;
        v14 = &v10[2 * (v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16 * (v12 >> 1)), (unint64_t *)a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16 * (v12 >> 1)), a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16), v14 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v13), a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v14 - 1, v14, (unint64_t *)(a1 + 16 + 16 * v13));
          v80 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(__n128 *)v14 = v80;
        }
        --a3;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 16) >= *(_QWORD *)a1)
        {
          a5 = *(__n128 *)a1;
          v29 = *(_QWORD *)a1;
          if (*(_QWORD *)a1 >= *(_QWORD *)v9)
          {
            v31 = a1 + 16;
            do
            {
              v10 = (unint64_t *)v31;
              if (v31 >= (unint64_t)a2)
                break;
              v31 += 16;
            }
            while (v29 >= *v10);
          }
          else
          {
            v10 = (unint64_t *)a1;
            do
            {
              v30 = v10[2];
              v10 += 2;
            }
            while (v29 >= v30);
          }
          v32 = a2;
          if (v10 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v33);
          }
          while (v10 < v32)
          {
            v81 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v32;
            *(_OWORD *)v32 = v81;
            do
            {
              v34 = v10[2];
              v10 += 2;
            }
            while (v29 >= v34);
            do
            {
              v35 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v35);
          }
          v36 = v10 - 2;
          if (v10 - 2 != (unint64_t *)a1)
            *(_OWORD *)a1 = *(_OWORD *)v36;
          a4 = 0;
          *(__n128 *)v36 = a5;
          continue;
        }
        v15 = *(__n128 *)a1;
        v16 = *(_QWORD *)a1;
        v17 = (unint64_t *)a1;
        do
        {
          v18 = v17;
          v19 = v17[2];
          v17 += 2;
        }
        while (v19 < v16);
        v20 = a2;
        if (v18 == (unint64_t *)a1)
        {
          v20 = a2;
          do
          {
            if (v17 >= v20)
              break;
            v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 >= v16);
        }
        else
        {
          do
          {
            v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 >= v16);
        }
        if (v17 < v20)
        {
          v23 = v17;
          v24 = v20;
          do
          {
            v25 = *(_OWORD *)v23;
            *(_OWORD *)v23 = *(_OWORD *)v24;
            *(_OWORD *)v24 = v25;
            do
            {
              v18 = v23;
              v26 = v23[2];
              v23 += 2;
            }
            while (v26 < v16);
            do
            {
              v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (v27 >= v16);
          }
          while (v23 < v24);
        }
        if (v18 != (unint64_t *)a1)
          *(_OWORD *)a1 = *(_OWORD *)v18;
        *(__n128 *)v18 = v15;
        if (v17 < v20)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v18, a3, a4 & 1);
          a4 = 0;
          v10 = v18 + 2;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v18);
        v10 = v18 + 2;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v18 + 2), a2))
        {
          if (v28)
            continue;
          goto LABEL_29;
        }
        a2 = v18;
        if (!v28)
          goto LABEL_1;
        return a5.n128_f64[0];
    }
  }
}

  v4 = a1;
  v301 = (__int128 *)(a2 - 104);
  v298 = (uint64_t *)(a2 - 16);
  while (2)
  {
    v5 = a2 - v4;
    v308 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a2 - v4) >> 3);
    a1 = v4;
    switch(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a2 - v4) >> 3))
    {
      case 0:
      case 1:
        return;
      case 2:
        *(_QWORD *)&v321 = a2 - 104;
        *((_QWORD *)&v321 + 1) = a2 - 64;
        *(_QWORD *)&v322 = a2 - 16;
        *((_QWORD *)&v322 + 1) = a2 - 12;
        v323 = (_BYTE *)(a2 - 8);
        v136 = (uint64_t *)(v4 + 88);
        *(_QWORD *)&v315 = v4;
        *((_QWORD *)&v315 + 1) = v4 + 40;
        *(_QWORD *)&v316 = v4 + 88;
        *((_QWORD *)&v316 + 1) = v4 + 92;
        v317 = (char *)(v4 + 96);
        if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v321, (uint64_t *)&v315) & 0x80) != 0)
        {
          v137 = 0;
          v138 = *(_OWORD *)v4;
          v139 = *(_OWORD *)(v4 + 16);
          v323 = *(_BYTE **)(v4 + 32);
          v321 = v138;
          v322 = v139;
          do
          {
            v140 = (char *)&v321 + v137;
            v141 = (_QWORD *)(v4 + v137);
            *((_QWORD *)v140 + 6) = 0;
            *((_QWORD *)v140 + 7) = 0;
            *(_OWORD *)(v140 + 40) = *(_OWORD *)(v4 + v137 + 40);
            *((_QWORD *)v140 + 7) = *(_QWORD *)(v4 + v137 + 56);
            v141[5] = 0;
            v141[6] = 0;
            v141[7] = 0;
            v137 += 24;
          }
          while (v137 != 48);
          v142 = 0;
          v143 = *v136;
          v326 = *(_BYTE *)(v4 + 96);
          v325 = v143;
          v144 = *v301;
          v145 = *(_OWORD *)(a2 - 88);
          *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 - 72);
          *(_OWORD *)v4 = v144;
          *(_OWORD *)(v4 + 16) = v145;
          do
          {
            v146 = v4 + v142;
            v147 = a2 + v142;
            std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v4 + v142 + 40));
            *(_OWORD *)(v146 + 40) = *(_OWORD *)(a2 + v142 - 64);
            *(_QWORD *)(v146 + 56) = *(_QWORD *)(a2 + v142 - 48);
            *(_QWORD *)(v147 - 64) = 0;
            *(_QWORD *)(v147 - 56) = 0;
            *(_QWORD *)(v147 - 48) = 0;
            v142 += 24;
          }
          while (v142 != 48);
          v148 = 0;
          v149 = *v298;
          *(_BYTE *)(v4 + 96) = *(_BYTE *)(a2 - 8);
          *v136 = v149;
          v150 = v321;
          v151 = v322;
          *(_QWORD *)(a2 - 72) = v323;
          *v301 = v150;
          *(_OWORD *)(a2 - 88) = v151;
          do
          {
            v152 = a2 + v148;
            v153 = (_QWORD *)((char *)&v321 + v148);
            std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + v148 - 64));
            *(_OWORD *)(v152 - 64) = *(_OWORD *)&v324[v148];
            *(_QWORD *)(v152 - 48) = *(_QWORD *)&v324[v148 + 16];
            v153[5] = 0;
            v153[6] = 0;
            v153[7] = 0;
            v148 += 24;
          }
          while (v148 != 48);
          v154 = v325;
          *(_BYTE *)(a2 - 8) = v326;
          *v298 = v154;
          for (i = 64; i != 16; i -= 24)
          {
            *(_QWORD *)&v315 = (char *)&v321 + i;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v315);
          }
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>((__int128 *)v4, (__int128 *)(v4 + 104), v301);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(v4, v4 + 104, v4 + 208, (uint64_t)v301);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(v4, v4 + 104, v4 + 208, v4 + 312, (uint64_t)v301);
        return;
      default:
        v6 = v4;
        if (v5 > 2495)
        {
          if (!a3)
          {
            if (v4 != a2)
            {
              v180 = (v308 - 2) >> 1;
              v181 = v4;
              v182 = v4 + 104 * v180;
              v312 = v180;
              v297 = a2 - v4;
              do
              {
                v183 = v180;
                if (v5 >= 208 && v312 >= v180)
                {
                  v184 = (2 * v180) | 1;
                  v185 = v181 + 104 * v184;
                  if (2 * v180 + 2 < (uint64_t)v308)
                  {
                    v186 = v181 + 104 * v184;
                    *(_QWORD *)&v321 = v186;
                    *((_QWORD *)&v321 + 1) = v186 + 40;
                    *(_QWORD *)&v322 = v186 + 88;
                    *((_QWORD *)&v322 + 1) = v186 + 92;
                    v323 = (_BYTE *)(v186 + 96);
                    *(_QWORD *)&v315 = v185 + 104;
                    *((_QWORD *)&v315 + 1) = v185 + 144;
                    *(_QWORD *)&v316 = v185 + 192;
                    *((_QWORD *)&v316 + 1) = v185 + 196;
                    v317 = (char *)(v185 + 200);
                    if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v321, (uint64_t *)&v315) & 0x80u) != 0)
                    {
                      v185 += 104;
                      v184 = 2 * v183 + 2;
                    }
                  }
                  v187 = v181 + 104 * v183;
                  *(_QWORD *)&v321 = v185;
                  *((_QWORD *)&v321 + 1) = v185 + 40;
                  *(_QWORD *)&v322 = v185 + 88;
                  *((_QWORD *)&v322 + 1) = v185 + 92;
                  v323 = (_BYTE *)(v185 + 96);
                  *(_QWORD *)&v315 = v187;
                  *((_QWORD *)&v315 + 1) = v187 + 40;
                  *(_QWORD *)&v316 = v187 + 88;
                  *((_QWORD *)&v316 + 1) = v187 + 92;
                  v317 = (char *)(v187 + 96);
                  if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v321, (uint64_t *)&v315) & 0x80) == 0)
                  {
                    v300 = v183;
                    v188 = 0;
                    v189 = *(_OWORD *)v187;
                    v190 = *(_OWORD *)(v187 + 16);
                    v323 = *(_BYTE **)(v187 + 32);
                    v321 = v189;
                    v322 = v190;
                    do
                    {
                      v191 = (char *)&v321 + v188;
                      v192 = (_QWORD *)(v182 + v188);
                      *((_QWORD *)v191 + 6) = 0;
                      *((_QWORD *)v191 + 7) = 0;
                      *(_OWORD *)(v191 + 40) = *(_OWORD *)(v182 + v188 + 40);
                      *((_QWORD *)v191 + 7) = *(_QWORD *)(v182 + v188 + 56);
                      v192[5] = 0;
                      v192[6] = 0;
                      v192[7] = 0;
                      v188 += 24;
                    }
                    while (v188 != 48);
                    v193 = *(_QWORD *)(v187 + 88);
                    v326 = *(_BYTE *)(v187 + 96);
                    v325 = v193;
                    do
                    {
                      v194 = 0;
                      v195 = v185;
                      v196 = *(_OWORD *)v185;
                      v197 = *(_OWORD *)(v185 + 16);
                      *(_QWORD *)(v187 + 32) = *(_QWORD *)(v185 + 32);
                      *(_OWORD *)v187 = v196;
                      *(_OWORD *)(v187 + 16) = v197;
                      do
                      {
                        v198 = v187 + v194;
                        v199 = (_QWORD *)(v185 + v194);
                        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v187 + v194 + 40));
                        *(_OWORD *)(v198 + 40) = *(_OWORD *)(v185 + v194 + 40);
                        *(_QWORD *)(v198 + 56) = *(_QWORD *)(v185 + v194 + 56);
                        v199[5] = 0;
                        v199[6] = 0;
                        v199[7] = 0;
                        v194 += 24;
                      }
                      while (v194 != 48);
                      v200 = *(_QWORD *)(v185 + 88);
                      *(_BYTE *)(v187 + 96) = *(_BYTE *)(v185 + 96);
                      *(_QWORD *)(v187 + 88) = v200;
                      if (v312 < v184)
                        break;
                      v201 = (2 * v184) | 1;
                      v185 = a1 + 104 * v201;
                      if (2 * v184 + 2 < (uint64_t)v308)
                      {
                        v202 = a1 + 104 * v201;
                        *(_QWORD *)&v315 = v202;
                        *((_QWORD *)&v315 + 1) = v202 + 40;
                        *(_QWORD *)&v316 = v202 + 88;
                        *((_QWORD *)&v316 + 1) = v202 + 92;
                        v317 = (char *)(v202 + 96);
                        v327 = (void **)(v185 + 104);
                        v328 = (char *)(v185 + 144);
                        v329 = (uint64_t *)(v185 + 192);
                        v330 = (char *)(v185 + 196);
                        v331 = (char *)(v185 + 200);
                        if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v315, (uint64_t *)&v327) & 0x80u) != 0)
                        {
                          v185 += 104;
                          v201 = 2 * v184 + 2;
                        }
                      }
                      *(_QWORD *)&v315 = v185;
                      *((_QWORD *)&v315 + 1) = v185 + 40;
                      *(_QWORD *)&v316 = v185 + 88;
                      *((_QWORD *)&v316 + 1) = v185 + 92;
                      v317 = (char *)(v185 + 96);
                      v327 = (void **)&v321;
                      v328 = v324;
                      v329 = &v325;
                      v330 = (char *)&v325 + 4;
                      v331 = &v326;
                      v187 = v195;
                      v184 = v201;
                    }
                    while ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v315, (uint64_t *)&v327) & 0x80) == 0);
                    v203 = 0;
                    v204 = v321;
                    v205 = v322;
                    *(_QWORD *)(v195 + 32) = v323;
                    *(_OWORD *)v195 = v204;
                    *(_OWORD *)(v195 + 16) = v205;
                    do
                    {
                      v206 = v195 + v203;
                      v207 = (_QWORD *)((char *)&v321 + v203);
                      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v195 + v203 + 40));
                      *(_OWORD *)(v206 + 40) = *(_OWORD *)&v324[v203];
                      *(_QWORD *)(v206 + 56) = *(_QWORD *)&v324[v203 + 16];
                      v207[5] = 0;
                      v207[6] = 0;
                      v207[7] = 0;
                      v203 += 24;
                    }
                    while (v203 != 48);
                    v208 = v325;
                    *(_BYTE *)(v195 + 96) = v326;
                    *(_QWORD *)(v195 + 88) = v208;
                    for (j = 64; j != 16; j -= 24)
                    {
                      *(_QWORD *)&v315 = (char *)&v321 + j;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v315);
                    }
                    v181 = a1;
                    v5 = v297;
                    v183 = v300;
                  }
                }
                v180 = v183 - 1;
                v182 -= 104;
              }
              while (v183);
              v210 = v5 / 0x68uLL;
              v302 = v181 + 88;
              do
              {
                v211 = a2;
                if (v210 >= 2)
                {
                  v212 = 0;
                  v213 = a1;
                  v214 = *(_OWORD *)a1;
                  v215 = *(_OWORD *)(a1 + 16);
                  v317 = *(char **)(a1 + 32);
                  v315 = v214;
                  v316 = v215;
                  do
                  {
                    v216 = (char *)&v315 + v212;
                    v217 = (_QWORD *)(a1 + v212);
                    *((_QWORD *)v216 + 6) = 0;
                    *((_QWORD *)v216 + 7) = 0;
                    *(_OWORD *)(v216 + 40) = *(_OWORD *)(a1 + v212 + 40);
                    *((_QWORD *)v216 + 7) = *(_QWORD *)(a1 + v212 + 56);
                    v217[5] = 0;
                    v217[6] = 0;
                    v217[7] = 0;
                    v212 += 24;
                  }
                  while (v212 != 48);
                  v218 = 0;
                  v219 = *(_QWORD *)v302;
                  v320[0] = *(_BYTE *)(v302 + 8);
                  v319 = v219;
                  do
                  {
                    v220 = v218 + 1;
                    v221 = v213 + 104 * (v218 + 1);
                    v222 = 2 * v218;
                    v218 = (2 * v218) | 1;
                    v223 = v222 + 2;
                    if (v222 + 2 < v210)
                    {
                      v224 = v213 + 104 * v220;
                      *(_QWORD *)&v321 = v221;
                      *((_QWORD *)&v321 + 1) = v224 + 40;
                      *(_QWORD *)&v322 = v224 + 88;
                      *((_QWORD *)&v322 + 1) = v224 + 92;
                      v323 = (_BYTE *)(v224 + 96);
                      v327 = (void **)(v221 + 104);
                      v328 = (char *)(v221 + 144);
                      v329 = (uint64_t *)(v221 + 192);
                      v330 = (char *)(v221 + 196);
                      v331 = (char *)(v221 + 200);
                      if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v321, (uint64_t *)&v327) & 0x80u) != 0)
                      {
                        v221 += 104;
                        v218 = v223;
                      }
                    }
                    v225 = 0;
                    v226 = *(_OWORD *)v221;
                    v227 = *(_OWORD *)(v221 + 16);
                    *(_QWORD *)(v213 + 32) = *(_QWORD *)(v221 + 32);
                    *(_OWORD *)v213 = v226;
                    *(_OWORD *)(v213 + 16) = v227;
                    do
                    {
                      v228 = v213 + v225;
                      v229 = (_QWORD *)(v221 + v225);
                      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v213 + v225 + 40));
                      *(_OWORD *)(v228 + 40) = *(_OWORD *)(v221 + v225 + 40);
                      *(_QWORD *)(v228 + 56) = *(_QWORD *)(v221 + v225 + 56);
                      v229[5] = 0;
                      v229[6] = 0;
                      v229[7] = 0;
                      v225 += 24;
                    }
                    while (v225 != 48);
                    v231 = (uint64_t *)(v221 + 88);
                    v230 = *(_QWORD *)(v221 + 88);
                    *(_BYTE *)(v213 + 96) = *(_BYTE *)(v221 + 96);
                    *(_QWORD *)(v213 + 88) = v230;
                    v213 = v221;
                  }
                  while (v218 <= (uint64_t)((unint64_t)(v210 - 2) >> 1));
                  v211 = a2;
                  v232 = (__int128 *)(a2 - 104);
                  if (v221 == a2 - 104)
                  {
                    v268 = 0;
                    v269 = v315;
                    v270 = v316;
                    *(_QWORD *)(v221 + 32) = v317;
                    *(_OWORD *)v221 = v269;
                    *(_OWORD *)(v221 + 16) = v270;
                    do
                    {
                      v271 = v221 + v268;
                      v272 = (_QWORD *)((char *)&v315 + v268);
                      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v221 + v268 + 40));
                      *(_OWORD *)(v271 + 40) = *(_OWORD *)&v318[v268];
                      *(_QWORD *)(v271 + 56) = *(_QWORD *)&v318[v268 + 16];
                      v272[5] = 0;
                      v272[6] = 0;
                      v272[7] = 0;
                      v268 += 24;
                    }
                    while (v268 != 48);
                    v273 = v319;
                    *(_BYTE *)(v221 + 96) = v320[0];
                    *v231 = v273;
                  }
                  else
                  {
                    v233 = 0;
                    v234 = *v232;
                    v235 = *(_OWORD *)(a2 - 88);
                    *(_QWORD *)(v221 + 32) = *(_QWORD *)(a2 - 72);
                    *(_OWORD *)v221 = v234;
                    *(_OWORD *)(v221 + 16) = v235;
                    do
                    {
                      v236 = v221 + v233;
                      v237 = a2 + v233;
                      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v221 + v233 + 40));
                      *(_OWORD *)(v236 + 40) = *(_OWORD *)(a2 + v233 - 64);
                      *(_QWORD *)(v236 + 56) = *(_QWORD *)(a2 + v233 - 48);
                      *(_QWORD *)(v237 - 64) = 0;
                      *(_QWORD *)(v237 - 56) = 0;
                      *(_QWORD *)(v237 - 48) = 0;
                      v233 += 24;
                    }
                    while (v233 != 48);
                    v238 = 0;
                    v239 = *(_QWORD *)(a2 - 16);
                    *(_BYTE *)(v221 + 96) = *(_BYTE *)(a2 - 8);
                    *v231 = v239;
                    v240 = v315;
                    v241 = v316;
                    *(_QWORD *)(a2 - 72) = v317;
                    *v232 = v240;
                    *(_OWORD *)(a2 - 88) = v241;
                    do
                    {
                      v242 = a2 + v238;
                      v243 = (_QWORD *)((char *)&v315 + v238);
                      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + v238 - 64));
                      *(_OWORD *)(v242 - 64) = *(_OWORD *)&v318[v238];
                      *(_QWORD *)(v242 - 48) = *(_QWORD *)&v318[v238 + 16];
                      v243[5] = 0;
                      v243[6] = 0;
                      v243[7] = 0;
                      v238 += 24;
                    }
                    while (v238 != 48);
                    v244 = v319;
                    *(_BYTE *)(a2 - 8) = v320[0];
                    *(_QWORD *)(a2 - 16) = v244;
                    v245 = v221 - a1 + 104;
                    if (v245 >= 105)
                    {
                      v246 = (unint64_t)(0x4EC4EC4EC4EC4EC5 * (v245 >> 3) - 2) >> 1;
                      v247 = a1 + 104 * v246;
                      *(_QWORD *)&v321 = v247;
                      *((_QWORD *)&v321 + 1) = v247 + 40;
                      *(_QWORD *)&v322 = v247 + 88;
                      *((_QWORD *)&v322 + 1) = v247 + 92;
                      v323 = (_BYTE *)(v247 + 96);
                      v327 = (void **)v221;
                      v328 = (char *)(v221 + 40);
                      v329 = (uint64_t *)(v221 + 88);
                      v330 = (char *)(v221 + 92);
                      v331 = (char *)(v221 + 96);
                      if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v321, (uint64_t *)&v327) & 0x80) != 0)
                      {
                        v248 = 0;
                        v249 = *(_OWORD *)v221;
                        v250 = *(_OWORD *)(v221 + 16);
                        v323 = *(_BYTE **)(v221 + 32);
                        v321 = v249;
                        v322 = v250;
                        do
                        {
                          v251 = (char *)&v321 + v248;
                          v252 = (_QWORD *)(v221 + v248);
                          *((_QWORD *)v251 + 6) = 0;
                          *((_QWORD *)v251 + 7) = 0;
                          *(_OWORD *)(v251 + 40) = *(_OWORD *)(v221 + v248 + 40);
                          *((_QWORD *)v251 + 7) = *(_QWORD *)(v221 + v248 + 56);
                          v252[5] = 0;
                          v252[6] = 0;
                          v252[7] = 0;
                          v248 += 24;
                        }
                        while (v248 != 48);
                        v253 = *v231;
                        v326 = *(_BYTE *)(v221 + 96);
                        v325 = v253;
                        do
                        {
                          v254 = 0;
                          v255 = v247;
                          v256 = *(_OWORD *)v247;
                          v257 = *(_OWORD *)(v247 + 16);
                          *(_QWORD *)(v221 + 32) = *(_QWORD *)(v247 + 32);
                          *(_OWORD *)v221 = v256;
                          *(_OWORD *)(v221 + 16) = v257;
                          do
                          {
                            v258 = v221 + v254;
                            v259 = (_QWORD *)(v255 + v254);
                            std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v221 + v254 + 40));
                            *(_OWORD *)(v258 + 40) = *(_OWORD *)(v255 + v254 + 40);
                            *(_QWORD *)(v258 + 56) = *(_QWORD *)(v255 + v254 + 56);
                            v259[5] = 0;
                            v259[6] = 0;
                            v259[7] = 0;
                            v254 += 24;
                          }
                          while (v254 != 48);
                          v260 = *(_QWORD *)(v255 + 88);
                          *(_BYTE *)(v221 + 96) = *(_BYTE *)(v255 + 96);
                          *(_QWORD *)(v221 + 88) = v260;
                          if (!v246)
                            break;
                          v246 = (v246 - 1) >> 1;
                          v247 = a1 + 104 * v246;
                          v327 = (void **)v247;
                          v328 = (char *)(v247 + 40);
                          v329 = (uint64_t *)(v247 + 88);
                          v330 = (char *)(v247 + 92);
                          v331 = (char *)(v247 + 96);
                          v314[0] = (uint64_t)&v321;
                          v314[1] = (uint64_t)v324;
                          v314[2] = (uint64_t)&v325;
                          v314[3] = (uint64_t)&v325 + 4;
                          v314[4] = (uint64_t)&v326;
                          v221 = v255;
                        }
                        while ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v327, v314) & 0x80) != 0);
                        v261 = 0;
                        v262 = v321;
                        v263 = v322;
                        *(_QWORD *)(v255 + 32) = v323;
                        *(_OWORD *)v255 = v262;
                        *(_OWORD *)(v255 + 16) = v263;
                        do
                        {
                          v264 = v255 + v261;
                          v265 = (_QWORD *)((char *)&v321 + v261);
                          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v255 + v261 + 40));
                          *(_OWORD *)(v264 + 40) = *(_OWORD *)&v324[v261];
                          *(_QWORD *)(v264 + 56) = *(_QWORD *)&v324[v261 + 16];
                          v265[5] = 0;
                          v265[6] = 0;
                          v265[7] = 0;
                          v261 += 24;
                        }
                        while (v261 != 48);
                        v266 = v325;
                        *(_BYTE *)(v255 + 96) = v326;
                        *(_QWORD *)(v255 + 88) = v266;
                        for (k = 64; k != 16; k -= 24)
                        {
                          v327 = (void **)((char *)&v321 + k);
                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v327);
                        }
                        v211 = a2;
                      }
                    }
                  }
                  for (m = 64; m != 16; m -= 24)
                  {
                    *(_QWORD *)&v321 = (char *)&v315 + m;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v321);
                  }
                }
                a2 = v211 - 104;
              }
              while ((unint64_t)v210-- > 2);
            }
            return;
          }
          v7 = v4 + 104 * (v308 >> 1);
          if ((unint64_t)v5 < 0x3401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>((__int128 *)(v6 + 104 * (v308 >> 1)), (__int128 *)v6, v301);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>((__int128 *)v6, (__int128 *)(v6 + 104 * (v308 >> 1)), v301);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>((__int128 *)(a1 + 104), (__int128 *)(104 * (v308 >> 1) + a1 - 104), (__int128 *)(a2 - 208));
            v8 = (__int128 *)(a1 + 104 + 104 * (v308 >> 1));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>((__int128 *)(a1 + 208), v8, (__int128 *)(a2 - 312));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>((__int128 *)(104 * (v308 >> 1) + a1 - 104), (__int128 *)v7, v8);
            v9 = 0;
            v10 = *(_OWORD *)a1;
            v11 = *(_OWORD *)(a1 + 16);
            v323 = *(_BYTE **)(a1 + 32);
            v321 = v10;
            v322 = v11;
            do
            {
              v12 = (char *)&v321 + v9;
              v13 = (_QWORD *)(a1 + v9);
              *((_QWORD *)v12 + 6) = 0;
              *((_QWORD *)v12 + 7) = 0;
              *(_OWORD *)(v12 + 40) = *(_OWORD *)(a1 + v9 + 40);
              *((_QWORD *)v12 + 7) = *(_QWORD *)(a1 + v9 + 56);
              v13[5] = 0;
              v13[6] = 0;
              v13[7] = 0;
              v9 += 24;
            }
            while (v9 != 48);
            v14 = 0;
            v15 = *(_QWORD *)(a1 + 88);
            v326 = *(_BYTE *)(a1 + 96);
            v325 = v15;
            v16 = *(_OWORD *)v7;
            v17 = *(_OWORD *)(v7 + 16);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 + 32);
            *(_OWORD *)a1 = v16;
            *(_OWORD *)(a1 + 16) = v17;
            v18 = a1 + 104 * (v308 >> 1);
            do
            {
              v19 = a1 + v14;
              v20 = (_QWORD *)(v18 + v14);
              std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + v14 + 40));
              *(_OWORD *)(v19 + 40) = *(_OWORD *)(v18 + v14 + 40);
              *(_QWORD *)(v19 + 56) = *(_QWORD *)(v18 + v14 + 56);
              v20[5] = 0;
              v20[6] = 0;
              v20[7] = 0;
              v14 += 24;
            }
            while (v14 != 48);
            v21 = 0;
            v22 = a1 + 104 * (v308 >> 1);
            v23 = *(_QWORD *)(v22 + 88);
            *(_BYTE *)(a1 + 96) = *(_BYTE *)(v22 + 96);
            *(_QWORD *)(a1 + 88) = v23;
            v24 = v323;
            v25 = v322;
            *(_OWORD *)v7 = v321;
            *(_OWORD *)(v7 + 16) = v25;
            *(_QWORD *)(v7 + 32) = v24;
            do
            {
              v26 = v22 + v21;
              v27 = (_QWORD *)((char *)&v321 + v21);
              std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v22 + v21 + 40));
              *(_OWORD *)(v26 + 40) = *(_OWORD *)&v324[v21];
              *(_QWORD *)(v26 + 56) = *(_QWORD *)&v324[v21 + 16];
              v27[5] = 0;
              v27[6] = 0;
              v27[7] = 0;
              v21 += 24;
            }
            while (v21 != 48);
            v28 = v325;
            *(_BYTE *)(v22 + 96) = v326;
            *(_QWORD *)(v22 + 88) = v28;
            for (n = 64; n != 16; n -= 24)
            {
              *(_QWORD *)&v315 = (char *)&v321 + n;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v315);
            }
            v6 = a1;
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            *(_QWORD *)&v321 = v6 - 104;
            *((_QWORD *)&v321 + 1) = v6 - 64;
            *(_QWORD *)&v322 = v6 - 16;
            *((_QWORD *)&v322 + 1) = v6 - 12;
            v323 = (_BYTE *)(v6 - 8);
            *(_QWORD *)&v315 = v6;
            *((_QWORD *)&v315 + 1) = v6 + 40;
            *(_QWORD *)&v316 = v6 + 88;
            *((_QWORD *)&v316 + 1) = v6 + 92;
            v317 = (char *)(v6 + 96);
            if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v321, (uint64_t *)&v315) & 0x80) == 0)
            {
              v84 = 0;
              v85 = *(_OWORD *)v6;
              v86 = *(_OWORD *)(v6 + 16);
              v317 = *(char **)(v6 + 32);
              v315 = v85;
              v316 = v86;
              do
              {
                v87 = (char *)&v315 + v84;
                v88 = (_QWORD *)(v6 + v84);
                *((_QWORD *)v87 + 6) = 0;
                *((_QWORD *)v87 + 7) = 0;
                *(_OWORD *)(v87 + 40) = *(_OWORD *)(v6 + v84 + 40);
                *((_QWORD *)v87 + 7) = *(_QWORD *)(v6 + v84 + 56);
                v88[5] = 0;
                v88[6] = 0;
                v88[7] = 0;
                v84 += 24;
              }
              while (v84 != 48);
              v89 = *(_QWORD *)(v6 + 88);
              v304 = v6 + 88;
              v320[0] = *(_BYTE *)(v6 + 96);
              v319 = v89;
              *(_QWORD *)&v321 = &v315;
              *((_QWORD *)&v321 + 1) = v318;
              *(_QWORD *)&v322 = &v319;
              *((_QWORD *)&v322 + 1) = (char *)&v319 + 4;
              v323 = v320;
              v327 = (void **)(a2 - 104);
              v328 = (char *)(a2 - 64);
              v329 = (uint64_t *)(a2 - 16);
              v330 = (char *)(a2 - 12);
              v331 = (char *)(a2 - 8);
              if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v321, (uint64_t *)&v327) & 0x80) != 0)
              {
                do
                {
                  v4 = v6 + 104;
                  *(_QWORD *)&v321 = &v315;
                  *((_QWORD *)&v321 + 1) = v318;
                  *(_QWORD *)&v322 = &v319;
                  *((_QWORD *)&v322 + 1) = (char *)&v319 + 4;
                  v323 = v320;
                  v327 = (void **)(v6 + 104);
                  v328 = (char *)(v6 + 144);
                  v329 = (uint64_t *)(v6 + 192);
                  v330 = (char *)(v6 + 196);
                  v331 = (char *)(v6 + 200);
                  v6 += 104;
                }
                while ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v321, (uint64_t *)&v327) & 0x80) == 0);
              }
              else
              {
                v90 = (char *)(v6 + 200);
                do
                {
                  v4 = (unint64_t)(v90 - 96);
                  if ((unint64_t)(v90 - 96) >= a2)
                    break;
                  *(_QWORD *)&v321 = &v315;
                  *((_QWORD *)&v321 + 1) = v318;
                  *(_QWORD *)&v322 = &v319;
                  *((_QWORD *)&v322 + 1) = (char *)&v319 + 4;
                  v323 = v320;
                  v327 = (void **)(v90 - 96);
                  v328 = v90 - 56;
                  v329 = (uint64_t *)(v90 - 8);
                  v330 = v90 - 4;
                  v331 = v90;
                  v90 += 104;
                }
                while ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v321, (uint64_t *)&v327) & 0x80) == 0);
              }
              v91 = a2;
              if (v4 < a2)
              {
                v92 = a2;
                do
                {
                  v91 = v92 - 104;
                  *(_QWORD *)&v321 = &v315;
                  *((_QWORD *)&v321 + 1) = v318;
                  *(_QWORD *)&v322 = &v319;
                  *((_QWORD *)&v322 + 1) = (char *)&v319 + 4;
                  v323 = v320;
                  v327 = (void **)(v92 - 104);
                  v328 = (char *)(v92 - 64);
                  v329 = (uint64_t *)(v92 - 16);
                  v330 = (char *)(v92 - 12);
                  v331 = (char *)(v92 - 8);
                  v93 = std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v321, (uint64_t *)&v327);
                  v92 = v91;
                }
                while (v93 < 0);
              }
              while (v4 < v91)
              {
                v94 = 0;
                v95 = *(_OWORD *)v4;
                v96 = *(_OWORD *)(v4 + 16);
                v323 = *(_BYTE **)(v4 + 32);
                v321 = v95;
                v322 = v96;
                do
                {
                  v97 = (char *)&v321 + v94;
                  v98 = (_QWORD *)(v4 + v94);
                  *((_QWORD *)v97 + 6) = 0;
                  *((_QWORD *)v97 + 7) = 0;
                  *(_OWORD *)(v97 + 40) = *(_OWORD *)(v4 + v94 + 40);
                  *((_QWORD *)v97 + 7) = *(_QWORD *)(v4 + v94 + 56);
                  v98[5] = 0;
                  v98[6] = 0;
                  v98[7] = 0;
                  v94 += 24;
                }
                while (v94 != 48);
                v99 = 0;
                v100 = *(_QWORD *)(v4 + 88);
                v326 = *(_BYTE *)(v4 + 96);
                v325 = v100;
                v101 = *(_OWORD *)v91;
                v102 = *(_OWORD *)(v91 + 16);
                *(_QWORD *)(v4 + 32) = *(_QWORD *)(v91 + 32);
                *(_OWORD *)v4 = v101;
                *(_OWORD *)(v4 + 16) = v102;
                do
                {
                  v103 = v4 + v99;
                  v104 = (_QWORD *)(v91 + v99);
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v4 + v99 + 40));
                  *(_OWORD *)(v103 + 40) = *(_OWORD *)(v91 + v99 + 40);
                  *(_QWORD *)(v103 + 56) = *(_QWORD *)(v91 + v99 + 56);
                  v104[5] = 0;
                  v104[6] = 0;
                  v104[7] = 0;
                  v99 += 24;
                }
                while (v99 != 48);
                v105 = 0;
                v106 = *(_QWORD *)(v91 + 88);
                *(_BYTE *)(v4 + 96) = *(_BYTE *)(v91 + 96);
                *(_QWORD *)(v4 + 88) = v106;
                v107 = v321;
                v108 = v322;
                *(_QWORD *)(v91 + 32) = v323;
                *(_OWORD *)v91 = v107;
                *(_OWORD *)(v91 + 16) = v108;
                do
                {
                  v109 = v91 + v105;
                  v110 = (_QWORD *)((char *)&v321 + v105);
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v91 + v105 + 40));
                  *(_OWORD *)(v109 + 40) = *(_OWORD *)&v324[v105];
                  *(_QWORD *)(v109 + 56) = *(_QWORD *)&v324[v105 + 16];
                  v110[5] = 0;
                  v110[6] = 0;
                  v110[7] = 0;
                  v105 += 24;
                }
                while (v105 != 48);
                v111 = v325;
                *(_BYTE *)(v91 + 96) = v326;
                *(_QWORD *)(v91 + 88) = v111;
                for (ii = 64; ii != 16; ii -= 24)
                {
                  v327 = (void **)((char *)&v321 + ii);
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v327);
                }
                do
                {
                  *(_QWORD *)&v321 = &v315;
                  *((_QWORD *)&v321 + 1) = v318;
                  v113 = (char *)(v4 + 144);
                  v114 = (uint64_t *)(v4 + 192);
                  v115 = (char *)(v4 + 196);
                  v116 = (char *)(v4 + 200);
                  v4 += 104;
                  *(_QWORD *)&v322 = &v319;
                  *((_QWORD *)&v322 + 1) = (char *)&v319 + 4;
                  v323 = v320;
                  v327 = (void **)v4;
                  v328 = v113;
                  v329 = v114;
                  v330 = v115;
                  v331 = v116;
                }
                while ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v321, (uint64_t *)&v327) & 0x80) == 0);
                do
                {
                  *(_QWORD *)&v321 = &v315;
                  *((_QWORD *)&v321 + 1) = v318;
                  v117 = (char *)(v91 - 64);
                  v118 = (uint64_t *)(v91 - 16);
                  v119 = (char *)(v91 - 12);
                  v120 = (char *)(v91 - 8);
                  v91 -= 104;
                  *(_QWORD *)&v322 = &v319;
                  *((_QWORD *)&v322 + 1) = (char *)&v319 + 4;
                  v323 = v320;
                  v327 = (void **)v91;
                  v328 = v117;
                  v329 = v118;
                  v330 = v119;
                  v331 = v120;
                }
                while ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v321, (uint64_t *)&v327) & 0x80) != 0);
              }
              v121 = (__int128 *)(v4 - 104);
              v122 = a1;
              if (v4 - 104 != a1)
              {
                v123 = 0;
                v124 = *v121;
                v125 = *(_OWORD *)(v4 - 88);
                *(_QWORD *)(a1 + 32) = *(_QWORD *)(v4 - 72);
                *(_OWORD *)a1 = v124;
                *(_OWORD *)(a1 + 16) = v125;
                do
                {
                  v126 = v122 + v123;
                  v127 = v4 + v123;
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v122 + v123 + 40));
                  *(_OWORD *)(v126 + 40) = *(_OWORD *)(v4 + v123 - 64);
                  *(_QWORD *)(v126 + 56) = *(_QWORD *)(v4 + v123 - 48);
                  *(_QWORD *)(v127 - 64) = 0;
                  *(_QWORD *)(v127 - 56) = 0;
                  *(_QWORD *)(v127 - 48) = 0;
                  v122 = a1;
                  v123 += 24;
                }
                while (v123 != 48);
                v128 = *(_QWORD *)(v4 - 16);
                *(_BYTE *)(v304 + 8) = *(_BYTE *)(v4 - 8);
                *(_QWORD *)v304 = v128;
              }
              v129 = 0;
              v130 = v315;
              v131 = v316;
              *(_QWORD *)(v4 - 72) = v317;
              *v121 = v130;
              *(_OWORD *)(v4 - 88) = v131;
              do
              {
                v132 = v4 + v129;
                v133 = (_QWORD *)((char *)&v315 + v129);
                std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v4 + v129 - 64));
                *(_OWORD *)(v132 - 64) = *(_OWORD *)&v318[v129];
                *(_QWORD *)(v132 - 48) = *(_QWORD *)&v318[v129 + 16];
                v133[5] = 0;
                v133[6] = 0;
                v133[7] = 0;
                v129 += 24;
              }
              while (v129 != 48);
              v134 = v319;
              *(_BYTE *)(v4 - 8) = v320[0];
              *(_QWORD *)(v4 - 16) = v134;
              for (jj = 64; jj != 16; jj -= 24)
              {
                *(_QWORD *)&v321 = (char *)&v315 + jj;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v321);
              }
              goto LABEL_85;
            }
          }
          v30 = 0;
          v31 = *(_OWORD *)v6;
          v32 = *(_OWORD *)(v6 + 16);
          v317 = *(char **)(v6 + 32);
          v315 = v31;
          v316 = v32;
          do
          {
            v33 = (char *)&v315 + v30;
            v34 = (_QWORD *)(v6 + v30);
            *((_QWORD *)v33 + 6) = 0;
            *((_QWORD *)v33 + 7) = 0;
            *(_OWORD *)(v33 + 40) = *(_OWORD *)(v6 + v30 + 40);
            *((_QWORD *)v33 + 7) = *(_QWORD *)(v6 + v30 + 56);
            v34[5] = 0;
            v34[6] = 0;
            v34[7] = 0;
            v30 += 24;
          }
          while (v30 != 48);
          v35 = 0;
          v36 = *(_QWORD *)(v6 + 88);
          v303 = v6 + 88;
          v320[0] = *(_BYTE *)(v6 + 96);
          v319 = v36;
          do
          {
            *(_QWORD *)&v321 = v6 + v35 + 104;
            *((_QWORD *)&v321 + 1) = v6 + v35 + 144;
            *(_QWORD *)&v322 = v6 + v35 + 192;
            *((_QWORD *)&v322 + 1) = v6 + v35 + 196;
            v323 = (_BYTE *)(v6 + v35 + 200);
            v327 = (void **)&v315;
            v328 = v318;
            v329 = &v319;
            v330 = (char *)&v319 + 4;
            v331 = v320;
            v35 += 104;
          }
          while ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v321, (uint64_t *)&v327) & 0x80) != 0);
          v4 = v6 + v35;
          v37 = a2;
          if (v6 + v35 - 104 == v6)
          {
            v40 = a2;
            while (v4 < v40)
            {
              v38 = v40 - 104;
              *(_QWORD *)&v321 = v40 - 104;
              *((_QWORD *)&v321 + 1) = v40 - 64;
              *(_QWORD *)&v322 = v40 - 16;
              *((_QWORD *)&v322 + 1) = v40 - 12;
              v323 = (_BYTE *)(v40 - 8);
              v327 = (void **)&v315;
              v328 = v318;
              v329 = &v319;
              v330 = (char *)&v319 + 4;
              v331 = v320;
              v41 = std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v321, (uint64_t *)&v327);
              v40 = v38;
              if (v41 < 0)
                goto LABEL_30;
            }
            v38 = v40;
          }
          else
          {
            do
            {
              v38 = v37 - 104;
              *(_QWORD *)&v321 = v37 - 104;
              *((_QWORD *)&v321 + 1) = v37 - 64;
              *(_QWORD *)&v322 = v37 - 16;
              *((_QWORD *)&v322 + 1) = v37 - 12;
              v323 = (_BYTE *)(v37 - 8);
              v327 = (void **)&v315;
              v328 = v318;
              v329 = &v319;
              v330 = (char *)&v319 + 4;
              v331 = v320;
              v39 = std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v321, (uint64_t *)&v327);
              v37 = v38;
            }
            while ((v39 & 0x80) == 0);
          }
LABEL_30:
          v309 = v6 + v35;
          v306 = v38;
          while (v4 < v38)
          {
            v42 = 0;
            v43 = *(_OWORD *)v4;
            v44 = *(_OWORD *)(v4 + 16);
            v323 = *(_BYTE **)(v4 + 32);
            v321 = v43;
            v322 = v44;
            do
            {
              v45 = (char *)&v321 + v42;
              v46 = (_QWORD *)(v4 + v42);
              *((_QWORD *)v45 + 6) = 0;
              *((_QWORD *)v45 + 7) = 0;
              *(_OWORD *)(v45 + 40) = *(_OWORD *)(v4 + v42 + 40);
              *((_QWORD *)v45 + 7) = *(_QWORD *)(v4 + v42 + 56);
              v46[5] = 0;
              v46[6] = 0;
              v46[7] = 0;
              v42 += 24;
            }
            while (v42 != 48);
            v47 = 0;
            v48 = *(_QWORD *)(v4 + 88);
            v326 = *(_BYTE *)(v4 + 96);
            v325 = v48;
            v49 = *(_OWORD *)v38;
            v50 = *(_OWORD *)(v38 + 16);
            *(_QWORD *)(v4 + 32) = *(_QWORD *)(v38 + 32);
            *(_OWORD *)v4 = v49;
            *(_OWORD *)(v4 + 16) = v50;
            do
            {
              v51 = v4 + v47;
              v52 = (_QWORD *)(v38 + v47);
              std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v4 + v47 + 40));
              *(_OWORD *)(v51 + 40) = *(_OWORD *)(v38 + v47 + 40);
              *(_QWORD *)(v51 + 56) = *(_QWORD *)(v38 + v47 + 56);
              v52[5] = 0;
              v52[6] = 0;
              v52[7] = 0;
              v47 += 24;
            }
            while (v47 != 48);
            v53 = 0;
            v54 = *(_QWORD *)(v38 + 88);
            *(_BYTE *)(v4 + 96) = *(_BYTE *)(v38 + 96);
            *(_QWORD *)(v4 + 88) = v54;
            v55 = v321;
            v56 = v322;
            *(_QWORD *)(v38 + 32) = v323;
            *(_OWORD *)v38 = v55;
            *(_OWORD *)(v38 + 16) = v56;
            do
            {
              v57 = v38 + v53;
              v58 = (_QWORD *)((char *)&v321 + v53);
              std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v38 + v53 + 40));
              *(_OWORD *)(v57 + 40) = *(_OWORD *)&v324[v53];
              *(_QWORD *)(v57 + 56) = *(_QWORD *)&v324[v53 + 16];
              v58[5] = 0;
              v58[6] = 0;
              v58[7] = 0;
              v53 += 24;
            }
            while (v53 != 48);
            v59 = v325;
            *(_BYTE *)(v38 + 96) = v326;
            *(_QWORD *)(v38 + 88) = v59;
            for (kk = 64; kk != 16; kk -= 24)
            {
              v327 = (void **)((char *)&v321 + kk);
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v327);
            }
            do
            {
              v61 = v4 + 144;
              v62 = v4 + 192;
              v63 = v4 + 196;
              v64 = (_BYTE *)(v4 + 200);
              v4 += 104;
              *(_QWORD *)&v321 = v4;
              *((_QWORD *)&v321 + 1) = v61;
              *(_QWORD *)&v322 = v62;
              *((_QWORD *)&v322 + 1) = v63;
              v323 = v64;
              v327 = (void **)&v315;
              v328 = v318;
              v329 = &v319;
              v330 = (char *)&v319 + 4;
              v331 = v320;
            }
            while ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v321, (uint64_t *)&v327) & 0x80) != 0);
            do
            {
              v65 = v38 - 64;
              v66 = v38 - 16;
              v67 = v38 - 12;
              v68 = (_BYTE *)(v38 - 8);
              v38 -= 104;
              *(_QWORD *)&v321 = v38;
              *((_QWORD *)&v321 + 1) = v65;
              *(_QWORD *)&v322 = v66;
              *((_QWORD *)&v322 + 1) = v67;
              v323 = v68;
              v327 = (void **)&v315;
              v328 = v318;
              v329 = &v319;
              v330 = (char *)&v319 + 4;
              v331 = v320;
            }
            while ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v321, (uint64_t *)&v327) & 0x80) == 0);
          }
          v69 = v4 - 104;
          if (v4 - 104 != a1)
          {
            v70 = 0;
            v71 = *(_OWORD *)v69;
            v72 = *(_OWORD *)(v4 - 88);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v4 - 72);
            *(_OWORD *)a1 = v71;
            *(_OWORD *)(a1 + 16) = v72;
            do
            {
              v73 = a1 + v70;
              v74 = v4 + v70;
              std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + v70 + 40));
              *(_OWORD *)(v73 + 40) = *(_OWORD *)(v4 + v70 - 64);
              *(_QWORD *)(v73 + 56) = *(_QWORD *)(v4 + v70 - 48);
              *(_QWORD *)(v74 - 64) = 0;
              *(_QWORD *)(v74 - 56) = 0;
              *(_QWORD *)(v74 - 48) = 0;
              v70 += 24;
            }
            while (v70 != 48);
            v75 = *(_QWORD *)(v4 - 16);
            *(_BYTE *)(v303 + 8) = *(_BYTE *)(v4 - 8);
            *(_QWORD *)v303 = v75;
            v69 = v4 - 104;
          }
          v76 = 0;
          v77 = v315;
          v78 = v316;
          *(_QWORD *)(v69 + 32) = v317;
          *(_OWORD *)v69 = v77;
          *(_OWORD *)(v69 + 16) = v78;
          do
          {
            v79 = v4 + v76;
            v80 = (_QWORD *)((char *)&v315 + v76);
            std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v4 + v76 - 64));
            *(_OWORD *)(v79 - 64) = *(_OWORD *)&v318[v76];
            *(_QWORD *)(v79 - 48) = *(_QWORD *)&v318[v76 + 16];
            v80[5] = 0;
            v80[6] = 0;
            v80[7] = 0;
            v76 += 24;
          }
          while (v76 != 48);
          v81 = v319;
          *(_BYTE *)(v4 - 8) = v320[0];
          *(_QWORD *)(v4 - 16) = v81;
          for (mm = 64; mm != 16; mm -= 24)
          {
            *(_QWORD *)&v321 = (char *)&v315 + mm;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v321);
          }
          if (v309 < v306)
            goto LABEL_53;
          v83 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(a1, v4 - 104);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(v4, a2))
          {
            if (v83)
              continue;
LABEL_53:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *,false>(a1, v4 - 104, a3, a4 & 1);
LABEL_85:
            a4 = 0;
            continue;
          }
          a2 = v4 - 104;
          if (v83)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if (v4 != a2)
          {
            v156 = v4 + 104;
            if (v4 + 104 != a2)
            {
              v157 = 0;
              v158 = v4;
              do
              {
                *(_QWORD *)&v321 = v156;
                *((_QWORD *)&v321 + 1) = v158 + 144;
                *(_QWORD *)&v322 = v158 + 192;
                *((_QWORD *)&v322 + 1) = v158 + 196;
                v323 = (_BYTE *)(v158 + 200);
                *(_QWORD *)&v315 = v158;
                *((_QWORD *)&v315 + 1) = v158 + 40;
                *(_QWORD *)&v316 = v158 + 88;
                *((_QWORD *)&v316 + 1) = v158 + 92;
                v317 = (char *)(v158 + 96);
                v159 = a2;
                if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v321, (uint64_t *)&v315) & 0x80) != 0)
                {
                  v160 = 0;
                  v161 = *(_OWORD *)v156;
                  v162 = *(_OWORD *)(v156 + 16);
                  v323 = *(_BYTE **)(v156 + 32);
                  v321 = v161;
                  v322 = v162;
                  do
                  {
                    v163 = (char *)&v321 + v160;
                    v164 = (_QWORD *)(v158 + v160);
                    *((_QWORD *)v163 + 7) = 0;
                    *(_OWORD *)(v163 + 40) = *(_OWORD *)(v158 + v160 + 144);
                    *((_QWORD *)v163 + 7) = *(_QWORD *)(v158 + v160 + 160);
                    v164[18] = 0;
                    v164[19] = 0;
                    v164[20] = 0;
                    v160 += 24;
                  }
                  while (v160 != 48);
                  v325 = *(_QWORD *)(v158 + 192);
                  v326 = *(_BYTE *)(v158 + 200);
                  v305 = v157;
                  v165 = v158;
                  v166 = v156;
                  while (1)
                  {
                    v167 = v165;
                    v168 = *(_OWORD *)(v165 + 16);
                    *(_OWORD *)v166 = *(_OWORD *)v165;
                    *(_OWORD *)(v166 + 16) = v168;
                    *(_QWORD *)(v166 + 32) = *(_QWORD *)(v165 + 32);
                    v169 = v157;
                    v170 = 2;
                    do
                    {
                      v171 = a1 + v169;
                      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + v169 + 144));
                      *(_OWORD *)(v171 + 144) = *(_OWORD *)(v171 + 40);
                      *(_QWORD *)(v171 + 160) = *(_QWORD *)(v171 + 56);
                      *(_QWORD *)(v171 + 48) = 0;
                      *(_QWORD *)(v171 + 56) = 0;
                      *(_QWORD *)(v171 + 40) = 0;
                      v169 += 24;
                      --v170;
                    }
                    while (v170);
                    *(_QWORD *)(v166 + 88) = *(_QWORD *)(v167 + 88);
                    *(_BYTE *)(v166 + 96) = *(_BYTE *)(v167 + 96);
                    if (v167 == a1)
                      break;
                    v165 = v167 - 104;
                    *(_QWORD *)&v315 = &v321;
                    *((_QWORD *)&v315 + 1) = v324;
                    *(_QWORD *)&v316 = &v325;
                    *((_QWORD *)&v316 + 1) = (char *)&v325 + 4;
                    v317 = &v326;
                    v327 = (void **)(v167 - 104);
                    v328 = (char *)(v167 - 64);
                    v329 = (uint64_t *)(v167 - 16);
                    v330 = (char *)(v167 - 12);
                    v331 = (char *)(v167 - 8);
                    v157 -= 104;
                    v166 = v167;
                    if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v315, (uint64_t *)&v327) & 0x80) == 0)
                    {
                      v172 = v167;
                      goto LABEL_116;
                    }
                  }
                  v172 = a1;
LABEL_116:
                  v159 = a2;
                  v173 = 0;
                  v174 = v321;
                  v175 = v322;
                  *(_QWORD *)(v172 + 32) = v323;
                  *(_OWORD *)v172 = v174;
                  *(_OWORD *)(v172 + 16) = v175;
                  do
                  {
                    v176 = v167 + v173;
                    v177 = (_QWORD *)((char *)&v321 + v173);
                    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v167 + v173 + 40));
                    *(_OWORD *)(v176 + 40) = *(_OWORD *)&v324[v173];
                    *(_QWORD *)(v176 + 56) = *(_QWORD *)&v324[v173 + 16];
                    v177[5] = 0;
                    v177[6] = 0;
                    v177[7] = 0;
                    v173 += 24;
                  }
                  while (v173 != 48);
                  v178 = v325;
                  *(_BYTE *)(v167 + 96) = v326;
                  *(_QWORD *)(v167 + 88) = v178;
                  for (nn = 64; nn != 16; nn -= 24)
                  {
                    *(_QWORD *)&v315 = (char *)&v321 + nn;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v315);
                  }
                  v157 = v305;
                }
                v156 += 104;
                v158 += 104;
                v157 += 104;
              }
              while (v156 != v159);
            }
          }
        }
        else if (v4 != a2)
        {
          for (i1 = v4 + 104; i1 != a2; a1 = v277 + 104)
          {
            v277 = a1;
            *(_QWORD *)&v321 = i1;
            *((_QWORD *)&v321 + 1) = a1 + 144;
            *(_QWORD *)&v322 = a1 + 192;
            *((_QWORD *)&v322 + 1) = a1 + 196;
            v323 = (_BYTE *)(a1 + 200);
            *(_QWORD *)&v315 = a1;
            *((_QWORD *)&v315 + 1) = a1 + 40;
            *(_QWORD *)&v316 = a1 + 88;
            *((_QWORD *)&v316 + 1) = a1 + 92;
            v317 = (char *)(a1 + 96);
            if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v321, (uint64_t *)&v315) & 0x80) != 0)
            {
              v278 = 0;
              v279 = *(_OWORD *)i1;
              v280 = *(_OWORD *)(i1 + 16);
              v323 = *(_BYTE **)(i1 + 32);
              v321 = v279;
              v322 = v280;
              do
              {
                v281 = (char *)&v321 + v278;
                v282 = (_QWORD *)(a1 + v278);
                *((_QWORD *)v281 + 7) = 0;
                *(_OWORD *)(v281 + 40) = *(_OWORD *)(a1 + v278 + 144);
                *((_QWORD *)v281 + 7) = *(_QWORD *)(a1 + v278 + 160);
                v282[18] = 0;
                v282[19] = 0;
                v282[20] = 0;
                v278 += 24;
              }
              while (v278 != 48);
              v325 = *(_QWORD *)(a1 + 192);
              v326 = *(_BYTE *)(a1 + 200);
              v283 = a1;
              v313 = i1;
              v284 = i1;
              do
              {
                v285 = 0;
                v286 = v283;
                v287 = *(_OWORD *)(v283 + 16);
                *(_OWORD *)v284 = *(_OWORD *)v283;
                *(_OWORD *)(v284 + 16) = v287;
                *(_QWORD *)(v284 + 32) = *(_QWORD *)(v283 + 32);
                do
                {
                  v288 = v286 + v285;
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v286 + v285 + 144));
                  *(_OWORD *)(v288 + 144) = *(_OWORD *)(v288 + 40);
                  *(_QWORD *)(v288 + 160) = *(_QWORD *)(v288 + 56);
                  *(_QWORD *)(v288 + 48) = 0;
                  *(_QWORD *)(v288 + 56) = 0;
                  *(_QWORD *)(v288 + 40) = 0;
                  v285 += 24;
                }
                while (v285 != 48);
                v289 = v286 + 88;
                *(_QWORD *)(v284 + 88) = *(_QWORD *)(v286 + 88);
                *(_BYTE *)(v284 + 96) = *(_BYTE *)(v286 + 96);
                v283 = v286 - 104;
                *(_QWORD *)&v315 = &v321;
                *((_QWORD *)&v315 + 1) = v324;
                *(_QWORD *)&v316 = &v325;
                *((_QWORD *)&v316 + 1) = (char *)&v325 + 4;
                v317 = &v326;
                v327 = (void **)(v286 - 104);
                v328 = (char *)(v286 - 64);
                v329 = (uint64_t *)(v286 - 16);
                v330 = (char *)(v286 - 12);
                v331 = (char *)(v286 - 8);
                v284 = v286;
              }
              while ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v315, (uint64_t *)&v327) & 0x80) != 0);
              v290 = 0;
              v291 = v321;
              v292 = v322;
              *(_QWORD *)(v286 + 32) = v323;
              *(_OWORD *)v286 = v291;
              *(_OWORD *)(v286 + 16) = v292;
              do
              {
                v293 = v283 + v290;
                v294 = (_QWORD *)((char *)&v321 + v290);
                std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v283 + v290 + 144));
                *(_OWORD *)(v293 + 144) = *(_OWORD *)&v324[v290];
                *(_QWORD *)(v293 + 160) = *(_QWORD *)&v324[v290 + 16];
                v294[5] = 0;
                v294[6] = 0;
                v294[7] = 0;
                v290 += 24;
              }
              while (v290 != 48);
              v295 = v325;
              *(_BYTE *)(v289 + 8) = v326;
              *(_QWORD *)v289 = v295;
              for (i2 = 64; i2 != 16; i2 -= 24)
              {
                *(_QWORD *)&v315 = (char *)&v321 + i2;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v315);
              }
              v277 = a1;
              i1 = v313;
            }
            i1 += 104;
          }
        }
        return;
    }
  }
}

  v9 = (__int128 *)(a2 - 2);
  v10 = (unint64_t *)a1;
  while (2)
  {
    a1 = (uint64_t)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        if (*(_QWORD *)v9 < *v10)
        {
          v82 = *(_OWORD *)v10;
          *(_OWORD *)v10 = *v9;
          a5.n128_u64[0] = v82;
          *v9 = v82;
        }
        return a5.n128_f64[0];
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, a2 - 2);
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (_OWORD *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (__n128 *)v10 + 3, (__n128 *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v11 <= 383)
        {
          n128_u64 = v10 + 2;
          v39 = v10 == a2 || n128_u64 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v10;
              do
              {
                v42 = n128_u64;
                v43 = v41[2];
                if (v43 < *v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    a5 = *(__n128 *)((char *)v10 + v45);
                    *(__n128 *)((char *)v10 + v45 + 16) = a5;
                    if (!v45)
                      break;
                    v46 = *(unint64_t *)((char *)v10 + v45 - 16);
                    v45 -= 16;
                    if (v43 >= v46)
                    {
                      v47 = (unint64_t *)((char *)v10 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v10;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                n128_u64 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v74 = (__n128 *)n128_u64;
              v75 = *(_QWORD *)(a1 + 16);
              if (v75 < *(_QWORD *)a1)
              {
                v76 = *(_QWORD *)(a1 + 24);
                v77 = v74;
                do
                {
                  a5 = v77[-1];
                  *v77 = a5;
                  v78 = v77[-2].n128_u64[0];
                  --v77;
                }
                while (v75 < v78);
                v77->n128_u64[0] = v75;
                v77->n128_u64[1] = v76;
              }
              n128_u64 = v74[1].n128_u64;
              a1 = (uint64_t)v74;
            }
            while (&v74[1] != (__n128 *)a2);
          }
          return a5.n128_f64[0];
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v48 = (v12 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v10[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v12)
                {
                  v53 = *v52;
                }
                else
                {
                  v53 = v52[2];
                  v54 = *v52 >= v53;
                  if (*v52 < v53)
                    v52 += 2;
                  else
                    v53 = *v52;
                  if (!v54)
                    v51 = 2 * v50 + 2;
                }
                v55 = &v10[2 * v50];
                v56 = *v55;
                if (v53 >= *v55)
                {
                  v57 = v55[1];
                  do
                  {
                    v58 = v55;
                    v55 = v52;
                    *(_OWORD *)v58 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v59 = (2 * v51) | 1;
                    v52 = &v10[2 * v59];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v12)
                    {
                      v60 = *v52;
                      v51 = v59;
                    }
                    else
                    {
                      v60 = *v52;
                      if (*v52 >= v52[2])
                      {
                        v51 = v59;
                      }
                      else
                      {
                        v60 = v52[2];
                        v52 += 2;
                      }
                    }
                  }
                  while (v60 >= v56);
                  *v55 = v56;
                  v55[1] = v57;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v61 = (unint64_t)v11 >> 4;
            do
            {
              v62 = 0;
              v83 = *(_OWORD *)v10;
              v63 = (__n128 *)v10;
              do
              {
                v64 = &v63[v62 + 1];
                v65 = (2 * v62) | 1;
                v66 = 2 * v62 + 2;
                if (v66 < v61 && v64->n128_u64[0] < v64[1].n128_u64[0])
                {
                  ++v64;
                  v65 = v66;
                }
                *v63 = *v64;
                v63 = v64;
                v62 = v65;
              }
              while (v65 <= (uint64_t)((unint64_t)(v61 - 2) >> 1));
              a2 -= 2;
              if (v64 == (__n128 *)a2)
              {
                a5.n128_u64[0] = v83;
                *v64 = (__n128)v83;
              }
              else
              {
                *v64 = *(__n128 *)a2;
                a5.n128_u64[0] = v83;
                *(_OWORD *)a2 = v83;
                v67 = (char *)v64 - (char *)v10 + 16;
                if (v67 >= 17)
                {
                  v68 = (((unint64_t)v67 >> 4) - 2) >> 1;
                  v69 = (__n128 *)&v10[2 * v68];
                  v70 = v64->n128_u64[0];
                  if (v69->n128_u64[0] < v64->n128_u64[0])
                  {
                    v71 = v64->n128_u64[1];
                    do
                    {
                      v72 = v64;
                      v64 = v69;
                      a5 = *v69;
                      *v72 = *v69;
                      if (!v68)
                        break;
                      v68 = (v68 - 1) >> 1;
                      v69 = (__n128 *)&v10[2 * v68];
                    }
                    while (v69->n128_u64[0] < v70);
                    v64->n128_u64[0] = v70;
                    v64->n128_u64[1] = v71;
                  }
                }
              }
            }
            while (v61-- > 2);
          }
          return a5.n128_f64[0];
        }
        v13 = v12 >> 1;
        v14 = &v10[2 * (v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16 * (v12 >> 1)), (unint64_t *)a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16 * (v12 >> 1)), a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16), v14 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v13), a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v14 - 1, v14, (unint64_t *)(a1 + 16 + 16 * v13));
          v80 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(__n128 *)v14 = v80;
        }
        --a3;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 16) >= *(_QWORD *)a1)
        {
          a5 = *(__n128 *)a1;
          v29 = *(_QWORD *)a1;
          if (*(_QWORD *)a1 >= *(_QWORD *)v9)
          {
            v31 = a1 + 16;
            do
            {
              v10 = (unint64_t *)v31;
              if (v31 >= (unint64_t)a2)
                break;
              v31 += 16;
            }
            while (v29 >= *v10);
          }
          else
          {
            v10 = (unint64_t *)a1;
            do
            {
              v30 = v10[2];
              v10 += 2;
            }
            while (v29 >= v30);
          }
          v32 = a2;
          if (v10 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v33);
          }
          while (v10 < v32)
          {
            v81 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v32;
            *(_OWORD *)v32 = v81;
            do
            {
              v34 = v10[2];
              v10 += 2;
            }
            while (v29 >= v34);
            do
            {
              v35 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v35);
          }
          v36 = v10 - 2;
          if (v10 - 2 != (unint64_t *)a1)
            *(_OWORD *)a1 = *(_OWORD *)v36;
          a4 = 0;
          *(__n128 *)v36 = a5;
          continue;
        }
        v15 = *(__n128 *)a1;
        v16 = *(_QWORD *)a1;
        v17 = (unint64_t *)a1;
        do
        {
          v18 = v17;
          v19 = v17[2];
          v17 += 2;
        }
        while (v19 < v16);
        v20 = a2;
        if (v18 == (unint64_t *)a1)
        {
          v20 = a2;
          do
          {
            if (v17 >= v20)
              break;
            v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 >= v16);
        }
        else
        {
          do
          {
            v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 >= v16);
        }
        if (v17 < v20)
        {
          v23 = v17;
          v24 = v20;
          do
          {
            v25 = *(_OWORD *)v23;
            *(_OWORD *)v23 = *(_OWORD *)v24;
            *(_OWORD *)v24 = v25;
            do
            {
              v18 = v23;
              v26 = v23[2];
              v23 += 2;
            }
            while (v26 < v16);
            do
            {
              v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (v27 >= v16);
          }
          while (v23 < v24);
        }
        if (v18 != (unint64_t *)a1)
          *(_OWORD *)a1 = *(_OWORD *)v18;
        *(__n128 *)v18 = v15;
        if (v17 < v20)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v18, a3, a4 & 1);
          a4 = 0;
          v10 = v18 + 2;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v18);
        v10 = v18 + 2;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v18 + 2), a2))
        {
          if (v28)
            continue;
          goto LABEL_29;
        }
        a2 = v18;
        if (!v28)
          goto LABEL_1;
        return a5.n128_f64[0];
    }
  }
}

  v9 = (__int128 *)(a2 - 2);
  v10 = (unint64_t *)a1;
  while (2)
  {
    a1 = (uint64_t)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        if (*(_QWORD *)v9 < *v10)
        {
          v82 = *(_OWORD *)v10;
          *(_OWORD *)v10 = *v9;
          a5.n128_u64[0] = v82;
          *v9 = v82;
        }
        return a5.n128_f64[0];
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, a2 - 2);
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (_OWORD *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (__n128 *)v10 + 3, (__n128 *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v11 <= 383)
        {
          n128_u64 = v10 + 2;
          v39 = v10 == a2 || n128_u64 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v10;
              do
              {
                v42 = n128_u64;
                v43 = v41[2];
                if (v43 < *v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    a5 = *(__n128 *)((char *)v10 + v45);
                    *(__n128 *)((char *)v10 + v45 + 16) = a5;
                    if (!v45)
                      break;
                    v46 = *(unint64_t *)((char *)v10 + v45 - 16);
                    v45 -= 16;
                    if (v43 >= v46)
                    {
                      v47 = (unint64_t *)((char *)v10 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v10;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                n128_u64 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v74 = (__n128 *)n128_u64;
              v75 = *(_QWORD *)(a1 + 16);
              if (v75 < *(_QWORD *)a1)
              {
                v76 = *(_QWORD *)(a1 + 24);
                v77 = v74;
                do
                {
                  a5 = v77[-1];
                  *v77 = a5;
                  v78 = v77[-2].n128_u64[0];
                  --v77;
                }
                while (v75 < v78);
                v77->n128_u64[0] = v75;
                v77->n128_u64[1] = v76;
              }
              n128_u64 = v74[1].n128_u64;
              a1 = (uint64_t)v74;
            }
            while (&v74[1] != (__n128 *)a2);
          }
          return a5.n128_f64[0];
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v48 = (v12 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v10[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v12)
                {
                  v53 = *v52;
                }
                else
                {
                  v53 = v52[2];
                  v54 = *v52 >= v53;
                  if (*v52 < v53)
                    v52 += 2;
                  else
                    v53 = *v52;
                  if (!v54)
                    v51 = 2 * v50 + 2;
                }
                v55 = &v10[2 * v50];
                v56 = *v55;
                if (v53 >= *v55)
                {
                  v57 = v55[1];
                  do
                  {
                    v58 = v55;
                    v55 = v52;
                    *(_OWORD *)v58 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v59 = (2 * v51) | 1;
                    v52 = &v10[2 * v59];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v12)
                    {
                      v60 = *v52;
                      v51 = v59;
                    }
                    else
                    {
                      v60 = *v52;
                      if (*v52 >= v52[2])
                      {
                        v51 = v59;
                      }
                      else
                      {
                        v60 = v52[2];
                        v52 += 2;
                      }
                    }
                  }
                  while (v60 >= v56);
                  *v55 = v56;
                  v55[1] = v57;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v61 = (unint64_t)v11 >> 4;
            do
            {
              v62 = 0;
              v83 = *(_OWORD *)v10;
              v63 = (__n128 *)v10;
              do
              {
                v64 = &v63[v62 + 1];
                v65 = (2 * v62) | 1;
                v66 = 2 * v62 + 2;
                if (v66 < v61 && v64->n128_u64[0] < v64[1].n128_u64[0])
                {
                  ++v64;
                  v65 = v66;
                }
                *v63 = *v64;
                v63 = v64;
                v62 = v65;
              }
              while (v65 <= (uint64_t)((unint64_t)(v61 - 2) >> 1));
              a2 -= 2;
              if (v64 == (__n128 *)a2)
              {
                a5.n128_u64[0] = v83;
                *v64 = (__n128)v83;
              }
              else
              {
                *v64 = *(__n128 *)a2;
                a5.n128_u64[0] = v83;
                *(_OWORD *)a2 = v83;
                v67 = (char *)v64 - (char *)v10 + 16;
                if (v67 >= 17)
                {
                  v68 = (((unint64_t)v67 >> 4) - 2) >> 1;
                  v69 = (__n128 *)&v10[2 * v68];
                  v70 = v64->n128_u64[0];
                  if (v69->n128_u64[0] < v64->n128_u64[0])
                  {
                    v71 = v64->n128_u64[1];
                    do
                    {
                      v72 = v64;
                      v64 = v69;
                      a5 = *v69;
                      *v72 = *v69;
                      if (!v68)
                        break;
                      v68 = (v68 - 1) >> 1;
                      v69 = (__n128 *)&v10[2 * v68];
                    }
                    while (v69->n128_u64[0] < v70);
                    v64->n128_u64[0] = v70;
                    v64->n128_u64[1] = v71;
                  }
                }
              }
            }
            while (v61-- > 2);
          }
          return a5.n128_f64[0];
        }
        v13 = v12 >> 1;
        v14 = &v10[2 * (v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16 * (v12 >> 1)), (unint64_t *)a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16 * (v12 >> 1)), a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16), v14 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v13), a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v14 - 1, v14, (unint64_t *)(a1 + 16 + 16 * v13));
          v80 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(__n128 *)v14 = v80;
        }
        --a3;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 16) >= *(_QWORD *)a1)
        {
          a5 = *(__n128 *)a1;
          v29 = *(_QWORD *)a1;
          if (*(_QWORD *)a1 >= *(_QWORD *)v9)
          {
            v31 = a1 + 16;
            do
            {
              v10 = (unint64_t *)v31;
              if (v31 >= (unint64_t)a2)
                break;
              v31 += 16;
            }
            while (v29 >= *v10);
          }
          else
          {
            v10 = (unint64_t *)a1;
            do
            {
              v30 = v10[2];
              v10 += 2;
            }
            while (v29 >= v30);
          }
          v32 = a2;
          if (v10 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v33);
          }
          while (v10 < v32)
          {
            v81 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v32;
            *(_OWORD *)v32 = v81;
            do
            {
              v34 = v10[2];
              v10 += 2;
            }
            while (v29 >= v34);
            do
            {
              v35 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v35);
          }
          v36 = v10 - 2;
          if (v10 - 2 != (unint64_t *)a1)
            *(_OWORD *)a1 = *(_OWORD *)v36;
          a4 = 0;
          *(__n128 *)v36 = a5;
          continue;
        }
        v15 = *(__n128 *)a1;
        v16 = *(_QWORD *)a1;
        v17 = (unint64_t *)a1;
        do
        {
          v18 = v17;
          v19 = v17[2];
          v17 += 2;
        }
        while (v19 < v16);
        v20 = a2;
        if (v18 == (unint64_t *)a1)
        {
          v20 = a2;
          do
          {
            if (v17 >= v20)
              break;
            v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 >= v16);
        }
        else
        {
          do
          {
            v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 >= v16);
        }
        if (v17 < v20)
        {
          v23 = v17;
          v24 = v20;
          do
          {
            v25 = *(_OWORD *)v23;
            *(_OWORD *)v23 = *(_OWORD *)v24;
            *(_OWORD *)v24 = v25;
            do
            {
              v18 = v23;
              v26 = v23[2];
              v23 += 2;
            }
            while (v26 < v16);
            do
            {
              v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (v27 >= v16);
          }
          while (v23 < v24);
        }
        if (v18 != (unint64_t *)a1)
          *(_OWORD *)a1 = *(_OWORD *)v18;
        *(__n128 *)v18 = v15;
        if (v17 < v20)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v18, a3, a4 & 1);
          a4 = 0;
          v10 = v18 + 2;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v18);
        v10 = v18 + 2;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v18 + 2), a2))
        {
          if (v28)
            continue;
          goto LABEL_29;
        }
        a2 = v18;
        if (!v28)
          goto LABEL_1;
        return a5.n128_f64[0];
    }
  }
}

  v9 = (__int128 *)(a2 - 2);
  v10 = (unint64_t *)a1;
  while (2)
  {
    a1 = (uint64_t)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        if (*(_QWORD *)v9 < *v10)
        {
          v82 = *(_OWORD *)v10;
          *(_OWORD *)v10 = *v9;
          a5.n128_u64[0] = v82;
          *v9 = v82;
        }
        return a5.n128_f64[0];
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, a2 - 2);
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (_OWORD *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (__n128 *)v10 + 3, (__n128 *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v11 <= 383)
        {
          n128_u64 = v10 + 2;
          v39 = v10 == a2 || n128_u64 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v10;
              do
              {
                v42 = n128_u64;
                v43 = v41[2];
                if (v43 < *v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    a5 = *(__n128 *)((char *)v10 + v45);
                    *(__n128 *)((char *)v10 + v45 + 16) = a5;
                    if (!v45)
                      break;
                    v46 = *(unint64_t *)((char *)v10 + v45 - 16);
                    v45 -= 16;
                    if (v43 >= v46)
                    {
                      v47 = (unint64_t *)((char *)v10 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v10;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                n128_u64 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v74 = (__n128 *)n128_u64;
              v75 = *(_QWORD *)(a1 + 16);
              if (v75 < *(_QWORD *)a1)
              {
                v76 = *(_QWORD *)(a1 + 24);
                v77 = v74;
                do
                {
                  a5 = v77[-1];
                  *v77 = a5;
                  v78 = v77[-2].n128_u64[0];
                  --v77;
                }
                while (v75 < v78);
                v77->n128_u64[0] = v75;
                v77->n128_u64[1] = v76;
              }
              n128_u64 = v74[1].n128_u64;
              a1 = (uint64_t)v74;
            }
            while (&v74[1] != (__n128 *)a2);
          }
          return a5.n128_f64[0];
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v48 = (v12 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v10[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v12)
                {
                  v53 = *v52;
                }
                else
                {
                  v53 = v52[2];
                  v54 = *v52 >= v53;
                  if (*v52 < v53)
                    v52 += 2;
                  else
                    v53 = *v52;
                  if (!v54)
                    v51 = 2 * v50 + 2;
                }
                v55 = &v10[2 * v50];
                v56 = *v55;
                if (v53 >= *v55)
                {
                  v57 = v55[1];
                  do
                  {
                    v58 = v55;
                    v55 = v52;
                    *(_OWORD *)v58 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v59 = (2 * v51) | 1;
                    v52 = &v10[2 * v59];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v12)
                    {
                      v60 = *v52;
                      v51 = v59;
                    }
                    else
                    {
                      v60 = *v52;
                      if (*v52 >= v52[2])
                      {
                        v51 = v59;
                      }
                      else
                      {
                        v60 = v52[2];
                        v52 += 2;
                      }
                    }
                  }
                  while (v60 >= v56);
                  *v55 = v56;
                  v55[1] = v57;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v61 = (unint64_t)v11 >> 4;
            do
            {
              v62 = 0;
              v83 = *(_OWORD *)v10;
              v63 = (__n128 *)v10;
              do
              {
                v64 = &v63[v62 + 1];
                v65 = (2 * v62) | 1;
                v66 = 2 * v62 + 2;
                if (v66 < v61 && v64->n128_u64[0] < v64[1].n128_u64[0])
                {
                  ++v64;
                  v65 = v66;
                }
                *v63 = *v64;
                v63 = v64;
                v62 = v65;
              }
              while (v65 <= (uint64_t)((unint64_t)(v61 - 2) >> 1));
              a2 -= 2;
              if (v64 == (__n128 *)a2)
              {
                a5.n128_u64[0] = v83;
                *v64 = (__n128)v83;
              }
              else
              {
                *v64 = *(__n128 *)a2;
                a5.n128_u64[0] = v83;
                *(_OWORD *)a2 = v83;
                v67 = (char *)v64 - (char *)v10 + 16;
                if (v67 >= 17)
                {
                  v68 = (((unint64_t)v67 >> 4) - 2) >> 1;
                  v69 = (__n128 *)&v10[2 * v68];
                  v70 = v64->n128_u64[0];
                  if (v69->n128_u64[0] < v64->n128_u64[0])
                  {
                    v71 = v64->n128_u64[1];
                    do
                    {
                      v72 = v64;
                      v64 = v69;
                      a5 = *v69;
                      *v72 = *v69;
                      if (!v68)
                        break;
                      v68 = (v68 - 1) >> 1;
                      v69 = (__n128 *)&v10[2 * v68];
                    }
                    while (v69->n128_u64[0] < v70);
                    v64->n128_u64[0] = v70;
                    v64->n128_u64[1] = v71;
                  }
                }
              }
            }
            while (v61-- > 2);
          }
          return a5.n128_f64[0];
        }
        v13 = v12 >> 1;
        v14 = &v10[2 * (v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16 * (v12 >> 1)), (unint64_t *)a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16 * (v12 >> 1)), a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16), v14 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v13), a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v14 - 1, v14, (unint64_t *)(a1 + 16 + 16 * v13));
          v80 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(__n128 *)v14 = v80;
        }
        --a3;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 16) >= *(_QWORD *)a1)
        {
          a5 = *(__n128 *)a1;
          v29 = *(_QWORD *)a1;
          if (*(_QWORD *)a1 >= *(_QWORD *)v9)
          {
            v31 = a1 + 16;
            do
            {
              v10 = (unint64_t *)v31;
              if (v31 >= (unint64_t)a2)
                break;
              v31 += 16;
            }
            while (v29 >= *v10);
          }
          else
          {
            v10 = (unint64_t *)a1;
            do
            {
              v30 = v10[2];
              v10 += 2;
            }
            while (v29 >= v30);
          }
          v32 = a2;
          if (v10 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v33);
          }
          while (v10 < v32)
          {
            v81 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v32;
            *(_OWORD *)v32 = v81;
            do
            {
              v34 = v10[2];
              v10 += 2;
            }
            while (v29 >= v34);
            do
            {
              v35 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v35);
          }
          v36 = v10 - 2;
          if (v10 - 2 != (unint64_t *)a1)
            *(_OWORD *)a1 = *(_OWORD *)v36;
          a4 = 0;
          *(__n128 *)v36 = a5;
          continue;
        }
        v15 = *(__n128 *)a1;
        v16 = *(_QWORD *)a1;
        v17 = (unint64_t *)a1;
        do
        {
          v18 = v17;
          v19 = v17[2];
          v17 += 2;
        }
        while (v19 < v16);
        v20 = a2;
        if (v18 == (unint64_t *)a1)
        {
          v20 = a2;
          do
          {
            if (v17 >= v20)
              break;
            v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 >= v16);
        }
        else
        {
          do
          {
            v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 >= v16);
        }
        if (v17 < v20)
        {
          v23 = v17;
          v24 = v20;
          do
          {
            v25 = *(_OWORD *)v23;
            *(_OWORD *)v23 = *(_OWORD *)v24;
            *(_OWORD *)v24 = v25;
            do
            {
              v18 = v23;
              v26 = v23[2];
              v23 += 2;
            }
            while (v26 < v16);
            do
            {
              v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (v27 >= v16);
          }
          while (v23 < v24);
        }
        if (v18 != (unint64_t *)a1)
          *(_OWORD *)a1 = *(_OWORD *)v18;
        *(__n128 *)v18 = v15;
        if (v17 < v20)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v18, a3, a4 & 1);
          a4 = 0;
          v10 = v18 + 2;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v18);
        v10 = v18 + 2;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v18 + 2), a2))
        {
          if (v28)
            continue;
          goto LABEL_29;
        }
        a2 = v18;
        if (!v28)
          goto LABEL_1;
        return a5.n128_f64[0];
    }
  }
}

  v9 = (__int128 *)(a2 - 2);
  v10 = (unint64_t *)a1;
  while (2)
  {
    a1 = (uint64_t)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        if (*(_QWORD *)v9 < *v10)
        {
          v82 = *(_OWORD *)v10;
          *(_OWORD *)v10 = *v9;
          a5.n128_u64[0] = v82;
          *v9 = v82;
        }
        return a5.n128_f64[0];
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, a2 - 2);
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (_OWORD *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (__n128 *)v10 + 3, (__n128 *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v11 <= 383)
        {
          n128_u64 = v10 + 2;
          v39 = v10 == a2 || n128_u64 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v10;
              do
              {
                v42 = n128_u64;
                v43 = v41[2];
                if (v43 < *v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    a5 = *(__n128 *)((char *)v10 + v45);
                    *(__n128 *)((char *)v10 + v45 + 16) = a5;
                    if (!v45)
                      break;
                    v46 = *(unint64_t *)((char *)v10 + v45 - 16);
                    v45 -= 16;
                    if (v43 >= v46)
                    {
                      v47 = (unint64_t *)((char *)v10 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v10;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                n128_u64 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v74 = (__n128 *)n128_u64;
              v75 = *(_QWORD *)(a1 + 16);
              if (v75 < *(_QWORD *)a1)
              {
                v76 = *(_QWORD *)(a1 + 24);
                v77 = v74;
                do
                {
                  a5 = v77[-1];
                  *v77 = a5;
                  v78 = v77[-2].n128_u64[0];
                  --v77;
                }
                while (v75 < v78);
                v77->n128_u64[0] = v75;
                v77->n128_u64[1] = v76;
              }
              n128_u64 = v74[1].n128_u64;
              a1 = (uint64_t)v74;
            }
            while (&v74[1] != (__n128 *)a2);
          }
          return a5.n128_f64[0];
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v48 = (v12 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v10[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v12)
                {
                  v53 = *v52;
                }
                else
                {
                  v53 = v52[2];
                  v54 = *v52 >= v53;
                  if (*v52 < v53)
                    v52 += 2;
                  else
                    v53 = *v52;
                  if (!v54)
                    v51 = 2 * v50 + 2;
                }
                v55 = &v10[2 * v50];
                v56 = *v55;
                if (v53 >= *v55)
                {
                  v57 = v55[1];
                  do
                  {
                    v58 = v55;
                    v55 = v52;
                    *(_OWORD *)v58 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v59 = (2 * v51) | 1;
                    v52 = &v10[2 * v59];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v12)
                    {
                      v60 = *v52;
                      v51 = v59;
                    }
                    else
                    {
                      v60 = *v52;
                      if (*v52 >= v52[2])
                      {
                        v51 = v59;
                      }
                      else
                      {
                        v60 = v52[2];
                        v52 += 2;
                      }
                    }
                  }
                  while (v60 >= v56);
                  *v55 = v56;
                  v55[1] = v57;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v61 = (unint64_t)v11 >> 4;
            do
            {
              v62 = 0;
              v83 = *(_OWORD *)v10;
              v63 = (__n128 *)v10;
              do
              {
                v64 = &v63[v62 + 1];
                v65 = (2 * v62) | 1;
                v66 = 2 * v62 + 2;
                if (v66 < v61 && v64->n128_u64[0] < v64[1].n128_u64[0])
                {
                  ++v64;
                  v65 = v66;
                }
                *v63 = *v64;
                v63 = v64;
                v62 = v65;
              }
              while (v65 <= (uint64_t)((unint64_t)(v61 - 2) >> 1));
              a2 -= 2;
              if (v64 == (__n128 *)a2)
              {
                a5.n128_u64[0] = v83;
                *v64 = (__n128)v83;
              }
              else
              {
                *v64 = *(__n128 *)a2;
                a5.n128_u64[0] = v83;
                *(_OWORD *)a2 = v83;
                v67 = (char *)v64 - (char *)v10 + 16;
                if (v67 >= 17)
                {
                  v68 = (((unint64_t)v67 >> 4) - 2) >> 1;
                  v69 = (__n128 *)&v10[2 * v68];
                  v70 = v64->n128_u64[0];
                  if (v69->n128_u64[0] < v64->n128_u64[0])
                  {
                    v71 = v64->n128_u64[1];
                    do
                    {
                      v72 = v64;
                      v64 = v69;
                      a5 = *v69;
                      *v72 = *v69;
                      if (!v68)
                        break;
                      v68 = (v68 - 1) >> 1;
                      v69 = (__n128 *)&v10[2 * v68];
                    }
                    while (v69->n128_u64[0] < v70);
                    v64->n128_u64[0] = v70;
                    v64->n128_u64[1] = v71;
                  }
                }
              }
            }
            while (v61-- > 2);
          }
          return a5.n128_f64[0];
        }
        v13 = v12 >> 1;
        v14 = &v10[2 * (v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16 * (v12 >> 1)), (unint64_t *)a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16 * (v12 >> 1)), a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16), v14 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v13), a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v14 - 1, v14, (unint64_t *)(a1 + 16 + 16 * v13));
          v80 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(__n128 *)v14 = v80;
        }
        --a3;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 16) >= *(_QWORD *)a1)
        {
          a5 = *(__n128 *)a1;
          v29 = *(_QWORD *)a1;
          if (*(_QWORD *)a1 >= *(_QWORD *)v9)
          {
            v31 = a1 + 16;
            do
            {
              v10 = (unint64_t *)v31;
              if (v31 >= (unint64_t)a2)
                break;
              v31 += 16;
            }
            while (v29 >= *v10);
          }
          else
          {
            v10 = (unint64_t *)a1;
            do
            {
              v30 = v10[2];
              v10 += 2;
            }
            while (v29 >= v30);
          }
          v32 = a2;
          if (v10 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v33);
          }
          while (v10 < v32)
          {
            v81 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v32;
            *(_OWORD *)v32 = v81;
            do
            {
              v34 = v10[2];
              v10 += 2;
            }
            while (v29 >= v34);
            do
            {
              v35 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v35);
          }
          v36 = v10 - 2;
          if (v10 - 2 != (unint64_t *)a1)
            *(_OWORD *)a1 = *(_OWORD *)v36;
          a4 = 0;
          *(__n128 *)v36 = a5;
          continue;
        }
        v15 = *(__n128 *)a1;
        v16 = *(_QWORD *)a1;
        v17 = (unint64_t *)a1;
        do
        {
          v18 = v17;
          v19 = v17[2];
          v17 += 2;
        }
        while (v19 < v16);
        v20 = a2;
        if (v18 == (unint64_t *)a1)
        {
          v20 = a2;
          do
          {
            if (v17 >= v20)
              break;
            v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 >= v16);
        }
        else
        {
          do
          {
            v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 >= v16);
        }
        if (v17 < v20)
        {
          v23 = v17;
          v24 = v20;
          do
          {
            v25 = *(_OWORD *)v23;
            *(_OWORD *)v23 = *(_OWORD *)v24;
            *(_OWORD *)v24 = v25;
            do
            {
              v18 = v23;
              v26 = v23[2];
              v23 += 2;
            }
            while (v26 < v16);
            do
            {
              v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (v27 >= v16);
          }
          while (v23 < v24);
        }
        if (v18 != (unint64_t *)a1)
          *(_OWORD *)a1 = *(_OWORD *)v18;
        *(__n128 *)v18 = v15;
        if (v17 < v20)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v18, a3, a4 & 1);
          a4 = 0;
          v10 = v18 + 2;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v18);
        v10 = v18 + 2;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v18 + 2), a2))
        {
          if (v28)
            continue;
          goto LABEL_29;
        }
        a2 = v18;
        if (!v28)
          goto LABEL_1;
        return a5.n128_f64[0];
    }
  }
}

  v9 = (__int128 *)(a2 - 2);
  v10 = (unint64_t *)a1;
  while (2)
  {
    a1 = (uint64_t)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        if (*(_QWORD *)v9 < *v10)
        {
          v82 = *(_OWORD *)v10;
          *(_OWORD *)v10 = *v9;
          a5.n128_u64[0] = v82;
          *v9 = v82;
        }
        return a5.n128_f64[0];
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, a2 - 2);
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (_OWORD *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (__n128 *)v10 + 3, (__n128 *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v11 <= 383)
        {
          n128_u64 = v10 + 2;
          v39 = v10 == a2 || n128_u64 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v10;
              do
              {
                v42 = n128_u64;
                v43 = v41[2];
                if (v43 < *v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    a5 = *(__n128 *)((char *)v10 + v45);
                    *(__n128 *)((char *)v10 + v45 + 16) = a5;
                    if (!v45)
                      break;
                    v46 = *(unint64_t *)((char *)v10 + v45 - 16);
                    v45 -= 16;
                    if (v43 >= v46)
                    {
                      v47 = (unint64_t *)((char *)v10 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v10;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                n128_u64 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v74 = (__n128 *)n128_u64;
              v75 = *(_QWORD *)(a1 + 16);
              if (v75 < *(_QWORD *)a1)
              {
                v76 = *(_QWORD *)(a1 + 24);
                v77 = v74;
                do
                {
                  a5 = v77[-1];
                  *v77 = a5;
                  v78 = v77[-2].n128_u64[0];
                  --v77;
                }
                while (v75 < v78);
                v77->n128_u64[0] = v75;
                v77->n128_u64[1] = v76;
              }
              n128_u64 = v74[1].n128_u64;
              a1 = (uint64_t)v74;
            }
            while (&v74[1] != (__n128 *)a2);
          }
          return a5.n128_f64[0];
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v48 = (v12 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v10[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v12)
                {
                  v53 = *v52;
                }
                else
                {
                  v53 = v52[2];
                  v54 = *v52 >= v53;
                  if (*v52 < v53)
                    v52 += 2;
                  else
                    v53 = *v52;
                  if (!v54)
                    v51 = 2 * v50 + 2;
                }
                v55 = &v10[2 * v50];
                v56 = *v55;
                if (v53 >= *v55)
                {
                  v57 = v55[1];
                  do
                  {
                    v58 = v55;
                    v55 = v52;
                    *(_OWORD *)v58 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v59 = (2 * v51) | 1;
                    v52 = &v10[2 * v59];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v12)
                    {
                      v60 = *v52;
                      v51 = v59;
                    }
                    else
                    {
                      v60 = *v52;
                      if (*v52 >= v52[2])
                      {
                        v51 = v59;
                      }
                      else
                      {
                        v60 = v52[2];
                        v52 += 2;
                      }
                    }
                  }
                  while (v60 >= v56);
                  *v55 = v56;
                  v55[1] = v57;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v61 = (unint64_t)v11 >> 4;
            do
            {
              v62 = 0;
              v83 = *(_OWORD *)v10;
              v63 = (__n128 *)v10;
              do
              {
                v64 = &v63[v62 + 1];
                v65 = (2 * v62) | 1;
                v66 = 2 * v62 + 2;
                if (v66 < v61 && v64->n128_u64[0] < v64[1].n128_u64[0])
                {
                  ++v64;
                  v65 = v66;
                }
                *v63 = *v64;
                v63 = v64;
                v62 = v65;
              }
              while (v65 <= (uint64_t)((unint64_t)(v61 - 2) >> 1));
              a2 -= 2;
              if (v64 == (__n128 *)a2)
              {
                a5.n128_u64[0] = v83;
                *v64 = (__n128)v83;
              }
              else
              {
                *v64 = *(__n128 *)a2;
                a5.n128_u64[0] = v83;
                *(_OWORD *)a2 = v83;
                v67 = (char *)v64 - (char *)v10 + 16;
                if (v67 >= 17)
                {
                  v68 = (((unint64_t)v67 >> 4) - 2) >> 1;
                  v69 = (__n128 *)&v10[2 * v68];
                  v70 = v64->n128_u64[0];
                  if (v69->n128_u64[0] < v64->n128_u64[0])
                  {
                    v71 = v64->n128_u64[1];
                    do
                    {
                      v72 = v64;
                      v64 = v69;
                      a5 = *v69;
                      *v72 = *v69;
                      if (!v68)
                        break;
                      v68 = (v68 - 1) >> 1;
                      v69 = (__n128 *)&v10[2 * v68];
                    }
                    while (v69->n128_u64[0] < v70);
                    v64->n128_u64[0] = v70;
                    v64->n128_u64[1] = v71;
                  }
                }
              }
            }
            while (v61-- > 2);
          }
          return a5.n128_f64[0];
        }
        v13 = v12 >> 1;
        v14 = &v10[2 * (v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16 * (v12 >> 1)), (unint64_t *)a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16 * (v12 >> 1)), a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16), v14 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v13), a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v14 - 1, v14, (unint64_t *)(a1 + 16 + 16 * v13));
          v80 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(__n128 *)v14 = v80;
        }
        --a3;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 16) >= *(_QWORD *)a1)
        {
          a5 = *(__n128 *)a1;
          v29 = *(_QWORD *)a1;
          if (*(_QWORD *)a1 >= *(_QWORD *)v9)
          {
            v31 = a1 + 16;
            do
            {
              v10 = (unint64_t *)v31;
              if (v31 >= (unint64_t)a2)
                break;
              v31 += 16;
            }
            while (v29 >= *v10);
          }
          else
          {
            v10 = (unint64_t *)a1;
            do
            {
              v30 = v10[2];
              v10 += 2;
            }
            while (v29 >= v30);
          }
          v32 = a2;
          if (v10 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v33);
          }
          while (v10 < v32)
          {
            v81 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v32;
            *(_OWORD *)v32 = v81;
            do
            {
              v34 = v10[2];
              v10 += 2;
            }
            while (v29 >= v34);
            do
            {
              v35 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v35);
          }
          v36 = v10 - 2;
          if (v10 - 2 != (unint64_t *)a1)
            *(_OWORD *)a1 = *(_OWORD *)v36;
          a4 = 0;
          *(__n128 *)v36 = a5;
          continue;
        }
        v15 = *(__n128 *)a1;
        v16 = *(_QWORD *)a1;
        v17 = (unint64_t *)a1;
        do
        {
          v18 = v17;
          v19 = v17[2];
          v17 += 2;
        }
        while (v19 < v16);
        v20 = a2;
        if (v18 == (unint64_t *)a1)
        {
          v20 = a2;
          do
          {
            if (v17 >= v20)
              break;
            v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 >= v16);
        }
        else
        {
          do
          {
            v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 >= v16);
        }
        if (v17 < v20)
        {
          v23 = v17;
          v24 = v20;
          do
          {
            v25 = *(_OWORD *)v23;
            *(_OWORD *)v23 = *(_OWORD *)v24;
            *(_OWORD *)v24 = v25;
            do
            {
              v18 = v23;
              v26 = v23[2];
              v23 += 2;
            }
            while (v26 < v16);
            do
            {
              v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (v27 >= v16);
          }
          while (v23 < v24);
        }
        if (v18 != (unint64_t *)a1)
          *(_OWORD *)a1 = *(_OWORD *)v18;
        *(__n128 *)v18 = v15;
        if (v17 < v20)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v18, a3, a4 & 1);
          a4 = 0;
          v10 = v18 + 2;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v18);
        v10 = v18 + 2;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v18 + 2), a2))
        {
          if (v28)
            continue;
          goto LABEL_29;
        }
        a2 = v18;
        if (!v28)
          goto LABEL_1;
        return a5.n128_f64[0];
    }
  }
}

  v9 = (__int128 *)(a2 - 2);
  v10 = (unint64_t *)a1;
  while (2)
  {
    a1 = (uint64_t)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        if (*(_QWORD *)v9 < *v10)
        {
          v82 = *(_OWORD *)v10;
          *(_OWORD *)v10 = *v9;
          a5.n128_u64[0] = v82;
          *v9 = v82;
        }
        return a5.n128_f64[0];
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, a2 - 2);
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (_OWORD *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (__n128 *)v10 + 3, (__n128 *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v11 <= 383)
        {
          n128_u64 = v10 + 2;
          v39 = v10 == a2 || n128_u64 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v10;
              do
              {
                v42 = n128_u64;
                v43 = v41[2];
                if (v43 < *v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    a5 = *(__n128 *)((char *)v10 + v45);
                    *(__n128 *)((char *)v10 + v45 + 16) = a5;
                    if (!v45)
                      break;
                    v46 = *(unint64_t *)((char *)v10 + v45 - 16);
                    v45 -= 16;
                    if (v43 >= v46)
                    {
                      v47 = (unint64_t *)((char *)v10 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v10;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                n128_u64 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v74 = (__n128 *)n128_u64;
              v75 = *(_QWORD *)(a1 + 16);
              if (v75 < *(_QWORD *)a1)
              {
                v76 = *(_QWORD *)(a1 + 24);
                v77 = v74;
                do
                {
                  a5 = v77[-1];
                  *v77 = a5;
                  v78 = v77[-2].n128_u64[0];
                  --v77;
                }
                while (v75 < v78);
                v77->n128_u64[0] = v75;
                v77->n128_u64[1] = v76;
              }
              n128_u64 = v74[1].n128_u64;
              a1 = (uint64_t)v74;
            }
            while (&v74[1] != (__n128 *)a2);
          }
          return a5.n128_f64[0];
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v48 = (v12 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v10[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v12)
                {
                  v53 = *v52;
                }
                else
                {
                  v53 = v52[2];
                  v54 = *v52 >= v53;
                  if (*v52 < v53)
                    v52 += 2;
                  else
                    v53 = *v52;
                  if (!v54)
                    v51 = 2 * v50 + 2;
                }
                v55 = &v10[2 * v50];
                v56 = *v55;
                if (v53 >= *v55)
                {
                  v57 = v55[1];
                  do
                  {
                    v58 = v55;
                    v55 = v52;
                    *(_OWORD *)v58 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v59 = (2 * v51) | 1;
                    v52 = &v10[2 * v59];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v12)
                    {
                      v60 = *v52;
                      v51 = v59;
                    }
                    else
                    {
                      v60 = *v52;
                      if (*v52 >= v52[2])
                      {
                        v51 = v59;
                      }
                      else
                      {
                        v60 = v52[2];
                        v52 += 2;
                      }
                    }
                  }
                  while (v60 >= v56);
                  *v55 = v56;
                  v55[1] = v57;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v61 = (unint64_t)v11 >> 4;
            do
            {
              v62 = 0;
              v83 = *(_OWORD *)v10;
              v63 = (__n128 *)v10;
              do
              {
                v64 = &v63[v62 + 1];
                v65 = (2 * v62) | 1;
                v66 = 2 * v62 + 2;
                if (v66 < v61 && v64->n128_u64[0] < v64[1].n128_u64[0])
                {
                  ++v64;
                  v65 = v66;
                }
                *v63 = *v64;
                v63 = v64;
                v62 = v65;
              }
              while (v65 <= (uint64_t)((unint64_t)(v61 - 2) >> 1));
              a2 -= 2;
              if (v64 == (__n128 *)a2)
              {
                a5.n128_u64[0] = v83;
                *v64 = (__n128)v83;
              }
              else
              {
                *v64 = *(__n128 *)a2;
                a5.n128_u64[0] = v83;
                *(_OWORD *)a2 = v83;
                v67 = (char *)v64 - (char *)v10 + 16;
                if (v67 >= 17)
                {
                  v68 = (((unint64_t)v67 >> 4) - 2) >> 1;
                  v69 = (__n128 *)&v10[2 * v68];
                  v70 = v64->n128_u64[0];
                  if (v69->n128_u64[0] < v64->n128_u64[0])
                  {
                    v71 = v64->n128_u64[1];
                    do
                    {
                      v72 = v64;
                      v64 = v69;
                      a5 = *v69;
                      *v72 = *v69;
                      if (!v68)
                        break;
                      v68 = (v68 - 1) >> 1;
                      v69 = (__n128 *)&v10[2 * v68];
                    }
                    while (v69->n128_u64[0] < v70);
                    v64->n128_u64[0] = v70;
                    v64->n128_u64[1] = v71;
                  }
                }
              }
            }
            while (v61-- > 2);
          }
          return a5.n128_f64[0];
        }
        v13 = v12 >> 1;
        v14 = &v10[2 * (v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16 * (v12 >> 1)), (unint64_t *)a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16 * (v12 >> 1)), a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16), v14 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v13), a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v14 - 1, v14, (unint64_t *)(a1 + 16 + 16 * v13));
          v80 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(__n128 *)v14 = v80;
        }
        --a3;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 16) >= *(_QWORD *)a1)
        {
          a5 = *(__n128 *)a1;
          v29 = *(_QWORD *)a1;
          if (*(_QWORD *)a1 >= *(_QWORD *)v9)
          {
            v31 = a1 + 16;
            do
            {
              v10 = (unint64_t *)v31;
              if (v31 >= (unint64_t)a2)
                break;
              v31 += 16;
            }
            while (v29 >= *v10);
          }
          else
          {
            v10 = (unint64_t *)a1;
            do
            {
              v30 = v10[2];
              v10 += 2;
            }
            while (v29 >= v30);
          }
          v32 = a2;
          if (v10 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v33);
          }
          while (v10 < v32)
          {
            v81 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v32;
            *(_OWORD *)v32 = v81;
            do
            {
              v34 = v10[2];
              v10 += 2;
            }
            while (v29 >= v34);
            do
            {
              v35 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v35);
          }
          v36 = v10 - 2;
          if (v10 - 2 != (unint64_t *)a1)
            *(_OWORD *)a1 = *(_OWORD *)v36;
          a4 = 0;
          *(__n128 *)v36 = a5;
          continue;
        }
        v15 = *(__n128 *)a1;
        v16 = *(_QWORD *)a1;
        v17 = (unint64_t *)a1;
        do
        {
          v18 = v17;
          v19 = v17[2];
          v17 += 2;
        }
        while (v19 < v16);
        v20 = a2;
        if (v18 == (unint64_t *)a1)
        {
          v20 = a2;
          do
          {
            if (v17 >= v20)
              break;
            v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 >= v16);
        }
        else
        {
          do
          {
            v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 >= v16);
        }
        if (v17 < v20)
        {
          v23 = v17;
          v24 = v20;
          do
          {
            v25 = *(_OWORD *)v23;
            *(_OWORD *)v23 = *(_OWORD *)v24;
            *(_OWORD *)v24 = v25;
            do
            {
              v18 = v23;
              v26 = v23[2];
              v23 += 2;
            }
            while (v26 < v16);
            do
            {
              v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (v27 >= v16);
          }
          while (v23 < v24);
        }
        if (v18 != (unint64_t *)a1)
          *(_OWORD *)a1 = *(_OWORD *)v18;
        *(__n128 *)v18 = v15;
        if (v17 < v20)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v18, a3, a4 & 1);
          a4 = 0;
          v10 = v18 + 2;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v18);
        v10 = v18 + 2;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v18 + 2), a2))
        {
          if (v28)
            continue;
          goto LABEL_29;
        }
        a2 = v18;
        if (!v28)
          goto LABEL_1;
        return a5.n128_f64[0];
    }
  }
}

  v9 = (__int128 *)(a2 - 2);
  v10 = (unint64_t *)a1;
  while (2)
  {
    a1 = (uint64_t)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        if (*(_QWORD *)v9 < *v10)
        {
          v82 = *(_OWORD *)v10;
          *(_OWORD *)v10 = *v9;
          a5.n128_u64[0] = v82;
          *v9 = v82;
        }
        return a5.n128_f64[0];
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, a2 - 2);
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (_OWORD *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (__n128 *)v10 + 3, (__n128 *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v11 <= 383)
        {
          n128_u64 = v10 + 2;
          v39 = v10 == a2 || n128_u64 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v10;
              do
              {
                v42 = n128_u64;
                v43 = v41[2];
                if (v43 < *v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    a5 = *(__n128 *)((char *)v10 + v45);
                    *(__n128 *)((char *)v10 + v45 + 16) = a5;
                    if (!v45)
                      break;
                    v46 = *(unint64_t *)((char *)v10 + v45 - 16);
                    v45 -= 16;
                    if (v43 >= v46)
                    {
                      v47 = (unint64_t *)((char *)v10 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v10;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                n128_u64 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v74 = (__n128 *)n128_u64;
              v75 = *(_QWORD *)(a1 + 16);
              if (v75 < *(_QWORD *)a1)
              {
                v76 = *(_QWORD *)(a1 + 24);
                v77 = v74;
                do
                {
                  a5 = v77[-1];
                  *v77 = a5;
                  v78 = v77[-2].n128_u64[0];
                  --v77;
                }
                while (v75 < v78);
                v77->n128_u64[0] = v75;
                v77->n128_u64[1] = v76;
              }
              n128_u64 = v74[1].n128_u64;
              a1 = (uint64_t)v74;
            }
            while (&v74[1] != (__n128 *)a2);
          }
          return a5.n128_f64[0];
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v48 = (v12 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v10[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v12)
                {
                  v53 = *v52;
                }
                else
                {
                  v53 = v52[2];
                  v54 = *v52 >= v53;
                  if (*v52 < v53)
                    v52 += 2;
                  else
                    v53 = *v52;
                  if (!v54)
                    v51 = 2 * v50 + 2;
                }
                v55 = &v10[2 * v50];
                v56 = *v55;
                if (v53 >= *v55)
                {
                  v57 = v55[1];
                  do
                  {
                    v58 = v55;
                    v55 = v52;
                    *(_OWORD *)v58 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v59 = (2 * v51) | 1;
                    v52 = &v10[2 * v59];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v12)
                    {
                      v60 = *v52;
                      v51 = v59;
                    }
                    else
                    {
                      v60 = *v52;
                      if (*v52 >= v52[2])
                      {
                        v51 = v59;
                      }
                      else
                      {
                        v60 = v52[2];
                        v52 += 2;
                      }
                    }
                  }
                  while (v60 >= v56);
                  *v55 = v56;
                  v55[1] = v57;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v61 = (unint64_t)v11 >> 4;
            do
            {
              v62 = 0;
              v83 = *(_OWORD *)v10;
              v63 = (__n128 *)v10;
              do
              {
                v64 = &v63[v62 + 1];
                v65 = (2 * v62) | 1;
                v66 = 2 * v62 + 2;
                if (v66 < v61 && v64->n128_u64[0] < v64[1].n128_u64[0])
                {
                  ++v64;
                  v65 = v66;
                }
                *v63 = *v64;
                v63 = v64;
                v62 = v65;
              }
              while (v65 <= (uint64_t)((unint64_t)(v61 - 2) >> 1));
              a2 -= 2;
              if (v64 == (__n128 *)a2)
              {
                a5.n128_u64[0] = v83;
                *v64 = (__n128)v83;
              }
              else
              {
                *v64 = *(__n128 *)a2;
                a5.n128_u64[0] = v83;
                *(_OWORD *)a2 = v83;
                v67 = (char *)v64 - (char *)v10 + 16;
                if (v67 >= 17)
                {
                  v68 = (((unint64_t)v67 >> 4) - 2) >> 1;
                  v69 = (__n128 *)&v10[2 * v68];
                  v70 = v64->n128_u64[0];
                  if (v69->n128_u64[0] < v64->n128_u64[0])
                  {
                    v71 = v64->n128_u64[1];
                    do
                    {
                      v72 = v64;
                      v64 = v69;
                      a5 = *v69;
                      *v72 = *v69;
                      if (!v68)
                        break;
                      v68 = (v68 - 1) >> 1;
                      v69 = (__n128 *)&v10[2 * v68];
                    }
                    while (v69->n128_u64[0] < v70);
                    v64->n128_u64[0] = v70;
                    v64->n128_u64[1] = v71;
                  }
                }
              }
            }
            while (v61-- > 2);
          }
          return a5.n128_f64[0];
        }
        v13 = v12 >> 1;
        v14 = &v10[2 * (v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16 * (v12 >> 1)), (unint64_t *)a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16 * (v12 >> 1)), a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16), v14 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v13), a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v14 - 1, v14, (unint64_t *)(a1 + 16 + 16 * v13));
          v80 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(__n128 *)v14 = v80;
        }
        --a3;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 16) >= *(_QWORD *)a1)
        {
          a5 = *(__n128 *)a1;
          v29 = *(_QWORD *)a1;
          if (*(_QWORD *)a1 >= *(_QWORD *)v9)
          {
            v31 = a1 + 16;
            do
            {
              v10 = (unint64_t *)v31;
              if (v31 >= (unint64_t)a2)
                break;
              v31 += 16;
            }
            while (v29 >= *v10);
          }
          else
          {
            v10 = (unint64_t *)a1;
            do
            {
              v30 = v10[2];
              v10 += 2;
            }
            while (v29 >= v30);
          }
          v32 = a2;
          if (v10 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v33);
          }
          while (v10 < v32)
          {
            v81 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v32;
            *(_OWORD *)v32 = v81;
            do
            {
              v34 = v10[2];
              v10 += 2;
            }
            while (v29 >= v34);
            do
            {
              v35 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v35);
          }
          v36 = v10 - 2;
          if (v10 - 2 != (unint64_t *)a1)
            *(_OWORD *)a1 = *(_OWORD *)v36;
          a4 = 0;
          *(__n128 *)v36 = a5;
          continue;
        }
        v15 = *(__n128 *)a1;
        v16 = *(_QWORD *)a1;
        v17 = (unint64_t *)a1;
        do
        {
          v18 = v17;
          v19 = v17[2];
          v17 += 2;
        }
        while (v19 < v16);
        v20 = a2;
        if (v18 == (unint64_t *)a1)
        {
          v20 = a2;
          do
          {
            if (v17 >= v20)
              break;
            v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 >= v16);
        }
        else
        {
          do
          {
            v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 >= v16);
        }
        if (v17 < v20)
        {
          v23 = v17;
          v24 = v20;
          do
          {
            v25 = *(_OWORD *)v23;
            *(_OWORD *)v23 = *(_OWORD *)v24;
            *(_OWORD *)v24 = v25;
            do
            {
              v18 = v23;
              v26 = v23[2];
              v23 += 2;
            }
            while (v26 < v16);
            do
            {
              v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (v27 >= v16);
          }
          while (v23 < v24);
        }
        if (v18 != (unint64_t *)a1)
          *(_OWORD *)a1 = *(_OWORD *)v18;
        *(__n128 *)v18 = v15;
        if (v17 < v20)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v18, a3, a4 & 1);
          a4 = 0;
          v10 = v18 + 2;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v18);
        v10 = v18 + 2;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v18 + 2), a2))
        {
          if (v28)
            continue;
          goto LABEL_29;
        }
        a2 = v18;
        if (!v28)
          goto LABEL_1;
        return a5.n128_f64[0];
    }
  }
}

  v9 = (__int128 *)(a2 - 2);
  v10 = (unint64_t *)a1;
  while (2)
  {
    a1 = (uint64_t)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        if (*(_QWORD *)v9 < *v10)
        {
          v82 = *(_OWORD *)v10;
          *(_OWORD *)v10 = *v9;
          a5.n128_u64[0] = v82;
          *v9 = v82;
        }
        return a5.n128_f64[0];
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, a2 - 2);
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (_OWORD *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (__n128 *)v10 + 3, (__n128 *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v11 <= 383)
        {
          n128_u64 = v10 + 2;
          v39 = v10 == a2 || n128_u64 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v10;
              do
              {
                v42 = n128_u64;
                v43 = v41[2];
                if (v43 < *v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    a5 = *(__n128 *)((char *)v10 + v45);
                    *(__n128 *)((char *)v10 + v45 + 16) = a5;
                    if (!v45)
                      break;
                    v46 = *(unint64_t *)((char *)v10 + v45 - 16);
                    v45 -= 16;
                    if (v43 >= v46)
                    {
                      v47 = (unint64_t *)((char *)v10 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v10;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                n128_u64 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v74 = (__n128 *)n128_u64;
              v75 = *(_QWORD *)(a1 + 16);
              if (v75 < *(_QWORD *)a1)
              {
                v76 = *(_QWORD *)(a1 + 24);
                v77 = v74;
                do
                {
                  a5 = v77[-1];
                  *v77 = a5;
                  v78 = v77[-2].n128_u64[0];
                  --v77;
                }
                while (v75 < v78);
                v77->n128_u64[0] = v75;
                v77->n128_u64[1] = v76;
              }
              n128_u64 = v74[1].n128_u64;
              a1 = (uint64_t)v74;
            }
            while (&v74[1] != (__n128 *)a2);
          }
          return a5.n128_f64[0];
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v48 = (v12 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v10[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v12)
                {
                  v53 = *v52;
                }
                else
                {
                  v53 = v52[2];
                  v54 = *v52 >= v53;
                  if (*v52 < v53)
                    v52 += 2;
                  else
                    v53 = *v52;
                  if (!v54)
                    v51 = 2 * v50 + 2;
                }
                v55 = &v10[2 * v50];
                v56 = *v55;
                if (v53 >= *v55)
                {
                  v57 = v55[1];
                  do
                  {
                    v58 = v55;
                    v55 = v52;
                    *(_OWORD *)v58 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v59 = (2 * v51) | 1;
                    v52 = &v10[2 * v59];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v12)
                    {
                      v60 = *v52;
                      v51 = v59;
                    }
                    else
                    {
                      v60 = *v52;
                      if (*v52 >= v52[2])
                      {
                        v51 = v59;
                      }
                      else
                      {
                        v60 = v52[2];
                        v52 += 2;
                      }
                    }
                  }
                  while (v60 >= v56);
                  *v55 = v56;
                  v55[1] = v57;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v61 = (unint64_t)v11 >> 4;
            do
            {
              v62 = 0;
              v83 = *(_OWORD *)v10;
              v63 = (__n128 *)v10;
              do
              {
                v64 = &v63[v62 + 1];
                v65 = (2 * v62) | 1;
                v66 = 2 * v62 + 2;
                if (v66 < v61 && v64->n128_u64[0] < v64[1].n128_u64[0])
                {
                  ++v64;
                  v65 = v66;
                }
                *v63 = *v64;
                v63 = v64;
                v62 = v65;
              }
              while (v65 <= (uint64_t)((unint64_t)(v61 - 2) >> 1));
              a2 -= 2;
              if (v64 == (__n128 *)a2)
              {
                a5.n128_u64[0] = v83;
                *v64 = (__n128)v83;
              }
              else
              {
                *v64 = *(__n128 *)a2;
                a5.n128_u64[0] = v83;
                *(_OWORD *)a2 = v83;
                v67 = (char *)v64 - (char *)v10 + 16;
                if (v67 >= 17)
                {
                  v68 = (((unint64_t)v67 >> 4) - 2) >> 1;
                  v69 = (__n128 *)&v10[2 * v68];
                  v70 = v64->n128_u64[0];
                  if (v69->n128_u64[0] < v64->n128_u64[0])
                  {
                    v71 = v64->n128_u64[1];
                    do
                    {
                      v72 = v64;
                      v64 = v69;
                      a5 = *v69;
                      *v72 = *v69;
                      if (!v68)
                        break;
                      v68 = (v68 - 1) >> 1;
                      v69 = (__n128 *)&v10[2 * v68];
                    }
                    while (v69->n128_u64[0] < v70);
                    v64->n128_u64[0] = v70;
                    v64->n128_u64[1] = v71;
                  }
                }
              }
            }
            while (v61-- > 2);
          }
          return a5.n128_f64[0];
        }
        v13 = v12 >> 1;
        v14 = &v10[2 * (v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16 * (v12 >> 1)), (unint64_t *)a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16 * (v12 >> 1)), a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16), v14 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v13), a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v14 - 1, v14, (unint64_t *)(a1 + 16 + 16 * v13));
          v80 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(__n128 *)v14 = v80;
        }
        --a3;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 16) >= *(_QWORD *)a1)
        {
          a5 = *(__n128 *)a1;
          v29 = *(_QWORD *)a1;
          if (*(_QWORD *)a1 >= *(_QWORD *)v9)
          {
            v31 = a1 + 16;
            do
            {
              v10 = (unint64_t *)v31;
              if (v31 >= (unint64_t)a2)
                break;
              v31 += 16;
            }
            while (v29 >= *v10);
          }
          else
          {
            v10 = (unint64_t *)a1;
            do
            {
              v30 = v10[2];
              v10 += 2;
            }
            while (v29 >= v30);
          }
          v32 = a2;
          if (v10 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v33);
          }
          while (v10 < v32)
          {
            v81 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v32;
            *(_OWORD *)v32 = v81;
            do
            {
              v34 = v10[2];
              v10 += 2;
            }
            while (v29 >= v34);
            do
            {
              v35 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v35);
          }
          v36 = v10 - 2;
          if (v10 - 2 != (unint64_t *)a1)
            *(_OWORD *)a1 = *(_OWORD *)v36;
          a4 = 0;
          *(__n128 *)v36 = a5;
          continue;
        }
        v15 = *(__n128 *)a1;
        v16 = *(_QWORD *)a1;
        v17 = (unint64_t *)a1;
        do
        {
          v18 = v17;
          v19 = v17[2];
          v17 += 2;
        }
        while (v19 < v16);
        v20 = a2;
        if (v18 == (unint64_t *)a1)
        {
          v20 = a2;
          do
          {
            if (v17 >= v20)
              break;
            v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 >= v16);
        }
        else
        {
          do
          {
            v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 >= v16);
        }
        if (v17 < v20)
        {
          v23 = v17;
          v24 = v20;
          do
          {
            v25 = *(_OWORD *)v23;
            *(_OWORD *)v23 = *(_OWORD *)v24;
            *(_OWORD *)v24 = v25;
            do
            {
              v18 = v23;
              v26 = v23[2];
              v23 += 2;
            }
            while (v26 < v16);
            do
            {
              v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (v27 >= v16);
          }
          while (v23 < v24);
        }
        if (v18 != (unint64_t *)a1)
          *(_OWORD *)a1 = *(_OWORD *)v18;
        *(__n128 *)v18 = v15;
        if (v17 < v20)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v18, a3, a4 & 1);
          a4 = 0;
          v10 = v18 + 2;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v18);
        v10 = v18 + 2;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v18 + 2), a2))
        {
          if (v28)
            continue;
          goto LABEL_29;
        }
        a2 = v18;
        if (!v28)
          goto LABEL_1;
        return a5.n128_f64[0];
    }
  }
}

  v9 = (__int128 *)(a2 - 2);
  v10 = (unint64_t *)a1;
  while (2)
  {
    a1 = (uint64_t)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        if (*(_QWORD *)v9 < *v10)
        {
          v82 = *(_OWORD *)v10;
          *(_OWORD *)v10 = *v9;
          a5.n128_u64[0] = v82;
          *v9 = v82;
        }
        return a5.n128_f64[0];
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, a2 - 2);
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (_OWORD *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (__n128 *)v10 + 3, (__n128 *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v11 <= 383)
        {
          n128_u64 = v10 + 2;
          v39 = v10 == a2 || n128_u64 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v10;
              do
              {
                v42 = n128_u64;
                v43 = v41[2];
                if (v43 < *v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    a5 = *(__n128 *)((char *)v10 + v45);
                    *(__n128 *)((char *)v10 + v45 + 16) = a5;
                    if (!v45)
                      break;
                    v46 = *(unint64_t *)((char *)v10 + v45 - 16);
                    v45 -= 16;
                    if (v43 >= v46)
                    {
                      v47 = (unint64_t *)((char *)v10 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v10;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                n128_u64 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v74 = (__n128 *)n128_u64;
              v75 = *(_QWORD *)(a1 + 16);
              if (v75 < *(_QWORD *)a1)
              {
                v76 = *(_QWORD *)(a1 + 24);
                v77 = v74;
                do
                {
                  a5 = v77[-1];
                  *v77 = a5;
                  v78 = v77[-2].n128_u64[0];
                  --v77;
                }
                while (v75 < v78);
                v77->n128_u64[0] = v75;
                v77->n128_u64[1] = v76;
              }
              n128_u64 = v74[1].n128_u64;
              a1 = (uint64_t)v74;
            }
            while (&v74[1] != (__n128 *)a2);
          }
          return a5.n128_f64[0];
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v48 = (v12 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v10[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v12)
                {
                  v53 = *v52;
                }
                else
                {
                  v53 = v52[2];
                  v54 = *v52 >= v53;
                  if (*v52 < v53)
                    v52 += 2;
                  else
                    v53 = *v52;
                  if (!v54)
                    v51 = 2 * v50 + 2;
                }
                v55 = &v10[2 * v50];
                v56 = *v55;
                if (v53 >= *v55)
                {
                  v57 = v55[1];
                  do
                  {
                    v58 = v55;
                    v55 = v52;
                    *(_OWORD *)v58 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v59 = (2 * v51) | 1;
                    v52 = &v10[2 * v59];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v12)
                    {
                      v60 = *v52;
                      v51 = v59;
                    }
                    else
                    {
                      v60 = *v52;
                      if (*v52 >= v52[2])
                      {
                        v51 = v59;
                      }
                      else
                      {
                        v60 = v52[2];
                        v52 += 2;
                      }
                    }
                  }
                  while (v60 >= v56);
                  *v55 = v56;
                  v55[1] = v57;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v61 = (unint64_t)v11 >> 4;
            do
            {
              v62 = 0;
              v83 = *(_OWORD *)v10;
              v63 = (__n128 *)v10;
              do
              {
                v64 = &v63[v62 + 1];
                v65 = (2 * v62) | 1;
                v66 = 2 * v62 + 2;
                if (v66 < v61 && v64->n128_u64[0] < v64[1].n128_u64[0])
                {
                  ++v64;
                  v65 = v66;
                }
                *v63 = *v64;
                v63 = v64;
                v62 = v65;
              }
              while (v65 <= (uint64_t)((unint64_t)(v61 - 2) >> 1));
              a2 -= 2;
              if (v64 == (__n128 *)a2)
              {
                a5.n128_u64[0] = v83;
                *v64 = (__n128)v83;
              }
              else
              {
                *v64 = *(__n128 *)a2;
                a5.n128_u64[0] = v83;
                *(_OWORD *)a2 = v83;
                v67 = (char *)v64 - (char *)v10 + 16;
                if (v67 >= 17)
                {
                  v68 = (((unint64_t)v67 >> 4) - 2) >> 1;
                  v69 = (__n128 *)&v10[2 * v68];
                  v70 = v64->n128_u64[0];
                  if (v69->n128_u64[0] < v64->n128_u64[0])
                  {
                    v71 = v64->n128_u64[1];
                    do
                    {
                      v72 = v64;
                      v64 = v69;
                      a5 = *v69;
                      *v72 = *v69;
                      if (!v68)
                        break;
                      v68 = (v68 - 1) >> 1;
                      v69 = (__n128 *)&v10[2 * v68];
                    }
                    while (v69->n128_u64[0] < v70);
                    v64->n128_u64[0] = v70;
                    v64->n128_u64[1] = v71;
                  }
                }
              }
            }
            while (v61-- > 2);
          }
          return a5.n128_f64[0];
        }
        v13 = v12 >> 1;
        v14 = &v10[2 * (v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16 * (v12 >> 1)), (unint64_t *)a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16 * (v12 >> 1)), a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16), v14 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v13), a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v14 - 1, v14, (unint64_t *)(a1 + 16 + 16 * v13));
          v80 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(__n128 *)v14 = v80;
        }
        --a3;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 16) >= *(_QWORD *)a1)
        {
          a5 = *(__n128 *)a1;
          v29 = *(_QWORD *)a1;
          if (*(_QWORD *)a1 >= *(_QWORD *)v9)
          {
            v31 = a1 + 16;
            do
            {
              v10 = (unint64_t *)v31;
              if (v31 >= (unint64_t)a2)
                break;
              v31 += 16;
            }
            while (v29 >= *v10);
          }
          else
          {
            v10 = (unint64_t *)a1;
            do
            {
              v30 = v10[2];
              v10 += 2;
            }
            while (v29 >= v30);
          }
          v32 = a2;
          if (v10 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v33);
          }
          while (v10 < v32)
          {
            v81 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v32;
            *(_OWORD *)v32 = v81;
            do
            {
              v34 = v10[2];
              v10 += 2;
            }
            while (v29 >= v34);
            do
            {
              v35 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v35);
          }
          v36 = v10 - 2;
          if (v10 - 2 != (unint64_t *)a1)
            *(_OWORD *)a1 = *(_OWORD *)v36;
          a4 = 0;
          *(__n128 *)v36 = a5;
          continue;
        }
        v15 = *(__n128 *)a1;
        v16 = *(_QWORD *)a1;
        v17 = (unint64_t *)a1;
        do
        {
          v18 = v17;
          v19 = v17[2];
          v17 += 2;
        }
        while (v19 < v16);
        v20 = a2;
        if (v18 == (unint64_t *)a1)
        {
          v20 = a2;
          do
          {
            if (v17 >= v20)
              break;
            v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 >= v16);
        }
        else
        {
          do
          {
            v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 >= v16);
        }
        if (v17 < v20)
        {
          v23 = v17;
          v24 = v20;
          do
          {
            v25 = *(_OWORD *)v23;
            *(_OWORD *)v23 = *(_OWORD *)v24;
            *(_OWORD *)v24 = v25;
            do
            {
              v18 = v23;
              v26 = v23[2];
              v23 += 2;
            }
            while (v26 < v16);
            do
            {
              v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (v27 >= v16);
          }
          while (v23 < v24);
        }
        if (v18 != (unint64_t *)a1)
          *(_OWORD *)a1 = *(_OWORD *)v18;
        *(__n128 *)v18 = v15;
        if (v17 < v20)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v18, a3, a4 & 1);
          a4 = 0;
          v10 = v18 + 2;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v18);
        v10 = v18 + 2;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v18 + 2), a2))
        {
          if (v28)
            continue;
          goto LABEL_29;
        }
        a2 = v18;
        if (!v28)
          goto LABEL_1;
        return a5.n128_f64[0];
    }
  }
}

  v9 = (__int128 *)(a2 - 2);
  v10 = (unint64_t *)a1;
  while (2)
  {
    a1 = (uint64_t)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        if (*(_QWORD *)v9 < *v10)
        {
          v82 = *(_OWORD *)v10;
          *(_OWORD *)v10 = *v9;
          a5.n128_u64[0] = v82;
          *v9 = v82;
        }
        return a5.n128_f64[0];
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, a2 - 2);
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (_OWORD *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (__n128 *)v10 + 3, (__n128 *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v11 <= 383)
        {
          n128_u64 = v10 + 2;
          v39 = v10 == a2 || n128_u64 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v10;
              do
              {
                v42 = n128_u64;
                v43 = v41[2];
                if (v43 < *v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    a5 = *(__n128 *)((char *)v10 + v45);
                    *(__n128 *)((char *)v10 + v45 + 16) = a5;
                    if (!v45)
                      break;
                    v46 = *(unint64_t *)((char *)v10 + v45 - 16);
                    v45 -= 16;
                    if (v43 >= v46)
                    {
                      v47 = (unint64_t *)((char *)v10 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v10;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                n128_u64 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v74 = (__n128 *)n128_u64;
              v75 = *(_QWORD *)(a1 + 16);
              if (v75 < *(_QWORD *)a1)
              {
                v76 = *(_QWORD *)(a1 + 24);
                v77 = v74;
                do
                {
                  a5 = v77[-1];
                  *v77 = a5;
                  v78 = v77[-2].n128_u64[0];
                  --v77;
                }
                while (v75 < v78);
                v77->n128_u64[0] = v75;
                v77->n128_u64[1] = v76;
              }
              n128_u64 = v74[1].n128_u64;
              a1 = (uint64_t)v74;
            }
            while (&v74[1] != (__n128 *)a2);
          }
          return a5.n128_f64[0];
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v48 = (v12 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v10[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v12)
                {
                  v53 = *v52;
                }
                else
                {
                  v53 = v52[2];
                  v54 = *v52 >= v53;
                  if (*v52 < v53)
                    v52 += 2;
                  else
                    v53 = *v52;
                  if (!v54)
                    v51 = 2 * v50 + 2;
                }
                v55 = &v10[2 * v50];
                v56 = *v55;
                if (v53 >= *v55)
                {
                  v57 = v55[1];
                  do
                  {
                    v58 = v55;
                    v55 = v52;
                    *(_OWORD *)v58 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v59 = (2 * v51) | 1;
                    v52 = &v10[2 * v59];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v12)
                    {
                      v60 = *v52;
                      v51 = v59;
                    }
                    else
                    {
                      v60 = *v52;
                      if (*v52 >= v52[2])
                      {
                        v51 = v59;
                      }
                      else
                      {
                        v60 = v52[2];
                        v52 += 2;
                      }
                    }
                  }
                  while (v60 >= v56);
                  *v55 = v56;
                  v55[1] = v57;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v61 = (unint64_t)v11 >> 4;
            do
            {
              v62 = 0;
              v83 = *(_OWORD *)v10;
              v63 = (__n128 *)v10;
              do
              {
                v64 = &v63[v62 + 1];
                v65 = (2 * v62) | 1;
                v66 = 2 * v62 + 2;
                if (v66 < v61 && v64->n128_u64[0] < v64[1].n128_u64[0])
                {
                  ++v64;
                  v65 = v66;
                }
                *v63 = *v64;
                v63 = v64;
                v62 = v65;
              }
              while (v65 <= (uint64_t)((unint64_t)(v61 - 2) >> 1));
              a2 -= 2;
              if (v64 == (__n128 *)a2)
              {
                a5.n128_u64[0] = v83;
                *v64 = (__n128)v83;
              }
              else
              {
                *v64 = *(__n128 *)a2;
                a5.n128_u64[0] = v83;
                *(_OWORD *)a2 = v83;
                v67 = (char *)v64 - (char *)v10 + 16;
                if (v67 >= 17)
                {
                  v68 = (((unint64_t)v67 >> 4) - 2) >> 1;
                  v69 = (__n128 *)&v10[2 * v68];
                  v70 = v64->n128_u64[0];
                  if (v69->n128_u64[0] < v64->n128_u64[0])
                  {
                    v71 = v64->n128_u64[1];
                    do
                    {
                      v72 = v64;
                      v64 = v69;
                      a5 = *v69;
                      *v72 = *v69;
                      if (!v68)
                        break;
                      v68 = (v68 - 1) >> 1;
                      v69 = (__n128 *)&v10[2 * v68];
                    }
                    while (v69->n128_u64[0] < v70);
                    v64->n128_u64[0] = v70;
                    v64->n128_u64[1] = v71;
                  }
                }
              }
            }
            while (v61-- > 2);
          }
          return a5.n128_f64[0];
        }
        v13 = v12 >> 1;
        v14 = &v10[2 * (v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16 * (v12 >> 1)), (unint64_t *)a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16 * (v12 >> 1)), a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16), v14 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v13), a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v14 - 1, v14, (unint64_t *)(a1 + 16 + 16 * v13));
          v80 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(__n128 *)v14 = v80;
        }
        --a3;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 16) >= *(_QWORD *)a1)
        {
          a5 = *(__n128 *)a1;
          v29 = *(_QWORD *)a1;
          if (*(_QWORD *)a1 >= *(_QWORD *)v9)
          {
            v31 = a1 + 16;
            do
            {
              v10 = (unint64_t *)v31;
              if (v31 >= (unint64_t)a2)
                break;
              v31 += 16;
            }
            while (v29 >= *v10);
          }
          else
          {
            v10 = (unint64_t *)a1;
            do
            {
              v30 = v10[2];
              v10 += 2;
            }
            while (v29 >= v30);
          }
          v32 = a2;
          if (v10 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v33);
          }
          while (v10 < v32)
          {
            v81 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v32;
            *(_OWORD *)v32 = v81;
            do
            {
              v34 = v10[2];
              v10 += 2;
            }
            while (v29 >= v34);
            do
            {
              v35 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v35);
          }
          v36 = v10 - 2;
          if (v10 - 2 != (unint64_t *)a1)
            *(_OWORD *)a1 = *(_OWORD *)v36;
          a4 = 0;
          *(__n128 *)v36 = a5;
          continue;
        }
        v15 = *(__n128 *)a1;
        v16 = *(_QWORD *)a1;
        v17 = (unint64_t *)a1;
        do
        {
          v18 = v17;
          v19 = v17[2];
          v17 += 2;
        }
        while (v19 < v16);
        v20 = a2;
        if (v18 == (unint64_t *)a1)
        {
          v20 = a2;
          do
          {
            if (v17 >= v20)
              break;
            v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 >= v16);
        }
        else
        {
          do
          {
            v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 >= v16);
        }
        if (v17 < v20)
        {
          v23 = v17;
          v24 = v20;
          do
          {
            v25 = *(_OWORD *)v23;
            *(_OWORD *)v23 = *(_OWORD *)v24;
            *(_OWORD *)v24 = v25;
            do
            {
              v18 = v23;
              v26 = v23[2];
              v23 += 2;
            }
            while (v26 < v16);
            do
            {
              v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (v27 >= v16);
          }
          while (v23 < v24);
        }
        if (v18 != (unint64_t *)a1)
          *(_OWORD *)a1 = *(_OWORD *)v18;
        *(__n128 *)v18 = v15;
        if (v17 < v20)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v18, a3, a4 & 1);
          a4 = 0;
          v10 = v18 + 2;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v18);
        v10 = v18 + 2;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v18 + 2), a2))
        {
          if (v28)
            continue;
          goto LABEL_29;
        }
        a2 = v18;
        if (!v28)
          goto LABEL_1;
        return a5.n128_f64[0];
    }
  }
}

  v9 = (__int128 *)(a2 - 2);
  v10 = (unint64_t *)a1;
  while (2)
  {
    a1 = (uint64_t)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        if (*(_QWORD *)v9 < *v10)
        {
          v82 = *(_OWORD *)v10;
          *(_OWORD *)v10 = *v9;
          a5.n128_u64[0] = v82;
          *v9 = v82;
        }
        return a5.n128_f64[0];
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, a2 - 2);
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (_OWORD *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (__n128 *)v10 + 3, (__n128 *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v11 <= 383)
        {
          n128_u64 = v10 + 2;
          v39 = v10 == a2 || n128_u64 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v10;
              do
              {
                v42 = n128_u64;
                v43 = v41[2];
                if (v43 < *v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    a5 = *(__n128 *)((char *)v10 + v45);
                    *(__n128 *)((char *)v10 + v45 + 16) = a5;
                    if (!v45)
                      break;
                    v46 = *(unint64_t *)((char *)v10 + v45 - 16);
                    v45 -= 16;
                    if (v43 >= v46)
                    {
                      v47 = (unint64_t *)((char *)v10 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v10;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                n128_u64 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v74 = (__n128 *)n128_u64;
              v75 = *(_QWORD *)(a1 + 16);
              if (v75 < *(_QWORD *)a1)
              {
                v76 = *(_QWORD *)(a1 + 24);
                v77 = v74;
                do
                {
                  a5 = v77[-1];
                  *v77 = a5;
                  v78 = v77[-2].n128_u64[0];
                  --v77;
                }
                while (v75 < v78);
                v77->n128_u64[0] = v75;
                v77->n128_u64[1] = v76;
              }
              n128_u64 = v74[1].n128_u64;
              a1 = (uint64_t)v74;
            }
            while (&v74[1] != (__n128 *)a2);
          }
          return a5.n128_f64[0];
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v48 = (v12 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v10[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v12)
                {
                  v53 = *v52;
                }
                else
                {
                  v53 = v52[2];
                  v54 = *v52 >= v53;
                  if (*v52 < v53)
                    v52 += 2;
                  else
                    v53 = *v52;
                  if (!v54)
                    v51 = 2 * v50 + 2;
                }
                v55 = &v10[2 * v50];
                v56 = *v55;
                if (v53 >= *v55)
                {
                  v57 = v55[1];
                  do
                  {
                    v58 = v55;
                    v55 = v52;
                    *(_OWORD *)v58 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v59 = (2 * v51) | 1;
                    v52 = &v10[2 * v59];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v12)
                    {
                      v60 = *v52;
                      v51 = v59;
                    }
                    else
                    {
                      v60 = *v52;
                      if (*v52 >= v52[2])
                      {
                        v51 = v59;
                      }
                      else
                      {
                        v60 = v52[2];
                        v52 += 2;
                      }
                    }
                  }
                  while (v60 >= v56);
                  *v55 = v56;
                  v55[1] = v57;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v61 = (unint64_t)v11 >> 4;
            do
            {
              v62 = 0;
              v83 = *(_OWORD *)v10;
              v63 = (__n128 *)v10;
              do
              {
                v64 = &v63[v62 + 1];
                v65 = (2 * v62) | 1;
                v66 = 2 * v62 + 2;
                if (v66 < v61 && v64->n128_u64[0] < v64[1].n128_u64[0])
                {
                  ++v64;
                  v65 = v66;
                }
                *v63 = *v64;
                v63 = v64;
                v62 = v65;
              }
              while (v65 <= (uint64_t)((unint64_t)(v61 - 2) >> 1));
              a2 -= 2;
              if (v64 == (__n128 *)a2)
              {
                a5.n128_u64[0] = v83;
                *v64 = (__n128)v83;
              }
              else
              {
                *v64 = *(__n128 *)a2;
                a5.n128_u64[0] = v83;
                *(_OWORD *)a2 = v83;
                v67 = (char *)v64 - (char *)v10 + 16;
                if (v67 >= 17)
                {
                  v68 = (((unint64_t)v67 >> 4) - 2) >> 1;
                  v69 = (__n128 *)&v10[2 * v68];
                  v70 = v64->n128_u64[0];
                  if (v69->n128_u64[0] < v64->n128_u64[0])
                  {
                    v71 = v64->n128_u64[1];
                    do
                    {
                      v72 = v64;
                      v64 = v69;
                      a5 = *v69;
                      *v72 = *v69;
                      if (!v68)
                        break;
                      v68 = (v68 - 1) >> 1;
                      v69 = (__n128 *)&v10[2 * v68];
                    }
                    while (v69->n128_u64[0] < v70);
                    v64->n128_u64[0] = v70;
                    v64->n128_u64[1] = v71;
                  }
                }
              }
            }
            while (v61-- > 2);
          }
          return a5.n128_f64[0];
        }
        v13 = v12 >> 1;
        v14 = &v10[2 * (v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16 * (v12 >> 1)), (unint64_t *)a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16 * (v12 >> 1)), a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16), v14 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v13), a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v14 - 1, v14, (unint64_t *)(a1 + 16 + 16 * v13));
          v80 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(__n128 *)v14 = v80;
        }
        --a3;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 16) >= *(_QWORD *)a1)
        {
          a5 = *(__n128 *)a1;
          v29 = *(_QWORD *)a1;
          if (*(_QWORD *)a1 >= *(_QWORD *)v9)
          {
            v31 = a1 + 16;
            do
            {
              v10 = (unint64_t *)v31;
              if (v31 >= (unint64_t)a2)
                break;
              v31 += 16;
            }
            while (v29 >= *v10);
          }
          else
          {
            v10 = (unint64_t *)a1;
            do
            {
              v30 = v10[2];
              v10 += 2;
            }
            while (v29 >= v30);
          }
          v32 = a2;
          if (v10 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v33);
          }
          while (v10 < v32)
          {
            v81 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v32;
            *(_OWORD *)v32 = v81;
            do
            {
              v34 = v10[2];
              v10 += 2;
            }
            while (v29 >= v34);
            do
            {
              v35 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v35);
          }
          v36 = v10 - 2;
          if (v10 - 2 != (unint64_t *)a1)
            *(_OWORD *)a1 = *(_OWORD *)v36;
          a4 = 0;
          *(__n128 *)v36 = a5;
          continue;
        }
        v15 = *(__n128 *)a1;
        v16 = *(_QWORD *)a1;
        v17 = (unint64_t *)a1;
        do
        {
          v18 = v17;
          v19 = v17[2];
          v17 += 2;
        }
        while (v19 < v16);
        v20 = a2;
        if (v18 == (unint64_t *)a1)
        {
          v20 = a2;
          do
          {
            if (v17 >= v20)
              break;
            v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 >= v16);
        }
        else
        {
          do
          {
            v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 >= v16);
        }
        if (v17 < v20)
        {
          v23 = v17;
          v24 = v20;
          do
          {
            v25 = *(_OWORD *)v23;
            *(_OWORD *)v23 = *(_OWORD *)v24;
            *(_OWORD *)v24 = v25;
            do
            {
              v18 = v23;
              v26 = v23[2];
              v23 += 2;
            }
            while (v26 < v16);
            do
            {
              v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (v27 >= v16);
          }
          while (v23 < v24);
        }
        if (v18 != (unint64_t *)a1)
          *(_OWORD *)a1 = *(_OWORD *)v18;
        *(__n128 *)v18 = v15;
        if (v17 < v20)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v18, a3, a4 & 1);
          a4 = 0;
          v10 = v18 + 2;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v18);
        v10 = v18 + 2;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v18 + 2), a2))
        {
          if (v28)
            continue;
          goto LABEL_29;
        }
        a2 = v18;
        if (!v28)
          goto LABEL_1;
        return a5.n128_f64[0];
    }
  }
}

  v9 = (__int128 *)(a2 - 2);
  v10 = (unint64_t *)a1;
  while (2)
  {
    a1 = (uint64_t)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        if (*(_QWORD *)v9 < *v10)
        {
          v82 = *(_OWORD *)v10;
          *(_OWORD *)v10 = *v9;
          a5.n128_u64[0] = v82;
          *v9 = v82;
        }
        return a5.n128_f64[0];
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, a2 - 2);
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (_OWORD *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v10, v10 + 2, v10 + 4, (__n128 *)v10 + 3, (__n128 *)a2 - 1).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v11 <= 383)
        {
          n128_u64 = v10 + 2;
          v39 = v10 == a2 || n128_u64 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v10;
              do
              {
                v42 = n128_u64;
                v43 = v41[2];
                if (v43 < *v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    a5 = *(__n128 *)((char *)v10 + v45);
                    *(__n128 *)((char *)v10 + v45 + 16) = a5;
                    if (!v45)
                      break;
                    v46 = *(unint64_t *)((char *)v10 + v45 - 16);
                    v45 -= 16;
                    if (v43 >= v46)
                    {
                      v47 = (unint64_t *)((char *)v10 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v10;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                n128_u64 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v74 = (__n128 *)n128_u64;
              v75 = *(_QWORD *)(a1 + 16);
              if (v75 < *(_QWORD *)a1)
              {
                v76 = *(_QWORD *)(a1 + 24);
                v77 = v74;
                do
                {
                  a5 = v77[-1];
                  *v77 = a5;
                  v78 = v77[-2].n128_u64[0];
                  --v77;
                }
                while (v75 < v78);
                v77->n128_u64[0] = v75;
                v77->n128_u64[1] = v76;
              }
              n128_u64 = v74[1].n128_u64;
              a1 = (uint64_t)v74;
            }
            while (&v74[1] != (__n128 *)a2);
          }
          return a5.n128_f64[0];
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v48 = (v12 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v10[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v12)
                {
                  v53 = *v52;
                }
                else
                {
                  v53 = v52[2];
                  v54 = *v52 >= v53;
                  if (*v52 < v53)
                    v52 += 2;
                  else
                    v53 = *v52;
                  if (!v54)
                    v51 = 2 * v50 + 2;
                }
                v55 = &v10[2 * v50];
                v56 = *v55;
                if (v53 >= *v55)
                {
                  v57 = v55[1];
                  do
                  {
                    v58 = v55;
                    v55 = v52;
                    *(_OWORD *)v58 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v59 = (2 * v51) | 1;
                    v52 = &v10[2 * v59];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v12)
                    {
                      v60 = *v52;
                      v51 = v59;
                    }
                    else
                    {
                      v60 = *v52;
                      if (*v52 >= v52[2])
                      {
                        v51 = v59;
                      }
                      else
                      {
                        v60 = v52[2];
                        v52 += 2;
                      }
                    }
                  }
                  while (v60 >= v56);
                  *v55 = v56;
                  v55[1] = v57;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v61 = (unint64_t)v11 >> 4;
            do
            {
              v62 = 0;
              v83 = *(_OWORD *)v10;
              v63 = (__n128 *)v10;
              do
              {
                v64 = &v63[v62 + 1];
                v65 = (2 * v62) | 1;
                v66 = 2 * v62 + 2;
                if (v66 < v61 && v64->n128_u64[0] < v64[1].n128_u64[0])
                {
                  ++v64;
                  v65 = v66;
                }
                *v63 = *v64;
                v63 = v64;
                v62 = v65;
              }
              while (v65 <= (uint64_t)((unint64_t)(v61 - 2) >> 1));
              a2 -= 2;
              if (v64 == (__n128 *)a2)
              {
                a5.n128_u64[0] = v83;
                *v64 = (__n128)v83;
              }
              else
              {
                *v64 = *(__n128 *)a2;
                a5.n128_u64[0] = v83;
                *(_OWORD *)a2 = v83;
                v67 = (char *)v64 - (char *)v10 + 16;
                if (v67 >= 17)
                {
                  v68 = (((unint64_t)v67 >> 4) - 2) >> 1;
                  v69 = (__n128 *)&v10[2 * v68];
                  v70 = v64->n128_u64[0];
                  if (v69->n128_u64[0] < v64->n128_u64[0])
                  {
                    v71 = v64->n128_u64[1];
                    do
                    {
                      v72 = v64;
                      v64 = v69;
                      a5 = *v69;
                      *v72 = *v69;
                      if (!v68)
                        break;
                      v68 = (v68 - 1) >> 1;
                      v69 = (__n128 *)&v10[2 * v68];
                    }
                    while (v69->n128_u64[0] < v70);
                    v64->n128_u64[0] = v70;
                    v64->n128_u64[1] = v71;
                  }
                }
              }
            }
            while (v61-- > 2);
          }
          return a5.n128_f64[0];
        }
        v13 = v12 >> 1;
        v14 = &v10[2 * (v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16 * (v12 >> 1)), (unint64_t *)a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16 * (v12 >> 1)), a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 16), v14 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v13), a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v14 - 1, v14, (unint64_t *)(a1 + 16 + 16 * v13));
          v80 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(__n128 *)v14 = v80;
        }
        --a3;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 16) >= *(_QWORD *)a1)
        {
          a5 = *(__n128 *)a1;
          v29 = *(_QWORD *)a1;
          if (*(_QWORD *)a1 >= *(_QWORD *)v9)
          {
            v31 = a1 + 16;
            do
            {
              v10 = (unint64_t *)v31;
              if (v31 >= (unint64_t)a2)
                break;
              v31 += 16;
            }
            while (v29 >= *v10);
          }
          else
          {
            v10 = (unint64_t *)a1;
            do
            {
              v30 = v10[2];
              v10 += 2;
            }
            while (v29 >= v30);
          }
          v32 = a2;
          if (v10 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v33);
          }
          while (v10 < v32)
          {
            v81 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v32;
            *(_OWORD *)v32 = v81;
            do
            {
              v34 = v10[2];
              v10 += 2;
            }
            while (v29 >= v34);
            do
            {
              v35 = *(v32 - 2);
              v32 -= 2;
            }
            while (v29 < v35);
          }
          v36 = v10 - 2;
          if (v10 - 2 != (unint64_t *)a1)
            *(_OWORD *)a1 = *(_OWORD *)v36;
          a4 = 0;
          *(__n128 *)v36 = a5;
          continue;
        }
        v15 = *(__n128 *)a1;
        v16 = *(_QWORD *)a1;
        v17 = (unint64_t *)a1;
        do
        {
          v18 = v17;
          v19 = v17[2];
          v17 += 2;
        }
        while (v19 < v16);
        v20 = a2;
        if (v18 == (unint64_t *)a1)
        {
          v20 = a2;
          do
          {
            if (v17 >= v20)
              break;
            v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 >= v16);
        }
        else
        {
          do
          {
            v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 >= v16);
        }
        if (v17 < v20)
        {
          v23 = v17;
          v24 = v20;
          do
          {
            v25 = *(_OWORD *)v23;
            *(_OWORD *)v23 = *(_OWORD *)v24;
            *(_OWORD *)v24 = v25;
            do
            {
              v18 = v23;
              v26 = v23[2];
              v23 += 2;
            }
            while (v26 < v16);
            do
            {
              v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (v27 >= v16);
          }
          while (v23 < v24);
        }
        if (v18 != (unint64_t *)a1)
          *(_OWORD *)a1 = *(_OWORD *)v18;
        *(__n128 *)v18 = v15;
        if (v17 < v20)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v18, a3, a4 & 1);
          a4 = 0;
          v10 = v18 + 2;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v18);
        v10 = v18 + 2;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v18 + 2), a2))
        {
          if (v28)
            continue;
          goto LABEL_29;
        }
        a2 = v18;
        if (!v28)
          goto LABEL_1;
        return a5.n128_f64[0];
    }
  }
}

  v214 = a2 - 30;
  v6 = a1;
  while (2)
  {
    a1 = v6;
    v7 = (uint64_t)a2 - v6;
    v8 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)((uint64_t)a2 - v6) >> 3);
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)v214, v6))std::swap[abi:ne180100]<AMCP::Node_Description>((int *)v6, v214);
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>((int *)v6, (int *)(v6 + 120), v214);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>((int *)v6, (int *)(v6 + 120), (int *)(v6 + 240), v214);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>((int *)v6, (int *)(v6 + 120), (int *)(v6 + 240), (int *)(v6 + 360), v214);
        return;
      default:
        if (v7 > 2879)
        {
          if (!a3)
          {
            if ((int *)v6 != a2)
            {
              v88 = (v8 - 2) >> 1;
              v89 = v6 + 120 * v88;
              v219 = v88;
              v209 = (char *)a2 - v6;
              do
              {
                v90 = v88;
                if (v7 >= 240 && v219 >= v88)
                {
                  v217 = v88;
                  v91 = (2 * v88) | 1;
                  v92 = (_DWORD *)(a1 + 120 * v91);
                  v93 = 2 * v88 + 2;
                  if (v93 < (uint64_t)v8
                    && std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(a1 + 120 * v91, (uint64_t)(v92 + 30)))
                  {
                    v92 += 30;
                    v91 = v93;
                  }
                  v90 = v217;
                  v94 = a1 + 120 * v217;
                  if ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)v92, v94) & 1) == 0)
                  {
                    v95 = 0;
                    LODWORD(v230) = *(_DWORD *)v94;
                    v96 = a1 + 120 * v217;
                    v97 = *(_OWORD *)(v96 + 8);
                    v232 = *(_QWORD *)(v96 + 24);
                    v231 = v97;
                    *(_QWORD *)(v96 + 16) = 0;
                    *(_QWORD *)(v96 + 24) = 0;
                    *(_QWORD *)(v96 + 8) = 0;
                    v233 = *(_QWORD *)(v96 + 32);
                    v98 = *(_OWORD *)(v96 + 40);
                    v235 = *(_QWORD *)(v96 + 56);
                    __p = v98;
                    *(_QWORD *)(v96 + 48) = 0;
                    *(_QWORD *)(v96 + 56) = 0;
                    *(_QWORD *)(v96 + 40) = 0;
                    v236 = *(_QWORD *)(v96 + 64);
                    do
                    {
                      v99 = (void ***)&(&v230)[v95];
                      v100 = (_QWORD *)(v89 + v95 * 8);
                      v99[10] = 0;
                      v99[11] = 0;
                      *(_OWORD *)(v99 + 9) = *(_OWORD *)(v89 + v95 * 8 + 72);
                      v99[11] = *(void ***)(v89 + v95 * 8 + 88);
                      v100[9] = 0;
                      v100[10] = 0;
                      v100[11] = 0;
                      v95 += 3;
                    }
                    while (v95 != 6);
                    v210 = v89;
                    do
                    {
                      v101 = v92;
                      v102 = v92 + 2;
                      *(_DWORD *)v94 = *v92;
                      v103 = (void **)(v94 + 8);
                      if (*(char *)(v94 + 31) < 0)
                        operator delete(*v103);
                      v104 = *(_OWORD *)v102;
                      *(_QWORD *)(v94 + 24) = *((_QWORD *)v102 + 2);
                      *(_OWORD *)v103 = v104;
                      *((_BYTE *)v101 + 31) = 0;
                      *((_BYTE *)v101 + 8) = 0;
                      *(_QWORD *)(v94 + 32) = *((_QWORD *)v101 + 4);
                      v105 = (void **)(v94 + 40);
                      if (*(char *)(v94 + 63) < 0)
                        operator delete(*v105);
                      v106 = 0;
                      v107 = (void **)(v101 + 10);
                      v108 = *(_OWORD *)(v101 + 10);
                      *(_QWORD *)(v94 + 56) = *((_QWORD *)v101 + 7);
                      *(_OWORD *)v105 = v108;
                      *((_BYTE *)v101 + 63) = 0;
                      *((_BYTE *)v101 + 40) = 0;
                      *(_QWORD *)(v94 + 64) = *((_QWORD *)v101 + 8);
                      do
                      {
                        v109 = v94 + v106 * 4;
                        v110 = &v101[v106];
                        std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)(v94 + v106 * 4 + 72));
                        *(_OWORD *)(v109 + 72) = *(_OWORD *)&v101[v106 + 18];
                        *(_QWORD *)(v109 + 88) = *(_QWORD *)&v101[v106 + 22];
                        v110[9] = 0;
                        v110[10] = 0;
                        v110[11] = 0;
                        v106 += 6;
                      }
                      while (v106 != 12);
                      if (v219 < v91)
                        break;
                      v111 = (2 * v91) | 1;
                      v92 = (_DWORD *)(a1 + 120 * v111);
                      v112 = 2 * v91 + 2;
                      if (v112 < (uint64_t)v8
                        && std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(a1 + 120 * v111, (uint64_t)(v92 + 30)))
                      {
                        v92 += 30;
                        v111 = v112;
                      }
                      v94 = (uint64_t)v101;
                      v91 = v111;
                    }
                    while (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)v92, (uint64_t)&v230));
                    *v101 = (_DWORD)v230;
                    if (*((char *)v101 + 31) < 0)
                      operator delete(*(void **)v102);
                    v113 = v231;
                    *((_QWORD *)v102 + 2) = v232;
                    *(_OWORD *)v102 = v113;
                    HIBYTE(v232) = 0;
                    LOBYTE(v231) = 0;
                    *((_QWORD *)v101 + 4) = v233;
                    v7 = (uint64_t)v209;
                    if (*((char *)v101 + 63) < 0)
                      operator delete(*v107);
                    v114 = 0;
                    v115 = __p;
                    *((_QWORD *)v101 + 7) = v235;
                    *(_OWORD *)v107 = v115;
                    HIBYTE(v235) = 0;
                    LOBYTE(__p) = 0;
                    *((_QWORD *)v101 + 8) = v236;
                    do
                    {
                      v116 = &v101[v114 / 4];
                      v117 = (void ***)&(&v230)[v114 / 8];
                      std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)&v101[v114 / 4 + 18]);
                      *(_OWORD *)(v116 + 18) = *(_OWORD *)&v237[v114];
                      *((_QWORD *)v116 + 11) = *(_QWORD *)&v237[v114 + 16];
                      v117[9] = 0;
                      v117[10] = 0;
                      v117[11] = 0;
                      v114 += 24;
                    }
                    while (v114 != 48);
                    for (i = 12; i != 6; i -= 3)
                    {
                      v221 = (void ***)&(&v230)[i];
                      std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
                    }
                    v89 = v210;
                    v90 = v217;
                    if (SHIBYTE(v235) < 0)
                      operator delete((void *)__p);
                    if (SHIBYTE(v232) < 0)
                      operator delete((void *)v231);
                  }
                }
                v88 = v90 - 1;
                v89 -= 120;
              }
              while (v90);
              v119 = v7 / 0x78uLL;
              v211 = (__int128 *)(a1 + 40);
              v213 = (__int128 *)(a1 + 8);
              do
              {
                v120 = v119 - 2;
                v121 = a2;
                if (v119 >= 2)
                {
                  v220 = v119;
                  v122 = 0;
                  LODWORD(v221) = *(_DWORD *)a1;
                  v123 = *(_QWORD *)(a1 + 24);
                  v222 = *v213;
                  v223 = v123;
                  *(_QWORD *)(a1 + 16) = 0;
                  *(_QWORD *)(a1 + 24) = 0;
                  *(_QWORD *)v213 = 0;
                  v124 = *(_QWORD *)(a1 + 32);
                  v125 = *v211;
                  v226 = *(_QWORD *)(a1 + 56);
                  v225 = v125;
                  *(_QWORD *)(a1 + 48) = 0;
                  *(_QWORD *)(a1 + 56) = 0;
                  *(_QWORD *)v211 = 0;
                  v126 = *(_QWORD *)(a1 + 64);
                  v224 = v124;
                  v227 = v126;
                  do
                  {
                    v127 = (void ***)&(&v221)[v122];
                    v128 = (_QWORD *)(a1 + v122 * 8);
                    v127[10] = 0;
                    v127[11] = 0;
                    *(_OWORD *)(v127 + 9) = *(_OWORD *)(a1 + v122 * 8 + 72);
                    v127[11] = *(void ***)(a1 + v122 * 8 + 88);
                    v128[9] = 0;
                    v128[10] = 0;
                    v128[11] = 0;
                    v122 += 3;
                  }
                  while (v122 != 6);
                  v129 = 0;
                  v130 = v120 >> 1;
                  v131 = a1;
                  do
                  {
                    v132 = v131 + 120 * v129 + 120;
                    v133 = 2 * v129;
                    v129 = (2 * v129) | 1;
                    v134 = v133 + 2;
                    if (v133 + 2 < v220
                      && std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(v132, v132 + 120))
                    {
                      v132 += 120;
                      v129 = v134;
                    }
                    v135 = (void **)(v132 + 8);
                    *(_DWORD *)v131 = *(_DWORD *)v132;
                    v136 = (void **)(v131 + 8);
                    if (*(char *)(v131 + 31) < 0)
                      operator delete(*v136);
                    v137 = *(_OWORD *)v135;
                    *(_QWORD *)(v131 + 24) = *(_QWORD *)(v132 + 24);
                    *(_OWORD *)v136 = v137;
                    *(_BYTE *)(v132 + 31) = 0;
                    *(_BYTE *)(v132 + 8) = 0;
                    *(_QWORD *)(v131 + 32) = *(_QWORD *)(v132 + 32);
                    v138 = (void **)(v131 + 40);
                    if (*(char *)(v131 + 63) < 0)
                      operator delete(*v138);
                    v139 = 0;
                    v140 = (void **)(v132 + 40);
                    v141 = *(_OWORD *)(v132 + 40);
                    *(_QWORD *)(v131 + 56) = *(_QWORD *)(v132 + 56);
                    *(_OWORD *)v138 = v141;
                    *(_BYTE *)(v132 + 63) = 0;
                    *(_BYTE *)(v132 + 40) = 0;
                    *(_QWORD *)(v131 + 64) = *(_QWORD *)(v132 + 64);
                    do
                    {
                      v142 = v131 + v139;
                      v143 = (_QWORD *)(v132 + v139);
                      std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)(v131 + v139 + 72));
                      *(_OWORD *)(v142 + 72) = *(_OWORD *)(v132 + v139 + 72);
                      *(_QWORD *)(v142 + 88) = *(_QWORD *)(v132 + v139 + 88);
                      v143[9] = 0;
                      v143[10] = 0;
                      v143[11] = 0;
                      v139 += 24;
                    }
                    while (v139 != 48);
                    v131 = v132;
                  }
                  while (v129 <= v130);
                  v121 = a2;
                  if ((int *)v132 == a2 - 30)
                  {
                    *(_DWORD *)v132 = (_DWORD)v221;
                    if (*(char *)(v132 + 31) < 0)
                      operator delete(*v135);
                    v180 = v222;
                    *(_QWORD *)(v132 + 24) = v223;
                    *(_OWORD *)v135 = v180;
                    HIBYTE(v223) = 0;
                    LOBYTE(v222) = 0;
                    *(_QWORD *)(v132 + 32) = v224;
                    if (*(char *)(v132 + 63) < 0)
                      operator delete(*v140);
                    v181 = 0;
                    v182 = v225;
                    *(_QWORD *)(v132 + 56) = v226;
                    *(_OWORD *)v140 = v182;
                    HIBYTE(v226) = 0;
                    LOBYTE(v225) = 0;
                    *(_QWORD *)(v132 + 64) = v227;
                    do
                    {
                      v183 = v132 + v181;
                      v184 = (void ***)&(&v221)[v181 / 8];
                      std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)(v132 + v181 + 72));
                      *(_OWORD *)(v183 + 72) = *(_OWORD *)&v228[v181];
                      *(_QWORD *)(v183 + 88) = *(_QWORD *)&v228[v181 + 16];
                      v184[9] = 0;
                      v184[10] = 0;
                      v184[11] = 0;
                      v181 += 24;
                    }
                    while (v181 != 48);
                  }
                  else
                  {
                    *(_DWORD *)v132 = *(a2 - 30);
                    if (*(char *)(v132 + 31) < 0)
                      operator delete(*v135);
                    v144 = (void **)(a2 - 28);
                    v145 = *((_OWORD *)a2 - 7);
                    *(_QWORD *)(v132 + 24) = *((_QWORD *)a2 - 12);
                    *(_OWORD *)v135 = v145;
                    *((_BYTE *)a2 - 89) = 0;
                    *((_BYTE *)a2 - 112) = 0;
                    *(_QWORD *)(v132 + 32) = *((_QWORD *)a2 - 11);
                    if (*(char *)(v132 + 63) < 0)
                      operator delete(*v140);
                    v146 = 0;
                    v147 = (void **)(a2 - 20);
                    v148 = *((_OWORD *)a2 - 5);
                    *(_QWORD *)(v132 + 56) = *((_QWORD *)a2 - 8);
                    *(_OWORD *)v140 = v148;
                    *((_BYTE *)a2 - 57) = 0;
                    *((_BYTE *)a2 - 80) = 0;
                    *(_QWORD *)(v132 + 64) = *((_QWORD *)a2 - 7);
                    do
                    {
                      v149 = v132 + v146 * 4;
                      v150 = &a2[v146];
                      std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)(v132 + v146 * 4 + 72));
                      *(_OWORD *)(v149 + 72) = *(_OWORD *)&a2[v146 - 12];
                      *(_QWORD *)(v149 + 88) = *(_QWORD *)&a2[v146 - 8];
                      *((_QWORD *)v150 - 6) = 0;
                      *((_QWORD *)v150 - 5) = 0;
                      *((_QWORD *)v150 - 4) = 0;
                      v146 += 6;
                    }
                    while (v146 != 12);
                    *(a2 - 30) = (int)v221;
                    if (*((char *)a2 - 89) < 0)
                      operator delete(*v144);
                    v151 = v222;
                    *((_QWORD *)a2 - 12) = v223;
                    *(_OWORD *)v144 = v151;
                    HIBYTE(v223) = 0;
                    LOBYTE(v222) = 0;
                    *((_QWORD *)a2 - 11) = v224;
                    if (*((char *)a2 - 57) < 0)
                      operator delete(*v147);
                    v152 = 0;
                    v153 = v132 + 120;
                    v154 = v225;
                    *((_QWORD *)a2 - 8) = v226;
                    *(_OWORD *)v147 = v154;
                    HIBYTE(v226) = 0;
                    LOBYTE(v225) = 0;
                    *((_QWORD *)a2 - 7) = v227;
                    do
                    {
                      v155 = &a2[v152 / 4];
                      v156 = (void ***)&(&v221)[v152 / 8];
                      std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)&a2[v152 / 4 - 12]);
                      *((_OWORD *)v155 - 3) = *(_OWORD *)&v228[v152];
                      *((_QWORD *)v155 - 4) = *(_QWORD *)&v228[v152 + 16];
                      v156[9] = 0;
                      v156[10] = 0;
                      v156[11] = 0;
                      v152 += 24;
                    }
                    while (v152 != 48);
                    if (v153 - a1 >= 121)
                    {
                      v157 = (unint64_t)(-2 - 0x1111111111111111 * ((v153 - a1) >> 3)) >> 1;
                      v158 = (_DWORD *)(a1 + 120 * v157);
                      if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)v158, v132))
                      {
                        v159 = 0;
                        LODWORD(v230) = *(_DWORD *)v132;
                        v160 = *(_OWORD *)v135;
                        v232 = *(_QWORD *)(v132 + 24);
                        v231 = v160;
                        *(_QWORD *)(v132 + 16) = 0;
                        *(_QWORD *)(v132 + 24) = 0;
                        *v135 = 0;
                        v233 = *(_QWORD *)(v132 + 32);
                        v161 = *(_OWORD *)v140;
                        v235 = *(_QWORD *)(v132 + 56);
                        __p = v161;
                        *(_QWORD *)(v132 + 48) = 0;
                        *(_QWORD *)(v132 + 56) = 0;
                        *v140 = 0;
                        v236 = *(_QWORD *)(v132 + 64);
                        do
                        {
                          v162 = (void ***)&(&v230)[v159];
                          v163 = (_QWORD *)(v132 + v159 * 8);
                          v162[10] = 0;
                          v162[11] = 0;
                          *(_OWORD *)(v162 + 9) = *(_OWORD *)(v132 + v159 * 8 + 72);
                          v162[11] = *(void ***)(v132 + v159 * 8 + 88);
                          v163[9] = 0;
                          v163[10] = 0;
                          v163[11] = 0;
                          v159 += 3;
                        }
                        while (v159 != 6);
                        do
                        {
                          v164 = v158;
                          v165 = v158 + 2;
                          *(_DWORD *)v132 = *v158;
                          v166 = (void **)(v132 + 8);
                          if (*(char *)(v132 + 31) < 0)
                            operator delete(*v166);
                          v167 = *(_OWORD *)v165;
                          *(_QWORD *)(v132 + 24) = *((_QWORD *)v165 + 2);
                          *(_OWORD *)v166 = v167;
                          *((_BYTE *)v164 + 31) = 0;
                          *((_BYTE *)v164 + 8) = 0;
                          *(_QWORD *)(v132 + 32) = *((_QWORD *)v164 + 4);
                          v168 = (void **)(v132 + 40);
                          if (*(char *)(v132 + 63) < 0)
                            operator delete(*v168);
                          v169 = 0;
                          v170 = (void **)(v164 + 10);
                          v171 = *(_OWORD *)(v164 + 10);
                          *(_QWORD *)(v132 + 56) = *((_QWORD *)v164 + 7);
                          *(_OWORD *)v168 = v171;
                          *((_BYTE *)v164 + 63) = 0;
                          *((_BYTE *)v164 + 40) = 0;
                          *(_QWORD *)(v132 + 64) = *((_QWORD *)v164 + 8);
                          do
                          {
                            v172 = v132 + v169 * 4;
                            v173 = &v164[v169];
                            std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)(v132 + v169 * 4 + 72));
                            *(_OWORD *)(v172 + 72) = *(_OWORD *)&v164[v169 + 18];
                            *(_QWORD *)(v172 + 88) = *(_QWORD *)&v164[v169 + 22];
                            v173[9] = 0;
                            v173[10] = 0;
                            v173[11] = 0;
                            v169 += 6;
                          }
                          while (v169 != 12);
                          if (!v157)
                            break;
                          v157 = (v157 - 1) >> 1;
                          v158 = (_DWORD *)(a1 + 120 * v157);
                          v132 = (uint64_t)v164;
                        }
                        while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)v158, (uint64_t)&v230) & 1) != 0);
                        *v164 = (_DWORD)v230;
                        if (*((char *)v164 + 31) < 0)
                          operator delete(*(void **)v165);
                        v174 = v231;
                        *((_QWORD *)v165 + 2) = v232;
                        *(_OWORD *)v165 = v174;
                        HIBYTE(v232) = 0;
                        LOBYTE(v231) = 0;
                        *((_QWORD *)v164 + 4) = v233;
                        if (*((char *)v164 + 63) < 0)
                          operator delete(*v170);
                        v175 = 0;
                        v176 = __p;
                        *((_QWORD *)v164 + 7) = v235;
                        *(_OWORD *)v170 = v176;
                        HIBYTE(v235) = 0;
                        LOBYTE(__p) = 0;
                        *((_QWORD *)v164 + 8) = v236;
                        do
                        {
                          v177 = &v164[v175 / 4];
                          v178 = (void ***)&(&v230)[v175 / 8];
                          std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)&v164[v175 / 4 + 18]);
                          *(_OWORD *)(v177 + 18) = *(_OWORD *)&v237[v175];
                          *((_QWORD *)v177 + 11) = *(_QWORD *)&v237[v175 + 16];
                          v178[9] = 0;
                          v178[10] = 0;
                          v178[11] = 0;
                          v175 += 24;
                        }
                        while (v175 != 48);
                        v179 = 12;
                        v121 = a2;
                        do
                        {
                          v229 = (void ***)&(&v230)[v179];
                          std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v229);
                          v179 -= 3;
                        }
                        while (v179 != 6);
                        if (SHIBYTE(v235) < 0)
                          operator delete((void *)__p);
                        if (SHIBYTE(v232) < 0)
                          operator delete((void *)v231);
                      }
                    }
                  }
                  for (j = 12; j != 6; j -= 3)
                  {
                    v230 = (void ***)&(&v221)[j];
                    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v230);
                  }
                  if (SHIBYTE(v226) < 0)
                    operator delete((void *)v225);
                  if (SHIBYTE(v223) < 0)
                    operator delete((void *)v222);
                  v119 = v220;
                }
                a2 = v121 - 30;
              }
              while ((unint64_t)v119-- > 2);
            }
            return;
          }
          if ((unint64_t)v7 < 0x3C01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>((int *)(v6 + 120 * (v8 >> 1)), (int *)v6, v214);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>((int *)v6, (int *)(v6 + 120 * (v8 >> 1)), v214);
            v9 = 120 * (v8 >> 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>((int *)(v6 + 120), (int *)(v9 + v6 - 120), a2 - 60);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>((int *)(v6 + 240), (int *)(v6 + 120 + v9), a2 - 90);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>((int *)(v9 + v6 - 120), (int *)(v6 + v9), (int *)(v6 + 120 + v9));
            std::swap[abi:ne180100]<AMCP::Node_Description>((int *)v6, (int *)(v6 + v9));
          }
          --a3;
          if ((a4 & 1) == 0
            && (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(v6 - 120, v6) & 1) == 0)
          {
            v38 = 0;
            LODWORD(v230) = *(_DWORD *)v6;
            v39 = *(_QWORD *)(v6 + 24);
            v40 = *(_QWORD *)(v6 + 32);
            v231 = *(_OWORD *)(v6 + 8);
            v232 = v39;
            *(_QWORD *)(v6 + 16) = 0;
            *(_QWORD *)(v6 + 24) = 0;
            *(_QWORD *)(v6 + 8) = 0;
            v41 = *(_OWORD *)(v6 + 40);
            v42 = *(_QWORD *)(v6 + 64);
            v235 = *(_QWORD *)(v6 + 56);
            v43 = (void **)(v6 + 8);
            __p = v41;
            *(_QWORD *)(v6 + 48) = 0;
            *(_QWORD *)(v6 + 56) = 0;
            *(_QWORD *)(v6 + 40) = 0;
            v233 = v40;
            v236 = v42;
            v44 = (void **)(v6 + 40);
            do
            {
              v45 = (void ***)&(&v230)[v38];
              v46 = (_QWORD *)(v6 + v38 * 8);
              v45[10] = 0;
              v45[11] = 0;
              *(_OWORD *)(v45 + 9) = *(_OWORD *)(v6 + v38 * 8 + 72);
              v45[11] = *(void ***)(v6 + v38 * 8 + 88);
              v46[9] = 0;
              v46[10] = 0;
              v46[11] = 0;
              v38 += 3;
            }
            while (v38 != 6);
            if ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)&v230, (uint64_t)v214) & 1) != 0)
            {
              do
                v6 += 120;
              while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)&v230, v6) & 1) == 0);
            }
            else
            {
              v47 = v6 + 120;
              do
              {
                v6 = v47;
                if (v47 >= (unint64_t)a2)
                  break;
                v48 = std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)&v230, v47);
                v47 = v6 + 120;
              }
              while (!v48);
            }
            v49 = a2;
            if (v6 < (unint64_t)a2)
            {
              v49 = a2;
              do
                v49 -= 30;
              while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)&v230, (uint64_t)v49) & 1) != 0);
            }
            while (v6 < (unint64_t)v49)
            {
              std::swap[abi:ne180100]<AMCP::Node_Description>((int *)v6, v49);
              do
                v6 += 120;
              while (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)&v230, v6));
              do
                v49 -= 30;
              while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)&v230, (uint64_t)v49) & 1) != 0);
            }
            if (v6 - 120 != a1)
            {
              *(_DWORD *)a1 = *(_DWORD *)(v6 - 120);
              if (*(char *)(a1 + 31) < 0)
                operator delete(*v43);
              v50 = *(_OWORD *)(v6 - 112);
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(v6 - 96);
              *(_OWORD *)v43 = v50;
              *(_BYTE *)(v6 - 89) = 0;
              *(_BYTE *)(v6 - 112) = 0;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(v6 - 88);
              if (*(char *)(a1 + 63) < 0)
                operator delete(*v44);
              v51 = 0;
              v52 = *(_OWORD *)(v6 - 80);
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(v6 - 64);
              *(_OWORD *)v44 = v52;
              *(_BYTE *)(v6 - 57) = 0;
              *(_BYTE *)(v6 - 80) = 0;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(v6 - 56);
              do
              {
                v53 = a1 + v51;
                v54 = v6 + v51;
                std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)(a1 + v51 + 72));
                *(_OWORD *)(v53 + 72) = *(_OWORD *)(v6 + v51 - 48);
                *(_QWORD *)(v53 + 88) = *(_QWORD *)(v6 + v51 - 32);
                *(_QWORD *)(v54 - 48) = 0;
                *(_QWORD *)(v54 - 40) = 0;
                *(_QWORD *)(v54 - 32) = 0;
                v51 += 24;
              }
              while (v51 != 48);
            }
            *(_DWORD *)(v6 - 120) = (_DWORD)v230;
            v55 = (void **)(v6 - 112);
            if (*(char *)(v6 - 89) < 0)
              operator delete(*v55);
            v56 = v231;
            *(_QWORD *)(v6 - 96) = v232;
            *(_OWORD *)v55 = v56;
            HIBYTE(v232) = 0;
            LOBYTE(v231) = 0;
            *(_QWORD *)(v6 - 88) = v233;
            v57 = (void **)(v6 - 80);
            if (*(char *)(v6 - 57) < 0)
              operator delete(*v57);
            v58 = 0;
            v59 = __p;
            *(_QWORD *)(v6 - 64) = v235;
            *(_OWORD *)v57 = v59;
            HIBYTE(v235) = 0;
            LOBYTE(__p) = 0;
            *(_QWORD *)(v6 - 56) = v236;
            do
            {
              v60 = v6 + v58;
              v61 = (void ***)&(&v230)[v58 / 8];
              std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)(v6 + v58 - 48));
              *(_OWORD *)(v60 - 48) = *(_OWORD *)&v237[v58];
              *(_QWORD *)(v60 - 32) = *(_QWORD *)&v237[v58 + 16];
              v61[9] = 0;
              v61[10] = 0;
              v61[11] = 0;
              v58 += 24;
            }
            while (v58 != 48);
            for (k = 12; k != 6; k -= 3)
            {
              v221 = (void ***)&(&v230)[k];
              std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
            }
            if (SHIBYTE(v235) < 0)
              operator delete((void *)__p);
            if (SHIBYTE(v232) < 0)
              operator delete((void *)v231);
            goto LABEL_49;
          }
          v10 = 0;
          LODWORD(v230) = *(_DWORD *)v6;
          v11 = *(_QWORD *)(v6 + 24);
          v12 = *(_QWORD *)(v6 + 32);
          v231 = *(_OWORD *)(v6 + 8);
          v232 = v11;
          *(_QWORD *)(v6 + 16) = 0;
          *(_QWORD *)(v6 + 24) = 0;
          *(_QWORD *)(v6 + 8) = 0;
          v13 = *(_OWORD *)(v6 + 40);
          v14 = *(_QWORD *)(v6 + 64);
          v235 = *(_QWORD *)(v6 + 56);
          v15 = (void **)(v6 + 8);
          __p = v13;
          *(_QWORD *)(v6 + 48) = 0;
          *(_QWORD *)(v6 + 56) = 0;
          *(_QWORD *)(v6 + 40) = 0;
          v233 = v12;
          v236 = v14;
          v16 = (void **)(v6 + 40);
          do
          {
            v17 = (void ***)&(&v230)[v10];
            v18 = (_QWORD *)(v6 + v10 * 8);
            v17[10] = 0;
            v17[11] = 0;
            *(_OWORD *)(v17 + 9) = *(_OWORD *)(v6 + v10 * 8 + 72);
            v17[11] = *(void ***)(v6 + v10 * 8 + 88);
            v18[9] = 0;
            v18[10] = 0;
            v18[11] = 0;
            v10 += 3;
          }
          while (v10 != 6);
          v19 = v6;
          do
          {
            v20 = v19;
            v19 += 120;
          }
          while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(v19, (uint64_t)&v230) & 1) != 0);
          v21 = (unint64_t)a2;
          if (v20 == v6)
          {
            v21 = (unint64_t)a2;
            do
            {
              if (v19 >= v21)
                break;
              v21 -= 120;
            }
            while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(v21, (uint64_t)&v230) & 1) == 0);
          }
          else
          {
            do
              v21 -= 120;
            while (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(v21, (uint64_t)&v230));
          }
          v6 = v19;
          if (v19 < v21)
          {
            v22 = (int *)v21;
            do
            {
              std::swap[abi:ne180100]<AMCP::Node_Description>((int *)v6, v22);
              do
                v6 += 120;
              while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(v6, (uint64_t)&v230) & 1) != 0);
              do
                v22 -= 30;
              while (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)v22, (uint64_t)&v230));
            }
            while (v6 < (unint64_t)v22);
          }
          v23 = a3;
          if (v6 - 120 != a1)
          {
            *(_DWORD *)a1 = *(_DWORD *)(v6 - 120);
            if (*(char *)(a1 + 31) < 0)
              operator delete(*v15);
            v24 = *(_OWORD *)(v6 - 112);
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(v6 - 96);
            *(_OWORD *)v15 = v24;
            *(_BYTE *)(v6 - 89) = 0;
            *(_BYTE *)(v6 - 112) = 0;
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v6 - 88);
            if (*(char *)(a1 + 63) < 0)
              operator delete(*v16);
            v25 = 0;
            v26 = *(_OWORD *)(v6 - 80);
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(v6 - 64);
            *(_OWORD *)v16 = v26;
            *(_BYTE *)(v6 - 57) = 0;
            *(_BYTE *)(v6 - 80) = 0;
            *(_QWORD *)(a1 + 64) = *(_QWORD *)(v6 - 56);
            do
            {
              v27 = a1 + v25;
              v28 = v6 + v25;
              std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)(a1 + v25 + 72));
              *(_OWORD *)(v27 + 72) = *(_OWORD *)(v6 + v25 - 48);
              *(_QWORD *)(v27 + 88) = *(_QWORD *)(v6 + v25 - 32);
              *(_QWORD *)(v28 - 48) = 0;
              *(_QWORD *)(v28 - 40) = 0;
              *(_QWORD *)(v28 - 32) = 0;
              v25 += 24;
            }
            while (v25 != 48);
          }
          *(_DWORD *)(v6 - 120) = (_DWORD)v230;
          v29 = (void **)(v6 - 112);
          if (*(char *)(v6 - 89) < 0)
            operator delete(*v29);
          v30 = v231;
          *(_QWORD *)(v6 - 96) = v232;
          *(_OWORD *)v29 = v30;
          HIBYTE(v232) = 0;
          LOBYTE(v231) = 0;
          *(_QWORD *)(v6 - 88) = v233;
          v31 = (void **)(v6 - 80);
          if (*(char *)(v6 - 57) < 0)
            operator delete(*v31);
          v32 = 0;
          v33 = __p;
          *(_QWORD *)(v6 - 64) = v235;
          *(_OWORD *)v31 = v33;
          HIBYTE(v235) = 0;
          LOBYTE(__p) = 0;
          *(_QWORD *)(v6 - 56) = v236;
          do
          {
            v34 = v6 + v32;
            v35 = (void ***)&(&v230)[v32 / 8];
            std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)(v6 + v32 - 48));
            *(_OWORD *)(v34 - 48) = *(_OWORD *)&v237[v32];
            *(_QWORD *)(v34 - 32) = *(_QWORD *)&v237[v32 + 16];
            v35[9] = 0;
            v35[10] = 0;
            v35[11] = 0;
            v32 += 24;
          }
          while (v32 != 48);
          for (m = 12; m != 6; m -= 3)
          {
            v221 = (void ***)&(&v230)[m];
            std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
          }
          a3 = v23;
          if (SHIBYTE(v235) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v232) < 0)
            operator delete((void *)v231);
          if (v19 < v21)
            goto LABEL_48;
          v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>((int *)a1, (int *)(v6 - 120));
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>((int *)v6, a2))
          {
            if (v37)
              continue;
LABEL_48:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *,false>(a1, v6 - 120, v23, a4 & 1);
LABEL_49:
            a4 = 0;
            continue;
          }
          a2 = (int *)(v6 - 120);
          if (v37)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if ((int *)v6 != a2)
          {
            v63 = v6 + 120;
            if ((int *)(v6 + 120) != a2)
            {
              v64 = 0;
              v65 = v6;
              do
              {
                v66 = a2;
                if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(v63, v65))
                {
                  v67 = 0;
                  LODWORD(v230) = *(_DWORD *)v63;
                  v68 = *(_QWORD *)(v65 + 152);
                  v232 = *(_QWORD *)(v65 + 144);
                  v69 = *(_QWORD *)(v65 + 184);
                  v235 = *(_QWORD *)(v65 + 176);
                  v233 = v68;
                  v236 = v69;
                  v231 = *(_OWORD *)(v65 + 128);
                  *(_QWORD *)(v65 + 128) = 0;
                  *(_QWORD *)(v65 + 136) = 0;
                  *(_QWORD *)(v65 + 144) = 0;
                  __p = *(_OWORD *)(v65 + 160);
                  *(_QWORD *)(v65 + 160) = 0;
                  *(_QWORD *)(v65 + 168) = 0;
                  *(_QWORD *)(v65 + 176) = 0;
                  do
                  {
                    v70 = (void ***)&(&v230)[v67];
                    v71 = (_QWORD *)(v65 + v67 * 8);
                    v70[11] = 0;
                    *(_OWORD *)(v70 + 9) = *(_OWORD *)(v65 + v67 * 8 + 192);
                    v70[11] = *(void ***)(v65 + v67 * 8 + 208);
                    v71[24] = 0;
                    v71[25] = 0;
                    v71[26] = 0;
                    v67 += 3;
                  }
                  while (v67 != 6);
                  v215 = v63;
                  v216 = v64;
                  v72 = (_DWORD *)v65;
                  while (1)
                  {
                    v73 = v72;
                    v74 = v72 + 2;
                    *(_DWORD *)v63 = *v72;
                    v75 = (void **)(v63 + 8);
                    if (*(char *)(v63 + 31) < 0)
                      operator delete(*v75);
                    *(_OWORD *)v75 = *(_OWORD *)v74;
                    *(_QWORD *)(v63 + 24) = *((_QWORD *)v74 + 2);
                    *((_BYTE *)v73 + 31) = 0;
                    *((_BYTE *)v73 + 8) = 0;
                    *(_QWORD *)(v63 + 32) = *((_QWORD *)v73 + 4);
                    v76 = (void **)(v63 + 40);
                    if (*(char *)(v63 + 63) < 0)
                      operator delete(*v76);
                    v77 = (void **)(v73 + 10);
                    *(_OWORD *)v76 = *(_OWORD *)(v73 + 10);
                    *(_QWORD *)(v63 + 56) = *((_QWORD *)v73 + 7);
                    *((_BYTE *)v73 + 63) = 0;
                    *((_BYTE *)v73 + 40) = 0;
                    *(_QWORD *)(v63 + 64) = *((_QWORD *)v73 + 8);
                    v78 = v64;
                    v79 = 2;
                    do
                    {
                      v80 = v6 + v78;
                      std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)(v6 + v78 + 192));
                      *(_OWORD *)(v80 + 192) = *(_OWORD *)(v80 + 72);
                      *(_QWORD *)(v80 + 208) = *(_QWORD *)(v80 + 88);
                      *(_QWORD *)(v80 + 80) = 0;
                      *(_QWORD *)(v80 + 88) = 0;
                      *(_QWORD *)(v80 + 72) = 0;
                      v78 += 24;
                      --v79;
                    }
                    while (v79);
                    if (v73 == (_DWORD *)v6)
                      break;
                    v72 = v73 - 30;
                    v64 -= 120;
                    v63 = (uint64_t)v73;
                    if ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)&v230, (uint64_t)(v73 - 30)) & 1) == 0)
                    {
                      v81 = (unint64_t)v73;
                      goto LABEL_112;
                    }
                  }
                  v81 = v6;
LABEL_112:
                  v63 = v215;
                  *(_DWORD *)v81 = (_DWORD)v230;
                  if (*(char *)(v81 + 31) < 0)
                    operator delete(*(void **)v74);
                  v82 = v231;
                  *((_QWORD *)v74 + 2) = v232;
                  *(_OWORD *)v74 = v82;
                  HIBYTE(v232) = 0;
                  LOBYTE(v231) = 0;
                  *(_QWORD *)(v81 + 32) = v233;
                  if (*(char *)(v81 + 63) < 0)
                    operator delete(*v77);
                  v83 = 0;
                  v84 = __p;
                  *((_QWORD *)v73 + 7) = v235;
                  *(_OWORD *)v77 = v84;
                  HIBYTE(v235) = 0;
                  LOBYTE(__p) = 0;
                  *(_QWORD *)(v81 + 64) = v236;
                  v66 = a2;
                  do
                  {
                    v85 = &v73[v83 / 4];
                    v86 = (void ***)&(&v230)[v83 / 8];
                    std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)&v73[v83 / 4 + 18]);
                    *(_OWORD *)(v85 + 18) = *(_OWORD *)&v237[v83];
                    *((_QWORD *)v85 + 11) = *(_QWORD *)&v237[v83 + 16];
                    v86[9] = 0;
                    v86[10] = 0;
                    v86[11] = 0;
                    v83 += 24;
                  }
                  while (v83 != 48);
                  for (n = 12; n != 6; n -= 3)
                  {
                    v221 = (void ***)&(&v230)[n];
                    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
                  }
                  v64 = v216;
                  if (SHIBYTE(v235) < 0)
                    operator delete((void *)__p);
                  if (SHIBYTE(v232) < 0)
                    operator delete((void *)v231);
                }
                v63 += 120;
                v65 += 120;
                v64 += 120;
              }
              while ((int *)v63 != v66);
            }
          }
        }
        else if ((int *)v6 != a2)
        {
          v187 = (int *)(v6 + 120);
          if ((int *)(v6 + 120) != a2)
          {
            do
            {
              v188 = a2;
              if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)v187, a1))
              {
                v189 = 0;
                LODWORD(v230) = *v187;
                v190 = *(_QWORD *)(a1 + 152);
                v232 = *(_QWORD *)(a1 + 144);
                v191 = *(_QWORD *)(a1 + 184);
                v235 = *(_QWORD *)(a1 + 176);
                v233 = v190;
                v236 = v191;
                v231 = *(_OWORD *)(a1 + 128);
                *(_QWORD *)(a1 + 128) = 0;
                *(_QWORD *)(a1 + 136) = 0;
                *(_QWORD *)(a1 + 144) = 0;
                __p = *(_OWORD *)(a1 + 160);
                *(_QWORD *)(a1 + 160) = 0;
                *(_QWORD *)(a1 + 168) = 0;
                *(_QWORD *)(a1 + 176) = 0;
                do
                {
                  v192 = (void ***)&(&v230)[v189];
                  v193 = (_QWORD *)(a1 + v189 * 8);
                  v192[11] = 0;
                  *(_OWORD *)(v192 + 9) = *(_OWORD *)(a1 + v189 * 8 + 192);
                  v192[11] = *(void ***)(a1 + v189 * 8 + 208);
                  v193[24] = 0;
                  v193[25] = 0;
                  v193[26] = 0;
                  v189 += 3;
                }
                while (v189 != 6);
                v194 = (_DWORD *)a1;
                v195 = v187;
                do
                {
                  v196 = v194;
                  v197 = v194 + 2;
                  *v195 = *v194;
                  v198 = (void **)(v195 + 2);
                  if (*((char *)v195 + 31) < 0)
                    operator delete(*v198);
                  *(_OWORD *)v198 = *(_OWORD *)v197;
                  *((_QWORD *)v195 + 3) = *((_QWORD *)v197 + 2);
                  *((_BYTE *)v196 + 31) = 0;
                  *((_BYTE *)v196 + 8) = 0;
                  *((_QWORD *)v195 + 4) = *((_QWORD *)v196 + 4);
                  v199 = (void **)(v195 + 10);
                  if (*((char *)v195 + 63) < 0)
                    operator delete(*v199);
                  v200 = 0;
                  v201 = (void **)(v196 + 10);
                  *(_OWORD *)v199 = *(_OWORD *)(v196 + 10);
                  *((_QWORD *)v195 + 7) = *((_QWORD *)v196 + 7);
                  *((_BYTE *)v196 + 63) = 0;
                  *((_BYTE *)v196 + 40) = 0;
                  *((_QWORD *)v195 + 8) = *((_QWORD *)v196 + 8);
                  do
                  {
                    v202 = &v196[v200];
                    std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)&v196[v200 + 48]);
                    *((_OWORD *)v202 + 12) = *(_OWORD *)(v202 + 18);
                    *((_QWORD *)v202 + 26) = *((_QWORD *)v202 + 11);
                    *((_QWORD *)v202 + 10) = 0;
                    *((_QWORD *)v202 + 11) = 0;
                    *((_QWORD *)v202 + 9) = 0;
                    v200 += 6;
                  }
                  while (v200 != 12);
                  v194 = v196 - 30;
                  v195 = v196;
                }
                while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)&v230, (uint64_t)(v196 - 30)) & 1) != 0);
                *v196 = (_DWORD)v230;
                if (*((char *)v196 + 31) < 0)
                  operator delete(*(void **)v197);
                v203 = v231;
                *((_QWORD *)v197 + 2) = v232;
                *(_OWORD *)v197 = v203;
                HIBYTE(v232) = 0;
                LOBYTE(v231) = 0;
                *((_QWORD *)v196 + 4) = v233;
                if (*((char *)v196 + 63) < 0)
                  operator delete(*v201);
                v204 = 0;
                v205 = __p;
                *((_QWORD *)v196 + 7) = v235;
                *(_OWORD *)v201 = v205;
                HIBYTE(v235) = 0;
                LOBYTE(__p) = 0;
                *((_QWORD *)v196 + 8) = v236;
                do
                {
                  v206 = &v194[v204 / 4];
                  v207 = (void ***)&(&v230)[v204 / 8];
                  std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)&v194[v204 / 4 + 48]);
                  *((_OWORD *)v206 + 12) = *(_OWORD *)&v237[v204];
                  *((_QWORD *)v206 + 26) = *(_QWORD *)&v237[v204 + 16];
                  v207[9] = 0;
                  v207[10] = 0;
                  v207[11] = 0;
                  v204 += 24;
                }
                while (v204 != 48);
                v208 = 12;
                v188 = a2;
                do
                {
                  v221 = (void ***)&(&v230)[v208];
                  std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
                  v208 -= 3;
                }
                while (v208 != 6);
                if (SHIBYTE(v235) < 0)
                  operator delete((void *)__p);
                if (SHIBYTE(v232) < 0)
                  operator delete((void *)v231);
              }
              v187 += 30;
              a1 += 120;
            }
            while (v187 != v188);
          }
        }
        return;
    }
  }
}

  v294 = (__int128 *)(a2 - 192);
  v286 = (__int128 *)(a2 - 576);
  v288 = (__int128 *)(a2 - 384);
  v7 = a1;
  v302 = a2;
  while (2)
  {
    v8 = v7;
    v9 = a2 - v7;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v7) >> 6);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v294, v7))std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)v7, v294);
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)v7, (__int128 *)(v7 + 192), v294);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)v7, (__int128 *)(v7 + 192), (__int128 *)(v7 + 384), v294);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)v7, (__int128 *)(v7 + 192), (__int128 *)(v7 + 384), (__int128 *)(v7 + 576), v294);
        return;
      default:
        v304 = v7;
        if (v9 > 4607)
        {
          if (!a3)
          {
            if (v7 != a2)
            {
              v301 = (v10 - 2) >> 1;
              v119 = v301;
              v285 = a2 - v7;
              v300 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v7) >> 6);
              do
              {
                v120 = v119;
                if (v9 >= 384 && v301 >= v119)
                {
                  v121 = (2 * v119) | 1;
                  v122 = v8 + 192 * v121;
                  if (2 * v119 + 2 < (uint64_t)v10
                    && std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v8 + 192 * v121, v122 + 192))
                  {
                    v122 += 192;
                    v121 = 2 * v120 + 2;
                  }
                  v123 = v8 + 192 * v120;
                  if ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v122, v123) & 1) == 0)
                  {
                    v124 = *(_OWORD *)v123;
                    v324 = *(_QWORD *)(v123 + 16);
                    *(_OWORD *)v323 = v124;
                    *(_QWORD *)(v123 + 8) = 0;
                    *(_QWORD *)(v123 + 16) = 0;
                    *(_QWORD *)v123 = 0;
                    v125 = *(_QWORD *)(v123 + 24);
                    v326 = *(_DWORD *)(v123 + 32);
                    v325 = v125;
                    v126 = v8 + 192 * v120;
                    v127 = *(_OWORD *)(v126 + 40);
                    v328 = *(_QWORD *)(v126 + 56);
                    v327 = v127;
                    *(_QWORD *)(v126 + 48) = 0;
                    *(_QWORD *)(v126 + 56) = 0;
                    *(_QWORD *)(v126 + 40) = 0;
                    v128 = *(_QWORD *)(v126 + 64);
                    v330 = *(_DWORD *)(v126 + 72);
                    v329 = v128;
                    *(_OWORD *)v331 = *(_OWORD *)(v126 + 80);
                    v332 = *(_QWORD *)(v126 + 96);
                    *(_QWORD *)(v126 + 80) = 0;
                    *(_QWORD *)(v126 + 88) = 0;
                    *(_QWORD *)(v126 + 96) = 0;
                    __p = *(_OWORD *)(v126 + 104);
                    v334 = *(_QWORD *)(v126 + 120);
                    *(_QWORD *)(v126 + 104) = 0;
                    *(_QWORD *)(v126 + 112) = 0;
                    *(_QWORD *)(v126 + 120) = 0;
                    v129 = *(_OWORD *)(v126 + 128);
                    v130 = *(_OWORD *)(v126 + 144);
                    v337 = *(_BYTE *)(v126 + 160);
                    v335 = v129;
                    v336 = v130;
                    v338 = *(_OWORD *)(v126 + 168);
                    v339 = *(_QWORD *)(v126 + 184);
                    *(_QWORD *)(v126 + 168) = 0;
                    *(_QWORD *)(v126 + 176) = 0;
                    *(_QWORD *)(v126 + 184) = 0;
                    do
                    {
                      v131 = v122;
                      if (*(char *)(v123 + 23) < 0)
                        operator delete(*(void **)v123);
                      v132 = *(_OWORD *)v122;
                      *(_QWORD *)(v123 + 16) = *(_QWORD *)(v122 + 16);
                      *(_OWORD *)v123 = v132;
                      *(_BYTE *)(v122 + 23) = 0;
                      v133 = *(_QWORD *)(v122 + 24);
                      *(_BYTE *)v122 = 0;
                      v134 = *(_DWORD *)(v122 + 32);
                      *(_QWORD *)(v123 + 24) = v133;
                      *(_DWORD *)(v123 + 32) = v134;
                      v135 = (void **)(v123 + 40);
                      if (*(char *)(v123 + 63) < 0)
                        operator delete(*v135);
                      v136 = *(_OWORD *)(v122 + 40);
                      *(_QWORD *)(v123 + 56) = *(_QWORD *)(v122 + 56);
                      *(_OWORD *)v135 = v136;
                      v138 = (_QWORD *)(v122 + 64);
                      v137 = *(_QWORD *)(v122 + 64);
                      *(_BYTE *)(v122 + 63) = 0;
                      *(_BYTE *)(v122 + 40) = 0;
                      v139 = *(_DWORD *)(v122 + 72);
                      v140 = *(void **)(v123 + 80);
                      *(_QWORD *)(v123 + 64) = v137;
                      *(_DWORD *)(v123 + 72) = v139;
                      if (v140)
                      {
                        *(_QWORD *)(v123 + 88) = v140;
                        operator delete(v140);
                        *(_QWORD *)(v123 + 80) = 0;
                        *(_QWORD *)(v123 + 88) = 0;
                        *(_QWORD *)(v123 + 96) = 0;
                      }
                      v141 = (void **)(v122 + 80);
                      *(_OWORD *)(v123 + 80) = *(_OWORD *)(v122 + 80);
                      *(_QWORD *)(v123 + 96) = *(_QWORD *)(v122 + 96);
                      *(_QWORD *)(v122 + 80) = 0;
                      *(_QWORD *)(v122 + 88) = 0;
                      *(_QWORD *)(v122 + 96) = 0;
                      v142 = *(void **)(v123 + 104);
                      if (v142)
                      {
                        *(_QWORD *)(v123 + 112) = v142;
                        operator delete(v142);
                        *(_QWORD *)(v123 + 104) = 0;
                        *(_QWORD *)(v123 + 112) = 0;
                        *(_QWORD *)(v123 + 120) = 0;
                      }
                      *(_OWORD *)(v123 + 104) = *(_OWORD *)(v122 + 104);
                      *(_QWORD *)(v123 + 120) = *(_QWORD *)(v122 + 120);
                      *(_QWORD *)(v122 + 104) = 0;
                      *(_QWORD *)(v122 + 112) = 0;
                      *(_QWORD *)(v122 + 120) = 0;
                      v143 = *(_OWORD *)(v122 + 128);
                      v144 = *(_OWORD *)(v122 + 144);
                      *(_BYTE *)(v123 + 160) = *(_BYTE *)(v122 + 160);
                      *(_OWORD *)(v123 + 128) = v143;
                      *(_OWORD *)(v123 + 144) = v144;
                      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v123 + 168));
                      *(_OWORD *)(v123 + 168) = *(_OWORD *)(v122 + 168);
                      *(_QWORD *)(v123 + 184) = *(_QWORD *)(v122 + 184);
                      *(_QWORD *)(v122 + 168) = 0;
                      *(_QWORD *)(v122 + 176) = 0;
                      *(_QWORD *)(v122 + 184) = 0;
                      if (v301 < v121)
                        break;
                      v145 = (2 * v121) | 1;
                      v122 = v304 + 192 * v145;
                      v146 = 2 * v121 + 2;
                      if (v146 < v300
                        && std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v304 + 192 * v145, v122 + 192))
                      {
                        v122 += 192;
                        v145 = v146;
                      }
                      v123 = v131;
                      v121 = v145;
                    }
                    while (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v122, (uint64_t)v323));
                    if (*(char *)(v131 + 23) < 0)
                      operator delete(*(void **)v131);
                    v147 = (void **)(v131 + 40);
                    v148 = *(_OWORD *)v323;
                    *(_QWORD *)(v131 + 16) = v324;
                    *(_OWORD *)v131 = v148;
                    HIBYTE(v324) = 0;
                    LOBYTE(v323[0]) = 0;
                    v149 = v326;
                    *(_QWORD *)(v131 + 24) = v325;
                    *(_DWORD *)(v131 + 32) = v149;
                    if (*(char *)(v131 + 63) < 0)
                      operator delete(*v147);
                    v150 = v327;
                    *(_QWORD *)(v131 + 56) = v328;
                    *(_OWORD *)v147 = v150;
                    HIBYTE(v328) = 0;
                    LOBYTE(v327) = 0;
                    v151 = v330;
                    *v138 = v329;
                    *(_DWORD *)(v131 + 72) = v151;
                    v152 = *v141;
                    v8 = v304;
                    if (*v141)
                    {
                      *(_QWORD *)(v131 + 88) = v152;
                      operator delete(v152);
                      *v141 = 0;
                      *(_QWORD *)(v131 + 88) = 0;
                      *(_QWORD *)(v131 + 96) = 0;
                    }
                    *(_OWORD *)(v131 + 80) = *(_OWORD *)v331;
                    *(_QWORD *)(v131 + 96) = v332;
                    v331[0] = 0;
                    v331[1] = 0;
                    v332 = 0;
                    v153 = *(void **)(v131 + 104);
                    if (v153)
                    {
                      *(_QWORD *)(v131 + 112) = v153;
                      operator delete(v153);
                      *(_QWORD *)(v131 + 104) = 0;
                      *(_QWORD *)(v131 + 112) = 0;
                      *(_QWORD *)(v131 + 120) = 0;
                    }
                    *(_OWORD *)(v131 + 104) = __p;
                    *(_QWORD *)(v131 + 120) = v334;
                    __p = 0uLL;
                    v334 = 0;
                    v154 = v337;
                    v155 = v336;
                    *(_OWORD *)(v131 + 128) = v335;
                    *(_OWORD *)(v131 + 144) = v155;
                    *(_BYTE *)(v131 + 160) = v154;
                    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v131 + 168));
                    *(_OWORD *)(v131 + 168) = v338;
                    *(_QWORD *)(v131 + 184) = v339;
                    v338 = 0uLL;
                    v339 = 0;
                    v305[0] = &v338;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v305);
                    v10 = v300;
                    if ((_QWORD)__p)
                    {
                      *((_QWORD *)&__p + 1) = __p;
                      operator delete((void *)__p);
                    }
                    a2 = v302;
                    v9 = v285;
                    if (v331[0])
                    {
                      v331[1] = v331[0];
                      operator delete(v331[0]);
                    }
                    if (SHIBYTE(v328) < 0)
                      operator delete((void *)v327);
                    if (SHIBYTE(v324) < 0)
                      operator delete(v323[0]);
                  }
                }
                v119 = v120 - 1;
              }
              while (v120);
              v156 = v9 / 0xC0uLL;
              v290 = v8 + 40;
              v291 = v8 + 24;
              v289 = v8 + 64;
              v287 = (_QWORD *)(v8 + 80);
              v283 = v8 + 128;
              v284 = (_QWORD *)(v8 + 104);
              v282 = (_QWORD *)(v8 + 168);
              do
              {
                if (v156 >= 2)
                {
                  v303 = a2;
                  v157 = 0;
                  v158 = *(_OWORD *)v8;
                  v306 = *(_QWORD *)(v8 + 16);
                  *(_OWORD *)v305 = v158;
                  *(_QWORD *)(v8 + 8) = 0;
                  *(_QWORD *)(v8 + 16) = 0;
                  *(_QWORD *)v8 = 0;
                  v159 = *(_DWORD *)(v291 + 8);
                  v307 = *(_QWORD *)v291;
                  v308 = v159;
                  v160 = *(_QWORD *)(v290 + 16);
                  v309 = *(_OWORD *)v290;
                  v310 = v160;
                  *(_QWORD *)(v290 + 8) = 0;
                  *(_QWORD *)(v290 + 16) = 0;
                  *(_QWORD *)v290 = 0;
                  v161 = *(_QWORD *)v289;
                  v312 = *(_DWORD *)(v289 + 8);
                  v311 = v161;
                  *(_OWORD *)v313 = *(_OWORD *)(v8 + 80);
                  v314 = *(_QWORD *)(v8 + 96);
                  *v287 = 0;
                  v287[1] = 0;
                  v287[2] = 0;
                  v315 = *(_OWORD *)(v8 + 104);
                  v316 = *(_QWORD *)(v8 + 120);
                  *v284 = 0;
                  v284[1] = 0;
                  v284[2] = 0;
                  v162 = *(_OWORD *)v283;
                  v163 = *(_OWORD *)(v283 + 16);
                  v319 = *(_BYTE *)(v283 + 32);
                  v317 = v162;
                  v318 = v163;
                  v320 = *(_OWORD *)(v8 + 168);
                  v321 = *(_QWORD *)(v8 + 184);
                  *v282 = 0;
                  v282[1] = 0;
                  v164 = v8;
                  v282[2] = 0;
                  do
                  {
                    v165 = v164 + 192 * v157 + 192;
                    v166 = 2 * v157;
                    v157 = (2 * v157) | 1;
                    v167 = v166 + 2;
                    if (v166 + 2 < v156
                      && std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v165, v165 + 192))
                    {
                      v165 += 192;
                      v157 = v167;
                    }
                    if (*(char *)(v164 + 23) < 0)
                      operator delete(*(void **)v164);
                    v168 = *(_OWORD *)v165;
                    *(_QWORD *)(v164 + 16) = *(_QWORD *)(v165 + 16);
                    *(_OWORD *)v164 = v168;
                    *(_BYTE *)(v165 + 23) = 0;
                    v170 = (uint64_t *)(v165 + 24);
                    v169 = *(_QWORD *)(v165 + 24);
                    *(_BYTE *)v165 = 0;
                    v171 = *(_DWORD *)(v165 + 32);
                    *(_QWORD *)(v164 + 24) = v169;
                    *(_DWORD *)(v164 + 32) = v171;
                    v172 = (void **)(v164 + 40);
                    if (*(char *)(v164 + 63) < 0)
                      operator delete(*v172);
                    v173 = *(_OWORD *)(v165 + 40);
                    *(_QWORD *)(v164 + 56) = *(_QWORD *)(v165 + 56);
                    *(_OWORD *)v172 = v173;
                    v175 = (uint64_t *)(v165 + 64);
                    v174 = *(_QWORD *)(v165 + 64);
                    *(_BYTE *)(v165 + 63) = 0;
                    *(_BYTE *)(v165 + 40) = 0;
                    v176 = *(_DWORD *)(v165 + 72);
                    v177 = *(void **)(v164 + 80);
                    *(_QWORD *)(v164 + 64) = v174;
                    *(_DWORD *)(v164 + 72) = v176;
                    if (v177)
                    {
                      *(_QWORD *)(v164 + 88) = v177;
                      operator delete(v177);
                      *(_QWORD *)(v164 + 80) = 0;
                      *(_QWORD *)(v164 + 88) = 0;
                      *(_QWORD *)(v164 + 96) = 0;
                    }
                    v178 = (void **)(v165 + 80);
                    *(_OWORD *)(v164 + 80) = *(_OWORD *)(v165 + 80);
                    *(_QWORD *)(v164 + 96) = *(_QWORD *)(v165 + 96);
                    *(_QWORD *)(v165 + 80) = 0;
                    *(_QWORD *)(v165 + 88) = 0;
                    *(_QWORD *)(v165 + 96) = 0;
                    v179 = *(void **)(v164 + 104);
                    if (v179)
                    {
                      *(_QWORD *)(v164 + 112) = v179;
                      operator delete(v179);
                      *(_QWORD *)(v164 + 104) = 0;
                      *(_QWORD *)(v164 + 112) = 0;
                      *(_QWORD *)(v164 + 120) = 0;
                    }
                    v180 = (_QWORD *)(v165 + 104);
                    *(_OWORD *)(v164 + 104) = *(_OWORD *)(v165 + 104);
                    *(_QWORD *)(v164 + 120) = *(_QWORD *)(v165 + 120);
                    *(_QWORD *)(v165 + 104) = 0;
                    *(_QWORD *)(v165 + 112) = 0;
                    *(_QWORD *)(v165 + 120) = 0;
                    v181 = *(_OWORD *)(v165 + 128);
                    v182 = *(_OWORD *)(v165 + 144);
                    *(_BYTE *)(v164 + 160) = *(_BYTE *)(v165 + 160);
                    *(_OWORD *)(v164 + 128) = v181;
                    *(_OWORD *)(v164 + 144) = v182;
                    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v164 + 168));
                    *(_OWORD *)(v164 + 168) = *(_OWORD *)(v165 + 168);
                    *(_QWORD *)(v164 + 184) = *(_QWORD *)(v165 + 184);
                    *(_QWORD *)(v165 + 168) = 0;
                    *(_QWORD *)(v165 + 176) = 0;
                    *(_QWORD *)(v165 + 184) = 0;
                    v164 = v165;
                  }
                  while (v157 <= (uint64_t)((unint64_t)(v156 - 2) >> 1));
                  v183 = v165 + 40;
                  v184 = (_OWORD *)(v165 + 128);
                  v185 = *(char *)(v165 + 23);
                  v298 = (__int128 *)(v165 + 40);
                  if (v165 == v303 - 192)
                  {
                    if (v185 < 0)
                    {
                      operator delete(*(void **)v165);
                      v183 = v165 + 40;
                    }
                    v242 = *(_OWORD *)v305;
                    *(_QWORD *)(v165 + 16) = v306;
                    *(_OWORD *)v165 = v242;
                    HIBYTE(v306) = 0;
                    LOBYTE(v305[0]) = 0;
                    v243 = v307;
                    *(_DWORD *)(v165 + 32) = v308;
                    *v170 = v243;
                    if (*(char *)(v165 + 63) < 0)
                    {
                      operator delete(*(void **)v183);
                      v183 = v165 + 40;
                    }
                    v244 = v309;
                    *(_QWORD *)(v183 + 16) = v310;
                    *(_OWORD *)v183 = v244;
                    HIBYTE(v310) = 0;
                    LOBYTE(v309) = 0;
                    v245 = v312;
                    *v175 = v311;
                    *(_DWORD *)(v165 + 72) = v245;
                    v246 = *v178;
                    if (*v178)
                    {
                      *(_QWORD *)(v165 + 88) = v246;
                      operator delete(v246);
                      *v178 = 0;
                      *(_QWORD *)(v165 + 88) = 0;
                      *(_QWORD *)(v165 + 96) = 0;
                    }
                    *(_OWORD *)(v165 + 80) = *(_OWORD *)v313;
                    *(_QWORD *)(v165 + 96) = v314;
                    v313[0] = 0;
                    v313[1] = 0;
                    v314 = 0;
                    v247 = *(void **)(v165 + 104);
                    if (v247)
                    {
                      *(_QWORD *)(v165 + 112) = v247;
                      operator delete(v247);
                      *v180 = 0;
                      *(_QWORD *)(v165 + 112) = 0;
                      *(_QWORD *)(v165 + 120) = 0;
                    }
                    *(_OWORD *)(v165 + 104) = v315;
                    *(_QWORD *)(v165 + 120) = v316;
                    v315 = 0uLL;
                    v316 = 0;
                    v248 = v317;
                    v249 = v318;
                    *(_BYTE *)(v165 + 160) = v319;
                    *v184 = v248;
                    *(_OWORD *)(v165 + 144) = v249;
                    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v165 + 168));
                    *(_OWORD *)(v165 + 168) = v320;
                    *(_QWORD *)(v165 + 184) = v321;
                    v320 = 0uLL;
                    v321 = 0;
                  }
                  else
                  {
                    if (v185 < 0)
                    {
                      operator delete(*(void **)v165);
                      v183 = v165 + 40;
                    }
                    v186 = *(_OWORD *)(v303 - 192);
                    v295 = (void **)(v303 - 192);
                    *(_QWORD *)(v165 + 16) = *(_QWORD *)(v303 - 176);
                    *(_OWORD *)v165 = v186;
                    v187 = *(_QWORD *)(v303 - 168);
                    *(_BYTE *)(v303 - 169) = 0;
                    *(_BYTE *)(v303 - 192) = 0;
                    v188 = *(_DWORD *)(v303 - 160);
                    *v170 = v187;
                    *(_DWORD *)(v165 + 32) = v188;
                    if (*(char *)(v165 + 63) < 0)
                    {
                      operator delete(*(void **)v183);
                      v183 = v165 + 40;
                    }
                    v189 = *(_OWORD *)(v303 - 152);
                    *(_QWORD *)(v183 + 16) = *(_QWORD *)(v303 - 136);
                    *(_OWORD *)v183 = v189;
                    v190 = *(_QWORD *)(v303 - 128);
                    *(_BYTE *)(v303 - 129) = 0;
                    *(_BYTE *)(v303 - 152) = 0;
                    v191 = *(_DWORD *)(v303 - 120);
                    *v175 = v190;
                    *(_DWORD *)(v165 + 72) = v191;
                    v192 = *v178;
                    if (*v178)
                    {
                      *(_QWORD *)(v165 + 88) = v192;
                      operator delete(v192);
                      *v178 = 0;
                      *(_QWORD *)(v165 + 88) = 0;
                      *(_QWORD *)(v165 + 96) = 0;
                    }
                    *(_OWORD *)(v165 + 80) = *(_OWORD *)(v303 - 112);
                    *(_QWORD *)(v165 + 96) = *(_QWORD *)(v303 - 96);
                    *(_QWORD *)(v303 - 112) = 0;
                    *(_QWORD *)(v303 - 104) = 0;
                    v293 = (void **)(v303 - 112);
                    *(_QWORD *)(v303 - 96) = 0;
                    v193 = *(void **)(v165 + 104);
                    if (v193)
                    {
                      *(_QWORD *)(v165 + 112) = v193;
                      operator delete(v193);
                      *v180 = 0;
                      *(_QWORD *)(v165 + 112) = 0;
                      *(_QWORD *)(v165 + 120) = 0;
                    }
                    v194 = (_QWORD *)(v303 - 88);
                    *(_OWORD *)(v165 + 104) = *(_OWORD *)(v303 - 88);
                    *(_QWORD *)(v165 + 120) = *(_QWORD *)(v303 - 72);
                    *v194 = 0;
                    v194[1] = 0;
                    v194[2] = 0;
                    v195 = *(_OWORD *)(v303 - 64);
                    v196 = *(_OWORD *)(v303 - 48);
                    *(_BYTE *)(v165 + 160) = *(_BYTE *)(v303 - 32);
                    *v184 = v195;
                    *(_OWORD *)(v165 + 144) = v196;
                    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v165 + 168));
                    v197 = (std::vector<std::string> *)(v303 - 24);
                    *(_OWORD *)(v165 + 168) = *(_OWORD *)(v303 - 24);
                    *(_QWORD *)(v165 + 184) = *(_QWORD *)(v303 - 8);
                    v197->__begin_ = 0;
                    v197->__end_ = 0;
                    v197->__end_cap_.__value_ = 0;
                    if (*(char *)(v303 - 169) < 0)
                      operator delete(*v295);
                    v198 = (void **)(v303 - 152);
                    v199 = *(_OWORD *)v305;
                    *(_QWORD *)(v303 - 176) = v306;
                    *(_OWORD *)v295 = v199;
                    HIBYTE(v306) = 0;
                    LOBYTE(v305[0]) = 0;
                    v200 = v308;
                    *(_QWORD *)(v303 - 168) = v307;
                    *(_DWORD *)(v303 - 160) = v200;
                    if (*(char *)(v303 - 129) < 0)
                      operator delete(*v198);
                    v201 = v309;
                    *(_QWORD *)(v303 - 136) = v310;
                    *(_OWORD *)v198 = v201;
                    HIBYTE(v310) = 0;
                    LOBYTE(v309) = 0;
                    v202 = v312;
                    *(_QWORD *)(v303 - 128) = v311;
                    *(_DWORD *)(v303 - 120) = v202;
                    v203 = *v293;
                    if (*v293)
                    {
                      *(_QWORD *)(v303 - 104) = v203;
                      operator delete(v203);
                      *v293 = 0;
                      *(_QWORD *)(v303 - 104) = 0;
                      *(_QWORD *)(v303 - 96) = 0;
                    }
                    *(_OWORD *)(v303 - 112) = *(_OWORD *)v313;
                    *(_QWORD *)(v303 - 96) = v314;
                    v313[0] = 0;
                    v313[1] = 0;
                    v314 = 0;
                    v204 = *(void **)(v303 - 88);
                    if (v204)
                    {
                      *(_QWORD *)(v303 - 80) = v204;
                      operator delete(v204);
                      *(_QWORD *)(v303 - 88) = 0;
                      *(_QWORD *)(v303 - 80) = 0;
                      *(_QWORD *)(v303 - 72) = 0;
                    }
                    v205 = v303 - 64;
                    *(_OWORD *)(v303 - 88) = v315;
                    *(_QWORD *)(v303 - 72) = v316;
                    v315 = 0uLL;
                    v316 = 0;
                    v206 = v317;
                    v207 = v318;
                    *(_BYTE *)(v205 + 32) = v319;
                    *(_OWORD *)v205 = v206;
                    *(_OWORD *)(v205 + 16) = v207;
                    std::vector<std::string>::__vdeallocate(v197);
                    *(_OWORD *)(v303 - 24) = v320;
                    *(_QWORD *)(v303 - 8) = v321;
                    v320 = 0uLL;
                    v321 = 0;
                    v208 = v165 + 192 - v304;
                    if (v208 >= 193)
                    {
                      v209 = (unint64_t)(-2 - 0x5555555555555555 * (v208 >> 6)) >> 1;
                      v210 = v304 + 192 * v209;
                      if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v210, v165))
                      {
                        v211 = *(_OWORD *)v165;
                        v324 = *(_QWORD *)(v165 + 16);
                        *(_OWORD *)v323 = v211;
                        *(_QWORD *)(v165 + 8) = 0;
                        *(_QWORD *)(v165 + 16) = 0;
                        *(_QWORD *)v165 = 0;
                        v212 = *v170;
                        v326 = *(_DWORD *)(v165 + 32);
                        v325 = v212;
                        v213 = *v298;
                        v328 = *(_QWORD *)(v165 + 56);
                        v327 = v213;
                        *(_QWORD *)(v165 + 48) = 0;
                        *(_QWORD *)(v165 + 56) = 0;
                        *(_QWORD *)v298 = 0;
                        v214 = *v175;
                        v330 = *(_DWORD *)(v165 + 72);
                        v329 = v214;
                        *(_OWORD *)v331 = *(_OWORD *)(v165 + 80);
                        v332 = *(_QWORD *)(v165 + 96);
                        *v178 = 0;
                        *(_QWORD *)(v165 + 88) = 0;
                        *(_QWORD *)(v165 + 96) = 0;
                        __p = *(_OWORD *)(v165 + 104);
                        v334 = *(_QWORD *)(v165 + 120);
                        *v180 = 0;
                        *(_QWORD *)(v165 + 112) = 0;
                        *(_QWORD *)(v165 + 120) = 0;
                        v215 = *(_OWORD *)(v165 + 128);
                        v216 = *(_OWORD *)(v165 + 144);
                        v337 = *(_BYTE *)(v165 + 160);
                        v335 = v215;
                        v336 = v216;
                        v338 = *(_OWORD *)(v165 + 168);
                        v339 = *(_QWORD *)(v165 + 184);
                        *(_QWORD *)(v165 + 168) = 0;
                        *(_QWORD *)(v165 + 176) = 0;
                        *(_QWORD *)(v165 + 184) = 0;
                        do
                        {
                          v217 = v210;
                          if (*(char *)(v165 + 23) < 0)
                            operator delete(*(void **)v165);
                          v218 = *(_OWORD *)v210;
                          *(_QWORD *)(v165 + 16) = *(_QWORD *)(v210 + 16);
                          *(_OWORD *)v165 = v218;
                          *(_BYTE *)(v210 + 23) = 0;
                          v220 = (_QWORD *)(v210 + 24);
                          v219 = *(_QWORD *)(v210 + 24);
                          *(_BYTE *)v210 = 0;
                          v221 = *(_DWORD *)(v210 + 32);
                          *(_QWORD *)(v165 + 24) = v219;
                          *(_DWORD *)(v165 + 32) = v221;
                          v222 = (void **)(v165 + 40);
                          if (*(char *)(v165 + 63) < 0)
                            operator delete(*v222);
                          v223 = *(_OWORD *)(v210 + 40);
                          *(_QWORD *)(v165 + 56) = *(_QWORD *)(v210 + 56);
                          *(_OWORD *)v222 = v223;
                          v225 = (_QWORD *)(v210 + 64);
                          v224 = *(_QWORD *)(v210 + 64);
                          *(_BYTE *)(v210 + 63) = 0;
                          *(_BYTE *)(v210 + 40) = 0;
                          v226 = *(_DWORD *)(v210 + 72);
                          v227 = *(void **)(v165 + 80);
                          *(_QWORD *)(v165 + 64) = v224;
                          *(_DWORD *)(v165 + 72) = v226;
                          if (v227)
                          {
                            *(_QWORD *)(v165 + 88) = v227;
                            operator delete(v227);
                            *(_QWORD *)(v165 + 80) = 0;
                            *(_QWORD *)(v165 + 88) = 0;
                            *(_QWORD *)(v165 + 96) = 0;
                          }
                          v228 = (void **)(v210 + 80);
                          *(_OWORD *)(v165 + 80) = *(_OWORD *)(v210 + 80);
                          *(_QWORD *)(v165 + 96) = *(_QWORD *)(v210 + 96);
                          *(_QWORD *)(v210 + 80) = 0;
                          *(_QWORD *)(v210 + 88) = 0;
                          *(_QWORD *)(v210 + 96) = 0;
                          v229 = *(void **)(v165 + 104);
                          if (v229)
                          {
                            *(_QWORD *)(v165 + 112) = v229;
                            operator delete(v229);
                            *(_QWORD *)(v165 + 104) = 0;
                            *(_QWORD *)(v165 + 112) = 0;
                            *(_QWORD *)(v165 + 120) = 0;
                          }
                          v230 = (_QWORD *)(v210 + 104);
                          *(_OWORD *)(v165 + 104) = *(_OWORD *)(v210 + 104);
                          *(_QWORD *)(v165 + 120) = *(_QWORD *)(v210 + 120);
                          *(_QWORD *)(v210 + 104) = 0;
                          *(_QWORD *)(v210 + 112) = 0;
                          *(_QWORD *)(v210 + 120) = 0;
                          v231 = *(_OWORD *)(v210 + 128);
                          v232 = *(_OWORD *)(v210 + 144);
                          *(_BYTE *)(v165 + 160) = *(_BYTE *)(v210 + 160);
                          *(_OWORD *)(v165 + 128) = v231;
                          *(_OWORD *)(v165 + 144) = v232;
                          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v165 + 168));
                          *(_OWORD *)(v165 + 168) = *(_OWORD *)(v210 + 168);
                          *(_QWORD *)(v165 + 184) = *(_QWORD *)(v210 + 184);
                          *(_QWORD *)(v210 + 168) = 0;
                          *(_QWORD *)(v210 + 176) = 0;
                          *(_QWORD *)(v210 + 184) = 0;
                          if (!v209)
                            break;
                          v209 = (v209 - 1) >> 1;
                          v210 = v304 + 192 * v209;
                          v165 = v217;
                        }
                        while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v210, (uint64_t)v323) & 1) != 0);
                        if (*(char *)(v217 + 23) < 0)
                          operator delete(*(void **)v217);
                        v233 = (void **)(v217 + 40);
                        v234 = *(_OWORD *)v323;
                        *(_QWORD *)(v217 + 16) = v324;
                        *(_OWORD *)v217 = v234;
                        HIBYTE(v324) = 0;
                        LOBYTE(v323[0]) = 0;
                        v235 = v326;
                        *v220 = v325;
                        *(_DWORD *)(v217 + 32) = v235;
                        if (*(char *)(v217 + 63) < 0)
                          operator delete(*v233);
                        v236 = v327;
                        *(_QWORD *)(v217 + 56) = v328;
                        *(_OWORD *)v233 = v236;
                        HIBYTE(v328) = 0;
                        LOBYTE(v327) = 0;
                        v237 = v330;
                        *v225 = v329;
                        *(_DWORD *)(v217 + 72) = v237;
                        v238 = *v228;
                        if (*v228)
                        {
                          *(_QWORD *)(v217 + 88) = v238;
                          operator delete(v238);
                          *v228 = 0;
                          v225[3] = 0;
                          v225[4] = 0;
                        }
                        *(_OWORD *)(v217 + 80) = *(_OWORD *)v331;
                        *(_QWORD *)(v217 + 96) = v332;
                        v331[0] = 0;
                        v331[1] = 0;
                        v332 = 0;
                        v239 = *(void **)(v217 + 104);
                        if (v239)
                        {
                          *(_QWORD *)(v217 + 112) = v239;
                          operator delete(v239);
                          *v230 = 0;
                          *(_QWORD *)(v217 + 112) = 0;
                          *(_QWORD *)(v217 + 120) = 0;
                        }
                        *(_OWORD *)(v217 + 104) = __p;
                        *(_QWORD *)(v217 + 120) = v334;
                        __p = 0uLL;
                        v334 = 0;
                        v240 = v337;
                        v241 = v336;
                        *(_OWORD *)(v217 + 128) = v335;
                        *(_OWORD *)(v217 + 144) = v241;
                        *(_BYTE *)(v217 + 160) = v240;
                        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v217 + 168));
                        *(_OWORD *)(v217 + 168) = v338;
                        *(_QWORD *)(v217 + 184) = v339;
                        v338 = 0uLL;
                        v339 = 0;
                        v322 = (void **)&v338;
                        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v322);
                        if ((_QWORD)__p)
                        {
                          *((_QWORD *)&__p + 1) = __p;
                          operator delete((void *)__p);
                        }
                        if (v331[0])
                        {
                          v331[1] = v331[0];
                          operator delete(v331[0]);
                        }
                        if (SHIBYTE(v328) < 0)
                          operator delete((void *)v327);
                        if (SHIBYTE(v324) < 0)
                          operator delete(v323[0]);
                      }
                    }
                  }
                  v323[0] = &v320;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v323);
                  if ((_QWORD)v315)
                  {
                    *((_QWORD *)&v315 + 1) = v315;
                    operator delete((void *)v315);
                  }
                  a2 = v303;
                  v8 = v304;
                  if (v313[0])
                  {
                    v313[1] = v313[0];
                    operator delete(v313[0]);
                  }
                  if (SHIBYTE(v310) < 0)
                    operator delete((void *)v309);
                  if (SHIBYTE(v306) < 0)
                    operator delete(v305[0]);
                }
                a2 -= 192;
              }
              while ((unint64_t)v156-- > 2);
            }
            return;
          }
          if ((unint64_t)v9 <= 0x6000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)(v7 + 192 * (v10 >> 1)), (__int128 *)v7, v294);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)v7, (__int128 *)(v7 + 192 * (v10 >> 1)), v294);
            v11 = (__int128 *)(v7 + 192 * (v10 >> 1) - 192);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)(v8 + 192), v11, v288);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)(v8 + 384), (__int128 *)(v8 + 192 + 192 * (v10 >> 1)), v286);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)v11, (__int128 *)(v8 + 192 * (v10 >> 1)), (__int128 *)(v8 + 192 + 192 * (v10 >> 1)));
            std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)v8, (__int128 *)(v8 + 192 * (v10 >> 1)));
          }
          --a3;
          if ((a4 & 1) == 0
            && (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v8 - 192, v8) & 1) == 0)
          {
            v50 = *(_OWORD *)v8;
            v324 = *(_QWORD *)(v8 + 16);
            *(_OWORD *)v323 = v50;
            *(_QWORD *)(v8 + 8) = 0;
            *(_QWORD *)(v8 + 16) = 0;
            *(_QWORD *)v8 = 0;
            v51 = *(_DWORD *)(v8 + 32);
            v325 = *(_QWORD *)(v8 + 24);
            v326 = v51;
            v52 = *(_QWORD *)(v8 + 56);
            v327 = *(_OWORD *)(v8 + 40);
            v328 = v52;
            *(_QWORD *)(v8 + 48) = 0;
            *(_QWORD *)(v8 + 56) = 0;
            *(_QWORD *)(v8 + 40) = 0;
            v53 = *(_QWORD *)(v8 + 64);
            v330 = *(_DWORD *)(v8 + 72);
            v329 = v53;
            v54 = (void **)(v8 + 80);
            *(_OWORD *)v331 = *(_OWORD *)(v8 + 80);
            v332 = *(_QWORD *)(v8 + 96);
            *(_QWORD *)(v8 + 80) = 0;
            *(_QWORD *)(v8 + 88) = 0;
            *(_QWORD *)(v8 + 96) = 0;
            __p = *(_OWORD *)(v8 + 104);
            v334 = *(_QWORD *)(v8 + 120);
            *(_QWORD *)(v8 + 104) = 0;
            *(_QWORD *)(v8 + 112) = 0;
            *(_QWORD *)(v8 + 120) = 0;
            v55 = *(_OWORD *)(v8 + 128);
            v56 = *(_OWORD *)(v8 + 144);
            v337 = *(_BYTE *)(v8 + 160);
            v335 = v55;
            v336 = v56;
            v338 = *(_OWORD *)(v8 + 168);
            v339 = *(_QWORD *)(v8 + 184);
            *(_QWORD *)(v8 + 168) = 0;
            *(_QWORD *)(v8 + 176) = 0;
            *(_QWORD *)(v8 + 184) = 0;
            if ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v323, (uint64_t)v294) & 1) != 0)
            {
              v7 = v8;
              do
                v7 += 192;
              while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v323, v7) & 1) == 0);
            }
            else
            {
              v57 = v8 + 192;
              do
              {
                v7 = v57;
                if (v57 >= v302)
                  break;
                v58 = std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v323, v57);
                v57 = v7 + 192;
              }
              while (!v58);
            }
            v59 = (__int128 *)v302;
            if (v7 < v302)
            {
              v59 = (__int128 *)v302;
              do
                v59 -= 12;
              while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v323, (uint64_t)v59) & 1) != 0);
            }
            while (v7 < (unint64_t)v59)
            {
              std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)v7, v59);
              do
                v7 += 192;
              while (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v323, v7));
              do
                v59 -= 12;
              while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v323, (uint64_t)v59) & 1) != 0);
            }
            v60 = (void **)(v7 - 192);
            if (v7 - 192 != v8)
            {
              if (*(char *)(v8 + 23) < 0)
                operator delete(*(void **)v8);
              v61 = (void **)(v8 + 40);
              v62 = *(_OWORD *)v60;
              *(_QWORD *)(v8 + 16) = *(_QWORD *)(v7 - 176);
              *(_OWORD *)v8 = v62;
              *(_BYTE *)(v7 - 169) = 0;
              *(_BYTE *)(v7 - 192) = 0;
              v63 = *(_DWORD *)(v7 - 160);
              *(_QWORD *)(v8 + 24) = *(_QWORD *)(v7 - 168);
              *(_DWORD *)(v8 + 32) = v63;
              if (*(char *)(v8 + 63) < 0)
                operator delete(*v61);
              v64 = *(_OWORD *)(v7 - 152);
              *(_QWORD *)(v8 + 56) = *(_QWORD *)(v7 - 136);
              *(_OWORD *)v61 = v64;
              *(_BYTE *)(v7 - 129) = 0;
              *(_BYTE *)(v7 - 152) = 0;
              v65 = *(_DWORD *)(v7 - 120);
              *(_QWORD *)(v8 + 64) = *(_QWORD *)(v7 - 128);
              *(_DWORD *)(v8 + 72) = v65;
              v66 = *v54;
              if (*v54)
              {
                *(_QWORD *)(v8 + 88) = v66;
                operator delete(v66);
                *v54 = 0;
                *(_QWORD *)(v8 + 88) = 0;
                *(_QWORD *)(v8 + 96) = 0;
              }
              v67 = (_QWORD *)(v7 - 112);
              *(_OWORD *)(v8 + 80) = *(_OWORD *)(v7 - 112);
              *(_QWORD *)(v8 + 96) = *(_QWORD *)(v7 - 96);
              *v67 = 0;
              v67[1] = 0;
              v67[2] = 0;
              v68 = *(void **)(v8 + 104);
              if (v68)
              {
                *(_QWORD *)(v8 + 112) = v68;
                operator delete(v68);
                *(_QWORD *)(v8 + 104) = 0;
                *(_QWORD *)(v8 + 112) = 0;
                *(_QWORD *)(v8 + 120) = 0;
              }
              v69 = (_QWORD *)(v7 - 88);
              *(_OWORD *)(v8 + 104) = *(_OWORD *)(v7 - 88);
              *(_QWORD *)(v8 + 120) = *(_QWORD *)(v7 - 72);
              *v69 = 0;
              v69[1] = 0;
              v69[2] = 0;
              v70 = *(_OWORD *)(v7 - 64);
              v71 = *(_OWORD *)(v7 - 48);
              *(_BYTE *)(v8 + 160) = *(_BYTE *)(v7 - 32);
              *(_OWORD *)(v8 + 128) = v70;
              *(_OWORD *)(v8 + 144) = v71;
              std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v8 + 168));
              *(_OWORD *)(v8 + 168) = *(_OWORD *)(v7 - 24);
              *(_QWORD *)(v8 + 184) = *(_QWORD *)(v7 - 8);
              *(_QWORD *)(v7 - 24) = 0;
              *(_QWORD *)(v7 - 16) = 0;
              *(_QWORD *)(v7 - 8) = 0;
            }
            if (*(char *)(v7 - 169) < 0)
              operator delete(*v60);
            v72 = *(_OWORD *)v323;
            *(_QWORD *)(v7 - 176) = v324;
            *(_OWORD *)v60 = v72;
            HIBYTE(v324) = 0;
            LOBYTE(v323[0]) = 0;
            v73 = v326;
            *(_QWORD *)(v7 - 168) = v325;
            *(_DWORD *)(v7 - 160) = v73;
            v74 = (void **)(v7 - 152);
            a2 = v302;
            if (*(char *)(v7 - 129) < 0)
              operator delete(*v74);
            v75 = v327;
            *(_QWORD *)(v7 - 136) = v328;
            *(_OWORD *)v74 = v75;
            HIBYTE(v328) = 0;
            LOBYTE(v327) = 0;
            v76 = v330;
            v77 = *(void **)(v7 - 112);
            *(_QWORD *)(v7 - 128) = v329;
            *(_DWORD *)(v7 - 120) = v76;
            if (v77)
            {
              *(_QWORD *)(v7 - 104) = v77;
              operator delete(v77);
              *(_QWORD *)(v7 - 112) = 0;
              *(_QWORD *)(v7 - 104) = 0;
              *(_QWORD *)(v7 - 96) = 0;
            }
            *(_OWORD *)(v7 - 112) = *(_OWORD *)v331;
            *(_QWORD *)(v7 - 96) = v332;
            v331[0] = 0;
            v331[1] = 0;
            v332 = 0;
            v78 = *(void **)(v7 - 88);
            if (v78)
            {
              *(_QWORD *)(v7 - 80) = v78;
              operator delete(v78);
              *(_QWORD *)(v7 - 88) = 0;
              *(_QWORD *)(v7 - 80) = 0;
              *(_QWORD *)(v7 - 72) = 0;
            }
            *(_OWORD *)(v7 - 88) = __p;
            *(_QWORD *)(v7 - 72) = v334;
            __p = 0uLL;
            v334 = 0;
            v79 = v335;
            v80 = v336;
            *(_BYTE *)(v7 - 32) = v337;
            *(_OWORD *)(v7 - 64) = v79;
            *(_OWORD *)(v7 - 48) = v80;
            std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v7 - 24));
            *(_OWORD *)(v7 - 24) = v338;
            *(_QWORD *)(v7 - 8) = v339;
            v338 = 0uLL;
            v339 = 0;
            v305[0] = &v338;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v305);
            if ((_QWORD)__p)
            {
              *((_QWORD *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            if (v331[0])
            {
              v331[1] = v331[0];
              operator delete(v331[0]);
            }
            if (SHIBYTE(v328) < 0)
              operator delete((void *)v327);
            if (SHIBYTE(v324) < 0)
              operator delete(v323[0]);
            goto LABEL_55;
          }
          v299 = a3;
          v12 = *(_OWORD *)v8;
          v324 = *(_QWORD *)(v8 + 16);
          *(_OWORD *)v323 = v12;
          *(_QWORD *)(v8 + 8) = 0;
          *(_QWORD *)(v8 + 16) = 0;
          *(_QWORD *)v8 = 0;
          v13 = v8 + 24;
          v14 = *(_DWORD *)(v8 + 32);
          v325 = *(_QWORD *)(v8 + 24);
          v326 = v14;
          v296 = v8 + 40;
          v15 = *(_QWORD *)(v8 + 56);
          v327 = *(_OWORD *)(v8 + 40);
          v328 = v15;
          *(_QWORD *)(v8 + 48) = 0;
          *(_QWORD *)(v8 + 56) = 0;
          *(_QWORD *)(v8 + 40) = 0;
          v16 = v8;
          v18 = *(_QWORD *)(v8 + 64);
          v17 = v8 + 64;
          v330 = *(_DWORD *)(v16 + 72);
          v329 = v18;
          v19 = v16 + 80;
          *(_OWORD *)v331 = *(_OWORD *)(v16 + 80);
          v332 = *(_QWORD *)(v16 + 96);
          *(_QWORD *)(v16 + 80) = 0;
          v20 = (_QWORD *)(v16 + 104);
          v21 = *(_OWORD *)(v16 + 104);
          *(_QWORD *)(v16 + 88) = 0;
          *(_QWORD *)(v16 + 96) = 0;
          __p = v21;
          v334 = *(_QWORD *)(v16 + 120);
          *(_QWORD *)(v16 + 104) = 0;
          *(_QWORD *)(v16 + 112) = 0;
          *(_QWORD *)(v16 + 120) = 0;
          v297 = v16 + 128;
          v22 = *(_OWORD *)(v16 + 128);
          v23 = *(_OWORD *)(v16 + 144);
          v337 = *(_BYTE *)(v16 + 160);
          v335 = v22;
          v336 = v23;
          v24 = (std::vector<std::string> *)(v16 + 168);
          v338 = *(_OWORD *)(v16 + 168);
          v339 = *(_QWORD *)(v16 + 184);
          *(_QWORD *)(v16 + 168) = 0;
          *(_QWORD *)(v16 + 176) = 0;
          *(_QWORD *)(v16 + 184) = 0;
          do
          {
            v25 = v16;
            v16 += 192;
          }
          while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v16, (uint64_t)v323) & 1) != 0);
          v26 = v302;
          if (v25 == v304)
          {
            v26 = v302;
            do
            {
              if (v16 >= v26)
                break;
              v26 -= 192;
            }
            while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v26, (uint64_t)v323) & 1) == 0);
          }
          else
          {
            do
              v26 -= 192;
            while (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v26, (uint64_t)v323));
          }
          v7 = v16;
          if (v16 < v26)
          {
            v27 = (__int128 *)v26;
            do
            {
              std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)v7, v27);
              do
                v7 += 192;
              while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v7, (uint64_t)v323) & 1) != 0);
              do
                v27 -= 12;
              while (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v27, (uint64_t)v323));
            }
            while (v7 < (unint64_t)v27);
          }
          v28 = (void **)(v7 - 192);
          if (v7 - 192 != v304)
          {
            if (*(char *)(v304 + 23) < 0)
              operator delete(*(void **)v304);
            v29 = *(_OWORD *)v28;
            *(_QWORD *)(v304 + 16) = *(_QWORD *)(v7 - 176);
            *(_OWORD *)v304 = v29;
            *(_BYTE *)(v7 - 169) = 0;
            *(_BYTE *)(v7 - 192) = 0;
            v30 = *(_DWORD *)(v7 - 160);
            *(_QWORD *)v13 = *(_QWORD *)(v7 - 168);
            *(_DWORD *)(v13 + 8) = v30;
            if (*(char *)(v304 + 63) < 0)
              operator delete(*(void **)v296);
            v31 = *(_OWORD *)(v7 - 152);
            *(_QWORD *)(v296 + 16) = *(_QWORD *)(v7 - 136);
            *(_OWORD *)v296 = v31;
            *(_BYTE *)(v7 - 129) = 0;
            *(_BYTE *)(v7 - 152) = 0;
            v32 = *(_DWORD *)(v7 - 120);
            *(_QWORD *)v17 = *(_QWORD *)(v7 - 128);
            *(_DWORD *)(v17 + 8) = v32;
            v33 = *(void **)v19;
            if (*(_QWORD *)v19)
            {
              *(_QWORD *)(v304 + 88) = v33;
              operator delete(v33);
              *(_QWORD *)v19 = 0;
              *(_QWORD *)(v19 + 8) = 0;
              *(_QWORD *)(v19 + 16) = 0;
            }
            v34 = (_QWORD *)(v7 - 112);
            *(_OWORD *)(v304 + 80) = *(_OWORD *)(v7 - 112);
            *(_QWORD *)(v304 + 96) = *(_QWORD *)(v7 - 96);
            *v34 = 0;
            v34[1] = 0;
            v34[2] = 0;
            v35 = *(void **)(v304 + 104);
            if (v35)
            {
              *(_QWORD *)(v304 + 112) = v35;
              operator delete(v35);
              *v20 = 0;
              v20[1] = 0;
              v20[2] = 0;
            }
            v36 = (_QWORD *)(v7 - 88);
            *(_OWORD *)(v304 + 104) = *(_OWORD *)(v7 - 88);
            *(_QWORD *)(v304 + 120) = *(_QWORD *)(v7 - 72);
            *v36 = 0;
            v36[1] = 0;
            v36[2] = 0;
            v37 = *(_OWORD *)(v7 - 64);
            v38 = *(_OWORD *)(v7 - 48);
            *(_BYTE *)(v297 + 32) = *(_BYTE *)(v7 - 32);
            *(_OWORD *)v297 = v37;
            *(_OWORD *)(v297 + 16) = v38;
            std::vector<std::string>::__vdeallocate(v24);
            *(_OWORD *)(v304 + 168) = *(_OWORD *)(v7 - 24);
            *(_QWORD *)(v304 + 184) = *(_QWORD *)(v7 - 8);
            *(_QWORD *)(v7 - 24) = 0;
            *(_QWORD *)(v7 - 16) = 0;
            *(_QWORD *)(v7 - 8) = 0;
          }
          if (*(char *)(v7 - 169) < 0)
            operator delete(*v28);
          v39 = *(_OWORD *)v323;
          *(_QWORD *)(v7 - 176) = v324;
          *(_OWORD *)v28 = v39;
          HIBYTE(v324) = 0;
          LOBYTE(v323[0]) = 0;
          v40 = v326;
          *(_QWORD *)(v7 - 168) = v325;
          *(_DWORD *)(v7 - 160) = v40;
          v41 = (void **)(v7 - 152);
          a2 = v302;
          a1 = v304;
          if (*(char *)(v7 - 129) < 0)
            operator delete(*v41);
          v42 = v327;
          *(_QWORD *)(v7 - 136) = v328;
          *(_OWORD *)v41 = v42;
          HIBYTE(v328) = 0;
          LOBYTE(v327) = 0;
          v43 = v330;
          v44 = *(void **)(v7 - 112);
          *(_QWORD *)(v7 - 128) = v329;
          *(_DWORD *)(v7 - 120) = v43;
          if (v44)
          {
            *(_QWORD *)(v7 - 104) = v44;
            operator delete(v44);
            *(_QWORD *)(v7 - 112) = 0;
            *(_QWORD *)(v7 - 104) = 0;
            *(_QWORD *)(v7 - 96) = 0;
          }
          *(_OWORD *)(v7 - 112) = *(_OWORD *)v331;
          *(_QWORD *)(v7 - 96) = v332;
          v331[0] = 0;
          v331[1] = 0;
          v332 = 0;
          v45 = *(void **)(v7 - 88);
          if (v45)
          {
            *(_QWORD *)(v7 - 80) = v45;
            operator delete(v45);
            *(_QWORD *)(v7 - 88) = 0;
            *(_QWORD *)(v7 - 80) = 0;
            *(_QWORD *)(v7 - 72) = 0;
          }
          *(_OWORD *)(v7 - 88) = __p;
          *(_QWORD *)(v7 - 72) = v334;
          __p = 0uLL;
          v334 = 0;
          v46 = v335;
          v47 = v336;
          *(_BYTE *)(v7 - 32) = v337;
          *(_OWORD *)(v7 - 64) = v46;
          *(_OWORD *)(v7 - 48) = v47;
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v7 - 24));
          *(_OWORD *)(v7 - 24) = v338;
          *(_QWORD *)(v7 - 8) = v339;
          v338 = 0uLL;
          v339 = 0;
          v305[0] = &v338;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v305);
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          if (v331[0])
          {
            v331[1] = v331[0];
            operator delete(v331[0]);
          }
          if (SHIBYTE(v328) < 0)
            operator delete((void *)v327);
          if (SHIBYTE(v324) < 0)
            operator delete(v323[0]);
          v48 = v16 >= v26;
          a3 = v299;
          if (!v48)
            goto LABEL_54;
          v49 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>(v304, v7 - 192);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>(v7, v302))
          {
            if (v49)
              continue;
LABEL_54:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *,false>(v304, v7 - 192, v299, a4 & 1);
LABEL_55:
            a4 = 0;
            continue;
          }
          a2 = v7 - 192;
          if (v49)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if (v7 != a2)
          {
            v81 = v7 + 192;
            if (v7 + 192 != a2)
            {
              v82 = 0;
              v83 = v7;
              do
              {
                v84 = v81;
                if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v81, v83))
                {
                  v85 = *(_OWORD *)v84;
                  v324 = *(_QWORD *)(v84 + 16);
                  *(_OWORD *)v323 = v85;
                  *(_QWORD *)(v84 + 8) = 0;
                  *(_QWORD *)(v84 + 16) = 0;
                  *(_QWORD *)v84 = 0;
                  v325 = *(_QWORD *)(v83 + 216);
                  v326 = *(_DWORD *)(v83 + 224);
                  v86 = *(_QWORD *)(v83 + 256);
                  v328 = *(_QWORD *)(v83 + 248);
                  v327 = *(_OWORD *)(v83 + 232);
                  *(_QWORD *)(v83 + 232) = 0;
                  *(_QWORD *)(v83 + 240) = 0;
                  *(_QWORD *)(v83 + 248) = 0;
                  v329 = v86;
                  v330 = *(_DWORD *)(v83 + 264);
                  *(_OWORD *)v331 = *(_OWORD *)(v83 + 272);
                  v332 = *(_QWORD *)(v83 + 288);
                  *(_QWORD *)(v83 + 280) = 0;
                  *(_QWORD *)(v83 + 288) = 0;
                  *(_QWORD *)(v83 + 272) = 0;
                  __p = *(_OWORD *)(v83 + 296);
                  v334 = *(_QWORD *)(v83 + 312);
                  *(_QWORD *)(v83 + 296) = 0;
                  *(_QWORD *)(v83 + 304) = 0;
                  *(_QWORD *)(v83 + 312) = 0;
                  v87 = *(_OWORD *)(v83 + 336);
                  v335 = *(_OWORD *)(v83 + 320);
                  v336 = v87;
                  v337 = *(_BYTE *)(v83 + 352);
                  v338 = *(_OWORD *)(v83 + 360);
                  v339 = *(_QWORD *)(v83 + 376);
                  *(_QWORD *)(v83 + 360) = 0;
                  *(_QWORD *)(v83 + 368) = 0;
                  v88 = v82;
                  *(_QWORD *)(v83 + 376) = 0;
                  while (1)
                  {
                    v89 = v88;
                    v90 = v8 + v88;
                    v91 = (void **)(v90 + 192);
                    if (*(char *)(v90 + 215) < 0)
                      operator delete(*v91);
                    *(_OWORD *)v91 = *(_OWORD *)v90;
                    v92 = *(_QWORD *)(v90 + 24);
                    *(_QWORD *)(v90 + 208) = *(_QWORD *)(v90 + 16);
                    *(_BYTE *)(v90 + 23) = 0;
                    *(_BYTE *)v90 = 0;
                    *(_QWORD *)(v90 + 216) = v92;
                    *(_DWORD *)(v90 + 224) = *(_DWORD *)(v90 + 32);
                    v93 = v90 + 232;
                    if (*(char *)(v90 + 255) < 0)
                      operator delete(*(void **)v93);
                    v94 = v8 + v89;
                    *(_OWORD *)v93 = *(_OWORD *)(v8 + v89 + 40);
                    v95 = *(_QWORD *)(v8 + v89 + 64);
                    *(_QWORD *)(v93 + 16) = *(_QWORD *)(v8 + v89 + 56);
                    *(_BYTE *)(v94 + 63) = 0;
                    *(_BYTE *)(v94 + 40) = 0;
                    *(_QWORD *)(v94 + 256) = v95;
                    *(_DWORD *)(v94 + 264) = *(_DWORD *)(v8 + v89 + 72);
                    v96 = *(void **)(v8 + v89 + 272);
                    if (v96)
                    {
                      *(_QWORD *)(v94 + 280) = v96;
                      operator delete(v96);
                      *(_QWORD *)(v94 + 288) = 0;
                    }
                    *(_OWORD *)(v94 + 272) = *(_OWORD *)(v94 + 80);
                    *(_QWORD *)(v94 + 288) = *(_QWORD *)(v94 + 96);
                    *(_QWORD *)(v94 + 80) = 0;
                    *(_QWORD *)(v94 + 88) = 0;
                    *(_QWORD *)(v94 + 96) = 0;
                    v97 = *(void **)(v94 + 296);
                    if (v97)
                    {
                      *(_QWORD *)(v8 + v89 + 304) = v97;
                      operator delete(v97);
                      *(_QWORD *)(v8 + v89 + 312) = 0;
                    }
                    v98 = (_QWORD *)(v94 + 104);
                    *(_OWORD *)(v94 + 296) = *(_OWORD *)(v94 + 104);
                    v99 = v8 + v89;
                    *(_QWORD *)(v99 + 312) = *(_QWORD *)(v8 + v89 + 120);
                    *v98 = 0;
                    v98[1] = 0;
                    v98[2] = 0;
                    v100 = *(_OWORD *)(v8 + v89 + 144);
                    *(_OWORD *)(v99 + 320) = *(_OWORD *)(v8 + v89 + 128);
                    *(_OWORD *)(v99 + 336) = v100;
                    *(_BYTE *)(v99 + 352) = *(_BYTE *)(v8 + v89 + 160);
                    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v8 + v89 + 360));
                    *(_OWORD *)(v8 + v89 + 360) = *(_OWORD *)(v8 + v89 + 168);
                    *(_QWORD *)(v99 + 376) = *(_QWORD *)(v99 + 184);
                    *(_QWORD *)(v99 + 176) = 0;
                    *(_QWORD *)(v99 + 184) = 0;
                    *(_QWORD *)(v99 + 168) = 0;
                    if (!v89)
                      break;
                    v88 = v89 - 192;
                    if ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v323, v89 - 192 + v8) & 1) == 0)
                    {
                      v101 = v8 + v89;
                      v102 = (std::vector<std::string> *)(v8 + v89);
                      v103 = v8 + v89 + 24;
                      v104 = v8 + v89 + 40;
                      v105 = v8 + v89 + 64;
                      v106 = v8 + v89 + 80;
                      p_end = &v102[4].__end_;
                      v108 = &v102[5].__end_;
                      v109 = v102 + 7;
                      goto LABEL_124;
                    }
                  }
                  v103 = v99 + 24;
                  v104 = v99 + 40;
                  v105 = v99 + 64;
                  v110 = v8;
                  v106 = v99 + 80;
                  p_end = (std::vector<std::string>::pointer *)(v99 + 104);
                  v108 = (std::vector<std::string>::pointer *)(v99 + 128);
                  v109 = (std::vector<std::string> *)(v99 + 168);
                  v101 = v110;
LABEL_124:
                  if (*(char *)(v101 + 23) < 0)
                    operator delete(*(void **)v101);
                  v111 = *(_OWORD *)v323;
                  *(_QWORD *)(v101 + 16) = v324;
                  *(_OWORD *)v101 = v111;
                  HIBYTE(v324) = 0;
                  LOBYTE(v323[0]) = 0;
                  v112 = v325;
                  *(_DWORD *)(v103 + 8) = v326;
                  *(_QWORD *)v103 = v112;
                  if (*(char *)(v101 + 63) < 0)
                    operator delete(*(void **)v104);
                  v113 = v327;
                  *(_QWORD *)(v104 + 16) = v328;
                  *(_OWORD *)v104 = v113;
                  HIBYTE(v328) = 0;
                  LOBYTE(v327) = 0;
                  v114 = v330;
                  *(_QWORD *)v105 = v329;
                  *(_DWORD *)(v105 + 8) = v114;
                  v115 = *(void **)v106;
                  if (*(_QWORD *)v106)
                  {
                    *(_QWORD *)(v101 + 88) = v115;
                    operator delete(v115);
                    *(_QWORD *)v106 = 0;
                    *(_QWORD *)(v106 + 8) = 0;
                    *(_QWORD *)(v106 + 16) = 0;
                  }
                  *(void **)v106 = v331[0];
                  *(void **)(v101 + 88) = v331[1];
                  *(_QWORD *)(v101 + 96) = v332;
                  v331[0] = 0;
                  v331[1] = 0;
                  v332 = 0;
                  v116 = *p_end;
                  if (*p_end)
                  {
                    *(_QWORD *)(v101 + 112) = v116;
                    operator delete(v116);
                    *p_end = 0;
                    p_end[1] = 0;
                    p_end[2] = 0;
                  }
                  *p_end = (std::vector<std::string>::pointer)__p;
                  *(_QWORD *)(v101 + 112) = *((_QWORD *)&__p + 1);
                  *(_QWORD *)(v101 + 120) = v334;
                  __p = 0uLL;
                  v334 = 0;
                  v117 = v335;
                  v118 = v336;
                  *((_BYTE *)v108 + 32) = v337;
                  *(_OWORD *)v108 = v117;
                  *((_OWORD *)v108 + 1) = v118;
                  std::vector<std::string>::__vdeallocate(v109);
                  v109->__begin_ = (std::vector<std::string>::pointer)v338;
                  *(_QWORD *)(v101 + 176) = *((_QWORD *)&v338 + 1);
                  *(_QWORD *)(v101 + 184) = v339;
                  v338 = 0uLL;
                  v339 = 0;
                  v305[0] = &v338;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v305);
                  v8 = v304;
                  if ((_QWORD)__p)
                  {
                    *((_QWORD *)&__p + 1) = __p;
                    operator delete((void *)__p);
                  }
                  if (v331[0])
                  {
                    v331[1] = v331[0];
                    operator delete(v331[0]);
                  }
                  if (SHIBYTE(v328) < 0)
                    operator delete((void *)v327);
                  if (SHIBYTE(v324) < 0)
                    operator delete(v323[0]);
                }
                v81 = v84 + 192;
                v82 += 192;
                v83 = v84;
              }
              while (v84 + 192 != v302);
            }
          }
        }
        else if (v7 != a2)
        {
          v251 = v7 + 192;
          if (v7 + 192 != a2)
          {
            v252 = v7 + 96;
            do
            {
              v253 = v251;
              if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v251, v8))
              {
                v254 = *(_OWORD *)v253;
                v324 = *(_QWORD *)(v253 + 16);
                *(_OWORD *)v323 = v254;
                *(_QWORD *)(v253 + 8) = 0;
                *(_QWORD *)(v253 + 16) = 0;
                *(_QWORD *)v253 = 0;
                v325 = *(_QWORD *)(v8 + 216);
                v326 = *(_DWORD *)(v8 + 224);
                v255 = *(_QWORD *)(v8 + 256);
                v328 = *(_QWORD *)(v8 + 248);
                v327 = *(_OWORD *)(v8 + 232);
                *(_QWORD *)(v8 + 232) = 0;
                *(_QWORD *)(v8 + 240) = 0;
                *(_QWORD *)(v8 + 248) = 0;
                v329 = v255;
                v330 = *(_DWORD *)(v8 + 264);
                *(_OWORD *)v331 = *(_OWORD *)(v8 + 272);
                v332 = *(_QWORD *)(v8 + 288);
                *(_QWORD *)(v8 + 280) = 0;
                *(_QWORD *)(v8 + 288) = 0;
                *(_QWORD *)(v8 + 272) = 0;
                __p = *(_OWORD *)(v8 + 296);
                v334 = *(_QWORD *)(v8 + 312);
                *(_QWORD *)(v8 + 296) = 0;
                *(_QWORD *)(v8 + 304) = 0;
                *(_QWORD *)(v8 + 312) = 0;
                v256 = *(_OWORD *)(v8 + 336);
                v335 = *(_OWORD *)(v8 + 320);
                v336 = v256;
                v337 = *(_BYTE *)(v8 + 352);
                v338 = *(_OWORD *)(v8 + 360);
                v339 = *(_QWORD *)(v8 + 376);
                *(_QWORD *)(v8 + 360) = 0;
                *(_QWORD *)(v8 + 368) = 0;
                v257 = v252;
                *(_QWORD *)(v8 + 376) = 0;
                do
                {
                  v258 = v257;
                  v259 = v257 + 96;
                  if (*(char *)(v257 + 119) < 0)
                    operator delete(*(void **)v259);
                  *(_OWORD *)v259 = *(_OWORD *)(v258 - 96);
                  *(_QWORD *)(v259 + 16) = *(_QWORD *)(v258 - 80);
                  *(_BYTE *)(v258 - 73) = 0;
                  *(_BYTE *)(v258 - 96) = 0;
                  *(_QWORD *)(v258 + 120) = *(_QWORD *)(v258 - 72);
                  *(_DWORD *)(v258 + 128) = *(_DWORD *)(v258 - 64);
                  v260 = (void **)(v258 + 136);
                  if (*(char *)(v258 + 159) < 0)
                    operator delete(*v260);
                  *(_OWORD *)v260 = *(_OWORD *)(v258 - 56);
                  v261 = *(_QWORD *)(v258 - 32);
                  *(_QWORD *)(v258 + 152) = *(_QWORD *)(v258 - 40);
                  *(_BYTE *)(v258 - 33) = 0;
                  *(_BYTE *)(v258 - 56) = 0;
                  *(_QWORD *)(v258 + 160) = v261;
                  *(_DWORD *)(v258 + 168) = *(_DWORD *)(v258 - 24);
                  v262 = *(void **)(v258 + 176);
                  if (v262)
                  {
                    *(_QWORD *)(v258 + 184) = v262;
                    operator delete(v262);
                    *(_QWORD *)(v258 + 192) = 0;
                  }
                  v263 = (_QWORD *)(v258 - 16);
                  *(_OWORD *)(v258 + 176) = *(_OWORD *)(v258 - 16);
                  *(_QWORD *)(v258 + 192) = *(_QWORD *)v258;
                  v263[1] = 0;
                  *(_QWORD *)v258 = 0;
                  *v263 = 0;
                  v264 = *(void **)(v258 + 200);
                  if (v264)
                  {
                    *(_QWORD *)(v258 + 208) = v264;
                    operator delete(v264);
                    *(_QWORD *)(v258 + 216) = 0;
                  }
                  v265 = (void **)(v258 + 8);
                  *(_OWORD *)(v258 + 200) = *(_OWORD *)(v258 + 8);
                  *(_QWORD *)(v258 + 216) = *(_QWORD *)(v258 + 24);
                  *(_QWORD *)(v258 + 16) = 0;
                  *(_QWORD *)(v258 + 24) = 0;
                  *(_QWORD *)(v258 + 8) = 0;
                  v266 = *(_OWORD *)(v258 + 48);
                  *(_OWORD *)(v258 + 224) = *(_OWORD *)(v258 + 32);
                  *(_OWORD *)(v258 + 240) = v266;
                  *(_BYTE *)(v258 + 256) = *(_BYTE *)(v258 + 64);
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v258 + 264));
                  v267 = (std::vector<std::string> *)(v258 + 72);
                  *(_OWORD *)(v258 + 264) = *(_OWORD *)(v258 + 72);
                  *(_QWORD *)(v258 + 280) = *(_QWORD *)(v258 + 88);
                  *(_QWORD *)(v258 + 72) = 0;
                  *(_QWORD *)(v258 + 80) = 0;
                  *(_QWORD *)(v258 + 88) = 0;
                  v268 = std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v323, v258 - 288);
                  v257 = v258 - 192;
                }
                while ((v268 & 1) != 0);
                v269 = (void **)(v258 - 96);
                if (*(char *)(v258 - 73) < 0)
                  operator delete(*v269);
                v270 = v258 - 72;
                v271 = (void **)(v258 - 56);
                v272 = *(_OWORD *)v323;
                *(_QWORD *)(v258 - 80) = v324;
                *(_OWORD *)v269 = v272;
                HIBYTE(v324) = 0;
                LOBYTE(v323[0]) = 0;
                v273 = v326;
                *(_QWORD *)v270 = v325;
                *(_DWORD *)(v270 + 8) = v273;
                if (*(char *)(v258 - 33) < 0)
                  operator delete(*v271);
                v274 = v258 - 32;
                v275 = (_QWORD *)(v258 - 16);
                v276 = v327;
                *(_QWORD *)(v258 - 40) = v328;
                *(_OWORD *)v271 = v276;
                HIBYTE(v328) = 0;
                LOBYTE(v327) = 0;
                v277 = v330;
                *(_QWORD *)v274 = v329;
                *(_DWORD *)(v274 + 8) = v277;
                v278 = *(void **)(v258 - 16);
                if (v278)
                {
                  *(_QWORD *)(v258 - 8) = v278;
                  operator delete(v278);
                  *v275 = 0;
                  *(_QWORD *)(v258 - 8) = 0;
                  *(_QWORD *)v258 = 0;
                }
                *(_OWORD *)v275 = *(_OWORD *)v331;
                *(_QWORD *)v258 = v332;
                v331[0] = 0;
                v331[1] = 0;
                v332 = 0;
                v279 = *v265;
                if (*v265)
                {
                  *(_QWORD *)(v258 + 16) = v279;
                  operator delete(v279);
                  *v265 = 0;
                  *(_QWORD *)(v258 + 16) = 0;
                  *(_QWORD *)(v258 + 24) = 0;
                }
                *(_OWORD *)v265 = __p;
                *(_QWORD *)(v258 + 24) = v334;
                __p = 0uLL;
                v334 = 0;
                v280 = v335;
                v281 = v336;
                *(_BYTE *)(v258 + 64) = v337;
                *(_OWORD *)(v258 + 32) = v280;
                *(_OWORD *)(v258 + 48) = v281;
                std::vector<std::string>::__vdeallocate(v267);
                *(_OWORD *)&v267->__begin_ = v338;
                *(_QWORD *)(v258 + 88) = v339;
                v338 = 0uLL;
                v339 = 0;
                v305[0] = &v338;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v305);
                if ((_QWORD)__p)
                {
                  *((_QWORD *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (v331[0])
                {
                  v331[1] = v331[0];
                  operator delete(v331[0]);
                }
                if (SHIBYTE(v328) < 0)
                  operator delete((void *)v327);
                if (SHIBYTE(v324) < 0)
                  operator delete(v323[0]);
              }
              v251 = v253 + 192;
              v252 += 192;
              v8 = v253;
            }
            while (v253 + 192 != v302);
          }
        }
        return;
    }
  }
}

__int128 *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(__int128 *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *(_QWORD *)result)
  {
    if (v4 < v3)
    {
      v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (*a2 < *(_QWORD *)result)
      {
        v7 = *result;
        *result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v8 = *result;
      *result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*a3 >= *a2)
        return result;
      v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      v5 = *result;
      *result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(__int128 *a1, unint64_t *a2, unint64_t *a3, _OWORD *a4)
{
  __n128 result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, a2, a3);
  if (*(_QWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(_QWORD *)a1)
      {
        result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(__int128 *a1, unint64_t *a2, unint64_t *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, a2, a3, a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u64[0] < *a3)
    {
      result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 < *a2)
      {
        result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 < *(_QWORD *)a1)
        {
          result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (unint64_t *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

void minijson::detail::`anonymous namespace'::adjust_stream_settings(uint64_t *a1)
{
  std::ios_base *v2;
  const std::locale *v3;
  std::locale *rdbuf;
  std::locale *v5;
  uint64_t v6;
  std::locale v7;
  std::locale v8;
  std::locale v9;

  v2 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v3 = std::locale::classic();
  std::ios_base::getloc(v2);
  std::ios_base::imbue(v2, v3);
  std::locale::~locale(&v9);
  rdbuf = (std::locale *)v2->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, v3);
    v5 = rdbuf + 1;
    std::locale::locale(&v8, v5);
    std::locale::operator=(v5, v3);
    std::locale::~locale(&v8);
  }
  std::locale::~locale(&v7);
  v6 = *a1;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) &= 0xFFFFF3FF;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v6 - 24) + 8) = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(v6 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v6 - 24) + 24) = 0;
}

void sub_1B5C2FAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t minijson::writer::next_field(minijson::writer *this)
{
  int v2;
  _QWORD *v3;
  uint64_t result;
  char v5;

  v2 = *((_DWORD *)this + 1);
  if (v2 == 1)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 1);
    v5 = 44;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v5, 1);
  }
  else if (!v2)
  {
    minijson::writer::write_opening_bracket((minijson::writer *)*(unsigned __int8 *)this, *((_QWORD **)this + 1));
  }
  result = minijson::writer::write_pretty_print_token((uint64_t)this, 0);
  *((_DWORD *)this + 1) = 1;
  return result;
}

uint64_t minijson::writer::write_field_name(uint64_t **this, char *a2)
{
  uint64_t *v3;
  char v5;

  v3 = this[1];
  v5 = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v5, 1);
  return minijson::writer::write_pretty_print_token((uint64_t)this, 1);
}

uint64_t minijson::detail::`anonymous namespace'::write_quoted_string(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 *v7;
  const char *v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v4 - 24) + 8) = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(v4 - 24) + 8) & 0xFFFFFF4F | 0x80;
  v12 = std::operator<<[abi:ne180100]<std::char_traits<char>>(a1, 48);
  v5 = 1;
  v14 = 1;
  v13 = 34;
  v6 = *a2;
  if (!*a2)
    goto LABEL_25;
  v7 = a2 + 1;
  do
  {
    if ((char)v6 <= 12)
    {
      if (v6 == 9)
      {
        v8 = "\\t";
        goto LABEL_14;
      }
      if (v6 == 10)
      {
        v8 = "\\n";
        goto LABEL_14;
      }
    }
    else
    {
      switch(v6)
      {
        case 0xDu:
          v8 = "\\r";
          goto LABEL_14;
        case 0x5Cu:
          v8 = "\\\\";
          goto LABEL_14;
        case 0x22u:
          v8 = "\\\"";
LABEL_14:
          minijson::detail::buffered_writer<128ul>::operator<<<3ul>((uint64_t)&v12, (uint64_t)v8);
          goto LABEL_15;
      }
    }
    if (v6 < 0x20u || v6 == 127)
    {
      minijson::detail::buffered_writer<128ul>::operator<<<3ul>((uint64_t)&v12, (uint64_t)"\\u");
      std::ostream::write();
      v14 = 0;
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 4;
      std::ostream::operator<<();
    }
    else
    {
      v10 = v14;
      if (v14 == 128)
      {
        std::ostream::write();
        v10 = 0;
      }
      v14 = v10 + 1;
      *((_BYTE *)&v12 + v10 + 8) = v6;
    }
LABEL_15:
    v9 = *v7++;
    v6 = v9;
  }
  while (v9);
  v5 = v14;
  if (v14 == 128)
  {
    std::ostream::write();
    v5 = 0;
  }
LABEL_25:
  v14 = v5 + 1;
  *((_BYTE *)&v12 + v5 + 8) = 34;
  result = std::ostream::write();
  v14 = 0;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 8) & 0xFFFFFFB5 | 2;
  return result;
}

uint64_t minijson::writer::write_pretty_print_token(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(result + 24))
  {
    v2 = result;
    v8 = *(_QWORD *)(result + 8);
    v10 = 0;
    if (a2)
    {
      if (a2 == 1)
      {
        v10 = 1;
        v9 = 32;
      }
      else if (a2 == 2 && *(_DWORD *)(result + 4))
      {
        goto LABEL_6;
      }
      return std::ostream::write();
    }
LABEL_6:
    v3 = *(unsigned __int8 *)(result + 40);
    v4 = *(_QWORD *)(result + 16);
    if (!a2)
      ++v4;
    if (!*(_BYTE *)(result + 40))
      v4 *= *(_QWORD *)(result + 32);
    v10 = 1;
    v9 = 10;
    if (v4)
    {
      v5 = v4 - 1;
      v6 = 1;
      while (1)
      {
        v7 = v3 ? 9 : 32;
        if (v6 == 16)
        {
          std::ostream::write();
          v6 = 0;
        }
        v10 = v6 + 1;
        *((_BYTE *)&v8 + v6 + 8) = v7;
        if (!v5)
          break;
        v6 = v10;
        v3 = *(unsigned __int8 *)(v2 + 40);
        --v5;
      }
    }
    return std::ostream::write();
  }
  return result;
}

uint64_t minijson::detail::buffered_writer<128ul>::operator<<<3ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;

  v4 = 0;
  v5 = 1;
  do
  {
    v6 = v5;
    v7 = *(_BYTE *)(a2 + v4);
    v8 = *(_QWORD *)(a1 + 136);
    if (v8 == 128)
    {
      std::ostream::write();
      v8 = 0;
    }
    v5 = 0;
    *(_QWORD *)(a1 + 136) = v8 + 1;
    *(_BYTE *)(a1 + v8 + 8) = v7;
    v4 = 1;
  }
  while ((v6 & 1) != 0);
  return a1;
}

_QWORD *minijson::writer::write_opening_bracket(minijson::writer *this, _QWORD *a2)
{
  char *v3;
  char v5;
  char v6;

  if ((_BYTE)this)
  {
    v5 = 91;
    v3 = &v5;
  }
  else
  {
    v6 = 123;
    v3 = &v6;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v3, 1);
}

uint64_t minijson::writer::write_helper<unsigned int,minijson::default_value_writer<unsigned int,void>>(uint64_t result, char *a2)
{
  minijson::writer *v3;

  if (*(_DWORD *)(result + 4) != 2)
  {
    v3 = (minijson::writer *)result;
    minijson::writer::next_field(v3);
    if (a2)
      minijson::writer::write_field_name((uint64_t **)v3, a2);
    return std::ostream::operator<<();
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t n;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t kk;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t mm;
  BOOL v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  char *v87;
  _QWORD *v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  unint64_t v92;
  char v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  char *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t ii;
  char *v113;
  uint64_t *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t *v118;
  char *v119;
  char *v120;
  __int128 *v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t jj;
  uint64_t *v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  char *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t i;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  char *v163;
  _QWORD *v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t nn;
  int64_t v180;
  unint64_t v181;
  unint64_t v182;
  int64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  char *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t j;
  int64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  char *v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t *v231;
  __int128 *v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  __int128 v249;
  __int128 v250;
  char *v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  __int128 v256;
  __int128 v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  __int128 v262;
  __int128 v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t k;
  uint64_t v268;
  __int128 v269;
  __int128 v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t m;
  unint64_t i1;
  uint64_t v277;
  uint64_t v278;
  __int128 v279;
  __int128 v280;
  char *v281;
  _QWORD *v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  __int128 v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  __int128 v291;
  __int128 v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  uint64_t i2;
  uint64_t v297;
  uint64_t *v298;
  int64_t v300;
  __int128 *v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v308;
  unint64_t v309;
  int64_t v312;
  unint64_t v313;
  uint64_t v314[5];
  __int128 v315;
  __int128 v316;
  char *v317;
  _BYTE v318[48];
  uint64_t v319;
  _BYTE v320[16];
  __int128 v321;
  __int128 v322;
  _BYTE *v323;
  _BYTE v324[48];
  uint64_t v325;
  char v326;
  void **v327;
  char *v328;
  uint64_t *v329;
  char *v330;
  char *v331;

_QWORD *AMCP::write_json_object_array<AMCP::Terminal_Description>(uint64_t a1, char *a2, uint64_t *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  AMCP::Log::Scope_Registry *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  std::logic_error *exception;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  std::logic_error v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  std::string v43;
  __int128 v44;
  uint64_t v45;
  uint64_t (**v46)();
  __int128 v47;
  uint64_t v48;
  std::string v49;
  std::logic_error v50;
  std::logic_error v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char v57;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint8_t buf[8];
  _BYTE v66[10];
  __int16 v67;
  int v68;
  _BYTE v69[24];
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (a2[23] >= 0)
    v5 = a2;
  else
    v5 = *(char **)a2;
  minijson::writer::next_field((minijson::writer *)a1);
  minijson::writer::write_field_name((uint64_t **)a1, v5);
  v7 = *(uint64_t **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v41 = *(_OWORD *)(a1 + 24);
  v42 = *(_QWORD *)(a1 + 40);
  LOBYTE(v38) = 1;
  HIDWORD(v38) = 0;
  v39 = v7;
  v40 = v6 + 1;
  v8 = *a3;
  v9 = a3[1];
  if (*a3 != v9)
  {
    do
    {
      minijson::writer::next_field((minijson::writer *)&v38);
      v7 = v39;
      v36 = v41;
      v37 = v42;
      LOBYTE(v33) = 0;
      HIDWORD(v33) = 0;
      v34 = v39;
      v35 = v40 + 1;
      std::string::basic_string[abi:ne180100]<0>(buf, "Format");
      if (v68 >= 0)
        v10 = (char *)buf;
      else
        v10 = *(char **)buf;
      minijson::writer::next_field((minijson::writer *)&v33);
      minijson::writer::write_field_name(&v33, v10);
      v61 = v36;
      v62 = v37;
      LOBYTE(v58) = 0;
      HIDWORD(v58) = 0;
      v59 = v34;
      v60 = v35 + 1;
      minijson::writer::next_field((minijson::writer *)&v58);
      minijson::writer::write_field_name(&v58, "SampleRate");
      if ((*(_QWORD *)v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"null", 4);
      else
        std::ostream::operator<<();
      minijson::writer::write_helper<unsigned int,minijson::default_value_writer<unsigned int,void>>((uint64_t)&v58, "FormatID");
      minijson::writer::write_helper<unsigned int,minijson::default_value_writer<unsigned int,void>>((uint64_t)&v58, "FormatFlags");
      minijson::writer::write_helper<unsigned int,minijson::default_value_writer<unsigned int,void>>((uint64_t)&v58, "BytesPerPacket");
      minijson::writer::write_helper<unsigned int,minijson::default_value_writer<unsigned int,void>>((uint64_t)&v58, "FramesPerPacket");
      minijson::writer::write_helper<unsigned int,minijson::default_value_writer<unsigned int,void>>((uint64_t)&v58, "BytesPerFrame");
      minijson::writer::write_helper<unsigned int,minijson::default_value_writer<unsigned int,void>>((uint64_t)&v58, "ChannelsPerFrame");
      minijson::writer::write_helper<unsigned int,minijson::default_value_writer<unsigned int,void>>((uint64_t)&v58, "BitsPerChannel");
      minijson::writer::close(&v58);
      if (SHIBYTE(v68) < 0)
        operator delete(*(void **)buf);
      std::string::basic_string[abi:ne180100]<0>(&v58, "PublishTags");
      AMCP::write_json_array<std::string>((uint64_t)&v33, (char *)&v58, (uint64_t *)(v8 + 40));
      if (SHIBYTE(v60) < 0)
        operator delete(v58);
      std::string::basic_string[abi:ne180100]<0>(&v58, "SubscribeToTags");
      AMCP::write_json_array<std::string>((uint64_t)&v33, (char *)&v58, (uint64_t *)(v8 + 64));
      if (SHIBYTE(v60) < 0)
        operator delete(v58);
      AMCP::get_enum_string_bimap<AMCP::Terminal_Source_Mix_Policy>();
      v59 = (_QWORD *)&v61 + 1;
      v11 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Terminal_Source_Mix_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v60);
      v63 = (char *)&v61 + 8;
      v64 = (char *)&v61 + 8;
      v12 = v61;
      v13 = *(_QWORD *)(v61 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (!v13)
        goto LABEL_38;
      v14 = *(_DWORD *)(v8 + 88);
      v15 = (_DWORD *)v61;
      do
      {
        while (*(_DWORD *)(v13 - 32) < v14)
        {
          v13 = *(_QWORD *)(v13 + 16);
          if (!v13)
            goto LABEL_23;
        }
        v15 = (_DWORD *)(v13 - 32);
        v13 = *(_QWORD *)(v13 + 8);
      }
      while (v13);
LABEL_23:
      if (v15 == (_DWORD *)v61 || (v14 >= *v15 ? (v16 = v15) : (v16 = (_DWORD *)v61), (_DWORD *)v61 == v16))
      {
LABEL_38:
        AMCP::Log::Scope_Registry::get(v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v21 = *(std::__shared_weak_count **)v66;
        v22 = **(NSObject ***)buf;
        if (*(_QWORD *)v66)
        {
          v23 = (unint64_t *)(*(_QWORD *)v66 + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          v25 = pthread_self();
          v26 = pthread_mach_thread_np(v25);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v26;
          *(_WORD *)v66 = 2080;
          *(_QWORD *)&v66[2] = "Graph_Description_Internal.h";
          v67 = 1024;
          v68 = 42;
          *(_WORD *)v69 = 2080;
          *(_QWORD *)&v69[2] = "not (found != map.left.end())";
          _os_log_error_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v57);
        exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v49);
        std::logic_error::logic_error(&v50, &v49);
        v28 = MEMORY[0x1E0DE5018];
        v50.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v51, &v50);
        v53 = 0;
        v54 = 0;
        v55 = 0;
        v56 = -1;
        v51.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v52 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v51);
        *(_QWORD *)&v69[8] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Terminal_Source_Mix_Policy]";
        *(_QWORD *)&v69[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
        v70 = 42;
        std::vector<void *>::vector(&v44);
        v29 = backtrace((void **)v44, (*((_QWORD *)&v44 + 1) - (_QWORD)v44) >> 3);
        std::vector<void *>::resize((char **)&v44, v29);
        v47 = v44;
        v30 = v45;
        v45 = 0;
        v46 = off_1E69A20A0;
        v48 = v30;
        v44 = 0uLL;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v46);
        exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(exception, (const std::logic_error *)buf);
        exception->__vftable = (std::logic_error_vtbl *)(v28 + 16);
        exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v31 = *(_QWORD *)v69;
        exception[1].__imp_.__imp_ = *(const char **)v69;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
        v32 = *(std::logic_error *)&v69[8];
        LODWORD(exception[3].__vftable) = v70;
        exception[2] = v32;
        exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      if (*((char *)v16 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v43, *((const std::string::value_type **)v16 + 1), *((_QWORD *)v16 + 2));
        v12 = v61;
      }
      else
      {
        v17 = *(_OWORD *)(v16 + 2);
        v43.__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 3);
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v17;
      }
      v18 = *(_QWORD *)(v12 + 56);
      if ((v18 & 0xFFFFFFFFFFFFFFFELL) != 0)
        v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) - 56;
      else
        v19 = 0;
      boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&v61 + 8, v19);
      operator delete((void *)v61);
      minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v33, "SourceMixPolicy", (uint64_t)&v43);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      minijson::writer::write_helper<int,minijson::default_value_writer<int,void>>((uint64_t)&v33, "LatencyAdjustment");
      minijson::writer::write_helper<BOOL,minijson::default_value_writer<BOOL,void>>((minijson::writer *)&v33, "EnableFileWriter", (_BYTE *)(v8 + 96));
      minijson::writer::close(&v33);
      v8 += 104;
    }
    while (v8 != v9);
  }
  return minijson::writer::close(&v38);
}

void sub_1B5C32278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;

  v49 = *(_QWORD *)(*(_QWORD *)(v47 - 216) + 56);
  if ((v49 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v50 = (v49 & 0xFFFFFFFFFFFFFFFELL) - 56;
  else
    v50 = 0;
  boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes(v46, v50);
  operator delete(*(void **)(v47 - 216));
  _Unwind_Resume(a1);
}

_QWORD *minijson::writer::close(_QWORD *this)
{
  unsigned __int8 *v1;
  _QWORD *v2;
  char *v3;
  char v4;
  char v5;

  if (*((_DWORD *)this + 1) != 2)
  {
    v1 = (unsigned __int8 *)this;
    if (!*((_DWORD *)v1 + 1))
      minijson::writer::write_opening_bracket((minijson::writer *)*v1, *((_QWORD **)v1 + 1));
    minijson::writer::write_pretty_print_token((uint64_t)v1, 2);
    v2 = (_QWORD *)*((_QWORD *)v1 + 1);
    if (*v1)
    {
      v4 = 93;
      v3 = &v4;
    }
    else
    {
      v5 = 125;
      v3 = &v5;
    }
    this = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, 1);
    *((_DWORD *)v1 + 1) = 2;
  }
  return this;
}

_QWORD *AMCP::write_json_array<std::string>(uint64_t a1, char *a2, uint64_t *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  __int128 v12;
  uint64_t v13;

  if (a2[23] >= 0)
    v5 = a2;
  else
    v5 = *(char **)a2;
  minijson::writer::next_field((minijson::writer *)a1);
  minijson::writer::write_field_name((uint64_t **)a1, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v12 = *(_OWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 40);
  LOBYTE(v11[0]) = 1;
  HIDWORD(v11[0]) = 0;
  v11[1] = v6;
  v11[2] = v7 + 1;
  v8 = *a3;
  v9 = a3[1];
  while (v8 != v9)
  {
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)v11, 0, v8);
    v8 += 24;
  }
  return minijson::writer::close(v11);
}

uint64_t minijson::writer::write_helper<int,minijson::default_value_writer<int,void>>(uint64_t result, char *a2)
{
  minijson::writer *v3;

  if (*(_DWORD *)(result + 4) != 2)
  {
    v3 = (minijson::writer *)result;
    minijson::writer::next_field(v3);
    if (a2)
      minijson::writer::write_field_name((uint64_t **)v3, a2);
    return std::ostream::operator<<();
  }
  return result;
}

minijson::writer *minijson::writer::write_helper<BOOL,minijson::default_value_writer<BOOL,void>>(minijson::writer *result, char *a2, _BYTE *a3)
{
  minijson::writer *v5;
  const char *v6;
  uint64_t v7;

  if (*((_DWORD *)result + 1) != 2)
  {
    v5 = result;
    minijson::writer::next_field(v5);
    if (a2)
      minijson::writer::write_field_name((uint64_t **)v5, a2);
    if (*a3)
    {
      v6 = "true";
      v7 = 4;
    }
    else
    {
      v6 = "false";
      v7 = 5;
    }
    return (minijson::writer *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v5 + 1), (uint64_t)v6, v7);
  }
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Terminal_Source_Mix_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  std::string *v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  char v123;
  uint64_t v124;

  v2 = operator new(0x50uLL);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = qword_1EF130EA0;
  v4 = (_QWORD *)qword_1EF130E90;
  v117 = qword_1EF130EA0;
  v118 = qword_1EF130EA0;
  if (qword_1EF130EA0)
  {
    if ((unint64_t)qword_1EF130EA0 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v5 = operator new(16 * qword_1EF130EA0);
  }
  else
  {
    v5 = 0;
  }
  v119 = v5;
  v120 = 0;
  v121 = v4;
  v122 = v2;
  v123 = 0;
  v6 = v4[8];
  if (v6)
    v7 = v6 - 56;
  else
    v7 = 0;
  if ((_QWORD *)v7 == v4)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = (uint64_t)v119;
      v119[2 * v8] = v7;
      v10 = operator new(0x50uLL);
      *(_QWORD *)(v9 + 16 * v8 + 8) = v10;
      *v10 = *(_DWORD *)v7;
      v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        v8 = v120;
        v3 = v117;
      }
      else
      {
        v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      v120 = ++v8;
      if (v8 == v3)
      {
        v13 = 126 - 2 * __clz(v3);
        if (v3)
          v14 = v13;
        else
          v14 = 0;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((uint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124)
        v7 = v124 - 56;
      else
        v7 = 0;
    }
    while ((_QWORD *)v7 != v4);
    v4 = (_QWORD *)qword_1EF130E90;
    v2 = *(_QWORD **)(a1 + 8);
  }
  v15 = v4[7];
  v16 = v2 + 7;
  if (v15 > 1)
  {
    *v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    v17 = v4[7];
    v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v20 = v15 & 1;
    if (v19)
      v21 = 0;
    else
      v21 = v18;
    v22 = v121;
    v23 = &v122;
    if (v121 != (_QWORD *)v21)
    {
      v24 = (uint64_t)v119;
      if (v8)
      {
        v25 = v8;
        do
        {
          v26 = v25 >> 1;
          v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          v29 = *v27;
          v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21)
            v24 = (uint64_t)v28;
          else
            v25 = v26;
        }
        while (v25);
      }
      v23 = (_QWORD *)(v24 + 8);
    }
    *v16 = v20 | (*v23 + 56);
    v30 = v4[8];
    v31 = (_QWORD *)(v30 - 56);
    if (!v30)
      v31 = 0;
    v32 = &v122;
    if (v22 != v31)
    {
      v33 = (uint64_t)v119;
      if (v8)
      {
        v34 = v8;
        do
        {
          v35 = v34 >> 1;
          v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          v38 = *v36;
          v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31)
            v33 = (uint64_t)v37;
          else
            v34 = v35;
        }
        while (v34);
      }
      v32 = (_QWORD *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    v39 = v4[9];
    v40 = (_QWORD *)(v39 - 56);
    if (!v39)
      v40 = 0;
    v41 = (uint64_t)v119;
    v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        v43 = (uint64_t)v119;
        v44 = v8;
        do
        {
          v45 = v44 >> 1;
          v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          v48 = *v46;
          v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40)
            v43 = (uint64_t)v47;
          else
            v44 = v45;
        }
        while (v44);
      }
      else
      {
        v43 = (uint64_t)v119;
      }
      v42 = (_QWORD *)(v43 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      v49 = (_QWORD *)v41;
      do
      {
        v51 = *v49;
        v50 = (_QWORD *)v49[1];
        v52 = (_QWORD *)(*v49 + 56);
        v53 = v50 + 7;
        v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          v56 = (uint64_t *)&v122;
          if (v22 != (_QWORD *)(v55 - 56))
          {
            v57 = v41;
            v58 = v8;
            do
            {
              v59 = v58 >> 1;
              v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              v62 = *v60;
              v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56)
                v57 = (uint64_t)v61;
              else
                v58 = v59;
            }
            while (v58);
            v56 = (uint64_t *)(v57 + 8);
          }
          v63 = *v56;
          *v53 = v54 | (*v56 + 56);
          if (*(_QWORD **)(v55 + 8) == v52)
          {
            *(_QWORD *)(v63 + 64) = v53;
          }
          else if (*(_QWORD **)(v55 + 16) == v52)
          {
            *(_QWORD *)(v63 + 72) = v53;
          }
        }
        else
        {
          *v53 = v54;
        }
        if (!*(_QWORD *)(v51 + 64))
          v50[8] = 0;
        if (!*(_QWORD *)(v51 + 72))
          v50[9] = 0;
        v49 += 2;
      }
      while (v49 != (_QWORD *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *(_QWORD *)(a1 + 8) + 56;
  }
  v64 = v4[4];
  v65 = *(_QWORD *)(a1 + 8);
  v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    v67 = v4[4];
    v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v69 = v64 & 1;
    if (v19)
      v70 = 0;
    else
      v70 = v68;
    v71 = v121;
    v72 = &v122;
    if (v121 != (_QWORD *)v70)
    {
      v73 = (uint64_t)v119;
      v74 = v120;
      if (v120)
      {
        do
        {
          v75 = v74 >> 1;
          v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          v78 = *v76;
          v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70)
            v73 = (uint64_t)v77;
          else
            v74 = v75;
        }
        while (v74);
      }
      v72 = (_QWORD *)(v73 + 8);
    }
    *v66 = v69 | (*v72 + 32);
    v79 = v4[5];
    v80 = (_QWORD *)(v79 - 32);
    if (!v79)
      v80 = 0;
    v81 = &v122;
    if (v71 != v80)
    {
      v82 = (uint64_t)v119;
      v83 = v120;
      if (v120)
      {
        do
        {
          v84 = v83 >> 1;
          v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          v87 = *v85;
          v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80)
            v82 = (uint64_t)v86;
          else
            v83 = v84;
        }
        while (v83);
      }
      v81 = (_QWORD *)(v82 + 8);
    }
    *(_QWORD *)(v65 + 40) = *v81 + 32;
    v88 = v4[6];
    if (v88)
      v89 = (_QWORD *)(v88 - 32);
    else
      v89 = 0;
    if (v121 == v89)
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      v98 = &v122;
    }
    else
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      if (v120)
      {
        v92 = (uint64_t)v119;
        v93 = v120;
        do
        {
          v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          v97 = *v95;
          v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89)
            v92 = (uint64_t)v96;
          else
            v93 = v94;
        }
        while (v93);
      }
      else
      {
        v92 = (uint64_t)v119;
      }
      v98 = (_QWORD *)(v92 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      v99 = (_QWORD *)(v90 + 16 * v91);
      v100 = (_QWORD *)v90;
      do
      {
        v102 = *v100;
        v101 = (_QWORD *)v100[1];
        v103 = (_QWORD *)(*v100 + 32);
        v104 = v101 + 4;
        v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          v107 = (uint64_t *)&v122;
          if (v121 != (_QWORD *)(v106 - 32))
          {
            v108 = v120;
            if (v120)
            {
              v109 = v90;
              do
              {
                v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                v113 = *v111;
                v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32)
                  v109 = (uint64_t)v112;
                else
                  v108 = v110;
              }
              while (v108);
            }
            else
            {
              v109 = v90;
            }
            v107 = (uint64_t *)(v109 + 8);
          }
          v114 = *v107;
          *v104 = v105 | (*v107 + 32);
          if (*(_QWORD **)(v106 + 8) == v103)
          {
            *(_QWORD *)(v114 + 40) = v104;
          }
          else if (*(_QWORD **)(v106 + 16) == v103)
          {
            *(_QWORD *)(v114 + 48) = v104;
          }
        }
        else
        {
          *v104 = v105;
        }
        if (!*(_QWORD *)(v102 + 40))
          v101[5] = 0;
        if (!*(_QWORD *)(v102 + 48))
          v101[6] = 0;
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(_QWORD *)(v65 + 32) = 0;
    *(_QWORD *)(v65 + 40) = v66;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *(_QWORD *)(a1 + 8) + 32;
  }
  v123 = 1;
  *(_QWORD *)(a1 + 24) = qword_1EF130EA0;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1B5C32CA0()
{
  __break(1u);
}

void sub_1B5C32CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&a9);
  JUMPOUT(0x1B5C32CE4);
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(uint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  __int128 *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  __n128 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *n128_u64;
  BOOL v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  int64_t v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  __n128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __n128 *v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  __n128 *v77;
  unint64_t v78;
  __n128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (unint64_t *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _BOOL4 v7;
  unsigned int v8;
  _BOOL4 v9;
  BOOL v10;
  _BOOL4 v11;
  char v13;
  BOOL v15;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  double v21;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  _BOOL4 v27;
  BOOL v28;
  _BOOL4 v29;
  char v31;
  _BOOL4 v32;
  BOOL v34;
  BOOL v37;
  char v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  double v42;
  BOOL v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  char v48;
  int v49;
  uint64_t result;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  BOOL v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  BOOL v63;
  unsigned int v64;

  v4 = *a1;
  v5 = *a2;
  v6 = *(_DWORD *)(*a1 + 8);
  v7 = v6 != 0;
  v8 = *(_DWORD *)(*a2 + 8);
  if (!v6)
  {
    v13 = 0;
LABEL_22:
    v9 = v6 == 1819304813;
    v11 = v8 == 1819304813;
    goto LABEL_23;
  }
  v9 = v6 == 1819304813;
  if (v8)
    v10 = v6 == v8;
  else
    v10 = 1;
  if (!v10)
  {
    v15 = v8 != 1819304813 && v6 < v8;
    v13 = v6 == 1819304813 || v15;
    goto LABEL_22;
  }
  v11 = v8 == 1819304813;
  if (v6 == 1819304813 && v8 == 1819304813)
  {
    v49 = *(_DWORD *)(v5 + 12);
    v13 = (v49 & 0x40) == 0;
    if ((*(_BYTE *)(v4 + 12) & 0x40) != 0)
    {
      v11 = 1;
      v9 = 1;
      v7 = (v49 & 0x40) == 0;
    }
    else
    {
      if ((v49 & 0x40) != 0)
        goto LABEL_53;
      v13 = 0;
      v7 = 0;
      v11 = 1;
      v9 = 1;
    }
  }
  else
  {
    v13 = 0;
    v7 = 0;
  }
LABEL_23:
  v17 = !v9 || v7 || !v11;
  if (!v17 && (*(_DWORD *)(v4 + 12) & 1) != (*(_DWORD *)(v5 + 12) & 1))
  {
    v13 = *(_DWORD *)(v5 + 12);
    LOBYTE(v7) = 1;
  }
  if (!v7)
  {
    v18 = *(_DWORD *)(v4 + 32);
    if (!v18 || ((v19 = *(_DWORD *)(v5 + 32)) != 0 ? (v20 = v18 == v19) : (v20 = 1), v20))
    {
      v21 = *(double *)v4;
      if (*(double *)v4 != 0.0 && *(double *)v5 != 0.0 && v21 != *(double *)v5)
      {
        if (v21 > *(double *)v5)
          return 255;
        goto LABEL_52;
      }
      v23 = *(_DWORD *)(v4 + 28);
      if (v23)
      {
        v24 = *(_DWORD *)(v5 + 28);
        v10 = v23 == v24;
        v25 = v23 < v24;
        if (!v10 && v24 != 0)
          v13 = v25;
        if ((v13 & 1) != 0)
          return 255;
        goto LABEL_52;
      }
    }
    else
    {
      v13 = v18 > v19;
    }
  }
  if ((v13 & 1) != 0)
    return 255;
LABEL_52:
  if (!v8)
  {
    v32 = 0;
    v31 = 0;
LABEL_73:
    v27 = v8 == 1819304813;
    v29 = v6 == 1819304813;
    goto LABEL_74;
  }
LABEL_53:
  v27 = v8 == 1819304813;
  if (v6)
    v28 = v8 == v6;
  else
    v28 = 1;
  if (!v28)
  {
    v34 = v6 != 1819304813 && v8 < v6;
    v32 = 1;
    v31 = v8 == 1819304813 || v34;
    goto LABEL_73;
  }
  v10 = v6 == 1819304813;
  v29 = v6 == 1819304813;
  if (v10 && v8 == 1819304813)
  {
    v51 = *(_DWORD *)(v4 + 12);
    v31 = (v51 & 0x40) == 0;
    if ((*(_BYTE *)(v5 + 12) & 0x40) != 0)
    {
      v29 = 1;
      v27 = 1;
      v32 = (v51 & 0x40) == 0;
    }
    else
    {
      if ((v51 & 0x40) != 0)
        goto LABEL_120;
      v31 = 0;
      v32 = 0;
      v29 = 1;
      v27 = 1;
    }
  }
  else
  {
    v31 = 0;
    v32 = 0;
  }
LABEL_74:
  if (v29 && v27 && !v32)
  {
    if ((*(_DWORD *)(v5 + 12) & 1) == (*(_DWORD *)(v4 + 12) & 1))
    {
      v38 = v32;
    }
    else
    {
      v31 = *(_DWORD *)(v4 + 12);
      v38 = 1;
    }
    v37 = v31;
    if ((v38 & 1) != 0)
      goto LABEL_118;
  }
  else
  {
    v37 = v31;
    if (v32)
      goto LABEL_118;
  }
  v39 = *(_DWORD *)(v5 + 32);
  if (!v39 || (v40 = *(_DWORD *)(v4 + 32), v41 = v39 == v40, v37 = v39 > v40, !v40) || v41)
  {
    v42 = *(double *)v5;
    if (*(double *)v5 == 0.0
      || ((v37 = v42 > *(double *)v4, *(double *)v4 != 0.0) ? (v43 = v42 == *(double *)v4) : (v43 = 1), v43))
    {
      v44 = *(_DWORD *)(v5 + 28);
      if (v44)
      {
        v45 = *(_DWORD *)(v4 + 28);
        v10 = v44 == v45;
        v46 = v44 < v45;
        if (v10 || v45 == 0)
          v48 = v31;
        else
          v48 = v46;
        if ((v48 & 1) != 0)
          return 1;
        goto LABEL_120;
      }
      v37 = v31;
    }
  }
LABEL_118:
  if (v37)
    return 1;
LABEL_120:
  v52 = 0;
  v53 = a1[1];
  v54 = a2[1];
  do
  {
    v55 = std::operator<=>[abi:ne180100]<std::string,std::allocator<std::string>>(*(_QWORD **)(v53 + v52), *(_QWORD *)(v53 + v52 + 8), *(_QWORD **)(v54 + v52), *(_QWORD *)(v54 + v52 + 8));
    if (v55)
      v56 = 1;
    else
      v56 = v52 == 24;
    v52 += 24;
  }
  while (!v56);
  if (v55)
    return (v55 >> 31) | 1u;
  v57 = *(_DWORD *)a1[2];
  v58 = *(_DWORD *)a2[2];
  if (v57 < v58)
    result = 0xFFFFFFFFLL;
  else
    result = 1;
  if (v57 == v58)
  {
    v59 = *(_DWORD *)a1[3];
    v60 = *(_DWORD *)a2[3];
    result = v59 < v60 ? 0xFFFFFFFFLL : 1;
    if (v59 == v60)
    {
      v61 = *(unsigned __int8 *)a1[4];
      v62 = *(unsigned __int8 *)a2[4];
      v63 = v61 == v62;
      if (v61 < v62)
        v64 = -1;
      else
        v64 = 1;
      if (v63)
        return 0;
      else
        return v64;
    }
  }
  return result;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(__int128 *a1, __int128 *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t m;
  uint64_t v25;
  __int128 v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t n;
  uint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t j;
  uint64_t v55;
  __int128 v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t k;
  uint64_t v70;
  __int128 v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t i;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t *v94;
  void **v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  __int128 *v99;
  __int128 v100;
  __int128 v101;
  __int128 *v102;
  _BYTE v103[48];
  uint64_t v104;
  char v105;

  v6 = (uint64_t)a2 + 40;
  *(_QWORD *)&v100 = a2;
  *((_QWORD *)&v100 + 1) = (char *)a2 + 40;
  v7 = (uint64_t *)a2 + 11;
  v8 = (uint64_t)a2 + 92;
  v9 = a2 + 6;
  *(_QWORD *)&v101 = (char *)a2 + 88;
  *((_QWORD *)&v101 + 1) = (char *)a2 + 92;
  v102 = a2 + 6;
  v95 = (void **)a1;
  v96 = (uint64_t)a1 + 40;
  v88 = (uint64_t)a1 + 92;
  v89 = (uint64_t)a1 + 40;
  v94 = (uint64_t *)a1 + 11;
  v97 = (uint64_t *)a1 + 11;
  v98 = (uint64_t)a1 + 92;
  v87 = a1 + 6;
  v99 = a1 + 6;
  if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v100, (uint64_t *)&v95) & 0x80) != 0)
  {
    *(_QWORD *)&v100 = a3;
    *((_QWORD *)&v100 + 1) = (char *)a3 + 40;
    v93 = (uint64_t *)a3 + 11;
    *(_QWORD *)&v101 = (char *)a3 + 88;
    *((_QWORD *)&v101 + 1) = (char *)a3 + 92;
    v102 = a3 + 6;
    v95 = (void **)a2;
    v96 = v6;
    v86 = v6;
    v97 = v7;
    v98 = v8;
    v85 = v8;
    v99 = v9;
    if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v100, (uint64_t *)&v95) & 0x80) != 0)
    {
      v70 = 0;
      v71 = a1[1];
      v100 = *a1;
      v101 = v71;
      v102 = (__int128 *)*((_QWORD *)a1 + 4);
      do
      {
        v72 = (char *)&v100 + v70;
        v73 = (_QWORD *)((char *)a1 + v70);
        *(_OWORD *)(v72 + 40) = *(__int128 *)((char *)a1 + v70 + 40);
        *((_QWORD *)v72 + 7) = *(_QWORD *)((char *)a1 + v70 + 56);
        v73[5] = 0;
        v73[6] = 0;
        v73[7] = 0;
        v70 += 24;
      }
      while (v70 != 48);
      v74 = 0;
      v104 = *v94;
      v105 = *((_BYTE *)v94 + 8);
      v75 = *((_QWORD *)a3 + 4);
      v76 = a3[1];
      *a1 = *a3;
      a1[1] = v76;
      *((_QWORD *)a1 + 4) = v75;
      do
      {
        v77 = (uint64_t)a1 + v74;
        v78 = (_QWORD *)((char *)a3 + v74);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a1 + v74 + 40));
        *(_OWORD *)(v77 + 40) = *(__int128 *)((char *)a3 + v74 + 40);
        *(_QWORD *)(v77 + 56) = *(_QWORD *)((char *)a3 + v74 + 56);
        v78[5] = 0;
        v78[6] = 0;
        v78[7] = 0;
        v74 += 24;
      }
      while (v74 != 48);
      v79 = 0;
      v80 = *v93;
      *((_BYTE *)v94 + 8) = *((_BYTE *)a3 + 96);
      *v94 = v80;
      v81 = v101;
      *a3 = v100;
      a3[1] = v81;
      *((_QWORD *)a3 + 4) = v102;
      do
      {
        v82 = (uint64_t)a3 + v79;
        v83 = (_QWORD *)((char *)&v100 + v79);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a3 + v79 + 40));
        *(_OWORD *)(v82 + 40) = *(_OWORD *)&v103[v79];
        *(_QWORD *)(v82 + 56) = *(_QWORD *)&v103[v79 + 16];
        v83[6] = 0;
        v83[7] = 0;
        v83[5] = 0;
        v79 += 24;
      }
      while (v79 != 48);
      *v93 = v104;
      *((_BYTE *)a3 + 96) = v105;
      for (i = 64; i != 16; i -= 24)
      {
        v95 = (void **)((char *)&v100 + i);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v95);
      }
    }
    else
    {
      v91 = v7;
      v40 = 0;
      v41 = a1[1];
      v100 = *a1;
      v101 = v41;
      v102 = (__int128 *)*((_QWORD *)a1 + 4);
      do
      {
        v42 = (char *)&v100 + v40;
        v43 = (_QWORD *)((char *)a1 + v40);
        *(_OWORD *)(v42 + 40) = *(__int128 *)((char *)a1 + v40 + 40);
        *((_QWORD *)v42 + 7) = *(_QWORD *)((char *)a1 + v40 + 56);
        v43[5] = 0;
        v43[6] = 0;
        v43[7] = 0;
        v40 += 24;
      }
      while (v40 != 48);
      v44 = 0;
      v104 = *v94;
      v105 = *((_BYTE *)v94 + 8);
      v45 = *((_QWORD *)a2 + 4);
      v46 = a2[1];
      *a1 = *a2;
      a1[1] = v46;
      *((_QWORD *)a1 + 4) = v45;
      do
      {
        v47 = (uint64_t)a1 + v44;
        v48 = (_QWORD *)((char *)a2 + v44);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a1 + v44 + 40));
        *(_OWORD *)(v47 + 40) = *(__int128 *)((char *)a2 + v44 + 40);
        *(_QWORD *)(v47 + 56) = *(_QWORD *)((char *)a2 + v44 + 56);
        v48[5] = 0;
        v48[6] = 0;
        v48[7] = 0;
        v44 += 24;
      }
      while (v44 != 48);
      v49 = 0;
      v50 = *v91;
      *((_BYTE *)v94 + 8) = *((_BYTE *)v91 + 8);
      *v94 = v50;
      v51 = v101;
      *a2 = v100;
      a2[1] = v51;
      *((_QWORD *)a2 + 4) = v102;
      do
      {
        v52 = (uint64_t)a2 + v49;
        v53 = (_QWORD *)((char *)&v100 + v49);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a2 + v49 + 40));
        *(_OWORD *)(v52 + 40) = *(_OWORD *)&v103[v49];
        *(_QWORD *)(v52 + 56) = *(_QWORD *)&v103[v49 + 16];
        v53[6] = 0;
        v53[7] = 0;
        v53[5] = 0;
        v49 += 24;
      }
      while (v49 != 48);
      *v91 = v104;
      *((_BYTE *)v91 + 8) = v105;
      for (j = 64; j != 16; j -= 24)
      {
        v95 = (void **)((char *)&v100 + j);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v95);
      }
      *(_QWORD *)&v100 = a3;
      *((_QWORD *)&v100 + 1) = (char *)a3 + 40;
      *(_QWORD *)&v101 = (char *)a3 + 88;
      *((_QWORD *)&v101 + 1) = (char *)a3 + 92;
      v102 = a3 + 6;
      v95 = (void **)a2;
      v96 = v86;
      v97 = v91;
      v98 = v85;
      v99 = v9;
      if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v100, (uint64_t *)&v95) & 0x80) != 0)
      {
        v55 = 0;
        v56 = a2[1];
        v100 = *a2;
        v101 = v56;
        v102 = (__int128 *)*((_QWORD *)a2 + 4);
        do
        {
          v57 = (char *)&v100 + v55;
          v58 = (_QWORD *)((char *)a2 + v55);
          *(_OWORD *)(v57 + 40) = *(__int128 *)((char *)a2 + v55 + 40);
          *((_QWORD *)v57 + 7) = *(_QWORD *)((char *)a2 + v55 + 56);
          v58[5] = 0;
          v58[6] = 0;
          v58[7] = 0;
          v55 += 24;
        }
        while (v55 != 48);
        v59 = 0;
        v104 = *v91;
        v105 = *((_BYTE *)v91 + 8);
        v60 = *((_QWORD *)a3 + 4);
        v61 = a3[1];
        *a2 = *a3;
        a2[1] = v61;
        *((_QWORD *)a2 + 4) = v60;
        do
        {
          v62 = (uint64_t)a2 + v59;
          v63 = (_QWORD *)((char *)a3 + v59);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a2 + v59 + 40));
          *(_OWORD *)(v62 + 40) = *(__int128 *)((char *)a3 + v59 + 40);
          *(_QWORD *)(v62 + 56) = *(_QWORD *)((char *)a3 + v59 + 56);
          v63[5] = 0;
          v63[6] = 0;
          v63[7] = 0;
          v59 += 24;
        }
        while (v59 != 48);
        v64 = 0;
        v65 = *v93;
        *((_BYTE *)v91 + 8) = *((_BYTE *)a3 + 96);
        *v91 = v65;
        v66 = v101;
        *a3 = v100;
        a3[1] = v66;
        *((_QWORD *)a3 + 4) = v102;
        do
        {
          v67 = (uint64_t)a3 + v64;
          v68 = (_QWORD *)((char *)&v100 + v64);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a3 + v64 + 40));
          *(_OWORD *)(v67 + 40) = *(_OWORD *)&v103[v64];
          *(_QWORD *)(v67 + 56) = *(_QWORD *)&v103[v64 + 16];
          v68[6] = 0;
          v68[7] = 0;
          v68[5] = 0;
          v64 += 24;
        }
        while (v64 != 48);
        *v93 = v104;
        *((_BYTE *)a3 + 96) = v105;
        for (k = 64; k != 16; k -= 24)
        {
          v95 = (void **)((char *)&v100 + k);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v95);
        }
      }
    }
  }
  else
  {
    *(_QWORD *)&v100 = a3;
    *((_QWORD *)&v100 + 1) = (char *)a3 + 40;
    *(_QWORD *)&v101 = (char *)a3 + 88;
    *((_QWORD *)&v101 + 1) = (char *)a3 + 92;
    v102 = a3 + 6;
    v95 = (void **)a2;
    v96 = v6;
    v97 = v7;
    v98 = v8;
    v99 = v9;
    if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v100, (uint64_t *)&v95) & 0x80) != 0)
    {
      v92 = (uint64_t *)a3 + 11;
      v10 = 0;
      v11 = a2[1];
      v100 = *a2;
      v101 = v11;
      v102 = (__int128 *)*((_QWORD *)a2 + 4);
      do
      {
        v12 = (char *)&v100 + v10;
        v13 = (_QWORD *)((char *)a2 + v10);
        *(_OWORD *)(v12 + 40) = *(__int128 *)((char *)a2 + v10 + 40);
        *((_QWORD *)v12 + 7) = *(_QWORD *)((char *)a2 + v10 + 56);
        v13[5] = 0;
        v13[6] = 0;
        v13[7] = 0;
        v10 += 24;
      }
      while (v10 != 48);
      v14 = 0;
      v104 = *v7;
      v105 = *((_BYTE *)v7 + 8);
      v15 = *((_QWORD *)a3 + 4);
      v16 = a3[1];
      *a2 = *a3;
      a2[1] = v16;
      *((_QWORD *)a2 + 4) = v15;
      do
      {
        v17 = (uint64_t)a2 + v14;
        v18 = (_QWORD *)((char *)a3 + v14);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a2 + v14 + 40));
        *(_OWORD *)(v17 + 40) = *(__int128 *)((char *)a3 + v14 + 40);
        *(_QWORD *)(v17 + 56) = *(_QWORD *)((char *)a3 + v14 + 56);
        v18[5] = 0;
        v18[6] = 0;
        v18[7] = 0;
        v14 += 24;
      }
      while (v14 != 48);
      v19 = 0;
      v20 = *v92;
      *((_BYTE *)v7 + 8) = *((_BYTE *)a3 + 96);
      v90 = v7;
      *v7 = v20;
      v21 = v101;
      *a3 = v100;
      a3[1] = v21;
      *((_QWORD *)a3 + 4) = v102;
      do
      {
        v22 = (uint64_t)a3 + v19;
        v23 = (_QWORD *)((char *)&v100 + v19);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a3 + v19 + 40));
        *(_OWORD *)(v22 + 40) = *(_OWORD *)&v103[v19];
        *(_QWORD *)(v22 + 56) = *(_QWORD *)&v103[v19 + 16];
        v23[6] = 0;
        v23[7] = 0;
        v23[5] = 0;
        v19 += 24;
      }
      while (v19 != 48);
      *v92 = v104;
      *((_BYTE *)a3 + 96) = v105;
      for (m = 64; m != 16; m -= 24)
      {
        v95 = (void **)((char *)&v100 + m);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v95);
      }
      *(_QWORD *)&v100 = a2;
      *((_QWORD *)&v100 + 1) = v6;
      *(_QWORD *)&v101 = v90;
      *((_QWORD *)&v101 + 1) = v8;
      v102 = v9;
      v95 = (void **)a1;
      v96 = v89;
      v97 = v94;
      v98 = v88;
      v99 = v87;
      if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v100, (uint64_t *)&v95) & 0x80) != 0)
      {
        v25 = 0;
        v26 = a1[1];
        v100 = *a1;
        v101 = v26;
        v102 = (__int128 *)*((_QWORD *)a1 + 4);
        do
        {
          v27 = (char *)&v100 + v25;
          v28 = (_QWORD *)((char *)a1 + v25);
          *(_OWORD *)(v27 + 40) = *(__int128 *)((char *)a1 + v25 + 40);
          *((_QWORD *)v27 + 7) = *(_QWORD *)((char *)a1 + v25 + 56);
          v28[5] = 0;
          v28[6] = 0;
          v28[7] = 0;
          v25 += 24;
        }
        while (v25 != 48);
        v29 = 0;
        v104 = *v94;
        v105 = *((_BYTE *)v94 + 8);
        v30 = *((_QWORD *)a2 + 4);
        v31 = a2[1];
        *a1 = *a2;
        a1[1] = v31;
        *((_QWORD *)a1 + 4) = v30;
        do
        {
          v32 = (uint64_t)a1 + v29;
          v33 = (_QWORD *)((char *)a2 + v29);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a1 + v29 + 40));
          *(_OWORD *)(v32 + 40) = *(__int128 *)((char *)a2 + v29 + 40);
          *(_QWORD *)(v32 + 56) = *(_QWORD *)((char *)a2 + v29 + 56);
          v33[5] = 0;
          v33[6] = 0;
          v33[7] = 0;
          v29 += 24;
        }
        while (v29 != 48);
        v34 = 0;
        v35 = *v90;
        *((_BYTE *)v94 + 8) = *((_BYTE *)v90 + 8);
        *v94 = v35;
        v36 = v101;
        *a2 = v100;
        a2[1] = v36;
        *((_QWORD *)a2 + 4) = v102;
        do
        {
          v37 = (uint64_t)a2 + v34;
          v38 = (_QWORD *)((char *)&v100 + v34);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a2 + v34 + 40));
          *(_OWORD *)(v37 + 40) = *(_OWORD *)&v103[v34];
          *(_QWORD *)(v37 + 56) = *(_QWORD *)&v103[v34 + 16];
          v38[6] = 0;
          v38[7] = 0;
          v38[5] = 0;
          v34 += 24;
        }
        while (v34 != 48);
        *v90 = v104;
        *((_BYTE *)v90 + 8) = v105;
        for (n = 64; n != 16; n -= 24)
        {
          v95 = (void **)((char *)&v100 + n);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v95);
        }
      }
    }
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t i;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t j;
  uint64_t *v41;
  uint64_t v42;
  __int128 v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t k;
  void **v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _BYTE v65[48];
  uint64_t v66;
  char v67;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  v8 = (uint64_t *)(a4 + 88);
  *(_QWORD *)&v62 = a4;
  *((_QWORD *)&v62 + 1) = a4 + 40;
  *(_QWORD *)&v63 = a4 + 88;
  *((_QWORD *)&v63 + 1) = a4 + 92;
  v64 = a4 + 96;
  v9 = (uint64_t *)(a3 + 88);
  v57 = (void **)a3;
  v58 = a3 + 40;
  v59 = a3 + 88;
  v60 = a3 + 92;
  v61 = a3 + 96;
  if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v62, (uint64_t *)&v57) & 0x80) != 0)
  {
    v10 = 0;
    v11 = *(_OWORD *)(a3 + 16);
    v62 = *(_OWORD *)a3;
    v63 = v11;
    v64 = *(_QWORD *)(a3 + 32);
    do
    {
      v12 = (char *)&v62 + v10;
      v13 = (_QWORD *)(a3 + v10);
      *(_OWORD *)(v12 + 40) = *(_OWORD *)(a3 + v10 + 40);
      *((_QWORD *)v12 + 7) = *(_QWORD *)(a3 + v10 + 56);
      v13[5] = 0;
      v13[6] = 0;
      v13[7] = 0;
      v10 += 24;
    }
    while (v10 != 48);
    v14 = 0;
    v66 = *v9;
    v67 = *(_BYTE *)(a3 + 96);
    v15 = *(_QWORD *)(a4 + 32);
    v16 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v16;
    *(_QWORD *)(a3 + 32) = v15;
    do
    {
      v17 = a3 + v14;
      v18 = (_QWORD *)(a4 + v14);
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a3 + v14 + 40));
      *(_OWORD *)(v17 + 40) = *(_OWORD *)(a4 + v14 + 40);
      *(_QWORD *)(v17 + 56) = *(_QWORD *)(a4 + v14 + 56);
      v18[5] = 0;
      v18[6] = 0;
      v18[7] = 0;
      v14 += 24;
    }
    while (v14 != 48);
    v19 = 0;
    v20 = *v8;
    *(_BYTE *)(a3 + 96) = *(_BYTE *)(a4 + 96);
    *v9 = v20;
    v21 = v63;
    *(_OWORD *)a4 = v62;
    *(_OWORD *)(a4 + 16) = v21;
    *(_QWORD *)(a4 + 32) = v64;
    do
    {
      v22 = a4 + v19;
      v23 = (_QWORD *)((char *)&v62 + v19);
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a4 + v19 + 40));
      *(_OWORD *)(v22 + 40) = *(_OWORD *)&v65[v19];
      *(_QWORD *)(v22 + 56) = *(_QWORD *)&v65[v19 + 16];
      v23[6] = 0;
      v23[7] = 0;
      v23[5] = 0;
      v19 += 24;
    }
    while (v19 != 48);
    *v8 = v66;
    *(_BYTE *)(a4 + 96) = v67;
    for (i = 64; i != 16; i -= 24)
    {
      v57 = (void **)((char *)&v62 + i);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v57);
    }
    *(_QWORD *)&v62 = a3;
    *((_QWORD *)&v62 + 1) = a3 + 40;
    *(_QWORD *)&v63 = a3 + 88;
    *((_QWORD *)&v63 + 1) = a3 + 92;
    v64 = a3 + 96;
    v25 = (uint64_t *)(a2 + 88);
    v57 = (void **)a2;
    v58 = a2 + 40;
    v59 = a2 + 88;
    v60 = a2 + 92;
    v61 = a2 + 96;
    if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v62, (uint64_t *)&v57) & 0x80) != 0)
    {
      v26 = 0;
      v27 = *(_OWORD *)(a2 + 16);
      v62 = *(_OWORD *)a2;
      v63 = v27;
      v64 = *(_QWORD *)(a2 + 32);
      do
      {
        v28 = (char *)&v62 + v26;
        v29 = (_QWORD *)(a2 + v26);
        *(_OWORD *)(v28 + 40) = *(_OWORD *)(a2 + v26 + 40);
        *((_QWORD *)v28 + 7) = *(_QWORD *)(a2 + v26 + 56);
        v29[5] = 0;
        v29[6] = 0;
        v29[7] = 0;
        v26 += 24;
      }
      while (v26 != 48);
      v30 = 0;
      v66 = *v25;
      v67 = *(_BYTE *)(a2 + 96);
      v31 = *(_QWORD *)(a3 + 32);
      v32 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v32;
      *(_QWORD *)(a2 + 32) = v31;
      do
      {
        v33 = a2 + v30;
        v34 = (_QWORD *)(a3 + v30);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + v30 + 40));
        *(_OWORD *)(v33 + 40) = *(_OWORD *)(a3 + v30 + 40);
        *(_QWORD *)(v33 + 56) = *(_QWORD *)(a3 + v30 + 56);
        v34[5] = 0;
        v34[6] = 0;
        v34[7] = 0;
        v30 += 24;
      }
      while (v30 != 48);
      v35 = 0;
      v36 = *v9;
      *(_BYTE *)(a2 + 96) = *(_BYTE *)(a3 + 96);
      *v25 = v36;
      v37 = v63;
      *(_OWORD *)a3 = v62;
      *(_OWORD *)(a3 + 16) = v37;
      *(_QWORD *)(a3 + 32) = v64;
      do
      {
        v38 = a3 + v35;
        v39 = (_QWORD *)((char *)&v62 + v35);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a3 + v35 + 40));
        *(_OWORD *)(v38 + 40) = *(_OWORD *)&v65[v35];
        *(_QWORD *)(v38 + 56) = *(_QWORD *)&v65[v35 + 16];
        v39[6] = 0;
        v39[7] = 0;
        v39[5] = 0;
        v35 += 24;
      }
      while (v35 != 48);
      *v9 = v66;
      *(_BYTE *)(a3 + 96) = v67;
      for (j = 64; j != 16; j -= 24)
      {
        v57 = (void **)((char *)&v62 + j);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v57);
      }
      *(_QWORD *)&v62 = a2;
      *((_QWORD *)&v62 + 1) = a2 + 40;
      *(_QWORD *)&v63 = a2 + 88;
      *((_QWORD *)&v63 + 1) = a2 + 92;
      v64 = a2 + 96;
      v41 = (uint64_t *)(a1 + 88);
      v57 = (void **)a1;
      v58 = a1 + 40;
      v59 = a1 + 88;
      v60 = a1 + 92;
      v61 = a1 + 96;
      if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v62, (uint64_t *)&v57) & 0x80) != 0)
      {
        v42 = 0;
        v43 = *(_OWORD *)(a1 + 16);
        v62 = *(_OWORD *)a1;
        v63 = v43;
        v64 = *(_QWORD *)(a1 + 32);
        do
        {
          v44 = (char *)&v62 + v42;
          v45 = (_QWORD *)(a1 + v42);
          *(_OWORD *)(v44 + 40) = *(_OWORD *)(a1 + v42 + 40);
          *((_QWORD *)v44 + 7) = *(_QWORD *)(a1 + v42 + 56);
          v45[5] = 0;
          v45[6] = 0;
          v45[7] = 0;
          v42 += 24;
        }
        while (v42 != 48);
        v46 = 0;
        v66 = *v41;
        v67 = *(_BYTE *)(a1 + 96);
        v47 = *(_QWORD *)(a2 + 32);
        v48 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v48;
        *(_QWORD *)(a1 + 32) = v47;
        do
        {
          v49 = a1 + v46;
          v50 = (_QWORD *)(a2 + v46);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + v46 + 40));
          *(_OWORD *)(v49 + 40) = *(_OWORD *)(a2 + v46 + 40);
          *(_QWORD *)(v49 + 56) = *(_QWORD *)(a2 + v46 + 56);
          v50[5] = 0;
          v50[6] = 0;
          v50[7] = 0;
          v46 += 24;
        }
        while (v46 != 48);
        v51 = 0;
        v52 = *v25;
        *((_BYTE *)v41 + 8) = *(_BYTE *)(a2 + 96);
        *v41 = v52;
        v53 = v63;
        *(_OWORD *)a2 = v62;
        *(_OWORD *)(a2 + 16) = v53;
        *(_QWORD *)(a2 + 32) = v64;
        do
        {
          v54 = a2 + v51;
          v55 = (_QWORD *)((char *)&v62 + v51);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + v51 + 40));
          *(_OWORD *)(v54 + 40) = *(_OWORD *)&v65[v51];
          *(_QWORD *)(v54 + 56) = *(_QWORD *)&v65[v51 + 16];
          v55[6] = 0;
          v55[7] = 0;
          v55[5] = 0;
          v51 += 24;
        }
        while (v51 != 48);
        *v25 = v66;
        *(_BYTE *)(a2 + 96) = v67;
        for (k = 64; k != 16; k -= 24)
        {
          v57 = (void **)((char *)&v62 + k);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v57);
        }
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t i;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t j;
  uint64_t *v41;
  uint64_t v42;
  __int128 v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t k;
  uint64_t *v57;
  uint64_t v58;
  __int128 v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t m;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  _BYTE v83[48];
  uint64_t v84;
  char v85;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(a1, a2, a3, a4);
  v8 = (uint64_t *)(a5 + 88);
  *(_QWORD *)&v80 = a5;
  *((_QWORD *)&v80 + 1) = a5 + 40;
  *(_QWORD *)&v81 = a5 + 88;
  *((_QWORD *)&v81 + 1) = a5 + 92;
  v82 = a5 + 96;
  v9 = (uint64_t *)(a4 + 88);
  v75 = (void **)a4;
  v76 = a4 + 40;
  v77 = a4 + 88;
  v78 = a4 + 92;
  v79 = a4 + 96;
  if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v80, (uint64_t *)&v75) & 0x80) != 0)
  {
    v10 = 0;
    v11 = *(_OWORD *)(a4 + 16);
    v80 = *(_OWORD *)a4;
    v81 = v11;
    v82 = *(_QWORD *)(a4 + 32);
    do
    {
      v12 = (char *)&v80 + v10;
      v13 = (_QWORD *)(a4 + v10);
      *(_OWORD *)(v12 + 40) = *(_OWORD *)(a4 + v10 + 40);
      *((_QWORD *)v12 + 7) = *(_QWORD *)(a4 + v10 + 56);
      v13[5] = 0;
      v13[6] = 0;
      v13[7] = 0;
      v10 += 24;
    }
    while (v10 != 48);
    v14 = 0;
    v84 = *v9;
    v85 = *(_BYTE *)(a4 + 96);
    v15 = *(_QWORD *)(a5 + 32);
    v16 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v16;
    *(_QWORD *)(a4 + 32) = v15;
    do
    {
      v17 = a4 + v14;
      v18 = (_QWORD *)(a5 + v14);
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a4 + v14 + 40));
      *(_OWORD *)(v17 + 40) = *(_OWORD *)(a5 + v14 + 40);
      *(_QWORD *)(v17 + 56) = *(_QWORD *)(a5 + v14 + 56);
      v18[5] = 0;
      v18[6] = 0;
      v18[7] = 0;
      v14 += 24;
    }
    while (v14 != 48);
    v19 = 0;
    v20 = *v8;
    *(_BYTE *)(a4 + 96) = *(_BYTE *)(a5 + 96);
    *v9 = v20;
    v21 = v81;
    *(_OWORD *)a5 = v80;
    *(_OWORD *)(a5 + 16) = v21;
    *(_QWORD *)(a5 + 32) = v82;
    do
    {
      v22 = a5 + v19;
      v23 = (_QWORD *)((char *)&v80 + v19);
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a5 + v19 + 40));
      *(_OWORD *)(v22 + 40) = *(_OWORD *)&v83[v19];
      *(_QWORD *)(v22 + 56) = *(_QWORD *)&v83[v19 + 16];
      v23[6] = 0;
      v23[7] = 0;
      v23[5] = 0;
      v19 += 24;
    }
    while (v19 != 48);
    *v8 = v84;
    *(_BYTE *)(a5 + 96) = v85;
    for (i = 64; i != 16; i -= 24)
    {
      v75 = (void **)((char *)&v80 + i);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v75);
    }
    *(_QWORD *)&v80 = a4;
    *((_QWORD *)&v80 + 1) = a4 + 40;
    *(_QWORD *)&v81 = a4 + 88;
    *((_QWORD *)&v81 + 1) = a4 + 92;
    v82 = a4 + 96;
    v25 = (uint64_t *)(a3 + 88);
    v75 = (void **)a3;
    v76 = a3 + 40;
    v77 = a3 + 88;
    v78 = a3 + 92;
    v79 = a3 + 96;
    if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v80, (uint64_t *)&v75) & 0x80) != 0)
    {
      v26 = 0;
      v27 = *(_OWORD *)(a3 + 16);
      v80 = *(_OWORD *)a3;
      v81 = v27;
      v82 = *(_QWORD *)(a3 + 32);
      do
      {
        v28 = (char *)&v80 + v26;
        v29 = (_QWORD *)(a3 + v26);
        *(_OWORD *)(v28 + 40) = *(_OWORD *)(a3 + v26 + 40);
        *((_QWORD *)v28 + 7) = *(_QWORD *)(a3 + v26 + 56);
        v29[5] = 0;
        v29[6] = 0;
        v29[7] = 0;
        v26 += 24;
      }
      while (v26 != 48);
      v30 = 0;
      v84 = *v25;
      v85 = *(_BYTE *)(a3 + 96);
      v31 = *(_QWORD *)(a4 + 32);
      v32 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v32;
      *(_QWORD *)(a3 + 32) = v31;
      do
      {
        v33 = a3 + v30;
        v34 = (_QWORD *)(a4 + v30);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a3 + v30 + 40));
        *(_OWORD *)(v33 + 40) = *(_OWORD *)(a4 + v30 + 40);
        *(_QWORD *)(v33 + 56) = *(_QWORD *)(a4 + v30 + 56);
        v34[5] = 0;
        v34[6] = 0;
        v34[7] = 0;
        v30 += 24;
      }
      while (v30 != 48);
      v35 = 0;
      v36 = *v9;
      *(_BYTE *)(a3 + 96) = *(_BYTE *)(a4 + 96);
      *v25 = v36;
      v37 = v81;
      *(_OWORD *)a4 = v80;
      *(_OWORD *)(a4 + 16) = v37;
      *(_QWORD *)(a4 + 32) = v82;
      do
      {
        v38 = a4 + v35;
        v39 = (_QWORD *)((char *)&v80 + v35);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a4 + v35 + 40));
        *(_OWORD *)(v38 + 40) = *(_OWORD *)&v83[v35];
        *(_QWORD *)(v38 + 56) = *(_QWORD *)&v83[v35 + 16];
        v39[6] = 0;
        v39[7] = 0;
        v39[5] = 0;
        v35 += 24;
      }
      while (v35 != 48);
      *v9 = v84;
      *(_BYTE *)(a4 + 96) = v85;
      for (j = 64; j != 16; j -= 24)
      {
        v75 = (void **)((char *)&v80 + j);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v75);
      }
      *(_QWORD *)&v80 = a3;
      *((_QWORD *)&v80 + 1) = a3 + 40;
      *(_QWORD *)&v81 = a3 + 88;
      *((_QWORD *)&v81 + 1) = a3 + 92;
      v82 = a3 + 96;
      v41 = (uint64_t *)(a2 + 88);
      v75 = (void **)a2;
      v76 = a2 + 40;
      v77 = a2 + 88;
      v78 = a2 + 92;
      v79 = a2 + 96;
      if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v80, (uint64_t *)&v75) & 0x80) != 0)
      {
        v42 = 0;
        v43 = *(_OWORD *)(a2 + 16);
        v80 = *(_OWORD *)a2;
        v81 = v43;
        v82 = *(_QWORD *)(a2 + 32);
        do
        {
          v44 = (char *)&v80 + v42;
          v45 = (_QWORD *)(a2 + v42);
          *(_OWORD *)(v44 + 40) = *(_OWORD *)(a2 + v42 + 40);
          *((_QWORD *)v44 + 7) = *(_QWORD *)(a2 + v42 + 56);
          v45[5] = 0;
          v45[6] = 0;
          v45[7] = 0;
          v42 += 24;
        }
        while (v42 != 48);
        v46 = 0;
        v84 = *v41;
        v85 = *(_BYTE *)(a2 + 96);
        v47 = *(_QWORD *)(a3 + 32);
        v48 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v48;
        *(_QWORD *)(a2 + 32) = v47;
        do
        {
          v49 = a2 + v46;
          v50 = (_QWORD *)(a3 + v46);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + v46 + 40));
          *(_OWORD *)(v49 + 40) = *(_OWORD *)(a3 + v46 + 40);
          *(_QWORD *)(v49 + 56) = *(_QWORD *)(a3 + v46 + 56);
          v50[5] = 0;
          v50[6] = 0;
          v50[7] = 0;
          v46 += 24;
        }
        while (v46 != 48);
        v51 = 0;
        v52 = *v25;
        *(_BYTE *)(a2 + 96) = *(_BYTE *)(a3 + 96);
        *v41 = v52;
        v53 = v81;
        *(_OWORD *)a3 = v80;
        *(_OWORD *)(a3 + 16) = v53;
        *(_QWORD *)(a3 + 32) = v82;
        do
        {
          v54 = a3 + v51;
          v55 = (_QWORD *)((char *)&v80 + v51);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a3 + v51 + 40));
          *(_OWORD *)(v54 + 40) = *(_OWORD *)&v83[v51];
          *(_QWORD *)(v54 + 56) = *(_QWORD *)&v83[v51 + 16];
          v55[6] = 0;
          v55[7] = 0;
          v55[5] = 0;
          v51 += 24;
        }
        while (v51 != 48);
        *v25 = v84;
        *(_BYTE *)(a3 + 96) = v85;
        for (k = 64; k != 16; k -= 24)
        {
          v75 = (void **)((char *)&v80 + k);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v75);
        }
        *(_QWORD *)&v80 = a2;
        *((_QWORD *)&v80 + 1) = a2 + 40;
        *(_QWORD *)&v81 = a2 + 88;
        *((_QWORD *)&v81 + 1) = a2 + 92;
        v82 = a2 + 96;
        v57 = (uint64_t *)(a1 + 88);
        v75 = (void **)a1;
        v76 = a1 + 40;
        v77 = a1 + 88;
        v78 = a1 + 92;
        v79 = a1 + 96;
        if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v80, (uint64_t *)&v75) & 0x80) != 0)
        {
          v58 = 0;
          v59 = *(_OWORD *)(a1 + 16);
          v80 = *(_OWORD *)a1;
          v81 = v59;
          v82 = *(_QWORD *)(a1 + 32);
          do
          {
            v60 = (char *)&v80 + v58;
            v61 = (_QWORD *)(a1 + v58);
            *(_OWORD *)(v60 + 40) = *(_OWORD *)(a1 + v58 + 40);
            *((_QWORD *)v60 + 7) = *(_QWORD *)(a1 + v58 + 56);
            v61[5] = 0;
            v61[6] = 0;
            v61[7] = 0;
            v58 += 24;
          }
          while (v58 != 48);
          v62 = 0;
          v84 = *v57;
          v85 = *(_BYTE *)(a1 + 96);
          v63 = *(_QWORD *)(a2 + 32);
          v64 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v64;
          *(_QWORD *)(a1 + 32) = v63;
          do
          {
            v65 = a1 + v62;
            v66 = (_QWORD *)(a2 + v62);
            std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + v62 + 40));
            *(_OWORD *)(v65 + 40) = *(_OWORD *)(a2 + v62 + 40);
            *(_QWORD *)(v65 + 56) = *(_QWORD *)(a2 + v62 + 56);
            v66[5] = 0;
            v66[6] = 0;
            v66[7] = 0;
            v62 += 24;
          }
          while (v62 != 48);
          v67 = 0;
          v68 = *v41;
          *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
          *v57 = v68;
          v69 = v81;
          *(_OWORD *)a2 = v80;
          *(_OWORD *)(a2 + 16) = v69;
          *(_QWORD *)(a2 + 32) = v82;
          do
          {
            v70 = a2 + v67;
            v71 = (_QWORD *)((char *)&v80 + v67);
            std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + v67 + 40));
            *(_OWORD *)(v70 + 40) = *(_OWORD *)&v83[v67];
            *(_QWORD *)(v70 + 56) = *(_QWORD *)&v83[v67 + 16];
            v71[6] = 0;
            v71[7] = 0;
            v71[5] = 0;
            v67 += 24;
          }
          while (v67 != 48);
          *v41 = v84;
          *(_BYTE *)(a2 + 96) = v85;
          for (m = 64; m != 16; m -= 24)
          {
            v75 = (void **)((char *)&v80 + m);
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v75);
          }
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t j;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54[5];
  void **v55;
  _BYTE *v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _BYTE v63[48];
  uint64_t v64;
  char v65;

  v2 = a2;
  v4 = 0x4EC4EC4EC4EC4EC5 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (_OWORD *)(a2 - 104);
      v7 = (uint64_t *)(a2 - 16);
      *(_QWORD *)&v60 = a2 - 104;
      *((_QWORD *)&v60 + 1) = a2 - 64;
      *(_QWORD *)&v61 = a2 - 16;
      *((_QWORD *)&v61 + 1) = a2 - 12;
      v62 = a2 - 8;
      v8 = a1 + 88;
      v55 = (void **)a1;
      v56 = (_BYTE *)(a1 + 40);
      v57 = (uint64_t *)(a1 + 88);
      v58 = (char *)(a1 + 92);
      v59 = (char *)(a1 + 96);
      if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v60, (uint64_t *)&v55) & 0x80) != 0)
      {
        v9 = 0;
        v10 = *(_OWORD *)(a1 + 16);
        v60 = *(_OWORD *)a1;
        v61 = v10;
        v62 = *(_QWORD *)(a1 + 32);
        do
        {
          v11 = (char *)&v60 + v9;
          v12 = (_QWORD *)(a1 + v9);
          *(_OWORD *)(v11 + 40) = *(_OWORD *)(a1 + v9 + 40);
          *((_QWORD *)v11 + 7) = *(_QWORD *)(a1 + v9 + 56);
          v12[5] = 0;
          v12[6] = 0;
          v12[7] = 0;
          v9 += 24;
        }
        while (v9 != 48);
        v13 = 0;
        v64 = *(_QWORD *)v8;
        v65 = *(_BYTE *)(a1 + 96);
        v14 = *(_QWORD *)(v2 - 72);
        v15 = *(_OWORD *)(v2 - 88);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v15;
        *(_QWORD *)(a1 + 32) = v14;
        do
        {
          v16 = a1 + v13;
          v17 = v2 + v13;
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + v13 + 40));
          *(_OWORD *)(v16 + 40) = *(_OWORD *)(v2 + v13 - 64);
          *(_QWORD *)(v16 + 56) = *(_QWORD *)(v2 + v13 - 48);
          *(_QWORD *)(v17 - 64) = 0;
          *(_QWORD *)(v17 - 56) = 0;
          *(_QWORD *)(v17 - 48) = 0;
          v13 += 24;
        }
        while (v13 != 48);
        v18 = 0;
        v19 = *v7;
        *(_BYTE *)(v8 + 8) = *(_BYTE *)(v2 - 8);
        *(_QWORD *)v8 = v19;
        v20 = v61;
        *v6 = v60;
        *(_OWORD *)(v2 - 88) = v20;
        *(_QWORD *)(v2 - 72) = v62;
        do
        {
          v21 = v2 + v18;
          v22 = (_QWORD *)((char *)&v60 + v18);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v2 + v18 - 64));
          *(_OWORD *)(v21 - 64) = *(_OWORD *)&v63[v18];
          *(_QWORD *)(v21 - 48) = *(_QWORD *)&v63[v18 + 16];
          v22[6] = 0;
          v22[7] = 0;
          v22[5] = 0;
          v18 += 24;
        }
        while (v18 != 48);
        *v7 = v64;
        *(_BYTE *)(v2 - 8) = v65;
        for (i = 64; i != 16; i -= 24)
        {
          v55 = (void **)((char *)&v60 + i);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v55);
        }
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>((__int128 *)a1, (__int128 *)(a1 + 104), (__int128 *)(a2 - 104));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(a1, a1 + 104, a1 + 208, a2 - 104);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(a1, a1 + 104, a1 + 208, a1 + 312, a2 - 104);
      return 1;
    default:
      v24 = a1 + 208;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>((__int128 *)a1, (__int128 *)(a1 + 104), (__int128 *)(a1 + 208));
      v25 = a1 + 312;
      if (a1 + 312 == v2)
        return 1;
      v26 = 0;
      v27 = 0;
      v28 = a1;
      v51 = v2;
      break;
  }
  while (1)
  {
    *(_QWORD *)&v60 = v25;
    *((_QWORD *)&v60 + 1) = v25 + 40;
    *(_QWORD *)&v61 = v25 + 88;
    *((_QWORD *)&v61 + 1) = v25 + 92;
    v62 = v25 + 96;
    v55 = (void **)v24;
    v56 = (_BYTE *)(v24 + 40);
    v57 = (uint64_t *)(v24 + 88);
    v58 = (char *)(v24 + 92);
    v59 = (char *)(v24 + 96);
    if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v60, (uint64_t *)&v55) & 0x80) != 0)
    {
      v52 = v27;
      v29 = 0;
      v30 = *(_OWORD *)(v25 + 16);
      v60 = *(_OWORD *)v25;
      v61 = v30;
      v62 = *(_QWORD *)(v25 + 32);
      do
      {
        v31 = (char *)&v60 + v29;
        v32 = (_QWORD *)(v28 + v29);
        *(_OWORD *)(v31 + 40) = *(_OWORD *)(v28 + v29 + 352);
        *((_QWORD *)v31 + 7) = *(_QWORD *)(v28 + v29 + 368);
        v32[44] = 0;
        v32[45] = 0;
        v32[46] = 0;
        v29 += 24;
      }
      while (v29 != 48);
      v64 = *(_QWORD *)(v25 + 88);
      v65 = *(_BYTE *)(v25 + 96);
      v53 = v26;
      v33 = v26;
      v34 = v25;
      while (1)
      {
        v35 = v24;
        v36 = v33;
        v37 = *(_OWORD *)(v24 + 16);
        *(_OWORD *)v34 = *(_OWORD *)v24;
        *(_OWORD *)(v34 + 16) = v37;
        *(_QWORD *)(v34 + 32) = *(_QWORD *)(v24 + 32);
        v38 = v33;
        v39 = 2;
        do
        {
          v40 = a1 + v38;
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + v38 + 352));
          *(_OWORD *)(v40 + 352) = *(_OWORD *)(v40 + 248);
          *(_QWORD *)(v40 + 368) = *(_QWORD *)(v40 + 264);
          *(_QWORD *)(v40 + 256) = 0;
          *(_QWORD *)(v40 + 264) = 0;
          *(_QWORD *)(v40 + 248) = 0;
          v38 += 24;
          --v39;
        }
        while (v39);
        v41 = v35 + 88;
        *(_QWORD *)(v34 + 88) = *(_QWORD *)(v35 + 88);
        *(_BYTE *)(v34 + 96) = *(_BYTE *)(v35 + 96);
        if (v35 == a1)
          break;
        v24 = v35 - 104;
        v55 = (void **)&v60;
        v56 = v63;
        v57 = &v64;
        v58 = (char *)&v64 + 4;
        v59 = &v65;
        v54[0] = v35 - 104;
        v54[1] = v35 - 64;
        v54[2] = v35 - 16;
        v54[3] = v35 - 12;
        v54[4] = v35 - 8;
        v42 = std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v55, v54);
        v33 = v36 - 104;
        v34 = v35;
        if ((v42 & 0x80) == 0)
          goto LABEL_24;
      }
      v35 = a1;
LABEL_24:
      v43 = 0;
      v44 = v60;
      v45 = v61;
      *(_QWORD *)(v35 + 32) = v62;
      *(_OWORD *)v35 = v44;
      *(_OWORD *)(v35 + 16) = v45;
      v46 = a1 + v36;
      do
      {
        v47 = v46 + v43;
        v48 = (_QWORD *)((char *)&v60 + v43);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v46 + v43 + 248));
        *(_OWORD *)(v47 + 248) = *(_OWORD *)&v63[v43];
        *(_QWORD *)(v47 + 264) = *(_QWORD *)&v63[v43 + 16];
        v48[6] = 0;
        v48[7] = 0;
        v48[5] = 0;
        v43 += 24;
      }
      while (v43 != 48);
      v49 = v64;
      *(_BYTE *)(v41 + 8) = v65;
      *(_QWORD *)v41 = v49;
      v27 = v52 + 1;
      for (j = 64; j != 16; j -= 24)
      {
        v55 = (void **)((char *)&v60 + j);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v55);
      }
      v2 = v51;
      v26 = v53;
      if (v52 == 7)
        return v25 + 104 == v51;
    }
    v24 = v25;
    v28 += 104;
    v26 += 104;
    v25 += 104;
    if (v25 == v2)
      return 1;
  }
}

uint64_t std::operator<=>[abi:ne180100]<std::string,std::allocator<std::string>>(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  int64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;
  unsigned int v11;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (uint64_t)a1) >> 3);
  v5 = (a4 - (uint64_t)a3) >> 3;
  v6 = 0xAAAAAAAAAAAAAAABLL * v5;
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * v5) >= v4)
    v7 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (uint64_t)a1) >> 3);
  else
    v7 = 0xAAAAAAAAAAAAAAABLL * v5;
  if (v7 < 1)
  {
LABEL_8:
    if (v4 < v6)
      v11 = -1;
    else
      v11 = 1;
    if (v4 == v6)
      return 0;
    else
      return v11;
  }
  else
  {
    v8 = a3;
    v9 = a1;
    while (1)
    {
      result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, v8);
      if ((_BYTE)result)
        break;
      v9 += 3;
      v8 += 3;
      if (!--v7)
        goto LABEL_8;
    }
  }
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Clock_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  std::string *v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  char v123;
  uint64_t v124;

  v2 = operator new(0x50uLL);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = qword_1EF130D38;
  v4 = (_QWORD *)qword_1EF130D28;
  v117 = qword_1EF130D38;
  v118 = qword_1EF130D38;
  if (qword_1EF130D38)
  {
    if ((unint64_t)qword_1EF130D38 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v5 = operator new(16 * qword_1EF130D38);
  }
  else
  {
    v5 = 0;
  }
  v119 = v5;
  v120 = 0;
  v121 = v4;
  v122 = v2;
  v123 = 0;
  v6 = v4[8];
  if (v6)
    v7 = v6 - 56;
  else
    v7 = 0;
  if ((_QWORD *)v7 == v4)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = (uint64_t)v119;
      v119[2 * v8] = v7;
      v10 = operator new(0x50uLL);
      *(_QWORD *)(v9 + 16 * v8 + 8) = v10;
      *v10 = *(_DWORD *)v7;
      v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        v8 = v120;
        v3 = v117;
      }
      else
      {
        v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      v120 = ++v8;
      if (v8 == v3)
      {
        v13 = 126 - 2 * __clz(v3);
        if (v3)
          v14 = v13;
        else
          v14 = 0;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((uint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124)
        v7 = v124 - 56;
      else
        v7 = 0;
    }
    while ((_QWORD *)v7 != v4);
    v4 = (_QWORD *)qword_1EF130D28;
    v2 = *(_QWORD **)(a1 + 8);
  }
  v15 = v4[7];
  v16 = v2 + 7;
  if (v15 > 1)
  {
    *v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    v17 = v4[7];
    v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v20 = v15 & 1;
    if (v19)
      v21 = 0;
    else
      v21 = v18;
    v22 = v121;
    v23 = &v122;
    if (v121 != (_QWORD *)v21)
    {
      v24 = (uint64_t)v119;
      if (v8)
      {
        v25 = v8;
        do
        {
          v26 = v25 >> 1;
          v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          v29 = *v27;
          v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21)
            v24 = (uint64_t)v28;
          else
            v25 = v26;
        }
        while (v25);
      }
      v23 = (_QWORD *)(v24 + 8);
    }
    *v16 = v20 | (*v23 + 56);
    v30 = v4[8];
    v31 = (_QWORD *)(v30 - 56);
    if (!v30)
      v31 = 0;
    v32 = &v122;
    if (v22 != v31)
    {
      v33 = (uint64_t)v119;
      if (v8)
      {
        v34 = v8;
        do
        {
          v35 = v34 >> 1;
          v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          v38 = *v36;
          v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31)
            v33 = (uint64_t)v37;
          else
            v34 = v35;
        }
        while (v34);
      }
      v32 = (_QWORD *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    v39 = v4[9];
    v40 = (_QWORD *)(v39 - 56);
    if (!v39)
      v40 = 0;
    v41 = (uint64_t)v119;
    v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        v43 = (uint64_t)v119;
        v44 = v8;
        do
        {
          v45 = v44 >> 1;
          v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          v48 = *v46;
          v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40)
            v43 = (uint64_t)v47;
          else
            v44 = v45;
        }
        while (v44);
      }
      else
      {
        v43 = (uint64_t)v119;
      }
      v42 = (_QWORD *)(v43 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      v49 = (_QWORD *)v41;
      do
      {
        v51 = *v49;
        v50 = (_QWORD *)v49[1];
        v52 = (_QWORD *)(*v49 + 56);
        v53 = v50 + 7;
        v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          v56 = (uint64_t *)&v122;
          if (v22 != (_QWORD *)(v55 - 56))
          {
            v57 = v41;
            v58 = v8;
            do
            {
              v59 = v58 >> 1;
              v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              v62 = *v60;
              v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56)
                v57 = (uint64_t)v61;
              else
                v58 = v59;
            }
            while (v58);
            v56 = (uint64_t *)(v57 + 8);
          }
          v63 = *v56;
          *v53 = v54 | (*v56 + 56);
          if (*(_QWORD **)(v55 + 8) == v52)
          {
            *(_QWORD *)(v63 + 64) = v53;
          }
          else if (*(_QWORD **)(v55 + 16) == v52)
          {
            *(_QWORD *)(v63 + 72) = v53;
          }
        }
        else
        {
          *v53 = v54;
        }
        if (!*(_QWORD *)(v51 + 64))
          v50[8] = 0;
        if (!*(_QWORD *)(v51 + 72))
          v50[9] = 0;
        v49 += 2;
      }
      while (v49 != (_QWORD *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *(_QWORD *)(a1 + 8) + 56;
  }
  v64 = v4[4];
  v65 = *(_QWORD *)(a1 + 8);
  v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    v67 = v4[4];
    v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v69 = v64 & 1;
    if (v19)
      v70 = 0;
    else
      v70 = v68;
    v71 = v121;
    v72 = &v122;
    if (v121 != (_QWORD *)v70)
    {
      v73 = (uint64_t)v119;
      v74 = v120;
      if (v120)
      {
        do
        {
          v75 = v74 >> 1;
          v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          v78 = *v76;
          v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70)
            v73 = (uint64_t)v77;
          else
            v74 = v75;
        }
        while (v74);
      }
      v72 = (_QWORD *)(v73 + 8);
    }
    *v66 = v69 | (*v72 + 32);
    v79 = v4[5];
    v80 = (_QWORD *)(v79 - 32);
    if (!v79)
      v80 = 0;
    v81 = &v122;
    if (v71 != v80)
    {
      v82 = (uint64_t)v119;
      v83 = v120;
      if (v120)
      {
        do
        {
          v84 = v83 >> 1;
          v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          v87 = *v85;
          v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80)
            v82 = (uint64_t)v86;
          else
            v83 = v84;
        }
        while (v83);
      }
      v81 = (_QWORD *)(v82 + 8);
    }
    *(_QWORD *)(v65 + 40) = *v81 + 32;
    v88 = v4[6];
    if (v88)
      v89 = (_QWORD *)(v88 - 32);
    else
      v89 = 0;
    if (v121 == v89)
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      v98 = &v122;
    }
    else
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      if (v120)
      {
        v92 = (uint64_t)v119;
        v93 = v120;
        do
        {
          v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          v97 = *v95;
          v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89)
            v92 = (uint64_t)v96;
          else
            v93 = v94;
        }
        while (v93);
      }
      else
      {
        v92 = (uint64_t)v119;
      }
      v98 = (_QWORD *)(v92 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      v99 = (_QWORD *)(v90 + 16 * v91);
      v100 = (_QWORD *)v90;
      do
      {
        v102 = *v100;
        v101 = (_QWORD *)v100[1];
        v103 = (_QWORD *)(*v100 + 32);
        v104 = v101 + 4;
        v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          v107 = (uint64_t *)&v122;
          if (v121 != (_QWORD *)(v106 - 32))
          {
            v108 = v120;
            if (v120)
            {
              v109 = v90;
              do
              {
                v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                v113 = *v111;
                v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32)
                  v109 = (uint64_t)v112;
                else
                  v108 = v110;
              }
              while (v108);
            }
            else
            {
              v109 = v90;
            }
            v107 = (uint64_t *)(v109 + 8);
          }
          v114 = *v107;
          *v104 = v105 | (*v107 + 32);
          if (*(_QWORD **)(v106 + 8) == v103)
          {
            *(_QWORD *)(v114 + 40) = v104;
          }
          else if (*(_QWORD **)(v106 + 16) == v103)
          {
            *(_QWORD *)(v114 + 48) = v104;
          }
        }
        else
        {
          *v104 = v105;
        }
        if (!*(_QWORD *)(v102 + 40))
          v101[5] = 0;
        if (!*(_QWORD *)(v102 + 48))
          v101[6] = 0;
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(_QWORD *)(v65 + 32) = 0;
    *(_QWORD *)(v65 + 40) = v66;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *(_QWORD *)(a1 + 8) + 32;
  }
  v123 = 1;
  *(_QWORD *)(a1 + 24) = qword_1EF130D38;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1B5C357A0()
{
  __break(1u);
}

void sub_1B5C357C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&a9);
  JUMPOUT(0x1B5C357E4);
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(uint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  __int128 *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  __n128 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *n128_u64;
  BOOL v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  int64_t v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  __n128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __n128 *v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  __n128 *v77;
  unint64_t v78;
  __n128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (unint64_t *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Buffer_Size_Change_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  std::string *v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  char v123;
  uint64_t v124;

  v2 = operator new(0x50uLL);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = qword_1EF130DC8;
  v4 = (_QWORD *)qword_1EF130DB8;
  v117 = qword_1EF130DC8;
  v118 = qword_1EF130DC8;
  if (qword_1EF130DC8)
  {
    if ((unint64_t)qword_1EF130DC8 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v5 = operator new(16 * qword_1EF130DC8);
  }
  else
  {
    v5 = 0;
  }
  v119 = v5;
  v120 = 0;
  v121 = v4;
  v122 = v2;
  v123 = 0;
  v6 = v4[8];
  if (v6)
    v7 = v6 - 56;
  else
    v7 = 0;
  if ((_QWORD *)v7 == v4)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = (uint64_t)v119;
      v119[2 * v8] = v7;
      v10 = operator new(0x50uLL);
      *(_QWORD *)(v9 + 16 * v8 + 8) = v10;
      *v10 = *(_DWORD *)v7;
      v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        v8 = v120;
        v3 = v117;
      }
      else
      {
        v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      v120 = ++v8;
      if (v8 == v3)
      {
        v13 = 126 - 2 * __clz(v3);
        if (v3)
          v14 = v13;
        else
          v14 = 0;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((uint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124)
        v7 = v124 - 56;
      else
        v7 = 0;
    }
    while ((_QWORD *)v7 != v4);
    v4 = (_QWORD *)qword_1EF130DB8;
    v2 = *(_QWORD **)(a1 + 8);
  }
  v15 = v4[7];
  v16 = v2 + 7;
  if (v15 > 1)
  {
    *v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    v17 = v4[7];
    v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v20 = v15 & 1;
    if (v19)
      v21 = 0;
    else
      v21 = v18;
    v22 = v121;
    v23 = &v122;
    if (v121 != (_QWORD *)v21)
    {
      v24 = (uint64_t)v119;
      if (v8)
      {
        v25 = v8;
        do
        {
          v26 = v25 >> 1;
          v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          v29 = *v27;
          v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21)
            v24 = (uint64_t)v28;
          else
            v25 = v26;
        }
        while (v25);
      }
      v23 = (_QWORD *)(v24 + 8);
    }
    *v16 = v20 | (*v23 + 56);
    v30 = v4[8];
    v31 = (_QWORD *)(v30 - 56);
    if (!v30)
      v31 = 0;
    v32 = &v122;
    if (v22 != v31)
    {
      v33 = (uint64_t)v119;
      if (v8)
      {
        v34 = v8;
        do
        {
          v35 = v34 >> 1;
          v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          v38 = *v36;
          v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31)
            v33 = (uint64_t)v37;
          else
            v34 = v35;
        }
        while (v34);
      }
      v32 = (_QWORD *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    v39 = v4[9];
    v40 = (_QWORD *)(v39 - 56);
    if (!v39)
      v40 = 0;
    v41 = (uint64_t)v119;
    v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        v43 = (uint64_t)v119;
        v44 = v8;
        do
        {
          v45 = v44 >> 1;
          v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          v48 = *v46;
          v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40)
            v43 = (uint64_t)v47;
          else
            v44 = v45;
        }
        while (v44);
      }
      else
      {
        v43 = (uint64_t)v119;
      }
      v42 = (_QWORD *)(v43 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      v49 = (_QWORD *)v41;
      do
      {
        v51 = *v49;
        v50 = (_QWORD *)v49[1];
        v52 = (_QWORD *)(*v49 + 56);
        v53 = v50 + 7;
        v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          v56 = (uint64_t *)&v122;
          if (v22 != (_QWORD *)(v55 - 56))
          {
            v57 = v41;
            v58 = v8;
            do
            {
              v59 = v58 >> 1;
              v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              v62 = *v60;
              v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56)
                v57 = (uint64_t)v61;
              else
                v58 = v59;
            }
            while (v58);
            v56 = (uint64_t *)(v57 + 8);
          }
          v63 = *v56;
          *v53 = v54 | (*v56 + 56);
          if (*(_QWORD **)(v55 + 8) == v52)
          {
            *(_QWORD *)(v63 + 64) = v53;
          }
          else if (*(_QWORD **)(v55 + 16) == v52)
          {
            *(_QWORD *)(v63 + 72) = v53;
          }
        }
        else
        {
          *v53 = v54;
        }
        if (!*(_QWORD *)(v51 + 64))
          v50[8] = 0;
        if (!*(_QWORD *)(v51 + 72))
          v50[9] = 0;
        v49 += 2;
      }
      while (v49 != (_QWORD *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *(_QWORD *)(a1 + 8) + 56;
  }
  v64 = v4[4];
  v65 = *(_QWORD *)(a1 + 8);
  v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    v67 = v4[4];
    v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v69 = v64 & 1;
    if (v19)
      v70 = 0;
    else
      v70 = v68;
    v71 = v121;
    v72 = &v122;
    if (v121 != (_QWORD *)v70)
    {
      v73 = (uint64_t)v119;
      v74 = v120;
      if (v120)
      {
        do
        {
          v75 = v74 >> 1;
          v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          v78 = *v76;
          v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70)
            v73 = (uint64_t)v77;
          else
            v74 = v75;
        }
        while (v74);
      }
      v72 = (_QWORD *)(v73 + 8);
    }
    *v66 = v69 | (*v72 + 32);
    v79 = v4[5];
    v80 = (_QWORD *)(v79 - 32);
    if (!v79)
      v80 = 0;
    v81 = &v122;
    if (v71 != v80)
    {
      v82 = (uint64_t)v119;
      v83 = v120;
      if (v120)
      {
        do
        {
          v84 = v83 >> 1;
          v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          v87 = *v85;
          v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80)
            v82 = (uint64_t)v86;
          else
            v83 = v84;
        }
        while (v83);
      }
      v81 = (_QWORD *)(v82 + 8);
    }
    *(_QWORD *)(v65 + 40) = *v81 + 32;
    v88 = v4[6];
    if (v88)
      v89 = (_QWORD *)(v88 - 32);
    else
      v89 = 0;
    if (v121 == v89)
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      v98 = &v122;
    }
    else
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      if (v120)
      {
        v92 = (uint64_t)v119;
        v93 = v120;
        do
        {
          v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          v97 = *v95;
          v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89)
            v92 = (uint64_t)v96;
          else
            v93 = v94;
        }
        while (v93);
      }
      else
      {
        v92 = (uint64_t)v119;
      }
      v98 = (_QWORD *)(v92 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      v99 = (_QWORD *)(v90 + 16 * v91);
      v100 = (_QWORD *)v90;
      do
      {
        v102 = *v100;
        v101 = (_QWORD *)v100[1];
        v103 = (_QWORD *)(*v100 + 32);
        v104 = v101 + 4;
        v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          v107 = (uint64_t *)&v122;
          if (v121 != (_QWORD *)(v106 - 32))
          {
            v108 = v120;
            if (v120)
            {
              v109 = v90;
              do
              {
                v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                v113 = *v111;
                v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32)
                  v109 = (uint64_t)v112;
                else
                  v108 = v110;
              }
              while (v108);
            }
            else
            {
              v109 = v90;
            }
            v107 = (uint64_t *)(v109 + 8);
          }
          v114 = *v107;
          *v104 = v105 | (*v107 + 32);
          if (*(_QWORD **)(v106 + 8) == v103)
          {
            *(_QWORD *)(v114 + 40) = v104;
          }
          else if (*(_QWORD **)(v106 + 16) == v103)
          {
            *(_QWORD *)(v114 + 48) = v104;
          }
        }
        else
        {
          *v104 = v105;
        }
        if (!*(_QWORD *)(v102 + 40))
          v101[5] = 0;
        if (!*(_QWORD *)(v102 + 48))
          v101[6] = 0;
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(_QWORD *)(v65 + 32) = 0;
    *(_QWORD *)(v65 + 40) = v66;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *(_QWORD *)(a1 + 8) + 32;
  }
  v123 = 1;
  *(_QWORD *)(a1 + 24) = qword_1EF130DC8;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1B5C36670()
{
  __break(1u);
}

void sub_1B5C36698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&a9);
  JUMPOUT(0x1B5C366B4);
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(uint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  __int128 *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  __n128 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *n128_u64;
  BOOL v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  int64_t v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  __n128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __n128 *v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  __n128 *v77;
  unint64_t v78;
  __n128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (unint64_t *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Thread_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  std::string *v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  char v123;
  uint64_t v124;

  v2 = operator new(0x50uLL);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = qword_1EF130D80;
  v4 = (_QWORD *)qword_1EF130D70;
  v117 = qword_1EF130D80;
  v118 = qword_1EF130D80;
  if (qword_1EF130D80)
  {
    if ((unint64_t)qword_1EF130D80 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v5 = operator new(16 * qword_1EF130D80);
  }
  else
  {
    v5 = 0;
  }
  v119 = v5;
  v120 = 0;
  v121 = v4;
  v122 = v2;
  v123 = 0;
  v6 = v4[8];
  if (v6)
    v7 = v6 - 56;
  else
    v7 = 0;
  if ((_QWORD *)v7 == v4)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = (uint64_t)v119;
      v119[2 * v8] = v7;
      v10 = operator new(0x50uLL);
      *(_QWORD *)(v9 + 16 * v8 + 8) = v10;
      *v10 = *(_DWORD *)v7;
      v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        v8 = v120;
        v3 = v117;
      }
      else
      {
        v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      v120 = ++v8;
      if (v8 == v3)
      {
        v13 = 126 - 2 * __clz(v3);
        if (v3)
          v14 = v13;
        else
          v14 = 0;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((uint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124)
        v7 = v124 - 56;
      else
        v7 = 0;
    }
    while ((_QWORD *)v7 != v4);
    v4 = (_QWORD *)qword_1EF130D70;
    v2 = *(_QWORD **)(a1 + 8);
  }
  v15 = v4[7];
  v16 = v2 + 7;
  if (v15 > 1)
  {
    *v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    v17 = v4[7];
    v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v20 = v15 & 1;
    if (v19)
      v21 = 0;
    else
      v21 = v18;
    v22 = v121;
    v23 = &v122;
    if (v121 != (_QWORD *)v21)
    {
      v24 = (uint64_t)v119;
      if (v8)
      {
        v25 = v8;
        do
        {
          v26 = v25 >> 1;
          v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          v29 = *v27;
          v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21)
            v24 = (uint64_t)v28;
          else
            v25 = v26;
        }
        while (v25);
      }
      v23 = (_QWORD *)(v24 + 8);
    }
    *v16 = v20 | (*v23 + 56);
    v30 = v4[8];
    v31 = (_QWORD *)(v30 - 56);
    if (!v30)
      v31 = 0;
    v32 = &v122;
    if (v22 != v31)
    {
      v33 = (uint64_t)v119;
      if (v8)
      {
        v34 = v8;
        do
        {
          v35 = v34 >> 1;
          v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          v38 = *v36;
          v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31)
            v33 = (uint64_t)v37;
          else
            v34 = v35;
        }
        while (v34);
      }
      v32 = (_QWORD *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    v39 = v4[9];
    v40 = (_QWORD *)(v39 - 56);
    if (!v39)
      v40 = 0;
    v41 = (uint64_t)v119;
    v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        v43 = (uint64_t)v119;
        v44 = v8;
        do
        {
          v45 = v44 >> 1;
          v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          v48 = *v46;
          v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40)
            v43 = (uint64_t)v47;
          else
            v44 = v45;
        }
        while (v44);
      }
      else
      {
        v43 = (uint64_t)v119;
      }
      v42 = (_QWORD *)(v43 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      v49 = (_QWORD *)v41;
      do
      {
        v51 = *v49;
        v50 = (_QWORD *)v49[1];
        v52 = (_QWORD *)(*v49 + 56);
        v53 = v50 + 7;
        v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          v56 = (uint64_t *)&v122;
          if (v22 != (_QWORD *)(v55 - 56))
          {
            v57 = v41;
            v58 = v8;
            do
            {
              v59 = v58 >> 1;
              v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              v62 = *v60;
              v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56)
                v57 = (uint64_t)v61;
              else
                v58 = v59;
            }
            while (v58);
            v56 = (uint64_t *)(v57 + 8);
          }
          v63 = *v56;
          *v53 = v54 | (*v56 + 56);
          if (*(_QWORD **)(v55 + 8) == v52)
          {
            *(_QWORD *)(v63 + 64) = v53;
          }
          else if (*(_QWORD **)(v55 + 16) == v52)
          {
            *(_QWORD *)(v63 + 72) = v53;
          }
        }
        else
        {
          *v53 = v54;
        }
        if (!*(_QWORD *)(v51 + 64))
          v50[8] = 0;
        if (!*(_QWORD *)(v51 + 72))
          v50[9] = 0;
        v49 += 2;
      }
      while (v49 != (_QWORD *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *(_QWORD *)(a1 + 8) + 56;
  }
  v64 = v4[4];
  v65 = *(_QWORD *)(a1 + 8);
  v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    v67 = v4[4];
    v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v69 = v64 & 1;
    if (v19)
      v70 = 0;
    else
      v70 = v68;
    v71 = v121;
    v72 = &v122;
    if (v121 != (_QWORD *)v70)
    {
      v73 = (uint64_t)v119;
      v74 = v120;
      if (v120)
      {
        do
        {
          v75 = v74 >> 1;
          v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          v78 = *v76;
          v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70)
            v73 = (uint64_t)v77;
          else
            v74 = v75;
        }
        while (v74);
      }
      v72 = (_QWORD *)(v73 + 8);
    }
    *v66 = v69 | (*v72 + 32);
    v79 = v4[5];
    v80 = (_QWORD *)(v79 - 32);
    if (!v79)
      v80 = 0;
    v81 = &v122;
    if (v71 != v80)
    {
      v82 = (uint64_t)v119;
      v83 = v120;
      if (v120)
      {
        do
        {
          v84 = v83 >> 1;
          v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          v87 = *v85;
          v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80)
            v82 = (uint64_t)v86;
          else
            v83 = v84;
        }
        while (v83);
      }
      v81 = (_QWORD *)(v82 + 8);
    }
    *(_QWORD *)(v65 + 40) = *v81 + 32;
    v88 = v4[6];
    if (v88)
      v89 = (_QWORD *)(v88 - 32);
    else
      v89 = 0;
    if (v121 == v89)
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      v98 = &v122;
    }
    else
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      if (v120)
      {
        v92 = (uint64_t)v119;
        v93 = v120;
        do
        {
          v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          v97 = *v95;
          v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89)
            v92 = (uint64_t)v96;
          else
            v93 = v94;
        }
        while (v93);
      }
      else
      {
        v92 = (uint64_t)v119;
      }
      v98 = (_QWORD *)(v92 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      v99 = (_QWORD *)(v90 + 16 * v91);
      v100 = (_QWORD *)v90;
      do
      {
        v102 = *v100;
        v101 = (_QWORD *)v100[1];
        v103 = (_QWORD *)(*v100 + 32);
        v104 = v101 + 4;
        v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          v107 = (uint64_t *)&v122;
          if (v121 != (_QWORD *)(v106 - 32))
          {
            v108 = v120;
            if (v120)
            {
              v109 = v90;
              do
              {
                v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                v113 = *v111;
                v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32)
                  v109 = (uint64_t)v112;
                else
                  v108 = v110;
              }
              while (v108);
            }
            else
            {
              v109 = v90;
            }
            v107 = (uint64_t *)(v109 + 8);
          }
          v114 = *v107;
          *v104 = v105 | (*v107 + 32);
          if (*(_QWORD **)(v106 + 8) == v103)
          {
            *(_QWORD *)(v114 + 40) = v104;
          }
          else if (*(_QWORD **)(v106 + 16) == v103)
          {
            *(_QWORD *)(v114 + 48) = v104;
          }
        }
        else
        {
          *v104 = v105;
        }
        if (!*(_QWORD *)(v102 + 40))
          v101[5] = 0;
        if (!*(_QWORD *)(v102 + 48))
          v101[6] = 0;
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(_QWORD *)(v65 + 32) = 0;
    *(_QWORD *)(v65 + 40) = v66;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *(_QWORD *)(a1 + 8) + 32;
  }
  v123 = 1;
  *(_QWORD *)(a1 + 24) = qword_1EF130D80;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1B5C37540()
{
  __break(1u);
}

void sub_1B5C37568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&a9);
  JUMPOUT(0x1B5C37584);
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(uint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  __int128 *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  __n128 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *n128_u64;
  BOOL v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  int64_t v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  __n128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __n128 *v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  __n128 *v77;
  unint64_t v78;
  __n128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (unint64_t *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  std::string *v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  char v123;
  uint64_t v124;

  v2 = operator new(0x50uLL);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = qword_1EF130E58;
  v4 = (_QWORD *)qword_1EF130E48;
  v117 = qword_1EF130E58;
  v118 = qword_1EF130E58;
  if (qword_1EF130E58)
  {
    if ((unint64_t)qword_1EF130E58 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v5 = operator new(16 * qword_1EF130E58);
  }
  else
  {
    v5 = 0;
  }
  v119 = v5;
  v120 = 0;
  v121 = v4;
  v122 = v2;
  v123 = 0;
  v6 = v4[8];
  if (v6)
    v7 = v6 - 56;
  else
    v7 = 0;
  if ((_QWORD *)v7 == v4)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = (uint64_t)v119;
      v119[2 * v8] = v7;
      v10 = operator new(0x50uLL);
      *(_QWORD *)(v9 + 16 * v8 + 8) = v10;
      *v10 = *(_DWORD *)v7;
      v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        v8 = v120;
        v3 = v117;
      }
      else
      {
        v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      v120 = ++v8;
      if (v8 == v3)
      {
        v13 = 126 - 2 * __clz(v3);
        if (v3)
          v14 = v13;
        else
          v14 = 0;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((uint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124)
        v7 = v124 - 56;
      else
        v7 = 0;
    }
    while ((_QWORD *)v7 != v4);
    v4 = (_QWORD *)qword_1EF130E48;
    v2 = *(_QWORD **)(a1 + 8);
  }
  v15 = v4[7];
  v16 = v2 + 7;
  if (v15 > 1)
  {
    *v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    v17 = v4[7];
    v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v20 = v15 & 1;
    if (v19)
      v21 = 0;
    else
      v21 = v18;
    v22 = v121;
    v23 = &v122;
    if (v121 != (_QWORD *)v21)
    {
      v24 = (uint64_t)v119;
      if (v8)
      {
        v25 = v8;
        do
        {
          v26 = v25 >> 1;
          v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          v29 = *v27;
          v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21)
            v24 = (uint64_t)v28;
          else
            v25 = v26;
        }
        while (v25);
      }
      v23 = (_QWORD *)(v24 + 8);
    }
    *v16 = v20 | (*v23 + 56);
    v30 = v4[8];
    v31 = (_QWORD *)(v30 - 56);
    if (!v30)
      v31 = 0;
    v32 = &v122;
    if (v22 != v31)
    {
      v33 = (uint64_t)v119;
      if (v8)
      {
        v34 = v8;
        do
        {
          v35 = v34 >> 1;
          v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          v38 = *v36;
          v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31)
            v33 = (uint64_t)v37;
          else
            v34 = v35;
        }
        while (v34);
      }
      v32 = (_QWORD *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    v39 = v4[9];
    v40 = (_QWORD *)(v39 - 56);
    if (!v39)
      v40 = 0;
    v41 = (uint64_t)v119;
    v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        v43 = (uint64_t)v119;
        v44 = v8;
        do
        {
          v45 = v44 >> 1;
          v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          v48 = *v46;
          v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40)
            v43 = (uint64_t)v47;
          else
            v44 = v45;
        }
        while (v44);
      }
      else
      {
        v43 = (uint64_t)v119;
      }
      v42 = (_QWORD *)(v43 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      v49 = (_QWORD *)v41;
      do
      {
        v51 = *v49;
        v50 = (_QWORD *)v49[1];
        v52 = (_QWORD *)(*v49 + 56);
        v53 = v50 + 7;
        v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          v56 = (uint64_t *)&v122;
          if (v22 != (_QWORD *)(v55 - 56))
          {
            v57 = v41;
            v58 = v8;
            do
            {
              v59 = v58 >> 1;
              v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              v62 = *v60;
              v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56)
                v57 = (uint64_t)v61;
              else
                v58 = v59;
            }
            while (v58);
            v56 = (uint64_t *)(v57 + 8);
          }
          v63 = *v56;
          *v53 = v54 | (*v56 + 56);
          if (*(_QWORD **)(v55 + 8) == v52)
          {
            *(_QWORD *)(v63 + 64) = v53;
          }
          else if (*(_QWORD **)(v55 + 16) == v52)
          {
            *(_QWORD *)(v63 + 72) = v53;
          }
        }
        else
        {
          *v53 = v54;
        }
        if (!*(_QWORD *)(v51 + 64))
          v50[8] = 0;
        if (!*(_QWORD *)(v51 + 72))
          v50[9] = 0;
        v49 += 2;
      }
      while (v49 != (_QWORD *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *(_QWORD *)(a1 + 8) + 56;
  }
  v64 = v4[4];
  v65 = *(_QWORD *)(a1 + 8);
  v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    v67 = v4[4];
    v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v69 = v64 & 1;
    if (v19)
      v70 = 0;
    else
      v70 = v68;
    v71 = v121;
    v72 = &v122;
    if (v121 != (_QWORD *)v70)
    {
      v73 = (uint64_t)v119;
      v74 = v120;
      if (v120)
      {
        do
        {
          v75 = v74 >> 1;
          v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          v78 = *v76;
          v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70)
            v73 = (uint64_t)v77;
          else
            v74 = v75;
        }
        while (v74);
      }
      v72 = (_QWORD *)(v73 + 8);
    }
    *v66 = v69 | (*v72 + 32);
    v79 = v4[5];
    v80 = (_QWORD *)(v79 - 32);
    if (!v79)
      v80 = 0;
    v81 = &v122;
    if (v71 != v80)
    {
      v82 = (uint64_t)v119;
      v83 = v120;
      if (v120)
      {
        do
        {
          v84 = v83 >> 1;
          v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          v87 = *v85;
          v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80)
            v82 = (uint64_t)v86;
          else
            v83 = v84;
        }
        while (v83);
      }
      v81 = (_QWORD *)(v82 + 8);
    }
    *(_QWORD *)(v65 + 40) = *v81 + 32;
    v88 = v4[6];
    if (v88)
      v89 = (_QWORD *)(v88 - 32);
    else
      v89 = 0;
    if (v121 == v89)
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      v98 = &v122;
    }
    else
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      if (v120)
      {
        v92 = (uint64_t)v119;
        v93 = v120;
        do
        {
          v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          v97 = *v95;
          v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89)
            v92 = (uint64_t)v96;
          else
            v93 = v94;
        }
        while (v93);
      }
      else
      {
        v92 = (uint64_t)v119;
      }
      v98 = (_QWORD *)(v92 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      v99 = (_QWORD *)(v90 + 16 * v91);
      v100 = (_QWORD *)v90;
      do
      {
        v102 = *v100;
        v101 = (_QWORD *)v100[1];
        v103 = (_QWORD *)(*v100 + 32);
        v104 = v101 + 4;
        v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          v107 = (uint64_t *)&v122;
          if (v121 != (_QWORD *)(v106 - 32))
          {
            v108 = v120;
            if (v120)
            {
              v109 = v90;
              do
              {
                v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                v113 = *v111;
                v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32)
                  v109 = (uint64_t)v112;
                else
                  v108 = v110;
              }
              while (v108);
            }
            else
            {
              v109 = v90;
            }
            v107 = (uint64_t *)(v109 + 8);
          }
          v114 = *v107;
          *v104 = v105 | (*v107 + 32);
          if (*(_QWORD **)(v106 + 8) == v103)
          {
            *(_QWORD *)(v114 + 40) = v104;
          }
          else if (*(_QWORD **)(v106 + 16) == v103)
          {
            *(_QWORD *)(v114 + 48) = v104;
          }
        }
        else
        {
          *v104 = v105;
        }
        if (!*(_QWORD *)(v102 + 40))
          v101[5] = 0;
        if (!*(_QWORD *)(v102 + 48))
          v101[6] = 0;
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(_QWORD *)(v65 + 32) = 0;
    *(_QWORD *)(v65 + 40) = v66;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *(_QWORD *)(a1 + 8) + 32;
  }
  v123 = 1;
  *(_QWORD *)(a1 + 24) = qword_1EF130E58;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1B5C38410()
{
  __break(1u);
}

void sub_1B5C38438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&a9);
  JUMPOUT(0x1B5C38454);
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(uint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  __int128 *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  __n128 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *n128_u64;
  BOOL v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  int64_t v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  __n128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __n128 *v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  __n128 *v77;
  unint64_t v78;
  __n128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (unint64_t *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

_QWORD *AMCP::write_json_object<AMCP::Terminal_Identifier>(uint64_t a1, char *a2, uint64_t a3)
{
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  AMCP::Log::Scope_Registry *v8;
  char *v9;
  unint64_t v10;
  unsigned int v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  std::logic_error *exception;
  uint64_t v25;
  int v26;
  uint64_t v27;
  std::logic_error v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  std::string v34;
  __int128 v35;
  uint64_t v36;
  uint64_t (**v37)();
  __int128 v38;
  uint64_t v39;
  std::string v40;
  std::logic_error v41;
  std::logic_error v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  _QWORD v52[4];
  uint8_t buf[8];
  _BYTE v54[10];
  __int16 v55;
  int v56;
  _BYTE v57[24];
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (a2[23] >= 0)
    v5 = a2;
  else
    v5 = *(char **)a2;
  minijson::writer::next_field((minijson::writer *)a1);
  minijson::writer::write_field_name((uint64_t **)a1, v5);
  v6 = *(uint64_t **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v32 = *(_OWORD *)(a1 + 24);
  v33 = *(_QWORD *)(a1 + 40);
  LOBYTE(v29) = 0;
  HIDWORD(v29) = 0;
  v30 = v6;
  v31 = v7 + 1;
  minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v29, "node", a3);
  if (HIDWORD(v29) != 2)
  {
    minijson::writer::next_field((minijson::writer *)&v29);
    minijson::writer::write_field_name(&v29, "terminal_index");
    std::ostream::operator<<();
  }
  AMCP::get_enum_string_bimap<AMCP::Direction>();
  v49 = v52;
  v8 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v50);
  v52[2] = v52;
  v52[3] = v52;
  v9 = v51;
  v10 = *((_QWORD *)v51 + 4) & 0xFFFFFFFFFFFFFFFELL;
  if (!v10)
    goto LABEL_26;
  v11 = *(_DWORD *)(a3 + 32);
  v12 = v51;
  do
  {
    while (*(_DWORD *)(v10 - 32) < v11)
    {
      v10 = *(_QWORD *)(v10 + 16);
      if (!v10)
        goto LABEL_12;
    }
    v12 = (char *)(v10 - 32);
    v10 = *(_QWORD *)(v10 + 8);
  }
  while (v10);
LABEL_12:
  if (v12 == v51 || (v11 >= *(_DWORD *)v12 ? (v13 = v12) : (v13 = v51), v51 == v13))
  {
LABEL_26:
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v18 = *(std::__shared_weak_count **)v54;
    v19 = **(NSObject ***)buf;
    if (*(_QWORD *)v54)
    {
      v20 = (unint64_t *)(*(_QWORD *)v54 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v22 = pthread_self();
      v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v23;
      *(_WORD *)v54 = 2080;
      *(_QWORD *)&v54[2] = "Graph_Description_Internal.h";
      v55 = 1024;
      v56 = 42;
      *(_WORD *)v57 = 2080;
      *(_QWORD *)&v57[2] = "not (found != map.left.end())";
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v48);
    exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v40);
    std::logic_error::logic_error(&v41, &v40);
    v25 = MEMORY[0x1E0DE5018];
    v41.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v42, &v41);
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = -1;
    v42.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v43 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v42);
    *(_QWORD *)&v57[8] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Direction]";
    *(_QWORD *)&v57[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
    v58 = 42;
    std::vector<void *>::vector(&v35);
    v26 = backtrace((void **)v35, (*((_QWORD *)&v35 + 1) - (_QWORD)v35) >> 3);
    std::vector<void *>::resize((char **)&v35, v26);
    v38 = v35;
    v39 = v36;
    v35 = 0uLL;
    v36 = 0;
    v37 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v37);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(exception, (const std::logic_error *)buf);
    exception->__vftable = (std::logic_error_vtbl *)(v25 + 16);
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v27 = *(_QWORD *)v57;
    exception[1].__imp_.__imp_ = *(const char **)v57;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
    v28 = *(std::logic_error *)&v57[8];
    LODWORD(exception[3].__vftable) = v58;
    exception[2] = v28;
    exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  if (v13[31] < 0)
  {
    std::string::__init_copy_ctor_external(&v34, *((const std::string::value_type **)v13 + 1), *((_QWORD *)v13 + 2));
    v9 = v51;
  }
  else
  {
    v14 = *(_OWORD *)(v13 + 8);
    v34.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 3);
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v14;
  }
  v15 = *((_QWORD *)v9 + 7);
  if ((v15 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v16 = (v15 & 0xFFFFFFFFFFFFFFFELL) - 56;
  else
    v16 = 0;
  boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v52, v16);
  operator delete(v51);
  minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v29, "wire_direction", (uint64_t)&v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  return minijson::writer::close(&v29);
}

void sub_1B5C390DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;

  v43 = *(_QWORD *)(*(_QWORD *)(v41 - 168) + 56);
  if ((v43 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v44 = (v43 & 0xFFFFFFFFFFFFFFFELL) - 56;
  else
    v44 = 0;
  boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes(v40, v44);
  operator delete(*(void **)(v41 - 168));
  _Unwind_Resume(a1);
}

void AMCP::enum_to_string<AMCP::Resampler_Type>(std::string *a1, int *a2)
{
  AMCP::Log::Scope_Registry *v4;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *exception;
  __int128 v17;
  uint64_t v18;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  std::string v22;
  std::logic_error v23;
  std::logic_error v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  void *__p;
  _QWORD v34[4];
  uint8_t buf[8];
  __int16 v36;
  char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  _BYTE v41[14];
  const char *v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  AMCP::get_enum_string_bimap<AMCP::Resampler_Type>();
  v31 = v34;
  v4 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v32);
  v34[2] = v34;
  v34[3] = v34;
  v5 = __p;
  v6 = *((_QWORD *)__p + 4) & 0xFFFFFFFFFFFFFFFELL;
  if (!v6)
    goto LABEL_19;
  v7 = *a2;
  v8 = (char *)__p;
  do
  {
    while (*(_DWORD *)(v6 - 32) < v7)
    {
      v6 = *(_QWORD *)(v6 + 16);
      if (!v6)
        goto LABEL_7;
    }
    v8 = (char *)(v6 - 32);
    v6 = *(_QWORD *)(v6 + 8);
  }
  while (v6);
LABEL_7:
  if (v8 == __p || (v7 >= *(_DWORD *)v8 ? (v9 = v8) : (v9 = (char *)__p), __p == v9))
  {
LABEL_19:
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v13 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v15;
      v36 = 2080;
      v37 = "Graph_Description_Internal.h";
      v38 = 1024;
      v39 = 42;
      v40 = 2080;
      *(_QWORD *)v41 = "not (found != map.left.end())";
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v22);
    std::logic_error::logic_error(&v23, &v22);
    v23.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v25 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    *(_QWORD *)&v41[6] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Resampler_Type]";
    v42 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
    v43 = 42;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (v9[31] < 0)
  {
    std::string::__init_copy_ctor_external(a1, *((const std::string::value_type **)v9 + 1), *((_QWORD *)v9 + 2));
    v5 = __p;
  }
  else
  {
    v10 = *(_OWORD *)(v9 + 8);
    a1->__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 3);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v10;
  }
  v11 = v5[7];
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v12 = (v11 & 0xFFFFFFFFFFFFFFFELL) - 56;
  else
    v12 = 0;
  boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v34, v12);
  operator delete(__p);
}

void sub_1B5C39508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container(v34);
  _Unwind_Resume(a1);
}

void AMCP::enum_to_string<AMCP::Resampler_Quality>(std::string *a1, int *a2)
{
  AMCP::Log::Scope_Registry *v4;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *exception;
  __int128 v17;
  uint64_t v18;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  std::string v22;
  std::logic_error v23;
  std::logic_error v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  void *__p;
  _QWORD v34[4];
  uint8_t buf[8];
  __int16 v36;
  char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  _BYTE v41[14];
  const char *v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  AMCP::get_enum_string_bimap<AMCP::Resampler_Quality>();
  v31 = v34;
  v4 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v32);
  v34[2] = v34;
  v34[3] = v34;
  v5 = __p;
  v6 = *((_QWORD *)__p + 4) & 0xFFFFFFFFFFFFFFFELL;
  if (!v6)
    goto LABEL_19;
  v7 = *a2;
  v8 = (char *)__p;
  do
  {
    while (*(_DWORD *)(v6 - 32) < v7)
    {
      v6 = *(_QWORD *)(v6 + 16);
      if (!v6)
        goto LABEL_7;
    }
    v8 = (char *)(v6 - 32);
    v6 = *(_QWORD *)(v6 + 8);
  }
  while (v6);
LABEL_7:
  if (v8 == __p || (v7 >= *(_DWORD *)v8 ? (v9 = v8) : (v9 = (char *)__p), __p == v9))
  {
LABEL_19:
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v13 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v15;
      v36 = 2080;
      v37 = "Graph_Description_Internal.h";
      v38 = 1024;
      v39 = 42;
      v40 = 2080;
      *(_QWORD *)v41 = "not (found != map.left.end())";
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v22);
    std::logic_error::logic_error(&v23, &v22);
    v23.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v25 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    *(_QWORD *)&v41[6] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Resampler_Quality]";
    v42 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
    v43 = 42;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (v9[31] < 0)
  {
    std::string::__init_copy_ctor_external(a1, *((const std::string::value_type **)v9 + 1), *((_QWORD *)v9 + 2));
    v5 = __p;
  }
  else
  {
    v10 = *(_OWORD *)(v9 + 8);
    a1->__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 3);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v10;
  }
  v11 = v5[7];
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v12 = (v11 & 0xFFFFFFFFFFFFFFFELL) - 56;
  else
    v12 = 0;
  boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v34, v12);
  operator delete(__p);
}

void sub_1B5C398E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container(v34);
  _Unwind_Resume(a1);
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  std::string *v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  char v123;
  uint64_t v124;

  v2 = operator new(0x50uLL);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = qword_1EF130F30;
  v4 = (_QWORD *)qword_1EF130F20;
  v117 = qword_1EF130F30;
  v118 = qword_1EF130F30;
  if (qword_1EF130F30)
  {
    if ((unint64_t)qword_1EF130F30 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v5 = operator new(16 * qword_1EF130F30);
  }
  else
  {
    v5 = 0;
  }
  v119 = v5;
  v120 = 0;
  v121 = v4;
  v122 = v2;
  v123 = 0;
  v6 = v4[8];
  if (v6)
    v7 = v6 - 56;
  else
    v7 = 0;
  if ((_QWORD *)v7 == v4)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = (uint64_t)v119;
      v119[2 * v8] = v7;
      v10 = operator new(0x50uLL);
      *(_QWORD *)(v9 + 16 * v8 + 8) = v10;
      *v10 = *(_DWORD *)v7;
      v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        v8 = v120;
        v3 = v117;
      }
      else
      {
        v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      v120 = ++v8;
      if (v8 == v3)
      {
        v13 = 126 - 2 * __clz(v3);
        if (v3)
          v14 = v13;
        else
          v14 = 0;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((uint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124)
        v7 = v124 - 56;
      else
        v7 = 0;
    }
    while ((_QWORD *)v7 != v4);
    v4 = (_QWORD *)qword_1EF130F20;
    v2 = *(_QWORD **)(a1 + 8);
  }
  v15 = v4[7];
  v16 = v2 + 7;
  if (v15 > 1)
  {
    *v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    v17 = v4[7];
    v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v20 = v15 & 1;
    if (v19)
      v21 = 0;
    else
      v21 = v18;
    v22 = v121;
    v23 = &v122;
    if (v121 != (_QWORD *)v21)
    {
      v24 = (uint64_t)v119;
      if (v8)
      {
        v25 = v8;
        do
        {
          v26 = v25 >> 1;
          v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          v29 = *v27;
          v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21)
            v24 = (uint64_t)v28;
          else
            v25 = v26;
        }
        while (v25);
      }
      v23 = (_QWORD *)(v24 + 8);
    }
    *v16 = v20 | (*v23 + 56);
    v30 = v4[8];
    v31 = (_QWORD *)(v30 - 56);
    if (!v30)
      v31 = 0;
    v32 = &v122;
    if (v22 != v31)
    {
      v33 = (uint64_t)v119;
      if (v8)
      {
        v34 = v8;
        do
        {
          v35 = v34 >> 1;
          v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          v38 = *v36;
          v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31)
            v33 = (uint64_t)v37;
          else
            v34 = v35;
        }
        while (v34);
      }
      v32 = (_QWORD *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    v39 = v4[9];
    v40 = (_QWORD *)(v39 - 56);
    if (!v39)
      v40 = 0;
    v41 = (uint64_t)v119;
    v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        v43 = (uint64_t)v119;
        v44 = v8;
        do
        {
          v45 = v44 >> 1;
          v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          v48 = *v46;
          v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40)
            v43 = (uint64_t)v47;
          else
            v44 = v45;
        }
        while (v44);
      }
      else
      {
        v43 = (uint64_t)v119;
      }
      v42 = (_QWORD *)(v43 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      v49 = (_QWORD *)v41;
      do
      {
        v51 = *v49;
        v50 = (_QWORD *)v49[1];
        v52 = (_QWORD *)(*v49 + 56);
        v53 = v50 + 7;
        v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          v56 = (uint64_t *)&v122;
          if (v22 != (_QWORD *)(v55 - 56))
          {
            v57 = v41;
            v58 = v8;
            do
            {
              v59 = v58 >> 1;
              v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              v62 = *v60;
              v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56)
                v57 = (uint64_t)v61;
              else
                v58 = v59;
            }
            while (v58);
            v56 = (uint64_t *)(v57 + 8);
          }
          v63 = *v56;
          *v53 = v54 | (*v56 + 56);
          if (*(_QWORD **)(v55 + 8) == v52)
          {
            *(_QWORD *)(v63 + 64) = v53;
          }
          else if (*(_QWORD **)(v55 + 16) == v52)
          {
            *(_QWORD *)(v63 + 72) = v53;
          }
        }
        else
        {
          *v53 = v54;
        }
        if (!*(_QWORD *)(v51 + 64))
          v50[8] = 0;
        if (!*(_QWORD *)(v51 + 72))
          v50[9] = 0;
        v49 += 2;
      }
      while (v49 != (_QWORD *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *(_QWORD *)(a1 + 8) + 56;
  }
  v64 = v4[4];
  v65 = *(_QWORD *)(a1 + 8);
  v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    v67 = v4[4];
    v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v69 = v64 & 1;
    if (v19)
      v70 = 0;
    else
      v70 = v68;
    v71 = v121;
    v72 = &v122;
    if (v121 != (_QWORD *)v70)
    {
      v73 = (uint64_t)v119;
      v74 = v120;
      if (v120)
      {
        do
        {
          v75 = v74 >> 1;
          v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          v78 = *v76;
          v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70)
            v73 = (uint64_t)v77;
          else
            v74 = v75;
        }
        while (v74);
      }
      v72 = (_QWORD *)(v73 + 8);
    }
    *v66 = v69 | (*v72 + 32);
    v79 = v4[5];
    v80 = (_QWORD *)(v79 - 32);
    if (!v79)
      v80 = 0;
    v81 = &v122;
    if (v71 != v80)
    {
      v82 = (uint64_t)v119;
      v83 = v120;
      if (v120)
      {
        do
        {
          v84 = v83 >> 1;
          v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          v87 = *v85;
          v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80)
            v82 = (uint64_t)v86;
          else
            v83 = v84;
        }
        while (v83);
      }
      v81 = (_QWORD *)(v82 + 8);
    }
    *(_QWORD *)(v65 + 40) = *v81 + 32;
    v88 = v4[6];
    if (v88)
      v89 = (_QWORD *)(v88 - 32);
    else
      v89 = 0;
    if (v121 == v89)
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      v98 = &v122;
    }
    else
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      if (v120)
      {
        v92 = (uint64_t)v119;
        v93 = v120;
        do
        {
          v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          v97 = *v95;
          v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89)
            v92 = (uint64_t)v96;
          else
            v93 = v94;
        }
        while (v93);
      }
      else
      {
        v92 = (uint64_t)v119;
      }
      v98 = (_QWORD *)(v92 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      v99 = (_QWORD *)(v90 + 16 * v91);
      v100 = (_QWORD *)v90;
      do
      {
        v102 = *v100;
        v101 = (_QWORD *)v100[1];
        v103 = (_QWORD *)(*v100 + 32);
        v104 = v101 + 4;
        v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          v107 = (uint64_t *)&v122;
          if (v121 != (_QWORD *)(v106 - 32))
          {
            v108 = v120;
            if (v120)
            {
              v109 = v90;
              do
              {
                v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                v113 = *v111;
                v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32)
                  v109 = (uint64_t)v112;
                else
                  v108 = v110;
              }
              while (v108);
            }
            else
            {
              v109 = v90;
            }
            v107 = (uint64_t *)(v109 + 8);
          }
          v114 = *v107;
          *v104 = v105 | (*v107 + 32);
          if (*(_QWORD **)(v106 + 8) == v103)
          {
            *(_QWORD *)(v114 + 40) = v104;
          }
          else if (*(_QWORD **)(v106 + 16) == v103)
          {
            *(_QWORD *)(v114 + 48) = v104;
          }
        }
        else
        {
          *v104 = v105;
        }
        if (!*(_QWORD *)(v102 + 40))
          v101[5] = 0;
        if (!*(_QWORD *)(v102 + 48))
          v101[6] = 0;
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(_QWORD *)(v65 + 32) = 0;
    *(_QWORD *)(v65 + 40) = v66;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *(_QWORD *)(a1 + 8) + 32;
  }
  v123 = 1;
  *(_QWORD *)(a1 + 24) = qword_1EF130F30;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1B5C3A05C()
{
  __break(1u);
}

void sub_1B5C3A084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&a9);
  JUMPOUT(0x1B5C3A0A0);
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(uint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  __int128 *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  __n128 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *n128_u64;
  BOOL v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  int64_t v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  __n128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __n128 *v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  __n128 *v77;
  unint64_t v78;
  __n128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (unint64_t *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  std::string *v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  char v123;
  uint64_t v124;

  v2 = operator new(0x50uLL);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = qword_1EF130EE8;
  v4 = (_QWORD *)qword_1EF130ED8;
  v117 = qword_1EF130EE8;
  v118 = qword_1EF130EE8;
  if (qword_1EF130EE8)
  {
    if ((unint64_t)qword_1EF130EE8 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v5 = operator new(16 * qword_1EF130EE8);
  }
  else
  {
    v5 = 0;
  }
  v119 = v5;
  v120 = 0;
  v121 = v4;
  v122 = v2;
  v123 = 0;
  v6 = v4[8];
  if (v6)
    v7 = v6 - 56;
  else
    v7 = 0;
  if ((_QWORD *)v7 == v4)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = (uint64_t)v119;
      v119[2 * v8] = v7;
      v10 = operator new(0x50uLL);
      *(_QWORD *)(v9 + 16 * v8 + 8) = v10;
      *v10 = *(_DWORD *)v7;
      v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        v8 = v120;
        v3 = v117;
      }
      else
      {
        v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      v120 = ++v8;
      if (v8 == v3)
      {
        v13 = 126 - 2 * __clz(v3);
        if (v3)
          v14 = v13;
        else
          v14 = 0;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((uint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124)
        v7 = v124 - 56;
      else
        v7 = 0;
    }
    while ((_QWORD *)v7 != v4);
    v4 = (_QWORD *)qword_1EF130ED8;
    v2 = *(_QWORD **)(a1 + 8);
  }
  v15 = v4[7];
  v16 = v2 + 7;
  if (v15 > 1)
  {
    *v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    v17 = v4[7];
    v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v20 = v15 & 1;
    if (v19)
      v21 = 0;
    else
      v21 = v18;
    v22 = v121;
    v23 = &v122;
    if (v121 != (_QWORD *)v21)
    {
      v24 = (uint64_t)v119;
      if (v8)
      {
        v25 = v8;
        do
        {
          v26 = v25 >> 1;
          v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          v29 = *v27;
          v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21)
            v24 = (uint64_t)v28;
          else
            v25 = v26;
        }
        while (v25);
      }
      v23 = (_QWORD *)(v24 + 8);
    }
    *v16 = v20 | (*v23 + 56);
    v30 = v4[8];
    v31 = (_QWORD *)(v30 - 56);
    if (!v30)
      v31 = 0;
    v32 = &v122;
    if (v22 != v31)
    {
      v33 = (uint64_t)v119;
      if (v8)
      {
        v34 = v8;
        do
        {
          v35 = v34 >> 1;
          v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          v38 = *v36;
          v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31)
            v33 = (uint64_t)v37;
          else
            v34 = v35;
        }
        while (v34);
      }
      v32 = (_QWORD *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    v39 = v4[9];
    v40 = (_QWORD *)(v39 - 56);
    if (!v39)
      v40 = 0;
    v41 = (uint64_t)v119;
    v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        v43 = (uint64_t)v119;
        v44 = v8;
        do
        {
          v45 = v44 >> 1;
          v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          v48 = *v46;
          v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40)
            v43 = (uint64_t)v47;
          else
            v44 = v45;
        }
        while (v44);
      }
      else
      {
        v43 = (uint64_t)v119;
      }
      v42 = (_QWORD *)(v43 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      v49 = (_QWORD *)v41;
      do
      {
        v51 = *v49;
        v50 = (_QWORD *)v49[1];
        v52 = (_QWORD *)(*v49 + 56);
        v53 = v50 + 7;
        v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          v56 = (uint64_t *)&v122;
          if (v22 != (_QWORD *)(v55 - 56))
          {
            v57 = v41;
            v58 = v8;
            do
            {
              v59 = v58 >> 1;
              v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              v62 = *v60;
              v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56)
                v57 = (uint64_t)v61;
              else
                v58 = v59;
            }
            while (v58);
            v56 = (uint64_t *)(v57 + 8);
          }
          v63 = *v56;
          *v53 = v54 | (*v56 + 56);
          if (*(_QWORD **)(v55 + 8) == v52)
          {
            *(_QWORD *)(v63 + 64) = v53;
          }
          else if (*(_QWORD **)(v55 + 16) == v52)
          {
            *(_QWORD *)(v63 + 72) = v53;
          }
        }
        else
        {
          *v53 = v54;
        }
        if (!*(_QWORD *)(v51 + 64))
          v50[8] = 0;
        if (!*(_QWORD *)(v51 + 72))
          v50[9] = 0;
        v49 += 2;
      }
      while (v49 != (_QWORD *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *(_QWORD *)(a1 + 8) + 56;
  }
  v64 = v4[4];
  v65 = *(_QWORD *)(a1 + 8);
  v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    v67 = v4[4];
    v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v69 = v64 & 1;
    if (v19)
      v70 = 0;
    else
      v70 = v68;
    v71 = v121;
    v72 = &v122;
    if (v121 != (_QWORD *)v70)
    {
      v73 = (uint64_t)v119;
      v74 = v120;
      if (v120)
      {
        do
        {
          v75 = v74 >> 1;
          v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          v78 = *v76;
          v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70)
            v73 = (uint64_t)v77;
          else
            v74 = v75;
        }
        while (v74);
      }
      v72 = (_QWORD *)(v73 + 8);
    }
    *v66 = v69 | (*v72 + 32);
    v79 = v4[5];
    v80 = (_QWORD *)(v79 - 32);
    if (!v79)
      v80 = 0;
    v81 = &v122;
    if (v71 != v80)
    {
      v82 = (uint64_t)v119;
      v83 = v120;
      if (v120)
      {
        do
        {
          v84 = v83 >> 1;
          v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          v87 = *v85;
          v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80)
            v82 = (uint64_t)v86;
          else
            v83 = v84;
        }
        while (v83);
      }
      v81 = (_QWORD *)(v82 + 8);
    }
    *(_QWORD *)(v65 + 40) = *v81 + 32;
    v88 = v4[6];
    if (v88)
      v89 = (_QWORD *)(v88 - 32);
    else
      v89 = 0;
    if (v121 == v89)
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      v98 = &v122;
    }
    else
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      if (v120)
      {
        v92 = (uint64_t)v119;
        v93 = v120;
        do
        {
          v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          v97 = *v95;
          v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89)
            v92 = (uint64_t)v96;
          else
            v93 = v94;
        }
        while (v93);
      }
      else
      {
        v92 = (uint64_t)v119;
      }
      v98 = (_QWORD *)(v92 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      v99 = (_QWORD *)(v90 + 16 * v91);
      v100 = (_QWORD *)v90;
      do
      {
        v102 = *v100;
        v101 = (_QWORD *)v100[1];
        v103 = (_QWORD *)(*v100 + 32);
        v104 = v101 + 4;
        v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          v107 = (uint64_t *)&v122;
          if (v121 != (_QWORD *)(v106 - 32))
          {
            v108 = v120;
            if (v120)
            {
              v109 = v90;
              do
              {
                v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                v113 = *v111;
                v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32)
                  v109 = (uint64_t)v112;
                else
                  v108 = v110;
              }
              while (v108);
            }
            else
            {
              v109 = v90;
            }
            v107 = (uint64_t *)(v109 + 8);
          }
          v114 = *v107;
          *v104 = v105 | (*v107 + 32);
          if (*(_QWORD **)(v106 + 8) == v103)
          {
            *(_QWORD *)(v114 + 40) = v104;
          }
          else if (*(_QWORD **)(v106 + 16) == v103)
          {
            *(_QWORD *)(v114 + 48) = v104;
          }
        }
        else
        {
          *v104 = v105;
        }
        if (!*(_QWORD *)(v102 + 40))
          v101[5] = 0;
        if (!*(_QWORD *)(v102 + 48))
          v101[6] = 0;
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(_QWORD *)(v65 + 32) = 0;
    *(_QWORD *)(v65 + 40) = v66;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *(_QWORD *)(a1 + 8) + 32;
  }
  v123 = 1;
  *(_QWORD *)(a1 + 24) = qword_1EF130EE8;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1B5C3AF2C()
{
  __break(1u);
}

void sub_1B5C3AF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&a9);
  JUMPOUT(0x1B5C3AF70);
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(uint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  __int128 *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  __n128 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *n128_u64;
  BOOL v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  int64_t v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  __n128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __n128 *v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  __n128 *v77;
  unint64_t v78;
  __n128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (unint64_t *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Latency_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  std::string *v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  char v123;
  uint64_t v124;

  v2 = operator new(0x50uLL);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = qword_1EF130CF0;
  v4 = (_QWORD *)qword_1EF130CE0;
  v117 = qword_1EF130CF0;
  v118 = qword_1EF130CF0;
  if (qword_1EF130CF0)
  {
    if ((unint64_t)qword_1EF130CF0 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v5 = operator new(16 * qword_1EF130CF0);
  }
  else
  {
    v5 = 0;
  }
  v119 = v5;
  v120 = 0;
  v121 = v4;
  v122 = v2;
  v123 = 0;
  v6 = v4[8];
  if (v6)
    v7 = v6 - 56;
  else
    v7 = 0;
  if ((_QWORD *)v7 == v4)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = (uint64_t)v119;
      v119[2 * v8] = v7;
      v10 = operator new(0x50uLL);
      *(_QWORD *)(v9 + 16 * v8 + 8) = v10;
      *v10 = *(_DWORD *)v7;
      v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        v8 = v120;
        v3 = v117;
      }
      else
      {
        v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      v120 = ++v8;
      if (v8 == v3)
      {
        v13 = 126 - 2 * __clz(v3);
        if (v3)
          v14 = v13;
        else
          v14 = 0;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((uint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124)
        v7 = v124 - 56;
      else
        v7 = 0;
    }
    while ((_QWORD *)v7 != v4);
    v4 = (_QWORD *)qword_1EF130CE0;
    v2 = *(_QWORD **)(a1 + 8);
  }
  v15 = v4[7];
  v16 = v2 + 7;
  if (v15 > 1)
  {
    *v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    v17 = v4[7];
    v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v20 = v15 & 1;
    if (v19)
      v21 = 0;
    else
      v21 = v18;
    v22 = v121;
    v23 = &v122;
    if (v121 != (_QWORD *)v21)
    {
      v24 = (uint64_t)v119;
      if (v8)
      {
        v25 = v8;
        do
        {
          v26 = v25 >> 1;
          v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          v29 = *v27;
          v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21)
            v24 = (uint64_t)v28;
          else
            v25 = v26;
        }
        while (v25);
      }
      v23 = (_QWORD *)(v24 + 8);
    }
    *v16 = v20 | (*v23 + 56);
    v30 = v4[8];
    v31 = (_QWORD *)(v30 - 56);
    if (!v30)
      v31 = 0;
    v32 = &v122;
    if (v22 != v31)
    {
      v33 = (uint64_t)v119;
      if (v8)
      {
        v34 = v8;
        do
        {
          v35 = v34 >> 1;
          v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          v38 = *v36;
          v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31)
            v33 = (uint64_t)v37;
          else
            v34 = v35;
        }
        while (v34);
      }
      v32 = (_QWORD *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    v39 = v4[9];
    v40 = (_QWORD *)(v39 - 56);
    if (!v39)
      v40 = 0;
    v41 = (uint64_t)v119;
    v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        v43 = (uint64_t)v119;
        v44 = v8;
        do
        {
          v45 = v44 >> 1;
          v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          v48 = *v46;
          v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40)
            v43 = (uint64_t)v47;
          else
            v44 = v45;
        }
        while (v44);
      }
      else
      {
        v43 = (uint64_t)v119;
      }
      v42 = (_QWORD *)(v43 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      v49 = (_QWORD *)v41;
      do
      {
        v51 = *v49;
        v50 = (_QWORD *)v49[1];
        v52 = (_QWORD *)(*v49 + 56);
        v53 = v50 + 7;
        v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          v56 = (uint64_t *)&v122;
          if (v22 != (_QWORD *)(v55 - 56))
          {
            v57 = v41;
            v58 = v8;
            do
            {
              v59 = v58 >> 1;
              v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              v62 = *v60;
              v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56)
                v57 = (uint64_t)v61;
              else
                v58 = v59;
            }
            while (v58);
            v56 = (uint64_t *)(v57 + 8);
          }
          v63 = *v56;
          *v53 = v54 | (*v56 + 56);
          if (*(_QWORD **)(v55 + 8) == v52)
          {
            *(_QWORD *)(v63 + 64) = v53;
          }
          else if (*(_QWORD **)(v55 + 16) == v52)
          {
            *(_QWORD *)(v63 + 72) = v53;
          }
        }
        else
        {
          *v53 = v54;
        }
        if (!*(_QWORD *)(v51 + 64))
          v50[8] = 0;
        if (!*(_QWORD *)(v51 + 72))
          v50[9] = 0;
        v49 += 2;
      }
      while (v49 != (_QWORD *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *(_QWORD *)(a1 + 8) + 56;
  }
  v64 = v4[4];
  v65 = *(_QWORD *)(a1 + 8);
  v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    v67 = v4[4];
    v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v69 = v64 & 1;
    if (v19)
      v70 = 0;
    else
      v70 = v68;
    v71 = v121;
    v72 = &v122;
    if (v121 != (_QWORD *)v70)
    {
      v73 = (uint64_t)v119;
      v74 = v120;
      if (v120)
      {
        do
        {
          v75 = v74 >> 1;
          v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          v78 = *v76;
          v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70)
            v73 = (uint64_t)v77;
          else
            v74 = v75;
        }
        while (v74);
      }
      v72 = (_QWORD *)(v73 + 8);
    }
    *v66 = v69 | (*v72 + 32);
    v79 = v4[5];
    v80 = (_QWORD *)(v79 - 32);
    if (!v79)
      v80 = 0;
    v81 = &v122;
    if (v71 != v80)
    {
      v82 = (uint64_t)v119;
      v83 = v120;
      if (v120)
      {
        do
        {
          v84 = v83 >> 1;
          v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          v87 = *v85;
          v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80)
            v82 = (uint64_t)v86;
          else
            v83 = v84;
        }
        while (v83);
      }
      v81 = (_QWORD *)(v82 + 8);
    }
    *(_QWORD *)(v65 + 40) = *v81 + 32;
    v88 = v4[6];
    if (v88)
      v89 = (_QWORD *)(v88 - 32);
    else
      v89 = 0;
    if (v121 == v89)
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      v98 = &v122;
    }
    else
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      if (v120)
      {
        v92 = (uint64_t)v119;
        v93 = v120;
        do
        {
          v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          v97 = *v95;
          v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89)
            v92 = (uint64_t)v96;
          else
            v93 = v94;
        }
        while (v93);
      }
      else
      {
        v92 = (uint64_t)v119;
      }
      v98 = (_QWORD *)(v92 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      v99 = (_QWORD *)(v90 + 16 * v91);
      v100 = (_QWORD *)v90;
      do
      {
        v102 = *v100;
        v101 = (_QWORD *)v100[1];
        v103 = (_QWORD *)(*v100 + 32);
        v104 = v101 + 4;
        v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          v107 = (uint64_t *)&v122;
          if (v121 != (_QWORD *)(v106 - 32))
          {
            v108 = v120;
            if (v120)
            {
              v109 = v90;
              do
              {
                v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                v113 = *v111;
                v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32)
                  v109 = (uint64_t)v112;
                else
                  v108 = v110;
              }
              while (v108);
            }
            else
            {
              v109 = v90;
            }
            v107 = (uint64_t *)(v109 + 8);
          }
          v114 = *v107;
          *v104 = v105 | (*v107 + 32);
          if (*(_QWORD **)(v106 + 8) == v103)
          {
            *(_QWORD *)(v114 + 40) = v104;
          }
          else if (*(_QWORD **)(v106 + 16) == v103)
          {
            *(_QWORD *)(v114 + 48) = v104;
          }
        }
        else
        {
          *v104 = v105;
        }
        if (!*(_QWORD *)(v102 + 40))
          v101[5] = 0;
        if (!*(_QWORD *)(v102 + 48))
          v101[6] = 0;
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(_QWORD *)(v65 + 32) = 0;
    *(_QWORD *)(v65 + 40) = v66;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *(_QWORD *)(a1 + 8) + 32;
  }
  v123 = 1;
  *(_QWORD *)(a1 + 24) = qword_1EF130CF0;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1B5C3BDFC()
{
  __break(1u);
}

void sub_1B5C3BE24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&a9);
  JUMPOUT(0x1B5C3BE40);
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(uint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  __int128 *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  __n128 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *n128_u64;
  BOOL v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  int64_t v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  __n128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __n128 *v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  __n128 *v77;
  unint64_t v78;
  __n128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (unint64_t *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Drift_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  std::string *v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  char v123;
  uint64_t v124;

  v2 = operator new(0x50uLL);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = qword_1EF130CA8;
  v4 = (_QWORD *)qword_1EF130C98;
  v117 = qword_1EF130CA8;
  v118 = qword_1EF130CA8;
  if (qword_1EF130CA8)
  {
    if ((unint64_t)qword_1EF130CA8 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v5 = operator new(16 * qword_1EF130CA8);
  }
  else
  {
    v5 = 0;
  }
  v119 = v5;
  v120 = 0;
  v121 = v4;
  v122 = v2;
  v123 = 0;
  v6 = v4[8];
  if (v6)
    v7 = v6 - 56;
  else
    v7 = 0;
  if ((_QWORD *)v7 == v4)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = (uint64_t)v119;
      v119[2 * v8] = v7;
      v10 = operator new(0x50uLL);
      *(_QWORD *)(v9 + 16 * v8 + 8) = v10;
      *v10 = *(_DWORD *)v7;
      v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        v8 = v120;
        v3 = v117;
      }
      else
      {
        v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      v120 = ++v8;
      if (v8 == v3)
      {
        v13 = 126 - 2 * __clz(v3);
        if (v3)
          v14 = v13;
        else
          v14 = 0;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((uint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124)
        v7 = v124 - 56;
      else
        v7 = 0;
    }
    while ((_QWORD *)v7 != v4);
    v4 = (_QWORD *)qword_1EF130C98;
    v2 = *(_QWORD **)(a1 + 8);
  }
  v15 = v4[7];
  v16 = v2 + 7;
  if (v15 > 1)
  {
    *v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    v17 = v4[7];
    v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v20 = v15 & 1;
    if (v19)
      v21 = 0;
    else
      v21 = v18;
    v22 = v121;
    v23 = &v122;
    if (v121 != (_QWORD *)v21)
    {
      v24 = (uint64_t)v119;
      if (v8)
      {
        v25 = v8;
        do
        {
          v26 = v25 >> 1;
          v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          v29 = *v27;
          v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21)
            v24 = (uint64_t)v28;
          else
            v25 = v26;
        }
        while (v25);
      }
      v23 = (_QWORD *)(v24 + 8);
    }
    *v16 = v20 | (*v23 + 56);
    v30 = v4[8];
    v31 = (_QWORD *)(v30 - 56);
    if (!v30)
      v31 = 0;
    v32 = &v122;
    if (v22 != v31)
    {
      v33 = (uint64_t)v119;
      if (v8)
      {
        v34 = v8;
        do
        {
          v35 = v34 >> 1;
          v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          v38 = *v36;
          v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31)
            v33 = (uint64_t)v37;
          else
            v34 = v35;
        }
        while (v34);
      }
      v32 = (_QWORD *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    v39 = v4[9];
    v40 = (_QWORD *)(v39 - 56);
    if (!v39)
      v40 = 0;
    v41 = (uint64_t)v119;
    v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        v43 = (uint64_t)v119;
        v44 = v8;
        do
        {
          v45 = v44 >> 1;
          v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          v48 = *v46;
          v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40)
            v43 = (uint64_t)v47;
          else
            v44 = v45;
        }
        while (v44);
      }
      else
      {
        v43 = (uint64_t)v119;
      }
      v42 = (_QWORD *)(v43 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      v49 = (_QWORD *)v41;
      do
      {
        v51 = *v49;
        v50 = (_QWORD *)v49[1];
        v52 = (_QWORD *)(*v49 + 56);
        v53 = v50 + 7;
        v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          v56 = (uint64_t *)&v122;
          if (v22 != (_QWORD *)(v55 - 56))
          {
            v57 = v41;
            v58 = v8;
            do
            {
              v59 = v58 >> 1;
              v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              v62 = *v60;
              v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56)
                v57 = (uint64_t)v61;
              else
                v58 = v59;
            }
            while (v58);
            v56 = (uint64_t *)(v57 + 8);
          }
          v63 = *v56;
          *v53 = v54 | (*v56 + 56);
          if (*(_QWORD **)(v55 + 8) == v52)
          {
            *(_QWORD *)(v63 + 64) = v53;
          }
          else if (*(_QWORD **)(v55 + 16) == v52)
          {
            *(_QWORD *)(v63 + 72) = v53;
          }
        }
        else
        {
          *v53 = v54;
        }
        if (!*(_QWORD *)(v51 + 64))
          v50[8] = 0;
        if (!*(_QWORD *)(v51 + 72))
          v50[9] = 0;
        v49 += 2;
      }
      while (v49 != (_QWORD *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *(_QWORD *)(a1 + 8) + 56;
  }
  v64 = v4[4];
  v65 = *(_QWORD *)(a1 + 8);
  v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    v67 = v4[4];
    v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v69 = v64 & 1;
    if (v19)
      v70 = 0;
    else
      v70 = v68;
    v71 = v121;
    v72 = &v122;
    if (v121 != (_QWORD *)v70)
    {
      v73 = (uint64_t)v119;
      v74 = v120;
      if (v120)
      {
        do
        {
          v75 = v74 >> 1;
          v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          v78 = *v76;
          v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70)
            v73 = (uint64_t)v77;
          else
            v74 = v75;
        }
        while (v74);
      }
      v72 = (_QWORD *)(v73 + 8);
    }
    *v66 = v69 | (*v72 + 32);
    v79 = v4[5];
    v80 = (_QWORD *)(v79 - 32);
    if (!v79)
      v80 = 0;
    v81 = &v122;
    if (v71 != v80)
    {
      v82 = (uint64_t)v119;
      v83 = v120;
      if (v120)
      {
        do
        {
          v84 = v83 >> 1;
          v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          v87 = *v85;
          v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80)
            v82 = (uint64_t)v86;
          else
            v83 = v84;
        }
        while (v83);
      }
      v81 = (_QWORD *)(v82 + 8);
    }
    *(_QWORD *)(v65 + 40) = *v81 + 32;
    v88 = v4[6];
    if (v88)
      v89 = (_QWORD *)(v88 - 32);
    else
      v89 = 0;
    if (v121 == v89)
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      v98 = &v122;
    }
    else
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      if (v120)
      {
        v92 = (uint64_t)v119;
        v93 = v120;
        do
        {
          v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          v97 = *v95;
          v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89)
            v92 = (uint64_t)v96;
          else
            v93 = v94;
        }
        while (v93);
      }
      else
      {
        v92 = (uint64_t)v119;
      }
      v98 = (_QWORD *)(v92 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      v99 = (_QWORD *)(v90 + 16 * v91);
      v100 = (_QWORD *)v90;
      do
      {
        v102 = *v100;
        v101 = (_QWORD *)v100[1];
        v103 = (_QWORD *)(*v100 + 32);
        v104 = v101 + 4;
        v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          v107 = (uint64_t *)&v122;
          if (v121 != (_QWORD *)(v106 - 32))
          {
            v108 = v120;
            if (v120)
            {
              v109 = v90;
              do
              {
                v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                v113 = *v111;
                v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32)
                  v109 = (uint64_t)v112;
                else
                  v108 = v110;
              }
              while (v108);
            }
            else
            {
              v109 = v90;
            }
            v107 = (uint64_t *)(v109 + 8);
          }
          v114 = *v107;
          *v104 = v105 | (*v107 + 32);
          if (*(_QWORD **)(v106 + 8) == v103)
          {
            *(_QWORD *)(v114 + 40) = v104;
          }
          else if (*(_QWORD **)(v106 + 16) == v103)
          {
            *(_QWORD *)(v114 + 48) = v104;
          }
        }
        else
        {
          *v104 = v105;
        }
        if (!*(_QWORD *)(v102 + 40))
          v101[5] = 0;
        if (!*(_QWORD *)(v102 + 48))
          v101[6] = 0;
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(_QWORD *)(v65 + 32) = 0;
    *(_QWORD *)(v65 + 40) = v66;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *(_QWORD *)(a1 + 8) + 32;
  }
  v123 = 1;
  *(_QWORD *)(a1 + 24) = qword_1EF130CA8;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1B5C3CCCC()
{
  __break(1u);
}

void sub_1B5C3CCF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&a9);
  JUMPOUT(0x1B5C3CD10);
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(uint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  __int128 *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  __n128 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *n128_u64;
  BOOL v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  int64_t v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  __n128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __n128 *v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  __n128 *v77;
  unint64_t v78;
  __n128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (unint64_t *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Format_Conversion_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  std::string *v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  char v123;
  uint64_t v124;

  v2 = operator new(0x50uLL);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = qword_1EF130C60;
  v4 = (_QWORD *)qword_1EF130C50;
  v117 = qword_1EF130C60;
  v118 = qword_1EF130C60;
  if (qword_1EF130C60)
  {
    if ((unint64_t)qword_1EF130C60 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v5 = operator new(16 * qword_1EF130C60);
  }
  else
  {
    v5 = 0;
  }
  v119 = v5;
  v120 = 0;
  v121 = v4;
  v122 = v2;
  v123 = 0;
  v6 = v4[8];
  if (v6)
    v7 = v6 - 56;
  else
    v7 = 0;
  if ((_QWORD *)v7 == v4)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = (uint64_t)v119;
      v119[2 * v8] = v7;
      v10 = operator new(0x50uLL);
      *(_QWORD *)(v9 + 16 * v8 + 8) = v10;
      *v10 = *(_DWORD *)v7;
      v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        v8 = v120;
        v3 = v117;
      }
      else
      {
        v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      v120 = ++v8;
      if (v8 == v3)
      {
        v13 = 126 - 2 * __clz(v3);
        if (v3)
          v14 = v13;
        else
          v14 = 0;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((uint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124)
        v7 = v124 - 56;
      else
        v7 = 0;
    }
    while ((_QWORD *)v7 != v4);
    v4 = (_QWORD *)qword_1EF130C50;
    v2 = *(_QWORD **)(a1 + 8);
  }
  v15 = v4[7];
  v16 = v2 + 7;
  if (v15 > 1)
  {
    *v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    v17 = v4[7];
    v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v20 = v15 & 1;
    if (v19)
      v21 = 0;
    else
      v21 = v18;
    v22 = v121;
    v23 = &v122;
    if (v121 != (_QWORD *)v21)
    {
      v24 = (uint64_t)v119;
      if (v8)
      {
        v25 = v8;
        do
        {
          v26 = v25 >> 1;
          v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          v29 = *v27;
          v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21)
            v24 = (uint64_t)v28;
          else
            v25 = v26;
        }
        while (v25);
      }
      v23 = (_QWORD *)(v24 + 8);
    }
    *v16 = v20 | (*v23 + 56);
    v30 = v4[8];
    v31 = (_QWORD *)(v30 - 56);
    if (!v30)
      v31 = 0;
    v32 = &v122;
    if (v22 != v31)
    {
      v33 = (uint64_t)v119;
      if (v8)
      {
        v34 = v8;
        do
        {
          v35 = v34 >> 1;
          v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          v38 = *v36;
          v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31)
            v33 = (uint64_t)v37;
          else
            v34 = v35;
        }
        while (v34);
      }
      v32 = (_QWORD *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    v39 = v4[9];
    v40 = (_QWORD *)(v39 - 56);
    if (!v39)
      v40 = 0;
    v41 = (uint64_t)v119;
    v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        v43 = (uint64_t)v119;
        v44 = v8;
        do
        {
          v45 = v44 >> 1;
          v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          v48 = *v46;
          v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40)
            v43 = (uint64_t)v47;
          else
            v44 = v45;
        }
        while (v44);
      }
      else
      {
        v43 = (uint64_t)v119;
      }
      v42 = (_QWORD *)(v43 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      v49 = (_QWORD *)v41;
      do
      {
        v51 = *v49;
        v50 = (_QWORD *)v49[1];
        v52 = (_QWORD *)(*v49 + 56);
        v53 = v50 + 7;
        v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          v56 = (uint64_t *)&v122;
          if (v22 != (_QWORD *)(v55 - 56))
          {
            v57 = v41;
            v58 = v8;
            do
            {
              v59 = v58 >> 1;
              v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              v62 = *v60;
              v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56)
                v57 = (uint64_t)v61;
              else
                v58 = v59;
            }
            while (v58);
            v56 = (uint64_t *)(v57 + 8);
          }
          v63 = *v56;
          *v53 = v54 | (*v56 + 56);
          if (*(_QWORD **)(v55 + 8) == v52)
          {
            *(_QWORD *)(v63 + 64) = v53;
          }
          else if (*(_QWORD **)(v55 + 16) == v52)
          {
            *(_QWORD *)(v63 + 72) = v53;
          }
        }
        else
        {
          *v53 = v54;
        }
        if (!*(_QWORD *)(v51 + 64))
          v50[8] = 0;
        if (!*(_QWORD *)(v51 + 72))
          v50[9] = 0;
        v49 += 2;
      }
      while (v49 != (_QWORD *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *(_QWORD *)(a1 + 8) + 56;
  }
  v64 = v4[4];
  v65 = *(_QWORD *)(a1 + 8);
  v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    v67 = v4[4];
    v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v69 = v64 & 1;
    if (v19)
      v70 = 0;
    else
      v70 = v68;
    v71 = v121;
    v72 = &v122;
    if (v121 != (_QWORD *)v70)
    {
      v73 = (uint64_t)v119;
      v74 = v120;
      if (v120)
      {
        do
        {
          v75 = v74 >> 1;
          v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          v78 = *v76;
          v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70)
            v73 = (uint64_t)v77;
          else
            v74 = v75;
        }
        while (v74);
      }
      v72 = (_QWORD *)(v73 + 8);
    }
    *v66 = v69 | (*v72 + 32);
    v79 = v4[5];
    v80 = (_QWORD *)(v79 - 32);
    if (!v79)
      v80 = 0;
    v81 = &v122;
    if (v71 != v80)
    {
      v82 = (uint64_t)v119;
      v83 = v120;
      if (v120)
      {
        do
        {
          v84 = v83 >> 1;
          v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          v87 = *v85;
          v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80)
            v82 = (uint64_t)v86;
          else
            v83 = v84;
        }
        while (v83);
      }
      v81 = (_QWORD *)(v82 + 8);
    }
    *(_QWORD *)(v65 + 40) = *v81 + 32;
    v88 = v4[6];
    if (v88)
      v89 = (_QWORD *)(v88 - 32);
    else
      v89 = 0;
    if (v121 == v89)
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      v98 = &v122;
    }
    else
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      if (v120)
      {
        v92 = (uint64_t)v119;
        v93 = v120;
        do
        {
          v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          v97 = *v95;
          v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89)
            v92 = (uint64_t)v96;
          else
            v93 = v94;
        }
        while (v93);
      }
      else
      {
        v92 = (uint64_t)v119;
      }
      v98 = (_QWORD *)(v92 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      v99 = (_QWORD *)(v90 + 16 * v91);
      v100 = (_QWORD *)v90;
      do
      {
        v102 = *v100;
        v101 = (_QWORD *)v100[1];
        v103 = (_QWORD *)(*v100 + 32);
        v104 = v101 + 4;
        v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          v107 = (uint64_t *)&v122;
          if (v121 != (_QWORD *)(v106 - 32))
          {
            v108 = v120;
            if (v120)
            {
              v109 = v90;
              do
              {
                v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                v113 = *v111;
                v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32)
                  v109 = (uint64_t)v112;
                else
                  v108 = v110;
              }
              while (v108);
            }
            else
            {
              v109 = v90;
            }
            v107 = (uint64_t *)(v109 + 8);
          }
          v114 = *v107;
          *v104 = v105 | (*v107 + 32);
          if (*(_QWORD **)(v106 + 8) == v103)
          {
            *(_QWORD *)(v114 + 40) = v104;
          }
          else if (*(_QWORD **)(v106 + 16) == v103)
          {
            *(_QWORD *)(v114 + 48) = v104;
          }
        }
        else
        {
          *v104 = v105;
        }
        if (!*(_QWORD *)(v102 + 40))
          v101[5] = 0;
        if (!*(_QWORD *)(v102 + 48))
          v101[6] = 0;
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(_QWORD *)(v65 + 32) = 0;
    *(_QWORD *)(v65 + 40) = v66;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *(_QWORD *)(a1 + 8) + 32;
  }
  v123 = 1;
  *(_QWORD *)(a1 + 24) = qword_1EF130C60;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1B5C3DB9C()
{
  __break(1u);
}

void sub_1B5C3DBC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&a9);
  JUMPOUT(0x1B5C3DBE0);
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(uint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  __int128 *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  __n128 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *n128_u64;
  BOOL v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  int64_t v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  __n128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __n128 *v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  __n128 *v77;
  unint64_t v78;
  __n128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (unint64_t *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Resampler_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  std::string *v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  char v123;
  uint64_t v124;

  v2 = operator new(0x50uLL);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = qword_1EF130C18;
  v4 = (_QWORD *)qword_1EF130C08;
  v117 = qword_1EF130C18;
  v118 = qword_1EF130C18;
  if (qword_1EF130C18)
  {
    if ((unint64_t)qword_1EF130C18 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v5 = operator new(16 * qword_1EF130C18);
  }
  else
  {
    v5 = 0;
  }
  v119 = v5;
  v120 = 0;
  v121 = v4;
  v122 = v2;
  v123 = 0;
  v6 = v4[8];
  if (v6)
    v7 = v6 - 56;
  else
    v7 = 0;
  if ((_QWORD *)v7 == v4)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = (uint64_t)v119;
      v119[2 * v8] = v7;
      v10 = operator new(0x50uLL);
      *(_QWORD *)(v9 + 16 * v8 + 8) = v10;
      *v10 = *(_DWORD *)v7;
      v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        v8 = v120;
        v3 = v117;
      }
      else
      {
        v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      v120 = ++v8;
      if (v8 == v3)
      {
        v13 = 126 - 2 * __clz(v3);
        if (v3)
          v14 = v13;
        else
          v14 = 0;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((uint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124)
        v7 = v124 - 56;
      else
        v7 = 0;
    }
    while ((_QWORD *)v7 != v4);
    v4 = (_QWORD *)qword_1EF130C08;
    v2 = *(_QWORD **)(a1 + 8);
  }
  v15 = v4[7];
  v16 = v2 + 7;
  if (v15 > 1)
  {
    *v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    v17 = v4[7];
    v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v20 = v15 & 1;
    if (v19)
      v21 = 0;
    else
      v21 = v18;
    v22 = v121;
    v23 = &v122;
    if (v121 != (_QWORD *)v21)
    {
      v24 = (uint64_t)v119;
      if (v8)
      {
        v25 = v8;
        do
        {
          v26 = v25 >> 1;
          v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          v29 = *v27;
          v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21)
            v24 = (uint64_t)v28;
          else
            v25 = v26;
        }
        while (v25);
      }
      v23 = (_QWORD *)(v24 + 8);
    }
    *v16 = v20 | (*v23 + 56);
    v30 = v4[8];
    v31 = (_QWORD *)(v30 - 56);
    if (!v30)
      v31 = 0;
    v32 = &v122;
    if (v22 != v31)
    {
      v33 = (uint64_t)v119;
      if (v8)
      {
        v34 = v8;
        do
        {
          v35 = v34 >> 1;
          v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          v38 = *v36;
          v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31)
            v33 = (uint64_t)v37;
          else
            v34 = v35;
        }
        while (v34);
      }
      v32 = (_QWORD *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    v39 = v4[9];
    v40 = (_QWORD *)(v39 - 56);
    if (!v39)
      v40 = 0;
    v41 = (uint64_t)v119;
    v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        v43 = (uint64_t)v119;
        v44 = v8;
        do
        {
          v45 = v44 >> 1;
          v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          v48 = *v46;
          v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40)
            v43 = (uint64_t)v47;
          else
            v44 = v45;
        }
        while (v44);
      }
      else
      {
        v43 = (uint64_t)v119;
      }
      v42 = (_QWORD *)(v43 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      v49 = (_QWORD *)v41;
      do
      {
        v51 = *v49;
        v50 = (_QWORD *)v49[1];
        v52 = (_QWORD *)(*v49 + 56);
        v53 = v50 + 7;
        v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          v56 = (uint64_t *)&v122;
          if (v22 != (_QWORD *)(v55 - 56))
          {
            v57 = v41;
            v58 = v8;
            do
            {
              v59 = v58 >> 1;
              v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              v62 = *v60;
              v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56)
                v57 = (uint64_t)v61;
              else
                v58 = v59;
            }
            while (v58);
            v56 = (uint64_t *)(v57 + 8);
          }
          v63 = *v56;
          *v53 = v54 | (*v56 + 56);
          if (*(_QWORD **)(v55 + 8) == v52)
          {
            *(_QWORD *)(v63 + 64) = v53;
          }
          else if (*(_QWORD **)(v55 + 16) == v52)
          {
            *(_QWORD *)(v63 + 72) = v53;
          }
        }
        else
        {
          *v53 = v54;
        }
        if (!*(_QWORD *)(v51 + 64))
          v50[8] = 0;
        if (!*(_QWORD *)(v51 + 72))
          v50[9] = 0;
        v49 += 2;
      }
      while (v49 != (_QWORD *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *(_QWORD *)(a1 + 8) + 56;
  }
  v64 = v4[4];
  v65 = *(_QWORD *)(a1 + 8);
  v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    v67 = v4[4];
    v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v69 = v64 & 1;
    if (v19)
      v70 = 0;
    else
      v70 = v68;
    v71 = v121;
    v72 = &v122;
    if (v121 != (_QWORD *)v70)
    {
      v73 = (uint64_t)v119;
      v74 = v120;
      if (v120)
      {
        do
        {
          v75 = v74 >> 1;
          v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          v78 = *v76;
          v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70)
            v73 = (uint64_t)v77;
          else
            v74 = v75;
        }
        while (v74);
      }
      v72 = (_QWORD *)(v73 + 8);
    }
    *v66 = v69 | (*v72 + 32);
    v79 = v4[5];
    v80 = (_QWORD *)(v79 - 32);
    if (!v79)
      v80 = 0;
    v81 = &v122;
    if (v71 != v80)
    {
      v82 = (uint64_t)v119;
      v83 = v120;
      if (v120)
      {
        do
        {
          v84 = v83 >> 1;
          v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          v87 = *v85;
          v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80)
            v82 = (uint64_t)v86;
          else
            v83 = v84;
        }
        while (v83);
      }
      v81 = (_QWORD *)(v82 + 8);
    }
    *(_QWORD *)(v65 + 40) = *v81 + 32;
    v88 = v4[6];
    if (v88)
      v89 = (_QWORD *)(v88 - 32);
    else
      v89 = 0;
    if (v121 == v89)
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      v98 = &v122;
    }
    else
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      if (v120)
      {
        v92 = (uint64_t)v119;
        v93 = v120;
        do
        {
          v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          v97 = *v95;
          v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89)
            v92 = (uint64_t)v96;
          else
            v93 = v94;
        }
        while (v93);
      }
      else
      {
        v92 = (uint64_t)v119;
      }
      v98 = (_QWORD *)(v92 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      v99 = (_QWORD *)(v90 + 16 * v91);
      v100 = (_QWORD *)v90;
      do
      {
        v102 = *v100;
        v101 = (_QWORD *)v100[1];
        v103 = (_QWORD *)(*v100 + 32);
        v104 = v101 + 4;
        v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          v107 = (uint64_t *)&v122;
          if (v121 != (_QWORD *)(v106 - 32))
          {
            v108 = v120;
            if (v120)
            {
              v109 = v90;
              do
              {
                v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                v113 = *v111;
                v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32)
                  v109 = (uint64_t)v112;
                else
                  v108 = v110;
              }
              while (v108);
            }
            else
            {
              v109 = v90;
            }
            v107 = (uint64_t *)(v109 + 8);
          }
          v114 = *v107;
          *v104 = v105 | (*v107 + 32);
          if (*(_QWORD **)(v106 + 8) == v103)
          {
            *(_QWORD *)(v114 + 40) = v104;
          }
          else if (*(_QWORD **)(v106 + 16) == v103)
          {
            *(_QWORD *)(v114 + 48) = v104;
          }
        }
        else
        {
          *v104 = v105;
        }
        if (!*(_QWORD *)(v102 + 40))
          v101[5] = 0;
        if (!*(_QWORD *)(v102 + 48))
          v101[6] = 0;
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(_QWORD *)(v65 + 32) = 0;
    *(_QWORD *)(v65 + 40) = v66;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *(_QWORD *)(a1 + 8) + 32;
  }
  v123 = 1;
  *(_QWORD *)(a1 + 24) = qword_1EF130C18;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1B5C3EA6C()
{
  __break(1u);
}

void sub_1B5C3EA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&a9);
  JUMPOUT(0x1B5C3EAB0);
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(uint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  __int128 *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  __n128 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *n128_u64;
  BOOL v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  int64_t v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  __n128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __n128 *v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  __n128 *v77;
  unint64_t v78;
  __n128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (unint64_t *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Connection_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  std::string *v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  char v123;
  uint64_t v124;

  v2 = operator new(0x50uLL);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = qword_1EF130BD0;
  v4 = (_QWORD *)qword_1EF130BC0;
  v117 = qword_1EF130BD0;
  v118 = qword_1EF130BD0;
  if (qword_1EF130BD0)
  {
    if ((unint64_t)qword_1EF130BD0 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v5 = operator new(16 * qword_1EF130BD0);
  }
  else
  {
    v5 = 0;
  }
  v119 = v5;
  v120 = 0;
  v121 = v4;
  v122 = v2;
  v123 = 0;
  v6 = v4[8];
  if (v6)
    v7 = v6 - 56;
  else
    v7 = 0;
  if ((_QWORD *)v7 == v4)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = (uint64_t)v119;
      v119[2 * v8] = v7;
      v10 = operator new(0x50uLL);
      *(_QWORD *)(v9 + 16 * v8 + 8) = v10;
      *v10 = *(_DWORD *)v7;
      v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        v8 = v120;
        v3 = v117;
      }
      else
      {
        v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      v120 = ++v8;
      if (v8 == v3)
      {
        v13 = 126 - 2 * __clz(v3);
        if (v3)
          v14 = v13;
        else
          v14 = 0;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((uint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124)
        v7 = v124 - 56;
      else
        v7 = 0;
    }
    while ((_QWORD *)v7 != v4);
    v4 = (_QWORD *)qword_1EF130BC0;
    v2 = *(_QWORD **)(a1 + 8);
  }
  v15 = v4[7];
  v16 = v2 + 7;
  if (v15 > 1)
  {
    *v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    v17 = v4[7];
    v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v20 = v15 & 1;
    if (v19)
      v21 = 0;
    else
      v21 = v18;
    v22 = v121;
    v23 = &v122;
    if (v121 != (_QWORD *)v21)
    {
      v24 = (uint64_t)v119;
      if (v8)
      {
        v25 = v8;
        do
        {
          v26 = v25 >> 1;
          v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          v29 = *v27;
          v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21)
            v24 = (uint64_t)v28;
          else
            v25 = v26;
        }
        while (v25);
      }
      v23 = (_QWORD *)(v24 + 8);
    }
    *v16 = v20 | (*v23 + 56);
    v30 = v4[8];
    v31 = (_QWORD *)(v30 - 56);
    if (!v30)
      v31 = 0;
    v32 = &v122;
    if (v22 != v31)
    {
      v33 = (uint64_t)v119;
      if (v8)
      {
        v34 = v8;
        do
        {
          v35 = v34 >> 1;
          v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          v38 = *v36;
          v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31)
            v33 = (uint64_t)v37;
          else
            v34 = v35;
        }
        while (v34);
      }
      v32 = (_QWORD *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    v39 = v4[9];
    v40 = (_QWORD *)(v39 - 56);
    if (!v39)
      v40 = 0;
    v41 = (uint64_t)v119;
    v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        v43 = (uint64_t)v119;
        v44 = v8;
        do
        {
          v45 = v44 >> 1;
          v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          v48 = *v46;
          v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40)
            v43 = (uint64_t)v47;
          else
            v44 = v45;
        }
        while (v44);
      }
      else
      {
        v43 = (uint64_t)v119;
      }
      v42 = (_QWORD *)(v43 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      v49 = (_QWORD *)v41;
      do
      {
        v51 = *v49;
        v50 = (_QWORD *)v49[1];
        v52 = (_QWORD *)(*v49 + 56);
        v53 = v50 + 7;
        v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          v56 = (uint64_t *)&v122;
          if (v22 != (_QWORD *)(v55 - 56))
          {
            v57 = v41;
            v58 = v8;
            do
            {
              v59 = v58 >> 1;
              v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              v62 = *v60;
              v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56)
                v57 = (uint64_t)v61;
              else
                v58 = v59;
            }
            while (v58);
            v56 = (uint64_t *)(v57 + 8);
          }
          v63 = *v56;
          *v53 = v54 | (*v56 + 56);
          if (*(_QWORD **)(v55 + 8) == v52)
          {
            *(_QWORD *)(v63 + 64) = v53;
          }
          else if (*(_QWORD **)(v55 + 16) == v52)
          {
            *(_QWORD *)(v63 + 72) = v53;
          }
        }
        else
        {
          *v53 = v54;
        }
        if (!*(_QWORD *)(v51 + 64))
          v50[8] = 0;
        if (!*(_QWORD *)(v51 + 72))
          v50[9] = 0;
        v49 += 2;
      }
      while (v49 != (_QWORD *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) = *(_QWORD *)(a1 + 8) + 56;
  }
  v64 = v4[4];
  v65 = *(_QWORD *)(a1 + 8);
  v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    v67 = v4[4];
    v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v69 = v64 & 1;
    if (v19)
      v70 = 0;
    else
      v70 = v68;
    v71 = v121;
    v72 = &v122;
    if (v121 != (_QWORD *)v70)
    {
      v73 = (uint64_t)v119;
      v74 = v120;
      if (v120)
      {
        do
        {
          v75 = v74 >> 1;
          v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          v78 = *v76;
          v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70)
            v73 = (uint64_t)v77;
          else
            v74 = v75;
        }
        while (v74);
      }
      v72 = (_QWORD *)(v73 + 8);
    }
    *v66 = v69 | (*v72 + 32);
    v79 = v4[5];
    v80 = (_QWORD *)(v79 - 32);
    if (!v79)
      v80 = 0;
    v81 = &v122;
    if (v71 != v80)
    {
      v82 = (uint64_t)v119;
      v83 = v120;
      if (v120)
      {
        do
        {
          v84 = v83 >> 1;
          v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          v87 = *v85;
          v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80)
            v82 = (uint64_t)v86;
          else
            v83 = v84;
        }
        while (v83);
      }
      v81 = (_QWORD *)(v82 + 8);
    }
    *(_QWORD *)(v65 + 40) = *v81 + 32;
    v88 = v4[6];
    if (v88)
      v89 = (_QWORD *)(v88 - 32);
    else
      v89 = 0;
    if (v121 == v89)
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      v98 = &v122;
    }
    else
    {
      v90 = (uint64_t)v119;
      v91 = v120;
      if (v120)
      {
        v92 = (uint64_t)v119;
        v93 = v120;
        do
        {
          v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          v97 = *v95;
          v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89)
            v92 = (uint64_t)v96;
          else
            v93 = v94;
        }
        while (v93);
      }
      else
      {
        v92 = (uint64_t)v119;
      }
      v98 = (_QWORD *)(v92 + 8);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      v99 = (_QWORD *)(v90 + 16 * v91);
      v100 = (_QWORD *)v90;
      do
      {
        v102 = *v100;
        v101 = (_QWORD *)v100[1];
        v103 = (_QWORD *)(*v100 + 32);
        v104 = v101 + 4;
        v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          v107 = (uint64_t *)&v122;
          if (v121 != (_QWORD *)(v106 - 32))
          {
            v108 = v120;
            if (v120)
            {
              v109 = v90;
              do
              {
                v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                v113 = *v111;
                v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32)
                  v109 = (uint64_t)v112;
                else
                  v108 = v110;
              }
              while (v108);
            }
            else
            {
              v109 = v90;
            }
            v107 = (uint64_t *)(v109 + 8);
          }
          v114 = *v107;
          *v104 = v105 | (*v107 + 32);
          if (*(_QWORD **)(v106 + 8) == v103)
          {
            *(_QWORD *)(v114 + 40) = v104;
          }
          else if (*(_QWORD **)(v106 + 16) == v103)
          {
            *(_QWORD *)(v114 + 48) = v104;
          }
        }
        else
        {
          *v104 = v105;
        }
        if (!*(_QWORD *)(v102 + 40))
          v101[5] = 0;
        if (!*(_QWORD *)(v102 + 48))
          v101[6] = 0;
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(_QWORD *)(v65 + 32) = 0;
    *(_QWORD *)(v65 + 40) = v66;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *(_QWORD *)(a1 + 8) + 32;
  }
  v123 = 1;
  *(_QWORD *)(a1 + 24) = qword_1EF130BD0;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1B5C3F93C()
{
  __break(1u);
}

void sub_1B5C3F964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&a9);
  JUMPOUT(0x1B5C3F980);
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(uint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  __int128 *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  __n128 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *n128_u64;
  BOOL v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  int64_t v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  __n128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __n128 *v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  __n128 *v77;
  unint64_t v78;
  __n128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (unint64_t *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

void AMCP::write_json(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  char *p_p;
  uint64_t v7;
  uint64_t *v8;
  int *i;
  int *v10;
  AMCP::Log::Scope_Registry *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int *v15;
  int *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  AMCP::Log::Scope_Registry *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int *v24;
  int *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  AMCP::Log::Scope_Registry *v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  int *v33;
  int *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  AMCP::Log::Scope_Registry *v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int *v42;
  int *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  AMCP::Log::Scope_Registry *v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  _DWORD *v68;
  _DWORD *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  AMCP::Log::Scope_Registry *v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  _DWORD *v77;
  _DWORD *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  AMCP::Log::Scope_Registry *v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  _DWORD *v86;
  _DWORD *v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  AMCP::Log::Scope_Registry *v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  _DWORD *v95;
  _DWORD *v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  AMCP::Log::Scope_Registry *v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  _DWORD *v104;
  _DWORD *v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  NSObject *v110;
  unint64_t *v111;
  unint64_t v112;
  _opaque_pthread_t *v113;
  mach_port_t v114;
  std::logic_error *exception;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  std::logic_error v120;
  std::__shared_weak_count *v121;
  NSObject *v122;
  unint64_t *v123;
  unint64_t v124;
  _opaque_pthread_t *v125;
  mach_port_t v126;
  std::logic_error *v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  std::logic_error v132;
  std::__shared_weak_count *v133;
  NSObject *v134;
  unint64_t *v135;
  unint64_t v136;
  _opaque_pthread_t *v137;
  mach_port_t v138;
  std::logic_error *v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  std::logic_error v144;
  std::__shared_weak_count *v145;
  NSObject *v146;
  unint64_t *v147;
  unint64_t v148;
  _opaque_pthread_t *v149;
  mach_port_t v150;
  std::logic_error *v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  std::logic_error v156;
  std::__shared_weak_count *v157;
  NSObject *v158;
  unint64_t *v159;
  unint64_t v160;
  _opaque_pthread_t *v161;
  mach_port_t v162;
  std::logic_error *v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  std::logic_error v168;
  std::__shared_weak_count *v169;
  NSObject *v170;
  unint64_t *v171;
  unint64_t v172;
  _opaque_pthread_t *v173;
  mach_port_t v174;
  std::logic_error *v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  std::logic_error v180;
  std::__shared_weak_count *v181;
  NSObject *v182;
  unint64_t *v183;
  unint64_t v184;
  _opaque_pthread_t *v185;
  mach_port_t v186;
  std::logic_error *v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  std::logic_error v192;
  std::__shared_weak_count *v193;
  NSObject *v194;
  unint64_t *v195;
  unint64_t v196;
  _opaque_pthread_t *v197;
  mach_port_t v198;
  std::logic_error *v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  std::logic_error v204;
  std::__shared_weak_count *v205;
  NSObject *v206;
  unint64_t *v207;
  unint64_t v208;
  _opaque_pthread_t *v209;
  mach_port_t v210;
  std::logic_error *v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  std::logic_error v216;
  char *v217;
  std::logic_error v218;
  char v219;
  void *__p;
  char *v221;
  uint64_t v222;
  int *v223;
  int *v224;
  uint64_t v225;
  uint64_t *v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  std::string v234;
  __int128 v235;
  uint64_t v236;
  uint64_t (**v237)();
  __int128 v238;
  uint64_t v239;
  std::string v240;
  std::logic_error v241;
  std::logic_error v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  char v248;
  std::string v249;
  __int128 v250;
  uint64_t v251;
  char *v252;
  char *v253;
  uint8_t buf[8];
  _BYTE v255[10];
  __int16 v256;
  int v257;
  _BYTE v258[24];
  int v259;
  uint64_t v260;

  v260 = *MEMORY[0x1E0C80C00];
  v223 = 0;
  v224 = 0;
  v225 = 0;
  std::vector<AMCP::Node_Description>::__init_with_size[abi:ne180100]<AMCP::Node_Description*,AMCP::Node_Description*>(&v223, *a2, a2[1], 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3));
  v4 = 126 - 2 * __clz(0xEEEEEEEEEEEEEEEFLL * (((char *)v224 - (char *)v223) >> 3));
  if (v224 == v223)
    v5 = 0;
  else
    v5 = v4;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *,false>((uint64_t)v223, v224, v5, 1);
  p_p = (char *)&__p;
  std::string::basic_string[abi:ne180100]<0>(&__p, "nodes");
  if (v222 < 0)
    p_p = (char *)__p;
  minijson::writer::next_field((minijson::writer *)a1);
  minijson::writer::write_field_name((uint64_t **)a1, p_p);
  v8 = *(uint64_t **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v232 = *(_OWORD *)(a1 + 24);
  v233 = *(_QWORD *)(a1 + 40);
  LOBYTE(v230) = 1;
  HIDWORD(v230) = 0;
  *(_QWORD *)&v231 = v8;
  *((_QWORD *)&v231 + 1) = v7 + 1;
  v10 = v223;
  for (i = v224; v10 != i; v10 += 30)
  {
    minijson::writer::next_field((minijson::writer *)&v230);
    v8 = (uint64_t *)v231;
    v228 = v232;
    v229 = v233;
    LOBYTE(v226) = 0;
    HIDWORD(v226) = 0;
    v227 = v231 + __PAIR128__(1, 0);
    AMCP::get_enum_string_bimap<AMCP::Node_Type>();
    v249.__r_.__value_.__l.__size_ = (std::string::size_type)&v250 + 8;
    v11 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v249.__r_.__value_.__r.__words[2]);
    v252 = (char *)&v250 + 8;
    v253 = (char *)&v250 + 8;
    v12 = v250;
    v13 = *(_QWORD *)(v250 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (!v13)
      goto LABEL_229;
    v14 = *v10;
    v15 = (int *)v250;
    do
    {
      while (*(_DWORD *)(v13 - 32) < v14)
      {
        v13 = *(_QWORD *)(v13 + 16);
        if (!v13)
          goto LABEL_13;
      }
      v15 = (int *)(v13 - 32);
      v13 = *(_QWORD *)(v13 + 8);
    }
    while (v13);
LABEL_13:
    if (v15 == (int *)v250 || (v14 >= *v15 ? (v16 = v15) : (v16 = (int *)v250), (int *)v250 == v16))
    {
LABEL_229:
      AMCP::Log::Scope_Registry::get(v11);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v109 = *(std::__shared_weak_count **)v255;
      v110 = **(NSObject ***)buf;
      if (*(_QWORD *)v255)
      {
        v111 = (unint64_t *)(*(_QWORD *)v255 + 8);
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
      {
        v113 = pthread_self();
        v114 = pthread_mach_thread_np(v113);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v114;
        *(_WORD *)v255 = 2080;
        *(_QWORD *)&v255[2] = "Graph_Description_Internal.h";
        v256 = 1024;
        v257 = 42;
        *(_WORD *)v258 = 2080;
        *(_QWORD *)&v258[2] = "not (found != map.left.end())";
        _os_log_error_impl(&dword_1B57BA000, v110, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v241);
      exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v240);
      std::logic_error::logic_error(&v218, &v240);
      v116 = MEMORY[0x1E0DE5018];
      v218.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v242, &v218);
      v244 = 0;
      v245 = 0;
      v246 = 0;
      v247 = -1;
      v242.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v243 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v242);
      *(_QWORD *)&v258[8] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Node_Type]";
      *(_QWORD *)&v258[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
      v259 = 42;
      std::vector<void *>::vector(&v235);
      v117 = backtrace((void **)v235, (*((_QWORD *)&v235 + 1) - (_QWORD)v235) >> 3);
      std::vector<void *>::resize((char **)&v235, v117);
      v238 = v235;
      v118 = v236;
      v236 = 0;
      v237 = off_1E69A20A0;
      v239 = v118;
      v235 = 0uLL;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v237);
      exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::logic_error::logic_error(exception, (const std::logic_error *)buf);
      exception->__vftable = (std::logic_error_vtbl *)(v116 + 16);
      exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
      v119 = *(_QWORD *)v258;
      exception[1].__imp_.__imp_ = *(const char **)v258;
      if (v119)
        (*(void (**)(uint64_t))(*(_QWORD *)v119 + 24))(v119);
      v120 = *(std::logic_error *)&v258[8];
      LODWORD(exception[3].__vftable) = v259;
      exception[2] = v120;
      exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
      exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
      exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
    }
    if (*((char *)v16 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v234, *((const std::string::value_type **)v16 + 1), *((_QWORD *)v16 + 2));
      v12 = v250;
    }
    else
    {
      v17 = *(_OWORD *)(v16 + 2);
      v234.__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 3);
      *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v17;
    }
    v18 = *(_QWORD *)(v12 + 56);
    if ((v18 & 0xFFFFFFFFFFFFFFFELL) != 0)
      v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) - 56;
    else
      v19 = 0;
    boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&v250 + 8, v19);
    operator delete((void *)v250);
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v226, "NodeType", (uint64_t)&v234);
    if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v234.__r_.__value_.__l.__data_);
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v226, "UID", (uint64_t)(v10 + 2));
    AMCP::get_enum_string_bimap<AMCP::Node_Thread_Policy>();
    v249.__r_.__value_.__l.__size_ = (std::string::size_type)&v250 + 8;
    v20 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Thread_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v249.__r_.__value_.__r.__words[2]);
    v252 = (char *)&v250 + 8;
    v253 = (char *)&v250 + 8;
    v21 = v250;
    v22 = *(_QWORD *)(v250 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (!v22)
      goto LABEL_239;
    v23 = v10[8];
    v24 = (int *)v250;
    do
    {
      while (*(_DWORD *)(v22 - 32) < v23)
      {
        v22 = *(_QWORD *)(v22 + 16);
        if (!v22)
          goto LABEL_32;
      }
      v24 = (int *)(v22 - 32);
      v22 = *(_QWORD *)(v22 + 8);
    }
    while (v22);
LABEL_32:
    if (v24 == (int *)v250 || (v23 >= *v24 ? (v25 = v24) : (v25 = (int *)v250), (int *)v250 == v25))
    {
LABEL_239:
      AMCP::Log::Scope_Registry::get(v20);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v121 = *(std::__shared_weak_count **)v255;
      v122 = **(NSObject ***)buf;
      if (*(_QWORD *)v255)
      {
        v123 = (unint64_t *)(*(_QWORD *)v255 + 8);
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
      {
        v125 = pthread_self();
        v126 = pthread_mach_thread_np(v125);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v126;
        *(_WORD *)v255 = 2080;
        *(_QWORD *)&v255[2] = "Graph_Description_Internal.h";
        v256 = 1024;
        v257 = 42;
        *(_WORD *)v258 = 2080;
        *(_QWORD *)&v258[2] = "not (found != map.left.end())";
        _os_log_error_impl(&dword_1B57BA000, v122, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v241);
      v127 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v240);
      std::logic_error::logic_error(&v218, &v240);
      v128 = MEMORY[0x1E0DE5018];
      v218.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v242, &v218);
      v244 = 0;
      v245 = 0;
      v246 = 0;
      v247 = -1;
      v242.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v243 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v242);
      *(_QWORD *)&v258[8] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Node_Thread_Policy]";
      *(_QWORD *)&v258[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
      v259 = 42;
      std::vector<void *>::vector(&v235);
      v129 = backtrace((void **)v235, (*((_QWORD *)&v235 + 1) - (_QWORD)v235) >> 3);
      std::vector<void *>::resize((char **)&v235, v129);
      v238 = v235;
      v130 = v236;
      v236 = 0;
      v237 = off_1E69A20A0;
      v239 = v130;
      v235 = 0uLL;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v237);
      v127[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::logic_error::logic_error(v127, (const std::logic_error *)buf);
      v127->__vftable = (std::logic_error_vtbl *)(v128 + 16);
      v127[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
      v131 = *(_QWORD *)v258;
      v127[1].__imp_.__imp_ = *(const char **)v258;
      if (v131)
        (*(void (**)(uint64_t))(*(_QWORD *)v131 + 24))(v131);
      v132 = *(std::logic_error *)&v258[8];
      LODWORD(v127[3].__vftable) = v259;
      v127[2] = v132;
      v127->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
      v127[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
      v127[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
    }
    if (*((char *)v25 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v234, *((const std::string::value_type **)v25 + 1), *((_QWORD *)v25 + 2));
      v21 = v250;
    }
    else
    {
      v26 = *(_OWORD *)(v25 + 2);
      v234.__r_.__value_.__r.__words[2] = *((_QWORD *)v25 + 3);
      *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v26;
    }
    v27 = *(_QWORD *)(v21 + 56);
    if ((v27 & 0xFFFFFFFFFFFFFFFELL) != 0)
      v28 = (v27 & 0xFFFFFFFFFFFFFFFELL) - 56;
    else
      v28 = 0;
    boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&v250 + 8, v28);
    operator delete((void *)v250);
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v226, "ThreadPolicy", (uint64_t)&v234);
    if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v234.__r_.__value_.__l.__data_);
    AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>();
    v249.__r_.__value_.__l.__size_ = (std::string::size_type)&v250 + 8;
    v29 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Buffer_Size_Change_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v249.__r_.__value_.__r.__words[2]);
    v252 = (char *)&v250 + 8;
    v253 = (char *)&v250 + 8;
    v30 = v250;
    v31 = *(_QWORD *)(v250 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (!v31)
      goto LABEL_249;
    v32 = v10[9];
    v33 = (int *)v250;
    do
    {
      while (*(_DWORD *)(v31 - 32) < v32)
      {
        v31 = *(_QWORD *)(v31 + 16);
        if (!v31)
          goto LABEL_51;
      }
      v33 = (int *)(v31 - 32);
      v31 = *(_QWORD *)(v31 + 8);
    }
    while (v31);
LABEL_51:
    if (v33 == (int *)v250 || (v32 >= *v33 ? (v34 = v33) : (v34 = (int *)v250), (int *)v250 == v34))
    {
LABEL_249:
      AMCP::Log::Scope_Registry::get(v29);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v133 = *(std::__shared_weak_count **)v255;
      v134 = **(NSObject ***)buf;
      if (*(_QWORD *)v255)
      {
        v135 = (unint64_t *)(*(_QWORD *)v255 + 8);
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
      {
        v137 = pthread_self();
        v138 = pthread_mach_thread_np(v137);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v138;
        *(_WORD *)v255 = 2080;
        *(_QWORD *)&v255[2] = "Graph_Description_Internal.h";
        v256 = 1024;
        v257 = 42;
        *(_WORD *)v258 = 2080;
        *(_QWORD *)&v258[2] = "not (found != map.left.end())";
        _os_log_error_impl(&dword_1B57BA000, v134, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v241);
      v139 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v240);
      std::logic_error::logic_error(&v218, &v240);
      v140 = MEMORY[0x1E0DE5018];
      v218.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v242, &v218);
      v244 = 0;
      v245 = 0;
      v246 = 0;
      v247 = -1;
      v242.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v243 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v242);
      *(_QWORD *)&v258[8] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Node_Buffer_Size_Change_Policy]";
      *(_QWORD *)&v258[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
      v259 = 42;
      std::vector<void *>::vector(&v235);
      v141 = backtrace((void **)v235, (*((_QWORD *)&v235 + 1) - (_QWORD)v235) >> 3);
      std::vector<void *>::resize((char **)&v235, v141);
      v238 = v235;
      v142 = v236;
      v236 = 0;
      v237 = off_1E69A20A0;
      v239 = v142;
      v235 = 0uLL;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v237);
      v139[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::logic_error::logic_error(v139, (const std::logic_error *)buf);
      v139->__vftable = (std::logic_error_vtbl *)(v140 + 16);
      v139[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
      v143 = *(_QWORD *)v258;
      v139[1].__imp_.__imp_ = *(const char **)v258;
      if (v143)
        (*(void (**)(uint64_t))(*(_QWORD *)v143 + 24))(v143);
      v144 = *(std::logic_error *)&v258[8];
      LODWORD(v139[3].__vftable) = v259;
      v139[2] = v144;
      v139->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
      v139[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
      v139[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
    }
    if (*((char *)v34 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v234, *((const std::string::value_type **)v34 + 1), *((_QWORD *)v34 + 2));
      v30 = v250;
    }
    else
    {
      v35 = *(_OWORD *)(v34 + 2);
      v234.__r_.__value_.__r.__words[2] = *((_QWORD *)v34 + 3);
      *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v35;
    }
    v36 = *(_QWORD *)(v30 + 56);
    if ((v36 & 0xFFFFFFFFFFFFFFFELL) != 0)
      v37 = (v36 & 0xFFFFFFFFFFFFFFFELL) - 56;
    else
      v37 = 0;
    boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&v250 + 8, v37);
    operator delete((void *)v250);
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v226, "SizeChangePolicy", (uint64_t)&v234);
    if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v234.__r_.__value_.__l.__data_);
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v226, "ClockUID", (uint64_t)(v10 + 10));
    AMCP::get_enum_string_bimap<AMCP::Node_Clock_Policy>();
    v249.__r_.__value_.__l.__size_ = (std::string::size_type)&v250 + 8;
    v38 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Clock_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v249.__r_.__value_.__r.__words[2]);
    v252 = (char *)&v250 + 8;
    v253 = (char *)&v250 + 8;
    v39 = v250;
    v40 = *(_QWORD *)(v250 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (!v40)
      goto LABEL_259;
    v41 = v10[16];
    v42 = (int *)v250;
    do
    {
      while (*(_DWORD *)(v40 - 32) < v41)
      {
        v40 = *(_QWORD *)(v40 + 16);
        if (!v40)
          goto LABEL_70;
      }
      v42 = (int *)(v40 - 32);
      v40 = *(_QWORD *)(v40 + 8);
    }
    while (v40);
LABEL_70:
    if (v42 == (int *)v250 || (v41 >= *v42 ? (v43 = v42) : (v43 = (int *)v250), (int *)v250 == v43))
    {
LABEL_259:
      AMCP::Log::Scope_Registry::get(v38);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v145 = *(std::__shared_weak_count **)v255;
      v146 = **(NSObject ***)buf;
      if (*(_QWORD *)v255)
      {
        v147 = (unint64_t *)(*(_QWORD *)v255 + 8);
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
          std::__shared_weak_count::__release_weak(v145);
        }
      }
      if (os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
      {
        v149 = pthread_self();
        v150 = pthread_mach_thread_np(v149);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v150;
        *(_WORD *)v255 = 2080;
        *(_QWORD *)&v255[2] = "Graph_Description_Internal.h";
        v256 = 1024;
        v257 = 42;
        *(_WORD *)v258 = 2080;
        *(_QWORD *)&v258[2] = "not (found != map.left.end())";
        _os_log_error_impl(&dword_1B57BA000, v146, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v241);
      v151 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v240);
      std::logic_error::logic_error(&v218, &v240);
      v152 = MEMORY[0x1E0DE5018];
      v218.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v242, &v218);
      v244 = 0;
      v245 = 0;
      v246 = 0;
      v247 = -1;
      v242.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v243 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v242);
      *(_QWORD *)&v258[8] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Node_Clock_Policy]";
      *(_QWORD *)&v258[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
      v259 = 42;
      std::vector<void *>::vector(&v235);
      v153 = backtrace((void **)v235, (*((_QWORD *)&v235 + 1) - (_QWORD)v235) >> 3);
      std::vector<void *>::resize((char **)&v235, v153);
      v238 = v235;
      v154 = v236;
      v236 = 0;
      v237 = off_1E69A20A0;
      v239 = v154;
      v235 = 0uLL;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v237);
      v151[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::logic_error::logic_error(v151, (const std::logic_error *)buf);
      v151->__vftable = (std::logic_error_vtbl *)(v152 + 16);
      v151[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
      v155 = *(_QWORD *)v258;
      v151[1].__imp_.__imp_ = *(const char **)v258;
      if (v155)
        (*(void (**)(uint64_t))(*(_QWORD *)v155 + 24))(v155);
      v156 = *(std::logic_error *)&v258[8];
      LODWORD(v151[3].__vftable) = v259;
      v151[2] = v156;
      v151->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
      v151[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
      v151[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
    }
    if (*((char *)v43 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v234, *((const std::string::value_type **)v43 + 1), *((_QWORD *)v43 + 2));
      v39 = v250;
    }
    else
    {
      v44 = *(_OWORD *)(v43 + 2);
      v234.__r_.__value_.__r.__words[2] = *((_QWORD *)v43 + 3);
      *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v44;
    }
    v45 = *(_QWORD *)(v39 + 56);
    if ((v45 & 0xFFFFFFFFFFFFFFFELL) != 0)
      v46 = (v45 & 0xFFFFFFFFFFFFFFFELL) - 56;
    else
      v46 = 0;
    boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&v250 + 8, v46);
    operator delete((void *)v250);
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v226, "ClockPolicy", (uint64_t)&v234);
    if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v234.__r_.__value_.__l.__data_);
    minijson::writer::write_helper<unsigned int,minijson::default_value_writer<unsigned int,void>>((uint64_t)&v226, "BlockSize");
    memset(&v249, 0, sizeof(v249));
    std::vector<AMCP::Terminal_Description>::__init_with_size[abi:ne180100]<AMCP::Terminal_Description*,AMCP::Terminal_Description*>(&v249, *((__int128 **)v10 + 12), *((__int128 **)v10 + 13), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)v10 + 13) - *((_QWORD *)v10 + 12)) >> 3));
    v47 = 126
        - 2
        * __clz(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v249.__r_.__value_.__l.__size_ - v249.__r_.__value_.__r.__words[0]) >> 3));
    if (v249.__r_.__value_.__l.__size_ == v249.__r_.__value_.__r.__words[0])
      v48 = 0;
    else
      v48 = v47;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *,false>((uint64_t)v249.__r_.__value_.__l.__data_, v249.__r_.__value_.__l.__size_, v48, 1);
    std::string::basic_string[abi:ne180100]<0>(buf, "InputTerminals");
    AMCP::write_json_object_array<AMCP::Terminal_Description>((uint64_t)&v226, (char *)buf, (uint64_t *)&v249);
    if (SHIBYTE(v257) < 0)
      operator delete(*(void **)buf);
    if (&v249 != (std::string *)(v10 + 18))
      std::vector<AMCP::Terminal_Description>::__assign_with_size[abi:ne180100]<AMCP::Terminal_Description*,AMCP::Terminal_Description*>((uint64_t *)&v249, *((__int128 **)v10 + 9), *((__int128 **)v10 + 10), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)v10 + 10) - *((_QWORD *)v10 + 9)) >> 3));
    v49 = 126
        - 2
        * __clz(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v249.__r_.__value_.__l.__size_ - v249.__r_.__value_.__r.__words[0]) >> 3));
    if (v249.__r_.__value_.__l.__size_ == v249.__r_.__value_.__r.__words[0])
      v50 = 0;
    else
      v50 = v49;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *,false>((uint64_t)v249.__r_.__value_.__l.__data_, v249.__r_.__value_.__l.__size_, v50, 1);
    std::string::basic_string[abi:ne180100]<0>(buf, "OutputTerminals");
    AMCP::write_json_object_array<AMCP::Terminal_Description>((uint64_t)&v226, (char *)buf, (uint64_t *)&v249);
    if (SHIBYTE(v257) < 0)
      operator delete(*(void **)buf);
    *(_QWORD *)buf = &v249;
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    minijson::writer::close(&v226);
  }
  minijson::writer::close(&v230);
  if (SHIBYTE(v222) < 0)
    operator delete(__p);
  __p = 0;
  v221 = 0;
  v222 = 0;
  std::vector<AMCP::Wire_Description>::__init_with_size[abi:ne180100]<AMCP::Wire_Description*,AMCP::Wire_Description*>(&__p, a2[3], a2[4], 0xAAAAAAAAAAAAAAABLL * ((a2[4] - a2[3]) >> 6));
  v51 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v221 - (_BYTE *)__p) >> 6));
  if (v221 == __p)
    v52 = 0;
  else
    v52 = v51;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *,false>((unint64_t)__p, (unint64_t)v221, v52, 1);
  v53 = (char *)&v218;
  std::string::basic_string[abi:ne180100]<0>(&v218, "wires");
  if (v219 < 0)
    v53 = (char *)v218.__vftable;
  minijson::writer::next_field((minijson::writer *)a1);
  minijson::writer::write_field_name((uint64_t **)a1, v53);
  v55 = *(uint64_t **)(a1 + 8);
  v54 = *(_QWORD *)(a1 + 16);
  v232 = *(_OWORD *)(a1 + 24);
  v233 = *(_QWORD *)(a1 + 40);
  LOBYTE(v230) = 1;
  HIDWORD(v230) = 0;
  *(_QWORD *)&v231 = v55;
  *((_QWORD *)&v231 + 1) = v54 + 1;
  v56 = (char *)__p;
  v217 = v221;
  if (__p != v221)
  {
    do
    {
      minijson::writer::next_field((minijson::writer *)&v230);
      v55 = (uint64_t *)v231;
      v228 = v232;
      v229 = v233;
      LOBYTE(v226) = 0;
      HIDWORD(v226) = 0;
      v227 = v231 + __PAIR128__(1, 0);
      std::string::basic_string[abi:ne180100]<0>(&v249, "Source");
      AMCP::write_json_object<AMCP::Terminal_Identifier>((uint64_t)&v226, (char *)&v249, (uint64_t)v56);
      if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v249.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v249, "Destination");
      AMCP::write_json_object<AMCP::Terminal_Identifier>((uint64_t)&v226, (char *)&v249, (uint64_t)(v56 + 40));
      if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v249.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(buf, "ChannelMap");
      if (v257 >= 0)
        v57 = (char *)buf;
      else
        v57 = *(char **)buf;
      minijson::writer::next_field((minijson::writer *)&v226);
      minijson::writer::write_field_name(&v226, v57);
      v58 = (uint64_t *)v227;
      v250 = v228;
      v251 = v229;
      v249.__r_.__value_.__s.__data_[0] = 1;
      HIDWORD(v249.__r_.__value_.__r.__words[0]) = 0;
      *(_OWORD *)&v249.__r_.__value_.__r.__words[1] = v227 + __PAIR128__(1, 0);
      v59 = *((_QWORD *)v56 + 10);
      v60 = *((_QWORD *)v56 + 11);
      while (v59 != v60)
      {
        minijson::writer::write_helper<int,minijson::default_value_writer<int,void>>((uint64_t)&v249, 0);
        v59 += 4;
      }
      minijson::writer::close(&v249);
      if (SHIBYTE(v257) < 0)
        operator delete(*(void **)buf);
      std::string::basic_string[abi:ne180100]<0>(buf, "MonoMixMap");
      if (v257 >= 0)
        v61 = (char *)buf;
      else
        v61 = *(char **)buf;
      minijson::writer::next_field((minijson::writer *)&v226);
      minijson::writer::write_field_name(&v226, v61);
      v250 = v228;
      v251 = v229;
      v249.__r_.__value_.__s.__data_[0] = 1;
      HIDWORD(v249.__r_.__value_.__r.__words[0]) = 0;
      *(_OWORD *)&v249.__r_.__value_.__r.__words[1] = v227 + __PAIR128__(1, 0);
      v62 = *((_QWORD *)v56 + 13);
      v63 = *((_QWORD *)v56 + 14);
      while (v62 != v63)
      {
        minijson::writer::write_helper<unsigned int,minijson::default_value_writer<unsigned int,void>>((uint64_t)&v249, 0);
        v62 += 4;
      }
      minijson::writer::close(&v249);
      if (SHIBYTE(v257) < 0)
        operator delete(*(void **)buf);
      minijson::writer::write_helper<int,minijson::default_value_writer<int,void>>((uint64_t)&v226, "LatencyAdjustment");
      AMCP::get_enum_string_bimap<AMCP::Wire_Connection_Policy>();
      v249.__r_.__value_.__l.__size_ = (std::string::size_type)&v250 + 8;
      v64 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Connection_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v249.__r_.__value_.__r.__words[2]);
      v252 = (char *)&v250 + 8;
      v253 = (char *)&v250 + 8;
      v65 = v250;
      v66 = *(_QWORD *)(v250 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (!v66)
        goto LABEL_269;
      v67 = *((_DWORD *)v56 + 33);
      v68 = (_DWORD *)v250;
      do
      {
        while (*(_DWORD *)(v66 - 32) < v67)
        {
          v66 = *(_QWORD *)(v66 + 16);
          if (!v66)
            goto LABEL_130;
        }
        v68 = (_DWORD *)(v66 - 32);
        v66 = *(_QWORD *)(v66 + 8);
      }
      while (v66);
LABEL_130:
      if (v68 == (_DWORD *)v250 || (v67 >= *v68 ? (v69 = v68) : (v69 = (_DWORD *)v250), (_DWORD *)v250 == v69))
      {
LABEL_269:
        AMCP::Log::Scope_Registry::get(v64);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v157 = *(std::__shared_weak_count **)v255;
        v158 = **(NSObject ***)buf;
        if (*(_QWORD *)v255)
        {
          v159 = (unint64_t *)(*(_QWORD *)v255 + 8);
          do
            v160 = __ldaxr(v159);
          while (__stlxr(v160 - 1, v159));
          if (!v160)
          {
            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
            std::__shared_weak_count::__release_weak(v157);
          }
        }
        if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
        {
          v161 = pthread_self();
          v162 = pthread_mach_thread_np(v161);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v162;
          *(_WORD *)v255 = 2080;
          *(_QWORD *)&v255[2] = "Graph_Description_Internal.h";
          v256 = 1024;
          v257 = 42;
          *(_WORD *)v258 = 2080;
          *(_QWORD *)&v258[2] = "not (found != map.left.end())";
          _os_log_error_impl(&dword_1B57BA000, v158, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v248);
        v163 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v240);
        std::logic_error::logic_error(&v241, &v240);
        v164 = MEMORY[0x1E0DE5018];
        v241.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v242, &v241);
        v244 = 0;
        v245 = 0;
        v246 = 0;
        v247 = -1;
        v242.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v243 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v242);
        *(_QWORD *)&v258[8] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Wire_Connection_Policy]";
        *(_QWORD *)&v258[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
        v259 = 42;
        std::vector<void *>::vector(&v235);
        v165 = backtrace((void **)v235, (*((_QWORD *)&v235 + 1) - (_QWORD)v235) >> 3);
        std::vector<void *>::resize((char **)&v235, v165);
        v238 = v235;
        v166 = v236;
        v236 = 0;
        v237 = off_1E69A20A0;
        v239 = v166;
        v235 = 0uLL;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v237);
        v163[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(v163, (const std::logic_error *)buf);
        v163->__vftable = (std::logic_error_vtbl *)(v164 + 16);
        v163[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v167 = *(_QWORD *)v258;
        v163[1].__imp_.__imp_ = *(const char **)v258;
        if (v167)
          (*(void (**)(uint64_t))(*(_QWORD *)v167 + 24))(v167);
        v168 = *(std::logic_error *)&v258[8];
        LODWORD(v163[3].__vftable) = v259;
        v163[2] = v168;
        v163->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        v163[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        v163[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      if (*((char *)v69 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v234, *((const std::string::value_type **)v69 + 1), *((_QWORD *)v69 + 2));
        v65 = v250;
      }
      else
      {
        v70 = *(_OWORD *)(v69 + 2);
        v234.__r_.__value_.__r.__words[2] = *((_QWORD *)v69 + 3);
        *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v70;
      }
      v71 = *(_QWORD *)(v65 + 56);
      if ((v71 & 0xFFFFFFFFFFFFFFFELL) != 0)
        v72 = (v71 & 0xFFFFFFFFFFFFFFFELL) - 56;
      else
        v72 = 0;
      boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&v250 + 8, v72);
      operator delete((void *)v250);
      minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v226, "ConnectionPolicy", (uint64_t)&v234);
      if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v234.__r_.__value_.__l.__data_);
      AMCP::get_enum_string_bimap<AMCP::Wire_Resampler_Policy>();
      v249.__r_.__value_.__l.__size_ = (std::string::size_type)&v250 + 8;
      v73 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Resampler_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v249.__r_.__value_.__r.__words[2]);
      v252 = (char *)&v250 + 8;
      v253 = (char *)&v250 + 8;
      v74 = v250;
      v75 = *(_QWORD *)(v250 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (!v75)
        goto LABEL_279;
      v76 = *((_DWORD *)v56 + 34);
      v77 = (_DWORD *)v250;
      do
      {
        while (*(_DWORD *)(v75 - 32) < v76)
        {
          v75 = *(_QWORD *)(v75 + 16);
          if (!v75)
            goto LABEL_149;
        }
        v77 = (_DWORD *)(v75 - 32);
        v75 = *(_QWORD *)(v75 + 8);
      }
      while (v75);
LABEL_149:
      if (v77 == (_DWORD *)v250 || (v76 >= *v77 ? (v78 = v77) : (v78 = (_DWORD *)v250), (_DWORD *)v250 == v78))
      {
LABEL_279:
        AMCP::Log::Scope_Registry::get(v73);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v169 = *(std::__shared_weak_count **)v255;
        v170 = **(NSObject ***)buf;
        if (*(_QWORD *)v255)
        {
          v171 = (unint64_t *)(*(_QWORD *)v255 + 8);
          do
            v172 = __ldaxr(v171);
          while (__stlxr(v172 - 1, v171));
          if (!v172)
          {
            ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
            std::__shared_weak_count::__release_weak(v169);
          }
        }
        if (os_log_type_enabled(v170, OS_LOG_TYPE_ERROR))
        {
          v173 = pthread_self();
          v174 = pthread_mach_thread_np(v173);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v174;
          *(_WORD *)v255 = 2080;
          *(_QWORD *)&v255[2] = "Graph_Description_Internal.h";
          v256 = 1024;
          v257 = 42;
          *(_WORD *)v258 = 2080;
          *(_QWORD *)&v258[2] = "not (found != map.left.end())";
          _os_log_error_impl(&dword_1B57BA000, v170, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v248);
        v175 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v240);
        std::logic_error::logic_error(&v241, &v240);
        v176 = MEMORY[0x1E0DE5018];
        v241.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v242, &v241);
        v244 = 0;
        v245 = 0;
        v246 = 0;
        v247 = -1;
        v242.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v243 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v242);
        *(_QWORD *)&v258[8] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Wire_Resampler_Policy]";
        *(_QWORD *)&v258[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
        v259 = 42;
        std::vector<void *>::vector(&v235);
        v177 = backtrace((void **)v235, (*((_QWORD *)&v235 + 1) - (_QWORD)v235) >> 3);
        std::vector<void *>::resize((char **)&v235, v177);
        v238 = v235;
        v178 = v236;
        v236 = 0;
        v237 = off_1E69A20A0;
        v239 = v178;
        v235 = 0uLL;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v237);
        v175[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(v175, (const std::logic_error *)buf);
        v175->__vftable = (std::logic_error_vtbl *)(v176 + 16);
        v175[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v179 = *(_QWORD *)v258;
        v175[1].__imp_.__imp_ = *(const char **)v258;
        if (v179)
          (*(void (**)(uint64_t))(*(_QWORD *)v179 + 24))(v179);
        v180 = *(std::logic_error *)&v258[8];
        LODWORD(v175[3].__vftable) = v259;
        v175[2] = v180;
        v175->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        v175[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        v175[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      if (*((char *)v78 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v234, *((const std::string::value_type **)v78 + 1), *((_QWORD *)v78 + 2));
        v74 = v250;
      }
      else
      {
        v79 = *(_OWORD *)(v78 + 2);
        v234.__r_.__value_.__r.__words[2] = *((_QWORD *)v78 + 3);
        *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v79;
      }
      v80 = *(_QWORD *)(v74 + 56);
      if ((v80 & 0xFFFFFFFFFFFFFFFELL) != 0)
        v81 = (v80 & 0xFFFFFFFFFFFFFFFELL) - 56;
      else
        v81 = 0;
      boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&v250 + 8, v81);
      operator delete((void *)v250);
      minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v226, "ResamplerPolicy", (uint64_t)&v234);
      if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v234.__r_.__value_.__l.__data_);
      AMCP::get_enum_string_bimap<AMCP::Wire_Format_Conversion_Policy>();
      v249.__r_.__value_.__l.__size_ = (std::string::size_type)&v250 + 8;
      v82 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Format_Conversion_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v249.__r_.__value_.__r.__words[2]);
      v252 = (char *)&v250 + 8;
      v253 = (char *)&v250 + 8;
      v83 = v250;
      v84 = *(_QWORD *)(v250 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (!v84)
        goto LABEL_289;
      v85 = *((_DWORD *)v56 + 35);
      v86 = (_DWORD *)v250;
      do
      {
        while (*(_DWORD *)(v84 - 32) < v85)
        {
          v84 = *(_QWORD *)(v84 + 16);
          if (!v84)
            goto LABEL_168;
        }
        v86 = (_DWORD *)(v84 - 32);
        v84 = *(_QWORD *)(v84 + 8);
      }
      while (v84);
LABEL_168:
      if (v86 == (_DWORD *)v250 || (v85 >= *v86 ? (v87 = v86) : (v87 = (_DWORD *)v250), (_DWORD *)v250 == v87))
      {
LABEL_289:
        AMCP::Log::Scope_Registry::get(v82);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v181 = *(std::__shared_weak_count **)v255;
        v182 = **(NSObject ***)buf;
        if (*(_QWORD *)v255)
        {
          v183 = (unint64_t *)(*(_QWORD *)v255 + 8);
          do
            v184 = __ldaxr(v183);
          while (__stlxr(v184 - 1, v183));
          if (!v184)
          {
            ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
            std::__shared_weak_count::__release_weak(v181);
          }
        }
        if (os_log_type_enabled(v182, OS_LOG_TYPE_ERROR))
        {
          v185 = pthread_self();
          v186 = pthread_mach_thread_np(v185);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v186;
          *(_WORD *)v255 = 2080;
          *(_QWORD *)&v255[2] = "Graph_Description_Internal.h";
          v256 = 1024;
          v257 = 42;
          *(_WORD *)v258 = 2080;
          *(_QWORD *)&v258[2] = "not (found != map.left.end())";
          _os_log_error_impl(&dword_1B57BA000, v182, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v248);
        v187 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v240);
        std::logic_error::logic_error(&v241, &v240);
        v188 = MEMORY[0x1E0DE5018];
        v241.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v242, &v241);
        v244 = 0;
        v245 = 0;
        v246 = 0;
        v247 = -1;
        v242.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v243 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v242);
        *(_QWORD *)&v258[8] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Wire_Format_Conversion_Policy]";
        *(_QWORD *)&v258[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
        v259 = 42;
        std::vector<void *>::vector(&v235);
        v189 = backtrace((void **)v235, (*((_QWORD *)&v235 + 1) - (_QWORD)v235) >> 3);
        std::vector<void *>::resize((char **)&v235, v189);
        v238 = v235;
        v190 = v236;
        v236 = 0;
        v237 = off_1E69A20A0;
        v239 = v190;
        v235 = 0uLL;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v237);
        v187[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(v187, (const std::logic_error *)buf);
        v187->__vftable = (std::logic_error_vtbl *)(v188 + 16);
        v187[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v191 = *(_QWORD *)v258;
        v187[1].__imp_.__imp_ = *(const char **)v258;
        if (v191)
          (*(void (**)(uint64_t))(*(_QWORD *)v191 + 24))(v191);
        v192 = *(std::logic_error *)&v258[8];
        LODWORD(v187[3].__vftable) = v259;
        v187[2] = v192;
        v187->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        v187[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        v187[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      if (*((char *)v87 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v234, *((const std::string::value_type **)v87 + 1), *((_QWORD *)v87 + 2));
        v83 = v250;
      }
      else
      {
        v88 = *(_OWORD *)(v87 + 2);
        v234.__r_.__value_.__r.__words[2] = *((_QWORD *)v87 + 3);
        *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v88;
      }
      v89 = *(_QWORD *)(v83 + 56);
      if ((v89 & 0xFFFFFFFFFFFFFFFELL) != 0)
        v90 = (v89 & 0xFFFFFFFFFFFFFFFELL) - 56;
      else
        v90 = 0;
      boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&v250 + 8, v90);
      operator delete((void *)v250);
      minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v226, "FormatConversionPolicy", (uint64_t)&v234);
      if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v234.__r_.__value_.__l.__data_);
      AMCP::get_enum_string_bimap<AMCP::Wire_Drift_Correction_Policy>();
      v249.__r_.__value_.__l.__size_ = (std::string::size_type)&v250 + 8;
      v91 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Drift_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v249.__r_.__value_.__r.__words[2]);
      v252 = (char *)&v250 + 8;
      v253 = (char *)&v250 + 8;
      v92 = v250;
      v93 = *(_QWORD *)(v250 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (!v93)
        goto LABEL_299;
      v94 = *((_DWORD *)v56 + 36);
      v95 = (_DWORD *)v250;
      do
      {
        while (*(_DWORD *)(v93 - 32) < v94)
        {
          v93 = *(_QWORD *)(v93 + 16);
          if (!v93)
            goto LABEL_187;
        }
        v95 = (_DWORD *)(v93 - 32);
        v93 = *(_QWORD *)(v93 + 8);
      }
      while (v93);
LABEL_187:
      if (v95 == (_DWORD *)v250 || (v94 >= *v95 ? (v96 = v95) : (v96 = (_DWORD *)v250), (_DWORD *)v250 == v96))
      {
LABEL_299:
        AMCP::Log::Scope_Registry::get(v91);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v193 = *(std::__shared_weak_count **)v255;
        v194 = **(NSObject ***)buf;
        if (*(_QWORD *)v255)
        {
          v195 = (unint64_t *)(*(_QWORD *)v255 + 8);
          do
            v196 = __ldaxr(v195);
          while (__stlxr(v196 - 1, v195));
          if (!v196)
          {
            ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
            std::__shared_weak_count::__release_weak(v193);
          }
        }
        if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
        {
          v197 = pthread_self();
          v198 = pthread_mach_thread_np(v197);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v198;
          *(_WORD *)v255 = 2080;
          *(_QWORD *)&v255[2] = "Graph_Description_Internal.h";
          v256 = 1024;
          v257 = 42;
          *(_WORD *)v258 = 2080;
          *(_QWORD *)&v258[2] = "not (found != map.left.end())";
          _os_log_error_impl(&dword_1B57BA000, v194, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v248);
        v199 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v240);
        std::logic_error::logic_error(&v241, &v240);
        v200 = MEMORY[0x1E0DE5018];
        v241.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v242, &v241);
        v244 = 0;
        v245 = 0;
        v246 = 0;
        v247 = -1;
        v242.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v243 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v242);
        *(_QWORD *)&v258[8] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Wire_Drift_Correction_Policy]";
        *(_QWORD *)&v258[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
        v259 = 42;
        std::vector<void *>::vector(&v235);
        v201 = backtrace((void **)v235, (*((_QWORD *)&v235 + 1) - (_QWORD)v235) >> 3);
        std::vector<void *>::resize((char **)&v235, v201);
        v238 = v235;
        v202 = v236;
        v236 = 0;
        v237 = off_1E69A20A0;
        v239 = v202;
        v235 = 0uLL;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v237);
        v199[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(v199, (const std::logic_error *)buf);
        v199->__vftable = (std::logic_error_vtbl *)(v200 + 16);
        v199[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v203 = *(_QWORD *)v258;
        v199[1].__imp_.__imp_ = *(const char **)v258;
        if (v203)
          (*(void (**)(uint64_t))(*(_QWORD *)v203 + 24))(v203);
        v204 = *(std::logic_error *)&v258[8];
        LODWORD(v199[3].__vftable) = v259;
        v199[2] = v204;
        v199->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        v199[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        v199[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      if (*((char *)v96 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v234, *((const std::string::value_type **)v96 + 1), *((_QWORD *)v96 + 2));
        v92 = v250;
      }
      else
      {
        v97 = *(_OWORD *)(v96 + 2);
        v234.__r_.__value_.__r.__words[2] = *((_QWORD *)v96 + 3);
        *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v97;
      }
      v98 = *(_QWORD *)(v92 + 56);
      if ((v98 & 0xFFFFFFFFFFFFFFFELL) != 0)
        v99 = (v98 & 0xFFFFFFFFFFFFFFFELL) - 56;
      else
        v99 = 0;
      boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&v250 + 8, v99);
      operator delete((void *)v250);
      minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v226, "DriftCorrectionPolicy", (uint64_t)&v234);
      if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v234.__r_.__value_.__l.__data_);
      AMCP::get_enum_string_bimap<AMCP::Wire_Latency_Correction_Policy>();
      v249.__r_.__value_.__l.__size_ = (std::string::size_type)&v250 + 8;
      v100 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Latency_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v249.__r_.__value_.__r.__words[2]);
      v252 = (char *)&v250 + 8;
      v253 = (char *)&v250 + 8;
      v101 = v250;
      v102 = *(_QWORD *)(v250 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (!v102)
        goto LABEL_309;
      v103 = *((_DWORD *)v56 + 37);
      v104 = (_DWORD *)v250;
      do
      {
        while (*(_DWORD *)(v102 - 32) < v103)
        {
          v102 = *(_QWORD *)(v102 + 16);
          if (!v102)
            goto LABEL_206;
        }
        v104 = (_DWORD *)(v102 - 32);
        v102 = *(_QWORD *)(v102 + 8);
      }
      while (v102);
LABEL_206:
      if (v104 == (_DWORD *)v250 || (v103 >= *v104 ? (v105 = v104) : (v105 = (_DWORD *)v250), (_DWORD *)v250 == v105))
      {
LABEL_309:
        AMCP::Log::Scope_Registry::get(v100);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v205 = *(std::__shared_weak_count **)v255;
        v206 = **(NSObject ***)buf;
        if (*(_QWORD *)v255)
        {
          v207 = (unint64_t *)(*(_QWORD *)v255 + 8);
          do
            v208 = __ldaxr(v207);
          while (__stlxr(v208 - 1, v207));
          if (!v208)
          {
            ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
            std::__shared_weak_count::__release_weak(v205);
          }
        }
        if (os_log_type_enabled(v206, OS_LOG_TYPE_ERROR))
        {
          v209 = pthread_self();
          v210 = pthread_mach_thread_np(v209);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v210;
          *(_WORD *)v255 = 2080;
          *(_QWORD *)&v255[2] = "Graph_Description_Internal.h";
          v256 = 1024;
          v257 = 42;
          *(_WORD *)v258 = 2080;
          *(_QWORD *)&v258[2] = "not (found != map.left.end())";
          _os_log_error_impl(&dword_1B57BA000, v206, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v248);
        v211 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v240);
        std::logic_error::logic_error(&v241, &v240);
        v212 = MEMORY[0x1E0DE5018];
        v241.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v242, &v241);
        v244 = 0;
        v245 = 0;
        v246 = 0;
        v247 = -1;
        v242.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v243 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v242);
        *(_QWORD *)&v258[8] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Wire_Latency_Correction_Policy]";
        *(_QWORD *)&v258[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
        v259 = 42;
        std::vector<void *>::vector(&v235);
        v213 = backtrace((void **)v235, (*((_QWORD *)&v235 + 1) - (_QWORD)v235) >> 3);
        std::vector<void *>::resize((char **)&v235, v213);
        v238 = v235;
        v214 = v236;
        v236 = 0;
        v237 = off_1E69A20A0;
        v239 = v214;
        v235 = 0uLL;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v237);
        v211[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(v211, (const std::logic_error *)buf);
        v211->__vftable = (std::logic_error_vtbl *)(v212 + 16);
        v211[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v215 = *(_QWORD *)v258;
        v211[1].__imp_.__imp_ = *(const char **)v258;
        if (v215)
          (*(void (**)(uint64_t))(*(_QWORD *)v215 + 24))(v215);
        v216 = *(std::logic_error *)&v258[8];
        LODWORD(v211[3].__vftable) = v259;
        v211[2] = v216;
        v211->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        v211[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        v211[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      if (*((char *)v105 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v234, *((const std::string::value_type **)v105 + 1), *((_QWORD *)v105 + 2));
        v101 = v250;
      }
      else
      {
        v106 = *(_OWORD *)(v105 + 2);
        v234.__r_.__value_.__r.__words[2] = *((_QWORD *)v105 + 3);
        *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v106;
      }
      v107 = *(_QWORD *)(v101 + 56);
      if ((v107 & 0xFFFFFFFFFFFFFFFELL) != 0)
        v108 = (v107 & 0xFFFFFFFFFFFFFFFELL) - 56;
      else
        v108 = 0;
      boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&v250 + 8, v108);
      operator delete((void *)v250);
      minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v226, "LatencyCorrectionPolicy", (uint64_t)&v234);
      if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v234.__r_.__value_.__l.__data_);
      AMCP::enum_to_string<AMCP::Resampler_Type>(&v249, (int *)v56 + 38);
      minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v226, "ResamplerType", (uint64_t)&v249);
      if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v249.__r_.__value_.__l.__data_);
      AMCP::enum_to_string<AMCP::Resampler_Quality>(&v249, (int *)v56 + 39);
      minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v226, "ResamplerQuality", (uint64_t)&v249);
      if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v249.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v249, "MatchedTags");
      AMCP::write_json_array<std::string>((uint64_t)&v226, (char *)&v249, (uint64_t *)v56 + 21);
      if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v249.__r_.__value_.__l.__data_);
      minijson::writer::close(&v226);
      v56 += 192;
    }
    while (v56 != v217);
  }
  minijson::writer::close(&v230);
  if (v219 < 0)
    operator delete(v218.__vftable);
  v249.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v249);
  v249.__r_.__value_.__r.__words[0] = (std::string::size_type)&v223;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v249);
}

void sub_1B5C42608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  a49 = (uint64_t)&a15;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  a49 = (uint64_t)&a18;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *,false>(uint64_t a1, int *a2, uint64_t a3, char a4)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void **v15;
  void **v16;
  void ***v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  __int128 v30;
  void **v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  void ***v35;
  uint64_t m;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void **v43;
  void **v44;
  void ***v45;
  _QWORD *v46;
  unint64_t v47;
  int v48;
  int *v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  void **v55;
  __int128 v56;
  void **v57;
  unint64_t v58;
  __int128 v59;
  unint64_t v60;
  void ***v61;
  uint64_t k;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void ***v70;
  _QWORD *v71;
  _DWORD *v72;
  _DWORD *v73;
  _DWORD *v74;
  void **v75;
  void **v76;
  void **v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  __int128 v82;
  unint64_t v83;
  __int128 v84;
  _DWORD *v85;
  void ***v86;
  uint64_t n;
  int64_t v88;
  unint64_t v89;
  int64_t v90;
  uint64_t v91;
  _DWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  void ***v99;
  _QWORD *v100;
  _DWORD *v101;
  _DWORD *v102;
  void **v103;
  __int128 v104;
  void **v105;
  uint64_t v106;
  void **v107;
  __int128 v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  unint64_t v114;
  __int128 v115;
  _DWORD *v116;
  void ***v117;
  uint64_t i;
  int64_t v119;
  unint64_t v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  void ***v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void **v135;
  void **v136;
  __int128 v137;
  void **v138;
  uint64_t v139;
  void **v140;
  __int128 v141;
  uint64_t v142;
  _QWORD *v143;
  void **v144;
  __int128 v145;
  uint64_t v146;
  void **v147;
  __int128 v148;
  uint64_t v149;
  int *v150;
  __int128 v151;
  unint64_t v152;
  uint64_t v153;
  __int128 v154;
  int *v155;
  void ***v156;
  unint64_t v157;
  _DWORD *v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  void ***v162;
  _QWORD *v163;
  _DWORD *v164;
  _DWORD *v165;
  void **v166;
  __int128 v167;
  void **v168;
  uint64_t v169;
  void **v170;
  __int128 v171;
  uint64_t v172;
  _QWORD *v173;
  __int128 v174;
  unint64_t v175;
  __int128 v176;
  _DWORD *v177;
  void ***v178;
  uint64_t v179;
  __int128 v180;
  unint64_t v181;
  __int128 v182;
  unint64_t v183;
  void ***v184;
  uint64_t j;
  int *v187;
  int *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void ***v192;
  _QWORD *v193;
  _DWORD *v194;
  int *v195;
  _DWORD *v196;
  _DWORD *v197;
  void **v198;
  void **v199;
  uint64_t v200;
  void **v201;
  _DWORD *v202;
  __int128 v203;
  unint64_t v204;
  __int128 v205;
  _DWORD *v206;
  void ***v207;
  uint64_t v208;
  char *v209;
  unint64_t v210;
  __int128 *v211;
  __int128 *v213;
  int *v214;
  uint64_t v215;
  uint64_t v216;
  int64_t v217;
  int64_t v219;
  uint64_t v220;
  void ***v221;
  __int128 v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  _BYTE v228[48];
  void ***v229;
  void ***v230;
  __int128 v231;
  uint64_t v232;
  uint64_t v233;
  __int128 __p;
  uint64_t v235;
  uint64_t v236;
  _BYTE v237[56];

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::vector<std::string> *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 *v27;
  void **v28;
  __int128 v29;
  int v30;
  __int128 v31;
  int v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  void **v41;
  __int128 v42;
  int v43;
  void *v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  BOOL v48;
  BOOL v49;
  __int128 v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  __int128 v55;
  __int128 v56;
  unint64_t v57;
  int v58;
  __int128 *v59;
  void **v60;
  void **v61;
  __int128 v62;
  int v63;
  __int128 v64;
  int v65;
  void *v66;
  _QWORD *v67;
  void *v68;
  _QWORD *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  int v73;
  void **v74;
  __int128 v75;
  int v76;
  void *v77;
  void *v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void **v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  void *v97;
  _QWORD *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  std::vector<std::string> *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  std::vector<std::string>::pointer *p_end;
  std::vector<std::string>::pointer *v108;
  std::vector<std::string> *v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  int v114;
  void *v115;
  std::vector<std::string>::pointer v116;
  __int128 v117;
  __int128 v118;
  int64_t v119;
  int64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  int v134;
  void **v135;
  __int128 v136;
  uint64_t v137;
  _QWORD *v138;
  int v139;
  void *v140;
  void **v141;
  void *v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  void **v147;
  __int128 v148;
  int v149;
  __int128 v150;
  int v151;
  void *v152;
  void *v153;
  char v154;
  __int128 v155;
  int64_t v156;
  uint64_t v157;
  __int128 v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  uint64_t *v170;
  int v171;
  void **v172;
  __int128 v173;
  uint64_t v174;
  uint64_t *v175;
  int v176;
  void *v177;
  void **v178;
  void *v179;
  _QWORD *v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  _OWORD *v184;
  int v185;
  __int128 v186;
  uint64_t v187;
  int v188;
  __int128 v189;
  uint64_t v190;
  int v191;
  void *v192;
  void *v193;
  _QWORD *v194;
  __int128 v195;
  __int128 v196;
  std::vector<std::string> *v197;
  void **v198;
  __int128 v199;
  int v200;
  __int128 v201;
  int v202;
  void *v203;
  void *v204;
  unint64_t v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;
  __int128 v213;
  uint64_t v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  __int128 v218;
  uint64_t v219;
  _QWORD *v220;
  int v221;
  void **v222;
  __int128 v223;
  uint64_t v224;
  _QWORD *v225;
  int v226;
  void *v227;
  void **v228;
  void *v229;
  _QWORD *v230;
  __int128 v231;
  __int128 v232;
  void **v233;
  __int128 v234;
  int v235;
  __int128 v236;
  int v237;
  void *v238;
  void *v239;
  char v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  __int128 v244;
  int v245;
  void *v246;
  void *v247;
  __int128 v248;
  __int128 v249;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  __int128 v254;
  uint64_t v255;
  __int128 v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  void **v260;
  uint64_t v261;
  void *v262;
  _QWORD *v263;
  void *v264;
  void **v265;
  __int128 v266;
  std::vector<std::string> *v267;
  char v268;
  void **v269;
  unint64_t v270;
  void **v271;
  __int128 v272;
  int v273;
  unint64_t v274;
  _QWORD *v275;
  __int128 v276;
  int v277;
  void *v278;
  void *v279;
  __int128 v280;
  __int128 v281;
  _QWORD *v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  __int128 *v286;
  _QWORD *v287;
  __int128 *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  void **v293;
  __int128 *v294;
  void **v295;
  uint64_t v296;
  unint64_t v297;
  __int128 *v298;
  uint64_t v299;
  int64_t v300;
  int64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  void *v305[2];
  uint64_t v306;
  uint64_t v307;
  int v308;
  __int128 v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  void *v313[2];
  uint64_t v314;
  __int128 v315;
  uint64_t v316;
  __int128 v317;
  __int128 v318;
  char v319;
  __int128 v320;
  uint64_t v321;
  void **v322;
  void *v323[2];
  uint64_t v324;
  uint64_t v325;
  int v326;
  __int128 v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  void *v331[2];
  uint64_t v332;
  __int128 __p;
  uint64_t v334;
  __int128 v335;
  __int128 v336;
  char v337;
  __int128 v338;
  uint64_t v339;

uint64_t std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  char v37;

  v4 = std::__synth_three_way[abi:ne180100]<AMCP::Terminal_Identifier,AMCP::Terminal_Identifier>(a1, a2);
  if ((_BYTE)v4)
    return (v4 >> 7) & 1;
  v4 = std::__synth_three_way[abi:ne180100]<AMCP::Terminal_Identifier,AMCP::Terminal_Identifier>(a1 + 40, a2 + 40);
  if ((_BYTE)v4)
    return (v4 >> 7) & 1;
  v5 = *(_DWORD **)(a1 + 80);
  v6 = *(_DWORD **)(a2 + 80);
  v7 = *(_QWORD *)(a1 + 88) - (_QWORD)v5;
  v8 = v7 >> 2;
  v9 = (uint64_t)(*(_QWORD *)(a2 + 88) - (_QWORD)v6) >> 2;
  if (v9 >= v7 >> 2)
    v10 = v7 >> 2;
  else
    v10 = (uint64_t)(*(_QWORD *)(a2 + 88) - (_QWORD)v6) >> 2;
  if (v10 < 1)
  {
LABEL_9:
    v11 = v8 < v9;
    if (v8 == v9)
    {
      v12 = *(_DWORD **)(a1 + 104);
      v13 = *(_DWORD **)(a2 + 104);
      v14 = *(_QWORD *)(a1 + 112) - (_QWORD)v12;
      v15 = v14 >> 2;
      v16 = (uint64_t)(*(_QWORD *)(a2 + 112) - (_QWORD)v13) >> 2;
      if (v16 >= v14 >> 2)
        v17 = v14 >> 2;
      else
        v17 = (uint64_t)(*(_QWORD *)(a2 + 112) - (_QWORD)v13) >> 2;
      if (v17 >= 1)
      {
        while (*v12 == *v13)
        {
          ++v12;
          ++v13;
          if (!--v17)
            goto LABEL_16;
        }
        if (*v12 < *v13)
          v4 = -1;
        else
          v4 = 1;
        return (v4 >> 7) & 1;
      }
LABEL_16:
      v11 = v15 < v16;
      if (v15 == v16)
      {
        v18 = *(_DWORD *)(a1 + 128);
        v19 = *(_DWORD *)(a2 + 128);
        if (v18 < v19)
          v4 = -1;
        else
          v4 = 1;
        if (v18 == v19)
        {
          v20 = *(_DWORD *)(a1 + 132);
          v21 = *(_DWORD *)(a2 + 132);
          v4 = v20 < v21 ? -1 : 1;
          if (v20 == v21)
          {
            v22 = *(_DWORD *)(a1 + 136);
            v23 = *(_DWORD *)(a2 + 136);
            v4 = v22 < v23 ? -1 : 1;
            if (v22 == v23)
            {
              v24 = *(_DWORD *)(a1 + 152);
              v25 = *(_DWORD *)(a2 + 152);
              v4 = v24 < v25 ? -1 : 1;
              if (v24 == v25)
              {
                v26 = *(_DWORD *)(a1 + 156);
                v27 = *(_DWORD *)(a2 + 156);
                v4 = v26 < v27 ? -1 : 1;
                if (v26 == v27)
                {
                  v28 = *(_DWORD *)(a1 + 140);
                  v29 = *(_DWORD *)(a2 + 140);
                  v4 = v28 < v29 ? -1 : 1;
                  if (v28 == v29)
                  {
                    v30 = *(_DWORD *)(a1 + 144);
                    v31 = *(_DWORD *)(a2 + 144);
                    v4 = v30 < v31 ? -1 : 1;
                    if (v30 == v31)
                    {
                      v32 = *(_DWORD *)(a1 + 148);
                      v33 = *(_DWORD *)(a2 + 148);
                      v4 = v32 < v33 ? -1 : 1;
                      if (v32 == v33)
                      {
                        v34 = *(unsigned __int8 *)(a1 + 160);
                        v35 = *(unsigned __int8 *)(a2 + 160);
                        if (v34 < v35)
                          v4 = -1;
                        else
                          v4 = 1;
                        if (v34 == v35)
                        {
                          v36 = std::operator<=>[abi:ne180100]<std::string,std::allocator<std::string>>(*(_QWORD **)(a1 + 168), *(_QWORD *)(a1 + 176), *(_QWORD **)(a2 + 168), *(_QWORD *)(a2 + 176));
                          if (v36)
                            v4 = (v36 >> 7) | 1;
                          else
                            v4 = 0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return (v4 >> 7) & 1;
      }
    }
    v37 = !v11;
    if ((v37 & 1) != 0)
      v4 = 1;
    else
      v4 = -1;
    return (v4 >> 7) & 1;
  }
  while (*v5 == *v6)
  {
    ++v5;
    ++v6;
    if (!--v10)
      goto LABEL_9;
  }
  if (*v5 < *v6)
    v4 = -1;
  else
    v4 = 1;
  return (v4 >> 7) & 1;
}

void std::swap[abi:ne180100]<AMCP::Wire_Description>(std::vector<std::string> *this, __int128 *a2)
{
  std::string *value;
  std::vector<std::string>::pointer begin;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::vector<std::string>::pointer v7;
  std::__compressed_pair<std::string *> *v8;
  std::vector<std::string>::pointer *p_end;
  std::vector<std::string>::pointer v10;
  std::vector<std::string>::pointer *v11;
  std::vector<std::string> *v12;
  std::vector<std::string>::pointer v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  std::string *v18;
  int v19;
  std::string *v20;
  std::string *v21;
  __int128 v22;
  __int128 v23;
  void **v24;
  void *v25;
  void *v26;
  void **v27;
  std::vector<std::string>::pointer v28;
  std::string *v29;
  std::vector<std::string>::pointer v30;
  std::vector<std::string>::pointer v31;
  std::string *v32;
  std::string *v33;
  std::vector<std::string>::pointer v34;
  std::vector<std::string>::pointer v35;
  std::vector<std::string>::pointer v36;
  void *v37[2];
  std::string *v38;
  std::vector<std::string>::pointer v39;
  int end;
  void *v41[2];
  std::vector<std::string>::pointer v42;
  std::string *v43;
  int v44;
  __int128 v45;
  __int128 v46;
  char v47;
  std::vector<std::string>::pointer v48;
  std::vector<std::string>::pointer v49;
  std::string *v50;
  std::vector<std::string>::pointer *v51;

  *(_OWORD *)v37 = *(_OWORD *)&this->__begin_;
  value = this->__end_cap_.__value_;
  begin = this[1].__begin_;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  this->__begin_ = 0;
  v38 = value;
  v39 = begin;
  end = (int)this[1].__end_;
  p_end_cap = &this[1].__end_cap_;
  *(_OWORD *)v41 = *(_OWORD *)&this[1].__end_cap_.__value_;
  v7 = this[2].__end_;
  this[2].__begin_ = 0;
  this[2].__end_ = 0;
  this[1].__end_cap_.__value_ = 0;
  v8 = &this[2].__end_cap_;
  v44 = (int)this[3].__begin_;
  v42 = v7;
  v43 = this[2].__end_cap_.__value_;
  p_end = &this[3].__end_;
  v10 = this[4].__begin_;
  v29 = this[3].__end_cap_.__value_;
  v30 = this[3].__end_;
  this[3].__end_ = 0;
  this[3].__end_cap_.__value_ = 0;
  this[4].__begin_ = 0;
  v11 = &this[4].__end_;
  v28 = v10;
  v35 = this[4].__end_;
  v33 = this[4].__end_cap_.__value_;
  v31 = this[5].__begin_;
  this[4].__end_ = 0;
  this[4].__end_cap_.__value_ = 0;
  this[5].__begin_ = 0;
  v47 = (char)this[6].__end_cap_.__value_;
  v45 = *(_OWORD *)&this[5].__end_;
  v46 = *(_OWORD *)&this[6].__begin_;
  v12 = this + 7;
  v13 = this[7].__end_;
  v14 = this[7].__end_cap_.__value_;
  v36 = this[7].__begin_;
  v48 = v36;
  v49 = v13;
  v34 = v13;
  v32 = v14;
  v50 = v14;
  this[7].__begin_ = 0;
  this[7].__end_ = 0;
  this[7].__end_cap_.__value_ = 0;
  v15 = *a2;
  this->__end_cap_.__value_ = (std::string *)*((_QWORD *)a2 + 2);
  *(_OWORD *)&this->__begin_ = v15;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v16 = (uint64_t)a2 + 24;
  LODWORD(v13) = *((_DWORD *)a2 + 8);
  this[1].__begin_ = (std::vector<std::string>::pointer)*((_QWORD *)a2 + 3);
  LODWORD(this[1].__end_) = (_DWORD)v13;
  if (SHIBYTE(this[2].__end_) < 0)
    operator delete(p_end_cap->__value_);
  v17 = *(__int128 *)((char *)a2 + 40);
  p_end_cap[2].__value_ = *(std::string **)((char *)a2 + 56);
  *(_OWORD *)&p_end_cap->__value_ = v17;
  v18 = (std::string *)*((_QWORD *)a2 + 8);
  *((_BYTE *)a2 + 63) = 0;
  *((_BYTE *)a2 + 40) = 0;
  v19 = *((_DWORD *)a2 + 18);
  v8->__value_ = v18;
  LODWORD(v8[1].__value_) = v19;
  v20 = *p_end;
  if (*p_end)
  {
    this[3].__end_cap_.__value_ = v20;
    operator delete(v20);
    *p_end = 0;
    p_end[1] = 0;
    p_end[2] = 0;
  }
  *(_OWORD *)&this[3].__end_ = a2[5];
  this[4].__begin_ = (std::vector<std::string>::pointer)*((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  v27 = (void **)(a2 + 5);
  *((_QWORD *)a2 + 12) = 0;
  v21 = this[4].__end_;
  if (v21)
  {
    this[4].__end_cap_.__value_ = v21;
    operator delete(v21);
    *v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
  }
  *(_OWORD *)&this[4].__end_ = *(__int128 *)((char *)a2 + 104);
  this[5].__begin_ = (std::vector<std::string>::pointer)*((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  v22 = a2[8];
  v23 = a2[9];
  LOBYTE(this[6].__end_cap_.__value_) = *((_BYTE *)a2 + 160);
  *(_OWORD *)&this[5].__end_ = v22;
  *(_OWORD *)&this[6].__begin_ = v23;
  std::vector<std::string>::__vdeallocate(v12);
  *(_OWORD *)&this[7].__begin_ = *(__int128 *)((char *)a2 + 168);
  this[7].__end_cap_.__value_ = (std::string *)*((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  *((_QWORD *)a2 + 23) = 0;
  if (*((char *)a2 + 23) < 0)
    operator delete(*(void **)a2);
  v24 = (void **)a2 + 5;
  *a2 = *(_OWORD *)v37;
  *((_QWORD *)a2 + 2) = v38;
  *(_QWORD *)v16 = v39;
  *(_DWORD *)(v16 + 8) = end;
  if (*((char *)a2 + 63) < 0)
    operator delete(*v24);
  *(_OWORD *)v24 = *(_OWORD *)v41;
  *((_QWORD *)a2 + 7) = v42;
  *((_QWORD *)a2 + 8) = v43;
  *((_DWORD *)a2 + 18) = v44;
  v25 = *v27;
  if (*v27)
  {
    *((_QWORD *)a2 + 11) = v25;
    operator delete(v25);
  }
  *((_QWORD *)a2 + 10) = v30;
  *((_QWORD *)a2 + 11) = v29;
  *((_QWORD *)a2 + 12) = v28;
  v26 = (void *)*((_QWORD *)a2 + 13);
  if (v26)
  {
    *((_QWORD *)a2 + 14) = v26;
    operator delete(v26);
  }
  *((_QWORD *)a2 + 13) = v35;
  *((_QWORD *)a2 + 14) = v33;
  *((_QWORD *)a2 + 15) = v31;
  a2[8] = v45;
  a2[9] = v46;
  *((_BYTE *)a2 + 160) = v47;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)a2 + 7);
  *((_QWORD *)a2 + 21) = v36;
  *((_QWORD *)a2 + 22) = v34;
  *((_QWORD *)a2 + 23) = v32;
  v49 = 0;
  v50 = 0;
  v48 = 0;
  v51 = &v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>(std::vector<std::string> *a1, __int128 *a2, __int128 *a3)
{
  char v6;
  int v7;
  std::vector<std::string> *v8;

  v6 = std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a2, (uint64_t)a1);
  v7 = std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a3, (uint64_t)a2);
  if ((v6 & 1) != 0)
  {
    if (v7)
    {
      v8 = a1;
    }
    else
    {
      std::swap[abi:ne180100]<AMCP::Wire_Description>(a1, a2);
      if (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a3, (uint64_t)a2))return;
      v8 = (std::vector<std::string> *)a2;
    }
    std::swap[abi:ne180100]<AMCP::Wire_Description>(v8, a3);
  }
  else if (v7)
  {
    std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)a2, a3);
    if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a2, (uint64_t)a1))std::swap[abi:ne180100]<AMCP::Wire_Description>(a1, a2);
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>(std::vector<std::string> *a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>(a1, a2, a3);
  if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a4, (uint64_t)a3))
  {
    std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)a3, a4);
    if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a3, (uint64_t)a2))
    {
      std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)a2, a3);
      if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a2, (uint64_t)a1))std::swap[abi:ne180100]<AMCP::Wire_Description>(a1, a2);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>(std::vector<std::string> *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>(a1, a2, a3, a4);
  if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a5, (uint64_t)a4))
  {
    std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)a4, a5);
    if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a4, (uint64_t)a3))
    {
      std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)a3, a4);
      if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a3, (uint64_t)a2))
      {
        std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)a2, a3);
        if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a2, (uint64_t)a1))std::swap[abi:ne180100]<AMCP::Wire_Description>(a1, a2);
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  std::string *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  std::vector<std::string> *v27;
  char v28;
  std::vector<std::string> *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::vector<std::string>::pointer *v34;
  std::vector<std::string>::pointer *v35;
  std::vector<std::string>::pointer v36;
  void *v37;
  uint64_t v38;
  std::vector<std::string>::pointer v39;
  void *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::vector<std::string>::pointer *p_end;
  int v47;
  void *v48[2];
  uint64_t v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  std::string *v54;
  int v55;
  void *v56[2];
  uint64_t v57;
  void *__p[2];
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  char v62;
  __int128 v63;
  uint64_t v64;
  void **v65;

  v2 = a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 6);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 192);
      if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(a2 - 192, a1))std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)a1, v6);
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)a1, (__int128 *)(a1 + 192), (__int128 *)(a2 - 192));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)a1, (__int128 *)(a1 + 192), (__int128 *)(a1 + 384), (__int128 *)(a2 - 192));
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)a1, (__int128 *)(a1 + 192), (__int128 *)(a1 + 384), (__int128 *)(a1 + 576), (__int128 *)(a2 - 192));
      return 1;
    default:
      v7 = a1 + 384;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)a1, (__int128 *)(a1 + 192), (__int128 *)(a1 + 384));
      v8 = a1 + 576;
      if (a1 + 576 == v2)
        return 1;
      v9 = 0;
      v10 = 0;
      v45 = v2;
      break;
  }
  while (1)
  {
    if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v8, v7))
    {
      *(_OWORD *)v48 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v8 + 24);
      v49 = *(_QWORD *)(v8 + 16);
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)v8 = 0;
      v50 = v11;
      v51 = *(_DWORD *)(v8 + 32);
      v52 = *(_OWORD *)(v8 + 40);
      v12 = *(std::string **)(v8 + 64);
      v53 = *(_QWORD *)(v8 + 56);
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      v55 = *(_DWORD *)(v8 + 72);
      v54 = v12;
      *(_OWORD *)v56 = *(_OWORD *)(v8 + 80);
      v57 = *(_QWORD *)(v8 + 96);
      *(_QWORD *)(v8 + 80) = 0;
      *(_QWORD *)(v8 + 88) = 0;
      *(_OWORD *)__p = *(_OWORD *)(v8 + 104);
      v59 = *(_QWORD *)(v8 + 120);
      *(_QWORD *)(v8 + 96) = 0;
      *(_QWORD *)(v8 + 104) = 0;
      *(_QWORD *)(v8 + 112) = 0;
      *(_QWORD *)(v8 + 120) = 0;
      v13 = *(_OWORD *)(v8 + 128);
      v14 = *(_OWORD *)(v8 + 144);
      v62 = *(_BYTE *)(v8 + 160);
      v60 = v13;
      v61 = v14;
      v63 = *(_OWORD *)(v8 + 168);
      v64 = *(_QWORD *)(v8 + 184);
      *(_QWORD *)(v8 + 168) = 0;
      *(_QWORD *)(v8 + 176) = 0;
      v15 = v9;
      *(_QWORD *)(v8 + 184) = 0;
      v47 = v10;
      while (1)
      {
        v16 = v15;
        v17 = a1 + v15;
        v18 = a1 + v15 + 576;
        if (*(char *)(a1 + v15 + 599) < 0)
          operator delete(*(void **)v18);
        *(_OWORD *)v18 = *(_OWORD *)(v17 + 384);
        *(_QWORD *)(v18 + 16) = *(_QWORD *)(v17 + 400);
        *(_BYTE *)(v17 + 407) = 0;
        *(_BYTE *)(v17 + 384) = 0;
        *(_QWORD *)(v17 + 600) = *(_QWORD *)(v17 + 408);
        *(_DWORD *)(v17 + 608) = *(_DWORD *)(v17 + 416);
        v19 = v17 + 616;
        if (*(char *)(v17 + 639) < 0)
          operator delete(*(void **)v19);
        v20 = a1 + v16;
        v21 = *(_QWORD *)(a1 + v16 + 448);
        *(_QWORD *)(v19 + 16) = *(_QWORD *)(a1 + v16 + 440);
        *(_OWORD *)v19 = *(_OWORD *)(a1 + v16 + 424);
        *(_BYTE *)(v20 + 447) = 0;
        *(_BYTE *)(v20 + 424) = 0;
        *(_QWORD *)(v20 + 640) = v21;
        *(_DWORD *)(v20 + 648) = *(_DWORD *)(a1 + v16 + 456);
        v22 = *(void **)(a1 + v16 + 656);
        if (v22)
        {
          *(_QWORD *)(v20 + 664) = v22;
          operator delete(v22);
          *(_QWORD *)(v20 + 672) = 0;
        }
        *(_OWORD *)(v20 + 656) = *(_OWORD *)(v20 + 464);
        *(_QWORD *)(v20 + 672) = *(_QWORD *)(v20 + 480);
        *(_QWORD *)(v20 + 464) = 0;
        *(_QWORD *)(v20 + 472) = 0;
        *(_QWORD *)(v20 + 480) = 0;
        v23 = *(void **)(v20 + 680);
        if (v23)
        {
          *(_QWORD *)(a1 + v16 + 688) = v23;
          operator delete(v23);
          *(_QWORD *)(a1 + v16 + 696) = 0;
        }
        v24 = v20 + 488;
        *(_OWORD *)(v20 + 680) = *(_OWORD *)(v20 + 488);
        v25 = a1 + v16;
        *(_QWORD *)(v25 + 696) = *(_QWORD *)(a1 + v16 + 504);
        *(_OWORD *)v24 = 0u;
        *(_QWORD *)(v24 + 16) = 0;
        v26 = *(_OWORD *)(a1 + v16 + 528);
        *(_OWORD *)(v25 + 704) = *(_OWORD *)(a1 + v16 + 512);
        *(_OWORD *)(v25 + 720) = v26;
        *(_BYTE *)(v25 + 736) = *(_BYTE *)(a1 + v16 + 544);
        v27 = (std::vector<std::string> *)(a1 + v16 + 552);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + v16 + 744));
        *(_OWORD *)(a1 + v16 + 744) = *(_OWORD *)&v27->__begin_;
        *(_QWORD *)(v25 + 760) = *(_QWORD *)(v25 + 568);
        *(_QWORD *)(v25 + 568) = 0;
        *(_OWORD *)&v27->__begin_ = 0u;
        if (v16 == -384)
          break;
        v28 = std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v48, v25 + 192);
        v15 = v16 - 192;
        if ((v28 & 1) == 0)
        {
          v29 = (std::vector<std::string> *)(a1 + v16);
          v30 = a1 + v16 + 408;
          v31 = a1 + v16 + 424;
          v32 = a1 + v15 + 576;
          v27 = v29 + 23;
          p_end = &v29[21].__end_;
          p_end_cap = &v29[18].__end_cap_;
          v34 = &v29[20].__end_;
          v35 = &v29[19].__end_;
          goto LABEL_20;
        }
      }
      v30 = v25 + 408;
      v31 = v25 + 424;
      p_end = (std::vector<std::string>::pointer *)(v25 + 512);
      p_end_cap = (std::__compressed_pair<std::string *> *)(v25 + 448);
      v34 = (std::vector<std::string>::pointer *)(v25 + 488);
      v35 = (std::vector<std::string>::pointer *)(v25 + 464);
      v32 = a1;
LABEL_20:
      if (*(char *)(v32 + 23) < 0)
        operator delete(*(void **)v32);
      *(_OWORD *)v32 = *(_OWORD *)v48;
      *(_QWORD *)(v32 + 16) = v49;
      HIBYTE(v49) = 0;
      LOBYTE(v48[0]) = 0;
      *(_QWORD *)v30 = v50;
      *(_DWORD *)(v30 + 8) = v51;
      if (*(char *)(v32 + 63) < 0)
        operator delete(*(void **)v31);
      *(_OWORD *)v31 = v52;
      *(_QWORD *)(v31 + 16) = v53;
      HIBYTE(v53) = 0;
      LOBYTE(v52) = 0;
      p_end_cap->__value_ = v54;
      LODWORD(p_end_cap[1].__value_) = v55;
      v36 = *v35;
      if (*v35)
      {
        *(_QWORD *)(v32 + 88) = v36;
        operator delete(v36);
        *v35 = 0;
        v35[1] = 0;
        v35[2] = 0;
      }
      v37 = v56[1];
      *v35 = (std::vector<std::string>::pointer)v56[0];
      v38 = v57;
      *(_QWORD *)(v32 + 88) = v37;
      *(_QWORD *)(v32 + 96) = v38;
      v56[1] = 0;
      v57 = 0;
      v56[0] = 0;
      v39 = *v34;
      v2 = v45;
      if (*v34)
      {
        *(_QWORD *)(v32 + 112) = v39;
        operator delete(v39);
        *v34 = 0;
        v34[1] = 0;
        v34[2] = 0;
      }
      v40 = __p[1];
      *v34 = (std::vector<std::string>::pointer)__p[0];
      v41 = v59;
      *(_QWORD *)(v32 + 112) = v40;
      *(_QWORD *)(v32 + 120) = v41;
      __p[1] = 0;
      v59 = 0;
      __p[0] = 0;
      v42 = v61;
      *(_OWORD *)p_end = v60;
      *((_OWORD *)p_end + 1) = v42;
      *((_BYTE *)p_end + 32) = v62;
      std::vector<std::string>::__vdeallocate(v27);
      v43 = *((_QWORD *)&v63 + 1);
      v27->__begin_ = (std::vector<std::string>::pointer)v63;
      v44 = v64;
      *(_QWORD *)(v32 + 176) = v43;
      *(_QWORD *)(v32 + 184) = v44;
      v64 = 0;
      v63 = 0uLL;
      v65 = (void **)&v63;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v65);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v56[0])
      {
        v56[1] = v56[0];
        operator delete(v56[0]);
      }
      if (SHIBYTE(v53) < 0)
        operator delete((void *)v52);
      if (SHIBYTE(v49) < 0)
        operator delete(v48[0]);
      v10 = v47 + 1;
      if (v47 == 7)
        return v8 + 192 == v45;
    }
    v7 = v8;
    v9 += 192;
    v8 += 192;
    if (v8 == v2)
      return 1;
  }
}

uint64_t std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned int v4;
  char v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = (uint64_t *)(a1 + 72);
  v3 = (uint64_t *)(a2 + 72);
  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    v4 = -1;
  else
    v4 = 1;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    v7 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 8), (_QWORD *)(a2 + 8));
    if (v7)
    {
LABEL_6:
      v4 = (v7 >> 7) | 1;
      return (v4 >> 7) & 1;
    }
    v8 = *(_DWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a2 + 32);
    v10 = v8 == v9;
    if (v8 < v9)
      v4 = -1;
    else
      v4 = 1;
    if (v10)
    {
      v11 = *(_DWORD *)(a1 + 36);
      v12 = *(_DWORD *)(a2 + 36);
      v13 = v11 == v12;
      v4 = v11 < v12 ? -1 : 1;
      if (v13)
      {
        v7 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 40), (_QWORD *)(a2 + 40));
        if (v7)
          goto LABEL_6;
        v14 = *(_DWORD *)(a1 + 64);
        v15 = *(_DWORD *)(a2 + 64);
        v16 = v14 == v15;
        if (v14 < v15)
          v4 = -1;
        else
          v4 = 1;
        if (v16)
        {
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *v3;
            v20 = 0x4EC4EC4EC4EC4EC5 * ((v2[1] - *v2) >> 3);
            v21 = (v3[1] - *v3) >> 3;
            v22 = 0x4EC4EC4EC4EC4EC5 * v21;
            v23 = 0x4EC4EC4EC4EC4EC5 * v21 >= v20
                ? 0x4EC4EC4EC4EC4EC5 * ((v2[1] - *v2) >> 3)
                : 0x4EC4EC4EC4EC4EC5 * v21;
            if (v23 >= 1)
              break;
LABEL_31:
            v2 += 3;
            v3 += 3;
            ++v17;
            if (v20 != v22 || v17 == 2)
            {
              if (v20 < v22)
                v4 = -1;
              else
                v4 = 1;
              if (v20 == v22)
              {
                v28 = *(_DWORD *)(a1 + 68);
                v29 = *(_DWORD *)(a2 + 68);
                v30 = v28 == v29;
                if (v28 < v29)
                  v4 = -1;
                else
                  v4 = 1;
                if (v30)
                  v4 = 0;
              }
              return (v4 >> 7) & 1;
            }
          }
          while (1)
          {
            v37 = v18;
            v38 = v18 + 40;
            v39 = v18 + 88;
            v40 = v18 + 92;
            v24 = v18 + 96;
            v41 = v18 + 96;
            v32 = v19;
            v33 = v19 + 40;
            v34 = v19 + 88;
            v35 = v19 + 92;
            v25 = v19 + 96;
            v36 = v19 + 96;
            if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>(&v37, &v32) & 0x80) != 0)
            {
              v4 = 255;
              return (v4 >> 7) & 1;
            }
            v37 = v25 - 96;
            v38 = v25 - 56;
            v39 = v25 - 8;
            v40 = v25 - 4;
            v41 = v25;
            v32 = v24 - 96;
            v33 = v24 - 56;
            v34 = v24 - 8;
            v35 = v24 - 4;
            v36 = v24;
            v26 = std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>(&v37, &v32);
            if (v26 < 0)
              break;
            v18 = v24 + 8;
            v19 = v25 + 8;
            if (!--v23)
              goto LABEL_31;
          }
          v4 = (v26 >> 7) & 1;
        }
      }
    }
  }
  return (v4 >> 7) & 1;
}

void std::swap[abi:ne180100]<AMCP::Node_Description>(int *a1, int *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int *v12;
  __int128 v13;
  void **v14;
  uint64_t v15;
  void **v16;
  __int128 v17;
  int *v18;
  int *v19;
  unint64_t v20;
  int *v21;
  _QWORD *v22;
  uint64_t i;
  _DWORD v24[2];
  void *v25[2];
  uint64_t v26;
  uint64_t v27;
  void *__p[2];
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[48];
  void **v32;

  v4 = 0;
  v5 = *a1;
  v24[0] = *a1;
  *(_OWORD *)v25 = *(_OWORD *)(a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v6 = *((_QWORD *)a1 + 3);
  v7 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 3) = 0;
  v26 = v6;
  v27 = v7;
  v8 = a1 + 10;
  *(_OWORD *)__p = *(_OWORD *)(a1 + 10);
  *((_QWORD *)a1 + 5) = 0;
  *((_QWORD *)a1 + 6) = 0;
  v9 = *((_QWORD *)a1 + 7);
  v10 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 7) = 0;
  v29 = v9;
  v30 = v10;
  do
  {
    v11 = &v24[v4];
    v12 = &a1[v4];
    *(_OWORD *)(v11 + 18) = *(_OWORD *)&a1[v4 + 18];
    *((_QWORD *)v11 + 11) = *(_QWORD *)&a1[v4 + 22];
    *((_QWORD *)v12 + 9) = 0;
    *((_QWORD *)v12 + 10) = 0;
    *((_QWORD *)v12 + 11) = 0;
    v4 += 6;
  }
  while (v4 != 12);
  *a1 = *a2;
  v13 = *(_OWORD *)(a2 + 2);
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  *(_OWORD *)(a1 + 2) = v13;
  *((_BYTE *)a2 + 31) = 0;
  *((_BYTE *)a2 + 8) = 0;
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  v14 = (void **)(a2 + 10);
  if (*((char *)a1 + 63) < 0)
    operator delete(*(void **)v8);
  v15 = 0;
  v16 = (void **)(a2 + 2);
  v17 = *(_OWORD *)v14;
  *((_QWORD *)v8 + 2) = *((_QWORD *)a2 + 7);
  *(_OWORD *)v8 = v17;
  *((_BYTE *)a2 + 63) = 0;
  *((_BYTE *)a2 + 40) = 0;
  *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
  do
  {
    v18 = &a1[v15];
    v19 = &a2[v15];
    std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)&a1[v15 + 18]);
    *(_OWORD *)(v18 + 18) = *(_OWORD *)&a2[v15 + 18];
    *((_QWORD *)v18 + 11) = *(_QWORD *)&a2[v15 + 22];
    *((_QWORD *)v19 + 9) = 0;
    *((_QWORD *)v19 + 10) = 0;
    *((_QWORD *)v19 + 11) = 0;
    v15 += 6;
  }
  while (v15 != 12);
  *a2 = v5;
  if (*((char *)a2 + 31) < 0)
    operator delete(*v16);
  *(_OWORD *)v16 = *(_OWORD *)v25;
  *((_QWORD *)a2 + 3) = v26;
  HIBYTE(v26) = 0;
  LOBYTE(v25[0]) = 0;
  *((_QWORD *)a2 + 4) = v7;
  if (*((char *)a2 + 63) < 0)
    operator delete(*v14);
  v20 = 0;
  *(_OWORD *)v14 = *(_OWORD *)__p;
  *((_QWORD *)a2 + 7) = v29;
  HIBYTE(v29) = 0;
  LOBYTE(__p[0]) = 0;
  *((_QWORD *)a2 + 8) = v10;
  do
  {
    v21 = &a2[v20];
    v22 = &v24[v20];
    std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)&a2[v20 + 18]);
    *(_OWORD *)(v21 + 18) = *(_OWORD *)&v31[v20 * 4];
    *((_QWORD *)v21 + 11) = *(_QWORD *)&v31[v20 * 4 + 16];
    v22[10] = 0;
    v22[11] = 0;
    v22[9] = 0;
    v20 += 6;
  }
  while (v20 != 12);
  for (i = 24; i != 12; i -= 6)
  {
    v32 = (void **)&v24[i];
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](&v32);
  }
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(v25[0]);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(int *a1, int *a2, int *a3)
{
  char v6;
  int v7;
  int *v8;

  v6 = std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a2, (uint64_t)a1);
  v7 = std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a3, (uint64_t)a2);
  if ((v6 & 1) != 0)
  {
    if (v7)
    {
      v8 = a1;
    }
    else
    {
      std::swap[abi:ne180100]<AMCP::Node_Description>(a1, a2);
      if (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a3, (uint64_t)a2))return;
      v8 = a2;
    }
    std::swap[abi:ne180100]<AMCP::Node_Description>(v8, a3);
  }
  else if (v7)
  {
    std::swap[abi:ne180100]<AMCP::Node_Description>(a2, a3);
    if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a2, (uint64_t)a1))std::swap[abi:ne180100]<AMCP::Node_Description>(a1, a2);
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(int *a1, int *a2, int *a3, int *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(a1, a2, a3);
  if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a4, (uint64_t)a3))
  {
    std::swap[abi:ne180100]<AMCP::Node_Description>(a3, a4);
    if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a3, (uint64_t)a2))
    {
      std::swap[abi:ne180100]<AMCP::Node_Description>(a2, a3);
      if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a2, (uint64_t)a1))std::swap[abi:ne180100]<AMCP::Node_Description>(a1, a2);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(a1, a2, a3, a4);
  if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a5, (uint64_t)a4))
  {
    std::swap[abi:ne180100]<AMCP::Node_Description>(a4, a5);
    if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a4, (uint64_t)a3))
    {
      std::swap[abi:ne180100]<AMCP::Node_Description>(a3, a4);
      if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a3, (uint64_t)a2))
      {
        std::swap[abi:ne180100]<AMCP::Node_Description>(a2, a3);
        if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a2, (uint64_t)a1))std::swap[abi:ne180100]<AMCP::Node_Description>(a1, a2);
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(int *a1, int *a2)
{
  int *v2;
  unint64_t v4;
  _BOOL8 result;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  __int128 v28;
  unint64_t v29;
  __int128 v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  __int128 v34;
  uint64_t v35;
  int *v36;
  int *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD v41[2];
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 __p;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[48];
  void **v49;

  v2 = a2;
  v4 = 0xEEEEEEEEEEEEEEEFLL * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 30;
      if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)(a2 - 30), (uint64_t)a1))std::swap[abi:ne180100]<AMCP::Node_Description>(a1, v6);
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(a1, a1 + 30, a2 - 30);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(a1, a1 + 30, a1 + 60, a2 - 30);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(a1, a1 + 30, a1 + 60, a1 + 90, a2 - 30);
      return 1;
    default:
      v7 = (uint64_t)(a1 + 60);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(a1, a1 + 30, a1 + 60);
      v8 = (uint64_t)(a1 + 90);
      if (a1 + 90 == v2)
        return 1;
      v9 = 0;
      v10 = 0;
      v36 = v2;
      v11 = a1;
      break;
  }
  while (1)
  {
    if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(v8, v7))
    {
      v38 = v10;
      v12 = 0;
      v41[0] = *(_DWORD *)v8;
      v13 = *(_QWORD *)(v8 + 32);
      v43 = *(_QWORD *)(v8 + 24);
      v14 = *(_QWORD *)(v8 + 64);
      v46 = *(_QWORD *)(v8 + 56);
      v44 = v13;
      v47 = v14;
      v42 = *(_OWORD *)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      __p = *(_OWORD *)(v8 + 40);
      *(_QWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      do
      {
        v15 = &v41[v12];
        v16 = &v11[v12];
        *(_OWORD *)(v15 + 18) = *(_OWORD *)&v11[v12 + 108];
        *((_QWORD *)v15 + 11) = *(_QWORD *)&v11[v12 + 112];
        *((_QWORD *)v16 + 54) = 0;
        *((_QWORD *)v16 + 55) = 0;
        *((_QWORD *)v16 + 56) = 0;
        v12 += 6;
      }
      while (v12 != 12);
      v37 = v11;
      v39 = v9;
      v40 = v8;
      v17 = v9;
      while (1)
      {
        v18 = v7;
        v19 = v17;
        v20 = v7 + 8;
        *(_DWORD *)v8 = *(_DWORD *)v7;
        v21 = (void **)(v8 + 8);
        if (*(char *)(v8 + 31) < 0)
          operator delete(*v21);
        *(_OWORD *)v21 = *(_OWORD *)v20;
        *(_QWORD *)(v8 + 24) = *(_QWORD *)(v7 + 24);
        *(_BYTE *)(v7 + 31) = 0;
        *(_BYTE *)(v7 + 8) = 0;
        *(_QWORD *)(v8 + 32) = *(_QWORD *)(v7 + 32);
        v22 = (void **)(v8 + 40);
        if (*(char *)(v8 + 63) < 0)
          operator delete(*v22);
        v23 = v18 + 40;
        *(_OWORD *)v22 = *(_OWORD *)(v18 + 40);
        *(_QWORD *)(v8 + 56) = *(_QWORD *)(v18 + 56);
        *(_BYTE *)(v18 + 63) = 0;
        *(_BYTE *)(v18 + 40) = 0;
        *(_QWORD *)(v8 + 64) = *(_QWORD *)(v18 + 64);
        v24 = v19;
        v25 = 2;
        do
        {
          v26 = (char *)a1 + v24;
          std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)((char *)a1 + v24 + 432));
          *((_OWORD *)v26 + 27) = *(_OWORD *)((char *)a1 + v24 + 312);
          *((_QWORD *)v26 + 56) = *((_QWORD *)v26 + 41);
          *((_QWORD *)v26 + 40) = 0;
          *((_QWORD *)v26 + 41) = 0;
          *((_QWORD *)v26 + 39) = 0;
          v24 += 24;
          --v25;
        }
        while (v25);
        if ((int *)v18 == a1)
          break;
        v7 = v18 - 120;
        v27 = std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)v41, v18 - 120);
        v17 = v19 - 120;
        v8 = v18;
        if ((v27 & 1) == 0)
          goto LABEL_20;
      }
      v18 = (uint64_t)a1;
LABEL_20:
      *(_DWORD *)v18 = v41[0];
      if (*(char *)(v18 + 31) < 0)
        operator delete(*(void **)v20);
      v28 = v42;
      *(_QWORD *)(v20 + 16) = v43;
      *(_OWORD *)v20 = v28;
      HIBYTE(v43) = 0;
      LOBYTE(v42) = 0;
      *(_QWORD *)(v18 + 32) = v44;
      if (*(char *)(v18 + 63) < 0)
        operator delete(*(void **)v23);
      v29 = 0;
      v30 = __p;
      *(_QWORD *)(v23 + 16) = v46;
      *(_OWORD *)v23 = v30;
      HIBYTE(v46) = 0;
      LOBYTE(__p) = 0;
      *(_QWORD *)(v18 + 64) = v47;
      v31 = (char *)a1 + v19 + 328;
      v32 = (char *)a1 + v19;
      do
      {
        v33 = &v41[v29 / 4];
        std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)&v32[v29 + 312]);
        v34 = *(_OWORD *)&v48[v29];
        *(_QWORD *)&v31[v29] = *(_QWORD *)&v48[v29 + 16];
        *(_OWORD *)&v32[v29 + 312] = v34;
        v33[10] = 0;
        v33[11] = 0;
        v33[9] = 0;
        v29 += 24;
      }
      while (v29 != 48);
      v10 = v38 + 1;
      v35 = 24;
      v11 = v37;
      do
      {
        v49 = (void **)&v41[v35];
        std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](&v49);
        v35 -= 6;
      }
      while (v35 != 12);
      v9 = v39;
      v8 = v40;
      if (SHIBYTE(v46) < 0)
        operator delete((void *)__p);
      v2 = v36;
      if (SHIBYTE(v43) < 0)
        operator delete((void *)v42);
      if (v38 == 7)
        return v40 + 120 == (_QWORD)v36;
    }
    v7 = v8;
    v11 += 30;
    v9 += 120;
    v8 += 120;
    if ((int *)v8 == v2)
      return 1;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *,false>(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  __int128 *v26;
  char v27;
  char v28;
  __int128 *v29;
  _QWORD *v30;
  _QWORD *v31;
  void **v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  void **v37;
  __int128 v38;
  uint64_t v39;
  BOOL v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;
  char v45;
  uint64_t *v46;
  char v47;
  __int128 *v48;
  unint64_t v49;
  char v50;
  _QWORD *v51;
  _QWORD *v52;
  void **v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  void **v58;
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  __int128 *v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  void **v71;
  char *v72;
  uint64_t v73;
  char v74;
  uint64_t *v75;
  char *v76;
  _QWORD *v77;
  char *v78;
  char v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  int64_t v83;
  int64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  char v88;
  uint64_t *v89;
  __int128 *v90;
  char v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t *v95;
  __int128 v96;
  void **v97;
  __int128 v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  void **v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  int v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  void **v118;
  __int128 v119;
  uint64_t v120;
  uint64_t *v121;
  void **v122;
  void **v123;
  int v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t *v134;
  __int128 v135;
  void **v136;
  __int128 v137;
  uint64_t v138;
  _QWORD *v139;
  void **v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  int v145;
  __int128 v146;
  uint64_t v147;
  uint64_t *v148;
  _QWORD *v149;
  uint64_t *v150;
  __int128 *v151;
  __int128 v152;
  _QWORD *v153;
  _QWORD *v154;
  void **v155;
  void **v156;
  void **v157;
  uint64_t v158;
  char v159;
  void **v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  _QWORD *v166;
  void **v167;
  uint64_t *v168;
  uint64_t *v169;
  int64_t v171;
  char v172;
  int64_t v174;
  char v175;
  uint64_t *v176;
  char v177;
  _BYTE v178[15];
  __int128 v179;
  _BYTE v180[22];
  __int128 v181;
  _BYTE v182[22];
  void *v183[2];
  uint64_t v184;
  __int128 __p;
  uint64_t v186;
  _QWORD v187[4];

  v187[2] = *MEMORY[0x1E0C80C00];
LABEL_2:
  v6 = a1;
  v168 = a1 + 16;
  v169 = a1 + 8;
  v7 = a1 + 3;
  v166 = a1 + 4;
  v167 = (void **)(a1 + 1);
  v8 = a1 + 6;
  v164 = a1 - 5;
  v165 = a1 - 8;
  while (2)
  {
    v9 = a2 - (_QWORD)v6;
    v10 = (uint64_t)(a2 - (_QWORD)v6) >> 6;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>((_QWORD *)(a2 - 64), (_QWORD *)(a2 - 40), v6, v6 + 3) & 0x80) != 0)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(v6, (__int128 *)(a2 - 64));
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(v6, v6 + 8, (__int128 *)(a2 - 64));
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(v6, v6 + 8, (uint64_t)(v6 + 16), a2 - 64);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(v6, v6 + 8, v6 + 16, v6 + 24, a2 - 64);
        return;
      default:
        if (v9 > 1535)
        {
          v176 = (uint64_t *)a2;
          if (!a3)
          {
            if (v6 != (uint64_t *)a2)
            {
              v174 = (v10 - 2) >> 1;
              v83 = v174;
              do
              {
                v84 = v83;
                if (v174 >= v83)
                {
                  v85 = (2 * v83) | 1;
                  v86 = &v6[8 * v85];
                  v87 = 2 * v83 + 2;
                  v171 = v83;
                  if (v87 < (uint64_t)v10)
                  {
                    v88 = std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(&v6[8 * v85], v86 + 3, v86 + 8, v86 + 11);
                    v84 = v171;
                    if (v88 < 0)
                    {
                      v86 += 8;
                      v85 = v87;
                    }
                  }
                  v89 = &v6[8 * v84];
                  v90 = (__int128 *)(v89 + 3);
                  v91 = std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v86, v86 + 3, v89, v89 + 3);
                  v84 = v171;
                  if ((v91 & 0x80) == 0)
                  {
                    v92 = *(_OWORD *)v89;
                    v184 = v89[2];
                    *(_OWORD *)v183 = v92;
                    v89[1] = 0;
                    v89[2] = 0;
                    *v89 = 0;
                    v93 = *v90;
                    v186 = v89[5];
                    __p = v93;
                    v89[4] = 0;
                    v89[5] = 0;
                    *(_QWORD *)v90 = 0;
                    v94 = v89[6];
                    *(_QWORD *)((char *)v187 + 7) = *(uint64_t *)((char *)v89 + 55);
                    v187[0] = v94;
                    do
                    {
                      v95 = v86;
                      if (*((char *)v89 + 23) < 0)
                        operator delete((void *)*v89);
                      v96 = *(_OWORD *)v86;
                      v89[2] = v86[2];
                      *(_OWORD *)v89 = v96;
                      *((_BYTE *)v86 + 23) = 0;
                      *(_BYTE *)v86 = 0;
                      v97 = (void **)(v89 + 3);
                      if (*((char *)v89 + 47) < 0)
                        operator delete(*v97);
                      v98 = *(_OWORD *)(v86 + 3);
                      v89[5] = v86[5];
                      *(_OWORD *)v97 = v98;
                      v100 = v86 + 6;
                      v99 = v86[6];
                      *((_BYTE *)v86 + 47) = 0;
                      *((_BYTE *)v86 + 24) = 0;
                      *(uint64_t *)((char *)v89 + 55) = *(uint64_t *)((char *)v86 + 55);
                      v89[6] = v99;
                      if (v174 < v85)
                        break;
                      v101 = (2 * v85) | 1;
                      v86 = &v6[8 * v101];
                      v102 = 2 * v85 + 2;
                      if (v102 < (uint64_t)v10
                        && (std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(&v6[8 * v101], v86 + 3, v86 + 8, v86 + 11) & 0x80u) != 0)
                      {
                        v86 += 8;
                        v101 = v102;
                      }
                      v89 = v95;
                      v85 = v101;
                      a2 = (unint64_t)v176;
                    }
                    while ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v86, v86 + 3, v183, &__p) & 0x80) == 0);
                    if (*((char *)v95 + 23) < 0)
                      operator delete((void *)*v95);
                    v103 = (void **)(v95 + 3);
                    v104 = *(_OWORD *)v183;
                    v95[2] = v184;
                    *(_OWORD *)v95 = v104;
                    HIBYTE(v184) = 0;
                    LOBYTE(v183[0]) = 0;
                    if (*((char *)v95 + 47) < 0)
                    {
                      operator delete(*v103);
                      v107 = SHIBYTE(v184);
                      v108 = __p;
                      v95[5] = v186;
                      *(_OWORD *)v103 = v108;
                      HIBYTE(v186) = 0;
                      LOBYTE(__p) = 0;
                      v109 = v187[0];
                      *(uint64_t *)((char *)v95 + 55) = *(_QWORD *)((char *)v187 + 7);
                      *v100 = v109;
                      if (v107 < 0)
                        operator delete(v183[0]);
                    }
                    else
                    {
                      v105 = __p;
                      v95[5] = v186;
                      *(_OWORD *)v103 = v105;
                      v106 = v187[0];
                      *(uint64_t *)((char *)v95 + 55) = *(_QWORD *)((char *)v187 + 7);
                      *v100 = v106;
                    }
                    v84 = v171;
                  }
                }
                v83 = v84 - 1;
              }
              while (v84);
              v110 = (unint64_t)v9 >> 6;
              do
              {
                if (v110 >= 2)
                {
                  v111 = 0;
                  v112 = *(_BYTE *)v6;
                  *(_QWORD *)&v182[14] = *(uint64_t *)((char *)v6 + 15);
                  *(_OWORD *)v182 = *(_OWORD *)((char *)v6 + 1);
                  v172 = *((_BYTE *)v6 + 23);
                  v6[1] = 0;
                  v6[2] = 0;
                  *v6 = 0;
                  v175 = *((_BYTE *)v6 + 24);
                  *(_QWORD *)&v180[14] = *(uint64_t *)((char *)v6 + 39);
                  *(_OWORD *)v180 = *(_OWORD *)((char *)v6 + 25);
                  v177 = *((_BYTE *)v6 + 47);
                  v6[4] = 0;
                  v6[5] = 0;
                  *(_QWORD *)&v178[7] = *(uint64_t *)((char *)v6 + 55);
                  *(_QWORD *)v178 = v6[6];
                  v113 = v6;
                  v6[3] = 0;
                  do
                  {
                    v114 = &v113[8 * v111 + 8];
                    v115 = 2 * v111;
                    v111 = (2 * v111) | 1;
                    v116 = v115 + 2;
                    if (v115 + 2 < v110
                      && (std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v114, v114 + 3, v114 + 8, v114 + 11) & 0x80u) != 0)
                    {
                      v114 += 8;
                      v111 = v116;
                    }
                    if (*((char *)v113 + 23) < 0)
                      operator delete((void *)*v113);
                    v117 = *(_OWORD *)v114;
                    v113[2] = v114[2];
                    *(_OWORD *)v113 = v117;
                    *((_BYTE *)v114 + 23) = 0;
                    *(_BYTE *)v114 = 0;
                    v118 = (void **)(v113 + 3);
                    if (*((char *)v113 + 47) < 0)
                      operator delete(*v118);
                    v119 = *(_OWORD *)(v114 + 3);
                    v113[5] = v114[5];
                    *(_OWORD *)v118 = v119;
                    v121 = v114 + 6;
                    v120 = v114[6];
                    *((_BYTE *)v114 + 47) = 0;
                    *((_BYTE *)v114 + 24) = 0;
                    *(uint64_t *)((char *)v113 + 55) = *(uint64_t *)((char *)v114 + 55);
                    v113[6] = v120;
                    v113 = v114;
                  }
                  while (v111 <= (uint64_t)((unint64_t)(v110 - 2) >> 1));
                  v122 = (void **)(v114 + 3);
                  v123 = (void **)(a2 - 64);
                  v124 = *((char *)v114 + 23);
                  if (v114 == (uint64_t *)(a2 - 64))
                  {
                    if (v124 < 0)
                      operator delete((void *)*v114);
                    *(_BYTE *)v114 = v112;
                    *(uint64_t *)((char *)v114 + 15) = *(_QWORD *)&v182[14];
                    *(_OWORD *)((char *)v114 + 1) = *(_OWORD *)v182;
                    *((_BYTE *)v114 + 23) = v172;
                    if (*((char *)v114 + 47) < 0)
                      operator delete(*v122);
                    *((_BYTE *)v114 + 24) = v175;
                    *(uint64_t *)((char *)v114 + 39) = *(_QWORD *)&v180[14];
                    *(_OWORD *)((char *)v114 + 25) = *(_OWORD *)v180;
                    *((_BYTE *)v114 + 47) = v177;
                    *v121 = *(_QWORD *)v178;
                    *(uint64_t *)((char *)v114 + 55) = *(_QWORD *)&v178[7];
                  }
                  else
                  {
                    if (v124 < 0)
                      operator delete((void *)*v114);
                    v125 = *(_OWORD *)v123;
                    v114[2] = *(_QWORD *)(a2 - 48);
                    *(_OWORD *)v114 = v125;
                    *(_BYTE *)(a2 - 41) = 0;
                    *(_BYTE *)(a2 - 64) = 0;
                    if (*((char *)v114 + 47) < 0)
                      operator delete(*v122);
                    v126 = *(_OWORD *)(a2 - 40);
                    v114[5] = *(_QWORD *)(a2 - 24);
                    *(_OWORD *)v122 = v126;
                    v127 = *(_QWORD *)(a2 - 16);
                    *(_BYTE *)(a2 - 17) = 0;
                    *(_BYTE *)(a2 - 40) = 0;
                    *(uint64_t *)((char *)v114 + 55) = *(_QWORD *)(a2 - 9);
                    *v121 = v127;
                    if (*(char *)(a2 - 41) < 0)
                      operator delete(*v123);
                    *(_BYTE *)(a2 - 64) = v112;
                    *(_QWORD *)(a2 - 49) = *(_QWORD *)&v182[14];
                    *(_OWORD *)(a2 - 63) = *(_OWORD *)v182;
                    *(_BYTE *)(a2 - 41) = v172;
                    if (*(char *)(a2 - 17) < 0)
                      operator delete(*(void **)(a2 - 40));
                    *(_BYTE *)(a2 - 40) = v175;
                    *(_OWORD *)(a2 - 39) = *(_OWORD *)v180;
                    *(_QWORD *)(a2 - 25) = *(_QWORD *)&v180[14];
                    *(_BYTE *)(a2 - 17) = v177;
                    *(_QWORD *)(a2 - 9) = *(_QWORD *)&v178[7];
                    *(_QWORD *)(a2 - 16) = *(_QWORD *)v178;
                    v128 = (char *)(v114 + 8) - (char *)v6;
                    if (v128 >= 65)
                    {
                      v129 = (unint64_t)((v128 >> 6) - 2) >> 1;
                      v130 = &v6[8 * v129];
                      if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v130, v130 + 3, v114, v114 + 3) & 0x80) != 0)
                      {
                        v131 = *(_OWORD *)v114;
                        v184 = v114[2];
                        *(_OWORD *)v183 = v131;
                        v114[1] = 0;
                        v114[2] = 0;
                        *v114 = 0;
                        v132 = *(_OWORD *)v122;
                        v186 = v114[5];
                        __p = v132;
                        v114[4] = 0;
                        v114[5] = 0;
                        *v122 = 0;
                        v133 = *v121;
                        *(_QWORD *)((char *)v187 + 7) = *(uint64_t *)((char *)v114 + 55);
                        v187[0] = v133;
                        do
                        {
                          v134 = v130;
                          if (*((char *)v114 + 23) < 0)
                            operator delete((void *)*v114);
                          v135 = *(_OWORD *)v130;
                          v114[2] = v130[2];
                          *(_OWORD *)v114 = v135;
                          *((_BYTE *)v130 + 23) = 0;
                          *(_BYTE *)v130 = 0;
                          v136 = (void **)(v114 + 3);
                          if (*((char *)v114 + 47) < 0)
                            operator delete(*v136);
                          v137 = *(_OWORD *)(v134 + 3);
                          v114[5] = v134[5];
                          *(_OWORD *)v136 = v137;
                          v139 = v134 + 6;
                          v138 = v134[6];
                          *((_BYTE *)v134 + 47) = 0;
                          *((_BYTE *)v134 + 24) = 0;
                          *(uint64_t *)((char *)v114 + 55) = *(uint64_t *)((char *)v134 + 55);
                          v114[6] = v138;
                          if (!v129)
                            break;
                          v129 = (v129 - 1) >> 1;
                          v130 = &v6[8 * v129];
                          v114 = v134;
                        }
                        while ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v130, v130 + 3, v183, &__p) & 0x80) != 0);
                        if (*((char *)v134 + 23) < 0)
                          operator delete((void *)*v134);
                        v140 = (void **)(v134 + 3);
                        v141 = *(_OWORD *)v183;
                        v134[2] = v184;
                        *(_OWORD *)v134 = v141;
                        HIBYTE(v184) = 0;
                        LOBYTE(v183[0]) = 0;
                        if (*((char *)v134 + 47) < 0)
                        {
                          operator delete(*v140);
                          v145 = SHIBYTE(v184);
                          v146 = __p;
                          v134[5] = v186;
                          *(_OWORD *)v140 = v146;
                          HIBYTE(v186) = 0;
                          LOBYTE(__p) = 0;
                          v147 = v187[0];
                          *(uint64_t *)((char *)v134 + 55) = *(_QWORD *)((char *)v187 + 7);
                          *v139 = v147;
                          if (v145 < 0)
                            operator delete(v183[0]);
                        }
                        else
                        {
                          v142 = __p;
                          v134[5] = v186;
                          *(_OWORD *)v140 = v142;
                          v143 = v187[0];
                          *(uint64_t *)((char *)v134 + 55) = *(_QWORD *)((char *)v187 + 7);
                          *v139 = v143;
                        }
                      }
                    }
                  }
                }
                a2 -= 64;
              }
              while ((unint64_t)v110-- > 2);
            }
            return;
          }
          v11 = &v6[8 * (v10 >> 1)];
          if ((unint64_t)v9 <= 0x2000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(&v6[8 * (v10 >> 1)], v6, (__int128 *)(a2 - 64));
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(v6, &v6[8 * (v10 >> 1)], (__int128 *)(a2 - 64));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(v169, v11 - 8, (__int128 *)(a2 - 128));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(v168, v11 + 8, (__int128 *)(a2 - 192));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(v11 - 8, &v6[8 * (v10 >> 1)], (__int128 *)v11 + 4);
            v12 = *v6;
            v183[0] = *v167;
            *(void **)((char *)v183 + 7) = *(void **)((char *)v167 + 7);
            v13 = *((_BYTE *)v6 + 23);
            *v6 = 0;
            v6[1] = 0;
            v6[2] = 0;
            v14 = v6[3];
            *(_QWORD *)&v181 = *v166;
            *(_QWORD *)((char *)&v181 + 7) = *(_QWORD *)((char *)v166 + 7);
            v15 = *((_BYTE *)v6 + 47);
            v7[1] = 0;
            v7[2] = 0;
            *v7 = 0;
            *(_QWORD *)((char *)&v179 + 7) = *(uint64_t *)((char *)v8 + 7);
            *(_QWORD *)&v179 = *v8;
            v16 = *(_OWORD *)v11;
            v6[2] = v11[2];
            *(_OWORD *)v6 = v16;
            *((_BYTE *)v11 + 23) = 0;
            *(_BYTE *)v11 = 0;
            v17 = *(_OWORD *)(v11 + 3);
            v18 = v11[6];
            v7[2] = v11[5];
            *(_OWORD *)v7 = v17;
            *((_BYTE *)v11 + 47) = 0;
            *((_BYTE *)v11 + 24) = 0;
            *(uint64_t *)((char *)v8 + 7) = *(uint64_t *)((char *)v11 + 55);
            *v8 = v18;
            *v11 = v12;
            v19 = v183[0];
            *(uint64_t *)((char *)v11 + 15) = *(uint64_t *)((char *)v183 + 7);
            v11[1] = (uint64_t)v19;
            *((_BYTE *)v11 + 23) = v13;
            v11[3] = v14;
            *(uint64_t *)((char *)v11 + 39) = *(_QWORD *)((char *)&v181 + 7);
            v11[4] = v181;
            *((_BYTE *)v11 + 47) = v15;
            *(uint64_t *)((char *)v11 + 55) = *(_QWORD *)((char *)&v179 + 7);
            v11[6] = v179;
          }
          --a3;
          if ((a4 & 1) != 0
            || (std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v165, v164, v6, v7) & 0x80) != 0)
          {
            v20 = *(_OWORD *)v6;
            v184 = v6[2];
            *(_OWORD *)v183 = v20;
            v6[1] = 0;
            v6[2] = 0;
            *v6 = 0;
            v21 = *(_OWORD *)v7;
            v186 = v7[2];
            __p = v21;
            v7[1] = 0;
            v7[2] = 0;
            *v7 = 0;
            v22 = *v8;
            *(_QWORD *)((char *)v187 + 7) = *(uint64_t *)((char *)v8 + 7);
            v23 = v6;
            v187[0] = v22;
            do
            {
              v24 = v23;
              v23 += 8;
            }
            while ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v23, v24 + 11, v183, &__p) & 0x80) != 0);
            v25 = a2;
            if (v24 == v6)
            {
              while ((unint64_t)v23 < a2)
              {
                v26 = (__int128 *)(a2 - 64);
                v28 = std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>((_QWORD *)(a2 - 64), (_QWORD *)(a2 - 40), v183, &__p);
                a2 -= 64;
                if (v28 < 0)
                  goto LABEL_20;
              }
              v26 = (__int128 *)a2;
            }
            else
            {
              do
              {
                v26 = (__int128 *)(v25 - 64);
                v27 = std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>((_QWORD *)(v25 - 64), (_QWORD *)(v25 - 40), v183, &__p);
                v25 = (unint64_t)v26;
              }
              while ((v27 & 0x80) == 0);
            }
LABEL_20:
            if (v23 >= (uint64_t *)v26)
            {
              a1 = v23;
            }
            else
            {
              v29 = v26;
              a1 = v23;
              do
              {
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a1, v29);
                do
                {
                  v30 = a1 + 11;
                  a1 += 8;
                }
                while ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(a1, v30, v183, &__p) & 0x80) != 0);
                do
                {
                  v31 = (_QWORD *)v29 - 5;
                  v29 -= 4;
                }
                while ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v29, v31, v183, &__p) & 0x80) == 0);
              }
              while (a1 < (uint64_t *)v29);
            }
            v32 = (void **)(a1 - 8);
            if (a1 - 8 != v6)
            {
              if (*((char *)v6 + 23) < 0)
                operator delete((void *)*v6);
              v33 = *(_OWORD *)v32;
              v6[2] = *(a1 - 6);
              *(_OWORD *)v6 = v33;
              *((_BYTE *)a1 - 41) = 0;
              *((_BYTE *)a1 - 64) = 0;
              if (*((char *)v6 + 47) < 0)
                operator delete((void *)*v7);
              v34 = *(_OWORD *)(a1 - 5);
              v7[2] = *(a1 - 3);
              *(_OWORD *)v7 = v34;
              *((_BYTE *)a1 - 17) = 0;
              *((_BYTE *)a1 - 40) = 0;
              v35 = *(a1 - 2);
              *(uint64_t *)((char *)v8 + 7) = *(uint64_t *)((char *)a1 - 9);
              *v8 = v35;
            }
            if (*((char *)a1 - 41) < 0)
              operator delete(*v32);
            v36 = *(_OWORD *)v183;
            *(a1 - 6) = v184;
            *(_OWORD *)v32 = v36;
            HIBYTE(v184) = 0;
            LOBYTE(v183[0]) = 0;
            v37 = (void **)(a1 - 5);
            if (*((char *)a1 - 17) < 0)
              operator delete(*v37);
            v38 = __p;
            *(a1 - 3) = v186;
            *(_OWORD *)v37 = v38;
            HIBYTE(v186) = 0;
            LOBYTE(__p) = 0;
            v39 = v187[0];
            *(uint64_t *)((char *)a1 - 9) = *(_QWORD *)((char *)v187 + 7);
            *(a1 - 2) = v39;
            if (SHIBYTE(v186) < 0)
              operator delete((void *)__p);
            a2 = (unint64_t)v176;
            if (SHIBYTE(v184) < 0)
              operator delete(v183[0]);
            if (v23 >= (uint64_t *)v26)
            {
              v40 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(v6, a1 - 8);
              if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(a1, v176))
              {
                a2 = (unint64_t)(a1 - 8);
                if (!v40)
                  continue;
                return;
              }
              if (v40)
                goto LABEL_2;
            }
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *,false>(v6, a1 - 8, a3, a4 & 1);
          }
          else
          {
            v41 = *(_OWORD *)v6;
            v184 = v6[2];
            *(_OWORD *)v183 = v41;
            v6[1] = 0;
            v6[2] = 0;
            *v6 = 0;
            v42 = *(_OWORD *)v7;
            v186 = v7[2];
            __p = v42;
            v7[1] = 0;
            v7[2] = 0;
            *v7 = 0;
            v43 = v6[6];
            *(_QWORD *)((char *)v187 + 7) = *(uint64_t *)((char *)v6 + 55);
            v187[0] = v43;
            if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v183, &__p, (_QWORD *)(a2 - 64), (_QWORD *)(a2 - 40)) & 0x80) != 0)
            {
              v46 = v6;
              do
              {
                a1 = v46 + 8;
                v47 = std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v183, &__p, v46 + 8, v46 + 11);
                v46 = a1;
              }
              while ((v47 & 0x80) == 0);
            }
            else
            {
              v44 = v6 + 11;
              do
              {
                a1 = v44 - 3;
                if ((unint64_t)(v44 - 3) >= a2)
                  break;
                v45 = std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v183, &__p, v44 - 3, v44);
                v44 += 8;
              }
              while ((v45 & 0x80) == 0);
            }
            v48 = (__int128 *)a2;
            if ((unint64_t)a1 < a2)
            {
              v49 = a2;
              do
              {
                v48 = (__int128 *)(v49 - 64);
                v50 = std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v183, &__p, (_QWORD *)(v49 - 64), (_QWORD *)(v49 - 40));
                v49 = (unint64_t)v48;
              }
              while (v50 < 0);
            }
            while (a1 < (uint64_t *)v48)
            {
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a1, v48);
              do
              {
                v51 = a1 + 11;
                a1 += 8;
              }
              while ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v183, &__p, a1, v51) & 0x80) == 0);
              do
              {
                v52 = (_QWORD *)v48 - 5;
                v48 -= 4;
              }
              while ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v183, &__p, v48, v52) & 0x80) != 0);
            }
            v53 = (void **)(a1 - 8);
            if (a1 - 8 != v6)
            {
              if (*((char *)v6 + 23) < 0)
                operator delete((void *)*v6);
              v54 = *(_OWORD *)v53;
              v6[2] = *(a1 - 6);
              *(_OWORD *)v6 = v54;
              *((_BYTE *)a1 - 41) = 0;
              *((_BYTE *)a1 - 64) = 0;
              if (*((char *)v6 + 47) < 0)
                operator delete((void *)*v7);
              v55 = *(_OWORD *)(a1 - 5);
              v7[2] = *(a1 - 3);
              *(_OWORD *)v7 = v55;
              *((_BYTE *)a1 - 17) = 0;
              *((_BYTE *)a1 - 40) = 0;
              v56 = *(a1 - 2);
              *(uint64_t *)((char *)v6 + 55) = *(uint64_t *)((char *)a1 - 9);
              v6[6] = v56;
            }
            if (*((char *)a1 - 41) < 0)
              operator delete(*v53);
            v57 = *(_OWORD *)v183;
            *(a1 - 6) = v184;
            *(_OWORD *)v53 = v57;
            HIBYTE(v184) = 0;
            LOBYTE(v183[0]) = 0;
            v58 = (void **)(a1 - 5);
            if (*((char *)a1 - 17) < 0)
              operator delete(*v58);
            v59 = __p;
            *(a1 - 3) = v186;
            *(_OWORD *)v58 = v59;
            HIBYTE(v186) = 0;
            LOBYTE(__p) = 0;
            v60 = v187[0];
            *(uint64_t *)((char *)a1 - 9) = *(_QWORD *)((char *)v187 + 7);
            *(a1 - 2) = v60;
            if (SHIBYTE(v186) < 0)
              operator delete((void *)__p);
            if (SHIBYTE(v184) < 0)
              operator delete(v183[0]);
          }
          a4 = 0;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if (v6 != (uint64_t *)a2)
          {
            v61 = v6 + 8;
            if (v6 + 8 != (uint64_t *)a2)
            {
              v62 = 0;
              v63 = v6;
              do
              {
                v64 = v61;
                v65 = (__int128 *)(v63 + 11);
                if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v61, v63 + 11, v63, v63 + 3) & 0x80) != 0)
                {
                  v66 = *(_OWORD *)v64;
                  v184 = v64[2];
                  *(_OWORD *)v183 = v66;
                  v64[1] = 0;
                  v64[2] = 0;
                  *v64 = 0;
                  __p = *v65;
                  v186 = v63[13];
                  v63[12] = 0;
                  v63[13] = 0;
                  *(_QWORD *)v65 = 0;
                  v187[0] = v63[14];
                  *(_QWORD *)((char *)v187 + 7) = *(uint64_t *)((char *)v63 + 119);
                  v67 = v62;
                  while (1)
                  {
                    v68 = v67;
                    v69 = (char *)v6 + v67;
                    v70 = (uint64_t)v6 + v67 + 64;
                    if (*((char *)v6 + v67 + 87) < 0)
                      operator delete(*(void **)v70);
                    *(_OWORD *)v70 = *(_OWORD *)v69;
                    *(_QWORD *)(v70 + 16) = *((_QWORD *)v69 + 2);
                    v69[23] = 0;
                    *v69 = 0;
                    v71 = (void **)(v69 + 88);
                    if (v69[111] < 0)
                      operator delete(*v71);
                    v72 = (char *)v6 + v68;
                    *(_OWORD *)v71 = *(_OWORD *)((char *)v6 + v68 + 24);
                    v73 = *(uint64_t *)((char *)v6 + v68 + 48);
                    *((_QWORD *)v69 + 13) = *(uint64_t *)((char *)v6 + v68 + 40);
                    v72[47] = 0;
                    v72[24] = 0;
                    *((_QWORD *)v72 + 14) = v73;
                    *(_QWORD *)(v72 + 119) = *(uint64_t *)((char *)v6 + v68 + 55);
                    if (!v68)
                      break;
                    v74 = std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v183, &__p, (_QWORD *)v72 - 8, (_QWORD *)v72 - 5);
                    v67 = v68 - 64;
                    if ((v74 & 0x80) == 0)
                    {
                      v75 = (uint64_t *)((char *)v6 + v68);
                      v76 = (char *)v6 + v68;
                      v77 = (uint64_t *)((char *)v6 + v68 + 48);
                      v78 = v76 + 24;
                      goto LABEL_99;
                    }
                  }
                  v77 = v72 + 48;
                  v78 = v72 + 24;
                  v75 = v6;
LABEL_99:
                  if (*((char *)v75 + 23) < 0)
                    operator delete((void *)*v75);
                  v79 = 0;
                  v80 = *(_OWORD *)v183;
                  v75[2] = v184;
                  *(_OWORD *)v75 = v80;
                  HIBYTE(v184) = 0;
                  LOBYTE(v183[0]) = 0;
                  if (*((char *)v75 + 47) < 0)
                  {
                    operator delete(*(void **)v78);
                    v79 = HIBYTE(v184);
                  }
                  v81 = __p;
                  *((_QWORD *)v78 + 2) = v186;
                  *(_OWORD *)v78 = v81;
                  HIBYTE(v186) = 0;
                  LOBYTE(__p) = 0;
                  v82 = v187[0];
                  *(_QWORD *)((char *)v77 + 7) = *(_QWORD *)((char *)v187 + 7);
                  *v77 = v82;
                  if (v79 < 0)
                    operator delete(v183[0]);
                }
                v61 = v64 + 8;
                v62 += 64;
                v63 = v64;
              }
              while (v64 + 8 != (uint64_t *)a2);
            }
          }
        }
        else if (v6 != (uint64_t *)a2)
        {
          v148 = v6 + 8;
          if (v6 + 8 != (uint64_t *)a2)
          {
            v149 = v6 + 14;
            do
            {
              v150 = v148;
              v151 = (__int128 *)(v6 + 11);
              if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v148, v6 + 11, v6, v6 + 3) & 0x80) != 0)
              {
                v152 = *(_OWORD *)v150;
                v184 = v150[2];
                *(_OWORD *)v183 = v152;
                v150[1] = 0;
                v150[2] = 0;
                *v150 = 0;
                __p = *v151;
                v186 = v6[13];
                v6[12] = 0;
                v6[13] = 0;
                *(_QWORD *)v151 = 0;
                v187[0] = v6[14];
                *(_QWORD *)((char *)v187 + 7) = *(uint64_t *)((char *)v6 + 119);
                v153 = v149;
                do
                {
                  v154 = v153;
                  v155 = (void **)(v153 - 6);
                  if (*((char *)v154 - 25) < 0)
                    operator delete(*v155);
                  v156 = (void **)(v154 - 14);
                  *(_OWORD *)v155 = *((_OWORD *)v154 - 7);
                  v155[2] = (void *)*(v154 - 12);
                  *((_BYTE *)v154 - 89) = 0;
                  *((_BYTE *)v154 - 112) = 0;
                  v157 = (void **)(v154 - 3);
                  if (*((char *)v154 - 1) < 0)
                    operator delete(*v157);
                  *(_OWORD *)v157 = *(_OWORD *)(v154 - 11);
                  *(v154 - 1) = *(v154 - 9);
                  *((_BYTE *)v154 - 65) = 0;
                  v153 = v154 - 8;
                  v158 = *(v154 - 8);
                  *((_BYTE *)v154 - 88) = 0;
                  *v154 = v158;
                  *(_QWORD *)((char *)v154 + 7) = *(_QWORD *)((char *)v154 - 57);
                }
                while ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v183, &__p, v154 - 22, v154 - 19) & 0x80) != 0);
                if (*((char *)v154 - 89) < 0)
                  operator delete(*v156);
                v159 = 0;
                v160 = (void **)(v154 - 11);
                v161 = *(_OWORD *)v183;
                v156[2] = (void *)v184;
                *(_OWORD *)v156 = v161;
                HIBYTE(v184) = 0;
                LOBYTE(v183[0]) = 0;
                if (*((char *)v156 + 47) < 0)
                {
                  operator delete(*v160);
                  v159 = HIBYTE(v184);
                }
                v162 = __p;
                v160[2] = (void *)v186;
                *(_OWORD *)v160 = v162;
                HIBYTE(v186) = 0;
                LOBYTE(__p) = 0;
                v163 = v187[0];
                *(_QWORD *)((char *)v153 + 7) = *(_QWORD *)((char *)v187 + 7);
                *v153 = v163;
                if (v159 < 0)
                  operator delete(v183[0]);
              }
              v148 = v150 + 8;
              v149 += 8;
              v6 = v150;
            }
            while (v150 + 8 != (uint64_t *)a2);
          }
        }
        return;
    }
  }
}

void std::vector<AMCP::Wire_Connection_Properties>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;

  result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, a3);
  if (!(_BYTE)result)
    return std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a4);
  return result;
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _BYTE v12[15];
  _BYTE v13[15];
  _BYTE v14[15];

  v3 = *a1;
  *(_QWORD *)v14 = a1[1];
  *(_QWORD *)&v14[7] = *(uint64_t *)((char *)a1 + 15);
  v4 = *((_BYTE *)a1 + 23);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v6 = a1 + 3;
  v5 = a1[3];
  *(_QWORD *)v13 = a1[4];
  *(_QWORD *)&v13[7] = *(uint64_t *)((char *)a1 + 39);
  v7 = *((_BYTE *)a1 + 47);
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = 0;
  v8 = a1 + 6;
  *(_QWORD *)&v12[7] = *(uint64_t *)((char *)a1 + 55);
  *(_QWORD *)v12 = a1[6];
  v9 = *a2;
  a1[2] = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v9;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  if (*((char *)a1 + 47) < 0)
    operator delete((void *)*v6);
  v10 = *(__int128 *)((char *)a2 + 24);
  v6[2] = *((_QWORD *)a2 + 5);
  *(_OWORD *)v6 = v10;
  v11 = *((_QWORD *)a2 + 6);
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  *(_QWORD *)((char *)v8 + 7) = *(_QWORD *)((char *)a2 + 55);
  *v8 = v11;
  if (*((char *)a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_QWORD *)a2 = v3;
  *((_QWORD *)a2 + 1) = *(_QWORD *)v14;
  *(_QWORD *)((char *)a2 + 15) = *(_QWORD *)&v14[7];
  *((_BYTE *)a2 + 23) = v4;
  if (*((char *)a2 + 47) < 0)
    operator delete(*((void **)a2 + 3));
  *((_QWORD *)a2 + 3) = v5;
  *((_QWORD *)a2 + 4) = *(_QWORD *)v13;
  *(_QWORD *)((char *)a2 + 39) = *(_QWORD *)&v13[7];
  *((_BYTE *)a2 + 47) = v7;
  *((_QWORD *)a2 + 6) = *(_QWORD *)v12;
  *(_QWORD *)((char *)a2 + 55) = *(_QWORD *)&v12[7];
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(uint64_t *a1, _QWORD *a2, __int128 *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  int v9;
  uint64_t *v10;
  __int128 *v11;

  v6 = a2 + 3;
  v7 = a1 + 3;
  v8 = std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(a2, a2 + 3, a1, a1 + 3);
  v9 = (char)std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(a3, (_QWORD *)a3 + 3, a2, v6);
  if (v8 < 0)
  {
    v10 = a1;
    if ((v9 & 0x80000000) == 0)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a1, (__int128 *)a2);
      if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(a3, (_QWORD *)a3 + 3, a2, v6) & 0x80) == 0)return;
      v10 = a2;
    }
    v11 = a3;
    goto LABEL_10;
  }
  if (v9 < 0)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a2, a3);
    if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(a2, v6, a1, v7) & 0x80) != 0)
    {
      v10 = a1;
      v11 = (__int128 *)a2;
LABEL_10:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(v10, v11);
    }
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(a1, a2, (__int128 *)a3);
  if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>((_QWORD *)a4, (_QWORD *)(a4 + 24), (_QWORD *)a3, (_QWORD *)(a3 + 24)) & 0x80) != 0)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>((uint64_t *)a3, (__int128 *)a4);
    if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>((_QWORD *)a3, (_QWORD *)(a3 + 24), a2, a2 + 3) & 0x80) != 0)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a2, (__int128 *)a3);
      if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(a2, a2 + 3, a1, a1 + 3) & 0x80) != 0)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a1, (__int128 *)a2);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(a1, a2, (uint64_t)a3, (uint64_t)a4);
  if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>((_QWORD *)a5, (_QWORD *)(a5 + 24), a4, a4 + 3) & 0x80) != 0)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a4, (__int128 *)a5);
    if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(a4, a4 + 3, a3, a3 + 3) & 0x80) != 0)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a3, (__int128 *)a4);
      if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(a3, a3 + 3, a2, a2 + 3) & 0x80) != 0)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a2, (__int128 *)a3);
        if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(a2, a2 + 3, a1, a1 + 3) & 0x80) != 0)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a1, (__int128 *)a2);
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void **v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  char v23;
  void *__p[2];
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[2];

  v4 = ((char *)a2 - (char *)a1) >> 6;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(a2 - 8, a2 - 5, a1, a1 + 3) & 0x80) != 0)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a1, (__int128 *)a2 - 4);
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(a1, a1 + 8, (__int128 *)a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(a1, a1 + 8, (uint64_t)(a1 + 16), (uint64_t)(a2 - 8));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(a1, a1 + 8, a1 + 16, a1 + 24, (uint64_t)(a2 - 8));
      return 1;
    default:
      v6 = a1 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(a1, a1 + 8, (__int128 *)a1 + 8);
      v7 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v10 = (__int128 *)(v7 + 3);
    if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v7, v7 + 3, v6, v6 + 3) & 0x80) != 0)
    {
      *(_OWORD *)__p = *(_OWORD *)v7;
      v25 = v7[2];
      v7[1] = 0;
      v7[2] = 0;
      *v7 = 0;
      v26 = *v10;
      v27 = v7[5];
      *(_QWORD *)v10 = 0;
      v7[4] = 0;
      v7[5] = 0;
      v28[0] = v7[6];
      v11 = v8;
      *(_QWORD *)((char *)v28 + 7) = *(uint64_t *)((char *)v7 + 55);
      while (1)
      {
        v12 = v11;
        v13 = (char *)a1 + v11;
        v14 = (uint64_t)a1 + v11 + 192;
        if (*((char *)a1 + v11 + 215) < 0)
          operator delete(*(void **)v14);
        *(_OWORD *)v14 = *((_OWORD *)v13 + 8);
        *(_QWORD *)(v14 + 16) = *((_QWORD *)v13 + 18);
        v13[151] = 0;
        v13[128] = 0;
        v15 = (void **)(v13 + 216);
        if (v13[239] < 0)
          operator delete(*v15);
        v16 = (char *)a1 + v12;
        *(_OWORD *)v15 = *(_OWORD *)((char *)a1 + v12 + 152);
        v17 = *(uint64_t *)((char *)a1 + v12 + 176);
        *((_QWORD *)v13 + 29) = *(uint64_t *)((char *)a1 + v12 + 168);
        v16[175] = 0;
        v16[152] = 0;
        *((_QWORD *)v16 + 30) = v17;
        *(_QWORD *)(v16 + 247) = *(uint64_t *)((char *)a1 + v12 + 183);
        if (v12 == -128)
          break;
        v18 = std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(__p, &v26, (_QWORD *)v16 + 8, (_QWORD *)v16 + 11);
        v11 = v12 - 64;
        if ((v18 & 0x80) == 0)
        {
          v19 = (uint64_t)a1 + v11 + 192;
          v20 = (char *)a1 + v12;
          v21 = (uint64_t *)((char *)a1 + v12 + 176);
          v22 = v20 + 152;
          goto LABEL_16;
        }
      }
      v21 = v16 + 176;
      v22 = v16 + 152;
      v19 = (uint64_t)a1;
LABEL_16:
      if (*(char *)(v19 + 23) < 0)
        operator delete(*(void **)v19);
      v23 = 0;
      *(_OWORD *)v19 = *(_OWORD *)__p;
      *(_QWORD *)(v19 + 16) = v25;
      HIBYTE(v25) = 0;
      LOBYTE(__p[0]) = 0;
      if (*(char *)(v19 + 47) < 0)
      {
        operator delete(*(void **)v22);
        v23 = HIBYTE(v25);
      }
      *(_OWORD *)v22 = v26;
      *((_QWORD *)v22 + 2) = v27;
      HIBYTE(v27) = 0;
      LOBYTE(v26) = 0;
      *v21 = v28[0];
      *(_QWORD *)((char *)v21 + 7) = *(_QWORD *)((char *)v28 + 7);
      if (v23 < 0)
        operator delete(__p[0]);
      if (++v9 == 8)
        return v7 + 8 == a2;
    }
    v6 = v7;
    v8 += 64;
    v7 += 8;
    if (v7 == a2)
      return 1;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t *v9;
  __n128 *v10;
  uint64_t v11;
  unint64_t v12;
  __n128 *v13;
  uint64_t v14;
  _QWORD *v15;
  __n128 v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  __n128 v24;
  unint64_t v25;
  unint64_t v26;
  __int8 *v27;
  __n128 v28;
  __n128 v29;
  BOOL v30;
  __n128 v31;
  __n128 *v32;
  char v33;
  __n128 *v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __int8 *v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 *v44;
  BOOL v46;
  uint64_t v47;
  __n128 *v48;
  __n128 *v49;
  __n128 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  __n128 v54;
  int64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t *v60;
  __n128 v61;
  unint64_t *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  int64_t v67;
  __n128 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  __n128 v77;
  unint64_t v78;
  uint64_t v79;
  int64_t v80;
  unint64_t v81;
  char *v82;
  __n128 v83;
  uint64_t v84;
  __int128 v85;
  __n128 v86;
  uint64_t v87;
  BOOL v88;
  __n128 *v89;
  __n128 v90;
  __n128 *v91;
  __n128 *v92;
  char v93;
  __n128 v94;
  unint64_t v95;
  __n128 *v96;
  unsigned __int8 v97;
  __n128 *v98;
  __n128 v99;
  unint64_t v100;
  __n128 v101;
  unint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v8 = &a2[-2].n128_u64[1];
  v96 = a2 - 3;
  v98 = a2;
  v9 = &a2[-5].n128_u64[1];
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a1) & 0x80) != 0)
        {
          v41 = *a1;
          v100 = a1[1].n128_u64[0];
          v99 = v41;
          v42 = *(__n128 *)v8;
          a1[1].n128_u64[0] = v8[2];
          *a1 = v42;
          v43 = v99;
          v8[2] = v100;
          *(__n128 *)v8 = v43;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], v8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, v8);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1], v8);
        return;
      default:
        if (v11 <= 575)
        {
          v44 = (__n128 *)((char *)a1 + 24);
          v46 = a1 == a2 || v44 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v46)
            {
              v47 = 0;
              v48 = a1;
              do
              {
                v49 = v48;
                v48 = v44;
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v44, v49) & 0x80) != 0)
                {
                  v50 = *v48;
                  v100 = v48[1].n128_u64[0];
                  v99 = v50;
                  v48->n128_u64[1] = 0;
                  v48[1].n128_u64[0] = 0;
                  v48->n128_u64[0] = 0;
                  v51 = v47;
                  while (1)
                  {
                    v52 = (char *)a1 + v51;
                    *(__n128 *)(v52 + 24) = *(__n128 *)((char *)a1 + v51);
                    *((_QWORD *)v52 + 5) = *(unint64_t *)((char *)a1[1].n128_u64 + v51);
                    v52[23] = 0;
                    *v52 = 0;
                    if (!v51)
                      break;
                    v51 -= 24;
                    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v99, (unint64_t *)((char *)a1->n128_u64 + v51)) & 0x80) == 0)
                    {
                      v53 = (uint64_t)&a1[1].n128_i64[1] + v51;
                      goto LABEL_80;
                    }
                  }
                  v53 = (uint64_t)a1;
LABEL_80:
                  v54 = v99;
                  *(_QWORD *)(v53 + 16) = v100;
                  *(__n128 *)v53 = v54;
                }
                v44 = (__n128 *)((char *)v48 + 24);
                v47 += 24;
              }
              while (&v48[1].n128_i8[8] != (__int8 *)a2);
            }
          }
          else if (!v46)
          {
            do
            {
              v89 = a1;
              a1 = v44;
              if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v44, v89) & 0x80) != 0)
              {
                v90 = *a1;
                v100 = a1[1].n128_u64[0];
                v99 = v90;
                a1->n128_u64[1] = 0;
                a1[1].n128_u64[0] = 0;
                a1->n128_u64[0] = 0;
                v91 = a1;
                do
                {
                  v92 = (__n128 *)((char *)v91 - 24);
                  *v91 = *(__n128 *)((char *)v91 - 24);
                  v91[1].n128_u64[0] = v91[-1].n128_u64[1];
                  v91[-1].n128_u8[15] = 0;
                  v91[-2].n128_u8[8] = 0;
                  v93 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v99, (__n128 *)v91[-3].n128_u64);
                  v91 = v92;
                }
                while (v93 < 0);
                v94 = v99;
                v92[1].n128_u64[0] = v100;
                *v92 = v94;
              }
              v44 = (__n128 *)((char *)a1 + 24);
            }
            while (&a1[1].n128_i8[8] != (__int8 *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v55 = (v12 - 2) >> 1;
            v56 = v55;
            do
            {
              v57 = v56;
              if (v55 >= v56)
              {
                v58 = (2 * v56) | 1;
                v59 = (char *)a1 + 24 * v58;
                if (2 * v56 + 2 < (uint64_t)v12
                  && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1->n128_u64[3 * v58], (_QWORD *)v59 + 3) & 0x80u) != 0)
                {
                  v59 += 24;
                  v58 = 2 * v57 + 2;
                }
                v60 = &a1->n128_u64[3 * v57];
                a2 = v98;
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v59, v60) & 0x80) == 0)
                {
                  v61 = *(__n128 *)v60;
                  v100 = v60[2];
                  v99 = v61;
                  v60[1] = 0;
                  v60[2] = 0;
                  *v60 = 0;
                  do
                  {
                    v62 = (unint64_t *)v59;
                    v63 = *(_OWORD *)v59;
                    v60[2] = *((_QWORD *)v59 + 2);
                    *(_OWORD *)v60 = v63;
                    v59[23] = 0;
                    *v59 = 0;
                    if (v55 < v58)
                      break;
                    v64 = (2 * v58) | 1;
                    v59 = (char *)a1 + 24 * v64;
                    v65 = 2 * v58 + 2;
                    if (v65 < (uint64_t)v12
                      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1->n128_u64[3 * v64], (_QWORD *)v59 + 3) & 0x80u) != 0)
                    {
                      v59 += 24;
                      v64 = v65;
                    }
                    v60 = v62;
                    v58 = v64;
                  }
                  while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v59, &v99) & 0x80) == 0);
                  v66 = v99;
                  v62[2] = v100;
                  *(__n128 *)v62 = v66;
                  a2 = v98;
                }
              }
              v56 = v57 - 1;
            }
            while (v57);
            v67 = v11 / 0x18uLL;
            do
            {
              v68 = a2;
              v69 = 0;
              v95 = a1->n128_u64[0];
              v101.n128_u64[0] = a1->n128_u64[1];
              *(unint64_t *)((char *)v101.n128_u64 + 7) = *(unint64_t *)((char *)&a1->n128_u64[1] + 7);
              v97 = a1[1].n128_u8[7];
              a1->n128_u64[1] = 0;
              a1[1].n128_u64[0] = 0;
              a1->n128_u64[0] = 0;
              v70 = v67 - 2;
              if (v67 < 2)
                v70 = v67 - 1;
              v71 = v70 >> 1;
              v72 = (uint64_t)a1;
              do
              {
                v73 = v72 + 24 * v69 + 24;
                v74 = 2 * v69;
                v69 = (2 * v69) | 1;
                v75 = v74 + 2;
                if (v74 + 2 < v67
                  && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v73, (_QWORD *)(v73 + 24)) & 0x80u) != 0)
                {
                  v73 += 24;
                  v69 = v75;
                }
                if (*(char *)(v72 + 23) < 0)
                  operator delete(*(void **)v72);
                v76 = *(__n128 *)v73;
                *(_QWORD *)(v72 + 16) = *(_QWORD *)(v73 + 16);
                *(__n128 *)v72 = v76;
                *(_BYTE *)(v73 + 23) = 0;
                *(_BYTE *)v73 = 0;
                v72 = v73;
              }
              while (v69 <= v71);
              a2 = (__n128 *)((char *)v68 - 24);
              if ((__int8 *)v73 == &v68[-2].n128_i8[8])
              {
                *(_QWORD *)v73 = v95;
                v87 = *(uint64_t *)((char *)v101.n128_i64 + 7);
                *(_QWORD *)(v73 + 8) = v101.n128_u64[0];
                *(_QWORD *)(v73 + 15) = v87;
                *(_BYTE *)(v73 + 23) = v97;
                v80 = v67 - 1;
              }
              else
              {
                v77 = *a2;
                *(_QWORD *)(v73 + 16) = v68[-1].n128_u64[1];
                *(__n128 *)v73 = v77;
                v68[-2].n128_u64[1] = v95;
                v78 = v101.n128_u64[0];
                *(unint64_t *)((char *)v68[-1].n128_u64 + 7) = *(unint64_t *)((char *)v101.n128_u64 + 7);
                v68[-1].n128_u64[0] = v78;
                v68[-1].n128_u8[15] = v97;
                v79 = v73 - (_QWORD)a1 + 24;
                v80 = v67 - 1;
                if (v79 >= 25)
                {
                  v81 = (unint64_t)(-2 - 0x5555555555555555 * (v79 >> 3)) >> 1;
                  v82 = (char *)a1 + 24 * v81;
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, (_QWORD *)v73) & 0x80) != 0)
                  {
                    v83 = *(__n128 *)v73;
                    v100 = *(_QWORD *)(v73 + 16);
                    v99 = v83;
                    *(_QWORD *)(v73 + 8) = 0;
                    *(_QWORD *)(v73 + 16) = 0;
                    *(_QWORD *)v73 = 0;
                    do
                    {
                      v84 = (uint64_t)v82;
                      v85 = *(_OWORD *)v82;
                      *(_QWORD *)(v73 + 16) = *((_QWORD *)v82 + 2);
                      *(_OWORD *)v73 = v85;
                      v82[23] = 0;
                      *v82 = 0;
                      if (!v81)
                        break;
                      v81 = (v81 - 1) >> 1;
                      v82 = (char *)a1 + 24 * v81;
                      v73 = v84;
                    }
                    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, &v99) & 0x80) != 0);
                    v86 = v99;
                    *(_QWORD *)(v84 + 16) = v100;
                    *(__n128 *)v84 = v86;
                    a2 = (__n128 *)((char *)v68 - 24);
                  }
                }
              }
              v88 = v67 <= 2;
              v67 = v80;
            }
            while (!v88);
          }
          return;
        }
        v13 = (__n128 *)((char *)a1 + 24 * (v12 >> 1));
        if ((unint64_t)v11 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(&a1->n128_u64[3 * (v12 >> 1)], a1, v8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1->n128_u64[3 * (v12 >> 1)], v8);
          v14 = 3 * (v12 >> 1);
          v15 = (_QWORD *)&a1[-1] + 3 * (v12 >> 1) - 1;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(&a1[1].n128_u64[1], v15, v96);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[v14 + 1], v9);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(v15, v13, &a1[1].n128_u64[v14 + 1]);
          v16 = *a1;
          v100 = a1[1].n128_u64[0];
          v99 = v16;
          v17 = v13[1].n128_u64[0];
          *a1 = *v13;
          a1[1].n128_u64[0] = v17;
          v18 = v99;
          v13[1].n128_u64[0] = v100;
          *v13 = v18;
        }
        --a3;
        a2 = v98;
        if ((a4 & 1) == 0
          && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[-2].n128_u64[1], a1) & 0x80) == 0)
        {
          v31 = *a1;
          v102 = a1[1].n128_u64[0];
          v101 = v31;
          a1->n128_u64[1] = 0;
          a1[1].n128_u64[0] = 0;
          a1->n128_u64[0] = 0;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v101, v8) & 0x80) != 0)
          {
            v10 = a1;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v101, v10) & 0x80) == 0);
          }
          else
          {
            v32 = (__n128 *)((char *)a1 + 24);
            do
            {
              v10 = v32;
              if (v32 >= v98)
                break;
              v33 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v101, v32);
              v32 = (__n128 *)((char *)v10 + 24);
            }
            while ((v33 & 0x80) == 0);
          }
          v34 = v98;
          if (v10 < v98)
          {
            v34 = v98;
            do
              v34 = (__n128 *)((char *)v34 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v101, v34) & 0x80) != 0);
          }
          while (v10 < v34)
          {
            v35 = *v10;
            v100 = v10[1].n128_u64[0];
            v99 = v35;
            v36 = *v34;
            v10[1].n128_u64[0] = v34[1].n128_u64[0];
            *v10 = v36;
            v37 = v99;
            v34[1].n128_u64[0] = v100;
            *v34 = v37;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v101, v10) & 0x80) == 0);
            do
              v34 = (__n128 *)((char *)v34 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v101, v34) & 0x80) != 0);
          }
          v38 = &v10[-2].n128_i8[8];
          if (&v10[-2].n128_i8[8] == (__int8 *)a1)
          {
            if (v10[-1].n128_i8[15] < 0)
              operator delete((void *)a1->n128_u64[0]);
          }
          else
          {
            if (a1[1].n128_i8[7] < 0)
              operator delete((void *)a1->n128_u64[0]);
            v39 = *(__n128 *)v38;
            a1[1].n128_u64[0] = v10[-1].n128_u64[1];
            *a1 = v39;
            v10[-1].n128_u8[15] = 0;
            v10[-2].n128_u8[8] = 0;
          }
          a4 = 0;
          v40 = v101;
          v10[-1].n128_u64[1] = v102;
          *(__n128 *)v38 = v40;
          continue;
        }
        v19 = *a1;
        v102 = a1[1].n128_u64[0];
        v101 = v19;
        a1->n128_u64[1] = 0;
        a1[1].n128_u64[0] = 0;
        a1->n128_u64[0] = 0;
        v20 = a1;
        do
        {
          v21 = v20;
          v20 = (__n128 *)((char *)v20 + 24);
        }
        while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, &v101) & 0x80) != 0);
        v22 = v98;
        if (v21 == a1)
        {
          v22 = v98;
          do
          {
            if (v20 >= v22)
              break;
            v22 = (__n128 *)((char *)v22 - 24);
          }
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, &v101) & 0x80) == 0);
        }
        else
        {
          do
            v22 = (__n128 *)((char *)v22 - 24);
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, &v101) & 0x80) == 0);
        }
        v10 = v20;
        if (v20 < v22)
        {
          v23 = v22;
          do
          {
            v99 = *v10;
            v24 = v99;
            v100 = v10[1].n128_u64[0];
            v25 = v100;
            v26 = v23[1].n128_u64[0];
            *v10 = *v23;
            v10[1].n128_u64[0] = v26;
            v23[1].n128_u64[0] = v25;
            *v23 = v24;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, &v101) & 0x80) != 0);
            do
              v23 = (__n128 *)((char *)v23 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, &v101) & 0x80) == 0);
          }
          while (v10 < v23);
        }
        v27 = &v10[-2].n128_i8[8];
        if (&v10[-2].n128_i8[8] == (__int8 *)a1)
        {
          if (v10[-1].n128_i8[15] < 0)
            operator delete((void *)a1->n128_u64[0]);
        }
        else
        {
          if (a1[1].n128_i8[7] < 0)
            operator delete((void *)a1->n128_u64[0]);
          v28 = *(__n128 *)v27;
          a1[1].n128_u64[0] = v10[-1].n128_u64[1];
          *a1 = v28;
          v10[-1].n128_u8[15] = 0;
          v10[-2].n128_u8[8] = 0;
        }
        v29 = v101;
        v10[-1].n128_u64[1] = v102;
        *(__n128 *)v27 = v29;
        if (v20 < v22)
        {
LABEL_34:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, &v10[-2].n128_i8[8], a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (__n128 *)((char *)v10 - 24));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v10, v98))
        {
          if (v30)
            continue;
          goto LABEL_34;
        }
        a2 = (__n128 *)((char *)v10 - 24);
        if (!v30)
          goto LABEL_2;
        return;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 *v33;
  char v34;
  unint64_t v35;
  char v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  __int128 v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  void **v47;
  __int128 v48;
  uint64_t v49;
  BOOL v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  __int128 *v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  __int128 v66;
  int v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  int v71;
  void **v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void **v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  int64_t v100;
  int64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 *v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  int v114;
  void **v115;
  __int128 v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  void **v121;
  __int128 v122;
  int v123;
  __int128 v124;
  uint64_t v125;
  int v126;
  __int128 v127;
  uint64_t v128;
  int64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  uint64_t *v139;
  int v140;
  void **v141;
  __int128 v142;
  uint64_t v143;
  uint64_t *v144;
  void **v145;
  void **v146;
  int v147;
  __int128 v148;
  uint64_t v149;
  int v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t *v163;
  int v164;
  void **v165;
  __int128 v166;
  uint64_t v167;
  uint64_t *v168;
  void **v169;
  __int128 v170;
  int v171;
  __int128 v172;
  uint64_t v173;
  int v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  __int128 *v181;
  __int128 v182;
  uint64_t *v183;
  uint64_t *v184;
  void **v185;
  void **v186;
  void **v187;
  uint64_t v188;
  char v189;
  void **v190;
  uint64_t *v191;
  __int128 v192;
  int v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  __int128 *v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t *v201;
  uint64_t *v202;
  int64_t v203;
  char v204;
  char v206;
  char v207;
  char v208;
  int64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  int v218;
  uint64_t v219;
  _BYTE v220[22];
  int v221;
  __int128 v222;
  _BYTE v223[22];
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;

  v232 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v6 = (uint64_t)a1;
  v201 = a1 + 20;
  v202 = a1 + 10;
  v7 = a1 + 3;
  v8 = (uint64_t)(a1 + 5);
  v199 = a1 + 6;
  v200 = a1 + 1;
  v9 = a1 + 8;
  v196 = (uint64_t)(a1 - 5);
  v198 = (uint64_t)(a1 - 10);
  while (2)
  {
    v10 = (uint64_t)a2 - v6;
    v11 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - v6) >> 4);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)(a2 - 10), (uint64_t)(a2 - 5), v6, v6 + 40) & 0x80) != 0)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>((uint64_t *)v6, (__int128 *)a2 - 5);
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t *)v6, (__int128 *)(v6 + 80), (__int128 *)a2 - 5);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t *)v6, (__int128 *)(v6 + 80), (__int128 *)(v6 + 160), (__int128 *)a2 - 5);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t *)v6, (__int128 *)(v6 + 80), (__int128 *)(v6 + 160), (__int128 *)(v6 + 240), (__int128 *)a2 - 5);
        return;
      default:
        v211 = (unint64_t)a2;
        if (v10 > 1919)
        {
          if (!a3)
          {
            if ((uint64_t *)v6 != a2)
            {
              v210 = (unint64_t)(v11 - 2) >> 1;
              v100 = v210;
              do
              {
                v101 = v100;
                if (v210 >= v100)
                {
                  v102 = (2 * v100) | 1;
                  v103 = v6 + 80 * v102;
                  if (2 * v100 + 2 < v11
                    && (std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v6 + 80 * v102, v6 + 80 * v102 + 40, v103 + 80, v103 + 120) & 0x80u) != 0)
                  {
                    v103 += 80;
                    v102 = 2 * v101 + 2;
                  }
                  v104 = v6 + 80 * v101;
                  v105 = (__int128 *)(v104 + 40);
                  if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v103, v103 + 40, v104, v104 + 40) & 0x80) == 0)
                  {
                    v106 = *(_OWORD *)v104;
                    v225 = *(_QWORD *)(v104 + 16);
                    v224 = v106;
                    *(_QWORD *)(v104 + 8) = 0;
                    *(_QWORD *)(v104 + 16) = 0;
                    *(_QWORD *)v104 = 0;
                    v107 = *(_QWORD *)(v104 + 24);
                    v227 = *(_DWORD *)(v104 + 32);
                    v226 = v107;
                    v108 = *v105;
                    v229 = *(_QWORD *)(v6 + 80 * v101 + 56);
                    v228 = v108;
                    *(_QWORD *)(v6 + 80 * v101 + 48) = 0;
                    *(_QWORD *)(v6 + 80 * v101 + 56) = 0;
                    *(_QWORD *)v105 = 0;
                    v203 = v101;
                    v109 = v6 + 80 * v101;
                    v110 = *(_QWORD *)(v109 + 64);
                    v231 = *(_DWORD *)(v109 + 72);
                    v230 = v110;
                    do
                    {
                      v111 = v103;
                      if (*(char *)(v104 + 23) < 0)
                        operator delete(*(void **)v104);
                      v112 = *(_OWORD *)v103;
                      *(_QWORD *)(v104 + 16) = *(_QWORD *)(v103 + 16);
                      *(_OWORD *)v104 = v112;
                      *(_BYTE *)(v103 + 23) = 0;
                      v113 = *(_QWORD *)(v103 + 24);
                      *(_BYTE *)v103 = 0;
                      v114 = *(_DWORD *)(v103 + 32);
                      *(_QWORD *)(v104 + 24) = v113;
                      *(_DWORD *)(v104 + 32) = v114;
                      v115 = (void **)(v104 + 40);
                      if (*(char *)(v104 + 63) < 0)
                        operator delete(*v115);
                      v116 = *(_OWORD *)(v111 + 40);
                      *(_QWORD *)(v104 + 56) = *(_QWORD *)(v111 + 56);
                      *(_OWORD *)v115 = v116;
                      v118 = (uint64_t *)(v111 + 64);
                      v117 = *(_QWORD *)(v111 + 64);
                      *(_BYTE *)(v111 + 63) = 0;
                      *(_BYTE *)(v111 + 40) = 0;
                      *(_DWORD *)(v104 + 72) = *(_DWORD *)(v111 + 72);
                      *(_QWORD *)(v104 + 64) = v117;
                      if (v210 < v102)
                        break;
                      v119 = (2 * v102) | 1;
                      v103 = v6 + 80 * v119;
                      v120 = 2 * v102 + 2;
                      if (v120 < v11
                        && (std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v6 + 80 * v119, v6 + 80 * v119 + 40, v103 + 80, v103 + 120) & 0x80u) != 0)
                      {
                        v103 += 80;
                        v119 = v120;
                      }
                      v104 = v111;
                      v102 = v119;
                    }
                    while ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v103, v103 + 40, (uint64_t)&v224, (uint64_t)&v228) & 0x80) == 0);
                    if (*(char *)(v111 + 23) < 0)
                      operator delete(*(void **)v111);
                    v121 = (void **)(v111 + 40);
                    v122 = v224;
                    *(_QWORD *)(v111 + 16) = v225;
                    *(_OWORD *)v111 = v122;
                    HIBYTE(v225) = 0;
                    LOBYTE(v224) = 0;
                    v123 = v227;
                    *(_QWORD *)(v111 + 24) = v226;
                    *(_DWORD *)(v111 + 32) = v123;
                    if (*(char *)(v111 + 63) < 0)
                    {
                      operator delete(*v121);
                      v126 = SHIBYTE(v225);
                      v127 = v228;
                      *(_QWORD *)(v111 + 56) = v229;
                      *(_OWORD *)v121 = v127;
                      HIBYTE(v229) = 0;
                      LOBYTE(v228) = 0;
                      v128 = v230;
                      *(_DWORD *)(v111 + 72) = v231;
                      *v118 = v128;
                      if (v126 < 0)
                        operator delete((void *)v224);
                    }
                    else
                    {
                      v124 = v228;
                      *(_QWORD *)(v111 + 56) = v229;
                      *(_OWORD *)v121 = v124;
                      v125 = v230;
                      *(_DWORD *)(v111 + 72) = v231;
                      *v118 = v125;
                    }
                    v101 = v203;
                  }
                }
                v100 = v101 - 1;
              }
              while (v101);
              v129 = v10 / 0x50uLL;
              v130 = v211;
              do
              {
                if (v129 >= 2)
                {
                  v212 = v130;
                  v131 = 0;
                  v204 = *(_BYTE *)v6;
                  *(_QWORD *)&v223[14] = *(_QWORD *)(v6 + 15);
                  *(_OWORD *)v223 = *(_OWORD *)(v6 + 1);
                  v206 = *(_BYTE *)(v6 + 23);
                  *(_QWORD *)(v6 + 8) = 0;
                  *(_QWORD *)(v6 + 16) = 0;
                  *(_QWORD *)v6 = 0;
                  v218 = *(_DWORD *)(v6 + 32);
                  v216 = *(_QWORD *)(v6 + 24);
                  v207 = *(_BYTE *)(v6 + 40);
                  *(_OWORD *)v220 = *(_OWORD *)(v6 + 41);
                  *(_QWORD *)&v220[14] = *(_QWORD *)(v6 + 55);
                  v208 = *(_BYTE *)(v6 + 63);
                  *(_QWORD *)(v6 + 40) = 0;
                  *(_QWORD *)(v6 + 48) = 0;
                  v214 = *(_DWORD *)(v6 + 72);
                  v213 = *(_QWORD *)(v6 + 64);
                  v132 = v6;
                  *(_QWORD *)(v6 + 56) = 0;
                  do
                  {
                    v133 = v131 + 1;
                    v134 = v132 + 80 * (v131 + 1);
                    v135 = 2 * v131;
                    v131 = (2 * v131) | 1;
                    v136 = v135 + 2;
                    if (v135 + 2 < v129
                      && (std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v134, v132 + 80 * v133 + 40, v134 + 80, v134 + 120) & 0x80u) != 0)
                    {
                      v134 += 80;
                      v131 = v136;
                    }
                    if (*(char *)(v132 + 23) < 0)
                      operator delete(*(void **)v132);
                    v137 = *(_OWORD *)v134;
                    *(_QWORD *)(v132 + 16) = *(_QWORD *)(v134 + 16);
                    *(_OWORD *)v132 = v137;
                    *(_BYTE *)(v134 + 23) = 0;
                    v139 = (uint64_t *)(v134 + 24);
                    v138 = *(_QWORD *)(v134 + 24);
                    *(_BYTE *)v134 = 0;
                    v140 = *(_DWORD *)(v134 + 32);
                    *(_QWORD *)(v132 + 24) = v138;
                    *(_DWORD *)(v132 + 32) = v140;
                    v141 = (void **)(v132 + 40);
                    if (*(char *)(v132 + 63) < 0)
                      operator delete(*v141);
                    v142 = *(_OWORD *)(v134 + 40);
                    *(_QWORD *)(v132 + 56) = *(_QWORD *)(v134 + 56);
                    *(_OWORD *)v141 = v142;
                    v144 = (uint64_t *)(v134 + 64);
                    v143 = *(_QWORD *)(v134 + 64);
                    *(_BYTE *)(v134 + 63) = 0;
                    *(_BYTE *)(v134 + 40) = 0;
                    *(_DWORD *)(v132 + 72) = *(_DWORD *)(v134 + 72);
                    *(_QWORD *)(v132 + 64) = v143;
                    v132 = v134;
                  }
                  while (v131 <= (uint64_t)((unint64_t)(v129 - 2) >> 1));
                  v145 = (void **)(v134 + 40);
                  v130 = v212;
                  v146 = (void **)(v212 - 80);
                  v147 = *(char *)(v134 + 23);
                  if (v134 == v212 - 80)
                  {
                    if (v147 < 0)
                      operator delete(*(void **)v134);
                    *(_BYTE *)v134 = v204;
                    *(_QWORD *)(v134 + 15) = *(_QWORD *)&v223[14];
                    *(_OWORD *)(v134 + 1) = *(_OWORD *)v223;
                    *(_BYTE *)(v134 + 23) = v206;
                    *v139 = v216;
                    *(_DWORD *)(v134 + 32) = v218;
                    if (*(char *)(v134 + 63) < 0)
                      operator delete(*v145);
                    *(_BYTE *)(v134 + 40) = v207;
                    *(_QWORD *)(v134 + 55) = *(_QWORD *)&v220[14];
                    *(_OWORD *)(v134 + 41) = *(_OWORD *)v220;
                    *(_BYTE *)(v134 + 63) = v208;
                    *v144 = v213;
                    *(_DWORD *)(v134 + 72) = v214;
                  }
                  else
                  {
                    if (v147 < 0)
                      operator delete(*(void **)v134);
                    v148 = *(_OWORD *)v146;
                    *(_QWORD *)(v134 + 16) = *(_QWORD *)(v212 - 64);
                    *(_OWORD *)v134 = v148;
                    v149 = *(_QWORD *)(v212 - 56);
                    *(_BYTE *)(v212 - 57) = 0;
                    *(_BYTE *)(v212 - 80) = 0;
                    v150 = *(_DWORD *)(v212 - 48);
                    *v139 = v149;
                    *(_DWORD *)(v134 + 32) = v150;
                    if (*(char *)(v134 + 63) < 0)
                      operator delete(*v145);
                    v151 = *(_OWORD *)(v212 - 40);
                    *(_QWORD *)(v134 + 56) = *(_QWORD *)(v212 - 24);
                    v197 = (__int128 *)(v134 + 40);
                    *(_OWORD *)v145 = v151;
                    v152 = *(_QWORD *)(v212 - 16);
                    *(_BYTE *)(v212 - 17) = 0;
                    *(_BYTE *)(v212 - 40) = 0;
                    *(_DWORD *)(v134 + 72) = *(_DWORD *)(v212 - 8);
                    *v144 = v152;
                    if (*(char *)(v212 - 57) < 0)
                      operator delete(*v146);
                    *(_BYTE *)(v212 - 80) = v204;
                    *(_OWORD *)(v212 - 79) = *(_OWORD *)v223;
                    *(_QWORD *)(v212 - 65) = *(_QWORD *)&v223[14];
                    *(_BYTE *)(v212 - 57) = v206;
                    *(_DWORD *)(v212 - 48) = v218;
                    *(_QWORD *)(v212 - 56) = v216;
                    if (*(char *)(v212 - 17) < 0)
                      operator delete(*(void **)(v212 - 40));
                    *(_BYTE *)(v212 - 40) = v207;
                    *(_OWORD *)(v212 - 39) = *(_OWORD *)v220;
                    *(_QWORD *)(v212 - 25) = *(_QWORD *)&v220[14];
                    *(_BYTE *)(v212 - 17) = v208;
                    *(_DWORD *)(v212 - 8) = v214;
                    *(_QWORD *)(v212 - 16) = v213;
                    v153 = v134 + 80 - v6;
                    if (v153 >= 81)
                    {
                      v154 = (unint64_t)(-2 - 0x3333333333333333 * (v153 >> 4)) >> 1;
                      v155 = v6 + 80 * v154;
                      if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v155, v155 + 40, v134, (uint64_t)v197) & 0x80) != 0)
                      {
                        v156 = *(_OWORD *)v134;
                        v225 = *(_QWORD *)(v134 + 16);
                        v224 = v156;
                        *(_QWORD *)(v134 + 8) = 0;
                        *(_QWORD *)(v134 + 16) = 0;
                        *(_QWORD *)v134 = 0;
                        v157 = *v139;
                        v227 = *(_DWORD *)(v134 + 32);
                        v226 = v157;
                        v158 = *v197;
                        v229 = *(_QWORD *)(v134 + 56);
                        v228 = v158;
                        *(_QWORD *)(v134 + 48) = 0;
                        *(_QWORD *)(v134 + 56) = 0;
                        *(_QWORD *)v197 = 0;
                        v159 = *v144;
                        v231 = *(_DWORD *)(v134 + 72);
                        v230 = v159;
                        do
                        {
                          v160 = v155;
                          if (*(char *)(v134 + 23) < 0)
                            operator delete(*(void **)v134);
                          v161 = *(_OWORD *)v155;
                          *(_QWORD *)(v134 + 16) = *(_QWORD *)(v155 + 16);
                          *(_OWORD *)v134 = v161;
                          *(_BYTE *)(v155 + 23) = 0;
                          v163 = (uint64_t *)(v155 + 24);
                          v162 = *(_QWORD *)(v155 + 24);
                          *(_BYTE *)v155 = 0;
                          v164 = *(_DWORD *)(v155 + 32);
                          *(_QWORD *)(v134 + 24) = v162;
                          *(_DWORD *)(v134 + 32) = v164;
                          v165 = (void **)(v134 + 40);
                          if (*(char *)(v134 + 63) < 0)
                            operator delete(*v165);
                          v166 = *(_OWORD *)(v160 + 40);
                          *(_QWORD *)(v134 + 56) = *(_QWORD *)(v160 + 56);
                          *(_OWORD *)v165 = v166;
                          v168 = (uint64_t *)(v160 + 64);
                          v167 = *(_QWORD *)(v160 + 64);
                          *(_BYTE *)(v160 + 63) = 0;
                          *(_BYTE *)(v160 + 40) = 0;
                          *(_DWORD *)(v134 + 72) = *(_DWORD *)(v160 + 72);
                          *(_QWORD *)(v134 + 64) = v167;
                          if (!v154)
                            break;
                          v154 = (v154 - 1) >> 1;
                          v155 = v6 + 80 * v154;
                          v134 = v160;
                        }
                        while ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v155, v155 + 40, (uint64_t)&v224, (uint64_t)&v228) & 0x80) != 0);
                        if (*(char *)(v160 + 23) < 0)
                          operator delete(*(void **)v160);
                        v169 = (void **)(v160 + 40);
                        v170 = v224;
                        *(_QWORD *)(v160 + 16) = v225;
                        *(_OWORD *)v160 = v170;
                        HIBYTE(v225) = 0;
                        LOBYTE(v224) = 0;
                        v171 = v227;
                        *v163 = v226;
                        *(_DWORD *)(v160 + 32) = v171;
                        if (*(char *)(v160 + 63) < 0)
                        {
                          operator delete(*v169);
                          v175 = SHIBYTE(v225);
                          v176 = v228;
                          *(_QWORD *)(v160 + 56) = v229;
                          *(_OWORD *)v169 = v176;
                          HIBYTE(v229) = 0;
                          LOBYTE(v228) = 0;
                          v177 = v230;
                          *(_DWORD *)(v160 + 72) = v231;
                          *v168 = v177;
                          if (v175 < 0)
                            operator delete((void *)v224);
                        }
                        else
                        {
                          v172 = v228;
                          *(_QWORD *)(v160 + 56) = v229;
                          *(_OWORD *)v169 = v172;
                          v173 = v230;
                          *(_DWORD *)(v160 + 72) = v231;
                          *v168 = v173;
                        }
                      }
                    }
                  }
                }
                v130 -= 80;
              }
              while ((unint64_t)v129-- > 2);
            }
            return;
          }
          v12 = a2;
          v13 = (unint64_t)v11 >> 1;
          v14 = v6 + 80 * ((unint64_t)v11 >> 1);
          v15 = (__int128 *)(v12 - 10);
          if ((unint64_t)v10 < 0x2801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t *)(v6 + 80 * v13), (__int128 *)v6, v15);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t *)v6, (__int128 *)(v6 + 80 * v13), v15);
            v16 = v6 + 80 * v13;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>(v202, (__int128 *)(v16 - 80), (__int128 *)v12 - 10);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>(v201, (__int128 *)(v16 + 80), (__int128 *)v12 - 15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t *)(v16 - 80), (__int128 *)v14, (__int128 *)(v16 + 80));
            v17 = *(_QWORD *)v6;
            *(_QWORD *)&v224 = *v200;
            *(_QWORD *)((char *)&v224 + 7) = *(_QWORD *)((char *)v200 + 7);
            v18 = *(_BYTE *)(v6 + 23);
            *(_QWORD *)(v6 + 8) = 0;
            *(_QWORD *)(v6 + 16) = 0;
            *(_QWORD *)v6 = 0;
            v221 = *((_DWORD *)v7 + 2);
            v219 = *v7;
            v19 = *(_QWORD *)(v6 + 40);
            *(_QWORD *)&v222 = *v199;
            *(_QWORD *)((char *)&v222 + 7) = *(_QWORD *)((char *)v199 + 7);
            v20 = *(_BYTE *)(v6 + 63);
            *(_QWORD *)v8 = 0;
            *(_QWORD *)(v8 + 8) = 0;
            *(_QWORD *)(v8 + 16) = 0;
            v217 = *((_DWORD *)v9 + 2);
            v215 = *v9;
            v21 = *(_OWORD *)v14;
            v22 = *(_QWORD *)(v14 + 24);
            *(_QWORD *)(v6 + 16) = *(_QWORD *)(v14 + 16);
            *(_OWORD *)v6 = v21;
            *(_BYTE *)(v14 + 23) = 0;
            *(_BYTE *)v14 = 0;
            *((_DWORD *)v7 + 2) = *(_DWORD *)(v14 + 32);
            *v7 = v22;
            v23 = *(_OWORD *)(v16 + 40);
            v24 = *(_QWORD *)(v16 + 64);
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v16 + 56);
            *(_OWORD *)v8 = v23;
            *(_BYTE *)(v14 + 63) = 0;
            *(_BYTE *)(v16 + 40) = 0;
            *((_DWORD *)v9 + 2) = *(_DWORD *)(v16 + 72);
            *v9 = v24;
            *(_QWORD *)v14 = v17;
            v25 = v224;
            *(_QWORD *)(v14 + 15) = *(_QWORD *)((char *)&v224 + 7);
            *(_QWORD *)(v14 + 8) = v25;
            *(_BYTE *)(v14 + 23) = v18;
            *(_DWORD *)(v14 + 32) = v221;
            *(_QWORD *)(v14 + 24) = v219;
            *(_QWORD *)(v16 + 40) = v19;
            *(_QWORD *)(v16 + 55) = *(_QWORD *)((char *)&v222 + 7);
            *(_QWORD *)(v16 + 48) = v222;
            *(_BYTE *)(v14 + 63) = v20;
            *(_DWORD *)(v16 + 72) = v217;
            *(_QWORD *)(v16 + 64) = v215;
          }
          --a3;
          if ((a4 & 1) != 0
            || (std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v198, v196, v6, v8) & 0x80) != 0)
          {
            v26 = *(_OWORD *)v6;
            v225 = *(_QWORD *)(v6 + 16);
            v224 = v26;
            *(_QWORD *)(v6 + 8) = 0;
            *(_QWORD *)(v6 + 16) = 0;
            *(_QWORD *)v6 = 0;
            v27 = *((_DWORD *)v7 + 2);
            v226 = *v7;
            v227 = v27;
            v28 = *(_QWORD *)(v8 + 16);
            v228 = *(_OWORD *)v8;
            v229 = v28;
            *(_QWORD *)(v8 + 8) = 0;
            *(_QWORD *)(v8 + 16) = 0;
            *(_QWORD *)v8 = 0;
            v29 = *v9;
            v231 = *((_DWORD *)v9 + 2);
            v30 = v6;
            v230 = v29;
            do
            {
              v31 = v30;
              v30 += 80;
            }
            while ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v30, v31 + 120, (uint64_t)&v224, (uint64_t)&v228) & 0x80) != 0);
            v32 = v211;
            if (v31 == v6)
            {
              v35 = v211;
              while (v30 < v35)
              {
                v33 = (__int128 *)(v35 - 80);
                v36 = std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v35 - 80, v35 - 40, (uint64_t)&v224, (uint64_t)&v228);
                v35 = (unint64_t)v33;
                if (v36 < 0)
                  goto LABEL_21;
              }
              v33 = (__int128 *)v35;
            }
            else
            {
              do
              {
                v33 = (__int128 *)(v32 - 80);
                v34 = std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v32 - 80, v32 - 40, (uint64_t)&v224, (uint64_t)&v228);
                v32 = (unint64_t)v33;
              }
              while ((v34 & 0x80) == 0);
            }
LABEL_21:
            if (v30 >= (unint64_t)v33)
            {
              a1 = (uint64_t *)v30;
            }
            else
            {
              v37 = v33;
              a1 = (uint64_t *)v30;
              do
              {
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>(a1, v37);
                do
                {
                  v38 = (uint64_t)(a1 + 15);
                  a1 += 10;
                }
                while ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a1, v38, (uint64_t)&v224, (uint64_t)&v228) & 0x80) != 0);
                do
                {
                  v39 = (uint64_t)v37 - 40;
                  v37 -= 5;
                }
                while ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)v37, v39, (uint64_t)&v224, (uint64_t)&v228) & 0x80) == 0);
              }
              while (a1 < (uint64_t *)v37);
            }
            v40 = (void **)(a1 - 10);
            if (a1 - 10 != (uint64_t *)v6)
            {
              if (*(char *)(v6 + 23) < 0)
                operator delete(*(void **)v6);
              v41 = *(_OWORD *)v40;
              *(_QWORD *)(v6 + 16) = *(a1 - 8);
              *(_OWORD *)v6 = v41;
              *((_BYTE *)a1 - 57) = 0;
              *((_BYTE *)a1 - 80) = 0;
              v42 = *((_DWORD *)a1 - 12);
              *v7 = *(a1 - 7);
              *((_DWORD *)v7 + 2) = v42;
              if (*(char *)(v6 + 63) < 0)
                operator delete(*(void **)v8);
              v43 = *(_OWORD *)(a1 - 5);
              *(_QWORD *)(v8 + 16) = *(a1 - 3);
              *(_OWORD *)v8 = v43;
              *((_BYTE *)a1 - 17) = 0;
              *((_BYTE *)a1 - 40) = 0;
              v44 = *(a1 - 2);
              *((_DWORD *)v9 + 2) = *((_DWORD *)a1 - 2);
              *v9 = v44;
            }
            if (*((char *)a1 - 57) < 0)
              operator delete(*v40);
            v45 = v224;
            *(a1 - 8) = v225;
            *(_OWORD *)v40 = v45;
            HIBYTE(v225) = 0;
            LOBYTE(v224) = 0;
            v46 = v227;
            *(a1 - 7) = v226;
            *((_DWORD *)a1 - 12) = v46;
            v47 = (void **)(a1 - 5);
            if (*((char *)a1 - 17) < 0)
              operator delete(*v47);
            v48 = v228;
            *(a1 - 3) = v229;
            *(_OWORD *)v47 = v48;
            HIBYTE(v229) = 0;
            LOBYTE(v228) = 0;
            v49 = v230;
            *((_DWORD *)a1 - 2) = v231;
            *(a1 - 2) = v49;
            if (SHIBYTE(v229) < 0)
              operator delete((void *)v228);
            a2 = (uint64_t *)v211;
            if (SHIBYTE(v225) < 0)
              operator delete((void *)v224);
            if (v30 >= (unint64_t)v33)
            {
              v50 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>(v6, (uint64_t)(a1 - 10));
              if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t)a1, v211))
              {
                a2 = a1 - 10;
                if (!v50)
                  continue;
                return;
              }
              if (v50)
                goto LABEL_2;
            }
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *,false>(v6, a1 - 10, a3, a4 & 1);
          }
          else
          {
            v51 = *(_OWORD *)v6;
            v225 = *(_QWORD *)(v6 + 16);
            v224 = v51;
            *(_QWORD *)(v6 + 8) = 0;
            *(_QWORD *)(v6 + 16) = 0;
            v52 = *(_QWORD *)(v6 + 24);
            *(_QWORD *)v6 = 0;
            v53 = *(_DWORD *)(v6 + 32);
            v226 = v52;
            v227 = v53;
            v54 = *(_QWORD *)(v8 + 16);
            v228 = *(_OWORD *)v8;
            v229 = v54;
            *(_QWORD *)(v8 + 8) = 0;
            *(_QWORD *)(v8 + 16) = 0;
            *(_QWORD *)v8 = 0;
            v55 = *(_QWORD *)(v6 + 64);
            v231 = *(_DWORD *)(v6 + 72);
            a2 = (uint64_t *)v211;
            v230 = v55;
            if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)&v224, (uint64_t)&v228, (uint64_t)(v12 - 10), v211 - 40) & 0x80) != 0)
            {
              v58 = v6;
              do
              {
                a1 = (uint64_t *)(v58 + 80);
                v59 = std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)&v224, (uint64_t)&v228, v58 + 80, v58 + 120);
                v58 = (uint64_t)a1;
              }
              while ((v59 & 0x80) == 0);
            }
            else
            {
              v56 = v6 + 120;
              do
              {
                a1 = (uint64_t *)(v56 - 40);
                if (v56 - 40 >= v211)
                  break;
                v57 = std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)&v224, (uint64_t)&v228, v56 - 40, v56);
                v56 += 80;
              }
              while ((v57 & 0x80) == 0);
            }
            v60 = (__int128 *)v211;
            if ((unint64_t)a1 < v211)
            {
              v61 = v211;
              do
              {
                v60 = (__int128 *)(v61 - 80);
                v62 = std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)&v224, (uint64_t)&v228, v61 - 80, v61 - 40);
                v61 = (unint64_t)v60;
              }
              while (v62 < 0);
            }
            while (a1 < (uint64_t *)v60)
            {
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>(a1, v60);
              do
              {
                v63 = (uint64_t)(a1 + 15);
                a1 += 10;
              }
              while ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)&v224, (uint64_t)&v228, (uint64_t)a1, v63) & 0x80) == 0);
              do
              {
                v64 = (uint64_t)v60 - 40;
                v60 -= 5;
              }
              while ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)&v224, (uint64_t)&v228, (uint64_t)v60, v64) & 0x80) != 0);
            }
            v65 = (void **)(a1 - 10);
            if (a1 - 10 != (uint64_t *)v6)
            {
              if (*(char *)(v6 + 23) < 0)
                operator delete(*(void **)v6);
              v66 = *(_OWORD *)v65;
              *(_QWORD *)(v6 + 16) = *(a1 - 8);
              *(_OWORD *)v6 = v66;
              *((_BYTE *)a1 - 57) = 0;
              *((_BYTE *)a1 - 80) = 0;
              v67 = *((_DWORD *)a1 - 12);
              *(_QWORD *)(v6 + 24) = *(a1 - 7);
              *(_DWORD *)(v6 + 32) = v67;
              if (*(char *)(v6 + 63) < 0)
                operator delete(*(void **)v8);
              v68 = *(_OWORD *)(a1 - 5);
              *(_QWORD *)(v8 + 16) = *(a1 - 3);
              *(_OWORD *)v8 = v68;
              *((_BYTE *)a1 - 17) = 0;
              *((_BYTE *)a1 - 40) = 0;
              v69 = *(a1 - 2);
              *(_DWORD *)(v6 + 72) = *((_DWORD *)a1 - 2);
              *(_QWORD *)(v6 + 64) = v69;
            }
            if (*((char *)a1 - 57) < 0)
              operator delete(*v65);
            v70 = v224;
            *(a1 - 8) = v225;
            *(_OWORD *)v65 = v70;
            HIBYTE(v225) = 0;
            LOBYTE(v224) = 0;
            v71 = v227;
            *(a1 - 7) = v226;
            *((_DWORD *)a1 - 12) = v71;
            v72 = (void **)(a1 - 5);
            if (*((char *)a1 - 17) < 0)
              operator delete(*v72);
            v73 = v228;
            *(a1 - 3) = v229;
            *(_OWORD *)v72 = v73;
            HIBYTE(v229) = 0;
            LOBYTE(v228) = 0;
            v74 = v230;
            *((_DWORD *)a1 - 2) = v231;
            *(a1 - 2) = v74;
            if (SHIBYTE(v229) < 0)
              operator delete((void *)v228);
            if (SHIBYTE(v225) < 0)
              operator delete((void *)v224);
          }
          a4 = 0;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if ((uint64_t *)v6 != a2)
          {
            v75 = v6 + 80;
            if ((uint64_t *)(v6 + 80) != a2)
            {
              v76 = 0;
              v77 = v6;
              do
              {
                v78 = v75;
                v79 = (__int128 *)(v77 + 120);
                if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v75, v77 + 120, v77, v77 + 40) & 0x80) != 0)
                {
                  v80 = *(_OWORD *)v78;
                  v225 = *(_QWORD *)(v78 + 16);
                  v224 = v80;
                  *(_QWORD *)(v78 + 8) = 0;
                  *(_QWORD *)(v78 + 16) = 0;
                  *(_QWORD *)v78 = 0;
                  v226 = *(_QWORD *)(v77 + 104);
                  v227 = *(_DWORD *)(v77 + 112);
                  v228 = *v79;
                  v229 = *(_QWORD *)(v77 + 136);
                  *(_QWORD *)v79 = 0;
                  *(_QWORD *)(v77 + 128) = 0;
                  *(_QWORD *)(v77 + 136) = 0;
                  v230 = *(_QWORD *)(v77 + 144);
                  v81 = v76;
                  v231 = *(_DWORD *)(v77 + 152);
                  while (1)
                  {
                    v82 = v81;
                    v83 = v6 + v81;
                    v84 = v6 + v81 + 80;
                    if (*(char *)(v6 + v81 + 103) < 0)
                      operator delete(*(void **)v84);
                    *(_OWORD *)v84 = *(_OWORD *)v83;
                    v85 = *(_QWORD *)(v83 + 24);
                    *(_QWORD *)(v84 + 16) = *(_QWORD *)(v83 + 16);
                    *(_BYTE *)(v83 + 23) = 0;
                    *(_BYTE *)v83 = 0;
                    *(_QWORD *)(v83 + 104) = v85;
                    *(_DWORD *)(v83 + 112) = *(_DWORD *)(v83 + 32);
                    v86 = (void **)(v83 + 120);
                    if (*(char *)(v83 + 143) < 0)
                      operator delete(*v86);
                    v87 = v6 + v82;
                    *(_OWORD *)v86 = *(_OWORD *)(v6 + v82 + 40);
                    v88 = *(_QWORD *)(v6 + v82 + 64);
                    *(_QWORD *)(v83 + 136) = *(_QWORD *)(v6 + v82 + 56);
                    *(_BYTE *)(v87 + 63) = 0;
                    *(_BYTE *)(v87 + 40) = 0;
                    *(_QWORD *)(v87 + 144) = v88;
                    *(_DWORD *)(v87 + 152) = *(_DWORD *)(v6 + v82 + 72);
                    if (!v82)
                      break;
                    v89 = std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)&v224, (uint64_t)&v228, v87 - 80, v87 - 40);
                    v81 = v82 - 80;
                    if ((v89 & 0x80) == 0)
                    {
                      v90 = v6 + v82;
                      v91 = v6 + v82;
                      v92 = v6 + v82 + 24;
                      v93 = v6 + v82 + 64;
                      v94 = v91 + 40;
                      goto LABEL_100;
                    }
                  }
                  v92 = v87 + 24;
                  v93 = v87 + 64;
                  v94 = v87 + 40;
                  v90 = v6;
LABEL_100:
                  if (*(char *)(v90 + 23) < 0)
                    operator delete(*(void **)v90);
                  v95 = 0;
                  v96 = v224;
                  *(_QWORD *)(v90 + 16) = v225;
                  *(_OWORD *)v90 = v96;
                  HIBYTE(v225) = 0;
                  LOBYTE(v224) = 0;
                  v97 = v226;
                  *(_DWORD *)(v92 + 8) = v227;
                  *(_QWORD *)v92 = v97;
                  if (*(char *)(v90 + 63) < 0)
                  {
                    operator delete(*(void **)v94);
                    v95 = HIBYTE(v225);
                  }
                  v98 = v228;
                  *(_QWORD *)(v94 + 16) = v229;
                  *(_OWORD *)v94 = v98;
                  HIBYTE(v229) = 0;
                  LOBYTE(v228) = 0;
                  v99 = v230;
                  *(_DWORD *)(v93 + 8) = v231;
                  *(_QWORD *)v93 = v99;
                  a2 = (uint64_t *)v211;
                  if (v95 < 0)
                    operator delete((void *)v224);
                }
                v75 = v78 + 80;
                v76 += 80;
                v77 = v78;
              }
              while ((uint64_t *)(v78 + 80) != a2);
            }
          }
        }
        else if ((uint64_t *)v6 != a2)
        {
          v178 = v6 + 80;
          if ((uint64_t *)(v6 + 80) != a2)
          {
            v179 = (uint64_t *)(v6 + 144);
            do
            {
              v180 = v178;
              v181 = (__int128 *)(v6 + 120);
              if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v178, v6 + 120, v6, v6 + 40) & 0x80) != 0)
              {
                v182 = *(_OWORD *)v180;
                v225 = *(_QWORD *)(v180 + 16);
                v224 = v182;
                *(_QWORD *)(v180 + 8) = 0;
                *(_QWORD *)(v180 + 16) = 0;
                *(_QWORD *)v180 = 0;
                v226 = *(_QWORD *)(v6 + 104);
                v227 = *(_DWORD *)(v6 + 112);
                v228 = *v181;
                v229 = *(_QWORD *)(v6 + 136);
                *(_QWORD *)v181 = 0;
                *(_QWORD *)(v6 + 128) = 0;
                *(_QWORD *)(v6 + 136) = 0;
                v230 = *(_QWORD *)(v6 + 144);
                v183 = v179;
                v231 = *(_DWORD *)(v6 + 152);
                do
                {
                  v184 = v183;
                  v185 = (void **)(v183 - 8);
                  if (*((char *)v184 - 41) < 0)
                    operator delete(*v185);
                  v186 = (void **)(v184 - 18);
                  *(_OWORD *)v185 = *((_OWORD *)v184 - 9);
                  v185[2] = (void *)*(v184 - 16);
                  *((_BYTE *)v184 - 121) = 0;
                  *((_BYTE *)v184 - 144) = 0;
                  *(v184 - 5) = *(v184 - 15);
                  *((_DWORD *)v184 - 8) = *((_DWORD *)v184 - 28);
                  v187 = (void **)(v184 - 3);
                  if (*((char *)v184 - 1) < 0)
                    operator delete(*v187);
                  *(_OWORD *)v187 = *(_OWORD *)(v184 - 13);
                  *(v184 - 1) = *(v184 - 11);
                  *((_BYTE *)v184 - 81) = 0;
                  v183 = v184 - 10;
                  v188 = *(v184 - 10);
                  *((_BYTE *)v184 - 104) = 0;
                  *v184 = v188;
                  *((_DWORD *)v184 + 2) = *((_DWORD *)v184 - 18);
                }
                while ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)&v224, (uint64_t)&v228, (uint64_t)(v184 - 28), (uint64_t)(v184 - 23)) & 0x80) != 0);
                if (*((char *)v184 - 121) < 0)
                  operator delete(*v186);
                v189 = 0;
                v190 = (void **)(v184 - 13);
                v191 = v184 - 15;
                v192 = v224;
                *(v184 - 16) = v225;
                *(_OWORD *)v186 = v192;
                HIBYTE(v225) = 0;
                LOBYTE(v224) = 0;
                v193 = v227;
                *v191 = v226;
                *((_DWORD *)v191 + 2) = v193;
                if (*((char *)v184 - 81) < 0)
                {
                  operator delete(*v190);
                  v189 = HIBYTE(v225);
                }
                v194 = v228;
                *(v184 - 11) = v229;
                *(_OWORD *)v190 = v194;
                HIBYTE(v229) = 0;
                LOBYTE(v228) = 0;
                v195 = v230;
                *((_DWORD *)v184 - 18) = v231;
                *v183 = v195;
                if (v189 < 0)
                  operator delete((void *)v224);
                a2 = (uint64_t *)v211;
              }
              v178 = v180 + 80;
              v179 += 10;
              v6 = v180;
            }
            while ((uint64_t *)(v180 + 80) != a2);
          }
        }
        return;
    }
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  _BYTE v18[15];
  _BYTE v19[15];

  v3 = *a1;
  *(_QWORD *)v19 = a1[1];
  *(_QWORD *)&v19[7] = *(uint64_t *)((char *)a1 + 15);
  v4 = *((_BYTE *)a1 + 23);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v16 = a1[3];
  v17 = *((_DWORD *)a1 + 8);
  v6 = a1 + 5;
  v5 = a1[5];
  *(_QWORD *)&v18[7] = *(uint64_t *)((char *)a1 + 55);
  *(_QWORD *)v18 = a1[6];
  v7 = *((_BYTE *)a1 + 63);
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  v8 = a1 + 8;
  v15 = *((_DWORD *)a1 + 18);
  v14 = a1[8];
  v9 = *a2;
  a1[2] = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v9;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v10 = (uint64_t)a2 + 24;
  v11 = *((_DWORD *)a2 + 8);
  a1[3] = *((_QWORD *)a2 + 3);
  *((_DWORD *)a1 + 8) = v11;
  if (*((char *)a1 + 63) < 0)
    operator delete((void *)*v6);
  v12 = *(__int128 *)((char *)a2 + 40);
  v6[2] = *((_QWORD *)a2 + 7);
  *(_OWORD *)v6 = v12;
  v13 = *((_QWORD *)a2 + 8);
  *((_BYTE *)a2 + 63) = 0;
  *((_BYTE *)a2 + 40) = 0;
  *((_DWORD *)v8 + 2) = *((_DWORD *)a2 + 18);
  *v8 = v13;
  if (*((char *)a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_QWORD *)a2 = v3;
  *((_QWORD *)a2 + 1) = *(_QWORD *)v19;
  *(_QWORD *)((char *)a2 + 15) = *(_QWORD *)&v19[7];
  *((_BYTE *)a2 + 23) = v4;
  *(_QWORD *)v10 = v16;
  *(_DWORD *)(v10 + 8) = v17;
  if (*((char *)a2 + 63) < 0)
    operator delete(*((void **)a2 + 5));
  *((_QWORD *)a2 + 5) = v5;
  *((_QWORD *)a2 + 6) = *(_QWORD *)v18;
  *(_QWORD *)((char *)a2 + 55) = *(_QWORD *)&v18[7];
  *((_BYTE *)a2 + 63) = v7;
  *((_QWORD *)a2 + 8) = v14;
  *((_DWORD *)a2 + 18) = v15;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>(uint64_t *a1, __int128 *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t *v10;
  __int128 *v11;

  v6 = (uint64_t)a2 + 40;
  v7 = (uint64_t)(a1 + 5);
  v8 = std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a2, (uint64_t)a2 + 40, (uint64_t)a1, (uint64_t)(a1 + 5));
  v9 = (char)std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a3, (uint64_t)a3 + 40, (uint64_t)a2, v6);
  if (v8 < 0)
  {
    v10 = a1;
    if ((v9 & 0x80000000) == 0)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>(a1, a2);
      if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a3, (uint64_t)a3 + 40, (uint64_t)a2, v6) & 0x80) == 0)return;
      v10 = (uint64_t *)a2;
    }
    v11 = a3;
    goto LABEL_10;
  }
  if (v9 < 0)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>((uint64_t *)a2, a3);
    if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a2, v6, (uint64_t)a1, v7) & 0x80) != 0)
    {
      v10 = a1;
      v11 = a2;
LABEL_10:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>(v10, v11);
    }
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>(uint64_t *a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>(a1, a2, a3);
  if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a4, (uint64_t)a4 + 40, (uint64_t)a3, (uint64_t)a3 + 40) & 0x80) != 0)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>((uint64_t *)a3, a4);
    if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a3, (uint64_t)a3 + 40, (uint64_t)a2, (uint64_t)a2 + 40) & 0x80) != 0)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>((uint64_t *)a2, a3);
      if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a2, (uint64_t)a2 + 40, (uint64_t)a1, (uint64_t)(a1 + 5)) & 0x80) != 0)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>(a1, a2);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>(uint64_t *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>(a1, a2, a3, a4);
  if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a5, (uint64_t)a5 + 40, (uint64_t)a4, (uint64_t)a4 + 40) & 0x80) != 0)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>((uint64_t *)a4, a5);
    if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a4, (uint64_t)a4 + 40, (uint64_t)a3, (uint64_t)a3 + 40) & 0x80) != 0)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>((uint64_t *)a3, a4);
      if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a3, (uint64_t)a3 + 40, (uint64_t)a2, (uint64_t)a2 + 40) & 0x80) != 0)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>((uint64_t *)a2, a3);
        if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a2, (uint64_t)a2 + 40, (uint64_t)a1, (uint64_t)(a1 + 5)) & 0x80) != 0)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>(a1, a2);
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void *__p[2];
  uint64_t v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(a2 - 80, a2 - 40, a1, a1 + 40) & 0x80) != 0)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>((uint64_t *)a1, (__int128 *)(a2 - 80));
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t *)a1, (__int128 *)(a1 + 80), (__int128 *)(a2 - 80));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t *)a1, (__int128 *)(a1 + 80), (__int128 *)(a1 + 160), (__int128 *)(a2 - 80));
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t *)a1, (__int128 *)(a1 + 80), (__int128 *)(a1 + 160), (__int128 *)(a1 + 240), (__int128 *)(a2 - 80));
      return 1;
    default:
      v6 = a1 + 160;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t *)a1, (__int128 *)(a1 + 80), (__int128 *)(a1 + 160));
      v7 = a1 + 240;
      if (a1 + 240 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v10 = (__int128 *)(v7 + 40);
    if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v7, v7 + 40, v6, v6 + 40) & 0x80) != 0)
    {
      v11 = *(_QWORD *)(v7 + 24);
      v28 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)__p = *(_OWORD *)v7;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)v7 = 0;
      v29 = v11;
      v30 = *(_DWORD *)(v7 + 32);
      v31 = *v10;
      v32 = *(_QWORD *)(v7 + 56);
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_QWORD *)v10 = 0;
      v12 = *(_QWORD *)(v7 + 64);
      v34 = *(_DWORD *)(v7 + 72);
      v13 = v8;
      v33 = v12;
      while (1)
      {
        v14 = v13;
        v15 = a1 + v13;
        v16 = a1 + v13 + 240;
        if (*(char *)(a1 + v13 + 263) < 0)
          operator delete(*(void **)v16);
        *(_OWORD *)v16 = *(_OWORD *)(v15 + 160);
        *(_QWORD *)(v16 + 16) = *(_QWORD *)(v15 + 176);
        *(_BYTE *)(v15 + 183) = 0;
        *(_BYTE *)(v15 + 160) = 0;
        *(_QWORD *)(v15 + 264) = *(_QWORD *)(v15 + 184);
        *(_DWORD *)(v15 + 272) = *(_DWORD *)(v15 + 192);
        v17 = (void **)(v15 + 280);
        if (*(char *)(v15 + 303) < 0)
          operator delete(*v17);
        v18 = a1 + v14;
        *(_OWORD *)v17 = *(_OWORD *)(a1 + v14 + 200);
        v19 = *(_QWORD *)(a1 + v14 + 224);
        *(_QWORD *)(v15 + 296) = *(_QWORD *)(a1 + v14 + 216);
        *(_BYTE *)(v18 + 223) = 0;
        *(_BYTE *)(v18 + 200) = 0;
        *(_QWORD *)(v18 + 304) = v19;
        *(_DWORD *)(v18 + 312) = *(_DWORD *)(a1 + v14 + 232);
        if (v14 == -160)
          break;
        v20 = std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)__p, (uint64_t)&v31, v18 + 80, v18 + 120);
        v13 = v14 - 80;
        if ((v20 & 0x80) == 0)
        {
          v21 = a1 + v13 + 240;
          v22 = a1 + v14;
          v23 = a1 + v14 + 224;
          v24 = v22 + 184;
          v25 = v22 + 200;
          goto LABEL_16;
        }
      }
      v23 = v18 + 224;
      v24 = v18 + 184;
      v25 = v18 + 200;
      v21 = a1;
LABEL_16:
      if (*(char *)(v21 + 23) < 0)
        operator delete(*(void **)v21);
      v26 = 0;
      *(_OWORD *)v21 = *(_OWORD *)__p;
      *(_QWORD *)(v21 + 16) = v28;
      HIBYTE(v28) = 0;
      LOBYTE(__p[0]) = 0;
      *(_QWORD *)v24 = v29;
      *(_DWORD *)(v24 + 8) = v30;
      if (*(char *)(v21 + 63) < 0)
      {
        operator delete(*(void **)v25);
        v26 = HIBYTE(v28);
      }
      *(_OWORD *)v25 = v31;
      *(_QWORD *)(v25 + 16) = v32;
      HIBYTE(v32) = 0;
      LOBYTE(v31) = 0;
      *(_QWORD *)v23 = v33;
      *(_DWORD *)(v23 + 8) = v34;
      if (v26 < 0)
        operator delete(__p[0]);
      if (++v9 == 8)
        return v7 + 80 == a2;
    }
    v6 = v7;
    v8 += 80;
    v7 += 80;
    if (v7 == a2)
      return 1;
  }
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, a2, a3, a4);
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, a4) & 0x80) != 0)
  {
    v11 = a4[2];
    v12 = *(_OWORD *)a4;
    v13 = a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v13;
    *(_OWORD *)a5 = v12;
    a5[2] = v11;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a4, a3) & 0x80) != 0)
    {
      v14 = a3[2];
      v15 = *(_OWORD *)a3;
      v16 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v16;
      *(_OWORD *)a4 = v15;
      a4[2] = v14;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2) & 0x80) != 0)
      {
        v17 = a2[2];
        v18 = *(_OWORD *)a2;
        v19 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v19;
        *(_OWORD *)a3 = v18;
        a3[2] = v17;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a1) & 0x80) != 0)
        {
          v20 = a1[1].n128_u64[0];
          result = *a1;
          v21 = a2[2];
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v21;
          *(__n128 *)a2 = result;
          a2[2] = v20;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, __n128 *a2)
{
  unint64_t v4;
  _BOOL8 result;
  __n128 *v6;
  unint64_t v7;
  __n128 v8;
  unint64_t v9;
  __n128 *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__n128 *)((char *)a2 - 24);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a2[-2].n128_u64[1], a1) & 0x80) != 0)
      {
        v7 = a1[1].n128_u64[0];
        v8 = *a1;
        v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        *v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a2[-2].n128_u64[1]);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    default:
      v10 = a1 + 3;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64);
      v11 = &a1[4].n128_u64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v10) & 0x80) != 0)
    {
      v17 = *(_OWORD *)v11;
      v18 = v11[2];
      v11[1] = 0;
      v11[2] = 0;
      *v11 = 0;
      v14 = v12;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((_QWORD *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        v15[71] = 0;
        v15[48] = 0;
        if (v14 == -48)
          break;
        v14 -= 24;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v17, (_QWORD *)v15 + 3) & 0x80) == 0)
        {
          v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)v16 = v17;
      *(_QWORD *)(v16 + 16) = v18;
      if (++v13 == 8)
        return v11 + 3 == (unint64_t *)a2;
    }
    v10 = (__n128 *)v11;
    v12 += 24;
    v11 += 3;
    if (v11 == (unint64_t *)a2)
      return 1;
  }
}

uint64_t AMCP::graph_description_to_json@<X0>(AMCP *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  char v10;
  _QWORD v11[2];
  uint64_t v12;
  _QWORD v13[10];
  char v14;
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
  LOBYTE(v7[0]) = 0;
  HIDWORD(v7[0]) = 0;
  v7[1] = &v12;
  v7[2] = 0;
  v8 = 1;
  v9 = 4;
  v10 = 0;
  AMCP::write_json((uint64_t)v7, (uint64_t *)this);
  minijson::writer::close(v7);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v13);
  v11[0] = *MEMORY[0x1E0DE4F50];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v12 = v5;
  v13[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B5E50598](&v15);
}

void sub_1B5C4C6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  *(_QWORD *)(v35 + *(_QWORD *)(*MEMORY[0x1E0DE4F50] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  if (a32 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E50598](&a35);
  _Unwind_Resume(a1);
}

uint64_t AMCP::modify_graph_destroy_list_to_json@<X0>(AMCP *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD v23[10];
  char v24;
  uint64_t v25;
  void *__p[2];
  char v27;
  char *v28;
  char *v29;
  uint64_t v30;
  std::string v31;
  _QWORD v32[3];
  __int128 v33;
  uint64_t v34;
  std::string *v35;
  uint64_t *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  char v41;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v21);
  LOBYTE(v16) = 0;
  HIDWORD(v16) = 0;
  v17 = &v22;
  v18 = 0;
  LOBYTE(v19) = 1;
  *((_QWORD *)&v19 + 1) = 4;
  LOBYTE(v20) = 0;
  memset(&v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v31, *(__int128 **)this, *((__int128 **)this + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
  v28 = 0;
  v29 = 0;
  v30 = 0;
  std::vector<AMCP::Wire_Identifier>::__init_with_size[abi:ne180100]<AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>(&v28, *((_QWORD *)this + 3), *((_QWORD *)this + 4), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 4));
  v5 = 126
     - 2
     * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31.__r_.__value_.__l.__size_ - v31.__r_.__value_.__r.__words[0]) >> 3));
  if (v31.__r_.__value_.__l.__size_ == v31.__r_.__value_.__r.__words[0])
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((__n128 *)v31.__r_.__value_.__l.__data_, (__n128 *)v31.__r_.__value_.__l.__size_, v6, 1);
  std::string::basic_string[abi:ne180100]<0>(&v35, "nodes_to_destroy");
  AMCP::write_json_array<std::string>((uint64_t)&v16, (char *)&v35, (uint64_t *)&v31);
  if (SHIBYTE(v37) < 0)
    operator delete(v35);
  v7 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v29 - v28) >> 4));
  if (v29 == v28)
    v8 = 0;
  else
    v8 = v7;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *,false>((uint64_t *)v28, (uint64_t *)v29, v8, 1);
  v9 = (char *)__p;
  std::string::basic_string[abi:ne180100]<0>(__p, "wires_to_destroy");
  if (v27 < 0)
    v9 = (char *)__p[0];
  minijson::writer::next_field((minijson::writer *)&v16);
  minijson::writer::write_field_name(&v16, v9);
  v10 = v17;
  v38 = v19;
  v39 = v20;
  LOBYTE(v35) = 1;
  HIDWORD(v35) = 0;
  v36 = v17;
  v37 = v18 + 1;
  v11 = (uint64_t *)v28;
  v12 = (uint64_t *)v29;
  if (v28 != v29)
  {
    do
    {
      minijson::writer::next_field((minijson::writer *)&v35);
      v10 = v36;
      v33 = v38;
      v34 = v39;
      LOBYTE(v32[0]) = 0;
      HIDWORD(v32[0]) = 0;
      v32[1] = v36;
      v32[2] = v37 + 1;
      std::string::basic_string[abi:ne180100]<0>(v40, "source");
      AMCP::write_json_object<AMCP::Terminal_Identifier>((uint64_t)v32, (char *)v40, (uint64_t)v11);
      if (v41 < 0)
        operator delete(v40[0]);
      std::string::basic_string[abi:ne180100]<0>(v40, "destination");
      v13 = (uint64_t)(v11 + 5);
      AMCP::write_json_object<AMCP::Terminal_Identifier>((uint64_t)v32, (char *)v40, v13);
      if (v41 < 0)
        operator delete(v40[0]);
      minijson::writer::close(v32);
      v11 = (uint64_t *)(v13 + 40);
    }
    while (v11 != v12);
  }
  minijson::writer::close(&v35);
  if (v27 < 0)
    operator delete(__p[0]);
  v35 = (std::string *)&v28;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  v35 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  minijson::writer::close(&v16);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v23);
  v21[0] = *MEMORY[0x1E0DE4F50];
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v22 = v14;
  v23[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v24 < 0)
    operator delete((void *)v23[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B5E50598](&v25);
}

void sub_1B5C4CA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;
  uint64_t v61;

  a54 = v59 - 248;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  *(_QWORD *)(v59 - 248) = v59 - 224;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 248));
  a16 = *MEMORY[0x1E0DE4F50];
  v61 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(uint64_t *)((char *)&a16 + *(_QWORD *)(a16 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  a18 = v61;
  a19 = MEMORY[0x1E0DE4FB8] + 16;
  if (a32 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E50598](&a35);
  _Unwind_Resume(a1);
}

uint64_t AMCP::extended_graph_description_to_json@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  __int128 *v9;
  char *v10;
  __int128 v11;
  std::string *v12;
  const std::string::value_type **v13;
  __int128 v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  char *i;
  _BYTE *v27;
  int *v28;
  int *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  _QWORD v41[10];
  char v42;
  uint64_t v43;
  void *v44[2];
  char v45;
  uint64_t *v46;
  char *v47;
  char *v48;
  void *v49[2];
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  void **v53;
  uint64_t *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  std::string v58;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v39);
  LOBYTE(v34) = 0;
  HIDWORD(v34) = 0;
  v35 = &v40;
  v36 = 0;
  LOBYTE(v37) = 1;
  *((_QWORD *)&v37 + 1) = 4;
  LOBYTE(v38) = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v3 = a1[6];
  v4 = a1[7];
  v53 = (void **)&v46;
  LOBYTE(v54) = 0;
  v5 = v4 - v3;
  if (v4 == v3)
  {
    v17 = 0;
    v18 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(v5 >> 6);
    v7 = 0;
    v46 = v6;
    v47 = (char *)v6;
    v48 = (char *)&v6[8 * v8];
    do
    {
      v9 = (__int128 *)(v3 + v7);
      v10 = (char *)&v6[v7 / 8];
      if (*(char *)(v3 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v6[v7 / 8], *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v11 = *v9;
        *((_QWORD *)v10 + 2) = *((_QWORD *)v9 + 2);
        *(_OWORD *)v10 = v11;
      }
      v12 = (std::string *)&v6[v7 / 8 + 3];
      v13 = (const std::string::value_type **)(v3 + v7 + 24);
      if (*(char *)(v3 + v7 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v12, *v13, *(_QWORD *)(v3 + v7 + 32));
      }
      else
      {
        v14 = *(_OWORD *)v13;
        v6[v7 / 8 + 5] = *(_QWORD *)(v3 + v7 + 40);
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v14;
      }
      v15 = (char *)&v6[v7 / 8];
      v16 = *(_QWORD *)(v3 + v7 + 48);
      *(_QWORD *)(v15 + 55) = *(_QWORD *)(v3 + v7 + 55);
      *((_QWORD *)v15 + 6) = v16;
      v7 += 64;
    }
    while (v3 + v7 != v4);
    v17 = (unint64_t)&v6[v7 / 8];
    v18 = v46;
    v47 = (char *)&v6[v7 / 8];
  }
  v19 = 126 - 2 * __clz((uint64_t)(v17 - (_QWORD)v18) >> 6);
  if ((uint64_t *)v17 == v18)
    v20 = 0;
  else
    v20 = v19;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *,false>(v18, v17, v20, 1);
  v21 = (char *)v49;
  std::string::basic_string[abi:ne180100]<0>(v49, "graph");
  if (v50 < 0)
    v21 = (char *)v49[0];
  minijson::writer::next_field((minijson::writer *)&v34);
  minijson::writer::write_field_name(&v34, v21);
  v22 = v35;
  v56 = v37;
  v57 = v38;
  LOBYTE(v53) = 0;
  HIDWORD(v53) = 0;
  v54 = v35;
  v55 = v36 + 1;
  AMCP::write_json((uint64_t)&v53, a1);
  minijson::writer::close(&v53);
  if (SHIBYTE(v50) < 0)
    operator delete(v49[0]);
  v23 = (char *)v44;
  std::string::basic_string[abi:ne180100]<0>(v44, "wire_properties");
  if (v45 < 0)
    v23 = (char *)v44[0];
  minijson::writer::next_field((minijson::writer *)&v34);
  minijson::writer::write_field_name(&v34, v23);
  v24 = v35;
  v56 = v37;
  v57 = v38;
  LOBYTE(v53) = 1;
  HIDWORD(v53) = 0;
  v54 = v35;
  v55 = v36 + 1;
  v25 = (uint64_t)v46;
  for (i = v47; (char *)v25 != i; v25 = (uint64_t)(v30 + 3))
  {
    minijson::writer::next_field((minijson::writer *)&v53);
    v24 = v54;
    v51 = v56;
    v52 = v57;
    LOBYTE(v49[0]) = 0;
    HIDWORD(v49[0]) = 0;
    v49[1] = v54;
    v50 = v55 + 1;
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)v49, "source_clock_node_uid", v25);
    v27 = (_BYTE *)(v25 + 24);
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)v49, "destination_clock_node_uid", (uint64_t)v27);
    v27 += 24;
    minijson::writer::write_helper<BOOL,minijson::default_value_writer<BOOL,void>>((minijson::writer *)v49, "requires_resampler", v27++);
    minijson::writer::write_helper<BOOL,minijson::default_value_writer<BOOL,void>>((minijson::writer *)v49, "requires_delay", v27++);
    minijson::writer::write_helper<BOOL,minijson::default_value_writer<BOOL,void>>((minijson::writer *)v49, "requires_format_conversion", v27++);
    minijson::writer::write_helper<BOOL,minijson::default_value_writer<BOOL,void>>((minijson::writer *)v49, "requires_drift_correction", v27);
    v28 = (int *)(v27 + 1);
    AMCP::enum_to_string<AMCP::Resampler_Type>(&v58, v28);
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)v49, "resampler_type", (uint64_t)&v58);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    v29 = v28 + 1;
    AMCP::enum_to_string<AMCP::Resampler_Quality>(&v58, v29);
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)v49, "resampler_quality", (uint64_t)&v58);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    v30 = v29 + 1;
    minijson::writer::write_helper<BOOL,minijson::default_value_writer<BOOL,void>>((minijson::writer *)v49, "requires_channel_map", v30++);
    minijson::writer::write_helper<BOOL,minijson::default_value_writer<BOOL,void>>((minijson::writer *)v49, "requires_volume_processing", v30);
    minijson::writer::close(v49);
  }
  minijson::writer::close(&v53);
  if (v45 < 0)
    operator delete(v44[0]);
  v53 = (void **)&v46;
  std::vector<AMCP::Wire_Connection_Properties>::__destroy_vector::operator()[abi:ne180100](&v53);
  minijson::writer::close(&v34);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v41);
  v39[0] = *MEMORY[0x1E0DE4F50];
  v31 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v39 + *(_QWORD *)(v39[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v40 = v31;
  v41[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v42 < 0)
    operator delete((void *)v41[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B5E50598](&v43);
}

void sub_1B5C4D034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v37;

  *(_QWORD *)(v35 - 256) = v35 - 232;
  std::vector<AMCP::Wire_Connection_Properties>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 256));
  a16 = *MEMORY[0x1E0DE4F50];
  v37 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(uint64_t *)((char *)&a16 + *(_QWORD *)(a16 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  a18 = v37;
  a19 = MEMORY[0x1E0DE4FB8] + 16;
  if (a32 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E50598](&a35);
  _Unwind_Resume(a1);
}

uint64_t minijson::istream_context::read(minijson::istream_context *this)
{
  char v2;

  v2 = std::istream::get();
  if ((*(_BYTE *)(*((_QWORD *)this + 2) + *(_QWORD *)(**((_QWORD **)this + 2) - 24) + 32) & 5) != 0)
    return 0;
  else
    ++*((_QWORD *)this + 3);
  return v2;
}

void minijson::detail::read_quoted_string<minijson::istream_context>(minijson::istream_context **this)
{
  unsigned __int16 v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  minijson::istream_context *v8;
  minijson::istream_context *v9;
  uint64_t i;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *exception;
  minijson::istream_context *v24;
  BOOL v25;
  char *v26;
  int v27;
  minijson::istream_context *v28;
  char *v29;
  _QWORD *v30;
  minijson::istream_context *v31;
  char *v32;
  void *v33;
  minijson::istream_context *v34;
  char *v35;
  void *v36;
  int v37;
  int v38;
  int v39;
  char v40;

  v2 = 0;
  v3 = 0;
  v40 = 0;
  v39 = 0;
  v4 = 1;
  v5 = MEMORY[0x1E0C80978];
  while (1)
  {
    do
    {
      while (1)
      {
        while (1)
        {
LABEL_2:
          v6 = minijson::istream_context::read((minijson::istream_context *)this);
          if (!v6)
          {
            exception = __cxa_allocate_exception(0x18uLL);
            v24 = this[3];
            v25 = v24 != 0;
            v26 = (char *)v24 - 1;
            if (!v25)
              v26 = 0;
            *exception = &off_1E699B850;
            exception[1] = v26;
            v27 = 5;
            goto LABEL_62;
          }
          v7 = v6;
          if (v4 != 3)
            break;
          *((_BYTE *)&v39 + v3++) = v6;
          if (v3 == 4)
          {
            for (i = 0; i != 4; ++i)
            {
              if (*((char *)&v39 + i) < 0
                || (*(_DWORD *)(v5 + 4 * *((unsigned __int8 *)&v39 + i) + 60) & 0x10000) == 0)
              {
                v22 = __cxa_allocate_exception(1uLL);
              }
            }
            v11 = minijson::detail::parse_long((minijson::detail *)&v39, (const char *)0x10);
            if (!((unsigned __int16)v11 | v2))
            {
              v30 = __cxa_allocate_exception(0x18uLL);
              v31 = this[3];
              v25 = v31 != 0;
              v32 = (char *)v31 - 1;
              if (!v25)
                v32 = 0;
              *v30 = &off_1E699B850;
              v30[1] = v32;
              *((_DWORD *)v30 + 4) = 13;
            }
            if (v2)
            {
              if ((unsigned __int16)((unsigned __int16)(v2 + 0x2000) >> 11) > 0x1Eu)
              {
                if ((unsigned __int16)(v2 >> 10) > 0x36u
                  || (unsigned __int16)((unsigned __int16)(v11 + 0x2000) >> 10) <= 0x3Eu)
                {
LABEL_69:
                  v33 = __cxa_allocate_exception(1uLL);
                }
                v19 = (unsigned __int16)(v11 + 9216) | ((unsigned __int16)(v2 + 10240) << 10);
                v12 = ((v19 + 0x10000) >> 18) | 0xF0;
                v15 = ((v19 + 0x10000) >> 12) & 0x3F | 0x80;
                v14 = (v19 >> 6) & 0x3F | 0x80;
                v13 = (((v11 + 9216) & 0x3F) << 24) | 0x80000000;
              }
              else
              {
                if ((_WORD)v11)
                  goto LABEL_69;
                v12 = v2;
                if (v2 >= 0x80u)
                {
                  v15 = v2 & 0x3F | 0x80;
                  v13 = 0;
                  if (v2 > 0x7FFu)
                  {
                    v14 = v2 & 0x3F | 0x80;
                    v15 = (v2 >> 6) & 0x3F | 0x80;
                    v12 = (v2 >> 12) | 0xE0;
                  }
                  else
                  {
                    v14 = 0;
                    v12 = (v2 >> 6) | 0xC0;
                  }
                }
                else
                {
                  v13 = 0;
                  v14 = 0;
                  v15 = 0;
                }
              }
              v20 = 0;
              v38 = v13 | (v14 << 16) | (v15 << 8) | v12;
              do
              {
                if (v20 && !*((_BYTE *)&v38 + v20))
                  break;
                minijson::istream_context::write(this[4], *((_BYTE *)&v38 + v20++));
              }
              while (v20 != 4);
LABEL_56:
              v2 = 0;
              v3 = 0;
              v4 = 1;
            }
            else
            {
              v3 = 0;
              v4 = 1;
              v2 = v11;
              if ((unsigned __int16)v11 >> 10 != 54)
              {
                if ((unsigned __int16)((unsigned __int16)(v11 + 0x2000) >> 11) > 0x1Eu)
                {
                  v36 = __cxa_allocate_exception(1uLL);
                }
                v16 = (unsigned __int16)v11;
                if ((unsigned __int16)v11 >= 0x80u)
                {
                  if ((unsigned __int16)v11 > 0x7FFu)
                  {
                    v16 = ((unsigned __int16)v11 >> 12) | 0xE0;
                    v18 = (v11 >> 6) & 0x3F | 0x80;
                    v17 = v11 & 0x3F | 0x80;
                  }
                  else
                  {
                    v17 = 0;
                    v16 = ((unsigned __int16)v11 >> 6) | 0xC0;
                    v18 = v11 & 0x3F | 0x80;
                  }
                }
                else
                {
                  v17 = 0;
                  v18 = 0;
                }
                v21 = 0;
                v37 = (v17 << 16) | (v18 << 8) | v16;
                do
                {
                  if (v21 && !*((_BYTE *)&v37 + v21))
                    break;
                  minijson::istream_context::write(this[4], *((_BYTE *)&v37 + v21++));
                }
                while (v21 != 4);
                goto LABEL_56;
              }
            }
          }
        }
        if (v4 != 2)
          break;
        if (v6 <= 97)
        {
          if (v6 == 34 || v6 == 47 || v6 == 92)
          {
            v9 = this[4];
            goto LABEL_14;
          }
LABEL_70:
          exception = __cxa_allocate_exception(0x18uLL);
          v34 = this[3];
          v25 = v34 != 0;
          v35 = (char *)v34 - 1;
          if (!v25)
            v35 = 0;
          *exception = &off_1E699B850;
          exception[1] = v35;
          v27 = 3;
LABEL_62:
          *((_DWORD *)exception + 4) = v27;
        }
        v4 = 3;
        switch(v6)
        {
          case 'n':
            v9 = this[4];
            LOBYTE(v7) = 10;
            break;
          case 'o':
          case 'p':
          case 'q':
          case 's':
            goto LABEL_70;
          case 'r':
            v9 = this[4];
            LOBYTE(v7) = 13;
            break;
          case 't':
            v9 = this[4];
            LOBYTE(v7) = 9;
            break;
          case 'u':
            goto LABEL_2;
          default:
            if (v6 == 98)
            {
              v9 = this[4];
              LOBYTE(v7) = 8;
            }
            else
            {
              if (v6 != 102)
                goto LABEL_70;
              v9 = this[4];
              LOBYTE(v7) = 12;
            }
            break;
        }
LABEL_14:
        minijson::istream_context::write(v9, v7);
        v4 = 1;
      }
      v4 = 2;
    }
    while (v6 == 92);
    if (v2)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      v28 = this[3];
      v25 = v28 != 0;
      v29 = (char *)v28 - 1;
      if (!v25)
        v29 = 0;
      *exception = &off_1E699B850;
      exception[1] = v29;
      v27 = 2;
      goto LABEL_62;
    }
    v8 = this[4];
    if (v7 == 34)
      break;
    minijson::istream_context::write(v8, v7);
    v2 = 0;
    v4 = 1;
  }
  minijson::istream_context::write(v8, 0);
}

