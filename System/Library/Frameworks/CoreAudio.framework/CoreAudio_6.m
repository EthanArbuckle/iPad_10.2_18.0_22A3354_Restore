void sub_1B5A884C8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void HALS_MetaStream::SetPropertyData(HALS_Device **this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, double *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  const AudioObjectPropertyAddress *v16;
  uint64_t v17;
  HALB_Mutex *v18;
  HALS_Object *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  HALS_IODevice *v24;
  unsigned int *v25;
  AudioObjectPropertySelector mSelector;
  HALB_Mutex *v27;
  int v28;
  int v29;
  __int128 v30;
  HALB_Mutex *v31;
  HALS_Object *v32;
  HALB_Mutex *v33;
  int v34;
  int v35;
  __int128 v36;
  HALB_Mutex *v37;
  _DWORD *exception;
  int v39;
  NSObject *v40;
  const char *v41;
  _DWORD *v42;
  _DWORD *v43;
  _DWORD *v44;
  NSObject *v45;
  const char *v46;
  NSObject *v47;
  const char *v48;
  _DWORD *v49;
  _DWORD *v50;
  _QWORD v51[6];
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _QWORD v55[7];
  _QWORD v56[6];
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  _QWORD v64[7];
  _QWORD v65[8];
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t);
  void (*v78)(uint64_t, HALS_Object *);
  HALS_ObjectMap *v79;
  _BYTE v80[32];
  uint64_t v81;
  _BYTE buf[24];
  __n128 (*v83)(uint64_t, uint64_t);
  uint64_t (*v84)();
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  if (((*((uint64_t (**)(HALS_Device **, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))*this
         + 12))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v39 = 2003332927;
    goto LABEL_45;
  }
  if (HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, v16)
    && !HALS_Device::IsHogModeOwnerOrFree(this[8], a8))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v39 = 560492391;
LABEL_45:
    exception[2] = v39;
  }
  v74 = 0;
  v75 = &v74;
  v76 = 0x3002000000;
  v77 = __Block_byref_object_copy__6876;
  v78 = __Block_byref_object_dispose__6877;
  v79 = 0;
  v70 = 0;
  v71 = &v70;
  v72 = 0x2000000000;
  v73 = 0;
  v66 = 0;
  v67 = &v66;
  v68 = 0x2000000000;
  v69 = 0;
  v17 = MEMORY[0x1E0C809B0];
  v65[0] = MEMORY[0x1E0C809B0];
  v65[1] = 0x40000000;
  v65[2] = ___ZN15HALS_MetaStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
  v65[3] = &unk_1E69838A8;
  v65[4] = &v74;
  v65[5] = &v66;
  v65[6] = &v70;
  v65[7] = this;
  v18 = (HALB_Mutex *)(*((uint64_t (**)(HALS_Device **))*this + 7))(this);
  HALB_CommandGate::ExecuteCommand(v18, (uint64_t)v65);
  v24 = (HALS_IODevice *)v75[5];
  if (v24)
  {
    v25 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(v24, *((_BYTE *)v71 + 24), *((_DWORD *)v67 + 6));
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  }
  else
  {
    v25 = 0;
  }
  mSelector = a3->mSelector;
  if (a3->mSelector == 1885762592)
  {
    if (v25)
      goto LABEL_27;
    if (*((_BYTE *)this + 72))
      goto LABEL_28;
    if (a4 <= 0x27)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_52;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_MetaStream.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 677;
      v40 = MEMORY[0x1E0C81028];
      v41 = "%25s:%-5d  HALS_MetaStream::_SetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormat";
      goto LABEL_51;
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x5002000000;
    v83 = __Block_byref_object_copy__31;
    v84 = __Block_byref_object_dispose__32;
    v55[0] = v17;
    v55[1] = 0x40000000;
    v55[2] = ___ZN15HALS_MetaStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_37;
    v55[3] = &unk_1E6983920;
    v55[5] = this;
    v55[6] = a5;
    v55[4] = buf;
    v33 = (HALB_Mutex *)(*((uint64_t (**)(HALS_Device **))*this + 7))(this);
    HALB_CommandGate::ExecuteCommand(v33, (uint64_t)v55);
    if (*a5 == 0.0 || *a5 == *(double *)(*(_QWORD *)&buf[8] + 40))
    {
      v34 = *((_DWORD *)a5 + 2);
      if (v34 && v34 != *(_DWORD *)(*(_QWORD *)&buf[8] + 48))
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_70;
        *(_DWORD *)v80 = 136315394;
        *(_QWORD *)&v80[4] = "HALS_MetaStream.cpp";
        *(_WORD *)&v80[12] = 1024;
        *(_DWORD *)&v80[14] = 691;
        v47 = MEMORY[0x1E0C81028];
        v48 = "%25s:%-5d  HALS_MetaStream::_SetPropertyData: unsupported format ID for kAudioStreamPropertyPhysicalFormat";
      }
      else
      {
        v35 = *((_DWORD *)a5 + 7);
        if (!v35 || v35 == *(_DWORD *)(*(_QWORD *)&buf[8] + 68))
        {
          v36 = *(_OWORD *)(*(_QWORD *)&buf[8] + 56);
          *(_OWORD *)v80 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
          *(_OWORD *)&v80[16] = v36;
          v81 = *(_QWORD *)(*(_QWORD *)&buf[8] + 72);
          v60 = 0;
          v61 = &v60;
          v62 = 0x2000000000;
          v63 = 0;
          v51[0] = v17;
          v51[1] = 0x40000000;
          v51[2] = ___ZN15HALS_MetaStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_39;
          v51[3] = &unk_1E6983948;
          v52 = *(_OWORD *)v80;
          v53 = v36;
          v54 = v81;
          v51[4] = &v60;
          v51[5] = this;
          v37 = (HALB_Mutex *)(*((uint64_t (**)(HALS_Device **))*this + 7))(this);
          HALB_CommandGate::ExecuteCommand(v37, (uint64_t)v51);
          if (*((_DWORD *)v61 + 6))
          {
            v44 = __cxa_allocate_exception(4uLL);
            *v44 = *((_DWORD *)v61 + 6);
            __cxa_throw(v44, MEMORY[0x1E0DE4EF0], 0);
          }
          if (a8
            && (*(_DWORD *)(*(_QWORD *)&buf[8] + 48) != 1819304813
             || (*(_DWORD *)(*(_QWORD *)&buf[8] + 52) & 0x40) != 0))
          {
            HALS_Client::SetNonMixableFormat(a8, *((_DWORD *)this[8] + 4));
          }
          goto LABEL_42;
        }
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
LABEL_70:
          v50 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v50 = &off_1E69A1B30;
          v50[2] = 560226676;
        }
        *(_DWORD *)v80 = 136315394;
        *(_QWORD *)&v80[4] = "HALS_MetaStream.cpp";
        *(_WORD *)&v80[12] = 1024;
        *(_DWORD *)&v80[14] = 694;
        v47 = MEMORY[0x1E0C81028];
        v48 = "%25s:%-5d  HALS_MetaStream::_SetPropertyData: unsupported number of channels for kAudioStreamPropertyPhysicalFormat";
      }
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_70;
      *(_DWORD *)v80 = 136315394;
      *(_QWORD *)&v80[4] = "HALS_MetaStream.cpp";
      *(_WORD *)&v80[12] = 1024;
      *(_DWORD *)&v80[14] = 688;
      v47 = MEMORY[0x1E0C81028];
      v48 = "%25s:%-5d  HALS_MetaStream::_SetPropertyData: unsupported sample rate for kAudioStreamPropertyPhysicalFormat";
    }
    _os_log_impl(&dword_1B57BA000, v47, OS_LOG_TYPE_ERROR, v48, v80, 0x12u);
    goto LABEL_70;
  }
  if (mSelector != 1936092532)
  {
    if (mSelector == 1935894638)
      HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v20, v21, v22, v23, (uint64_t)a8);
    if (!v25)
      HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v20, v21, v22, v23, (uint64_t)a8);
    goto LABEL_27;
  }
  if (v25)
  {
LABEL_27:
    (*(void (**)(unsigned int *, _QWORD, const AudioObjectPropertyAddress *, uint64_t, double *, uint64_t, const void *, HALS_Client *))(*(_QWORD *)v25 + 120))(v25, v25[4], a3, a4, a5, a6, a7, a8);
    goto LABEL_28;
  }
  if (!*((_BYTE *)this + 72))
  {
    if (a4 > 0x27)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x5002000000;
      v83 = __Block_byref_object_copy__31;
      v84 = __Block_byref_object_dispose__32;
      v64[0] = v17;
      v64[1] = 0x40000000;
      v64[2] = ___ZN15HALS_MetaStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_33;
      v64[3] = &unk_1E69838D0;
      v64[5] = this;
      v64[6] = a5;
      v64[4] = buf;
      v27 = (HALB_Mutex *)(*((uint64_t (**)(HALS_Device **))*this + 7))(this);
      HALB_CommandGate::ExecuteCommand(v27, (uint64_t)v64);
      if (*a5 == 0.0 || *a5 == *(double *)(*(_QWORD *)&buf[8] + 40))
      {
        v28 = *((_DWORD *)a5 + 2);
        if (v28 && v28 != *(_DWORD *)(*(_QWORD *)&buf[8] + 48))
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_66;
          *(_DWORD *)v80 = 136315394;
          *(_QWORD *)&v80[4] = "HALS_MetaStream.cpp";
          *(_WORD *)&v80[12] = 1024;
          *(_DWORD *)&v80[14] = 639;
          v45 = MEMORY[0x1E0C81028];
          v46 = "%25s:%-5d  HALS_MetaStream::_SetPropertyData: unsupported format ID for kAudioStreamPropertyVirtualFormat";
        }
        else
        {
          v29 = *((_DWORD *)a5 + 7);
          if (!v29 || v29 == *(_DWORD *)(*(_QWORD *)&buf[8] + 68))
          {
            v30 = *(_OWORD *)(*(_QWORD *)&buf[8] + 56);
            *(_OWORD *)v80 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
            *(_OWORD *)&v80[16] = v30;
            v81 = *(_QWORD *)(*(_QWORD *)&buf[8] + 72);
            v60 = 0;
            v61 = &v60;
            v62 = 0x2000000000;
            v63 = 0;
            v56[0] = v17;
            v56[1] = 0x40000000;
            v56[2] = ___ZN15HALS_MetaStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_35;
            v56[3] = &unk_1E69838F8;
            v57 = *(_OWORD *)v80;
            v58 = v30;
            v59 = v81;
            v56[4] = &v60;
            v56[5] = this;
            v31 = (HALB_Mutex *)(*((uint64_t (**)(HALS_Device **))*this + 7))(this);
            HALB_CommandGate::ExecuteCommand(v31, (uint64_t)v56);
            if (*((_DWORD *)v61 + 6))
            {
              v43 = __cxa_allocate_exception(4uLL);
              *v43 = *((_DWORD *)v61 + 6);
              __cxa_throw(v43, MEMORY[0x1E0DE4EF0], 0);
            }
            if (a8
              && (*(_DWORD *)(*(_QWORD *)&buf[8] + 48) != 1819304813
               || (*(_DWORD *)(*(_QWORD *)&buf[8] + 52) & 0x40) != 0))
            {
              HALS_Client::SetNonMixableFormat(a8, *((_DWORD *)this[8] + 4));
            }
LABEL_42:
            _Block_object_dispose(&v60, 8);
            _Block_object_dispose(buf, 8);
            goto LABEL_28;
          }
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
LABEL_66:
            v49 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v49 = &off_1E69A1B30;
            v49[2] = 560226676;
          }
          *(_DWORD *)v80 = 136315394;
          *(_QWORD *)&v80[4] = "HALS_MetaStream.cpp";
          *(_WORD *)&v80[12] = 1024;
          *(_DWORD *)&v80[14] = 642;
          v45 = MEMORY[0x1E0C81028];
          v46 = "%25s:%-5d  HALS_MetaStream::_SetPropertyData: unsupported number of channels for kAudioStreamPropertyVirtualFormat";
        }
      }
      else
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_66;
        *(_DWORD *)v80 = 136315394;
        *(_QWORD *)&v80[4] = "HALS_MetaStream.cpp";
        *(_WORD *)&v80[12] = 1024;
        *(_DWORD *)&v80[14] = 636;
        v45 = MEMORY[0x1E0C81028];
        v46 = "%25s:%-5d  HALS_MetaStream::_SetPropertyData: unsupported sample rate for kAudioStreamPropertyVirtualFormat";
      }
      _os_log_impl(&dword_1B57BA000, v45, OS_LOG_TYPE_ERROR, v46, v80, 0x12u);
      goto LABEL_66;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
LABEL_52:
      v42 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v42 = &off_1E69A1B30;
      v42[2] = 561211770;
    }
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_MetaStream.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 625;
    v40 = MEMORY[0x1E0C81028];
    v41 = "%25s:%-5d  HALS_MetaStream::_SetPropertyData: bad property data size for kAudioStreamPropertyVirtualFormat";
LABEL_51:
    _os_log_impl(&dword_1B57BA000, v40, OS_LOG_TYPE_ERROR, v41, buf, 0x12u);
    goto LABEL_52;
  }
LABEL_28:
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v25, v19);
  _Block_object_dispose(&v66, 8);
  _Block_object_dispose(&v70, 8);
  _Block_object_dispose(&v74, 8);
  HALS_ObjectMap::ReleaseObject(v79, v32);
}

void sub_1B5A88F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a65;
  HALS_ObjectMap *a70;
  uint64_t v70;
  HALS_Object *v72;
  HALS_Object *v73;

  _Block_object_dispose(&a38, 8);
  _Block_object_dispose((const void *)(v70 - 208), 8);
  HALS_ObjectMap::ReleaseObject(0, v72);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a65, 8);
  HALS_ObjectMap::ReleaseObject(a70, v73);
  _Unwind_Resume(a1);
}

void HALS_MetaStream::HandleObjectPropertiesChanged(HALS_MetaStream *this, const HALS_Object *a2, uint64_t a3, int a4, AudioObjectPropertyAddress *a5)
{
  HALS_IODevice *v6;
  uint64_t v8;
  const HALS_Object *v11;
  HALS_Object *v12;
  HALS_ObjectMap *v13;
  BOOL v14;
  const AudioObjectPropertyAddress *v15;
  void *v16;
  _OWORD v17[2];

  v6 = (HALS_IODevice *)*((_QWORD *)this + 18);
  if (v6)
  {
    LODWORD(v8) = a4;
    v11 = (const HALS_Object *)HALS_IODevice::CopyStreamByIndex(v6, *((_BYTE *)this + 52), *((_DWORD *)this + 38));
    v13 = v11;
    if (v11)
      v14 = v11 == a2;
    else
      v14 = 0;
    if (v14)
    {
      memset(v17, 0, sizeof(v17));
      if ((_DWORD)v8)
      {
        v8 = v8;
        do
        {
          if (HALS_MetaDevice::PassRealNotificationToClient((HALS_MetaDevice *)a5->mSelector, 0))
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v17, a5, v15);
          ++a5;
          --v8;
        }
        while (v8);
        v16 = *(void **)&v17[0];
        if (*(_QWORD *)&v17[0] != *((_QWORD *)&v17[0] + 1))
          HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), a3, -1431655765 * ((*((_QWORD *)&v17[0] + 1) - *(_QWORD *)&v17[0]) >> 2), *(const AudioObjectPropertyAddress **)&v17[0]);
        if (v16)
          operator delete(v16);
      }
    }
    HALS_ObjectMap::ReleaseObject(v13, v12);
  }
}

void sub_1B5A890C8(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  HALS_ObjectMap *v9;
  void *v10;

  if (v10)
    operator delete(v10);
  HALS_ObjectMap::ReleaseObject(v9, a2);
  _Unwind_Resume(a1);
}

void HALS_MetaStream::HandleGroupObjectPropertiesChanged(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int *a5, unsigned int *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, dispatch_object_t *a11)
{
  NSObject *v17;
  uint64_t v18;
  unsigned int v19;
  HALS_Object *v20;
  HALS_ObjectMap *v21;
  unsigned int v22;

  v17 = *a11;
  if (*a11)
  {
    dispatch_retain(*a11);
    dispatch_group_enter(v17);
  }
  if (a4)
  {
    v18 = a4;
    do
    {
      v19 = *a5++;
      v21 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v19);
      if (v21)
        (*(void (**)(uint64_t, HALS_ObjectMap *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 160))(a1, v21, a3, *a6, a8);
      v22 = *a6;
      HALS_ObjectMap::ReleaseObject(v21, v20);
      a8 += 12 * v22;
      ++a6;
      --v18;
    }
    while (v18);
  }
  if (v17)
  {
    dispatch_group_leave(v17);
    dispatch_release(v17);
  }
}

void sub_1B5A891FC(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t a10)
{
  HALS_ObjectMap *v10;

  HALS_ObjectMap::ReleaseObject(v10, a2);
  applesauce::dispatch::v1::group_session::~group_session(&a10);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaStream::GetStartingChannel(HALS_MetaStream *this)
{
  return *((unsigned int *)this + 19);
}

uint64_t HALS_MetaStream::IsMetaStream(HALS_MetaStream *this)
{
  return 1;
}

uint64_t HALS_MetaStream::SetInfo(HALS_ObjectMap **this, char a2, HALS_Device *a3, int a4)
{
  HALS_Object *v8;
  HALS_Object *v9;

  if (this[18] != a3 || *((_DWORD *)this + 38) != a4)
  {
    HALS_MetaStream::RemoveRealStreamPropertyListener((HALS_MetaStream *)this);
    HALS_MetaStream::RemoveRealTapPropertyListener((HALS_MetaStream *)this);
    *((_BYTE *)this + 52) = a2;
    *((_BYTE *)this + 72) = 0;
    HALS_ObjectMap::ReleaseObject_LongTerm(this[18], v8);
    this[18] = a3;
    *((_DWORD *)this + 39) = 0;
    *((_DWORD *)this + 40) = 0;
    *((_DWORD *)this + 38) = a4;
    *((_DWORD *)this + 34) = 0;
    HALS_MetaStream::AddRealStreamPropertyListener((HALS_MetaStream *)this, v9);
  }
  return (*((uint64_t (**)(HALS_ObjectMap **))*this + 37))(this);
}

uint64_t HALS_MetaStream::SetInfo(HALS_ObjectMap **this, char a2, int a3)
{
  HALS_Object *v6;

  HALS_MetaStream::RemoveRealStreamPropertyListener((HALS_MetaStream *)this);
  HALS_MetaStream::RemoveRealTapPropertyListener((HALS_MetaStream *)this);
  *((_BYTE *)this + 52) = a2;
  *((_BYTE *)this + 72) = 0;
  HALS_ObjectMap::ReleaseObject_LongTerm(this[18], v6);
  this[18] = 0;
  this[19] = 0;
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 34) = a3;
  return (*((uint64_t (**)(HALS_ObjectMap **))*this + 37))(this);
}

uint64_t HALS_MetaStream::SetInfo(HALS_ObjectMap **this, int a2)
{
  HALS_Object *v4;

  if (*((_DWORD *)this + 40) != a2)
  {
    HALS_MetaStream::RemoveRealStreamPropertyListener((HALS_MetaStream *)this);
    HALS_MetaStream::RemoveRealTapPropertyListener((HALS_MetaStream *)this);
    *((_BYTE *)this + 52) = 1;
    *((_BYTE *)this + 72) = 1;
    HALS_ObjectMap::ReleaseObject_LongTerm(this[18], v4);
    this[18] = 0;
    this[19] = 0;
    *((_DWORD *)this + 40) = a2;
    *((_DWORD *)this + 34) = 0;
    HALS_MetaStream::AddRealTapPropertyListener((HALS_MetaStream *)this);
  }
  return (*((uint64_t (**)(HALS_ObjectMap **))*this + 37))(this);
}

uint64_t HALS_MetaStream::SetInfo(HALS_ObjectMap **this)
{
  HALS_Object *v2;

  HALS_MetaStream::RemoveRealStreamPropertyListener((HALS_MetaStream *)this);
  HALS_MetaStream::RemoveRealTapPropertyListener((HALS_MetaStream *)this);
  *((_BYTE *)this + 52) = 1;
  *((_BYTE *)this + 72) = 0;
  HALS_ObjectMap::ReleaseObject_LongTerm(this[18], v2);
  *((_DWORD *)this + 34) = 0;
  this[18] = 0;
  this[19] = 0;
  *((_DWORD *)this + 40) = 0;
  return (*((uint64_t (**)(HALS_ObjectMap **))*this + 37))(this);
}

uint64_t HALS_MetaStream::SetStartingChannel(uint64_t this, int a2)
{
  *(_DWORD *)(this + 76) = a2;
  return this;
}

uint64_t HALS_MetaStream::SynchronizeWithHardware(HALS_MetaStream *this)
{
  return (*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 296))(this);
}

uint64_t HALS_MetaStream::GetRealDeviceID(HALS_MetaStream *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 18);
  if (v1)
    return *(unsigned int *)(v1 + 16);
  else
    return 0;
}

uint64_t HALS_MetaStream::GetRealStreamID(HALS_MetaStream *this)
{
  HALS_IODevice *v2;
  unsigned int *v3;
  HALS_Object *v4;
  uint64_t v5;

  v2 = (HALS_IODevice *)*((_QWORD *)this + 18);
  if (!v2)
    return 0;
  v3 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(v2, *((_BYTE *)this + 52), *((_DWORD *)this + 38));
  if (v3)
    v5 = v3[4];
  else
    v5 = 0;
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v3, v4);
  return v5;
}

uint64_t HALS_MetaStream::BuildFormatList(uint64_t this)
{
  uint64_t v1;
  HALB_FormatList *v2;
  uint64_t v3;
  uint64_t v4;
  const AudioStreamRangedDescription *v5;
  unint64_t v6;
  AudioValueRange *v7;
  double mMaximum;
  uint64_t v9;
  const AudioStreamRangedDescription *v10;
  unint64_t v11;
  AudioValueRange *v12;
  double v13;
  UInt32 v14;
  AudioStreamRangedDescription v15;
  unsigned int v16;

  *(_QWORD *)(this + 96) = *(_QWORD *)(this + 88);
  *(_QWORD *)(this + 120) = *(_QWORD *)(this + 112);
  if (!*(_QWORD *)(this + 144))
  {
    v1 = this;
    v2 = (HALB_FormatList *)(this + 80);
    if (*(_BYTE *)(this + 72))
    {
      v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 64) + 280))(*(_QWORD *)(this + 64));
      v16 = v3;
      v4 = operator new[]();
      if ((_DWORD)v3)
      {
        (*(void (**)(_QWORD, uint64_t, unsigned int *, uint64_t))(**(_QWORD **)(v1 + 64) + 288))(*(_QWORD *)(v1 + 64), v3, &v16, v4);
        if (v16)
        {
          v6 = 0;
          v7 = (AudioValueRange *)v4;
          do
          {
            mMaximum = v7->mMaximum;
            if (mMaximum != v7->mMinimum)
              mMaximum = 0.0;
            v15.mFormat.mSampleRate = mMaximum;
            *(_OWORD *)&v15.mFormat.mFormatID = xmmword_1B5D68DA0;
            *(_OWORD *)&v15.mFormat.mBytesPerFrame = xmmword_1B5D68DB0;
            v15.mSampleRateRange = *v7;
            HALB_FormatList::AddPhysicalFormat(v2, &v15, v5);
            ++v6;
            ++v7;
          }
          while (v6 < v16);
        }
      }
    }
    else
    {
      v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 64) + 280))(*(_QWORD *)(this + 64));
      v16 = v9;
      v4 = operator new[]();
      if ((_DWORD)v9)
      {
        (*(void (**)(_QWORD, uint64_t, unsigned int *, uint64_t))(**(_QWORD **)(v1 + 64) + 288))(*(_QWORD *)(v1 + 64), v9, &v16, v4);
        if (v16)
        {
          v11 = 0;
          v12 = (AudioValueRange *)v4;
          do
          {
            v13 = v12->mMaximum;
            if (v13 != v12->mMinimum)
              v13 = 0.0;
            v14 = *(_DWORD *)(v1 + 136);
            v15.mFormat.mSampleRate = v13;
            *(_QWORD *)&v15.mFormat.mFormatID = 0x96C70636DLL;
            v15.mFormat.mBytesPerPacket = 4 * v14;
            v15.mFormat.mFramesPerPacket = 1;
            v15.mFormat.mBytesPerFrame = 4 * v14;
            v15.mFormat.mChannelsPerFrame = v14;
            *(_QWORD *)&v15.mFormat.mBitsPerChannel = 32;
            v15.mSampleRateRange = *v12;
            HALB_FormatList::AddPhysicalFormat(v2, &v15, v10);
            ++v11;
            ++v12;
          }
          while (v11 < v16);
        }
      }
    }
    return MEMORY[0x1B5E50664](v4, 0x1000C80451B5BE8);
  }
  return this;
}

void sub_1B5A89694(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E50664](v1, 0x1000C80451B5BE8);
  _Unwind_Resume(a1);
}

void HALS_MetaStream::GetCurrentHWFormat(HALS_MetaStream *this, AudioStreamBasicDescription *a2)
{
  HALS_ObjectMap *v4;
  uint64_t v5;
  HALS_Object *v6;
  HALS_ObjectMap *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  UInt32 v15;
  __int128 v16;
  __int128 v17;

  if (*((_BYTE *)this + 72))
  {
    v4 = (HALS_ObjectMap *)*((unsigned int *)this + 40);
    if ((_DWORD)v4)
    {
      v5 = HALS_ObjectMap::CopyObjectByObjectID(v4);
      v7 = (HALS_ObjectMap *)v5;
      if (v5)
      {
        v8 = *(_QWORD *)(v5 + 248);
        v9 = *(std::__shared_weak_count **)(v5 + 256);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
          v12 = *(_OWORD *)(v8 + 24);
          v13 = *(_OWORD *)(v8 + 40);
          *(_QWORD *)&a2->mBitsPerChannel = *(_QWORD *)(v8 + 56);
          *(_OWORD *)&a2->mSampleRate = v12;
          *(_OWORD *)&a2->mBytesPerPacket = v13;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        else
        {
          v16 = *(_OWORD *)(v8 + 24);
          v17 = *(_OWORD *)(v8 + 40);
          *(_QWORD *)&a2->mBitsPerChannel = *(_QWORD *)(v8 + 56);
          *(_OWORD *)&a2->mSampleRate = v16;
          *(_OWORD *)&a2->mBytesPerPacket = v17;
        }
      }
      else
      {
        *(_OWORD *)&a2->mSampleRate = k_default_multitap_format;
        *(_OWORD *)&a2->mBytesPerPacket = unk_1B5D60538;
        *(_QWORD *)&a2->mBitsPerChannel = 32;
      }
      HALS_ObjectMap::ReleaseObject(v7, v6);
    }
    else
    {
      a2->mSampleRate = (*(double (**)(_QWORD))(**((_QWORD **)this + 8) + 264))(*((_QWORD *)this + 8));
      *(_OWORD *)&a2->mFormatID = xmmword_1B5D68DA0;
      *(_OWORD *)&a2->mBytesPerFrame = xmmword_1B5D68DB0;
    }
  }
  else
  {
    a2->mSampleRate = (*(double (**)(_QWORD))(**((_QWORD **)this + 8) + 264))(*((_QWORD *)this + 8));
    *(_QWORD *)&a2->mFormatID = 0x96C70636DLL;
    v15 = *((_DWORD *)this + 34);
    a2->mBytesPerPacket = 4 * v15;
    a2->mFramesPerPacket = 1;
    a2->mBytesPerFrame = 4 * v15;
    a2->mChannelsPerFrame = v15;
    a2->mBitsPerChannel = 32;
  }
}

void HALS_MetaStream::SetCurrentHWFormat(HALS_MetaStream *this, const AudioStreamBasicDescription *a2)
{
  double v4;
  __n128 v5;

  if (!*((_BYTE *)this + 72))
  {
    v4 = (*(double (**)(_QWORD))(**((_QWORD **)this + 8) + 264))(*((_QWORD *)this + 8));
    v5.n128_u64[0] = *(_QWORD *)&a2->mSampleRate;
    if (a2->mSampleRate != 0.0 && v5.n128_f64[0] != v4)
      (*(void (**)(_QWORD, _QWORD, __n128))(**((_QWORD **)this + 8) + 272))(*((_QWORD *)this + 8), 0, v5);
  }
}

void HALS_MetaStream::RemoveRealStreamPropertyListener(HALS_MetaStream *this)
{
  int v1;
  int v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD block[4];
  int v6;
  int v7;

  v1 = *((_DWORD *)this + 39);
  if (v1)
  {
    v2 = *((_DWORD *)this + 4);
    v3 = *((_QWORD *)this + 21);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN15HALS_MetaStream32RemoveRealStreamPropertyListenerEv_block_invoke;
    block[3] = &__block_descriptor_tmp_41_6875;
    v6 = v2;
    v7 = v1;
    v4 = atomic_load((unsigned __int8 *)(v3 + 32));
    if ((v4 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)(v3 + 33));
    dispatch_async(*(dispatch_queue_t *)v3, block);
  }
}

void HALS_MetaStream::RemoveRealTapPropertyListener(HALS_MetaStream *this)
{
  int v1;
  int v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD block[4];
  int v6;
  int v7;

  v1 = *((_DWORD *)this + 40);
  if (v1)
  {
    v2 = *((_DWORD *)this + 4);
    v3 = *((_QWORD *)this + 21);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN15HALS_MetaStream29RemoveRealTapPropertyListenerEv_block_invoke;
    block[3] = &__block_descriptor_tmp_43_6873;
    v6 = v2;
    v7 = v1;
    v4 = atomic_load((unsigned __int8 *)(v3 + 32));
    if ((v4 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)(v3 + 33));
    dispatch_async(*(dispatch_queue_t *)v3, block);
  }
}

void ___ZN15HALS_MetaStream29RemoveRealTapPropertyListenerEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const AudioObjectPropertyAddress *a5)
{
  const HALS_Listener *v5;
  int v6;
  _DWORD v7[2];
  __int128 v8;
  __int128 v9;

  v6 = *(_DWORD *)(a1 + 32);
  v5 = (const HALS_Listener *)*(unsigned int *)(a1 + 36);
  v7[0] = 0;
  v7[1] = v6;
  v8 = 0u;
  v9 = 0u;
  HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)v7, v5, &qword_1B5D58FAC, a4, a5);
  HALS_Listener::~HALS_Listener((HALS_Listener *)v7);
}

void sub_1B5A899B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HALS_Listener::~HALS_Listener((HALS_Listener *)va);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_MetaStream32RemoveRealStreamPropertyListenerEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const AudioObjectPropertyAddress *a5)
{
  const HALS_Listener *v5;
  int v6;
  _DWORD v7[2];
  __int128 v8;
  __int128 v9;

  v6 = *(_DWORD *)(a1 + 32);
  v5 = (const HALS_Listener *)*(unsigned int *)(a1 + 36);
  v7[0] = 0;
  v7[1] = v6;
  v8 = 0u;
  v9 = 0u;
  HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)v7, v5, &qword_1B5D58FAC, a4, a5);
  HALS_Listener::~HALS_Listener((HALS_Listener *)v7);
}

void sub_1B5A89A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HALS_Listener::~HALS_Listener((HALS_Listener *)va);
  _Unwind_Resume(a1);
}

void HALS_MetaStream::AddRealTapPropertyListener(HALS_MetaStream *this)
{
  HALS_ObjectMap *v2;
  HALS_Object *v3;
  HALS_ObjectMap *v4;
  int v5;
  unsigned int v6;
  _DWORD v7[2];
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  _BYTE v12[320];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (HALS_ObjectMap *)*((unsigned int *)this + 40);
  if ((_DWORD)v2)
  {
    v4 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v2);
    if (v4)
    {
      v10 = 0x2A2A2A2A2A2A2A2ALL;
      v11 = -1;
      v5 = *((_DWORD *)this + 4);
      v7[0] = 0;
      v7[1] = v5;
      v8 = 0u;
      v9 = 0u;
      v6 = *((_DWORD *)this + 40);
      v12[0] = 0;
      v13 = 0;
      HALS_NotificationManager::AddPropertyListener((uint64_t)v7, v6, (char *)&v10, (uint64_t)v12);
      if (v13)
        AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v12);
      HALS_Listener::~HALS_Listener((HALS_Listener *)v7);
    }
    HALS_ObjectMap::ReleaseObject(v4, v3);
  }
}

void sub_1B5A89AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  HALS_ObjectMap *v57;
  HALS_Object *v59;

  if (a57)
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a17);
  HALS_Listener::~HALS_Listener((HALS_Listener *)&a10);
  HALS_ObjectMap::ReleaseObject(v57, v59);
  _Unwind_Resume(a1);
}

void HALS_MetaStream::AddRealStreamPropertyListener(HALS_MetaStream *this, HALS_Object *a2)
{
  HALS_ObjectMap *v3;
  uint64_t v4;
  HALS_Object *v5;
  HALS_ObjectMap *v6;
  unsigned int v7;
  int v8;
  _DWORD v9[2];
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  _BYTE v14[320];
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = (HALS_ObjectMap *)*((_QWORD *)this + 18);
  if (v3)
  {
    HALS_ObjectMap::RetainObject(v3, a2);
    v4 = HALS_IODevice::CopyStreamByIndex(*((HALS_IODevice **)this + 18), *((_BYTE *)this + 52), *((_DWORD *)this + 38));
    v6 = (HALS_ObjectMap *)v4;
    if (v4)
    {
      v7 = *(_DWORD *)(v4 + 16);
      *((_DWORD *)this + 39) = v7;
      v12 = 0x2A2A2A2A2A2A2A2ALL;
      v13 = -1;
      v8 = *((_DWORD *)this + 4);
      v9[0] = 0;
      v9[1] = v8;
      v10 = 0u;
      v11 = 0u;
      AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v14, **((dispatch_object_t **)this + 21));
      v15 = 1;
      HALS_NotificationManager::AddPropertyListener((uint64_t)v9, v7, (char *)&v12, (uint64_t)v14);
      if (v15)
        AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v14);
      HALS_Listener::~HALS_Listener((HALS_Listener *)v9);
    }
    HALS_ObjectMap::ReleaseObject(v6, v5);
  }
}

void sub_1B5A89C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  HALS_ObjectMap *v57;
  HALS_Object *v59;

  if (a57)
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a17);
  HALS_Listener::~HALS_Listener((HALS_Listener *)&a10);
  HALS_ObjectMap::ReleaseObject(v57, v59);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6876(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6877(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 40), a2);
}

void ___ZN15HALS_MetaStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(_QWORD *a1, HALS_Object *a2)
{
  uint64_t v3;
  uint64_t v4;
  HALS_ObjectMap *v5;
  HALS_Object *v6;

  v3 = a1[7];
  HALS_ObjectMap::RetainObject(*(HALS_ObjectMap **)(v3 + 144), a2);
  v4 = *(_QWORD *)(a1[4] + 8);
  v5 = *(HALS_ObjectMap **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(v3 + 144);
  HALS_ObjectMap::ReleaseObject(v5, v6);
  *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = *(_DWORD *)(v3 + 152);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = *(_BYTE *)(v3 + 52);
}

__n128 __Block_byref_object_copy__31(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 40);
  v3 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZN15HALS_MetaStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_33(_QWORD *a1)
{
  uint64_t v2;
  AudioStreamBasicDescription *v3;
  uint64_t v4;
  const AudioStreamBasicDescription *v5;
  __int128 v6;
  double v7[5];
  AudioStreamBasicDescription v8;

  v2 = a1[5];
  (*(void (**)(uint64_t, double *))(*(_QWORD *)v2 + 304))(v2, v7);
  v4 = a1[6];
  v5 = *(const AudioStreamBasicDescription **)(a1[4] + 8);
  v6 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)&v8.mSampleRate = *(_OWORD *)v4;
  *(_OWORD *)&v8.mBytesPerPacket = v6;
  *(_QWORD *)&v8.mBitsPerChannel = *(_QWORD *)(v4 + 32);
  if (v8.mFormatID == 1819304813)
  {
    v8.mBitsPerChannel = 0;
    *(_QWORD *)&v8.mFramesPerPacket = 0;
    *(_QWORD *)&v8.mFormatFlags = 0;
  }
  HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)(v2 + 80), &v8, v5 + 1, v3, v7[0]);
}

uint64_t ___ZN15HALS_MetaStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_35(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 312))(*(_QWORD *)(a1 + 40), a1 + 48);
}

void sub_1B5A89DE0(void *a1, int a2)
{
  uint64_t v2;
  _DWORD *v4;
  int v5;

  v4 = __cxa_begin_catch(a1);
  if (a2 == 2)
    v5 = v4[2];
  else
    v5 = 2003329396;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = v5;
  __cxa_end_catch();
}

void ___ZN15HALS_MetaStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_37(uint64_t a1)
{
  uint64_t v2;
  HALB_FormatList *v3;
  AudioStreamBasicDescription *v4;
  double v5[5];

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (HALB_FormatList *)(v2 + 80);
  (*(void (**)(uint64_t, double *))(*(_QWORD *)v2 + 304))(v2, v5);
  HALB_FormatList::BestMatchForPhysicalFormat(v3, *(const AudioStreamBasicDescription **)(a1 + 48), (const AudioStreamBasicDescription *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v4, v5[0]);
}

uint64_t ___ZN15HALS_MetaStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_39(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 312))(*(_QWORD *)(a1 + 40), a1 + 48);
}

void sub_1B5A89EA0(void *a1, int a2)
{
  uint64_t v2;
  _DWORD *v4;
  int v5;

  v4 = __cxa_begin_catch(a1);
  if (a2 == 2)
    v5 = v4[2];
  else
    v5 = 2003329396;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = v5;
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(_QWORD *a1, HALS_Object *a2)
{
  uint64_t v3;
  uint64_t v4;
  HALS_ObjectMap *v5;
  HALS_Object *v6;

  v3 = a1[8];
  HALS_ObjectMap::RetainObject(*(HALS_ObjectMap **)(v3 + 144), a2);
  v4 = *(_QWORD *)(a1[4] + 8);
  v5 = *(HALS_ObjectMap **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(v3 + 144);
  HALS_ObjectMap::ReleaseObject(v5, v6);
  *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = *(_DWORD *)(v3 + 152);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = *(_BYTE *)(v3 + 52);
  *(_DWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = *(_DWORD *)(v3 + 136);
}

uint64_t ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_10(uint64_t result)
{
  **(_DWORD **)(result + 32) = 1;
  return result;
}

uint64_t ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_12(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(_QWORD *)(result + 32) + 52);
  return result;
}

uint64_t ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_14(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(_DWORD *)(*(_QWORD *)(result + 32) + 76);
  return result;
}

uint64_t ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(uint64_t a1)
{
  return HALB_FormatList::GetVirtualFormats(*(_QWORD *)(a1 + 40) + 80, *(_BYTE *)(a1 + 60), *(unsigned int *)(a1 + 56) / 0x38uLL, (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(AudioStreamRangedDescription **)(a1 + 48));
}

uint64_t ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3(uint64_t a1)
{
  return HALB_FormatList::GetVirtualFormats(*(_QWORD *)(a1 + 40) + 80, *(_BYTE *)(a1 + 60), *(unsigned int *)(a1 + 56) / 0x28uLL, (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(AudioStreamBasicDescription **)(a1 + 48));
}

void sub_1B5A89FF4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

BOOL ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_18(_QWORD *a1)
{
  _BOOL8 result;

  result = HALB_FormatList::IsVirtualFormatSupported(*(const AudioStreamBasicDescription **)(a1[5] + 88), *(AudioStreamBasicDescription **)(a1[5] + 96), a1[6]);
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  return result;
}

void ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_20(uint64_t a1)
{
  uint64_t v2;
  AudioStreamBasicDescription *v3;
  int v4;
  double v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v2 = *(_QWORD *)(a1 + 32);
  (*(void (**)(uint64_t, double *))(*(_QWORD *)v2 + 304))(v2, &v5);
  if (v6 == 1819304813 && (v7 & 0x40) == 0)
  {
    if (*(_BYTE *)(a1 + 88))
      v4 = 9;
    else
      v4 = 11;
    v7 = v4;
    v8 = 4 * v11;
    v9 = 1;
    v10 = 4 * v11;
    v12 = 32;
  }
  HALB_FormatList::BestMatchForVirtualFormat((HALB_FormatList *)(v2 + 80), (const AudioStreamBasicDescription *)(a1 + 40), *(const AudioStreamBasicDescription **)(a1 + 80), v3, v5);
}

double HALS_MetaStream::GetTapSampleRate(HALS_MetaStream *this)
{
  double v1;
  HALS_ObjectMap *v2;
  uint64_t v3;
  HALS_Object *v4;
  HALS_ObjectMap *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;

  v1 = 0.0;
  if (*((_BYTE *)this + 72))
  {
    v2 = (HALS_ObjectMap *)*((unsigned int *)this + 40);
    if ((_DWORD)v2)
    {
      v3 = HALS_ObjectMap::CopyObjectByObjectID(v2);
      v5 = (HALS_ObjectMap *)v3;
      if (v3)
      {
        v6 = *(_QWORD *)(v3 + 248);
        v7 = *(std::__shared_weak_count **)(v3 + 256);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
          v1 = *(double *)(v6 + 24);
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        else
        {
          v1 = *(double *)(v6 + 24);
        }
      }
      else
      {
        v1 = 48000.0;
      }
      HALS_ObjectMap::ReleaseObject(v5, v4);
    }
  }
  return v1;
}

__n128 ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_22(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  __int128 v14;

  v1 = *(_DWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v3 + 24) = 0;
  if (v1 >= 0x38)
  {
    v5 = 0;
    v6 = 0;
    v7 = v1 / 0x38uLL;
    v8 = -1;
    do
    {
      v9 = *(_QWORD *)(v2 + 112);
      if (++v8 >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v2 + 120) - v9) >> 3)))
        break;
      v10 = v9 + v5;
      v5 += 56;
      v11 = v4 + 56 * v6;
      result = *(__n128 *)v10;
      v13 = *(_OWORD *)(v10 + 16);
      v14 = *(_OWORD *)(v10 + 32);
      *(_QWORD *)(v11 + 48) = *(_QWORD *)(v10 + 48);
      *(_OWORD *)(v11 + 16) = v13;
      *(_OWORD *)(v11 + 32) = v14;
      *(__n128 *)v11 = result;
      v6 = *(_QWORD *)(v3 + 24) + 1;
      *(_QWORD *)(v3 + 24) = v6;
    }
    while (v6 < v7);
  }
  return result;
}

uint64_t ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3_24(uint64_t a1)
{
  return HALB_FormatList::GetPhysicalFormats(*(_QWORD *)(a1 + 40) + 80, *(unsigned int *)(a1 + 56) / 0x38uLL, (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(AudioStreamBasicDescription **)(a1 + 48));
}

void sub_1B5A8A26C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

BOOL ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_26(_QWORD *a1)
{
  _BOOL8 result;

  result = HALB_FormatList::IsVirtualFormatSupported(*(const AudioStreamBasicDescription **)(a1[5] + 112), *(AudioStreamBasicDescription **)(a1[5] + 120), a1[6]);
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  return result;
}

void ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_28(uint64_t a1)
{
  uint64_t v2;
  HALB_FormatList *v3;
  AudioStreamBasicDescription *v4;
  double v5[5];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (HALB_FormatList *)(v2 + 80);
  (*(void (**)(uint64_t, double *))(*(_QWORD *)v2 + 304))(v2, v5);
  HALB_FormatList::BestMatchForPhysicalFormat(v3, (const AudioStreamBasicDescription *)(a1 + 40), *(const AudioStreamBasicDescription **)(a1 + 80), v4, v5[0]);
}

void ___ZNK15HALS_MetaStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(_QWORD *a1, HALS_Object *a2)
{
  uint64_t v3;
  uint64_t v4;
  HALS_ObjectMap *v5;
  HALS_Object *v6;

  v3 = a1[7];
  HALS_ObjectMap::RetainObject(*(HALS_ObjectMap **)(v3 + 144), a2);
  v4 = *(_QWORD *)(a1[4] + 8);
  v5 = *(HALS_ObjectMap **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(v3 + 144);
  HALS_ObjectMap::ReleaseObject(v5, v6);
  *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = *(_DWORD *)(v3 + 152);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = *(_BYTE *)(v3 + 52);
}

uint64_t ___ZNK15HALS_MetaStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(_QWORD *)(result + 40) + 96)
                                                                   - *(_DWORD *)(*(_QWORD *)(result + 40) + 88)) & 0xFFFFFFF8;
  return result;
}

uint64_t ___ZNK15HALS_MetaStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = -1840700264
                                                                  * ((*(_QWORD *)(*(_QWORD *)(result + 40) + 96)
                                                                    - *(_QWORD *)(*(_QWORD *)(result + 40) + 88)) >> 3);
  return result;
}

uint64_t ___ZNK15HALS_MetaStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(_QWORD *)(result + 40) + 120)
                                                                   - *(_DWORD *)(*(_QWORD *)(result + 40) + 112)) & 0xFFFFFFF8;
  return result;
}

uint64_t ___ZNK15HALS_MetaStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_5(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(_QWORD *)(result + 40) + 120)
                                                                   - *(_DWORD *)(*(_QWORD *)(result + 40) + 112)) & 0xFFFFFFF8;
  return result;
}

void ___ZNK15HALS_MetaStream18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke(_QWORD *a1, HALS_Object *a2)
{
  uint64_t v3;
  uint64_t v4;
  HALS_ObjectMap *v5;
  HALS_Object *v6;

  v3 = a1[7];
  HALS_ObjectMap::RetainObject(*(HALS_ObjectMap **)(v3 + 144), a2);
  v4 = *(_QWORD *)(a1[4] + 8);
  v5 = *(HALS_ObjectMap **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(v3 + 144);
  HALS_ObjectMap::ReleaseObject(v5, v6);
  *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = *(_DWORD *)(v3 + 152);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = *(_BYTE *)(v3 + 52);
}

void ___ZNK15HALS_MetaStream11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke(_QWORD *a1, HALS_Object *a2)
{
  uint64_t v3;
  uint64_t v4;
  HALS_ObjectMap *v5;
  HALS_Object *v6;

  v3 = a1[7];
  HALS_ObjectMap::RetainObject(*(HALS_ObjectMap **)(v3 + 144), a2);
  v4 = *(_QWORD *)(a1[4] + 8);
  v5 = *(HALS_ObjectMap **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(v3 + 144);
  HALS_ObjectMap::ReleaseObject(v5, v6);
  *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = *(_DWORD *)(v3 + 152);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = *(_BYTE *)(v3 + 52);
}

void HALS_MetaStream::HALS_MetaStream(HALS_MetaStream *this, HALS_MetaDevice *a2, char a3, HALS_Device *a4, HALS_Object *a5)
{
  int v5;
  uint64_t v10;
  uint64_t v11;
  HALS_Object *v12;
  void *v13[41];

  v5 = (int)a5;
  v13[40] = *(void **)MEMORY[0x1E0C80C00];
  HALS_Object::HALS_Object(this, 1634956402, 1634956402, (uint64_t)a2, a5);
  *(_DWORD *)(v10 + 48) = *((_DWORD *)a2 + 4);
  *(_BYTE *)(v10 + 52) = a3;
  *(_DWORD *)(v10 + 56) = 0;
  *(_QWORD *)v10 = off_1E6983490;
  *(_QWORD *)(v10 + 64) = a2;
  *(_BYTE *)(v10 + 72) = 0;
  *(_DWORD *)(v10 + 76) = 0;
  *(_QWORD *)(v10 + 80) = &off_1E69749F0;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_DWORD *)(v10 + 136) = 0;
  *(_QWORD *)(v10 + 144) = a4;
  *(_DWORD *)(v10 + 156) = 0;
  *(_DWORD *)(v10 + 160) = 0;
  *(_DWORD *)(v10 + 152) = v5;
  AMCP::Utility::Dispatch_Queue::create_concurrent_with_workloop((AMCP::Utility::Dispatch_Queue *)v13, "HALS_MetaStream Concurrent Queue");
  v11 = operator new();
  *((_QWORD *)this + 21) = AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v11, v13[0]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v13);
  HALS_MetaStream::AddRealStreamPropertyListener(this, v12);
}

void sub_1B5A8A654(_Unwind_Exception *a1)
{
  HALS_Object *v1;
  HALB_FormatList *v2;
  AMCP::Utility::Dispatch_Queue **v3;
  AMCP::Utility::Dispatch_Queue **v4;

  v4 = v3;
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100](v4, 0);
  HALB_FormatList::~HALB_FormatList(v2);
  HALS_Object::~HALS_Object(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::io_proc_cycle_info_to_audio_io_cycle_info(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  AMCP::Graph::dal_time_to_audio_time_stamp((AMCP::Log::Scope_Registry *)a1, a2 + 64);
  AMCP::Graph::dal_time_to_audio_time_stamp((AMCP::Log::Scope_Registry *)(a1 + 40), a2 + 128);
  AMCP::Graph::dal_time_to_audio_time_stamp((AMCP::Log::Scope_Registry *)(a1 + 80), a2);
  result = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)(a1 + 120));
  *(_QWORD *)(a2 + 192) = result;
  return result;
}

void AMCP::Graph::dal_time_to_audio_time_stamp(AMCP::Log::Scope_Registry *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *exception;
  __int128 v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  std::string v24;
  std::logic_error v25;
  std::logic_error v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint8_t buf[8];
  _BYTE v34[10];
  __int16 v35;
  int v36;
  __int16 v37;
  _BYTE v38[14];
  const char *v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a1 + 3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 4);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v15 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)v34 = 2080;
      *(_QWORD *)&v34[2] = "Client_IO_Handler.cpp";
      v35 = 1024;
      v36 = 25;
      v37 = 2080;
      *(_QWORD *)v38 = "not (in.get_clock() != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Bad time passed to dal_time_to_audio_time_stamp", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Bad time passed to dal_time_to_audio_time_stamp", (uint64_t)&v24);
    std::logic_error::logic_error(&v25, &v24);
    v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v26, &v25);
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = -1;
    v26.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v27 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v26);
    *(_QWORD *)&v38[6] = "void AMCP::Graph::dal_time_to_audio_time_stamp(const AMCP::DAL::DAL_Time &, CA::TimeStamp &)";
    v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Client_IO_Handler.cpp";
    v40 = 25;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    v22 = v19;
    v23 = v20;
    v19 = 0uLL;
    v20 = 0;
    v21 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v21);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(double *)a2 = (double)(uint64_t)floor(AMCP::DAL::DAL_Time::get_sample_time(a1));
  *(_QWORD *)(a2 + 8) = AMCP::DAL::DAL_Time::get_host_time(a1);
  v9 = *((_QWORD *)a1 + 3);
  v10 = (std::__shared_weak_count *)*((_QWORD *)a1 + 4);
  *(_QWORD *)buf = v9;
  *(_QWORD *)v34 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(double *)(a2 + 16) = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 160))(v9);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_DWORD *)(a2 + 56) = 7;
}

void sub_1B5A8A9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v27 - 128);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Call_Audio_IO_Proc::reconfigure(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, double a6)
{
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  __int128 v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *p_shared_owners;
  unint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  os_unfair_lock_s *lock;
  size_t v110;
  char *v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v12 = (_QWORD *)(a1 + 40);
  v11 = *(_QWORD **)(a1 + 40);
  ++*(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 40) = 0;
  if (v11 == (_QWORD *)(a1 + 16))
  {
    v13 = 4;
    v11 = (_QWORD *)(a1 + 16);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v13))();
LABEL_6:
  v14 = (_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 24);
  if (v15)
  {
    if (v15 == a2)
    {
      *v12 = a1 + 16;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v14 + 24))(*v14, a1 + 16);
      goto LABEL_12;
    }
    *v12 = v15;
  }
  else
  {
    v14 = (_QWORD *)(a1 + 40);
  }
  *v14 = 0;
LABEL_12:
  v16 = 0;
  v17 = 0;
  *(double *)(a1 + 192) = a6;
  *(_DWORD *)(a1 + 200) = a4;
  v18 = a1 + 48;
  *(_BYTE *)(a1 + 204) = BYTE4(a4);
  lock = (os_unfair_lock_s *)a1;
  v116 = a1 + 48;
  v117 = a1 + 144;
  v118 = a1 + 96;
  do
  {
    v120 = v16;
    v19 = (uint64_t *)(a5 + 24 * v17);
    v20 = v19[1];
    v121 = *v19;
    v122 = v20;
    v21 = (_QWORD *)(v18 + 24 * v17);
    v23 = v21 + 1;
    v22 = (char *)v21[1];
    v24 = 0xAAAAAAAAAAAAAAABLL * ((v20 - *v19) >> 4);
    v25 = (char *)*v21;
    v26 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v22[-*v21] >> 4);
    v27 = v24 - v26;
    v123 = v17;
    v125 = v24;
    if (v24 <= v26)
    {
      v37 = v118;
      if (v24 < v26)
        *v23 = &v25[0x5555555555555570 * ((v20 - v121) >> 4)];
    }
    else
    {
      v28 = v18 + 24 * v17;
      v31 = *(_QWORD *)(v28 + 16);
      v30 = (_QWORD *)(v28 + 16);
      v29 = v31;
      if (0xCCCCCCCCCCCCCCCDLL * ((v31 - (uint64_t)v22) >> 4) >= v27)
      {
        bzero(v22, 80 * ((80 * v27 - 80) / 0x50) + 80);
        v17 = v123;
        v24 = v125;
        *v23 = &v22[80 * ((80 * v27 - 80) / 0x50) + 80];
        v37 = v118;
      }
      else
      {
        if (v24 > 0x333333333333333)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v113 = v30;
        v32 = 0xCCCCCCCCCCCCCCCDLL * ((v29 - (uint64_t)v25) >> 4);
        v33 = 2 * v32;
        if (2 * v32 <= v24)
          v33 = v24;
        if (v32 >= 0x199999999999999)
          v34 = 0x333333333333333;
        else
          v34 = v33;
        if (v34 > 0x333333333333333)
LABEL_108:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v111 = (char *)operator new(80 * v34);
        v35 = &v111[80 * v26];
        v110 = 80 * ((80 * v27 - 80) / 0x50) + 80;
        bzero(v35, v110);
        v36 = v35;
        if (v22 == v25)
        {
          v37 = v118;
          v17 = v123;
          v24 = v125;
          v38 = v113;
        }
        else
        {
          v37 = v118;
          v17 = v123;
          v38 = v113;
          do
          {
            *((_OWORD *)v36 - 5) = *((_OWORD *)v22 - 5);
            v39 = *((_OWORD *)v22 - 4);
            v40 = *((_OWORD *)v22 - 3);
            v41 = *((_OWORD *)v22 - 1);
            *((_OWORD *)v36 - 2) = *((_OWORD *)v22 - 2);
            *((_OWORD *)v36 - 1) = v41;
            *((_OWORD *)v36 - 4) = v39;
            *((_OWORD *)v36 - 3) = v40;
            v36 -= 80;
            v22 -= 80;
          }
          while (v22 != v25);
          v22 = (char *)*v21;
          v24 = v125;
        }
        *v21 = v36;
        *v23 = &v35[v110];
        *v38 = &v111[80 * v34];
        if (v22)
        {
          operator delete(v22);
          v17 = v123;
          v24 = v125;
        }
      }
    }
    v42 = (uint64_t **)(v37 + 24 * v17);
    v44 = v42 + 1;
    v43 = v42[1];
    v45 = *v42;
    v46 = v37;
    v47 = 0xCCCCCCCCCCCCCCCDLL * (v43 - *v42);
    v48 = v24 - v47;
    if (v24 <= v47)
    {
      v63 = v117;
      if (v24 >= v47)
        goto LABEL_60;
      v64 = &v45[5 * v24];
      while (v43 != v64)
      {
        v43 -= 5;
        std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100](v43);
      }
      *v44 = v64;
      goto LABEL_59;
    }
    v49 = v46 + 24 * v17;
    v52 = *(_QWORD *)(v49 + 16);
    v51 = (_QWORD *)(v49 + 16);
    v50 = v52;
    if (0xCCCCCCCCCCCCCCCDLL * ((v52 - (uint64_t)v43) >> 3) >= v48)
    {
      v65 = &v43[5 * v48];
      v63 = v117;
      do
      {
        *v43 = 0;
        v43[4] = 0;
        v43 += 5;
      }
      while (v43 != v65);
      *v44 = v65;
    }
    else
    {
      if (v24 > 0x666666666666666)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v114 = v51;
      v53 = 0xCCCCCCCCCCCCCCCDLL * ((v50 - (uint64_t)v45) >> 3);
      v54 = 2 * v53;
      if (2 * v53 <= v24)
        v54 = v24;
      if (v53 >= 0x333333333333333)
        v55 = 0x666666666666666;
      else
        v55 = v54;
      if (v55 > 0x666666666666666)
        goto LABEL_108;
      v112 = v55;
      v56 = (char *)operator new(40 * v55);
      v57 = &v56[40 * v47];
      v58 = (uint64_t *)&v56[40 * v125];
      v59 = (uint64_t *)v57;
      do
      {
        *v59 = 0;
        v59[4] = 0;
        v59 += 5;
      }
      while (v59 != v58);
      while (v43 != v45)
      {
        v60 = *(v43 - 5);
        v43 -= 5;
        *v43 = 0;
        *((_QWORD *)v57 - 5) = v60;
        v57 -= 40;
        std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)(v57 + 8), (uint64_t)(v43 + 1));
      }
      v61 = *v42;
      *v42 = (uint64_t *)v57;
      v62 = *v44;
      *v44 = v58;
      *v114 = &v56[40 * v112];
      while (v62 != v61)
        v62 = std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100](v62 - 5);
      v63 = v117;
      v17 = v123;
      v24 = v125;
      if (v61)
      {
        operator delete(v61);
LABEL_59:
        v17 = v123;
        v24 = v125;
      }
    }
LABEL_60:
    v66 = (_QWORD *)(v63 + 24 * v17);
    v67 = v66 + 1;
    v68 = (_QWORD *)v66[1];
    v69 = (_QWORD *)*v66;
    v70 = ((uint64_t)v68 - *v66) >> 3;
    if (v24 <= v70)
    {
      v84 = v24 >= v70;
      v85 = v122;
      if (v84)
        goto LABEL_88;
      v86 = &v69[v24];
      while (v68 != v86)
      {
        v88 = *--v68;
        v87 = v88;
        *v68 = 0;
        if (v88)
          (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
      }
      *v67 = v86;
      goto LABEL_87;
    }
    v71 = v63 + 24 * v17;
    v74 = *(_QWORD *)(v71 + 16);
    v73 = (_QWORD *)(v71 + 16);
    v72 = v74;
    if (v24 - v70 <= (v74 - (uint64_t)v68) >> 3)
    {
      v89 = v24 - v70;
      bzero(v68, 8 * (v24 - v70));
      v24 = v125;
      *v67 = &v68[v89];
      v85 = v122;
      goto LABEL_88;
    }
    if (v24 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v115 = v73;
    v124 = v24 - v70;
    v75 = v72 - (_QWORD)v69;
    v76 = v75 >> 2;
    if (v75 >> 2 <= v24)
      v76 = v24;
    if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
      v77 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v77 = v76;
    if (v77 >> 61)
      goto LABEL_108;
    v78 = (char *)operator new(8 * v77);
    v79 = &v78[8 * v70];
    bzero(v79, 8 * v124);
    v80 = v79;
    if (v68 == v69)
    {
      v81 = v122;
      v82 = v115;
    }
    else
    {
      v81 = v122;
      v82 = v115;
      do
      {
        v83 = *--v68;
        *v68 = 0;
        *((_QWORD *)v80 - 1) = v83;
        v80 -= 8;
      }
      while (v68 != v69);
    }
    v90 = *(_OWORD *)v66;
    *v66 = v80;
    *v67 = &v79[8 * v124];
    *v82 = &v78[8 * v77];
    v91 = (_QWORD *)*((_QWORD *)&v90 + 1);
    v92 = (_QWORD *)v90;
    v85 = v81;
    while (v91 != v92)
    {
      v94 = *--v91;
      v93 = v94;
      *v91 = 0;
      if (v94)
        (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
    }
    v24 = v125;
    if (v92)
    {
      operator delete(v92);
LABEL_87:
      v24 = v125;
    }
LABEL_88:
    if (v85 != v121)
    {
      v95 = 0;
      if (v24 <= 1)
        v96 = 1;
      else
        v96 = v24;
      do
      {
        v97 = (_QWORD *)*v66;
        if (*(_DWORD *)(*v19 + 48 * v95 + 40) == 1)
        {
          v98 = (_QWORD *)operator new();
          v99 = v98;
          v100 = *v19;
          v101 = (std::__shared_weak_count *)a3[1];
          v126 = *a3;
          v127 = v101;
          if (v101)
          {
            p_shared_owners = (unint64_t *)&v101->__shared_owners_;
            do
              v103 = __ldxr(p_shared_owners);
            while (__stxr(v103 + 1, p_shared_owners));
          }
          AMCP::DAL::Fixed_Buffer::Fixed_Buffer(v98, v100 + 48 * v95, &v126, 4096.0);
          v104 = v97[v95];
          v97[v95] = v99;
          if (v104)
            (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
          v105 = v127;
          if (v127)
          {
            v106 = (unint64_t *)&v127->__shared_owners_;
            do
              v107 = __ldaxr(v106);
            while (__stlxr(v107 - 1, v106));
            if (!v107)
            {
              ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
              std::__shared_weak_count::__release_weak(v105);
            }
          }
        }
        else
        {
          v108 = v97[v95];
          v97[v95] = 0;
          if (v108)
            (*(void (**)(uint64_t))(*(_QWORD *)v108 + 8))(v108);
        }
        ++v95;
      }
      while (v95 != v96);
    }
    v16 = 1;
    v17 = 1;
    v18 = v116;
  }
  while ((v120 & 1) == 0);
  os_unfair_lock_unlock(lock);
}

void sub_1B5A8B270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100](v4 - 5);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void AMCP::Graph::Call_Audio_IO_Proc::update_proc(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator=((_QWORD *)(a1 + 16), a2);
  ++*(_QWORD *)(a1 + 8);
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1B5A8B364(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Call_Audio_IO_Proc::operator()(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  AMCP::Log::Scope_Registry *v10;
  uint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  double v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  _BOOL4 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  BOOL v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  __int128 *v108;
  __int128 v109;
  __int128 v110;
  unint64_t *v111;
  unint64_t v112;
  __int128 v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  AMCP::Log::Scope_Registry *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __int128 *v154;
  __int128 v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  __int128 v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  __n128 v179;
  double v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  __int128 v184;
  unint64_t *v185;
  unint64_t v186;
  unsigned int v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  __n128 v200;
  double v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  __int128 v205;
  unint64_t *v206;
  unint64_t v207;
  unsigned int v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  NSObject *v216;
  _opaque_pthread_t *v217;
  mach_port_t v218;
  void *v219;
  NSObject *v220;
  _opaque_pthread_t *v221;
  mach_port_t v222;
  void *v223;
  uint64_t v224;
  NSObject *v225;
  _opaque_pthread_t *v226;
  mach_port_t v227;
  void *exception;
  NSObject *v229;
  _opaque_pthread_t *v230;
  mach_port_t v231;
  void *v232;
  NSObject *v233;
  _opaque_pthread_t *v234;
  mach_port_t v235;
  void *v236;
  NSObject *v237;
  _opaque_pthread_t *v238;
  mach_port_t v239;
  void *v240;
  uint64_t v241;
  __int128 v243;
  uint64_t v244;
  uint64_t v245;
  std::__shared_weak_count *v246;
  __int128 v247;
  uint64_t v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  __int128 v251;
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  std::string v258;
  __int128 v259;
  __int128 v260;
  uint64_t v261;
  uint64_t v262;
  std::__shared_weak_count *v263;
  __int128 v264;
  uint64_t v265;
  _BYTE v266[24];
  uint64_t v267;
  std::string v268;
  std::logic_error v269;
  std::string v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  char v275;
  _BYTE v276[24];
  uint64_t v277;
  std::__shared_weak_count *v278;
  std::__shared_weak_count *v279;
  std::string v280;
  __int128 v281;
  __int128 v282;
  uint64_t v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  void *__p[2];
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  int v290;
  int v291;
  double v292;
  uint64_t v293;
  __int128 v294;
  std::string v295;
  __int128 v296;
  __int128 v297;
  uint64_t v298;
  uint64_t v299;
  std::__shared_weak_count *v300;
  _OWORD v301[12];
  uint64_t v302;
  NSObject **v303;
  std::logic_error v304;
  __int128 v305;
  const char *v306;
  int v307;
  std::__shared_weak_count *v308;
  _BYTE buf[24];
  __int128 v310;
  __int128 v311;
  uint64_t v312;
  uint64_t v313;
  std::__shared_weak_count *v314;
  std::string v315;
  __int128 v316;
  __int128 v317;
  uint64_t v318;
  uint64_t v319;
  std::__shared_weak_count *v320;
  uint64_t v321;
  uint64_t v322;

  v322 = *MEMORY[0x1E0C80C00];
  v302 = 0;
  memset(v301, 0, sizeof(v301));
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  if (0x2E8BA2E8BA2E8BA3 * ((a5[1] - *a5) >> 3) != 0xCCCCCCCCCCCCCCCDLL
                                                    * ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4))
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v315, "com.apple.coreaudio", "AMCP");
    v225 = *(NSObject **)v315.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v315);
    if (os_log_type_enabled(v225, OS_LOG_TYPE_ERROR))
    {
      v226 = pthread_self();
      v227 = pthread_mach_thread_np(v226);
      LODWORD(v315.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v315.__r_.__value_.__r.__words[0]) = v227;
      LOWORD(v315.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v315.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Client_IO_Handler.cpp";
      WORD1(v315.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v315.__r_.__value_.__r.__words[2]) = 231;
      LOWORD(v316) = 2080;
      *(_QWORD *)((char *)&v316 + 2) = "not (sources.size() == m_streams[Direction::input].size())";
      _os_log_error_impl(&dword_1B57BA000, v225, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Call_Audio_IO_Proc: mismatch between preallocated streams and actual streams", (uint8_t *)&v315, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)__p);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Call_Audio_IO_Proc: mismatch between preallocated streams and actual streams", (uint64_t)&v295);
    std::logic_error::logic_error((std::logic_error *)&v270, &v295);
    v270.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)buf, (const std::logic_error *)&v270);
    v310 = 0uLL;
    *(_QWORD *)&v311 = 0;
    DWORD2(v311) = -1;
    *(_QWORD *)buf = off_1E69A1208;
    *(_QWORD *)&buf[16] = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v315, (uint64_t)buf);
    *((_QWORD *)&v316 + 1) = "void AMCP::Graph::Call_Audio_IO_Proc::operator()(AMCP::Object_ID, Node_Type, const IO_Proc_"
                             "Cycle_Info &, const rt_safe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP:"
                             ":DAL::Writable_Range> &)";
    *(_QWORD *)&v317 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Client_IO_Handler.cpp";
    DWORD2(v317) = 231;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v276);
    v304 = *(std::logic_error *)v276;
    v303 = (NSObject **)off_1E69A20A0;
    *(_QWORD *)&v305 = *(_QWORD *)&v276[16];
    memset(v276, 0, sizeof(v276));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v315, (uint64_t)&v303);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&v315);
  }
  if (0x2E8BA2E8BA2E8BA3 * ((a6[1] - *a6) >> 3) != 0xCCCCCCCCCCCCCCCDLL
                                                    * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4))
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v315, "com.apple.coreaudio", "AMCP");
    v229 = *(NSObject **)v315.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v315);
    if (os_log_type_enabled(v229, OS_LOG_TYPE_ERROR))
    {
      v230 = pthread_self();
      v231 = pthread_mach_thread_np(v230);
      LODWORD(v315.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v315.__r_.__value_.__r.__words[0]) = v231;
      LOWORD(v315.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v315.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Client_IO_Handler.cpp";
      WORD1(v315.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v315.__r_.__value_.__r.__words[2]) = 232;
      LOWORD(v316) = 2080;
      *(_QWORD *)((char *)&v316 + 2) = "not (dests.size() == m_streams[Direction::output].size())";
      _os_log_error_impl(&dword_1B57BA000, v229, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Call_Audio_IO_Proc: mismatch between preallocated streams and actual streams", (uint8_t *)&v315, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)__p);
    v232 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Call_Audio_IO_Proc: mismatch between preallocated streams and actual streams", (uint64_t)&v295);
    std::logic_error::logic_error((std::logic_error *)&v270, &v295);
    v270.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)buf, (const std::logic_error *)&v270);
    v310 = 0uLL;
    *(_QWORD *)&v311 = 0;
    DWORD2(v311) = -1;
    *(_QWORD *)buf = off_1E69A1208;
    *(_QWORD *)&buf[16] = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v315, (uint64_t)buf);
    *((_QWORD *)&v316 + 1) = "void AMCP::Graph::Call_Audio_IO_Proc::operator()(AMCP::Object_ID, Node_Type, const IO_Proc_"
                             "Cycle_Info &, const rt_safe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP:"
                             ":DAL::Writable_Range> &)";
    *(_QWORD *)&v317 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Client_IO_Handler.cpp";
    DWORD2(v317) = 232;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v276);
    v304 = *(std::logic_error *)v276;
    v303 = (NSObject **)off_1E69A20A0;
    *(_QWORD *)&v305 = *(_QWORD *)&v276[16];
    memset(v276, 0, sizeof(v276));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v315, (uint64_t)&v303);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v232, (uint64_t)&v315);
  }
  v241 = *(_QWORD *)(a1 + 8);
  AMCP::Graph::io_proc_cycle_info_to_audio_io_cycle_info(a4, (uint64_t)v301);
  v11 = *a5;
  if (a5[1] != *a5)
  {
    v12 = 0;
    do
    {
      v13 = (__int128 *)(v11 + 88 * v12);
      v14 = *v13;
      v315.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
      *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v14;
      *(_QWORD *)&v316 = *((_QWORD *)v13 + 3);
      v15 = *((_QWORD *)v13 + 4);
      *((_QWORD *)&v316 + 1) = v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = *(__int128 *)((char *)v13 + 40);
      v318 = *((_QWORD *)v13 + 7);
      v317 = v18;
      v319 = *((_QWORD *)v13 + 8);
      v19 = (std::__shared_weak_count *)*((_QWORD *)v13 + 9);
      v320 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      v321 = *((_QWORD *)v13 + 10);
      v295 = v315;
      v22 = v316;
      v296 = v316;
      v23 = *((_QWORD *)&v316 + 1);
      if (*((_QWORD *)&v316 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v297 = v317;
      v298 = v318;
      v299 = v319;
      v300 = v320;
      if (v320)
      {
        v26 = (unint64_t *)&v320->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = *(double *)(a1 + 192);
      if (v23)
      {
        v29 = (unint64_t *)(v23 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v291 = 2;
      v292 = -v28;
      v293 = 0;
      v294 = v22;
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v12);
      if (v31)
      {
        AMCP::Graph::align_buffer((uint64_t)&v295, v31);
        LODWORD(__p[0]) = a2;
        v287 = 0;
        v288 = 0;
        __p[1] = 0;
        v289 = v12;
        v290 = 0;
        v32 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v12);
        v280 = v295;
        v281 = v296;
        if (*((_QWORD *)&v296 + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&v296 + 1) + 8);
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        v282 = v297;
        v283 = v298;
        v284 = v299;
        v285 = v300;
        if (v300)
        {
          v35 = (unint64_t *)&v300->__shared_owners_;
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        AMCP::DAL::Fixed_Buffer::create_writable_range(v32, (uint64_t)&v280, (uint64_t)buf);
        v37 = v285;
        if (v285)
        {
          v38 = (unint64_t *)&v285->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        v40 = (std::__shared_weak_count *)*((_QWORD *)&v281 + 1);
        if (*((_QWORD *)&v281 + 1))
        {
          v41 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v321 + 64))(v276);
        if (caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses((uint64_t)v276, (uint64_t)&v295))
        {
          AMCP::DAL::Writable_Range::receive_data((uint64_t)buf, (uint64_t)__p, (AMCP::DAL::DAL_Time *)&v315);
        }
        else
        {
          v53 = *(_QWORD *)(*a5 + 88 * v12 + 80);
          if (v53)
          {
            (*(void (**)(NSObject ***__return_ptr))(*(_QWORD *)v53 + 72))(&v303);
            v54 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses((uint64_t)&v303, (uint64_t)&v295);
            v55 = v54;
            v56 = v308;
            if (v308)
            {
              v57 = (unint64_t *)&v308->__shared_owners_;
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            v59 = (std::__shared_weak_count *)*((_QWORD *)&v305 + 1);
            if (*((_QWORD *)&v305 + 1))
            {
              v60 = (unint64_t *)(*((_QWORD *)&v305 + 1) + 8);
              do
                v61 = __ldaxr(v60);
              while (__stlxr(v61 - 1, v60));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
            if (!v55)
            {
              AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v54);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v303, "com.apple.coreaudio", "AMCP");
              v220 = *v303;
              std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v303);
              if (os_log_type_enabled(v220, OS_LOG_TYPE_ERROR))
              {
                v221 = pthread_self();
                v222 = pthread_mach_thread_np(v221);
                LODWORD(v303) = 67109890;
                HIDWORD(v303) = v222;
                LOWORD(v304.__vftable) = 2080;
                *(std::logic_error_vtbl **)((char *)&v304.__vftable + 2) = (std::logic_error_vtbl *)"Client_IO_Handler.cpp";
                WORD1(v304.__imp_.__imp_) = 1024;
                HIDWORD(v304.__imp_.__imp_) = 257;
                LOWORD(v305) = 2080;
                *(_QWORD *)((char *)&v305 + 2) = "not (sources[i].m_buffer == nullptr or sources[i].m_buffer->get_allowed"
                                                 "_read_range().encompasses(read_time_range))";
                _os_log_error_impl(&dword_1B57BA000, v220, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Only reflectors can read outside of the valid range.", (uint8_t *)&v303, 0x22u);
              }
              AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v275);
              v223 = __cxa_allocate_exception(0x40uLL);
              caulk::make_string((caulk *)"Only reflectors can read outside of the valid range.", (uint64_t)&v268);
              std::logic_error::logic_error(&v269, &v268);
              v269.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
              std::logic_error::logic_error((std::logic_error *)&v270, &v269);
              v271 = 0;
              v272 = 0;
              v273 = 0;
              v274 = -1;
              v270.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
              v270.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v303, (uint64_t)&v270);
              *((_QWORD *)&v305 + 1) = "void AMCP::Graph::Call_Audio_IO_Proc::operator()(AMCP::Object_ID, Node_Type, cons"
                                       "t IO_Proc_Cycle_Info &, const rt_safe_vector<AMCP::DAL::Readable_Range> &, const "
                                       "rt_safe_vector<AMCP::DAL::Writable_Range> &)";
              v306 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Client_IO_Handler.cpp";
              v307 = 257;
              applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v264);
              *(_OWORD *)&v266[8] = v264;
              v224 = v265;
              v265 = 0;
              *(_QWORD *)v266 = off_1E69A20A0;
              v267 = v224;
              v264 = 0uLL;
              boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v303, (uint64_t)v266);
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v223, (uint64_t)&v303);
            }
          }
          AMCP::DAL::Writable_Range::pad_and_receive_data((uint64_t)buf, (uint64_t)__p, (AMCP::DAL::DAL_Time *)&v315);
        }
        v62 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v12);
        v258 = v295;
        v259 = v296;
        if (*((_QWORD *)&v296 + 1))
        {
          v63 = (unint64_t *)(*((_QWORD *)&v296 + 1) + 8);
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
        }
        v260 = v297;
        v261 = v298;
        v262 = v299;
        v263 = v300;
        if (v300)
        {
          v65 = (unint64_t *)&v300->__shared_owners_;
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }
        AMCP::DAL::Fixed_Buffer::create_readable_range(v62, &v258, (uint64_t)&v303);
        v67 = v263;
        if (v263)
        {
          v68 = (unint64_t *)&v263->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        v70 = (std::__shared_weak_count *)*((_QWORD *)&v259 + 1);
        if (*((_QWORD *)&v259 + 1))
        {
          v71 = (unint64_t *)(*((_QWORD *)&v259 + 1) + 8);
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        AMCP::Graph::dal_segment_to_proc_stream((uint64_t)&v303, *(_QWORD *)(a1 + 72) + 80 * v12, (uint64_t *)(*(_QWORD *)(a1 + 120) + 40 * v12), (uint64_t)&v291);
        v73 = v308;
        if (v308)
        {
          v74 = (unint64_t *)&v308->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        v76 = (std::__shared_weak_count *)*((_QWORD *)&v305 + 1);
        if (*((_QWORD *)&v305 + 1))
        {
          v77 = (unint64_t *)(*((_QWORD *)&v305 + 1) + 8);
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        v79 = v279;
        if (v279)
        {
          v80 = (unint64_t *)&v279->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        v82 = v278;
        if (v278)
        {
          v83 = (unint64_t *)&v278->__shared_owners_;
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        v85 = v314;
        if (v314)
        {
          v86 = (unint64_t *)&v314->__shared_owners_;
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        v88 = (std::__shared_weak_count *)*((_QWORD *)&v310 + 1);
        if (*((_QWORD *)&v310 + 1))
        {
          v89 = (unint64_t *)(*((_QWORD *)&v310 + 1) + 8);
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        if (SHIBYTE(v288) < 0)
          operator delete(__p[1]);
      }
      else
      {
        v43 = *a5;
        v44 = *(_QWORD *)(*a5 + 88 * v12 + 80);
        if (v44)
        {
          (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v44 + 64))(buf);
          v45 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses((uint64_t)buf, *a5 + 88 * v12);
          v46 = v45;
          v47 = v314;
          if (v314)
          {
            v48 = (unint64_t *)&v314->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          v50 = (std::__shared_weak_count *)*((_QWORD *)&v310 + 1);
          if (*((_QWORD *)&v310 + 1))
          {
            v51 = (unint64_t *)(*((_QWORD *)&v310 + 1) + 8);
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          if (!v46)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v45);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v216 = **(NSObject ***)buf;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
            if (os_log_type_enabled(v216, OS_LOG_TYPE_ERROR))
            {
              v217 = pthread_self();
              v218 = pthread_mach_thread_np(v217);
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&buf[4] = v218;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = "Client_IO_Handler.cpp";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 266;
              LOWORD(v310) = 2080;
              *(_QWORD *)((char *)&v310 + 2) = "not (sources[i].m_buffer == nullptr or sources[i].m_buffer->get_time_rang"
                                               "e().encompasses(sources[i].get_time_range()))";
              _os_log_error_impl(&dword_1B57BA000, v216, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Reflectors should be using a copy buffer", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v268);
            v219 = __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"Reflectors should be using a copy buffer", (uint64_t)&v270);
            std::logic_error::logic_error((std::logic_error *)v266, &v270);
            *(_QWORD *)v266 = MEMORY[0x1E0DE5018] + 16;
            std::logic_error::logic_error((std::logic_error *)&v303, (const std::logic_error *)v266);
            v305 = 0uLL;
            v306 = 0;
            v307 = -1;
            v303 = (NSObject **)off_1E69A1208;
            v304.__imp_.__imp_ = (const char *)&unk_1E69A1230;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v303);
            *((_QWORD *)&v310 + 1) = "void AMCP::Graph::Call_Audio_IO_Proc::operator()(AMCP::Object_ID, Node_Type, const "
                                     "IO_Proc_Cycle_Info &, const rt_safe_vector<AMCP::DAL::Readable_Range> &, const rt_s"
                                     "afe_vector<AMCP::DAL::Writable_Range> &)";
            *(_QWORD *)&v311 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Client_IO_Handler.cpp";
            DWORD2(v311) = 266;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)__p);
            *(_OWORD *)&v276[8] = *(_OWORD *)__p;
            *(_QWORD *)v276 = off_1E69A20A0;
            v277 = v287;
            __p[0] = 0;
            __p[1] = 0;
            v287 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v276);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v219, (uint64_t)buf);
          }
          v43 = *a5;
        }
        AMCP::Graph::dal_segment_to_proc_stream(v43 + 88 * v12, *(_QWORD *)(a1 + 72) + 80 * v12, (uint64_t *)(*(_QWORD *)(a1 + 120) + 40 * v12), (uint64_t)&v291);
      }
      v91 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
      if (*((_QWORD *)&v294 + 1))
      {
        v92 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      v94 = v300;
      if (v300)
      {
        v95 = (unint64_t *)&v300->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      v97 = (std::__shared_weak_count *)*((_QWORD *)&v296 + 1);
      if (*((_QWORD *)&v296 + 1))
      {
        v98 = (unint64_t *)(*((_QWORD *)&v296 + 1) + 8);
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      v100 = v320;
      if (v320)
      {
        v101 = (unint64_t *)&v320->__shared_owners_;
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      v103 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
      if (*((_QWORD *)&v316 + 1))
      {
        v104 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      ++v12;
      v11 = *a5;
    }
    while (v12 < 0x2E8BA2E8BA2E8BA3 * ((a5[1] - *a5) >> 3));
  }
  v106 = *a6;
  if (a6[1] != *a6)
  {
    v107 = 0;
    do
    {
      v108 = (__int128 *)(v106 + 88 * v107);
      v109 = *v108;
      *(_QWORD *)&buf[16] = *((_QWORD *)v108 + 2);
      *(_OWORD *)buf = v109;
      v110 = *(__int128 *)((char *)v108 + 24);
      v310 = v110;
      if (*((_QWORD *)&v110 + 1))
      {
        v111 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
        do
          v112 = __ldxr(v111);
        while (__stxr(v112 + 1, v111));
      }
      v113 = *(__int128 *)((char *)v108 + 40);
      v312 = *((_QWORD *)v108 + 7);
      v311 = v113;
      v313 = *((_QWORD *)v108 + 8);
      v114 = (std::__shared_weak_count *)*((_QWORD *)v108 + 9);
      v314 = v114;
      if (v114)
      {
        v115 = (unint64_t *)&v114->__shared_owners_;
        do
          v116 = __ldxr(v115);
        while (__stxr(v116 + 1, v115));
      }
      v117 = *(_QWORD *)(a1 + 192);
      if (*((_QWORD *)&v110 + 1))
      {
        v118 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
        do
          v119 = __ldxr(v118);
        while (__stxr(v119 + 1, v118));
      }
      LODWORD(v303) = 2;
      v304 = (std::logic_error)v117;
      v305 = v110;
      v120 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v107);
      v121 = *a6 + 88 * v107;
      if (v120)
      {
        AMCP::Graph::align_buffer(v121, v120);
        v122 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v107);
        v251 = *(_OWORD *)buf;
        v252 = *(_QWORD *)&buf[16];
        v253 = v310;
        if (*((_QWORD *)&v310 + 1))
        {
          v123 = (unint64_t *)(*((_QWORD *)&v310 + 1) + 8);
          do
            v124 = __ldxr(v123);
          while (__stxr(v124 + 1, v123));
        }
        v254 = v311;
        v255 = v312;
        v256 = v313;
        v257 = v314;
        if (v314)
        {
          v125 = (unint64_t *)&v314->__shared_owners_;
          do
            v126 = __ldxr(v125);
          while (__stxr(v126 + 1, v125));
        }
        AMCP::DAL::Fixed_Buffer::create_writable_range(v122, (uint64_t)&v251, (uint64_t)&v315);
        v127 = v257;
        if (v257)
        {
          v128 = (unint64_t *)&v257->__shared_owners_;
          do
            v129 = __ldaxr(v128);
          while (__stlxr(v129 - 1, v128));
          if (!v129)
          {
            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
            std::__shared_weak_count::__release_weak(v127);
          }
        }
        v130 = (std::__shared_weak_count *)*((_QWORD *)&v253 + 1);
        if (*((_QWORD *)&v253 + 1))
        {
          v131 = (unint64_t *)(*((_QWORD *)&v253 + 1) + 8);
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
            std::__shared_weak_count::__release_weak(v130);
          }
        }
        AMCP::Graph::dal_segment_to_proc_stream((uint64_t)&v315, *(_QWORD *)(a1 + 48) + 80 * v107, (uint64_t *)(*(_QWORD *)(a1 + 96) + 40 * v107), (uint64_t)&v303);
        v133 = v320;
        if (v320)
        {
          v134 = (unint64_t *)&v320->__shared_owners_;
          do
            v135 = __ldaxr(v134);
          while (__stlxr(v135 - 1, v134));
          if (!v135)
          {
            ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
            std::__shared_weak_count::__release_weak(v133);
          }
        }
        v136 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
        if (*((_QWORD *)&v316 + 1))
        {
          v137 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 - 1, v137));
          if (!v138)
          {
            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
            std::__shared_weak_count::__release_weak(v136);
          }
        }
      }
      else
      {
        AMCP::Graph::dal_segment_to_proc_stream(v121, *(_QWORD *)(a1 + 48) + 80 * v107, (uint64_t *)(*(_QWORD *)(a1 + 96) + 40 * v107), (uint64_t)&v303);
      }
      v139 = (std::__shared_weak_count *)*((_QWORD *)&v305 + 1);
      if (*((_QWORD *)&v305 + 1))
      {
        v140 = (unint64_t *)(*((_QWORD *)&v305 + 1) + 8);
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
      v142 = v314;
      if (v314)
      {
        v143 = (unint64_t *)&v314->__shared_owners_;
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
      }
      v145 = (std::__shared_weak_count *)*((_QWORD *)&v310 + 1);
      if (*((_QWORD *)&v310 + 1))
      {
        v146 = (unint64_t *)(*((_QWORD *)&v310 + 1) + 8);
        do
          v147 = __ldaxr(v146);
        while (__stlxr(v147 - 1, v146));
        if (!v147)
        {
          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
          std::__shared_weak_count::__release_weak(v145);
        }
      }
      ++v107;
      v106 = *a6;
    }
    while (v107 < 0x2E8BA2E8BA2E8BA3 * ((a6[1] - *a6) >> 3));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  kdebug_trace();
  std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(*(_QWORD *)(a1 + 40), a2, (uint64_t)v301, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4), *(_QWORD *)(a1 + 72), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4), *(_QWORD *)(a1 + 48));
  kdebug_trace();
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  if (v241 == *(_QWORD *)(a1 + 8))
  {
    v149 = *a6;
    v150 = a6[1];
    if (v150 == *a6)
    {
      v149 = a6[1];
    }
    else
    {
      v151 = 0;
      do
      {
        v152 = *(_QWORD *)(a1 + 144);
        if (*(_QWORD *)(v152 + 8 * v151))
        {
          *(_DWORD *)buf = a2;
          *(_OWORD *)&buf[8] = 0u;
          v310 = 0u;
          LODWORD(v311) = 0;
          v153 = *(_QWORD *)(v152 + 8 * v151);
          v154 = (__int128 *)(v149 + 88 * v151);
          v155 = *v154;
          v244 = *((_QWORD *)v154 + 2);
          v243 = v155;
          v245 = *((_QWORD *)v154 + 3);
          v156 = (std::__shared_weak_count *)*((_QWORD *)v154 + 4);
          v246 = v156;
          if (v156)
          {
            v157 = (unint64_t *)&v156->__shared_owners_;
            do
              v158 = __ldxr(v157);
            while (__stxr(v158 + 1, v157));
          }
          v159 = *(__int128 *)((char *)v154 + 40);
          v248 = *((_QWORD *)v154 + 7);
          v247 = v159;
          v249 = *((_QWORD *)v154 + 8);
          v160 = (std::__shared_weak_count *)*((_QWORD *)v154 + 9);
          v250 = v160;
          if (v160)
          {
            v161 = (unint64_t *)&v160->__shared_owners_;
            do
              v162 = __ldxr(v161);
            while (__stxr(v162 + 1, v161));
          }
          AMCP::DAL::Fixed_Buffer::create_readable_range(v153, &v243, (uint64_t)&v315);
          v148 = (AMCP::Log::Scope_Registry *)AMCP::DAL::Writable_Range::receive_data(*a6 + 88 * v151, (uint64_t)buf, (AMCP::DAL::DAL_Time *)&v315);
          v163 = v320;
          if (v320)
          {
            v164 = (unint64_t *)&v320->__shared_owners_;
            do
              v165 = __ldaxr(v164);
            while (__stlxr(v165 - 1, v164));
            if (!v165)
            {
              ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
              std::__shared_weak_count::__release_weak(v163);
            }
          }
          v166 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
          if (*((_QWORD *)&v316 + 1))
          {
            v167 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
            do
              v168 = __ldaxr(v167);
            while (__stlxr(v168 - 1, v167));
            if (!v168)
            {
              ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
              std::__shared_weak_count::__release_weak(v166);
            }
          }
          v169 = v250;
          if (v250)
          {
            v170 = (unint64_t *)&v250->__shared_owners_;
            do
              v171 = __ldaxr(v170);
            while (__stlxr(v171 - 1, v170));
            if (!v171)
            {
              ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
              std::__shared_weak_count::__release_weak(v169);
            }
          }
          v172 = v246;
          if (v246)
          {
            v173 = (unint64_t *)&v246->__shared_owners_;
            do
              v174 = __ldaxr(v173);
            while (__stlxr(v174 - 1, v173));
            if (!v174)
            {
              ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
              std::__shared_weak_count::__release_weak(v172);
            }
          }
          if (SBYTE7(v310) < 0)
            operator delete(*(void **)&buf[8]);
          v149 = *a6;
          v150 = a6[1];
        }
        ++v151;
      }
      while (v151 < 0x2E8BA2E8BA2E8BA3 * ((v150 - v149) >> 3));
    }
    v175 = *(_QWORD *)(a1 + 72);
    v176 = *(_QWORD *)(a1 + 80);
    if (0x2E8BA2E8BA2E8BA3 * ((a5[1] - *a5) >> 3) != 0xCCCCCCCCCCCCCCCDLL * ((v176 - v175) >> 4))
    {
      AMCP::Log::Scope_Registry::get(v148);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v315, "com.apple.coreaudio", "AMCP");
      v233 = *(NSObject **)v315.__r_.__value_.__l.__data_;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v315);
      if (os_log_type_enabled(v233, OS_LOG_TYPE_ERROR))
      {
        v234 = pthread_self();
        v235 = pthread_mach_thread_np(v234);
        LODWORD(v315.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v315.__r_.__value_.__r.__words[0]) = v235;
        LOWORD(v315.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v315.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Client_IO_Handler.cpp";
        WORD1(v315.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v315.__r_.__value_.__r.__words[2]) = 150;
        LOWORD(v316) = 2080;
        *(_QWORD *)((char *)&v316 + 2) = "not (adjust_this.size() == streams.size())";
        _os_log_error_impl(&dword_1B57BA000, v233, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v315, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)__p);
      v236 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v295);
      std::logic_error::logic_error((std::logic_error *)&v270, &v295);
      v270.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error((std::logic_error *)buf, (const std::logic_error *)&v270);
      v310 = 0uLL;
      *(_QWORD *)&v311 = 0;
      DWORD2(v311) = -1;
      *(_QWORD *)buf = off_1E69A1208;
      *(_QWORD *)&buf[16] = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v315, (uint64_t)buf);
      *((_QWORD *)&v316 + 1) = "void AMCP::Graph::check_sizes_and_adjust(const rt_safe_vector<T> &, const std::vector<AMC"
                               "P::Proc_Stream> &) [T = AMCP::DAL::Readable_Range]";
      *(_QWORD *)&v317 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Client_IO_Handler.cpp";
      DWORD2(v317) = 150;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v276);
      v304 = *(std::logic_error *)v276;
      v303 = (NSObject **)off_1E69A20A0;
      *(_QWORD *)&v305 = *(_QWORD *)&v276[16];
      memset(v276, 0, sizeof(v276));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v315, (uint64_t)&v303);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v236, (uint64_t)&v315);
    }
    if (v176 != v175)
    {
      v177 = 0;
      do
      {
        v178 = *(unsigned int *)(v175 + 80 * v177 + 64);
        v179.n128_f64[0] = AMCP::DAL::DAL_Time::operator-((uint64_t)&v315, (AMCP::DAL::DAL_Time *)(*a5 + 88 * v177 + 40), (AMCP::DAL::DAL_Time *)(*a5 + 88 * v177));
        if ((v315.__r_.__value_.__s.__data_[0] & 2) == 0)
          AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v315);
        v180 = *(double *)&v315.__r_.__value_.__l.__size_;
        v181 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
        if (*((_QWORD *)&v316 + 1))
        {
          v182 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
          do
            v183 = __ldaxr(v182);
          while (__stlxr(v183 - 1, v182));
          if (!v183)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v181->__on_zero_shared)(v181, v179);
            std::__shared_weak_count::__release_weak(v181);
          }
        }
        if (vcvtmd_s64_f64(v180) != v178)
        {
          v184 = *(_OWORD *)(*a5 + 88 * v177 + 24);
          *(_OWORD *)buf = v184;
          if (*((_QWORD *)&v184 + 1))
          {
            v185 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
            do
              v186 = __ldxr(v185);
            while (__stxr(v186 + 1, v185));
            v187 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 80 * v177 + 64);
            do
              v188 = __ldxr(v185);
            while (__stxr(v188 + 1, v185));
          }
          else
          {
            v187 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 80 * v177 + 64);
            *((_QWORD *)&v184 + 1) = 0;
          }
          LODWORD(v315.__r_.__value_.__l.__data_) = 2;
          *(double *)&v315.__r_.__value_.__l.__size_ = (double)v187;
          v315.__r_.__value_.__r.__words[2] = 0;
          v316 = v184;
          AMCP::DAL::DAL_Timed_Segment::adjust_length((AMCP::DAL::DAL_Timed_Segment *)(*a5 + 88 * v177), (const AMCP::DAL::DAL_Time_Delta *)&v315);
          v189 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
          if (*((_QWORD *)&v316 + 1))
          {
            v190 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
            do
              v191 = __ldaxr(v190);
            while (__stlxr(v191 - 1, v190));
            if (!v191)
            {
              ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
              std::__shared_weak_count::__release_weak(v189);
            }
          }
          v192 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v193 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v194 = __ldaxr(v193);
            while (__stlxr(v194 - 1, v193));
            if (!v194)
            {
              ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
              std::__shared_weak_count::__release_weak(v192);
            }
          }
        }
        ++v177;
        v175 = *(_QWORD *)(a1 + 72);
      }
      while (v177 < 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 80) - v175) >> 4));
      v149 = *a6;
      v150 = a6[1];
    }
    v195 = 0x2E8BA2E8BA2E8BA3 * ((v150 - v149) >> 3);
    v196 = *(_QWORD *)(a1 + 48);
    v197 = *(_QWORD *)(a1 + 56);
    if (v195 != 0xCCCCCCCCCCCCCCCDLL * ((v197 - v196) >> 4))
    {
      AMCP::Log::Scope_Registry::get(v148);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v315, "com.apple.coreaudio", "AMCP");
      v237 = *(NSObject **)v315.__r_.__value_.__l.__data_;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v315);
      if (os_log_type_enabled(v237, OS_LOG_TYPE_ERROR))
      {
        v238 = pthread_self();
        v239 = pthread_mach_thread_np(v238);
        LODWORD(v315.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v315.__r_.__value_.__r.__words[0]) = v239;
        LOWORD(v315.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v315.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Client_IO_Handler.cpp";
        WORD1(v315.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v315.__r_.__value_.__r.__words[2]) = 150;
        LOWORD(v316) = 2080;
        *(_QWORD *)((char *)&v316 + 2) = "not (adjust_this.size() == streams.size())";
        _os_log_error_impl(&dword_1B57BA000, v237, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v315, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)__p);
      v240 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v295);
      std::logic_error::logic_error((std::logic_error *)&v270, &v295);
      v270.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error((std::logic_error *)buf, (const std::logic_error *)&v270);
      v310 = 0uLL;
      *(_QWORD *)&v311 = 0;
      DWORD2(v311) = -1;
      *(_QWORD *)buf = off_1E69A1208;
      *(_QWORD *)&buf[16] = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v315, (uint64_t)buf);
      *((_QWORD *)&v316 + 1) = "void AMCP::Graph::check_sizes_and_adjust(const rt_safe_vector<T> &, const std::vector<AMC"
                               "P::Proc_Stream> &) [T = AMCP::DAL::Writable_Range]";
      *(_QWORD *)&v317 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Client_IO_Handler.cpp";
      DWORD2(v317) = 150;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v276);
      v304 = *(std::logic_error *)v276;
      v303 = (NSObject **)off_1E69A20A0;
      *(_QWORD *)&v305 = *(_QWORD *)&v276[16];
      memset(v276, 0, sizeof(v276));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v315, (uint64_t)&v303);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v240, (uint64_t)&v315);
    }
    if (v197 != v196)
    {
      v198 = 0;
      do
      {
        v199 = *(unsigned int *)(v196 + 80 * v198 + 64);
        v200.n128_f64[0] = AMCP::DAL::DAL_Time::operator-((uint64_t)&v315, (AMCP::DAL::DAL_Time *)(*a6 + 88 * v198 + 40), (AMCP::DAL::DAL_Time *)(*a6 + 88 * v198));
        if ((v315.__r_.__value_.__s.__data_[0] & 2) == 0)
          AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v315);
        v201 = *(double *)&v315.__r_.__value_.__l.__size_;
        v202 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
        if (*((_QWORD *)&v316 + 1))
        {
          v203 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
          do
            v204 = __ldaxr(v203);
          while (__stlxr(v204 - 1, v203));
          if (!v204)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v202->__on_zero_shared)(v202, v200);
            std::__shared_weak_count::__release_weak(v202);
          }
        }
        if (vcvtmd_s64_f64(v201) != v199)
        {
          v205 = *(_OWORD *)(*a6 + 88 * v198 + 24);
          *(_OWORD *)buf = v205;
          if (*((_QWORD *)&v205 + 1))
          {
            v206 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
            do
              v207 = __ldxr(v206);
            while (__stxr(v207 + 1, v206));
            v208 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 80 * v198 + 64);
            do
              v209 = __ldxr(v206);
            while (__stxr(v209 + 1, v206));
          }
          else
          {
            v208 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 80 * v198 + 64);
            *((_QWORD *)&v205 + 1) = 0;
          }
          LODWORD(v315.__r_.__value_.__l.__data_) = 2;
          *(double *)&v315.__r_.__value_.__l.__size_ = (double)v208;
          v315.__r_.__value_.__r.__words[2] = 0;
          v316 = v205;
          AMCP::DAL::DAL_Timed_Segment::adjust_length((AMCP::DAL::DAL_Timed_Segment *)(*a6 + 88 * v198), (const AMCP::DAL::DAL_Time_Delta *)&v315);
          v210 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
          if (*((_QWORD *)&v316 + 1))
          {
            v211 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
            do
              v212 = __ldaxr(v211);
            while (__stlxr(v212 - 1, v211));
            if (!v212)
            {
              ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
              std::__shared_weak_count::__release_weak(v210);
            }
          }
          v213 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v214 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v215 = __ldaxr(v214);
            while (__stlxr(v215 - 1, v214));
            if (!v215)
            {
              ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
              std::__shared_weak_count::__release_weak(v213);
            }
          }
        }
        ++v198;
        v196 = *(_QWORD *)(a1 + 48);
      }
      while (v198 < 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 56) - v196) >> 4));
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1B5A8D1B4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AMCP::Graph::align_buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  double sample_time;
  AMCP::Log::Scope_Registry *v7;
  NSObject *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  void *exception;
  __int128 v12;
  uint64_t v13;
  uint64_t (**v14)();
  __int128 v15;
  uint64_t v16;
  std::string v17;
  std::logic_error v18;
  std::logic_error v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint8_t buf[8];
  __int16 v27;
  char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  _BYTE v32[14];
  const char *v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 88);
  if (v4)
    v5 = (*(double (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  else
    v5 = 0.0;
  sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
  if (round(v5) < round(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 40)) - sample_time))
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v10;
      v27 = 2080;
      v28 = "Client_IO_Handler.cpp";
      v29 = 1024;
      v30 = 141;
      v31 = 2080;
      *(_QWORD *)v32 = "not (buffer->get_capacity() >= target_range.get_range().length())";
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v19, &v18);
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v20 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(_QWORD *)&v32[6] = "void AMCP::Graph::align_buffer(const DAL::DAL_Time_Range &, DAL::Fixed_Buffer *)";
    v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Client_IO_Handler.cpp";
    v34 = 141;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    v15 = v12;
    v16 = v13;
    v12 = 0uLL;
    v13 = 0;
    v14 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v14);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  AMCP::DAL::Fixed_Buffer::set_range(a2, (_QWORD *)a1);
}

void sub_1B5A8DA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 112) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 104);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 104) = 0;
  MEMORY[0x1B5E500E8](v29 - 128);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 129));
  _Unwind_Resume(a1);
}

uint64_t *AMCP::Graph::dal_segment_to_proc_stream(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  const AMCP::DAL::DAL_Time_Range *v6;
  AMCP::Log::Scope_Registry *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  AMCP::Log::Scope_Registry *v13;
  NSObject **v14;
  uint64_t (**v15)();
  NSObject *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  void *exception;
  NSObject *v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  void *v24;
  double *v25[3];
  __int128 v26;
  uint64_t v27;
  std::string v28;
  uint64_t v29;
  std::string v30;
  std::logic_error v31;
  std::logic_error v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t (**v41)();
  __int128 v42;
  uint64_t v43;
  uint8_t buf[8];
  __int16 v45;
  char *v46;
  __int16 v47;
  int v48;
  __int16 v49;
  _BYTE v50[14];
  const char *v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v6 = *(const AMCP::DAL::DAL_Time_Range **)(a1 + 80);
  if (v6)
  {
    AMCP::DAL::DAL_Timed_Segment::translate_range(v25, v6, a1);
    if ((double *)((char *)v25[1] - (char *)v25[0]) != (double *)96)
    {
      AMCP::Log::Scope_Registry::get(v9);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v17 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v18 = pthread_self();
        v19 = pthread_mach_thread_np(v18);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v19;
        v45 = 2080;
        v46 = "Client_IO_Handler.cpp";
        v47 = 1024;
        v48 = 41;
        v49 = 2080;
        *(_QWORD *)v50 = "not (ranges.size() == 1)";
        _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v28);
      std::logic_error::logic_error((std::logic_error *)&v30, &v28);
      v30.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error(&v32, (const std::logic_error *)&v30);
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = -1;
      v32.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v33 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v32);
      *(_QWORD *)&v50[6] = "void AMCP::Graph::dal_segment_to_proc_stream(const AMCP::DAL::DAL_Timed_Segment &, AMCP::Proc"
                           "_Stream &, BufferListPtr &, AMCP::DAL::DAL_Time_Delta &)";
      v51 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Client_IO_Handler.cpp";
      v52 = 41;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v39);
      v42 = v39;
      v41 = off_1E69A20A0;
      v43 = v40;
      v39 = 0uLL;
      v40 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v41);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
    boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)buf, (uint64_t)(v25[0] + 2), a4);
    AMCP::Graph::dal_time_to_audio_time_stamp((AMCP::Log::Scope_Registry *)buf, a2);
    v10 = *(std::__shared_weak_count **)&v50[6];
    if (*(_QWORD *)&v50[6])
    {
      v11 = (unint64_t *)(*(_QWORD *)&v50[6] + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    *(_DWORD *)(a2 + 64) = vcvtmd_s64_f64(v25[0][1] - *v25[0]);
    *(_BYTE *)(a2 + 68) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 48))(*(_QWORD *)(a1 + 80));
    AMCP::DAL::DAL_Timed_Segment::translate_range((double **)&v39, *(const AMCP::DAL::DAL_Time_Range **)(a1 + 80), a1);
    if (*((_QWORD *)&v39 + 1) - (_QWORD)v39 != 96)
    {
      AMCP::Log::Scope_Registry::get(v13);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v21 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        v22 = pthread_self();
        v23 = pthread_mach_thread_np(v22);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v23;
        v45 = 2080;
        v46 = "DAL_Timed_Segment.cpp";
        v47 = 1024;
        v48 = 40;
        v49 = 2080;
        *(_QWORD *)v50 = "not (ranges.size() == 1)";
        _os_log_error_impl(&dword_1B57BA000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We don't allow AudioBufferLists from multi range buffers", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
      v24 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"We don't allow AudioBufferLists from multi range buffers", (uint64_t)&v30);
      std::logic_error::logic_error(&v31, &v30);
      v31.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v32, &v31);
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = -1;
      v32.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v33 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v32);
      *(_QWORD *)&v50[6] = "BufferListPtr AMCP::DAL::DAL_Timed_Segment::get_audio_buffer_list() const";
      v51 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
      v52 = 40;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v26);
      *(_OWORD *)&v28.__r_.__value_.__r.__words[1] = v26;
      v29 = v27;
      v26 = 0uLL;
      v27 = 0;
      v28.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v28);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v24, (uint64_t)buf);
    }
    AMCP::DAL::DAL_Timed_Segment::get_audio_buffer_lists((AMCP::DAL::DAL_Timed_Segment *)buf, a1);
    v14 = *(NSObject ***)buf;
    v15 = **(uint64_t (****)())buf;
    **(_QWORD **)buf = 0;
    v41 = v15;
    std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)&v42, (uint64_t)(v14 + 1));
    v32.__vftable = (std::logic_error_vtbl *)buf;
    std::vector<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>,caulk::rt_allocator<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v32);
    *(_QWORD *)buf = &v39;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
    std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::operator=[abi:ne180100](a3, (uint64_t *)&v41);
    std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v41);
    *(_QWORD *)(a2 + 72) = *a3;
    *(_QWORD *)buf = v25;
    return (uint64_t *)std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
  }
  else
  {
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&v50[6] = 0;
    std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::operator=[abi:ne180100](a3, (uint64_t *)buf);
    return std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
  }
}

void sub_1B5A8E080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43)
{
  uint64_t v43;

  *(_QWORD *)(v43 - 128) = &a42;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)(v43 - 128));
  *(_QWORD *)(v43 - 128) = &a10;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)(v43 - 128));
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v12 = a2;
  v11 = a4;
  v9 = a6;
  v10 = a5;
  v8 = a7;
  if (!a1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v12, a3, &v11, &v10, &v9, &v8);
}

void AMCP::Graph::create_cycle_info(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;

  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  v6 = *(_QWORD *)(a2 + 32);
  v39 = *(_QWORD *)(a2 + 24);
  v40 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  AMCP::Graph::Manifest_Counter::calculate_buffer_start((AMCP::DAL::DAL_Time *)&v35, a2, &v39, 1, (AMCP::DAL::DAL_Time_Delta *)a3, a3[10]);
  AMCP::Graph::Manifest_Counter::calculate_buffer_start((AMCP::DAL::DAL_Time *)&v31, a2, &v39, 0, (AMCP::DAL::DAL_Time_Delta *)a3, a3[10]);
  AMCP::Graph::Manifest_Counter::get_current_cycle_anchor_time((uint64_t)&v27, a2);
  *(_DWORD *)a1 = v35;
  *(_OWORD *)(a1 + 8) = v36;
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a1 + 24), v37, (uint64_t)v38);
  *(_DWORD *)(a1 + 40) = v31;
  *(_OWORD *)(a1 + 48) = v32;
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a1 + 64), v33, (uint64_t)v34);
  *(_DWORD *)(a1 + 80) = v27;
  *(_OWORD *)(a1 + 88) = v28;
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a1 + 104), v29, (uint64_t)v30);
  boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v24, (uint64_t)&v27, (uint64_t)a3);
  *(_OWORD *)(a1 + 120) = v24;
  *(_QWORD *)(a1 + 136) = v25;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 144, &v26);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a1 + 160), v39, (uint64_t)v40);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 40);
  v12 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v34;
  if (v34)
  {
    v16 = (unint64_t *)&v34->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v38;
  if (v38)
  {
    v19 = (unint64_t *)&v38->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v40;
  if (v40)
  {
    v22 = (unint64_t *)&v40->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1B5A8E578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  AMCP::Graph::IO_Proc_Cycle_Info *v14;
  uint64_t v15;
  uint64_t v16;
  va_list va;

  va_start(va, a14);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v15);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v16 - 80);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v16 - 64);
  AMCP::Graph::IO_Proc_Cycle_Info::~IO_Proc_Cycle_Info(v14);
  _Unwind_Resume(a1);
}

void AMCP::Graph::IO_Proc_Cycle_Info::~IO_Proc_Cycle_Info(AMCP::Graph::IO_Proc_Cycle_Info *this)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
}

void CASettingsStorage::CASettingsStorage(CASettingsStorage *this, const char *a2, char a3, CFPropertyListFormat a4)
{
  char v4;
  size_t v8;
  char *v9;

  v4 = a4;
  *(_QWORD *)this = 0;
  *((_WORD *)this + 4) = 436;
  *((_QWORD *)this + 2) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  *((_QWORD *)this + 3) = 100;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 1;
  *((_BYTE *)this + 49) = a3;
  *((_BYTE *)this + 50) = v4;
  v8 = strlen(a2) + 2;
  v9 = (char *)operator new[]();
  *(_QWORD *)this = v9;
  strlcpy(v9, a2, v8);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 1;
}

void CASettingsStorage::RefreshSettings(CASettingsStorage *this)
{
  _BOOL4 v2;
  __darwin_time_t v3;
  FILE *v4;
  FILE *v5;
  int v6;
  _BOOL4 v7;
  size_t v8;
  int v9;
  const __CFData *v10;
  const void *v11;
  CFPropertyListRef v12;
  CFDataRef data;
  char v14;
  void *__ptr[3];
  stat v16;

  if (*((_BYTE *)this + 49)
    && *((_QWORD *)this + 2)
    && (*((_QWORD *)this + 4) || *((_QWORD *)this + 5))
    && !*((_BYTE *)this + 48))
  {
    return;
  }
  if (stat(*(const char **)this, &v16))
    goto LABEL_7;
  if (*((_QWORD *)this + 2))
  {
    v3 = *((_QWORD *)this + 4);
    if (v3 >= v16.st_mtimespec.tv_sec
      && (v3 != v16.st_mtimespec.tv_sec || *((_QWORD *)this + 5) >= v16.st_mtimespec.tv_nsec)
      && !*((_BYTE *)this + 48))
    {
      v2 = 0;
      v7 = 1;
      goto LABEL_21;
    }
  }
  v4 = fopen(*(const char **)this, "r");
  if (v4)
  {
    v5 = v4;
    v6 = fileno(v4);
    if (flock(v6, 2) || (fseek(v5, 0, 2), v8 = MEMORY[0x1B5E50B08](v5), fseek(v5, 0, 0), !v8))
    {
      v7 = 0;
      v2 = 1;
    }
    else
    {
      std::vector<unsigned char>::vector(__ptr, v8);
      fread(__ptr[0], v8, 1uLL, v5);
      v9 = fileno(v5);
      flock(v9, 8);
      v14 = 1;
      v10 = CFDataCreate(0, (const UInt8 *)__ptr[0], v8);
      data = v10;
      v11 = (const void *)*((_QWORD *)this + 2);
      if (v11)
      {
        CFRelease(v11);
        *((_QWORD *)this + 2) = 0;
        v10 = data;
      }
      v12 = CFPropertyListCreateWithData(0, v10, 2uLL, 0, 0);
      *((_QWORD *)this + 2) = v12;
      v7 = v12 != 0;
      if (v12)
        *((_OWORD *)this + 2) = v16.st_mtimespec;
      v2 = v12 == 0;
      CACFData::~CACFData((CACFData *)&data);
      if (__ptr[0])
      {
        __ptr[1] = __ptr[0];
        operator delete(__ptr[0]);
      }
    }
    fclose(v5);
    *((_BYTE *)this + 48) = 0;
    if (v2)
      goto LABEL_8;
LABEL_21:
    if (v7)
      return;
    goto LABEL_8;
  }
LABEL_7:
  v2 = 1;
LABEL_8:
  if (!*((_QWORD *)this + 2))
    *((_QWORD *)this + 2) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  if (v2)
    CASettingsStorage::SaveSettings(this);
}

void sub_1B5A8E8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CACFData::~CACFData(CACFData *this)
{
  const void *v2;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v2);
  }
}

void CASettingsStorage::SaveSettings(CASettingsStorage *this)
{
  const void *v2;
  FILE *v3;
  FILE *v4;
  int v5;
  int v6;
  const UInt8 *BytePtr;
  unsigned int Length;
  int v9;
  stat v10;
  CFDataRef Data;
  char v12;

  if (!*((_BYTE *)this + 50))
  {
    v2 = (const void *)*((_QWORD *)this + 2);
    if (v2)
    {
      Data = CFPropertyListCreateData(0, v2, *((CFPropertyListFormat *)this + 3), 0, 0);
      v12 = 1;
      v3 = fopen(*(const char **)this, "w+");
      v4 = v3;
      if (v3)
      {
        v5 = fileno(v3);
        if (flock(v5, 2))
        {
          fclose(v4);
        }
        else
        {
          if (*((_WORD *)this + 4))
          {
            v6 = fileno(v4);
            fchmod(v6, *((_WORD *)this + 4));
          }
          BytePtr = CFDataGetBytePtr(Data);
          Length = CFDataGetLength(Data);
          fwrite(BytePtr, Length, 1uLL, v4);
          fflush(v4);
          v9 = fileno(v4);
          flock(v9, 8);
          fclose(v4);
          stat(*(const char **)this, &v10);
          *((_OWORD *)this + 2) = v10.st_mtimespec;
        }
      }
      CACFData::~CACFData((CACFData *)&Data);
    }
  }
}

void sub_1B5A8EA58(_Unwind_Exception *a1)
{
  uint64_t v1;

  CACFData::~CACFData((CACFData *)(v1 - 48));
  _Unwind_Resume(a1);
}

uint64_t CASettingsStorage::CopyCFTypeValue(CFDictionaryRef *this, const __CFString *a2, const void **a3, const void *a4)
{
  uint64_t result;

  CASettingsStorage::RefreshSettings((CASettingsStorage *)this);
  result = CFDictionaryGetValueIfPresent(this[2], a2, a3);
  if ((_DWORD)result)
  {
    result = (uint64_t)*a3;
    if (*a3)
      return (uint64_t)CFRetain((CFTypeRef)result);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void CASettingsStorage::SetCFTypeValue(CFMutableDictionaryRef *this, const __CFString *a2, const void *a3)
{
  CASettingsStorage::RefreshSettings((CASettingsStorage *)this);
  CFDictionarySetValue(this[2], a2, a3);
  CASettingsStorage::SaveSettings((CASettingsStorage *)this);
}

void CASettingsStorage::RemoveAllValues(CFMutableDictionaryRef *this)
{
  CASettingsStorage::RefreshSettings((CASettingsStorage *)this);
  CFDictionaryRemoveAllValues(this[2]);
  CASettingsStorage::SaveSettings((CASettingsStorage *)this);
}

uint64_t *std::unique_ptr<AMCP::Graph::Manifest_Counter>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 + 24);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void std::__shared_ptr_pointer<AMCP::Graph::Timebase_Set  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_pointer<AMCP::Graph::Timebase_Set  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<AMCP::Graph::Timebase_Set>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AMCP::Graph::Timebase_Set  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN4AMCP5Graph12Timebase_SetEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__emplace_unique_key_args<std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v25[2];
  char v26;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v15 = operator new(0x20uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v26 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v15 = *v23;
LABEL_38:
    *v23 = v15;
    goto LABEL_39;
  }
  *v15 = *v14;
  *v14 = v15;
  *(_QWORD *)(v22 + 8 * v3) = v14;
  if (*v15)
  {
    v24 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::shared_ptr<AMCP::Graph::Timebase>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<AMCP::Graph::Timebase>,void *>>>>::reset[abi:ne180100]((uint64_t)v25);
}

void sub_1B5A8EE50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<AMCP::Graph::Timebase>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<AMCP::Graph::Timebase>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest_Inventory::set_nominal_buffer_size(_QWORD *a1, int a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  std::string v9[2];
  int v10;
  std::string __p;
  uint64_t v12;
  int v13;

  if (a1)
  {
    v5 = a1;
    do
    {
      v6 = v5[12];
      v7 = *(_QWORD *)(v6 + 304);
      if (v7)
      {
        if (*(char *)(v6 + 31) < 0)
          std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(v6 + 8), *(_QWORD *)(v6 + 16));
        else
          v9[0] = *(std::string *)(v6 + 8);
        v10 = a2;
        __p = v9[0];
        memset(v9, 0, 24);
        v8 = *(_DWORD *)(v6 + 40);
        v12 = *(_QWORD *)(v6 + 32);
        v13 = v8;
        (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v7 + 104))(v7, &v10, a3);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
}

void sub_1B5A8EF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Manifest_Inventory::request_shared_buffer_for_connection(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6, std::__shared_count_vtbl **a7, int a8, int a9, int a10, int a11)
{
  double v18;
  AMCP::Log::Scope_Registry *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count_vtbl *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  __int128 v34;
  __int128 v35;
  std::__shared_count v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  uint64_t shared_weak_owners;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  uint64_t shared_owners;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  double v54;
  unint64_t *v55;
  unint64_t v56;
  AMCP::Log::Scope_Registry *v57;
  double v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  NSObject *v67;
  _opaque_pthread_t *v68;
  mach_port_t v69;
  void *exception;
  std::__shared_weak_count *v71;
  NSObject *v72;
  unint64_t *v73;
  unint64_t v74;
  _opaque_pthread_t *v75;
  mach_port_t v76;
  std::logic_error *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  std::logic_error v81;
  int v82;
  int v83;
  uint64_t v85[2];
  std::__shared_count v86;
  __int128 v87;
  _BYTE v88[32];
  std::__shared_weak_count_vtbl *v89;
  __int128 v90;
  uint64_t v91;
  _BYTE v92[24];
  uint64_t v93;
  std::string v94;
  std::logic_error v95;
  void (**v96)();
  std::logic_error v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  char v102;
  std::string v103;
  __int128 v104;
  std::string __p;
  std::__shared_weak_count_vtbl *v106;
  int v107;
  NSObject **v108;
  std::logic_error v109;
  _QWORD v110[3];
  int v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  if (*a7)
  {
    v18 = *(double *)a5;
    if (v18 != (*((double (**)(std::__shared_count_vtbl *))(*a7)->~__shared_count + 19))(*a7))
    {
      AMCP::Log::Scope_Registry::get(v19);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v103, "com.apple.coreaudio", "AMCP");
      v67 = *(NSObject **)v103.__r_.__value_.__l.__data_;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v103);
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      {
        v68 = pthread_self();
        v69 = pthread_mach_thread_np(v68);
        LODWORD(v103.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v103.__r_.__value_.__r.__words[0]) = v69;
        LOWORD(v103.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v103.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Inventory.cpp";
        WORD1(v103.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v103.__r_.__value_.__r.__words[2]) = 78;
        LOWORD(v104) = 2080;
        *(_QWORD *)((char *)&v104 + 2) = "not (clock == nullptr or format.mSampleRate == clock->get_sample_rate())";
        _os_log_error_impl(&dword_1B57BA000, v67, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Unexpected sample rate for connection", (uint8_t *)&v103, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v90);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Unexpected sample rate for connection", (uint64_t)v88);
      std::logic_error::logic_error((std::logic_error *)&v94, (const std::string *)v88);
      v94.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error((std::logic_error *)&v108, (const std::logic_error *)&v94);
      memset(v110, 0, sizeof(v110));
      v111 = -1;
      v108 = (NSObject **)off_1E69A1208;
      v109.__imp_.__imp_ = (const char *)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v103, (uint64_t)&v108);
      *((_QWORD *)&v104 + 1) = "std::shared_ptr<Manifest_Buffer> AMCP::Graph::Manifest_Inventory::request_shared_buffer_f"
                               "or_connection(std::shared_ptr<DAL::DAL_Buffer>, const Manifest_Buffer::Buffer_Identifier "
                               "&, CA::StreamDescription, Manifest_Buffer::Buffer_Style, Timebase_Ref, Buffer_Alignment, "
                               "Drift_Correction_Status, Node_Buffer_Ownership, int32_t)";
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/A"
                                                                 "MCP/IO/Graph/Manifest_Inventory.cpp";
      LODWORD(__p.__r_.__value_.__r.__words[1]) = 78;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v92);
      v97 = *(std::logic_error *)v92;
      v96 = (void (**)())off_1E69A20A0;
      v98 = *(_QWORD *)&v92[16];
      memset(v92, 0, sizeof(v92));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v103, (uint64_t)&v96);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&v103);
    }
  }
  v82 = a6;
  v83 = a8;
  v20 = AMCP::Graph::Manifest_Inventory::request_shared_buffer_for_connection(std::shared_ptr<AMCP::DAL::DAL_Buffer>,AMCP::Wire_Identifier const&,CA::StreamDescription,AMCP::Graph::Manifest_Buffer::Buffer_Style,std::shared_ptr<AMCP::Graph::Timebase>,Buffer_Alignment,Drift_Correction_Status,Node_Buffer_Ownership,int)::count++;
  v21 = (std::__shared_weak_count *)operator new(0x170uLL);
  v21->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6983A20;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v103 = *(std::string *)a4;
  *(_QWORD *)&v104 = *(_QWORD *)(a4 + 24);
  DWORD2(v104) = *(_DWORD *)(a4 + 32);
  if (*(char *)(a4 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a4 + 40), *(_QWORD *)(a4 + 48));
  else
    __p = *(std::string *)(a4 + 40);
  v106 = *(std::__shared_weak_count_vtbl **)(a4 + 64);
  v107 = *(_DWORD *)(a4 + 72);
  v23 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)v88 = *(_OWORD *)a5;
  *(_OWORD *)&v88[16] = v23;
  v89 = *(std::__shared_weak_count_vtbl **)(a5 + 32);
  v24 = a3[1];
  *(_QWORD *)&v87 = *a3;
  *((_QWORD *)&v87 + 1) = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = (uint64_t)a7[1];
  v86.__vftable = *a7;
  v86.__shared_owners_ = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v21[1].__vftable = (std::__shared_weak_count_vtbl *)v20;
  *(_OWORD *)&v21[1].__shared_owners_ = *(_OWORD *)&v103.__r_.__value_.__l.__data_;
  v30 = (std::__shared_weak_count_vtbl *)v103.__r_.__value_.__r.__words[2];
  memset(&v103, 0, sizeof(v103));
  v31 = v104;
  v21[2].__vftable = v30;
  v21[2].__shared_owners_ = v31;
  LODWORD(v21[2].__shared_weak_owners_) = DWORD2(v104);
  v32 = __p.__r_.__value_.__r.__words[2];
  v21[3].std::__shared_count = *(std::__shared_count *)&__p.__r_.__value_.__l.__data_;
  memset(&__p, 0, sizeof(__p));
  v33 = v106;
  LODWORD(v21[4].__shared_owners_) = v107;
  v21[3].__shared_weak_owners_ = v32;
  v21[4].__vftable = v33;
  v34 = *(_OWORD *)v88;
  v35 = *(_OWORD *)&v88[16];
  v21[6].__vftable = v89;
  *(_OWORD *)&v21[4].__shared_weak_owners_ = v34;
  *(_OWORD *)&v21[5].__shared_owners_ = v35;
  v36 = v86;
  *(std::__shared_count *)((char *)v21 + 152) = v86;
  v86 = (std::__shared_count)0;
  LODWORD(v21[7].__vftable) = a9;
  HIDWORD(v21[7].__vftable) = a10;
  LODWORD(v21[7].__shared_owners_) = v82;
  HIDWORD(v21[7].__shared_owners_) = v83;
  v21[7].__shared_weak_owners_ = 0;
  if (v36.__shared_owners_)
  {
    v37 = (unint64_t *)(v36.__shared_owners_ + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v21[9].std::__shared_count = v36;
  LODWORD(v21[8].__vftable) = 2;
  v21[8].__shared_owners_ = 0;
  v21[8].__shared_weak_owners_ = 0;
  v39 = *(_OWORD *)&v21[6].__shared_owners_;
  shared_weak_owners = v21[6].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v41 = (unint64_t *)(shared_weak_owners + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  LODWORD(v21[9].__shared_weak_owners_) = 2;
  v21[10].__vftable = 0;
  v21[10].__shared_owners_ = 0;
  *(_OWORD *)&v21[10].__shared_weak_owners_ = v39;
  v43 = *(_OWORD *)&v21[6].__shared_owners_;
  v44 = v21[6].__shared_weak_owners_;
  if (v44)
  {
    v45 = (unint64_t *)(v44 + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  LODWORD(v21[11].__shared_owners_) = 2;
  v21[11].__shared_weak_owners_ = 0;
  v21[12].__vftable = 0;
  *(_OWORD *)&v21[12].__shared_owners_ = v43;
  v47 = v87;
  shared_owners = v21[6].__shared_owners_;
  v48 = (std::__shared_weak_count *)v21[6].__shared_weak_owners_;
  v21[13].__vftable = (std::__shared_weak_count_vtbl *)-1;
  *(_OWORD *)&v21[13].__shared_weak_owners_ = v47;
  v21[13].__shared_owners_ = 0;
  v87 = 0uLL;
  LODWORD(v21[14].__shared_owners_) = a11;
  v21[14].__shared_weak_owners_ = 0;
  v21[15].__vftable = 0;
  if (v48)
  {
    v50 = (unint64_t *)&v48->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    do
      v52 = __ldaxr(v50);
    while (__stlxr(v52 - 1, v50));
    if (v52)
    {
      if (!shared_owners)
        goto LABEL_43;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      if (!shared_owners)
        goto LABEL_43;
    }
    v54 = *(double *)&v21[4].__shared_weak_owners_;
    shared_owners = v21[6].__shared_owners_;
    v53 = (std::__shared_weak_count *)v21[6].__shared_weak_owners_;
    if (v53)
    {
      v55 = (unint64_t *)&v53->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
  }
  else
  {
    if (!shared_owners)
      goto LABEL_43;
    v53 = 0;
    v54 = *(double *)&v21[4].__shared_weak_owners_;
  }
  v58 = (*(double (**)(uint64_t))(*(_QWORD *)shared_owners + 152))(shared_owners);
  if (v53)
  {
    v59 = (unint64_t *)&v53->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v54 != v58)
  {
    AMCP::Log::Scope_Registry::get(v57);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v108, "com.apple.coreaudio", "AMCP");
    v71 = (std::__shared_weak_count *)v109.__vftable;
    v72 = *v108;
    if (v109.__vftable)
    {
      v73 = (unint64_t *)&v109.~logic_error_0;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
    {
      v75 = pthread_self();
      v76 = pthread_mach_thread_np(v75);
      LODWORD(v108) = 67109890;
      HIDWORD(v108) = v76;
      LOWORD(v109.__vftable) = 2080;
      *(std::logic_error_vtbl **)((char *)&v109.__vftable + 2) = (std::logic_error_vtbl *)"Manifest_Buffer.cpp";
      WORD1(v109.__imp_.__imp_) = 1024;
      HIDWORD(v109.__imp_.__imp_) = 51;
      LOWORD(v110[0]) = 2080;
      *(_QWORD *)((char *)v110 + 2) = "not (m_format.mSampleRate == get_timebase()->get_sample_rate())";
      _os_log_error_impl(&dword_1B57BA000, v72, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Unexpected sample rate for connection", (uint8_t *)&v108, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v102);
    v77 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Unexpected sample rate for connection", (uint64_t)&v94);
    std::logic_error::logic_error(&v95, &v94);
    v78 = MEMORY[0x1E0DE5018];
    v95.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v96, &v95);
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v101 = -1;
    v96 = off_1E69A1208;
    v97.__imp_.__imp_ = (const char *)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v108, (uint64_t)&v96);
    v110[1] = "AMCP::Graph::Manifest_Buffer::Manifest_Buffer(size_t, Buffer_Identifier, CA::StreamDescription, std::share"
              "d_ptr<DAL::DAL_Buffer>, Buffer_Style, Timebase_Ref, Buffer_Alignment, Drift_Correction_Status, Node_Buffer"
              "_Ownership, int32_t)";
    v110[2] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    v111 = 51;
    std::vector<void *>::vector(&v90);
    v79 = backtrace((void **)v90, (*((_QWORD *)&v90 + 1) - (_QWORD)v90) >> 3);
    std::vector<void *>::resize((char **)&v90, v79);
    *(_OWORD *)&v92[8] = v90;
    *(_QWORD *)v92 = off_1E69A20A0;
    v93 = v91;
    v90 = 0uLL;
    v91 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v108, (uint64_t)v92);
    v77[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(v77, (const std::logic_error *)&v108);
    v77->__vftable = (std::logic_error_vtbl *)(v78 + 16);
    v77[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v80 = v110[0];
    v77[1].__imp_.__imp_ = (const char *)v110[0];
    if (v80)
      (*(void (**)(uint64_t))(*(_QWORD *)v80 + 24))(v80);
    v81 = *(std::logic_error *)&v110[1];
    LODWORD(v77[3].__vftable) = v111;
    v77[2] = v81;
    v77->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    v77[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    v77[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
LABEL_43:
  if (v86.__shared_owners_)
  {
    v61 = (unint64_t *)(v86.__shared_owners_ + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v86.__shared_owners_ + 16))(v86.__shared_owners_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v86.__shared_owners_);
    }
  }
  if (*((_QWORD *)&v87 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v87 + 1) + 16))(*((_QWORD *)&v87 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v87 + 1));
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  *a1 = v21 + 1;
  a1[1] = v21;
  v85[0] = (uint64_t)&v21[1];
  v85[1] = (uint64_t)v21;
  do
    v65 = __ldxr(p_shared_owners);
  while (__stxr(v65 + 1, p_shared_owners));
  AMCP::Graph::Manifest_Inventory::add_buffer(a2, v85);
  do
    v66 = __ldaxr(p_shared_owners);
  while (__stlxr(v66 - 1, p_shared_owners));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
}

void sub_1B5A8F898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p)
{
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v55;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v50 + 352);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v52);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v51);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v50 + 256);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v53);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v49);
  if (*(char *)(v50 + 95) < 0)
    operator delete(*(void **)(v50 + 72));
  if (*(char *)(v50 + 55) < 0)
    operator delete(*(void **)(v50 + 32));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  AMCP::Wire_Identifier::~Wire_Identifier(&__p);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v50);
  operator delete(v55);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest_Inventory::add_buffer(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::string v49;
  uint64_t v50;
  int v51;
  void *__p[2];
  uint64_t v53;
  uint64_t v54;
  int v55;
  _QWORD v56[2];
  char v57;

  AMCP::Graph::Manifest_Buffer::get_buffer_id(&v49, *a2);
  v5 = std::hash<AMCP::Wire_Identifier>::operator()((uint64_t)&v49);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      v2 = v5;
      if (v5 >= v7)
        v2 = v5 % v7;
    }
    else
    {
      v2 = (v7 - 1) & v5;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)(a1 + 8) + 8 * v2);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v6)
        {
          if (std::equal_to<AMCP::Wire_Identifier>::operator()[abi:ne180100]((uint64_t)(i + 2), (unsigned __int8 **)&v49))
          {
            goto LABEL_74;
          }
        }
        else
        {
          if (v9 > 1)
          {
            if (v12 >= v7)
              v12 %= v7;
          }
          else
          {
            v12 &= v7 - 1;
          }
          if (v12 != v2)
            break;
        }
      }
    }
  }
  v13 = (char *)operator new(0x70uLL);
  v14 = (_QWORD *)(a1 + 24);
  v56[0] = v13;
  v56[1] = a1 + 24;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v6;
  *((_OWORD *)v13 + 1) = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = 0uLL;
  v15 = v50;
  *((_QWORD *)v13 + 4) = *((_QWORD *)&v49.__r_.__value_.__l + 2);
  *((_QWORD *)v13 + 5) = v15;
  *((_DWORD *)v13 + 12) = v51;
  *(_OWORD *)(v13 + 56) = *(_OWORD *)__p;
  v49.__r_.__value_.__r.__words[2] = 0;
  __p[0] = 0;
  __p[1] = 0;
  v16 = v53;
  v17 = v54;
  v53 = 0;
  *((_QWORD *)v13 + 9) = v16;
  *((_QWORD *)v13 + 10) = v17;
  *((_DWORD *)v13 + 22) = v55;
  *((_QWORD *)v13 + 12) = 0;
  *((_QWORD *)v13 + 13) = 0;
  v57 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 32) + 1);
  v19 = *(float *)(a1 + 40);
  if (!v7 || (float)(v19 * (float)v7) < v18)
  {
    v20 = 1;
    if (v7 >= 3)
      v20 = (v7 & (v7 - 1)) != 0;
    v21 = v20 | (2 * v7);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *(_QWORD *)(a1 + 16);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
      if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          *(int8x8_t *)(a1 + 16) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = (_QWORD *)*v14;
          if (*v14)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v28) = v14;
            v33 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v28)
                {
                  v35 = *(_QWORD *)(a1 + 8);
                  if (!*(_QWORD *)(v35 + 8 * v34))
                  {
                    *(_QWORD *)(v35 + 8 * v34) = v27;
                    goto LABEL_55;
                  }
                  *v27 = *v33;
                  *v33 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v34);
                  **(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v34) = v33;
                  v33 = v27;
                }
                v34 = v28;
LABEL_55:
                v27 = v33;
                v33 = (_QWORD *)*v33;
                v28 = v34;
              }
              while (v33);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v46 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;
        if (v46)
          operator delete(v46);
        v7 = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v2 = v6 % v7;
      else
        v2 = v6;
    }
    else
    {
      v2 = (v7 - 1) & v6;
    }
  }
  v36 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v2);
  i = (_QWORD *)v56[0];
  if (v36)
  {
    *(_QWORD *)v56[0] = *v36;
LABEL_72:
    *v36 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v56[0] = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = i;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v2) = v14;
  if (*i)
  {
    v37 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v37 >= v7)
        v37 %= v7;
    }
    else
    {
      v37 &= v7 - 1;
    }
    v36 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v37);
    goto LABEL_72;
  }
LABEL_73:
  v56[0] = 0;
  ++*(_QWORD *)(a1 + 32);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>>>>::reset[abi:ne180100]((uint64_t)v56);
LABEL_74:
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](i + 12, *a2, a2[1]);
  if (SHIBYTE(v53) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  v38 = *(_QWORD *)(a1 + 80);
  v39 = *(_QWORD *)(*a2 + 128);
  v40 = *(std::__shared_weak_count **)(*a2 + 136);
  v47 = v39;
  v48 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(p_shared_owners);
    while (__stxr(v42 + 1, p_shared_owners));
  }
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__emplace_unique_key_args<std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase>>(v38, v39, (uint64_t)&v47);
  v43 = v48;
  if (v48)
  {
    v44 = (unint64_t *)&v48->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_1B5A90058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>>>>::reset[abi:ne180100](v4 - 88);
  AMCP::Wire_Identifier::~Wire_Identifier((void **)va);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest_Buffer::get_buffer_id(std::string *this, uint64_t a2)
{
  std::string *v4;

  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    *this = *(std::string *)(a2 + 8);
  this[1].__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 32);
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 40);
  v4 = (std::string *)((char *)this + 40);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 48);
    this[2].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 64);
  }
  this[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 72);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 80);
}

void sub_1B5A90124(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6983A20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6983A20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Buffer>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_DWORD *)(a1 + 172) == 2)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 336);
    *(_QWORD *)(a1 + 328) = 0;
    *(_QWORD *)(a1 + 336) = 0;
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 352);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 328);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 296);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 256);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 216);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 152);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void AMCP::Graph::Manifest_Inventory::take_power_assertions(AMCP::Graph::Manifest_Inventory *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t **i;
  unint64_t *v6;
  unint64_t v7;

  if (!*(_BYTE *)this)
  {
    v1 = *((_QWORD *)this + 10);
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    for (i = *(uint64_t ***)(v1 + 16); i; i = (uint64_t **)*i)
      (*(void (**)(uint64_t *))(*i[2] + 232))(i[2]);
    if (v2)
    {
      v6 = (unint64_t *)&v2->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
}

void AMCP::Graph::Manifest_Inventory::begin_processing(AMCP::Graph::Manifest_Inventory *this, int a2)
{
  AMCP::Graph::Manifest_Inventory *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  std::string v7[2];
  int v8;
  std::string __p;
  uint64_t v10;
  int v11;

  if (this)
  {
    v3 = this;
    do
    {
      v4 = *((_QWORD *)v3 + 12);
      v5 = *(_QWORD *)(v4 + 304);
      if (v5)
      {
        if (*(char *)(v4 + 31) < 0)
          std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(v4 + 8), *(_QWORD *)(v4 + 16));
        else
          v7[0] = *(std::string *)(v4 + 8);
        v8 = a2;
        __p = v7[0];
        memset(v7, 0, 24);
        v6 = *(_DWORD *)(v4 + 40);
        v10 = *(_QWORD *)(v4 + 32);
        v11 = v6;
        (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v5 + 184))(v5, &v8, *(unsigned int *)(v4 + 156));
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v3 = *(AMCP::Graph::Manifest_Inventory **)v3;
    }
    while (v3);
  }
}

void sub_1B5A903B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Manifest_Inventory::begin_cycle(_QWORD *a1, uint64_t *a2, float *a3)
{
  uint64_t **i;
  _QWORD *j;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _BYTE v29[32];
  std::__shared_weak_count *v30;
  _BYTE v31[32];
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  for (i = *(uint64_t ***)(a1[10] + 16); i; i = (uint64_t **)*i)
    (*(void (**)(uint64_t *))(*i[2] + 88))(i[2]);
  for (j = (_QWORD *)a1[3]; j; j = (_QWORD *)*j)
  {
    v8 = j[12];
    v10 = *(_QWORD *)(v8 + 128);
    v9 = *(std::__shared_weak_count **)(v8 + 136);
    v33 = v10;
    v34 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)v31, (AMCP::DAL::DAL_Time_Delta *)a3, &v33);
    AMCP::Graph::Manifest_Counter::calculate_buffer_start((AMCP::DAL::DAL_Time *)v29, a1[8], &v33, *(unsigned int *)(j[12] + 156), (AMCP::DAL::DAL_Time_Delta *)v31, a3[10]);
    v13 = *a2;
    if (*a2)
    {
      v14 = *(_QWORD *)j[12];
      vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v29));
      AMCP::Graph::Manifest_Log::add_message(v13, 4, "Manifest_Buffer(%ld)::begin_cycle: cycle anchor: %llu  %p", v15, v16, v17, v18, v19, v14);
    }
    v20 = v30;
    if (v30)
    {
      v21 = (unint64_t *)&v30->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v32;
    if (v32)
    {
      v24 = (unint64_t *)&v32->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v34;
    if (v34)
    {
      v27 = (unint64_t *)&v34->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
}

void sub_1B5A90584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v13 - 80);
  _Unwind_Resume(a1);
}

double AMCP::Graph::Manifest_Inventory::end_cycle(AMCP::Log::Scope_Registry *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t **i;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  BOOL v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v49;
  NSObject *v50;
  unint64_t *v51;
  unint64_t v52;
  _opaque_pthread_t *v53;
  mach_port_t v54;
  std::logic_error *exception;
  uint64_t v56;
  int v57;
  uint64_t v58;
  std::logic_error v59;
  __int128 v60;
  uint64_t v61;
  uint64_t (**v62)();
  __int128 v63;
  uint64_t v64;
  std::string v65;
  std::logic_error v66;
  std::logic_error v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  char v73;
  _BYTE buf[24];
  _BYTE v75[24];
  int v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)*((_QWORD *)a1 + 14);
  v6 = (uint64_t *)*((_QWORD *)a1 + 15);
  while (v5 != v6)
  {
    v8 = *v5;
    v5 += 2;
    AMCP::IO_Core::Device_Connection::end_cycle(v8, a2, (AMCP::DAL::DAL_Time_Delta *)a3);
  }
  for (i = (uint64_t **)*((_QWORD *)a1 + 3); i; i = (uint64_t **)*i)
    AMCP::Graph::Manifest_Buffer::advance((AMCP::Graph::Manifest_Buffer *)i[12]);
  v10 = *((_QWORD *)a1 + 10);
  if (!*(_QWORD *)(v10 + 24))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v49 = *(std::__shared_weak_count **)&buf[8];
    v50 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v51 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      v53 = pthread_self();
      v54 = pthread_mach_thread_np(v53);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v54;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Timebase_Set.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 32;
      *(_WORD *)v75 = 2080;
      *(_QWORD *)&v75[2] = "not (not m_timebases.empty())";
      _os_log_error_impl(&dword_1B57BA000, v50, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to run an manifest with no timebases", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v73);
    exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to run an manifest with no timebases", (uint64_t)&v65);
    std::logic_error::logic_error(&v66, &v65);
    v56 = MEMORY[0x1E0DE5018];
    v66.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v67, &v66);
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v72 = -1;
    v67.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v68 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v67);
    *(_QWORD *)&v75[8] = "void AMCP::Graph::Timebase_Set::end_cycle(const DAL::DAL_Time_Delta &) const";
    *(_QWORD *)&v75[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Timebase_Set.cpp";
    v76 = 32;
    std::vector<void *>::vector(&v60);
    v57 = backtrace((void **)v60, (*((_QWORD *)&v60 + 1) - (_QWORD)v60) >> 3);
    std::vector<void *>::resize((char **)&v60, v57);
    v63 = v60;
    v64 = v61;
    v60 = 0uLL;
    v61 = 0;
    v62 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v62);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(exception, (const std::logic_error *)buf);
    exception->__vftable = (std::logic_error_vtbl *)(v56 + 16);
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v58 = *(_QWORD *)v75;
    exception[1].__imp_.__imp_ = *(const char **)v75;
    if (v58)
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 24))(v58);
    v59 = *(std::logic_error *)&v75[8];
    LODWORD(exception[3].__vftable) = v76;
    exception[2] = v59;
    exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  v11 = *(_QWORD **)(v10 + 16);
  if (v11)
  {
    while (1)
    {
      *(_OWORD *)buf = *(_OWORD *)a3;
      v12 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)&buf[16] = *(_QWORD *)(a3 + 16);
      *(_QWORD *)v75 = v12;
      v13 = *(std::__shared_weak_count **)(a3 + 32);
      *(_QWORD *)&v75[8] = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = v11[2];
      v18 = (v17 | v12) == 0;
      if (!v17 || !v12)
        goto LABEL_34;
      v19 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
      v21 = v19[23];
      if ((v21 & 0x80u) == 0)
        v22 = v19[23];
      else
        v22 = *((_QWORD *)v19 + 1);
      v23 = *(unsigned __int8 *)(v20 + 23);
      v24 = (char)v23;
      if ((v23 & 0x80u) != 0)
        v23 = *(_QWORD *)(v20 + 8);
      if (v22 != v23)
      {
        v18 = 0;
        if (v13)
          goto LABEL_35;
        goto LABEL_39;
      }
      v25 = v24 >= 0 ? (unsigned __int8 *)v20 : *(unsigned __int8 **)v20;
      if ((v21 & 0x80) != 0)
        break;
      if (v19[23])
      {
        v26 = v21 - 1;
        do
        {
          v28 = *v19++;
          v27 = v28;
          v30 = *v25++;
          v29 = v30;
          v32 = v26-- != 0;
          v18 = v27 == v29;
        }
        while (v27 == v29 && v32);
LABEL_34:
        if (v13)
          goto LABEL_35;
        goto LABEL_39;
      }
      v18 = 1;
      if (v13)
      {
LABEL_35:
        v33 = (unint64_t *)&v13->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
LABEL_39:
      if (!v18)
      {
        if ((*(_BYTE *)a3 & 1) == 0)
          AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)a3);
        v35 = *(_QWORD *)(a3 + 16);
        v36 = *((_OWORD *)v11 + 1);
        v37 = v11[3];
        if (v37)
        {
          v38 = (unint64_t *)(v37 + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        *(_DWORD *)buf = 1;
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)&buf[16] = v35;
        v40 = *(std::__shared_weak_count **)&v75[8];
        *(_OWORD *)v75 = v36;
        if (v40)
        {
          v41 = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
      v43 = v11[2];
      if ((buf[0] & 2) == 0)
        AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
      (*(void (**)(uint64_t, double))(*(_QWORD *)v43 + 96))(v43, *(double *)&buf[8]);
      v44 = *(std::__shared_weak_count **)&v75[8];
      if (*(_QWORD *)&v75[8])
      {
        v45 = (unint64_t *)(*(_QWORD *)&v75[8] + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v11 = (_QWORD *)*v11;
      if (!v11)
        goto LABEL_61;
    }
    v18 = memcmp(*(const void **)v19, v25, *((_QWORD *)v19 + 1)) == 0;
    goto LABEL_34;
  }
LABEL_61:
  v47 = *((_QWORD *)a1 + 8);
  if ((*(_BYTE *)a3 & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)a3);
  return AMCP::Graph::Manifest_Counter::advance(v47, *(double *)(a3 + 8));
}

void AMCP::Graph::Manifest_Inventory::release_power_assertions(AMCP::Graph::Manifest_Inventory *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t **i;
  unint64_t *v6;
  unint64_t v7;

  if (!*(_BYTE *)this)
  {
    v1 = *((_QWORD *)this + 10);
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    for (i = *(uint64_t ***)(v1 + 16); i; i = (uint64_t **)*i)
      (*(void (**)(uint64_t *))(*i[2] + 240))(i[2]);
    if (v2)
    {
      v6 = (unint64_t *)&v2->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
}

void AMCP::Graph::Manifest_Inventory::anchor_time(AMCP::Log::Scope_Registry *a1, int a2, float *a3, AMCP::DAL::DAL_Time *a4)
{
  uint64_t v6;
  std::logic_error_vtbl *i;
  char *imp;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  const char *v18;
  std::logic_error_vtbl *v19;
  std::logic_error_vtbl *v20;
  __int128 v21;
  std::logic_error v22;
  char *v23;
  void (__cdecl *v24)(std::logic_error *__hidden);
  char *v25;
  void (__cdecl *v26)(std::logic_error *__hidden);
  uint64_t v27;
  void (__cdecl *v28)(std::logic_error *__hidden);
  const char *j;
  std::logic_error_vtbl *k;
  void (__cdecl *v31)(std::logic_error *__hidden);
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  char v35;
  AMCP::Log::Scope_Registry *v36;
  void (__cdecl *v37)(std::logic_error *__hidden);
  void (__cdecl *v38)(std::logic_error *__hidden);
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  _QWORD *m;
  uint64_t **v65;
  uint64_t **n;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t *v74;
  std::__shared_weak_count *v75;
  os_unfair_lock_s *v76;
  os_unfair_lock_s *v77;
  double sample_time;
  uint64_t *v79;
  os_unfair_lock_s *v80;
  char v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *size;
  NSObject *v93;
  unint64_t *v94;
  unint64_t v95;
  _opaque_pthread_t *v96;
  mach_port_t v97;
  void *v98;
  int v99;
  NSObject *v100;
  _opaque_pthread_t *v101;
  mach_port_t v102;
  void *v103;
  NSObject *v104;
  _opaque_pthread_t *v105;
  mach_port_t v106;
  void *v107;
  NSObject *v108;
  _opaque_pthread_t *v109;
  mach_port_t v110;
  void *exception;
  AMCP::Log::Scope_Registry *v113;
  AMCP::DAL::DAL_Time_Delta *v114[2];
  std::__shared_weak_count *v115;
  std::logic_error v116;
  char *v117;
  __int128 v118;
  uint64_t (***v119)();
  std::string v120;
  std::logic_error v121;
  std::string v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  uint64_t v125;
  int v126;
  char v127;
  std::string v128;
  __int128 v129;
  const char *v130;
  int v131;
  uint64_t (**v132)();
  __int128 v133;
  uint64_t (***v134)();
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(*((_QWORD *)a1 + 10) + 24))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v128, "com.apple.coreaudio", "AMCP");
    v108 = *(NSObject **)v128.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v128);
    if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
    {
      v109 = pthread_self();
      v110 = pthread_mach_thread_np(v109);
      LODWORD(v128.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v128.__r_.__value_.__r.__words[0]) = v110;
      LOWORD(v128.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v128.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Inventory.cpp";
      WORD1(v128.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v128.__r_.__value_.__r.__words[2]) = 291;
      LOWORD(v129) = 2080;
      *(_QWORD *)((char *)&v129 + 2) = "not (m_timebases->size() != 0)";
      _os_log_error_impl(&dword_1B57BA000, v108, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to run an manifest with no timebases", (uint8_t *)&v128, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v121);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to run an manifest with no timebases", (uint64_t)&v120);
    std::logic_error::logic_error(&v116, &v120);
    v116.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v122, &v116);
    v123 = 0;
    v124 = 0;
    v125 = 0;
    v126 = -1;
    v122.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v122.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v128, (uint64_t)&v122);
    *((_QWORD *)&v129 + 1) = "void AMCP::Graph::Manifest_Inventory::anchor_time(Object_ID, const Manifest_Execution_Conte"
                             "xt &, const DAL::DAL_Time &) const";
    v130 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
    v131 = 291;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v118);
    v133 = v118;
    v132 = off_1E69A20A0;
    v134 = v119;
    v118 = 0uLL;
    v119 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v128, (uint64_t)&v132);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&v128);
  }
  v6 = *((_QWORD *)a1 + 8);
  if (!*(_BYTE *)v6)
    AMCP::Graph::Manifest_Counter::start(v6, a4);
  v116.__vftable = 0;
  v116.__imp_.__imp_ = 0;
  v117 = 0;
  i = (std::logic_error_vtbl *)*((_QWORD *)a1 + 3);
  v113 = a1;
  if (i)
  {
    imp = 0;
    do
    {
      v9 = *(_OWORD *)&i[4].~logic_error;
      *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v9;
      if (*((_QWORD *)&v9 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        imp = (char *)v116.__imp_.__imp_;
      }
      if (imp >= v117)
      {
        *(_OWORD *)v114 = v9;
        v12 = (imp - (char *)v116.__vftable) >> 4;
        if ((unint64_t)(v12 + 1) >> 60)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v13 = (v117 - (char *)v116.__vftable) >> 3;
        if (v13 <= v12 + 1)
          v13 = v12 + 1;
        if ((unint64_t)(v117 - (char *)v116.__vftable) >= 0x7FFFFFFFFFFFFFF0)
          v14 = 0xFFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        *((_QWORD *)&v129 + 1) = &v117;
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v14);
        v17 = &v15[16 * v12];
        *(_OWORD *)v17 = *(_OWORD *)v114;
        v19 = v116.__vftable;
        v18 = v116.__imp_.__imp_;
        if (v116.__imp_.__imp_ == (const char *)v116.__vftable)
        {
          v22 = (std::logic_error)vdupq_n_s64((unint64_t)v116.__imp_.__imp_);
          v20 = (std::logic_error_vtbl *)&v15[16 * v12];
        }
        else
        {
          v20 = (std::logic_error_vtbl *)&v15[16 * v12];
          do
          {
            v21 = *((_OWORD *)v18 - 1);
            v18 -= 16;
            *(_OWORD *)&v20[-1].~logic_error_0 = v21;
            v20 = (std::logic_error_vtbl *)((char *)v20 - 16);
            *(_QWORD *)v18 = 0;
            *((_QWORD *)v18 + 1) = 0;
          }
          while (v18 != (const char *)v19);
          v22 = v116;
        }
        imp = v17 + 16;
        v116.__vftable = v20;
        v116.__imp_.__imp_ = v17 + 16;
        *(std::logic_error *)&v128.__r_.__value_.__r.__words[1] = v22;
        v23 = v117;
        v117 = &v15[16 * v16];
        *(_QWORD *)&v129 = v23;
        v128.__r_.__value_.__r.__words[0] = (std::string::size_type)v22.__vftable;
        v6 = std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v128);
      }
      else
      {
        *(_OWORD *)imp = v9;
        imp += 16;
      }
      v116.__imp_.__imp_ = imp;
      i = (std::logic_error_vtbl *)i->~logic_error;
    }
    while (i);
    for (i = v116.__vftable; ; i = (std::logic_error_vtbl *)((char *)i + 16))
    {
      if (i == (std::logic_error_vtbl *)imp)
      {
        i = (std::logic_error_vtbl *)imp;
        goto LABEL_35;
      }
LABEL_27:
      v24 = i->~logic_error;
      if (!*((_QWORD *)i->~logic_error + 37))
        break;
    }
    v25 = imp - 16;
    while (v25 != (char *)i)
    {
      imp = v25;
      v27 = *(_QWORD *)v25;
      v25 -= 16;
      v26 = (void (__cdecl *)(std::logic_error *__hidden))v27;
      if (*(_QWORD *)(v27 + 296))
      {
        i->~logic_error = v26;
        *((_QWORD *)v25 + 2) = v24;
        v28 = i->~logic_error_0;
        i->~logic_error_0 = (void (__cdecl *)(std::logic_error *__hidden))*((_QWORD *)v25 + 3);
        *((_QWORD *)v25 + 3) = v28;
        i = (std::logic_error_vtbl *)((char *)i + 16);
        if (i != (std::logic_error_vtbl *)imp)
          goto LABEL_27;
        break;
      }
    }
  }
LABEL_35:
  if (i != (std::logic_error_vtbl *)v116.__imp_.__imp_)
  {
    for (j = (const char *)i; j != v116.__imp_.__imp_; j += 16)
    {
      for (k = v116.__vftable; ; k = (std::logic_error_vtbl *)((char *)k + 16))
      {
        if (k == i)
          goto LABEL_69;
        v31 = k->~logic_error;
        if (!*((_QWORD *)k->~logic_error + 37))
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v128, "com.apple.coreaudio", "AMCP");
          size = (std::__shared_weak_count *)v128.__r_.__value_.__l.__size_;
          v93 = *(NSObject **)v128.__r_.__value_.__l.__data_;
          if (v128.__r_.__value_.__l.__size_)
          {
            v94 = (unint64_t *)(v128.__r_.__value_.__l.__size_ + 8);
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
          {
            v96 = pthread_self();
            v97 = pthread_mach_thread_np(v96);
            LODWORD(v128.__r_.__value_.__l.__data_) = 67109890;
            HIDWORD(v128.__r_.__value_.__r.__words[0]) = v97;
            LOWORD(v128.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v128.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Inventory.cpp";
            WORD1(v128.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(v128.__r_.__value_.__r.__words[2]) = 226;
            LOWORD(v129) = 2080;
            *(_QWORD *)((char *)&v129 + 2) = "not ((*i)->is_processing())";
            _os_log_error_impl(&dword_1B57BA000, v93, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s All peers must be running", (uint8_t *)&v128, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v127);
          v98 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"All peers must be running", (uint64_t)&v120);
          std::logic_error::logic_error(&v121, &v120);
          v121.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)&v122, &v121);
          v123 = 0;
          v124 = 0;
          v125 = 0;
          v126 = -1;
          v122.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
          v122.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v128, (uint64_t)&v122);
          *((_QWORD *)&v129 + 1) = "std::vector<std::shared_ptr<Manifest_Buffer>>::iterator AMCP::Graph::find_peer(const "
                                   "std::shared_ptr<Manifest_Buffer> &, std::vector<std::shared_ptr<Manifest_Buffer>>::it"
                                   "erator, std::vector<std::shared_ptr<Manifest_Buffer>>::iterator)";
          v130 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
          v131 = 226;
          std::vector<void *>::vector(&v118);
          v99 = backtrace((void **)v118, (*((_QWORD *)&v118 + 1) - (_QWORD)v118) >> 3);
          std::vector<void *>::resize((char **)&v118, v99);
          v133 = v118;
          v132 = off_1E69A20A0;
          v134 = v119;
          v118 = 0uLL;
          v119 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v128, (uint64_t)&v132);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v98, (uint64_t)&v128);
        }
        if (*((char *)v31 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v128, *((const std::string::value_type **)v31 + 1), *((_QWORD *)v31 + 2));
        }
        else
        {
          v32 = *(_OWORD *)((char *)v31 + 8);
          v128.__r_.__value_.__r.__words[2] = *((_QWORD *)v31 + 3);
          *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v32;
        }
        *(_QWORD *)&v129 = *((_QWORD *)v31 + 4);
        DWORD2(v129) = *((_DWORD *)v31 + 10);
        v33 = *(_QWORD *)j;
        if (*(char *)(*(_QWORD *)j + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v122, *(const std::string::value_type **)(v33 + 8), *(_QWORD *)(v33 + 16));
        }
        else
        {
          v34 = *(_OWORD *)(v33 + 8);
          v122.__r_.__value_.__r.__words[2] = *(_QWORD *)(v33 + 24);
          *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v34;
        }
        v123 = *(_QWORD *)(v33 + 32);
        LODWORD(v124) = *(_DWORD *)(v33 + 40);
        v132 = (uint64_t (**)())&v128;
        *(_QWORD *)&v133 = &v129;
        *((_QWORD *)&v133 + 1) = (char *)&v129 + 8;
        v120.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
        v120.__r_.__value_.__l.__size_ = (std::string::size_type)&v123;
        v120.__r_.__value_.__r.__words[2] = (std::string::size_type)&v124;
        v6 = std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v132, (unsigned __int8 ***)&v120);
        v35 = v6;
        if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v122.__r_.__value_.__l.__data_);
        if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v128.__r_.__value_.__l.__data_);
        if ((v35 & 1) != 0)
          break;
      }
      if (k == i)
      {
LABEL_69:
        v52 = *(_QWORD *)j;
        if (*(_QWORD *)(*(_QWORD *)j + 296))
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v128, "com.apple.coreaudio", "AMCP");
          v100 = *(NSObject **)v128.__r_.__value_.__l.__data_;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v128);
          if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
          {
            v101 = pthread_self();
            v102 = pthread_mach_thread_np(v101);
            LODWORD(v128.__r_.__value_.__l.__data_) = 67109890;
            HIDWORD(v128.__r_.__value_.__r.__words[0]) = v102;
            LOWORD(v128.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v128.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
            WORD1(v128.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(v128.__r_.__value_.__r.__words[2]) = 135;
            LOWORD(v129) = 2080;
            *(_QWORD *)((char *)&v129 + 2) = "not (not is_processing())";
            _os_log_error_impl(&dword_1B57BA000, v100, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Don't call anchor_to_timebase_anchor on buffers that are currently processing", (uint8_t *)&v128, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v127);
          v103 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Don't call anchor_to_timebase_anchor on buffers that are currently processing", (uint64_t)&v120);
          std::logic_error::logic_error(&v121, &v120);
          v121.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)&v122, &v121);
          v123 = 0;
          v124 = 0;
          v125 = 0;
          v126 = -1;
          v122.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
          v122.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v128, (uint64_t)&v122);
          *((_QWORD *)&v129 + 1) = "void AMCP::Graph::Manifest_Buffer::anchor_to_timebase_anchor(AMCP::Object_ID, Manifes"
                                   "t_Counter &, const Manifest_Execution_Context &)";
          v130 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          v131 = 135;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v118);
          v133 = v118;
          v132 = off_1E69A20A0;
          v134 = v119;
          v118 = 0uLL;
          v119 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v128, (uint64_t)&v132);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v103, (uint64_t)&v128);
        }
        v53 = *((_QWORD *)v113 + 8);
        v54 = *(_QWORD *)(v52 + 136);
        v132 = *(uint64_t (***)())(v52 + 128);
        *(_QWORD *)&v133 = v54;
        if (v54)
        {
          v55 = (unint64_t *)(v54 + 8);
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)&v128, (AMCP::DAL::DAL_Time_Delta *)a3, (uint64_t *)&v132);
        AMCP::Graph::Manifest_Counter::calculate_buffer_start((AMCP::DAL::DAL_Time *)&v122, v53, (uint64_t *)&v132, *(unsigned int *)(v52 + 156), (AMCP::DAL::DAL_Time_Delta *)&v128, a3[10]);
        AMCP::Graph::Manifest_Buffer::anchor_time(v52, (AMCP::DAL::DAL_Time *)&v122, a2, v53, (AMCP::DAL::DAL_Time_Delta *)a3);
        v57 = v124;
        if (v124)
        {
          p_shared_owners = (unint64_t *)&v124->__shared_owners_;
          do
            v59 = __ldaxr(p_shared_owners);
          while (__stlxr(v59 - 1, p_shared_owners));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
        if (*((_QWORD *)&v129 + 1))
        {
          v61 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        v49 = (std::__shared_weak_count *)v133;
        if ((_QWORD)v133)
        {
          v63 = (unint64_t *)(v133 + 8);
          do
            v51 = __ldaxr(v63);
          while (__stlxr(v51 - 1, v63));
LABEL_86:
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
      }
      else
      {
        v36 = *(AMCP::Log::Scope_Registry **)j;
        v37 = k->~logic_error;
        v38 = k->~logic_error_0;
        v115 = (std::__shared_weak_count *)v38;
        if (v38)
        {
          v39 = (unint64_t *)((char *)v38 + 8);
          do
            v40 = __ldxr(v39);
          while (__stxr(v40 + 1, v39));
        }
        if (*((_QWORD *)v36 + 37))
        {
          AMCP::Log::Scope_Registry::get(v36);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v128, "com.apple.coreaudio", "AMCP");
          v104 = *(NSObject **)v128.__r_.__value_.__l.__data_;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v128);
          if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
          {
            v105 = pthread_self();
            v106 = pthread_mach_thread_np(v105);
            LODWORD(v128.__r_.__value_.__l.__data_) = 67109890;
            HIDWORD(v128.__r_.__value_.__r.__words[0]) = v106;
            LOWORD(v128.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v128.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
            WORD1(v128.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(v128.__r_.__value_.__r.__words[2]) = 125;
            LOWORD(v129) = 2080;
            *(_QWORD *)((char *)&v129 + 2) = "not (not is_processing())";
            _os_log_error_impl(&dword_1B57BA000, v104, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Don't call anchor_to_timebase_anchor on buffers that are currently processing", (uint8_t *)&v128, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v127);
          v107 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Don't call anchor_to_timebase_anchor on buffers that are currently processing", (uint64_t)&v120);
          std::logic_error::logic_error(&v121, &v120);
          v121.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)&v122, &v121);
          v123 = 0;
          v124 = 0;
          v125 = 0;
          v126 = -1;
          v122.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
          v122.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v128, (uint64_t)&v122);
          *((_QWORD *)&v129 + 1) = "void AMCP::Graph::Manifest_Buffer::anchor_to_peer(std::shared_ptr<Manifest_Buffer>, A"
                                   "MCP::Object_ID, Manifest_Counter &, const Manifest_Execution_Context &)";
          v130 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          v131 = 125;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v118);
          v133 = v118;
          v132 = off_1E69A20A0;
          v134 = v119;
          v118 = 0uLL;
          v119 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v128, (uint64_t)&v132);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v107, (uint64_t)&v128);
        }
        v41 = *((_QWORD *)v113 + 8);
        *(_OWORD *)&v128.__r_.__value_.__l.__data_ = *((_OWORD *)v37 + 13);
        v42 = *((_QWORD *)v37 + 29);
        v128.__r_.__value_.__r.__words[2] = *((_QWORD *)v37 + 28);
        *(_QWORD *)&v129 = v42;
        v43 = *((_QWORD *)v37 + 30);
        *((_QWORD *)&v129 + 1) = v43;
        if (v43)
        {
          v44 = (unint64_t *)(v43 + 8);
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        AMCP::Graph::Manifest_Buffer::anchor_time((uint64_t)v36, (AMCP::DAL::DAL_Time *)&v128, a2, v41, (AMCP::DAL::DAL_Time_Delta *)a3);
        v46 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
        if (*((_QWORD *)&v129 + 1))
        {
          v47 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v49 = v115;
        if (v115)
        {
          v50 = (unint64_t *)&v115->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          goto LABEL_86;
        }
      }
    }
  }
  for (m = (_QWORD *)*((_QWORD *)v113 + 3); m; m = (_QWORD *)*m)
    ++*(_QWORD *)(m[12] + 296);
  v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
  v65 = (uint64_t **)*((_QWORD *)v113 + 14);
  for (n = (uint64_t **)*((_QWORD *)v113 + 15); v65 != n; v65 += 2)
  {
    AMCP::IO_Core::Device_Connection::get_timebase((AMCP::IO_Core::Device_Connection *)&v122, *v65);
    AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)&v128, (AMCP::DAL::DAL_Time_Delta *)a3, (uint64_t *)&v122);
    v67 = (std::__shared_weak_count *)v122.__r_.__value_.__l.__size_;
    if (v122.__r_.__value_.__l.__size_)
    {
      v68 = (unint64_t *)(v122.__r_.__value_.__l.__size_ + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v70 = *((_QWORD *)v113 + 8);
    AMCP::IO_Core::Device_Connection::get_timebase((AMCP::IO_Core::Device_Connection *)&v132, *v65);
    AMCP::Graph::Manifest_Counter::calculate_buffer_start((AMCP::DAL::DAL_Time *)&v122, v70, (uint64_t *)&v132, 1, (AMCP::DAL::DAL_Time_Delta *)&v128, a3[10]);
    v71 = (std::__shared_weak_count *)v133;
    if ((_QWORD)v133)
    {
      v72 = (unint64_t *)(v133 + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v74 = *v65;
    *(_OWORD *)&v120.__r_.__value_.__l.__data_ = 0uLL;
    v75 = (std::__shared_weak_count *)v74[1];
    if (v75 && (v120.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v75)) != 0)
    {
      v76 = (os_unfair_lock_s *)*v74;
      v120.__r_.__value_.__r.__words[0] = *v74;
    }
    else
    {
      v76 = 0;
    }
    v77 = v76 + 1;
    os_unfair_lock_lock(v76 + 1);
    sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v122);
    v132 = &off_1E6971638;
    *(double *)&v133 = sample_time;
    v79 = (uint64_t *)&v132;
    v134 = &v132;
    v80 = v76 + 16;
    do
    {
      v80 = *(os_unfair_lock_s **)&v80->_os_unfair_lock_opaque;
      if (!v80)
        break;
      if (!v79)
        std::__throw_bad_function_call[abi:ne180100]();
      v81 = (*(uint64_t (**)(uint64_t *, uint32_t *))(*v79 + 48))(v79, &v80[14]._os_unfair_lock_opaque);
      v79 = (uint64_t *)v134;
    }
    while ((v81 & 1) != 0);
    if (v79 == (uint64_t *)&v132)
    {
      v79 = (uint64_t *)&v132;
      v82 = 4;
    }
    else
    {
      if (!v79)
        goto LABEL_115;
      v82 = 5;
    }
    (*(void (**)(void))(*v79 + 8 * v82))();
LABEL_115:
    os_unfair_lock_unlock(v77);
    v83 = (std::__shared_weak_count *)v120.__r_.__value_.__l.__size_;
    if (v120.__r_.__value_.__l.__size_)
    {
      v84 = (unint64_t *)(v120.__r_.__value_.__l.__size_ + 8);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    v86 = v124;
    if (v124)
    {
      v87 = (unint64_t *)&v124->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    v89 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
    if (*((_QWORD *)&v129 + 1))
    {
      v90 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
  }
}

void sub_1B5A91BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,char *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47)
{
  uint64_t v47;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v47);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  a30 = &a15;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest_Inventory::cross_check_buffer(AMCP::Log::Scope_Registry *a1, _QWORD *a2)
{
  char *v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *v5;
  unint64_t v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  NSObject **v9;
  _BYTE v10[10];
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (char *)a1 + 24;
  while (1)
  {
    v2 = *(char **)v2;
    if (!v2)
      break;
    if (**((_QWORD **)v2 + 12) == *a2)
      return;
  }
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  v3 = *(std::__shared_weak_count **)v10;
  v4 = *v9;
  if (*(_QWORD *)v10)
  {
    v5 = (unint64_t *)(*(_QWORD *)v10 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v7 = pthread_self();
    v8 = pthread_mach_thread_np(v7);
    LODWORD(v9) = 67109634;
    HIDWORD(v9) = v8;
    *(_WORD *)v10 = 2080;
    *(_QWORD *)&v10[2] = "Manifest_Inventory.cpp";
    v11 = 1024;
    v12 = 324;
    _os_log_debug_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Found a manifest buffer that is not in the buffer map", (uint8_t *)&v9, 0x18u);
  }
}

void std::__shared_ptr_emplace<AMCP::Graph::Converter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6983A70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Graph::Converter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6983A70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::Graph::Converter>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v3 = a1 + 128;
  v2 = *(_QWORD *)(a1 + 128);
  v5 = a1 + 144;
  v4 = *(_QWORD *)(a1 + 144);
  v6 = *(std::__shared_weak_count **)(v3 + 8);
  v15 = v2;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 120))(v4, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 160);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v3);
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table(a1 + 72);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  v14 = *(std::__shared_weak_count **)(a1 + 32);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
}

uint64_t *AMCP::Graph::Manifest_Inventory::get_buffer_alignments(uint64_t *this, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;

  this[1] = 0;
  v2 = this + 1;
  this[2] = 0;
  *this = (uint64_t)(this + 1);
  if (a2)
  {
    v3 = a2;
    v4 = (uint64_t)this;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_DWORD *)(v3[12] + 156);
      v8 = v2;
      v9 = v2;
      if (v5)
      {
        v10 = v5;
        while (1)
        {
          while (1)
          {
            v9 = (_QWORD *)v10;
            v11 = *(_DWORD *)(v10 + 28);
            if (v7 >= v11)
              break;
            v10 = *v9;
            v8 = v9;
            if (!*v9)
              goto LABEL_11;
          }
          if (v11 >= v7)
            break;
          v10 = v9[1];
          if (!v10)
          {
            v8 = v9 + 1;
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        v12 = operator new(0x20uLL);
        v12[7] = v7;
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = 0;
        *((_QWORD *)v12 + 2) = v9;
        *v8 = v12;
        v13 = **(_QWORD **)v4;
        if (v13)
        {
          *(_QWORD *)v4 = v13;
          v12 = (_DWORD *)*v8;
        }
        this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 8), (uint64_t *)v12);
        v6 = *(_QWORD *)(v4 + 16) + 1;
        *(_QWORD *)(v4 + 16) = v6;
      }
      v3 = (_QWORD *)*v3;
      if (!v3 || v6 >= 2)
        break;
      v5 = *v2;
    }
  }
  return this;
}

void sub_1B5A923DC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Manifest_Inventory::report_thread_error(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 48))(this);
  return this;
}

void sub_1B5A9244C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, NSObject **a9, __int128 a10, __int16 a11, int a12)
{
  AMCP::Log::Scope_Registry *v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;

  if (a2)
  {
    v12 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    v13 = *a9;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v15;
      LOWORD(a10) = 2080;
      *(_QWORD *)((char *)&a10 + 2) = "Manifest_Inventory.cpp";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 525;
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Exception thrown from thread error handler", (uint8_t *)&a9, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5A92420);
  }
  _Unwind_Resume(exception_object);
}

Float64 AudioGetHostClockFrequency(void)
{
  return 24000000.0;
}

UInt32 AudioGetHostClockMinimumTimeDelta(void)
{
  return 1;
}

UInt64 AudioConvertHostTimeToNanos(UInt64 inHostTime)
{
  return __udivti3();
}

UInt64 AudioConvertNanosToHostTime(UInt64 inNanos)
{
  return __udivti3();
}

void ADS_DeviceManager::~ADS_DeviceManager(ADS_DeviceManager *this)
{
  HALS_PlugIn::~HALS_PlugIn(this);
  JUMPOUT(0x1B5E50688);
}

void `non-virtual thunk to'ADS_DeviceManager::~ADS_DeviceManager(ADS_DeviceManager *this)
{
  HALS_PlugIn::~HALS_PlugIn((ADS_DeviceManager *)((char *)this - 328));
}

{
  HALS_PlugIn::~HALS_PlugIn((ADS_DeviceManager *)((char *)this - 328));
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<HALS_UCPlugIn>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69841D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_UCPlugIn>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69841D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<HALS_UCPlugIn>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ADSLoader::~ADSLoader(ADSLoader *this)
{
  *(_QWORD *)this = off_1E6983CE8;
  CACFString::~CACFString((ADSLoader *)((char *)this + 8));
}

{
  *(_QWORD *)this = off_1E6983CE8;
  CACFString::~CACFString((ADSLoader *)((char *)this + 8));
  JUMPOUT(0x1B5E50688);
}

_UNKNOWN **ADSLoader::GetCOMInterface(ADSLoader *this)
{
  return &gAudioServerPlugInDriverInterfacePtr;
}

_UNKNOWN **ADSLoader::GetIsolatedInterface(ADSLoader *this)
{
  return &gAudioServerPlugInIsolatedDriverInterfacePtr;
}

void HALS_IOUABox::Activate(HALS_IOUABox *this)
{
  HALS_Object *v2;

  HALS_IOUABox::UpdateControls(this);
  (*(void (**)(char *))(*((_QWORD *)this + 42) + 24))((char *)this + 336);
  HALS_Object::Activate(this, v2);
}

void HALS_IOUABox::~HALS_IOUABox(HALS_IOUABox *this, HALS_Object *a2)
{
  HALS_IOUABox::~HALS_IOUABox(this, a2);
  JUMPOUT(0x1B5E50688);
}

{
  HALS_IOUAObject *v3;
  void *v4;

  *(_QWORD *)this = off_1E6983D18;
  v3 = (HALS_IOUABox *)((char *)this + 336);
  *((_QWORD *)this + 42) = &unk_1E6983E10;
  v4 = (void *)*((_QWORD *)this + 48);
  if (v4)
  {
    *((_QWORD *)this + 49) = v4;
    operator delete(v4);
  }
  HALS_IOUAObject::~HALS_IOUAObject(v3, a2);
  HALS_Box::~HALS_Box(this);
}

void HALS_IOUABox::_Deactivate(HALS_IOUABox *this)
{
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  HALS_ObjectMap *v4;
  HALS_Object *v5;

  v2 = (HALS_ObjectMap **)*((_QWORD *)this + 48);
  v3 = (HALS_ObjectMap **)*((_QWORD *)this + 49);
  if (v2 != v3)
  {
    do
    {
      (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)*v2 + 8))(*v2);
      v4 = *v2++;
      HALS_ObjectMap::ObjectIsDead(v4, v5);
    }
    while (v2 != v3);
    v2 = (HALS_ObjectMap **)*((_QWORD *)this + 48);
  }
  *((_QWORD *)this + 49) = v2;
  *((_DWORD *)this + 2) = 0;
}

uint64_t HALS_IOUABox::HasProperty(HALS_IOUABox *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t mSelector;
  BOOL v6;
  int v7;
  _BOOL8 HasProperty;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  mSelector = a3->mSelector;
  if ((int)mSelector > 1768777572)
  {
    if ((int)mSelector <= 1819173228)
    {
      v6 = (_DWORD)mSelector == 1768777573 || (_DWORD)mSelector == 1819107691;
      v7 = 1819111268;
    }
    else if ((int)mSelector > 1920168546)
    {
      v6 = (_DWORD)mSelector == 1953653102;
      v7 = 1920168547;
    }
    else
    {
      v6 = (_DWORD)mSelector == 1819173229;
      v7 = 1851878764;
    }
    goto LABEL_20;
  }
  if ((int)mSelector <= 1651861859)
  {
    v6 = (_DWORD)mSelector == 1634429294 || (_DWORD)mSelector == 1650682915;
    v7 = 1650751011;
LABEL_20:
    if (!v6 && (_DWORD)mSelector != v7)
      goto LABEL_17;
LABEL_25:
    v10 = *((_QWORD *)this + 43);
    v11 = *(_QWORD *)(v10 + 792);
    v12 = *(std::__shared_weak_count **)(v10 + 800);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v11 + 4), a3, *((_DWORD *)this + 88));
    if (v12)
    {
      v15 = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    return HasProperty;
  }
  switch((_DWORD)mSelector)
  {
    case 0x62756964:
      goto LABEL_25;
    case 0x63757374:
      return *((_QWORD *)this + 46) != *((_QWORD *)this + 45);
    case 0x69636F6E:
      goto LABEL_25;
  }
LABEL_17:
  if ((HALS_Box::HasProperty((uint64_t)this, a2, (int *)a3) & 1) != 0)
    return 1;
  return (*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)this + 42) + 16))((char *)this + 336, mSelector);
}

void sub_1B5A9295C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOUABox::IsPropertySettable(HALS_IOUABox *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  signed int mSelector;
  BOOL v8;
  int v9;
  _BOOL8 IsPropertySettable;
  int v11;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  const AudioObjectPropertyAddress *v20;
  HALS_Client *v21;

  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1768777572)
  {
    if (mSelector > 1819173228)
    {
      if (mSelector <= 1851878763)
      {
        v8 = mSelector == 1819173229;
        v9 = 1836411236;
      }
      else
      {
        v8 = mSelector == 1851878764 || mSelector == 1953653102;
        v9 = 1920168547;
      }
    }
    else if (mSelector <= 1818850161)
    {
      v8 = mSelector == 1768777573;
      v9 = 1818850145;
    }
    else
    {
      v8 = mSelector == 1818850162 || mSelector == 1819107691;
      v9 = 1819111268;
    }
    goto LABEL_28;
  }
  IsPropertySettable = 0;
  if (mSelector <= 1652060013)
  {
    if (mSelector > 1650751010)
    {
      if (mSelector == 1650751011)
        return IsPropertySettable;
      if (mSelector != 1651861860)
        goto LABEL_43;
    }
    else if (mSelector != 1634429294)
    {
      v11 = 1650682915;
      goto LABEL_25;
    }
LABEL_33:
    v13 = *((_QWORD *)this + 43);
    v14 = *(_QWORD *)(v13 + 792);
    v15 = *(std::__shared_weak_count **)(v13 + 800);
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    IsPropertySettable = HALS_IOUAUCDriver::GetIsPropertySettable((HALS_IOUAUCDriver *)*(unsigned int *)(v14 + 4), a3, *((_DWORD *)this + 88));
    if (v15)
    {
      v18 = (unint64_t *)&v15->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    return IsPropertySettable;
  }
  if (mSelector > 1751412336)
  {
    v8 = mSelector == 1751412337 || mSelector == 1751737454;
    v9 = 1768124270;
LABEL_28:
    if (!v8 && mSelector != v9)
      goto LABEL_43;
    goto LABEL_33;
  }
  if (mSelector == 1652060014)
    goto LABEL_33;
  v11 = 1668641652;
LABEL_25:
  if (mSelector == v11)
    return IsPropertySettable;
LABEL_43:
  if (HALS_Box::HasProperty((uint64_t)this, a2, (int *)a3))
    return HALS_Box::IsPropertySettable((uint64_t)this, a2, (int *)a3);
  else
    return HALS_IOUAObject::IsPropertySettable((HALS_IOUABox *)((char *)this + 336), a3, v20, v21);
}

void sub_1B5A92C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOUABox::GetPropertyDataSize(HALS_IOUABox *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, HALS_Client *a6)
{
  signed int mSelector;
  uint64_t PropertySize;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  const AudioObjectPropertyAddress *v24;
  uint64_t v25;
  const void *v26;
  HALS_Client *v27;

  mSelector = a3->mSelector;
  PropertySize = 8;
  if ((int)a3->mSelector <= 1768777572)
  {
    if (mSelector > 1652060013)
    {
      if (mSelector <= 1751412336)
      {
        if (mSelector != 1652060014)
        {
          if (mSelector != 1668641652)
            goto LABEL_39;
          return (*((_DWORD *)this + 92) - *((_DWORD *)this + 90)) & 0xFFFFFFFC;
        }
LABEL_22:
        v16 = *((_QWORD *)this + 43);
        v17 = *(_QWORD *)(v16 + 792);
        v18 = *(std::__shared_weak_count **)(v16 + 800);
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
        }
        PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v17 + 4), a3, *((_DWORD *)this + 88), a5, a4);
        if (v18)
        {
          v21 = (unint64_t *)&v18->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        return PropertySize;
      }
      if (mSelector == 1751412337 || mSelector == 1751737454)
        goto LABEL_22;
      v15 = 1768124270;
LABEL_21:
      if (mSelector != v15)
        goto LABEL_39;
      goto LABEL_22;
    }
    if (mSelector <= 1650751010)
    {
      if (mSelector == 1634429294)
        goto LABEL_22;
      v15 = 1650682915;
      goto LABEL_21;
    }
    if (mSelector == 1650751011)
      goto LABEL_22;
    v14 = 1651861860;
  }
  else
  {
    if (mSelector <= 1819173228)
    {
      if (mSelector > 1818850161)
      {
        if (mSelector != 1818850162)
        {
          if (mSelector != 1819107691)
          {
            v14 = 1819111268;
            goto LABEL_37;
          }
          return PropertySize;
        }
        goto LABEL_22;
      }
      if (mSelector == 1768777573)
        goto LABEL_22;
      v15 = 1818850145;
      goto LABEL_21;
    }
    if (mSelector > 1851878763)
    {
      if (mSelector == 1851878764)
        return PropertySize;
      if (mSelector == 1953653102)
        goto LABEL_22;
      v15 = 1920168547;
      goto LABEL_21;
    }
    if (mSelector == 1819173229)
      return PropertySize;
    v14 = 1836411236;
  }
LABEL_37:
  if (mSelector == v14)
    return PropertySize;
LABEL_39:
  if (HALS_Box::HasProperty((uint64_t)this, a2, (int *)a3))
    return HALS_Box::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
  else
    return HALS_IOUAObject::GetPropertyDataSize((HALS_IOUABox *)((char *)this + 336), a3, v24, v25, v26, v27);
}

void sub_1B5A92EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_IOUABox::GetPropertyData(HALS_IOUABox *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, AudioObjectPropertyAddress *a5, int *a6, unsigned int a7, void *a8, HALS_Client *a9)
{
  int *v11;
  signed int mSelector;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  HALS_ObjectMap *v27;
  HALS_Object *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  HALS_ObjectMap *v64;
  HALS_Object *v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  const void *v83;
  NSObject *v84;
  _opaque_pthread_t *v85;
  mach_port_t v86;
  void *exception;
  std::runtime_error *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t (**outputStruct)();
  __int128 v92;
  uint64_t v93;
  std::runtime_error v94;
  std::runtime_error cf;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  char v101;
  _BYTE buf[18];
  __int16 v103;
  int v104;
  __int16 v105;
  _BYTE v106[14];
  const char *v107;
  int v108;
  uint64_t v109;
  __int128 v110;

  v11 = a6;
  v109 = *MEMORY[0x1E0C80C00];
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1751737453)
  {
    if (mSelector > 1819111267)
    {
      if (mSelector > 1851878763)
      {
        if (mSelector == 1953653102 || mSelector == 1920168547)
          goto LABEL_72;
        v32 = 1851878764;
      }
      else
      {
        if (mSelector == 1819111268 || mSelector == 1819173229)
          goto LABEL_62;
        v32 = 1836411236;
      }
    }
    else
    {
      if (mSelector <= 1818850144)
      {
        if (mSelector == 1751737454 || mSelector == 1768124270)
          goto LABEL_72;
        v30 = 1768777573;
        goto LABEL_56;
      }
      if (mSelector == 1818850145 || mSelector == 1818850162)
        goto LABEL_72;
      v32 = 1819107691;
    }
    if (mSelector != v32)
      goto LABEL_116;
    goto LABEL_62;
  }
  if (mSelector > 1651536494)
  {
    if (mSelector <= 1652060013)
    {
      if (mSelector == 1651536495)
        goto LABEL_39;
      if (mSelector != 1651861860)
      {
        v31 = 1652060006;
        goto LABEL_38;
      }
LABEL_62:
      v41 = *((_QWORD *)this + 43);
      v42 = *(_QWORD *)(v41 + 792);
      v43 = *(std::__shared_weak_count **)(v41 + 800);
      *(_QWORD *)buf = v42;
      *(_QWORD *)&buf[8] = v43;
      if (v43)
      {
        p_shared_owners = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldxr(p_shared_owners);
        while (__stxr(v45 + 1, p_shared_owners));
      }
      *(_QWORD *)&v110 = *((unsigned int *)this + 88);
      *((_QWORD *)&v110 + 1) = *(_QWORD *)&a3->mSelector;
      HALS_IOUAUCDriver::get_string_property((HALS_IOUAUCDriver *)&cf, v42, v110, (void *)a3->mElement, a8, a7);
      if (v43)
      {
        v46 = (unint64_t *)&v43->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      *(_QWORD *)v11 = CFRetain(cf.__vftable);
      a5->mSelector = 8;
      if (cf.__vftable)
        CFRelease(cf.__vftable);
      return;
    }
    if (mSelector == 1652060014)
    {
      if (a4 <= 3)
      {
        AMCP::Log::Scope_Registry::get(this);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v84 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
        {
          v85 = pthread_self();
          v86 = pthread_mach_thread_np(v85);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v86;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "HALS_IOUABox.cpp";
          v103 = 1024;
          v104 = 307;
          v105 = 2080;
          *(_QWORD *)v106 = "inDataSize < SizeOf32(UInt32)";
          _os_log_error_impl(&dword_1B57BA000, v84, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s bad property data size", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v101);
        exception = __cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v94, "kAudioBoxPropertyAcquired");
        std::runtime_error::runtime_error(&cf, &v94);
        v97 = 0;
        v98 = 0;
        v99 = 0;
        v100 = -1;
        cf.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v96 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&cf);
        *(_QWORD *)&v106[6] = "virtual void HALS_IOUABox::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress"
                              " &, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
        v107 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUABox.cpp";
        v108 = 307;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v89);
        outputStruct = off_1E69A20A0;
        v92 = v89;
        v93 = v90;
        v89 = 0uLL;
        v90 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&outputStruct);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
      }
      a5->mSelector = 4;
      cf.__vftable = (std::runtime_error_vtbl *)4;
      LODWORD(outputStruct) = 0;
      v74 = *((_QWORD *)this + 43);
      v75 = *(_QWORD *)(v74 + 792);
      v76 = *(std::__shared_weak_count **)(v74 + 800);
      *(_QWORD *)buf = v75;
      *(_QWORD *)&buf[8] = v76;
      if (v76)
      {
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v75 + 4), a3, *((_DWORD *)this + 88), a8, a7, &outputStruct, (unint64_t *)&cf);
      if (v76)
      {
        v79 = (unint64_t *)&v76->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      *v11 = (int)outputStruct;
      return;
    }
    if (mSelector == 1668641652)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 46) - *((_QWORD *)this + 45)) >> 2) >= a4 / 0xCuLL)
        v67 = a4 / 0xCuLL;
      else
        v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 46) - *((_QWORD *)this + 45)) >> 2);
      if (v67)
      {
        v68 = 0;
        v69 = 0;
        do
        {
          v70 = *((_QWORD *)this + 45);
          if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 46) - v70) >> 2) > v69)
          {
            v71 = (char *)&a6[v68];
            v72 = (uint64_t *)(v70 + v68 * 4);
            v73 = *v72;
            *((_DWORD *)v71 + 2) = *((_DWORD *)v72 + 2);
            *(_QWORD *)v71 = v73;
          }
          ++v69;
          v68 += 3;
        }
        while (3 * v67 != v68);
      }
      v40 = 12 * v67;
      goto LABEL_49;
    }
    v30 = 1751412337;
LABEL_56:
    if (mSelector != v30)
      goto LABEL_116;
    goto LABEL_72;
  }
  if (mSelector > 1651007860)
  {
    if (mSelector != 1651007861 && mSelector != 1651010921)
    {
      v31 = 1651013225;
LABEL_38:
      if (mSelector != v31)
        goto LABEL_116;
    }
LABEL_39:
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_IOUABox.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 248;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOUABox::GetPropertyData: bad property data size", buf, 0x12u);
      }
      v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v88, "kAudioHardwareBadPropertySizeError");
      __cxa_throw(v88, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    cf.__vftable = (std::runtime_error_vtbl *)a4;
    v33 = *((_QWORD *)this + 43);
    v34 = *(_QWORD *)(v33 + 792);
    v35 = *(std::__shared_weak_count **)(v33 + 800);
    *(_QWORD *)buf = v34;
    *(_QWORD *)&buf[8] = v35;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v34 + 4), a3, *((_DWORD *)this + 88), a8, a7, a6, (unint64_t *)&cf);
    if (v35)
    {
      v38 = (unint64_t *)&v35->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v40 = 4;
LABEL_49:
    a5->mSelector = v40;
    return;
  }
  if (mSelector == 1634429294)
  {
LABEL_72:
    cf.__vftable = (std::runtime_error_vtbl *)a4;
    v48 = *((_QWORD *)this + 43);
    v49 = *(_QWORD *)(v48 + 792);
    v50 = *(std::__shared_weak_count **)(v48 + 800);
    *(_QWORD *)buf = v49;
    *(_QWORD *)&buf[8] = v50;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v49 + 4), a3, *((_DWORD *)this + 88), a8, a7, a6, (unint64_t *)&cf);
    if (v50)
    {
      v53 = (unint64_t *)&v50->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    a5->mSelector = (AudioObjectPropertySelector)cf.__vftable;
    return;
  }
  if (mSelector != 1650682915)
  {
    if (mSelector == 1650751011)
    {
      cf.__vftable = (std::runtime_error_vtbl *)a5->mSelector;
      v18 = *((_QWORD *)this + 43);
      v19 = *(_QWORD *)(v18 + 792);
      v20 = *(std::__shared_weak_count **)(v18 + 800);
      *(_QWORD *)buf = v19;
      *(_QWORD *)&buf[8] = v20;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v19 + 4), a3, *((_DWORD *)this + 88), a8, a7, a6, (unint64_t *)&cf);
      if (v20)
      {
        v23 = (unint64_t *)&v20->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v25 = a5->mSelector;
      if (v25 >= 4)
      {
        v26 = v25 >> 2;
        do
        {
          v27 = (HALS_ObjectMap *)HALS_IOUADriver::CopyDeviceByUCID(*((HALS_IOUADriver **)this + 43), *v11);
          if (v27)
            v29 = *((_DWORD *)v27 + 4);
          else
            v29 = 0;
          *v11 = v29;
          HALS_ObjectMap::ReleaseObject(v27, v28);
          ++v11;
          --v26;
        }
        while (v26);
      }
      return;
    }
LABEL_116:
    if (HALS_Box::HasProperty((uint64_t)this, a2, (int *)a3))
      HALS_Box::GetPropertyData(this, a2, a3, a4, &a5->mSelector, (uint64_t *)v11, a7, (uint64_t *)a8, a9);
    else
      HALS_IOUAObject::GetPropertyData((HALS_IOUABox *)((char *)this + 336), &a3->mSelector, a5, (AMCP::Log::Scope_Registry **)v11, (unsigned int *)a8, v81, v82, v83, a9);
    return;
  }
  cf.__vftable = (std::runtime_error_vtbl *)a5->mSelector;
  v55 = *((_QWORD *)this + 43);
  v56 = *(_QWORD *)(v55 + 792);
  v57 = *(std::__shared_weak_count **)(v55 + 800);
  *(_QWORD *)buf = v56;
  *(_QWORD *)&buf[8] = v57;
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v56 + 4), a3, *((_DWORD *)this + 88), a8, a7, a6, (unint64_t *)&cf);
  if (v57)
  {
    v60 = (unint64_t *)&v57->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v62 = a5->mSelector;
  if (v62 >= 4)
  {
    v63 = v62 >> 2;
    do
    {
      v64 = (HALS_ObjectMap *)HALS_IOUADriver::CopyClockDeviceByUCID(*((HALS_IOUADriver **)this + 43), *v11);
      if (v64)
        v66 = *((_DWORD *)v64 + 4);
      else
        v66 = 0;
      *v11 = v66;
      HALS_ObjectMap::ReleaseObject(v64, v65);
      ++v11;
      --v63;
    }
    while (v63);
  }
}

void sub_1B5A938F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,uint64_t a29,uint64_t a30)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void HALS_IOUABox::SetPropertyData(HALS_IOUABox *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, const AudioObjectPropertyAddress *a5, unsigned int a6, void *a7, HALS_Client *a8)
{
  uint64_t v12;
  HALS_IOUAUCDriver *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  const void *v24;
  HALS_Client *v25;
  NSObject *v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  void *exception;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  uint64_t v34;
  std::runtime_error v35;
  std::runtime_error v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  uint8_t buf[8];
  _BYTE v44[10];
  __int16 v45;
  int v46;
  __int16 v47;
  _BYTE v48[14];
  const char *v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (a3->mSelector == 1652060014)
  {
    if (a4 <= 3)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v26 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        v27 = pthread_self();
        v28 = pthread_mach_thread_np(v27);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v28;
        *(_WORD *)v44 = 2080;
        *(_QWORD *)&v44[2] = "HALS_IOUABox.cpp";
        v45 = 1024;
        v46 = 349;
        v47 = 2080;
        *(_QWORD *)v48 = "inDataSize < SizeOf32(UInt32)";
        _os_log_error_impl(&dword_1B57BA000, v26, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s bad property data size for kAudioBoxPropertyAcquired", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
      exception = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v35, "kAudioHardwareBadPropertySizeError");
      std::runtime_error::runtime_error(&v36, &v35);
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v41 = -1;
      v36.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v37 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
      *(_QWORD *)&v48[6] = "virtual void HALS_IOUABox::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &,"
                           " UInt32, const void *, UInt32, const void *, HALS_Client *)";
      v49 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUABox.cpp";
      v50 = 349;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v30);
      v32 = off_1E69A20A0;
      v33 = v30;
      v34 = v31;
      v30 = 0uLL;
      v31 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v32);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
    v12 = *((_QWORD *)this + 43);
    v13 = *(HALS_IOUAUCDriver **)(v12 + 792);
    v14 = *(std::__shared_weak_count **)(v12 + 800);
    *(_QWORD *)buf = v13;
    *(_QWORD *)v44 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    HALS_IOUAUCDriver::SetPropertyData(v13, a3, *((_DWORD *)this + 88), a7, a6, a5, a4);
    if (v14)
    {
      v17 = (unint64_t *)&v14->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    if (HALS_Box::HasProperty((uint64_t)this, a2, (int *)a3))
      HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v21, (uint64_t)v22, v23, (uint64_t)v24, (uint64_t)a8);
    HALS_IOUAObject::SetPropertyData((HALS_IOUABox *)((char *)this + 336), &a3->mSelector, a5, (CFTypeRef *)a7, v22, v23, v24, v25);
  }
}

void sub_1B5A93D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,uint64_t a29,uint64_t a30)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void HALS_IOUABox::_CopyControls(uint64_t a1, void **a2)
{
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  void **v4;
  HALS_ObjectMap *v5;
  unint64_t v6;
  HALS_ObjectMap **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  HALS_ObjectMap **v13;
  char *v14;
  char *v15;
  HALS_ObjectMap *v16;

  v2 = *(HALS_ObjectMap ***)(a1 + 384);
  v3 = *(HALS_ObjectMap ***)(a1 + 392);
  if (v2 != v3)
  {
    v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      v5 = *v2;
      v7 = (HALS_ObjectMap **)v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
      {
        v9 = ((char *)v7 - (_BYTE *)*v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v10 = v6 - (_QWORD)*v4;
        v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        else
          a2 = 0;
        v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *v13 = v5;
        v8 = v13 + 1;
        v15 = (char *)*v4;
        v14 = (char *)v4[1];
        if (v14 != *v4)
        {
          do
          {
            v16 = (HALS_ObjectMap *)*((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v13 = v16;
          }
          while (v14 != v15);
          v14 = (char *)*v4;
        }
        *v4 = v13;
        v4[1] = v8;
        v4[2] = (void *)(v12 + 8 * (_QWORD)a2);
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v7 = v5;
        v8 = v7 + 1;
      }
      v4[1] = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

uint64_t HALS_IOUABox::_GetNumberControls(HALS_IOUABox *this)
{
  return (*((_QWORD *)this + 49) - *((_QWORD *)this + 48)) >> 3;
}

HALS_ObjectMap *HALS_IOUABox::_CopyControlByIndex(HALS_IOUABox *this, HALS_Object *a2)
{
  uint64_t v2;
  HALS_ObjectMap *v3;

  v2 = *((_QWORD *)this + 48);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 49) - v2) >> 3))
    v3 = 0;
  else
    v3 = *(HALS_ObjectMap **)(v2 + 8 * a2);
  HALS_ObjectMap::RetainObject(v3, a2);
  return v3;
}

HALS_ObjectMap *HALS_IOUABox::_CopyControlByDescription(HALS_IOUABox *this, HALS_Object *a2, int a3, int a4)
{
  HALS_ObjectMap **v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap *v6;
  HALS_ObjectMap *v7;

  v4 = (HALS_ObjectMap **)*((_QWORD *)this + 48);
  v5 = (HALS_ObjectMap **)*((_QWORD *)this + 49);
  if (v4 != v5)
  {
    while (1)
    {
      v6 = *v4;
      if (*v4)
      {
        if (*((_DWORD *)v6 + 5) == (_DWORD)a2 && *((_DWORD *)v6 + 12) == a3 && *((_DWORD *)v6 + 13) == a4)
          break;
      }
      if (++v4 == v5)
        return 0;
    }
  }
  if (v4 == v5)
    return 0;
  v7 = *v4;
  HALS_ObjectMap::RetainObject(*v4, a2);
  return v7;
}

void `non-virtual thunk to'HALS_IOUABox::~HALS_IOUABox(HALS_IOUABox *this, HALS_Object *a2)
{
  HALS_IOUABox::~HALS_IOUABox((HALS_IOUABox *)((char *)this - 336), a2);
}

{
  HALS_IOUABox::~HALS_IOUABox((HALS_IOUABox *)((char *)this - 336), a2);
  JUMPOUT(0x1B5E50688);
}

void HALS_IOUABox::UpdateControls(HALS_IOUABox *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t PropertySize;
  unint64_t *v8;
  unint64_t v9;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer v11;
  std::vector<unsigned int>::pointer begin;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  HALB_Mutex *v20;
  _QWORD *v21;
  _QWORD *v22;
  HALS_IOUAControl **v23;
  HALS_IOUAControl **i;
  HALS_ObjectMap *v25;
  HALS_Object *v26;
  _QWORD v27[8];
  void *__p;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  __n128 (*v34)(_QWORD *, uint64_t);
  void (*v35)(uint64_t);
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  __n128 (*v42)(_QWORD *, uint64_t);
  void (*v43)(uint64_t);
  void *v44;
  void *v45;
  uint64_t v46;
  std::vector<unsigned int> v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char v51;

  v48 = 0;
  v49 = &v48;
  v50 = 0x2000000000;
  v51 = 0;
  v2 = *((_QWORD *)this + 43);
  v3 = *(_QWORD *)(v2 + 792);
  v4 = *(std::__shared_weak_count **)(v2 + 800);
  v39 = v3;
  v40 = (uint64_t *)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v3 + 4), (const AudioObjectPropertyAddress *)"lrtcbolg", *((_DWORD *)this + 88), 0, 0);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (PropertySize >= 4)
  {
    std::vector<unsigned int>::vector(&v47, PropertySize >> 2);
    begin = v47.__begin_;
    v31 = (char *)v47.__end_ - (char *)v47.__begin_;
    v13 = *((_QWORD *)this + 43);
    v14 = *(_QWORD *)(v13 + 792);
    v15 = *(std::__shared_weak_count **)(v13 + 800);
    v39 = v14;
    v40 = (uint64_t *)v15;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v14 + 4), (const AudioObjectPropertyAddress *)"lrtcbolg", *((_DWORD *)this + 88), 0, 0, begin, &v31);
    if (v15)
    {
      v18 = (unint64_t *)&v15->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v11 = v47.__begin_;
    end = v47.__end_;
  }
  else
  {
    end = 0;
    v11 = 0;
    memset(&v47, 0, sizeof(v47));
  }
  v39 = 0;
  v40 = &v39;
  v41 = 0x4002000000;
  v42 = __Block_byref_object_copy__7072;
  v43 = __Block_byref_object_dispose__7073;
  v45 = 0;
  v46 = 0;
  v44 = 0;
  v31 = 0;
  v32 = &v31;
  v33 = 0x4002000000;
  v34 = __Block_byref_object_copy__7072;
  v35 = __Block_byref_object_dispose__7073;
  v37 = 0;
  v38 = 0;
  v36 = 0;
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 1174405120;
  v27[2] = ___ZN12HALS_IOUABox14UpdateControlsEv_block_invoke;
  v27[3] = &unk_1E6983E38;
  v27[7] = this;
  __p = 0;
  v27[4] = &v48;
  v29 = 0;
  v30 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v11, (uint64_t)end, end - v11);
  v27[5] = &v39;
  v27[6] = &v31;
  v20 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUABox *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v20, (uint64_t)v27);
  v21 = (_QWORD *)v40[5];
  v22 = (_QWORD *)v40[6];
  while (v21 != v22)
  {
    (**(void (***)(_QWORD))*v21)(*v21);
    ++v21;
  }
  v23 = (HALS_IOUAControl **)v32[5];
  for (i = (HALS_IOUAControl **)v32[6]; v23 != i; ++v23)
  {
    v25 = *v23;
    if (HALS_IOUAControl::RefreshCache(*v23))
      *((_BYTE *)v49 + 24) = 1;
    HALS_ObjectMap::ReleaseObject(v25, v26);
  }
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v31, 8);
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  _Block_object_dispose(&v39, 8);
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  if (v47.__begin_)
  {
    v47.__end_ = v47.__begin_;
    operator delete(v47.__begin_);
  }
  _Block_object_dispose(&v48, 8);
}

void sub_1B5A94398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  uint64_t v34;
  void *v36;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  _Block_object_dispose((const void *)(v34 - 80), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__7072(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__7073(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN12HALS_IOUABox14UpdateControlsEv_block_invoke(_QWORD *a1, HALS_Object *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  HALS_ObjectMap **v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  HALS_Object *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  int v44;
  unint64_t *v45;
  unint64_t v46;
  HALS_Object *v47;
  unint64_t v48;
  HALS_Object **v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  HALS_Object **v56;
  char *v57;
  char *v58;
  HALS_Object *v59;
  HALS_ObjectMap *v60;
  char v61;
  HALS_Object *v62;
  HALS_ObjectMap **v63;
  HALS_ObjectMap *v64;
  HALS_Object *v65;
  char **v66;
  uint64_t *v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  HALS_ObjectMap **v81;
  HALS_ObjectMap **v82;
  HALS_ObjectMap *v83;
  uint64_t v85;
  unint64_t v86;
  int outputStruct;
  unint64_t v88;
  int v89;
  unint64_t v90;
  unsigned int v91;
  unint64_t v92;
  int v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v2 = a1[8];
  v3 = a1[7];
  v4 = a1[9] - v2;
  v5 = *(_QWORD **)(a1[5] + 8);
  v6 = *(HALS_ObjectMap ***)(v3 + 384);
  v7 = *(char **)(v3 + 392);
  if (v6 != (HALS_ObjectMap **)v7)
  {
    v8 = *(char **)(v3 + 384);
    do
    {
      v9 = *(_QWORD *)v8;
      v8 += 8;
      *(_BYTE *)(v9 + 13) = 0;
    }
    while (v8 != v7);
  }
  if ((v4 & 0x3FFFFFFFCLL) != 0)
  {
    v10 = 0;
    v11 = (v4 >> 2);
    v85 = v11;
    while (1)
    {
      v12 = *(_QWORD *)(v3 + 384);
      v13 = *(_QWORD *)(v3 + 392);
      if (v12 != v13)
      {
        while (!*(_QWORD *)v12 || *(_DWORD *)(*(_QWORD *)v12 + 88) != *(_DWORD *)(v2 + 4 * v10))
        {
          v12 += 8;
          if (v12 == v13)
            goto LABEL_13;
        }
      }
      if (v12 == v13)
      {
LABEL_13:
        v14 = *(_DWORD *)(v2 + 4 * v10);
        if (v14)
        {
          v15 = *(_QWORD *)(v3 + 344);
          v16 = *(_QWORD *)(v15 + 792);
          v17 = *(std::__shared_weak_count **)(v15 + 800);
          if (v17)
          {
            p_shared_owners = (unint64_t *)&v17->__shared_owners_;
            do
              v19 = __ldxr(p_shared_owners);
            while (__stxr(v19 + 1, p_shared_owners));
          }
          outputStruct = 0;
          v86 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v16 + 4), (const AudioObjectPropertyAddress *)"salcbolg", v14, 0, 0, &outputStruct, &v86);
          v20 = outputStruct;
          if (v17)
          {
            v21 = (unint64_t *)&v17->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          v23 = *(_QWORD *)(v3 + 344);
          v24 = *(_QWORD *)(v23 + 792);
          v25 = *(std::__shared_weak_count **)(v23 + 800);
          if (v25)
          {
            v26 = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
          }
          v89 = 0;
          v88 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v24 + 4), (const AudioObjectPropertyAddress *)"slcbbolg", v14, 0, 0, &v89, &v88);
          v28 = v89;
          if (v25)
          {
            v29 = (unint64_t *)&v25->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          v31 = *(_QWORD *)(v3 + 344);
          v32 = *(_QWORD *)(v31 + 792);
          v33 = *(std::__shared_weak_count **)(v31 + 800);
          if (v33)
          {
            v34 = (unint64_t *)&v33->__shared_owners_;
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 1, v34));
          }
          v91 = 0;
          v90 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v32 + 4), (const AudioObjectPropertyAddress *)"pcscbolg", v14, 0, 0, &v91, &v90);
          v36 = (HALS_Object *)v91;
          if (v33)
          {
            v37 = (unint64_t *)&v33->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          v39 = *(_QWORD *)(v3 + 344);
          v40 = *(_QWORD *)(v39 + 792);
          v41 = *(std::__shared_weak_count **)(v39 + 800);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          v93 = 0;
          v92 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v40 + 4), (const AudioObjectPropertyAddress *)"mlecbolg", v14, 0, 0, &v93, &v92);
          v44 = v93;
          if (v41)
          {
            v45 = (unint64_t *)&v41->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v47 = (HALS_Object *)operator new();
          HALS_IOUAControl::HALS_IOUAControl(v47, *(HALS_IOUADriver **)(v3 + 344), v3, v14, v20, v28, v36, v44, 0);
          v49 = (HALS_Object **)v5[6];
          v48 = v5[7];
          if ((unint64_t)v49 >= v48)
          {
            v51 = v5[5];
            v52 = ((uint64_t)v49 - v51) >> 3;
            if ((unint64_t)(v52 + 1) >> 61)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v53 = v48 - v51;
            v54 = v53 >> 2;
            if (v53 >> 2 <= (unint64_t)(v52 + 1))
              v54 = v52 + 1;
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
              v55 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v55 = v54;
            if (v55)
              v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v55);
            else
              a2 = 0;
            v56 = (HALS_Object **)(v55 + 8 * v52);
            *v56 = v47;
            v50 = v56 + 1;
            v58 = (char *)v5[5];
            v57 = (char *)v5[6];
            if (v57 == v58)
            {
              v11 = v85;
            }
            else
            {
              v11 = v85;
              do
              {
                v59 = (HALS_Object *)*((_QWORD *)v57 - 1);
                v57 -= 8;
                *--v56 = v59;
              }
              while (v57 != v58);
              v57 = (char *)v5[5];
            }
            v5[5] = v56;
            v5[6] = v50;
            v5[7] = v55 + 8 * (_QWORD)a2;
            if (v57)
              operator delete(v57);
          }
          else
          {
            *v49 = v47;
            v50 = v49 + 1;
            v11 = v85;
          }
          v5[6] = v50;
        }
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)v12 + 13) = 1;
      }
      if (++v10 == v11)
      {
        v6 = *(HALS_ObjectMap ***)(v3 + 384);
        v7 = *(char **)(v3 + 392);
        goto LABEL_71;
      }
    }
  }
  while (1)
  {
LABEL_71:
    if (v6 == (HALS_ObjectMap **)v7)
    {
      v61 = 0;
      goto LABEL_82;
    }
    v60 = *v6;
    if (*v6)
    {
      if (!*((_BYTE *)v60 + 13))
        break;
    }
    ++v6;
  }
  (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v60 + 8))(v60);
  HALS_ObjectMap::ObjectIsDead(*v6, v62);
  v61 = 1;
  if (v6 != (HALS_ObjectMap **)v7)
  {
    v63 = v6 + 1;
    if (v6 + 1 != (HALS_ObjectMap **)v7)
    {
      do
      {
        v64 = *v63;
        if (*v63 && !*((_BYTE *)v64 + 13))
        {
          (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v64 + 8))(v64);
          HALS_ObjectMap::ObjectIsDead(*v63, v65);
        }
        else
        {
          *v6++ = v64;
        }
        ++v63;
      }
      while (v63 != (HALS_ObjectMap **)v7);
      v61 = 1;
    }
  }
  v7 = (char *)v6;
LABEL_82:
  v66 = (char **)(v3 + 384);
  if (v7 != *(char **)(v3 + 392))
  {
    a2 = *(HALS_Object **)(v3 + 392);
    *(_QWORD *)(v3 + 392) = v7;
  }
  v69 = v5 + 5;
  v68 = (uint64_t *)v5[5];
  v67 = (uint64_t *)v69[1];
  if (v67 != v68)
  {
    do
    {
      v70 = *v68;
      v71 = *(_QWORD *)(v3 + 400);
      if ((unint64_t)v7 >= v71)
      {
        v72 = (v7 - *v66) >> 3;
        if ((unint64_t)(v72 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v73 = v71 - (_QWORD)*v66;
        v74 = v73 >> 2;
        if (v73 >> 2 <= (unint64_t)(v72 + 1))
          v74 = v72 + 1;
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
          v75 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v75 = v74;
        if (v75)
          v75 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v75);
        else
          a2 = 0;
        v76 = (_QWORD *)(v75 + 8 * v72);
        *v76 = v70;
        v7 = (char *)(v76 + 1);
        v78 = *(char **)(v3 + 384);
        v77 = *(char **)(v3 + 392);
        if (v77 != v78)
        {
          do
          {
            v79 = *((_QWORD *)v77 - 1);
            v77 -= 8;
            *--v76 = v79;
          }
          while (v77 != v78);
          v77 = *v66;
        }
        *(_QWORD *)(v3 + 384) = v76;
        *(_QWORD *)(v3 + 392) = v7;
        *(_QWORD *)(v3 + 400) = v75 + 8 * (_QWORD)a2;
        if (v77)
          operator delete(v77);
      }
      else
      {
        *(_QWORD *)v7 = v70;
        v7 += 8;
      }
      *(_QWORD *)(v3 + 392) = v7;
      ++v68;
    }
    while (v68 != v67);
    v61 = 1;
  }
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = v61;
  v80 = *(_QWORD *)(a1[6] + 8);
  if (v66 != (char **)(v80 + 40))
    std::vector<HALS_IOUAControl *>::__assign_with_size[abi:ne180100]<HALS_IOUAControl **,HALS_IOUAControl **>((_QWORD *)(v80 + 40), *v66, v7, (v7 - *v66) >> 3);
  v81 = *(HALS_ObjectMap ***)(v80 + 40);
  v82 = *(HALS_ObjectMap ***)(v80 + 48);
  while (v81 != v82)
  {
    v83 = *v81++;
    HALS_ObjectMap::RetainObject(v83, a2);
  }
}

void sub_1B5A94C64(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B5A94C70(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Synchronized_Mixer_Manager::get_mixer(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const AMCP::DAL::DAL_Time_Delta *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  int32x4_t v15;
  int v16;
  int v17;
  BOOL v18;
  BOOL v19;
  int v20;
  BOOL v21;
  void **v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  int8x8_t p_buf;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  _opaque_pthread_t *v38;
  mach_port_t v39;
  void *exception;
  std::string::size_type v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint8x8_t v48;
  unint64_t v49;
  int8x8_t *v50;
  unint64_t v51;
  char *v52;
  void (__cdecl **v53)(std::logic_error *__hidden);
  float v54;
  float v55;
  _BOOL8 v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void (__cdecl *v62)(std::logic_error *__hidden);
  unint64_t v63;
  uint8x8_t v64;
  unint64_t prime;
  uint8x8_t v66;
  uint64_t v67;
  void (__cdecl *v68)(std::logic_error *__hidden);
  unint64_t v69;
  void (__cdecl **v70)(std::logic_error *__hidden);
  std::logic_error_vtbl *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *size;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint8x8_t v85;
  unint64_t v86;
  _QWORD **v87;
  _QWORD *i;
  unint64_t v89;
  char *v90;
  _QWORD *v91;
  std::string *v92;
  float v93;
  float v94;
  _BOOL8 v95;
  unint64_t v96;
  unint64_t v97;
  int8x8_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  uint8x8_t v104;
  unint64_t v105;
  uint8x8_t v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  void *v121;
  unint64_t *v122;
  unint64_t v123;
  void *v124;
  __int128 v125;
  _QWORD *v126;
  int64x2_t *v127;
  std::__shared_weak_count *v128;
  __int128 v129;
  uint64_t v130;
  _BYTE v131[24];
  uint64_t v132;
  std::string v133;
  std::logic_error v134;
  std::logic_error v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  char v141;
  std::string buf;
  __int128 v143;
  const char *v144;
  int v145;
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v10 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>((_QWORD *)a2, (unsigned __int8 **)a3);
  if (v10)
  {
    v11 = v10;
    v12 = v10[7];
    v13 = *(_QWORD *)(v12 + 88);
    if (v13)
    {
      v14 = *(double *)(v13 + 8);
      v15 = *(int32x4_t *)(v13 + 16);
      v16 = *(_DWORD *)(v13 + 32);
      v17 = *(_DWORD *)(v13 + 36);
      LODWORD(v13) = *(_DWORD *)(v13 + 40);
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v15 = 0uLL;
      v14 = 0.0;
    }
    v18 = v16 == *(_DWORD *)(a4 + 24);
    v19 = v17 == *(_DWORD *)(a4 + 28);
    v20 = ~vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vceqq_s32(v15, *(int32x4_t *)(a4 + 8)), 0x1FuLL)), (int8x16_t)xmmword_1B5D68D90)) & 0xF;
    v21 = v14 == *(double *)a4 && v20 == 0;
    if (v21 && v18 && v19 && (_DWORD)v13 == *(_DWORD *)(a4 + 32))
      goto LABEL_215;
  }
  v22 = (void **)(a2 + 40);
  v23 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((_QWORD *)(a2 + 40), (unsigned __int8 *)a3);
  v126 = a1;
  if (v23)
  {
    v24 = v23;
    v25 = *((_QWORD *)v23 + 5);
    v26 = *(_QWORD *)(v25 + 48);
    v27 = *(std::__shared_weak_count **)(v25 + 56);
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(p_shared_owners);
      while (__stxr(v29 + 1, p_shared_owners));
    }
    v31 = *((_QWORD *)a5 + 3);
    p_buf = *(int8x8_t *)((char *)a5 + 32);
    if (p_buf)
    {
      v32 = (unint64_t *)(*(_QWORD *)&p_buf + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      do
        v34 = __ldaxr(v32);
      while (__stlxr(v34 - 1, v32));
      if (!v34)
      {
        (*(void (**)(int8x8_t))(**(_QWORD **)&p_buf + 16))(p_buf);
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&p_buf);
      }
    }
    if (v27)
    {
      v35 = (unint64_t *)&v27->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (v26 != v31)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v23);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      v37 = *(NSObject **)buf.__r_.__value_.__l.__data_;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        v38 = pthread_self();
        v39 = pthread_mach_thread_np(v38);
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v39;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Synchronized_Mixer_Manager.cpp";
        WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf.__r_.__value_.__r.__words[2]) = 54;
        LOWORD(v143) = 2080;
        *(_QWORD *)((char *)&v143 + 2) = "not ((*found).second->get_timebase() == buffer_size.get_clock())";
        _os_log_error_impl(&dword_1B57BA000, v37, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Wrong time base for synchronizer", (uint8_t *)&buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v141);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Wrong time base for synchronizer", (uint64_t)&v133);
      std::logic_error::logic_error(&v134, &v133);
      v134.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v135, &v134);
      v137 = 0;
      v138 = 0;
      v139 = 0;
      v140 = -1;
      v135.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v136 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v135);
      *((_QWORD *)&v143 + 1) = "Synchronizer_Ref AMCP::Graph::Synchronized_Mixer_Manager::get_synchronizer_for_node(const"
                               " Graph_Node_UID &, const DAL::DAL_Time_Delta &)";
      v144 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Synchronized_Mixer_Manager.cpp";
      v145 = 54;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v129);
      *(_QWORD *)v131 = off_1E69A20A0;
      *(_OWORD *)&v131[8] = v129;
      v132 = v130;
      v129 = 0uLL;
      v130 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)v131);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&buf);
    }
    goto LABEL_125;
  }
  v41 = *((_QWORD *)a5 + 4);
  v133.__r_.__value_.__r.__words[0] = *((_QWORD *)a5 + 3);
  v133.__r_.__value_.__l.__size_ = v41;
  if (v41)
  {
    v42 = (unint64_t *)(v41 + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v44 = (uint64_t)operator new(0xC8uLL);
  *(_QWORD *)(v44 + 8) = 0;
  *(_QWORD *)(v44 + 16) = 0;
  *(_QWORD *)v44 = &off_1E6983F18;
  *(_QWORD *)v131 = AMCP::DAL::Synchronizer::Synchronizer(v44 + 24, &v133);
  *(_QWORD *)&v131[8] = v44;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    buf = *(std::string *)a3;
  p_buf = (int8x8_t)&buf;
  v125 = *(_OWORD *)v131;
  v143 = *(_OWORD *)v131;
  *(_OWORD *)v131 = 0uLL;
  v45 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&buf);
  v46 = v45;
  v47 = *(_QWORD *)(a2 + 48);
  if (!v47)
    goto LABEL_56;
  v48 = (uint8x8_t)vcnt_s8((int8x8_t)v47);
  v48.i16[0] = vaddlv_u8(v48);
  v49 = v48.u32[0];
  if (v48.u32[0] > 1uLL)
  {
    v44 = v45;
    if (v45 >= v47)
      v44 = v45 % v47;
  }
  else
  {
    v44 = (v47 - 1) & v45;
  }
  v50 = (int8x8_t *)*((_QWORD *)*v22 + v44);
  if (!v50)
  {
LABEL_56:
    v52 = (char *)operator new(0x38uLL);
    v53 = (void (__cdecl **)(std::logic_error *__hidden))(a2 + 56);
    v135.__vftable = (std::logic_error_vtbl *)v52;
    v135.__imp_.__imp_ = (const char *)(a2 + 56);
    *(_QWORD *)v52 = 0;
    *((_QWORD *)v52 + 1) = v46;
    *(std::string *)(v52 + 16) = buf;
    memset(&buf, 0, sizeof(buf));
    *(_OWORD *)(v52 + 40) = v125;
    v143 = 0uLL;
    LOBYTE(v136) = 1;
    v54 = (float)(unint64_t)(*(_QWORD *)(a2 + 64) + 1);
    v55 = *(float *)(a2 + 72);
    if (v47 && (float)(v55 * (float)v47) >= v54)
    {
LABEL_102:
      v70 = (void (__cdecl **)(std::logic_error *__hidden))*((_QWORD *)*v22 + v44);
      v71 = v135.__vftable;
      if (v70)
      {
        v135.~logic_error = *v70;
      }
      else
      {
        v135.~logic_error = *v53;
        *v53 = (void (__cdecl *)(std::logic_error *__hidden))v71;
        *((_QWORD *)*v22 + v44) = v53;
        if (!v71->~logic_error)
        {
LABEL_111:
          v135.__vftable = 0;
          ++*(_QWORD *)(a2 + 64);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v135);
          goto LABEL_112;
        }
        v72 = *((_QWORD *)v71->~logic_error + 1);
        if ((v47 & (v47 - 1)) != 0)
        {
          if (v72 >= v47)
            v72 %= v47;
        }
        else
        {
          v72 &= v47 - 1;
        }
        v70 = (void (__cdecl **)(std::logic_error *__hidden))((char *)*v22 + 8 * v72);
      }
      *v70 = (void (__cdecl *)(std::logic_error *__hidden))v71;
      goto LABEL_111;
    }
    v56 = 1;
    if (v47 >= 3)
      v56 = (v47 & (v47 - 1)) != 0;
    v57 = v56 | (2 * v47);
    v58 = vcvtps_u32_f32(v54 / v55);
    if (v57 <= v58)
      p_buf = (int8x8_t)v58;
    else
      p_buf = (int8x8_t)v57;
    if (*(_QWORD *)&p_buf == 1)
    {
      p_buf = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&p_buf & (*(_QWORD *)&p_buf - 1)) != 0)
    {
      p_buf = (int8x8_t)std::__next_prime(*(_QWORD *)&p_buf);
      v47 = *(_QWORD *)(a2 + 48);
    }
    if (*(_QWORD *)&p_buf > v47)
      goto LABEL_68;
    if (*(_QWORD *)&p_buf < v47)
    {
      prime = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 64) / *(float *)(a2 + 72));
      if (v47 < 3 || (v66 = (uint8x8_t)vcnt_s8((int8x8_t)v47), v66.i16[0] = vaddlv_u8(v66), v66.u32[0] > 1uLL))
      {
        prime = std::__next_prime(prime);
      }
      else
      {
        v67 = 1 << -(char)__clz(prime - 1);
        if (prime >= 2)
          prime = v67;
      }
      if (*(_QWORD *)&p_buf <= prime)
        p_buf = (int8x8_t)prime;
      if (*(_QWORD *)&p_buf >= v47)
      {
        v47 = *(_QWORD *)(a2 + 48);
      }
      else
      {
        if (p_buf)
        {
LABEL_68:
          if (*(_QWORD *)&p_buf >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v59 = operator new(8 * *(_QWORD *)&p_buf);
          v60 = *v22;
          *v22 = v59;
          if (v60)
            operator delete(v60);
          v61 = 0;
          *(int8x8_t *)(a2 + 48) = p_buf;
          do
            *((_QWORD *)*v22 + v61++) = 0;
          while (*(_QWORD *)&p_buf != v61);
          v62 = *v53;
          if (*v53)
          {
            v63 = *((_QWORD *)v62 + 1);
            v64 = (uint8x8_t)vcnt_s8(p_buf);
            v64.i16[0] = vaddlv_u8(v64);
            if (v64.u32[0] > 1uLL)
            {
              if (v63 >= *(_QWORD *)&p_buf)
                v63 %= *(_QWORD *)&p_buf;
            }
            else
            {
              v63 &= *(_QWORD *)&p_buf - 1;
            }
            *((_QWORD *)*v22 + v63) = v53;
            v68 = *(void (__cdecl **)(std::logic_error *__hidden))v62;
            if (*(_QWORD *)v62)
            {
              do
              {
                v69 = *((_QWORD *)v68 + 1);
                if (v64.u32[0] > 1uLL)
                {
                  if (v69 >= *(_QWORD *)&p_buf)
                    v69 %= *(_QWORD *)&p_buf;
                }
                else
                {
                  v69 &= *(_QWORD *)&p_buf - 1;
                }
                if (v69 != v63)
                {
                  if (!*((_QWORD *)*v22 + v69))
                  {
                    *((_QWORD *)*v22 + v69) = v62;
                    goto LABEL_93;
                  }
                  *(_QWORD *)v62 = *(_QWORD *)v68;
                  *(_QWORD *)v68 = **((_QWORD **)*v22 + v69);
                  **((_QWORD **)*v22 + v69) = v68;
                  v68 = v62;
                }
                v69 = v63;
LABEL_93:
                v62 = v68;
                v68 = *(void (__cdecl **)(std::logic_error *__hidden))v68;
                v63 = v69;
              }
              while (v68);
            }
          }
          v47 = (unint64_t)p_buf;
          goto LABEL_97;
        }
        v124 = *v22;
        *v22 = 0;
        if (v124)
          operator delete(v124);
        v47 = 0;
        *(_QWORD *)(a2 + 48) = 0;
      }
    }
LABEL_97:
    if ((v47 & (v47 - 1)) != 0)
    {
      if (v46 >= v47)
        v44 = v46 % v47;
      else
        v44 = v46;
    }
    else
    {
      v44 = (v47 - 1) & v46;
    }
    goto LABEL_102;
  }
  p_buf = *v50;
  if (!*(_QWORD *)v50)
  {
LABEL_55:
    p_buf = (int8x8_t)&buf;
    goto LABEL_56;
  }
  while (1)
  {
    v51 = *(_QWORD *)(*(_QWORD *)&p_buf + 8);
    if (v51 == v46)
      break;
    if (v49 > 1)
    {
      if (v51 >= v47)
        v51 %= v47;
    }
    else
    {
      v51 &= v47 - 1;
    }
    if (v51 != v44)
      goto LABEL_55;
LABEL_54:
    p_buf = **(int8x8_t **)&p_buf;
    if (!*(_QWORD *)&p_buf)
      goto LABEL_55;
  }
  if (!std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((unsigned __int8 *)(*(_QWORD *)&p_buf + 16), (unsigned __int8 *)&buf))goto LABEL_54;
  if (*((_QWORD *)&v125 + 1))
  {
    v122 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v125 + 1) + 16))(*((_QWORD *)&v125 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v125 + 1));
    }
  }
LABEL_112:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (*(_QWORD *)&v131[8])
  {
    v73 = (unint64_t *)(*(_QWORD *)&v131[8] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v131[8] + 16))(*(_QWORD *)&v131[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v131[8]);
    }
  }
  size = (std::__shared_weak_count *)v133.__r_.__value_.__l.__size_;
  if (v133.__r_.__value_.__l.__size_)
  {
    v76 = (unint64_t *)(v133.__r_.__value_.__l.__size_ + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((_QWORD *)(a2 + 40), (unsigned __int8 *)a3);
LABEL_125:
  v78 = (std::__shared_weak_count *)*((_QWORD *)v24 + 6);
  v127 = (int64x2_t *)*((_QWORD *)v24 + 5);
  v128 = v78;
  if (v78)
  {
    v79 = (unint64_t *)&v78->__shared_owners_;
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
  }
  v81 = operator new(0xB8uLL);
  v81[1] = 0;
  v81[2] = 0;
  *v81 = &off_1E6983EC8;
  *(_QWORD *)v131 = AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer((uint64_t)(v81 + 3), (const CA::StreamDescription *)a4, a5, &v127);
  *(_QWORD *)&v131[8] = v81;
  v82 = std::hash<AMCP::Terminal_Identifier>::operator()(a3);
  v83 = v82;
  v84 = *(_QWORD *)(a2 + 8);
  if (v84)
  {
    v85 = (uint8x8_t)vcnt_s8((int8x8_t)v84);
    v85.i16[0] = vaddlv_u8(v85);
    v86 = v85.u32[0];
    if (v85.u32[0] > 1uLL)
    {
      p_buf = (int8x8_t)v82;
      if (v82 >= v84)
        p_buf = (int8x8_t)(v82 % v84);
    }
    else
    {
      p_buf = (int8x8_t)((v84 - 1) & v82);
    }
    v87 = *(_QWORD ***)(*(_QWORD *)a2 + 8 * *(_QWORD *)&p_buf);
    if (v87)
    {
      for (i = *v87; i; i = (_QWORD *)*i)
      {
        v89 = i[1];
        if (v89 == v83)
        {
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)(i + 2);
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)(i + 5);
          buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(i + 6);
          v135.__vftable = (std::logic_error_vtbl *)a3;
          v135.__imp_.__imp_ = (const char *)(a3 + 24);
          v136 = (void *)(a3 + 32);
          if (std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&buf, (unsigned __int8 ***)&v135))
          {
            goto LABEL_204;
          }
        }
        else
        {
          if (v86 > 1)
          {
            if (v89 >= v84)
              v89 %= v84;
          }
          else
          {
            v89 &= v84 - 1;
          }
          if (v89 != *(_QWORD *)&p_buf)
            break;
        }
      }
    }
  }
  v90 = (char *)operator new(0x48uLL);
  v91 = (_QWORD *)(a2 + 16);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
  buf.__r_.__value_.__l.__size_ = a2 + 16;
  buf.__r_.__value_.__s.__data_[16] = 0;
  *(_QWORD *)v90 = 0;
  *((_QWORD *)v90 + 1) = v83;
  v92 = (std::string *)(v90 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v92, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v92->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v90 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_QWORD *)v90 + 5) = *(_QWORD *)(a3 + 24);
  *((_DWORD *)v90 + 12) = *(_DWORD *)(a3 + 32);
  *((_QWORD *)v90 + 7) = 0;
  *((_QWORD *)v90 + 8) = 0;
  buf.__r_.__value_.__s.__data_[16] = 1;
  v93 = (float)(unint64_t)(*(_QWORD *)(a2 + 24) + 1);
  v94 = *(float *)(a2 + 32);
  if (!v84 || (float)(v94 * (float)v84) < v93)
  {
    v95 = 1;
    if (v84 >= 3)
      v95 = (v84 & (v84 - 1)) != 0;
    v96 = v95 | (2 * v84);
    v97 = vcvtps_u32_f32(v93 / v94);
    if (v96 <= v97)
      v98 = (int8x8_t)v97;
    else
      v98 = (int8x8_t)v96;
    if (*(_QWORD *)&v98 == 1)
    {
      v98 = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&v98 & (*(_QWORD *)&v98 - 1)) != 0)
    {
      v98 = (int8x8_t)std::__next_prime(*(_QWORD *)&v98);
    }
    v84 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)&v98 <= v84)
    {
      if (*(_QWORD *)&v98 < v84)
      {
        v105 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
        if (v84 < 3 || (v106 = (uint8x8_t)vcnt_s8((int8x8_t)v84), v106.i16[0] = vaddlv_u8(v106), v106.u32[0] > 1uLL))
        {
          v105 = std::__next_prime(v105);
        }
        else
        {
          v107 = 1 << -(char)__clz(v105 - 1);
          if (v105 >= 2)
            v105 = v107;
        }
        if (*(_QWORD *)&v98 <= v105)
          v98 = (int8x8_t)v105;
        if (*(_QWORD *)&v98 >= v84)
        {
          v84 = *(_QWORD *)(a2 + 8);
        }
        else
        {
          if (v98)
            goto LABEL_160;
          v121 = *(void **)a2;
          *(_QWORD *)a2 = 0;
          if (v121)
            operator delete(v121);
          v84 = 0;
          *(_QWORD *)(a2 + 8) = 0;
        }
      }
    }
    else
    {
LABEL_160:
      if (*(_QWORD *)&v98 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v99 = operator new(8 * *(_QWORD *)&v98);
      v100 = *(void **)a2;
      *(_QWORD *)a2 = v99;
      if (v100)
        operator delete(v100);
      v101 = 0;
      *(int8x8_t *)(a2 + 8) = v98;
      do
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v101++) = 0;
      while (*(_QWORD *)&v98 != v101);
      v102 = (_QWORD *)*v91;
      if (*v91)
      {
        v103 = v102[1];
        v104 = (uint8x8_t)vcnt_s8(v98);
        v104.i16[0] = vaddlv_u8(v104);
        if (v104.u32[0] > 1uLL)
        {
          if (v103 >= *(_QWORD *)&v98)
            v103 %= *(_QWORD *)&v98;
        }
        else
        {
          v103 &= *(_QWORD *)&v98 - 1;
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v103) = v91;
        v108 = (_QWORD *)*v102;
        if (*v102)
        {
          do
          {
            v109 = v108[1];
            if (v104.u32[0] > 1uLL)
            {
              if (v109 >= *(_QWORD *)&v98)
                v109 %= *(_QWORD *)&v98;
            }
            else
            {
              v109 &= *(_QWORD *)&v98 - 1;
            }
            if (v109 != v103)
            {
              if (!*(_QWORD *)(*(_QWORD *)a2 + 8 * v109))
              {
                *(_QWORD *)(*(_QWORD *)a2 + 8 * v109) = v102;
                goto LABEL_185;
              }
              *v102 = *v108;
              *v108 = **(_QWORD **)(*(_QWORD *)a2 + 8 * v109);
              **(_QWORD **)(*(_QWORD *)a2 + 8 * v109) = v108;
              v108 = v102;
            }
            v109 = v103;
LABEL_185:
            v102 = v108;
            v108 = (_QWORD *)*v108;
            v103 = v109;
          }
          while (v108);
        }
      }
      v84 = (unint64_t)v98;
    }
    if ((v84 & (v84 - 1)) != 0)
    {
      if (v83 >= v84)
        p_buf = (int8x8_t)(v83 % v84);
      else
        p_buf = (int8x8_t)v83;
    }
    else
    {
      p_buf = (int8x8_t)((v84 - 1) & v83);
    }
  }
  v110 = *(_QWORD **)(*(_QWORD *)a2 + 8 * *(_QWORD *)&p_buf);
  i = (_QWORD *)buf.__r_.__value_.__r.__words[0];
  if (v110)
  {
    *(_QWORD *)buf.__r_.__value_.__l.__data_ = *v110;
    goto LABEL_202;
  }
  *(_QWORD *)buf.__r_.__value_.__l.__data_ = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a2 + 8 * *(_QWORD *)&p_buf) = v91;
  if (*i)
  {
    v111 = *(_QWORD *)(*i + 8);
    if ((v84 & (v84 - 1)) != 0)
    {
      if (v111 >= v84)
        v111 %= v84;
    }
    else
    {
      v111 &= v84 - 1;
    }
    v110 = (_QWORD *)(*(_QWORD *)a2 + 8 * v111);
LABEL_202:
    *v110 = i;
  }
  buf.__r_.__value_.__r.__words[0] = 0;
  ++*(_QWORD *)(a2 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::shared_ptr<AMCP::DAL::Synchronized_Mixer>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::shared_ptr<AMCP::DAL::Synchronized_Mixer>>,void *>>>>::reset[abi:ne180100]((uint64_t)&buf);
LABEL_204:
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)(i + 7), (__int128 *)v131);
  v112 = *(std::__shared_weak_count **)&v131[8];
  a1 = v126;
  if (*(_QWORD *)&v131[8])
  {
    v113 = (unint64_t *)(*(_QWORD *)&v131[8] + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v11 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>((_QWORD *)a2, (unsigned __int8 **)a3);
  v115 = v128;
  if (v128)
  {
    v116 = (unint64_t *)&v128->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v12 = v11[7];
LABEL_215:
  v118 = v11[8];
  *a1 = v12;
  a1[1] = v118;
  if (v118)
  {
    v119 = (unint64_t *)(v118 + 8);
    do
      v120 = __ldxr(v119);
    while (__stxr(v120 + 1, v119));
  }
}

void sub_1B5A95A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::shared_ptr<AMCP::DAL::Synchronized_Mixer>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::shared_ptr<AMCP::DAL::Synchronized_Mixer>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::Terminal_Identifier const,std::shared_ptr<AMCP::DAL::Synchronized_Mixer>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<AMCP::DAL::Synchronized_Mixer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6983EC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::DAL::Synchronized_Mixer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6983EC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::DAL::Synchronized_Mixer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__split_buffer<AMCP::Terminal_Identifier>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 5;
      *(_QWORD *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void AMCP::Graph::Synchronized_Mixer_Manager::get_anchor_time(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  double sample_time;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  AMCP::Log::Scope_Registry *v16;
  char v17;
  BOOL v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *i;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _BOOL4 v27;
  BOOL v28;
  unint64_t *v29;
  unint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  BOOL v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t *j;
  std::logic_error *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  const char *imp;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _BOOL4 v86;
  std::string *v87;
  std::string::size_type *p_size;
  std::string::size_type *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  NSObject *v93;
  _opaque_pthread_t *v94;
  mach_port_t v95;
  double v96;
  std::logic_error_vtbl *v97;
  const char *v98;
  unint64_t *v99;
  unint64_t v100;
  double v101;
  char v102;
  void *exception;
  double v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  double v109;
  char v110;
  std::string v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  std::logic_error v118;
  std::logic_error v119;
  void *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  int v124;
  char v125;
  uint64_t (**v126)();
  __int128 v127;
  __int128 v128;
  _BYTE buf[24];
  _BYTE v130[40];
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v6 = mach_absolute_time();
  v7 = *(_OWORD *)a3;
  v8 = a3[1];
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_DWORD *)a1 = 1;
  a1[1] = 0;
  a1[2] = v6;
  *(_OWORD *)(a1 + 3) = v7;
  sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
  v12 = a1[3];
  v13 = (std::__shared_weak_count *)a1[4];
  *(_QWORD *)buf = v12;
  *(_QWORD *)&buf[8] = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 136))(v12);
  v18 = round(sample_time) >= round(*(double *)&v16) || v17 == 0;
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v18)
  {
    AMCP::Log::Scope_Registry::get(v16);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v93 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
    {
      v94 = pthread_self();
      v95 = pthread_mach_thread_np(v94);
      v96 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
      v97 = (std::logic_error_vtbl *)a1[3];
      v98 = (const char *)a1[4];
      v119.__vftable = v97;
      v119.__imp_.__imp_ = v98;
      if (v98)
      {
        v99 = (unint64_t *)(v98 + 8);
        do
          v100 = __ldxr(v99);
        while (__stxr(v100 + 1, v99));
      }
      v101 = COERCE_DOUBLE((*((uint64_t (**)(std::logic_error_vtbl *))v97->~logic_error + 17))(v97));
      if (!v102)
        std::__throw_bad_optional_access[abi:ne180100]();
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v95;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Synchronized_Mixer_Manager.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 116;
      *(_WORD *)v130 = 2080;
      *(_QWORD *)&v130[2] = "not (anchor_time.get_sample_time() >= anchor_time.get_clock()->get_anchor_time())";
      *(_WORD *)&v130[10] = 2048;
      *(_QWORD *)&v130[12] = vcvtmd_s64_f64(v96);
      *(_WORD *)&v130[20] = 2048;
      *(_QWORD *)&v130[22] = vcvtmd_s64_f64(v101);
      _os_log_error_impl(&dword_1B57BA000, v93, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Manifest anchor time should not represent a time before the timebase's anchor time: time(%lld) anchor(%lld)", buf, 0x36u);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v119);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v125);
    exception = __cxa_allocate_exception(0x40uLL);
    v104 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
    v105 = a1[3];
    v106 = a1[4];
    v116 = v105;
    v117 = v106;
    if (v106)
    {
      v107 = (unint64_t *)(v106 + 8);
      do
        v108 = __ldxr(v107);
      while (__stxr(v108 + 1, v107));
    }
    v109 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 136))(v105));
    if (!v110)
      std::__throw_bad_optional_access[abi:ne180100]();
    caulk::make_string((caulk *)"Manifest anchor time should not represent a time before the timebase's anchor time: time(%lld) anchor(%lld)", (uint64_t)&v111, vcvtmd_s64_f64(v104), vcvtmd_s64_f64(v109));
    std::logic_error::logic_error(&v118, &v111);
    v118.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v119, &v118);
    v121 = 0;
    v122 = 0;
    v123 = 0;
    v124 = -1;
    v119.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v120 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v119);
    *(_QWORD *)&v130[8] = "DAL::DAL_Time AMCP::Graph::Synchronized_Mixer_Manager::get_anchor_time(const Timebase_Ref &) const";
    *(_QWORD *)&v130[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Synchronized_Mixer_Manager.cpp";
    *(_DWORD *)&v130[24] = 116;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v114);
    v127 = v114;
    v126 = off_1E69A20A0;
    *(_QWORD *)&v128 = v115;
    v114 = 0uLL;
    v115 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v126);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  for (i = *(_QWORD **)(a2 + 56); i; i = (_QWORD *)*i)
  {
    v22 = i[5];
    v23 = *(_QWORD *)(v22 + 48);
    v24 = *(std::__shared_weak_count **)(v22 + 56);
    *(_QWORD *)buf = v23;
    *(_QWORD *)&buf[8] = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = (*a3 | v23) == 0;
    if (*a3)
      v28 = v23 == 0;
    else
      v28 = 1;
    if (v28)
      goto LABEL_25;
    v31 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
    v33 = v31[23];
    if ((v33 & 0x80u) == 0)
      v34 = v31[23];
    else
      v34 = *((_QWORD *)v31 + 1);
    v35 = *(unsigned __int8 *)(v32 + 23);
    v36 = (char)v35;
    if ((v35 & 0x80u) != 0)
      v35 = *(_QWORD *)(v32 + 8);
    if (v34 == v35)
    {
      if (v36 >= 0)
        v37 = (unsigned __int8 *)v32;
      else
        v37 = *(unsigned __int8 **)v32;
      if ((v33 & 0x80) != 0)
      {
        v27 = memcmp(*(const void **)v31, v37, *((_QWORD *)v31 + 1)) == 0;
        goto LABEL_25;
      }
      if (v31[23])
      {
        v38 = v33 - 1;
        do
        {
          v40 = *v31++;
          v39 = v40;
          v42 = *v37++;
          v41 = v42;
          v44 = v38-- != 0;
          v27 = v39 == v41;
        }
        while (v39 == v41 && v44);
LABEL_25:
        if (v24)
          goto LABEL_26;
        goto LABEL_49;
      }
      v27 = 1;
      if (v24)
      {
LABEL_26:
        v29 = (unint64_t *)&v24->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      v27 = 0;
      if (v24)
        goto LABEL_26;
    }
LABEL_49:
    if (v27)
    {
      v45 = i[5];
      os_unfair_lock_lock((os_unfair_lock_t)v45);
      AMCP::DAL::Synchronizer::_get_pending_time_range((AMCP::DAL::Synchronizer *)buf, v45);
      v111 = *(std::string *)&v130[16];
      v112 = v131;
      v113 = v132;
      if (v132)
      {
        v46 = (unint64_t *)&v132->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
        v48 = v132;
        if (v132)
        {
          v49 = (unint64_t *)&v132->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
      }
      v51 = *(std::__shared_weak_count **)&v130[8];
      if (*(_QWORD *)&v130[8])
      {
        v52 = (unint64_t *)(*(_QWORD *)&v130[8] + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      for (j = *(uint64_t **)(v45 + 24); j; j = (uint64_t *)*j)
      {
        v55 = (std::logic_error *)(j + 20);
        if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(j + 15), (AMCP::DAL::DAL_Time *)(j + 20))
          && !*((_BYTE *)j + 200))
        {
          v56 = (std::__shared_weak_count *)j[19];
          if (v56)
          {
            v57 = (unint64_t *)&v56->__shared_owners_;
            do
              v58 = __ldxr(v57);
            while (__stxr(v58 + 1, v57));
          }
          v119 = *v55;
          v120 = (void *)j[22];
          v59 = j[23];
          v60 = (std::__shared_weak_count *)j[24];
          if (v60)
          {
            v61 = (unint64_t *)&v60->__shared_owners_;
            do
              v62 = __ldxr(v61);
            while (__stxr(v62 + 1, v61));
            *(std::logic_error *)buf = v119;
            *(_QWORD *)&buf[16] = v120;
            *(_QWORD *)v130 = v59;
            *(_QWORD *)&v130[8] = v60;
            do
              v63 = __ldxr(v61);
            while (__stxr(v63 + 1, v61));
            do
              v64 = __ldaxr(v61);
            while (__stlxr(v64 - 1, v61));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          else
          {
            *(std::logic_error *)buf = *v55;
            *(_QWORD *)&buf[16] = j[22];
            *(_OWORD *)v130 = v59;
          }
          if (v56)
          {
            v65 = (unint64_t *)&v56->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          v119 = (std::logic_error)*((_OWORD *)j + 13);
          v67 = j[29];
          v120 = (void *)j[28];
          v121 = v67;
          v68 = (std::__shared_weak_count *)j[30];
          v122 = v68;
          if (v68)
          {
            v69 = (unint64_t *)&v68->__shared_owners_;
            do
              v70 = __ldxr(v69);
            while (__stxr(v70 + 1, v69));
          }
          if (((uint64_t)v119.__vftable & 2) == 0)
            AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v119);
          imp = v119.__imp_.__imp_;
          v114 = *(_OWORD *)v130;
          if (*(_QWORD *)&v130[8])
          {
            v72 = (unint64_t *)(*(_QWORD *)&v130[8] + 8);
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          LODWORD(v126) = 2;
          v127 = (unint64_t)imp;
          v128 = v114;
          v114 = 0uLL;
          AMCP::DAL::DAL_Time::operator+=((AMCP::DAL::DAL_Time *)buf, (uint64_t)&v126);
          v74 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
          if (*((_QWORD *)&v128 + 1))
          {
            v75 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
          v77 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
          if (*((_QWORD *)&v114 + 1))
          {
            v78 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
          if (!AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)(v45 + 104))
            && AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v111, (AMCP::DAL::DAL_Time *)buf))
          {
            LODWORD(v111.__r_.__value_.__l.__data_) = *(_DWORD *)buf;
            *(_OWORD *)&v111.__r_.__value_.__r.__words[1] = *(_OWORD *)&buf[8];
            std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v112, *(uint64_t *)v130, *(uint64_t *)&v130[8]);
          }
          v80 = v122;
          if (v122)
          {
            v81 = (unint64_t *)&v122->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          v83 = *(std::__shared_weak_count **)&v130[8];
          if (*(_QWORD *)&v130[8])
          {
            v84 = (unint64_t *)(*(_QWORD *)&v130[8] + 8);
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 - 1, v84));
            if (!v85)
            {
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              std::__shared_weak_count::__release_weak(v83);
            }
          }
        }
      }
      os_unfair_lock_unlock((os_unfair_lock_t)v45);
      v86 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a1, (AMCP::DAL::DAL_Time *)&v111);
      if (v86)
        v87 = &v111;
      else
        v87 = (std::string *)a1;
      *(_DWORD *)a1 = v87->__r_.__value_.__l.__data_;
      p_size = &v111.__r_.__value_.__l.__size_;
      if (!v86)
        p_size = a1 + 1;
      a1[1] = *p_size;
      v89 = &v111.__r_.__value_.__r.__words[2];
      if (!v86)
        v89 = a1 + 2;
      a1[2] = *v89;
      std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](a1 + 3, (uint64_t)v87[1].__r_.__value_.__l.__data_, v87[1].__r_.__value_.__l.__size_);
      v90 = v113;
      if (v113)
      {
        v91 = (unint64_t *)&v113->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
    }
  }
  if ((*(_DWORD *)a1 & 0xFFFFFFFE) == 2)
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
}

void sub_1B5A96838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *__p)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a16);
  _Unwind_Resume(a1);
}

void AMCP::DAL::DAL_Time::validate(AMCP::DAL::DAL_Time *this)
{
  AMCP::Log::Scope_Registry *v2;
  int v3;
  NSObject *v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  void *v7;
  AMCP::Log::Scope_Registry *v8;
  char v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  NSObject *v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  void *exception;
  __int128 v20;
  uint64_t v21;
  uint64_t (**v22)();
  __int128 v23;
  uint64_t v24;
  std::string v25;
  std::logic_error v26;
  std::logic_error v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  uint8_t buf[8];
  _BYTE v35[10];
  __int16 v36;
  int v37;
  __int16 v38;
  _BYTE v39[14];
  const char *v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v2 = (AMCP::Log::Scope_Registry *)*((_QWORD *)this + 3);
  if (!v2)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v16 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = pthread_self();
      v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v18;
      *(_WORD *)v35 = 2080;
      *(_QWORD *)&v35[2] = "DAL_Time.cpp";
      v36 = 1024;
      v37 = 96;
      v38 = 2080;
      *(_QWORD *)v39 = "not (m_timebase != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to translate times with an invalid clock", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v33);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to translate times with an invalid clock", (uint64_t)&v25);
    std::logic_error::logic_error(&v26, &v25);
    v26.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v27, &v26);
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = -1;
    v27.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v28 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
    *(_QWORD *)&v39[6] = "void AMCP::DAL::DAL_Time::validate() const";
    v40 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    v41 = 96;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v20);
    v23 = v20;
    v24 = v21;
    v20 = 0uLL;
    v21 = 0;
    v22 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v22);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v3 = *(_DWORD *)this;
  if (*(_DWORD *)this == 1)
  {
    *((double *)this + 1) = (*(double (**)(AMCP::Log::Scope_Registry *, _QWORD))(*(_QWORD *)v2 + 64))(v2, *((_QWORD *)this + 2));
    v8 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 136))(*((_QWORD *)this + 3));
    if (v9 && round(*((double *)this + 1)) < round(*(double *)&v8) && *((_QWORD *)this + 2))
    {
      AMCP::Log::Scope_Registry::get(v8);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v10 = *(std::__shared_weak_count **)v35;
      v11 = **(NSObject ***)buf;
      if (*(_QWORD *)v35)
      {
        v12 = (unint64_t *)(*(_QWORD *)v35 + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v14 = pthread_self();
        v15 = pthread_mach_thread_np(v14);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v15;
        *(_WORD *)v35 = 2080;
        *(_QWORD *)&v35[2] = "DAL_Time.cpp";
        v36 = 1024;
        v37 = 107;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d We somehow are dealing with a time before the timebase's valid time region", buf, 0x18u);
      }
    }
  }
  else if (v3 == 2)
  {
    *((_QWORD *)this + 2) = (*(uint64_t (**)(AMCP::Log::Scope_Registry *, double))(*(_QWORD *)v2 + 56))(v2, *((double *)this + 1));
  }
  else if (!v3)
  {
    AMCP::Log::Scope_Registry::get(v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v4 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = pthread_self();
      v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v6;
      *(_WORD *)v35 = 2080;
      *(_QWORD *)&v35[2] = "DAL_Time.cpp";
      v36 = 1024;
      v37 = 97;
      v38 = 2080;
      *(_QWORD *)v39 = "not (m_valid_types != Valid_Types::Invalid)";
      _os_log_error_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to validate time with an invalid clock", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v33);
    v7 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to validate time with an invalid clock", (uint64_t)&v25);
    std::logic_error::logic_error(&v26, &v25);
    v26.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v27, &v26);
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = -1;
    v27.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v28 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
    *(_QWORD *)&v39[6] = "void AMCP::DAL::DAL_Time::validate() const";
    v40 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    v41 = 97;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v20);
    v23 = v20;
    v24 = v21;
    v20 = 0uLL;
    v21 = 0;
    v22 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v22);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v7, (uint64_t)buf);
  }
  *(_DWORD *)this = 3;
}

void sub_1B5A96FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 112) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 104);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 104) = 0;
  MEMORY[0x1B5E500E8](v29 - 128);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 129));
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::DAL_Time::get_host_time(AMCP::DAL::DAL_Time *this)
{
  NSObject *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  void *exception;
  __int128 v7;
  uint64_t v8;
  uint64_t (**v9)();
  __int128 v10;
  uint64_t v11;
  std::string v12;
  std::logic_error v13;
  std::logic_error v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint8_t buf[8];
  __int16 v22;
  char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _BYTE v27[14];
  const char *v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)this)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v3 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = pthread_self();
      v5 = pthread_mach_thread_np(v4);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v5;
      v22 = 2080;
      v23 = "DAL_Time.cpp";
      v24 = 1024;
      v25 = 71;
      v26 = 2080;
      *(_QWORD *)v27 = "not (m_valid_types != Valid_Types::Invalid)";
      _os_log_error_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to get host time with an invalid clock", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to get host time with an invalid clock", (uint64_t)&v12);
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v14, &v13);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v15 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(_QWORD *)&v27[6] = "uint64_t AMCP::DAL::DAL_Time::get_host_time() const";
    v28 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    v29 = 71;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    v10 = v7;
    v11 = v8;
    v7 = 0uLL;
    v8 = 0;
    v9 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v9);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if ((*(_DWORD *)this & 1) == 0)
    AMCP::DAL::DAL_Time::validate(this);
  return *((_QWORD *)this + 2);
}

void sub_1B5A9736C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

double AMCP::DAL::DAL_Time::get_sample_time(AMCP::DAL::DAL_Time *this)
{
  NSObject *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  void *exception;
  __int128 v7;
  uint64_t v8;
  uint64_t (**v9)();
  __int128 v10;
  uint64_t v11;
  std::string v12;
  std::logic_error v13;
  std::logic_error v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint8_t buf[8];
  __int16 v22;
  char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _BYTE v27[14];
  const char *v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)this)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v3 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = pthread_self();
      v5 = pthread_mach_thread_np(v4);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v5;
      v22 = 2080;
      v23 = "DAL_Time.cpp";
      v24 = 1024;
      v25 = 84;
      v26 = 2080;
      *(_QWORD *)v27 = "not (m_valid_types != Valid_Types::Invalid)";
      _os_log_error_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to get sample time with an invalid clock", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to get sample time with an invalid clock", (uint64_t)&v12);
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v14, &v13);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v15 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(_QWORD *)&v27[6] = "Sample_Time AMCP::DAL::DAL_Time::get_sample_time() const";
    v28 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    v29 = 84;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    v10 = v7;
    v11 = v8;
    v7 = 0uLL;
    v8 = 0;
    v9 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v9);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if ((*(_DWORD *)this & 2) == 0)
    AMCP::DAL::DAL_Time::validate(this);
  return *((double *)this + 1);
}

void sub_1B5A97678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

BOOL AMCP::DAL::DAL_Time::operator==(AMCP::DAL::DAL_Time *this, AMCP::DAL::DAL_Time *a2)
{
  BOOL v2;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *v18;
  NSObject *v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  void *exception;
  __int128 v23;
  uint64_t v24;
  uint64_t (**v25)();
  __int128 v26;
  uint64_t v27;
  std::string v28;
  std::logic_error v29;
  std::logic_error v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint8_t buf[8];
  __int16 v38;
  char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  _BYTE v43[14];
  const char *v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)this)
    v2 = *(_DWORD *)a2 == 0;
  else
    v2 = 1;
  if (v2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v20 = pthread_self();
      v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v21;
      v38 = 2080;
      v39 = "DAL_Time.cpp";
      v40 = 1024;
      v41 = 149;
      v42 = 2080;
      *(_QWORD *)v43 = "not (not (m_valid_types == Valid_Types::Invalid or t.m_valid_types == Valid_Types::Invalid))";
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v28);
    std::logic_error::logic_error(&v29, &v28);
    v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v30, &v29);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = -1;
    v30.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v31 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
    *(_QWORD *)&v43[6] = "BOOL AMCP::DAL::DAL_Time::operator==(const DAL_Time &) const";
    v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    v45 = 149;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
    v26 = v23;
    v27 = v24;
    v23 = 0uLL;
    v24 = 0;
    v25 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v25);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)a2 + 3);
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (v5 | v6)
      goto LABEL_32;
  }
  else
  {
    v8 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 16))(v5);
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 3) + 16))(*((_QWORD *)a2 + 3));
    v9 = v8[23];
    if ((v9 & 0x80u) == 0)
      v10 = v8[23];
    else
      v10 = *((_QWORD *)v8 + 1);
    v11 = *(unsigned __int8 *)(v5 + 23);
    v12 = (char)v11;
    if ((v11 & 0x80u) != 0)
      v11 = *(_QWORD *)(v5 + 8);
    if (v10 != v11)
      goto LABEL_32;
    if (v12 >= 0)
      v13 = (unsigned __int8 *)v5;
    else
      v13 = *(unsigned __int8 **)v5;
    if ((v9 & 0x80) != 0)
    {
      v5 = memcmp(*(const void **)v8, v13, *((_QWORD *)v8 + 1));
      if ((_DWORD)v5)
        goto LABEL_32;
    }
    else if (v8[23])
    {
      while (*v8 == *v13)
      {
        ++v8;
        ++v13;
        if (!--v9)
          goto LABEL_27;
      }
LABEL_32:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v15 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = pthread_self();
        v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v17;
        v38 = 2080;
        v39 = "DAL_Time.cpp";
        v40 = 1024;
        v41 = 150;
        v42 = 2080;
        *(_QWORD *)v43 = "not (is_same_timebase(m_timebase, t.m_timebase))";
        _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s DAL_Time comparisions must be source from the same timebase", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
      v18 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"DAL_Time comparisions must be source from the same timebase", (uint64_t)&v28);
      std::logic_error::logic_error(&v29, &v28);
      v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v30, &v29);
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = -1;
      v30.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v31 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
      *(_QWORD *)&v43[6] = "BOOL AMCP::DAL::DAL_Time::operator==(const DAL_Time &) const";
      v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
      v45 = 150;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
      v26 = v23;
      v27 = v24;
      v23 = 0uLL;
      v24 = 0;
      v25 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v25);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v18, (uint64_t)buf);
    }
  }
LABEL_27:
  if ((*(_BYTE *)this & 2) == 0)
    AMCP::DAL::DAL_Time::validate(this);
  if ((*(_BYTE *)a2 & 2) == 0)
    AMCP::DAL::DAL_Time::validate(a2);
  return round(*((double *)this + 1)) == round(*((double *)a2 + 1));
}

void sub_1B5A97C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 112) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 104);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 104) = 0;
  MEMORY[0x1B5E500E8](v29 - 128);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 129));
  _Unwind_Resume(a1);
}

BOOL AMCP::DAL::DAL_Time::operator<(AMCP::DAL::DAL_Time *this, AMCP::DAL::DAL_Time *a2)
{
  BOOL v2;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *v18;
  NSObject *v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  void *exception;
  __int128 v23;
  uint64_t v24;
  uint64_t (**v25)();
  __int128 v26;
  uint64_t v27;
  std::string v28;
  std::logic_error v29;
  std::logic_error v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint8_t buf[8];
  __int16 v38;
  char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  _BYTE v43[14];
  const char *v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)this)
    v2 = *(_DWORD *)a2 == 0;
  else
    v2 = 1;
  if (v2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v20 = pthread_self();
      v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v21;
      v38 = 2080;
      v39 = "DAL_Time.cpp";
      v40 = 1024;
      v41 = 159;
      v42 = 2080;
      *(_QWORD *)v43 = "not (not (m_valid_types == Valid_Types::Invalid or t.m_valid_types == Valid_Types::Invalid))";
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v28);
    std::logic_error::logic_error(&v29, &v28);
    v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v30, &v29);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = -1;
    v30.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v31 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
    *(_QWORD *)&v43[6] = "BOOL AMCP::DAL::DAL_Time::operator<(const DAL_Time &) const";
    v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    v45 = 159;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
    v26 = v23;
    v27 = v24;
    v23 = 0uLL;
    v24 = 0;
    v25 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v25);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)a2 + 3);
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (v5 | v6)
      goto LABEL_32;
  }
  else
  {
    v8 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 16))(v5);
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 3) + 16))(*((_QWORD *)a2 + 3));
    v9 = v8[23];
    if ((v9 & 0x80u) == 0)
      v10 = v8[23];
    else
      v10 = *((_QWORD *)v8 + 1);
    v11 = *(unsigned __int8 *)(v5 + 23);
    v12 = (char)v11;
    if ((v11 & 0x80u) != 0)
      v11 = *(_QWORD *)(v5 + 8);
    if (v10 != v11)
      goto LABEL_32;
    if (v12 >= 0)
      v13 = (unsigned __int8 *)v5;
    else
      v13 = *(unsigned __int8 **)v5;
    if ((v9 & 0x80) != 0)
    {
      v5 = memcmp(*(const void **)v8, v13, *((_QWORD *)v8 + 1));
      if ((_DWORD)v5)
        goto LABEL_32;
    }
    else if (v8[23])
    {
      while (*v8 == *v13)
      {
        ++v8;
        ++v13;
        if (!--v9)
          goto LABEL_27;
      }
LABEL_32:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v15 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = pthread_self();
        v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v17;
        v38 = 2080;
        v39 = "DAL_Time.cpp";
        v40 = 1024;
        v41 = 160;
        v42 = 2080;
        *(_QWORD *)v43 = "not (is_same_timebase(m_timebase, t.m_timebase))";
        _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s DAL_Time comparisions must be source from the same timebase", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
      v18 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"DAL_Time comparisions must be source from the same timebase", (uint64_t)&v28);
      std::logic_error::logic_error(&v29, &v28);
      v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v30, &v29);
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = -1;
      v30.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v31 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
      *(_QWORD *)&v43[6] = "BOOL AMCP::DAL::DAL_Time::operator<(const DAL_Time &) const";
      v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
      v45 = 160;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
      v26 = v23;
      v27 = v24;
      v23 = 0uLL;
      v24 = 0;
      v25 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v25);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v18, (uint64_t)buf);
    }
  }
LABEL_27:
  if ((*(_BYTE *)this & 2) == 0)
    AMCP::DAL::DAL_Time::validate(this);
  if ((*(_BYTE *)a2 & 2) == 0)
    AMCP::DAL::DAL_Time::validate(a2);
  return round(*((double *)this + 1)) < round(*((double *)a2 + 1));
}

void sub_1B5A98254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 112) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 104);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 104) = 0;
  MEMORY[0x1B5E500E8](v29 - 128);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 129));
  _Unwind_Resume(a1);
}

AMCP::DAL::DAL_Time *AMCP::DAL::DAL_Time::operator+=(AMCP::DAL::DAL_Time *this, uint64_t a2)
{
  BOOL v2;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *v18;
  NSObject *v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  void *exception;
  __int128 v23;
  uint64_t v24;
  uint64_t (**v25)();
  __int128 v26;
  uint64_t v27;
  std::string v28;
  std::logic_error v29;
  std::logic_error v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint8_t buf[8];
  __int16 v38;
  char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  _BYTE v43[14];
  const char *v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)this)
    v2 = *(_DWORD *)a2 == 0;
  else
    v2 = 1;
  if (v2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v20 = pthread_self();
      v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v21;
      v38 = 2080;
      v39 = "DAL_Time.cpp";
      v40 = 1024;
      v41 = 170;
      v42 = 2080;
      *(_QWORD *)v43 = "not (not (m_valid_types == Valid_Types::Invalid or t.m_valid_types == Valid_Types::Invalid))";
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v28);
    std::logic_error::logic_error(&v29, &v28);
    v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v30, &v29);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = -1;
    v30.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v31 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
    *(_QWORD *)&v43[6] = "DAL_Time &AMCP::DAL::DAL_Time::operator+=(const DAL_Time_Delta &)";
    v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    v45 = 170;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
    v26 = v23;
    v27 = v24;
    v23 = 0uLL;
    v24 = 0;
    v25 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v25);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = *((_QWORD *)this + 3);
  v6 = *(_QWORD *)(a2 + 24);
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (v5 | v6)
      goto LABEL_32;
  }
  else
  {
    v8 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 16))(v5);
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
    v9 = v8[23];
    if ((v9 & 0x80u) == 0)
      v10 = v8[23];
    else
      v10 = *((_QWORD *)v8 + 1);
    v11 = *(unsigned __int8 *)(v5 + 23);
    v12 = (char)v11;
    if ((v11 & 0x80u) != 0)
      v11 = *(_QWORD *)(v5 + 8);
    if (v10 != v11)
      goto LABEL_32;
    if (v12 >= 0)
      v13 = (unsigned __int8 *)v5;
    else
      v13 = *(unsigned __int8 **)v5;
    if ((v9 & 0x80) != 0)
    {
      v5 = memcmp(*(const void **)v8, v13, *((_QWORD *)v8 + 1));
      if ((_DWORD)v5)
        goto LABEL_32;
    }
    else if (v8[23])
    {
      while (*v8 == *v13)
      {
        ++v8;
        ++v13;
        if (!--v9)
          goto LABEL_27;
      }
LABEL_32:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v15 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = pthread_self();
        v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v17;
        v38 = 2080;
        v39 = "DAL_Time.cpp";
        v40 = 1024;
        v41 = 171;
        v42 = 2080;
        *(_QWORD *)v43 = "not (is_same_timebase(m_timebase, t.m_timebase))";
        _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s DAL_Time comparisions must be source from the same timebase", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
      v18 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"DAL_Time comparisions must be source from the same timebase", (uint64_t)&v28);
      std::logic_error::logic_error(&v29, &v28);
      v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v30, &v29);
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = -1;
      v30.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v31 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
      *(_QWORD *)&v43[6] = "DAL_Time &AMCP::DAL::DAL_Time::operator+=(const DAL_Time_Delta &)";
      v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
      v45 = 171;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
      v26 = v23;
      v27 = v24;
      v23 = 0uLL;
      v24 = 0;
      v25 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v25);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v18, (uint64_t)buf);
    }
  }
LABEL_27:
  if ((*(_BYTE *)this & 2) == 0)
    AMCP::DAL::DAL_Time::validate(this);
  if ((*(_BYTE *)a2 & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)a2);
  *(_DWORD *)this = 2;
  *((_QWORD *)this + 2) = 0;
  *((double *)this + 1) = *(double *)(a2 + 8) + *((double *)this + 1);
  return this;
}

void sub_1B5A98890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 112) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 104);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 104) = 0;
  MEMORY[0x1B5E500E8](v29 - 128);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 129));
  _Unwind_Resume(a1);
}

void AMCP::DAL::DAL_Time_Delta::validate(AMCP::DAL::DAL_Time_Delta *this)
{
  uint64_t v2;
  int v3;
  double v4;
  double v5;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  void *exception;
  __int128 v10;
  uint64_t v11;
  uint64_t (**v12)();
  __int128 v13;
  uint64_t v14;
  std::string v15;
  std::logic_error v16;
  std::logic_error v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint8_t buf[8];
  __int16 v25;
  char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  _BYTE v30[14];
  const char *v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      v25 = 2080;
      v26 = "DAL_Time.cpp";
      v27 = 1024;
      v28 = 415;
      v29 = 2080;
      *(_QWORD *)v30 = "not (m_timebase != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to translate times with an invalid clock", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v23);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to translate times with an invalid clock", (uint64_t)&v15);
    std::logic_error::logic_error(&v16, &v15);
    v16.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v17, &v16);
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = -1;
    v17.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v18 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v17);
    *(_QWORD *)&v30[6] = "void AMCP::DAL::DAL_Time_Delta::validate() const";
    v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    v32 = 415;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v10);
    v13 = v10;
    v14 = v11;
    v10 = 0uLL;
    v11 = 0;
    v12 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v12);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v3 = *(_DWORD *)this;
  if (*(_DWORD *)this == 1)
  {
    v4 = (double)*((uint64_t *)this + 2);
    *((double *)this + 1) = v4 / (*(double (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    v3 = *(_DWORD *)this;
  }
  if (v3 == 2)
  {
    v5 = *((double *)this + 1);
    *((_QWORD *)this + 2) = (uint64_t)(v5
                                    * (*(double (**)(_QWORD))(**((_QWORD **)this + 3) + 72))(*((_QWORD *)this + 3)));
  }
  *(_DWORD *)this = 3;
}

void sub_1B5A98C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 112) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 104);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 104) = 0;
  MEMORY[0x1B5E500E8](v29 - 128);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 129));
  _Unwind_Resume(a1);
}

AMCP::DAL::DAL_Time *AMCP::DAL::DAL_Time::operator-=(AMCP::DAL::DAL_Time *this, AMCP::DAL::DAL_Time_Delta *a2)
{
  BOOL v2;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *v18;
  NSObject *v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  void *exception;
  __int128 v23;
  uint64_t v24;
  uint64_t (**v25)();
  __int128 v26;
  uint64_t v27;
  std::string v28;
  std::logic_error v29;
  std::logic_error v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint8_t buf[8];
  __int16 v38;
  char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  _BYTE v43[14];
  const char *v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)this)
    v2 = *(_DWORD *)a2 == 0;
  else
    v2 = 1;
  if (v2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v20 = pthread_self();
      v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v21;
      v38 = 2080;
      v39 = "DAL_Time.cpp";
      v40 = 1024;
      v41 = 182;
      v42 = 2080;
      *(_QWORD *)v43 = "not (not (m_valid_types == Valid_Types::Invalid or t.m_valid_types == Valid_Types::Invalid))";
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v28);
    std::logic_error::logic_error(&v29, &v28);
    v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v30, &v29);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = -1;
    v30.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v31 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
    *(_QWORD *)&v43[6] = "DAL_Time &AMCP::DAL::DAL_Time::operator-=(const DAL_Time_Delta &)";
    v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    v45 = 182;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
    v26 = v23;
    v27 = v24;
    v23 = 0uLL;
    v24 = 0;
    v25 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v25);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)a2 + 3);
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (v5 | v6)
      goto LABEL_32;
  }
  else
  {
    v8 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 16))(v5);
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 3) + 16))(*((_QWORD *)a2 + 3));
    v9 = v8[23];
    if ((v9 & 0x80u) == 0)
      v10 = v8[23];
    else
      v10 = *((_QWORD *)v8 + 1);
    v11 = *(unsigned __int8 *)(v5 + 23);
    v12 = (char)v11;
    if ((v11 & 0x80u) != 0)
      v11 = *(_QWORD *)(v5 + 8);
    if (v10 != v11)
      goto LABEL_32;
    if (v12 >= 0)
      v13 = (unsigned __int8 *)v5;
    else
      v13 = *(unsigned __int8 **)v5;
    if ((v9 & 0x80) != 0)
    {
      v5 = memcmp(*(const void **)v8, v13, *((_QWORD *)v8 + 1));
      if ((_DWORD)v5)
        goto LABEL_32;
    }
    else if (v8[23])
    {
      while (*v8 == *v13)
      {
        ++v8;
        ++v13;
        if (!--v9)
          goto LABEL_27;
      }
LABEL_32:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v15 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = pthread_self();
        v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v17;
        v38 = 2080;
        v39 = "DAL_Time.cpp";
        v40 = 1024;
        v41 = 183;
        v42 = 2080;
        *(_QWORD *)v43 = "not (is_same_timebase(m_timebase, t.m_timebase))";
        _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s DAL_Time comparisions must be source from the same timebase", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
      v18 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"DAL_Time comparisions must be source from the same timebase", (uint64_t)&v28);
      std::logic_error::logic_error(&v29, &v28);
      v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v30, &v29);
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = -1;
      v30.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v31 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
      *(_QWORD *)&v43[6] = "DAL_Time &AMCP::DAL::DAL_Time::operator-=(const DAL_Time_Delta &)";
      v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
      v45 = 183;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
      v26 = v23;
      v27 = v24;
      v23 = 0uLL;
      v24 = 0;
      v25 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v25);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v18, (uint64_t)buf);
    }
  }
LABEL_27:
  if ((*(_BYTE *)this & 2) == 0)
    AMCP::DAL::DAL_Time::validate(this);
  if ((*(_BYTE *)a2 & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate(a2);
  *(_DWORD *)this = 2;
  *((_QWORD *)this + 2) = 0;
  *((double *)this + 1) = *((double *)this + 1) - *((double *)a2 + 1);
  return this;
}

void sub_1B5A9922C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 112) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 104);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 104) = 0;
  MEMORY[0x1B5E500E8](v29 - 128);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 129));
  _Unwind_Resume(a1);
}

double AMCP::DAL::DAL_Time::operator-(uint64_t a1, AMCP::DAL::DAL_Time *this, AMCP::DAL::DAL_Time *a3)
{
  BOOL v3;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  double result;
  NSObject *v23;
  _opaque_pthread_t *v24;
  mach_port_t v25;
  void *v26;
  NSObject *v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  void *exception;
  __int128 v31;
  uint64_t v32;
  uint64_t (**v33)();
  __int128 v34;
  uint64_t v35;
  std::string v36;
  std::logic_error v37;
  std::logic_error v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  uint8_t buf[8];
  __int16 v46;
  char *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  _BYTE v51[14];
  const char *v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)this)
    v3 = *(_DWORD *)a3 == 0;
  else
    v3 = 1;
  if (v3)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v27 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      v28 = pthread_self();
      v29 = pthread_mach_thread_np(v28);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v29;
      v46 = 2080;
      v47 = "DAL_Time.cpp";
      v48 = 1024;
      v49 = 193;
      v50 = 2080;
      *(_QWORD *)v51 = "not (not (m_valid_types == Valid_Types::Invalid or t.m_valid_types == Valid_Types::Invalid))";
      _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v36);
    std::logic_error::logic_error(&v37, &v36);
    v37.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v38, &v37);
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = -1;
    v38.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v39 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *(_QWORD *)&v51[6] = "DAL_Time_Delta AMCP::DAL::DAL_Time::operator-(const DAL_Time &) const";
    v52 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    v53 = 193;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    v34 = v31;
    v35 = v32;
    v31 = 0uLL;
    v32 = 0;
    v33 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v33);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v7 = *((_QWORD *)this + 3);
  v8 = *((_QWORD *)a3 + 3);
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
  {
    if (v7 | v8)
      goto LABEL_35;
  }
  else
  {
    v10 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 16))(v7);
    v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 3) + 16))(*((_QWORD *)a3 + 3));
    v11 = v10[23];
    if ((v11 & 0x80u) == 0)
      v12 = v10[23];
    else
      v12 = *((_QWORD *)v10 + 1);
    v13 = *(unsigned __int8 *)(v7 + 23);
    v14 = (char)v13;
    if ((v13 & 0x80u) != 0)
      v13 = *(_QWORD *)(v7 + 8);
    if (v12 != v13)
      goto LABEL_35;
    if (v14 >= 0)
      v15 = (unsigned __int8 *)v7;
    else
      v15 = *(unsigned __int8 **)v7;
    if ((v11 & 0x80) != 0)
    {
      v7 = memcmp(*(const void **)v10, v15, *((_QWORD *)v10 + 1));
      if ((_DWORD)v7)
        goto LABEL_35;
    }
    else if (v10[23])
    {
      while (*v10 == *v15)
      {
        ++v10;
        ++v15;
        if (!--v11)
          goto LABEL_27;
      }
LABEL_35:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v23 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = pthread_self();
        v25 = pthread_mach_thread_np(v24);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v25;
        v46 = 2080;
        v47 = "DAL_Time.cpp";
        v48 = 1024;
        v49 = 194;
        v50 = 2080;
        *(_QWORD *)v51 = "not (is_same_timebase(m_timebase, t.m_timebase))";
        _os_log_error_impl(&dword_1B57BA000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s DAL_Time comparisions must be source from the same timebase", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
      v26 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"DAL_Time comparisions must be source from the same timebase", (uint64_t)&v36);
      std::logic_error::logic_error(&v37, &v36);
      v37.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v38, &v37);
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v43 = -1;
      v38.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v39 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
      *(_QWORD *)&v51[6] = "DAL_Time_Delta AMCP::DAL::DAL_Time::operator-(const DAL_Time &) const";
      v52 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
      v53 = 194;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
      v34 = v31;
      v35 = v32;
      v31 = 0uLL;
      v32 = 0;
      v33 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v33);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v26, (uint64_t)buf);
    }
  }
LABEL_27:
  if ((*(_BYTE *)this & 2) == 0)
    AMCP::DAL::DAL_Time::validate(this);
  if ((*(_BYTE *)a3 & 2) == 0)
    AMCP::DAL::DAL_Time::validate(a3);
  v16 = *((double *)this + 1);
  v17 = *((double *)a3 + 1);
  v19 = *((_QWORD *)this + 3);
  v18 = *((_QWORD *)this + 4);
  if (v18)
  {
    v20 = (unint64_t *)(v18 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  result = v16 - v17;
  *(_DWORD *)a1 = 2;
  *(double *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v19;
  *(_QWORD *)(a1 + 32) = v18;
  return result;
}

void sub_1B5A99888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 112) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 104);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 104) = 0;
  MEMORY[0x1B5E500E8](v29 - 128);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 129));
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::DAL_Time::translate_time(uint64_t a1, AMCP::DAL::DAL_Time *this, uint64_t *a3)
{
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  result = *a3;
  v7 = *((_QWORD *)this + 3);
  if (*a3)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if (!(result | v7))
      goto LABEL_7;
  }
  else
  {
    v13 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
    v14 = v13[23];
    if ((v14 & 0x80u) == 0)
      v15 = v13[23];
    else
      v15 = *((_QWORD *)v13 + 1);
    v16 = *(unsigned __int8 *)(result + 23);
    v17 = (char)v16;
    if ((v16 & 0x80u) != 0)
      v16 = *(_QWORD *)(result + 8);
    if (v15 == v16)
    {
      if (v17 >= 0)
        v18 = (unsigned __int8 *)result;
      else
        v18 = *(unsigned __int8 **)result;
      if ((v14 & 0x80) == 0)
      {
        if (v13[23])
        {
          while (*v13 == *v18)
          {
            ++v13;
            ++v18;
            if (!--v14)
              goto LABEL_7;
          }
          goto LABEL_26;
        }
LABEL_7:
        *(_OWORD *)a1 = *(_OWORD *)this;
        v9 = *((_QWORD *)this + 3);
        *(_QWORD *)(a1 + 16) = *((_QWORD *)this + 2);
        *(_QWORD *)(a1 + 24) = v9;
        v10 = *((_QWORD *)this + 4);
        *(_QWORD *)(a1 + 32) = v10;
        if (v10)
        {
          v11 = (unint64_t *)(v10 + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        return result;
      }
      result = memcmp(*(const void **)v13, v18, *((_QWORD *)v13 + 1));
      if (!(_DWORD)result)
        goto LABEL_7;
    }
  }
LABEL_26:
  result = AMCP::DAL::DAL_Time::get_host_time(this);
  v20 = *a3;
  v19 = a3[1];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = v20;
  *(_QWORD *)(a1 + 32) = v19;
  return result;
}

uint64_t AMCP::DAL::DAL_Time_Range::DAL_Time_Range(uint64_t a1, uint64_t *a2, double a3, double a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *a2;
    v10 = (std::__shared_weak_count *)a2[1];
  }
  else
  {
    v10 = 0;
    v9 = *a2;
  }
  *a2 = 0;
  a2[1] = 0;
  *(_DWORD *)a1 = 2;
  *(double *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_DWORD *)(a1 + 40) = 2;
  *(double *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  if (!v10)
    goto LABEL_14;
  v13 = (unint64_t *)&v10->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v6)
      return a1;
  }
  else
  {
LABEL_14:
    if (!v6)
      return a1;
  }
  v16 = (unint64_t *)&v6->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

uint64_t AMCP::DAL::DAL_Time_Range::DAL_Time_Range(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *a2;
    v8 = (std::__shared_weak_count *)a2[1];
  }
  else
  {
    v8 = 0;
    v7 = *a2;
  }
  *a2 = 0;
  a2[1] = 0;
  *(_DWORD *)a1 = 2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_DWORD *)(a1 + 40) = 2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v8;
  if (!v8)
    goto LABEL_14;
  v11 = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v4)
      return a1;
  }
  else
  {
LABEL_14:
    if (!v4)
      return a1;
  }
  v14 = (unint64_t *)&v4->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *a2;
    v8 = (std::__shared_weak_count *)a2[1];
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    *(_DWORD *)a1 = 2;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    *(_DWORD *)(a1 + 40) = 2;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = v7;
    *(_QWORD *)(a1 + 72) = v8;
    if (v8)
    {
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *(_DWORD *)a1 = 2;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 2;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = v3;
    *(_QWORD *)(a1 + 72) = 0;
  }
  return a1;
}

AMCP::DAL::DAL_Time_Range *AMCP::DAL::DAL_Time_Range::DAL_Time_Range(AMCP::DAL::DAL_Time_Range *this, const AMCP::DAL::DAL_Time *a2, const AMCP::DAL::DAL_Time *a3)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  BOOL v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  BOOL v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v39;
  NSObject *v40;
  unint64_t *v41;
  unint64_t v42;
  _opaque_pthread_t *v43;
  mach_port_t v44;
  std::logic_error *exception;
  uint64_t v46;
  int v47;
  uint64_t v48;
  std::logic_error v49;
  __int128 v50;
  uint64_t v51;
  uint64_t (**v52)();
  __int128 v53;
  uint64_t v54;
  std::string v55;
  std::logic_error v56;
  std::logic_error v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;
  uint8_t buf[8];
  _BYTE v65[10];
  __int16 v66;
  int v67;
  _BYTE v68[24];
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)a2;
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)this = v4;
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 4) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_OWORD *)a3;
  *((_QWORD *)this + 7) = *((_QWORD *)a3 + 2);
  *(_OWORD *)((char *)this + 40) = v8;
  *((_QWORD *)this + 8) = *((_QWORD *)a3 + 3);
  v9 = *((_QWORD *)a3 + 4);
  *((_QWORD *)this + 9) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *((_QWORD *)a2 + 3);
  v13 = (std::__shared_weak_count *)*((_QWORD *)a2 + 4);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v17 = *((_QWORD *)a3 + 3);
  v16 = (std::__shared_weak_count *)*((_QWORD *)a3 + 4);
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (v12 | v17) == 0;
  if (!v12 || !v17)
  {
LABEL_36:
    if (!v16)
      goto LABEL_41;
    goto LABEL_37;
  }
  v21 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v12 + 16))(v12);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  v22 = v21[23];
  if ((v22 & 0x80u) == 0)
    v23 = v21[23];
  else
    v23 = *((_QWORD *)v21 + 1);
  v24 = *(unsigned __int8 *)(v12 + 23);
  v25 = (char)v24;
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(v12 + 8);
  if (v23 == v24)
  {
    if (v25 >= 0)
      v26 = (unsigned __int8 *)v12;
    else
      v26 = *(unsigned __int8 **)v12;
    if ((v22 & 0x80) != 0)
    {
      v12 = memcmp(*(const void **)v21, v26, *((_QWORD *)v21 + 1));
      v20 = (_DWORD)v12 == 0;
      goto LABEL_36;
    }
    if (v21[23])
    {
      v27 = v22 - 1;
      do
      {
        v29 = *v21++;
        v28 = v29;
        v31 = *v26++;
        v30 = v31;
        v33 = v27-- != 0;
        v20 = v28 == v30;
      }
      while (v28 == v30 && v33);
      goto LABEL_36;
    }
    v20 = 1;
    if (!v16)
      goto LABEL_41;
  }
  else
  {
    v20 = 0;
    if (!v16)
      goto LABEL_41;
  }
LABEL_37:
  v34 = (unint64_t *)&v16->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_41:
  if (v13)
  {
    v36 = (unint64_t *)&v13->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v20)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v39 = *(std::__shared_weak_count **)v65;
    v40 = **(NSObject ***)buf;
    if (*(_QWORD *)v65)
    {
      v41 = (unint64_t *)(*(_QWORD *)v65 + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v43 = pthread_self();
      v44 = pthread_mach_thread_np(v43);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v44;
      *(_WORD *)v65 = 2080;
      *(_QWORD *)&v65[2] = "DAL_Time.cpp";
      v66 = 1024;
      v67 = 266;
      *(_WORD *)v68 = 2080;
      *(_QWORD *)&v68[2] = "not (is_same_timebase(start.get_clock(), end.get_clock()))";
      _os_log_error_impl(&dword_1B57BA000, v40, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s DAL_Time_Interval requires time from the same clock", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v63);
    exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"DAL_Time_Interval requires time from the same clock", (uint64_t)&v55);
    std::logic_error::logic_error(&v56, &v55);
    v46 = MEMORY[0x1E0DE5018];
    v56.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v57, &v56);
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = -1;
    v57.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v58 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v57);
    *(_QWORD *)&v68[8] = "AMCP::DAL::DAL_Time_Range::DAL_Time_Range(const DAL_Time &, const DAL_Time &)";
    *(_QWORD *)&v68[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    v69 = 266;
    std::vector<void *>::vector(&v50);
    v47 = backtrace((void **)v50, (*((_QWORD *)&v50 + 1) - (_QWORD)v50) >> 3);
    std::vector<void *>::resize((char **)&v50, v47);
    v53 = v50;
    v54 = v51;
    v50 = 0uLL;
    v51 = 0;
    v52 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v52);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(exception, (const std::logic_error *)buf);
    exception->__vftable = (std::logic_error_vtbl *)(v46 + 16);
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v48 = *(_QWORD *)v68;
    exception[1].__imp_.__imp_ = *(const char **)v68;
    if (v48)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
    v49 = *(std::logic_error *)&v68[8];
    LODWORD(exception[3].__vftable) = v69;
    exception[2] = v49;
    exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  return this;
}

void sub_1B5A9A220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v39);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v38);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::DAL_Time_Range::DAL_Time_Range(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  BOOL v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  BOOL v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v38;
  NSObject *v39;
  unint64_t *v40;
  unint64_t v41;
  _opaque_pthread_t *v42;
  mach_port_t v43;
  std::logic_error *exception;
  uint64_t v45;
  int v46;
  uint64_t v47;
  std::logic_error v48;
  __int128 v49;
  uint64_t v50;
  uint64_t (**v51)();
  __int128 v52;
  uint64_t v53;
  std::string v54;
  std::logic_error v55;
  std::logic_error v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char v62;
  uint8_t buf[8];
  _BYTE v64[10];
  __int16 v65;
  int v66;
  _BYTE v67[24];
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  v4 = *((_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(__int128 *)((char *)a2 + 40);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *(_OWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  v8 = *((_QWORD *)a2 + 9);
  *(_QWORD *)(a1 + 72) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *((_QWORD *)a2 + 3);
  v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 4);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v16 = *((_QWORD *)a2 + 8);
  v15 = (std::__shared_weak_count *)*((_QWORD *)a2 + 9);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (v11 | v16) == 0;
  if (!v11 || !v16)
  {
LABEL_36:
    if (!v15)
      goto LABEL_41;
    goto LABEL_37;
  }
  v20 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v11 + 16))(v11);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  v21 = v20[23];
  if ((v21 & 0x80u) == 0)
    v22 = v20[23];
  else
    v22 = *((_QWORD *)v20 + 1);
  v23 = *(unsigned __int8 *)(v11 + 23);
  v24 = (char)v23;
  if ((v23 & 0x80u) != 0)
    v23 = *(_QWORD *)(v11 + 8);
  if (v22 == v23)
  {
    if (v24 >= 0)
      v25 = (unsigned __int8 *)v11;
    else
      v25 = *(unsigned __int8 **)v11;
    if ((v21 & 0x80) != 0)
    {
      v11 = memcmp(*(const void **)v20, v25, *((_QWORD *)v20 + 1));
      v19 = (_DWORD)v11 == 0;
      goto LABEL_36;
    }
    if (v20[23])
    {
      v26 = v21 - 1;
      do
      {
        v28 = *v20++;
        v27 = v28;
        v30 = *v25++;
        v29 = v30;
        v32 = v26-- != 0;
        v19 = v27 == v29;
      }
      while (v27 == v29 && v32);
      goto LABEL_36;
    }
    v19 = 1;
    if (!v15)
      goto LABEL_41;
  }
  else
  {
    v19 = 0;
    if (!v15)
      goto LABEL_41;
  }
LABEL_37:
  v33 = (unint64_t *)&v15->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_41:
  if (v12)
  {
    v35 = (unint64_t *)&v12->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (!v19)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v38 = *(std::__shared_weak_count **)v64;
    v39 = **(NSObject ***)buf;
    if (*(_QWORD *)v64)
    {
      v40 = (unint64_t *)(*(_QWORD *)v64 + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      v42 = pthread_self();
      v43 = pthread_mach_thread_np(v42);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v43;
      *(_WORD *)v64 = 2080;
      *(_QWORD *)&v64[2] = "DAL_Time.cpp";
      v65 = 1024;
      v66 = 279;
      *(_WORD *)v67 = 2080;
      *(_QWORD *)&v67[2] = "not (is_same_timebase(other.start().get_clock(), other.end().get_clock()))";
      _os_log_error_impl(&dword_1B57BA000, v39, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s DAL_Time_Interval requires time from the same clock", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v62);
    exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"DAL_Time_Interval requires time from the same clock", (uint64_t)&v54);
    std::logic_error::logic_error(&v55, &v54);
    v45 = MEMORY[0x1E0DE5018];
    v55.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v56, &v55);
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = -1;
    v56.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v57 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v56);
    *(_QWORD *)&v67[8] = "AMCP::DAL::DAL_Time_Range::DAL_Time_Range(const time_range<DAL_Time, DAL_Time_Delta> &)";
    *(_QWORD *)&v67[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    v68 = 279;
    std::vector<void *>::vector(&v49);
    v46 = backtrace((void **)v49, (*((_QWORD *)&v49 + 1) - (_QWORD)v49) >> 3);
    std::vector<void *>::resize((char **)&v49, v46);
    v52 = v49;
    v53 = v50;
    v49 = 0uLL;
    v50 = 0;
    v51 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v51);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(exception, (const std::logic_error *)buf);
    exception->__vftable = (std::logic_error_vtbl *)(v45 + 16);
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v47 = *(_QWORD *)v67;
    exception[1].__imp_.__imp_ = *(const char **)v67;
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
    v48 = *(std::logic_error *)&v67[8];
    LODWORD(exception[3].__vftable) = v68;
    exception[2] = v48;
    exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  return a1;
}

void sub_1B5A9A86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v39);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v38);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::DAL_Time_Range::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a1 + 24), v4, *(_QWORD *)(a2 + 32));
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a1 + 64), v6, *(_QWORD *)(a2 + 72));
  return a1;
}

double AMCP::DAL::DAL_Time_Range::get_range(AMCP::DAL::DAL_Time_Range *this)
{
  double sample_time;

  sample_time = AMCP::DAL::DAL_Time::get_sample_time(this);
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time_Range *)((char *)this + 40));
  return sample_time;
}

BOOL AMCP::DAL::DAL_Time_Delta::operator==(AMCP::DAL::DAL_Time_Delta *this, uint64_t a2)
{
  BOOL v2;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  NSObject *v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  void *v19;
  NSObject *v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  void *exception;
  __int128 v24;
  uint64_t v25;
  uint64_t (**v26)();
  __int128 v27;
  uint64_t v28;
  std::string v29;
  std::logic_error v30;
  std::logic_error v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  uint8_t buf[8];
  __int16 v39;
  char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  _BYTE v44[14];
  const char *v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)this)
    v2 = *(_DWORD *)a2 == 0;
  else
    v2 = 1;
  if (v2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v20 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = pthread_self();
      v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v22;
      v39 = 2080;
      v40 = "DAL_Time.cpp";
      v41 = 1024;
      v42 = 320;
      v43 = 2080;
      *(_QWORD *)v44 = "not (not (m_valid_types == DAL_Time::Valid_Types::Invalid or t.m_valid_types == DAL_Time::Valid_Types::Invalid))";
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v37);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v29);
    std::logic_error::logic_error(&v30, &v29);
    v30.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v31, &v30);
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = -1;
    v31.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v32 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v31);
    *(_QWORD *)&v44[6] = "BOOL AMCP::DAL::DAL_Time_Delta::operator==(const DAL_Time_Delta &) const";
    v45 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    v46 = 320;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v24);
    v27 = v24;
    v28 = v25;
    v24 = 0uLL;
    v25 = 0;
    v26 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v26);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = *((_QWORD *)this + 3);
  v6 = *(_QWORD *)(a2 + 24);
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (v5 | v6)
      goto LABEL_40;
  }
  else
  {
    v8 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 16))(v5);
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
    v9 = v8[23];
    if ((v9 & 0x80u) == 0)
      v10 = v8[23];
    else
      v10 = *((_QWORD *)v8 + 1);
    v11 = *(unsigned __int8 *)(v5 + 23);
    v12 = (char)v11;
    if ((v11 & 0x80u) != 0)
      v11 = *(_QWORD *)(v5 + 8);
    if (v10 != v11)
      goto LABEL_40;
    if (v12 >= 0)
      v13 = (unsigned __int8 *)v5;
    else
      v13 = *(unsigned __int8 **)v5;
    if ((v9 & 0x80) != 0)
    {
      v5 = memcmp(*(const void **)v8, v13, *((_QWORD *)v8 + 1));
      if ((_DWORD)v5)
        goto LABEL_40;
    }
    else if (v8[23])
    {
      while (*v8 == *v13)
      {
        ++v8;
        ++v13;
        if (!--v9)
          goto LABEL_27;
      }
LABEL_40:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v16 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v17 = pthread_self();
        v18 = pthread_mach_thread_np(v17);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v18;
        v39 = 2080;
        v40 = "DAL_Time.cpp";
        v41 = 1024;
        v42 = 321;
        v43 = 2080;
        *(_QWORD *)v44 = "not (is_same_timebase(m_timebase, t.m_timebase))";
        _os_log_error_impl(&dword_1B57BA000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s DAL_Time_Delta comparisions must be source from the same timebase", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v37);
      v19 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"DAL_Time_Delta comparisions must be source from the same timebase", (uint64_t)&v29);
      std::logic_error::logic_error(&v30, &v29);
      v30.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v31, &v30);
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = -1;
      v31.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v32 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v31);
      *(_QWORD *)&v44[6] = "BOOL AMCP::DAL::DAL_Time_Delta::operator==(const DAL_Time_Delta &) const";
      v45 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
      v46 = 321;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v24);
      v27 = v24;
      v28 = v25;
      v24 = 0uLL;
      v25 = 0;
      v26 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v26);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v19, (uint64_t)buf);
    }
  }
LABEL_27:
  if ((*(_DWORD *)this & 2) != 0 && (*(_DWORD *)a2 & 2) != 0 && (*(_DWORD *)this & *(_DWORD *)a2 & 1) == 0)
    return round(*((double *)this + 1)) == round(*(double *)(a2 + 8));
  AMCP::DAL::DAL_Time_Delta::validate(this);
  if ((*(_DWORD *)this & 2) != 0 && (*(_BYTE *)a2 & 2) != 0)
  {
    return round(*((double *)this + 1)) == round(*(double *)(a2 + 8));
  }
  else
  {
    if ((*(_DWORD *)this & 1) == 0 || (*(_BYTE *)a2 & 1) == 0)
      return 0;
    return *((_QWORD *)this + 2) == *(_QWORD *)(a2 + 16);
  }
}

void sub_1B5A9B0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 112) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 104);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 104) = 0;
  MEMORY[0x1B5E500E8](v29 - 128);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 129));
  _Unwind_Resume(a1);
}

BOOL AMCP::DAL::DAL_Time_Delta::operator<(AMCP::DAL::DAL_Time_Delta *this, uint64_t a2)
{
  BOOL v2;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *v18;
  NSObject *v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  void *exception;
  __int128 v23;
  uint64_t v24;
  uint64_t (**v25)();
  __int128 v26;
  uint64_t v27;
  std::string v28;
  std::logic_error v29;
  std::logic_error v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint8_t buf[8];
  __int16 v38;
  char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  _BYTE v43[14];
  const char *v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)this)
    v2 = *(_DWORD *)a2 == 0;
  else
    v2 = 1;
  if (v2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v20 = pthread_self();
      v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v21;
      v38 = 2080;
      v39 = "DAL_Time.cpp";
      v40 = 1024;
      v41 = 343;
      v42 = 2080;
      *(_QWORD *)v43 = "not (not (m_valid_types == DAL_Time::Valid_Types::Invalid or t.m_valid_types == DAL_Time::Valid_Types::Invalid))";
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v28);
    std::logic_error::logic_error(&v29, &v28);
    v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v30, &v29);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = -1;
    v30.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v31 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
    *(_QWORD *)&v43[6] = "BOOL AMCP::DAL::DAL_Time_Delta::operator<(const DAL_Time_Delta &) const";
    v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    v45 = 343;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
    v26 = v23;
    v27 = v24;
    v23 = 0uLL;
    v24 = 0;
    v25 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v25);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = *((_QWORD *)this + 3);
  v6 = *(_QWORD *)(a2 + 24);
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (v5 | v6)
      goto LABEL_37;
  }
  else
  {
    v8 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 16))(v5);
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
    v9 = v8[23];
    if ((v9 & 0x80u) == 0)
      v10 = v8[23];
    else
      v10 = *((_QWORD *)v8 + 1);
    v11 = *(unsigned __int8 *)(v5 + 23);
    v12 = (char)v11;
    if ((v11 & 0x80u) != 0)
      v11 = *(_QWORD *)(v5 + 8);
    if (v10 != v11)
      goto LABEL_37;
    if (v12 >= 0)
      v13 = (unsigned __int8 *)v5;
    else
      v13 = *(unsigned __int8 **)v5;
    if ((v9 & 0x80) != 0)
    {
      v5 = memcmp(*(const void **)v8, v13, *((_QWORD *)v8 + 1));
      if ((_DWORD)v5)
        goto LABEL_37;
    }
    else if (v8[23])
    {
      while (*v8 == *v13)
      {
        ++v8;
        ++v13;
        if (!--v9)
          goto LABEL_27;
      }
LABEL_37:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v15 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = pthread_self();
        v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v17;
        v38 = 2080;
        v39 = "DAL_Time.cpp";
        v40 = 1024;
        v41 = 344;
        v42 = 2080;
        *(_QWORD *)v43 = "not (is_same_timebase(m_timebase, t.m_timebase))";
        _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s DAL_Time_Delta comparisions must be source from the same timebase", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
      v18 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"DAL_Time_Delta comparisions must be source from the same timebase", (uint64_t)&v28);
      std::logic_error::logic_error(&v29, &v28);
      v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v30, &v29);
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = -1;
      v30.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v31 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
      *(_QWORD *)&v43[6] = "BOOL AMCP::DAL::DAL_Time_Delta::operator<(const DAL_Time_Delta &) const";
      v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
      v45 = 344;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
      v26 = v23;
      v27 = v24;
      v23 = 0uLL;
      v24 = 0;
      v25 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v25);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v18, (uint64_t)buf);
    }
  }
LABEL_27:
  if ((*(_DWORD *)this & 2) != 0 && (*(_DWORD *)a2 & 2) != 0 && (*(_DWORD *)this & *(_DWORD *)a2 & 1) == 0)
    return round(*((double *)this + 1)) < round(*(double *)(a2 + 8));
  AMCP::DAL::DAL_Time_Delta::validate(this);
  if ((*(_DWORD *)this & 2) != 0 && (*(_BYTE *)a2 & 2) != 0)
    return round(*((double *)this + 1)) < round(*(double *)(a2 + 8));
  if ((*(_DWORD *)this & 1) != 0 && (*(_BYTE *)a2 & 1) != 0)
    return *((_QWORD *)this + 2) < *(_QWORD *)(a2 + 16);
  return 0;
}

void sub_1B5A9B720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 112) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 104);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 104) = 0;
  MEMORY[0x1B5E500E8](v29 - 128);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 129));
  _Unwind_Resume(a1);
}

void AMCP::DAL::DAL_Time_Delta::translate_time_delta(uint64_t a1, AMCP::DAL::DAL_Time_Delta *this, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v6 = *a3;
  v7 = *((_QWORD *)this + 3);
  if (*a3)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if (!(v6 | v7))
      goto LABEL_7;
  }
  else
  {
    v13 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
    v15 = v13[23];
    if ((v15 & 0x80u) == 0)
      v16 = v13[23];
    else
      v16 = *((_QWORD *)v13 + 1);
    v17 = *(unsigned __int8 *)(v14 + 23);
    v18 = (char)v17;
    if ((v17 & 0x80u) != 0)
      v17 = *(_QWORD *)(v14 + 8);
    if (v16 == v17)
    {
      if (v18 >= 0)
        v19 = (unsigned __int8 *)v14;
      else
        v19 = *(unsigned __int8 **)v14;
      if ((v15 & 0x80) == 0)
      {
        if (v13[23])
        {
          while (*v13 == *v19)
          {
            ++v13;
            ++v19;
            if (!--v15)
              goto LABEL_7;
          }
          goto LABEL_26;
        }
LABEL_7:
        *(_OWORD *)a1 = *(_OWORD *)this;
        v9 = *((_QWORD *)this + 3);
        *(_QWORD *)(a1 + 16) = *((_QWORD *)this + 2);
        *(_QWORD *)(a1 + 24) = v9;
        v10 = *((_QWORD *)this + 4);
        *(_QWORD *)(a1 + 32) = v10;
        if (v10)
        {
          v11 = (unint64_t *)(v10 + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        return;
      }
      if (!memcmp(*(const void **)v13, v19, *((_QWORD *)v13 + 1)))
        goto LABEL_7;
    }
  }
LABEL_26:
  if ((*(_BYTE *)this & 1) == 0)
    AMCP::DAL::DAL_Time_Delta::validate(this);
  v20 = *((_QWORD *)this + 2);
  v22 = *a3;
  v21 = a3[1];
  if (v21)
  {
    v23 = (unint64_t *)(v21 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 24) = v22;
  *(_QWORD *)(a1 + 32) = v21;
}

uint64_t caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::store(uint64_t result, __int128 *a2)
{
  unsigned __int8 *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unsigned int v28;
  unsigned int v29;
  int v30;

  v3 = (unsigned __int8 *)result;
  v30 = 0;
  v4 = (unsigned int *)(result + 4);
  v5 = result + 64;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 + 1, v4));
  v7 = v5 + 192 * (v6 & 1);
  v8 = 2 * v6;
  atomic_store(2 * v6, (unsigned int *)v7);
  v9 = *a2;
  *(_OWORD *)(v7 + 24) = a2[1];
  *(_OWORD *)(v7 + 8) = v9;
  v10 = a2[2];
  v11 = a2[3];
  v12 = a2[4];
  *(_OWORD *)(v7 + 88) = a2[5];
  *(_OWORD *)(v7 + 72) = v12;
  *(_OWORD *)(v7 + 56) = v11;
  *(_OWORD *)(v7 + 40) = v10;
  v13 = a2[6];
  v14 = a2[7];
  v15 = a2[8];
  *(_OWORD *)(v7 + 145) = *(__int128 *)((char *)a2 + 137);
  *(_OWORD *)(v7 + 136) = v15;
  *(_OWORD *)(v7 + 120) = v14;
  *(_OWORD *)(v7 + 104) = v13;
  __dmb(0xBu);
  v16 = (2 * v6) | 1;
  do
  {
    v17 = __ldaxr((unsigned int *)v7);
    if (v17 != v8)
    {
      while (1)
      {
        __clrex();
        result = caulk::concurrent::details::spinloop::spin((uint64_t)&v30);
        do
          v18 = __ldaxr(v4);
        while (__stlxr(v18 + 1, v4));
        v19 = v5 + 192 * (v18 & 1);
        v20 = 2 * v18;
        atomic_store(2 * v18, (unsigned int *)v19);
        v21 = *a2;
        *(_OWORD *)(v19 + 24) = a2[1];
        *(_OWORD *)(v19 + 8) = v21;
        v22 = a2[2];
        v23 = a2[3];
        v24 = a2[4];
        *(_OWORD *)(v19 + 88) = a2[5];
        *(_OWORD *)(v19 + 72) = v24;
        *(_OWORD *)(v19 + 56) = v23;
        *(_OWORD *)(v19 + 40) = v22;
        v25 = a2[6];
        v26 = a2[7];
        v27 = a2[8];
        *(_OWORD *)(v19 + 145) = *(__int128 *)((char *)a2 + 137);
        *(_OWORD *)(v19 + 136) = v27;
        *(_OWORD *)(v19 + 120) = v26;
        *(_OWORD *)(v19 + 104) = v25;
        __dmb(0xBu);
        v28 = (2 * v18) | 1;
        while (1)
        {
          v29 = __ldaxr((unsigned int *)v19);
          if (v29 != v20)
            break;
          if (!__stlxr(v28, (unsigned int *)v19))
            goto LABEL_12;
        }
      }
    }
  }
  while (__stlxr(v16, (unsigned int *)v7));
LABEL_12:
  atomic_store(1u, v3);
  return result;
}

void AMCP::IOAudio2::Engine::~Engine(AMCP::IOAudio2::Engine *this)
{
  AMCP::IOAudio2::Engine::~Engine(this);
  JUMPOUT(0x1B5E50688);
}

{
  unsigned int *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  const void *v7;
  std::__shared_weak_count *v8;
  void **v9;

  *(_QWORD *)this = &off_1E6983F68;
  AMCP::IOAudio2::Engine::set_transport_state((uint64_t)this, 0);
  v9 = (void **)((char *)this + 760);
  std::vector<std::unique_ptr<applesauce::iokit::mapped_memory>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 736);
  std::vector<std::unique_ptr<applesauce::iokit::mapped_memory>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v2 = (unsigned int *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v2)
    std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v2);
  IOConnectRelease(*((_DWORD *)this + 181));
  AMCP::IO_Clock::~IO_Clock((AMCP::IOAudio2::Engine *)((char *)this + 560));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::IOAudio2::Engine *)((char *)this + 240));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 224);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 18);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 12);
  if (v5)
  {
    *((_QWORD *)this + 13) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 9);
  if (v6)
  {
    *((_QWORD *)this + 10) = v6;
    operator delete(v6);
  }
  v7 = (const void *)*((_QWORD *)this + 3);
  if (v7)
    CFRelease(v7);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

_QWORD *AMCP::IOAudio2::Engine::get_device_uid@<X0>(const void **this@<X0>, _QWORD *a2@<X8>)
{
  return AMCP::Core::Implementation::Simple_Engine_Data::get_device_uid(a2, this[3]);
}

double AMCP::IOAudio2::Engine::get_sample_rate(AMCP::IOAudio2::Engine *this)
{
  return *((double *)this + 4);
}

uint64_t AMCP::IOAudio2::Engine::get_max_io_buffer_frame_size(AMCP::IOAudio2::Engine *this)
{
  return (3 * *((_DWORD *)this + 10)) >> 3;
}

uint64_t AMCP::IOAudio2::Engine::get_suggested_ring_buffer_frame_size(AMCP::IOAudio2::Engine *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t AMCP::IOAudio2::Engine::get_clock_domain(AMCP::IOAudio2::Engine *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t AMCP::IOAudio2::Engine::supports_prewarming(AMCP::IOAudio2::Engine *this)
{
  return *((unsigned __int8 *)this + 48);
}

BOOL AMCP::IOAudio2::Engine::has_input_streams(AMCP::IOAudio2::Engine *this)
{
  return *((_QWORD *)this + 9) != *((_QWORD *)this + 10);
}

BOOL AMCP::IOAudio2::Engine::has_output_streams(AMCP::IOAudio2::Engine *this)
{
  return *((_QWORD *)this + 12) != *((_QWORD *)this + 13);
}

uint64_t AMCP::IOAudio2::Engine::get_input_safety_offset(AMCP::IOAudio2::Engine *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t AMCP::IOAudio2::Engine::get_output_safety_offset(AMCP::IOAudio2::Engine *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t AMCP::IOAudio2::Engine::get_input_latency(AMCP::IOAudio2::Engine *this)
{
  return *((unsigned int *)this + 15);
}

uint64_t AMCP::IOAudio2::Engine::get_output_latency(AMCP::IOAudio2::Engine *this)
{
  return *((unsigned int *)this + 16);
}

void AMCP::IOAudio2::Engine::get_input_format_list(AMCP::IOAudio2::Engine *this@<X0>, AMCP::Core::Implementation::Simple_Engine_Data *a2@<X8>)
{
  AMCP::Core::Implementation::Simple_Engine_Data::get_input_format_list(a2, *((_QWORD *)this + 9), *((_QWORD *)this + 10));
}

void AMCP::IOAudio2::Engine::get_output_format_list(AMCP::IOAudio2::Engine *this@<X0>, AMCP::Core::Implementation::Simple_Engine_Data *a2@<X8>)
{
  AMCP::Core::Implementation::Simple_Engine_Data::get_output_format_list(a2, *((_QWORD *)this + 12), *((_QWORD *)this + 13));
}

__n128 AMCP::IOAudio2::Engine::get_stream_format@<Q0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;

  v4 = a1 + 72;
  v5 = 72;
  if (!a2)
  {
    v5 = 96;
    v4 = a1 + 96;
  }
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(v4 + 8);
  while (1)
  {
    if (v6 == v7)
    {
      *(_QWORD *)(a4 + 32) = 0;
      result.n128_u64[0] = 0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      return result;
    }
    if (*(_DWORD *)v6 == a3)
      break;
    v6 += 56;
  }
  result = *(__n128 *)(v6 + 16);
  v9 = *(_OWORD *)(v6 + 32);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v9;
  *(_QWORD *)(a4 + 32) = *(_QWORD *)(v6 + 48);
  return result;
}

uint64_t AMCP::IOAudio2::Engine::get_transport_state(AMCP::IOAudio2::Engine *this)
{
  return atomic_load((unsigned int *)this + 34);
}

uint64_t AMCP::IOAudio2::Engine::set_transport_state(uint64_t a1, signed int a2)
{
  int v4;
  AMCP::Log::Scope_Registry *v5;
  _BOOL8 v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t i;
  int v14;
  unsigned int *v15;
  unsigned int **v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int **v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t j;
  int v30;
  unsigned int *v31;
  unsigned int **v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int **v40;
  mach_port_t v41;
  std::__shared_weak_count *v43;
  NSObject *v44;
  unint64_t *v45;
  unint64_t v46;
  _opaque_pthread_t *v47;
  mach_port_t v48;
  std::runtime_error *exception;
  int v50;
  int v51;
  uint64_t v52;
  int *v53;
  int v54;
  void *__p;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = atomic_load((unsigned int *)(a1 + 136));
  v54 = v4;
  v5 = (AMCP::Log::Scope_Registry *)MEMORY[0x1B5E5064C]();
  v51 = (int)v5;
  v52 = a1;
  v53 = &v54;
  if (v4 < a2)
  {
    if (!a2)
    {
      AMCP::Log::Scope_Registry::get(v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
      v43 = (std::__shared_weak_count *)v56;
      v44 = *(NSObject **)__p;
      if ((_QWORD)v56)
      {
        v45 = (unint64_t *)(v56 + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        v47 = pthread_self();
        v48 = pthread_mach_thread_np(v47);
        LODWORD(__p) = 67109890;
        HIDWORD(__p) = v48;
        LOWORD(v56) = 2080;
        *(_QWORD *)((char *)&v56 + 2) = "IOAudio2_Engine.cpp";
        WORD5(v56) = 1024;
        HIDWORD(v56) = 448;
        LOWORD(v57) = 2080;
        *(_QWORD *)((char *)&v57 + 2) = "in_new_state != Transport_State::off";
        _os_log_error_impl(&dword_1B57BA000, v44, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s can't transition to off state with a start call", (uint8_t *)&__p, 0x22u);
      }
      abort();
    }
    if (v4)
    {
      if (!*(_BYTE *)(a1 + 48))
        goto LABEL_49;
    }
    else
    {
      v6 = AMCP::IO_Clock::reset_time((os_unfair_lock_s *)(a1 + 560));
      v50 = MEMORY[0x1B5E5064C](v6);
      v7 = (unsigned int *)operator new();
      applesauce::iokit::mapped_memory::mapped_memory(v7, *(_DWORD *)(a1 + 724), 0);
      v8 = *(unsigned int **)(a1 + 728);
      *(_QWORD *)(a1 + 728) = v7;
      if (v8)
        std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v8);
      v9 = *(_QWORD *)(a1 + 72);
      v10 = *(_QWORD *)(a1 + 80);
      if (v9 != v10)
      {
        v11 = (_QWORD *)(a1 + 736);
        std::vector<std::unique_ptr<applesauce::iokit::mapped_memory>>::reserve((_QWORD *)(a1 + 736), 0x6DB6DB6DB6DB6DB7 * ((v10 - v9) >> 3));
        v12 = *(_QWORD *)(a1 + 72);
        for (i = *(_QWORD *)(a1 + 80); v12 != i; v12 += 56)
        {
          v14 = *(_DWORD *)(v12 + 4);
          v15 = (unsigned int *)operator new();
          applesauce::iokit::mapped_memory::mapped_memory(v15, *(_DWORD *)(a1 + 724), (v14 + 0x10000000));
          v16 = *(unsigned int ***)(a1 + 744);
          v17 = *(_QWORD *)(a1 + 752);
          if ((unint64_t)v16 >= v17)
          {
            v19 = ((uint64_t)v16 - *v11) >> 3;
            if ((unint64_t)(v19 + 1) >> 61)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v20 = v17 - *v11;
            v21 = v20 >> 2;
            if (v20 >> 2 <= (unint64_t)(v19 + 1))
              v21 = v19 + 1;
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
              v22 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v22 = v21;
            *((_QWORD *)&v57 + 1) = a1 + 752;
            if (v22)
              v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v22);
            else
              v23 = 0;
            v24 = (unsigned int **)(v22 + 8 * v19);
            __p = (void *)v22;
            *(_QWORD *)&v56 = v24;
            *(_QWORD *)&v57 = v22 + 8 * v23;
            *v24 = v15;
            *((_QWORD *)&v56 + 1) = v24 + 1;
            std::vector<std::unique_ptr<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine,std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>>>::__swap_out_circular_buffer((_QWORD *)(a1 + 736), &__p);
            v18 = *(_QWORD **)(a1 + 744);
            std::__split_buffer<std::unique_ptr<applesauce::iokit::mapped_memory>>::~__split_buffer((uint64_t)&__p);
          }
          else
          {
            *v16 = v15;
            v18 = v16 + 1;
          }
          *(_QWORD *)(a1 + 744) = v18;
        }
      }
      v25 = *(_QWORD *)(a1 + 96);
      v26 = *(_QWORD *)(a1 + 104);
      if (v25 != v26)
      {
        v27 = (_QWORD *)(a1 + 760);
        std::vector<std::unique_ptr<applesauce::iokit::mapped_memory>>::reserve((_QWORD *)(a1 + 760), 0x6DB6DB6DB6DB6DB7 * ((v26 - v25) >> 3));
        v28 = *(_QWORD *)(a1 + 96);
        for (j = *(_QWORD *)(a1 + 104); v28 != j; v28 += 56)
        {
          v30 = *(_DWORD *)(v28 + 4);
          v31 = (unsigned int *)operator new();
          applesauce::iokit::mapped_memory::mapped_memory(v31, *(_DWORD *)(a1 + 724), (v30 + 0x10000000));
          v32 = *(unsigned int ***)(a1 + 768);
          v33 = *(_QWORD *)(a1 + 776);
          if ((unint64_t)v32 >= v33)
          {
            v35 = ((uint64_t)v32 - *v27) >> 3;
            if ((unint64_t)(v35 + 1) >> 61)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v36 = v33 - *v27;
            v37 = v36 >> 2;
            if (v36 >> 2 <= (unint64_t)(v35 + 1))
              v37 = v35 + 1;
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
              v38 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v38 = v37;
            *((_QWORD *)&v57 + 1) = a1 + 776;
            if (v38)
              v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v38);
            else
              v39 = 0;
            v40 = (unsigned int **)(v38 + 8 * v35);
            __p = (void *)v38;
            *(_QWORD *)&v56 = v40;
            *(_QWORD *)&v57 = v38 + 8 * v39;
            *v40 = v31;
            *((_QWORD *)&v56 + 1) = v40 + 1;
            std::vector<std::unique_ptr<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine,std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>>>::__swap_out_circular_buffer((_QWORD *)(a1 + 760), &__p);
            v34 = *(_QWORD **)(a1 + 768);
            std::__split_buffer<std::unique_ptr<applesauce::iokit::mapped_memory>>::~__split_buffer((uint64_t)&__p);
          }
          else
          {
            *v32 = v31;
            v34 = v32 + 1;
          }
          *(_QWORD *)(a1 + 768) = v34;
        }
      }
      if ((int)MEMORY[0x1B5E5064C]() > v50)
        AMCP::IOAudio2::Engine::release_buffers((AMCP::IOAudio2::Engine *)a1);
    }
    kdebug_trace();
    AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions((uint64_t *)(a1 + 120));
    v41 = *(_DWORD *)(a1 + 724);
    if (*(_BYTE *)(a1 + 48))
    {
      if (v41)
      {
        applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned long long &>((uint64_t)&__p, v41, 0xAu, a2 == 1);
        if (__p)
        {
          *(_QWORD *)&v56 = __p;
          operator delete(__p);
        }
        goto LABEL_48;
      }
    }
    else if (v41)
    {
      applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone>(*(_DWORD *)(a1 + 724), 0, 0, 0);
LABEL_48:
      kdebug_trace();
      goto LABEL_49;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v4 > a2)
    AMCP::IOAudio2::Engine::stop((AMCP::Log::Scope_Registry *)a1, v4, a2);
LABEL_49:
  atomic_store(a2, (unsigned int *)(a1 + 136));
  return applesauce::raii::v1::detail::ScopeGuard<AMCP::IOAudio2::Engine::set_transport_state(AMCP::Transport_State)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&v51);
}

void sub_1B5A9C1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  void *v12;

  __cxa_free_exception(v12);
  applesauce::raii::v1::detail::ScopeGuard<AMCP::IOAudio2::Engine::set_transport_state(AMCP::Transport_State)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void AMCP::IOAudio2::Engine::get_input_stream_active_list(os_unfair_lock_s *this@<X0>, AMCP::Core::Implementation::Simple_Engine_IO_State *a2@<X8>)
{
  AMCP::Core::Implementation::Simple_Engine_IO_State::get_input_stream_active_list(a2, this + 30);
}

void AMCP::IOAudio2::Engine::set_input_stream_active_list(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *__p[3];
  void *v6[3];

  v4 = a1 + 120;
  AMCP::Core::Implementation::Simple_Engine_IO_State::get_input_stream_active_list((AMCP::Core::Implementation::Simple_Engine_IO_State *)v6, (os_unfair_lock_s *)(a1 + 120));
  AMCP::Core::Implementation::Simple_Engine_IO_State::set_input_stream_active_list(__p, v4, a2);
  AMCP::IOAudio2::Engine::update_stream_active_state(a1, (uint64_t *)(a1 + 72), (uint64_t)v6, (uint64_t)__p);
  if (__p[0])
    operator delete(__p[0]);
  if (v6[0])
    operator delete(v6[0]);
}

void sub_1B5A9C300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AMCP::IOAudio2::Engine::get_output_stream_active_list(os_unfair_lock_s *this@<X0>, AMCP::Core::Implementation::Simple_Engine_IO_State *a2@<X8>)
{
  AMCP::Core::Implementation::Simple_Engine_IO_State::get_output_stream_active_list(a2, this + 30);
}

void AMCP::IOAudio2::Engine::set_output_stream_active_list(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *__p[3];
  void *v6[3];

  v4 = a1 + 120;
  AMCP::Core::Implementation::Simple_Engine_IO_State::get_output_stream_active_list((AMCP::Core::Implementation::Simple_Engine_IO_State *)v6, (os_unfair_lock_s *)(a1 + 120));
  AMCP::Core::Implementation::Simple_Engine_IO_State::set_output_stream_active_list(__p, v4, a2);
  AMCP::IOAudio2::Engine::update_stream_active_state(a1, (uint64_t *)(a1 + 96), (uint64_t)v6, (uint64_t)__p);
  if (__p[0])
    operator delete(__p[0]);
  if (v6[0])
    operator delete(v6[0]);
}

void sub_1B5A9C3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::IOAudio2::Engine::supports_past_data(AMCP::IOAudio2::Engine *this)
{
  return 0;
}

uint64_t AMCP::IOAudio2::Engine::is_past_data_enabled(AMCP::IOAudio2::Engine *this)
{
  return 0;
}

uint64_t AMCP::IOAudio2::Engine::set_past_data_enabled(AMCP::IOAudio2::Engine *this)
{
  return 0;
}

uint64_t AMCP::IOAudio2::Engine::available_past_data(AMCP::IOAudio2::Engine *this)
{
  return 0;
}

uint64_t AMCP::IOAudio2::Engine::maximum_past_data(AMCP::IOAudio2::Engine *this)
{
  return 0;
}

uint64_t AMCP::IOAudio2::Engine::begin_io_thread(AMCP::IOAudio2::Engine *this)
{
  return 1;
}

uint64_t AMCP::IOAudio2::Engine::end_io_thread(AMCP::IOAudio2::Engine *this)
{
  return 1;
}

uint64_t AMCP::IOAudio2::Engine::begin_io_cycle(AMCP::IOAudio2::Engine *this)
{
  return 1;
}

uint64_t AMCP::IOAudio2::Engine::end_io_cycle(AMCP::IOAudio2::Engine *this)
{
  return 1;
}

uint64_t AMCP::IOAudio2::Engine::begin_reading(AMCP::IOAudio2::Engine *this, unint64_t a2, unint64_t a3, double a4, uint64_t a5)
{
  unint64_t v8;
  float v9;
  int v10;
  AMCP::Log::Scope_Registry *v11;
  float v12;
  AMCP::Log::Scope_Registry *v13;
  int v14;
  std::__shared_weak_count *v15;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  _opaque_pthread_t *v19;
  mach_port_t v20;
  NSObject *v21;
  os_log_type_t v22;
  std::__shared_weak_count *v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  std::__shared_weak_count *v30;
  NSObject *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  _opaque_pthread_t *v37;
  mach_port_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint8_t buf[8];
  _BYTE v42[10];
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 92) == *((_QWORD *)this + 93) || !*((_BYTE *)this + 784))
    return 1;
  v8 = AMCP::IO_Clock::convert_sample_to_host_time((os_unfair_lock_s *)this + 140, a4);
  v9 = AMCP::Core::Engine::calculate_safety_violation_read(this, a4);
  if (v9 <= -5.0)
    kdebug_trace();
  kdebug_trace();
  v10 = MEMORY[0x1B5E4FADC](*((unsigned int *)this + 181), 0, 1, a5, (unint64_t)a4 >> 32, (unint64_t)a4, HIDWORD(v8), v8);
  kdebug_trace();
  v12 = AMCP::Core::Engine::calculate_safety_violation_read(this, a4);
  if ((int)v12 <= -5)
    v11 = (AMCP::Log::Scope_Registry *)kdebug_trace();
  if (!v10)
    return 1;
  AMCP::Log::Scope_Registry::get(v11);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v39, "com.apple.coreaudio", "AMCP");
  v14 = *(_DWORD *)(v39 + 16);
  switch(v14)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v13);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v24 = *(std::__shared_weak_count **)v42;
      v25 = **(NSObject ***)buf;
      if (*(_QWORD *)v42)
      {
        v26 = (unint64_t *)(*(_QWORD *)v42 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        break;
      v28 = pthread_self();
      v29 = pthread_mach_thread_np(v28);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v29;
      *(_WORD *)v42 = 2080;
      *(_QWORD *)&v42[2] = "IOAudio2_Engine.cpp";
      v43 = 1024;
      v44 = 238;
      v45 = 1024;
      v46 = v10;
      v21 = v25;
      v22 = OS_LOG_TYPE_INFO;
      goto LABEL_26;
    case 2:
      AMCP::Log::Scope_Registry::get(v13);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v30 = *(std::__shared_weak_count **)v42;
      v31 = **(NSObject ***)buf;
      if (*(_QWORD *)v42)
      {
        v32 = (unint64_t *)(*(_QWORD *)v42 + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
      {
        v37 = pthread_self();
        v38 = pthread_mach_thread_np(v37);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v38;
        *(_WORD *)v42 = 2080;
        *(_QWORD *)&v42[2] = "IOAudio2_Engine.cpp";
        v43 = 1024;
        v44 = 238;
        v45 = 1024;
        v46 = v10;
        _os_log_debug_impl(&dword_1B57BA000, v31, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d IOAudio2 engine begin_reading got an error from the kernel trap: %d", buf, 0x1Eu);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v13);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v15 = *(std::__shared_weak_count **)v42;
      v16 = **(NSObject ***)buf;
      if (*(_QWORD *)v42)
      {
        v17 = (unint64_t *)(*(_QWORD *)v42 + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v19 = pthread_self();
        v20 = pthread_mach_thread_np(v19);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v20;
        *(_WORD *)v42 = 2080;
        *(_QWORD *)&v42[2] = "IOAudio2_Engine.cpp";
        v43 = 1024;
        v44 = 238;
        v45 = 1024;
        v46 = v10;
        v21 = v16;
        v22 = OS_LOG_TYPE_DEFAULT;
LABEL_26:
        _os_log_impl(&dword_1B57BA000, v21, v22, "%6u %32s:%-5d IOAudio2 engine begin_reading got an error from the kernel trap: %d", buf, 0x1Eu);
      }
      break;
  }
  v34 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  return 0;
}

void sub_1B5A9C864(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::IOAudio2::Engine::read_data_from_stream(uint64_t a1, double a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, size_t **a8)
{
  unint64_t v8;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  double v24[8];

  v8 = a5;
  if (a5 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 744) - *(_QWORD *)(a1 + 736)) >> 3))
  {
    v13 = (os_unfair_lock_s *)(a1 + 720);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 720));
    v14 = *(_QWORD *)(a1 + 96);
    if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 104) - v14) >> 3) <= v8)
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    v15 = *(_QWORD *)(a1 + 760);
    if (v8 >= (*(_QWORD *)(a1 + 768) - v15) >> 3)
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    v16 = *(char **)(*(_QWORD *)(v15 + 8 * v8) + 16);
    v17 = *(unsigned int *)(a1 + 40);
    v18 = v14 + 56 * v8;
    v19 = *(unsigned int *)(v18 + 40) * (unint64_t)v17;
    AMCP::IO_Clock::get_current_zts((AMCP::IO_Clock *)v24, a1 + 560);
    v20 = a6 + (unint64_t)(a2 - v24[0]) % v17 * *(unsigned int *)(v18 + 40);
    if (v19 - v20 >= **a8)
      v21 = **a8;
    else
      v21 = v19 - v20;
    memcpy((void *)(*a8)[1], &v16[v20], v21);
    v22 = **a8;
    if (v22 > v21)
      memcpy((void *)((*a8)[1] + v21), v16, v22 - v21);
    os_unfair_lock_unlock(v13);
  }
  return 1;
}

uint64_t AMCP::IOAudio2::Engine::end_reading(AMCP::IOAudio2::Engine *this, double a2)
{
  return 1;
}

uint64_t AMCP::IOAudio2::Engine::begin_writing(AMCP::IOAudio2::Engine *this, double a2)
{
  return 1;
}

uint64_t AMCP::IOAudio2::Engine::write_data_to_stream(uint64_t a1, double a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, size_t **a8)
{
  unint64_t v8;
  float v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  double v27;
  float v28;

  v8 = a5;
  if (a5 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 768) - *(_QWORD *)(a1 + 760)) >> 3))
  {
    v12 = AMCP::Core::Engine::calculate_safety_violation_write((AMCP::Core::Engine *)a1, a2);
    if (v12 < 0.0)
      kdebug_trace();
    v13 = (unint64_t)a2;
    kdebug_trace();
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 720));
    v14 = *(_QWORD *)(a1 + 96);
    if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 104) - v14) >> 3) <= v8)
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    v15 = *(_QWORD *)(a1 + 760);
    if (v8 >= (*(_QWORD *)(a1 + 768) - v15) >> 3)
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    v16 = v14 + 56 * v8;
    v17 = *(_DWORD *)(v16 + 24);
    v18 = *(_DWORD *)(v16 + 40);
    if (v17 == 1667326771)
      v19 = 4;
    else
      v19 = v18;
    v20 = *(char **)(*(_QWORD *)(v15 + 8 * v8) + 16);
    v21 = *(unsigned int *)(a1 + 40);
    v22 = v13 % v21;
    v23 = (v21 - v13 % v21) * v19;
    if (v23 >= **a8)
      v24 = **a8;
    else
      v24 = v23;
    memcpy(&v20[v22 * v19], (const void *)(*a8)[1], v24);
    v25 = **a8;
    if (v25 > v24)
    {
      memcpy(v20, (const void *)(*a8)[1], v25 - v24);
      v25 = **a8;
    }
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 728) + 16);
    if (v26)
    {
      v27 = (double)(v25 / v19) + a2;
      if (v27 > (double)*(unint64_t *)(v26 + 32))
        *(_QWORD *)(v26 + 32) = (unint64_t)v27;
    }
    kdebug_trace();
    v28 = AMCP::Core::Engine::calculate_safety_violation_write((AMCP::Core::Engine *)a1, a2);
    if ((int)v28 < 0)
      kdebug_trace();
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 720));
  }
  return 1;
}

uint64_t AMCP::IOAudio2::Engine::end_writing(AMCP::IOAudio2::Engine *this, unint64_t a2, unint64_t a3, double a4, unint64_t a5)
{
  uint64_t v7;
  double v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  AMCP::Log::Scope_Registry *v12;
  int v13;
  AMCP::Log::Scope_Registry *v14;
  int v15;
  std::__shared_weak_count *v16;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  NSObject *v22;
  os_log_type_t v23;
  std::__shared_weak_count *v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _opaque_pthread_t *v29;
  mach_port_t v30;
  std::__shared_weak_count *v31;
  NSObject *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  _opaque_pthread_t *v38;
  mach_port_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(*((_QWORD *)this + 91) + 16);
  if (v7)
  {
    v8 = (double)a5 + a4;
    if (v8 > (double)*(unint64_t *)(v7 + 32))
      *(_QWORD *)(v7 + 32) = (unint64_t)v8;
  }
  if (*((_QWORD *)this + 95) == *((_QWORD *)this + 96))
    return 1;
  if (!*((_BYTE *)this + 785))
    return 1;
  v9 = (unint64_t)a4;
  v10 = (unint64_t)a4 >> 32;
  v11 = AMCP::IO_Clock::convert_sample_to_host_time((os_unfair_lock_s *)this + 140, a4);
  v12 = (AMCP::Log::Scope_Registry *)MEMORY[0x1B5E4FADC](*((unsigned int *)this + 181), 0, 0, a5, v10, v9, HIDWORD(v11), v11);
  v13 = (int)v12;
  if (!(_DWORD)v12)
    return 1;
  AMCP::Log::Scope_Registry::get(v12);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v40, "com.apple.coreaudio", "AMCP");
  v15 = *(_DWORD *)(v40 + 16);
  switch(v15)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v14);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v25 = *(std::__shared_weak_count **)v43;
      v26 = **(NSObject ***)buf;
      if (*(_QWORD *)v43)
      {
        v27 = (unint64_t *)(*(_QWORD *)v43 + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        break;
      v29 = pthread_self();
      v30 = pthread_mach_thread_np(v29);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v30;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "IOAudio2_Engine.cpp";
      v44 = 1024;
      v45 = 355;
      v46 = 1024;
      v47 = v13;
      v22 = v26;
      v23 = OS_LOG_TYPE_INFO;
      goto LABEL_25;
    case 2:
      AMCP::Log::Scope_Registry::get(v14);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v31 = *(std::__shared_weak_count **)v43;
      v32 = **(NSObject ***)buf;
      if (*(_QWORD *)v43)
      {
        v33 = (unint64_t *)(*(_QWORD *)v43 + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        v38 = pthread_self();
        v39 = pthread_mach_thread_np(v38);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v39;
        *(_WORD *)v43 = 2080;
        *(_QWORD *)&v43[2] = "IOAudio2_Engine.cpp";
        v44 = 1024;
        v45 = 355;
        v46 = 1024;
        v47 = v13;
        _os_log_debug_impl(&dword_1B57BA000, v32, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d IOAudio2 engine end_writing got an error from the kernel trap: %d", buf, 0x1Eu);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v14);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v16 = *(std::__shared_weak_count **)v43;
      v17 = **(NSObject ***)buf;
      if (*(_QWORD *)v43)
      {
        v18 = (unint64_t *)(*(_QWORD *)v43 + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v20 = pthread_self();
        v21 = pthread_mach_thread_np(v20);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v21;
        *(_WORD *)v43 = 2080;
        *(_QWORD *)&v43[2] = "IOAudio2_Engine.cpp";
        v44 = 1024;
        v45 = 355;
        v46 = 1024;
        v47 = v13;
        v22 = v17;
        v23 = OS_LOG_TYPE_DEFAULT;
LABEL_25:
        _os_log_impl(&dword_1B57BA000, v22, v23, "%6u %32s:%-5d IOAudio2 engine end_writing got an error from the kernel trap: %d", buf, 0x1Eu);
      }
      break;
  }
  v35 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  return 0;
}

void sub_1B5A9CFEC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

double AMCP::IOAudio2::Engine::get_zero_time_stamp@<D0>(AMCP::IOAudio2::Engine *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 *v3;
  __int128 v4;
  double result;

  v2 = *((_QWORD *)this + 91);
  if (v2 && (v3 = *(__int128 **)(v2 + 16)) != 0)
  {
    v4 = *v3;
    *(_QWORD *)(a2 + 8) = *((_QWORD *)v3 + 1);
    *(double *)a2 = (double)(unint64_t)v4;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  *(_QWORD *)&result = 3;
  *(_QWORD *)(a2 + 56) = 3;
  return result;
}

uint64_t AMCP::IOAudio2::Engine::update_time(AMCP::IOAudio2::Engine *this)
{
  return AMCP::IO_Clock::update_time((AMCP::IOAudio2::Engine *)((char *)this + 560));
}

BOOL AMCP::IOAudio2::Engine::reset_time(os_unfair_lock_s *this)
{
  return AMCP::IO_Clock::reset_time(this + 140);
}

BOOL AMCP::IOAudio2::Engine::has_time(os_unfair_lock_s *this)
{
  return AMCP::IO_Clock::has_time(this + 140);
}

void AMCP::IOAudio2::Engine::get_current_time(AMCP::IOAudio2::Engine *this@<X0>, AMCP::IO_Clock *a2@<X8>)
{
  AMCP::IO_Clock::get_current_time(a2, (uint64_t)this + 560);
}

double AMCP::IOAudio2::Engine::get_current_host_ticks_per_frame(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  double v3;

  v2 = this + 160;
  os_unfair_lock_lock(this + 160);
  v3 = *(double *)&this[156]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2);
  return v3;
}

unint64_t AMCP::IOAudio2::Engine::convert_sample_to_host_time(os_unfair_lock_s *this, double a2)
{
  return AMCP::IO_Clock::convert_sample_to_host_time(this + 140, a2);
}

double AMCP::IOAudio2::Engine::convert_host_to_sample_time(os_unfair_lock_s *this, unint64_t a2)
{
  AMCP::IO_Clock *v3;
  os_unfair_lock_s *v4;
  double v5;

  v3 = (AMCP::IO_Clock *)&this[140];
  v4 = this + 160;
  os_unfair_lock_lock(this + 160);
  v5 = AMCP::IO_Clock::convert_host_to_sample_time_internal(v3, a2);
  os_unfair_lock_unlock(v4);
  return v5;
}

uint64_t *AMCP::IOAudio2::Engine::take_power_assertions(AMCP::IOAudio2::Engine *this)
{
  return AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions((uint64_t *)this + 15);
}

uint64_t *AMCP::IOAudio2::Engine::release_power_assertions(AMCP::IOAudio2::Engine *this)
{
  return AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions((uint64_t *)this + 15);
}

void AMCP::IOAudio2::Engine::update_stream_active_state(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v16;
  mach_port_t v17;
  mach_port_t v19;
  mach_port_t v20;
  std::runtime_error *exception;

  v5 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v10 = 0;
    v11 = 0;
    v12 = *(_QWORD **)a4;
    v13 = *(_QWORD **)a3;
    while (v13 != (_QWORD *)(*(_QWORD *)a3 + 8 * (*(_QWORD *)(a3 + 8) >> 6)) || (*(_DWORD *)(a3 + 8) & 0x3F) != v10)
    {
      if (v12 == (_QWORD *)(*(_QWORD *)a4 + 8 * (*(_QWORD *)(a4 + 8) >> 6)) && (*(_DWORD *)(a4 + 8) & 0x3F) == v11)
        break;
      v16 = *v12 >> v11;
      if (((*v13 >> v10) & 1) != (v16 & 1))
      {
        v17 = *(_DWORD *)(a1 + 724);
        if (!v17)
        {
LABEL_36:
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone,unsigned int const&,unsigned long long>(v17, *(_DWORD *)(v5 + 4), v16 & 1);
        v4 = a2[1];
      }
      v5 += 56;
      v13 += v10 == 63;
      if (v10 == 63)
        v10 = 0;
      else
        ++v10;
      v12 += v11 == 63;
      if (v11 == 63)
        v11 = 0;
      else
        ++v11;
      if (v5 == v4)
        return;
    }
    if (v5 != v4)
    {
      while (v12 != (_QWORD *)(*(_QWORD *)a4 + 8 * (*(_QWORD *)(a4 + 8) >> 6)) || (*(_DWORD *)(a4 + 8) & 0x3F) != v11)
      {
        v19 = *(_DWORD *)(a1 + 724);
        if (!v19)
          goto LABEL_36;
        applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone,unsigned int const&,unsigned long long>(v19, *(_DWORD *)(v5 + 4), (*v12 >> v11) & 1);
        v5 += 56;
        v4 = a2[1];
        if (v5 == v4)
          return;
        v12 += v11 == 63;
        if (v11 == 63)
          v11 = 0;
        else
          ++v11;
      }
      while (v5 != v4)
      {
        v20 = *(_DWORD *)(a1 + 724);
        if (!v20)
          goto LABEL_36;
        applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone,unsigned int const&,unsigned long long>(v20, *(_DWORD *)(v5 + 4), 0);
        v5 += 56;
        v4 = a2[1];
      }
    }
  }
}

void sub_1B5A9D33C(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

void applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone,unsigned int const&,unsigned long long>(mach_port_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  void *exception;
  const std::error_category *v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;
  __int128 v12;
  std::string::size_type v13;
  size_t v14;
  void *__p[3];
  uint32_t outputCnt;
  char *v17[3];
  uint64_t input[2];

  input[0] = a2;
  input[1] = a3;
  memset(v17, 0, sizeof(v17));
  outputCnt = 0;
  memset(__p, 0, sizeof(__p));
  v14 = 0;
  v3 = IOConnectCallMethod(a1, 6u, input, 2u, 0, 0, 0, &outputCnt, 0, &v14);
  if ((_DWORD)v3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = std::system_category();
    v11.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v11.__r_.__value_.__r.__words[1] = xmmword_1B5D68C20;
    strcpy(v11.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v10, 6u);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v10;
    else
      v6 = (std::string *)v10.__r_.__value_.__r.__words[0];
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
    else
      size = v10.__r_.__value_.__l.__size_;
    v8 = std::string::append(&v11, (const std::string::value_type *)v6, size);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v13 = v8->__r_.__value_.__r.__words[2];
    v12 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1B5E50238](exception, v3, v5, &v12);
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  std::vector<unsigned long long>::resize(v17, outputCnt);
  if (v14)
  {
    std::vector<unsigned char>::__append((unint64_t *)__p, v14);
    if (__p[0])
      operator delete(__p[0]);
  }
  if (v17[0])
    operator delete(v17[0]);
}

void sub_1B5A9D4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31)
{
  void *v31;
  int v32;
  uint64_t v33;
  void *v35;

  if (a28 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v32 & 1) == 0)
    {
LABEL_10:
      v35 = *(void **)(v33 - 88);
      if (v35)
        operator delete(v35);
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v31);
  goto LABEL_10;
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<AMCP::IOAudio2::Engine::set_transport_state(AMCP::Transport_State)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  unsigned int *v2;

  if ((int)MEMORY[0x1B5E5064C]() > *(_DWORD *)a1)
  {
    v2 = *(unsigned int **)(a1 + 8);
    atomic_store(0, v2 + 34);
    AMCP::IOAudio2::Engine::stop((AMCP::Log::Scope_Registry *)v2, **(_DWORD **)(a1 + 16), **(_DWORD **)(a1 + 16));
  }
  return a1;
}

AMCP::Log::Scope_Registry *AMCP::IOAudio2::Engine::stop(AMCP::Log::Scope_Registry *this, int a2, int a3)
{
  AMCP::Log::Scope_Registry *v4;
  mach_port_t v5;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  std::runtime_error *exception;
  void *__p;
  __int16 v13;
  char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a3 == 2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v6 = *(NSObject **)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_19;
    v7 = pthread_self();
    v8 = pthread_mach_thread_np(v7);
    LODWORD(__p) = 67109890;
    HIDWORD(__p) = v8;
    v13 = 2080;
    v14 = "IOAudio2_Engine.cpp";
    v15 = 1024;
    v16 = 463;
    v17 = 2080;
    v18 = "in_new_state != Transport_State::on";
    goto LABEL_18;
  }
  if (a2 < a3)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v6 = *(NSObject **)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_19;
    v9 = pthread_self();
    v10 = pthread_mach_thread_np(v9);
    LODWORD(__p) = 67109890;
    HIDWORD(__p) = v10;
    v13 = 2080;
    v14 = "IOAudio2_Engine.cpp";
    v15 = 1024;
    v16 = 464;
    v17 = 2080;
    v18 = "in_old_state >= in_new_state";
LABEL_18:
    _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s can't transition to on state with a stop call", (uint8_t *)&__p, 0x22u);
LABEL_19:
    abort();
  }
  v4 = this;
  if (a2 && !*((_BYTE *)this + 48))
    goto LABEL_12;
  kdebug_trace();
  v5 = *((_DWORD *)v4 + 181);
  if (*((_BYTE *)v4 + 48))
  {
    if (v5)
    {
      applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned long long &>((uint64_t)&__p, v5, 0xBu, a3 == 1);
      if (__p)
        operator delete(__p);
      goto LABEL_11;
    }
LABEL_20:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!v5)
    goto LABEL_20;
  applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone>(*((_DWORD *)v4 + 181), 1u, 0, 0);
LABEL_11:
  AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions((uint64_t *)v4 + 15);
  this = (AMCP::Log::Scope_Registry *)kdebug_trace();
LABEL_12:
  if (!a3)
  {
    AMCP::IOAudio2::Engine::release_buffers(v4);
    return (AMCP::Log::Scope_Registry *)AMCP::IO_Clock::reset_time((os_unfair_lock_s *)v4 + 140);
  }
  return this;
}

void sub_1B5A9D8A0(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {
    __cxa_free_exception(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *AMCP::IOAudio2::Engine::release_buffers(AMCP::IOAudio2::Engine *this)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *result;

  v2 = (_QWORD *)*((_QWORD *)this + 92);
  v3 = (_QWORD *)*((_QWORD *)this + 93);
  while (v3 != v2)
  {
    v5 = (unsigned int *)*--v3;
    v4 = v5;
    *v3 = 0;
    if (v5)
      std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v4);
  }
  *((_QWORD *)this + 93) = v2;
  v6 = (_QWORD *)*((_QWORD *)this + 95);
  v7 = (_QWORD *)*((_QWORD *)this + 96);
  while (v7 != v6)
  {
    v9 = (unsigned int *)*--v7;
    v8 = v9;
    *v7 = 0;
    if (v9)
      std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v8);
  }
  *((_QWORD *)this + 96) = v6;
  result = (unsigned int *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (result)
    std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](result);
  return result;
}

void applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned long long &>(uint64_t a1, mach_port_t a2, uint32_t a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  void *exception;
  const std::error_category *v10;
  std::string *v11;
  std::string::size_type size;
  std::string *v13;
  __int128 v14;
  std::string v15;
  std::string v16;
  __int128 v17;
  std::string::size_type v18;
  size_t v19;
  unint64_t v20[3];
  uint32_t outputCnt;
  __int128 v22;
  uint64_t v23;
  uint64_t input;

  input = a4;
  std::vector<unsigned long long>::vector(&v22);
  outputCnt = 1;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  v7 = IOConnectCallMethod(a2, a3, &input, 1u, 0, 0, (uint64_t *)v22, &outputCnt, 0, &v19);
  if ((_DWORD)v7)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v10 = std::system_category();
    v16.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v16.__r_.__value_.__r.__words[1] = xmmword_1B5D68C20;
    strcpy(v16.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v15, a3);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v15;
    else
      v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    else
      size = v15.__r_.__value_.__l.__size_;
    v13 = std::string::append(&v16, (const std::string::value_type *)v11, size);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v18 = v13->__r_.__value_.__r.__words[2];
    v17 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1B5E50238](exception, v7, v10, &v17);
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  std::vector<unsigned long long>::resize((char **)&v22, outputCnt);
  if (v19)
  {
    std::vector<unsigned char>::__append(v20, v19);
    v8 = (void *)v20[0];
  }
  else
  {
    v8 = 0;
  }
  *(_OWORD *)a1 = v22;
  *(_QWORD *)(a1 + 16) = v23;
  v23 = 0;
  v22 = 0uLL;
  if (v8)
  {
    operator delete(v8);
    if ((_QWORD)v22)
    {
      *((_QWORD *)&v22 + 1) = v22;
      operator delete((void *)v22);
    }
  }
}

void sub_1B5A9DB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  if (a28 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v31 & 1) == 0)
    {
LABEL_10:
      v34 = *(void **)(v32 - 80);
      if (v34)
      {
        *(_QWORD *)(v32 - 72) = v34;
        operator delete(v34);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v30);
  goto LABEL_10;
}

_QWORD *std::vector<unsigned long long>::vector(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(8uLL);
  *a1 = v2;
  *v2++ = 0;
  a1[1] = v2;
  a1[2] = v2;
  return a1;
}

_QWORD *std::vector<std::unique_ptr<applesauce::iokit::mapped_memory>>::reserve(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 8 * v4;
    std::vector<std::unique_ptr<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine,std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>>>::__swap_out_circular_buffer(v2, v5);
    return (_QWORD *)std::__split_buffer<std::unique_ptr<applesauce::iokit::mapped_memory>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<applesauce::iokit::mapped_memory>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  unsigned int *v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(unsigned int **)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::unique_ptr<applesauce::iokit::mapped_memory>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  unsigned int *v6;
  unsigned int *v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = (unsigned int *)*--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__function::__func<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6984120;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6984120;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 304))(*(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26EngineC1EN10applesauce5iokit17io_connect_holderENS2_2CF9StringRefEdjjbjjjjRKNSt3__16vectorINS_4Core14Implementation18Simple_Engine_Data11Stream_InfoENS7_9allocatorISC_EEEESH_bbRKNS_7Utility14Dispatch_QueueEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::target_type()
{
}

uint64_t AMCP::IOAudio2::Engine::Engine(uint64_t a1, _DWORD *a2, CFTypeRef *a3, int a4, int a5, char a6, int a7, int a8, double a9, int a10, int a11, uint64_t a12, uint64_t a13, char a14, char a15, dispatch_queue_t *a16)
{
  CFTypeRef v24;
  unint64_t v25;
  uint64_t v26;
  const AMCP::Utility::Dispatch_Queue *v27;
  AMCP::Log::Scope_Registry *v28;
  uint64_t v29;
  std::__shared_weak_count *v31;
  NSObject *v32;
  unint64_t *v33;
  unint64_t v34;
  _opaque_pthread_t *v35;
  mach_port_t v36;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  __int16 v46;
  const char *v47;
  _QWORD v48[3];
  AMCP::Log::Scope_Registry *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6983F68;
  v24 = *a3;
  if (*a3)
    CFRetain(*a3);
  v40 = 0uLL;
  v41 = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&v40, *(const void **)a12, *(_QWORD *)(a12 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a12 + 8) - *(_QWORD *)a12) >> 3));
  v38 = 0uLL;
  v39 = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&v38, *(const void **)a13, *(_QWORD *)(a13 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a13 + 8) - *(_QWORD *)a13) >> 3));
  *(_QWORD *)(a1 + 24) = v24;
  *(double *)(a1 + 32) = a9;
  *(_DWORD *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 44) = a5;
  *(_BYTE *)(a1 + 48) = a6;
  *(_DWORD *)(a1 + 52) = a7;
  *(_DWORD *)(a1 + 56) = a8;
  *(_DWORD *)(a1 + 60) = a10;
  *(_DWORD *)(a1 + 64) = a11;
  *(_OWORD *)(a1 + 72) = v40;
  *(_QWORD *)(a1 + 88) = v41;
  v40 = 0uLL;
  v41 = 0;
  *(_OWORD *)(a1 + 96) = v38;
  *(_QWORD *)(a1 + 112) = v39;
  v25 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a12 + 8) - *(_QWORD *)a12) >> 3);
  v26 = (uint64_t)(*(_QWORD *)(a13 + 8) - *(_QWORD *)a13) >> 3;
  v38 = 0uLL;
  v39 = 0;
  AMCP::Core::Implementation::Simple_Engine_IO_State::Simple_Engine_IO_State((AMCP::Core::Implementation::Simple_Engine_IO_State *)(a1 + 120), (const __CFString **)a3, v25, 0x6DB6DB6DB6DB6DB7 * v26, 0, a16, v27);
  v48[0] = &off_1E6984120;
  v48[1] = a1;
  v49 = (AMCP::Log::Scope_Registry *)v48;
  AMCP::IO_Clock::IO_Clock(a1 + 560, (uint64_t)v48, a4, a9);
  v28 = v49;
  if (v49 == (AMCP::Log::Scope_Registry *)v48)
  {
    v29 = 4;
    v28 = (AMCP::Log::Scope_Registry *)v48;
  }
  else
  {
    if (!v49)
      goto LABEL_8;
    v29 = 5;
  }
  v28 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_8:
  *(_QWORD *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 724) = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_BYTE *)(a1 + 784) = a14;
  *(_BYTE *)(a1 + 785) = a15;
  if (!*(_DWORD *)(a1 + 724))
  {
    AMCP::Log::Scope_Registry::get(v28);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v31 = *(std::__shared_weak_count **)v43;
    v32 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v33 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v35 = pthread_self();
      v36 = pthread_mach_thread_np(v35);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v36;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "IOAudio2_Engine.cpp";
      v44 = 1024;
      v45 = 49;
      v46 = 2080;
      v47 = "m_connection.is_valid()";
      _os_log_error_impl(&dword_1B57BA000, v32, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the connection has to be valid", buf, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1B5A9E210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  AMCP::IO_Clock *v29;
  unsigned int **v30;
  unsigned int *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  const void *v37;
  std::__shared_weak_count *v38;

  a19 = v28 + 760;
  std::vector<std::unique_ptr<applesauce::iokit::mapped_memory>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19 = v28 + 736;
  std::vector<std::unique_ptr<applesauce::iokit::mapped_memory>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  v32 = *v30;
  *v30 = 0;
  if (v32)
    std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v32);
  IOConnectRelease(*(_DWORD *)(v28 + 724));
  AMCP::IO_Clock::~IO_Clock(v29);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(v28 + 240));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v28 + 224);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v28 + 208);
  v33 = *(void **)(v28 + 176);
  if (v33)
    operator delete(v33);
  v34 = *(void **)(v28 + 144);
  if (v34)
    operator delete(v34);
  v35 = *(void **)(v28 + 96);
  if (v35)
  {
    *(_QWORD *)(v28 + 104) = v35;
    operator delete(v35);
  }
  v36 = *(void **)(v28 + 72);
  if (v36)
  {
    *(_QWORD *)(v28 + 80) = v36;
    operator delete(v36);
  }
  v37 = *(const void **)(v28 + 24);
  if (v37)
    CFRelease(v37);
  v38 = *(std::__shared_weak_count **)(v28 + 16);
  if (v38)
    std::__shared_weak_count::__release_weak(v38);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Terminal::Terminal(uint64_t a1, __int128 *a2, uint64_t a3, int a4)
{
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  std::string *v15;
  std::string *v16;
  BOOL v17;

  v8 = 0;
  v9 = 0;
  v10 = *a2;
  v11 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = v11;
  v12 = a1 + 40;
  v13 = (uint64_t)a2 + 40;
  do
  {
    v14 = v8;
    v15 = (std::string *)(v12 + 24 * v9);
    v15->__r_.__value_.__r.__words[0] = 0;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v16 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v15, *(__int128 **)(v13 + 24 * v9), *(__int128 **)(v13 + 24 * v9 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v13 + 24 * v9 + 8) - *(_QWORD *)(v13 + 24 * v9)) >> 3));
    v8 = 1;
    v9 = 1;
  }
  while ((v14 & 1) == 0);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  if (*((_BYTE *)a2 + 96))
  {
    v17 = 1;
  }
  else
  {
    AMCP::Graph::File_Capture_Settings::instance((AMCP::Graph::File_Capture_Settings *)v16);
    v17 = BYTE1(AMCP::Graph::File_Capture_Settings::instance(void)::s_instance) != 0;
  }
  *(_BYTE *)(a1 + 96) = v17;
  *(_DWORD *)(a1 + 100) = a4;
  *(_QWORD *)(a1 + 104) = a3;
  return a1;
}

void sub_1B5A9E440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;

  if ((v12 & 1) == 0)
  {
    v14 = 24 * v11;
    v15 = v10 + 16;
    do
    {
      a10 = v15 + v14;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
      v14 -= 24;
    }
    while (v14);
  }
  _Unwind_Resume(exception_object);
}

double AMCP::Graph::Terminal::get_description(AMCP::Graph::Terminal *this, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  char *v8;
  char v9;
  double result;

  v4 = 0;
  v5 = 0;
  *((_QWORD *)this + 11) = 1;
  *((_BYTE *)this + 96) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  v6 = (char *)this + 40;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = v7;
  *((_QWORD *)this + 4) = *(_QWORD *)(a2 + 32);
  v8 = (char *)(a2 + 40);
  do
  {
    v9 = v4;
    if (v6 != v8)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v6[24 * v5], *(std::string **)&v8[24 * v5], *(__int128 **)&v8[24 * v5 + 8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v8[24 * v5 + 8] - *(_QWORD *)&v8[24 * v5]) >> 3));
    v4 = 1;
    v5 = 1;
  }
  while ((v9 & 1) == 0);
  result = *(double *)(a2 + 88);
  *((double *)this + 11) = result;
  *((_BYTE *)this + 96) = *(_BYTE *)(a2 + 96);
  return result;
}

void sub_1B5A9E53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t i;

  for (i = 64; i != 16; i -= 24)
  {
    a10 = (void **)(v10 + i);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t Property_Type_Info::get_property_data_and_qualifier_type_code(Property_Type_Info *this, int a2, AMCP::HAL *a3)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int hal_property_value_type_code;
  uint64_t v15;
  uint64_t v16;

  v6 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  v7 = *(_QWORD *)this;
  v8 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v8)
  {
    while (*(_DWORD *)v7 != a2)
    {
      v7 += 48;
      if (v7 == v8)
        goto LABEL_20;
    }
  }
  if (v7 == v8
    || (v9 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)(v7 + 8), a3)) == 0)
  {
LABEL_20:
    hal_property_value_type_code = AMCP::HAL::get_hal_property_value_type_code(a3);
    v15 = AMCP::HAL::get_hal_property_qualifier_type_code(a3) << 32;
  }
  else
  {
    v11 = *((_DWORD *)v9 + 5);
    v10 = *((_DWORD *)v9 + 6);
    if (v11 == 1667658612)
      v12 = 6;
    else
      v12 = 0;
    if (v11 == 1886155636)
      v13 = 15;
    else
      v13 = v12;
    if (v11 == 1918990199)
      hal_property_value_type_code = 1;
    else
      hal_property_value_type_code = v13;
    switch(v10)
    {
      case 1918990199:
        v15 = 0x100000000;
        break;
      case 1886155636:
        v15 = 0xF00000000;
        break;
      case 1667658612:
        v15 = 0x600000000;
        break;
      default:
        v15 = 0;
        break;
    }
  }
  v16 = v15 | hal_property_value_type_code;
  std::mutex::unlock(v6);
  return v16;
}

uint64_t Property_Type_Info::get_property_qualifier_type_code(Property_Type_Info *this, int a2, AMCP::HAL *a3)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t hal_property_qualifier_type_code;

  v6 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  v7 = *(_QWORD *)this;
  v8 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v8)
  {
    while (*(_DWORD *)v7 != a2)
    {
      v7 += 48;
      if (v7 == v8)
        goto LABEL_11;
    }
  }
  if (v7 == v8
    || (v9 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)(v7 + 8), a3)) == 0)
  {
LABEL_11:
    hal_property_qualifier_type_code = AMCP::HAL::get_hal_property_qualifier_type_code(a3);
  }
  else
  {
    v10 = *((_DWORD *)v9 + 6);
    switch(v10)
    {
      case 1918990199:
        hal_property_qualifier_type_code = 1;
        break;
      case 1886155636:
        hal_property_qualifier_type_code = 15;
        break;
      case 1667658612:
        hal_property_qualifier_type_code = 6;
        break;
      default:
        hal_property_qualifier_type_code = 0;
        break;
    }
  }
  std::mutex::unlock(v6);
  return hal_property_qualifier_type_code;
}

void Property_Type_Info::add_custom_properties(Property_Type_Info *this, unsigned int a2, uint64_t a3, const AudioServerPlugInCustomPropertyInfo *a4)
{
  unint64_t v4;
  std::mutex *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  UInt32 *v13;
  __int128 v14;
  int v15;
  UInt32 *p_mQualifierDataType;
  size_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t **v22;
  uint64_t *i;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  unsigned int v44;
  _BYTE v45[20];
  __int128 v46;
  float v47;
  __int128 v48;
  __int128 v49;
  int v50;
  _QWORD v51[5];

  v9 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  v10 = *(_DWORD **)this;
  v11 = (_DWORD *)*((_QWORD *)this + 1);
  if (*(_DWORD **)this != v11)
  {
    while (*v10 != a2)
    {
      v10 += 12;
      if (v10 == v11)
        goto LABEL_10;
    }
  }
  if (v10 == v11)
  {
LABEL_10:
    v14 = 0uLL;
    v48 = 0u;
    v49 = 0u;
    v15 = 1065353216;
    v50 = 1065353216;
    if (a3)
    {
      p_mQualifierDataType = &a4->mQualifierDataType;
      do
      {
        v44 = *(p_mQualifierDataType - 2);
        *(_QWORD *)v45 = *(_QWORD *)(p_mQualifierDataType - 1);
        std::__hash_table<std::__hash_value_type<unsigned int,Custom_Property_Types>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Custom_Property_Types>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Custom_Property_Types>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Custom_Property_Types>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,Custom_Property_Types>>((uint64_t)&v48, v44, (uint64_t)&v44);
        p_mQualifierDataType += 3;
        --a3;
      }
      while (a3);
      v15 = v50;
      v17 = *((_QWORD *)&v48 + 1);
      v14 = 0uLL;
    }
    else
    {
      v17 = 0;
    }
    v44 = a2;
    *(_OWORD *)&v45[4] = v14;
    v46 = v14;
    v47 = *(float *)&v15;
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)&v45[4], v17);
    v18 = (uint64_t *)v49;
    if (!(_QWORD)v49)
    {
LABEL_56:
      v35 = *((_QWORD *)this + 2);
      v36 = (_DWORD *)*((_QWORD *)this + 1);
      if ((unint64_t)v36 >= v35)
      {
        v38 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v36 - *(_QWORD *)this) >> 4);
        v39 = v38 + 1;
        if (v38 + 1 > 0x555555555555555)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *(_QWORD *)this) >> 4);
        if (2 * v40 > v39)
          v39 = 2 * v40;
        if (v40 >= 0x2AAAAAAAAAAAAAALL)
          v41 = 0x555555555555555;
        else
          v41 = v39;
        v51[4] = (char *)this + 16;
        if (v41)
          v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<MutationItinerary::Device>>(v41);
        else
          v42 = 0;
        v43 = (_DWORD *)(v41 + 48 * v38);
        v51[0] = v41;
        v51[1] = v43;
        v51[3] = v41 + 48 * v42;
        *v43 = v44;
        std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v43 + 2), (uint64_t *)&v45[4]);
        v51[2] = v43 + 12;
        std::vector<std::pair<unsigned int,std::unordered_map<unsigned int,Custom_Property_Types>>>::__swap_out_circular_buffer((uint64_t *)this, v51);
        v37 = (_DWORD *)*((_QWORD *)this + 1);
        std::__split_buffer<std::pair<unsigned int,std::unordered_map<unsigned int,Custom_Property_Types>>>::~__split_buffer((uint64_t)v51);
      }
      else
      {
        *v36 = v44;
        v37 = v36 + 12;
        std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v36 + 2), (uint64_t *)&v45[4]);
      }
      *((_QWORD *)this + 1) = v37;
      std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&v45[4]);
      std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&v48);
      goto LABEL_69;
    }
    v19 = *(_QWORD *)&v45[12];
    while (1)
    {
      v20 = *((unsigned int *)v18 + 4);
      if (v19)
      {
        v21 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
        v21.i16[0] = vaddlv_u8(v21);
        if (v21.u32[0] > 1uLL)
        {
          v4 = *((unsigned int *)v18 + 4);
          if (v19 <= v20)
            v4 = v20 % v19;
        }
        else
        {
          v4 = ((_DWORD)v19 - 1) & v20;
        }
        v22 = *(uint64_t ***)(*(_QWORD *)&v45[4] + 8 * v4);
        if (v22)
        {
          for (i = *v22; i; i = (uint64_t *)*i)
          {
            v24 = i[1];
            if (v24 == v20)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)v20)
                goto LABEL_55;
            }
            else
            {
              if (v21.u32[0] > 1uLL)
              {
                if (v24 >= v19)
                  v24 %= v19;
              }
              else
              {
                v24 &= v19 - 1;
              }
              if (v24 != v4)
                break;
            }
          }
        }
      }
      v25 = operator new(0x20uLL);
      *v25 = 0;
      v25[1] = v20;
      v26 = v18[2];
      *((_DWORD *)v25 + 6) = *((_DWORD *)v18 + 6);
      v25[2] = v26;
      v27 = (float)(unint64_t)(*((_QWORD *)&v46 + 1) + 1);
      if (!v19 || (float)(v47 * (float)v19) < v27)
      {
        v28 = (v19 & (v19 - 1)) != 0;
        if (v19 < 3)
          v28 = 1;
        v29 = v28 | (2 * v19);
        v30 = vcvtps_u32_f32(v27 / v47);
        if (v29 <= v30)
          v31 = v30;
        else
          v31 = v29;
        std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)&v45[4], v31);
        v19 = *(_QWORD *)&v45[12];
        if ((*(_QWORD *)&v45[12] & (*(_QWORD *)&v45[12] - 1)) != 0)
        {
          if (*(_QWORD *)&v45[12] <= v20)
            v4 = v20 % *(_QWORD *)&v45[12];
          else
            v4 = v20;
        }
        else
        {
          v4 = (*(_DWORD *)&v45[12] - 1) & v20;
        }
      }
      v32 = *(_QWORD *)&v45[4];
      v33 = *(_QWORD **)(*(_QWORD *)&v45[4] + 8 * v4);
      if (v33)
      {
        *v25 = *v33;
      }
      else
      {
        *v25 = v46;
        *(_QWORD *)&v46 = v25;
        *(_QWORD *)(v32 + 8 * v4) = &v46;
        if (!*v25)
          goto LABEL_54;
        v34 = *(_QWORD *)(*v25 + 8);
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v34 >= v19)
            v34 %= v19;
        }
        else
        {
          v34 &= v19 - 1;
        }
        v33 = (_QWORD *)(*(_QWORD *)&v45[4] + 8 * v34);
      }
      *v33 = v25;
LABEL_54:
      ++*((_QWORD *)&v46 + 1);
LABEL_55:
      v18 = (uint64_t *)*v18;
      if (!v18)
        goto LABEL_56;
    }
  }
  if (a3)
  {
    v12 = (uint64_t)(v10 + 2);
    v13 = &a4->mQualifierDataType;
    do
    {
      v44 = *(v13 - 2);
      *(_QWORD *)v45 = *(_QWORD *)(v13 - 1);
      std::__hash_table<std::__hash_value_type<unsigned int,Custom_Property_Types>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Custom_Property_Types>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Custom_Property_Types>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Custom_Property_Types>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,Custom_Property_Types>>(v12, v44, (uint64_t)&v44);
      v13 += 3;
      --a3;
    }
    while (a3);
  }
LABEL_69:
  std::mutex::unlock(v9);
}

void sub_1B5A9EB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(v17);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&a17);
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,Custom_Property_Types>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Custom_Property_Types>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Custom_Property_Types>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Custom_Property_Types>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,Custom_Property_Types>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v6;
  v12[2] = *(_QWORD *)a3;
  *((_DWORD *)v12 + 6) = *(_DWORD *)(a3 + 8);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1B5A9EDE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::pair<unsigned int,std::unordered_map<unsigned int,Custom_Property_Types>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v7 = *(_DWORD *)(v4 - 48);
    v4 -= 48;
    *(_DWORD *)(v6 - 48) = v7;
    v6 -= 48;
    result = (uint64_t *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table(v6 + 8, (uint64_t *)(v4 + 8));
  }
  a2[1] = v6;
  v8 = *v3;
  *v3 = v6;
  a2[1] = v8;
  v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<unsigned int,std::unordered_map<unsigned int,Custom_Property_Types>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void Property_Type_Info::remove_custom_properties(Property_Type_Info *this, int a2)
{
  std::mutex *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64x2_t v19;
  int64x2_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;

  v4 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  v5 = *(_QWORD *)this;
  v6 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v6)
  {
    while (*(_DWORD *)v5 != a2)
    {
      v5 += 48;
      if (v5 == v6)
        goto LABEL_31;
    }
  }
  if (v5 != v6)
  {
    v7 = v5 + 48;
    if (v5 + 48 != v6)
    {
      do
      {
        *(_DWORD *)v5 = *(_DWORD *)v7;
        if (*(_QWORD *)(v5 + 32))
        {
          v8 = *(_QWORD **)(v5 + 24);
          if (v8)
          {
            do
            {
              v9 = (_QWORD *)*v8;
              operator delete(v8);
              v8 = v9;
            }
            while (v9);
          }
          *(_QWORD *)(v5 + 24) = 0;
          v10 = *(_QWORD *)(v5 + 16);
          if (v10)
          {
            for (i = 0; i != v10; ++i)
              *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * i) = 0;
          }
          *(_QWORD *)(v5 + 32) = 0;
        }
        v12 = *(_QWORD *)(v7 + 8);
        *(_QWORD *)(v7 + 8) = 0;
        v13 = *(void **)(v5 + 8);
        *(_QWORD *)(v5 + 8) = v12;
        if (v13)
          operator delete(v13);
        v14 = *(_QWORD *)(v7 + 24);
        v15 = *(_QWORD *)(v7 + 16);
        *(_QWORD *)(v5 + 24) = v14;
        *(_QWORD *)(v5 + 16) = v15;
        *(_QWORD *)(v7 + 16) = 0;
        v16 = *(_QWORD *)(v7 + 32);
        *(_QWORD *)(v5 + 32) = v16;
        *(_DWORD *)(v5 + 40) = *(_DWORD *)(v7 + 40);
        if (v16)
        {
          v17 = *(_QWORD *)(v14 + 8);
          if ((v15 & (v15 - 1)) != 0)
          {
            if (v17 >= v15)
              v17 %= v15;
          }
          else
          {
            v17 &= v15 - 1;
          }
          *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v17) = v5 + 24;
          *(_QWORD *)(v7 + 24) = 0;
          *(_QWORD *)(v7 + 32) = 0;
        }
        v7 += 48;
        v5 += 48;
      }
      while (v7 != v6);
      v6 = *((_QWORD *)this + 1);
    }
    for (; v6 != v5; v6 -= 48)
      std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(v6 - 40);
    *((_QWORD *)this + 1) = v5;
    v18 = *(_QWORD *)this;
    v19 = *(int64x2_t *)((char *)this + 8);
    v20 = vshrq_n_s64(vsubq_s64(v19, vdupq_n_s64(*(_QWORD *)this)), 4uLL);
    v21 = 0xAAAAAAAAAAAAAAABLL * v20.i64[0];
    v22 = v21;
    if (0xAAAAAAAAAAAAAAABLL * v20.i64[1] > v21)
    {
      v29 = (char *)this + 16;
      if (v19.i64[0] == v18)
      {
        v23 = 0;
        v24 = 0;
      }
      else
      {
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MutationItinerary::Device>>(v21);
      }
      v25 = v23;
      v26 = &v23[48 * v22];
      v27 = v26;
      v28 = &v23[48 * v24];
      std::vector<std::pair<unsigned int,std::unordered_map<unsigned int,Custom_Property_Types>>>::__swap_out_circular_buffer((uint64_t *)this, &v25);
      std::__split_buffer<std::pair<unsigned int,std::unordered_map<unsigned int,Custom_Property_Types>>>::~__split_buffer((uint64_t)&v25);
    }
  }
LABEL_31:
  std::mutex::unlock(v4);
}

void sub_1B5A9F0F4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5A9F0D8);
}

void CAAudioValueRange_ComputeUnion(double *a1, double **a2, char **a3)
{
  char *v5;
  double *v6;
  double *v7;
  double v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  double *v20;
  double v21;
  uint64_t v22;
  double v23;
  unint64_t v24;
  char *v25;
  double v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  double *v34;
  double *v35;
  double *v36;
  double *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  double *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;

  v5 = *a3;
  a3[1] = *a3;
  v7 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
LABEL_22:
    v23 = *a1;
    v22 = *((_QWORD *)a1 + 1);
    v24 = (unint64_t)a3[2];
    if ((unint64_t)v5 < v24)
    {
      *(double *)v5 = v23;
      *((_QWORD *)v5 + 1) = v22;
      v25 = v5 + 16;
LABEL_70:
      a3[1] = v25;
      return;
    }
    v29 = (v5 - *a3) >> 4;
    if (!((unint64_t)(v29 + 1) >> 60))
    {
      v30 = v24 - (_QWORD)*a3;
      v31 = v30 >> 3;
      if (v30 >> 3 <= (unint64_t)(v29 + 1))
        v31 = v29 + 1;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
        v32 = 0xFFFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      if (v32)
        v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v32);
      else
        v33 = 0;
      v50 = (_QWORD *)(v32 + 16 * v29);
      v51 = v32 + 16 * v33;
      *(double *)v50 = v23;
      v50[1] = v22;
      v25 = (char *)(v50 + 2);
      v53 = *a3;
      v52 = a3[1];
      if (v52 != *a3)
      {
        do
        {
          *((_OWORD *)v50 - 1) = *((_OWORD *)v52 - 1);
          v50 -= 2;
          v52 -= 16;
        }
        while (v52 != v53);
        v52 = *a3;
      }
      *a3 = (char *)v50;
      a3[1] = v25;
      a3[2] = (char *)v51;
      if (v52)
        operator delete(v52);
      goto LABEL_70;
    }
LABEL_103:
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  v9 = *a1;
  if (v7[1] < *a1)
  {
    while (1)
    {
      v10 = (unint64_t)a3[2];
      if ((unint64_t)v5 >= v10)
      {
        v11 = (v5 - *a3) >> 4;
        if ((unint64_t)(v11 + 1) >> 60)
          goto LABEL_103;
        v12 = v10 - (_QWORD)*a3;
        v13 = v12 >> 3;
        if (v12 >> 3 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
          v14 = 0xFFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v14);
        else
          v15 = 0;
        v16 = (char *)(v14 + 16 * v11);
        *(_OWORD *)v16 = *(_OWORD *)v7;
        v18 = *a3;
        v17 = a3[1];
        v19 = v16;
        if (v17 != *a3)
        {
          do
          {
            *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
            v19 -= 16;
            v17 -= 16;
          }
          while (v17 != v18);
          v17 = *a3;
        }
        v5 = v16 + 16;
        *a3 = v19;
        a3[1] = v16 + 16;
        a3[2] = (char *)(v14 + 16 * v15);
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_OWORD *)v5 = *(_OWORD *)v7;
        v5 += 16;
      }
      a3[1] = v5;
      v20 = v7 + 2;
      v6 = a2[1];
      if (v7 + 2 == v6)
        goto LABEL_22;
      v21 = v7[3];
      v9 = *a1;
      v7 += 2;
      if (v21 >= *a1)
        goto LABEL_25;
    }
  }
  v20 = *a2;
LABEL_25:
  v26 = a1[1];
  if (*v20 <= v26)
  {
    v34 = v20 + 2;
    while (1)
    {
      v35 = v34;
      if (v34 == v6)
        break;
      v34 += 2;
      if (*v35 > v26)
      {
        v36 = v35 - 2;
        v6 = v34 - 2;
        goto LABEL_41;
      }
    }
    v36 = v34 - 2;
LABEL_41:
    if (v9 >= *v20)
      v37 = v20;
    else
      v37 = a1;
    v38 = *(_QWORD *)v37;
    if (v36[1] >= v26)
      v26 = v36[1];
    v39 = (unint64_t)a3[2];
    if ((unint64_t)v5 >= v39)
    {
      v45 = (v5 - *a3) >> 4;
      if ((unint64_t)(v45 + 1) >> 60)
        goto LABEL_103;
      v46 = v39 - (_QWORD)*a3;
      v47 = v46 >> 3;
      if (v46 >> 3 <= (unint64_t)(v45 + 1))
        v47 = v45 + 1;
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
        v48 = 0xFFFFFFFFFFFFFFFLL;
      else
        v48 = v47;
      if (v48)
        v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v48);
      else
        v49 = 0;
      v58 = v48 + 16 * v45;
      v59 = v48 + 16 * v49;
      *(_QWORD *)v58 = v38;
      *(double *)(v58 + 8) = v26;
      v28 = (char *)(v58 + 16);
      v61 = *a3;
      v60 = a3[1];
      if (v60 != *a3)
      {
        do
        {
          *(_OWORD *)(v58 - 16) = *((_OWORD *)v60 - 1);
          v58 -= 16;
          v60 -= 16;
        }
        while (v60 != v61);
        v60 = *a3;
      }
      *a3 = (char *)v58;
      a3[1] = v28;
      a3[2] = (char *)v59;
      if (v60)
        operator delete(v60);
    }
    else
    {
      *(_QWORD *)v5 = v38;
      *((double *)v5 + 1) = v26;
      v28 = v5 + 16;
    }
  }
  else
  {
    v27 = (unint64_t)a3[2];
    if ((unint64_t)v5 >= v27)
    {
      v40 = (v5 - *a3) >> 4;
      if ((unint64_t)(v40 + 1) >> 60)
        goto LABEL_103;
      v41 = v27 - (_QWORD)*a3;
      v42 = v41 >> 3;
      if (v41 >> 3 <= (unint64_t)(v40 + 1))
        v42 = v40 + 1;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
        v43 = 0xFFFFFFFFFFFFFFFLL;
      else
        v43 = v42;
      if (v43)
        v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v43);
      else
        v44 = 0;
      v54 = (double *)(v43 + 16 * v40);
      v55 = v43 + 16 * v44;
      *v54 = v9;
      v54[1] = v26;
      v28 = (char *)(v54 + 2);
      v57 = *a3;
      v56 = a3[1];
      if (v56 != *a3)
      {
        do
        {
          *((_OWORD *)v54 - 1) = *((_OWORD *)v56 - 1);
          v54 -= 2;
          v56 -= 16;
        }
        while (v56 != v57);
        v56 = *a3;
      }
      *a3 = (char *)v54;
      a3[1] = v28;
      a3[2] = (char *)v55;
      if (v56)
        operator delete(v56);
    }
    else
    {
      *(double *)v5 = v9;
      *((double *)v5 + 1) = v26;
      v28 = v5 + 16;
    }
    v6 = v20;
  }
  for (a3[1] = v28; v6 != a2[1]; v6 += 2)
  {
    v62 = (unint64_t)a3[2];
    if ((unint64_t)v28 >= v62)
    {
      v63 = (v28 - *a3) >> 4;
      if ((unint64_t)(v63 + 1) >> 60)
        goto LABEL_103;
      v64 = v62 - (_QWORD)*a3;
      v65 = v64 >> 3;
      if (v64 >> 3 <= (unint64_t)(v63 + 1))
        v65 = v63 + 1;
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
        v66 = 0xFFFFFFFFFFFFFFFLL;
      else
        v66 = v65;
      if (v66)
        v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v66);
      else
        v67 = 0;
      v68 = (char *)(v66 + 16 * v63);
      *(_OWORD *)v68 = *(_OWORD *)v6;
      v70 = *a3;
      v69 = a3[1];
      v71 = v68;
      if (v69 != *a3)
      {
        do
        {
          *((_OWORD *)v71 - 1) = *((_OWORD *)v69 - 1);
          v71 -= 16;
          v69 -= 16;
        }
        while (v69 != v70);
        v69 = *a3;
      }
      v28 = v68 + 16;
      *a3 = v71;
      a3[1] = v68 + 16;
      a3[2] = (char *)(v66 + 16 * v67);
      if (v69)
        operator delete(v69);
    }
    else
    {
      *(_OWORD *)v28 = *(_OWORD *)v6;
      v28 += 16;
    }
    a3[1] = v28;
  }
}

void ADS::PropertyManager::FindProperty(ADS::PropertyManager *this, __int128 a2, int a3)
{
  uint64_t *v4;
  uint64_t *v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  v4 = *(uint64_t **)a2;
  v5 = *(uint64_t **)(a2 + 8);
  if (*(uint64_t **)a2 == v5)
  {
LABEL_28:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    return;
  }
  v7 = DWORD2(a2);
  v8 = a2;
  v9 = HIDWORD(*((_QWORD *)&a2 + 1));
  do
  {
    v10 = *v4;
    v11 = (std::__shared_weak_count *)v4[1];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 64))(v10);
    if ((_DWORD)v14 == v7)
    {
      v17 = HIDWORD(v14) == (_DWORD)v9 && a3 == v15;
      if (!v11)
        goto LABEL_20;
    }
    else
    {
      v17 = 0;
      if (!v11)
        goto LABEL_20;
    }
    v18 = (unint64_t *)&v11->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
LABEL_20:
    if (v17)
      goto LABEL_23;
    v4 += 2;
  }
  while (v4 != v5);
  v4 = v5;
LABEL_23:
  if (v4 == *(uint64_t **)(v8 + 8))
    goto LABEL_28;
  v20 = v4[1];
  *(_QWORD *)this = *v4;
  *((_QWORD *)this + 1) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
}

void sub_1B5A9F6CC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void ADS::PropertyManager::AddProperty(char **a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  void *v24;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v10 = *a1;
    v11 = (v5 - *a1) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v13 = v4 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = (char *)operator new(16 * v14);
    v16 = &v15[16 * v11];
    v17 = *a2;
    *(_OWORD *)v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v10 = *a1;
      v5 = a1[1];
    }
    if (v5 == v10)
    {
      v22 = vdupq_n_s64((unint64_t)v5);
      v20 = &v15[16 * v11];
    }
    else
    {
      v20 = &v15[16 * v11];
      do
      {
        v21 = *((_OWORD *)v5 - 1);
        v5 -= 16;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
      }
      while (v5 != v10);
      v22 = *(int64x2_t *)a1;
    }
    v9 = v16 + 16;
    *a1 = v20;
    a1[1] = v16 + 16;
    a1[2] = &v15[16 * v14];
    v23 = v22.i64[1];
    v24 = (void *)v22.i64[0];
    while ((void *)v23 != v24)
      v23 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v23 - 16);
    if (v24)
      operator delete(v24);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *((_QWORD *)v5 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v5 + 16;
  }
  a1[1] = v9;
}

void sub_1B5A9F860(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN3ADS15PropertyManager15SetPropertyDataEj26AudioObjectPropertyAddressPKvjNS_17SettabilityPolicyE_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, _QWORD, uint64_t);

  if (ADS::Simulator::sHost)
  {
    v1 = *(unsigned int *)(result + 40);
    v2 = *(_QWORD *)(result + 32);
    v3 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(ADS::Simulator::sHost + 32);
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    return v3(ADS::Simulator::sHost, v1, 0, v2);
  }
  return result;
}

void sub_1B5A9F8D8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t std::__split_buffer<std::unique_ptr<HALS_PlugInManager::DeferredPlugInLoadInfo>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<HALS_PlugInManager::DeferredPlugInLoadInfo>::reset[abi:ne180100]((HALS_PlugInManager::DeferredPlugInLoadInfo **)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

HALS_PlugInManager::DeferredPlugInLoadInfo *std::unique_ptr<HALS_PlugInManager::DeferredPlugInLoadInfo>::reset[abi:ne180100](HALS_PlugInManager::DeferredPlugInLoadInfo **a1, HALS_PlugInManager::DeferredPlugInLoadInfo *a2)
{
  HALS_PlugInManager::DeferredPlugInLoadInfo *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    HALS_PlugInManager::DeferredPlugInLoadInfo::~DeferredPlugInLoadInfo(result);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void HALS_PlugInManager::DeferredPlugInLoadInfo::~DeferredPlugInLoadInfo(HALS_PlugInManager::DeferredPlugInLoadInfo *this)
{
  const void *v2;
  io_object_t *v3;
  io_object_t *v4;

  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  v3 = (io_object_t *)*((_QWORD *)this + 3);
  v4 = (io_object_t *)*((_QWORD *)this + 4);
  if (v3 != v4)
  {
    do
      IOObjectRelease(*v3++);
    while (v3 != v4);
    v3 = (io_object_t *)*((_QWORD *)this + 3);
  }
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

void HALS_PlugInManager::LoadPlugIns(HALS_PlugInManager *this)
{
  const char **v1;
  uint64_t v2;
  __int128 v3;
  NSObject *v4;
  _QWORD *v5;
  const char *v6;
  DIR *v7;
  int i;
  char *d_name;
  char *v10;
  char *v11;
  int v12;
  int v13;
  const __CFDictionary *v14;
  const __CFArray *v15;
  CFIndex Count;
  unsigned int v17;
  unsigned int CFType;
  const __CFString *v19;
  unsigned int v20;
  CFTypeID v21;
  __CFString *v22;
  unsigned int *v23;
  const __CFArray *d_ino;
  __CFString *v25;
  uint64_t v26;
  CFTypeRef v27;
  const __CFURL *v28;
  void **v29;
  unsigned int v30;
  unsigned int j;
  _BOOL4 v32;
  const __CFDictionary *v33;
  const __CFString *v34;
  __CFString **v35;
  kern_return_t v36;
  io_object_t v37;
  io_object_t k;
  unint64_t v39;
  char *v40;
  _DWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  int v50;
  CFIndex Length;
  uint64_t v52;
  __CFString *v53;
  unsigned int *v54;
  const __CFURL *v55;
  uint64_t **v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t *v65;
  char *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  _DWORD *v72;
  _DWORD *exception;
  _DWORD *v74;
  uint64_t v75;
  const char *v76;
  __int128 v77;
  const char **v78;
  __int128 v79;
  uint64_t v80;
  uint64_t *v81;
  CFIndex v82;
  __int128 v83;
  CFArrayRef v84;
  __int16 v85;
  int v86;
  const __CFString *v87;
  char v88;
  dirent *v89;
  char v90;
  __CFString *v91;
  char v92;
  CFArrayRef v93;
  __int16 v94;
  CFURLRef v95;
  char v96;
  CFStringRef v97;
  char v98;
  const __CFString *v99;
  _QWORD v100[2];
  uint64_t *v101;
  char *v102;
  uint64_t v103;
  CFMutableDictionaryRef v104;
  __int16 v105;
  const __CFDictionary *Mutable;
  __int16 v107;
  __CFString *v108;
  CFBundleRef v109;
  char v110;
  char v111;
  dirent v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v1 = (const char **)operator new(0x18uLL);
  v2 = 0;
  *((_QWORD *)&v3 + 1) = 0x1B5DC0E5FLL;
  v77 = xmmword_1E69841B0;
  *(_OWORD *)v1 = xmmword_1E69841B0;
  v4 = MEMORY[0x1E0C81028];
  v78 = v1;
  v76 = "/Library/Apple/Audio/Plug-Ins/HAL";
  v1[2] = "/Library/Apple/Audio/Plug-Ins/HAL";
  *(_QWORD *)&v3 = 136315394;
  v79 = v3;
  *(_QWORD *)&v3 = 136315650;
  v83 = v3;
  do
  {
    v97 = CFStringCreateWithCString(0, v78[v2], 0x600u);
    v98 = 1;
    v95 = CFURLCreateWithFileSystemPath(0, v97, kCFURLPOSIXPathStyle, 1u);
    v96 = 1;
    if (v95)
    {
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
      v107 = 257;
      v5 = operator new(0x18uLL);
      *(_OWORD *)v5 = v77;
      v5[2] = v76;
      v6 = (const char *)v5[v2];
      if (!access(v6, 5))
      {
        v7 = opendir(v6);
        if (v7)
        {
          v89 = 0;
          bzero(&v112, 0x418uLL);
          for (i = readdir_r(v7, &v112, &v89); !i && v89; i = readdir_r(v7, &v112, &v89))
          {
            d_name = v89->d_name;
            v10 = &v89->d_name[strlen(v89->d_name) - 1];
            do
            {
              v11 = v10;
              v13 = *v10--;
              v12 = v13;
            }
            while (v11 >= d_name && v12 != 46);
            if (v11 >= d_name && !strcmp(v10 + 1, ".driver"))
            {
              v14 = (const __CFDictionary *)CFStringCreateWithFileSystemRepresentation(0, d_name);
              v104 = v14;
              LOBYTE(v105) = 1;
              if (v14 && Mutable)
              {
                if (HIBYTE(v107))
                  CFArrayAppendValue(Mutable, v14);
              }
              CACFString::~CACFString((CACFString *)&v104);
            }
          }
          closedir(v7);
        }
      }
      v80 = v2;
      if (Mutable)
      {
        CFRetain(Mutable);
        v15 = Mutable;
      }
      else
      {
        v15 = 0;
      }
      operator delete(v5);
      CACFArray::~CACFArray((CACFArray *)&Mutable);
      v93 = v15;
      v94 = 1;
      if (v15)
      {
        Count = CFArrayGetCount(v15);
        if ((_DWORD)Count)
        {
          v17 = 0;
          v82 = Count;
          do
          {
            v91 = 0;
            CFType = CACFArray::GetCFType(&v93, v17, (const void **)&v91);
            v19 = v91;
            if (v91)
              v20 = CFType;
            else
              v20 = 0;
            if (v20 != 1 || (v21 = CFGetTypeID(v91), v21 != CFStringGetTypeID()))
            {
              if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
              {
                LODWORD(v112.d_ino) = v79;
                *(__uint64_t *)((char *)&v112.d_ino + 4) = (__uint64_t)"HALS_PlugInManager.cpp";
                WORD2(v112.d_seekoff) = 1024;
                *(_DWORD *)((char *)&v112.d_seekoff + 6) = 130;
                _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInManager::LoadPlugIns: failed to get the name of the plug-in", (uint8_t *)&v112, 0x12u);
              }
              exception = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)exception = &off_1E69A1B30;
              exception[2] = 1852797029;
            }
            v22 = (__CFString *)MEMORY[0x1B5E4F980](0, v19, 0, 1, v95);
            v91 = v22;
            v92 = 1;
            if (!v22)
            {
              if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
              {
                LODWORD(v112.d_ino) = v79;
                *(__uint64_t *)((char *)&v112.d_ino + 4) = (__uint64_t)"HALS_PlugInManager.cpp";
                WORD2(v112.d_seekoff) = 1024;
                *(_DWORD *)((char *)&v112.d_seekoff + 6) = 134;
                _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInManager::LoadPlugIns: failed to create a URL for the plug-in", (uint8_t *)&v112, 0x12u);
              }
              v74 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v74 = &off_1E69A1B30;
              v74[2] = 1852797029;
            }
            v89 = (dirent *)CFURLCopyAbsoluteURL((CFURLRef)v22);
            v90 = 1;
            v87 = CFURLGetString((CFURLRef)v89);
            v88 = 0;
            v86 = 1024;
            MEMORY[0x1E0C80A78](v87);
            CACFString::GetCString(v87, (__CFString *)&v75 - 32, (char *)&v86, v23);
            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(v112.d_ino) = v83;
              *(__uint64_t *)((char *)&v112.d_ino + 4) = (__uint64_t)"HALS_PlugInManager.cpp";
              WORD2(v112.d_seekoff) = 1024;
              *(_DWORD *)((char *)&v112.d_seekoff + 6) = 142;
              v112.d_namlen = 2080;
              *(_QWORD *)&v112.d_type = &v75 - 128;
              _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInManager::LoadPlugIns: loading plug-in from: %s", (uint8_t *)&v112, 0x1Cu);
            }
            v108 = (__CFString *)&off_1E6971AA0;
            v109 = CFBundleCreate(0, (CFURLRef)v91);
            v110 = 1;
            v112.d_ino = (__uint64_t)CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
            LOWORD(v112.d_seekoff) = 257;
            if (v109)
            {
              Mutable = CFBundleGetInfoDictionary(v109);
              v107 = 0;
              if (Mutable)
              {
                v104 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
                v105 = 257;
                CACFDictionary::GetCACFDictionary(&Mutable, CFSTR("AudioServerPlugIn_LoadingConditions"), (CACFDictionary *)&v104);
                if (v104)
                  CACFDictionary::GetCACFArray(&v104, CFSTR("IOService Matching"), (CACFArray *)&v112);
                CACFDictionary::~CACFDictionary((CACFDictionary *)&v104);
              }
            }
            else
            {
              Mutable = 0;
              v107 = 0;
            }
            if (v112.d_ino)
            {
              CFRetain((CFTypeRef)v112.d_ino);
              d_ino = (const __CFArray *)v112.d_ino;
            }
            else
            {
              d_ino = 0;
            }
            CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
            CACFArray::~CACFArray((CACFArray *)&v112);
            HALB_CFBundle::~HALB_CFBundle((HALB_CFBundle *)&v108);
            v84 = d_ino;
            v85 = 1;
            if (!d_ino || !CFArrayGetCount(d_ino))
            {
              if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(v112.d_ino) = v79;
                *(__uint64_t *)((char *)&v112.d_ino + 4) = (__uint64_t)"HALS_PlugInManager.cpp";
                WORD2(v112.d_seekoff) = 1024;
                *(_DWORD *)((char *)&v112.d_seekoff + 6) = 227;
                _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInManager::LoadPlugIns:     Loading....", (uint8_t *)&v112, 0x12u);
              }
              HALS_PlugInManager::CreatePlugIn((HALS_PlugInManager *)v91, v28);
              goto LABEL_120;
            }
            v25 = v91;
            v26 = operator new();
            *(_QWORD *)v26 = v26;
            if (v25)
              v27 = CFRetain(v25);
            else
              v27 = 0;
            *(_QWORD *)(v26 + 24) = 0;
            v29 = (void **)(v26 + 24);
            *(_QWORD *)(v26 + 8) = v27;
            *(_DWORD *)(v26 + 16) = v80;
            *(_QWORD *)(v26 + 32) = 0;
            *(_QWORD *)(v26 + 40) = 0;
            if (v84)
              v30 = CFArrayGetCount(v84);
            else
              v30 = 0;
            v81 = &v75;
            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(v112.d_ino) = v83;
              *(__uint64_t *)((char *)&v112.d_ino + 4) = (__uint64_t)"HALS_PlugInManager.cpp";
              WORD2(v112.d_seekoff) = 1024;
              *(_DWORD *)((char *)&v112.d_seekoff + 6) = 158;
              v112.d_namlen = 1024;
              *(_DWORD *)&v112.d_type = v30;
              _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInManager::LoadPlugIns:     has %d matching dictionaries", (uint8_t *)&v112, 0x18u);
            }
            if (!v30)
              goto LABEL_98;
            for (j = 0; j < v30; ++j)
            {
              while (1)
              {
                Mutable = 0;
                if (CACFArray::GetDictionary(&v84, j, &Mutable))
                  break;
                if (++j >= v30)
                  goto LABEL_98;
              }
              if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(v112.d_ino) = v83;
                *(__uint64_t *)((char *)&v112.d_ino + 4) = (__uint64_t)"HALS_PlugInManager.cpp";
                WORD2(v112.d_seekoff) = 1024;
                *(_DWORD *)((char *)&v112.d_seekoff + 6) = 166;
                v112.d_namlen = 1024;
                *(_DWORD *)&v112.d_type = j;
                _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInManager::LoadPlugIns:     dictionary %d", (uint8_t *)&v112, 0x18u);
              }
              v32 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
              v33 = Mutable;
              if (v32)
              {
                if (Mutable)
                {
                  v34 = CFCopyDescription(Mutable);
                  v99 = v34;
                  applesauce::CF::details::CFString_get_value<true>((uint64_t)&v108, v34);
                  if (v34)
                    CFRelease(v34);
                }
                else
                {
                  std::string::basic_string[abi:ne180100]<0>(&v108, "(null)");
                }
                v35 = &v108;
                if (v111 < 0)
                  v35 = (__CFString **)v108;
                LODWORD(v112.d_ino) = v83;
                *(__uint64_t *)((char *)&v112.d_ino + 4) = (__uint64_t)"HALS_PlugInManager.cpp";
                WORD2(v112.d_seekoff) = 1024;
                *(_DWORD *)((char *)&v112.d_seekoff + 6) = 167;
                v112.d_namlen = 2080;
                *(_QWORD *)&v112.d_type = v35;
                _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInManager::LoadPlugIns:     matching dict: %s", (uint8_t *)&v112, 0x1Cu);
                if (v111 < 0)
                  operator delete(v108);
              }
              CFRetain(v33);
              LODWORD(v108) = 0;
              v36 = IOServiceAddMatchingNotification((IONotificationPortRef)HALS_PlugInManager::sPlugInLoadNotificationPort, "IOServiceFirstPublish", v33, (IOServiceMatchingCallback)HALS_PlugInManager::DeferredPlugInLoadingMatchingHandler, *(void **)v26, (io_iterator_t *)&v108);
              if (v36)
              {
                if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
                {
                  LODWORD(v112.d_ino) = v83;
                  *(__uint64_t *)((char *)&v112.d_ino + 4) = (__uint64_t)"HALS_PlugInManager.cpp";
                  WORD2(v112.d_seekoff) = 1024;
                  *(_DWORD *)((char *)&v112.d_seekoff + 6) = 176;
                  v112.d_namlen = 1024;
                  *(_DWORD *)&v112.d_type = v36;
                  _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInManager::LoadPlugIns: IOServiceAddMatchingNotification failed, Error: 0x%X", (uint8_t *)&v112, 0x18u);
                }
                v72 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v72 = &off_1E69A1B30;
                v72[2] = v36;
              }
              v37 = IOIteratorNext((io_iterator_t)v108);
              for (k = v37; v37; v37 = IOIteratorNext((io_iterator_t)v108))
                IOObjectRelease(v37);
              v40 = *(char **)(v26 + 32);
              v39 = *(_QWORD *)(v26 + 40);
              if ((unint64_t)v40 >= v39)
              {
                v42 = (char *)*v29;
                v43 = (v40 - (_BYTE *)*v29) >> 2;
                v44 = v43 + 1;
                if ((unint64_t)(v43 + 1) >> 62)
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                v45 = v39 - (_QWORD)v42;
                if (v45 >> 1 > v44)
                  v44 = v45 >> 1;
                v46 = (unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL;
                v47 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v46)
                  v47 = v44;
                if (v47)
                {
                  v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v47);
                  v42 = *(char **)(v26 + 24);
                  v40 = *(char **)(v26 + 32);
                }
                else
                {
                  v48 = 0;
                }
                v49 = (_DWORD *)(v47 + 4 * v43);
                *v49 = (_DWORD)v108;
                v41 = v49 + 1;
                while (v40 != v42)
                {
                  v50 = *((_DWORD *)v40 - 1);
                  v40 -= 4;
                  *--v49 = v50;
                }
                *(_QWORD *)(v26 + 24) = v49;
                *(_QWORD *)(v26 + 32) = v41;
                *(_QWORD *)(v26 + 40) = v47 + 4 * v48;
                if (v42)
                  operator delete(v42);
              }
              else
              {
                *(_DWORD *)v40 = (_DWORD)v108;
                v41 = v40 + 4;
              }
              *(_QWORD *)(v26 + 32) = v41;
              if (k)
                break;
            }
            if (k)
            {
              if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(v112.d_ino) = v79;
                *(__uint64_t *)((char *)&v112.d_ino + 4) = (__uint64_t)"HALS_PlugInManager.cpp";
                WORD2(v112.d_seekoff) = 1024;
                *(_DWORD *)((char *)&v112.d_seekoff + 6) = 199;
                _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInManager::LoadPlugIns:     Loading....", (uint8_t *)&v112, 0x12u);
              }
              v108 = (__CFString *)v19;
              LOBYTE(v109) = 0;
              Length = CFStringGetLength(v19);
              MEMORY[0x1E0C80A78](Length);
              v53 = (__CFString *)((char *)&v75 - ((v52 + 15) & 0x1FFFFFFF0));
              LODWORD(Mutable) = v52;
              CACFString::GetCString(v108, v53, (char *)&Mutable, v54);
              if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(v112.d_ino) = v83;
                *(__uint64_t *)((char *)&v112.d_ino + 4) = (__uint64_t)"HALS_PlugInManager.cpp";
                WORD2(v112.d_seekoff) = 1024;
                *(_DWORD *)((char *)&v112.d_seekoff + 6) = 204;
                v112.d_namlen = 2080;
                *(_QWORD *)&v112.d_type = v53;
                _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  %s", (uint8_t *)&v112, 0x1Cu);
              }
              HALS_PlugInManager::CreatePlugIn((HALS_PlugInManager *)v91, v55);
              CACFString::~CACFString((CACFString *)&v108);
            }
            else
            {
LABEL_98:
              if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(v112.d_ino) = v79;
                *(__uint64_t *)((char *)&v112.d_ino + 4) = (__uint64_t)"HALS_PlugInManager.cpp";
                WORD2(v112.d_seekoff) = 1024;
                *(_DWORD *)((char *)&v112.d_seekoff + 6) = 215;
                _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInManager::LoadPlugIns:     Deferring....", (uint8_t *)&v112, 0x12u);
              }
              if (*(_QWORD *)(v26 + 24) != *(_QWORD *)(v26 + 32))
              {
                v56 = (uint64_t **)HALS_PlugInManager::sDeferredPlugInLoadList;
                v57 = *(uint64_t **)(HALS_PlugInManager::sDeferredPlugInLoadList + 8);
                v58 = *(_QWORD *)(HALS_PlugInManager::sDeferredPlugInLoadList + 16);
                if ((unint64_t)v57 >= v58)
                {
                  v60 = ((uint64_t)v57 - *(_QWORD *)HALS_PlugInManager::sDeferredPlugInLoadList) >> 3;
                  if ((unint64_t)(v60 + 1) >> 61)
                    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                  v61 = v58 - *(_QWORD *)HALS_PlugInManager::sDeferredPlugInLoadList;
                  v62 = v61 >> 2;
                  if (v61 >> 2 <= (unint64_t)(v60 + 1))
                    v62 = v60 + 1;
                  if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
                    v63 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v63 = v62;
                  v103 = HALS_PlugInManager::sDeferredPlugInLoadList + 16;
                  if (v63)
                  {
                    if (v63 >> 61)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v64 = (char *)operator new(8 * v63);
                  }
                  else
                  {
                    v64 = 0;
                  }
                  v65 = (uint64_t *)&v64[8 * v60];
                  *v65 = v26;
                  v59 = v65 + 1;
                  v66 = &v64[8 * v63];
                  v101 = v65 + 1;
                  v102 = v66;
                  v68 = *v56;
                  v67 = v56[1];
                  if (v67 == *v56)
                  {
                    v70 = v56[1];
                  }
                  else
                  {
                    do
                    {
                      v69 = *--v67;
                      *v67 = 0;
                      *--v65 = v69;
                    }
                    while (v67 != v68);
                    v70 = *v56;
                    v67 = v56[1];
                    v59 = v101;
                    v66 = v102;
                  }
                  *v56 = v65;
                  v100[0] = v70;
                  v100[1] = v70;
                  v56[1] = v59;
                  v101 = v67;
                  v71 = v56[2];
                  v56[2] = (uint64_t *)v66;
                  v102 = (char *)v71;
                  std::__split_buffer<std::unique_ptr<HALS_PlugInManager::DeferredPlugInLoadInfo>>::~__split_buffer((uint64_t)v100);
                }
                else
                {
                  *v57 = v26;
                  v59 = v57 + 1;
                }
                v56[1] = v59;
                goto LABEL_120;
              }
            }
            HALS_PlugInManager::DeferredPlugInLoadInfo::~DeferredPlugInLoadInfo((HALS_PlugInManager::DeferredPlugInLoadInfo *)v26);
            MEMORY[0x1B5E50688]();
LABEL_120:
            CACFArray::~CACFArray((CACFArray *)&v84);
            CACFString::~CACFString((CACFString *)&v87);
            CACFObject<__CFURL const*>::~CACFObject((uint64_t)&v89);
            CACFObject<__CFURL const*>::~CACFObject((uint64_t)&v91);
            ++v17;
          }
          while (v17 != (_DWORD)v82);
        }
      }
      CACFArray::~CACFArray((CACFArray *)&v93);
      v2 = v80;
    }
    CACFObject<__CFURL const*>::~CACFObject((uint64_t)&v95);
    CACFString::~CACFString((CACFString *)&v97);
    ++v2;
  }
  while (v2 != 3);
  operator delete(v78);
}

void sub_1B5AA0888(_Unwind_Exception *a1)
{
  void **v1;

  CACFArray::~CACFArray((CACFArray *)(v1 + 23));
  CACFObject<__CFURL const*>::~CACFObject((uint64_t)(v1 + 25));
  CACFString::~CACFString((CACFString *)(v1 + 27));
  operator delete(v1[5]);
  _Unwind_Resume(a1);
}

void sub_1B5AA0908(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5AA0910);
  __clang_call_terminate(a1);
}

const void **applesauce::CF::ObjectRef<__CFString const*>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t HALS_PlugInManager::DeferredPlugInLoadingMatchingHandler(HALS_PlugInManager *this, io_iterator_t iterator)
{
  HALS_PlugInManager::DeferredPlugInLoadInfo **v3;
  HALS_PlugInManager::DeferredPlugInLoadInfo **v4;
  const __CFURL *v5;
  const AudioObjectPropertyAddress *v6;
  uint64_t v7;
  HALS_PlugInManager::DeferredPlugInLoadInfo **v8;
  HALS_PlugInManager::DeferredPlugInLoadInfo **v9;
  HALS_PlugInManager::DeferredPlugInLoadInfo **v10;
  HALS_PlugInManager::DeferredPlugInLoadInfo *v11;
  uint64_t result;
  AudioObjectPropertyAddress v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = *(HALS_PlugInManager::DeferredPlugInLoadInfo ***)HALS_PlugInManager::sDeferredPlugInLoadList;
  v3 = *(HALS_PlugInManager::DeferredPlugInLoadInfo ***)(HALS_PlugInManager::sDeferredPlugInLoadList + 8);
  if (*(HALS_PlugInManager::DeferredPlugInLoadInfo ***)HALS_PlugInManager::sDeferredPlugInLoadList != v3)
  {
    while (*(HALS_PlugInManager **)*v4 != this)
    {
      if (++v4 == v3)
        goto LABEL_14;
    }
  }
  if (v4 != v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v13.mSelector = 136315394;
      *(_QWORD *)&v13.mScope = "HALS_PlugInManager.cpp";
      v14 = 1024;
      v15 = 651;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInManager::DeferredPlugInLoadingMatchingHandler: Loading....", (uint8_t *)&v13, 0x12u);
    }
    HALS_PlugInManager::CreatePlugIn(*((HALS_PlugInManager **)*v4 + 1), v5);
    *(_QWORD *)&v13.mSelector = 0x676C6F62706C6723;
    v13.mElement = 0;
    HALS_NotificationManager::PropertiesChanged((HALS_NotificationManager *)1, 0, 1, &v13, v6);
    v7 = HALS_PlugInManager::sDeferredPlugInLoadList;
    v8 = v4 + 1;
    v9 = *(HALS_PlugInManager::DeferredPlugInLoadInfo ***)(HALS_PlugInManager::sDeferredPlugInLoadList + 8);
    if (v4 + 1 != v9)
    {
      do
      {
        v4 = v8;
        v10 = v8 - 1;
        v11 = *v8;
        *v8++ = 0;
        std::unique_ptr<HALS_PlugInManager::DeferredPlugInLoadInfo>::reset[abi:ne180100](v10, v11);
      }
      while (v8 != v9);
      v8 = *(HALS_PlugInManager::DeferredPlugInLoadInfo ***)(v7 + 8);
    }
    while (v8 != v4)
      std::unique_ptr<HALS_PlugInManager::DeferredPlugInLoadInfo>::reset[abi:ne180100](--v8, 0);
    *(_QWORD *)(v7 + 8) = v4;
  }
LABEL_14:
  for (result = IOIteratorNext(iterator); (_DWORD)result; result = IOIteratorNext(iterator))
    IOObjectRelease(result);
  return result;
}

void sub_1B5AA0AF0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5AA0AA0);
  }
  _Unwind_Resume(a1);
}

void HALS_PlugInManager::CreatePlugIn(HALS_PlugInManager *this, const __CFURL *a2)
{
  HALS_DeviceManager *v3;
  HALS_System *v4;
  char *v5;
  char *v6;
  CFURLRef v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  HALB_CFPlugIn *v11;
  uint64_t v12;
  CFStringRef BundleID;
  CFStringRef v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  const void *v18;
  uint64_t v19;
  const __CFUUID *v20;
  __CFBundle *v21;
  __CFError *FactoriesForPlugInTypeInPlugIn;
  const __CFUUID *v23;
  const __CFUUID *v24;
  void *v25;
  void *v26;
  void (*v27)(void *, _QWORD, _QWORD);
  const __CFUUID *v28;
  CFUUIDBytes v29;
  void (*v30)(void *, _QWORD, _QWORD, char *);
  const __CFUUID *v31;
  CFUUIDBytes v32;
  void (*v33)(void *, _QWORD, _QWORD, char *);
  const __CFUUID *v34;
  CFUUIDBytes v35;
  HALS_Object *v36;
  uint64_t v37;
  __CFBundle *v38;
  uint64_t v39;
  CFStringRef Identifier;
  CFStringRef v41;
  uint64_t v42;
  const void *v43;
  __CFBundle *v44;
  BOOL v45;
  int Code;
  __CFBundle *v47;
  __CFBundle *v48;
  void *FunctionPointerForName;
  __CFBundle *v50;
  void *v51;
  __CFBundle *v52;
  void *v53;
  __CFBundle *v54;
  void *v55;
  __CFBundle *v56;
  void *v57;
  __CFBundle *v58;
  void *v59;
  __CFBundle *v60;
  void *v61;
  __CFBundle *v62;
  void *v63;
  __CFBundle *v64;
  void *v65;
  __CFBundle *v66;
  void *v67;
  __CFBundle *v68;
  void *v69;
  __CFBundle *v70;
  void *v71;
  __CFBundle *v72;
  void *v73;
  __CFBundle *v74;
  void *v75;
  __CFBundle *v76;
  void *v77;
  __CFBundle *v78;
  void *v79;
  __CFBundle *v80;
  void *v81;
  __CFBundle *v82;
  void *v83;
  __CFBundle *v84;
  void *v85;
  __CFBundle *v86;
  void *v87;
  __CFBundle *v88;
  void *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  void **v93;
  unint64_t v94;
  HALS_DeviceManager **v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  HALS_DeviceManager **v103;
  unint64_t v104;
  char *v105;
  char *v106;
  HALS_DeviceManager *v107;
  std::__shared_weak_count *v108;
  unint64_t *p_shared_owners;
  unint64_t v110;
  NSObject *v111;
  const char *v112;
  NSObject *v113;
  const char *v114;
  _DWORD *exception;
  _QWORD *v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119[2];
  HALS_System *v120;
  std::__shared_weak_count *v121;
  CFErrorRef error;
  __int16 v123;
  void *v124;
  _BYTE buf[12];
  __int16 v126;
  int v127;
  __int16 v128;
  int v129;
  __int16 v130;
  CFErrorRef *p_error;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v119[0] = 0;
  v119[1] = 0;
  HALS_System::GetInstance(&v120, 0, v119);
  v3 = (HALS_DeviceManager *)operator new();
  v4 = v120;
  v5 = (char *)operator new(0x248uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_1E69841D8;
  *((_QWORD *)v5 + 3) = &off_1E697CCB8;
  v5[32] = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  v6 = v5 + 40;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 9) = 0;
  v7 = CFURLCopyAbsoluteURL(this);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)(v5 + 80), v7);
  *(_OWORD *)(v5 + 88) = 0u;
  v8 = v5 + 88;
  *((_QWORD *)v5 + 17) = 0;
  *((_QWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 114) = 0u;
  *((_QWORD *)v5 + 19) = 0;
  *((_QWORD *)v5 + 20) = 850045863;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *((_QWORD *)v5 + 31) = 850045863;
  *((_OWORD *)v5 + 16) = 0u;
  *((_OWORD *)v5 + 17) = 0u;
  *((_OWORD *)v5 + 18) = 0u;
  *((_OWORD *)v5 + 19) = 0u;
  *((_OWORD *)v5 + 20) = 0u;
  *((_QWORD *)v5 + 42) = 850045863;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *((_QWORD *)v5 + 51) = dispatch_semaphore_create(0);
  v9 = v5 + 416;
  *((_OWORD *)v5 + 26) = 0u;
  *((_OWORD *)v5 + 27) = 0u;
  *((_OWORD *)v5 + 28) = 0u;
  *((_OWORD *)v5 + 29) = 0u;
  *((_OWORD *)v5 + 30) = 0u;
  *((_OWORD *)v5 + 31) = 0u;
  *((_OWORD *)v5 + 32) = 0u;
  *((_OWORD *)v5 + 33) = 0u;
  *((_OWORD *)v5 + 34) = 0u;
  *((_OWORD *)v5 + 35) = 0u;
  *((_QWORD *)v5 + 72) = 0;
  v10 = operator new();
  *(_QWORD *)v10 = &off_1E6993858;
  v11 = CFPlugInCreate(0, this);
  *(_QWORD *)(v10 + 8) = v11;
  *(_BYTE *)(v10 + 16) = 1;
  v12 = *((_QWORD *)v5 + 5);
  *((_QWORD *)v5 + 5) = v10;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v11 = *(HALB_CFPlugIn **)(*(_QWORD *)v6 + 8);
  }
  if (!v11)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_28;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
    v126 = 1024;
    v127 = 100;
    v16 = MEMORY[0x1E0C81028];
    v17 = "%25s:%-5d  HALS_UCPlugIn::Construct_New: failed to create the plug-in";
LABEL_25:
    _os_log_impl(&dword_1B57BA000, v16, OS_LOG_TYPE_ERROR, v17, buf, 0x12u);
    goto LABEL_28;
  }
  BundleID = HALB_CFPlugIn::GetBundleID(v11);
  v14 = BundleID;
  if (BundleID)
  {
    CFRetain(BundleID);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, v14);
    v15 = *(_QWORD *)buf;
  }
  else
  {
    v15 = 0;
  }
  v18 = (const void *)*((_QWORD *)v5 + 9);
  *((_QWORD *)v5 + 9) = v15;
  *(_QWORD *)buf = v18;
  if (v18)
  {
    CFRelease(v18);
    v15 = *((_QWORD *)v5 + 9);
  }
  if (!v15)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_28;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
    v126 = 1024;
    v127 = 104;
    v16 = MEMORY[0x1E0C81028];
    v17 = "%25s:%-5d  HALS_UCPlugIn::Construct_New: failed to find a bundle ID";
    goto LABEL_25;
  }
  v124 = 0;
  v19 = *(_QWORD *)v6;
  v20 = CFUUIDGetConstantUUIDWithBytes(0, 0x44u, 0x3Au, 0xBAu, 0xB8u, 0xE7u, 0xB3u, 0x49u, 0x1Au, 0xB9u, 0x85u, 0xBEu, 0xB9u, 0x18u, 0x70u, 0x30u, 0xDBu);
  v21 = *(__CFBundle **)(v19 + 8);
  if (!v21)
  {
    error = 0;
    v123 = 1;
    goto LABEL_27;
  }
  FactoriesForPlugInTypeInPlugIn = CFPlugInFindFactoriesForPlugInTypeInPlugIn(v20, v21);
  error = FactoriesForPlugInTypeInPlugIn;
  v123 = 1;
  if (!FactoriesForPlugInTypeInPlugIn || !CFArrayGetCount(FactoriesForPlugInTypeInPlugIn))
    goto LABEL_27;
  CACFArray::GetCFType(&error, 0, (const void **)&v124);
  v23 = (const __CFUUID *)v124;
  if (!v124)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
      v126 = 1024;
      v127 = 117;
      v111 = MEMORY[0x1E0C81028];
      v112 = "%25s:%-5d  HALS_UCPlugIn::Construct_New: it said there was at least one factory but there wasn't";
LABEL_114:
      _os_log_impl(&dword_1B57BA000, v111, OS_LOG_TYPE_ERROR, v112, buf, 0x12u);
    }
LABEL_27:
    CACFArray::~CACFArray((CACFArray *)&error);
LABEL_28:
    error = 0;
    v37 = operator new();
    *(_QWORD *)v37 = &off_1E6971AA0;
    v38 = CFBundleCreate(0, this);
    *(_QWORD *)(v37 + 8) = v38;
    *(_BYTE *)(v37 + 16) = 1;
    v39 = *(_QWORD *)v8;
    *(_QWORD *)v8 = v37;
    if (v39)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      v38 = *(__CFBundle **)(*(_QWORD *)v8 + 8);
    }
    if (!v38)
    {
      v102 = 1852797029;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_155;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
      v126 = 1024;
      v127 = 187;
      v113 = MEMORY[0x1E0C81028];
      v114 = "%25s:%-5d  HALS_UCPlugIn::Construct_Old: failed to create the bundle";
      goto LABEL_154;
    }
    Identifier = CFBundleGetIdentifier(v38);
    v41 = Identifier;
    if (Identifier)
    {
      CFRetain(Identifier);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, v41);
      v42 = *(_QWORD *)buf;
    }
    else
    {
      v42 = 0;
    }
    v43 = (const void *)*((_QWORD *)v5 + 9);
    *((_QWORD *)v5 + 9) = v42;
    *(_QWORD *)buf = v43;
    if (v43)
    {
      CFRelease(v43);
      v42 = *((_QWORD *)v5 + 9);
    }
    if (!v42)
    {
      v102 = 1852797029;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_155;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
      v126 = 1024;
      v127 = 191;
      v113 = MEMORY[0x1E0C81028];
      v114 = "%25s:%-5d  HALS_UCPlugIn::Construct_Old: failed to find a bundle ID";
      goto LABEL_154;
    }
    v44 = *(__CFBundle **)(*(_QWORD *)v8 + 8);
    if (v44)
      v45 = CFBundlePreflightExecutable(v44, &error) != 0;
    else
      v45 = 0;
    if (error)
    {
      Code = CFErrorGetCode(error);
      CFRelease(error);
      if (v45)
      {
LABEL_42:
        v47 = *(__CFBundle **)(*(_QWORD *)v8 + 8);
        if (!v47 || !CFBundleLoadExecutableAndReturnError(v47, 0))
        {
          v102 = 1852797029;
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_155;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
          v126 = 1024;
          v127 = 204;
          v113 = MEMORY[0x1E0C81028];
          v114 = "%25s:%-5d  HALS_UCPlugIn::Construct_Old: failed to load the bundle";
          goto LABEL_154;
        }
        v48 = *(__CFBundle **)(*(_QWORD *)v8 + 8);
        if (v48)
        {
          FunctionPointerForName = CFBundleGetFunctionPointerForName(v48, CFSTR("AudioServerPlugIn_Initialize"));
          *v9 = FunctionPointerForName;
          if (FunctionPointerForName)
          {
            v50 = *(__CFBundle **)(*(_QWORD *)v8 + 8);
            if (v50)
            {
              v51 = CFBundleGetFunctionPointerForName(v50, CFSTR("AudioServerPlugIn_Teardown"));
              *((_QWORD *)v5 + 53) = v51;
              if (v51)
              {
                v52 = *(__CFBundle **)(*(_QWORD *)v8 + 8);
                if (v52)
                {
                  v53 = CFBundleGetFunctionPointerForName(v52, CFSTR("AudioServerPlugIn_PerformDeviceConfigChange"));
                  *((_QWORD *)v5 + 54) = v53;
                  if (v53)
                  {
                    v54 = *(__CFBundle **)(*(_QWORD *)v8 + 8);
                    if (v54)
                    {
                      v55 = CFBundleGetFunctionPointerForName(v54, CFSTR("AudioServerPlugIn_Start"));
                      *((_QWORD *)v5 + 55) = v55;
                      if (v55)
                      {
                        v56 = *(__CFBundle **)(*(_QWORD *)v8 + 8);
                        if (v56)
                        {
                          v57 = CFBundleGetFunctionPointerForName(v56, CFSTR("AudioServerPlugIn_Stop"));
                          *((_QWORD *)v5 + 56) = v57;
                          if (v57)
                          {
                            v58 = *(__CFBundle **)(*(_QWORD *)v8 + 8);
                            if (v58)
                            {
                              v59 = CFBundleGetFunctionPointerForName(v58, CFSTR("AudioServerPlugIn_GetZeroTimeStamp"));
                              *((_QWORD *)v5 + 57) = v59;
                              if (v59)
                              {
                                v60 = *(__CFBundle **)(*(_QWORD *)v8 + 8);
                                if (v60)
                                {
                                  v61 = CFBundleGetFunctionPointerForName(v60, CFSTR("AudioServerPlugIn_BeginIO"));
                                  v62 = *(__CFBundle **)(*((_QWORD *)v5 + 11) + 8);
                                  *((_QWORD *)v5 + 58) = v61;
                                  if (v62)
                                  {
                                    v63 = CFBundleGetFunctionPointerForName(v62, CFSTR("AudioServerPlugIn_EndIO"));
                                    v64 = *(__CFBundle **)(*((_QWORD *)v5 + 11) + 8);
                                    *((_QWORD *)v5 + 59) = v63;
                                    if (v64)
                                    {
                                      v65 = CFBundleGetFunctionPointerForName(v64, CFSTR("AudioServerPlugIn_BeginIOCycle"));
                                      v66 = *(__CFBundle **)(*((_QWORD *)v5 + 11) + 8);
                                      *((_QWORD *)v5 + 60) = v65;
                                      if (v66)
                                      {
                                        v67 = CFBundleGetFunctionPointerForName(v66, CFSTR("AudioServerPlugIn_EndIOCycle"));
                                        v68 = *(__CFBundle **)(*((_QWORD *)v5 + 11) + 8);
                                        *((_QWORD *)v5 + 61) = v67;
                                        if (v68)
                                        {
                                          v69 = CFBundleGetFunctionPointerForName(v68, CFSTR("AudioServerPlugIn_BeginReading"));
                                          v70 = *(__CFBundle **)(*((_QWORD *)v5 + 11) + 8);
                                          *((_QWORD *)v5 + 62) = v69;
                                          if (v70)
                                          {
                                            v71 = CFBundleGetFunctionPointerForName(v70, CFSTR("AudioServerPlugIn_ReadFromStream"));
                                            v72 = *(__CFBundle **)(*((_QWORD *)v5 + 11) + 8);
                                            *((_QWORD *)v5 + 63) = v71;
                                            if (v72)
                                            {
                                              v73 = CFBundleGetFunctionPointerForName(v72, CFSTR("AudioServerPlugIn_EndReading"));
                                              v74 = *(__CFBundle **)(*((_QWORD *)v5 + 11) + 8);
                                              *((_QWORD *)v5 + 64) = v73;
                                              if (v74)
                                              {
                                                v75 = CFBundleGetFunctionPointerForName(v74, CFSTR("AudioServerPlugIn_BeginWriting"));
                                                v76 = *(__CFBundle **)(*((_QWORD *)v5 + 11) + 8);
                                                *((_QWORD *)v5 + 65) = v75;
                                                if (v76)
                                                {
                                                  v77 = CFBundleGetFunctionPointerForName(v76, CFSTR("AudioServerPlugIn_WriteToStream"));
                                                  v78 = *(__CFBundle **)(*((_QWORD *)v5 + 11) + 8);
                                                  *((_QWORD *)v5 + 66) = v77;
                                                  if (v78)
                                                  {
                                                    v79 = CFBundleGetFunctionPointerForName(v78, CFSTR("AudioServerPlugIn_EndWriting"));
                                                    v80 = *(__CFBundle **)(*((_QWORD *)v5 + 11) + 8);
                                                    *((_QWORD *)v5 + 67) = v79;
                                                    if (v80)
                                                    {
                                                      v81 = CFBundleGetFunctionPointerForName(v80, CFSTR("AudioServerPlugIn_ObjectHasProperty"));
                                                      *((_QWORD *)v5 + 68) = v81;
                                                      if (v81)
                                                      {
                                                        v82 = *(__CFBundle **)(*(_QWORD *)v8 + 8);
                                                        if (v82)
                                                        {
                                                          v83 = CFBundleGetFunctionPointerForName(v82, CFSTR("AudioServerPlugIn_ObjectIsPropertySettable"));
                                                          *((_QWORD *)v5 + 69) = v83;
                                                          if (v83)
                                                          {
                                                            v84 = *(__CFBundle **)(*(_QWORD *)v8 + 8);
                                                            if (v84)
                                                            {
                                                              v85 = CFBundleGetFunctionPointerForName(v84, CFSTR("AudioServerPlugIn_ObjectGetPropertyDataSize"));
                                                              *((_QWORD *)v5 + 70) = v85;
                                                              if (v85)
                                                              {
                                                                v86 = *(__CFBundle **)(*(_QWORD *)v8 + 8);
                                                                if (v86)
                                                                {
                                                                  v87 = CFBundleGetFunctionPointerForName(v86, CFSTR("AudioServerPlugIn_ObjectGetPropertyData"));
                                                                  *((_QWORD *)v5 + 71) = v87;
                                                                  if (v87)
                                                                  {
                                                                    v88 = *(__CFBundle **)(*(_QWORD *)v8 + 8);
                                                                    if (v88)
                                                                    {
                                                                      v89 = CFBundleGetFunctionPointerForName(v88, CFSTR("AudioServerPlugIn_ObjectSetPropertyData"));
                                                                      *((_QWORD *)v5 + 72) = v89;
                                                                      if (v89)
                                                                      {
                                                                        v5[32] = 1;
                                                                        goto LABEL_77;
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      *((_QWORD *)v5 + 72) = 0;
                                                                    }
                                                                    v102 = 1852797029;
                                                                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                                                                    {
                                                                      *(_DWORD *)buf = 136315394;
                                                                      *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
                                                                      v126 = 1024;
                                                                      v127 = 258;
                                                                      v113 = MEMORY[0x1E0C81028];
                                                                      v114 = "%25s:%-5d  HALS_UCPlugIn::Construct_Old: Ca"
                                                                             "n't get a pointer to the AudioServerPlugIn_"
                                                                             "ObjectSetPropertyData routine";
                                                                      goto LABEL_154;
                                                                    }
LABEL_155:
                                                                    LOBYTE(error) = HIBYTE(v102);
                                                                    BYTE1(error) = BYTE2(v102);
                                                                    BYTE2(error) = BYTE1(v102);
                                                                    *(_WORD *)((char *)&error + 3) = v102;
                                                                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                                                                    {
                                                                      *(_DWORD *)buf = 136315906;
                                                                      *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
                                                                      v126 = 1024;
                                                                      v127 = 55;
                                                                      v128 = 1024;
                                                                      v129 = v102;
                                                                      v130 = 2080;
                                                                      p_error = &error;
                                                                      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_UCPlugIn::HALS_UCPlugIn: construction failed, probably because this isn't a server plug-in, Error: %d (%s)", buf, 0x22u);
                                                                    }
                                                                    exception = __cxa_allocate_exception(0x10uLL);
                                                                    *(_QWORD *)exception = &off_1E69A1B30;
                                                                    exception[2] = v102;
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  *((_QWORD *)v5 + 71) = 0;
                                                                }
                                                                v102 = 1852797029;
                                                                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))goto LABEL_155;
                                                                *(_DWORD *)buf = 136315394;
                                                                *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
                                                                v126 = 1024;
                                                                v127 = 255;
                                                                v113 = MEMORY[0x1E0C81028];
                                                                v114 = "%25s:%-5d  HALS_UCPlugIn::Construct_Old: Can't ge"
                                                                       "t a pointer to the AudioServerPlugIn_ObjectGetPro"
                                                                       "pertyData routine";
LABEL_154:
                                                                _os_log_impl(&dword_1B57BA000, v113, OS_LOG_TYPE_ERROR, v114, buf, 0x12u);
                                                                goto LABEL_155;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              *((_QWORD *)v5 + 70) = 0;
                                                            }
                                                            v102 = 1852797029;
                                                            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))goto LABEL_155;
                                                            *(_DWORD *)buf = 136315394;
                                                            *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
                                                            v126 = 1024;
                                                            v127 = 252;
                                                            v113 = MEMORY[0x1E0C81028];
                                                            v114 = "%25s:%-5d  HALS_UCPlugIn::Construct_Old: Can't get a "
                                                                   "pointer to the AudioServerPlugIn_ObjectGetPropertyDataSize routine";
                                                            goto LABEL_154;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          *((_QWORD *)v5 + 69) = 0;
                                                        }
                                                        v102 = 1852797029;
                                                        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))goto LABEL_155;
                                                        *(_DWORD *)buf = 136315394;
                                                        *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
                                                        v126 = 1024;
                                                        v127 = 249;
                                                        v113 = MEMORY[0x1E0C81028];
                                                        v114 = "%25s:%-5d  HALS_UCPlugIn::Construct_Old: Can't get a poin"
                                                               "ter to the AudioServerPlugIn_ObjectIsPropertySettable routine";
                                                        goto LABEL_154;
                                                      }
LABEL_152:
                                                      v102 = 1852797029;
                                                      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                                                        goto LABEL_155;
                                                      *(_DWORD *)buf = 136315394;
                                                      *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
                                                      v126 = 1024;
                                                      v127 = 246;
                                                      v113 = MEMORY[0x1E0C81028];
                                                      v114 = "%25s:%-5d  HALS_UCPlugIn::Construct_Old: Can't get a pointe"
                                                             "r to the AudioServerPlugIn_ObjectHasProperty routine";
                                                      goto LABEL_154;
                                                    }
LABEL_151:
                                                    *((_QWORD *)v5 + 68) = 0;
                                                    goto LABEL_152;
                                                  }
LABEL_150:
                                                  *((_QWORD *)v5 + 67) = 0;
                                                  goto LABEL_151;
                                                }
LABEL_149:
                                                *((_QWORD *)v5 + 66) = 0;
                                                goto LABEL_150;
                                              }
LABEL_148:
                                              *((_QWORD *)v5 + 65) = 0;
                                              goto LABEL_149;
                                            }
LABEL_147:
                                            *((_QWORD *)v5 + 64) = 0;
                                            goto LABEL_148;
                                          }
LABEL_146:
                                          *((_QWORD *)v5 + 63) = 0;
                                          goto LABEL_147;
                                        }
LABEL_145:
                                        *((_QWORD *)v5 + 62) = 0;
                                        goto LABEL_146;
                                      }
LABEL_144:
                                      *((_QWORD *)v5 + 61) = 0;
                                      goto LABEL_145;
                                    }
LABEL_143:
                                    *((_QWORD *)v5 + 60) = 0;
                                    goto LABEL_144;
                                  }
                                }
                                else
                                {
                                  *((_QWORD *)v5 + 58) = 0;
                                }
                                *((_QWORD *)v5 + 59) = 0;
                                goto LABEL_143;
                              }
                            }
                            else
                            {
                              *((_QWORD *)v5 + 57) = 0;
                            }
                            v102 = 1852797029;
                            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                              goto LABEL_155;
                            *(_DWORD *)buf = 136315394;
                            *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
                            v126 = 1024;
                            v127 = 223;
                            v113 = MEMORY[0x1E0C81028];
                            v114 = "%25s:%-5d  HALS_UCPlugIn::Construct_Old: Can't get a pointer to the AudioServerPlugIn"
                                   "_GetZeroTimeStamp routine";
                            goto LABEL_154;
                          }
                        }
                        else
                        {
                          *((_QWORD *)v5 + 56) = 0;
                        }
                        v102 = 1852797029;
                        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                          goto LABEL_155;
                        *(_DWORD *)buf = 136315394;
                        *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
                        v126 = 1024;
                        v127 = 220;
                        v113 = MEMORY[0x1E0C81028];
                        v114 = "%25s:%-5d  HALS_UCPlugIn::Construct_Old: Can't get a pointer to the AudioServerPlugIn_Stop routine";
                        goto LABEL_154;
                      }
                    }
                    else
                    {
                      *((_QWORD *)v5 + 55) = 0;
                    }
                    v102 = 1852797029;
                    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                      goto LABEL_155;
                    *(_DWORD *)buf = 136315394;
                    *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
                    v126 = 1024;
                    v127 = 217;
                    v113 = MEMORY[0x1E0C81028];
                    v114 = "%25s:%-5d  HALS_UCPlugIn::Construct_Old: Can't get a pointer to the AudioServerPlugIn_Start routine";
                    goto LABEL_154;
                  }
                }
                else
                {
                  *((_QWORD *)v5 + 54) = 0;
                }
                v102 = 1852797029;
                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  goto LABEL_155;
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
                v126 = 1024;
                v127 = 214;
                v113 = MEMORY[0x1E0C81028];
                v114 = "%25s:%-5d  HALS_UCPlugIn::Construct_Old: Can't get a pointer to the AudioServerPlugIn_PerformDevi"
                       "ceConfigChange routine";
                goto LABEL_154;
              }
            }
            else
            {
              *((_QWORD *)v5 + 53) = 0;
            }
            v102 = 1852797029;
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_155;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
            v126 = 1024;
            v127 = 211;
            v113 = MEMORY[0x1E0C81028];
            v114 = "%25s:%-5d  HALS_UCPlugIn::Construct_Old: Can't get a pointer to the AudioServerPlugIn_Teardown routine";
            goto LABEL_154;
          }
        }
        else
        {
          *v9 = 0;
        }
        v102 = 1852797029;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_155;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
        v126 = 1024;
        v127 = 208;
        v113 = MEMORY[0x1E0C81028];
        v114 = "%25s:%-5d  HALS_UCPlugIn::Construct_Old: Can't get a pointer to the AudioServerPlugIn_Initialize routine";
        goto LABEL_154;
      }
    }
    else
    {
      Code = 0;
      if (v45)
        goto LABEL_42;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
      v126 = 1024;
      v127 = 200;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_UCPlugIn::Construct_Old: preflighting the bundle failed", buf, 0x12u);
    }
    if (Code)
      v102 = Code;
    else
      v102 = 1852797029;
    goto LABEL_155;
  }
  v24 = CFUUIDGetConstantUUIDWithBytes(0, 0x44u, 0x3Au, 0xBAu, 0xB8u, 0xE7u, 0xB3u, 0x49u, 0x1Au, 0xB9u, 0x85u, 0xBEu, 0xB9u, 0x18u, 0x70u, 0x30u, 0xDBu);
  v25 = CFPlugInInstanceCreate(0, v23, v24);
  v26 = v25;
  if (!v25)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
      v126 = 1024;
      v127 = 121;
      v111 = MEMORY[0x1E0C81028];
      v112 = "%25s:%-5d  HALS_UCPlugIn::Construct_New: couldn't create the IUnknown interface";
      goto LABEL_114;
    }
    goto LABEL_27;
  }
  v27 = *(void (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v25 + 8);
  v28 = CFUUIDGetConstantUUIDWithBytes(0, 0xEEu, 0xA5u, 0x77u, 0x3Du, 0xCCu, 0x43u, 0x49u, 0xF1u, 0x8Eu, 0, 0x8Fu, 0x96u, 0xE7u, 0xD2u, 0x3Bu, 0x17u);
  v29 = CFUUIDGetUUIDBytes(v28);
  v116 = v5 + 48;
  v27(v26, *(_QWORD *)&v29.byte0, *(_QWORD *)&v29.byte8);
  if (*((_QWORD *)v5 + 6)
    || (v30 = *(void (**)(void *, _QWORD, _QWORD, char *))(*(_QWORD *)v26 + 8),
        v31 = CFUUIDGetConstantUUIDWithBytes(0, 0x4Bu, 0x2Fu, 0x41u, 0xAEu, 0xDDu, 0x4Fu, 0x45u, 0xEBu, 0xA1u, 0x32u, 0x79u, 0x4Bu, 0xC8u, 0xE2u, 0xA0u, 0xD2u), v32 = CFUUIDGetUUIDBytes(v31), v30(v26, *(_QWORD *)&v32.byte0, *(_QWORD *)&v32.byte8, v5 + 64),
        *v116))
  {
    v33 = *(void (**)(void *, _QWORD, _QWORD, char *))(*(_QWORD *)v26 + 8);
    v34 = CFUUIDGetConstantUUIDWithBytes(0, 0xD9u, 0x1Fu, 0x5Fu, 0x7Cu, 0x44u, 0x8Bu, 0x45u, 0xE9u, 0x8Cu, 0xDCu, 6u, 0xE6u, 0x69u, 0x78u, 0x95u, 0xAu);
    v35 = CFUUIDGetUUIDBytes(v34);
    v33(v26, *(_QWORD *)&v35.byte0, *(_QWORD *)&v35.byte8, v5 + 56);
  }
  (*(void (**)(void *))(*(_QWORD *)v26 + 24))(v26);
  if (!*v116 && !*((_QWORD *)v5 + 8))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_UCPlugIn.cpp";
    v126 = 1024;
    v127 = 144;
    v111 = MEMORY[0x1E0C81028];
    v112 = "%25s:%-5d  HALS_UCPlugIn::Construct_New: couldn't find the driver interface or the nub interface in something"
           " claiming to be a server plug-in";
    goto LABEL_114;
  }
  CACFArray::~CACFArray((CACFArray *)&error);
LABEL_77:
  *(_QWORD *)&v117 = v5 + 24;
  *((_QWORD *)&v117 + 1) = v5;
  v118 = v117;
  HALS_PlugIn::HALS_PlugIn((uint64_t)v3, v4, (uint64_t)&v118, 0, v36);
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v118 + 1);
  if (*((_QWORD *)&v118 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = (void **)HALS_PlugInManager::sPlugInList;
  v95 = *(HALS_DeviceManager ***)(HALS_PlugInManager::sPlugInList + 8);
  v94 = *(_QWORD *)(HALS_PlugInManager::sPlugInList + 16);
  if ((unint64_t)v95 >= v94)
  {
    v97 = ((uint64_t)v95 - *(_QWORD *)HALS_PlugInManager::sPlugInList) >> 3;
    if ((unint64_t)(v97 + 1) >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v98 = v94 - *(_QWORD *)HALS_PlugInManager::sPlugInList;
    v99 = v98 >> 2;
    if (v98 >> 2 <= (unint64_t)(v97 + 1))
      v99 = v97 + 1;
    if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8)
      v100 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v100 = v99;
    if (v100)
      v100 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v100);
    else
      v101 = 0;
    v103 = (HALS_DeviceManager **)(v100 + 8 * v97);
    v104 = v100 + 8 * v101;
    *v103 = v3;
    v96 = v103 + 1;
    v106 = (char *)*v93;
    v105 = (char *)v93[1];
    if (v105 != *v93)
    {
      do
      {
        v107 = (HALS_DeviceManager *)*((_QWORD *)v105 - 1);
        v105 -= 8;
        *--v103 = v107;
      }
      while (v105 != v106);
      v105 = (char *)*v93;
    }
    *v93 = v103;
    v93[1] = v96;
    v93[2] = (void *)v104;
    if (v105)
      operator delete(v105);
  }
  else
  {
    *v95 = v3;
    v96 = v95 + 1;
  }
  v93[1] = v96;
  HALS_System::DeviceManagerCreated(v120, v3);
  v108 = v121;
  if (v121)
  {
    p_shared_owners = (unint64_t *)&v121->__shared_owners_;
    do
      v110 = __ldaxr(p_shared_owners);
    while (__stlxr(v110 - 1, p_shared_owners));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
}

void sub_1B5AA1DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void HALS_CustomProcessor::~HALS_CustomProcessor(HALS_CustomProcessor *this)
{
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_CustomProcessor::MyProcessInputSequence(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)a2, *a3, **(unsigned int **)(a2 + 8));
  a3[1] = *(_QWORD *)(a2 + 8);
  return result;
}

void HALS_VolumeProcessor::~HALS_VolumeProcessor(HALS_VolumeProcessor *this)
{
  JUMPOUT(0x1B5E50688);
}

void HALS_VolumeProcessor::MyProcessInputSequence(HALS_VolumeProcessor *a1, uint64_t a2, uint64_t a3, double a4)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int *v8;

  v6 = *(unsigned __int8 **)a3;
  v7 = *(unsigned __int8 **)a2;
  v8 = *(unsigned int **)(a2 + 8);
  if (v7 == v6)
    HALS_VolumeProcessor::Process(a1, a4, v7, *v8);
  else
    HALS_VolumeProcessor::Process(a1, a4, (float *)v7, v6, *v8);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a2 + 8);
}

float HALS_VolumeProcessor::Process(HALS_VolumeProcessor *this, double a2, float *__A, unsigned __int8 *a4, unsigned int a5)
{
  unsigned int v5;
  unsigned __int8 *v6;
  float *v7;
  double v9;
  double v10;
  unsigned int v11;
  unsigned int v12;
  double v13;
  float v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  float v23;
  float v24;
  float v27;
  float v29;
  float __B;

  v5 = a5;
  v6 = a4;
  v7 = __A;
  if (!*((_BYTE *)this + 8))
  {
    memcpy(a4, __A, *((_DWORD *)this + 3) * a5);
    return *(float *)&a2;
  }
  v9 = *((double *)this + 4);
  if (v9 == 0.0)
  {
    *((double *)this + 4) = a2;
    v9 = a2;
  }
  v10 = (double)a5 + a2;
  if (v10 < v9)
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_24;
  }
  v13 = v9 + *((double *)this + 5);
  if (v13 <= a2)
    goto LABEL_55;
  if (v9 > a2 && v10 >= v13)
  {
    v5 = (v9 - a2);
    v11 = (v13 - v9);
    a2 = v10 - v13;
    v12 = (v10 - v13);
    goto LABEL_24;
  }
  if (v9 <= a2 && v10 < v13)
  {
    v12 = 0;
    v11 = a5;
    if (!a5)
      goto LABEL_54;
    goto LABEL_34;
  }
  if (v9 > a2 && v10 >= v9 && v10 < v13)
  {
    v12 = 0;
    v5 = (v9 - a2);
    a2 = v10 - v9;
    v11 = (v10 - v9);
LABEL_24:
    if (v5)
    {
      v17 = *((float *)this + 5);
      if (v17 == 1.0)
      {
        memcpy(a4, __A, 4 * *((_DWORD *)this + 4) * v5);
      }
      else if (v17 == 0.0)
      {
        bzero(a4, 4 * *((_DWORD *)this + 4) * v5);
      }
      else
      {
        __B = v17 * v17;
        vDSP_vsmul(__A, 1, &__B, (float *)a4, 1, *((_DWORD *)this + 4) * v5);
      }
      v18 = *((_DWORD *)this + 4) * v5;
      v7 += v18;
      v6 += 4 * v18;
    }
    if (v11)
      goto LABEL_34;
    goto LABEL_54;
  }
  if (v9 <= a2 && v13 > a2 && v10 >= v13)
  {
    v11 = (v13 - a2);
    a2 = v10 - v13;
    v12 = (v10 - v13);
    if (!v11)
    {
LABEL_54:
      v5 = v12;
LABEL_55:
      if (v5)
      {
        v27 = *((float *)this + 6);
        *((float *)this + 5) = v27;
        if (v27 == 1.0)
        {
          memcpy(v6, v7, 4 * *((_DWORD *)this + 4) * v5);
        }
        else if (v27 == 0.0)
        {
          bzero(v6, 4 * *((_DWORD *)this + 4) * v5);
        }
        else
        {
          v29 = v27 * v27;
          vDSP_vsmul(v7, 1, &v29, (float *)v6, 1, *((_DWORD *)this + 4) * v5);
        }
      }
      return *(float *)&a2;
    }
LABEL_34:
    v19 = 0;
    v20 = *((unsigned int *)this + 4);
    v21 = 4 * v20;
    while (1)
    {
      if ((_DWORD)v20)
      {
        v22 = 0;
        do
        {
          *(float *)&v6[v22] = (float)(*((float *)this + 5) * *((float *)this + 5)) * v7[v22 / 4];
          v22 += 4;
        }
        while (v21 != v22);
      }
      v23 = *((float *)this + 5);
      LODWORD(a2) = *((_DWORD *)this + 6);
      v24 = *((float *)this + 7);
      if (v24 >= 0.0)
        break;
      if (v23 > *(float *)&a2)
        goto LABEL_40;
LABEL_41:
      *((_DWORD *)this + 5) = LODWORD(a2);
      v7 = (float *)((char *)v7 + v21);
      v6 += v21;
      if (++v19 == v11)
        goto LABEL_54;
    }
    if (v24 <= 0.0 || v23 >= *(float *)&a2)
      goto LABEL_41;
LABEL_40:
    *(float *)&a2 = v23 + v24;
    goto LABEL_41;
  }
  return *(float *)&a2;
}

void HALS_Resampler::~HALS_Resampler(HALS_Resampler *this)
{
  HALS_Resampler::~HALS_Resampler(this);
  JUMPOUT(0x1B5E50688);
}

{
  Resampler2 **v2;
  Resampler2 **v3;
  _QWORD *v4;
  _QWORD *v5;
  RamstadSRC **v6;
  RamstadSRC **v7;
  OpaqueAudioConverter *v8;
  OpaqueAudioConverter *v9;
  void *v10;
  void *v11;
  void *v12;

  *(_QWORD *)this = &off_1E6984278;
  v2 = (Resampler2 **)*((_QWORD *)this + 4);
  v3 = (Resampler2 **)*((_QWORD *)this + 5);
  while (v2 != v3)
  {
    if (*v2)
    {
      Resampler2::~Resampler2(*v2);
      MEMORY[0x1B5E50688]();
    }
    ++v2;
  }
  if (!*((_DWORD *)this + 6))
    Resampler2::ShutdownVarispeedMode((Resampler2 *)*((unsigned int *)this + 5));
  v4 = (_QWORD *)*((_QWORD *)this + 7);
  v5 = (_QWORD *)*((_QWORD *)this + 8);
  while (v4 != v5)
  {
    if (*v4)
      MEMORY[0x1B5E50688](*v4, 0x1000C40AC875A91);
    ++v4;
  }
  v6 = (RamstadSRC **)*((_QWORD *)this + 10);
  v7 = (RamstadSRC **)*((_QWORD *)this + 11);
  while (v6 != v7)
  {
    if (*v6)
    {
      RamstadSRC::~RamstadSRC(*v6);
      MEMORY[0x1B5E50688]();
    }
    ++v6;
  }
  v8 = (OpaqueAudioConverter *)*((_QWORD *)this + 13);
  if (v8)
    AudioConverterDispose(v8);
  v9 = (OpaqueAudioConverter *)*((_QWORD *)this + 14);
  if (v9)
    AudioConverterDispose(v9);
  v10 = (void *)*((_QWORD *)this + 10);
  if (v10)
  {
    *((_QWORD *)this + 11) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 7);
  if (v11)
  {
    *((_QWORD *)this + 8) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 4);
  if (v12)
  {
    *((_QWORD *)this + 5) = v12;
    operator delete(v12);
  }
}

void HALS_Resampler::MyProcessInputSequence(HALS_Resampler *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  HALS_Resampler::Process(a1, *(const unsigned __int8 **)a2, *(unsigned int **)(a2 + 8), *(unsigned __int8 **)a3, *(unsigned int **)(a3 + 8), a4);
}

void HALS_Resampler::Process(HALS_Resampler *this, const unsigned __int8 *a2, unsigned int *a3, unsigned __int8 *a4, unsigned int *a5, unsigned __int8 *a6)
{
  OpaqueAudioConverter *v11;
  UInt32 v13;
  unsigned int v14;
  unsigned int v15;
  UInt32 v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  UInt32 ioOutputDataSize;

  if (*((_BYTE *)this + 8))
  {
    v11 = (OpaqueAudioConverter *)*((_QWORD *)this + 13);
    if (v11 && *((_QWORD *)this + 14))
    {
      v13 = *((_DWORD *)this + 3) * *a3;
      ioOutputDataSize = 4 * *a3 * *((_DWORD *)this + 4);
      AudioConverterConvertBuffer(v11, v13, a2, &ioOutputDataSize, a4);
      v14 = *a3;
      v18 = *a5;
      v19 = v14;
      HALS_Resampler::Process_Resample(this, a4, &v19, a6, &v18);
      *a3 = v19;
      v15 = v18;
      *a5 = v18;
      v16 = 4 * v15 * *((_DWORD *)this + 4);
      ioOutputDataSize = *((_DWORD *)this + 3) * v15;
      AudioConverterConvertBuffer(*((AudioConverterRef *)this + 14), v16, a6, &ioOutputDataSize, a4);
    }
    else
    {
      HALS_Resampler::Process_Resample(this, a2, a3, a4, a5);
    }
  }
  else
  {
    if (*((_BYTE *)this + 10))
      v17 = *((_DWORD *)this + 3) * *a3;
    else
      v17 = *((unsigned int *)this + 3);
    memcpy(a4, a2, v17);
    *a5 = *a3;
  }
}

void HALS_Resampler::Process_Resample(HALS_Resampler *this, const unsigned __int8 *a2, unsigned int *a3, unsigned __int8 *a4, unsigned int *a5)
{
  size_t v7;
  unsigned int v11;
  float *v12;
  unsigned int v13;
  float *v14;
  unsigned int v15;
  float *v16;
  unsigned __int8 *v17;
  float *v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  Resampler2 *v23;
  uint64_t v24;
  RamstadSRC *v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;

  v7 = *((unsigned int *)this + 4);
  if (!(_DWORD)v7)
  {
    v30 = 0;
    v31 = 0;
    goto LABEL_27;
  }
  v11 = 0;
  do
  {
    v12 = (float *)&a2[4 * v11];
    v13 = v11 + 1;
    if (v11 + 1 >= v7)
      v14 = 0;
    else
      v14 = (float *)&a2[4 * v13];
    v15 = *a3;
    v16 = (float *)&a4[4 * v11];
    v17 = &a4[4 * v13];
    if (v11 + 1 >= v7)
      v18 = 0;
    else
      v18 = (float *)v17;
    v19 = *a5;
    v35 = *a5;
    v36 = v15;
    v20 = v11 >> 1;
    v21 = *((_DWORD *)this + 6);
    switch(v21)
    {
      case 2:
        v24 = *((_QWORD *)this + 10);
        if (v20 >= (*((_QWORD *)this + 11) - v24) >> 3)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v25 = *(RamstadSRC **)(v24 + 8 * v20);
        v26 = *((_DWORD *)v25 + 12);
        if (v26 == 2)
        {
          RamstadSRC::processStereo(v25, v12, v14, v16, v18, v15, v19, v7, v7);
        }
        else
        {
          if (v26 != 1)
          {
            v29 = 0;
            goto LABEL_23;
          }
          RamstadSRC::processMono(v25, v12, (float *)&a4[4 * v11], v15, v19, v7, v7);
        }
        v29 = v27 & ~(v27 >> 31);
LABEL_23:
        *a3 = v29;
        break;
      case 1:
        v28 = *((_QWORD *)this + 7);
        if (v20 >= (*((_QWORD *)this + 8) - v28) >> 3)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        ShortTermLinearInterpolationResampler::PushConvertFloat(*(ShortTermLinearInterpolationResampler **)(v28 + 8 * v20), v12, v14, v16, v18, &v36, &v35, v7, v7);
        break;
      case 0:
        v22 = *((_QWORD *)this + 4);
        if (v20 >= (*((_QWORD *)this + 5) - v22) >> 3)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v23 = *(Resampler2 **)(v22 + 8 * v20);
        v33 = v19;
        v34 = v15;
        Resampler2::PushConvert(v23, v12, v14, v16, v18, &v34, &v33, v7, v7, v32);
        v35 = v33;
        v36 = v15;
        break;
    }
    v11 += 2;
    v7 = *((unsigned int *)this + 4);
  }
  while (v11 < v7);
  v30 = v35;
  v31 = v36;
LABEL_27:
  *a3 = v31;
  *a5 = v30;
}

void HALS_DelayProcessor::~HALS_DelayProcessor(HALB_IOBufferManager_Server **this)
{
  HALS_DelayProcessor::~HALS_DelayProcessor(this);
  JUMPOUT(0x1B5E50688);
}

{
  *this = (HALB_IOBufferManager_Server *)&off_1E69842A0;
  HALB_IOBufferManager_Server::FreeBuffer(this[3], *((_DWORD *)this + 3) * *((_DWORD *)this + 8));
}

void *HALS_DelayProcessor::MyProcessInputSequence(HALS_DelayProcessor *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int *v7;
  void *result;

  v5 = *(unsigned __int8 **)a3;
  v6 = *(unsigned __int8 **)a2;
  v7 = *(int **)(a2 + 8);
  if (v6 == v5)
    result = HALS_DelayProcessor::Process(a1, v6, *v7);
  else
    result = HALS_DelayProcessor::Process(a1, v6, v5, *v7);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

void *HALS_DelayProcessor::Process(HALS_DelayProcessor *this, unsigned __int8 *a2, int a3)
{
  int v6;
  int v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  void *result;

  v6 = *((_DWORD *)this + 10);
  v7 = *((_DWORD *)this + 3);
  v8 = (void *)(*((_QWORD *)this + 3) + (v7 * v6));
  v9 = v6 + a3;
  v10 = *((_DWORD *)this + 8);
  v11 = v10 - v6;
  if (v6 + a3 > v10)
    v12 = v10 - v6;
  else
    v12 = a3;
  memcpy(v8, a2, (v12 * v7));
  if (v9 > v10 && a3 != v11)
    memcpy(*((void **)this + 3), &a2[*((_DWORD *)this + 3) * v12], (*((_DWORD *)this + 3) * (a3 - v11)));
  v14 = *((_DWORD *)this + 9);
  v15 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 10) = (*((_DWORD *)this + 10) + a3) % v15;
  v16 = v14 + a3;
  v17 = v15 - v14;
  if (v14 + a3 > v15)
    v18 = v15 - v14;
  else
    v18 = a3;
  result = memcpy(a2, (const void *)(*((_QWORD *)this + 3) + (*((_DWORD *)this + 3) * v14)), (v18 * *((_DWORD *)this + 3)));
  if (v16 > v15 && a3 != v17)
    result = memcpy(&a2[*((_DWORD *)this + 3) * v18], *((const void **)this + 3), (*((_DWORD *)this + 3) * (a3 - v17)));
  *((_DWORD *)this + 9) = (*((_DWORD *)this + 9) + a3) % *((_DWORD *)this + 8);
  return result;
}

void *HALS_DelayProcessor::Process(HALS_DelayProcessor *this, const unsigned __int8 *a2, unsigned __int8 *a3, unsigned int a4)
{
  int v8;
  int v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  void *result;
  unsigned int v19;

  v8 = *((_DWORD *)this + 10);
  v9 = *((_DWORD *)this + 3);
  v10 = (void *)(*((_QWORD *)this + 3) + (v9 * v8));
  v11 = *((_DWORD *)this + 8) - v8;
  if (v11 >= a4)
    v12 = a4;
  else
    v12 = *((_DWORD *)this + 8) - v8;
  memcpy(v10, a2, v12 * v9);
  if (v11 < a4)
  {
    v13 = a4 - v11;
    if (a4 < v11)
      v13 = 0;
    memcpy(*((void **)this + 3), &a2[*((_DWORD *)this + 3) * v12], *((_DWORD *)this + 3) * v13);
  }
  v14 = *((_DWORD *)this + 9);
  v15 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 10) = (*((_DWORD *)this + 10) + a4) % v15;
  v16 = v15 - v14;
  if (v15 - v14 >= a4)
    v17 = a4;
  else
    v17 = v15 - v14;
  result = memcpy(a3, (const void *)(*((_QWORD *)this + 3) + (*((_DWORD *)this + 3) * v14)), v17 * *((_DWORD *)this + 3));
  if (v16 < a4)
  {
    v19 = a4 - v16;
    if (a4 < v16)
      v19 = 0;
    result = memcpy(&a3[*((_DWORD *)this + 3) * v17], *((const void **)this + 3), *((_DWORD *)this + 3) * v19);
  }
  *((_DWORD *)this + 9) = (*((_DWORD *)this + 9) + a4) % *((_DWORD *)this + 8);
  return result;
}

void HALS_IOProcessor::~HALS_IOProcessor(HALS_IOProcessor *this)
{
  HALS_IOProcessor::~HALS_IOProcessor(this);
  JUMPOUT(0x1B5E50688);
}

{
  uint64_t v2;
  uint64_t v3;
  OpaqueAudioConverter *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E69842C8;
  v2 = *((_QWORD *)this + 14);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 15);
  if (v3)
  {
    v4 = *(OpaqueAudioConverter **)(v3 + 8);
    if (v4)
      AudioConverterDispose(v4);
    MEMORY[0x1B5E50688](v3, 0x1020C4086E7B43CLL);
  }
  v5 = *((_QWORD *)this + 16);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 17);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 18);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  std::unique_ptr<HALS_IOProcessor_ProcessingManifest>::reset[abi:ne180100]((uint64_t *)this + 19, 0);
  std::unique_ptr<HALS_IOProcessor_ProcessingManifest>::reset[abi:ne180100]((uint64_t *)this + 19, 0);
}

uint64_t HALS_IOProcessor::CalculateFrameSize(HALS_IOProcessor *this, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  RamstadSRC **v5;
  RamstadSRC **v6;
  uint64_t v7;
  RamstadSRC **v8;
  RamstadSRC **v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v13;
  unsigned int v14;

  v3 = a3;
  v4 = *((_QWORD *)this + 16);
  if (a2)
  {
    if (v4)
    {
      v14 = a3;
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        v5 = *(RamstadSRC ***)(v4 + 80);
        v6 = *(RamstadSRC ***)(v4 + 88);
        if (v5 != v6)
        {
          v7 = a3;
          do
          {
            if (*v5)
              v7 = RamstadSRC::inputSamplesForOutputSamples(*v5, v3);
            ++v5;
          }
          while (v5 != v6);
          return v7;
        }
        return a3;
      }
      v13 = 100 * a3;
      v10 = &v13;
      v11 = &v14;
      goto LABEL_20;
    }
  }
  else if (v4)
  {
    v14 = a3;
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      v8 = *(RamstadSRC ***)(v4 + 80);
      v9 = *(RamstadSRC ***)(v4 + 88);
      if (v8 != v9)
      {
        v7 = a3;
        do
        {
          if (*v8)
            v7 = RamstadSRC::outputSamplesForInputSamples(*v8, v3, (int *)&v13);
          ++v8;
        }
        while (v8 != v9);
        return v7;
      }
      return a3;
    }
    v13 = 100 * a3;
    v10 = &v14;
    v11 = &v13;
LABEL_20:
    HALS_Resampler::PreflightFrameSizes((ShortTermLinearInterpolationResampler *)v4, v10, v11);
    return v13;
  }
  return v3;
}

BOOL HALS_IOProcessor::Resampler_IsEnabled(HALS_IOProcessor *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 16);
  return v1 && *(_BYTE *)(v1 + 8) != 0;
}

uint64_t HALS_IOProcessor::Resampler_SetRateScalar(HALS_IOProcessor *this, double a2, double a3)
{
  uint64_t result;
  double v5;

  result = *((_QWORD *)this + 16);
  if (result)
  {
    v5 = a2;
    if (*((_BYTE *)this + 8))
    {
      a2 = a3;
      a3 = v5;
    }
    return HALS_Resampler::SetRateScalar(result, a2, a3);
  }
  return result;
}

uint64_t HALS_Resampler::SetRateScalar(uint64_t this, double a2, double a3)
{
  uint64_t v3;
  int v4;
  double v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  signed int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;

  if (*(_BYTE *)(this + 8))
  {
    v4 = *(_DWORD *)(this + 24);
    v5 = a3 / a2;
    switch(v4)
    {
      case 2:
        v9 = *(uint64_t **)(this + 80);
        v10 = *(uint64_t **)(this + 88);
        if (v9 != v10)
        {
          LODWORD(v3) = vcvtmd_s64_f64(v5);
          v11 = vcvtmd_s64_f64((v5 - floor(v5)) * 2147483650.0);
          do
          {
            v12 = *v9++;
            *(_DWORD *)(v12 + 60) = v3;
            *(_DWORD *)(v12 + 68) = v11;
            *(_QWORD *)(v12 + 80) = (v3 << 32 >> 1) + v11;
            *(_QWORD *)(v12 + 256) = -1;
            *(_DWORD *)(v12 + 264) = -1;
          }
          while (v9 != v10);
        }
        break;
      case 1:
        v13 = *(uint64_t **)(this + 56);
        v14 = *(uint64_t **)(this + 64);
        while (v13 != v14)
        {
          v15 = *v13++;
          this = ShortTermLinearInterpolationResampler::SetRate(v15, v5);
        }
        break;
      case 0:
        v6 = *(uint64_t **)(this + 32);
        v7 = *(uint64_t **)(this + 40);
        while (v6 != v7)
        {
          v8 = *v6++;
          this = Resampler2::SetVarispeedRate(v8, v5);
        }
        break;
    }
  }
  return this;
}

ShortTermLinearInterpolationResampler *HALS_Resampler::PreflightFrameSizes(ShortTermLinearInterpolationResampler *this, unsigned int *a2, unsigned int *a3)
{
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  if (!*((_BYTE *)this + 8))
  {
    v7 = *a3;
    if (*a3 >= *a2)
      v7 = *a2;
    *a2 = v7;
    goto LABEL_9;
  }
  v5 = *((_DWORD *)this + 6);
  if (v5 == 1)
  {
    this = (ShortTermLinearInterpolationResampler *)**((_QWORD **)this + 7);
    if (this)
      return ShortTermLinearInterpolationResampler::PreFlight(this, a2, a3);
  }
  else if (!v5)
  {
    this = (ShortTermLinearInterpolationResampler *)**((_QWORD **)this + 4);
    if (this)
    {
      v6 = *a2;
      v8 = *a3;
      v9 = v6;
      this = (ShortTermLinearInterpolationResampler *)Resampler2::PreFlight(this, &v9, &v8);
      *a2 = v9;
      v7 = v8;
LABEL_9:
      *a3 = v7;
    }
  }
  return this;
}

uint64_t *std::unique_ptr<HALS_IOProcessor_ProcessingManifest>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(void **)(v2 + 64);
    if (v3)
    {
      *(_QWORD *)(v2 + 72) = v3;
      operator delete(v3);
    }
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void HALS_ChannelMapper::Process(HALS_ChannelMapper *this, unsigned __int8 *a2, unsigned __int8 *__dst, UInt32 inNumberPCMFrames)
{
  UInt32 v4;
  int v5;
  UInt32 v6;
  int v7;
  OSStatus v8;
  OSStatus v9;
  size_t v10;
  unsigned __int8 *v11;
  size_t v12;
  _BYTE v13[5];
  AudioBufferList outOutputData;
  AudioBufferList inInputData;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  OSStatus v21;
  __int16 v22;
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)this)
  {
    v5 = *((_DWORD *)this + 5);
    v4 = *((_DWORD *)this + 6);
    inInputData.mNumberBuffers = 1;
    inInputData.mBuffers[0].mNumberChannels = v4;
    inInputData.mBuffers[0].mDataByteSize = v5 * inNumberPCMFrames;
    inInputData.mBuffers[0].mData = a2;
    v7 = *((_DWORD *)this + 7);
    v6 = *((_DWORD *)this + 8);
    outOutputData.mNumberBuffers = 1;
    outOutputData.mBuffers[0].mNumberChannels = v6;
    outOutputData.mBuffers[0].mDataByteSize = v7 * inNumberPCMFrames;
    outOutputData.mBuffers[0].mData = __dst;
    v8 = AudioConverterConvertComplexBuffer(*((AudioConverterRef *)this + 1), inNumberPCMFrames, &inInputData, &outOutputData);
    if (v8)
    {
      v9 = v8;
      v13[0] = HIBYTE(v8);
      v13[1] = BYTE2(v8);
      v13[2] = BYTE1(v8);
      v13[3] = v8;
      v13[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        v17 = "HALS_IOProcessor.cpp";
        v18 = 1024;
        v19 = 555;
        v20 = 1024;
        v21 = v9;
        v22 = 2080;
        v23 = v13;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ChannelMapper::Process: AudioConverterConvertBuffer failed, Error: %d (%s)", buf, 0x22u);
      }
    }
  }
  else
  {
    v10 = *((unsigned int *)this + 5);
    if (*((_BYTE *)this + 16))
    {
      v11 = __dst;
      v12 = v10 * inNumberPCMFrames;
    }
    else
    {
      v11 = __dst;
      v12 = v10;
    }
    memcpy(v11, a2, v12);
  }
}

void HALS_Resampler::HALS_Resampler(HALS_Resampler *this, const AudioStreamBasicDescription *inSourceFormat, double a3, int a4, unsigned int a5, Resampler2 *a6)
{
  unsigned int v6;
  AudioFormatID mFormatID;
  int v11;
  BOOL v12;
  UInt32 *p_mBytesPerFrame;
  UInt32 v14;
  UInt32 mChannelsPerFrame;
  double mSampleRate;
  unint64_t v17;
  double v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  int v50;
  Resampler2 *v51;
  double v52;
  unint64_t v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  Resampler2 **v61;
  char *v62;
  char *v63;
  Resampler2 *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  int v72;
  signed int v73;
  uint64_t v74;
  unsigned int v75;
  RamstadSRC *v76;
  double v77;
  RamstadSRC *v78;
  unsigned int v79;
  unint64_t v80;
  RamstadSRC **v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  RamstadSRC **v89;
  char *v90;
  char *v91;
  RamstadSRC *v92;
  __int128 v93;
  UInt32 v94;
  OSStatus v95;
  UInt32 v96;
  __int128 v97;
  OSStatus v98;
  OSStatus v99;
  _DWORD *exception;
  _DWORD *v101;
  int v102;
  void **v103;
  _BYTE v104[5];
  AudioStreamBasicDescription inDestinationFormat;
  uint8_t buf[4];
  const char *v107;
  __int16 v108;
  int v109;
  __int16 v110;
  OSStatus v111;
  __int16 v112;
  _BYTE *v113;
  AudioStreamBasicDescription v114;
  uint64_t v115;

  v6 = a6;
  v115 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E6984278;
  mFormatID = inSourceFormat->mFormatID;
  if (mFormatID == 1819304813)
  {
    if (inSourceFormat->mSampleRate == a3)
      v11 = a4;
    else
      v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  v12 = mFormatID == 1819304813;
  *((_BYTE *)this + 8) = v11;
  *((_BYTE *)this + 9) = a4;
  *((_BYTE *)this + 10) = mFormatID == 1819304813;
  p_mBytesPerFrame = &inSourceFormat->mBytesPerFrame;
  if (!v12)
    p_mBytesPerFrame = &inSourceFormat->mBytesPerPacket;
  v14 = *p_mBytesPerFrame;
  mChannelsPerFrame = inSourceFormat->mChannelsPerFrame;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 3) = v14;
  *((_DWORD *)this + 4) = mChannelsPerFrame;
  *((_DWORD *)this + 5) = (_DWORD)a6;
  *((_DWORD *)this + 6) = 0;
  *((_OWORD *)this + 2) = 0u;
  v103 = (void **)((char *)this + 32);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  if (v11)
  {
    if (a5 > 2)
      a5 = 0;
    else
      *((_DWORD *)this + 6) = a5;
    mSampleRate = inSourceFormat->mSampleRate;
    if (a6 <= 0x20 && mSampleRate == a3)
    {
      *((_DWORD *)this + 6) = 1;
      LODWORD(v17) = (mChannelsPerFrame & 1) + (mChannelsPerFrame >> 1);
      v18 = 24000000.0 / a3 / (24000000.0 / mSampleRate);
    }
    else
    {
      v17 = (mChannelsPerFrame & 1) + (mChannelsPerFrame >> 1);
      v18 = 24000000.0 / a3 / (24000000.0 / mSampleRate);
      if (a5 == 2)
      {
        if ((_DWORD)v17)
        {
          v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v17);
          v67 = &v65[8 * v66];
          v69 = (char *)*((_QWORD *)this + 10);
          v68 = (char *)*((_QWORD *)this + 11);
          v70 = v65;
          if (v68 != v69)
          {
            do
            {
              v71 = *((_QWORD *)v68 - 1);
              v68 -= 8;
              *((_QWORD *)v70 - 1) = v71;
              v70 -= 8;
            }
            while (v68 != v69);
            v68 = (char *)*((_QWORD *)this + 10);
          }
          *((_QWORD *)this + 10) = v70;
          *((_QWORD *)this + 11) = v65;
          *((_QWORD *)this + 12) = v67;
          if (v68)
            operator delete(v68);
          v72 = 0;
          LODWORD(v67) = vcvtmd_s64_f64(v18);
          v73 = vcvtmd_s64_f64((v18 - floor(v18)) * 2147483650.0);
          v102 = (int)v67;
          v74 = ((uint64_t)((_QWORD)v67 << 32) >> 1) + v73;
          do
          {
            v75 = *((_DWORD *)this + 4);
            v76 = (RamstadSRC *)operator new();
            v78 = v76;
            ++v72;
            if (v75 < 2 * v72)
              v79 = 1;
            else
              v79 = 2;
            RamstadSRC::RamstadSRC(v76, inSourceFormat->mSampleRate, a3, v79, v6, v77);
            *((_DWORD *)v78 + 15) = v102;
            *((_DWORD *)v78 + 17) = v73;
            *((_QWORD *)v78 + 10) = v74;
            *((_QWORD *)v78 + 32) = -1;
            *((_DWORD *)v78 + 66) = -1;
            v81 = (RamstadSRC **)*((_QWORD *)this + 11);
            v80 = *((_QWORD *)this + 12);
            if ((unint64_t)v81 >= v80)
            {
              v83 = *((_QWORD *)this + 10);
              v84 = ((uint64_t)v81 - v83) >> 3;
              if ((unint64_t)(v84 + 1) >> 61)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v85 = v80 - v83;
              v86 = v85 >> 2;
              if (v85 >> 2 <= (unint64_t)(v84 + 1))
                v86 = v84 + 1;
              if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
                v87 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v87 = v86;
              if (v87)
                v87 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v87);
              else
                v88 = 0;
              v89 = (RamstadSRC **)(v87 + 8 * v84);
              *v89 = v78;
              v82 = v89 + 1;
              v91 = (char *)*((_QWORD *)this + 10);
              v90 = (char *)*((_QWORD *)this + 11);
              if (v90 != v91)
              {
                do
                {
                  v92 = (RamstadSRC *)*((_QWORD *)v90 - 1);
                  v90 -= 8;
                  *--v89 = v92;
                }
                while (v90 != v91);
                v90 = (char *)*((_QWORD *)this + 10);
              }
              *((_QWORD *)this + 10) = v89;
              *((_QWORD *)this + 11) = v82;
              *((_QWORD *)this + 12) = v87 + 8 * v88;
              if (v90)
                operator delete(v90);
            }
            else
            {
              *v81 = v78;
              v82 = v81 + 1;
            }
            *((_QWORD *)this + 11) = v82;
          }
          while (v72 != (_DWORD)v17);
        }
        goto LABEL_95;
      }
      if (a5 != 1)
      {
        Resampler2::InitializeVarispeedMode(a6);
        v40 = *((_QWORD *)this + 4);
        if (v17 > (*((_QWORD *)this + 6) - v40) >> 3)
        {
          v41 = *((_QWORD *)this + 5);
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v17);
          v43 = &v42[(v41 - v40) & 0xFFFFFFFFFFFFFFF8];
          v45 = &v42[8 * v44];
          v47 = (char *)*((_QWORD *)this + 4);
          v46 = (char *)*((_QWORD *)this + 5);
          v48 = v43;
          if (v46 != v47)
          {
            do
            {
              v49 = *((_QWORD *)v46 - 1);
              v46 -= 8;
              *((_QWORD *)v48 - 1) = v49;
              v48 -= 8;
            }
            while (v46 != v47);
            v46 = (char *)*v103;
          }
          *((_QWORD *)this + 4) = v48;
          *((_QWORD *)this + 5) = v43;
          *((_QWORD *)this + 6) = v45;
          if (v46)
            operator delete(v46);
        }
        if ((_DWORD)v17)
        {
          v50 = 0;
          do
          {
            v51 = (Resampler2 *)operator new();
            Resampler2::Resampler2(v51, inSourceFormat->mSampleRate, inSourceFormat->mSampleRate, v6, v52);
            Resampler2::SetPrimeMethod((uint64_t)v51, 2);
            Resampler2::SetVarispeedRate((uint64_t)v51, v18);
            v54 = (char *)*((_QWORD *)this + 5);
            v53 = *((_QWORD *)this + 6);
            if ((unint64_t)v54 >= v53)
            {
              v56 = (v54 - (_BYTE *)*v103) >> 3;
              if ((unint64_t)(v56 + 1) >> 61)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v57 = v53 - (_QWORD)*v103;
              v58 = v57 >> 2;
              if (v57 >> 2 <= (unint64_t)(v56 + 1))
                v58 = v56 + 1;
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
                v59 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v59 = v58;
              if (v59)
                v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v59);
              else
                v60 = 0;
              v61 = (Resampler2 **)(v59 + 8 * v56);
              *v61 = v51;
              v55 = v61 + 1;
              v63 = (char *)*((_QWORD *)this + 4);
              v62 = (char *)*((_QWORD *)this + 5);
              if (v62 != v63)
              {
                do
                {
                  v64 = (Resampler2 *)*((_QWORD *)v62 - 1);
                  v62 -= 8;
                  *--v61 = v64;
                }
                while (v62 != v63);
                v62 = (char *)*v103;
              }
              *((_QWORD *)this + 4) = v61;
              *((_QWORD *)this + 5) = v55;
              *((_QWORD *)this + 6) = v59 + 8 * v60;
              if (v62)
                operator delete(v62);
            }
            else
            {
              *(_QWORD *)v54 = v51;
              v55 = v54 + 8;
            }
            *((_QWORD *)this + 5) = v55;
            ++v50;
          }
          while (v50 != (_DWORD)v17);
        }
        goto LABEL_95;
      }
    }
    if ((_DWORD)v17)
    {
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v17);
      v22 = (char *)*((_QWORD *)this + 7);
      v21 = (char *)*((_QWORD *)this + 8);
      v23 = v19;
      if (v21 != v22)
      {
        do
        {
          v24 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v23 - 1) = v24;
          v23 -= 8;
        }
        while (v21 != v22);
        v21 = (char *)*((_QWORD *)this + 7);
      }
      *((_QWORD *)this + 7) = v23;
      *((_QWORD *)this + 8) = v19;
      *((_QWORD *)this + 9) = &v19[8 * v20];
      if (v21)
        operator delete(v21);
      v25 = 0;
      do
      {
        v26 = operator new();
        *(_BYTE *)v26 = 0;
        ShortTermLinearInterpolationResampler::SetRate(v26, v18);
        *(_QWORD *)(v26 + 32) = 0;
        *(_QWORD *)(v26 + 8) = 0;
        *(_QWORD *)(v26 + 16) = 0;
        ShortTermLinearInterpolationResampler::SetRate(v26, v18);
        v28 = (uint64_t *)*((_QWORD *)this + 8);
        v27 = *((_QWORD *)this + 9);
        if ((unint64_t)v28 >= v27)
        {
          v30 = *((_QWORD *)this + 7);
          v31 = ((uint64_t)v28 - v30) >> 3;
          if ((unint64_t)(v31 + 1) >> 61)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v32 = v27 - v30;
          v33 = v32 >> 2;
          if (v32 >> 2 <= (unint64_t)(v31 + 1))
            v33 = v31 + 1;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
            v34 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v34 = v33;
          if (v34)
            v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v34);
          else
            v35 = 0;
          v36 = (uint64_t *)(v34 + 8 * v31);
          *v36 = v26;
          v29 = v36 + 1;
          v38 = (char *)*((_QWORD *)this + 7);
          v37 = (char *)*((_QWORD *)this + 8);
          if (v37 != v38)
          {
            do
            {
              v39 = *((_QWORD *)v37 - 1);
              v37 -= 8;
              *--v36 = v39;
            }
            while (v37 != v38);
            v37 = (char *)*((_QWORD *)this + 7);
          }
          *((_QWORD *)this + 7) = v36;
          *((_QWORD *)this + 8) = v29;
          *((_QWORD *)this + 9) = v34 + 8 * v35;
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v28 = v26;
          v29 = v28 + 1;
        }
        *((_QWORD *)this + 8) = v29;
        ++v25;
      }
      while (v25 != (_DWORD)v17);
    }
LABEL_95:
    if (inSourceFormat->mFormatID != 1819304813
      || (~inSourceFormat->mFormatFlags & 9) != 0
      || inSourceFormat->mBitsPerChannel != 32)
    {
      v93 = *(_OWORD *)&inSourceFormat->mBytesPerPacket;
      *(_OWORD *)&inDestinationFormat.mSampleRate = *(_OWORD *)&inSourceFormat->mSampleRate;
      *(_OWORD *)&inDestinationFormat.mBytesPerPacket = v93;
      *(_QWORD *)&inDestinationFormat.mBitsPerChannel = *(_QWORD *)&inSourceFormat->mBitsPerChannel;
      v94 = 4 * inSourceFormat->mChannelsPerFrame;
      inDestinationFormat.mFormatFlags = 9;
      inDestinationFormat.mBytesPerPacket = v94;
      inDestinationFormat.mBytesPerFrame = v94;
      inDestinationFormat.mBitsPerChannel = 32;
      v95 = AudioConverterNew(inSourceFormat, &inDestinationFormat, (AudioConverterRef *)this + 13);
      v96 = v95;
      if (v95)
      {
        buf[0] = HIBYTE(v95);
        buf[1] = BYTE2(v95);
        buf[2] = BYTE1(v95);
        buf[3] = v95;
        LOBYTE(v107) = 0;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v114.mSampleRate) = 136315906;
          *(_QWORD *)((char *)&v114.mSampleRate + 4) = "HALS_IOProcessor.cpp";
          LOWORD(v114.mFormatFlags) = 1024;
          *(AudioFormatFlags *)((char *)&v114.mFormatFlags + 2) = 697;
          HIWORD(v114.mBytesPerPacket) = 1024;
          v114.mFramesPerPacket = v96;
          LOWORD(v114.mBytesPerFrame) = 2080;
          *(_QWORD *)((char *)&v114.mBytesPerFrame + 2) = buf;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Resampler::HALS_Resampler: failed to create the To converter, Error: %d (%s)", (uint8_t *)&v114, 0x22u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = v96;
      }
      v97 = *(_OWORD *)&inSourceFormat->mBytesPerPacket;
      *(_OWORD *)&v114.mSampleRate = *(_OWORD *)&inSourceFormat->mSampleRate;
      *(_OWORD *)&v114.mBytesPerPacket = v97;
      *(_QWORD *)&v114.mBitsPerChannel = *(_QWORD *)&inSourceFormat->mBitsPerChannel;
      v114.mSampleRate = a3;
      inDestinationFormat.mSampleRate = a3;
      v98 = AudioConverterNew(&inDestinationFormat, &v114, (AudioConverterRef *)this + 14);
      v99 = v98;
      if (v98)
      {
        v104[0] = HIBYTE(v98);
        v104[1] = BYTE2(v98);
        v104[2] = BYTE1(v98);
        v104[3] = v98;
        v104[4] = 0;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          v107 = "HALS_IOProcessor.cpp";
          v108 = 1024;
          v109 = 704;
          v110 = 1024;
          v111 = v99;
          v112 = 2080;
          v113 = v104;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Resampler::HALS_Resampler: failed to create the From converter, Error: %d (%s)", buf, 0x22u);
        }
        v101 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v101 = &off_1E69A1B30;
        v101[2] = v99;
      }
    }
  }
}

void sub_1B5AA3790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11)
{
  _QWORD *v11;
  void *v13;
  void *v14;
  void *v15;

  v13 = (void *)v11[10];
  if (v13)
  {
    v11[11] = v13;
    operator delete(v13);
  }
  v14 = (void *)v11[7];
  if (v14)
  {
    v11[8] = v14;
    operator delete(v14);
  }
  v15 = *a11;
  if (*a11)
  {
    v11[5] = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void HALS_DelayProcessor::HALS_DelayProcessor(HALS_DelayProcessor *this, const AudioStreamBasicDescription *a2, int a3)
{
  BOOL v4;
  char v5;
  UInt32 mBytesPerFrame;
  unsigned int v7;
  void *Buffer;

  *(_QWORD *)this = &off_1E69842A0;
  if (a3)
    v4 = a2->mFormatID == 1819304813;
  else
    v4 = 0;
  v5 = v4;
  *((_BYTE *)this + 8) = v5;
  mBytesPerFrame = a2->mBytesPerFrame;
  *((_DWORD *)this + 3) = mBytesPerFrame;
  *((_DWORD *)this + 4) = a3;
  *((_QWORD *)this + 3) = 0;
  v7 = 2 * a3 + 0x2000;
  *((_QWORD *)this + 4) = v7;
  *((_DWORD *)this + 10) = a3;
  if (v4)
  {
    Buffer = (void *)HALB_IOBufferManager_Server::AllocateBuffer(mBytesPerFrame * v7);
    *((_QWORD *)this + 3) = Buffer;
    bzero(Buffer, (*((_DWORD *)this + 3) * *((_DWORD *)this + 8)));
  }
}

uint64_t HALS_IOProcessor::HALS_IOProcessor(uint64_t a1, int a2, char a3, __int128 *a4, const AudioStreamBasicDescription *a5, int a6, unsigned int a7, unsigned int a8, uint64_t a9, unsigned int a10, uint64_t a11, unsigned __int8 a12)
{
  unsigned int v12;
  int v13;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  int v25;
  void **v26;
  _BOOL4 v27;
  _BOOL4 v29;
  double mSampleRate;
  UInt32 mChannelsPerFrame;
  UInt32 mBytesPerFrame;
  uint64_t v33;
  int v38;
  UInt32 v39;
  int v40;
  _BOOL4 v41;
  AudioFormatID mFormatID;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  void *v48;
  AMCP::Log::Scope_Registry *v49;
  HALS_DelayProcessor *v50;
  AMCP::Log::Scope_Registry *v51;
  HALS_Resampler *v52;
  AMCP::Log::Scope_Registry *v53;
  NSObject *v54;
  _opaque_pthread_t *v55;
  mach_port_t v56;
  unint64_t v57;
  char *v58;
  int v59;
  char *v60;
  const char *v61;
  const char *v62;
  BOOL v63;
  AMCP::Log::Scope_Registry *v64;
  _QWORD *v65;
  uint64_t v66;
  AMCP::Log::Scope_Registry *v67;
  uint64_t v68;
  int v69;
  uint64_t *v70;
  BOOL v71;
  int v72;
  _DWORD *v73;
  unsigned int v74;
  __int128 v75;
  OSStatus v76;
  OSStatus v77;
  OSStatus v78;
  OSStatus v79;
  __int128 v80;
  HALS_Resampler *v81;
  HALS_DelayProcessor *v82;
  BOOL v83;
  uint64_t v85;
  BOOL v86;
  _BOOL4 v88;
  HALS_Resampler *v89;
  _opaque_pthread_t *v91;
  mach_port_t v92;
  unint64_t v93;
  char *v94;
  int v95;
  char *v96;
  const char *v97;
  _opaque_pthread_t *v98;
  mach_port_t v99;
  unint64_t v100;
  char *v101;
  int v102;
  char *v103;
  const char *v104;
  _opaque_pthread_t *v105;
  mach_port_t v106;
  unint64_t v107;
  char *v108;
  int v109;
  char *v110;
  const char *v111;
  _opaque_pthread_t *v112;
  mach_port_t v113;
  unint64_t v114;
  char *v115;
  int v116;
  char *v117;
  const char *v118;
  _opaque_pthread_t *v119;
  mach_port_t v120;
  unint64_t v121;
  char *v122;
  int v123;
  char *v124;
  const char *v125;
  _DWORD *exception;
  _BOOL4 v127;
  uint64_t *v128;
  AudioStreamBasicDescription v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  BOOL v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  unsigned __int8 v143;
  char v144;
  char v145;
  char v146;
  char v147;
  char v148;
  uint8_t buf[4];
  const char *v150;
  __int16 v151;
  int v152;
  __int16 v153;
  OSStatus v154;
  __int16 v155;
  char *v156;
  AudioStreamBasicDescription inDestinationFormat;
  uint64_t v158;

  v12 = a7;
  v13 = a6;
  v17 = a10;
  v158 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E69842C8;
  *(_BYTE *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 9) = a3;
  *(_BYTE *)(a1 + 10) = a5->mFormatID == 1819304813;
  *(_QWORD *)(a1 + 12) = *(_QWORD *)&a5->mBytesPerPacket;
  v18 = *a4;
  v19 = a4[1];
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a4 + 4);
  *(_OWORD *)(a1 + 40) = v19;
  *(_OWORD *)(a1 + 24) = v18;
  v20 = *(_OWORD *)&a5->mSampleRate;
  v21 = *(_OWORD *)&a5->mBytesPerPacket;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)&a5->mBitsPerChannel;
  *(_OWORD *)(a1 + 64) = v20;
  *(_OWORD *)(a1 + 80) = v21;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  if (!a2)
  {
    mSampleRate = a5->mSampleRate;
    mChannelsPerFrame = a5->mChannelsPerFrame;
    if (a5->mFormatID == 1819304813 && (a5->mFormatFlags & 9) == 9 && a5->mBitsPerChannel == 32 && (a12 & 1) == 0)
    {
      mBytesPerFrame = a5->mBytesPerFrame;
      v33 = operator new();
      *(_QWORD *)v33 = &off_1E6984250;
      *(_BYTE *)(v33 + 8) = 1;
      *(_DWORD *)(v33 + 12) = mBytesPerFrame;
      *(_DWORD *)(v33 + 16) = mChannelsPerFrame;
      __asm { FMOV            V0.2S, #1.0 }
      *(_QWORD *)(v33 + 20) = _D0;
      *(_QWORD *)(v33 + 36) = 0;
      *(_QWORD *)(v33 + 28) = 0;
      *(_DWORD *)(v33 + 44) = 0;
      *(_QWORD *)(a1 + 112) = v33;
      *(_DWORD *)(a1 + 104) |= 1u;
    }
    v38 = *((_DWORD *)a4 + 2);
    if (a9)
    {
      if (v38 != 1819304813)
        goto LABEL_41;
      if (*(_QWORD *)(a9 + 8) != *(_QWORD *)a9)
      {
LABEL_36:
        v43 = operator new();
        v44 = v43;
        v45 = *((_DWORD *)a4 + 2);
        if (a9)
        {
          if (v45 != 1819304813)
          {
            v72 = 0;
LABEL_79:
            _ZF = v45 == 1819304813;
            *(_BYTE *)v43 = v72;
            *(_QWORD *)(v43 + 8) = 0;
            *(_BYTE *)(v43 + 16) = v45 == 1819304813;
            v73 = (_DWORD *)a4 + 6;
            if (!_ZF)
              v73 = a4 + 1;
            v74 = *((_DWORD *)a4 + 7);
            *(_DWORD *)(v43 + 20) = *v73;
            *(_QWORD *)(v43 + 24) = v74;
            *(_DWORD *)(v43 + 32) = mChannelsPerFrame;
            if (v72)
            {
              v75 = a4[1];
              *(_OWORD *)&inDestinationFormat.mSampleRate = *a4;
              *(_OWORD *)&inDestinationFormat.mBytesPerPacket = v75;
              *(_QWORD *)&inDestinationFormat.mBitsPerChannel = *((_QWORD *)a4 + 4);
              inDestinationFormat.mBytesPerFrame = (inDestinationFormat.mBitsPerChannel >> 3) * mChannelsPerFrame;
              inDestinationFormat.mChannelsPerFrame = mChannelsPerFrame;
              inDestinationFormat.mBytesPerPacket = inDestinationFormat.mBytesPerFrame;
              *(_DWORD *)(v43 + 28) = inDestinationFormat.mBytesPerFrame;
              v76 = AudioConverterNew((const AudioStreamBasicDescription *)a4, &inDestinationFormat, (AudioConverterRef *)(v43 + 8));
              v77 = v76;
              if (v76)
              {
                v144 = HIBYTE(v76);
                v145 = BYTE2(v76);
                v146 = BYTE1(v76);
                v147 = v76;
                v148 = 0;
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315906;
                  v150 = "HALS_IOProcessor.cpp";
                  v151 = 1024;
                  v152 = 496;
                  v153 = 1024;
                  v154 = v77;
                  v155 = 2080;
                  v156 = &v144;
                  _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ChannelMapper::HALS_ChannelMapper: failed to create the AudioConverter, Error: %d (%s)", buf, 0x22u);
                }
                exception = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)exception = &off_1E69A1B30;
                exception[2] = v77;
              }
              if (a9)
              {
                if (*(_QWORD *)(a9 + 8) != *(_QWORD *)a9)
                {
                  v78 = AudioConverterSetProperty(*(AudioConverterRef *)(v44 + 8), 0x63686D70u, 4 * mChannelsPerFrame, *(const void **)a9);
                  v79 = v78;
                  if (v78)
                  {
                    v144 = HIBYTE(v78);
                    v145 = BYTE2(v78);
                    v146 = BYTE1(v78);
                    v147 = v78;
                    v148 = 0;
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315906;
                      v150 = "HALS_IOProcessor.cpp";
                      v151 = 1024;
                      v152 = 503;
                      v153 = 1024;
                      v154 = v79;
                      v155 = 2080;
                      v156 = &v144;
                      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ChannelMapper::HALS_ChannelMapper: failed to set the channel map on the converter, Error: %d (%s)", buf, 0x22u);
                    }
                  }
                }
              }
            }
            *(_QWORD *)(a1 + 120) = v44;
            *(_DWORD *)(a1 + 104) |= 4u;
            v80 = a4[1];
            *(_OWORD *)&inDestinationFormat.mSampleRate = *a4;
            *(_OWORD *)&inDestinationFormat.mBytesPerPacket = v80;
            *(_QWORD *)&inDestinationFormat.mBitsPerChannel = *((_QWORD *)a4 + 4);
LABEL_89:
            inDestinationFormat.mBytesPerPacket = inDestinationFormat.mBytesPerPacket
                                                / inDestinationFormat.mChannelsPerFrame
                                                * mChannelsPerFrame;
            inDestinationFormat.mBytesPerFrame = inDestinationFormat.mBytesPerPacket;
            inDestinationFormat.mChannelsPerFrame = mChannelsPerFrame;
LABEL_90:
            if (inDestinationFormat.mFormatID == 1819304813 && (inDestinationFormat.mSampleRate != mSampleRate || a6))
            {
              v81 = (HALS_Resampler *)operator new();
              HALS_Resampler::HALS_Resampler(v81, &inDestinationFormat, mSampleRate, a6, a7, (Resampler2 *)a8);
              *(_QWORD *)(a1 + 128) = v81;
              *(_DWORD *)(a1 + 104) |= 2u;
            }
            if (a10 && *((_DWORD *)a4 + 2) == 1819304813)
            {
              v82 = (HALS_DelayProcessor *)operator new();
              HALS_DelayProcessor::HALS_DelayProcessor(v82, (const AudioStreamBasicDescription *)a4, a10);
LABEL_120:
              *(_QWORD *)(a1 + 136) = v82;
              *(_DWORD *)(a1 + 104) |= 8u;
              return a1;
            }
            return a1;
          }
          if (*(_QWORD *)(a9 + 8) != *(_QWORD *)a9)
          {
            v72 = 1;
            goto LABEL_79;
          }
          v63 = *((_DWORD *)a4 + 7) == mChannelsPerFrame;
        }
        else
        {
          v63 = v45 != 1819304813 || *((_DWORD *)a4 + 7) == mChannelsPerFrame;
        }
        v72 = !v63;
        goto LABEL_79;
      }
    }
    else if (v38 != 1819304813)
    {
      goto LABEL_41;
    }
    if (*((_DWORD *)a4 + 7) != mChannelsPerFrame)
      goto LABEL_36;
LABEL_41:
    v46 = *(_QWORD *)(a1 + 120);
    v47 = a4[1];
    *(_OWORD *)&inDestinationFormat.mSampleRate = *a4;
    *(_OWORD *)&inDestinationFormat.mBytesPerPacket = v47;
    *(_QWORD *)&inDestinationFormat.mBitsPerChannel = *((_QWORD *)a4 + 4);
    if (!v46)
      goto LABEL_90;
    goto LABEL_89;
  }
  if (a11)
  {
    v128 = (uint64_t *)(a1 + 152);
    v22 = *(_OWORD *)&a5->mBytesPerPacket;
    *(_OWORD *)&v134.mSampleRate = *(_OWORD *)&a5->mSampleRate;
    *(_OWORD *)&v134.mBytesPerPacket = v22;
    *(_QWORD *)&v134.mBitsPerChannel = *(_QWORD *)&a5->mBitsPerChannel;
    v23 = a4[1];
    v135 = *a4;
    v136 = v23;
    v137 = *((_QWORD *)a4 + 4);
    v138 = a6;
    v139 = a7;
    v140 = a7;
    v141 = a10;
    v142 = a11;
    v143 = a12;
    v24 = (_QWORD *)operator new();
    v25 = 0;
    *v24 = a1;
    *(_OWORD *)(v24 + 1) = 0u;
    *(_OWORD *)(v24 + 3) = 0u;
    v24[5] = 0;
    v24[8] = 0;
    v26 = (void **)(v24 + 8);
    v24[9] = 0;
    v24[10] = 0;
    *((_DWORD *)v24 + 22) = 0;
    v27 = v134.mFormatID == 1819304813 && v141 != 0;
    if (v134.mFormatID == 1819304813)
    {
      _ZF = v134.mSampleRate == *(double *)&v135 && !v138;
      v25 = !_ZF;
    }
    v29 = DWORD2(v135) == 1819304813 && (~HIDWORD(v135) & 9) == 0 && v137 == 32;
    v39 = v134.mChannelsPerFrame;
    v40 = HIDWORD(v136);
    if (v143)
      v41 = 0;
    else
      v41 = v29;
    v127 = v41;
    if (v25)
    {
      if (v134.mChannelsPerFrame != HIDWORD(v136)
        || ((*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v142 + 16))(v142, &v135) & 1) == 0)
      {
LABEL_32:
        std::default_delete<HALS_IOProcessor_ProcessingManifest>::operator()[abi:ne180100]((uint64_t)v24);
      }
    }
    else if (!(*(unsigned int (**)(uint64_t, AudioStreamBasicDescription *, __int128 *))(*(_QWORD *)v142
                                                                                                  + 16))(v142, &v134, &v135))
    {
      goto LABEL_32;
    }
    v48 = *v26;
    if (*v26)
    {
      v24[9] = v48;
      operator delete(v48);
      *v26 = 0;
      v24[9] = 0;
      v24[10] = 0;
    }
    *v26 = 0;
    v24[9] = 0;
    *((_DWORD *)v24 + 22) = 0;
    v24[10] = 0;
    if (v27)
    {
      *(_QWORD *)&inDestinationFormat.mSampleRate = 0x500000008;
      *(_QWORD *)&inDestinationFormat.mFormatID = 0;
      v49 = (AMCP::Log::Scope_Registry *)HALS_IOProcessor_ProcessingManifest::ProcessingChain::append((uint64_t)v26, &inDestinationFormat);
      if (*(_QWORD *)(*v24 + 136))
      {
        AMCP::Log::Scope_Registry::get(v49);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&inDestinationFormat, "com.apple.coreaudio", "AMCP");
        v54 = **(NSObject ***)&inDestinationFormat.mSampleRate;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&inDestinationFormat);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          v98 = pthread_self();
          v99 = pthread_mach_thread_np(v98);
          v100 = 0;
          v101 = 0;
          v102 = 47;
          do
          {
            v103 = &aLibraryCachesC_169[v100];
            if (v102 == 47)
              v101 = &aLibraryCachesC_169[v100];
            v102 = v103[1];
            if (!v103[1])
              break;
            _CF = v100++ >= 0xFFF;
          }
          while (!_CF);
          if (v101)
            v104 = v101 + 1;
          else
            v104 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOProcessor_ProcessingManifest.cpp";
          LODWORD(inDestinationFormat.mSampleRate) = 67109890;
          HIDWORD(inDestinationFormat.mSampleRate) = v99;
          LOWORD(inDestinationFormat.mFormatID) = 2080;
          *(_QWORD *)((char *)&inDestinationFormat.mFormatID + 2) = v104;
          HIWORD(inDestinationFormat.mBytesPerPacket) = 1024;
          inDestinationFormat.mFramesPerPacket = 84;
          LOWORD(inDestinationFormat.mBytesPerFrame) = 2080;
          *(_QWORD *)((char *)&inDestinationFormat.mBytesPerFrame + 2) = "nullptr == mOwner.mDelay";
          v62 = "%6u %32s:%-5d Assertion Failed: %s Must be initialized from null.";
          goto LABEL_133;
        }
        goto LABEL_134;
      }
      v50 = (HALS_DelayProcessor *)operator new();
      HALS_DelayProcessor::HALS_DelayProcessor(v50, &v134, v141);
      *(_QWORD *)(*v24 + 136) = v50;
      *(_QWORD *)(v24[9] - 8) = v50;
    }
    if (v25)
    {
      if (v39 != v40)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v48);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&inDestinationFormat, "com.apple.coreaudio", "AMCP");
        v54 = **(NSObject ***)&inDestinationFormat.mSampleRate;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&inDestinationFormat);
        if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
          goto LABEL_134;
        v91 = pthread_self();
        v92 = pthread_mach_thread_np(v91);
        v93 = 0;
        v94 = 0;
        v95 = 47;
        do
        {
          v96 = &aLibraryCachesC_169[v93];
          if (v95 == 47)
            v94 = &aLibraryCachesC_169[v93];
          v95 = v96[1];
          if (!v96[1])
            break;
          _CF = v93++ >= 0xFFF;
        }
        while (!_CF);
        if (v94)
          v97 = v94 + 1;
        else
          v97 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOProcessor_ProcessingManifest.cpp";
        LODWORD(inDestinationFormat.mSampleRate) = 67109890;
        HIDWORD(inDestinationFormat.mSampleRate) = v92;
        LOWORD(inDestinationFormat.mFormatID) = 2080;
        *(_QWORD *)((char *)&inDestinationFormat.mFormatID + 2) = v97;
        HIWORD(inDestinationFormat.mBytesPerPacket) = 1024;
        inDestinationFormat.mFramesPerPacket = 93;
        LOWORD(inDestinationFormat.mBytesPerFrame) = 2080;
        *(_QWORD *)((char *)&inDestinationFormat.mBytesPerFrame + 2) = "false";
        v62 = "%6u %32s:%-5d Assertion Failed: %s Unsupported.";
        goto LABEL_133;
      }
      *(_QWORD *)&inDestinationFormat.mSampleRate = 0x4900000002;
      *(_QWORD *)&inDestinationFormat.mFormatID = 0;
      v51 = (AMCP::Log::Scope_Registry *)HALS_IOProcessor_ProcessingManifest::ProcessingChain::append((uint64_t)v26, &inDestinationFormat);
      if (*(_QWORD *)(*v24 + 128))
      {
        AMCP::Log::Scope_Registry::get(v51);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&inDestinationFormat, "com.apple.coreaudio", "AMCP");
        v54 = **(NSObject ***)&inDestinationFormat.mSampleRate;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&inDestinationFormat);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          v119 = pthread_self();
          v120 = pthread_mach_thread_np(v119);
          v121 = 0;
          v122 = 0;
          v123 = 47;
          do
          {
            v124 = &aLibraryCachesC_169[v121];
            if (v123 == 47)
              v122 = &aLibraryCachesC_169[v121];
            v123 = v124[1];
            if (!v124[1])
              break;
            _CF = v121++ >= 0xFFF;
          }
          while (!_CF);
          if (v122)
            v125 = v122 + 1;
          else
            v125 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOProcessor_ProcessingManifest.cpp";
          LODWORD(inDestinationFormat.mSampleRate) = 67109890;
          HIDWORD(inDestinationFormat.mSampleRate) = v120;
          LOWORD(inDestinationFormat.mFormatID) = 2080;
          *(_QWORD *)((char *)&inDestinationFormat.mFormatID + 2) = v125;
          HIWORD(inDestinationFormat.mBytesPerPacket) = 1024;
          inDestinationFormat.mFramesPerPacket = 111;
          LOWORD(inDestinationFormat.mBytesPerFrame) = 2080;
          *(_QWORD *)((char *)&inDestinationFormat.mBytesPerFrame + 2) = "nullptr == mOwner.mResampler";
          v62 = "%6u %32s:%-5d Assertion Failed: %s Must be initialized from null.";
          goto LABEL_133;
        }
LABEL_134:
        abort();
      }
      v52 = (HALS_Resampler *)operator new();
      HALS_Resampler::HALS_Resampler(v52, &v134, *(double *)&v135, v138, v139, (Resampler2 *)v140);
      *(_QWORD *)(*v24 + 128) = v52;
      *(_QWORD *)(v24[9] - 8) = v52;
      *(_QWORD *)&inDestinationFormat.mSampleRate = 0xA00000010;
      *(_QWORD *)&inDestinationFormat.mFormatID = 0;
      v53 = (AMCP::Log::Scope_Registry *)HALS_IOProcessor_ProcessingManifest::ProcessingChain::append((uint64_t)v26, &inDestinationFormat);
      if (*(_QWORD *)(*v24 + 144))
      {
        AMCP::Log::Scope_Registry::get(v53);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&inDestinationFormat, "com.apple.coreaudio", "AMCP");
        v54 = **(NSObject ***)&inDestinationFormat.mSampleRate;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&inDestinationFormat);
        if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
          goto LABEL_134;
        v55 = pthread_self();
        v56 = pthread_mach_thread_np(v55);
        v57 = 0;
        v58 = 0;
        v59 = 47;
        do
        {
          v60 = &aLibraryCachesC_169[v57];
          if (v59 == 47)
            v58 = &aLibraryCachesC_169[v57];
          v59 = v60[1];
          if (!v60[1])
            break;
          _CF = v57++ >= 0xFFF;
        }
        while (!_CF);
        if (v58)
          v61 = v58 + 1;
        else
          v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOProcessor_ProcessingManifest.cpp";
        LODWORD(inDestinationFormat.mSampleRate) = 67109890;
        HIDWORD(inDestinationFormat.mSampleRate) = v56;
        LOWORD(inDestinationFormat.mFormatID) = 2080;
        *(_QWORD *)((char *)&inDestinationFormat.mFormatID + 2) = v61;
        HIWORD(inDestinationFormat.mBytesPerPacket) = 1024;
        inDestinationFormat.mFramesPerPacket = 116;
        LOWORD(inDestinationFormat.mBytesPerFrame) = 2080;
        *(_QWORD *)((char *)&inDestinationFormat.mBytesPerFrame + 2) = "nullptr == mOwner.mCustomProcessor";
        v62 = "%6u %32s:%-5d Assertion Failed: %s Must be initialized from null.";
        goto LABEL_133;
      }
    }
    else
    {
      *(_QWORD *)&inDestinationFormat.mSampleRate = 0x900000010;
      *(_QWORD *)&inDestinationFormat.mFormatID = 0;
      v64 = (AMCP::Log::Scope_Registry *)HALS_IOProcessor_ProcessingManifest::ProcessingChain::append((uint64_t)v26, &inDestinationFormat);
      if (*(_QWORD *)(*v24 + 144))
      {
        AMCP::Log::Scope_Registry::get(v64);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&inDestinationFormat, "com.apple.coreaudio", "AMCP");
        v54 = **(NSObject ***)&inDestinationFormat.mSampleRate;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&inDestinationFormat);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          v105 = pthread_self();
          v106 = pthread_mach_thread_np(v105);
          v107 = 0;
          v108 = 0;
          v109 = 47;
          do
          {
            v110 = &aLibraryCachesC_169[v107];
            if (v109 == 47)
              v108 = &aLibraryCachesC_169[v107];
            v109 = v110[1];
            if (!v110[1])
              break;
            _CF = v107++ >= 0xFFF;
          }
          while (!_CF);
          if (v108)
            v111 = v108 + 1;
          else
            v111 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOProcessor_ProcessingManifest.cpp";
          LODWORD(inDestinationFormat.mSampleRate) = 67109890;
          HIDWORD(inDestinationFormat.mSampleRate) = v106;
          LOWORD(inDestinationFormat.mFormatID) = 2080;
          *(_QWORD *)((char *)&inDestinationFormat.mFormatID + 2) = v111;
          HIWORD(inDestinationFormat.mBytesPerPacket) = 1024;
          inDestinationFormat.mFramesPerPacket = 124;
          LOWORD(inDestinationFormat.mBytesPerFrame) = 2080;
          *(_QWORD *)((char *)&inDestinationFormat.mBytesPerFrame + 2) = "nullptr == mOwner.mCustomProcessor";
          v62 = "%6u %32s:%-5d Assertion Failed: %s Must be initialized from null.";
          goto LABEL_133;
        }
        goto LABEL_134;
      }
    }
    v65 = (_QWORD *)operator new();
    v66 = v142;
    *v65 = &off_1E6984228;
    v65[1] = v66;
    *(_QWORD *)(*v24 + 144) = v65;
    *(_QWORD *)(v24[9] - 8) = v65;
    v12 = a7;
    v13 = a6;
    if (!v127)
    {
      v70 = v128;
      v17 = a10;
LABEL_102:
      std::unique_ptr<HALS_IOProcessor_ProcessingManifest>::reset[abi:ne180100](v70, (uint64_t)v24);
      if (*v70)
        return a1;
      mFormatID = a5->mFormatID;
      goto LABEL_104;
    }
    *(_QWORD *)&inDestinationFormat.mSampleRate = 0xA00000001;
    *(_QWORD *)&inDestinationFormat.mFormatID = 0;
    v67 = (AMCP::Log::Scope_Registry *)HALS_IOProcessor_ProcessingManifest::ProcessingChain::append((uint64_t)v26, &inDestinationFormat);
    if (!*(_QWORD *)(*v24 + 112))
    {
      v68 = operator new();
      v69 = v143;
      *(_QWORD *)v68 = &off_1E6984250;
      if (DWORD2(v135) == 1819304813)
      {
        v70 = v128;
        v17 = a10;
        v12 = a7;
        v13 = a6;
        v71 = (~HIDWORD(v135) & 9) == 0 && (_DWORD)v137 == 32;
      }
      else
      {
        v71 = 0;
        v70 = v128;
        v17 = a10;
        v12 = a7;
        v13 = a6;
      }
      if (v69)
        v83 = 0;
      else
        v83 = v71;
      *(_BYTE *)(v68 + 8) = v83;
      *(_QWORD *)(v68 + 12) = *((_QWORD *)&v136 + 1);
      __asm { FMOV            V0.2S, #1.0 }
      *(_QWORD *)(v68 + 20) = _D0;
      *(_QWORD *)(v68 + 36) = 0;
      *(_QWORD *)(v68 + 28) = 0;
      *(_DWORD *)(v68 + 44) = 0;
      *(_QWORD *)(*v24 + 112) = v68;
      *(_QWORD *)(v24[9] - 8) = v68;
      goto LABEL_102;
    }
    AMCP::Log::Scope_Registry::get(v67);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&inDestinationFormat, "com.apple.coreaudio", "AMCP");
    v54 = **(NSObject ***)&inDestinationFormat.mSampleRate;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&inDestinationFormat);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      v112 = pthread_self();
      v113 = pthread_mach_thread_np(v112);
      v114 = 0;
      v115 = 0;
      v116 = 47;
      do
      {
        v117 = &aLibraryCachesC_169[v114];
        if (v116 == 47)
          v115 = &aLibraryCachesC_169[v114];
        v116 = v117[1];
        if (!v117[1])
          break;
        _CF = v114++ >= 0xFFF;
      }
      while (!_CF);
      if (v115)
        v118 = v115 + 1;
      else
        v118 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOProcessor_ProcessingManifest.cpp";
      LODWORD(inDestinationFormat.mSampleRate) = 67109890;
      HIDWORD(inDestinationFormat.mSampleRate) = v113;
      LOWORD(inDestinationFormat.mFormatID) = 2080;
      *(_QWORD *)((char *)&inDestinationFormat.mFormatID + 2) = v118;
      HIWORD(inDestinationFormat.mBytesPerPacket) = 1024;
      inDestinationFormat.mFramesPerPacket = 132;
      LOWORD(inDestinationFormat.mBytesPerFrame) = 2080;
      *(_QWORD *)((char *)&inDestinationFormat.mBytesPerFrame + 2) = "nullptr == mOwner.mVolumeProcessor";
      v62 = "%6u %32s:%-5d Assertion Failed: %s Must be initialized from null.";
LABEL_133:
      _os_log_error_impl(&dword_1B57BA000, v54, OS_LOG_TYPE_ERROR, v62, (uint8_t *)&inDestinationFormat, 0x22u);
      goto LABEL_134;
    }
    goto LABEL_134;
  }
  mFormatID = a5->mFormatID;
LABEL_104:
  if (mFormatID == 1819304813)
  {
    if ((~a5->mFormatFlags & 9) != 0 || a5->mBitsPerChannel != 32 || (a12 & 1) != 0)
      goto LABEL_114;
    v85 = operator new();
    *(_QWORD *)v85 = &off_1E6984250;
    v86 = a5->mFormatID == 1819304813 && (~a5->mFormatFlags & 9) == 0 && a5->mBitsPerChannel == 32;
    *(_BYTE *)(v85 + 8) = v86;
    *(_QWORD *)(v85 + 12) = *(_QWORD *)&a5->mBytesPerFrame;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(v85 + 20) = _D0;
    *(_QWORD *)(v85 + 36) = 0;
    *(_QWORD *)(v85 + 28) = 0;
    *(_DWORD *)(v85 + 44) = 0;
    *(_QWORD *)(a1 + 112) = v85;
    *(_DWORD *)(a1 + 104) |= 1u;
    if (a5->mFormatID == 1819304813)
    {
LABEL_114:
      if (a5->mSampleRate != *(double *)a4 || v13)
      {
        v89 = (HALS_Resampler *)operator new();
        HALS_Resampler::HALS_Resampler(v89, a5, *(double *)a4, v13, v12, (Resampler2 *)a8);
        *(_QWORD *)(a1 + 128) = v89;
        *(_DWORD *)(a1 + 104) |= 2u;
        v88 = a5->mFormatID == 1819304813;
        if (!v17)
          return a1;
      }
      else
      {
        v88 = 1;
        if (!v17)
          return a1;
      }
      if (v88)
      {
        v82 = (HALS_DelayProcessor *)operator new();
        HALS_DelayProcessor::HALS_DelayProcessor(v82, a5, v17);
        goto LABEL_120;
      }
    }
  }
  return a1;
}

void sub_1B5AA48D0()
{
  uint64_t v0;
  uint64_t v1;

  MEMORY[0x1B5E50688](v1, 0x10A1C40076B55E3);
  std::default_delete<HALS_IOProcessor_ProcessingManifest>::operator()[abi:ne180100](v0);
}

uint64_t HALS_IOProcessor::NeedsLocalBuffer(HALS_IOProcessor *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;

  if (*((_BYTE *)this + 8))
  {
    v1 = *((_QWORD *)this + 19);
    v2 = *((_DWORD *)this + 26);
    if (v1)
    {
      v3 = *(_QWORD *)(v1 + 64);
      v4 = *(_QWORD *)(v1 + 72);
      while (1)
      {
        if (v3 == v4)
          return 0;
        if ((*(_DWORD *)v3 & ~v2) == 0)
          break;
        v3 += 16;
      }
      return *(_BYTE *)(v3 + 4) & 1;
    }
    else
    {
      return ((v2 - 2) & 0xFFFFFFF6) == 0;
    }
  }
  else
  {
    v5 = *((_DWORD *)this + 26);
    v6 = v5 > 0xF;
    v7 = (0xFCFCu >> v5) & 1;
    if (v6)
      return 0;
    else
      return v7;
  }
}

BOOL HALS_IOProcessor::NeedsIntermediate1Buffer(HALS_IOProcessor *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;

  if (*((_BYTE *)this + 8))
  {
    v2 = *((_QWORD *)this + 19);
    v3 = *((_DWORD *)this + 26);
    if (v2)
    {
      v4 = *(_QWORD *)(v2 + 64);
      v5 = *(_QWORD *)(v2 + 72);
      while (1)
      {
        if (v4 == v5)
          return 0;
        if ((*(_DWORD *)v4 & ~v3) == 0)
          break;
        v4 += 16;
      }
      return (*(_BYTE *)(v4 + 4) & 0x40) != 0;
    }
    else
    {
      result = 0;
      switch(v3)
      {
        case 2:
        case 3:
        case 10:
        case 11:
          goto LABEL_11;
        default:
          return result;
      }
    }
  }
  else
  {
    result = 0;
    switch(*((_DWORD *)this + 26))
    {
      case 2:
      case 3:
        goto LABEL_11;
      case 6:
      case 7:
      case 0xE:
      case 0xF:
        return 1;
      case 0xA:
      case 0xB:
        if (!*((_BYTE *)this + 9))
          return 1;
LABEL_11:
        v7 = *((_QWORD *)this + 16);
        if (!*(_QWORD *)(v7 + 104))
          return 0;
        result = *(_QWORD *)(v7 + 112) != 0;
        break;
      case 0xC:
      case 0xD:
        return *((unsigned __int8 *)this + 9) == 0;
      default:
        return result;
    }
  }
  return result;
}

uint64_t HALS_IOProcessor::NeedsIntermediate2Buffer(HALS_IOProcessor *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  if (*((_BYTE *)this + 8))
  {
    v2 = *((_QWORD *)this + 19);
    v3 = *((_DWORD *)this + 26);
    if (v2)
    {
      v4 = *(_QWORD *)(v2 + 64);
      v5 = *(_QWORD *)(v2 + 72);
      while (v4 != v5)
      {
        if ((*(_DWORD *)v4 & ~v3) == 0)
          return *(unsigned __int8 *)(v4 + 4) >> 7;
        v4 += 16;
      }
    }
    else if (v3 == 11)
    {
LABEL_11:
      v7 = *((_QWORD *)this + 16);
      if (*(_QWORD *)(v7 + 104))
        return *(_QWORD *)(v7 + 112) != 0;
    }
    return 0;
  }
  else
  {
    result = 0;
    switch(*((_DWORD *)this + 26))
    {
      case 6:
      case 7:
        goto LABEL_11;
      case 0xA:
      case 0xB:
        if (*((_BYTE *)this + 9))
          goto LABEL_11;
        goto LABEL_9;
      case 0xC:
      case 0xD:
        return *((unsigned __int8 *)this + 9) == 0;
      case 0xE:
      case 0xF:
LABEL_9:
        result = 1;
        break;
      default:
        return result;
    }
  }
  return result;
}

_QWORD *HALS_IOProcessorList::DestroyProcessor(_QWORD *this, HALS_IOProcessor *a2)
{
  _QWORD *v2;
  HALS_IOProcessor **v3;
  HALS_IOProcessor **v4;
  HALS_IOProcessor **v5;
  _QWORD *v6;

  v2 = this;
  v3 = (HALS_IOProcessor **)*this;
  v4 = (HALS_IOProcessor **)this[1];
  if ((HALS_IOProcessor **)*this != v4)
  {
    while (*v3 != a2)
    {
      if (++v3 == v4)
        return this;
    }
  }
  if (v3 != v4)
  {
    v5 = v3 + 1;
    if (v3 + 1 != v4)
    {
      do
      {
        v3 = v5;
        this = *(v5 - 1);
        *(v5 - 1) = *v5;
        *v5 = 0;
        if (this)
          this = (_QWORD *)(*(uint64_t (**)(_QWORD *, HALS_IOProcessor *))(*this + 8))(this, a2);
        v5 = v3 + 1;
      }
      while (v3 + 1 != v4);
      v4 = (HALS_IOProcessor **)v2[1];
    }
    while (v4 != v3)
    {
      v6 = *--v4;
      this = v6;
      *v4 = 0;
      if (v6)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    }
    v2[1] = v3;
  }
  return this;
}

uint64_t CATimeUtilities::GregorianDateFromAbsoluteTime(CATimeUtilities *this, CFAbsoluteTime a2)
{
  unsigned __int8 v3;

  if ((v3 & 1) == 0
  {
    CATimeUtilities::GregorianDateFromAbsoluteTime(double)::tz = (uint64_t)CFTimeZoneCopySystem();
  }
  return *(_OWORD *)&CFAbsoluteTimeGetGregorianDate(a2, (CFTimeZoneRef)CATimeUtilities::GregorianDateFromAbsoluteTime(double)::tz);
}

void sub_1B5AA4CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AMCP::Null::Driver::~Driver(AMCP::Null::Driver *this)
{
  AMCP::Null::Driver::~Driver(this);
  JUMPOUT(0x1B5E50688);
}

{
  std::__shared_weak_count *v2;
  void **v3;

  *(_QWORD *)this = &off_1E6984398;
  *((_QWORD *)this + 3) = &unk_1E69843C0;
  v3 = (void **)((char *)this + 120);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::mutex::~mutex((std::mutex *)((char *)this + 56));
  *((_QWORD *)this + 3) = &off_1E697FC58;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

std::__shared_mutex_base *AMCP::Null::Driver::shutdown(AMCP::Null::Driver *this)
{
  AMCP::Log::Scope_Registry *v2;
  int v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *v6;
  unint64_t v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject *v10;
  os_log_type_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _opaque_pthread_t *v26;
  mach_port_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint8_t buf[8];
  _BYTE v31[10];
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v28, "com.apple.coreaudio", "AMCP");
  v3 = *(_DWORD *)(v28 + 16);
  switch(v3)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v12 = *(std::__shared_weak_count **)v31;
      v13 = **(NSObject ***)buf;
      if (*(_QWORD *)v31)
      {
        v14 = (unint64_t *)(*(_QWORD *)v31 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        v16 = pthread_self();
        v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v17;
        *(_WORD *)v31 = 2080;
        *(_QWORD *)&v31[2] = "Null_Driver_Imp.cpp";
        v32 = 1024;
        v33 = 41;
        v10 = v13;
        v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v18 = *(std::__shared_weak_count **)v31;
      v19 = **(NSObject ***)buf;
      if (*(_QWORD *)v31)
      {
        v20 = (unint64_t *)(*(_QWORD *)v31 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        v26 = pthread_self();
        v27 = pthread_mach_thread_np(v26);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v27;
        *(_WORD *)v31 = 2080;
        *(_QWORD *)&v31[2] = "Null_Driver_Imp.cpp";
        v32 = 1024;
        v33 = 41;
        _os_log_debug_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tearing down Null driver", buf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v4 = *(std::__shared_weak_count **)v31;
      v5 = **(NSObject ***)buf;
      if (*(_QWORD *)v31)
      {
        v6 = (unint64_t *)(*(_QWORD *)v31 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v9;
        *(_WORD *)v31 = 2080;
        *(_QWORD *)&v31[2] = "Null_Driver_Imp.cpp";
        v32 = 1024;
        v33 = 41;
        v10 = v5;
        v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v10, v11, "%6u %32s:%-5d Tearing down Null driver", buf, 0x18u);
      }
      break;
  }
  v22 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*((_QWORD *)this + 4) + 16), *((_DWORD *)this + 12));
}

void sub_1B5AA5050(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void `non-virtual thunk to'AMCP::Null::Driver::~Driver(AMCP::Null::Driver *this)
{
  AMCP::Null::Driver::~Driver((AMCP::Null::Driver *)((char *)this - 24));
}

{
  AMCP::Null::Driver::~Driver((AMCP::Null::Driver *)((char *)this - 24));
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__function::__value_func<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

void std::__function::__func<AMCP::Null::Driver::build_core(void)::$_1,std::allocator<AMCP::Null::Driver::build_core(void)::$_1>,void ()(std::vector<unsigned int> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Null::Driver::build_core(void)::$_1,std::allocator<AMCP::Null::Driver::build_core(void)::$_1>,void ()(std::vector<unsigned int> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6984518;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Null::Driver::build_core(void)::$_1,std::allocator<AMCP::Null::Driver::build_core(void)::$_1>,void ()(std::vector<unsigned int> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6984518;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::Null::Driver::build_core(void)::$_1,std::allocator<AMCP::Null::Driver::build_core(void)::$_1>,void ()(std::vector<unsigned int> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  void *v6;
  void **p_lpsrc;
  char *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *lpsrc;
  std::__shared_weak_count *v16;
  __int128 v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 32);
  v5 = *(_DWORD *)(v3 + 48);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&lpsrc, *(_QWORD *)(v3 + 8), *(std::__shared_weak_count **)(v3 + 16));
  if (lpsrc
  {
    *(_QWORD *)&v17 = v6;
    *((_QWORD *)&v17 + 1) = v16;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = (void **)&v17;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v18, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v22 = 0;
  v8 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v8 + 8) = v17;
  *(_QWORD *)v8 = &off_1E6984618;
  v17 = 0uLL;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 3) = 0;
  v9 = v18;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)v8 + 3, v18, (uint64_t)v19, (v19 - v18) >> 2);
  v22 = v8;
  AMCP::Core::Conductor::enqueue_config_change(v4, v5, v5, 17, (uint64_t)v21);
  v10 = v22;
  if (v22 == v21)
  {
    v11 = 4;
    v10 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_10;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_10:
  if (v9)
  {
    v19 = v9;
    operator delete(v9);
  }
  v12 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1B5AA54FC(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  uint64_t v3;

  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v3);
    operator delete(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Null::Driver::build_core(void)::$_1,std::allocator<AMCP::Null::Driver::build_core(void)::$_1>,void ()(std::vector<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Driver10build_coreEvE3$_1"))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<AMCP::Null::Driver::build_core(void)::$_1,std::allocator<AMCP::Null::Driver::build_core(void)::$_1>,void ()(std::vector<unsigned int> const&)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E6984618;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E6984618;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1E6984618;
  std::__compressed_pair_elem<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_1B5AA564C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6984618;
  return std::__compressed_pair_elem<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0 const&,0ul>(a2 + 1, a1 + 8);
}

uint64_t std::__function::__func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  std::mutex *v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (std::mutex *)(a1[1] + 56);
  std::mutex::lock(v2);
  v3 = (_DWORD *)a1[3];
  v4 = (_DWORD *)a1[4];
  while (v3 != v4)
  {
    v5 = a1[1];
    v6 = *(__int128 **)(v5 + 120);
    v7 = *(_QWORD *)(v5 + 128);
    if (v6 != (__int128 *)v7)
    {
      while (*(_DWORD *)(*(_QWORD *)v6 + 88) != *v3)
      {
        if (++v6 == (__int128 *)v7)
          goto LABEL_14;
      }
    }
    if (v6 != (__int128 *)v7)
    {
      if (v6 + 1 != (__int128 *)v7)
      {
        do
          v8 = (uint64_t)v6++;
        while (std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v8, v6) + 32 != v7);
        v7 = *(_QWORD *)(v5 + 128);
      }
      while ((__int128 *)v7 != v6)
      {
        v7 -= 16;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v7);
      }
      *(_QWORD *)(v5 + 128) = v6;
    }
LABEL_14:
    ++v3;
  }
  std::mutex::unlock(v2);
}

uint64_t std::__function::__func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Driver15destroy_objectsERKNSt3__16vectorIjNS2_9allocatorIjEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__alloc_func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1);
}

_QWORD *std::__compressed_pair_elem<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0 const&,0ul>(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 2, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  return a1;
}

void sub_1B5AA5860(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Null::Driver::build_core(void)::$_0,std::allocator<AMCP::Null::Driver::build_core(void)::$_0>,std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Null::Driver::build_core(void)::$_0,std::allocator<AMCP::Null::Driver::build_core(void)::$_0>,std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6984488;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Null::Driver::build_core(void)::$_0,std::allocator<AMCP::Null::Driver::build_core(void)::$_0>,std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6984488;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::Null::Driver::build_core(void)::$_0,std::allocator<AMCP::Null::Driver::build_core(void)::$_0>,std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13[4];
  __int128 v14;
  _QWORD *v15;
  uint64_t v16[2];
  int v17;
  int v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x20uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E69A0170;
  *((_BYTE *)v6 + 24) = 0;
  v16[0] = (uint64_t)(v6 + 3);
  v16[1] = (uint64_t)v6;
  v17 = 0;
  v18 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 32);
  v8 = *(_DWORD *)(v5 + 48);
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)v13, v16);
  *(_QWORD *)&v14 = v5;
  *((_QWORD *)&v14 + 1) = a2;
  v15 = a3;
  v20 = 0;
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &off_1E6984598;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v9 + 8), v13);
  *(_OWORD *)(v9 + 40) = v14;
  *((_QWORD *)v9 + 7) = v15;
  v20 = v9;
  AMCP::Core::Conductor::enqueue_config_change(v7, v8, v8, 17, (uint64_t)v19);
  v10 = v20;
  if (v20 == v19)
  {
    v11 = 4;
    v10 = v19;
    goto LABEL_5;
  }
  if (v20)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v13);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v16);
}

void sub_1B5AA5A30(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {
    operator delete(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Null::Driver::build_core(void)::$_0,std::allocator<AMCP::Null::Driver::build_core(void)::$_0>,std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Driver10build_coreEvE3$_0"))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<AMCP::Null::Driver::build_core(void)::$_0,std::allocator<AMCP::Null::Driver::build_core(void)::$_0>,std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0,std::allocator<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6984598;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0,std::allocator<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6984598;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0,std::allocator<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t *v2;
  char *v3;

  v2 = (uint64_t *)(a1 + 8);
  v3 = (char *)operator new(0x40uLL);
  *(_QWORD *)v3 = &off_1E6984598;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v3 + 7) = *(_QWORD *)(a1 + 56);
  return v3;
}

void sub_1B5AA5B6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0,std::allocator<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6984598;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  result = *(__n128 *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0,std::allocator<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

void std::__function::__func<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0,std::allocator<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0,std::allocator<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v2;
  _BOOL8 is_valid;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int v7;
  CFArrayRef *v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  CFArrayRef *v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  CFArrayRef *v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  char *i;
  uint64_t v30;
  int v31;
  unint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  unint64_t v43;
  _OWORD *v44;
  _OWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  _QWORD *v55;
  char *v56;
  __int128 v57;
  int64x2_t v58;
  uint64_t v59;
  char *v60;
  char *j;
  uint64_t v62;
  int v63;
  unint64_t v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _DWORD *v73;
  int v74;
  unint64_t v75;
  _OWORD *v76;
  _OWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  _QWORD *v86;
  _QWORD *v87;
  char *v88;
  __int128 v89;
  int64x2_t v90;
  uint64_t v91;
  char *v92;
  char *k;
  uint64_t v94;
  int v95;
  unint64_t v96;
  _DWORD *v97;
  _DWORD *v98;
  _DWORD *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  int v106;
  unint64_t v107;
  _OWORD *v108;
  _OWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  _QWORD *v118;
  _QWORD *v119;
  char *v120;
  __int128 v121;
  int64x2_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  NSObject *v125;
  unint64_t *v126;
  unint64_t v127;
  _opaque_pthread_t *v128;
  mach_port_t v129;
  uint64_t v130[2];
  uint64_t v131[2];
  char *v132;
  char *v133;
  uint64_t v134[2];
  uint64_t v135[2];
  char *v136;
  char *v137;
  uint64_t v138[2];
  uint64_t v139[2];
  char *v140;
  char *v141;
  uint8_t buf[8];
  int64x2_t v143;
  __int128 v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v2 = a1[5];
  is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 1));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v124 = (std::__shared_weak_count *)v143.i64[0];
    v125 = **(NSObject ***)buf;
    if (v143.i64[0])
    {
      v126 = (unint64_t *)(v143.i64[0] + 8);
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
    if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
    {
      v128 = pthread_self();
      v129 = pthread_mach_thread_np(v128);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v129;
      v143.i16[0] = 2080;
      *(uint64_t *)((char *)v143.i64 + 2) = (uint64_t)"Null_Driver_Imp.cpp";
      v143.i16[5] = 1024;
      v143.i32[3] = 113;
      LOWORD(v144) = 2080;
      *(_QWORD *)((char *)&v144 + 2) = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1B57BA000, v125, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", buf, 0x22u);
    }
    abort();
  }
  v4 = *(std::__shared_weak_count **)(v2 + 40);
  v139[0] = *(_QWORD *)(v2 + 32);
  v139[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(_DWORD *)(v2 + 48);
  v138[0] = 0;
  v138[1] = 0;
  v8 = (CFArrayRef *)a1[6];
  v9 = operator new(8uLL);
  *v9 = 0x161626F78;
  v143.i64[0] = (uint64_t)(v9 + 1);
  v143.i64[1] = (uint64_t)(v9 + 1);
  *(_QWORD *)buf = v9;
  AMCP::Null::make_object_list(&v140, v139, v7, v138, v8, (unsigned int **)buf);
  operator delete(v9);
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v12 = *(std::__shared_weak_count **)(v2 + 40);
  v135[0] = *(_QWORD *)(v2 + 32);
  v135[1] = (uint64_t)v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(_DWORD *)(v2 + 48);
  v134[0] = 0;
  v134[1] = 0;
  v16 = (CFArrayRef *)a1[6];
  v17 = operator new(8uLL);
  *v17 = 1633905771;
  v143.i64[0] = (uint64_t)(v17 + 1);
  v143.i64[1] = (uint64_t)(v17 + 1);
  *(_QWORD *)buf = v17;
  AMCP::Null::make_object_list(&v136, v135, v15, v134, v16, (unsigned int **)buf);
  operator delete(v17);
  if (v12)
  {
    v18 = (unint64_t *)&v12->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v20 = *(std::__shared_weak_count **)(v2 + 40);
  v131[0] = *(_QWORD *)(v2 + 32);
  v131[1] = (uint64_t)v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(_DWORD *)(v2 + 48);
  v130[0] = 0;
  v130[1] = 0;
  v24 = (CFArrayRef *)a1[6];
  v25 = operator new(8uLL);
  *v25 = 0x161646576;
  v143.i64[0] = (uint64_t)(v25 + 1);
  v143.i64[1] = (uint64_t)(v25 + 1);
  *(_QWORD *)buf = v25;
  AMCP::Null::make_object_list(&v132, v131, v23, v130, v24, (unsigned int **)buf);
  operator delete(v25);
  if (v20)
  {
    v26 = (unint64_t *)&v20->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v28 = v140;
  for (i = v141; v28 != i; v28 += 16)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)v28 + 16))(*(_QWORD *)v28);
    v30 = a1[7];
    v31 = *(_DWORD *)(*(_QWORD *)v28 + 88);
    v33 = *(_DWORD **)(v30 + 8);
    v32 = *(_QWORD *)(v30 + 16);
    if ((unint64_t)v33 >= v32)
    {
      v35 = *(_DWORD **)v30;
      v36 = ((uint64_t)v33 - *(_QWORD *)v30) >> 2;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 62)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v38 = v32 - (_QWORD)v35;
      if (v38 >> 1 > v37)
        v37 = v38 >> 1;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
        v39 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
      {
        v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v39);
        v35 = *(_DWORD **)v30;
        v33 = *(_DWORD **)(v30 + 8);
      }
      else
      {
        v40 = 0;
      }
      v41 = (_DWORD *)(v39 + 4 * v36);
      *v41 = v31;
      v34 = v41 + 1;
      while (v33 != v35)
      {
        v42 = *--v33;
        *--v41 = v42;
      }
      *(_QWORD *)v30 = v41;
      *(_QWORD *)(v30 + 8) = v34;
      *(_QWORD *)(v30 + 16) = v39 + 4 * v40;
      if (v35)
        operator delete(v35);
    }
    else
    {
      *v33 = v31;
      v34 = v33 + 1;
    }
    *(_QWORD *)(v30 + 8) = v34;
    v44 = *(_OWORD **)(v2 + 128);
    v43 = *(_QWORD *)(v2 + 136);
    if ((unint64_t)v44 >= v43)
    {
      v46 = *(_QWORD *)(v2 + 120);
      v47 = ((uint64_t)v44 - v46) >> 4;
      if ((unint64_t)(v47 + 1) >> 60)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v48 = v43 - v46;
      v49 = v48 >> 3;
      if (v48 >> 3 <= (unint64_t)(v47 + 1))
        v49 = v47 + 1;
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0)
        v50 = 0xFFFFFFFFFFFFFFFLL;
      else
        v50 = v49;
      *((_QWORD *)&v144 + 1) = v2 + 136;
      v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v50);
      v53 = &v51[16 * v47];
      *(_OWORD *)v53 = *(_OWORD *)v28;
      *(_QWORD *)v28 = 0;
      *((_QWORD *)v28 + 1) = 0;
      v55 = *(_QWORD **)(v2 + 120);
      v54 = *(_QWORD **)(v2 + 128);
      if (v54 == v55)
      {
        v58 = vdupq_n_s64((unint64_t)v54);
        v56 = &v51[16 * v47];
      }
      else
      {
        v56 = &v51[16 * v47];
        do
        {
          v57 = *((_OWORD *)v54 - 1);
          v54 -= 2;
          *((_OWORD *)v56 - 1) = v57;
          v56 -= 16;
          *v54 = 0;
          v54[1] = 0;
        }
        while (v54 != v55);
        v58 = *(int64x2_t *)(v2 + 120);
      }
      v45 = v53 + 16;
      *(_QWORD *)(v2 + 120) = v56;
      *(_QWORD *)(v2 + 128) = v53 + 16;
      v143 = v58;
      v59 = *(_QWORD *)(v2 + 136);
      *(_QWORD *)(v2 + 136) = &v51[16 * v52];
      *(_QWORD *)&v144 = v59;
      *(_QWORD *)buf = v58.i64[0];
      std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      *v44 = *(_OWORD *)v28;
      v45 = v44 + 1;
      *(_QWORD *)v28 = 0;
      *((_QWORD *)v28 + 1) = 0;
    }
    *(_QWORD *)(v2 + 128) = v45;
  }
  v60 = v136;
  for (j = v137; v60 != j; v60 += 16)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)v60 + 16))(*(_QWORD *)v60);
    v62 = a1[7];
    v63 = *(_DWORD *)(*(_QWORD *)v60 + 88);
    v65 = *(_DWORD **)(v62 + 8);
    v64 = *(_QWORD *)(v62 + 16);
    if ((unint64_t)v65 >= v64)
    {
      v67 = *(_DWORD **)v62;
      v68 = ((uint64_t)v65 - *(_QWORD *)v62) >> 2;
      v69 = v68 + 1;
      if ((unint64_t)(v68 + 1) >> 62)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v70 = v64 - (_QWORD)v67;
      if (v70 >> 1 > v69)
        v69 = v70 >> 1;
      if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
        v71 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v71 = v69;
      if (v71)
      {
        v71 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v71);
        v67 = *(_DWORD **)v62;
        v65 = *(_DWORD **)(v62 + 8);
      }
      else
      {
        v72 = 0;
      }
      v73 = (_DWORD *)(v71 + 4 * v68);
      *v73 = v63;
      v66 = v73 + 1;
      while (v65 != v67)
      {
        v74 = *--v65;
        *--v73 = v74;
      }
      *(_QWORD *)v62 = v73;
      *(_QWORD *)(v62 + 8) = v66;
      *(_QWORD *)(v62 + 16) = v71 + 4 * v72;
      if (v67)
        operator delete(v67);
    }
    else
    {
      *v65 = v63;
      v66 = v65 + 1;
    }
    *(_QWORD *)(v62 + 8) = v66;
    v76 = *(_OWORD **)(v2 + 128);
    v75 = *(_QWORD *)(v2 + 136);
    if ((unint64_t)v76 >= v75)
    {
      v78 = *(_QWORD *)(v2 + 120);
      v79 = ((uint64_t)v76 - v78) >> 4;
      if ((unint64_t)(v79 + 1) >> 60)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v80 = v75 - v78;
      v81 = v80 >> 3;
      if (v80 >> 3 <= (unint64_t)(v79 + 1))
        v81 = v79 + 1;
      if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0)
        v82 = 0xFFFFFFFFFFFFFFFLL;
      else
        v82 = v81;
      *((_QWORD *)&v144 + 1) = v2 + 136;
      v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v82);
      v85 = &v83[16 * v79];
      *(_OWORD *)v85 = *(_OWORD *)v60;
      *(_QWORD *)v60 = 0;
      *((_QWORD *)v60 + 1) = 0;
      v87 = *(_QWORD **)(v2 + 120);
      v86 = *(_QWORD **)(v2 + 128);
      if (v86 == v87)
      {
        v90 = vdupq_n_s64((unint64_t)v86);
        v88 = &v83[16 * v79];
      }
      else
      {
        v88 = &v83[16 * v79];
        do
        {
          v89 = *((_OWORD *)v86 - 1);
          v86 -= 2;
          *((_OWORD *)v88 - 1) = v89;
          v88 -= 16;
          *v86 = 0;
          v86[1] = 0;
        }
        while (v86 != v87);
        v90 = *(int64x2_t *)(v2 + 120);
      }
      v77 = v85 + 16;
      *(_QWORD *)(v2 + 120) = v88;
      *(_QWORD *)(v2 + 128) = v85 + 16;
      v143 = v90;
      v91 = *(_QWORD *)(v2 + 136);
      *(_QWORD *)(v2 + 136) = &v83[16 * v84];
      *(_QWORD *)&v144 = v91;
      *(_QWORD *)buf = v90.i64[0];
      std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      *v76 = *(_OWORD *)v60;
      v77 = v76 + 1;
      *(_QWORD *)v60 = 0;
      *((_QWORD *)v60 + 1) = 0;
    }
    *(_QWORD *)(v2 + 128) = v77;
  }
  v92 = v132;
  for (k = v133; v92 != k; v92 += 16)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)v92 + 16))(*(_QWORD *)v92);
    v94 = a1[7];
    v95 = *(_DWORD *)(*(_QWORD *)v92 + 88);
    v97 = *(_DWORD **)(v94 + 8);
    v96 = *(_QWORD *)(v94 + 16);
    if ((unint64_t)v97 >= v96)
    {
      v99 = *(_DWORD **)v94;
      v100 = ((uint64_t)v97 - *(_QWORD *)v94) >> 2;
      v101 = v100 + 1;
      if ((unint64_t)(v100 + 1) >> 62)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v102 = v96 - (_QWORD)v99;
      if (v102 >> 1 > v101)
        v101 = v102 >> 1;
      if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL)
        v103 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v103 = v101;
      if (v103)
      {
        v103 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v103);
        v99 = *(_DWORD **)v94;
        v97 = *(_DWORD **)(v94 + 8);
      }
      else
      {
        v104 = 0;
      }
      v105 = (_DWORD *)(v103 + 4 * v100);
      *v105 = v95;
      v98 = v105 + 1;
      while (v97 != v99)
      {
        v106 = *--v97;
        *--v105 = v106;
      }
      *(_QWORD *)v94 = v105;
      *(_QWORD *)(v94 + 8) = v98;
      *(_QWORD *)(v94 + 16) = v103 + 4 * v104;
      if (v99)
        operator delete(v99);
    }
    else
    {
      *v97 = v95;
      v98 = v97 + 1;
    }
    *(_QWORD *)(v94 + 8) = v98;
    v108 = *(_OWORD **)(v2 + 128);
    v107 = *(_QWORD *)(v2 + 136);
    if ((unint64_t)v108 >= v107)
    {
      v110 = *(_QWORD *)(v2 + 120);
      v111 = ((uint64_t)v108 - v110) >> 4;
      if ((unint64_t)(v111 + 1) >> 60)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v112 = v107 - v110;
      v113 = v112 >> 3;
      if (v112 >> 3 <= (unint64_t)(v111 + 1))
        v113 = v111 + 1;
      if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF0)
        v114 = 0xFFFFFFFFFFFFFFFLL;
      else
        v114 = v113;
      *((_QWORD *)&v144 + 1) = v2 + 136;
      v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v114);
      v117 = &v115[16 * v111];
      *(_OWORD *)v117 = *(_OWORD *)v92;
      *(_QWORD *)v92 = 0;
      *((_QWORD *)v92 + 1) = 0;
      v119 = *(_QWORD **)(v2 + 120);
      v118 = *(_QWORD **)(v2 + 128);
      if (v118 == v119)
      {
        v122 = vdupq_n_s64((unint64_t)v118);
        v120 = &v115[16 * v111];
      }
      else
      {
        v120 = &v115[16 * v111];
        do
        {
          v121 = *((_OWORD *)v118 - 1);
          v118 -= 2;
          *((_OWORD *)v120 - 1) = v121;
          v120 -= 16;
          *v118 = 0;
          v118[1] = 0;
        }
        while (v118 != v119);
        v122 = *(int64x2_t *)(v2 + 120);
      }
      v109 = v117 + 16;
      *(_QWORD *)(v2 + 120) = v120;
      *(_QWORD *)(v2 + 128) = v117 + 16;
      v143 = v122;
      v123 = *(_QWORD *)(v2 + 136);
      *(_QWORD *)(v2 + 136) = &v115[16 * v116];
      *(_QWORD *)&v144 = v123;
      *(_QWORD *)buf = v122.i64[0];
      std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      *v108 = *(_OWORD *)v92;
      v109 = v108 + 1;
      *(_QWORD *)v92 = 0;
      *((_QWORD *)v92 + 1) = 0;
    }
    *(_QWORD *)(v2 + 128) = v109;
  }
  *(_QWORD *)buf = &v132;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v136;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v140;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1B5AA64C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void ***a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  a13 = &a20;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a20 = (void **)&a27;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0,std::allocator<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Driver14create_objectsERKN10applesauce2CF8ArrayRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0,std::allocator<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t AMCP::Graph::Timebase::is_valid(AMCP::Graph::Timebase *this)
{
  return 1;
}

void AMCP::DAL::AUParameter_Data_Handler::~AUParameter_Data_Handler(AMCP::DAL::AUParameter_Data_Handler *this)
{
  std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::~__hash_table((uint64_t)this + 56);
}

{
  std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::~__hash_table((uint64_t)this + 56);
  JUMPOUT(0x1B5E50688);
}

BOOL AMCP::DAL::AUParameter_Data_Handler::dal_operation_is_supported(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  int v3;
  unsigned __int16 *v4;
  int v5;
  int v6;

  v2 = *((unsigned __int8 *)a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)a2 + 1);
  if (v2 != 3)
    return 0;
  if (v3 >= 0)
    v4 = a2;
  else
    v4 = *(unsigned __int16 **)a2;
  v5 = *v4;
  v6 = *((unsigned __int8 *)v4 + 2);
  return v5 == 26989 && v6 == 120;
}

void AMCP::DAL::AUParameter_Data_Handler::adopt(AMCP::Log::Scope_Registry *a1)
{
  std::__shared_weak_count *v1;
  NSObject *v2;
  unint64_t *v3;
  unint64_t v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  NSObject **v7;
  _BYTE v8[10];
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v7, "com.apple.coreaudio", "AMCP");
  v1 = *(std::__shared_weak_count **)v8;
  v2 = *v7;
  if (*(_QWORD *)v8)
  {
    v3 = (unint64_t *)(*(_QWORD *)v8 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v5 = pthread_self();
    v6 = pthread_mach_thread_np(v5);
    LODWORD(v7) = 67109890;
    HIDWORD(v7) = v6;
    *(_WORD *)v8 = 2080;
    *(_QWORD *)&v8[2] = "AUParameter_Data_Handler.cpp";
    v9 = 1024;
    v10 = 95;
    v11 = 2080;
    v12 = "false";
    _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s AUParameter_Data_Handler::adopt unsupported", (uint8_t *)&v7, 0x22u);
  }
  abort();
}

uint64_t AMCP::DAL::AUParameter_Data_Handler::reuse_container(uint64_t this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (*(_QWORD *)(this + 96))
  {
    v1 = (_QWORD *)this;
    v2 = (_QWORD *)(this + 56);
    this = std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::__deallocate_node(this + 56, *(_QWORD **)(this + 80));
    v1[10] = 0;
    v3 = v1[8];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v2 + 8 * i) = 0;
    }
    v1[12] = 0;
  }
  return this;
}

uint64_t AMCP::DAL::AUParameter_Data_Handler::get_allocation_size(AMCP::DAL::AUParameter_Data_Handler *this)
{
  return *((_QWORD *)this + 12);
}

double AMCP::DAL::AUParameter_Data_Handler::get_length_in_frames(AMCP::DAL::AUParameter_Data_Handler *this)
{
  return *((double *)this + 14);
}

void AMCP::DAL::AUParameter_Data_Handler::get_audio_buffer_list(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[4] = 0;
}

{
  *a1 = 0;
  a1[4] = 0;
}

uint64_t AMCP::DAL::AUParameter_Data_Handler::copy(uint64_t a1, double *a2, uint64_t *a3, double a4)
{
  uint64_t v7;
  double v8;
  double v9;
  _QWORD *v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v17;
  double v18;
  double v20;

  v7 = *a3;
  AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::AUParameter_Data_Handler>(*a3);
  v8 = *a2;
  v9 = a2[1];
  v10 = *(_QWORD **)(v7 + 80);
  if (v10)
  {
    v11 = round(v8 - a4);
    v12 = round(v9 - a4);
    do
    {
      v14 = v10[4];
      v13 = v10[5];
      while (v14 != v13)
      {
        v15 = round(*(double *)v14);
        if (v15 >= v11 && v15 < v12)
        {
          if (v14 != v13)
          {
            v17 = v14 + 16;
            if (v14 + 16 != v13)
            {
              do
              {
                v18 = round(*(double *)v17);
                if (v18 < v11 || v18 >= v12)
                {
                  v20 = *(double *)v17;
                  *(_DWORD *)(v14 + 8) = *(_DWORD *)(v17 + 8);
                  *(double *)v14 = v20;
                  v14 += 16;
                }
                v17 += 16;
              }
              while (v17 != v13);
              v13 = v10[5];
            }
            if (v14 != v13)
              v10[5] = v14;
          }
          break;
        }
        v14 += 16;
      }
      v10 = (_QWORD *)*v10;
    }
    while (v10);
    v8 = *a2;
    v9 = a2[1];
  }
  return AMCP::DAL::merge_values(*(_QWORD *)(a1 + 80), (uint64_t *)(v7 + 56), v8, v9, a4);
}

uint64_t AMCP::DAL::AUParameter_Data_Handler::mix(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t *v9;

  v9 = (uint64_t *)(AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::AUParameter_Data_Handler>(*a2) + 56);
  return AMCP::DAL::merge_values(*(_QWORD *)(a1 + 80), v9, a3, a4, a5);
}

uint64_t *AMCP::DAL::AUParameter_Data_Handler::get_ring_buffer_time_translator(AMCP::DAL::AUParameter_Data_Handler *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    AMCP::DAL::AUParameter_Data_Handler::get_ring_buffer_time_translator(void)const::s_translator = (uint64_t)&off_1E6984758;
  }
  return &AMCP::DAL::AUParameter_Data_Handler::get_ring_buffer_time_translator(void)const::s_translator;
}

void AMCP::DAL::AUParameter_Data_Handler::dal_operation_context_create(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double AMCP::DAL::AUParameter_Data_Handler::dal_operation_apply()
{
  return 0.0;
}

uint64_t AMCP::DAL::AUParameter_Data_Handler::dal_operation_get_property()
{
  return 0;
}

void AMCP::DAL::AUParameter_Data_Handler::get_data(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void AMCP::DAL::AUParameter_Buffer_Time_Translator::~AUParameter_Buffer_Time_Translator(AMCP::DAL::AUParameter_Buffer_Time_Translator *this)
{
  JUMPOUT(0x1B5E50688);
}

void AMCP::DAL::AUParameter_Buffer_Time_Translator::translate_range(const AMCP::DAL::DAL_Time_Range *a1@<X1>, const AMCP::DAL::DAL_Time_Range *a2@<X2>, uint64_t *a3@<X8>)
{
  double sample_time;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  caulk::rt_safe_memory_resource *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  __int128 v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  __int128 v70;
  _BYTE v71[32];
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  caulk::rt_safe_memory_resource *v75;
  double v76;
  char *v77;
  __int128 v78;

  sample_time = AMCP::DAL::DAL_Time::get_sample_time(a1);
  v8 = *((_QWORD *)a1 + 4);
  *(_QWORD *)&v70 = *((_QWORD *)a1 + 3);
  *((_QWORD *)&v70 + 1) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  LODWORD(v75) = 2;
  v76 = sample_time;
  v77 = 0;
  v78 = v70;
  v70 = 0uLL;
  v62 = *(_OWORD *)a2;
  v11 = *((_QWORD *)a2 + 3);
  *(_QWORD *)&v63 = *((_QWORD *)a2 + 2);
  *((_QWORD *)&v63 + 1) = v11;
  v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 4);
  v64 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v65 = *(_OWORD *)((char *)a2 + 40);
  v15 = *((_QWORD *)a2 + 8);
  *(_QWORD *)&v66 = *((_QWORD *)a2 + 7);
  *((_QWORD *)&v66 + 1) = v15;
  v16 = (std::__shared_weak_count *)*((_QWORD *)a2 + 9);
  v67 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  AMCP::DAL::DAL_Time::operator-=((AMCP::DAL::DAL_Time *)&v62, (AMCP::DAL::DAL_Time_Delta *)&v75);
  AMCP::DAL::DAL_Time::operator-=((AMCP::DAL::DAL_Time *)&v65, (AMCP::DAL::DAL_Time_Delta *)&v75);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)v71, &v62);
  v19 = v67;
  if (v67)
  {
    v20 = (unint64_t *)&v67->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v64;
  if (v64)
  {
    v23 = (unint64_t *)&v64->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v71);
  v32 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v73);
  *(double *)&v62 = v31;
  *((double *)&v62 + 1) = v32;
  v63 = *(_OWORD *)a2;
  v33 = *((_QWORD *)a2 + 3);
  v64 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  *(_QWORD *)&v65 = v33;
  v34 = *((_QWORD *)a2 + 4);
  *((_QWORD *)&v65 + 1) = v34;
  if (v34)
  {
    v35 = (unint64_t *)(v34 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v66 = *(_OWORD *)((char *)a2 + 40);
  v37 = (std::__shared_weak_count *)*((_QWORD *)a2 + 7);
  v39 = *((_QWORD *)a2 + 8);
  v38 = (std::__shared_weak_count *)*((_QWORD *)a2 + 9);
  v67 = v37;
  v68 = v39;
  v69 = v38;
  if (v38)
  {
    v40 = (unint64_t *)&v38->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *((_QWORD *)&v78 + 1) = a3 + 2;
  v42 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>((caulk::rt_safe_memory_resource *)1);
  v75 = v42;
  v76 = *(double *)&v42;
  *(_QWORD *)&v78 = (char *)v42 + 96 * v43;
  *(_OWORD *)v42 = v62;
  v44 = v64;
  *((_OWORD *)v42 + 1) = v63;
  *((_QWORD *)v42 + 4) = v44;
  *((_QWORD *)v42 + 5) = v33;
  *((_QWORD *)v42 + 6) = v34;
  if (v34)
  {
    v45 = (unint64_t *)(v34 + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v47 = v67;
  *(_OWORD *)((char *)v42 + 56) = v66;
  *((_QWORD *)v42 + 9) = v47;
  *((_QWORD *)v42 + 10) = v39;
  *((_QWORD *)v42 + 11) = v38;
  if (v38)
  {
    v48 = (unint64_t *)&v38->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
    v77 = (char *)v42 + 96;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__swap_out_circular_buffer(a3, &v75);
    v50 = a3[1];
    std::__split_buffer<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range> &>::~__split_buffer((uint64_t)&v75);
    a3[1] = v50;
    do
      v51 = __ldaxr(v48);
    while (__stlxr(v51 - 1, v48));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  else
  {
    v77 = (char *)v42 + 96;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__swap_out_circular_buffer(a3, &v75);
    v52 = a3[1];
    std::__split_buffer<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range> &>::~__split_buffer((uint64_t)&v75);
    a3[1] = v52;
  }
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v74;
  if (v74)
  {
    v57 = (unint64_t *)&v74->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = v72;
  if (v72)
  {
    v60 = (unint64_t *)&v72->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
}

void sub_1B5AA6EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  *(_QWORD *)(v34 - 144) = v31;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)(v34 - 144));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v33);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v32);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::AUParameter_Data_Handler>(uint64_t result)
{
  NSObject *v1;
  _opaque_pthread_t *v2;
  mach_port_t v3;
  void *exception;
  __int128 v5;
  uint64_t v6;
  uint64_t (**v7)();
  __int128 v8;
  uint64_t v9;
  std::string v10;
  std::logic_error v11;
  std::logic_error v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint8_t buf[8];
  __int16 v20;
  char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  _BYTE v25[14];
  const char *v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!result)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v1 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      v2 = pthread_self();
      v3 = pthread_mach_thread_np(v2);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v3;
      v20 = 2080;
      v21 = "Container.h";
      v22 = 1024;
      v23 = 121;
      v24 = 2080;
      *(_QWORD *)v25 = "not ((m_impl.get()) != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v1, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to call Container::GetContainerData on a null Container", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v18);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to call Container::GetContainerData on a null Container", (uint64_t)&v10);
    std::logic_error::logic_error(&v11, &v10);
    v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v12, &v11);
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = -1;
    v12.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v13 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v12);
    *(_QWORD *)&v25[6] = "T *AMCP::DAL::Container::get_container_data_ptr() const [T = AMCP::DAL::AUParameter_Data_Handler]";
    v26 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Container.h";
    v27 = 121;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v5);
    v8 = v5;
    v9 = v6;
    v5 = 0uLL;
    v6 = 0;
    v7 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v7);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return result;
}

void sub_1B5AA7134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::merge_values(uint64_t result, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double *v12;
  double *v13;
  caulk::rt_safe_memory_resource *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int64x2_t v34;
  unint64_t v35;
  uint64_t v36;
  double v37;
  unint64_t v38;
  uint64_t v39;
  int64x2_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint8x8_t v45;
  uint64_t **v46;
  uint64_t *i;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  float v52;
  float v53;
  _BOOL8 v54;
  unint64_t v55;
  unint64_t v56;
  int8x8_t prime;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint8x8_t v63;
  unint64_t v64;
  uint8x8_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  double v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int64x2_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  int64x2_t v93;
  unint64_t v94;
  _QWORD *v95;
  int64x2_t v96;
  unint64_t v97;
  int64x2_t *v98;

  if (result)
  {
    v8 = result;
    v9 = a3 - a5;
    v10 = round(a3);
    v11 = round(a4);
    v90 = a2 + 3;
    v91 = a2 + 4;
    do
    {
      v93 = 0uLL;
      v94 = 0;
      v12 = *(double **)(v8 + 32);
      v13 = *(double **)(v8 + 40);
      if (v12 != v13)
      {
        v14 = 0;
        do
        {
          v15 = *v12;
          v16 = *v12 + 1.0;
          v17 = round(*v12);
          v18 = round(v16);
          if (v17 < v10)
            v15 = a3;
          if (v11 < v18)
            v16 = a4;
          v19 = round(v15);
          v20 = round(v16);
          if (v17 < v18)
            v21 = v11;
          else
            v21 = v18;
          if (v17 < v18)
            v22 = v10;
          else
            v22 = v17;
          if (v17 >= v18 || v10 >= v11)
          {
            v20 = v21;
            v19 = v22;
          }
          if (v19 < v20 || v10 < v11 && v17 < v18 && (v17 != v11 ? (v24 = v10 == v18) : (v24 = 1), v24))
          {
            if ((unint64_t)v14 >= v94)
            {
              v25 = ((uint64_t)v14 - v93.i64[0]) >> 4;
              if ((unint64_t)(v25 + 1) >> 60)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v26 = (uint64_t)(v94 - v93.i64[0]) >> 3;
              if (v26 <= v25 + 1)
                v26 = v25 + 1;
              if (v94 - v93.i64[0] >= 0x7FFFFFFFFFFFFFF0)
                v27 = 0xFFFFFFFFFFFFFFFLL;
              else
                v27 = v26;
              v98 = (int64x2_t *)&v94;
              if (v27)
                v27 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(v27);
              else
                v28 = 0;
              v29 = (_OWORD *)(v27 + 16 * v25);
              *v29 = *(_OWORD *)v12;
              v30 = v93.i64[1];
              if (v93.i64[1] == v93.i64[0])
              {
                v34 = vdupq_n_s64(v93.u64[1]);
                v31 = v27 + 16 * v25;
              }
              else
              {
                v31 = v27 + 16 * v25;
                do
                {
                  v32 = *(_QWORD *)(v30 - 16);
                  v30 -= 16;
                  v33 = *(_DWORD *)(v30 + 8);
                  *(_QWORD *)(v31 - 16) = v32;
                  v31 -= 16;
                  *(_DWORD *)(v31 + 8) = v33;
                }
                while (v30 != v93.i64[0]);
                v34 = v93;
              }
              v14 = (caulk::rt_safe_memory_resource *)(v29 + 1);
              v93.i64[0] = v31;
              v96 = v34;
              v35 = v94;
              v94 = v27 + 16 * v28;
              v97 = v35;
              v95 = (_QWORD *)v34.i64[0];
              result = std::__split_buffer<AMCP::DAL::AU_Stream_Parameter,caulk::rt_allocator<AMCP::DAL::AU_Stream_Parameter> &>::~__split_buffer((uint64_t)&v95);
            }
            else
            {
              *(_OWORD *)v14 = *(_OWORD *)v12;
              v14 = (caulk::rt_safe_memory_resource *)((char *)v14 + 16);
            }
            v93.i64[1] = (uint64_t)v14;
          }
          v12 += 2;
        }
        while (v12 != v13);
        v36 = v93.i64[0];
        if ((caulk::rt_safe_memory_resource *)v93.i64[0] != v14)
        {
          while (1)
          {
            v37 = *(double *)v36;
            v92 = *(_QWORD *)(v36 + 8);
            v39 = *a2;
            v38 = a2[1];
            result = (uint64_t)std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::find<AMCP::DAL::AUParameterKey>(*a2, v38, (unsigned int *)(v8 + 16));
            v40 = (int64x2_t *)result;
            if (!result)
              break;
LABEL_123:
            v72 = v37 - v9;
            v73 = v40[3].u64[0];
            v74 = v40[2].u64[1];
            if (v74 >= v73)
            {
              v75 = v40[2].i64[0];
              v76 = (uint64_t)(v74 - v75) >> 4;
              v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 60)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v78 = v73 - v75;
              if (v78 >> 3 > v77)
                v77 = v78 >> 3;
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0)
                v79 = 0xFFFFFFFFFFFFFFFLL;
              else
                v79 = v77;
              v98 = v40 + 3;
              if (v79)
                v79 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(v79);
              else
                v80 = 0;
              v81 = v79 + 16 * v76;
              *(double *)v81 = v72;
              *(_QWORD *)(v81 + 8) = v92;
              v83 = v40[2].i64[0];
              v82 = v40[2].u64[1];
              if (v82 == v83)
              {
                v87 = vdupq_n_s64(v82);
                v84 = v79 + 16 * v76;
              }
              else
              {
                v84 = v79 + 16 * v76;
                do
                {
                  v85 = *(_QWORD *)(v82 - 16);
                  v82 -= 16;
                  v86 = *(_DWORD *)(v82 + 8);
                  *(_QWORD *)(v84 - 16) = v85;
                  v84 -= 16;
                  *(_DWORD *)(v84 + 8) = v86;
                }
                while (v82 != v83);
                v87 = v40[2];
              }
              v12 = (double *)(v81 + 16);
              v40[2].i64[0] = v84;
              v40[2].i64[1] = v81 + 16;
              v96 = v87;
              v88 = v40[3].i64[0];
              v40[3].i64[0] = v79 + 16 * v80;
              v97 = v88;
              v95 = (_QWORD *)v87.i64[0];
              result = std::__split_buffer<AMCP::DAL::AU_Stream_Parameter,caulk::rt_allocator<AMCP::DAL::AU_Stream_Parameter> &>::~__split_buffer((uint64_t)&v95);
            }
            else
            {
              *(double *)v74 = v72;
              *(_QWORD *)(v74 + 8) = v92;
              v12 = (double *)(v74 + 16);
            }
            v40[2].i64[1] = (uint64_t)v12;
            v36 += 16;
            if ((caulk::rt_safe_memory_resource *)v36 == v14)
            {
              v14 = (caulk::rt_safe_memory_resource *)v93.i64[0];
              goto LABEL_151;
            }
          }
          v41 = *(unsigned int *)(v8 + 16);
          v42 = *(unsigned int *)(v8 + 20);
          v43 = *(unsigned int *)(v8 + 24);
          v44 = 0xC6A4A7935BD1E995
              * ((0xC6A4A7935BD1E995
                * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v42) ^ ((0xC6A4A7935BD1E995 * v42) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v41) ^ ((0xC6A4A7935BD1E995 * v41) >> 47)) + 3864292196u))
                + 3864292196u) ^ (0xC6A4A7935BD1E995
                                * ((0xC6A4A7935BD1E995 * v43) ^ ((0xC6A4A7935BD1E995 * v43) >> 47))))
              + 3864292196u;
          if (v38)
          {
            v45 = (uint8x8_t)vcnt_s8((int8x8_t)v38);
            v45.i16[0] = vaddlv_u8(v45);
            if (v45.u32[0] > 1uLL)
            {
              v12 = (double *)(0xC6A4A7935BD1E995
                             * ((0xC6A4A7935BD1E995
                               * ((0xC6A4A7935BD1E995
                                 * ((0xC6A4A7935BD1E995 * v42) ^ ((0xC6A4A7935BD1E995 * v42) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v41) ^ ((0xC6A4A7935BD1E995 * v41) >> 47)) + 3864292196u))
                               + 3864292196u) ^ (0xC6A4A7935BD1E995
                                               * ((0xC6A4A7935BD1E995 * v43) ^ ((0xC6A4A7935BD1E995 * v43) >> 47))))
                             + 3864292196u);
              if (v44 >= v38)
                v12 = (double *)(v44 % v38);
            }
            else
            {
              v12 = (double *)(v44 & (v38 - 1));
            }
            v46 = *(uint64_t ***)(v39 + 8 * (_QWORD)v12);
            if (v46)
            {
              for (i = *v46; i; i = (uint64_t *)*i)
              {
                v48 = i[1];
                if (v48 == v44)
                {
                  if (*((_DWORD *)i + 4) == (_DWORD)v41 && *(uint64_t *)((char *)i + 20) == __PAIR64__(v43, v42))
                    goto LABEL_122;
                }
                else
                {
                  if (v45.u32[0] > 1uLL)
                  {
                    if (v48 >= v38)
                      v48 %= v38;
                  }
                  else
                  {
                    v48 &= v38 - 1;
                  }
                  if ((double *)v48 != v12)
                    break;
                }
              }
            }
          }
          v49 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v91 + 16))(*v91, 56, 8);
          v95 = (_QWORD *)v49;
          v96.i64[0] = (uint64_t)v91;
          *(_QWORD *)v49 = 0;
          *(_QWORD *)(v49 + 8) = v44;
          v50 = *(_DWORD *)(v8 + 24);
          *(_QWORD *)(v49 + 16) = *(_QWORD *)(v8 + 16);
          *(_DWORD *)(v49 + 24) = v50;
          *(_QWORD *)(v49 + 40) = 0;
          *(_QWORD *)(v49 + 48) = 0;
          *(_QWORD *)(v49 + 32) = 0;
          v51 = a2[5];
          v52 = *((float *)a2 + 12);
          v96.i8[8] = 1;
          v53 = (float)(unint64_t)(v51 + 1);
          if (!v38 || (float)(v52 * (float)v38) < v53)
          {
            v54 = (v38 & (v38 - 1)) != 0;
            if (v38 < 3)
              v54 = 1;
            v55 = v54 | (2 * v38);
            v56 = vcvtps_u32_f32(v53 / v52);
            if (v55 <= v56)
              prime = (int8x8_t)v56;
            else
              prime = (int8x8_t)v55;
            if (*(_QWORD *)&prime == 1)
            {
              prime = (int8x8_t)2;
            }
            else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
            {
              prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
            }
            v38 = a2[1];
            if (*(_QWORD *)&prime <= v38)
            {
              if (*(_QWORD *)&prime < v38)
              {
                v64 = vcvtps_u32_f32((float)(unint64_t)a2[5] / *((float *)a2 + 12));
                if (v38 < 3
                  || (v65 = (uint8x8_t)vcnt_s8((int8x8_t)v38), v65.i16[0] = vaddlv_u8(v65), v65.u32[0] > 1uLL))
                {
                  v64 = std::__next_prime(v64);
                }
                else
                {
                  v66 = 1 << -(char)__clz(v64 - 1);
                  if (v64 >= 2)
                    v64 = v66;
                }
                if (*(_QWORD *)&prime <= v64)
                  prime = (int8x8_t)v64;
                if (*(_QWORD *)&prime >= v38)
                {
                  v38 = a2[1];
                }
                else
                {
                  if (prime)
                    goto LABEL_78;
                  v89 = *a2;
                  *a2 = 0;
                  if (v89)
                    std::__bucket_list_deallocator<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,void *> *> *>>::operator()[abi:ne180100](a2[1], a2[2], v89);
                  v38 = 0;
                  a2[1] = 0;
                }
              }
            }
            else
            {
LABEL_78:
              if (*(_QWORD *)&prime >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[2] + 16))(a2[2], 8 * *(_QWORD *)&prime, 8);
              v59 = *a2;
              *a2 = v58;
              if (v59)
                std::__bucket_list_deallocator<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,void *> *> *>>::operator()[abi:ne180100](a2[1], a2[2], v59);
              v60 = 0;
              a2[1] = (uint64_t)prime;
              do
                *(_QWORD *)(*a2 + 8 * v60++) = 0;
              while (*(_QWORD *)&prime != v60);
              v61 = (_QWORD *)*v90;
              if (*v90)
              {
                v62 = v61[1];
                v63 = (uint8x8_t)vcnt_s8(prime);
                v63.i16[0] = vaddlv_u8(v63);
                if (v63.u32[0] > 1uLL)
                {
                  if (v62 >= *(_QWORD *)&prime)
                    v62 %= *(_QWORD *)&prime;
                }
                else
                {
                  v62 &= *(_QWORD *)&prime - 1;
                }
                *(_QWORD *)(*a2 + 8 * v62) = v90;
                v67 = (_QWORD *)*v61;
                if (*v61)
                {
                  do
                  {
                    v68 = v67[1];
                    if (v63.u32[0] > 1uLL)
                    {
                      if (v68 >= *(_QWORD *)&prime)
                        v68 %= *(_QWORD *)&prime;
                    }
                    else
                    {
                      v68 &= *(_QWORD *)&prime - 1;
                    }
                    if (v68 != v62)
                    {
                      if (!*(_QWORD *)(*a2 + 8 * v68))
                      {
                        *(_QWORD *)(*a2 + 8 * v68) = v61;
                        goto LABEL_103;
                      }
                      *v61 = *v67;
                      *v67 = **(_QWORD **)(*a2 + 8 * v68);
                      **(_QWORD **)(*a2 + 8 * v68) = v67;
                      v67 = v61;
                    }
                    v68 = v62;
LABEL_103:
                    v61 = v67;
                    v67 = (_QWORD *)*v67;
                    v62 = v68;
                  }
                  while (v67);
                }
              }
              v38 = (unint64_t)prime;
            }
            if ((v38 & (v38 - 1)) != 0)
            {
              if (v44 >= v38)
                v12 = (double *)(v44 % v38);
              else
                v12 = (double *)v44;
            }
            else
            {
              v12 = (double *)((v38 - 1) & v44);
            }
          }
          v69 = *(_QWORD **)(*a2 + 8 * (_QWORD)v12);
          v70 = v95;
          if (v69)
          {
            *v95 = *v69;
            goto LABEL_120;
          }
          *v95 = a2[3];
          a2[3] = (uint64_t)v70;
          *(_QWORD *)(*a2 + 8 * (_QWORD)v12) = v90;
          if (*v70)
          {
            v71 = *(_QWORD *)(*v70 + 8);
            if ((v38 & (v38 - 1)) != 0)
            {
              if (v71 >= v38)
                v71 %= v38;
            }
            else
            {
              v71 &= v38 - 1;
            }
            v69 = (_QWORD *)(*a2 + 8 * v71);
LABEL_120:
            *v69 = v70;
          }
          ++a2[5];
          v39 = *a2;
          v38 = a2[1];
LABEL_122:
          result = (uint64_t)std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::find<AMCP::DAL::AUParameterKey>(v39, v38, (unsigned int *)(v8 + 16));
          v40 = (int64x2_t *)result;
          goto LABEL_123;
        }
LABEL_151:
        if (v14)
          result = (uint64_t)std::allocator_traits<caulk::rt_allocator<AMCP::DAL::AU_Stream_Parameter>>::deallocate[abi:ne180100](v14, (uint64_t)(v94 - (_QWORD)v14) >> 4);
      }
      v8 = *(_QWORD *)v8;
    }
    while (v8);
  }
  return result;
}

void sub_1B5AA7A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, caulk::rt_safe_memory_resource *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _QWORD *v19;

  std::__hash_node_destructor<std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,void *>>>::operator()[abi:ne180100](a10, v19);
  if (a15)
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::AU_Stream_Parameter>>::deallocate[abi:ne180100](a15, (a17 - (uint64_t)a15) >> 4);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::find<AMCP::DAL::AUParameterKey>(uint64_t a1, unint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *result;
  unint64_t v11;

  if (!a2)
    return 0;
  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  v6 = 0xC6A4A7935BD1E995
     * ((0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v3) ^ ((0xC6A4A7935BD1E995 * v3) >> 47)) + 3864292196u))
       + 3864292196u) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))))
     + 3864292196u;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v3) ^ ((0xC6A4A7935BD1E995 * v3) >> 47)) + 3864292196u))
         + 3864292196u) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))))
       + 3864292196u;
    if (v6 >= a2)
      v8 = v6 % a2;
  }
  else
  {
    v8 = v6 & (a2 - 1);
  }
  v9 = *(uint64_t ***)(a1 + 8 * v8);
  if (!v9)
    return 0;
  for (result = *v9; result; result = (uint64_t *)*result)
  {
    v11 = result[1];
    if (v11 == v6)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3 && *(uint64_t *)((char *)result + 20) == __PAIR64__(v5, v4))
        return result;
    }
    else
    {
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= a2)
          v11 %= a2;
      }
      else
      {
        v11 &= a2 - 1;
      }
      if (v11 != v8)
        return 0;
    }
  }
  return result;
}

uint64_t std::__split_buffer<AMCP::DAL::AU_Stream_Parameter,caulk::rt_allocator<AMCP::DAL::AU_Stream_Parameter> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  caulk::rt_safe_memory_resource *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(caulk::rt_safe_memory_resource **)a1;
  if (*(_QWORD *)a1)
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::AU_Stream_Parameter>>::deallocate[abi:ne180100](v4, (uint64_t)(*(_QWORD *)(a1 + 24) - (_QWORD)v4) >> 4);
  return a1;
}

uint64_t std::__hash_node_destructor<std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,void *>>>::operator()[abi:ne180100](uint64_t result, _QWORD *a2)
{
  _QWORD **v3;
  caulk::rt_safe_memory_resource *v4;

  v3 = (_QWORD **)result;
  if (*(_BYTE *)(result + 8))
  {
    v4 = (caulk::rt_safe_memory_resource *)a2[4];
    if (v4)
    {
      a2[5] = v4;
      std::allocator_traits<caulk::rt_allocator<AMCP::DAL::AU_Stream_Parameter>>::deallocate[abi:ne180100](v4, (uint64_t)(a2[6] - (_QWORD)v4) >> 4);
    }
  }
  else if (!a2)
  {
    return result;
  }
  return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)**v3 + 24))(**v3, a2, 56, 8);
}

uint64_t boost::circular_buffer<AMCP::Zero_Time_Stamp,std::allocator<AMCP::Zero_Time_Stamp>>::at(_QWORD *a1, int64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  std::logic_error v5;

  if (a1[4] <= (unint64_t)a2)
  {
    std::logic_error::logic_error(&v5, "circular_buffer");
    v5.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
    boost::throw_exception<std::out_of_range>(&v5);
  }
  v3 = a1[1];
  v2 = a1[2];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 3)) <= a2)
    a2 += 0x5555555555555555 * ((v3 - *a1) >> 3);
  return v2 + 24 * a2;
}

void AMCP::Logging_Settings::instance(AMCP::Logging_Settings *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      byte_1EDB88044 = 0;
      AMCP::Logging_Settings::instance(void)::s_instance = 0;
    }
  }
}

void AMCP::Utility::Settings_Storage::at_as<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(_BYTE *a1, uint64_t a2, const void **a3)
{
  std::mutex *v6;
  const __CFDictionary *v7;
  std::runtime_error *exception;

  v6 = (std::mutex *)(a2 + 16);
  std::mutex::lock((std::mutex *)(a2 + 16));
  v7 = *(const __CFDictionary **)(a2 + 112);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(a1, v7, *a3);
  std::mutex::unlock(v6);
}

void sub_1B5AA7DC8(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

void AMCP::DAL::Default_Data_Handler::~Default_Data_Handler(AMCP::DAL::Default_Data_Handler *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::DAL::Default_Data_Handler::dal_operation_is_supported()
{
  return 0;
}

void AMCP::DAL::Default_Data_Handler::adopt(AMCP::Log::Scope_Registry *a1)
{
  std::__shared_weak_count *v1;
  NSObject *v2;
  unint64_t *v3;
  unint64_t v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  NSObject **v7;
  _BYTE v8[10];
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v7, "com.apple.coreaudio", "AMCP");
  v1 = *(std::__shared_weak_count **)v8;
  v2 = *v7;
  if (*(_QWORD *)v8)
  {
    v3 = (unint64_t *)(*(_QWORD *)v8 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v5 = pthread_self();
    v6 = pthread_mach_thread_np(v5);
    LODWORD(v7) = 67109890;
    HIDWORD(v7) = v6;
    *(_WORD *)v8 = 2080;
    *(_QWORD *)&v8[2] = "Default_Data_Handler.cpp";
    v9 = 1024;
    v10 = 39;
    v11 = 2080;
    v12 = "false";
    _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Default_Data_Handler::adopt unsupported", (uint8_t *)&v7, 0x22u);
  }
  abort();
}

uint64_t AMCP::DAL::Default_Data_Handler::get_allocation_size(AMCP::DAL::Default_Data_Handler *this)
{
  return *((_QWORD *)this + 8) - *((_QWORD *)this + 7);
}

double AMCP::DAL::Default_Data_Handler::get_length_in_frames(AMCP::DAL::Default_Data_Handler *this)
{
  return 0.0;
}

void AMCP::DAL::Default_Data_Handler::get_audio_buffer_list(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[4] = 0;
}

{
  *a1 = 0;
  a1[4] = 0;
}

void *AMCP::DAL::Default_Data_Handler::copy(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;

  v4 = AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::Default_Data_Handler>(*a3);
  return memcpy(*(void **)(v4 + 56), *(const void **)(a1 + 56), *(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56));
}

void AMCP::DAL::Default_Data_Handler::mix(AMCP::Log::Scope_Registry *a1)
{
  std::__shared_weak_count *v1;
  NSObject *v2;
  unint64_t *v3;
  unint64_t v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  std::runtime_error *exception;
  int v8;
  const char *v9;
  std::runtime_error v10;
  __int128 v11;
  uint64_t v12;
  uint64_t (**v13)();
  __int128 v14;
  uint64_t v15;
  std::string v16;
  std::runtime_error v17;
  std::runtime_error v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint8_t buf[8];
  _BYTE v26[10];
  __int16 v27;
  int v28;
  const char *v29;
  std::runtime_error v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v1 = *(std::__shared_weak_count **)v26;
  v2 = **(NSObject ***)buf;
  if (*(_QWORD *)v26)
  {
    v3 = (unint64_t *)(*(_QWORD *)v26 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v5 = pthread_self();
    v6 = pthread_mach_thread_np(v5);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v6;
    *(_WORD *)v26 = 2080;
    *(_QWORD *)&v26[2] = "Default_Data_Handler.cpp";
    v27 = 1024;
    v28 = 70;
    _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Default data handler does not support mixing", buf, 0x18u);
  }
  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
  caulk::make_string((caulk *)"Default data handler does not support mixing", (uint64_t)&v16);
  std::runtime_error::runtime_error(&v17, &v16);
  std::runtime_error::runtime_error(&v18, &v17);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = -1;
  v18.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
  v19 = &unk_1E69A1FE0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
  v30.__vftable = (std::runtime_error_vtbl *)"virtual void AMCP::DAL::Default_Data_Handler::mix(Sample_Time_Range, Contai"
                                             "ner, Sample_Time, DAL_Operation_Context_Ref) const";
  v30.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Default_Data_Handler.cpp";
  v31 = 70;
  std::vector<void *>::vector(&v11);
  v8 = backtrace((void **)v11, (*((_QWORD *)&v11 + 1) - (_QWORD)v11) >> 3);
  std::vector<void *>::resize((char **)&v11, v8);
  v14 = v11;
  v15 = v12;
  v11 = 0uLL;
  v12 = 0;
  v13 = off_1E69A20A0;
  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v13);
  exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
  std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
  exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
  v9 = v29;
  exception[1].__imp_.__imp_ = v29;
  if (v9)
    (*(void (**)(const char *))(*(_QWORD *)v9 + 24))(v9);
  v10 = v30;
  LODWORD(exception[3].__vftable) = v31;
  exception[2] = v10;
  exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
  exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
  exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
}

void sub_1B5AA8214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,void *a24,uint64_t a25)
{
  std::runtime_error *v25;
  uint64_t v26;
  uint64_t v28;

  std::runtime_error::~runtime_error(v25);
  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v26 - 96) = &unk_1E69A2000;
  v28 = *(_QWORD *)(v26 - 88);
  if (v28 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28))
    *(_QWORD *)(v26 - 88) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v26 - 112));
  a24 = &unk_1E69A2000;
  if (a25 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a25 + 32))(a25))
    a25 = 0;
  std::runtime_error::~runtime_error(&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0)
    operator delete(a16);
  __cxa_free_exception(v25);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v26 - 113));
  _Unwind_Resume(a1);
}

uint64_t *AMCP::DAL::Default_Data_Handler::get_ring_buffer_time_translator(AMCP::DAL::Default_Data_Handler *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    AMCP::DAL::Default_Data_Handler::get_ring_buffer_time_translator(void)const::s_translator = (uint64_t)&off_1E6985D50;
  }
  return &AMCP::DAL::Default_Data_Handler::get_ring_buffer_time_translator(void)const::s_translator;
}

void AMCP::DAL::Default_Data_Handler::dal_operation_context_create(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void AMCP::DAL::Default_Data_Handler::dal_operation_apply(AMCP::Log::Scope_Registry *a1)
{
  std::__shared_weak_count *v1;
  NSObject *v2;
  unint64_t *v3;
  unint64_t v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  std::runtime_error *exception;
  int v8;
  const char *v9;
  std::runtime_error v10;
  __int128 v11;
  uint64_t v12;
  uint64_t (**v13)();
  __int128 v14;
  uint64_t v15;
  std::string v16;
  std::runtime_error v17;
  std::runtime_error v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint8_t buf[8];
  _BYTE v26[10];
  __int16 v27;
  int v28;
  const char *v29;
  std::runtime_error v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v1 = *(std::__shared_weak_count **)v26;
  v2 = **(NSObject ***)buf;
  if (*(_QWORD *)v26)
  {
    v3 = (unint64_t *)(*(_QWORD *)v26 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v5 = pthread_self();
    v6 = pthread_mach_thread_np(v5);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v6;
    *(_WORD *)v26 = 2080;
    *(_QWORD *)&v26[2] = "Default_Data_Handler.cpp";
    v27 = 1024;
    v28 = 90;
    _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Default data handler does not support dal_operation_apply", buf, 0x18u);
  }
  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
  caulk::make_string((caulk *)"Default data handler does not support dal_operation_apply", (uint64_t)&v16);
  std::runtime_error::runtime_error(&v17, &v16);
  std::runtime_error::runtime_error(&v18, &v17);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = -1;
  v18.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
  v19 = &unk_1E69A1FE0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
  v30.__vftable = (std::runtime_error_vtbl *)"virtual Sample_Time_Range AMCP::DAL::Default_Data_Handler::dal_operation_ap"
                                             "ply(const Sample_Time_Range &, Container, Sample_Time_Range, const DAL_Sett"
                                             "ings &, DAL_Operation_Context_Ref) const";
  v30.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Default_Data_Handler.cpp";
  v31 = 90;
  std::vector<void *>::vector(&v11);
  v8 = backtrace((void **)v11, (*((_QWORD *)&v11 + 1) - (_QWORD)v11) >> 3);
  std::vector<void *>::resize((char **)&v11, v8);
  v14 = v11;
  v15 = v12;
  v11 = 0uLL;
  v12 = 0;
  v13 = off_1E69A20A0;
  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v13);
  exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
  std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
  exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
  v9 = v29;
  exception[1].__imp_.__imp_ = v29;
  if (v9)
    (*(void (**)(const char *))(*(_QWORD *)v9 + 24))(v9);
  v10 = v30;
  LODWORD(exception[3].__vftable) = v31;
  exception[2] = v10;
  exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
  exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
  exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
}

void sub_1B5AA85DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,void *a24,uint64_t a25)
{
  std::runtime_error *v25;
  uint64_t v26;
  uint64_t v28;

  std::runtime_error::~runtime_error(v25);
  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v26 - 96) = &unk_1E69A2000;
  v28 = *(_QWORD *)(v26 - 88);
  if (v28 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28))
    *(_QWORD *)(v26 - 88) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v26 - 112));
  a24 = &unk_1E69A2000;
  if (a25 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a25 + 32))(a25))
    a25 = 0;
  std::runtime_error::~runtime_error(&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0)
    operator delete(a16);
  __cxa_free_exception(v25);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v26 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Default_Data_Handler::dal_operation_get_property()
{
  return 0;
}

uint64_t AMCP::DAL::Default_Data_Handler::get_data@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::Default_Data_Handler>(*a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::Default_Data_Handler>(uint64_t result)
{
  NSObject *v1;
  _opaque_pthread_t *v2;
  mach_port_t v3;
  void *exception;
  __int128 v5;
  uint64_t v6;
  uint64_t (**v7)();
  __int128 v8;
  uint64_t v9;
  std::string v10;
  std::logic_error v11;
  std::logic_error v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint8_t buf[8];
  __int16 v20;
  char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  _BYTE v25[14];
  const char *v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!result)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v1 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      v2 = pthread_self();
      v3 = pthread_mach_thread_np(v2);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v3;
      v20 = 2080;
      v21 = "Container.h";
      v22 = 1024;
      v23 = 121;
      v24 = 2080;
      *(_QWORD *)v25 = "not ((m_impl.get()) != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v1, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to call Container::GetContainerData on a null Container", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v18);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to call Container::GetContainerData on a null Container", (uint64_t)&v10);
    std::logic_error::logic_error(&v11, &v10);
    v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v12, &v11);
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = -1;
    v12.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v13 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v12);
    *(_QWORD *)&v25[6] = "T *AMCP::DAL::Container::get_container_data_ptr() const [T = AMCP::DAL::Default_Data_Handler]";
    v26 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Container.h";
    v27 = 121;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v5);
    v8 = v5;
    v9 = v6;
    v5 = 0uLL;
    v6 = 0;
    v7 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v7);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return result;
}

void sub_1B5AA891C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

void AMCP::Graph::Null_Timebase::~Null_Timebase(void **this)
{
  std::__shared_weak_count *v2;

  *this = off_1E6984858;
  if (*((char *)this + 175) < 0)
    operator delete(this[19]);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  v2 = (std::__shared_weak_count *)this[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  std::__shared_weak_count *v2;

  *this = off_1E6984858;
  if (*((char *)this + 175) < 0)
    operator delete(this[19]);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  v2 = (std::__shared_weak_count *)this[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::Graph::Null_Timebase::get_clock_id(AMCP::Graph::Null_Timebase *this)
{
  return (uint64_t)this + 152;
}

void AMCP::Graph::Null_Timebase::get_underlying_device_uid(AMCP::Graph::Null_Timebase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 175) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 19), *((_QWORD *)this + 20));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 152);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 21);
  }
}

void AMCP::Graph::Null_Timebase::get_current_time(AMCP::Graph::Null_Timebase *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  double sample_time;
  char *v7;
  uint64_t host_time;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *exception;
  __int128 v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  std::string v24;
  std::logic_error v25;
  std::logic_error v26;
  void *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  int v31;
  char v32;
  uint8_t buf[8];
  __int16 v34;
  char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  _BYTE v39[14];
  const char *v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = AMCP::Graph::Null_Timebase::demand_counter(this);
  if (!*v4)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v15 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v17;
      v34 = 2080;
      v35 = "Null_Timebase.cpp";
      v36 = 1024;
      v37 = 40;
      v38 = 2080;
      *(_QWORD *)v39 = "not (is_running())";
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Trying to get current time when clock is not running", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Trying to get current time when clock is not running", (uint64_t)&v24);
    std::logic_error::logic_error(&v25, &v24);
    v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v26, &v25);
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = -1;
    v26.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v27 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v26);
    *(_QWORD *)&v39[6] = "virtual CA::TimeStamp AMCP::Graph::Null_Timebase::get_current_time() const";
    v40 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Timebase.cpp";
    v41 = 40;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    v22 = v19;
    v23 = v20;
    v19 = 0uLL;
    v20 = 0;
    v21 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v21);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = AMCP::Graph::Null_Timebase::demand_counter(this);
  AMCP::Graph::Manifest_Counter::get_current_cycle_anchor_time((uint64_t)buf, (uint64_t)v5);
  sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)buf);
  v7 = AMCP::Graph::Null_Timebase::demand_counter(this);
  AMCP::Graph::Manifest_Counter::get_current_cycle_anchor_time((uint64_t)&v26, (uint64_t)v7);
  host_time = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)&v26);
  *(double *)a2 = (double)(uint64_t)vcvtmd_s64_f64(sample_time);
  *(_QWORD *)(a2 + 8) = host_time;
  *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_QWORD *)(a2 + 56) = 7;
  v9 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(std::__shared_weak_count **)&v39[6];
  if (*(_QWORD *)&v39[6])
  {
    v13 = (unint64_t *)(*(_QWORD *)&v39[6] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1B5AA8DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v27 + 24);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

double AMCP::Graph::Null_Timebase::get_last_zero_time_stamp@<D0>(AMCP::Graph::Null_Timebase *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  double result;
  NSObject *v5;
  _opaque_pthread_t *v6;
  mach_port_t v7;
  void *exception;
  __int128 v9;
  uint64_t v10;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t v13;
  std::string v14;
  std::logic_error v15;
  std::logic_error v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  uint8_t buf[8];
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  _BYTE v29[14];
  const char *v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = AMCP::Graph::Null_Timebase::demand_counter(this);
  if (!*v3)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v5 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = pthread_self();
      v7 = pthread_mach_thread_np(v6);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v7;
      v24 = 2080;
      v25 = "Null_Timebase.cpp";
      v26 = 1024;
      v27 = 51;
      v28 = 2080;
      *(_QWORD *)v29 = "not (is_running())";
      _os_log_error_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Trying to get current time when clock is not running", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v22);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Trying to get current time when clock is not running", (uint64_t)&v14);
    std::logic_error::logic_error(&v15, &v14);
    v15.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v16, &v15);
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = -1;
    v16.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v17 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v16);
    *(_QWORD *)&v29[6] = "virtual CA::TimeStamp AMCP::Graph::Null_Timebase::get_last_zero_time_stamp() const";
    v30 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Timebase.cpp";
    v31 = 51;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v9);
    v12 = v9;
    v13 = v10;
    v9 = 0uLL;
    v10 = 0;
    v11 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v11);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_QWORD *)&result = 7;
  *(_QWORD *)(a2 + 56) = 7;
  return result;
}

void sub_1B5AA9134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Null_Timebase::get_clock_domain(AMCP::Graph::Null_Timebase *this)
{
  return (*((_DWORD *)this + 26) + 1000);
}

uint64_t AMCP::Graph::Null_Timebase::convert_sample_to_host_time(AMCP::Graph::Null_Timebase *this, double a2)
{
  _OWORD v3[3];
  uint64_t v4;
  uint64_t v5;
  double v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v6 = a2;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 1;
  v4 = 0;
  memset(v3, 0, sizeof(v3));
  v5 = 2;
  AMCP::Graph::Null_Timebase::translate_time((uint64_t)this, (uint64_t)&v6, (uint64_t)v3);
  return *((_QWORD *)&v3[0] + 1);
}

double AMCP::Graph::Null_Timebase::convert_host_to_sample_time(AMCP::Graph::Null_Timebase *this, uint64_t a2)
{
  _OWORD v3[3];
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v6[0] = 0;
  v6[1] = a2;
  v7 = 0u;
  v8 = 0u;
  v9 = 0;
  v10 = 2;
  v4 = 0;
  memset(v3, 0, sizeof(v3));
  v5 = 1;
  AMCP::Graph::Null_Timebase::translate_time((uint64_t)this, (uint64_t)v6, (uint64_t)v3);
  return *(double *)v3;
}

double AMCP::Graph::Null_Timebase::get_host_ticks_per_frame(AMCP::Graph::Null_Timebase *this)
{
  return *((double *)this + 15);
}

void AMCP::Graph::Null_Timebase::start(uint64_t a1, int a2)
{
  os_unfair_lock_s *v4;
  int v5;
  int v6;
  _BOOL4 v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  void *__p;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;

  v4 = (os_unfair_lock_s *)(a1 + 72);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  std::string::basic_string[abi:ne180100]<0>(&__p, "Null_Timebase");
  v5 = AMCP::IO_Core::Play_State_Manager::start((uint64_t *)(a1 + 80), a2, (uint64_t *)&__p);
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  v6 = *(_DWORD *)(a1 + 96);
  if (*(_QWORD *)(a1 + 88))
  {
    v7 = 1;
    if (v6)
      goto LABEL_32;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 80) != 0;
    if (v6)
      goto LABEL_32;
  }
  if (v7)
  {
    if (*(_DWORD *)(a1 + 100) == 1)
    {
      v8 = AMCP::Graph::Null_Timebase::demand_counter((AMCP::Graph::Null_Timebase *)a1);
      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v24, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
      LODWORD(__p) = 2;
      v26 = 0;
      v27 = 0;
      v28 = v24;
      v24 = 0uLL;
      AMCP::Graph::Manifest_Counter::start((uint64_t)v8, (AMCP::DAL::DAL_Time *)&__p);
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
      if (*((_QWORD *)&v28 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
      if (*((_QWORD *)&v24 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = 0;
    }
    else
    {
      v16 = AMCP::Graph::Null_Timebase::demand_counter((AMCP::Graph::Null_Timebase *)a1);
      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v23, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
      LODWORD(__p) = 2;
      v26 = 0;
      v27 = 0;
      v28 = v23;
      v23 = 0uLL;
      AMCP::Graph::Manifest_Counter::start((uint64_t)v16, (AMCP::DAL::DAL_Time *)&__p);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
      if (*((_QWORD *)&v28 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
      if (*((_QWORD *)&v23 + 1))
      {
        v21 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v15 = mach_absolute_time();
    }
    *(_QWORD *)(a1 + 128) = v15;
    *(_DWORD *)(a1 + 96) = v5;
  }
LABEL_32:
  os_unfair_lock_unlock(v4);
}

void sub_1B5AA9534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  os_unfair_lock_s *v19;
  uint64_t v20;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v20);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  os_unfair_lock_unlock(v19);
  _Unwind_Resume(a1);
}

double AMCP::Graph::Null_Timebase::advance(AMCP::Graph::Null_Timebase *a1, double a2)
{
  char *v3;

  v3 = AMCP::Graph::Null_Timebase::demand_counter(a1);
  return AMCP::Graph::Manifest_Counter::advance((uint64_t)v3, a2);
}

void AMCP::Graph::Null_Timebase::advance_to_time(AMCP::Graph::Null_Timebase *a1, double a2)
{
  char *v4;
  AMCP::Log::Scope_Registry *v5;
  double sample_time;
  char *v7;
  __n128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  std::string v21;
  std::logic_error v22;
  std::logic_error v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  _BYTE v30[32];
  std::__shared_weak_count *v31;
  uint8_t buf[8];
  __int16 v33;
  char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  _BYTE v38[14];
  const char *v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = AMCP::Graph::Null_Timebase::demand_counter(a1);
  AMCP::Graph::Manifest_Counter::get_current_cycle_anchor_time((uint64_t)v30, (uint64_t)v4);
  if (round(a2) < round(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v30)))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v14;
      v33 = 2080;
      v34 = "Null_Timebase.cpp";
      v35 = 1024;
      v36 = 234;
      v37 = 2080;
      *(_QWORD *)v38 = "not (target_time >= current.get_sample_time())";
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v21);
    std::logic_error::logic_error(&v22, &v21);
    v22.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v24 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    *(_QWORD *)&v38[6] = "virtual void AMCP::Graph::Null_Timebase::advance_to_time(Sample_Time)";
    v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Timebase.cpp";
    v40 = 234;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v18 = off_1E69A20A0;
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v30);
  v7 = AMCP::Graph::Null_Timebase::demand_counter(a1);
  v8.n128_f64[0] = AMCP::Graph::Manifest_Counter::advance((uint64_t)v7, a2 - sample_time);
  v9 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v9->__on_zero_shared)(v9, v8);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1B5AA984C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Null_Timebase::stop(uint64_t a1, int a2)
{
  os_unfair_lock_s *v4;
  int v5;
  void *__p[2];
  char v7;

  v4 = (os_unfair_lock_s *)(a1 + 72);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  std::string::basic_string[abi:ne180100]<0>(__p, "Null_Timebase");
  v5 = AMCP::IO_Core::Play_State_Manager::stop((uint64_t *)(a1 + 80), a2, (uint64_t *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  if (!*(_QWORD *)(a1 + 88) && *(_DWORD *)(a1 + 96) && !*(_QWORD *)(a1 + 80))
  {
    *AMCP::Graph::Null_Timebase::demand_counter((AMCP::Graph::Null_Timebase *)a1) = 0;
    *(_DWORD *)(a1 + 96) = v5;
  }
  os_unfair_lock_unlock(v4);
}

void sub_1B5AA99FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  os_unfair_lock_s *v15;

  os_unfair_lock_unlock(v15);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Null_Timebase::is_running(AMCP::Graph::Null_Timebase *this)
{
  return *AMCP::Graph::Null_Timebase::demand_counter(this);
}

void AMCP::Graph::Null_Timebase::get_state(AMCP::Graph::Null_Timebase *this@<X0>, AMCP::IO_Core::Play_State_Manager *a2@<X8>)
{
  os_unfair_lock_s *v4;

  v4 = (os_unfair_lock_s *)((char *)this + 72);
  os_unfair_lock_lock((os_unfair_lock_t)this + 18);
  AMCP::IO_Core::Play_State_Manager::get_state_snapshot(a2, (unint64_t *)this + 10);
  os_unfair_lock_unlock(v4);
}

void sub_1B5AA9A88(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Null_Timebase::get_anchor_time(AMCP::Graph::Null_Timebase *this)
{
  char *v1;
  double sample_time;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE v7[32];
  std::__shared_weak_count *v8;

  v1 = AMCP::Graph::Null_Timebase::demand_counter(this);
  AMCP::Graph::Manifest_Counter::get_anchor_time((uint64_t)v7, (uint64_t)v1);
  sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v7);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return *(_QWORD *)&sample_time;
}

void sub_1B5AA9B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Null_Timebase::get_engine_info(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136);
}

double AMCP::Graph::Null_Timebase::get_sample_rate(AMCP::Graph::Null_Timebase *this)
{
  return *((double *)this + 14);
}

double AMCP::Graph::Null_Timebase::get_rate_scalar(AMCP::Graph::Null_Timebase *this)
{
  return 1.0;
}

uint64_t AMCP::Graph::Null_Timebase::supports_past_data(AMCP::Graph::Null_Timebase *this)
{
  return 0;
}

uint64_t AMCP::Graph::Null_Timebase::available_past_data(AMCP::Graph::Null_Timebase *this)
{
  return 0;
}

void AMCP::Graph::Null_Timebase::get_engine_ptr(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t AMCP::Graph::Null_Timebase::wait_for_time_to_start(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v3;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v3 = *(uint64_t ***)(a2 + 16);
  if (!v3)
    return 0;
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr))(*v3[2] + 192))(&v11);
    v7 = v11;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (v7)
      break;
    v3 = (uint64_t **)*v3;
    if (!v3)
      return 0;
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v3[2] + 200))(v3[2], a2, a3);
}

double AMCP::Graph::Null_Timebase::get_max_io_buffer_frame_size(AMCP::Graph::Null_Timebase *this)
{
  return *((double *)this + 18);
}

uint64_t AMCP::Graph::Null_Timebase::get_private_transport_state(AMCP::Graph::Null_Timebase *this)
{
  return *((unsigned int *)this + 24);
}

char *AMCP::Graph::Null_Timebase::demand_counter(AMCP::Graph::Null_Timebase *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v2 = (char *)this + 48;
  v3 = *((_QWORD *)this + 6);
  v4 = (char *)this + 24;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v5)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v3)
      return v4;
  }
  else
  {
LABEL_6:
    if (v3)
      return v4;
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v23, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  v11 = v23;
  v10 = v24;
  if (v24)
  {
    v12 = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  LOBYTE(v20) = 0;
  *(_QWORD *)&v21 = v11;
  *((_QWORD *)&v21 + 1) = v10;
  v22 = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_OWORD *)v4 = v20;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)v2, &v21);
  *((_DWORD *)this + 16) = v22;
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v24;
  if (v24)
  {
    v18 = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v4;
}

void AMCP::Graph::Null_Timebase::translate_time(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  double v12;
  int v13;
  int v14;
  double v15;
  unint64_t v16;
  double v17;
  BOOL v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  double v22;
  NSObject *v23;
  _opaque_pthread_t *v24;
  mach_port_t v25;
  void *exception;
  __int128 v27;
  uint64_t v28;
  uint64_t (**v29)();
  __int128 v30;
  uint64_t v31;
  std::string v32;
  std::logic_error v33;
  std::logic_error v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  uint8_t buf[8];
  __int16 v42;
  char *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  _BYTE v47[14];
  const char *v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a2 + 56) & 3) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v23 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = pthread_self();
      v25 = pthread_mach_thread_np(v24);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v25;
      v42 = 2080;
      v43 = "Null_Timebase.cpp";
      v44 = 1024;
      v45 = 84;
      v46 = 2080;
      *(_QWORD *)v47 = "not ((inTime.mFlags & kAudioTimeStampSampleHostTimeValid) != 0)";
      _os_log_error_impl(&dword_1B57BA000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s TranslateTime has to have either sample time or host time valid on the input", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"TranslateTime has to have either sample time or host time valid on the input", (uint64_t)&v32);
    std::logic_error::logic_error(&v33, &v32);
    v33.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v34, &v33);
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = -1;
    v34.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v35 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
    *(_QWORD *)&v47[6] = "void AMCP::Graph::Null_Timebase::translate_time(const CA::TimeStamp &, CA::TimeStamp &) const";
    v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Timebase.cpp";
    v49 = 84;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    v30 = v27;
    v31 = v28;
    v27 = 0uLL;
    v28 = 0;
    v29 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v29);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = *(double *)(a1 + 120);
  v6 = *(_QWORD *)(a1 + 128);
  v7 = AMCP::Graph::Null_Timebase::demand_counter((AMCP::Graph::Null_Timebase *)a1);
  AMCP::Graph::Manifest_Counter::get_anchor_time((uint64_t)buf, (uint64_t)v7);
  v8 = (uint64_t)floor(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)buf));
  v9 = *(std::__shared_weak_count **)&v47[6];
  if (*(_QWORD *)&v47[6])
  {
    v10 = (unint64_t *)(*(_QWORD *)&v47[6] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (double)v8;
  v13 = *(_DWORD *)(a3 + 56);
  if ((v13 & 1) != 0)
  {
    v14 = *(_DWORD *)(a2 + 56);
    if ((v14 & 1) != 0)
    {
      v15 = *(double *)a2;
    }
    else
    {
      v15 = 0.0;
      if ((v14 & 2) != 0)
      {
        v16 = *(_QWORD *)(a2 + 8);
        if (v16)
        {
          v17 = -(double)(v6 - v16);
          v18 = v16 >= v6;
          v19 = v16 - v6;
          if (v18)
            v17 = (double)v19;
          v15 = v17 / v5 + v12;
        }
      }
    }
    *(double *)a3 = v15;
    if ((v13 & 2) == 0)
    {
LABEL_9:
      if ((v13 & 4) == 0)
        return;
      goto LABEL_10;
    }
  }
  else if ((v13 & 2) == 0)
  {
    goto LABEL_9;
  }
  v20 = *(_DWORD *)(a2 + 56);
  if ((v20 & 2) != 0)
  {
    v21 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    if ((v20 & 1) == 0)
    {
      *(_QWORD *)(a3 + 8) = 0;
      if ((v13 & 4) == 0)
        return;
LABEL_10:
      *(_QWORD *)(a3 + 16) = 0x3FF0000000000000;
      return;
    }
    v22 = *(double *)a2;
    if (*(double *)a2 >= v12)
      v21 = v6 + vcvtad_u64_f64(v5 * (v22 - v12));
    else
      v21 = v6 - vcvtad_u64_f64(v5 * (v12 - v22));
  }
  *(_QWORD *)(a3 + 8) = v21;
  if ((v13 & 4) != 0)
    goto LABEL_10;
}

void sub_1B5AAA0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v27 + 24);
  _Unwind_Resume(a1);
}

void AMCP::Graph::make_mock_timebase(std::__shared_weak_count **a1, unsigned int a2, int a3, uint64_t a4, double a5)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::string *p_p;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::string __p;
  std::string v28;

  v10 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69849C0;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  v10[3].std::__shared_count = 0u;
  v10[1].__shared_owners_ = 0;
  v10[1].__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E6984858;
  LOBYTE(v10[2].__vftable) = 0;
  LODWORD(v10[4].__vftable) = 0;
  *(_OWORD *)&v10[2].__shared_owners_ = 0u;
  LODWORD(v10[3].__shared_weak_owners_) = 0;
  v10[4].__shared_owners_ = 0;
  v10[4].__shared_weak_owners_ = 0;
  LODWORD(v10[5].__vftable) = 0;
  HIDWORD(v10[5].__vftable) = a3;
  LODWORD(v10[5].__shared_owners_) = a2;
  *(double *)&v10[5].__shared_weak_owners_ = a5;
  *(double *)&v10[6].__vftable = 24000000.0 / a5;
  v10[6].__shared_owners_ = 0;
  v10[6].__shared_weak_owners_ = 0;
  v10[7].__vftable = (std::__shared_weak_count_vtbl *)0x40B0000000000000;
  std::to_string(&v28, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v14 = std::string::insert(&v28, 0, (const std::string::value_type *)p_p, size);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v10[8].__vftable = (std::__shared_weak_count_vtbl *)v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v10[7].__shared_owners_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  v16 = v10 + 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  shared_weak_owners = (std::__shared_weak_count *)v10[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_27;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    v10[1].__shared_owners_ = (uint64_t)v16;
    v10[1].__shared_weak_owners_ = (uint64_t)v10;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
    v22 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v10[1].__shared_owners_ = (uint64_t)v16;
    v10[1].__shared_weak_owners_ = (uint64_t)v10;
  }
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_27:
  *a1 = v16;
  a1[1] = v10;
  do
    v25 = __ldxr(p_shared_owners);
  while (__stxr(v25 + 1, p_shared_owners));
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_1B5AAA420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMCP::Graph::Null_Timebase>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69849C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Graph::Null_Timebase>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69849C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Graph::Null_Timebase>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t HostedDSP_StreamProcessor::StreamProcessInfo::StreamProcessInfo(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  NSObject **v15;
  _BYTE v16[10];
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 24) = a5;
  *(_DWORD *)(a1 + 28) = 0;
  v6 = *(_QWORD *)(a4 + 112);
  if (*(_QWORD *)(a4 + 120) == v6 || v6 == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v15, "com.apple.coreaudio", "AMCP");
    v8 = *(std::__shared_weak_count **)v16;
    v9 = *v15;
    if (*(_QWORD *)v16)
    {
      v10 = (unint64_t *)(*(_QWORD *)v16 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      LODWORD(v15) = 67109634;
      HIDWORD(v15) = v13;
      *(_WORD *)v16 = 2080;
      *(_QWORD *)&v16[2] = "HostedDSP_StreamProcessor.cpp";
      v17 = 1024;
      v18 = 32;
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] There is no device/engine assigned for this DSP stream.", (uint8_t *)&v15, 0x18u);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(v6 + 8);
  }
  return a1;
}

uint64_t HostedDSP_StreamProcessor::PerformIO_ProcessStream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  const void *v8;
  _BYTE *v9;
  _BYTE *v10;
  __n128 v11;
  uint64_t (***v12)();
  uint64_t (***v13)();
  uint64_t (***v14)();
  uint64_t (***v15)();
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  char *v20;
  uint64_t v21;
  uint64_t (***v22)();
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  const void *v26;
  _QWORD *v27;
  _QWORD *v28;
  _BYTE v29[24];
  _BYTE *v30;
  _QWORD v31[3];
  _QWORD *v32;
  _BYTE v33[24];
  char *v34;
  uint64_t (**v35)();
  uint64_t v36;
  uint64_t (***v37)();
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1 == 1869968496)
  {
    HostedDSP_StreamProcessor::ProcessWithHostedDSP(a1);
    v30 = 0;
    v3 = HostedDSP_StreamProcessor::ProcessWithEngineAndIOProcessor(a1, (uint64_t)v29);
    v4 = v30;
    if (v30 == v29)
    {
      v5 = 4;
      v4 = v29;
      goto LABEL_13;
    }
LABEL_10:
    if (!v4)
      return v3;
    v5 = 5;
LABEL_13:
    (*(void (**)(void))(*v4 + 8 * v5))();
    return v3;
  }
  if (*(_DWORD *)a1 == 1768845428)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 120) == *(_QWORD *)(*(_QWORD *)(a1 + 16) + 112))
      v2 = 0;
    else
      v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 112);
    if (v2)
    {
      if (*(_DWORD *)(v2 + 100) == 4)
        return 0;
      v6 = (char *)operator new(0x28uLL);
      *(_QWORD *)v6 = &off_1E6984A68;
      v7 = *(_OWORD *)a1;
      *(_OWORD *)(v6 + 24) = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(v6 + 8) = v7;
      v34 = v6;
      v8 = *(const void **)(v2 + 112);
      if (v8)
      {
        if (v9)
        {
          v10 = v9;
          if (v9[24])
          {
            v11 = std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0>,void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::__clone((uint64_t)v6);
            v13 = v12;
            v14 = (uint64_t (***)())(v10 + 32);
            v37 = v13;
            if (v10 + 32 != (_BYTE *)&v35)
            {
              v15 = (uint64_t (***)())*((_QWORD *)v10 + 7);
              if (v15 == v14)
              {
                v13 = &v35;
                ((void (*)(uint64_t (***)(), uint64_t (***)(), __n128))(*v14)[3])(v14, &v35, v11);
                (*(void (**)(_QWORD))(**((_QWORD **)v10 + 7) + 32))(*((_QWORD *)v10 + 7));
                *((_QWORD *)v10 + 7) = v37;
                v37 = &v35;
              }
              else
              {
                v37 = (uint64_t (***)())*((_QWORD *)v10 + 7);
                *((_QWORD *)v10 + 7) = v13;
                v13 = &v35;
                if (v15 != &v35)
                {
                  if (!v15)
                    goto LABEL_35;
                  v16 = 5;
                  v13 = v15;
LABEL_34:
                  ((void (*)(uint64_t (***)(), __n128))(*v13)[v16])(v13, v11);
LABEL_35:
                  v20 = v34;
                  if (v34 == v33)
                  {
                    v21 = 4;
                    v20 = v33;
                  }
                  else
                  {
                    if (!v34)
                      goto LABEL_40;
                    v21 = 5;
                  }
                  (*(void (**)(__n128))(*(_QWORD *)v20 + 8 * v21))(v11);
LABEL_40:
                  v35 = &off_1E6984AF8;
                  v36 = v2;
                  v37 = &v35;
                  HostedDSP_StreamProcessor::ProcessWithEngineAndIOProcessor(a1, (uint64_t)&v35);
                  v22 = v37;
                  if (v37 == &v35)
                  {
                    v23 = 4;
                    v22 = &v35;
                  }
                  else
                  {
                    if (!v37)
                      goto LABEL_45;
                    v23 = 5;
                  }
                  (*v22)[v23]();
LABEL_45:
                  v31[0] = &off_1E6984B88;
                  v31[1] = v2;
                  v32 = v31;
                  v3 = HostedDSP_StreamProcessor::ProcessWithEngineAndIOProcessor(a1, (uint64_t)v31);
                  v24 = v32;
                  if (v32 == v31)
                  {
                    v25 = 4;
                    v24 = v31;
                  }
                  else
                  {
                    if (!v32)
                      goto LABEL_50;
                    v25 = 5;
                  }
                  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_50:
                  v26 = *(const void **)(v2 + 112);
                  if (!v26)
                    return v3;
                  v28 = v27 + 4;
                  v4 = (_QWORD *)v27[7];
                  v27[7] = 0;
                  if (v4 == v27 + 4)
                  {
                    v5 = 4;
                    v4 = v28;
                    goto LABEL_13;
                  }
                  goto LABEL_10;
                }
              }
              v16 = 4;
              goto LABEL_34;
            }
            v16 = 5;
            goto LABEL_34;
          }
        }
        (*(void (**)(char *))(*(_QWORD *)v6 + 40))(v6);
      }
      else
      {
        std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0>,void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::destroy_deallocate(v6);
      }
    }
    v35 = &off_1E6984C08;
    v36 = v2;
    v37 = &v35;
    v3 = HostedDSP_StreamProcessor::ProcessWithEngineAndIOProcessor(a1, (uint64_t)&v35);
    v17 = v37;
    if (v37 == &v35)
    {
      v18 = 4;
      v17 = &v35;
    }
    else
    {
      if (!v37)
      {
LABEL_29:
        HostedDSP_StreamProcessor::ProcessWithHostedDSP(a1);
        return v3;
      }
      v18 = 5;
    }
    (*v17)[v18]();
    goto LABEL_29;
  }
  return 0;
}

void sub_1B5AAA988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t HostedDSP_StreamProcessor::ProcessWithHostedDSP(uint64_t result)
{
  int v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __n128 ClientFormat;
  unsigned int *v18;
  _OWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t **v22;
  uint64_t **v23;
  std::logic_error *exception;
  _BYTE v25[24];
  int v26;
  int v27;

  v1 = *(_DWORD *)(result + 24);
  if (v1)
  {
    v2 = (unsigned int *)result;
    v3 = *(_QWORD *)(result + 16);
    if (!*(_DWORD *)(v3 + 108)
      || ((v4 = *(uint64_t **)(v3 + 112), *(uint64_t **)(v3 + 120) != v4) ? (v5 = v4 == 0) : (v5 = 1), v5))
    {
      v4 = (uint64_t *)(v3 + 408);
    }
    v6 = *v4;
    if (*(_QWORD *)(v6 + 8))
      v7 = *(unsigned int *)(v6 + 308);
    else
      v7 = 0;
    v8 = *(_QWORD *)(v3 + 112);
    v9 = *(_QWORD *)(v3 + 120);
    v10 = (uint64_t *)(v3 + 112);
    if (v8 != v9)
    {
      v11 = *(unsigned int **)(v3 + 264);
      v12 = *v11;
      if (v12 != (unint64_t)(*(_QWORD *)(v3 + 272) - (_QWORD)v11 - 8) >> 4)
        __assert_rtn("GetNumberBuffers", "CoreAudioBaseTypes.hpp", 1096, "GetAudioBufferList().mNumberBuffers == (mStorage.size() - kHeaderSize) / sizeof(AudioBuffer)");
      v13 = v11 + 4;
      v14 = v12 + 1;
      do
      {
        if (!--v14)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::out_of_range::out_of_range[abi:ne180100](exception, "accessing a CA::BufferList with an out-of-range index");
          __cxa_throw(exception, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
        }
        if (*(_QWORD *)(v8 + 104))
          v15 = (_QWORD *)(v8 + 32);
        else
          v15 = (_QWORD *)(v8 + 16);
        *v13 = *v15 + *(unsigned int *)(v8 + 48);
        *((_DWORD *)v13 - 2) = *(_DWORD *)(v8 + 84);
        *((_DWORD *)v13 - 1) = *(_DWORD *)(v8 + 80) * v1;
        v13 += 2;
        v8 += 128;
      }
      while (v8 != v9);
    }
    v16 = *(_QWORD *)(v3 + 288);
    *(_QWORD *)(v16 + 16) = *(_QWORD *)(v3 + 56) + v7;
    HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)v25, (uint64_t *)(v3 + 112));
    *(_DWORD *)(v16 + 12) = v26 * v1;
    ClientFormat = HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)v25, v10);
    *(_DWORD *)(v16 + 8) = v27;
    v18 = *(unsigned int **)(*((_QWORD *)v2 + 2) + 264);
    v19 = (_OWORD *)(*(uint64_t (**)(_QWORD, __n128))(**((_QWORD **)v2 + 1) + 120))(*((_QWORD *)v2 + 1), ClientFormat);
    v20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 1) + 128))(*((_QWORD *)v2 + 1));
    v21 = (_OWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 1) + 136))(*((_QWORD *)v2 + 1));
    if (*v2 != 1768845428)
      v19 = (_OWORD *)v20;
    kdebug_trace();
    if (*v2 == 1869968496)
    {
      v23 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 1) + 144))(*((_QWORD *)v2 + 1));
      HALS_IOContextHostedDSP::ProcessStream(**v23, (*v23)[1], *v2 | ((unint64_t)v2[7] << 32), *(_DWORD *)(*((_QWORD *)v2 + 2) + 12), v2[6], (unsigned int *)v16, v18, v19, v21);
    }
    else if (*v2 == 1768845428)
    {
      v22 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 1) + 144))(*((_QWORD *)v2 + 1));
      HALS_IOContextHostedDSP::ProcessStream(**v22, (*v22)[1], *v2 | ((unint64_t)v2[7] << 32), *(_DWORD *)(*((_QWORD *)v2 + 2) + 12), v2[6], v18, (unsigned int *)v16, v19, v21);
    }
    return kdebug_trace();
  }
  return result;
}

void sub_1B5AAAD14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t HostedDSP_StreamProcessor::ProcessWithEngineAndIOProcessor(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  AMCP::Log::Scope_Registry *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  HALS_IOProcessor *v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  caulk::concurrent::messenger *v33;
  _opaque_pthread_t *v34;
  mach_port_t v35;
  unsigned int v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v49;
  unsigned __int8 *v50;
  unsigned int v52[4];
  __int128 v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;

  v2 = (unsigned int *)(a1 + 24);
  if (*(_DWORD *)(a1 + 24))
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(uint64_t **)(v4 + 112);
    v6 = *(uint64_t **)(v4 + 120);
    if (v5 != v6)
    {
      v7 = 0;
      v49 = (unsigned int *)(a1 + 24);
      while (1)
      {
        v8 = *v5;
        v9 = *(_QWORD *)(*v5 + 8);
        if (v9)
        {
          v10 = *(AMCP::Log::Scope_Registry **)(a2 + 24);
          if (!v10)
            goto LABEL_8;
          v10 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *, uint64_t *))(*(_QWORD *)v10 + 48))(v10, v5);
          if ((_DWORD)v10)
            break;
        }
LABEL_56:
        v5 += 16;
        if (v5 == v6)
          return v7;
      }
      v8 = *v5;
LABEL_8:
      v11 = *(unsigned int *)(v8 + 308);
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(_QWORD *)(v12 + 32);
      v14 = *(_QWORD *)(v12 + 40);
      if (v13)
        v15 = (unsigned __int8 *)(v13 + v11);
      else
        v15 = 0;
      if (v14)
        v16 = (unsigned __int8 *)(v14 + v11);
      else
        v16 = 0;
      if (*(_DWORD *)a1 == 1869968496)
      {
        if (v5[13])
        {
          v26 = *v2;
          v55 = 0;
          v56 = v26;
          v27 = *(_DWORD *)(v8 + 4 * *(unsigned __int8 *)(v12 + 8) + 672);
          v55 = v27;
          v50 = v15;
          v28 = 24;
          if ((unint64_t)v15 | (unint64_t)v16)
            v28 = 48;
          v29 = *(_DWORD *)(v12 + v28);
          if (*(_DWORD *)(v12 + 108))
          {
            HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)v52, (uint64_t *)(v12 + 112));
            v27 = v55;
          }
          else
          {
            v30 = *(_OWORD *)(v12 + 384);
            *(_OWORD *)v52 = *(_OWORD *)(v12 + 368);
            v53 = v30;
            v54 = *(_QWORD *)(v12 + 400);
          }
          if (v27 * DWORD2(v53) > v29)
          {
            v31 = *(_QWORD *)(a1 + 16);
            if (*(_DWORD *)(v31 + 108))
            {
              HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)v52, (uint64_t *)(v31 + 112));
            }
            else
            {
              v32 = *(_OWORD *)(v31 + 384);
              *(_OWORD *)v52 = *(_OWORD *)(v31 + 368);
              v53 = v32;
              v54 = *(_QWORD *)(v31 + 400);
            }
            v55 = v29 / DWORD2(v53);
            AMCP::Log::Scope_Registry::get(v10);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v52, "com.apple.coreaudio", "AMCP");
            v33 = *(caulk::concurrent::messenger **)(*(_QWORD *)v52 + 8);
            v34 = pthread_self();
            v35 = pthread_mach_thread_np(v34);
            v36 = v55;
            v37 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
            *(_DWORD *)(v37 + 16) = 0;
            *(_BYTE *)(v37 + 20) = 16;
            *(_DWORD *)(v37 + 24) = v35;
            *(_QWORD *)(v37 + 32) = "HostedDSP_StreamProcessor.cpp";
            *(_DWORD *)(v37 + 40) = 248;
            *(_DWORD *)(v37 + 44) = v27;
            *(_DWORD *)(v37 + 48) = v36;
            *(_QWORD *)v37 = &off_1E6984A10;
            *(_QWORD *)(v37 + 8) = 0;
            caulk::concurrent::messenger::enqueue(v33, (caulk::concurrent::message *)v37);
            v38 = *(std::__shared_weak_count **)&v52[2];
            if (*(_QWORD *)&v52[2])
            {
              v39 = (unint64_t *)(*(_QWORD *)&v52[2] + 8);
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
          }
          v41 = v5[2];
          if (v41)
            v42 = (unsigned __int8 *)(v41 + v11);
          else
            v42 = 0;
          v43 = v5[4];
          if (v43)
            v44 = (unsigned __int8 *)(v43 + v11);
          else
            v44 = 0;
          HALS_IOProcessor::Process((HALS_IOProcessor *)v5[13], *(double *)(*v5 + 576), v42, &v56, v44, &v55, v50, v16);
          v2 = v49;
        }
        v45 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8));
        v46 = v5[2];
        if (v46)
          v47 = v46 + v11;
        else
          v47 = 0;
        v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 832))(v9, v45, *((unsigned int *)v5 + 24), *v5, v47, *(unsigned int *)(a1 + 24));
      }
      else if (*(_DWORD *)a1 == 1768845428)
      {
        v52[0] = 0;
        v52[0] = *(_DWORD *)(v8 + 4 * *(unsigned __int8 *)(v12 + 8) + 672);
        v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8));
        v18 = v5[2];
        v19 = v18 ? v18 + v11 : 0;
        v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 824))(v9, v17, *((unsigned int *)v5 + 24), *v5, v19, v52[0]);
        v20 = (HALS_IOProcessor *)v5[13];
        if (v20)
        {
          if (v5[14])
            v21 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 56);
          else
            v21 = v5 + 4;
          v22 = *v21;
          if (v22)
            v23 = (unsigned __int8 *)(v22 + v11);
          else
            v23 = 0;
          v24 = v5[2];
          if (v24)
            v25 = (unsigned __int8 *)(v24 + v11);
          else
            v25 = 0;
          HALS_IOProcessor::Process(v20, *(double *)(*v5 + 512), v23, v2, v25, v52, v15, v16);
        }
      }
      goto LABEL_56;
    }
  }
  return 0;
}

void sub_1B5AAB0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<HostedDSP_StreamProcessor::ProcessWithEngineAndIOProcessor(HostedDSP_StreamProcessor::StreamProcessInfo &,std::function<BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HostedDSP_StreamProcessor::ProcessWithEngineAndIOProcessor(HostedDSP_StreamProcessor::StreamProcessInfo &,std::function<BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HostedDSP_StreamProcessor::ProcessWithEngineAndIOProcessor clipped amount processed from:%u to:%u", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<HostedDSP_StreamProcessor::ProcessWithEngineAndIOProcessor(HostedDSP_StreamProcessor::StreamProcessInfo &,std::function<BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HostedDSP_StreamProcessor::ProcessWithEngineAndIOProcessor(HostedDSP_StreamProcessor::StreamProcessInfo &,std::function<BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6984C08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6984C08;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::operator()(uint64_t a1, uint64_t a2)
{
  int v3;
  BOOL v4;
  uint64_t v5;
  _BOOL4 v6;

  if (*(_QWORD *)(a1 + 8) == a2)
  {
    if (*(_BYTE *)(a2 + 124))
      v4 = *(_DWORD *)(a2 + 120) == 0;
    else
      v4 = 1;
    v3 = v4;
  }
  else
  {
    v3 = 0;
  }
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v6 = v5
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 680))(v5)
    && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 288) + 96) != 0;
  return v3 | v6;
}

uint64_t std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HostedDSP_StreamProcessor26ProcessInputStreamsWithDSPERNS_17StreamProcessInfoEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::target_type()
{
}

void std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6984B88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6984B88;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) == a2;
}

uint64_t std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HostedDSP_StreamProcessor26ProcessInputStreamsWithDSPERNS_17StreamProcessInfoEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::target_type()
{
}

void std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6984AF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6984AF8;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v5 = v4
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 680))(v4)
    && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 288) + 96) != 0;
  return v3 != a2 && v5;
}

uint64_t std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HostedDSP_StreamProcessor26ProcessInputStreamsWithDSPERNS_17StreamProcessInfoEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::target_type()
{
}

void std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0>,void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0>,void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E6984A68;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0>,void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6984A68;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0>,void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::operator()(uint64_t a1, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v4;
  unsigned int *v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t **v9;

  v4 = *a2;
  v5 = *a3;
  v6 = (_OWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16));
  v8 = (_OWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 136))(*(_QWORD *)(a1 + 16));
  if (*(_DWORD *)(a1 + 8) != 1768845428)
    v6 = (_OWORD *)v7;
  v9 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 144))(*(_QWORD *)(a1 + 16));
  HALS_IOContextHostedDSP::ProcessStream(**v9, (*v9)[1], *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned int *)(a1 + 36) << 32), *(_DWORD *)(*(_QWORD *)(a1 + 24) + 12), *(_DWORD *)(a1 + 32), v4, v5, v6, v8);
}

uint64_t std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0>,void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HostedDSP_StreamProcessor26ProcessInputStreamsWithDSPERNS_17StreamProcessInfoEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0>,void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::target_type()
{
}

void AMCP::DAL::Synchronized_Mixer::~Synchronized_Mixer(AMCP::DAL::Synchronized_Mixer *this)
{
  AMCP::DAL::Synchronized_Mixer::~Synchronized_Mixer(this);
  JUMPOUT(0x1B5E50688);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E6984C88;
  v2 = (char *)this + 120;
  v3 = (char *)*((_QWORD *)this + 18);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  *(_QWORD *)this = off_1E6993620;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
}

void AMCP::DAL::Synchronized_Mixer::receive_data(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  os_unfair_lock_s *v6;
  uint64_t v7;

  v6 = (os_unfair_lock_s *)(a1 + 152);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  AMCP::DAL::Mixing_Ring_Buffer::receive_data((_QWORD *)a1, v7, a3);
  os_unfair_lock_unlock(v6);
  AMCP::DAL::Synchronizer::receive_data(*(_QWORD *)(a1 + 104), a2, (uint64_t)a3);
}

void sub_1B5AAB7C0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Ring_Buffer_Base::get_time_range@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *(_OWORD *)a2 = *(_OWORD *)(this + 8);
  v2 = *(_QWORD *)(this + 32);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(this + 24);
  *(_QWORD *)(a2 + 24) = v2;
  v3 = *(_QWORD *)(this + 40);
  *(_QWORD *)(a2 + 32) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(this + 48);
  v6 = *(_QWORD *)(this + 72);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(this + 64);
  *(_QWORD *)(a2 + 64) = v6;
  v7 = *(_QWORD *)(this + 80);
  *(_QWORD *)(a2 + 72) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return this;
}

uint64_t AMCP::DAL::Synchronized_Mixer::get_allowed_read_range(AMCP::DAL::Synchronized_Mixer *this)
{
  return (*(uint64_t (**)(AMCP::DAL::Synchronized_Mixer *))(*(_QWORD *)this + 64))(this);
}

void AMCP::DAL::Synchronized_Mixer::reuse(AMCP::DAL::Synchronized_Mixer *this)
{
  uint64_t v1;
  _QWORD *i;

  v1 = *((_QWORD *)this + 13);
  os_unfair_lock_lock((os_unfair_lock_t)v1);
  for (i = *(_QWORD **)(v1 + 24); i; i = (_QWORD *)*i)
    std::__optional_destruct_base<AMCP::DAL::DAL_Time_Range,false>::reset[abi:ne180100]((uint64_t)(i + 32));
  os_unfair_lock_unlock((os_unfair_lock_t)v1);
}

void AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(uint64_t a1, int *a2, _QWORD *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  std::string *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _BOOL8 v25;
  _QWORD *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  NSObject *v51;
  _opaque_pthread_t *v52;
  mach_port_t v53;
  void *exception;
  uint64_t v55;
  NSObject *v56;
  _opaque_pthread_t *v57;
  mach_port_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  std::string __p;
  uint64_t v64;
  int v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  int v75;
  std::string v76;
  uint64_t v77;
  int v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  __int128 v87;
  uint64_t v88;
  uint64_t (**v89)();
  __int128 v90;
  uint64_t v91;
  std::string v92;
  std::logic_error v93;
  std::logic_error v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  char v100;
  _BYTE v101[24];
  _BYTE *v102;
  _BYTE buf[24];
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v74 = a1;
  v75 = *a2;
  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v76, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    v76 = *(std::string *)(a2 + 2);
  v77 = *((_QWORD *)a2 + 4);
  v78 = a2[10];
  v79 = *(_OWORD *)a3;
  v6 = a3[3];
  v80 = a3[2];
  v81 = v6;
  v7 = (std::__shared_weak_count *)a3[4];
  v82 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v83 = *(_OWORD *)(a3 + 5);
  v10 = a3[8];
  v84 = a3[7];
  v85 = v10;
  v11 = (std::__shared_weak_count *)a3[9];
  v86 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(_QWORD *)(a1 + 104);
  v61 = v74;
  v62 = v75;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  else
    __p = v76;
  v64 = v77;
  v65 = v78;
  v66 = v79;
  v67 = v80;
  v68 = v6;
  v69 = v7;
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v70 = v83;
  v71 = v84;
  v72 = v10;
  v73 = v11;
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v102 = 0;
  v19 = (char *)operator new(0x90uLL);
  *(_QWORD *)v19 = off_1E6984DF8;
  *((_QWORD *)v19 + 1) = v61;
  *((_DWORD *)v19 + 4) = v62;
  v20 = (std::string *)(v19 + 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v19 + 5) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *((_QWORD *)v19 + 6) = v64;
  *((_DWORD *)v19 + 14) = v65;
  *((_OWORD *)v19 + 4) = v66;
  *((_QWORD *)v19 + 10) = v67;
  *((_QWORD *)v19 + 11) = v6;
  *((_QWORD *)v19 + 12) = v7;
  if (v7)
  {
    v21 = (unint64_t *)&v7->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *(_OWORD *)(v19 + 104) = v70;
  *((_QWORD *)v19 + 15) = v71;
  *((_QWORD *)v19 + 16) = v10;
  *((_QWORD *)v19 + 17) = v11;
  if (v11)
  {
    v23 = (unint64_t *)&v11->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v102 = v19;
  os_unfair_lock_lock((os_unfair_lock_t)v14);
  if (!std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((_QWORD *)(v14 + 8), a2))
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v51 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      v52 = pthread_self();
      v53 = pthread_mach_thread_np(v52);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v53;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Synchronizer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 275;
      LOWORD(v104) = 2080;
      *(_QWORD *)((char *)&v104 + 2) = "not (_is_contributing(source_id))";
      _os_log_error_impl(&dword_1B57BA000, v51, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s set_anchor_time_and_nominal_buffer_size invalid source!", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v100);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"set_anchor_time_and_nominal_buffer_size invalid source!", (uint64_t)&v92);
    std::logic_error::logic_error(&v93, &v92);
    v93.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v94, &v93);
    v96 = 0;
    v97 = 0;
    v98 = 0;
    v99 = -1;
    v94.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v95 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v94);
    *((_QWORD *)&v104 + 1) = "void AMCP::DAL::Synchronizer::set_anchor_time_and_nominal_buffer_size(const Source_ID &, co"
                             "nst DAL_Time_Range &, std::function<void ()>)";
    *(_QWORD *)&v105 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
    DWORD2(v105) = 275;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v87);
    v90 = v87;
    v55 = v88;
    v88 = 0;
    v89 = off_1E69A20A0;
    v91 = v55;
    v87 = 0uLL;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v89);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (!AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(v14 + 64), (AMCP::DAL::DAL_Time *)(v14 + 104)))
  {
    if (round(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v14 + 64))) != 0.0
      && !AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a3, (AMCP::DAL::DAL_Time *)(v14 + 64)))
    {
      goto LABEL_37;
    }
LABEL_36:
    caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::set(v14 + 64, (uint64_t)a3, (uint64_t)a3);
    goto LABEL_37;
  }
  v25 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a3, (AMCP::DAL::DAL_Time *)(v14 + 104));
  if (v25)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v25);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v56 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      v57 = pthread_self();
      v58 = pthread_mach_thread_np(v57);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v58;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Synchronizer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 296;
      LOWORD(v104) = 2080;
      *(_QWORD *)((char *)&v104 + 2) = "not (range.start() >= m_emitted_time_range.end())";
      _os_log_error_impl(&dword_1B57BA000, v56, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronizer::anchoring to a past time", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v100);
    v59 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Synchronizer::anchoring to a past time", (uint64_t)&v92);
    std::logic_error::logic_error(&v93, &v92);
    v93.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v94, &v93);
    v96 = 0;
    v97 = 0;
    v98 = 0;
    v99 = -1;
    v94.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v95 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v94);
    *((_QWORD *)&v104 + 1) = "void AMCP::DAL::Synchronizer::set_anchor_time_and_nominal_buffer_size(const Source_ID &, co"
                             "nst DAL_Time_Range &, std::function<void ()>)";
    *(_QWORD *)&v105 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
    DWORD2(v105) = 296;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v87);
    v90 = v87;
    v60 = v88;
    v88 = 0;
    v89 = off_1E69A20A0;
    v91 = v60;
    v87 = 0uLL;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v89);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v59, (uint64_t)buf);
  }
  if (*(_QWORD *)(v14 + 32) == 1 || *(_BYTE *)(v14 + 168))
    goto LABEL_36;
LABEL_37:
  AMCP::DAL::Synchronizer::_check_sources_for_overloads(v14);
  v26 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((_QWORD *)(v14 + 8), a2);
  if (!v26)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = v26;
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (const AMCP::DAL::DAL_Time *)a3, (const AMCP::DAL::DAL_Time *)a3);
  *(_OWORD *)(v27 + 15) = *(_OWORD *)buf;
  v27[17] = *(_QWORD *)&buf[16];
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)(v27 + 18), &v104);
  *((_OWORD *)v27 + 10) = v105;
  v27[22] = v106;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)(v27 + 23), &v107);
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
  if (*((_QWORD *)&v107 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (*((_QWORD *)&v104 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (AMCP::DAL::DAL_Time *)(a3 + 5), (AMCP::DAL::DAL_Time *)a3);
  *((_DWORD *)v27 + 52) = *(_DWORD *)buf;
  *(_OWORD *)(v27 + 27) = *(_OWORD *)&buf[8];
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](v27 + 29, v104, *((uint64_t *)&v104 + 1));
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  *((_DWORD *)v27 + 86) = *(_DWORD *)a3;
  v27[44] = a3[1];
  v27[45] = a3[2];
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](v27 + 46, a3[3], a3[4]);
  std::__optional_destruct_base<AMCP::DAL::DAL_Time_Range,false>::reset[abi:ne180100]((uint64_t)(v27 + 32));
  *((_BYTE *)v27 + 248) = 0;
  if (*(_QWORD *)(v14 + 32) == 1 || *(_BYTE *)(v14 + 168))
  {
    *(_BYTE *)(v14 + 168) = 0;
    if (v102)
      (*(void (**)(_BYTE *))(*(_QWORD *)v102 + 48))(v102);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v14);
  v37 = v102;
  if (v102 == v101)
  {
    v38 = 4;
    v37 = v101;
    goto LABEL_61;
  }
  if (v102)
  {
    v38 = 5;
LABEL_61:
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
  v39 = v73;
  if (v73)
  {
    v40 = (unint64_t *)&v73->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v69;
  if (v69)
  {
    v43 = (unint64_t *)&v69->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v45 = v86;
  if (v86)
  {
    v46 = (unint64_t *)&v86->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = v82;
  if (v82)
  {
    v49 = (unint64_t *)&v82->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
}

void sub_1B5AAC1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  os_unfair_lock_s *v61;
  uint64_t v62;
  _QWORD *v64;
  uint64_t v65;

  os_unfair_lock_unlock(v61);
  v64 = *(_QWORD **)(v62 - 200);
  if (v64 == (_QWORD *)(v62 - 224))
  {
    v65 = 4;
    v64 = (_QWORD *)(v62 - 224);
  }
  else
  {
    if (!v64)
      goto LABEL_6;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_6:
  AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0::~$_0((uint64_t)&a9);
  AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0::~$_0((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Synchronized_Mixer::set_nominal_buffer_size(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)v5);
  if (std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((_QWORD *)(v5 + 8), a2))
  {
    v6 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((_QWORD *)(v5 + 8), a2);
    if (!v6)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    *((_DWORD *)v6 + 52) = *(_DWORD *)a3;
    v6[27] = *(_QWORD *)(a3 + 8);
    v7 = *(_QWORD *)(a3 + 24);
    v6[28] = *(_QWORD *)(a3 + 16);
    std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](v6 + 29, v7, *(_QWORD *)(a3 + 32));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v5);
}

void sub_1B5AAC490(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Synchronized_Mixer::reset_time(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  BOOL v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64[2];
  uint64_t v65;
  __int128 v66;
  __int128 v67;

  v4 = *(_QWORD *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)v4);
  if (std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((_QWORD *)(v4 + 8), a2))
  {
    v5 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((_QWORD *)(v4 + 8), a2);
    if (!v5)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v6 = v5;
    v8 = v5[46];
    v7 = v5[47];
    *(_QWORD *)&v67 = v8;
    *((_QWORD *)&v67 + 1) = v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      *((_QWORD *)&v57 + 1) = v7;
      do
        v11 = __ldxr(v9);
      while (__stxr(v11 + 1, v9));
    }
    else
    {
      *((_QWORD *)&v57 + 1) = 0;
    }
    *(_QWORD *)&v57 = v8;
    v58 = 2;
    v59 = 0;
    v60 = 0;
    v61 = v57;
    v57 = 0uLL;
    *(_QWORD *)&v52 = v8;
    *((_QWORD *)&v52 + 1) = v7;
    if (v7)
    {
      v12 = (unint64_t *)(v7 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v53 = 2;
    v54 = 0;
    v55 = 0;
    v56 = v52;
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v62, (const AMCP::DAL::DAL_Time *)&v58, (const AMCP::DAL::DAL_Time *)&v53);
    *(_OWORD *)(v6 + 15) = v62;
    v6[17] = v63;
    std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)(v6 + 18), v64);
    *((_OWORD *)v6 + 10) = v64[1];
    v6[22] = v65;
    std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)(v6 + 23), &v66);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
    if (*((_QWORD *)&v66 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v64[0] + 1);
    if (*((_QWORD *)&v64[0] + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v64[0] + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
    if (*((_QWORD *)&v56 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
    if (*((_QWORD *)&v61 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v57 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v67;
    if (*((_QWORD *)&v67 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    LODWORD(v62) = 2;
    *((_QWORD *)&v62 + 1) = 0;
    v63 = 0;
    v64[0] = v29;
    v6[45] = 0;
    *(_OWORD *)(v6 + 43) = v62;
    std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)(v6 + 46), v64);
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v64[0] + 1);
    if (*((_QWORD *)&v64[0] + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v64[0] + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
    if (*((_QWORD *)&v67 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  *(_QWORD *)&v38 = *(_QWORD *)(v4 + 48);
  v39 = *(_QWORD *)(v4 + 56);
  *(_QWORD *)&v40 = v38;
  *((_QWORD *)&v40 + 1) = v39;
  if (v39)
  {
    v41 = (unint64_t *)(v39 + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
    v43 = *(std::__shared_weak_count **)(v4 + 56);
    LODWORD(v62) = 2;
    *((_QWORD *)&v62 + 1) = 0;
    v63 = 0;
    v64[0] = v40;
    *(_QWORD *)&v38 = *(_QWORD *)(v4 + 48);
    *((_QWORD *)&v38 + 1) = v43;
    v44 = v43 == 0;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v46 = __ldxr(p_shared_owners);
      while (__stxr(v46 + 1, p_shared_owners));
    }
  }
  else
  {
    v43 = 0;
    LODWORD(v62) = 2;
    *((_QWORD *)&v62 + 1) = 0;
    v63 = 0;
    v64[0] = (unint64_t)v38;
    v44 = 1;
    *((_QWORD *)&v38 + 1) = 0;
  }
  v58 = 2;
  v59 = 0;
  v60 = 0;
  v61 = v38;
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::set(v4 + 64, (uint64_t)&v62, (uint64_t)&v58);
  if (!v44)
  {
    v47 = (unint64_t *)&v43->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v49 = (std::__shared_weak_count *)*((_QWORD *)&v64[0] + 1);
  if (*((_QWORD *)&v64[0] + 1))
  {
    v50 = (unint64_t *)(*((_QWORD *)&v64[0] + 1) + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v4);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  AMCP::DAL::Ring_Buffer_Base::reset_time(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 152));
}

void sub_1B5AAC954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v19);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v18);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v20 - 80);
  os_unfair_lock_unlock(v17);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Synchronized_Mixer::commit_direct_write(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  uint64_t v7;

  v6 = (os_unfair_lock_s *)(a1 + 152);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  AMCP::DAL::Ring_Buffer_Base::commit_direct_write(a1, v7, a3);
  os_unfair_lock_unlock(v6);
  AMCP::DAL::Synchronizer::receive_data(*(_QWORD *)(a1 + 104), a2, a3 + 16);
}

void sub_1B5AAC9F4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Synchronized_Mixer::get_direct_write_ranges(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  os_unfair_lock_s *v6;

  v6 = a1 + 38;
  os_unfair_lock_lock(a1 + 38);
  AMCP::DAL::Mixing_Ring_Buffer::get_direct_write_ranges((uint64_t)a1, a2, a3);
  os_unfair_lock_unlock(v6);
}

void sub_1B5AACA54(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Synchronized_Mixer::add_source(AMCP::Log::Scope_Registry *a1, unsigned int *a2, int a3)
{
  uint64_t v4;
  void **v5;
  _QWORD *v6;
  int data;
  _OWORD *v8;
  int v9;
  __int128 *v10;
  AMCP::Log::Scope_Registry *v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  std::string *v32;
  std::string *v33;
  NSObject **v34;
  std::string *v35;
  std::__shared_weak_count *v36;
  std::string::size_type v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::string::size_type v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  unint64_t *v45;
  unint64_t v46;
  std::string::size_type v47;
  unint64_t *v48;
  unint64_t v49;
  std::string::size_type v50;
  std::string::size_type v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  float v57;
  float v58;
  unint64_t v59;
  _BOOL8 v60;
  unint64_t v61;
  unint64_t v62;
  int8x8_t prime;
  void *v64;
  void *v65;
  uint64_t v66;
  NSObject *v67;
  Class isa;
  uint8x8_t v69;
  unint64_t v70;
  uint8x8_t v71;
  uint64_t v72;
  NSObject *v73;
  unint64_t v74;
  NSObject **v75;
  NSObject **v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  _QWORD *v90;
  void *v91;
  NSObject *v92;
  _opaque_pthread_t *v93;
  mach_port_t v94;
  void *exception;
  NSObject *v96;
  _opaque_pthread_t *v97;
  mach_port_t v98;
  void *v99;
  AMCP::Log::Scope_Registry *v100;
  uint64_t v101;
  unint64_t v102;
  std::string v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  __int128 v107;
  uint64_t v108;
  _BYTE v109[24];
  uint64_t v110;
  std::string v111;
  std::logic_error v112;
  void (**v113)();
  std::logic_error v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  char v119;
  uint8_t buf[8];
  __int128 __p;
  __int128 v122;
  const char *v123;
  int v124;
  _QWORD v125[4];
  std::__shared_weak_count *v126;
  __int128 v127;
  std::string::size_type v128;
  std::string::size_type v129;
  std::__shared_weak_count *v130;
  char v131;
  __int128 v132;
  std::string::size_type v133;
  __int128 v134;
  char v135;
  __int128 v136;
  std::string::size_type v137;
  std::string::size_type v138;
  std::string::size_type v139;
  __int128 v140;
  std::string::size_type v141;
  std::string::size_type v142;
  std::string::size_type v143;
  char v144;
  __int128 v145;
  std::string::size_type v146;
  __int128 v147;
  NSObject **v148;
  std::logic_error v149;
  __int128 v150;
  const char *v151;
  int v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v92 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
    {
      v93 = pthread_self();
      v94 = pthread_mach_thread_np(v93);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v94;
      LOWORD(__p) = 2080;
      *(_QWORD *)((char *)&__p + 2) = "Synchronized_Mixer.cpp";
      WORD5(__p) = 1024;
      HIDWORD(__p) = 48;
      LOWORD(v122) = 2080;
      *(_QWORD *)((char *)&v122 + 2) = "not (buffer_alignment == Buffer_Alignment::Aligned_For_Output)";
      _os_log_error_impl(&dword_1B57BA000, v92, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronized_Mixer has a source that's input aligned", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v107);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Synchronized_Mixer has a source that's input aligned", (uint64_t)&v103);
    std::logic_error::logic_error((std::logic_error *)&v111, &v103);
    v111.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)&v148, (const std::logic_error *)&v111);
    v150 = 0uLL;
    v151 = 0;
    v152 = -1;
    v148 = (NSObject **)off_1E69A1208;
    v149.__imp_.__imp_ = (const char *)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v148);
    *((_QWORD *)&v122 + 1) = "virtual void AMCP::DAL::Synchronized_Mixer::add_source(const Source_ID &, Buffer_Alignment)";
    v123 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronized_Mixer.cpp";
    v124 = 48;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v109);
    v114 = *(std::logic_error *)v109;
    v113 = (void (**)())off_1E69A20A0;
    v115 = *(_QWORD *)&v109[16];
    memset(v109, 0, sizeof(v109));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v113);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = *((_QWORD *)a1 + 13);
  os_unfair_lock_lock((os_unfair_lock_t)v4);
  v5 = (void **)(v4 + 8);
  v6 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((_QWORD *)(v4 + 8), a2);
  if (std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((_QWORD *)(v4 + 8), a2))
  {
    if (*((_BYTE *)v6 + 200))
      *((_BYTE *)v6 + 200) = 0;
    goto LABEL_143;
  }
  data = *a2;
  LODWORD(v103.__r_.__value_.__l.__data_) = *a2;
  v8 = a2 + 2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v103.__r_.__value_.__r.__words[1], *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
    data = (int)v103.__r_.__value_.__l.__data_;
  }
  else
  {
    *(_OWORD *)&v103.__r_.__value_.__r.__words[1] = *v8;
    v104 = *((_QWORD *)a2 + 3);
  }
  v105 = *((_QWORD *)a2 + 4);
  v106 = a2[10];
  *(_DWORD *)buf = data;
  v9 = SHIBYTE(v104);
  if (SHIBYTE(v104) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p, (const std::string::value_type *)v103.__r_.__value_.__l.__size_, v103.__r_.__value_.__r.__words[2]);
  }
  else
  {
    __p = *(_OWORD *)&v103.__r_.__value_.__r.__words[1];
    *(_QWORD *)&v122 = v104;
  }
  v10 = (__int128 *)(v4 + 48);
  *((_QWORD *)&v122 + 1) = v105;
  LODWORD(v123) = v106;
  v124 = 0;
  v11 = (AMCP::Log::Scope_Registry *)AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)v125, (uint64_t *)(v4 + 48));
  v100 = v11;
  v131 = 0;
  v12 = *(_OWORD *)(v4 + 48);
  v13 = *(_QWORD *)(v4 + 56);
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  LODWORD(v132) = 1;
  *((_QWORD *)&v132 + 1) = 0;
  v133 = 0;
  v134 = v12;
  v135 = 0;
  LOBYTE(v136) = 0;
  v144 = 0;
  v16 = *v10;
  v17 = *(_QWORD *)(v4 + 56);
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  LODWORD(v145) = 1;
  v146 = 0;
  *((_QWORD *)&v145 + 1) = 0;
  v147 = v16;
  if (!*(_QWORD *)v10)
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v148, "com.apple.coreaudio", "AMCP");
    v96 = *v148;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v148);
    if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
    {
      v97 = pthread_self();
      v98 = pthread_mach_thread_np(v97);
      LODWORD(v148) = 67109890;
      HIDWORD(v148) = v98;
      LOWORD(v149.__vftable) = 2080;
      *(std::logic_error_vtbl **)((char *)&v149.__vftable + 2) = (std::logic_error_vtbl *)"Synchronizer.cpp";
      WORD1(v149.__imp_.__imp_) = 1024;
      HIDWORD(v149.__imp_.__imp_) = 27;
      LOWORD(v150) = 2080;
      *(_QWORD *)((char *)&v150 + 2) = "not (timebase)";
      _os_log_error_impl(&dword_1B57BA000, v96, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v148, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v119);
    v99 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v111);
    std::logic_error::logic_error(&v112, &v111);
    v112.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v113, &v112);
    v115 = 0;
    v116 = 0;
    v117 = 0;
    v118 = -1;
    v113 = off_1E69A1208;
    v114.__imp_.__imp_ = (const char *)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v148, (uint64_t)&v113);
    *((_QWORD *)&v150 + 1) = "AMCP::DAL::Synchronizer_Source::Synchronizer_Source(Source_ID, const Timebase_Ref &)";
    v151 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
    v152 = 27;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v107);
    *(_QWORD *)v109 = off_1E69A20A0;
    *(_OWORD *)&v109[8] = v107;
    v110 = v108;
    v107 = 0uLL;
    v108 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v148, (uint64_t)v109);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v99, (uint64_t)&v148);
  }
  v101 = v4;
  if (v9 < 0)
    operator delete((void *)v103.__r_.__value_.__l.__size_);
  v20 = *a2;
  v21 = std::hash<AMCP::Terminal_Identifier>::operator()((uint64_t)(a2 + 2));
  v22 = 3864292196u
      - 0x395B586CA42E166BLL
      * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v21) ^ ((0xC6A4A7935BD1E995 * v21) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v20) ^ ((0xC6A4A7935BD1E995 * v20) >> 47)) + 3864292196u));
  v23 = v101;
  v24 = *(_QWORD *)(v101 + 16);
  if (!v24)
    goto LABEL_39;
  v25 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
  v25.i16[0] = vaddlv_u8(v25);
  v26 = v25.u32[0];
  if (v25.u32[0] > 1uLL)
  {
    v27 = 3864292196u
        - 0x395B586CA42E166BLL
        * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v21) ^ ((0xC6A4A7935BD1E995 * v21) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v20) ^ ((0xC6A4A7935BD1E995 * v20) >> 47)) + 3864292196u));
    if (v22 >= v24)
      v27 = v22 % v24;
  }
  else
  {
    v27 = v22 & (v24 - 1);
  }
  v102 = v27;
  v28 = (_QWORD *)*((_QWORD *)*v5 + v27);
  if (!v28)
    goto LABEL_39;
  v29 = 3864292196u
      - 0x395B586CA42E166BLL
      * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v21) ^ ((0xC6A4A7935BD1E995 * v21) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v20) ^ ((0xC6A4A7935BD1E995 * v20) >> 47)) + 3864292196u));
  v30 = (_QWORD *)*v28;
  if (!*v28)
    goto LABEL_38;
  do
  {
    v31 = v30[1];
    if (v31 == v29)
    {
      if (AMCP::DAL::Source_ID::operator==((uint64_t)(v30 + 2), a2))
        goto LABEL_121;
      goto LABEL_36;
    }
    if (v26 > 1)
    {
      if (v31 >= v24)
        v31 %= v24;
    }
    else
    {
      v31 &= v24 - 1;
    }
    if (v31 != v102)
      break;
LABEL_36:
    v30 = (_QWORD *)*v30;
  }
  while (v30);
  v23 = v101;
LABEL_38:
  v22 = v29;
LABEL_39:
  v32 = (std::string *)operator new(0x180uLL);
  v33 = v32;
  v34 = (NSObject **)(v23 + 24);
  v148 = (NSObject **)v32;
  v149.__vftable = (std::logic_error_vtbl *)(v23 + 24);
  LOBYTE(v149.__imp_.__imp_) = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v32->__r_.__value_.__l.__size_ = v22;
  LODWORD(v32->__r_.__value_.__r.__words[2]) = v20;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v32 + 1, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v32[1].__r_.__value_.__l.__data_ = *v8;
    v32[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
  }
  v33[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 4);
  LODWORD(v33[2].__r_.__value_.__r.__words[1]) = a2[10];
  LODWORD(v33[2].__r_.__value_.__r.__words[2]) = *(_DWORD *)buf;
  v35 = v33 + 3;
  if (SBYTE7(v122) < 0)
  {
    std::string::__init_copy_ctor_external(v35, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
  }
  else
  {
    *(_OWORD *)&v35->__r_.__value_.__l.__data_ = __p;
    v33[3].__r_.__value_.__r.__words[2] = v122;
  }
  v33[4].__r_.__value_.__r.__words[0] = *((_QWORD *)&v122 + 1);
  LODWORD(v33[4].__r_.__value_.__r.__words[1]) = (_DWORD)v123;
  LODWORD(v33[4].__r_.__value_.__r.__words[2]) = v124;
  *(_OWORD *)&v33[5].__r_.__value_.__l.__data_ = *(_OWORD *)v100;
  v37 = v125[3];
  v36 = v126;
  v33[5].__r_.__value_.__r.__words[2] = *((_QWORD *)v100 + 2);
  v33[6].__r_.__value_.__r.__words[0] = v37;
  v33[6].__r_.__value_.__l.__size_ = (std::string::size_type)v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v39 = __ldxr(p_shared_owners);
    while (__stxr(v39 + 1, p_shared_owners));
  }
  *(_OWORD *)&v33[6].__r_.__value_.__r.__words[2] = v127;
  v40 = v129;
  v33[7].__r_.__value_.__l.__size_ = v128;
  v33[7].__r_.__value_.__r.__words[2] = v40;
  v41 = v130;
  v33[8].__r_.__value_.__r.__words[0] = (std::string::size_type)v130;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v33[8].__r_.__value_.__s.__data_[8] = v131;
  *(_OWORD *)&v33[8].__r_.__value_.__r.__words[2] = v132;
  v44 = v134;
  v33[9].__r_.__value_.__l.__size_ = v133;
  *(_OWORD *)&v33[9].__r_.__value_.__r.__words[2] = v44;
  if (*((_QWORD *)&v44 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v33[10].__r_.__value_.__s.__data_[8] = v135;
  v33[10].__r_.__value_.__s.__data_[16] = 0;
  v33[14].__r_.__value_.__s.__data_[0] = 0;
  if (v144)
  {
    *(_OWORD *)&v33[10].__r_.__value_.__r.__words[2] = v136;
    v33[11].__r_.__value_.__l.__size_ = v137;
    v47 = v139;
    v33[11].__r_.__value_.__r.__words[2] = v138;
    v33[12].__r_.__value_.__r.__words[0] = v47;
    if (v47)
    {
      v48 = (unint64_t *)(v47 + 8);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    *(_OWORD *)&v33[12].__r_.__value_.__r.__words[1] = v140;
    v50 = v142;
    v33[13].__r_.__value_.__r.__words[0] = v141;
    v33[13].__r_.__value_.__l.__size_ = v50;
    v51 = v143;
    v33[13].__r_.__value_.__r.__words[2] = v143;
    if (v51)
    {
      v52 = (unint64_t *)(v51 + 8);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    v33[14].__r_.__value_.__s.__data_[0] = 1;
  }
  *(_OWORD *)&v33[14].__r_.__value_.__r.__words[1] = v145;
  v54 = v147;
  v33[15].__r_.__value_.__r.__words[0] = v146;
  *(_OWORD *)&v33[15].__r_.__value_.__r.__words[1] = v54;
  if (*((_QWORD *)&v54 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  LOBYTE(v149.__imp_.__imp_) = 1;
  v57 = (float)(unint64_t)(*(_QWORD *)(v23 + 32) + 1);
  v58 = *(float *)(v23 + 40);
  v59 = v102;
  if (!v24 || (float)(v58 * (float)v24) < v57)
  {
    v60 = 1;
    if (v24 >= 3)
      v60 = (v24 & (v24 - 1)) != 0;
    v61 = v60 | (2 * v24);
    v62 = vcvtps_u32_f32(v57 / v58);
    if (v61 <= v62)
      prime = (int8x8_t)v62;
    else
      prime = (int8x8_t)v61;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)&prime <= v24)
    {
      if (*(_QWORD *)&prime < v24)
      {
        v70 = vcvtps_u32_f32((float)*(unint64_t *)(v23 + 32) / *(float *)(v23 + 40));
        if (v24 < 3 || (v71 = (uint8x8_t)vcnt_s8((int8x8_t)v24), v71.i16[0] = vaddlv_u8(v71), v71.u32[0] > 1uLL))
        {
          v70 = std::__next_prime(v70);
        }
        else
        {
          v72 = 1 << -(char)__clz(v70 - 1);
          if (v70 >= 2)
            v70 = v72;
        }
        if (*(_QWORD *)&prime <= v70)
          prime = (int8x8_t)v70;
        if (*(_QWORD *)&prime >= v24)
        {
          v24 = *(_QWORD *)(v23 + 16);
        }
        else
        {
          if (prime)
            goto LABEL_77;
          v91 = *v5;
          *v5 = 0;
          if (v91)
            operator delete(v91);
          v24 = 0;
          *(_QWORD *)(v23 + 16) = 0;
        }
      }
    }
    else
    {
LABEL_77:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v64 = operator new(8 * *(_QWORD *)&prime);
      v65 = *v5;
      *v5 = v64;
      if (v65)
        operator delete(v65);
      v66 = 0;
      *(int8x8_t *)(v23 + 16) = prime;
      do
        *((_QWORD *)*v5 + v66++) = 0;
      while (*(_QWORD *)&prime != v66);
      v67 = *v34;
      if (*v34)
      {
        isa = v67[1].isa;
        v69 = (uint8x8_t)vcnt_s8(prime);
        v69.i16[0] = vaddlv_u8(v69);
        if (v69.u32[0] > 1uLL)
        {
          if ((unint64_t)isa >= *(_QWORD *)&prime)
            isa = (Class)((unint64_t)isa % *(_QWORD *)&prime);
        }
        else
        {
          isa = (Class)((unint64_t)isa & (*(_QWORD *)&prime - 1));
        }
        *((_QWORD *)*v5 + (_QWORD)isa) = v34;
        v73 = v67->isa;
        if (v67->isa)
        {
          do
          {
            v74 = (unint64_t)v73[1].isa;
            if (v69.u32[0] > 1uLL)
            {
              if (v74 >= *(_QWORD *)&prime)
                v74 %= *(_QWORD *)&prime;
            }
            else
            {
              v74 &= *(_QWORD *)&prime - 1;
            }
            if ((Class)v74 != isa)
            {
              if (!*((_QWORD *)*v5 + v74))
              {
                *((_QWORD *)*v5 + v74) = v67;
                goto LABEL_102;
              }
              v67->isa = v73->isa;
              v73->isa = (*((NSObject **)*v5 + v74))->isa;
              **((_QWORD **)*v5 + v74) = v73;
              v73 = v67;
            }
            v74 = (unint64_t)isa;
LABEL_102:
            v67 = v73;
            v73 = v73->isa;
            isa = (Class)v74;
          }
          while (v73);
        }
      }
      v24 = (unint64_t)prime;
    }
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v22 >= v24)
        v59 = v22 % v24;
      else
        v59 = v22;
    }
    else
    {
      v59 = (v24 - 1) & v22;
    }
  }
  v75 = (NSObject **)*((_QWORD *)*v5 + v59);
  v76 = v148;
  if (v75)
  {
    *v148 = *v75;
  }
  else
  {
    *v148 = *v34;
    *v34 = v76;
    *((_QWORD *)*v5 + v59) = v34;
    if (!*v76)
      goto LABEL_120;
    v77 = (unint64_t)(*v76)[1].isa;
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v77 >= v24)
        v77 %= v24;
    }
    else
    {
      v77 &= v24 - 1;
    }
    v75 = (NSObject **)((char *)*v5 + 8 * v77);
  }
  *v75 = v76;
LABEL_120:
  v148 = 0;
  ++*(_QWORD *)(v23 + 32);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,void *>>>>::reset[abi:ne180100]((uint64_t)&v148);
LABEL_121:
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
  if (*((_QWORD *)&v147 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  std::__optional_destruct_base<AMCP::DAL::DAL_Time_Range,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v136);
  v81 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
  if (*((_QWORD *)&v134 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v130;
  v4 = v101;
  if (v130)
  {
    v85 = (unint64_t *)&v130->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v126;
  if (v126)
  {
    v88 = (unint64_t *)&v126->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if (SBYTE7(v122) < 0)
    operator delete((void *)__p);
LABEL_143:
  v90 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>(v5, a2);
  if (!v90)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  ++*((_DWORD *)v90 + 28);
  os_unfair_lock_unlock((os_unfair_lock_t)v4);
}

void sub_1B5AAD72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,char a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t a70;
  uint64_t v70;
  os_unfair_lock_s *v71;
  int v72;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v70 + 304);
  std::__optional_destruct_base<AMCP::DAL::DAL_Time_Range,false>::~__optional_destruct_base[abi:ne180100](a12);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v70 + 168);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a70);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  if (a58 < 0)
    operator delete(__p);
  if (v72 < 0)
    operator delete(a16);
  os_unfair_lock_unlock(v71);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Synchronized_Mixer::remove_source(AMCP::Log::Scope_Registry *a1, _DWORD *a2, int a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t *v9;
  char v10;
  _BOOL4 has_pending_range;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v37;
  _opaque_pthread_t *v38;
  mach_port_t v39;
  void *exception;
  __int128 v41;
  uint64_t v42;
  std::string v43;
  std::logic_error v44;
  char v45;
  uint64_t (**v46)();
  void *__p[2];
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::logic_error v50;
  void *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  int v55;
  std::__shared_weak_count *v56;
  _BYTE buf[24];
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v37 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      v38 = pthread_self();
      v39 = pthread_mach_thread_np(v38);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v39;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Synchronized_Mixer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 54;
      LOWORD(v58) = 2080;
      *(_QWORD *)((char *)&v58 + 2) = "not (buffer_alignment == Buffer_Alignment::Aligned_For_Output)";
      _os_log_error_impl(&dword_1B57BA000, v37, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronized_Mixer has a source that's input aligned", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v45);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Synchronized_Mixer has a source that's input aligned", (uint64_t)&v43);
    std::logic_error::logic_error(&v44, &v43);
    v44.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v50, &v44);
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v55 = -1;
    v50.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v51 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
    *((_QWORD *)&v58 + 1) = "virtual BOOL AMCP::DAL::Synchronized_Mixer::remove_source(const Source_ID &, Buffer_Alignment)";
    *(_QWORD *)&v59 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronized_Mixer.cpp";
    DWORD2(v59) = 54;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v41);
    v46 = off_1E69A20A0;
    *(_OWORD *)__p = v41;
    v48 = v42;
    v41 = 0uLL;
    v42 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v46);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = *((_QWORD *)a1 + 13);
  os_unfair_lock_lock((os_unfair_lock_t)v4);
  if (!std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((_QWORD *)(v4 + 8), a2))goto LABEL_50;
  v5 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((_QWORD *)(v4 + 8), a2);
  if (!v5)
    goto LABEL_55;
  v6 = *((_DWORD *)v5 + 28);
  v7 = __OFSUB__(v6--, 1);
  *((_DWORD *)v5 + 28) = v6;
  if (!((v6 < 0) ^ v7 | (v6 == 0)))
    goto LABEL_50;
  v8 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((_QWORD *)(v4 + 8), a2);
  if (!v8)
LABEL_55:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  *((_BYTE *)v8 + 200) = 1;
  v9 = *(uint64_t **)(v4 + 24);
  if (v9)
  {
    v10 = 0;
    while (1)
    {
      AMCP::DAL::Synchronizer_Source::get_source_id((AMCP::DAL::Synchronizer_Source *)buf, (uint64_t)(v9 + 8));
      has_pending_range = AMCP::DAL::Synchronizer::_has_pending_range(v4, buf);
      v12 = has_pending_range;
      if (SBYTE7(v58) < 0)
      {
        operator delete(*(void **)&buf[8]);
        if (v12)
        {
LABEL_13:
          *(_OWORD *)buf = *(_OWORD *)(v9 + 15);
          v13 = v9[18];
          *(_QWORD *)&buf[16] = v9[17];
          *(_QWORD *)&v58 = v13;
          v14 = v9[19];
          *((_QWORD *)&v58 + 1) = v14;
          if (v14)
          {
            v15 = (unint64_t *)(v14 + 8);
            do
              v16 = __ldxr(v15);
            while (__stxr(v16 + 1, v15));
          }
          v59 = *((_OWORD *)v9 + 10);
          v17 = v9[23];
          v60 = v9[22];
          v18 = (std::__shared_weak_count *)v9[24];
          v61 = v17;
          v62 = v18;
          if (v18)
          {
            p_shared_owners = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldxr(p_shared_owners);
            while (__stxr(v20 + 1, p_shared_owners));
          }
          AMCP::DAL::Synchronizer::_get_latest_common_pending_time((AMCP::DAL::Synchronizer *)&v46, v4);
          AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v50, (const AMCP::DAL::DAL_Time *)(v4 + 104), (const AMCP::DAL::DAL_Time *)&v46);
          v21 = v49;
          if (v49)
          {
            v22 = (unint64_t *)&v49->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v50, (AMCP::DAL::DAL_Time *)&v54))
          {
            AMCP::DAL::Synchronizer_Source::get_source_id((AMCP::DAL::Synchronizer_Source *)&v46, (uint64_t)(v9 + 8));
            AMCP::DAL::Synchronizer::_emit((_QWORD *)v4, (uint64_t)&v46, &v50);
            if (SHIBYTE(v48) < 0)
              operator delete(__p[0]);
            v10 = 1;
          }
          v24 = v56;
          if (v56)
          {
            v25 = (unint64_t *)&v56->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v27 = v53;
          if (v53)
          {
            v28 = (unint64_t *)&v53->__shared_owners_;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          v30 = v62;
          if (v62)
          {
            v31 = (unint64_t *)&v62->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          v33 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
          if (*((_QWORD *)&v58 + 1))
          {
            v34 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
        }
      }
      else if (has_pending_range)
      {
        goto LABEL_13;
      }
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_51;
    }
  }
LABEL_50:
  v10 = 0;
LABEL_51:
  AMCP::DAL::Synchronizer::_sweep_and_remove_sources((AMCP::DAL::Synchronizer *)v4);
  os_unfair_lock_unlock((os_unfair_lock_t)v4);
  return v10 & 1;
}

void sub_1B5AADE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  os_unfair_lock_s *v37;

  os_unfair_lock_unlock(v37);
  _Unwind_Resume(a1);
}

_QWORD *AMCP::DAL::Synchronized_Mixer::add_emission_handler(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v10 = 0;
  }
  v4 = a1 + 120;
  if ((_QWORD *)(a1 + 120) != v9)
  {
    v5 = v10;
    v6 = *(_QWORD *)(a1 + 144);
    if (v10 == v9)
    {
      if (v6 == v4)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 144) + 24))(*(_QWORD *)(a1 + 144), v9);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 32))(*(_QWORD *)(a1 + 144));
        *(_QWORD *)(a1 + 144) = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, uint64_t))(v11[0] + 24))(v11, a1 + 120);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v9[0] + 24))(v9, a1 + 120);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = *(_QWORD **)(a1 + 144);
      }
      *(_QWORD *)(a1 + 144) = v4;
    }
    else if (v6 == v4)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 24))(a1 + 120, v9);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 32))(*(_QWORD *)(a1 + 144));
      *(_QWORD *)(a1 + 144) = v10;
      v10 = v9;
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 144);
      *(_QWORD *)(a1 + 144) = v5;
    }
  }
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_1B5AAE214(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0::~$_0(uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 120);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 80);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t std::__function::__func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6984DF8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 128);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 88);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void std::__function::__func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6984DF8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 128);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 88);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x90uLL);
  *v2 = off_1E6984DF8;
  std::__compressed_pair_elem<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5AAE340(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E6984DF8;
  return std::__compressed_pair_elem<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  v2 = *(os_unfair_lock_s **)(a1 + 8);
  os_unfair_lock_lock(v2 + 38);
  AMCP::DAL::Ring_Buffer_Base::set_anchor_time_and_nominal_buffer_size((uint64_t)v2, v3, a1 + 64);
  os_unfair_lock_unlock(v2 + 38);
}

void sub_1B5AAE3E4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3DAL18Synchronized_Mixer39set_anchor_time_and_nominal_buffer_sizeERKNS0_9Source_IDERKNS0_14DAL_Time_RangeE16Buffer_AlignmentE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__alloc_func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 120);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 80);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

uint64_t std::__compressed_pair_elem<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = (std::string *)(a1 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 32);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v11;
  v12 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return a1;
}

uint64_t AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(uint64_t a1, const CA::StreamDescription *a2, const AMCP::DAL::DAL_Time_Delta *a3, int64x2_t **a4)
{
  AMCP::DAL::Ring_Buffer_Base *v6;
  int64x2_t *v7;
  int64x2_t *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int64x2_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v35;
  int64x2_t v36;
  char *v37;
  int64x2_t *v38;
  _QWORD v39[3];
  _QWORD *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v6 = AMCP::DAL::Ring_Buffer_Base::Ring_Buffer_Base((AMCP::DAL::Ring_Buffer_Base *)a1, a2, a3);
  *(_QWORD *)v6 = &off_1E6984C88;
  v7 = *a4;
  *((_QWORD *)v6 + 13) = *a4;
  v8 = a4[1];
  *((_QWORD *)v6 + 14) = v8;
  if (v8)
  {
    v9 = &v8->u64[1];
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v7 = (int64x2_t *)*((_QWORD *)v6 + 13);
  }
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  v39[0] = &off_1E6984D68;
  v39[1] = a1;
  v40 = v39;
  v11 = v7[10].u64[0];
  v12 = v7[9].u64[1];
  if (v12 < v11)
  {
    *(_QWORD *)(v12 + 24) = v12;
    (*(void (**)(_QWORD *, unint64_t))(*v40 + 24))(v40, v12);
    v13 = (_QWORD *)(v12 + 32);
    v7[9].i64[1] = v12 + 32;
    goto LABEL_29;
  }
  v14 = v7[9].i64[0];
  v15 = (uint64_t)(v12 - v14) >> 5;
  if ((unint64_t)(v15 + 1) >> 59)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v16 = v11 - v14;
  v17 = v16 >> 4;
  if (v16 >> 4 <= (unint64_t)(v15 + 1))
    v17 = v15 + 1;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
    v18 = 0x7FFFFFFFFFFFFFFLL;
  else
    v18 = v17;
  v38 = v7 + 10;
  if (v18)
  {
    if (v18 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v19 = (char *)operator new(32 * v18);
  }
  else
  {
    v19 = 0;
  }
  v20 = &v19[32 * v15];
  v35 = v19;
  v36.i64[0] = (uint64_t)v20;
  v21 = &v19[32 * v18];
  v37 = v21;
  *((_QWORD *)v20 + 3) = v20;
  std::__function::__func<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::__clone((uint64_t)v39, v20);
  v13 = v20 + 32;
  v36.i64[1] = (uint64_t)(v20 + 32);
  v23 = v7[9].i64[0];
  v22 = v7[9].u64[1];
  if (v22 != v23)
  {
    v24 = 0;
    v25 = v7[9].i64[1];
    while (1)
    {
      v26 = &v20[v24];
      v27 = v22 + v24;
      v28 = *(_QWORD *)(v22 + v24 - 8);
      if (v28)
      {
        if (v27 - 32 == v28)
        {
          *((_QWORD *)v26 - 1) = v26 - 32;
          (*(void (**)(_QWORD))(**(_QWORD **)(v27 - 8) + 24))(*(_QWORD *)(v27 - 8));
          goto LABEL_25;
        }
        v29 = (char *)(v25 - 8);
        *((_QWORD *)v26 - 1) = v28;
      }
      else
      {
        v29 = v26 - 8;
      }
      *(_QWORD *)v29 = 0;
LABEL_25:
      v25 -= 32;
      v24 -= 32;
      if (v22 + v24 == v23)
      {
        v20 += v24;
        v30 = v7[9];
        v13 = (_QWORD *)v36.i64[1];
        v21 = v37;
        goto LABEL_28;
      }
    }
  }
  v30 = vdupq_n_s64(v22);
LABEL_28:
  v7[9].i64[0] = (uint64_t)v20;
  v7[9].i64[1] = (uint64_t)v13;
  v36 = v30;
  v31 = v7[10].i64[0];
  v7[10].i64[0] = (uint64_t)v21;
  v37 = (char *)v31;
  v35 = (char *)v30.i64[0];
  std::__split_buffer<std::function<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>>::~__split_buffer((uint64_t)&v35);
LABEL_29:
  v7[9].i64[1] = (uint64_t)v13;
  v32 = v40;
  if (v40 == v39)
  {
    v33 = 4;
    v32 = v39;
    goto LABEL_33;
  }
  if (v40)
  {
    v33 = 5;
LABEL_33:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  return a1;
}

void sub_1B5AAE84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v21 = v19;
  *(_QWORD *)(v20 + 152) = v21;
  v23 = a17;
  if (a17 == &a14)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  v25 = (_QWORD *)v17[18];
  if (v25 == v17 + 15)
  {
    v26 = 4;
    v25 = v17 + 15;
  }
  else
  {
    if (!v25)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_11:
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v18);
  AMCP::DAL::Mixing_Ring_Buffer::~Mixing_Ring_Buffer((AMCP::DAL::Mixing_Ring_Buffer *)v17);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Mixing_Ring_Buffer::~Mixing_Ring_Buffer(AMCP::DAL::Mixing_Ring_Buffer *this)
{
  char *v2;

  *(_QWORD *)this = off_1E6993620;
  v2 = (char *)this + 72;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
}

{
  char *v2;

  *(_QWORD *)this = off_1E6993620;
  v2 = (char *)this + 72;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
}

{
  char *v2;

  *(_QWORD *)this = off_1E6993620;
  v2 = (char *)this + 72;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  JUMPOUT(0x1B5E50688);
}

void std::__function::__func<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6984D68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6984D68;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::operator()(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  _OWORD v63[4];
  __int128 v64;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v3 + 144))
  {
    v64 = 0u;
    memset(v63, 0, sizeof(v63));
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 152));
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v3 + 72))(&v49, v3);
    v63[0] = v49;
    *(_OWORD *)((char *)&v63[1] + 8) = v51;
    *(_OWORD *)((char *)&v63[2] + 8) = v52;
    *(_QWORD *)&v63[1] = v50;
    *((_QWORD *)&v63[3] + 1) = v53;
    v64 = v54;
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 152));
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v63, (AMCP::DAL::DAL_Time *)((char *)&v63[2] + 8)))
    {
      caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersection((uint64_t)&v49, a3, v63);
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v55, &v49);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
      if (*((_QWORD *)&v54 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
      if (*((_QWORD *)&v51 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v41 = v55;
      v42 = v56;
      v43 = v57;
      v44 = v58;
      if (v58)
      {
        p_shared_owners = (unint64_t *)&v58->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v45 = v59;
      v46 = v60;
      v47 = v61;
      v48 = v62;
      if (v62)
      {
        v14 = (unint64_t *)&v62->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      AMCP::DAL::Ring_Buffer_Base::create_readable_range(v3, (uint64_t)&v41, (uint64_t)&v49);
      v16 = *(_QWORD *)(v3 + 144);
      if (!v16)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v16 + 48))(v16, a2, &v49);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
      if (*((_QWORD *)&v54 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
      if (*((_QWORD *)&v51 + 1))
      {
        v21 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = v48;
      if (v48)
      {
        v24 = (unint64_t *)&v48->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = v44;
      if (v44)
      {
        v27 = (unint64_t *)&v44->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = v62;
      if (v62)
      {
        v30 = (unint64_t *)&v62->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = v58;
      if (v58)
      {
        v33 = (unint64_t *)&v58->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
    if (*((_QWORD *)&v64 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = *(std::__shared_weak_count **)&v63[2];
    if (*(_QWORD *)&v63[2])
    {
      v39 = (unint64_t *)(*(_QWORD *)&v63[2] + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
}

void sub_1B5AAED48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  uint64_t v40;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;

  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  if (a13)
  {
    v44 = (unint64_t *)&a13->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  if (a40)
  {
    v46 = (unint64_t *)&a40->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))a40->__on_zero_shared)(a40);
      std::__shared_weak_count::__release_weak(a40);
    }
  }
  if (a35)
  {
    v48 = (unint64_t *)&a35->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))a35->__on_zero_shared)(a35);
      std::__shared_weak_count::__release_weak(a35);
    }
  }
  v50 = *(std::__shared_weak_count **)(v40 - 72);
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = *(std::__shared_weak_count **)(v40 - 112);
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3DAL18Synchronized_MixerC1ERKN2CA17StreamDescriptionERKNS0_14DAL_Time_DeltaERKNSt3__110shared_ptrINS0_12SynchronizerEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::target_type()
{
}

void HALB_UCObject::~HALB_UCObject(HALB_UCObject *this)
{
  HALB_UCObject::~HALB_UCObject(this);
  JUMPOUT(0x1B5E50688);
}

{
  void (**v2)(HALB_UCObject *__hidden);
  io_connect_t v3;

  v2 = &off_1E6984E78;
  *(_QWORD *)this = &off_1E6984E78;
  v3 = *((_DWORD *)this + 3);
  if (v3)
  {
    IOServiceClose(v3);
    *((_DWORD *)this + 3) = 0;
    v2 = *(void (***)(HALB_UCObject *__hidden))this;
  }
  v2[5](this);
  CACFDictionary::~CACFDictionary((HALB_UCObject *)((char *)this + 16));
}

uint64_t HALB_UCObject::PropertiesChanged(uint64_t this)
{
  *(_BYTE *)(this + 32) = 1;
  return this;
}

void HALB_UCObject::CacheProperties(HALB_UCObject *this)
{
  io_registry_entry_t v2;
  kern_return_t v3;
  kern_return_t v4;
  _DWORD *exception;
  CFMutableDictionaryRef properties;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  kern_return_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 33))
  {
    v2 = *((_DWORD *)this + 2);
    if (v2)
    {
      if (*((_BYTE *)this + 32))
      {
        properties = 0;
        v3 = IORegistryEntryCreateCFProperties(v2, &properties, 0, 0);
        if (v3)
        {
          v4 = v3;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v8 = "HALB_UCObject.cpp";
            v9 = 1024;
            v10 = 444;
            v11 = 1024;
            v12 = v4;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_UCObject::CacheProperties: failed to get the properties from the IO Registry, Error: 0x%X", buf, 0x18u);
          }
          exception = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)exception = &off_1E69A1B30;
          exception[2] = v4;
        }
        CACFDictionary::SetCFMutableDictionaryFromCopy((HALB_UCObject *)((char *)this + 16), properties);
        if (properties)
          CFRelease(properties);
        *((_BYTE *)this + 32) = 0;
      }
    }
  }
}

uint64_t HALB_UCObject::Retain(HALB_UCObject *this)
{
  uint64_t result;

  result = *((unsigned int *)this + 2);
  if ((_DWORD)result)
    return IOObjectRetain(result);
  return result;
}

CFMutableDictionaryRef HALB_UCObject::Release(HALB_UCObject *this)
{
  io_object_t v2;

  v2 = *((_DWORD *)this + 2);
  if (v2)
  {
    IOObjectRelease(v2);
    *((_DWORD *)this + 2) = 0;
  }
  return CACFDictionary::SetCFMutableDictionaryToEmpty((HALB_UCObject *)((char *)this + 16));
}

CFMutableDictionaryRef CACFDictionary::SetCFMutableDictionaryToEmpty(CACFDictionary *this)
{
  const void *v2;
  CFMutableDictionaryRef result;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v2);
  }
  result = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  *(_QWORD *)this = result;
  *((_WORD *)this + 4) = 257;
  return result;
}

BOOL HALB_UCObject::HasProperty(HALB_UCObject *this, const __CFString *a2)
{
  kern_return_t v4;
  const __CFDictionary *v5;
  const void *v6;
  _BOOL8 v7;
  kern_return_t v9;
  _DWORD *exception;
  CFMutableDictionaryRef properties;
  _BYTE buf[12];
  __int16 v13;
  int v14;
  __int16 v15;
  kern_return_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  properties = 0;
  if (*((_BYTE *)this + 33))
  {
    v4 = IORegistryEntryCreateCFProperties(*((_DWORD *)this + 2), &properties, 0, 0);
    if (v4)
    {
      v9 = v4;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "HALB_UCObject.cpp";
        v13 = 1024;
        v14 = 174;
        v15 = 1024;
        v16 = v9;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_UCObject::CopyProperties: failed to get the properties from the IO Registry, Error: 0x%X", buf, 0x18u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = v9;
    }
    v5 = properties;
    if (!properties)
      return 0;
  }
  else
  {
    (*(void (**)(HALB_UCObject *))(*(_QWORD *)this + 24))(this);
    v6 = (const void *)*((_QWORD *)this + 2);
    if (!v6)
      return 0;
    CFRetain(v6);
    v5 = (const __CFDictionary *)*((_QWORD *)this + 2);
    if (!v5)
      return 0;
  }
  *(_QWORD *)buf = v5;
  *(_WORD *)&buf[8] = 1;
  v7 = CFDictionaryContainsKey(v5, a2) != 0;
  CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
  return v7;
}

void sub_1B5AAF3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

void sub_1B5AAF3C4(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5AAF284);
  }
  JUMPOUT(0x1B5AAF3BCLL);
}

void sub_1B5AAF3E4()
{
  JUMPOUT(0x1B5AAF3BCLL);
}

BOOL HALB_UCObject::CopyProperty_CFType(const __CFDictionary **this, CFStringRef key, const void **a3)
{
  CFTypeRef CFProperty;
  _BOOL8 v7;
  const __CFDictionary *v8;
  const void *Value;

  if (!*((_BYTE *)this + 33))
  {
    (*((void (**)(const __CFDictionary **))*this + 3))(this);
    v8 = this[2];
    if (v8)
    {
      Value = CFDictionaryGetValue(v8, key);
      *a3 = Value;
      v7 = Value != 0;
      if (!Value)
        return v7;
    }
    else
    {
      v7 = 0;
      Value = *a3;
      if (!*a3)
        return v7;
    }
    CFRetain(Value);
    return v7;
  }
  CFProperty = IORegistryEntryCreateCFProperty(*((_DWORD *)this + 2), key, 0, 0);
  *a3 = CFProperty;
  return CFProperty != 0;
}

void sub_1B5AAF498(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5AAF484);
}

void HALB_UCObject::CopyProperty_UInt32(const __CFDictionary **this, const __CFString *a2, unsigned int *a3)
{
  const __CFNumber *v4;
  CFTypeID v5;
  unsigned int v6;
  const __CFNumber *v7;
  char v8;
  CFTypeRef cf;
  unsigned int valuePtr;

  cf = 0;
  if (HALB_UCObject::CopyProperty_CFType(this, a2, &cf))
  {
    v4 = (const __CFNumber *)cf;
    v5 = CFGetTypeID(cf);
    if (v5 == CFNumberGetTypeID())
    {
      v7 = v4;
      v8 = 0;
      valuePtr = 0;
      if (v4)
      {
        CFNumberGetValue(v4, kCFNumberSInt32Type, &valuePtr);
        v6 = valuePtr;
      }
      else
      {
        v6 = 0;
      }
      *a3 = v6;
      CACFNumber::~CACFNumber((CACFNumber *)&v7);
    }
    CFRelease(v4);
  }
}

void sub_1B5AAF53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFNumber::~CACFNumber((CACFNumber *)&a9);
  _Unwind_Resume(a1);
}

BOOL HALB_UCObject::CopyProperty_CFString(const __CFDictionary **this, const __CFString *a2, const __CFString **a3)
{
  _BOOL8 result;
  const __CFString *v5;
  CFTypeID v6;
  CFTypeRef cf;

  cf = 0;
  result = HALB_UCObject::CopyProperty_CFType(this, a2, &cf);
  if (result)
  {
    v5 = (const __CFString *)cf;
    v6 = CFGetTypeID(cf);
    if (v6 == CFStringGetTypeID())
    {
      *a3 = v5;
      return 1;
    }
    else
    {
      CFRelease(v5);
      return 0;
    }
  }
  return result;
}

BOOL HALB_UCObject::CopyProperty_CFArray(const __CFDictionary **this, const __CFString *a2, const __CFArray **a3)
{
  _BOOL8 result;
  const __CFArray *v5;
  CFTypeID v6;
  CFTypeRef cf;

  cf = 0;
  result = HALB_UCObject::CopyProperty_CFType(this, a2, &cf);
  if (result)
  {
    v5 = (const __CFArray *)cf;
    v6 = CFGetTypeID(cf);
    if (v6 == CFArrayGetTypeID())
    {
      *a3 = v5;
      return 1;
    }
    else
    {
      CFRelease(v5);
      return 0;
    }
  }
  return result;
}

void HALB_UCObject::SetProperty_SInt32(HALB_UCObject *this, const __CFString *a2)
{
  kern_return_t v3;
  kern_return_t v4;
  _DWORD *exception;
  CFNumberRef v6;
  char v7;
  int valuePtr;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  kern_return_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  valuePtr = (int)a2;
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v7 = 1;
  v3 = IORegistryEntrySetCFProperty(*((_DWORD *)this + 2), CFSTR("exclusive access owner"), v6);
  if (v3)
  {
    v4 = v3;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      valuePtr = 136315650;
      v9 = "HALB_UCObject.cpp";
      v10 = 1024;
      v11 = 410;
      v12 = 1024;
      v13 = v4;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_UCObject::SetProperty: got an error from the IORegistry, Error: 0x%X", (uint8_t *)&valuePtr, 0x18u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v4;
  }
  CACFNumber::~CACFNumber((CACFNumber *)&v6);
}

void sub_1B5AAF760(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HALB_UCObject::CopyProperty_BOOL(HALB_UCObject *this, const __CFString *a2, const __CFString *a3, BOOL *a4)
{
  const __CFBoolean *CFProperty;
  const __CFBoolean *v6;
  CFTypeID v7;
  CFTypeID v8;
  const __CFBoolean *v9;
  char v10;
  int valuePtr;

  CFProperty = (const __CFBoolean *)IORegistryEntryCreateCFProperty((io_registry_entry_t)this, a2, 0, 0);
  if (CFProperty)
  {
    v6 = CFProperty;
    v7 = CFGetTypeID(CFProperty);
    if (v7 == CFBooleanGetTypeID())
    {
      LOBYTE(a3->isa) = CFBooleanGetValue(v6) != 0;
    }
    else
    {
      v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        v9 = v6;
        v10 = 0;
        valuePtr = 0;
        CFNumberGetValue(v6, kCFNumberSInt32Type, &valuePtr);
        LOBYTE(a3->isa) = valuePtr != 0;
        CACFNumber::~CACFNumber((CACFNumber *)&v9);
      }
    }
    CFRelease(v6);
  }
}

void sub_1B5AAF83C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CACFNumber::~CACFNumber((CACFNumber *)va);
  _Unwind_Resume(a1);
}

void HALB_UCIterator::~HALB_UCIterator(io_object_t *this)
{
  io_object_t v2;

  if (*((_BYTE *)this + 4))
  {
    v2 = *this;
    if (v2)
    {
      IOObjectRelease(v2);
      *this = 0;
    }
  }
}

uint64_t HALB_UCObject::MapMemory(HALB_UCObject *this, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  int v4;
  int v6;
  _DWORD *exception;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 3) && *((_BYTE *)this + 34))
  {
    v4 = MEMORY[0x1B5E4FAA0]();
    if (v4)
    {
      v6 = v4;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v9 = "HALB_UCObject.cpp";
        v10 = 1024;
        v11 = 743;
        v12 = 1024;
        v13 = v6;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_UCObject::MapMemory: failed to map in the memory, Error: 0x%X", buf, 0x18u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = v6;
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v9 = "HALB_UCObject.cpp";
        v10 = 1024;
        v11 = 745;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_UCObject::MapMemory: mapped in a NULL pointer", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
  }
  return 0;
}

void HALS_PlugInClockDevice::Activate(HALS_PlugInClockDevice *this)
{
  char *v2;
  void (***v3)(_QWORD);
  HALS_Object *v4;
  BOOL has_engine_for_device;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v2 = (char *)this + 368;
  v3 = (void (***)(_QWORD))(*(uint64_t (**)(_QWORD, _QWORD, HALS_PlugInClockDevice *))(**(_QWORD **)(*((_QWORD *)this + 47) + 400) + 136))(*(_QWORD *)(*((_QWORD *)this + 47) + 400), *((_QWORD *)this + 47), this);
  *((_QWORD *)this + 51) = v3;
  (**v3)(v3);
  HALS_Object::Activate(this, v4);
  (*(void (**)(char *))(*((_QWORD *)this + 46) + 32))(v2);
  v20 = 0;
  v21 = 0;
  HALS_System::GetInstance(&v22, 0, &v20);
  has_engine_for_device = HALS_IOContext_Manager::has_engine_for_device(*(HALS_IOContext_Manager **)(v22 + 1392), this);
  v6 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v21;
  if (!v21)
    goto LABEL_10;
  v10 = (unint64_t *)&v21->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (has_engine_for_device)
      return;
  }
  else
  {
LABEL_10:
    if (has_engine_for_device)
      return;
  }
  v18 = 0;
  v19 = 0;
  HALS_System::GetInstance(&v22, 0, &v18);
  HALS_IOContext_Manager::create_engine_for_device(*(os_unfair_lock_s **)(v22 + 1392), this);
  v12 = v23;
  if (v23)
  {
    v13 = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1B5AAFBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_PlugInClockDevice::~HALS_PlugInClockDevice(HALS_PlugInClockDevice *this)
{
  HALS_PlugInClockDevice::~HALS_PlugInClockDevice(this);
  JUMPOUT(0x1B5E50688);
}

{
  uint64_t v2;
  HALS_Object *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  *(_QWORD *)this = off_1E6984EC8;
  *((_QWORD *)this + 46) = &unk_1E69850A8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    HALS_ObjectMap::ObjectIsDead(*((HALS_ObjectMap **)this + 51), v3);
    *((_QWORD *)this + 51) = 0;
  }
  v10 = 0;
  v11 = 0;
  HALS_System::GetInstance(&v12, 0, &v10);
  HALS_IOContext_Manager::destroy_engine_for_device(*(os_unfair_lock_s **)(v12 + 1392), this);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_PlugInClockDevice *)((char *)this + 416));
  HALS_PlugInObject::~HALS_PlugInObject((HALS_PlugInClockDevice *)((char *)this + 368));
  HALS_ClockDevice::~HALS_ClockDevice(this);
}

uint64_t HALS_PlugInClockDevice::_Deactivate(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  return this;
}

uint64_t HALS_PlugInClockDevice::HasProperty(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t *v55;
  unint64_t *v56;
  unint64_t *v57;
  unint64_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  std::__shared_weak_count *v66;

  v7 = *a3;
  if ((int)v7 > 1819111267)
  {
    switch((_DWORD)v7)
    {
      case 0x6C6D6F64:
        v27 = *(_QWORD *)(a1 + 376);
        v28 = *(_QWORD *)(v27 + 400);
        v10 = *(std::__shared_weak_count **)(v27 + 408);
        v65 = v28;
        v66 = v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v30 = __ldxr(p_shared_owners);
          while (__stxr(v30 + 1, p_shared_owners));
        }
        v31 = *(unsigned int *)(a1 + 388);
        if (a4)
          v32 = *(unsigned int *)(a4 + 232);
        else
          v32 = 0;
        v63 = 0x676C6F626C6D6F64;
        v64 = 0;
        v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v28 + 544))(v28, v31, v32, &v63);
        if (!v10)
          return v45;
        v54 = (unint64_t *)&v10->__shared_owners_;
        do
          v53 = __ldaxr(v54);
        while (__stlxr(v53 - 1, v54));
        goto LABEL_75;
      case 0x736E756D:
        v39 = *(_QWORD *)(a1 + 376);
        v40 = *(_QWORD *)(v39 + 400);
        v10 = *(std::__shared_weak_count **)(v39 + 408);
        v65 = v40;
        v66 = v10;
        if (v10)
        {
          v41 = (unint64_t *)&v10->__shared_owners_;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        v43 = *(unsigned int *)(a1 + 388);
        if (a4)
          v44 = *(unsigned int *)(a4 + 232);
        else
          v44 = 0;
        v63 = 0x676C6F62736E756DLL;
        v64 = 0;
        v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v40 + 544))(v40, v43, v44, &v63);
        if (!v10)
          return v45;
        v58 = (unint64_t *)&v10->__shared_owners_;
        do
          v53 = __ldaxr(v58);
        while (__stlxr(v53 - 1, v58));
        goto LABEL_75;
      case 0x6C6E616D:
        v15 = *(_QWORD *)(a1 + 376);
        v16 = *(_QWORD *)(v15 + 400);
        v10 = *(std::__shared_weak_count **)(v15 + 408);
        v65 = v16;
        v66 = v10;
        if (v10)
        {
          v17 = (unint64_t *)&v10->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v19 = *(unsigned int *)(a1 + 388);
        if (a4)
          v20 = *(unsigned int *)(a4 + 232);
        else
          v20 = 0;
        v63 = 0x676C6F626C6E616DLL;
        v64 = 0;
        v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v16 + 544))(v16, v19, v20, &v63);
        if (!v10)
          return v45;
        v56 = (unint64_t *)&v10->__shared_owners_;
        do
          v53 = __ldaxr(v56);
        while (__stlxr(v53 - 1, v56));
        goto LABEL_75;
    }
  }
  else
  {
    switch((_DWORD)v7)
    {
      case 0x6677766E:
        v21 = *(_QWORD *)(a1 + 376);
        v22 = *(_QWORD *)(v21 + 400);
        v10 = *(std::__shared_weak_count **)(v21 + 408);
        v65 = v22;
        v66 = v10;
        if (v10)
        {
          v23 = (unint64_t *)&v10->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        v25 = *(unsigned int *)(a1 + 388);
        if (a4)
          v26 = *(unsigned int *)(a4 + 232);
        else
          v26 = 0;
        v63 = 0x676C6F626677766ELL;
        v64 = 0;
        v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v22 + 544))(v22, v25, v26, &v63);
        if (!v10)
          return v45;
        v52 = (unint64_t *)&v10->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        goto LABEL_75;
      case 0x6964656E:
        v33 = *(_QWORD *)(a1 + 376);
        v34 = *(_QWORD *)(v33 + 400);
        v10 = *(std::__shared_weak_count **)(v33 + 408);
        v65 = v34;
        v66 = v10;
        if (v10)
        {
          v35 = (unint64_t *)&v10->__shared_owners_;
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        v37 = *(unsigned int *)(a1 + 388);
        if (a4)
          v38 = *(unsigned int *)(a4 + 232);
        else
          v38 = 0;
        v63 = 0x676C6F626964656ELL;
        v64 = 0;
        v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v34 + 544))(v34, v37, v38, &v63);
        if (!v10)
          return v45;
        v57 = (unint64_t *)&v10->__shared_owners_;
        do
          v53 = __ldaxr(v57);
        while (__stlxr(v53 - 1, v57));
        goto LABEL_75;
      case 0x6C6D616B:
        v8 = *(_QWORD *)(a1 + 376);
        v9 = *(_QWORD *)(v8 + 400);
        v10 = *(std::__shared_weak_count **)(v8 + 408);
        v65 = v9;
        v66 = v10;
        if (v10)
        {
          v11 = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        v13 = *(unsigned int *)(a1 + 388);
        if (a4)
          v14 = *(unsigned int *)(a4 + 232);
        else
          v14 = 0;
        v63 = 0x676C6F626C6D616BLL;
        v64 = 0;
        v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v9 + 544))(v9, v13, v14, &v63);
        if (!v10)
          return v45;
        v55 = (unint64_t *)&v10->__shared_owners_;
        do
          v53 = __ldaxr(v55);
        while (__stlxr(v53 - 1, v55));
LABEL_75:
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          v59 = v10;
LABEL_77:
          std::__shared_weak_count::__release_weak(v59);
          return v45;
        }
        return v45;
    }
  }
  if ((HALS_ClockDevice::HasProperty(a1, a2, a3) & 1) != 0)
    return 1;
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 368) + 24))(a1 + 368, v7))
    return 0;
  v46 = *(_QWORD *)(a1 + 376);
  v47 = *(_QWORD *)(v46 + 400);
  v48 = *(std::__shared_weak_count **)(v46 + 408);
  v65 = v47;
  v66 = v48;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  if (a4)
    v51 = *(unsigned int *)(a4 + 232);
  else
    v51 = 0;
  v45 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*(_QWORD *)v47 + 544))(v47, *(unsigned int *)(a1 + 388), v51, a3);
  if (v48)
  {
    v61 = (unint64_t *)&v48->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      v59 = v48;
      goto LABEL_77;
    }
  }
  return v45;
}

void sub_1B5AB00A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInClockDevice::IsPropertySettable(HALS_PlugInClockDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t v8;
  uint64_t mSelector;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v8 = 0;
  mSelector = a3->mSelector;
  if ((int)mSelector > 1819173228)
  {
    if ((_DWORD)mSelector == 1920168547)
      return v8;
    if ((_DWORD)mSelector == 1819173229)
    {
      v17 = *((_QWORD *)this + 47);
      v18 = *(_QWORD *)(v17 + 400);
      v12 = *(std::__shared_weak_count **)(v17 + 408);
      v38 = v18;
      v39 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
      }
      v21 = *((unsigned int *)this + 97);
      if (a4)
        v22 = *((unsigned int *)a4 + 58);
      else
        v22 = 0;
      v36 = 0x676C6F626C6E616DLL;
      v37 = 0;
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v18 + 552))(v18, v21, v22, &v36);
      if (!v12)
        return v8;
      v32 = (unint64_t *)&v12->__shared_owners_;
      do
        v31 = __ldaxr(v32);
      while (__stlxr(v31 - 1, v32));
      goto LABEL_33;
    }
LABEL_16:
    if (HALS_ClockDevice::HasProperty((uint64_t)this, a2, (int *)a3))
      return HALS_ClockDevice::IsPropertySettable((uint64_t)this, a2, (int *)a3);
    if (!(*(unsigned int (**)(char *, uint64_t))(*((_QWORD *)this + 46) + 24))((char *)this + 368, mSelector))return 0;
    v24 = *((_QWORD *)this + 47);
    v25 = *(_QWORD *)(v24 + 400);
    v26 = *(std::__shared_weak_count **)(v24 + 408);
    v38 = v25;
    v39 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    if (a4)
      v29 = *((unsigned int *)a4 + 58);
    else
      v29 = 0;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v25 + 552))(v25, *((unsigned int *)this + 97), v29, a3);
    if (!v26)
      return v8;
    v34 = (unint64_t *)&v26->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (v35)
      return v8;
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    v33 = v26;
    goto LABEL_35;
  }
  if ((_DWORD)mSelector == 1668641652)
    return v8;
  if ((_DWORD)mSelector != 1768187246)
    goto LABEL_16;
  v10 = *((_QWORD *)this + 47);
  v11 = *(_QWORD *)(v10 + 400);
  v12 = *(std::__shared_weak_count **)(v10 + 408);
  v38 = v11;
  v39 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *((unsigned int *)this + 97);
  if (a4)
    v16 = *((unsigned int *)a4 + 58);
  else
    v16 = 0;
  v36 = 0x676C6F626964656ELL;
  v37 = 0;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v11 + 552))(v11, v15, v16, &v36);
  if (!v12)
    return v8;
  v30 = (unint64_t *)&v12->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
LABEL_33:
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    v33 = v12;
LABEL_35:
    std::__shared_weak_count::__release_weak(v33);
  }
  return v8;
}

void sub_1B5AB035C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInClockDevice::GetPropertyDataSize(HALS_PlugInClockDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, HALS_Client *a6)
{
  uint64_t mSelector;
  uint64_t v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  mSelector = a3->mSelector;
  v13 = 8;
  if ((int)mSelector <= 1851878763)
  {
    if ((_DWORD)mSelector == 1668641652)
      return (12 * *((_DWORD *)this + 100));
    v14 = 1819173229;
  }
  else
  {
    if ((_DWORD)mSelector == 1851878764)
      return v13;
    if ((_DWORD)mSelector == 1853059619)
    {
      v16 = *((_QWORD *)this + 47);
      v17 = *(_QWORD *)(v16 + 400);
      v18 = *(std::__shared_weak_count **)(v16 + 408);
      v36 = v17;
      v37 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
      }
      v21 = *((unsigned int *)this + 97);
      if (a6)
        v22 = *((unsigned int *)a6 + 58);
      else
        v22 = 0;
      v34 = 0x676C6F626E737223;
      v35 = 0;
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v17 + 560))(v17, v21, v22, &v34, 0, 0);
      if (!v18)
        return v13;
      v29 = (unint64_t *)&v18->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (v30)
        return v13;
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      v31 = v18;
LABEL_35:
      std::__shared_weak_count::__release_weak(v31);
      return v13;
    }
    v14 = 1920168547;
  }
  if ((_DWORD)mSelector != v14)
  {
    if (HALS_ClockDevice::HasProperty((uint64_t)this, a2, (int *)a3))
      return HALS_ClockDevice::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
    if ((*(unsigned int (**)(char *, uint64_t))(*((_QWORD *)this + 46) + 24))((char *)this + 368, mSelector))
    {
      v23 = *((_QWORD *)this + 47);
      v24 = *(_QWORD *)(v23 + 400);
      v25 = *(std::__shared_weak_count **)(v23 + 408);
      v36 = v24;
      v37 = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      if (a6)
        v28 = *((unsigned int *)a6 + 58);
      else
        v28 = 0;
      v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *))(*(_QWORD *)v24 + 560))(v24, *((unsigned int *)this + 97), v28, a3, a4, a5);
      if (!v25)
        return v13;
      v32 = (unint64_t *)&v25->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (v33)
        return v13;
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      v31 = v25;
      goto LABEL_35;
    }
    return 0;
  }
  return v13;
}

void sub_1B5AB05CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void HALS_PlugInClockDevice::GetPropertyData(HALS_PlugInClockDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, uint64_t *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  uint64_t mSelector;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  char v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t *v153;
  unint64_t *v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t *v158;
  unint64_t *v159;
  unint64_t *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t *v165;
  unint64_t *v166;
  unint64_t *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  _DWORD *v170;
  _DWORD *exception;
  _DWORD *v172;
  _DWORD *v173;
  _DWORD *v174;
  _DWORD *v175;
  _DWORD *v176;
  _DWORD *v177;
  _DWORD *v178;
  _DWORD *v179;
  _DWORD *v180;
  _DWORD *v181;
  _DWORD *v182;
  _DWORD *v183;
  _DWORD *v184;
  _DWORD *v185;
  _DWORD *v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  int v190;
  _BYTE buf[18];
  uint64_t v192;

  v192 = *MEMORY[0x1E0C80C00];
  mSelector = a3->mSelector;
  if ((int)mSelector <= 1819111267)
  {
    if ((int)mSelector <= 1719105133)
    {
      if ((int)mSelector > 1668510817)
      {
        if ((_DWORD)mSelector == 1668510818)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 394;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioDevicePropertyClockIsStable", buf, 0x12u);
            }
            exception = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)exception = &off_1E69A1B30;
            exception[2] = 561211770;
          }
          v71 = *((_QWORD *)this + 47);
          v72 = *(_QWORD *)(v71 + 400);
          v41 = *(std::__shared_weak_count **)(v71 + 408);
          *(_QWORD *)buf = v72;
          *(_QWORD *)&buf[8] = v41;
          if (v41)
          {
            p_shared_owners = (unint64_t *)&v41->__shared_owners_;
            do
              v74 = __ldxr(p_shared_owners);
            while (__stxr(v74 + 1, p_shared_owners));
          }
          v75 = *((unsigned int *)this + 97);
          if (a9)
            v76 = *((unsigned int *)a9 + 58);
          else
            v76 = 0;
          LODWORD(v187) = 0;
          LODWORD(v189) = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v72 + 568))(v72, v75, v76, a3, 0, 0, 4, &v189, &v187);
          *(_DWORD *)a6 = v187;
          if (!v41)
            goto LABEL_249;
          v150 = (unint64_t *)&v41->__shared_owners_;
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          goto LABEL_246;
        }
        if ((_DWORD)mSelector == 1668641652)
        {
          v46 = a4 / 0xC;
          if (*((_DWORD *)this + 100) < a4 / 0xC)
            v46 = *((_DWORD *)this + 100);
          if (v46)
          {
            v47 = 0;
            v48 = 0;
            do
            {
              if (v48 < *((unsigned int *)this + 100))
              {
                v49 = (char *)a6 + v47;
                v50 = (uint64_t *)(*((_QWORD *)this + 49) + v47);
                v51 = *v50;
                *((_DWORD *)v49 + 2) = *((_DWORD *)v50 + 2);
                *(_QWORD *)v49 = v51;
              }
              ++v48;
              v47 += 12;
            }
            while (12 * v46 != v47);
          }
          v52 = 4 * v46;
          goto LABEL_250;
        }
        goto LABEL_143;
      }
      if ((_DWORD)mSelector != 1668049764)
      {
        if ((_DWORD)mSelector == 1668050795)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 386;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioDevicePropertyClockAlgorithm", buf, 0x12u);
            }
            v172 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v172 = &off_1E69A1B30;
            v172[2] = 561211770;
          }
          v39 = *((_QWORD *)this + 47);
          v40 = *(_QWORD *)(v39 + 400);
          v41 = *(std::__shared_weak_count **)(v39 + 408);
          *(_QWORD *)buf = v40;
          *(_QWORD *)&buf[8] = v41;
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          v44 = *((unsigned int *)this + 97);
          if (a9)
            v45 = *((unsigned int *)a9 + 58);
          else
            v45 = 0;
          LODWORD(v187) = 0;
          LODWORD(v189) = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v40 + 568))(v40, v44, v45, a3, 0, 0, 4, &v189, &v187);
          *(_DWORD *)a6 = v187;
          if (!v41)
            goto LABEL_249;
          v152 = (unint64_t *)&v41->__shared_owners_;
          do
            v151 = __ldaxr(v152);
          while (__stlxr(v151 - 1, v152));
          goto LABEL_246;
        }
        goto LABEL_143;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 333;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyClockDomain", buf, 0x12u);
        }
        v170 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v170 = &off_1E69A1B30;
        v170[2] = 561211770;
      }
      v65 = *((_QWORD *)this + 47);
      v66 = *(_QWORD *)(v65 + 400);
      v34 = *(std::__shared_weak_count **)(v65 + 408);
      *(_QWORD *)buf = v66;
      *(_QWORD *)&buf[8] = v34;
      if (v34)
      {
        v67 = (unint64_t *)&v34->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v69 = *((unsigned int *)this + 97);
      if (a9)
        v70 = *((unsigned int *)a9 + 58);
      else
        v70 = 0;
      v187 = 0x676C6F62636C6B64;
      v188 = 0;
      LODWORD(v189) = 0;
      v190 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v66 + 568))(v66, v69, v70, &v187, 0, 0, 4, &v190, &v189);
      *(_DWORD *)a6 = v189;
      if (!v34)
        goto LABEL_249;
      v148 = (unint64_t *)&v34->__shared_owners_;
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
    }
    else if ((int)mSelector <= 1768187245)
    {
      if ((_DWORD)mSelector == 1719105134)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 309;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioObjectPropertyFirmwareVersion", buf, 0x12u);
          }
          v176 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v176 = &off_1E69A1B30;
          v176[2] = 561211770;
        }
        v102 = *((_QWORD *)this + 47);
        v103 = *(_QWORD *)(v102 + 400);
        v27 = *(std::__shared_weak_count **)(v102 + 408);
        *(_QWORD *)buf = v103;
        *(_QWORD *)&buf[8] = v27;
        if (v27)
        {
          v104 = (unint64_t *)&v27->__shared_owners_;
          do
            v105 = __ldxr(v104);
          while (__stxr(v105 + 1, v104));
        }
        v106 = *((unsigned int *)this + 97);
        if (a9)
          v107 = *((unsigned int *)a9 + 58);
        else
          v107 = 0;
        v187 = 0x676C6F626677766ELL;
        v188 = 0;
        v189 = 0;
        v190 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v103 + 568))(v103, v106, v107, &v187, 0, 0, 8, &v190, &v189);
        *a6 = v189;
        if (!v27)
          goto LABEL_235;
        v157 = (unint64_t *)&v27->__shared_owners_;
        do
          v156 = __ldaxr(v157);
        while (__stlxr(v156 - 1, v157));
        goto LABEL_232;
      }
      if ((_DWORD)mSelector != 1735354734)
        goto LABEL_143;
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 349;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyDeviceIsRunning", buf, 0x12u);
        }
        v182 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v182 = &off_1E69A1B30;
        v182[2] = 561211770;
      }
      v53 = *((_QWORD *)this + 47);
      v54 = *(_QWORD *)(v53 + 400);
      v34 = *(std::__shared_weak_count **)(v53 + 408);
      *(_QWORD *)buf = v54;
      *(_QWORD *)&buf[8] = v34;
      if (v34)
      {
        v55 = (unint64_t *)&v34->__shared_owners_;
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      v57 = *((unsigned int *)this + 97);
      if (a9)
        v58 = *((unsigned int *)a9 + 58);
      else
        v58 = 0;
      v187 = 0x676C6F62676F696ELL;
      v188 = 0;
      LODWORD(v189) = 0;
      v190 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v54 + 568))(v54, v57, v58, &v187, 0, 0, 4, &v190, &v189);
      *(_DWORD *)a6 = v189;
      if (!v34)
        goto LABEL_249;
      v165 = (unint64_t *)&v34->__shared_owners_;
      do
        v149 = __ldaxr(v165);
      while (__stlxr(v149 - 1, v165));
    }
    else
    {
      switch((_DWORD)mSelector)
      {
        case 0x6964656E:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 293;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioObjectPropertyIdentify", buf, 0x12u);
            }
            v174 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v174 = &off_1E69A1B30;
            v174[2] = 561211770;
          }
          v83 = *((_QWORD *)this + 47);
          v84 = *(_QWORD *)(v83 + 400);
          v34 = *(std::__shared_weak_count **)(v83 + 408);
          *(_QWORD *)buf = v84;
          *(_QWORD *)&buf[8] = v34;
          if (v34)
          {
            v85 = (unint64_t *)&v34->__shared_owners_;
            do
              v86 = __ldxr(v85);
            while (__stxr(v86 + 1, v85));
          }
          v87 = *((unsigned int *)this + 97);
          if (a9)
            v88 = *((unsigned int *)a9 + 58);
          else
            v88 = 0;
          v187 = 0x676C6F626964656ELL;
          v188 = 0;
          LODWORD(v189) = 0;
          v190 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v84 + 568))(v84, v87, v88, &v187, 0, 0, 4, &v190, &v189);
          *(_DWORD *)a6 = v189;
          if (!v34)
            goto LABEL_249;
          v154 = (unint64_t *)&v34->__shared_owners_;
          do
            v149 = __ldaxr(v154);
          while (__stlxr(v149 - 1, v154));
          break;
        case 0x6C69766E:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 341;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyDeviceIsAlive", buf, 0x12u);
            }
            v173 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v173 = &off_1E69A1B30;
            v173[2] = 561211770;
          }
          v77 = *((_QWORD *)this + 47);
          v78 = *(_QWORD *)(v77 + 400);
          v34 = *(std::__shared_weak_count **)(v77 + 408);
          *(_QWORD *)buf = v78;
          *(_QWORD *)&buf[8] = v34;
          if (v34)
          {
            v79 = (unint64_t *)&v34->__shared_owners_;
            do
              v80 = __ldxr(v79);
            while (__stxr(v80 + 1, v79));
          }
          v81 = *((unsigned int *)this + 97);
          if (a9)
            v82 = *((unsigned int *)a9 + 58);
          else
            v82 = 0;
          v187 = 0x676C6F626C69766ELL;
          v188 = 0;
          LODWORD(v189) = 0;
          v190 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v78 + 568))(v78, v81, v82, &v187, 0, 0, 4, &v190, &v189);
          *(_DWORD *)a6 = v189;
          if (!v34)
            goto LABEL_249;
          v153 = (unint64_t *)&v34->__shared_owners_;
          do
            v149 = __ldaxr(v153);
          while (__stlxr(v149 - 1, v153));
          break;
        case 0x6C6D616B:
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 285;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioObjectPropertyManufacturer", buf, 0x12u);
            }
            v180 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v180 = &off_1E69A1B30;
            v180[2] = 561211770;
          }
          v25 = *((_QWORD *)this + 47);
          v26 = *(_QWORD *)(v25 + 400);
          v27 = *(std::__shared_weak_count **)(v25 + 408);
          *(_QWORD *)buf = v26;
          *(_QWORD *)&buf[8] = v27;
          if (v27)
          {
            v28 = (unint64_t *)&v27->__shared_owners_;
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
          }
          v30 = *((unsigned int *)this + 97);
          if (a9)
            v31 = *((unsigned int *)a9 + 58);
          else
            v31 = 0;
          v187 = 0x676C6F626C6D616BLL;
          v188 = 0;
          v189 = 0;
          v190 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v26 + 568))(v26, v30, v31, &v187, 0, 0, 8, &v190, &v189);
          *a6 = v189;
          if (!v27)
            goto LABEL_235;
          v159 = (unint64_t *)&v27->__shared_owners_;
          do
            v156 = __ldaxr(v159);
          while (__stlxr(v156 - 1, v159));
          goto LABEL_232;
        default:
          goto LABEL_143;
      }
    }
LABEL_240:
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      v168 = v34;
LABEL_248:
      std::__shared_weak_count::__release_weak(v168);
    }
LABEL_249:
    v52 = 4;
    goto LABEL_250;
  }
  if ((int)mSelector > 1919512166)
  {
    if ((int)mSelector <= 1935763059)
    {
      if ((_DWORD)mSelector != 1919512167)
      {
        if ((_DWORD)mSelector == 1920168547)
        {
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 410;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioObjectPropertyResourceBundle", buf, 0x12u);
            }
            v184 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v184 = &off_1E69A1B30;
            v184[2] = 561211770;
          }
          *a6 = (uint64_t)HALS_PlugInObject::CopyResourceBundlePath((uint64_t)this + 368, (uint64_t)a9);
          goto LABEL_235;
        }
        goto LABEL_143;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 371;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioDevicePropertyZeroTimeStampPeriod", buf, 0x12u);
        }
        v186 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v186 = &off_1E69A1B30;
        v186[2] = 561211770;
      }
      v120 = *((_QWORD *)this + 47);
      v121 = *(_QWORD *)(v120 + 400);
      v122 = *(std::__shared_weak_count **)(v120 + 408);
      *(_QWORD *)buf = v121;
      *(_QWORD *)&buf[8] = v122;
      if (v122)
      {
        v123 = (unint64_t *)&v122->__shared_owners_;
        do
          v124 = __ldxr(v123);
        while (__stxr(v124 + 1, v123));
      }
      v125 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v121 + 24))(v121);
      if (v122)
      {
        v126 = (unint64_t *)&v122->__shared_owners_;
        do
          v127 = __ldaxr(v126);
        while (__stlxr(v127 - 1, v126));
        if (!v127)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      if ((v125 & 1) == 0)
      {
        v140 = *((_QWORD *)this + 47);
        v141 = *(_QWORD *)(v140 + 400);
        v41 = *(std::__shared_weak_count **)(v140 + 408);
        *(_QWORD *)buf = v141;
        *(_QWORD *)&buf[8] = v41;
        if (v41)
        {
          v142 = (unint64_t *)&v41->__shared_owners_;
          do
            v143 = __ldxr(v142);
          while (__stxr(v143 + 1, v142));
        }
        v144 = *((unsigned int *)this + 97);
        if (a9)
          v145 = *((unsigned int *)a9 + 58);
        else
          v145 = 0;
        LODWORD(v187) = 0;
        LODWORD(v189) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v141 + 568))(v141, v144, v145, a3, 0, 0, 4, &v189, &v187);
        *(_DWORD *)a6 = v187;
        if (!v41)
          goto LABEL_249;
        v169 = (unint64_t *)&v41->__shared_owners_;
        do
          v151 = __ldaxr(v169);
        while (__stlxr(v151 - 1, v169));
        goto LABEL_246;
      }
      v128 = *((_QWORD *)this + 47);
      v129 = *(_QWORD *)(v128 + 400);
      v34 = *(std::__shared_weak_count **)(v128 + 408);
      *(_QWORD *)buf = v129;
      *(_QWORD *)&buf[8] = v34;
      if (v34)
      {
        v130 = (unint64_t *)&v34->__shared_owners_;
        do
          v131 = __ldxr(v130);
        while (__stxr(v131 + 1, v130));
      }
      v132 = *((unsigned int *)this + 97);
      if (a9)
        v133 = *((unsigned int *)a9 + 58);
      else
        v133 = 0;
      v187 = 0x676C6F626673697ALL;
      v188 = 0;
      LODWORD(v189) = 0;
      v190 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v129 + 568))(v129, v132, v133, &v187, 0, 0, 4, &v190, &v189);
      *(_DWORD *)a6 = v189;
      if (!v34)
        goto LABEL_249;
      v167 = (unint64_t *)&v34->__shared_owners_;
      do
        v149 = __ldaxr(v167);
      while (__stlxr(v149 - 1, v167));
    }
    else
    {
      if ((_DWORD)mSelector == 1935763060)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 402;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioDevicePropertySafetyOffset", buf, 0x12u);
          }
          v178 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v178 = &off_1E69A1B30;
          v178[2] = 561211770;
        }
        *(_DWORD *)a6 = 0;
        goto LABEL_249;
      }
      if ((_DWORD)mSelector == 1936618861)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 301;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioObjectPropertySerialNumber", buf, 0x12u);
          }
          v175 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v175 = &off_1E69A1B30;
          v175[2] = 561211770;
        }
        v96 = *((_QWORD *)this + 47);
        v97 = *(_QWORD *)(v96 + 400);
        v27 = *(std::__shared_weak_count **)(v96 + 408);
        *(_QWORD *)buf = v97;
        *(_QWORD *)&buf[8] = v27;
        if (v27)
        {
          v98 = (unint64_t *)&v27->__shared_owners_;
          do
            v99 = __ldxr(v98);
          while (__stxr(v99 + 1, v98));
        }
        v100 = *((unsigned int *)this + 97);
        if (a9)
          v101 = *((unsigned int *)a9 + 58);
        else
          v101 = 0;
        v187 = 0x676C6F62736E756DLL;
        v188 = 0;
        v189 = 0;
        v190 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v97 + 568))(v97, v100, v101, &v187, 0, 0, 8, &v190, &v189);
        *a6 = v189;
        if (!v27)
          goto LABEL_235;
        v155 = (unint64_t *)&v27->__shared_owners_;
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        goto LABEL_232;
      }
      if ((_DWORD)mSelector != 1953653102)
        goto LABEL_143;
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 325;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyTransportType", buf, 0x12u);
        }
        v181 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v181 = &off_1E69A1B30;
        v181[2] = 561211770;
      }
      v32 = *((_QWORD *)this + 47);
      v33 = *(_QWORD *)(v32 + 400);
      v34 = *(std::__shared_weak_count **)(v32 + 408);
      *(_QWORD *)buf = v33;
      *(_QWORD *)&buf[8] = v34;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      v37 = *((unsigned int *)this + 97);
      if (a9)
        v38 = *((unsigned int *)a9 + 58);
      else
        v38 = 0;
      v187 = 0x676C6F627472616ELL;
      v188 = 0;
      LODWORD(v189) = 0;
      v190 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v33 + 568))(v33, v37, v38, &v187, 0, 0, 4, &v190, &v189);
      *(_DWORD *)a6 = v189;
      if (!v34)
        goto LABEL_249;
      v164 = (unint64_t *)&v34->__shared_owners_;
      do
        v149 = __ldaxr(v164);
      while (__stlxr(v149 - 1, v164));
    }
    goto LABEL_240;
  }
  if ((int)mSelector <= 1819569762)
  {
    if ((_DWORD)mSelector != 1819111268)
    {
      if ((_DWORD)mSelector == 1819173229)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 269;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioObjectPropertyName", buf, 0x12u);
          }
          v183 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v183 = &off_1E69A1B30;
          v183[2] = 561211770;
        }
        v59 = *((_QWORD *)this + 47);
        v60 = *(_QWORD *)(v59 + 400);
        v27 = *(std::__shared_weak_count **)(v59 + 408);
        *(_QWORD *)buf = v60;
        *(_QWORD *)&buf[8] = v27;
        if (v27)
        {
          v61 = (unint64_t *)&v27->__shared_owners_;
          do
            v62 = __ldxr(v61);
          while (__stxr(v62 + 1, v61));
        }
        v63 = *((unsigned int *)this + 97);
        if (a9)
          v64 = *((unsigned int *)a9 + 58);
        else
          v64 = 0;
        v187 = 0x676C6F626C6E616DLL;
        v188 = 0;
        v189 = 0;
        v190 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v60 + 568))(v60, v63, v64, &v187, 0, 0, 8, &v190, &v189);
        *a6 = v189;
        if (!v27)
          goto LABEL_235;
        v166 = (unint64_t *)&v27->__shared_owners_;
        do
          v156 = __ldaxr(v166);
        while (__stlxr(v156 - 1, v166));
        goto LABEL_232;
      }
LABEL_143:
      if (HALS_ClockDevice::HasProperty((uint64_t)this, a2, (int *)a3))
      {
        HALS_ClockDevice::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
      }
      else if ((*(unsigned int (**)(char *, uint64_t))(*((_QWORD *)this + 46) + 24))((char *)this + 368, mSelector))
      {
        v134 = *((_QWORD *)this + 47);
        v135 = *(_QWORD *)(v134 + 400);
        v136 = *(_QWORD *)(v134 + 408);
        *(_QWORD *)buf = v135;
        *(_QWORD *)&buf[8] = v136;
        if (v136)
        {
          v137 = (unint64_t *)(v136 + 8);
          do
            v138 = __ldxr(v137);
          while (__stxr(v138 + 1, v137));
        }
        if (a9)
          v139 = *((unsigned int *)a9 + 58);
        else
          v139 = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v135 + 568))(v135, *((unsigned int *)this + 97), v139, a3, a7, a8, a4, a5, a6);
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      }
      return;
    }
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 277;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioObjectPropertyModelName", buf, 0x12u);
      }
      v185 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v185 = &off_1E69A1B30;
      v185[2] = 561211770;
    }
    v114 = *((_QWORD *)this + 47);
    v115 = *(_QWORD *)(v114 + 400);
    v27 = *(std::__shared_weak_count **)(v114 + 408);
    *(_QWORD *)buf = v115;
    *(_QWORD *)&buf[8] = v27;
    if (v27)
    {
      v116 = (unint64_t *)&v27->__shared_owners_;
      do
        v117 = __ldxr(v116);
      while (__stxr(v117 + 1, v116));
    }
    v118 = *((unsigned int *)this + 97);
    if (a9)
      v119 = *((unsigned int *)a9 + 58);
    else
      v119 = 0;
    v187 = 0x676C6F626C6D6F64;
    v188 = 0;
    v189 = 0;
    v190 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v115 + 568))(v115, v118, v119, &v187, 0, 0, 8, &v190, &v189);
    *a6 = v189;
    if (!v27)
      goto LABEL_235;
    v160 = (unint64_t *)&v27->__shared_owners_;
    do
      v156 = __ldaxr(v160);
    while (__stlxr(v156 - 1, v160));
LABEL_232:
    if (v156)
    {
LABEL_235:
      v52 = 8;
LABEL_250:
      *a5 = v52;
      return;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    v163 = v27;
LABEL_234:
    std::__shared_weak_count::__release_weak(v163);
    goto LABEL_235;
  }
  if ((_DWORD)mSelector == 1819569763)
  {
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 357;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyLatency", buf, 0x12u);
      }
      v177 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v177 = &off_1E69A1B30;
      v177[2] = 561211770;
    }
    v108 = *((_QWORD *)this + 47);
    v109 = *(_QWORD *)(v108 + 400);
    v41 = *(std::__shared_weak_count **)(v108 + 408);
    *(_QWORD *)buf = v109;
    *(_QWORD *)&buf[8] = v41;
    if (v41)
    {
      v110 = (unint64_t *)&v41->__shared_owners_;
      do
        v111 = __ldxr(v110);
      while (__stxr(v111 + 1, v110));
    }
    v112 = *((unsigned int *)this + 97);
    if (a9)
      v113 = *((unsigned int *)a9 + 58);
    else
      v113 = 0;
    LODWORD(v187) = 0;
    LODWORD(v189) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v109 + 568))(v109, v112, v113, a3, 0, 0, 4, &v189, &v187);
    *(_DWORD *)a6 = v187;
    if (!v41)
      goto LABEL_249;
    v158 = (unint64_t *)&v41->__shared_owners_;
    do
      v151 = __ldaxr(v158);
    while (__stlxr(v151 - 1, v158));
LABEL_246:
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      v168 = v41;
      goto LABEL_248;
    }
    goto LABEL_249;
  }
  if ((_DWORD)mSelector != 1853059619)
  {
    if ((_DWORD)mSelector == 1853059700)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 317;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyNominalSampleRate", buf, 0x12u);
        }
        v179 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v179 = &off_1E69A1B30;
        v179[2] = 561211770;
      }
      v18 = *((_QWORD *)this + 47);
      v19 = *(_QWORD *)(v18 + 400);
      v20 = *(std::__shared_weak_count **)(v18 + 408);
      *(_QWORD *)buf = v19;
      *(_QWORD *)&buf[8] = v20;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = *((unsigned int *)this + 97);
      if (a9)
        v24 = *((unsigned int *)a9 + 58);
      else
        v24 = 0;
      v187 = 0;
      LODWORD(v189) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v19 + 568))(v19, v23, v24, a3, 0, 0, 8, &v189, &v187);
      *a6 = v187;
      if (!v20)
        goto LABEL_235;
      v161 = (unint64_t *)&v20->__shared_owners_;
      do
        v162 = __ldaxr(v161);
      while (__stlxr(v162 - 1, v161));
      if (v162)
        goto LABEL_235;
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      v163 = v20;
      goto LABEL_234;
    }
    goto LABEL_143;
  }
  v89 = *((_QWORD *)this + 47);
  v90 = *(_QWORD *)(v89 + 400);
  v91 = *(std::__shared_weak_count **)(v89 + 408);
  *(_QWORD *)buf = v90;
  *(_QWORD *)&buf[8] = v91;
  if (v91)
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  v94 = *((unsigned int *)this + 97);
  if (a9)
    v95 = *((unsigned int *)a9 + 58);
  else
    v95 = 0;
  v187 = 0x676C6F626E737223;
  v188 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v90 + 568))(v90, v94, v95, &v187, 0, 0, a4, a5, a6);
  if (v91)
  {
    v146 = (unint64_t *)&v91->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
}

void sub_1B5AB1F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void HALS_PlugInClockDevice::SetPropertyData(HALS_PlugInClockDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  uint64_t mSelector;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  _DWORD *exception;
  uint64_t v55;
  int v56;
  _BYTE buf[18];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  mSelector = a3->mSelector;
  if ((_DWORD)mSelector != 1768187246)
  {
    if ((_DWORD)mSelector == 1853059700)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 455;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::SetPropertyData: bad property data size for kAudioClockDevicePropertyNominalSampleRate", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 561211770;
      }
      v21 = *((_QWORD *)this + 47);
      v22 = *(_QWORD *)(v21 + 400);
      v23 = *(std::__shared_weak_count **)(v21 + 408);
      *(_QWORD *)buf = v22;
      *(_QWORD *)&buf[8] = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(p_shared_owners);
        while (__stxr(v25 + 1, p_shared_owners));
      }
      if (a8)
        v26 = *((unsigned int *)a8 + 58);
      else
        v26 = 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, const void *))(*(_QWORD *)v22 + 576))(v22, *((unsigned int *)this + 97), v26, a3, 0, 0, a4, a5);
      if (!v23)
        return;
      v50 = (unint64_t *)&v23->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (v51)
        return;
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      v49 = v23;
    }
    else
    {
      if ((_DWORD)mSelector == 1819173229)
      {
        v14 = *((_QWORD *)this + 47);
        v15 = *(_QWORD *)(v14 + 400);
        v16 = *(std::__shared_weak_count **)(v14 + 408);
        *(_QWORD *)buf = v15;
        *(_QWORD *)&buf[8] = v16;
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v19 = *((unsigned int *)this + 97);
        if (a8)
          v20 = *((unsigned int *)a8 + 58);
        else
          v20 = 0;
        v55 = 0x676C6F626C6E616DLL;
        v56 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, const void *))(*(_QWORD *)v15 + 576))(v15, v19, v20, &v55, 0, 0, a4, a5);
        if (v16)
        {
          v48 = (unint64_t *)&v16->__shared_owners_;
          do
            v47 = __ldaxr(v48);
          while (__stlxr(v47 - 1, v48));
LABEL_38:
          if (v47)
            return;
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          v49 = v16;
          goto LABEL_52;
        }
        return;
      }
      if (HALS_ClockDevice::HasProperty((uint64_t)this, a2, (int *)a3))
      {
        if ((HALS_ClockDevice::IsPropertySettable((uint64_t)this, a2, (int *)a3) & 1) != 0)
          HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v36, v37, v38, v39, (uint64_t)a8);
        mSelector = a3->mSelector;
      }
      if (!(*(unsigned int (**)(char *, uint64_t))(*((_QWORD *)this + 46) + 24))((char *)this + 368, mSelector))return;
      v40 = *((_QWORD *)this + 47);
      v41 = *(_QWORD *)(v40 + 400);
      v42 = *(std::__shared_weak_count **)(v40 + 408);
      *(_QWORD *)buf = v41;
      *(_QWORD *)&buf[8] = v42;
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = a8 ? *((unsigned int *)a8 + 58) : 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *))(*(_QWORD *)v41 + 576))(v41, *((unsigned int *)this + 97), v45, a3, a6, a7, a4, a5);
      if (!v42)
        return;
      v52 = (unint64_t *)&v42->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (v53)
        return;
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      v49 = v42;
    }
LABEL_52:
    std::__shared_weak_count::__release_weak(v49);
    return;
  }
  v27 = *((_QWORD *)this + 47);
  v28 = *(_QWORD *)(v27 + 400);
  v16 = *(std::__shared_weak_count **)(v27 + 408);
  *(_QWORD *)buf = v28;
  *(_QWORD *)&buf[8] = v16;
  if (v16)
  {
    v29 = (unint64_t *)&v16->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = *((unsigned int *)this + 97);
  if (a8)
    v32 = *((unsigned int *)a8 + 58);
  else
    v32 = 0;
  v55 = 0x676C6F626964656ELL;
  v56 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, const void *))(*(_QWORD *)v28 + 576))(v28, v31, v32, &v55, 0, 0, a4, a5);
  if (v16)
  {
    v46 = (unint64_t *)&v16->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    goto LABEL_38;
  }
}

void sub_1B5AB23E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInClockDevice::create_mcp_engine(HALS_PlugInClockDevice *this)
{
  uint64_t v1;
  int v3;

  v1 = *((_QWORD *)this + 47);
  v3 = *((_DWORD *)this + 97);
  return (*(uint64_t (**)(_QWORD, uint64_t, HALS_PlugInClockDevice *, int *))(**(_QWORD **)(v1 + 400) + 152))(*(_QWORD *)(v1 + 400), v1, this, &v3);
}

HALS_ObjectMap *HALS_PlugInClockDevice::_CopyIOEngine(HALS_ObjectMap **this, HALS_Object *a2)
{
  HALS_ObjectMap::RetainObject(this[51], a2);
  return this[51];
}

void HALS_PlugInClockDevice::HandlePlugIn_PropertiesChanged(HALS_PlugInClockDevice *this, uint64_t a2, const AudioObjectPropertyAddress *a3)
{
  HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), 0, a2, a3);
}

void `non-virtual thunk to'HALS_PlugInClockDevice::~HALS_PlugInClockDevice(HALS_PlugInClockDevice *this)
{
  HALS_PlugInClockDevice::~HALS_PlugInClockDevice((HALS_PlugInClockDevice *)((char *)this - 368));
}

{
  HALS_PlugInClockDevice::~HALS_PlugInClockDevice((HALS_PlugInClockDevice *)((char *)this - 368));
  JUMPOUT(0x1B5E50688);
}

void `non-virtual thunk to'HALS_PlugInClockDevice::HandlePlugIn_PropertiesChanged(HALS_PlugInClockDevice *this, uint64_t a2, const AudioObjectPropertyAddress *a3)
{
  HALS_Object::PropertiesChanged((HALS_PlugInClockDevice *)((char *)this - 368), (HALS_NotificationManager *)*((unsigned int *)this - 88), 0, a2, a3);
}

void ___ZN22HALS_PlugInClockDevice32HandlePlugIn_RequestConfigChangeENS_19ConfigChangePayloadEb_block_invoke(uint64_t a1)
{
  HALS_ObjectMap *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  const AudioObjectPropertyAddress *v7;
  HALS_NotificationManager *v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  HALS_ClockDeviceState *v34;
  CAPropertyAddressList *v35;
  const AudioObjectPropertyAddress *v36;
  const AudioObjectPropertyAddress *v37;
  _BOOL4 v38;
  HALS_Object *v39;
  int v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  os_unfair_lock_s *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  HALS_Object *v78;
  int v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  _QWORD *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  void *__p;
  void *v90;
  uint64_t v91;
  CFTypeRef cf;
  uint64_t v93;
  std::__shared_weak_count *v94;
  void *v95;
  unsigned int *v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  _BYTE v100[18];
  __int16 v101;
  uint64_t v102;
  _BYTE buf[28];
  __int16 v104;
  int v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v2 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 56));
  v3 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 60));
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(unsigned __int8 *)(a1 + 48);
    kdebug_trace();
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 543;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v3 + 112;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInClockDevice::HandlePlugIn_RequestConfigChange: %s  --->", buf, 0x1Cu);
    }
    v98 = 0u;
    v99 = 0u;
    v8 = (HALS_NotificationManager *)*(unsigned int *)(v3 + 16);
    v84 = 0x676C6F6263666762;
    LODWORD(v85) = 0;
    HALS_NotificationManager::PropertiesChanged_Sync(v8, 0, 1u, (const AudioObjectPropertyAddress *)&v84, v7);
    v95 = 0;
    v96 = 0;
    v97 = 0;
    v93 = 0;
    v94 = 0;
    HALS_System::GetInstance(buf, 0, &v93);
    v9 = *(_QWORD *)buf;
    v10 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 200))(v3);
    v11 = v10;
    if (v10)
      CFRetain(v10);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v11);
    HALS_System::GetRawDeviceListUsingClockDevice(v9, (uint64_t)&v95, &cf);
    if (cf)
      CFRelease(cf);
    v12 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = v94;
    if (v94)
    {
      p_shared_owners = (unint64_t *)&v94->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    __p = 0;
    v90 = 0;
    v91 = 0;
    v18 = *(_QWORD *)(v3 + 408);
    if (v18)
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v18 + 216))(v18, &__p);
    v87 = 0;
    v88 = 0;
    HALS_System::GetInstance(buf, 0, &v87);
    HALS_IOContext_Manager::pause_contexts_for_device(*(os_unfair_lock_s **)(*(_QWORD *)buf + 1392), (HALS_IODevice *)v3);
    v19 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v88;
    if (v88)
    {
      v23 = (unint64_t *)&v88->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    HALS_ClockDeviceState::HALS_ClockDeviceState((HALS_ClockDeviceState *)&v84);
    HALS_ClockDeviceState::Capture((HALS_ClockDeviceState *)&v84, (HALS_ClockDevice *)v3, (const CAPropertyAddressList *)HALS_ClockDeviceState::sStandardDevicePropertiesToCapture);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 572;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v3 + 112;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInClockDevice::HandlePlugIn_RequestConfigChange: %s  --- calling driver", buf, 0x1Cu);
    }
    if (v6)
    {
      kdebug_trace();
      v25 = *(_QWORD *)(v3 + 376);
      v26 = *(_QWORD *)(v25 + 400);
      v27 = *(_QWORD *)(v25 + 408);
      *(_QWORD *)buf = v26;
      *(_QWORD *)&buf[8] = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v26 + 96))(v26, *(unsigned int *)(v3 + 388), v4, v5);
      v31 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v32 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      kdebug_trace();
      if (v30 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 583;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v3 + 112;
        v104 = 1024;
        v105 = v30;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInClockDevice::HandlePlugIn_RequestConfigChange: %s  --- driver encountered error %d", buf, 0x22u);
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 588;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v3 + 112;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInClockDevice::HandlePlugIn_RequestConfigChange: %s  --- driver returned", buf, 0x1Cu);
    }
    HALS_ClockDeviceState::HALS_ClockDeviceState((HALS_ClockDeviceState *)buf);
    HALS_ClockDeviceState::Capture(v34, (HALS_ClockDevice *)v3, (const CAPropertyAddressList *)HALS_ClockDeviceState::sStandardDevicePropertiesToCapture);
    HALS_ClockDeviceState::Compare((HALS_ClockDeviceState *)&v84, (const HALS_ClockDeviceState *)buf, (const AudioObjectPropertyAddress *)&v98, v35);
    if ((_QWORD)v98 == *((_QWORD *)&v98 + 1))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v100 = 136315650;
        *(_QWORD *)&v100[4] = "HALS_PlugInClockDevice.cpp";
        *(_WORD *)&v100[12] = 1024;
        *(_DWORD *)&v100[14] = 613;
        v101 = 2080;
        v102 = v3 + 112;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInClockDevice::HandlePlugIn_RequestConfigChange: %s  but nothing changed", v100, 0x1Cu);
      }
    }
    else
    {
      v82 = 0x676C6F6264696666;
      LODWORD(v83) = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v98, (AudioObjectPropertyAddress *)&v82, v36);
    }
    strcpy(v100, "egfcbolg");
    v100[9] = 0;
    *(_WORD *)&v100[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v98, (AudioObjectPropertyAddress *)v100, v37);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(_QWORD **)&buf[16]);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v86);
    v47 = *(_QWORD *)(v3 + 408);
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 928))(v47);
    v84 = 0;
    v85 = 0;
    HALS_System::GetInstance(buf, 0, &v84);
    HALS_IOContext_Manager::rebuild_engine_for_device(*(HALS_IOContext_Manager **)(*(_QWORD *)buf + 1392), (const HALS_IODevice *)v3);
    v48 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v49 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = v85;
    if (v85)
    {
      v52 = (unint64_t *)&v85->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 634;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v3 + 112;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInClockDevice::HandlePlugIn_RequestConfigChange: %s  --- sending notifications", buf, 0x1Cu);
    }
    kdebug_trace();
    v54 = *(_DWORD *)(v3 + 16);
    memset(buf, 0, 24);
    HALS_NotificationManager::GroupPropertiesChanged(1, v54, 0, (uint64_t)&v98, (uint64_t *)buf, (uint64_t)&__p);
    *(_QWORD *)v100 = buf;
    std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)v100);
    v55 = (unsigned int *)v95;
    v56 = v96;
    if (v95 != v96)
    {
      do
      {
        v57 = *v55;
        memset(buf, 0, 24);
        HALS_NotificationManager::GroupPropertiesChanged(1, v57, 0, (uint64_t)&v98, (uint64_t *)buf, (uint64_t)&__p);
        *(_QWORD *)v100 = buf;
        std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)v100);
        ++v55;
      }
      while (v55 != v56);
    }
    kdebug_trace();
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 648;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v3 + 112;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInClockDevice::HandlePlugIn_RequestConfigChange: %s  --- restarting IO", buf, 0x1Cu);
    }
    v58 = *(_QWORD *)(v3 + 408);
    if (v58)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 232))(v58);
      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v3 + 408) + 224))(*(_QWORD *)(v3 + 408), &__p);
    }
    *(_QWORD *)v100 = 0;
    *(_QWORD *)&v100[8] = 0;
    HALS_System::GetInstance(buf, 0, (uint64_t *)v100);
    v59 = (os_unfair_lock_s *)(*(_QWORD *)(*(_QWORD *)buf + 1392) + 16);
    os_unfair_lock_lock(v59);
    os_unfair_lock_unlock(v59);
    v60 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v61 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = *(std::__shared_weak_count **)&v100[8];
    if (*(_QWORD *)&v100[8])
    {
      v64 = (unint64_t *)(*(_QWORD *)&v100[8] + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v82 = 0;
    v83 = 0;
    HALS_System::GetInstance(buf, 0, &v82);
    HALS_IOContext_Manager::resume_contexts_for_device(*(os_unfair_lock_s **)(*(_QWORD *)buf + 1392), (HALS_IODevice *)v3);
    v66 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v67 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v69 = v83;
    if (v83)
    {
      v70 = (unint64_t *)&v83->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v80 = 0;
    v81 = 0;
    HALS_System::GetInstance(buf, 0, &v80);
    HALS_System::CheckForDefaultDeviceChanges(*(HALS_System **)buf);
    v72 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v73 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v75 = v81;
    if (v81)
    {
      v76 = (unint64_t *)&v81->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    if (__p)
    {
      v90 = __p;
      operator delete(__p);
    }
    if (v95)
      operator delete(v95);
    if ((_QWORD)v98)
      operator delete((void *)v98);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 668;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v3 + 112;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInClockDevice::HandlePlugIn_RequestConfigChange: %s  <---", buf, 0x1Cu);
    }
    kdebug_trace();
  }
  else
  {
    v38 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (v38)
      {
        v40 = *(_DWORD *)(a1 + 60);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 523;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v40;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInClockDevice::HandlePlugIn_RequestConfigChange: Device %u is no longer valid, calling abort config change", buf, 0x18u);
      }
      if (*(_BYTE *)(a1 + 48))
      {
        v41 = *((_QWORD *)v2 + 50);
        v42 = (std::__shared_weak_count *)*((_QWORD *)v2 + 51);
        *(_QWORD *)buf = v41;
        *(_QWORD *)&buf[8] = v42;
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
        }
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v41 + 104))(v41, *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
        if (v42)
        {
          v45 = (unint64_t *)&v42->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
      }
    }
    else if (v38)
    {
      v79 = *(_DWORD *)(a1 + 60);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_PlugInClockDevice.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 533;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v79;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInClockDevice::HandlePlugIn_RequestConfigChange: Failed to perform or abort config change request for device %u", buf, 0x18u);
    }
  }
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v3, v39);
  HALS_ObjectMap::ReleaseObject(v2, v78);
}

void sub_1B5AB3230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32)
{
  HALS_ObjectMap *v32;
  HALS_ObjectMap *v33;
  uint64_t v34;
  HALS_Object *v36;
  HALS_Object *v37;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v34 - 128);
  HALS_ObjectMap::ReleaseObject(v33, v36);
  HALS_ObjectMap::ReleaseObject(v32, v37);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Manifest::Manifest(unint64_t a1, uint64_t **a2, _QWORD *a3, uint64_t *a4, _QWORD *a5, std::string::size_type *a6)
{
  unint64_t v6;
  unint64_t v9;
  char *v10;
  char *v11;
  std::string::size_type v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *nth_connection_list;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  AMCP::Log::Scope_Registry *v29;
  uint64_t v30;
  uint64_t v31;
  std::string *v32;
  char *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  std::string::size_type v39;
  __int128 v40;
  uint64_t *v41;
  uint64_t v42;
  CFTypeRef *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  CFTypeRef *v56;
  uint64_t v57;
  std::string::size_type v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  _QWORD *v62;
  uint64_t v63;
  std::string *v64;
  std::string *v65;
  uint64_t v66;
  CFTypeRef *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  std::string::size_type v78;
  std::string::size_type v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  std::string *v83;
  std::string *v84;
  uint64_t v85;
  unint64_t i;
  std::string::pointer data;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::string *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  int64x2_t *v103;
  unint64_t v104;
  uint64_t v105;
  CFComparisonResult v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  _OWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  char *v124;
  __int128 v125;
  int64x2_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  char *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t *v149;
  std::string::size_type v150;
  uint64_t *v151;
  uint64_t v152;
  unsigned __int8 *v153;
  char *v154;
  unsigned __int8 *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint8x8_t v159;
  unint64_t v160;
  unsigned __int8 **v161;
  unsigned __int8 *m;
  unint64_t v163;
  char *v164;
  float v165;
  _BOOL8 v166;
  unint64_t v167;
  unint64_t v168;
  size_t v169;
  _QWORD *v170;
  _QWORD *v171;
  unint64_t v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t *v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *j;
  std::string::size_type v193;
  std::__shared_weak_count *v194;
  uint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  _OWORD *v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  char *v219;
  uint64_t v220;
  char *v221;
  unint64_t *v222;
  unint64_t v223;
  _QWORD *v224;
  _QWORD *v225;
  char *v226;
  __int128 v227;
  int64x2_t v228;
  std::string::size_type v229;
  std::string::size_type v230;
  uint64_t *v231;
  int64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  _QWORD *v241;
  uint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  std::string::size_type v245;
  _QWORD *v246;
  uint64_t *v247;
  uint64_t *v248;
  uint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  std::string::size_type v252;
  _QWORD *v253;
  _QWORD *v254;
  __int128 v255;
  _QWORD *v256;
  std::string::size_type v257;
  std::string::size_type v258;
  _QWORD *v259;
  _OWORD *v260;
  _QWORD *k;
  __int128 v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  AMCP::Log::Scope_Registry **v272;
  uint64_t v273;
  char v274;
  uint64_t v275;
  unsigned int v276;
  char v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t *v281;
  uint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  AMCP::Log::Scope_Registry **v286;
  AMCP::Log::Scope_Registry **v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  _QWORD *v293;
  std::string::size_type v294;
  uint64_t v295;
  unint64_t *v296;
  unint64_t v297;
  std::string::size_type v298;
  uint64_t v299;
  unint64_t v300;
  int64_t v301;
  unint64_t v302;
  char *v303;
  uint64_t v304;
  char *v305;
  __int128 v306;
  unint64_t *v307;
  unint64_t v308;
  _QWORD *v309;
  std::string::size_type v310;
  std::string::size_type v311;
  __int128 v312;
  int64x2_t v313;
  std::string::size_type v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t **v317;
  uint64_t **v318;
  uint64_t *v319;
  uint64_t *v320;
  uint64_t *v321;
  int v322;
  std::string::size_type v323;
  uint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  _BOOL4 v328;
  unint64_t *v329;
  unint64_t v330;
  uint64_t v331;
  __int128 v332;
  uint64_t v333;
  unint64_t *v334;
  const void *v335;
  unint64_t *v336;
  unint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  uint64_t *v348;
  uint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  unint64_t *v354;
  unint64_t v355;
  std::string::size_type v356;
  unint64_t *v357;
  unint64_t v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  uint64_t *v362;
  uint64_t v363;
  unint64_t v364;
  std::string::size_type v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t *v374;
  unint64_t v375;
  void *v376;
  std::__shared_weak_count *v378;
  NSObject *v379;
  unint64_t *v380;
  unint64_t v381;
  _opaque_pthread_t *v382;
  mach_port_t v383;
  _QWORD *v384;
  void *v385;
  _QWORD *v386;
  NSObject *v387;
  _opaque_pthread_t *v388;
  mach_port_t v389;
  void *exception;
  std::__shared_weak_count *size;
  NSObject *v392;
  unint64_t *v393;
  unint64_t v394;
  _opaque_pthread_t *v395;
  mach_port_t v396;
  void *v397;
  int v398;
  NSObject *v399;
  _opaque_pthread_t *v400;
  mach_port_t v401;
  _QWORD *v402;
  void *v403;
  _QWORD *v404;
  NSObject *v405;
  _opaque_pthread_t *v406;
  mach_port_t v407;
  void *v408;
  uint64_t *v409;
  uint64_t *v410;
  int64x2_t *v411;
  _QWORD *v412;
  uint64_t **v413;
  std::__shared_weak_count *v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t *v421;
  uint64_t v422;
  __int128 v423;
  std::__shared_weak_count *v424;
  uint64_t nth_terminal;
  _BOOL4 v426;
  uint64_t *v427;
  uint64_t *v429;
  char v430;
  AMCP::Log::Scope_Registry **v431;
  uint64_t v432;
  __int128 v433;
  void *__p[2];
  __int128 v435;
  int v436;
  __int128 v437;
  std::string *v438;
  _BYTE v439[24];
  std::string *v440;
  std::string v441;
  std::logic_error v442;
  char v443;
  _QWORD v444[2];
  __int128 v445;
  std::string v446;
  std::string v447;
  std::string v448;
  AMCP::Log::Scope_Registry *v449;
  int v450;
  CFTypeRef cf[4];
  float v452;
  std::string v453;
  std::string *v454;
  uint64_t v455;
  uint64_t v456;
  int v457;
  std::string v458[2];
  int v459;
  uint64_t v460;

  v9 = a1;
  v460 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v411 = (int64x2_t *)(a1 + 8);
  v416 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  v10 = (char *)operator new(0xE0uLL);
  v11 = v10;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E69851B8;
  v12 = a6[1];
  v458[0].__r_.__value_.__r.__words[0] = *a6;
  v458[0].__r_.__value_.__l.__size_ = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_OWORD *)(v10 + 72) = *(_OWORD *)&v458[0].__r_.__value_.__l.__data_;
  *((_OWORD *)v10 + 2) = 0u;
  v10[24] = 1;
  *((_OWORD *)v10 + 3) = 0u;
  *((_DWORD *)v10 + 16) = 1065353216;
  *(_OWORD *)&v458[0].__r_.__value_.__l.__data_ = 0uLL;
  v15 = operator new();
  *(_BYTE *)v15 = 0;
  *(_OWORD *)(v15 + 8) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  *(_DWORD *)(v15 + 40) = 0;
  *((_QWORD *)v11 + 11) = v15;
  *((_QWORD *)v11 + 12) = 0;
  v16 = operator new();
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_DWORD *)(v16 + 32) = 1065353216;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = 0;
  *((_QWORD *)v11 + 13) = v16;
  v17 = (_QWORD *)operator new();
  *v17 = &off_1E69839D0;
  v17[1] = 0;
  v413 = (uint64_t **)(v9 + 72);
  v17[2] = 0;
  v17[3] = v16;
  *((_QWORD *)v11 + 14) = v17;
  *((_QWORD *)v11 + 23) = 0;
  *((_QWORD *)v11 + 27) = 0;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *((_QWORD *)v11 + 19) = 0;
  *(_QWORD *)(v9 + 72) = v11 + 24;
  *(_QWORD *)(v9 + 80) = v11;
  *(_QWORD *)(v9 + 88) = 0;
  nth_connection_list = operator new(0x88uLL);
  v19 = (std::__shared_weak_count *)nth_connection_list;
  nth_connection_list[1] = 0;
  v20 = nth_connection_list + 1;
  nth_connection_list[2] = 0;
  nth_connection_list[3] = 0;
  *nth_connection_list = &off_1E6985208;
  nth_connection_list[4] = 0;
  nth_connection_list[5] = nth_connection_list + 5;
  nth_connection_list[6] = nth_connection_list + 5;
  *(_OWORD *)(nth_connection_list + 7) = xmmword_1B5D68B50;
  nth_connection_list[9] = 850045863;
  *((_OWORD *)nth_connection_list + 5) = 0u;
  *((_OWORD *)nth_connection_list + 6) = 0u;
  *((_OWORD *)nth_connection_list + 7) = 0u;
  nth_connection_list[16] = 0;
  *(_QWORD *)(v9 + 96) = nth_connection_list + 3;
  *(_QWORD *)(v9 + 104) = nth_connection_list;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v22 = nth_connection_list + 2;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  nth_connection_list[3] = nth_connection_list + 3;
  nth_connection_list[4] = nth_connection_list;
  do
    v24 = __ldaxr(v20);
  while (__stlxr(v24 - 1, v20));
  if (!v24)
  {
    (*(void (**)(_QWORD *))(*nth_connection_list + 16))(nth_connection_list);
    std::__shared_weak_count::__release_weak(v19);
  }
  v25 = atomic_load(AMCP::Graph::initialize_realtime_safe_allocator(void)::has_been_initialized);
  if ((v25 & 1) == 0)
  {
    if (!*MEMORY[0x1E0DDB4F0])
      __break(1u);
    nth_connection_list = (_QWORD *)caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0]);
    atomic_store(1u, AMCP::Graph::initialize_realtime_safe_allocator(void)::has_been_initialized);
    if (nth_connection_list)
      nth_connection_list = std::allocator_traits<caulk::rt_allocator<int>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)nth_connection_list, 0x14uLL);
  }
  v409 = a4;
  *(_OWORD *)__p = 0u;
  v435 = 0u;
  v436 = 1065353216;
  v26 = *a2;
  v27 = a2[1];
  v422 = v9;
  if (*a2 == v27)
    goto LABEL_397;
  v421 = a2[1];
  do
  {
    v28 = *v26;
    if (*(char *)(*v26 + 47) < 0)
      std::string::__init_copy_ctor_external(v458, *(const std::string::value_type **)(v28 + 24), *(_QWORD *)(v28 + 32));
    else
      v458[0] = *(std::string *)(v28 + 24);
    std::unordered_map<std::string,std::shared_ptr<AMCP::Graph::Node>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Graph::Node> const&>((uint64_t)__p, (uint64_t)v458, v26);
    if (SHIBYTE(v458[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v458[0].__r_.__value_.__l.__data_);
    v30 = *v26;
    v426 = *(_DWORD *)(*v26 + 16) != 0;
    v31 = *(_QWORD *)(*v26 + 192);
    if (!v31)
    {
      AMCP::Log::Scope_Registry::get(v29);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v458, "com.apple.coreaudio", "AMCP");
      v387 = *(NSObject **)v458[0].__r_.__value_.__l.__data_;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v458);
      if (os_log_type_enabled(v387, OS_LOG_TYPE_ERROR))
      {
        v388 = pthread_self();
        v389 = pthread_mach_thread_np(v388);
        LODWORD(v458[0].__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v458[0].__r_.__value_.__r.__words[0]) = v389;
        LOWORD(v458[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v458[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphNode.cpp";
        WORD1(v458[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v458[0].__r_.__value_.__r.__words[2]) = 678;
        LOWORD(v458[1].__r_.__value_.__l.__data_) = 2080;
        *(std::string::size_type *)((char *)v458[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"not (m_node_proc)";
        _os_log_error_impl(&dword_1B57BA000, v387, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)v458, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v446);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v448);
      std::logic_error::logic_error((std::logic_error *)&v447, &v448);
      v447.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error((std::logic_error *)&v453, (const std::logic_error *)&v447);
      v454 = 0;
      v455 = 0;
      v456 = 0;
      v457 = -1;
      v453.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
      v453.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v458, (uint64_t)&v453);
      v458[1].__r_.__value_.__l.__size_ = (std::string::size_type)"std::shared_ptr<Node_Proc> AMCP::Graph::Node::get_node"
                                                                  "_procs(Wire_Index &)";
      v458[1].__r_.__value_.__r.__words[2] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Sour"
                                                                     "ce/AMCP/IO/Graph/GraphNode.cpp";
      v459 = 678;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v439);
      *(_OWORD *)&cf[1] = *(_OWORD *)v439;
      cf[0] = off_1E69A20A0;
      cf[3] = *(CFTypeRef *)&v439[16];
      memset(v439, 0, sizeof(v439));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v458, (uint64_t)cf);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)v458);
    }
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v448, v31);
    v32 = (std::string *)v449;
    if (!v449)
    {
      if (!*(_QWORD *)(*(_QWORD *)(v30 + 192) + 248))
        goto LABEL_113;
      if (*(_DWORD *)(v30 + 16) >= 2u)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v458, "com.apple.coreaudio", "AMCP");
        size = (std::__shared_weak_count *)v458[0].__r_.__value_.__l.__size_;
        v392 = *(NSObject **)v458[0].__r_.__value_.__l.__data_;
        if (v458[0].__r_.__value_.__l.__size_)
        {
          v393 = (unint64_t *)(v458[0].__r_.__value_.__l.__size_ + 8);
          do
            v394 = __ldaxr(v393);
          while (__stlxr(v394 - 1, v393));
          if (!v394)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        if (os_log_type_enabled(v392, OS_LOG_TYPE_ERROR))
        {
          v395 = pthread_self();
          v396 = pthread_mach_thread_np(v395);
          LODWORD(v458[0].__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v458[0].__r_.__value_.__r.__words[0]) = v396;
          LOWORD(v458[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v458[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphNode.cpp";
          WORD1(v458[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v458[0].__r_.__value_.__r.__words[2]) = 604;
          LOWORD(v458[1].__r_.__value_.__l.__data_) = 2080;
          *(std::string::size_type *)((char *)v458[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"not (m_node_type == AMCP::Node_Type::IOContext or m_node_type == AMCP::Node_Type::DSP)";
          _os_log_error_impl(&dword_1B57BA000, v392, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Trying to set up an io proc with wrong type of node", (uint8_t *)v458, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v444);
        v397 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Trying to set up an io proc with wrong type of node", (uint64_t)&v447);
        std::logic_error::logic_error((std::logic_error *)&v441, &v447);
        v441.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
        std::logic_error::logic_error((std::logic_error *)&v453, (const std::logic_error *)&v441);
        v454 = 0;
        v455 = 0;
        v456 = 0;
        v457 = -1;
        v453.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
        v453.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v458, (uint64_t)&v453);
        v458[1].__r_.__value_.__l.__size_ = (std::string::size_type)"void AMCP::Graph::Node::demand_client_io_proc(Wire_Index &)";
        v458[1].__r_.__value_.__r.__words[2] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/So"
                                                                       "urce/AMCP/IO/Graph/GraphNode.cpp";
        v459 = 604;
        std::vector<void *>::vector(&v446);
        v398 = backtrace((void **)v446.__r_.__value_.__l.__data_, (v446.__r_.__value_.__l.__size_ - v446.__r_.__value_.__r.__words[0]) >> 3);
        std::vector<void *>::resize(&v446.__r_.__value_.__l.__data_, v398);
        *(std::string *)&cf[1] = v446;
        cf[0] = off_1E69A20A0;
        memset(&v446, 0, sizeof(v446));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v458, (uint64_t)cf);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v397, (uint64_t)v458);
      }
      memset(v458, 0, sizeof(v458));
      std::vector<AMCP::Graph::Call_Audio_IO_Proc::Proc_Connection_Info>::resize(&v458[0].__r_.__value_.__l.__data_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v30 + 64) - *(_QWORD *)(v30 + 56)) >> 4));
      std::vector<AMCP::Graph::Call_Audio_IO_Proc::Proc_Connection_Info>::resize(&v458[1].__r_.__value_.__l.__data_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v30 + 88) - *(_QWORD *)(v30 + 80)) >> 4));
      v441.__r_.__value_.__s.__data_[0] = 0;
      v441.__r_.__value_.__s.__data_[4] = 0;
      *(_QWORD *)v439 = v458;
      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v439[8], *(_QWORD *)v30, *(std::__shared_weak_count **)(v30 + 8));
      v440 = &v441;
      cf[3] = 0;
      v33 = (char *)operator new(0x28uLL);
      v34 = 0;
      v35 = 0;
      *(_QWORD *)v33 = &off_1E6982E98;
      *(_OWORD *)(v33 + 8) = *(_OWORD *)v439;
      v36 = *(_QWORD *)&v439[16];
      *(_QWORD *)&v439[8] = 0;
      *(_QWORD *)&v439[16] = 0;
      *((_QWORD *)v33 + 3) = v36;
      *((_QWORD *)v33 + 4) = &v441;
      cf[3] = v33;
      do
      {
        v430 = v34;
        v37 = (_QWORD *)(v30 + 56 + 24 * v35);
        if (v37[1] != *v37)
        {
          v38 = 0;
          do
          {
            if (*(char *)(v30 + 47) < 0)
              std::string::__init_copy_ctor_external(&v447, *(const std::string::value_type **)(v30 + 24), *(_QWORD *)(v30 + 32));
            else
              v447 = *(std::string *)(v30 + 24);
            *(_OWORD *)&v453.__r_.__value_.__l.__data_ = *(_OWORD *)&v447.__r_.__value_.__l.__data_;
            v39 = v447.__r_.__value_.__r.__words[2];
            memset(&v447, 0, sizeof(v447));
            v453.__r_.__value_.__r.__words[2] = v39;
            v454 = (std::string *)v38;
            LODWORD(v455) = v35;
            AMCP::Graph::Wire_Index::get_wires_for_terminal(&v446.__r_.__value_.__l.__data_, a3, (unsigned __int8 **)&v453);
            v40 = *(_OWORD *)&v446.__r_.__value_.__l.__data_;
            v41 = (uint64_t *)v446.__r_.__value_.__r.__words[0];
            if (v446.__r_.__value_.__r.__words[0] != v446.__r_.__value_.__l.__size_)
            {
              do
              {
                v42 = *v41;
                LODWORD(v444[0]) = v35;
                if (!cf[3])
                  std::__throw_bad_function_call[abi:ne180100]();
                (*(void (**)(CFTypeRef, _QWORD *, uint64_t))(*(_QWORD *)cf[3] + 48))(cf[3], v444, v42);
                ++v41;
              }
              while (v41 != *((uint64_t **)&v40 + 1));
            }
            if ((_QWORD)v40)
              operator delete((void *)v40);
            if (SHIBYTE(v453.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v453.__r_.__value_.__l.__data_);
            ++v38;
          }
          while (v38 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v37[1] - *v37) >> 4));
        }
        v34 = 1;
        v35 = 1;
      }
      while ((v430 & 1) == 0);
      v43 = (CFTypeRef *)cf[3];
      if (cf[3] == cf)
      {
        v43 = cf;
        v44 = 4;
        v27 = v421;
        v9 = v422;
      }
      else
      {
        v27 = v421;
        v9 = v422;
        if (!cf[3])
        {
LABEL_47:
          v45 = *(std::__shared_weak_count **)&v439[16];
          if (*(_QWORD *)&v439[16])
          {
            v46 = (unint64_t *)(*(_QWORD *)&v439[16] + 8);
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v48 = *(_QWORD *)(v30 + 192);
          v49 = *(_QWORD *)(v48 + 576);
          v50 = v48 + 224;
          if (v49)
          {
            std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)cf, v48 + 224);
            v51 = *(std::__shared_weak_count **)(v30 + 152);
            v453.__r_.__value_.__r.__words[0] = *(_QWORD *)(v30 + 144);
            v453.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
            if (v51)
            {
              p_shared_owners = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldxr(p_shared_owners);
              while (__stxr(v53 + 1, p_shared_owners));
            }
            AMCP::Graph::Call_Audio_IO_Proc::reconfigure(v49, (uint64_t)cf, (uint64_t *)&v453, (uint64_t)v441.__r_.__value_.__l.__data_, (uint64_t)v458, (double)*(int *)(v30 + 164));
            if (v51)
            {
              v54 = (unint64_t *)&v51->__shared_owners_;
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            v56 = (CFTypeRef *)cf[3];
            if (cf[3] == cf)
            {
              v56 = cf;
              v57 = 4;
            }
            else
            {
              if (!cf[3])
                goto LABEL_94;
              v57 = 5;
            }
            (*((void (**)(void))*v56 + v57))();
LABEL_94:
            v77 = *(_QWORD **)(v30 + 192);
            v78 = v77[72];
            v79 = v77[73];
            if (v79)
            {
              v80 = (unint64_t *)(v79 + 8);
              do
                v81 = __ldxr(v80);
              while (__stxr(v81 + 1, v80));
              v77 = *(_QWORD **)(v30 + 192);
            }
            v82 = *(_DWORD *)(v30 + 16);
            LODWORD(v446.__r_.__value_.__r.__words[2]) = v82;
            v447.__r_.__value_.__r.__words[0] = v78;
            v447.__r_.__value_.__l.__size_ = v79;
            *(_OWORD *)&v446.__r_.__value_.__l.__data_ = 0uLL;
            LODWORD(v447.__r_.__value_.__r.__words[2]) = v82;
            v83 = (std::string *)operator new(0x20uLL);
            v83->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E6982F78;
            v83->__r_.__value_.__l.__size_ = v78;
            v83->__r_.__value_.__r.__words[2] = v79;
            LODWORD(v83[1].__r_.__value_.__l.__data_) = v82;
            v454 = v83;
            std::__function::__value_func<void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::swap[abi:ne180100](&v453, v77);
            v84 = v454;
            if (v454 == &v453)
            {
              v84 = &v453;
              v85 = 4;
            }
            else
            {
              if (!v454)
                goto LABEL_103;
              v85 = 5;
            }
            (*(void (**)(void))(v84->__r_.__value_.__r.__words[0] + 8 * v85))();
LABEL_103:
            for (i = 0; i != -48; i -= 24)
            {
              data = v458[i / 0x18 + 1].__r_.__value_.__l.__data_;
              if (data)
              {
                v458[i / 0x18 + 1].__r_.__value_.__l.__size_ = (std::string::size_type)data;
                operator delete(data);
              }
            }
            v32 = (std::string *)v449;
            goto LABEL_108;
          }
          v58 = *(_QWORD *)(v30 + 152);
          v447.__r_.__value_.__r.__words[0] = *(_QWORD *)(v30 + 144);
          v447.__r_.__value_.__l.__size_ = v58;
          if (v58)
          {
            v59 = (unint64_t *)(v58 + 8);
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
          }
          v61 = *(_DWORD *)(v30 + 164);
          v62 = operator new(0xE8uLL);
          v62[1] = 0;
          v62[2] = 0;
          *v62 = &off_1E6982F28;
          std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)cf, v50);
          v63 = v441.__r_.__value_.__r.__words[0];
          *((_OWORD *)v62 + 4) = 0u;
          *((_DWORD *)v62 + 6) = 0;
          v62[4] = 1;
          *((_BYTE *)v62 + 228) = 0;
          *((_OWORD *)v62 + 5) = 0u;
          *((_OWORD *)v62 + 6) = 0u;
          *((_OWORD *)v62 + 7) = 0u;
          *((_OWORD *)v62 + 8) = 0u;
          *((_OWORD *)v62 + 9) = 0u;
          *((_OWORD *)v62 + 10) = 0u;
          *((_OWORD *)v62 + 11) = 0u;
          *((_OWORD *)v62 + 12) = 0u;
          *((_OWORD *)v62 + 13) = 0u;
          *((_BYTE *)v62 + 224) = 0;
          v64 = (std::string *)cf[3];
          if (cf[3])
          {
            if (cf[3] == cf)
            {
              v454 = &v453;
              (*((void (**)(CFTypeRef *, std::string *))cf[0] + 3))(cf, &v453);
LABEL_74:
              AMCP::Graph::Call_Audio_IO_Proc::reconfigure((uint64_t)(v62 + 3), (uint64_t)&v453, (uint64_t *)&v447, v63, (uint64_t)v458, (double)v61);
              v65 = v454;
              if (v454 == &v453)
              {
                v65 = &v453;
                v66 = 4;
              }
              else
              {
                if (!v454)
                  goto LABEL_79;
                v66 = 5;
              }
              (*(void (**)(void))(v65->__r_.__value_.__r.__words[0] + 8 * v66))();
LABEL_79:
              v67 = (CFTypeRef *)cf[3];
              if (cf[3] == cf)
              {
                v67 = cf;
                v68 = 4;
              }
              else
              {
                if (!cf[3])
                  goto LABEL_84;
                v68 = 5;
              }
              (*((void (**)(void))*v67 + v68))();
LABEL_84:
              *(_QWORD *)&v69 = v62 + 3;
              *((_QWORD *)&v69 + 1) = v62;
              v70 = *(_QWORD *)(v30 + 192);
              v71 = *(std::__shared_weak_count **)(v70 + 584);
              *(_OWORD *)(v70 + 576) = v69;
              if (v71)
              {
                v72 = (unint64_t *)&v71->__shared_owners_;
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 - 1, v72));
                if (!v73)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
              v74 = (std::__shared_weak_count *)v447.__r_.__value_.__l.__size_;
              if (v447.__r_.__value_.__l.__size_)
              {
                v75 = (unint64_t *)(v447.__r_.__value_.__l.__size_ + 8);
                do
                  v76 = __ldaxr(v75);
                while (__stlxr(v76 - 1, v75));
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                }
              }
              goto LABEL_94;
            }
            v64 = (std::string *)(*(uint64_t (**)(void))(*(_QWORD *)cf[3] + 16))();
          }
          v454 = v64;
          goto LABEL_74;
        }
        v44 = 5;
      }
      (*((void (**)(void))*v43 + v44))();
      goto LABEL_47;
    }
LABEL_108:
    if (v32 == &v448)
    {
      v32 = &v448;
      v88 = 4;
    }
    else
    {
      if (!v32)
        goto LABEL_113;
      v88 = 5;
    }
    (*(void (**)(void))(v32->__r_.__value_.__r.__words[0] + 8 * v88))();
LABEL_113:
    v89 = *(std::__shared_weak_count **)(v30 + 200);
    *(_QWORD *)&v445 = *(_QWORD *)(v30 + 192);
    *((_QWORD *)&v445 + 1) = v89;
    if (v89)
    {
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldxr(v90);
      while (__stxr(v91 + 1, v90));
    }
    v92 = (std::string *)*v26;
    v94 = *(_QWORD *)(*v26 + 80);
    v93 = *(_QWORD *)(*v26 + 88);
    v96 = *(_QWORD *)(*v26 + 56);
    v95 = *(_QWORD *)(*v26 + 64);
    LODWORD(v6) = *(_DWORD *)(*v26 + 160);
    if (*(char *)(*v26 + 47) < 0)
      std::string::__init_copy_ctor_external(&v453, v92[1].__r_.__value_.__l.__data_, v92[1].__r_.__value_.__l.__size_);
    else
      v453 = v92[1];
    v97 = (char *)operator new(0x90uLL);
    *(_OWORD *)(v97 + 8) = 0u;
    *(_QWORD *)v97 = &off_1E6985258;
    v458[0] = v453;
    memset(&v453, 0, sizeof(v453));
    AMCP::Graph::Manifest_Task::Manifest_Task((uint64_t)(v97 + 24), &v445, v426, 0x6DB6DB6DB6DB6DB7 * ((v93 - v94) >> 4), 0x6DB6DB6DB6DB6DB7 * ((v95 - v96) >> 4), (__int128 *)v458, (double)v6);
    if (SHIBYTE(v458[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v458[0].__r_.__value_.__l.__data_);
    *(_QWORD *)&v437 = v97 + 24;
    *((_QWORD *)&v437 + 1) = v97;
    if (v89)
    {
      v98 = (unint64_t *)&v89->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    v100 = *v26;
    if (*(char *)(*v26 + 47) < 0)
      std::string::__init_copy_ctor_external(v458, *(const std::string::value_type **)(v100 + 24), *(_QWORD *)(v100 + 32));
    else
      v458[0] = *(std::string *)(v100 + 24);
    v453.__r_.__value_.__r.__words[0] = (std::string::size_type)v458;
    v101 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v416, (unsigned __int8 *)v458, (__int128 **)&v453);
    v102 = v437;
    std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](v101 + 5, v437, *((uint64_t *)&v437 + 1));
    if (SHIBYTE(v458[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v458[0].__r_.__value_.__l.__data_);
    nth_connection_list = *(_QWORD **)(*(_QWORD *)(v102 + 48) + 120);
    if (nth_connection_list)
    {
      v103 = (int64x2_t *)*v413;
      nth_connection_list = (*(_QWORD *(**)(__int128 *__return_ptr))(*nth_connection_list + 48))(&v433);
      if ((_QWORD)v433)
      {
        v104 = v103[7].u64[0];
        v105 = v103[7].i64[1];
        if (v104 == v105)
        {
LABEL_141:
          v107 = v103[8].u64[0];
          if (v104 >= v107)
          {
            v112 = v103[7].i64[0];
            v113 = (uint64_t)(v104 - v112) >> 4;
            if ((unint64_t)(v113 + 1) >> 60)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v114 = v107 - v112;
            v115 = v114 >> 3;
            if (v114 >> 3 <= (unint64_t)(v113 + 1))
              v115 = v113 + 1;
            if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0)
              v116 = 0xFFFFFFFFFFFFFFFLL;
            else
              v116 = v115;
            if (v116 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v117 = (char *)operator new(16 * v116);
            v118 = &v117[16 * v113];
            v119 = *((_QWORD *)&v433 + 1);
            *(_OWORD *)v118 = v433;
            if (v119)
            {
              v120 = (unint64_t *)(v119 + 8);
              do
                v121 = __ldxr(v120);
              while (__stxr(v121 + 1, v120));
            }
            v123 = (_QWORD *)v103[7].i64[0];
            v122 = (_QWORD *)v103[7].i64[1];
            if (v122 == v123)
            {
              v126 = vdupq_n_s64((unint64_t)v122);
              v124 = &v117[16 * v113];
            }
            else
            {
              v124 = &v117[16 * v113];
              do
              {
                v125 = *((_OWORD *)v122 - 1);
                v122 -= 2;
                *((_OWORD *)v124 - 1) = v125;
                v124 -= 16;
                *v122 = 0;
                v122[1] = 0;
              }
              while (v122 != v123);
              v126 = v103[7];
            }
            v111 = v118 + 16;
            v103[7].i64[0] = (uint64_t)v124;
            v103[7].i64[1] = (uint64_t)(v118 + 16);
            v103[8].i64[0] = (uint64_t)&v117[16 * v116];
            v127 = v126.i64[1];
            v128 = (void *)v126.i64[0];
            while ((void *)v127 != v128)
              v127 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v127 - 16);
            if (v128)
              operator delete(v128);
          }
          else
          {
            *(_QWORD *)v104 = v433;
            v108 = *((_QWORD *)&v433 + 1);
            *(_QWORD *)(v104 + 8) = *((_QWORD *)&v433 + 1);
            if (v108)
            {
              v109 = (unint64_t *)(v108 + 8);
              do
                v110 = __ldxr(v109);
              while (__stxr(v110 + 1, v109));
            }
            v111 = (_OWORD *)(v104 + 16);
          }
          v103[7].i64[1] = (uint64_t)v111;
          v129 = v103[5].i64[0];
          AMCP::IO_Core::Device_Connection::get_timebase((AMCP::IO_Core::Device_Connection *)v458, (uint64_t *)v433);
          std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__emplace_unique_key_args<std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase>>(v129, v458[0].__r_.__value_.__r.__words[0], (uint64_t)v458);
          v130 = (std::__shared_weak_count *)v458[0].__r_.__value_.__l.__size_;
          if (v458[0].__r_.__value_.__l.__size_)
          {
            v131 = (unint64_t *)(v458[0].__r_.__value_.__l.__size_ + 8);
            do
              v132 = __ldaxr(v131);
            while (__stlxr(v132 - 1, v131));
            if (!v132)
            {
              ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
              std::__shared_weak_count::__release_weak(v130);
            }
          }
        }
        else
        {
          while (1)
          {
            AMCP::IO_Core::Device_Connection::get_device_uid((AMCP::IO_Core::Device_Connection *)&v453, *(_QWORD **)v104);
            AMCP::IO_Core::Device_Connection::get_device_uid((AMCP::IO_Core::Device_Connection *)cf, (_QWORD *)v433);
            v106 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)v453.__r_.__value_.__l.__data_, (const __CFString **)cf);
            if (cf[0])
              CFRelease(cf[0]);
            nth_connection_list = (_QWORD *)v453.__r_.__value_.__r.__words[0];
            if (v453.__r_.__value_.__r.__words[0])
              CFRelease(v453.__r_.__value_.__l.__data_);
            if (v106 == kCFCompareEqualTo)
              break;
            v104 += 16;
            if (v104 == v105)
            {
              v104 = v103[7].u64[1];
              goto LABEL_141;
            }
          }
        }
      }
    }
    else
    {
      v433 = 0uLL;
    }
    v133 = (std::__shared_weak_count *)*((_QWORD *)&v433 + 1);
    if (*((_QWORD *)&v433 + 1))
    {
      v134 = (unint64_t *)(*((_QWORD *)&v433 + 1) + 8);
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 - 1, v134));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
    }
    v136 = (std::__shared_weak_count *)*((_QWORD *)&v437 + 1);
    if (*((_QWORD *)&v437 + 1))
    {
      v137 = (unint64_t *)(*((_QWORD *)&v437 + 1) + 8);
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
    }
    v26 += 2;
  }
  while (v26 != v27);
  v139 = *a2;
  v410 = a2[1];
  if (*a2 != v410)
  {
    v412 = (_QWORD *)(v9 + 24);
    while (1)
    {
      v140 = *v139;
      if (!*(_DWORD *)(*v139 + 16))
        *(_QWORD *)(v9 + 88) = (uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 4;
      v141 = (std::__shared_weak_count *)v139[1];
      v432 = v140;
      if (v141)
      {
        v142 = (unint64_t *)&v141->__shared_owners_;
        do
          v143 = __ldxr(v142);
        while (__stxr(v143 + 1, v142));
      }
      if (*(char *)(v140 + 47) < 0)
        std::string::__init_copy_ctor_external(v458, *(const std::string::value_type **)(v140 + 24), *(_QWORD *)(v140 + 32));
      else
        v458[0] = *(std::string *)(v140 + 24);
      v453.__r_.__value_.__r.__words[0] = (std::string::size_type)v458;
      v144 = (char *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v416, (unsigned __int8 *)v458, (__int128 **)&v453);
      v423 = *(_OWORD *)(v144 + 40);
      v424 = (std::__shared_weak_count *)*((_QWORD *)v144 + 6);
      if (*((_QWORD *)&v423 + 1))
      {
        v145 = (unint64_t *)&v424->__shared_owners_;
        do
          v146 = __ldxr(v145);
        while (__stxr(v146 + 1, v145));
      }
      v414 = v141;
      v415 = v139;
      if (SHIBYTE(v458[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v458[0].__r_.__value_.__l.__data_);
      memset(&v447, 0, sizeof(v447));
      v147 = *(_QWORD *)(v140 + 64) - *(_QWORD *)(v140 + 56);
      if (v147)
        break;
LABEL_287:
      v182 = *(uint64_t **)v423;
      v183 = *(uint64_t **)(v423 + 8);
      if (*(uint64_t **)v423 == v183)
      {
        v184 = 0;
      }
      else
      {
        v184 = 0;
        do
        {
          v186 = *v182;
          v185 = v182[1];
          v182 += 5;
          v184 += (v185 - v186) >> 4;
        }
        while (v182 != v183);
      }
      v187 = *(uint64_t **)(v423 + 24);
      v188 = *(uint64_t **)(v423 + 32);
      if (v187 == v188)
      {
        v189 = 0;
      }
      else
      {
        v189 = 0;
        do
        {
          v191 = *v187;
          v190 = v187[1];
          v187 += 5;
          v189 += (v190 - v191) >> 4;
        }
        while (v187 != v188);
      }
      if (!(v184 | v189))
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v144);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v458, "com.apple.coreaudio", "AMCP");
        v399 = *(NSObject **)v458[0].__r_.__value_.__l.__data_;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v458);
        if (os_log_type_enabled(v399, OS_LOG_TYPE_ERROR))
        {
          v400 = pthread_self();
          v401 = pthread_mach_thread_np(v400);
          v402 = (_QWORD *)(v423 + 64);
          if (*(char *)(v423 + 87) < 0)
            v402 = (_QWORD *)*v402;
          LODWORD(v458[0].__r_.__value_.__l.__data_) = 67110146;
          HIDWORD(v458[0].__r_.__value_.__r.__words[0]) = v401;
          LOWORD(v458[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v458[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest.cpp";
          WORD1(v458[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v458[0].__r_.__value_.__r.__words[2]) = 345;
          LOWORD(v458[1].__r_.__value_.__l.__data_) = 2080;
          *(std::string::size_type *)((char *)v458[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"not (has_source_connections or has_dest_connections)";
          WORD1(v458[1].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v458[1].__r_.__value_.__r.__words[1] + 4) = (std::string::size_type)v402;
          _os_log_error_impl(&dword_1B57BA000, v399, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Manifest Task: %s with no connections", (uint8_t *)v458, 0x2Cu);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v443);
        v403 = __cxa_allocate_exception(0x40uLL);
        v404 = (_QWORD *)(v423 + 64);
        if (*(char *)(v423 + 87) < 0)
          v404 = (_QWORD *)*v404;
        caulk::make_string((caulk *)"Manifest Task: %s with no connections", (uint64_t)&v441, v404);
        std::logic_error::logic_error(&v442, &v441);
        v442.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)&v453, &v442);
        v454 = 0;
        v455 = 0;
        v456 = 0;
        v457 = -1;
        v453.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
        v453.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v458, (uint64_t)&v453);
        v458[1].__r_.__value_.__l.__size_ = (std::string::size_type)"void AMCP::Graph::Manifest::connect_task(std::shared"
                                                                    "_ptr<Node>, const Node_Map &, Wire_Index &, const st"
                                                                    "d::shared_ptr<AMCP::Graph::Manifest_Inventory> &)";
        v458[1].__r_.__value_.__r.__words[2] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/So"
                                                                       "urce/AMCP/IO/Graph/Manifest.cpp";
        v459 = 345;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v437);
        *(_QWORD *)v439 = off_1E69A20A0;
        *(_OWORD *)&v439[8] = v437;
        v440 = v438;
        v437 = 0uLL;
        v438 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v458, (uint64_t)v439);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v403, (uint64_t)v458);
      }
      v193 = v447.__r_.__value_.__l.__size_;
      for (j = (uint64_t *)v447.__r_.__value_.__r.__words[0]; j != (uint64_t *)v193; j += 2)
      {
        v195 = *j;
        v194 = (std::__shared_weak_count *)j[1];
        if (v194)
        {
          v196 = (unint64_t *)&v194->__shared_owners_;
          do
            v197 = __ldxr(v196);
          while (__stxr(v197 + 1, v196));
        }
        v198 = *(uint64_t **)v195;
        v199 = *(uint64_t **)(v195 + 8);
        if (*(uint64_t **)v195 == v199)
        {
          v200 = 0;
        }
        else
        {
          v200 = 0;
          do
          {
            v202 = *v198;
            v201 = v198[1];
            v198 += 5;
            v200 += (v201 - v202) >> 4;
          }
          while (v198 != v199);
        }
        v203 = *(uint64_t **)(v195 + 24);
        v204 = *(uint64_t **)(v195 + 32);
        if (v203 == v204)
        {
          v205 = 0;
        }
        else
        {
          v205 = 0;
          do
          {
            v207 = *v203;
            v206 = v203[1];
            v203 += 5;
            v205 += (v206 - v207) >> 4;
          }
          while (v203 != v204);
        }
        if (!(v200 | v205))
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v144);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v458, "com.apple.coreaudio", "AMCP");
          v378 = (std::__shared_weak_count *)v458[0].__r_.__value_.__l.__size_;
          v379 = *(NSObject **)v458[0].__r_.__value_.__l.__data_;
          if (v458[0].__r_.__value_.__l.__size_)
          {
            v380 = (unint64_t *)(v458[0].__r_.__value_.__l.__size_ + 8);
            do
              v381 = __ldaxr(v380);
            while (__stlxr(v381 - 1, v380));
            if (!v381)
            {
              ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
              std::__shared_weak_count::__release_weak(v378);
            }
          }
          if (os_log_type_enabled(v379, OS_LOG_TYPE_ERROR))
          {
            v382 = pthread_self();
            v383 = pthread_mach_thread_np(v382);
            v384 = (_QWORD *)(v195 + 64);
            if (*(char *)(v195 + 87) < 0)
              v384 = (_QWORD *)*v384;
            LODWORD(v458[0].__r_.__value_.__l.__data_) = 67110146;
            HIDWORD(v458[0].__r_.__value_.__r.__words[0]) = v383;
            LOWORD(v458[0].__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v458[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest.cpp";
            WORD1(v458[0].__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(v458[0].__r_.__value_.__r.__words[2]) = 350;
            LOWORD(v458[1].__r_.__value_.__l.__data_) = 2080;
            *(std::string::size_type *)((char *)v458[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"not (has_source_connections or has_dest_connections)";
            WORD1(v458[1].__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v458[1].__r_.__value_.__r.__words[1] + 4) = (std::string::size_type)v384;
            _os_log_error_impl(&dword_1B57BA000, v379, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Manifest Task: %s with no connections", (uint8_t *)v458, 0x2Cu);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v443);
          v385 = __cxa_allocate_exception(0x40uLL);
          v386 = (_QWORD *)(v195 + 64);
          if (*(char *)(v195 + 87) < 0)
            v386 = (_QWORD *)*v386;
          caulk::make_string((caulk *)"Manifest Task: %s with no connections", (uint64_t)&v441, v386);
          std::logic_error::logic_error(&v442, &v441);
          v442.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)&v453, &v442);
          v454 = 0;
          v455 = 0;
          v456 = 0;
          v457 = -1;
          v453.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
          v453.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v458, (uint64_t)&v453);
          v458[1].__r_.__value_.__l.__size_ = (std::string::size_type)"void AMCP::Graph::Manifest::connect_task(std::shar"
                                                                      "ed_ptr<Node>, const Node_Map &, Wire_Index &, cons"
                                                                      "t std::shared_ptr<AMCP::Graph::Manifest_Inventory> &)";
          v458[1].__r_.__value_.__r.__words[2] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/"
                                                                         "Source/AMCP/IO/Graph/Manifest.cpp";
          v459 = 350;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v437);
          *(_QWORD *)v439 = off_1E69A20A0;
          *(_OWORD *)&v439[8] = v437;
          v440 = v438;
          v437 = 0uLL;
          v438 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v458, (uint64_t)v439);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v385, (uint64_t)v458);
        }
        if (v194)
        {
          v208 = (unint64_t *)&v194->__shared_owners_;
          do
            v209 = __ldaxr(v208);
          while (__stlxr(v209 - 1, v208));
          if (!v209)
          {
            ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
            std::__shared_weak_count::__release_weak(v194);
          }
        }
      }
      v210 = *(_OWORD **)(v9 + 16);
      v211 = *(_QWORD *)(v9 + 24);
      if ((unint64_t)v210 >= v211)
      {
        v215 = ((uint64_t)v210 - v411->i64[0]) >> 4;
        v216 = v215 + 1;
        if ((unint64_t)(v215 + 1) >> 60)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v217 = v211 - v411->i64[0];
        if (v217 >> 3 > v216)
          v216 = v217 >> 3;
        if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFF0)
          v218 = 0xFFFFFFFFFFFFFFFLL;
        else
          v218 = v216;
        v458[1].__r_.__value_.__l.__size_ = (std::string::size_type)v412;
        v219 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v218);
        v221 = &v219[16 * v215];
        *(_OWORD *)v221 = v423;
        if (v424)
        {
          v222 = (unint64_t *)&v424->__shared_owners_;
          do
            v223 = __ldxr(v222);
          while (__stxr(v223 + 1, v222));
        }
        v225 = *(_QWORD **)(v9 + 8);
        v224 = *(_QWORD **)(v9 + 16);
        if (v224 == v225)
        {
          v228 = vdupq_n_s64((unint64_t)v224);
          v226 = &v219[16 * v215];
        }
        else
        {
          v226 = &v219[16 * v215];
          do
          {
            v227 = *((_OWORD *)v224 - 1);
            v224 -= 2;
            *((_OWORD *)v226 - 1) = v227;
            v226 -= 16;
            *v224 = 0;
            v224[1] = 0;
          }
          while (v224 != v225);
          v228 = *v411;
        }
        v214 = v221 + 16;
        *(_QWORD *)(v9 + 8) = v226;
        *(_QWORD *)(v9 + 16) = v221 + 16;
        *(int64x2_t *)&v458[0].__r_.__value_.__r.__words[1] = v228;
        v229 = *(_QWORD *)(v9 + 24);
        *(_QWORD *)(v9 + 24) = &v219[16 * v220];
        v458[1].__r_.__value_.__r.__words[0] = v229;
        v458[0].__r_.__value_.__r.__words[0] = v228.i64[0];
        std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)v458);
      }
      else
      {
        *v210 = v423;
        if (v424)
        {
          v212 = (unint64_t *)&v424->__shared_owners_;
          do
            v213 = __ldxr(v212);
          while (__stxr(v213 + 1, v212));
        }
        v214 = v210 + 1;
      }
      *(_QWORD *)(v9 + 16) = v214;
      v230 = v447.__r_.__value_.__l.__size_;
      v231 = (uint64_t *)v447.__r_.__value_.__r.__words[0];
      v232 = v447.__r_.__value_.__l.__size_ - v447.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v447.__r_.__value_.__l.__size_ - v447.__r_.__value_.__r.__words[0]) > 0)
      {
        v233 = v232 >> 4;
        if (v232 >> 4 <= (uint64_t)(*v412 - (_QWORD)v214) >> 4)
        {
          if (v233 <= 0)
          {
            v245 = v447.__r_.__value_.__r.__words[0] + 16 * v233;
            v246 = v214;
            v259 = &v214[-2 * v233];
            v260 = v214;
            for (k = v259; k < v214; k += 2)
            {
              *v260++ = *(_OWORD *)k;
              *k = 0;
              k[1] = 0;
            }
            *(_QWORD *)(v9 + 16) = v260;
            if (v214 != &v214[2 * v233])
            {
              do
              {
                v262 = *((_OWORD *)v259 - 1);
                v259 -= 2;
                *v259 = 0;
                v259[1] = 0;
                v263 = (std::__shared_weak_count *)*(v246 - 1);
                *((_OWORD *)v246 - 1) = v262;
                v246 -= 2;
                if (v263)
                {
                  v264 = (unint64_t *)&v263->__shared_owners_;
                  do
                    v265 = __ldaxr(v264);
                  while (__stlxr(v265 - 1, v264));
                  if (!v265)
                  {
                    ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                    std::__shared_weak_count::__release_weak(v263);
                  }
                }
              }
              while (v259 != v214);
            }
            for (; v231 != (uint64_t *)v245; v214 += 2)
            {
              v266 = *v231;
              v267 = v231[1];
              v231 += 2;
              std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](v214, v266, v267);
            }
          }
          else
          {
            if (v447.__r_.__value_.__r.__words[0] == v447.__r_.__value_.__l.__size_)
            {
              v241 = v214;
            }
            else
            {
              v240 = (_QWORD *)v447.__r_.__value_.__r.__words[0];
              v241 = v214;
              do
              {
                *v241 = *v240;
                v242 = v240[1];
                v241[1] = v242;
                if (v242)
                {
                  v243 = (unint64_t *)(v242 + 8);
                  do
                    v244 = __ldxr(v243);
                  while (__stxr(v244 + 1, v243));
                }
                v240 += 2;
                v241 += 2;
              }
              while (v240 != (_QWORD *)v230);
            }
            *(_QWORD *)(v9 + 16) = v241;
          }
        }
        else
        {
          v234 = *(_QWORD *)(v9 + 8);
          v235 = ((uint64_t)v214 - v234) >> 4;
          if ((unint64_t)(v235 + v233) >> 60)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v236 = *v412 - v234;
          v237 = v236 >> 3;
          if (v236 >> 3 <= (unint64_t)(v235 + v233))
            v237 = v235 + v233;
          if ((unint64_t)v236 >= 0x7FFFFFFFFFFFFFF0)
            v238 = 0xFFFFFFFFFFFFFFFLL;
          else
            v238 = v237;
          v458[1].__r_.__value_.__l.__size_ = (std::string::size_type)v412;
          if (v238)
            v238 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v238);
          else
            v239 = 0;
          v247 = (uint64_t *)(v238 + 16 * v235);
          v458[0].__r_.__value_.__r.__words[0] = v238;
          v458[0].__r_.__value_.__l.__size_ = (std::string::size_type)v247;
          v458[1].__r_.__value_.__r.__words[0] = v238 + 16 * v239;
          v248 = &v247[2 * v233];
          do
          {
            *v247 = *v231;
            v249 = v231[1];
            v247[1] = v249;
            if (v249)
            {
              v250 = (unint64_t *)(v249 + 8);
              do
                v251 = __ldxr(v250);
              while (__stxr(v251 + 1, v250));
            }
            v247 += 2;
            v231 += 2;
          }
          while (v247 != v248);
          v458[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v248;
          v252 = v458[0].__r_.__value_.__l.__size_;
          v253 = (_QWORD *)v411->i64[0];
          if ((_QWORD *)v411->i64[0] != v214)
          {
            v254 = v214;
            do
            {
              v255 = *((_OWORD *)v254 - 1);
              v254 -= 2;
              *(_OWORD *)(v252 - 16) = v255;
              v252 -= 16;
              *v254 = 0;
              v254[1] = 0;
            }
            while (v254 != v253);
            v248 = (uint64_t *)v458[0].__r_.__value_.__r.__words[2];
          }
          v458[0].__r_.__value_.__l.__size_ = v252;
          v256 = *(_QWORD **)(v9 + 16);
          if (v256 != v214)
          {
            do
            {
              *(_OWORD *)v248 = *(_OWORD *)v214;
              v248 += 2;
              *v214 = 0;
              v214[1] = 0;
              v214 += 2;
            }
            while (v214 != v256);
            v252 = v458[0].__r_.__value_.__l.__size_;
            v214 = *(_QWORD **)(v9 + 16);
          }
          v257 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)(v9 + 8) = v252;
          *(_QWORD *)(v9 + 16) = v248;
          v258 = *(_QWORD *)(v9 + 24);
          *(_QWORD *)(v9 + 24) = v458[1].__r_.__value_.__l.__data_;
          v458[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v214;
          v458[1].__r_.__value_.__r.__words[0] = v258;
          v458[0].__r_.__value_.__r.__words[0] = v257;
          v458[0].__r_.__value_.__l.__size_ = v257;
          std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)v458);
        }
      }
      v458[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v447;
      std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v458);
      if (!v424)
        goto LABEL_390;
      v268 = (unint64_t *)&v424->__shared_owners_;
      do
        v269 = __ldaxr(v268);
      while (__stlxr(v269 - 1, v268));
      if (!v269)
      {
        ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
        std::__shared_weak_count::__release_weak(v424);
        if (v414)
          goto LABEL_391;
      }
      else
      {
LABEL_390:
        if (v414)
        {
LABEL_391:
          v270 = (unint64_t *)&v414->__shared_owners_;
          do
            v271 = __ldaxr(v270);
          while (__stlxr(v271 - 1, v270));
          if (!v271)
          {
            ((void (*)(std::__shared_weak_count *))v414->__on_zero_shared)(v414);
            std::__shared_weak_count::__release_weak(v414);
          }
        }
      }
      v139 = v415 + 2;
      if (v415 + 2 == v410)
        goto LABEL_397;
    }
    v148 = 0;
    v417 = 0x6DB6DB6DB6DB6DB7 * (v147 >> 4);
    v149 = (unint64_t *)&v424->__shared_owners_;
    while (2)
    {
      nth_terminal = AMCP::Graph::Node::get_nth_terminal(v432, v148, 0);
      if (*(char *)(v432 + 47) < 0)
        std::string::__init_copy_ctor_external(&v446, *(const std::string::value_type **)(v432 + 24), *(_QWORD *)(v432 + 32));
      else
        v446 = *(std::string *)(v432 + 24);
      *(_OWORD *)&v458[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v446.__r_.__value_.__l.__data_;
      v150 = v446.__r_.__value_.__r.__words[2];
      memset(&v446, 0, sizeof(v446));
      v458[0].__r_.__value_.__r.__words[2] = v150;
      v458[1].__r_.__value_.__r.__words[0] = v148;
      LODWORD(v458[1].__r_.__value_.__r.__words[1]) = 0;
      AMCP::Graph::Wire_Index::get_wires_for_terminal((char **)v439, a3, (unsigned __int8 **)v458);
      v418 = v148;
      v429 = *(uint64_t **)&v439[8];
      v151 = *(uint64_t **)v439;
      if (*(_QWORD *)v439 != *(_QWORD *)&v439[8])
      {
        while (2)
        {
          v152 = *v151;
          if (!*(_BYTE *)(*v151 + 408))
            goto LABEL_280;
          if (*(char *)(v152 + 23) < 0)
            std::string::__init_copy_ctor_external(&v453, *(const std::string::value_type **)v152, *(_QWORD *)(v152 + 8));
          else
            v453 = *(std::string *)v152;
          v454 = *(std::string **)(v152 + 24);
          LODWORD(v455) = *(_DWORD *)(v152 + 32);
          v153 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(__p, (unsigned __int8 *)&v453);
          if (SHIBYTE(v453.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v453.__r_.__value_.__l.__data_);
          if (*(char *)(v152 + 63) < 0)
            std::string::__init_copy_ctor_external(&v453, *(const std::string::value_type **)(v152 + 40), *(_QWORD *)(v152 + 48));
          else
            v453 = *(std::string *)(v152 + 40);
          v454 = *(std::string **)(v152 + 64);
          LODWORD(v455) = *(_DWORD *)(v152 + 72);
          v144 = (char *)std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(__p, (unsigned __int8 *)&v453);
          v154 = v144;
          if (SHIBYTE(v453.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v453.__r_.__value_.__l.__data_);
            if (!v153)
              goto LABEL_280;
          }
          else if (!v153)
          {
            goto LABEL_280;
          }
          if (!v154)
            goto LABEL_280;
          memset(cf, 0, sizeof(cf));
          v452 = *(float *)&v436;
          std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)cf, (size_t)__p[1]);
          v427 = v151;
          v155 = (unsigned __int8 *)v435;
          if ((_QWORD)v435)
          {
            while (2)
            {
              v156 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v155 + 16));
              v157 = v156;
              v158 = (unint64_t)cf[1];
              if (cf[1])
              {
                v159 = (uint8x8_t)vcnt_s8((int8x8_t)cf[1]);
                v159.i16[0] = vaddlv_u8(v159);
                v160 = v159.u32[0];
                if (v159.u32[0] > 1uLL)
                {
                  v9 = v156;
                  if ((CFTypeRef)v156 >= cf[1])
                    v9 = v156 % (unint64_t)cf[1];
                }
                else
                {
                  v9 = ((unint64_t)cf[1] - 1) & v156;
                }
                v161 = (unsigned __int8 **)*((_QWORD *)cf[0] + v9);
                if (v161)
                {
                  for (m = *v161; m; m = *(unsigned __int8 **)m)
                  {
                    v163 = *((_QWORD *)m + 1);
                    if (v163 == v157)
                    {
                      if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(m + 16, v155 + 16))
                        goto LABEL_257;
                    }
                    else
                    {
                      if (v160 > 1)
                      {
                        if (v163 >= v158)
                          v163 %= v158;
                      }
                      else
                      {
                        v163 &= v158 - 1;
                      }
                      if (v163 != v9)
                        break;
                    }
                  }
                }
              }
              v164 = (char *)operator new(0x38uLL);
              v453.__r_.__value_.__r.__words[0] = (std::string::size_type)v164;
              v453.__r_.__value_.__l.__size_ = (std::string::size_type)&cf[2];
              v453.__r_.__value_.__s.__data_[16] = 0;
              *(_QWORD *)v164 = 0;
              *((_QWORD *)v164 + 1) = v157;
              std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>::pair[abi:ne180100]((std::string *)(v164 + 16), (__int128 *)v155 + 1);
              v453.__r_.__value_.__s.__data_[16] = 1;
              v165 = (float)((unint64_t)cf[3] + 1);
              if (!v158 || (float)(v452 * (float)v158) < v165)
              {
                v166 = (v158 & (v158 - 1)) != 0;
                if (v158 < 3)
                  v166 = 1;
                v167 = v166 | (2 * v158);
                v168 = vcvtps_u32_f32(v165 / v452);
                if (v167 <= v168)
                  v169 = v168;
                else
                  v169 = v167;
                std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)cf, v169);
                v158 = (unint64_t)cf[1];
                if (((unint64_t)cf[1] & ((unint64_t)cf[1] - 1)) != 0)
                {
                  if ((CFTypeRef)v157 >= cf[1])
                    v9 = v157 % (unint64_t)cf[1];
                  else
                    v9 = v157;
                }
                else
                {
                  v9 = ((unint64_t)cf[1] - 1) & v157;
                }
              }
              v170 = cf[0];
              v171 = (_QWORD *)*((_QWORD *)cf[0] + v9);
              if (v171)
              {
                *(_QWORD *)v164 = *v171;
                goto LABEL_255;
              }
              *(CFTypeRef *)v164 = cf[2];
              cf[2] = v164;
              v170[v9] = &cf[2];
              if (*(_QWORD *)v164)
              {
                v172 = *(_QWORD *)(*(_QWORD *)v164 + 8);
                if ((v158 & (v158 - 1)) != 0)
                {
                  if (v172 >= v158)
                    v172 %= v158;
                }
                else
                {
                  v172 &= v158 - 1;
                }
                v171 = (char *)cf[0] + 8 * v172;
LABEL_255:
                *v171 = v164;
              }
              v453.__r_.__value_.__r.__words[0] = 0;
              ++cf[3];
              std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v453);
LABEL_257:
              v155 = *(unsigned __int8 **)v155;
              if (!v155)
                break;
              continue;
            }
          }
          if (SHIBYTE(v458[0].__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v448, v458[0].__r_.__value_.__l.__data_, v458[0].__r_.__value_.__l.__size_);
          else
            v448 = v458[0];
          v9 = v422;
          v449 = (AMCP::Log::Scope_Registry *)v458[1].__r_.__value_.__l.__data_;
          v450 = v458[1].__r_.__value_.__r.__words[1];
          v445 = v423;
          if (v424)
          {
            do
              v173 = __ldxr(v149);
            while (__stxr(v173 + 1, v149));
          }
          v174 = (std::__shared_weak_count *)a5[1];
          v444[0] = *a5;
          v444[1] = v174;
          v151 = v427;
          if (v174)
          {
            v175 = (unint64_t *)&v174->__shared_owners_;
            do
              v176 = __ldxr(v175);
            while (__stxr(v176 + 1, v175));
          }
          AMCP::Graph::Manifest::create_connection_and_intermediate_tasks(v422, v152, cf, nth_terminal, (unint64_t)&v448, (uint64_t)&v445, &v447.__r_.__value_.__l.__data_, (uint64_t)v444);
          if (v174)
          {
            v177 = (unint64_t *)&v174->__shared_owners_;
            do
              v178 = __ldaxr(v177);
            while (__stlxr(v178 - 1, v177));
            if (!v178)
            {
              ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
              std::__shared_weak_count::__release_weak(v174);
            }
          }
          v179 = (std::__shared_weak_count *)*((_QWORD *)&v445 + 1);
          if (*((_QWORD *)&v445 + 1))
          {
            v180 = (unint64_t *)(*((_QWORD *)&v445 + 1) + 8);
            do
              v181 = __ldaxr(v180);
            while (__stlxr(v181 - 1, v180));
            if (!v181)
            {
              ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
              std::__shared_weak_count::__release_weak(v179);
            }
          }
          if (SHIBYTE(v448.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v448.__r_.__value_.__l.__data_);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__deallocate_node((_QWORD *)cf[2]);
          v144 = (char *)cf[0];
          cf[0] = 0;
          if (v144)
            operator delete(v144);
LABEL_280:
          if (++v151 != v429)
            continue;
          break;
        }
        v151 = *(uint64_t **)v439;
      }
      if (v151)
        operator delete(v151);
      if (SHIBYTE(v458[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v458[0].__r_.__value_.__l.__data_);
      v148 = v418 + 1;
      if (v418 + 1 == v417)
        goto LABEL_287;
      continue;
    }
  }
LABEL_397:
  v272 = *(AMCP::Log::Scope_Registry ***)(v9 + 8);
  v431 = *(AMCP::Log::Scope_Registry ***)(v9 + 16);
  if (v272 != v431)
  {
    v273 = 0;
    do
    {
      v274 = 0;
      v275 = 0;
      v458[0].__r_.__value_.__r.__words[0] = 0x100000000;
      do
      {
        v276 = *((_DWORD *)&v458[0].__r_.__value_.__l.__data_ + v275);
        v277 = v274;
        v278 = *((_QWORD *)*v272 + 3 * v276 + 1) - *((_QWORD *)*v272 + 3 * v276);
        if (v278)
        {
          v279 = 0;
          v280 = 0xCCCCCCCCCCCCCCCDLL * (v278 >> 3);
          do
          {
            nth_connection_list = (_QWORD *)AMCP::Graph::Manifest_Task::get_nth_connection_list(*v272, v279, v276);
            v281 = (uint64_t *)*nth_connection_list;
            v282 = (uint64_t *)nth_connection_list[1];
            while (v281 != v282)
            {
              v284 = *v281;
              v281 += 2;
              v283 = v284;
              v285 = *(_QWORD *)(v284 + 288);
              if (SHIDWORD(v285) <= (int)v285)
                v285 = 0x100000001 * v273;
              *(_QWORD *)(v283 + 288) = v285;
            }
            ++v279;
          }
          while (v279 != v280);
        }
        v274 = 1;
        v275 = 1;
      }
      while ((v277 & 1) == 0);
      ++v273;
      v272 += 2;
    }
    while (v272 != v431);
  }
  if (*(_DWORD *)v422)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)nth_connection_list);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v458, "com.apple.coreaudio", "AMCP");
    v405 = *(NSObject **)v458[0].__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v458);
    if (os_log_type_enabled(v405, OS_LOG_TYPE_ERROR))
    {
      v406 = pthread_self();
      v407 = pthread_mach_thread_np(v406);
      LODWORD(v458[0].__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v458[0].__r_.__value_.__r.__words[0]) = v407;
      LOWORD(v458[0].__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v458[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest.cpp";
      WORD1(v458[0].__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v458[0].__r_.__value_.__r.__words[2]) = 760;
      LOWORD(v458[1].__r_.__value_.__l.__data_) = 2080;
      *(std::string::size_type *)((char *)v458[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"not (m_processing_state == Processing_State::Idle)";
      _os_log_error_impl(&dword_1B57BA000, v405, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to delete an active manifiest", (uint8_t *)v458, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v446);
    v408 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to delete an active manifiest", (uint64_t)&v448);
    std::logic_error::logic_error((std::logic_error *)&v447, &v448);
    v447.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)&v453, (const std::logic_error *)&v447);
    v454 = 0;
    v455 = 0;
    v456 = 0;
    v457 = -1;
    v453.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v453.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v458, (uint64_t)&v453);
    v458[1].__r_.__value_.__l.__size_ = (std::string::size_type)"void AMCP::Graph::Manifest::allocate_copy_buffers() const";
    v458[1].__r_.__value_.__r.__words[2] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source"
                                                                   "/AMCP/IO/Graph/Manifest.cpp";
    v459 = 760;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v439);
    *(_OWORD *)&cf[1] = *(_OWORD *)v439;
    cf[0] = off_1E69A20A0;
    cf[3] = *(CFTypeRef *)&v439[16];
    memset(v439, 0, sizeof(v439));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v458, (uint64_t)cf);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v408, (uint64_t)v458);
  }
  memset(&v453, 0, sizeof(v453));
  v286 = *(AMCP::Log::Scope_Registry ***)(v422 + 8);
  v287 = *(AMCP::Log::Scope_Registry ***)(v422 + 16);
  if (v286 != v287)
  {
    do
    {
      v288 = *((_QWORD *)*v286 + 1) - *(_QWORD *)*v286;
      if (v288)
      {
        v289 = 0;
        v290 = 0xCCCCCCCCCCCCCCCDLL * (v288 >> 3);
        do
        {
          v291 = AMCP::Graph::Manifest_Task::get_nth_connection_list(*v286, v289, 0);
          v292 = *(_QWORD **)v291;
          v293 = *(_QWORD **)(v291 + 8);
          while (v292 != v293)
          {
            if (*(_DWORD *)(*v292 + 148) == 2)
            {
              v294 = v453.__r_.__value_.__l.__size_;
              if (v453.__r_.__value_.__l.__size_ >= v453.__r_.__value_.__r.__words[2])
              {
                v299 = (uint64_t)(v453.__r_.__value_.__l.__size_ - v453.__r_.__value_.__r.__words[0]) >> 4;
                v300 = v299 + 1;
                if ((unint64_t)(v299 + 1) >> 60)
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                v301 = v453.__r_.__value_.__r.__words[2] - v453.__r_.__value_.__r.__words[0];
                if ((uint64_t)(v453.__r_.__value_.__r.__words[2] - v453.__r_.__value_.__r.__words[0]) >> 3 > v300)
                  v300 = v301 >> 3;
                if ((unint64_t)v301 >= 0x7FFFFFFFFFFFFFF0)
                  v302 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v302 = v300;
                v458[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v453.__r_.__value_.__r.__words[2];
                v303 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v302);
                v305 = &v303[16 * v299];
                v306 = *(_OWORD *)v292;
                *(_OWORD *)v305 = *(_OWORD *)v292;
                if (*((_QWORD *)&v306 + 1))
                {
                  v307 = (unint64_t *)(*((_QWORD *)&v306 + 1) + 8);
                  do
                    v308 = __ldxr(v307);
                  while (__stxr(v308 + 1, v307));
                }
                v309 = (_QWORD *)v453.__r_.__value_.__l.__size_;
                v310 = v453.__r_.__value_.__r.__words[0];
                if (v453.__r_.__value_.__l.__size_ == v453.__r_.__value_.__r.__words[0])
                {
                  v313 = vdupq_n_s64(v453.__r_.__value_.__l.__size_);
                  v311 = (std::string::size_type)&v303[16 * v299];
                }
                else
                {
                  v311 = (std::string::size_type)&v303[16 * v299];
                  do
                  {
                    v312 = *((_OWORD *)v309 - 1);
                    v309 -= 2;
                    *(_OWORD *)(v311 - 16) = v312;
                    v311 -= 16;
                    *v309 = 0;
                    v309[1] = 0;
                  }
                  while (v309 != (_QWORD *)v310);
                  v313 = *(int64x2_t *)&v453.__r_.__value_.__l.__data_;
                }
                v298 = (std::string::size_type)(v305 + 16);
                v453.__r_.__value_.__r.__words[0] = v311;
                v453.__r_.__value_.__l.__size_ = (std::string::size_type)(v305 + 16);
                *(int64x2_t *)&v458[0].__r_.__value_.__r.__words[1] = v313;
                v314 = v453.__r_.__value_.__r.__words[2];
                v453.__r_.__value_.__r.__words[2] = (std::string::size_type)&v303[16 * v304];
                v458[1].__r_.__value_.__r.__words[0] = v314;
                v458[0].__r_.__value_.__r.__words[0] = v313.i64[0];
                std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)v458);
              }
              else
              {
                *(_QWORD *)v453.__r_.__value_.__l.__size_ = *v292;
                v295 = v292[1];
                *(_QWORD *)(v294 + 8) = v295;
                if (v295)
                {
                  v296 = (unint64_t *)(v295 + 8);
                  do
                    v297 = __ldxr(v296);
                  while (__stxr(v297 + 1, v296));
                }
                v298 = v294 + 16;
              }
              v453.__r_.__value_.__l.__size_ = v298;
            }
            v292 += 2;
          }
          ++v289;
        }
        while (v289 != v290);
      }
      v286 += 2;
    }
    while (v286 != v287);
    v315 = *(_QWORD *)(v422 + 8);
    v316 = *(_QWORD *)(v422 + 16);
LABEL_442:
    if (v315 != v316)
    {
      v317 = *(uint64_t ***)(*(_QWORD *)v315 + 24);
      v318 = *(uint64_t ***)(*(_QWORD *)v315 + 32);
      while (1)
      {
        if (v317 == v318)
        {
          v315 += 16;
          goto LABEL_442;
        }
        v319 = *v317;
        v320 = v317[1];
        if (*v317 == v320)
          goto LABEL_452;
        v321 = *v317;
        while (1)
        {
          v322 = *(_DWORD *)(*v321 + 148);
          if (!*(_DWORD *)(*v321 + 152))
            break;
          if (v322)
            goto LABEL_453;
LABEL_451:
          v321 += 2;
          if (v321 == v320)
            goto LABEL_452;
        }
        if (v322 != 2)
          goto LABEL_451;
LABEL_453:
        if (v317[3])
          goto LABEL_491;
        while (2)
        {
          v323 = v453.__r_.__value_.__r.__words[0];
          if (v453.__r_.__value_.__r.__words[0] != v453.__r_.__value_.__l.__size_)
          {
            while (*(_QWORD *)v323 != *v319)
            {
              v323 += 16;
              if (v323 == v453.__r_.__value_.__l.__size_)
              {
                v323 = v453.__r_.__value_.__l.__size_;
                break;
              }
            }
          }
          if (v323 == v453.__r_.__value_.__l.__size_)
            goto LABEL_472;
          v324 = *(_QWORD *)(*(_QWORD *)v323 + 304);
          v325 = *(std::__shared_weak_count **)(*(_QWORD *)v323 + 312);
          if (v325)
          {
            v326 = (unint64_t *)&v325->__shared_owners_;
            do
              v327 = __ldxr(v326);
            while (__stxr(v327 + 1, v326));
          }
          if (v324 && *(_DWORD *)(*v319 + 148) == 2)
          {
            v328 = *(_DWORD *)(*v319 + 152) == 0;
            if (!v325)
              goto LABEL_471;
          }
          else
          {
            v328 = 0;
            if (!v325)
              goto LABEL_471;
          }
          v329 = (unint64_t *)&v325->__shared_owners_;
          do
            v330 = __ldaxr(v329);
          while (__stlxr(v330 - 1, v329));
          if (!v330)
          {
            ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
            std::__shared_weak_count::__release_weak(v325);
          }
LABEL_471:
          if (!v328)
          {
LABEL_472:
            v319 += 2;
            if (v319 == v320)
              goto LABEL_473;
            continue;
          }
          break;
        }
        v356 = *(_QWORD *)(*(_QWORD *)v323 + 312);
        v458[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)v323 + 304);
        v458[0].__r_.__value_.__l.__size_ = v356;
        if (v356)
        {
          v357 = (unint64_t *)(v356 + 8);
          do
            v358 = __ldxr(v357);
          while (__stxr(v358 + 1, v357));
        }
        std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)(v317 + 3), (__int128 *)v458);
        v359 = (std::__shared_weak_count *)v458[0].__r_.__value_.__l.__size_;
        if (v458[0].__r_.__value_.__l.__size_)
        {
          v360 = (unint64_t *)(v458[0].__r_.__value_.__l.__size_ + 8);
          do
            v361 = __ldaxr(v360);
          while (__stlxr(v361 - 1, v360));
          if (!v361)
          {
            ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
            std::__shared_weak_count::__release_weak(v359);
          }
        }
LABEL_473:
        v319 = *v317;
        if (!v317[3])
        {
          v331 = *v319;
          v332 = *(_OWORD *)(*v319 + 104);
          *(_OWORD *)&v458[0].__r_.__value_.__l.__data_ = *(_OWORD *)(*v319 + 88);
          *(_OWORD *)&v458[0].__r_.__value_.__r.__words[2] = v332;
          v458[1].__r_.__value_.__l.__size_ = *(_QWORD *)(v331 + 120);
          v333 = *v319;
          v335 = *(const void **)(*v319 + 128);
          v334 = *(unint64_t **)(v333 + 136);
          cf[0] = v335;
          cf[1] = v334;
          if (v334)
          {
            v336 = v334 + 1;
            do
              v337 = __ldxr(v336);
            while (__stxr(v337 + 1, v336));
          }
          v338 = (_QWORD *)operator new();
          v339 = (uint64_t)v338;
          v448.__r_.__value_.__r.__words[0] = (std::string::size_type)v335;
          v448.__r_.__value_.__l.__size_ = (std::string::size_type)v334;
          if (v334)
          {
            v340 = v334 + 1;
            do
              v341 = __ldxr(v340);
            while (__stxr(v341 + 1, v340));
          }
          AMCP::DAL::Fixed_Buffer::Fixed_Buffer(v338, (uint64_t)v458, &v448, 4096.0);
          std::shared_ptr<AMCP::DAL::DAL_Buffer>::reset[abi:ne180100]<AMCP::DAL::Fixed_Buffer,void>((uint64_t)(v317 + 3), v339);
          v342 = (std::__shared_weak_count *)v448.__r_.__value_.__l.__size_;
          if (v448.__r_.__value_.__l.__size_)
          {
            v343 = (unint64_t *)(v448.__r_.__value_.__l.__size_ + 8);
            do
              v344 = __ldaxr(v343);
            while (__stlxr(v344 - 1, v343));
            if (!v344)
            {
              ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
              std::__shared_weak_count::__release_weak(v342);
            }
          }
          v345 = (std::__shared_weak_count *)cf[1];
          if (cf[1])
          {
            v346 = (unint64_t *)((char *)cf[1] + 8);
            do
              v347 = __ldaxr(v346);
            while (__stlxr(v347 - 1, v346));
            if (!v347)
            {
              ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
              std::__shared_weak_count::__release_weak(v345);
            }
          }
          v319 = *v317;
        }
LABEL_491:
        v348 = v317[1];
        while (v319 != v348)
        {
          v349 = *v319;
          v350 = (std::__shared_weak_count *)v317[4];
          *(_QWORD *)v439 = v317[3];
          *(_QWORD *)&v439[8] = v350;
          if (v350)
          {
            v351 = (unint64_t *)&v350->__shared_owners_;
            do
              v352 = __ldxr(v351);
            while (__stxr(v352 + 1, v351));
          }
          if (!*(_DWORD *)(v349 + 152) && !*(_QWORD *)(v349 + 304) && *(_DWORD *)(v349 + 148) == 2)
          {
            std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v349 + 304, (__int128 *)v439);
            v350 = *(std::__shared_weak_count **)&v439[8];
          }
          if (v350)
          {
            v354 = (unint64_t *)&v350->__shared_owners_;
            do
              v355 = __ldaxr(v354);
            while (__stlxr(v355 - 1, v354));
            if (!v355)
            {
              ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
              std::__shared_weak_count::__release_weak(v350);
            }
          }
          v319 += 2;
        }
LABEL_452:
        v317 += 5;
      }
    }
  }
  v458[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v453;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v458);
  v362 = *v413;
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](*v413 + 12, *v409, v409[1]);
  v363 = v362[10];
  v364 = *v409;
  v365 = v409[1];
  v458[0].__r_.__value_.__r.__words[0] = *v409;
  v458[0].__r_.__value_.__l.__size_ = v365;
  if (v365)
  {
    v366 = (unint64_t *)(v365 + 8);
    do
      v367 = __ldxr(v366);
    while (__stxr(v367 + 1, v366));
  }
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__emplace_unique_key_args<std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase>>(v363, v364, (uint64_t)v458);
  v368 = (std::__shared_weak_count *)v458[0].__r_.__value_.__l.__size_;
  if (v458[0].__r_.__value_.__l.__size_)
  {
    v369 = (unint64_t *)(v458[0].__r_.__value_.__l.__size_ + 8);
    do
      v370 = __ldaxr(v369);
    while (__stlxr(v370 - 1, v369));
    if (!v370)
    {
      ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
      std::__shared_weak_count::__release_weak(v368);
    }
  }
  v371 = operator new();
  v373 = v362[12];
  v372 = v362[13];
  if (v372)
  {
    v374 = (unint64_t *)(v372 + 8);
    do
      v375 = __ldxr(v374);
    while (__stxr(v375 + 1, v374));
  }
  *(_BYTE *)v371 = 0;
  *(_QWORD *)(v371 + 8) = 0;
  *(_QWORD *)(v371 + 16) = 0;
  *(_QWORD *)(v371 + 24) = v373;
  *(_QWORD *)(v371 + 32) = v372;
  *(_DWORD *)(v371 + 40) = 0;
  std::unique_ptr<AMCP::Graph::Manifest_Counter>::reset[abi:ne180100](v362 + 8, v371);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__deallocate_node((_QWORD *)v435);
  v376 = __p[0];
  __p[0] = 0;
  if (v376)
    operator delete(v376);
  return v422;
}

void sub_1B5AB5D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a67;
  unint64_t *p_shared_owners;
  unint64_t v69;

  a53 = &a67;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  if (a29)
  {
    p_shared_owners = (unint64_t *)&a29->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))a29->__on_zero_shared)(a29);
      std::__shared_weak_count::__release_weak(a29);
    }
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::~__hash_table((uint64_t)&a39);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a16);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>>>::~__hash_table(a19);
  a39 = a14;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<int>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (!(a2 >> 62))
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

void std::unordered_map<std::string,std::shared_ptr<AMCP::Graph::Node>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Graph::Node> const&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD v31[2];
  char v32;

  v7 = std::__string_hash<char>::operator()[abi:ne180100](a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(i + 16, (unsigned __int8 *)a2))
          {
            std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)i + 5, *a3, a3[1]);
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = operator new(0x38uLL);
  v31[0] = v16;
  v31[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v8;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v19 = *a3;
  v18 = a3[1];
  v16[4] = v17;
  v16[5] = v19;
  v16[6] = v18;
  if (v18)
  {
    v20 = (unint64_t *)(v18 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v32 = 1;
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (!v9 || (float)(v23 * (float)v9) < v22)
  {
    v24 = 1;
    if (v9 >= 3)
      v24 = (v9 & (v9 - 1)) != 0;
    v25 = v24 | (2 * v9);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      v27 = v26;
    else
      v27 = v25;
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v27);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v28 = *(_QWORD *)a1;
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v29)
  {
    *v16 = *v29;
LABEL_41:
    *v29 = v16;
    goto LABEL_42;
  }
  *v16 = *v15;
  *v15 = v16;
  *(_QWORD *)(v28 + 8 * v3) = v15;
  if (*v16)
  {
    v30 = *(_QWORD *)(*v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v30 >= v9)
        v30 %= v9;
    }
    else
    {
      v30 &= v9 - 1;
    }
    v29 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_41;
  }
LABEL_42:
  v31[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v31);
}

void sub_1B5AB6A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  _QWORD *v15;
  __int128 *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((unsigned __int8 *)i + 16, a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  i = operator new(0x38uLL);
  v28[0] = i;
  v28[1] = a1 + 16;
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v8;
  v16 = *a3;
  v17 = **a3;
  *((_QWORD *)i + 4) = *((_QWORD *)*a3 + 2);
  *((_OWORD *)i + 1) = v17;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)i + 5) = 0;
  *((_QWORD *)i + 6) = 0;
  v29 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v23);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)i = *v25;
LABEL_38:
    *v25 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v15;
  *v15 = i;
  *(_QWORD *)(v24 + 8 * v3) = v15;
  if (*(_QWORD *)i)
  {
    v26 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
  return i;
}

void sub_1B5AB6CC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void AMCP::Graph::Manifest::create_connection_and_intermediate_tasks(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unint64_t a5, uint64_t a6, char **a7, uint64_t a8)
{
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  void **v18;
  char *v19;
  unint64_t v20;
  _QWORD *v21;
  std::string *v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::string *v36;
  __int128 v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t terminal_for_key;
  std::logic_error v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  double v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  AMCP::Log::Scope_Registry *v62;
  double v63;
  unint64_t *v64;
  unint64_t v65;
  double v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  AMCP::Log::Scope_Registry *v71;
  double v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  __int128 v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  __int128 v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  AMCP::Log::Scope_Registry *v93;
  double v94;
  int v95;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  AMCP::Log::Scope_Registry *v102;
  AMCP::Log::Scope_Registry *v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  std::__shared_weak_count *shared_owners;
  unint64_t v111;
  unint64_t *p_shared_weak_owners;
  unint64_t v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t *v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  _QWORD *v147;
  char **v148;
  uint64_t v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  _QWORD *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  std::string::size_type v162;
  unint64_t *v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  std::string::size_type size;
  unint64_t *v174;
  unint64_t v175;
  char *v176;
  char *v177;
  char *v178;
  __int128 v179;
  int64x2_t v180;
  char *v181;
  std::string::size_type v182;
  char v183;
  std::string::size_type v184;
  char v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  std::string::size_type v191;
  unint64_t *v192;
  unint64_t v193;
  int v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unsigned __int8 *v204;
  uint64_t (***v205)();
  std::string::size_type v206;
  _QWORD *v207;
  AMCP::Log::Scope_Registry *v208;
  NSObject *v209;
  _opaque_pthread_t *v210;
  mach_port_t v211;
  _BYTE *v212;
  void *v213;
  std::string *v214;
  unsigned __int8 *v215;
  uint64_t (***nth_wire_ref)();
  AMCP::Log::Scope_Registry *v217;
  NSObject *v218;
  _opaque_pthread_t *v219;
  mach_port_t v220;
  _BYTE *v221;
  void *v222;
  std::string *v223;
  uint64_t v224;
  __int128 v225;
  _BOOL4 v226;
  _BOOL4 v227;
  uint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  __int128 v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  char *v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t *v272;
  unint64_t v273;
  unint64_t *v274;
  unint64_t v275;
  const char *v276;
  unint64_t *v277;
  unint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t *v281;
  unint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  unint64_t *v290;
  unint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  unint64_t *v294;
  unint64_t v295;
  std::string::size_type v296;
  char v297;
  uint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  __int128 v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *imp;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t *v322;
  unint64_t v323;
  unint64_t *v324;
  unint64_t v325;
  std::string::size_type v326;
  char v327;
  uint64_t v328;
  unint64_t *v329;
  unint64_t v330;
  __int128 v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  unint64_t *v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  uint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t *v384;
  unint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  unint64_t *v392;
  std::logic_error_vtbl **v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  std::__shared_weak_count *v403;
  unint64_t *v404;
  unint64_t v405;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  std::__shared_weak_count *v409;
  unint64_t *v410;
  unint64_t v411;
  std::__shared_weak_count *v412;
  unint64_t *v413;
  unint64_t v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  uint64_t i;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  unint64_t *v425;
  unint64_t v426;
  std::__shared_weak_count *v427;
  unint64_t *v428;
  unint64_t v429;
  unint64_t v430;
  unint64_t *v431;
  unint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  std::logic_error_vtbl *v436;
  std::string::size_type v437;
  std::string::value_type *v438;
  int v439;
  __int128 v440;
  char v441;
  std::string::value_type *v442;
  char *v443;
  std::logic_error_vtbl *v444;
  int v445;
  __int128 v446;
  __int128 v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t *v450;
  unint64_t v451;
  std::string::size_type v452;
  _QWORD *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t *v457;
  unint64_t v458;
  _QWORD *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t *v463;
  unint64_t v464;
  _QWORD *v465;
  uint64_t v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  _QWORD *v470;
  std::__shared_weak_count *v471;
  unint64_t *v472;
  unint64_t v473;
  unint64_t v474;
  char *v475;
  std::string::size_type v476;
  unint64_t *v477;
  unint64_t v478;
  char *v479;
  uint64_t v480;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  char *v484;
  uint64_t v485;
  char *v486;
  std::string::size_type v487;
  unint64_t *v488;
  unint64_t v489;
  char *v490;
  char *v491;
  char *v492;
  __int128 v493;
  int64x2_t v494;
  char *v495;
  uint64_t v496;
  void *v497;
  char v498;
  std::string::size_type v499;
  uint64_t v500;
  __int128 v501;
  __int128 v502;
  std::__shared_count_vtbl *v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  unint64_t v506;
  std::__shared_weak_count *v507;
  unint64_t *v508;
  unint64_t v509;
  std::__shared_weak_count *v510;
  unint64_t *v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t *v514;
  unint64_t v515;
  std::__shared_weak_count *v516;
  unint64_t *v517;
  unint64_t v518;
  std::__shared_weak_count *v519;
  unint64_t *v520;
  unint64_t v521;
  std::__shared_weak_count *v522;
  unint64_t *v523;
  unint64_t v524;
  std::__shared_weak_count *v525;
  NSObject *v526;
  unint64_t *v527;
  unint64_t v528;
  _opaque_pthread_t *v529;
  mach_port_t v530;
  void *v531;
  NSObject *v532;
  _opaque_pthread_t *v533;
  mach_port_t v534;
  _BYTE *v535;
  void *exception;
  _BYTE *v537;
  NSObject *v538;
  _opaque_pthread_t *v539;
  mach_port_t v540;
  _BYTE *v541;
  void *v542;
  _BYTE *v543;
  NSObject *v544;
  _opaque_pthread_t *v545;
  mach_port_t v546;
  void *v547;
  NSObject *v548;
  _opaque_pthread_t *v549;
  mach_port_t v550;
  void *v551;
  NSObject *v552;
  _opaque_pthread_t *v553;
  mach_port_t v554;
  void *v555;
  NSObject *v556;
  _opaque_pthread_t *v557;
  mach_port_t v558;
  void *v559;
  NSObject *v560;
  _opaque_pthread_t *v561;
  mach_port_t v562;
  void *v563;
  NSObject *v564;
  _opaque_pthread_t *v565;
  mach_port_t v566;
  void *v567;
  NSObject *v568;
  _opaque_pthread_t *v569;
  mach_port_t v570;
  std::string *v571;
  void *v572;
  std::string *v573;
  NSObject *v574;
  _opaque_pthread_t *v575;
  mach_port_t v576;
  void *v577;
  NSObject *v578;
  _opaque_pthread_t *v579;
  mach_port_t v580;
  __int128 *v581;
  void *v582;
  __int128 *v583;
  NSObject *v584;
  _opaque_pthread_t *v585;
  mach_port_t v586;
  void *v587;
  int v588;
  int v589;
  int v590;
  int v591;
  int v594;
  unint64_t v595;
  _QWORD *v596;
  uint64_t v599;
  __int128 v600;
  std::__shared_count_vtbl *v601;
  std::__shared_weak_count *v602;
  _OWORD v603[2];
  uint64_t v604;
  void *v605;
  __int128 v606;
  std::string v607;
  std::logic_error_vtbl *v608;
  int v609;
  uint64_t v610;
  std::__shared_weak_count *v611;
  std::string v612;
  std::logic_error_vtbl *v613;
  int v614;
  uint64_t v615;
  std::__shared_weak_count *v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  char *v621;
  std::__shared_weak_count *v622;
  _BYTE v623[48];
  __int128 v624;
  __int128 v625;
  __int128 v626;
  void *v627;
  void *v628;
  uint64_t v629;
  void *v630;
  void *v631;
  uint64_t v632;
  int v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  char *v637;
  std::__shared_weak_count *v638;
  std::logic_error v639;
  std::string v640;
  uint64_t v641;
  int v642;
  std::string v643;
  unint64_t v644;
  int v645;
  __int128 v646;
  __int128 v647;
  std::logic_error v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  char *v655;
  std::__shared_weak_count *v656;
  __int128 v657;
  __int128 v658;
  std::string v659;
  unint64_t v660;
  int v661;
  std::string v662;
  unint64_t v663;
  int v664;
  std::string v665;
  unint64_t v666;
  int v667;
  __int128 v668;
  uint64_t v669;
  unint64_t v670;
  int v671;
  __int128 v672;
  std::string v673;
  std::string v674;
  uint64_t v675;
  std::__shared_weak_count *v676;
  std::string v677;
  unint64_t v678;
  int v679;
  std::string v680;
  unint64_t v681;
  int v682;
  __int128 v683;
  std::logic_error v684;
  _BYTE v685[24];
  _BYTE v686[96];
  __int128 v687;
  __int128 v688;
  __int128 v689;
  int v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  _BYTE v694[32];
  int v695;
  __int128 v696;
  __int128 v697;
  int v698;
  __int128 v699;
  __int128 v700;
  std::logic_error v701;
  __int128 v702;
  _OWORD v703[3];
  __int128 v704;
  _BYTE v705[92];
  int v706;
  char *v707;
  std::__shared_weak_count *v708;
  _BYTE __str[64];
  __int128 v710;
  void *v711[2];
  void *__src[2];
  __int128 v713;
  __int128 v714;
  _BYTE v715[12];
  uint64_t v716;
  std::__shared_weak_count *v717;
  int v718;
  _DWORD v719[9];
  std::logic_error v720;
  uint64_t v721;
  std::string v722;
  _BYTE v723[32];
  uint64_t v724;
  uint64_t v725;
  int v726;
  std::logic_error v727;
  _BYTE v728[32];
  uint64_t v729;
  std::string v730;
  std::logic_error v731;
  __int128 v732;
  _QWORD v733[2];
  _QWORD v734[2];
  _BYTE v735[64];
  unint64_t v736;
  int v737;
  _BYTE v738[72];
  uint64_t v739;
  __int128 v740;
  __int128 v741;
  std::logic_error v742;
  __int128 v743;
  __int128 v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  uint64_t v748;

  v748 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 408))
  {
    AMCP::Graph::Graph_Wire::Connection::Connection((std::string *)__str, (const AMCP::Graph::Graph_Wire::Connection *)(a2 + 192));
  }
  else
  {
    *(_DWORD *)v715 = 0;
    v714 = 0u;
    v713 = 0u;
    *(_OWORD *)__src = 0u;
    *(_OWORD *)v711 = 0u;
    v710 = 0u;
    memset(__str, 0, sizeof(__str));
    *(_QWORD *)&v715[4] = 64;
    v717 = 0;
    v716 = 0;
    memset(v719, 0, sizeof(v719));
    v718 = 1;
  }
  v12 = (uint64_t *)(a1 + 32);
  v13 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&__str[40]);
  v14 = v13;
  v15 = *(_QWORD *)(a1 + 40);
  v595 = a5;
  v599 = a1;
  if (v15)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    v17 = v16.u32[0];
    if (v16.u32[0] > 1uLL)
    {
      a5 = v13;
      if (v13 >= v15)
        a5 = v13 % v15;
    }
    else
    {
      a5 = (v15 - 1) & v13;
    }
    v18 = *(void ***)(*v12 + 8 * a5);
    if (v18)
    {
      v19 = (char *)*v18;
      if (*v18)
      {
        do
        {
          v20 = *((_QWORD *)v19 + 1);
          if (v20 == v14)
          {
            if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((unsigned __int8 *)v19 + 16, &__str[40]))
            {
              goto LABEL_46;
            }
          }
          else
          {
            if (v17 > 1)
            {
              if (v20 >= v15)
                v20 %= v15;
            }
            else
            {
              v20 &= v15 - 1;
            }
            if (v20 != a5)
              break;
          }
          v19 = *(char **)v19;
        }
        while (v19);
      }
    }
  }
  v19 = (char *)operator new(0x38uLL);
  v21 = (_QWORD *)(a1 + 48);
  *(_QWORD *)v738 = v19;
  *(_QWORD *)&v738[8] = a1 + 48;
  v738[16] = 0;
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = v14;
  v22 = (std::string *)(v19 + 16);
  if ((__str[63] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)&__str[40], *(std::string::size_type *)&__str[48]);
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)&__str[40];
    *((_QWORD *)v19 + 4) = *(_QWORD *)&__str[56];
  }
  *((_QWORD *)v19 + 5) = 0;
  *((_QWORD *)v19 + 6) = 0;
  v738[16] = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 56) + 1);
  v24 = *(float *)(a1 + 64);
  if (!v15 || (float)(v24 * (float)v15) < v23)
  {
    v25 = 1;
    if (v15 >= 3)
      v25 = (v15 & (v15 - 1)) != 0;
    v26 = v25 | (2 * v15);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v12, v28);
    v15 = *(_QWORD *)(a1 + 40);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        a5 = v14 % v15;
      else
        a5 = v14;
    }
    else
    {
      a5 = (v15 - 1) & v14;
    }
  }
  v29 = *v12;
  v30 = *(_QWORD **)(*v12 + 8 * a5);
  if (v30)
  {
    *(_QWORD *)v19 = *v30;
LABEL_44:
    *v30 = v19;
    goto LABEL_45;
  }
  *(_QWORD *)v19 = *v21;
  *v21 = v19;
  *(_QWORD *)(v29 + 8 * a5) = v21;
  if (*(_QWORD *)v19)
  {
    v31 = *(_QWORD *)(*(_QWORD *)v19 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v31 >= v15)
        v31 %= v15;
    }
    else
    {
      v31 &= v15 - 1;
    }
    v30 = (_QWORD *)(*v12 + 8 * v31);
    goto LABEL_44;
  }
LABEL_45:
  *(_QWORD *)v738 = 0;
  ++*(_QWORD *)(a1 + 56);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v738);
LABEL_46:
  v32 = (char *)*((_QWORD *)v19 + 5);
  v33 = (std::__shared_weak_count *)*((_QWORD *)v19 + 6);
  v707 = v32;
  v708 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
  }
  AMCP::Graph::Terminal::get_description((AMCP::Graph::Terminal *)v705, a4);
  memset(v694, 0, sizeof(v694));
  v696 = 0u;
  v697 = 0u;
  v695 = 0;
  v698 = 0;
  v699 = 0u;
  v700 = 0u;
  v701 = (std::logic_error)0;
  v702 = 0u;
  memset(v703, 0, sizeof(v703));
  std::string::operator=((std::string *)v694, (const std::string *)__str);
  *(_QWORD *)&v694[24] = *(_QWORD *)&__str[24];
  v695 = *(_DWORD *)&__str[32];
  v36 = std::string::operator=((std::string *)&v696, (const std::string *)&__str[40]);
  *((_QWORD *)&v697 + 1) = v710;
  v698 = DWORD2(v710);
  v37 = *(_OWORD *)(a2 + 416);
  v38 = *(_QWORD *)(a2 + 424);
  if (v38)
  {
    v39 = (unint64_t *)(v38 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v699 + 1);
  v699 = v37;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = *(_OWORD *)(a2 + 432);
  v45 = *(_QWORD *)(a2 + 440);
  if (v45)
  {
    v46 = (unint64_t *)(v45 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v700 + 1);
  v700 = v44;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (!(_QWORD)v699)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v36);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v738, "com.apple.coreaudio", "AMCP");
    v532 = **(NSObject ***)v738;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v738);
    if (os_log_type_enabled(v532, OS_LOG_TYPE_ERROR))
    {
      v533 = pthread_self();
      v534 = pthread_mach_thread_np(v533);
      AMCP::Terminal_Identifier_to_string((std::string *)v686, (const void **)__str);
      v535 = v686[23] >= 0 ? v686 : *(_BYTE **)v686;
      *(_DWORD *)v738 = 67110146;
      *(_DWORD *)&v738[4] = v534;
      *(_WORD *)&v738[8] = 2080;
      *(_QWORD *)&v738[10] = "Graph_Wire.cpp";
      *(_WORD *)&v738[18] = 1024;
      *(_DWORD *)&v738[20] = 153;
      *(_WORD *)&v738[24] = 2080;
      *(_QWORD *)&v738[26] = "not (info.m_source_clock != nullptr)";
      *(_WORD *)&v738[34] = 2080;
      *(_QWORD *)&v738[36] = v535;
      _os_log_error_impl(&dword_1B57BA000, v532, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Missing clock for wire - %s", v738, 0x2Cu);
      if ((v686[23] & 0x80000000) != 0)
        operator delete(*(void **)v686);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v677);
    exception = __cxa_allocate_exception(0x40uLL);
    AMCP::Terminal_Identifier_to_string((std::string *)v728, (const void **)__str);
    if (v728[23] >= 0)
      v537 = v728;
    else
      v537 = *(_BYTE **)v728;
    caulk::make_string((caulk *)"Missing clock for wire - %s", (uint64_t)v723, v537);
    std::logic_error::logic_error((std::logic_error *)&v680, (const std::string *)v723);
    v680.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)v686, (const std::logic_error *)&v680);
    memset(&v686[24], 0, 24);
    *(_DWORD *)&v686[48] = -1;
    *(_QWORD *)v686 = off_1E69A1208;
    *(_QWORD *)&v686[16] = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v738, (uint64_t)v686);
    *(_QWORD *)&v738[32] = "Graph_Wire::Wire_Info AMCP::Graph::Graph_Wire::get_wire_info_for_connection(const Connection "
                           "&, const Node_Map &) const";
    *(_QWORD *)&v738[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Wire.cpp";
    *(_DWORD *)&v738[48] = 153;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v684);
    *(std::logic_error *)&v735[8] = v684;
    *(_QWORD *)v735 = off_1E69A20A0;
    *(_QWORD *)&v735[24] = *(_QWORD *)v685;
    v684.__vftable = 0;
    v684.__imp_.__imp_ = 0;
    *(_QWORD *)v685 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v738, (uint64_t)v735);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)v738);
  }
  if (!(_QWORD)v700)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v36);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v738, "com.apple.coreaudio", "AMCP");
    v538 = **(NSObject ***)v738;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v738);
    if (os_log_type_enabled(v538, OS_LOG_TYPE_ERROR))
    {
      v539 = pthread_self();
      v540 = pthread_mach_thread_np(v539);
      AMCP::Terminal_Identifier_to_string((std::string *)v686, (const void **)&__str[40]);
      v541 = v686[23] >= 0 ? v686 : *(_BYTE **)v686;
      *(_DWORD *)v738 = 67110146;
      *(_DWORD *)&v738[4] = v540;
      *(_WORD *)&v738[8] = 2080;
      *(_QWORD *)&v738[10] = "Graph_Wire.cpp";
      *(_WORD *)&v738[18] = 1024;
      *(_DWORD *)&v738[20] = 154;
      *(_WORD *)&v738[24] = 2080;
      *(_QWORD *)&v738[26] = "not (info.m_dest_clock != nullptr)";
      *(_WORD *)&v738[34] = 2080;
      *(_QWORD *)&v738[36] = v541;
      _os_log_error_impl(&dword_1B57BA000, v538, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Missing clock for wire - %s", v738, 0x2Cu);
      if ((v686[23] & 0x80000000) != 0)
        operator delete(*(void **)v686);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v677);
    v542 = __cxa_allocate_exception(0x40uLL);
    AMCP::Terminal_Identifier_to_string((std::string *)v728, (const void **)&__str[40]);
    if (v728[23] >= 0)
      v543 = v728;
    else
      v543 = *(_BYTE **)v728;
    caulk::make_string((caulk *)"Missing clock for wire - %s", (uint64_t)v723, v543);
    std::logic_error::logic_error((std::logic_error *)&v680, (const std::string *)v723);
    v680.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)v686, (const std::logic_error *)&v680);
    memset(&v686[24], 0, 24);
    *(_DWORD *)&v686[48] = -1;
    *(_QWORD *)v686 = off_1E69A1208;
    *(_QWORD *)&v686[16] = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v738, (uint64_t)v686);
    *(_QWORD *)&v738[32] = "Graph_Wire::Wire_Info AMCP::Graph::Graph_Wire::get_wire_info_for_connection(const Connection "
                           "&, const Node_Map &) const";
    *(_QWORD *)&v738[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Wire.cpp";
    *(_DWORD *)&v738[48] = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v684);
    *(std::logic_error *)&v735[8] = v684;
    *(_QWORD *)v735 = off_1E69A20A0;
    *(_QWORD *)&v735[24] = *(_QWORD *)v685;
    v684.__vftable = 0;
    v684.__imp_.__imp_ = 0;
    *(_QWORD *)v685 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v738, (uint64_t)v735);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v542, (uint64_t)v738);
  }
  terminal_for_key = get_terminal_for_key((uint64_t)__str, a3);
  v52 = *(std::logic_error *)terminal_for_key;
  v53 = *(_OWORD *)(terminal_for_key + 16);
  *(_QWORD *)&v703[0] = *(_QWORD *)(terminal_for_key + 32);
  v702 = v53;
  v701 = v52;
  v596 = a3;
  v54 = get_terminal_for_key((uint64_t)&__str[40], a3);
  v55 = *(_OWORD *)v54;
  v56 = *(_OWORD *)(v54 + 16);
  *((_QWORD *)&v703[2] + 1) = *(_QWORD *)(v54 + 32);
  *(_OWORD *)((char *)&v703[1] + 8) = v56;
  *(_OWORD *)((char *)v703 + 8) = v55;
  v57 = *(double *)&v701.__vftable;
  v58 = *(_QWORD *)(a2 + 416);
  v59 = *(std::__shared_weak_count **)(a2 + 424);
  *(_QWORD *)v738 = v58;
  *(_QWORD *)&v738[8] = v59;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  v63 = (*(double (**)(uint64_t))(*(_QWORD *)v58 + 152))(v58);
  if (v59)
  {
    v64 = (unint64_t *)&v59->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v57 != v63)
  {
    AMCP::Log::Scope_Registry::get(v62);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v738, "com.apple.coreaudio", "AMCP");
    v544 = **(NSObject ***)v738;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v738);
    if (os_log_type_enabled(v544, OS_LOG_TYPE_ERROR))
    {
      v545 = pthread_self();
      v546 = pthread_mach_thread_np(v545);
      *(_DWORD *)v738 = 67109890;
      *(_DWORD *)&v738[4] = v546;
      *(_WORD *)&v738[8] = 2080;
      *(_QWORD *)&v738[10] = "Graph_Wire.cpp";
      *(_WORD *)&v738[18] = 1024;
      *(_DWORD *)&v738[20] = 161;
      *(_WORD *)&v738[24] = 2080;
      *(_QWORD *)&v738[26] = "not (info.m_source_format.mSampleRate == get_source_timebase()->get_sample_rate())";
      _os_log_error_impl(&dword_1B57BA000, v544, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Unexpected sample rate for connection", v738, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v680);
    v547 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Unexpected sample rate for connection", (uint64_t)v723);
    std::logic_error::logic_error(&v684, (const std::string *)v723);
    v684.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)v686, &v684);
    memset(&v686[24], 0, 24);
    *(_DWORD *)&v686[48] = -1;
    *(_QWORD *)v686 = off_1E69A1208;
    *(_QWORD *)&v686[16] = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v738, (uint64_t)v686);
    *(_QWORD *)&v738[32] = "Graph_Wire::Wire_Info AMCP::Graph::Graph_Wire::get_wire_info_for_connection(const Connection "
                           "&, const Node_Map &) const";
    *(_QWORD *)&v738[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Wire.cpp";
    *(_DWORD *)&v738[48] = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v728);
    *(_OWORD *)&v735[8] = *(_OWORD *)v728;
    *(_QWORD *)v735 = off_1E69A20A0;
    *(_QWORD *)&v735[24] = *(_QWORD *)&v728[16];
    memset(v728, 0, 24);
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v738, (uint64_t)v735);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v547, (uint64_t)v738);
  }
  v66 = *((double *)v703 + 1);
  v67 = *(_QWORD *)(a2 + 432);
  v68 = *(std::__shared_weak_count **)(a2 + 440);
  *(_QWORD *)v738 = v67;
  *(_QWORD *)&v738[8] = v68;
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  v72 = (*(double (**)(uint64_t))(*(_QWORD *)v67 + 152))(v67);
  if (v68)
  {
    v73 = (unint64_t *)&v68->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (v66 != v72)
  {
    AMCP::Log::Scope_Registry::get(v71);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v738, "com.apple.coreaudio", "AMCP");
    v548 = **(NSObject ***)v738;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v738);
    if (os_log_type_enabled(v548, OS_LOG_TYPE_ERROR))
    {
      v549 = pthread_self();
      v550 = pthread_mach_thread_np(v549);
      *(_DWORD *)v738 = 67109890;
      *(_DWORD *)&v738[4] = v550;
      *(_WORD *)&v738[8] = 2080;
      *(_QWORD *)&v738[10] = "Graph_Wire.cpp";
      *(_WORD *)&v738[18] = 1024;
      *(_DWORD *)&v738[20] = 162;
      *(_WORD *)&v738[24] = 2080;
      *(_QWORD *)&v738[26] = "not (info.m_dest_format.mSampleRate == get_dest_timebase()->get_sample_rate())";
      _os_log_error_impl(&dword_1B57BA000, v548, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Unexpected sample rate for connection", v738, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v680);
    v551 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Unexpected sample rate for connection", (uint64_t)v723);
    std::logic_error::logic_error(&v684, (const std::string *)v723);
    v684.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)v686, &v684);
    memset(&v686[24], 0, 24);
    *(_DWORD *)&v686[48] = -1;
    *(_QWORD *)v686 = off_1E69A1208;
    *(_QWORD *)&v686[16] = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v738, (uint64_t)v686);
    *(_QWORD *)&v738[32] = "Graph_Wire::Wire_Info AMCP::Graph::Graph_Wire::get_wire_info_for_connection(const Connection "
                           "&, const Node_Map &) const";
    *(_QWORD *)&v738[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Wire.cpp";
    *(_DWORD *)&v738[48] = 162;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v728);
    *(_OWORD *)&v735[8] = *(_OWORD *)v728;
    *(_QWORD *)v735 = off_1E69A20A0;
    *(_QWORD *)&v735[24] = *(_QWORD *)&v728[16];
    memset(v728, 0, 24);
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v738, (uint64_t)v735);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v551, (uint64_t)v738);
  }
  v75 = *(_QWORD *)(terminal_for_key + 104);
  if ((v75 & 0xFF00000000) == 0)
  {
    AMCP::Log::Scope_Registry::get(v71);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v738, "com.apple.coreaudio", "AMCP");
    v552 = **(NSObject ***)v738;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v738);
    if (os_log_type_enabled(v552, OS_LOG_TYPE_ERROR))
    {
      v553 = pthread_self();
      v554 = pthread_mach_thread_np(v553);
      *(_DWORD *)v738 = 67109890;
      *(_DWORD *)&v738[4] = v554;
      *(_WORD *)&v738[8] = 2080;
      *(_QWORD *)&v738[10] = "Graph_Wire.cpp";
      *(_WORD *)&v738[18] = 1024;
      *(_DWORD *)&v738[20] = 164;
      *(_WORD *)&v738[24] = 2080;
      *(_QWORD *)&v738[26] = "not (source_terminal.get_buffer_alignment().has_value())";
      _os_log_error_impl(&dword_1B57BA000, v552, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Source terminal is missing buffer alignment.", v738, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v680);
    v555 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Source terminal is missing buffer alignment.", (uint64_t)v723);
    std::logic_error::logic_error(&v684, (const std::string *)v723);
    v684.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)v686, &v684);
    memset(&v686[24], 0, 24);
    *(_DWORD *)&v686[48] = -1;
    *(_QWORD *)v686 = off_1E69A1208;
    *(_QWORD *)&v686[16] = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v738, (uint64_t)v686);
    *(_QWORD *)&v738[32] = "Graph_Wire::Wire_Info AMCP::Graph::Graph_Wire::get_wire_info_for_connection(const Connection "
                           "&, const Node_Map &) const";
    *(_QWORD *)&v738[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Wire.cpp";
    *(_DWORD *)&v738[48] = 164;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v728);
    *(_OWORD *)&v735[8] = *(_OWORD *)v728;
    *(_QWORD *)v735 = off_1E69A20A0;
    *(_QWORD *)&v735[24] = *(_QWORD *)&v728[16];
    memset(v728, 0, 24);
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v738, (uint64_t)v735);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v555, (uint64_t)v738);
  }
  v76 = *(_QWORD *)(v54 + 104);
  if ((v76 & 0xFF00000000) == 0)
  {
    AMCP::Log::Scope_Registry::get(v71);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v738, "com.apple.coreaudio", "AMCP");
    v556 = **(NSObject ***)v738;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v738);
    if (os_log_type_enabled(v556, OS_LOG_TYPE_ERROR))
    {
      v557 = pthread_self();
      v558 = pthread_mach_thread_np(v557);
      *(_DWORD *)v738 = 67109890;
      *(_DWORD *)&v738[4] = v558;
      *(_WORD *)&v738[8] = 2080;
      *(_QWORD *)&v738[10] = "Graph_Wire.cpp";
      *(_WORD *)&v738[18] = 1024;
      *(_DWORD *)&v738[20] = 165;
      *(_WORD *)&v738[24] = 2080;
      *(_QWORD *)&v738[26] = "not (dest_terminal.get_buffer_alignment().has_value())";
      _os_log_error_impl(&dword_1B57BA000, v556, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Destination terminal is missing buffer alignment.", v738, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v680);
    v559 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Destination terminal is missing buffer alignment.", (uint64_t)v723);
    std::logic_error::logic_error(&v684, (const std::string *)v723);
    v684.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)v686, &v684);
    memset(&v686[24], 0, 24);
    *(_DWORD *)&v686[48] = -1;
    *(_QWORD *)v686 = off_1E69A1208;
    *(_QWORD *)&v686[16] = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v738, (uint64_t)v686);
    *(_QWORD *)&v738[32] = "Graph_Wire::Wire_Info AMCP::Graph::Graph_Wire::get_wire_info_for_connection(const Connection "
                           "&, const Node_Map &) const";
    *(_QWORD *)&v738[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Wire.cpp";
    *(_DWORD *)&v738[48] = 165;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v728);
    *(_OWORD *)&v735[8] = *(_OWORD *)v728;
    *(_QWORD *)v735 = off_1E69A20A0;
    *(_QWORD *)&v735[24] = *(_QWORD *)&v728[16];
    memset(v728, 0, 24);
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v738, (uint64_t)v735);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v559, (uint64_t)v738);
  }
  if ((_DWORD)v75 != (_DWORD)v76)
  {
    AMCP::Log::Scope_Registry::get(v71);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v738, "com.apple.coreaudio", "AMCP");
    v560 = **(NSObject ***)v738;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v738);
    if (os_log_type_enabled(v560, OS_LOG_TYPE_ERROR))
    {
      v561 = pthread_self();
      v562 = pthread_mach_thread_np(v561);
      *(_DWORD *)v738 = 67109890;
      *(_DWORD *)&v738[4] = v562;
      *(_WORD *)&v738[8] = 2080;
      *(_QWORD *)&v738[10] = "Graph_Wire.cpp";
      *(_WORD *)&v738[18] = 1024;
      *(_DWORD *)&v738[20] = 168;
      *(_WORD *)&v738[24] = 2080;
      *(_QWORD *)&v738[26] = "not (src_alignment == dest_alignment)";
      _os_log_error_impl(&dword_1B57BA000, v560, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Source and dest terminals should have the same alignment.", v738, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v680);
    v563 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Source and dest terminals should have the same alignment.", (uint64_t)v723);
    std::logic_error::logic_error(&v684, (const std::string *)v723);
    v684.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)v686, &v684);
    memset(&v686[24], 0, 24);
    *(_DWORD *)&v686[48] = -1;
    *(_QWORD *)v686 = off_1E69A1208;
    *(_QWORD *)&v686[16] = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v738, (uint64_t)v686);
    *(_QWORD *)&v738[32] = "Graph_Wire::Wire_Info AMCP::Graph::Graph_Wire::get_wire_info_for_connection(const Connection "
                           "&, const Node_Map &) const";
    *(_QWORD *)&v738[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Wire.cpp";
    *(_DWORD *)&v738[48] = 168;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v728);
    *(_OWORD *)&v735[8] = *(_OWORD *)v728;
    *(_QWORD *)v735 = off_1E69A20A0;
    *(_QWORD *)&v735[24] = *(_QWORD *)&v728[16];
    memset(v728, 0, 24);
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v738, (uint64_t)v735);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v563, (uint64_t)v738);
  }
  DWORD2(v704) = *(_QWORD *)(terminal_for_key + 104);
  LODWORD(v704) = HIDWORD(v714);
  if (*(_DWORD *)(terminal_for_key + 100))
  {
    if (*(_DWORD *)(v54 + 100))
      v77 = 2;
    else
      v77 = 1;
    DWORD1(v704) = v77;
  }
  else
  {
    DWORD1(v704) = 0;
  }
  HIDWORD(v704) = v719[1];
  *(_QWORD *)&v686[88] = 0x4000000000;
  memset(&v686[8], 0, 80);
  v687 = 0u;
  v688 = 0u;
  v689 = 0u;
  v690 = 0;
  v691 = 0u;
  v692 = 0u;
  v693 = 0u;
  v686[0] = (v714 | HIDWORD(v714)) != 0;
  v686[1] = DWORD1(v714) != 0;
  v686[2] = __src[1] != (void *)v713;
  v686[3] = DWORD2(v714) == 1;
  v686[4] = *(_QWORD *)&v719[3] != *(_QWORD *)&v719[5];
  v686[5] = v716 != 0;
  v78 = *(_OWORD *)(a2 + 416);
  v79 = *(_QWORD *)(a2 + 424);
  if (v79)
  {
    v80 = (unint64_t *)(v79 + 8);
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
    v82 = (std::__shared_weak_count *)*((_QWORD *)&v691 + 1);
    v691 = v78;
    if (v82)
    {
      v83 = (unint64_t *)&v82->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
  }
  else
  {
    v691 = *(_OWORD *)(a2 + 416);
  }
  v85 = *(_OWORD *)(a2 + 432);
  v86 = *(_QWORD *)(a2 + 440);
  if (v86)
  {
    v87 = (unint64_t *)(v86 + 8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
  }
  v89 = (std::__shared_weak_count *)*((_QWORD *)&v692 + 1);
  v692 = v85;
  if (v89)
  {
    v90 = (unint64_t *)&v89->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = *(_QWORD *)(a2 + 148);
  *(std::logic_error *)&v686[8] = v701;
  *(_OWORD *)&v686[24] = v702;
  *(_QWORD *)&v686[40] = *(_QWORD *)&v703[0];
  *(_OWORD *)&v686[48] = *(_OWORD *)((char *)v703 + 8);
  *(_OWORD *)&v686[64] = *(_OWORD *)((char *)&v703[1] + 8);
  *(_QWORD *)&v686[80] = *((_QWORD *)&v703[2] + 1);
  *(_QWORD *)&v686[88] = v92;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v687, (char *)__src[1], v713, (uint64_t)(v713 - (unint64_t)__src[1]) >> 2);
  v93 = (AMCP::Log::Scope_Registry *)std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v688 + 8, *(char **)&v719[3], *(uint64_t *)&v719[5], (uint64_t)(*(_QWORD *)&v719[5] - *(_QWORD *)&v719[3]) >> 2);
  v690 = v706;
  if (v716)
    v93 = (AMCP::Log::Scope_Registry *)std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v693, v716, (uint64_t)v717);
  *(_QWORD *)&v686[88] = *(_QWORD *)v715;
  if (!v686[0])
  {
    if ((_DWORD)v704
      || (v94 = (*(double (**)(_QWORD))(*(_QWORD *)v699 + 152))(v699),
          v94 != (*(double (**)(_QWORD))(*(_QWORD *)v700 + 152))(v700)))
    {
      AMCP::Log::Scope_Registry::get(v93);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v738, "com.apple.coreaudio", "AMCP");
      v525 = *(std::__shared_weak_count **)&v738[8];
      v526 = **(NSObject ***)v738;
      if (*(_QWORD *)&v738[8])
      {
        v527 = (unint64_t *)(*(_QWORD *)&v738[8] + 8);
        do
          v528 = __ldaxr(v527);
        while (__stlxr(v528 - 1, v527));
        if (!v528)
        {
          ((void (*)(std::__shared_weak_count *))v525->__on_zero_shared)(v525);
          std::__shared_weak_count::__release_weak(v525);
        }
      }
      if (os_log_type_enabled(v526, OS_LOG_TYPE_ERROR))
      {
        v529 = pthread_self();
        v530 = pthread_mach_thread_np(v529);
        *(_DWORD *)v738 = 67109890;
        *(_DWORD *)&v738[4] = v530;
        *(_WORD *)&v738[8] = 2080;
        *(_QWORD *)&v738[10] = "Manifest.cpp";
        *(_WORD *)&v738[18] = 1024;
        *(_DWORD *)&v738[20] = 231;
        *(_WORD *)&v738[24] = 2080;
        *(_QWORD *)&v738[26] = "not (conversion_info.m_requires_resampler || (wire_info.m_drift_correction == Drift_Corre"
                               "ction_Status::NoDriftCorrection && wire_info.m_source_clock->get_sample_rate() == wire_in"
                               "fo.m_dest_clock->get_sample_rate()))";
        _os_log_error_impl(&dword_1B57BA000, v526, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Drift correction can only be disabled for timebases with the same nominal sample rate.", v738, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v677);
      v531 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Drift correction can only be disabled for timebases with the same nominal sample rate.", (uint64_t)v728);
      std::logic_error::logic_error((std::logic_error *)&v680, (const std::string *)v728);
      v680.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error((std::logic_error *)v735, (const std::logic_error *)&v680);
      memset(&v735[24], 0, 24);
      *(_DWORD *)&v735[48] = -1;
      *(_QWORD *)v735 = off_1E69A1208;
      *(_QWORD *)&v735[16] = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v738, (uint64_t)v735);
      *(_QWORD *)&v738[32] = "void AMCP::Graph::Manifest::create_connection_and_intermediate_tasks(const Graph_Wire &, No"
                             "de_Map, const Terminal &, Terminal_Identifier, std::shared_ptr<Manifest_Task>, std::vector<"
                             "std::shared_ptr<Manifest_Task>> &, std::shared_ptr<Manifest_Inventory>)";
      *(_QWORD *)&v738[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
      *(_DWORD *)&v738[48] = 231;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v684);
      *(std::logic_error *)&v723[8] = v684;
      *(_QWORD *)v723 = off_1E69A20A0;
      *(_QWORD *)&v723[24] = *(_QWORD *)v685;
      v684.__vftable = 0;
      v684.__imp_.__imp_ = 0;
      *(_QWORD *)v685 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v738, (uint64_t)v723);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v531, (uint64_t)v738);
    }
  }
  if (*(_DWORD *)&v715[8])
  {
    v95 = 4;
  }
  else if (v719[0] == 1)
  {
    v95 = 3;
  }
  else if (v718 == 1)
  {
    v95 = 2;
  }
  else if (v719[2])
  {
    v95 = 1;
  }
  else
  {
    v95 = DWORD1(v704) < 2 || v719[1] != 0;
  }
  v684 = v701;
  *(_OWORD *)v685 = v702;
  *(_QWORD *)&v685[16] = *(_QWORD *)&v703[0];
  v683 = v699;
  if (*((_QWORD *)&v699 + 1))
  {
    v97 = (unint64_t *)(*((_QWORD *)&v699 + 1) + 8);
    do
      v98 = __ldxr(v97);
    while (__stxr(v98 + 1, v97));
  }
  if ((__str[23] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&v680, *(const std::string::value_type **)__str, *(std::string::size_type *)&__str[8]);
  else
    v680 = *(std::string *)__str;
  v681 = *(_QWORD *)&__str[24];
  v682 = *(_DWORD *)&__str[32];
  if ((__str[63] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&v677, *(const std::string::value_type **)&__str[40], *(std::string::size_type *)&__str[48]);
  else
    v677 = *(std::string *)&__str[40];
  v99 = a6;
  v678 = v710;
  v679 = DWORD2(v710);
  v100 = v699;
  v101 = v700;
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v738, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    *(_OWORD *)v738 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)&v738[16] = *(_QWORD *)(a2 + 56);
  }
  *(_QWORD *)&v738[24] = *(_QWORD *)(a2 + 64);
  *(_DWORD *)&v738[32] = *(_DWORD *)(a2 + 72);
  v102 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v596, v738);
  v103 = v102;
  if ((v738[23] & 0x80000000) != 0)
    operator delete(*(void **)v738);
  if (!v686[0] && !*(_DWORD *)&v686[2])
  {
    v594 = 0;
    if (*(_DWORD *)(*((_QWORD *)v103 + 5) + 16) != 3 || v100 == v101)
      goto LABEL_282;
  }
  v105 = *(_QWORD *)(a1 + 72);
  v104 = *(std::__shared_weak_count **)(a1 + 80);
  v675 = v105;
  v676 = v104;
  if (v104)
  {
    v106 = (unint64_t *)&v104->__shared_owners_;
    do
      v107 = __ldxr(v106);
    while (__stxr(v107 + 1, v106));
  }
  v108 = (std::__shared_weak_count *)operator new(0xF0uLL);
  v108->__shared_owners_ = 0;
  v109 = (unint64_t *)&v108->__shared_owners_;
  v108->__shared_weak_owners_ = 0;
  v108->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6983A70;
  *(_QWORD *)v723 = AMCP::Graph::Converter::Converter((AMCP::Graph::Converter *)&v108[1], (const AMCP::Graph::Graph_Wire::Conversion_Info *)v686, (const AMCP::Graph::Graph_Wire::Wire_Info *)v694);
  *(_QWORD *)&v723[8] = v108;
  shared_owners = (std::__shared_weak_count *)v108[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_164;
    do
      v111 = __ldxr(v109);
    while (__stxr(v111 + 1, v109));
    p_shared_weak_owners = (unint64_t *)&v108->__shared_weak_owners_;
    do
      v113 = __ldxr(p_shared_weak_owners);
    while (__stxr(v113 + 1, p_shared_weak_owners));
    v108[1].__vftable = (std::__shared_weak_count_vtbl *)&v108[1];
    v108[1].__shared_owners_ = (uint64_t)v108;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v114 = __ldxr(v109);
    while (__stxr(v114 + 1, v109));
    v115 = (unint64_t *)&v108->__shared_weak_owners_;
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
    v108[1].__vftable = (std::__shared_weak_count_vtbl *)&v108[1];
    v108[1].__shared_owners_ = (uint64_t)v108;
  }
  do
    v117 = __ldaxr(v109);
  while (__stlxr(v117 - 1, v109));
  if (!v117)
  {
    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
    std::__shared_weak_count::__release_weak(v108);
  }
LABEL_164:
  ++*(_QWORD *)(v105 + 72);
  v118 = *(uint64_t **)v723;
  _ZNSt3__115allocate_sharedB8ne180100IN4AMCP5Graph9Node_ProcENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v728);
  v119 = (std::__shared_weak_count *)v118[1];
  if (!v119 || (v120 = *v118, (v121 = std::__shared_weak_count::lock(v119)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v122 = v121;
  v123 = (unint64_t *)&v121->__shared_owners_;
  do
    v124 = __ldxr(v123);
  while (__stxr(v124 + 1, v123));
  v125 = *(_QWORD **)v728;
  *(_QWORD *)v735 = &off_1E697EE90;
  *(_QWORD *)&v735[8] = v120;
  *(_QWORD *)&v735[16] = v121;
  *(_QWORD *)&v735[24] = v735;
  std::__function::__value_func<void ()>::swap[abi:ne180100](v735, (_QWORD *)(*(_QWORD *)v728 + 160));
  v126 = *(_QWORD **)&v735[24];
  if (*(_BYTE **)&v735[24] == v735)
  {
    v127 = 4;
    v126 = v735;
  }
  else
  {
    if (!*(_QWORD *)&v735[24])
      goto LABEL_173;
    v127 = 5;
  }
  (*(void (**)(void))(*v126 + 8 * v127))();
  do
LABEL_173:
    v128 = __ldxr(v123);
  while (__stxr(v128 + 1, v123));
  *(_QWORD *)v735 = &off_1E697EF10;
  *(_QWORD *)&v735[8] = v120;
  *(_QWORD *)&v735[16] = v122;
  *(_QWORD *)&v735[24] = v735;
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::swap[abi:ne180100](v735, v125 + 24);
  v129 = *(_QWORD **)&v735[24];
  if (*(_BYTE **)&v735[24] == v735)
  {
    v130 = 4;
    v129 = v735;
  }
  else
  {
    if (!*(_QWORD *)&v735[24])
      goto LABEL_179;
    v130 = 5;
  }
  (*(void (**)(void))(*v129 + 8 * v130))();
  do
LABEL_179:
    v131 = __ldxr(v123);
  while (__stxr(v131 + 1, v123));
  *(_QWORD *)v735 = &off_1E697EFA0;
  *(_QWORD *)&v735[8] = v120;
  *(_QWORD *)&v735[16] = v122;
  *(_QWORD *)&v735[24] = v735;
  std::__function::__value_func<void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::swap[abi:ne180100](v735, v125);
  v132 = *(_QWORD **)&v735[24];
  if (*(_BYTE **)&v735[24] == v735)
  {
    v133 = 4;
    v132 = v735;
  }
  else
  {
    if (!*(_QWORD *)&v735[24])
      goto LABEL_185;
    v133 = 5;
  }
  (*(void (**)(void))(*v132 + 8 * v133))();
  do
LABEL_185:
    v134 = __ldxr(v123);
  while (__stxr(v134 + 1, v123));
  *(_QWORD *)v735 = &off_1E697F020;
  *(_QWORD *)&v735[8] = v120;
  *(_QWORD *)&v735[16] = v122;
  *(_QWORD *)&v735[24] = v735;
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::swap[abi:ne180100](v735, v125 + 32);
  v135 = *(_QWORD **)&v735[24];
  if (*(_BYTE **)&v735[24] == v735)
  {
    v136 = 4;
    v135 = v735;
  }
  else
  {
    if (!*(_QWORD *)&v735[24])
      goto LABEL_191;
    v136 = 5;
  }
  (*(void (**)(void))(*v135 + 8 * v136))();
  do
LABEL_191:
    v137 = __ldxr(v123);
  while (__stxr(v137 + 1, v123));
  *(_QWORD *)v735 = &off_1E697F0A0;
  *(_QWORD *)&v735[8] = v120;
  *(_QWORD *)&v735[16] = v122;
  *(_QWORD *)&v735[24] = v735;
  std::__function::__value_func<void ()>::swap[abi:ne180100](v735, v125 + 36);
  v138 = *(_QWORD **)&v735[24];
  if (*(_BYTE **)&v735[24] == v735)
  {
    v139 = 4;
    v138 = v735;
  }
  else
  {
    if (!*(_QWORD *)&v735[24])
      goto LABEL_197;
    v139 = 5;
  }
  (*(void (**)(void))(*v138 + 8 * v139))();
  do
LABEL_197:
    v140 = __ldxr(v123);
  while (__stxr(v140 + 1, v123));
  *(_QWORD *)v735 = &off_1E697F120;
  *(_QWORD *)&v735[8] = v120;
  *(_QWORD *)&v735[16] = v122;
  *(_QWORD *)&v735[24] = v735;
  std::__function::__value_func<unsigned long long ()(unsigned long long)>::swap[abi:ne180100](v735, v125 + 56);
  v141 = *(_QWORD **)&v735[24];
  if (*(_BYTE **)&v735[24] == v735)
  {
    v142 = 4;
    v141 = v735;
  }
  else
  {
    if (!*(_QWORD *)&v735[24])
      goto LABEL_203;
    v142 = 5;
  }
  (*(void (**)(void))(*v141 + 8 * v142))();
  do
LABEL_203:
    v143 = __ldxr(v123);
  while (__stxr(v143 + 1, v123));
  *(_QWORD *)v735 = &off_1E697F1B0;
  *(_QWORD *)&v735[8] = v120;
  *(_QWORD *)&v735[16] = v122;
  *(_QWORD *)&v735[24] = v735;
  std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::swap[abi:ne180100](v735, v125 + 60);
  v144 = *(_QWORD **)&v735[24];
  if (*(_BYTE **)&v735[24] == v735)
  {
    v145 = 4;
    v144 = v735;
  }
  else
  {
    if (!*(_QWORD *)&v735[24])
      goto LABEL_209;
    v145 = 5;
  }
  (*(void (**)(void))(*v144 + 8 * v145))();
  do
LABEL_209:
    v146 = __ldxr(v123);
  while (__stxr(v146 + 1, v123));
  *(_QWORD *)v735 = &off_1E697F240;
  *(_QWORD *)&v735[8] = v120;
  *(_QWORD *)&v735[16] = v122;
  *(_QWORD *)&v735[24] = v735;
  std::__function::__value_func<long long ()(void)>::swap[abi:ne180100](v735, v125 + 48);
  v147 = *(_QWORD **)&v735[24];
  if (*(_BYTE **)&v735[24] == v735)
  {
    v149 = 4;
    v147 = v735;
    v148 = a7;
    goto LABEL_214;
  }
  v148 = a7;
  if (*(_QWORD *)&v735[24])
  {
    v149 = 5;
LABEL_214:
    (*(void (**)(void))(*v147 + 8 * v149))();
    goto LABEL_215;
  }
  do
LABEL_215:
    v150 = __ldaxr(v123);
  while (__stlxr(v150 - 1, v123));
  if (!v150)
  {
    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
    std::__shared_weak_count::__release_weak(v122);
  }
  if (*(char *)(*(_QWORD *)v723 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v735, *(const std::string::value_type **)(*(_QWORD *)v723 + 16), *(_QWORD *)(*(_QWORD *)v723 + 24));
  }
  else
  {
    *(_OWORD *)v735 = *(_OWORD *)(*(_QWORD *)v723 + 16);
    *(_QWORD *)&v735[16] = *(_QWORD *)(*(_QWORD *)v723 + 32);
  }
  *(_OWORD *)v738 = *(_OWORD *)v728;
  *(_OWORD *)&v738[16] = *(_OWORD *)v735;
  *(_QWORD *)&v738[32] = *(_QWORD *)&v735[16];
  v151 = *(std::__shared_weak_count **)&v723[8];
  if (*(_QWORD *)&v723[8])
  {
    v152 = (unint64_t *)(*(_QWORD *)&v723[8] + 8);
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = operator new(0x90uLL);
  v154[1] = 0;
  v154[2] = 0;
  *v154 = &off_1E6985258;
  if ((v738[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v735, *(const std::string::value_type **)&v738[16], *(std::string::size_type *)&v738[24]);
  }
  else
  {
    *(_OWORD *)v735 = *(_OWORD *)&v738[16];
    *(_QWORD *)&v735[16] = *(_QWORD *)&v738[32];
  }
  v102 = (AMCP::Log::Scope_Registry *)AMCP::Graph::Manifest_Task::Manifest_Task((uint64_t)(v154 + 3), v738, 1, 1uLL, 1uLL, (__int128 *)v735, 0.0);
  if ((v735[23] & 0x80000000) != 0)
    operator delete(*(void **)v735);
  v730.__r_.__value_.__r.__words[0] = (std::string::size_type)(v154 + 3);
  v730.__r_.__value_.__l.__size_ = (std::string::size_type)v154;
  if ((v738[39] & 0x80000000) != 0)
    operator delete(*(void **)&v738[16]);
  v155 = *(std::__shared_weak_count **)&v738[8];
  if (*(_QWORD *)&v738[8])
  {
    v156 = (unint64_t *)(*(_QWORD *)&v738[8] + 8);
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  if (v676)
  {
    v158 = &v676->__shared_owners_;
    do
      v159 = __ldaxr((unint64_t *)v158);
    while (__stlxr(v159 - 1, (unint64_t *)v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v676->__on_zero_shared)(v676);
      std::__shared_weak_count::__release_weak(v676);
    }
  }
  v160 = (unint64_t)v148[2];
  v161 = v148[1];
  if ((unint64_t)v161 >= v160)
  {
    v166 = (v161 - *v148) >> 4;
    v167 = v166 + 1;
    if ((unint64_t)(v166 + 1) >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v168 = v160 - (_QWORD)*v148;
    if (v168 >> 3 > v167)
      v167 = v168 >> 3;
    if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFF0)
      v169 = 0xFFFFFFFFFFFFFFFLL;
    else
      v169 = v167;
    *(_QWORD *)&v738[32] = v148 + 2;
    v170 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v169);
    v172 = &v170[16 * v166];
    size = v730.__r_.__value_.__l.__size_;
    *(_OWORD *)v172 = *(_OWORD *)&v730.__r_.__value_.__l.__data_;
    if (size)
    {
      v174 = (unint64_t *)(size + 8);
      do
        v175 = __ldxr(v174);
      while (__stxr(v175 + 1, v174));
    }
    v177 = *v148;
    v176 = v148[1];
    if (v176 == *v148)
    {
      v180 = vdupq_n_s64((unint64_t)v176);
      v178 = &v170[16 * v166];
    }
    else
    {
      v178 = &v170[16 * v166];
      do
      {
        v179 = *((_OWORD *)v176 - 1);
        v176 -= 16;
        *((_OWORD *)v178 - 1) = v179;
        v178 -= 16;
        *(_QWORD *)v176 = 0;
        *((_QWORD *)v176 + 1) = 0;
      }
      while (v176 != v177);
      v180 = *(int64x2_t *)v148;
    }
    v165 = v172 + 16;
    *v148 = v178;
    v148[1] = v172 + 16;
    *(int64x2_t *)&v738[8] = v180;
    v181 = v148[2];
    v148[2] = &v170[16 * v171];
    *(_QWORD *)&v738[24] = v181;
    *(_QWORD *)v738 = v180.i64[0];
    v102 = (AMCP::Log::Scope_Registry *)std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)v738);
  }
  else
  {
    *(_QWORD *)v161 = v730.__r_.__value_.__r.__words[0];
    v162 = v730.__r_.__value_.__l.__size_;
    *((_QWORD *)v161 + 1) = v730.__r_.__value_.__l.__size_;
    if (v162)
    {
      v163 = (unint64_t *)(v162 + 8);
      do
        v164 = __ldxr(v163);
      while (__stxr(v164 + 1, v163));
    }
    v165 = v161 + 16;
  }
  v148[1] = v165;
  if (DWORD1(v704))
  {
    v684 = *(std::logic_error *)((char *)v703 + 8);
    *(_OWORD *)v685 = *(_OWORD *)((char *)&v703[1] + 8);
    *(_QWORD *)&v685[16] = *((_QWORD *)&v703[2] + 1);
    v102 = (AMCP::Log::Scope_Registry *)std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v683, v700, *((uint64_t *)&v700 + 1));
    if (*(char *)(v730.__r_.__value_.__r.__words[0] + 87) < 0)
      std::string::__init_copy_ctor_external(&v673, *(const std::string::value_type **)(v730.__r_.__value_.__r.__words[0] + 64), *(_QWORD *)(v730.__r_.__value_.__r.__words[0] + 72));
    else
      v673 = *(std::string *)(v730.__r_.__value_.__r.__words[0] + 64);
    *(_QWORD *)v738 = v673.__r_.__value_.__l.__size_;
    v182 = v673.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v738[7] = *(std::string::size_type *)((char *)&v673.__r_.__value_.__r.__words[1] + 7);
    v183 = HIBYTE(v673.__r_.__value_.__r.__words[2]);
    memset(&v673, 0, sizeof(v673));
    if (SHIBYTE(v680.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v680.__r_.__value_.__l.__data_);
    v680.__r_.__value_.__r.__words[0] = v182;
    v680.__r_.__value_.__l.__size_ = *(_QWORD *)v738;
    *(std::string::size_type *)((char *)&v680.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v738[7];
    *((_BYTE *)&v680.__r_.__value_.__s + 23) = v183;
    v681 = 0;
    v682 = 0;
  }
  else
  {
    if (*(char *)(v730.__r_.__value_.__r.__words[0] + 87) < 0)
      std::string::__init_copy_ctor_external(&v674, *(const std::string::value_type **)(v730.__r_.__value_.__r.__words[0] + 64), *(_QWORD *)(v730.__r_.__value_.__r.__words[0] + 72));
    else
      v674 = *(std::string *)(v730.__r_.__value_.__r.__words[0] + 64);
    *(_QWORD *)v738 = v674.__r_.__value_.__l.__size_;
    v184 = v674.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v738[7] = *(std::string::size_type *)((char *)&v674.__r_.__value_.__r.__words[1] + 7);
    v185 = HIBYTE(v674.__r_.__value_.__r.__words[2]);
    memset(&v674, 0, sizeof(v674));
    if (SHIBYTE(v677.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v677.__r_.__value_.__l.__data_);
    v677.__r_.__value_.__r.__words[0] = v184;
    v677.__r_.__value_.__l.__size_ = *(_QWORD *)v738;
    *(std::string::size_type *)((char *)&v677.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v738[7];
    *((_BYTE *)&v677.__r_.__value_.__s + 23) = v185;
    v678 = 0;
    v679 = 1;
  }
  v186 = (std::__shared_weak_count *)v730.__r_.__value_.__l.__size_;
  if (v730.__r_.__value_.__l.__size_)
  {
    v187 = (unint64_t *)(v730.__r_.__value_.__l.__size_ + 8);
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  v594 = 1;
LABEL_282:
  v189 = *(_QWORD *)(a1 + 72);
  if (SHIBYTE(v680.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v662, v680.__r_.__value_.__l.__data_, v680.__r_.__value_.__l.__size_);
  else
    v662 = v680;
  v190 = a8;
  v663 = v681;
  v664 = v682;
  if (SHIBYTE(v677.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v659, v677.__r_.__value_.__l.__data_, v677.__r_.__value_.__l.__size_);
  else
    v659 = v677;
  v661 = v679;
  v665 = v662;
  v666 = v681;
  memset(&v662, 0, sizeof(v662));
  v667 = v682;
  v668 = *(_OWORD *)&v659.__r_.__value_.__l.__data_;
  v191 = v659.__r_.__value_.__r.__words[2];
  memset(&v659, 0, sizeof(v659));
  v660 = v678;
  v671 = v679;
  v669 = v191;
  v670 = v678;
  v658 = v683;
  if (*((_QWORD *)&v683 + 1))
  {
    v192 = (unint64_t *)(*((_QWORD *)&v683 + 1) + 8);
    do
      v193 = __ldxr(v192);
    while (__stxr(v193 + 1, v192));
  }
  if (*(_QWORD *)a8 == v189)
  {
    AMCP::Log::Scope_Registry::get(v102);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v738, "com.apple.coreaudio", "AMCP");
    v564 = **(NSObject ***)v738;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v738);
    if (os_log_type_enabled(v564, OS_LOG_TYPE_ERROR))
    {
      v565 = pthread_self();
      v566 = pthread_mach_thread_np(v565);
      *(_DWORD *)v738 = 67109890;
      *(_DWORD *)&v738[4] = v566;
      *(_WORD *)&v738[8] = 2080;
      *(_QWORD *)&v738[10] = "Manifest_Inventory.cpp";
      *(_WORD *)&v738[18] = 1024;
      *(_DWORD *)&v738[20] = 412;
      *(_WORD *)&v738[24] = 2080;
      *(_QWORD *)&v738[26] = "not (previous_inventory.get() != this)";
      _os_log_error_impl(&dword_1B57BA000, v564, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Bad arguments to Manifest_Inventory::request_buffer_for_terminal", v738, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v720);
    v567 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Bad arguments to Manifest_Inventory::request_buffer_for_terminal", (uint64_t)v728);
    std::logic_error::logic_error((std::logic_error *)&v722, (const std::string *)v728);
    v722.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)v735, (const std::logic_error *)&v722);
    memset(&v735[24], 0, 24);
    *(_DWORD *)&v735[48] = -1;
    *(_QWORD *)v735 = off_1E69A1208;
    *(_QWORD *)&v735[16] = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v738, (uint64_t)v735);
    *(_QWORD *)&v738[32] = "std::shared_ptr<Manifest_Buffer> AMCP::Graph::Manifest_Inventory::request_buffer_for_terminal"
                           "(const std::shared_ptr<Manifest_Inventory> &, Wire_Identifier, const Node_Map &, const CA::St"
                           "reamDescription &, Manifest_Buffer::Buffer_Style, Timebase_Ref, Drift_Correction_Status, Node"
                           "_Buffer_Ownership, Buffer_Alignment, int32_t)";
    *(_QWORD *)&v738[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
    *(_DWORD *)&v738[48] = 412;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v730.__r_.__value_.__l.__data_);
    *(std::string *)&v723[8] = v730;
    *(_QWORD *)v723 = off_1E69A20A0;
    memset(&v730, 0, sizeof(v730));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v738, (uint64_t)v723);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v567, (uint64_t)v738);
  }
  v194 = DWORD1(v704);
  v590 = DWORD2(v704);
  v591 = v704;
  v589 = HIDWORD(v704);
  if (SHIBYTE(v665.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v738, v665.__r_.__value_.__l.__data_, v665.__r_.__value_.__l.__size_);
  else
    *(std::string *)v738 = v665;
  *(_QWORD *)&v738[24] = v666;
  *(_DWORD *)&v738[32] = v667;
  if (SHIBYTE(v669) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v738[40], (const std::string::value_type *)v668, *((std::string::size_type *)&v668 + 1));
  }
  else
  {
    *(_OWORD *)&v738[40] = v668;
    *(_QWORD *)&v738[56] = v669;
  }
  *(_QWORD *)&v738[64] = v670;
  LODWORD(v739) = v671;
  if (*(_QWORD *)a8
    && (v195 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::find<AMCP::Wire_Identifier>((_QWORD *)(*(_QWORD *)a8 + 8), (unsigned __int8 **)v738)) != 0)
  {
    v196 = v195[12];
    v197 = v195[13];
    *(_QWORD *)&v672 = v196;
    *((_QWORD *)&v672 + 1) = v197;
    if (v197)
    {
      v198 = (unint64_t *)(v197 + 8);
      do
        v199 = __ldxr(v198);
      while (__stxr(v199 + 1, v198));
      *(_QWORD *)&v735[8] = v197;
      do
        v200 = __ldxr(v198);
      while (__stxr(v200 + 1, v198));
    }
    else
    {
      *(_QWORD *)&v735[8] = 0;
    }
    *(_QWORD *)v735 = v196;
    AMCP::Graph::Manifest_Inventory::add_buffer(v189, (uint64_t *)v735);
    v201 = *(std::__shared_weak_count **)&v735[8];
    if (*(_QWORD *)&v735[8])
    {
      v202 = (unint64_t *)(*(_QWORD *)&v735[8] + 8);
      do
        v203 = __ldaxr(v202);
      while (__stlxr(v203 - 1, v202));
      if (!v203)
      {
        ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
        std::__shared_weak_count::__release_weak(v201);
      }
    }
  }
  else
  {
    v672 = 0uLL;
  }
  if ((v738[63] & 0x80000000) != 0)
    operator delete(*(void **)&v738[40]);
  if ((v738[23] & 0x80000000) != 0)
    operator delete(*(void **)v738);
  if (v194 && (_QWORD)v672)
    goto LABEL_420;
  v732 = 0uLL;
  v588 = v95;
  if (!v194)
  {
    v215 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v596, (unsigned __int8 *)&v665);
    if (!v215)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v735, "com.apple.coreaudio", "AMCP");
      v568 = **(NSObject ***)v735;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v735);
      if (os_log_type_enabled(v568, OS_LOG_TYPE_ERROR))
      {
        v569 = pthread_self();
        v570 = pthread_mach_thread_np(v569);
        v571 = &v665;
        if ((v665.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v571 = (std::string *)v665.__r_.__value_.__r.__words[0];
        *(_DWORD *)v735 = 67110146;
        *(_DWORD *)&v735[4] = v570;
        *(_WORD *)&v735[8] = 2080;
        *(_QWORD *)&v735[10] = "Manifest_Inventory.cpp";
        *(_WORD *)&v735[18] = 1024;
        *(_DWORD *)&v735[20] = 424;
        *(_WORD *)&v735[24] = 2080;
        *(_QWORD *)&v735[26] = "not (found_node != nodes.end())";
        *(_WORD *)&v735[34] = 2080;
        *(_QWORD *)&v735[36] = v571;
        _os_log_error_impl(&dword_1B57BA000, v568, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Missing node for connection in when building manifest: %s", v735, 0x2Cu);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v731);
      v572 = __cxa_allocate_exception(0x40uLL);
      v573 = &v665;
      if ((v665.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v573 = (std::string *)v665.__r_.__value_.__r.__words[0];
      caulk::make_string((caulk *)"Missing node for connection in when building manifest: %s", (uint64_t)&v730, v573);
      std::logic_error::logic_error(&v720, &v730);
      v720.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)v723, &v720);
      v724 = 0;
      *(_QWORD *)&v723[24] = 0;
      v725 = 0;
      v726 = -1;
      *(_QWORD *)v723 = off_1E69A1208;
      *(_QWORD *)&v723[16] = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v735, (uint64_t)v723);
      *(_QWORD *)&v735[32] = "std::shared_ptr<Manifest_Buffer> AMCP::Graph::Manifest_Inventory::request_buffer_for_termin"
                             "al(const std::shared_ptr<Manifest_Inventory> &, Wire_Identifier, const Node_Map &, const CA"
                             "::StreamDescription &, Manifest_Buffer::Buffer_Style, Timebase_Ref, Drift_Correction_Status"
                             ", Node_Buffer_Ownership, Buffer_Alignment, int32_t)";
      *(_QWORD *)&v735[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
      *(_DWORD *)&v735[48] = 424;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v722.__r_.__value_.__l.__data_);
      *(std::string *)&v728[8] = v722;
      *(_QWORD *)v728 = off_1E69A20A0;
      memset(&v722, 0, sizeof(v722));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v735, (uint64_t)v728);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v572, (uint64_t)v735);
    }
    nth_wire_ref = AMCP::Graph::Node::get_nth_wire_ref((AMCP::Log::Scope_Registry *)v735, *((_QWORD *)v215 + 5), v666, 0);
    v206 = *(_QWORD *)&v735[8];
    v207 = *(_QWORD **)v735;
    v732 = *(_OWORD *)v735;
    if (!*(_QWORD *)v735)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)nth_wire_ref);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v735, "com.apple.coreaudio", "AMCP");
      v574 = **(NSObject ***)v735;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v735);
      if (os_log_type_enabled(v574, OS_LOG_TYPE_ERROR))
      {
        v575 = pthread_self();
        v576 = pthread_mach_thread_np(v575);
        *(_DWORD *)v735 = 67109890;
        *(_DWORD *)&v735[4] = v576;
        *(_WORD *)&v735[8] = 2080;
        *(_QWORD *)&v735[10] = "Manifest_Inventory.cpp";
        *(_WORD *)&v735[18] = 1024;
        *(_DWORD *)&v735[20] = 427;
        *(_WORD *)&v735[24] = 2080;
        *(_QWORD *)&v735[26] = "not ((wire_buffer) != nullptr)";
        _os_log_error_impl(&dword_1B57BA000, v574, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", v735, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v731);
      v577 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v730);
      std::logic_error::logic_error(&v720, &v730);
      v720.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)v723, &v720);
      v724 = 0;
      *(_QWORD *)&v723[24] = 0;
      v725 = 0;
      v726 = -1;
      *(_QWORD *)v723 = off_1E69A1208;
      *(_QWORD *)&v723[16] = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v735, (uint64_t)v723);
      *(_QWORD *)&v735[32] = "std::shared_ptr<Manifest_Buffer> AMCP::Graph::Manifest_Inventory::request_buffer_for_termin"
                             "al(const std::shared_ptr<Manifest_Inventory> &, Wire_Identifier, const Node_Map &, const CA"
                             "::StreamDescription &, Manifest_Buffer::Buffer_Style, Timebase_Ref, Drift_Correction_Status"
                             ", Node_Buffer_Ownership, Buffer_Alignment, int32_t)";
      *(_QWORD *)&v735[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
      *(_DWORD *)&v735[48] = 427;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v722.__r_.__value_.__l.__data_);
      *(std::string *)&v728[8] = v722;
      *(_QWORD *)v728 = off_1E69A20A0;
      memset(&v722, 0, sizeof(v722));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v735, (uint64_t)v728);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v577, (uint64_t)v735);
    }
    v217 = (AMCP::Log::Scope_Registry *)(*(_QWORD *(**)(_BYTE *__return_ptr, _QWORD))(**(_QWORD **)v735 + 80))(v735, *(_QWORD *)v735);
    if (*(double *)&v684.__vftable != *(double *)v735
      || LODWORD(v684.__imp_.__imp_) != *(_DWORD *)&v735[8]
      || *(_QWORD *)v685 != *(_QWORD *)&v735[16]
      || *(_QWORD *)&v685[12] != *(_QWORD *)&v735[28]
      || (v217 = (AMCP::Log::Scope_Registry *)CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v684, (const AudioStreamBasicDescription *)v735, 0, 0), (v217 & 1) == 0))
    {
      AMCP::Log::Scope_Registry::get(v217);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v735, "com.apple.coreaudio", "AMCP");
      v218 = **(NSObject ***)v735;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v735);
      if (os_log_type_enabled(v218, OS_LOG_TYPE_ERROR))
      {
        v219 = pthread_self();
        v220 = pthread_mach_thread_np(v219);
        AMCP::Terminal_Identifier_to_string((std::string *)v723, (const void **)&v665.__r_.__value_.__l.__data_);
        v221 = v723[23] >= 0 ? v723 : *(_BYTE **)v723;
        *(_DWORD *)v735 = 67110146;
        *(_DWORD *)&v735[4] = v220;
        *(_WORD *)&v735[8] = 2080;
        *(_QWORD *)&v735[10] = "Manifest_Inventory.cpp";
        *(_WORD *)&v735[18] = 1024;
        *(_DWORD *)&v735[20] = 430;
        *(_WORD *)&v735[24] = 2080;
        *(_QWORD *)&v735[26] = "not (CA::StreamDescription::IsEquivalent(buffer_format, wire_buffer->get_format()))";
        *(_WORD *)&v735[34] = 2080;
        *(_QWORD *)&v735[36] = v221;
        _os_log_error_impl(&dword_1B57BA000, v218, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Container format doesnt match terminal format when building manifest: %s", v735, 0x2Cu);
        if ((v723[23] & 0x80000000) != 0)
          operator delete(*(void **)v723);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v727);
      v222 = __cxa_allocate_exception(0x40uLL);
      AMCP::Terminal_Identifier_to_string(&v722, (const void **)&v665.__r_.__value_.__l.__data_);
      if ((v722.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v223 = &v722;
      else
        v223 = (std::string *)v722.__r_.__value_.__r.__words[0];
      caulk::make_string((caulk *)"Container format doesnt match terminal format when building manifest: %s", (uint64_t)&v730, v223);
      std::logic_error::logic_error(&v731, &v730);
      v731.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)v723, &v731);
      v724 = 0;
      *(_QWORD *)&v723[24] = 0;
      v725 = 0;
      v726 = -1;
      *(_QWORD *)v723 = off_1E69A1208;
      *(_QWORD *)&v723[16] = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v735, (uint64_t)v723);
      *(_QWORD *)&v735[32] = "std::shared_ptr<Manifest_Buffer> AMCP::Graph::Manifest_Inventory::request_buffer_for_termin"
                             "al(const std::shared_ptr<Manifest_Inventory> &, Wire_Identifier, const Node_Map &, const CA"
                             "::StreamDescription &, Manifest_Buffer::Buffer_Style, Timebase_Ref, Drift_Correction_Status"
                             ", Node_Buffer_Ownership, Buffer_Alignment, int32_t)";
      *(_QWORD *)&v735[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
      *(_DWORD *)&v735[48] = 430;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v720);
      *(std::logic_error *)&v728[8] = v720;
      *(_QWORD *)v728 = off_1E69A20A0;
      *(_QWORD *)&v728[24] = v721;
      v720.__vftable = 0;
      v720.__imp_.__imp_ = 0;
      v721 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v735, (uint64_t)v728);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v222, (uint64_t)v735);
    }
    goto LABEL_371;
  }
  if (v194 == 1)
  {
    v204 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v596, (unsigned __int8 *)&v668);
    if (!v204)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v735, "com.apple.coreaudio", "AMCP");
      v578 = **(NSObject ***)v735;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v735);
      if (os_log_type_enabled(v578, OS_LOG_TYPE_ERROR))
      {
        v579 = pthread_self();
        v580 = pthread_mach_thread_np(v579);
        if (v669 >= 0)
          v581 = &v668;
        else
          v581 = (__int128 *)v668;
        *(_DWORD *)v735 = 67110146;
        *(_DWORD *)&v735[4] = v580;
        *(_WORD *)&v735[8] = 2080;
        *(_QWORD *)&v735[10] = "Manifest_Inventory.cpp";
        *(_WORD *)&v735[18] = 1024;
        *(_DWORD *)&v735[20] = 435;
        *(_WORD *)&v735[24] = 2080;
        *(_QWORD *)&v735[26] = "not (found_node != nodes.end())";
        *(_WORD *)&v735[34] = 2080;
        *(_QWORD *)&v735[36] = v581;
        _os_log_error_impl(&dword_1B57BA000, v578, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Missing node for connection in when building manifest: %s", v735, 0x2Cu);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v731);
      v582 = __cxa_allocate_exception(0x40uLL);
      v583 = &v668;
      if (v669 < 0)
        v583 = (__int128 *)v668;
      caulk::make_string((caulk *)"Missing node for connection in when building manifest: %s", (uint64_t)&v730, v583);
      std::logic_error::logic_error(&v720, &v730);
      v720.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)v723, &v720);
      v724 = 0;
      *(_QWORD *)&v723[24] = 0;
      v725 = 0;
      v726 = -1;
      *(_QWORD *)v723 = off_1E69A1208;
      *(_QWORD *)&v723[16] = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v735, (uint64_t)v723);
      *(_QWORD *)&v735[32] = "std::shared_ptr<Manifest_Buffer> AMCP::Graph::Manifest_Inventory::request_buffer_for_termin"
                             "al(const std::shared_ptr<Manifest_Inventory> &, Wire_Identifier, const Node_Map &, const CA"
                             "::StreamDescription &, Manifest_Buffer::Buffer_Style, Timebase_Ref, Drift_Correction_Status"
                             ", Node_Buffer_Ownership, Buffer_Alignment, int32_t)";
      *(_QWORD *)&v735[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
      *(_DWORD *)&v735[48] = 435;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v722.__r_.__value_.__l.__data_);
      *(std::string *)&v728[8] = v722;
      *(_QWORD *)v728 = off_1E69A20A0;
      memset(&v722, 0, sizeof(v722));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v735, (uint64_t)v728);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v582, (uint64_t)v735);
    }
    v205 = AMCP::Graph::Node::get_nth_wire_ref((AMCP::Log::Scope_Registry *)v735, *((_QWORD *)v204 + 5), v670, 1u);
    v206 = *(_QWORD *)&v735[8];
    v207 = *(_QWORD **)v735;
    v732 = *(_OWORD *)v735;
    if (!*(_QWORD *)v735)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v205);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v735, "com.apple.coreaudio", "AMCP");
      v584 = **(NSObject ***)v735;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v735);
      if (os_log_type_enabled(v584, OS_LOG_TYPE_ERROR))
      {
        v585 = pthread_self();
        v586 = pthread_mach_thread_np(v585);
        *(_DWORD *)v735 = 67109890;
        *(_DWORD *)&v735[4] = v586;
        *(_WORD *)&v735[8] = 2080;
        *(_QWORD *)&v735[10] = "Manifest_Inventory.cpp";
        *(_WORD *)&v735[18] = 1024;
        *(_DWORD *)&v735[20] = 438;
        *(_WORD *)&v735[24] = 2080;
        *(_QWORD *)&v735[26] = "not ((wire_buffer) != nullptr)";
        _os_log_error_impl(&dword_1B57BA000, v584, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", v735, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v731);
      v587 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v730);
      std::logic_error::logic_error(&v720, &v730);
      v720.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)v723, &v720);
      v724 = 0;
      *(_QWORD *)&v723[24] = 0;
      v725 = 0;
      v726 = -1;
      *(_QWORD *)v723 = off_1E69A1208;
      *(_QWORD *)&v723[16] = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v735, (uint64_t)v723);
      *(_QWORD *)&v735[32] = "std::shared_ptr<Manifest_Buffer> AMCP::Graph::Manifest_Inventory::request_buffer_for_termin"
                             "al(const std::shared_ptr<Manifest_Inventory> &, Wire_Identifier, const Node_Map &, const CA"
                             "::StreamDescription &, Manifest_Buffer::Buffer_Style, Timebase_Ref, Drift_Correction_Status"
                             ", Node_Buffer_Ownership, Buffer_Alignment, int32_t)";
      *(_QWORD *)&v735[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
      *(_DWORD *)&v735[48] = 438;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v722.__r_.__value_.__l.__data_);
      *(std::string *)&v728[8] = v722;
      *(_QWORD *)v728 = off_1E69A20A0;
      memset(&v722, 0, sizeof(v722));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v735, (uint64_t)v728);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v587, (uint64_t)v735);
    }
    v208 = (AMCP::Log::Scope_Registry *)(*(_QWORD *(**)(_BYTE *__return_ptr, _QWORD))(**(_QWORD **)v735 + 80))(v735, *(_QWORD *)v735);
    if (*(double *)&v684.__vftable != *(double *)v735
      || LODWORD(v684.__imp_.__imp_) != *(_DWORD *)&v735[8]
      || *(_QWORD *)v685 != *(_QWORD *)&v735[16]
      || *(_QWORD *)&v685[12] != *(_QWORD *)&v735[28]
      || (v208 = (AMCP::Log::Scope_Registry *)CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v684, (const AudioStreamBasicDescription *)v735, 0, 0), (v208 & 1) == 0))
    {
      AMCP::Log::Scope_Registry::get(v208);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v735, "com.apple.coreaudio", "AMCP");
      v209 = **(NSObject ***)v735;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v735);
      if (os_log_type_enabled(v209, OS_LOG_TYPE_ERROR))
      {
        v210 = pthread_self();
        v211 = pthread_mach_thread_np(v210);
        AMCP::Terminal_Identifier_to_string((std::string *)v723, (const void **)&v668);
        v212 = v723[23] >= 0 ? v723 : *(_BYTE **)v723;
        *(_DWORD *)v735 = 67110146;
        *(_DWORD *)&v735[4] = v211;
        *(_WORD *)&v735[8] = 2080;
        *(_QWORD *)&v735[10] = "Manifest_Inventory.cpp";
        *(_WORD *)&v735[18] = 1024;
        *(_DWORD *)&v735[20] = 441;
        *(_WORD *)&v735[24] = 2080;
        *(_QWORD *)&v735[26] = "not (CA::StreamDescription::IsEquivalent(buffer_format, wire_buffer->get_format()))";
        *(_WORD *)&v735[34] = 2080;
        *(_QWORD *)&v735[36] = v212;
        _os_log_error_impl(&dword_1B57BA000, v209, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Container format doesnt match terminal format when building manifest: %s", v735, 0x2Cu);
        if ((v723[23] & 0x80000000) != 0)
          operator delete(*(void **)v723);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v727);
      v213 = __cxa_allocate_exception(0x40uLL);
      AMCP::Terminal_Identifier_to_string(&v722, (const void **)&v668);
      if ((v722.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v214 = &v722;
      else
        v214 = (std::string *)v722.__r_.__value_.__r.__words[0];
      caulk::make_string((caulk *)"Container format doesnt match terminal format when building manifest: %s", (uint64_t)&v730, v214);
      std::logic_error::logic_error(&v731, &v730);
      v731.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)v723, &v731);
      v724 = 0;
      *(_QWORD *)&v723[24] = 0;
      v725 = 0;
      v726 = -1;
      *(_QWORD *)v723 = off_1E69A1208;
      *(_QWORD *)&v723[16] = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v735, (uint64_t)v723);
      *(_QWORD *)&v735[32] = "std::shared_ptr<Manifest_Buffer> AMCP::Graph::Manifest_Inventory::request_buffer_for_termin"
                             "al(const std::shared_ptr<Manifest_Inventory> &, Wire_Identifier, const Node_Map &, const CA"
                             "::StreamDescription &, Manifest_Buffer::Buffer_Style, Timebase_Ref, Drift_Correction_Status"
                             ", Node_Buffer_Ownership, Buffer_Alignment, int32_t)";
      *(_QWORD *)&v735[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
      *(_DWORD *)&v735[48] = 441;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v720);
      *(std::logic_error *)&v728[8] = v720;
      *(_QWORD *)v728 = off_1E69A20A0;
      *(_QWORD *)&v728[24] = v721;
      v720.__vftable = 0;
      v720.__imp_.__imp_ = 0;
      v721 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v735, (uint64_t)v728);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v213, (uint64_t)v735);
    }
    goto LABEL_371;
  }
  v207 = (_QWORD *)(v189 + 24);
  do
  {
    while (1)
    {
      v207 = (_QWORD *)*v207;
      if (!v207)
      {
        v206 = 0;
        goto LABEL_369;
      }
      v224 = v207[12];
      if (*(char *)(v224 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v735, *(const std::string::value_type **)(v224 + 8), *(_QWORD *)(v224 + 16));
      }
      else
      {
        v225 = *(_OWORD *)(v224 + 8);
        *(_QWORD *)&v735[16] = *(_QWORD *)(v224 + 24);
        *(_OWORD *)v735 = v225;
      }
      *(_QWORD *)&v735[24] = *(_QWORD *)(v224 + 32);
      *(_DWORD *)&v735[32] = *(_DWORD *)(v224 + 40);
      *(_QWORD *)v723 = v735;
      *(_QWORD *)&v723[8] = &v735[24];
      *(_QWORD *)&v723[16] = &v735[32];
      *(_QWORD *)v728 = &v665;
      *(_QWORD *)&v728[8] = &v666;
      *(_QWORD *)&v728[16] = &v667;
      v226 = std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)v723, (unsigned __int8 ***)v728);
      v227 = v226;
      if ((v735[23] & 0x80000000) != 0)
        break;
      if (v226)
        goto LABEL_364;
    }
    operator delete(*(void **)v735);
  }
  while (!v227);
LABEL_364:
  v228 = v207[12];
  v207 = *(_QWORD **)(v228 + 304);
  v206 = *(_QWORD *)(v228 + 312);
  if (!v206)
  {
LABEL_369:
    v190 = a8;
    v99 = a6;
    goto LABEL_370;
  }
  v229 = (unint64_t *)(v206 + 8);
  v190 = a8;
  v99 = a6;
  do
    v230 = __ldxr(v229);
  while (__stxr(v230 + 1, v229));
LABEL_370:
  *(_QWORD *)&v732 = v207;
  *((_QWORD *)&v732 + 1) = v206;
LABEL_371:
  v730.__r_.__value_.__r.__words[0] = (std::string::size_type)v207;
  v730.__r_.__value_.__l.__size_ = v206;
  if (v206)
  {
    v231 = (unint64_t *)(v206 + 8);
    do
      v232 = __ldxr(v231);
    while (__stxr(v232 + 1, v231));
  }
  if (SHIBYTE(v665.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v735, v665.__r_.__value_.__l.__data_, v665.__r_.__value_.__l.__size_);
  else
    *(std::string *)v735 = v665;
  *(_QWORD *)&v735[24] = v666;
  *(_DWORD *)&v735[32] = v667;
  if (SHIBYTE(v669) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v735[40], (const std::string::value_type *)v668, *((std::string::size_type *)&v668 + 1));
  }
  else
  {
    *(_OWORD *)&v735[40] = v668;
    *(_QWORD *)&v735[56] = v669;
  }
  v736 = v670;
  v737 = v671;
  *(std::logic_error *)v723 = v684;
  *(_OWORD *)&v723[16] = *(_OWORD *)v685;
  v724 = *(_QWORD *)&v685[16];
  *(_OWORD *)&v722.__r_.__value_.__l.__data_ = v658;
  if (*((_QWORD *)&v658 + 1))
  {
    v233 = (unint64_t *)(*((_QWORD *)&v658 + 1) + 8);
    do
      v234 = __ldxr(v233);
    while (__stxr(v234 + 1, v233));
  }
  AMCP::Graph::Manifest_Inventory::request_shared_buffer_for_connection(v728, v189, &v730, (uint64_t)v735, (uint64_t)v723, v588, (std::__shared_count_vtbl **)&v722, v590, v591, v194, v589);
  v235 = *(_OWORD *)v728;
  *(_OWORD *)v728 = 0uLL;
  v236 = (std::__shared_weak_count *)*((_QWORD *)&v672 + 1);
  v672 = v235;
  if (v236)
  {
    v237 = (unint64_t *)&v236->__shared_owners_;
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
  v239 = *(std::__shared_weak_count **)&v728[8];
  if (*(_QWORD *)&v728[8])
  {
    v240 = (unint64_t *)(*(_QWORD *)&v728[8] + 8);
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  v242 = (std::__shared_weak_count *)v722.__r_.__value_.__l.__size_;
  if (v722.__r_.__value_.__l.__size_)
  {
    v243 = (unint64_t *)(v722.__r_.__value_.__l.__size_ + 8);
    do
      v244 = __ldaxr(v243);
    while (__stlxr(v244 - 1, v243));
    if (!v244)
    {
      ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
      std::__shared_weak_count::__release_weak(v242);
    }
  }
  if ((v735[63] & 0x80000000) != 0)
    operator delete(*(void **)&v735[40]);
  if ((v735[23] & 0x80000000) != 0)
    operator delete(*(void **)v735);
  v245 = (std::__shared_weak_count *)v730.__r_.__value_.__l.__size_;
  if (v730.__r_.__value_.__l.__size_)
  {
    v246 = (unint64_t *)(v730.__r_.__value_.__l.__size_ + 8);
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  *(_OWORD *)v735 = v672;
  if (*((_QWORD *)&v672 + 1))
  {
    v248 = (unint64_t *)(*((_QWORD *)&v672 + 1) + 8);
    do
      v249 = __ldxr(v248);
    while (__stxr(v249 + 1, v248));
  }
  AMCP::Graph::Manifest_Inventory::add_buffer(v189, (uint64_t *)v735);
  v250 = *(std::__shared_weak_count **)&v735[8];
  if (*(_QWORD *)&v735[8])
  {
    v251 = (unint64_t *)(*(_QWORD *)&v735[8] + 8);
    do
      v252 = __ldaxr(v251);
    while (__stlxr(v252 - 1, v251));
    if (!v252)
    {
      ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
      std::__shared_weak_count::__release_weak(v250);
    }
  }
  v253 = (std::__shared_weak_count *)*((_QWORD *)&v732 + 1);
  if (*((_QWORD *)&v732 + 1))
  {
    v254 = (unint64_t *)(*((_QWORD *)&v732 + 1) + 8);
    do
      v255 = __ldaxr(v254);
    while (__stlxr(v255 - 1, v254));
    if (!v255)
    {
      ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
      std::__shared_weak_count::__release_weak(v253);
    }
  }
LABEL_420:
  if (*((_QWORD *)&v658 + 1))
  {
    v256 = (unint64_t *)(*((_QWORD *)&v658 + 1) + 8);
    do
      v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v658 + 1) + 16))(*((_QWORD *)&v658 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v658 + 1));
    }
  }
  if (SHIBYTE(v669) < 0)
    operator delete((void *)v668);
  if (SHIBYTE(v665.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v665.__r_.__value_.__l.__data_);
  if (SHIBYTE(v659.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v659.__r_.__value_.__l.__data_);
  if (SHIBYTE(v662.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v662.__r_.__value_.__l.__data_);
  v258 = v672;
  v657 = v672;
  if (*((_QWORD *)&v672 + 1))
  {
    v259 = (unint64_t *)(*((_QWORD *)&v672 + 1) + 8);
    do
      v260 = __ldxr(v259);
    while (__stxr(v260 + 1, v259));
  }
  if (v594)
  {
    v261 = a7[1];
    v655 = (char *)*((_QWORD *)v261 - 2);
    v262 = (std::__shared_weak_count *)*((_QWORD *)v261 - 1);
    v656 = v262;
    if (v262)
    {
      v263 = (unint64_t *)&v262->__shared_owners_;
      do
        v264 = __ldxr(v263);
      while (__stxr(v264 + 1, v263));
    }
    if ((v694[23] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v640, *(const std::string::value_type **)v694, *(std::string::size_type *)&v694[8]);
    else
      v640 = *(std::string *)v694;
    v641 = *(_QWORD *)&v694[24];
    v642 = v695;
    if (SBYTE7(v697) < 0)
    {
      std::string::__init_copy_ctor_external(&v643, (const std::string::value_type *)v696, *((std::string::size_type *)&v696 + 1));
    }
    else
    {
      *(_OWORD *)&v643.__r_.__value_.__l.__data_ = v696;
      v643.__r_.__value_.__r.__words[2] = v697;
    }
    v644 = *((_QWORD *)&v697 + 1);
    v645 = v698;
    v646 = v699;
    if (*((_QWORD *)&v699 + 1))
    {
      v272 = (unint64_t *)(*((_QWORD *)&v699 + 1) + 8);
      do
        v273 = __ldxr(v272);
      while (__stxr(v273 + 1, v272));
    }
    v647 = v700;
    if (*((_QWORD *)&v700 + 1))
    {
      v274 = (unint64_t *)(*((_QWORD *)&v700 + 1) + 8);
      do
        v275 = __ldxr(v274);
      while (__stxr(v275 + 1, v274));
    }
    v650 = v703[0];
    v651 = v703[1];
    v652 = v703[2];
    v653 = v704;
    v648 = v701;
    v649 = v702;
    v276 = *(const char **)(v190 + 8);
    v639.__vftable = *(std::logic_error_vtbl **)v190;
    v639.__imp_.__imp_ = v276;
    if (v276)
    {
      v277 = (unint64_t *)(v276 + 8);
      do
        v278 = __ldxr(v277);
      while (__stxr(v278 + 1, v277));
    }
    v637 = v655;
    v638 = v656;
    if (v656)
    {
      v279 = (unint64_t *)&v656->__shared_owners_;
      do
        v280 = __ldxr(v279);
      while (__stxr(v280 + 1, v279));
    }
    *(_OWORD *)&v623[32] = *(_OWORD *)&v686[32];
    v624 = *(_OWORD *)&v686[48];
    v625 = *(_OWORD *)&v686[64];
    v626 = *(_OWORD *)&v686[80];
    *(_OWORD *)v623 = *(_OWORD *)v686;
    *(_OWORD *)&v623[16] = *(_OWORD *)&v686[16];
    v629 = 0;
    v627 = 0;
    v628 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v627, (const void *)v687, *((uint64_t *)&v687 + 1), (uint64_t)(*((_QWORD *)&v687 + 1) - v687) >> 2);
    v631 = 0;
    v630 = 0;
    v632 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v630, *((const void **)&v688 + 1), v689, (uint64_t)(v689 - *((_QWORD *)&v688 + 1)) >> 2);
    v633 = v690;
    v634 = v691;
    if (*((_QWORD *)&v691 + 1))
    {
      v281 = (unint64_t *)(*((_QWORD *)&v691 + 1) + 8);
      do
        v282 = __ldxr(v281);
      while (__stxr(v282 + 1, v281));
    }
    v635 = v692;
    if (*((_QWORD *)&v692 + 1))
    {
      v283 = (unint64_t *)(*((_QWORD *)&v692 + 1) + 8);
      do
        v284 = __ldxr(v283);
      while (__stxr(v284 + 1, v283));
    }
    v636 = v693;
    if (*((_QWORD *)&v693 + 1))
    {
      v285 = (unint64_t *)(*((_QWORD *)&v693 + 1) + 8);
      do
        v286 = __ldxr(v285);
      while (__stxr(v286 + 1, v285));
    }
    v287 = *(std::__shared_weak_count **)(v99 + 8);
    v621 = *(char **)v99;
    v622 = v287;
    if (v287)
    {
      v288 = (unint64_t *)&v287->__shared_owners_;
      do
        v289 = __ldxr(v288);
      while (__stxr(v289 + 1, v288));
    }
    v654 = 0uLL;
    *(_OWORD *)&v722.__r_.__value_.__l.__data_ = 0uLL;
    v720.__imp_.__imp_ = 0;
    v720.__vftable = 0;
    if (DWORD1(v653))
    {
      std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v722, v647, *((uint64_t *)&v647 + 1));
      std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v720, v646, *((uint64_t *)&v646 + 1));
      if (SHIBYTE(v640.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)v738, v640.__r_.__value_.__l.__data_, v640.__r_.__value_.__l.__size_);
      else
        *(std::string *)v738 = v640;
      *(_QWORD *)&v738[24] = v641;
      *(_DWORD *)&v738[32] = v642;
      if (SHIBYTE(v643.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)&v738[40], v643.__r_.__value_.__l.__data_, v643.__r_.__value_.__l.__size_);
      else
        *(std::string *)&v738[40] = v643;
      *(_QWORD *)&v738[64] = v644;
      LODWORD(v739) = v645;
      v740 = v646;
      if (*((_QWORD *)&v646 + 1))
      {
        v290 = (unint64_t *)(*((_QWORD *)&v646 + 1) + 8);
        do
          v291 = __ldxr(v290);
        while (__stxr(v291 + 1, v290));
      }
      v741 = v647;
      if (*((_QWORD *)&v647 + 1))
      {
        v292 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
        do
          v293 = __ldxr(v292);
        while (__stxr(v293 + 1, v292));
      }
      v744 = v650;
      v745 = v651;
      v746 = v652;
      v747 = v653;
      v742 = v648;
      v743 = v649;
      v731 = v639;
      if (v639.__imp_.__imp_)
      {
        v294 = (unint64_t *)(v639.__imp_.__imp_ + 8);
        do
          v295 = __ldxr(v294);
        while (__stxr(v295 + 1, v294));
      }
      if (SHIBYTE(v640.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)v723, v640.__r_.__value_.__l.__data_, v640.__r_.__value_.__l.__size_);
      else
        *(std::string *)v723 = v640;
      *(_QWORD *)&v723[24] = v641;
      LODWORD(v724) = v642;
      if (v637[87] < 0)
        std::string::__init_copy_ctor_external(&v730, *((const std::string::value_type **)v637 + 8), *((_QWORD *)v637 + 9));
      else
        v730 = *(std::string *)(v637 + 64);
      v734[0] = v730.__r_.__value_.__l.__size_;
      v296 = v730.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)v734 + 7) = *(std::string::size_type *)((char *)&v730.__r_.__value_.__r.__words[1] + 7);
      v297 = HIBYTE(v730.__r_.__value_.__r.__words[2]);
      memset(&v730, 0, sizeof(v730));
      *(_OWORD *)v735 = *(_OWORD *)v723;
      *(_DWORD *)&v735[32] = v724;
      v298 = *(_QWORD *)&v723[16];
      memset(v723, 0, 24);
      *(_QWORD *)&v735[16] = v298;
      *(_QWORD *)&v735[24] = *(_QWORD *)&v723[24];
      *(_QWORD *)&v735[55] = *(_QWORD *)((char *)v734 + 7);
      *(_QWORD *)&v735[40] = v296;
      *(_QWORD *)&v735[48] = v734[0];
      v735[63] = v297;
      v734[0] = 0;
      *(_QWORD *)((char *)v734 + 7) = 0;
      v736 = 0;
      v737 = 1;
      v729 = *(_QWORD *)&v623[40];
      *(_OWORD *)&v728[16] = *(_OWORD *)&v623[24];
      *(_OWORD *)v728 = *(_OWORD *)&v623[8];
      v727 = v720;
      if (v720.__imp_.__imp_)
      {
        v299 = (unint64_t *)(v720.__imp_.__imp_ + 8);
        do
          v300 = __ldxr(v299);
        while (__stxr(v300 + 1, v299));
      }
      AMCP::Graph::Manifest::get_converter_buffer((uint64_t *)&v732, a1, (int *)v738, (uint64_t *)&v731, (uint64_t)v735, (uint64_t)v728, (uint64_t)&v727);
      v301 = v732;
      v732 = 0uLL;
      v302 = (std::__shared_weak_count *)*((_QWORD *)&v654 + 1);
      v654 = v301;
      if (v302)
      {
        v303 = (unint64_t *)&v302->__shared_owners_;
        do
          v304 = __ldaxr(v303);
        while (__stlxr(v304 - 1, v303));
        if (!v304)
        {
          ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
          std::__shared_weak_count::__release_weak(v302);
        }
      }
      v305 = (std::__shared_weak_count *)*((_QWORD *)&v732 + 1);
      if (*((_QWORD *)&v732 + 1))
      {
        v306 = (unint64_t *)(*((_QWORD *)&v732 + 1) + 8);
        do
          v307 = __ldaxr(v306);
        while (__stlxr(v307 - 1, v306));
        if (!v307)
        {
          ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
          std::__shared_weak_count::__release_weak(v305);
        }
      }
      imp = (std::__shared_weak_count *)v727.__imp_.__imp_;
      if (v727.__imp_.__imp_)
      {
        v309 = (unint64_t *)(v727.__imp_.__imp_ + 8);
        do
          v310 = __ldaxr(v309);
        while (__stlxr(v310 - 1, v309));
        if (!v310)
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
      if ((v735[63] & 0x80000000) != 0)
        operator delete(*(void **)&v735[40]);
      if ((v735[23] & 0x80000000) != 0)
        operator delete(*(void **)v735);
      if (SHIBYTE(v730.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v730.__r_.__value_.__l.__data_);
      if ((v723[23] & 0x80000000) != 0)
        operator delete(*(void **)v723);
      v311 = (std::__shared_weak_count *)v731.__imp_.__imp_;
      if (v731.__imp_.__imp_)
      {
        v312 = (unint64_t *)(v731.__imp_.__imp_ + 8);
        do
          v313 = __ldaxr(v312);
        while (__stlxr(v313 - 1, v312));
        if (!v313)
        {
          ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
          std::__shared_weak_count::__release_weak(v311);
        }
      }
      v314 = (std::__shared_weak_count *)*((_QWORD *)&v741 + 1);
      if (*((_QWORD *)&v741 + 1))
      {
        v315 = (unint64_t *)(*((_QWORD *)&v741 + 1) + 8);
        do
          v316 = __ldaxr(v315);
        while (__stlxr(v316 - 1, v315));
        if (!v316)
        {
          ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
          std::__shared_weak_count::__release_weak(v314);
        }
      }
      v317 = (std::__shared_weak_count *)*((_QWORD *)&v740 + 1);
      if (*((_QWORD *)&v740 + 1))
      {
        v318 = (unint64_t *)(*((_QWORD *)&v740 + 1) + 8);
        do
          v319 = __ldaxr(v318);
        while (__stlxr(v319 - 1, v318));
LABEL_599:
        if (!v319)
        {
          ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
          std::__shared_weak_count::__release_weak(v317);
        }
      }
    }
    else
    {
      std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v722, v646, *((uint64_t *)&v646 + 1));
      std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v720, v647, *((uint64_t *)&v647 + 1));
      if (SHIBYTE(v640.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)v738, v640.__r_.__value_.__l.__data_, v640.__r_.__value_.__l.__size_);
      else
        *(std::string *)v738 = v640;
      *(_QWORD *)&v738[24] = v641;
      *(_DWORD *)&v738[32] = v642;
      if (SHIBYTE(v643.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)&v738[40], v643.__r_.__value_.__l.__data_, v643.__r_.__value_.__l.__size_);
      else
        *(std::string *)&v738[40] = v643;
      *(_QWORD *)&v738[64] = v644;
      LODWORD(v739) = v645;
      v740 = v646;
      if (*((_QWORD *)&v646 + 1))
      {
        v320 = (unint64_t *)(*((_QWORD *)&v646 + 1) + 8);
        do
          v321 = __ldxr(v320);
        while (__stxr(v321 + 1, v320));
      }
      v741 = v647;
      if (*((_QWORD *)&v647 + 1))
      {
        v322 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
        do
          v323 = __ldxr(v322);
        while (__stxr(v323 + 1, v322));
      }
      v744 = v650;
      v745 = v651;
      v746 = v652;
      v747 = v653;
      v742 = v648;
      v743 = v649;
      v731 = v639;
      if (v639.__imp_.__imp_)
      {
        v324 = (unint64_t *)(v639.__imp_.__imp_ + 8);
        do
          v325 = __ldxr(v324);
        while (__stxr(v325 + 1, v324));
      }
      if (v637[87] < 0)
        std::string::__init_copy_ctor_external(&v730, *((const std::string::value_type **)v637 + 8), *((_QWORD *)v637 + 9));
      else
        v730 = *(std::string *)(v637 + 64);
      v734[0] = v730.__r_.__value_.__l.__size_;
      v326 = v730.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)v734 + 7) = *(std::string::size_type *)((char *)&v730.__r_.__value_.__r.__words[1] + 7);
      v327 = HIBYTE(v730.__r_.__value_.__r.__words[2]);
      memset(&v730, 0, sizeof(v730));
      if (SHIBYTE(v643.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)v723, v643.__r_.__value_.__l.__data_, v643.__r_.__value_.__l.__size_);
      else
        *(std::string *)v723 = v643;
      LODWORD(v724) = v645;
      *(_QWORD *)v735 = v326;
      *(_QWORD *)&v735[8] = v734[0];
      *(_QWORD *)&v735[15] = *(_QWORD *)((char *)v734 + 7);
      v735[23] = v327;
      v734[0] = 0;
      *(_QWORD *)((char *)v734 + 7) = 0;
      *(_QWORD *)&v735[24] = 0;
      *(_DWORD *)&v735[32] = 0;
      *(_OWORD *)&v735[40] = *(_OWORD *)v723;
      v328 = *(_QWORD *)&v723[16];
      memset(v723, 0, 24);
      *(_QWORD *)&v723[24] = v644;
      v737 = v645;
      *(_QWORD *)&v735[56] = v328;
      v736 = v644;
      v729 = v626;
      *(_OWORD *)&v728[16] = v625;
      *(_OWORD *)v728 = v624;
      v727 = v720;
      if (v720.__imp_.__imp_)
      {
        v329 = (unint64_t *)(v720.__imp_.__imp_ + 8);
        do
          v330 = __ldxr(v329);
        while (__stxr(v330 + 1, v329));
      }
      AMCP::Graph::Manifest::get_converter_buffer((uint64_t *)&v732, a1, (int *)v738, (uint64_t *)&v731, (uint64_t)v735, (uint64_t)v728, (uint64_t)&v727);
      v331 = v732;
      v732 = 0uLL;
      v332 = (std::__shared_weak_count *)*((_QWORD *)&v654 + 1);
      v654 = v331;
      if (v332)
      {
        v333 = (unint64_t *)&v332->__shared_owners_;
        do
          v334 = __ldaxr(v333);
        while (__stlxr(v334 - 1, v333));
        if (!v334)
        {
          ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
          std::__shared_weak_count::__release_weak(v332);
        }
      }
      v335 = (std::__shared_weak_count *)*((_QWORD *)&v732 + 1);
      if (*((_QWORD *)&v732 + 1))
      {
        v336 = (unint64_t *)(*((_QWORD *)&v732 + 1) + 8);
        do
          v337 = __ldaxr(v336);
        while (__stlxr(v337 - 1, v336));
        if (!v337)
        {
          ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
          std::__shared_weak_count::__release_weak(v335);
        }
      }
      v338 = (std::__shared_weak_count *)v727.__imp_.__imp_;
      if (v727.__imp_.__imp_)
      {
        v339 = (unint64_t *)(v727.__imp_.__imp_ + 8);
        do
          v340 = __ldaxr(v339);
        while (__stlxr(v340 - 1, v339));
        if (!v340)
        {
          ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
          std::__shared_weak_count::__release_weak(v338);
        }
      }
      if ((v735[63] & 0x80000000) != 0)
        operator delete(*(void **)&v735[40]);
      if ((v735[23] & 0x80000000) != 0)
        operator delete(*(void **)v735);
      if ((v723[23] & 0x80000000) != 0)
        operator delete(*(void **)v723);
      if (SHIBYTE(v730.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v730.__r_.__value_.__l.__data_);
      v341 = (std::__shared_weak_count *)v731.__imp_.__imp_;
      if (v731.__imp_.__imp_)
      {
        v342 = (unint64_t *)(v731.__imp_.__imp_ + 8);
        do
          v343 = __ldaxr(v342);
        while (__stlxr(v343 - 1, v342));
        if (!v343)
        {
          ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
          std::__shared_weak_count::__release_weak(v341);
        }
      }
      v344 = (std::__shared_weak_count *)*((_QWORD *)&v741 + 1);
      if (*((_QWORD *)&v741 + 1))
      {
        v345 = (unint64_t *)(*((_QWORD *)&v741 + 1) + 8);
        do
          v346 = __ldaxr(v345);
        while (__stlxr(v346 - 1, v345));
        if (!v346)
        {
          ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
          std::__shared_weak_count::__release_weak(v344);
        }
      }
      v317 = (std::__shared_weak_count *)*((_QWORD *)&v740 + 1);
      if (*((_QWORD *)&v740 + 1))
      {
        v347 = (unint64_t *)(*((_QWORD *)&v740 + 1) + 8);
        do
          v319 = __ldaxr(v347);
        while (__stlxr(v319 - 1, v347));
        goto LABEL_599;
      }
    }
    if ((v738[63] & 0x80000000) != 0)
      operator delete(*(void **)&v738[40]);
    if ((v738[23] & 0x80000000) != 0)
      operator delete(*(void **)v738);
    v348 = (std::__shared_weak_count *)v720.__imp_.__imp_;
    if (v720.__imp_.__imp_)
    {
      v349 = (unint64_t *)(v720.__imp_.__imp_ + 8);
      do
        v350 = __ldaxr(v349);
      while (__stlxr(v350 - 1, v349));
      if (!v350)
      {
        ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
        std::__shared_weak_count::__release_weak(v348);
      }
    }
    v351 = (std::__shared_weak_count *)v722.__r_.__value_.__l.__size_;
    if (v722.__r_.__value_.__l.__size_)
    {
      v352 = (unint64_t *)(v722.__r_.__value_.__l.__size_ + 8);
      do
        v353 = __ldaxr(v352);
      while (__stlxr(v353 - 1, v352));
      if (!v353)
      {
        ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
        std::__shared_weak_count::__release_weak(v351);
      }
    }
    if (v622)
    {
      v354 = &v622->__shared_owners_;
      do
        v355 = __ldaxr((unint64_t *)v354);
      while (__stlxr(v355 - 1, (unint64_t *)v354));
      if (!v355)
      {
        ((void (*)(std::__shared_weak_count *))v622->__on_zero_shared)(v622);
        std::__shared_weak_count::__release_weak(v622);
      }
    }
    v356 = (std::__shared_weak_count *)*((_QWORD *)&v636 + 1);
    if (*((_QWORD *)&v636 + 1))
    {
      v357 = (unint64_t *)(*((_QWORD *)&v636 + 1) + 8);
      do
        v358 = __ldaxr(v357);
      while (__stlxr(v358 - 1, v357));
      if (!v358)
      {
        ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
        std::__shared_weak_count::__release_weak(v356);
      }
    }
    v359 = (std::__shared_weak_count *)*((_QWORD *)&v635 + 1);
    if (*((_QWORD *)&v635 + 1))
    {
      v360 = (unint64_t *)(*((_QWORD *)&v635 + 1) + 8);
      do
        v361 = __ldaxr(v360);
      while (__stlxr(v361 - 1, v360));
      if (!v361)
      {
        ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
        std::__shared_weak_count::__release_weak(v359);
      }
    }
    v362 = (std::__shared_weak_count *)*((_QWORD *)&v634 + 1);
    if (*((_QWORD *)&v634 + 1))
    {
      v363 = (unint64_t *)(*((_QWORD *)&v634 + 1) + 8);
      do
        v364 = __ldaxr(v363);
      while (__stlxr(v364 - 1, v363));
      if (!v364)
      {
        ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
        std::__shared_weak_count::__release_weak(v362);
      }
    }
    if (v630)
    {
      v631 = v630;
      operator delete(v630);
    }
    if (v627)
    {
      v628 = v627;
      operator delete(v627);
    }
    v365 = v638;
    if (v638)
    {
      v366 = (unint64_t *)&v638->__shared_owners_;
      do
        v367 = __ldaxr(v366);
      while (__stlxr(v367 - 1, v366));
      if (!v367)
      {
        ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
        std::__shared_weak_count::__release_weak(v365);
      }
    }
    v368 = (std::__shared_weak_count *)v639.__imp_.__imp_;
    if (v639.__imp_.__imp_)
    {
      v369 = (unint64_t *)(v639.__imp_.__imp_ + 8);
      do
        v370 = __ldaxr(v369);
      while (__stlxr(v370 - 1, v369));
      if (!v370)
      {
        ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
        std::__shared_weak_count::__release_weak(v368);
      }
    }
    v371 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
    if (*((_QWORD *)&v647 + 1))
    {
      v372 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
      do
        v373 = __ldaxr(v372);
      while (__stlxr(v373 - 1, v372));
      if (!v373)
      {
        ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
        std::__shared_weak_count::__release_weak(v371);
      }
    }
    v374 = (std::__shared_weak_count *)*((_QWORD *)&v646 + 1);
    if (*((_QWORD *)&v646 + 1))
    {
      v375 = (unint64_t *)(*((_QWORD *)&v646 + 1) + 8);
      do
        v376 = __ldaxr(v375);
      while (__stlxr(v376 - 1, v375));
      if (!v376)
      {
        ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
        std::__shared_weak_count::__release_weak(v374);
      }
    }
    if (SHIBYTE(v643.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v643.__r_.__value_.__l.__data_);
    if (SHIBYTE(v640.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v640.__r_.__value_.__l.__data_);
    v377 = *(_QWORD *)&v694[24];
    if (DWORD1(v704))
    {
      v618 = v654;
      if (*((_QWORD *)&v654 + 1))
      {
        v378 = (unint64_t *)(*((_QWORD *)&v654 + 1) + 8);
        do
          v379 = __ldxr(v378);
        while (__stxr(v379 + 1, v378));
      }
      AMCP::Graph::connect(*(char **)v99, v377, &v655, 0, &v618);
      v380 = (std::__shared_weak_count *)*((_QWORD *)&v618 + 1);
      if (*((_QWORD *)&v618 + 1))
      {
        v381 = (unint64_t *)(*((_QWORD *)&v618 + 1) + 8);
        do
          v382 = __ldaxr(v381);
        while (__stlxr(v382 - 1, v381));
        if (!v382)
        {
          ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
          std::__shared_weak_count::__release_weak(v380);
        }
      }
      v383 = *((_QWORD *)&v697 + 1);
      v617 = v672;
      if (*((_QWORD *)&v672 + 1))
      {
        v384 = (unint64_t *)(*((_QWORD *)&v672 + 1) + 8);
        do
          v385 = __ldxr(v384);
        while (__stxr(v385 + 1, v384));
      }
      AMCP::Graph::connect(v655, 0, &v707, v383, &v617);
      v386 = (std::__shared_weak_count *)*((_QWORD *)&v617 + 1);
      if (*((_QWORD *)&v617 + 1))
      {
        v387 = (unint64_t *)(*((_QWORD *)&v617 + 1) + 8);
        do
          v388 = __ldaxr(v387);
        while (__stlxr(v388 - 1, v387));
        if (!v388)
        {
          ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
          std::__shared_weak_count::__release_weak(v386);
        }
      }
      std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v657, v654, *((uint64_t *)&v654 + 1));
    }
    else
    {
      v620 = v672;
      if (*((_QWORD *)&v672 + 1))
      {
        v425 = (unint64_t *)(*((_QWORD *)&v672 + 1) + 8);
        do
          v426 = __ldxr(v425);
        while (__stxr(v426 + 1, v425));
      }
      AMCP::Graph::connect(*(char **)v99, v377, &v655, 0, &v620);
      v427 = (std::__shared_weak_count *)*((_QWORD *)&v620 + 1);
      if (*((_QWORD *)&v620 + 1))
      {
        v428 = (unint64_t *)(*((_QWORD *)&v620 + 1) + 8);
        do
          v429 = __ldaxr(v428);
        while (__stlxr(v429 - 1, v428));
        if (!v429)
        {
          ((void (*)(std::__shared_weak_count *))v427->__on_zero_shared)(v427);
          std::__shared_weak_count::__release_weak(v427);
        }
      }
      v430 = *((_QWORD *)&v697 + 1);
      v619 = v654;
      if (*((_QWORD *)&v654 + 1))
      {
        v431 = (unint64_t *)(*((_QWORD *)&v654 + 1) + 8);
        do
          v432 = __ldxr(v431);
        while (__stxr(v432 + 1, v431));
      }
      AMCP::Graph::connect(v655, 0, &v707, v430, &v619);
      v433 = (std::__shared_weak_count *)*((_QWORD *)&v619 + 1);
      if (*((_QWORD *)&v619 + 1))
      {
        v434 = (unint64_t *)(*((_QWORD *)&v619 + 1) + 8);
        do
          v435 = __ldaxr(v434);
        while (__stlxr(v435 - 1, v434));
        if (!v435)
        {
          ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
          std::__shared_weak_count::__release_weak(v433);
        }
      }
    }
    v389 = (std::__shared_weak_count *)*((_QWORD *)&v654 + 1);
    if (*((_QWORD *)&v654 + 1))
    {
      v390 = (unint64_t *)(*((_QWORD *)&v654 + 1) + 8);
      do
        v391 = __ldaxr(v390);
      while (__stlxr(v391 - 1, v390));
      if (!v391)
      {
        ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
        std::__shared_weak_count::__release_weak(v389);
      }
    }
    v269 = v656;
    if (v656)
    {
      v392 = (unint64_t *)&v656->__shared_owners_;
      do
        v271 = __ldaxr(v392);
      while (__stlxr(v271 - 1, v392));
LABEL_689:
      if (!v271)
      {
        ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
        std::__shared_weak_count::__release_weak(v269);
      }
    }
  }
  else
  {
    v265 = *(_QWORD *)&v694[24];
    v266 = *((_QWORD *)&v697 + 1);
    v615 = v258;
    v616 = (std::__shared_weak_count *)*((_QWORD *)&v672 + 1);
    if (*((_QWORD *)&v672 + 1))
    {
      v267 = (unint64_t *)(*((_QWORD *)&v672 + 1) + 8);
      do
        v268 = __ldxr(v267);
      while (__stxr(v268 + 1, v267));
    }
    AMCP::Graph::connect(*(char **)v99, v265, &v707, v266, &v615);
    v269 = v616;
    if (v616)
    {
      v270 = (unint64_t *)&v616->__shared_owners_;
      do
        v271 = __ldaxr(v270);
      while (__stlxr(v271 - 1, v270));
      goto LABEL_689;
    }
  }
  if (*(_BYTE *)(a4 + 96))
  {
    v393 = (std::logic_error_vtbl **)(v595 + 24);
    if (!*(_QWORD *)(v595 + 24))
    {
      if (*(char *)(v595 + 23) < 0)
        std::string::__init_copy_ctor_external(&v612, *(const std::string::value_type **)v595, *(_QWORD *)(v595 + 8));
      else
        v612 = *(std::string *)v595;
      v613 = *v393;
      v614 = *(_DWORD *)(v595 + 32);
      if (SHIBYTE(v612.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)v728, v612.__r_.__value_.__l.__data_, v612.__r_.__value_.__l.__size_);
      else
        *(std::string *)v728 = v612;
      v436 = v613;
      v437 = *(_QWORD *)&v728[8];
      v438 = *(std::string::value_type **)v728;
      LODWORD(v730.__r_.__value_.__l.__data_) = *(_DWORD *)&v728[16];
      *(_DWORD *)((char *)v730.__r_.__value_.__r.__words + 3) = *(_DWORD *)&v728[19];
      v439 = v728[23];
      memset(v728, 0, 24);
      v440 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)v723 = *(_OWORD *)a4;
      *(_OWORD *)&v723[16] = v440;
      v724 = *(_QWORD *)(a4 + 32);
      if (v439 < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v738, v438, v437);
        v437 = *(_QWORD *)&v738[8];
        v442 = *(std::string::value_type **)v738;
        v441 = v738[23];
      }
      else
      {
        *(_OWORD *)v738 = __PAIR128__(v437, (unint64_t)v438);
        *(_DWORD *)&v738[16] = v730.__r_.__value_.__l.__data_;
        *(_DWORD *)&v738[19] = *(_DWORD *)((char *)v730.__r_.__value_.__r.__words + 3);
        v441 = v439;
        v442 = v438;
      }
      *(_OWORD *)&v738[40] = *(_OWORD *)v723;
      *(_OWORD *)&v738[56] = *(_OWORD *)&v723[16];
      v739 = v724;
      LODWORD(v732) = *(_DWORD *)&v738[16];
      *(_DWORD *)((char *)&v732 + 3) = *(_DWORD *)&v738[19];
      *(_DWORD *)&v738[32] = 0;
      *(_QWORD *)&v738[24] = v436;
      memset(v738, 0, 24);
      LODWORD(v720.__imp_.__imp_) = 0;
      v720.__vftable = v436;
      *(_QWORD *)&v735[36] = v724;
      *(_OWORD *)&v735[20] = *(_OWORD *)&v723[16];
      *(_OWORD *)&v735[4] = *(_OWORD *)v723;
      if (v439 < 0)
        operator delete(v438);
      v443 = (char *)operator new(0x80uLL);
      *((_QWORD *)v443 + 1) = 0;
      *((_QWORD *)v443 + 2) = 0;
      *(_QWORD *)v443 = &off_1E69977D0;
      if (v441 < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v738, v442, v437);
      }
      else
      {
        *(_QWORD *)v738 = v442;
        *(_QWORD *)&v738[8] = v437;
        *(_DWORD *)&v738[16] = v732;
        *(_DWORD *)&v738[19] = *(_DWORD *)((char *)&v732 + 3);
        v738[23] = v441;
      }
      v444 = v720.__vftable;
      *(_QWORD *)&v738[24] = v720.__vftable;
      v445 = (int)v720.__imp_.__imp_;
      *(_DWORD *)&v738[32] = v720.__imp_.__imp_;
      v446 = *(_OWORD *)&v735[4];
      v447 = *(_OWORD *)&v735[20];
      *((_QWORD *)v443 + 14) = *(_QWORD *)&v735[36];
      *((_OWORD *)v443 + 5) = v446;
      *((_OWORD *)v443 + 6) = v447;
      *((_QWORD *)v443 + 3) = &off_1E69977A0;
      *((_QWORD *)v443 + 4) = 0;
      *(_OWORD *)(v443 + 40) = *(_OWORD *)v738;
      *((_QWORD *)v443 + 7) = *(_QWORD *)&v738[16];
      *((_QWORD *)v443 + 8) = v444;
      *((_DWORD *)v443 + 18) = v445;
      *((_DWORD *)v443 + 30) = 0;
      *(_QWORD *)v723 = v443 + 24;
      *(_QWORD *)&v723[8] = v443;
      _ZNSt3__115allocate_sharedB8ne180100IN4AMCP5Graph9Node_ProcENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v730);
      v448 = *(_QWORD *)v723;
      v449 = *(_QWORD *)&v723[8];
      if (*(_QWORD *)&v723[8])
      {
        v450 = (unint64_t *)(*(_QWORD *)&v723[8] + 8);
        do
          v451 = __ldxr(v450);
        while (__stxr(v451 + 1, v450));
      }
      v452 = v730.__r_.__value_.__r.__words[0];
      *(_QWORD *)v738 = &off_1E6997870;
      *(_QWORD *)&v738[8] = v448;
      *(_QWORD *)&v738[16] = v449;
      *(_QWORD *)&v738[24] = v738;
      std::__function::__value_func<void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::swap[abi:ne180100](v738, v730.__r_.__value_.__l.__data_);
      v453 = *(_QWORD **)&v738[24];
      if (*(_BYTE **)&v738[24] == v738)
      {
        v454 = 4;
        v453 = v738;
      }
      else
      {
        if (!*(_QWORD *)&v738[24])
          goto LABEL_806;
        v454 = 5;
      }
      (*(void (**)(void))(*v453 + 8 * v454))();
LABEL_806:
      v455 = *(_QWORD *)v723;
      v456 = *(_QWORD *)&v723[8];
      if (*(_QWORD *)&v723[8])
      {
        v457 = (unint64_t *)(*(_QWORD *)&v723[8] + 8);
        do
          v458 = __ldxr(v457);
        while (__stxr(v458 + 1, v457));
      }
      *(_QWORD *)v738 = &off_1E6997900;
      *(_QWORD *)&v738[8] = v455;
      *(_QWORD *)&v738[16] = v456;
      *(_QWORD *)&v738[24] = v738;
      std::__function::__value_func<void ()>::swap[abi:ne180100](v738, (_QWORD *)(v452 + 160));
      v459 = *(_QWORD **)&v738[24];
      if (*(_BYTE **)&v738[24] == v738)
      {
        v460 = 4;
        v459 = v738;
      }
      else
      {
        if (!*(_QWORD *)&v738[24])
          goto LABEL_814;
        v460 = 5;
      }
      (*(void (**)(void))(*v459 + 8 * v460))();
LABEL_814:
      v461 = *(_QWORD *)v723;
      v462 = *(_QWORD *)&v723[8];
      if (*(_QWORD *)&v723[8])
      {
        v463 = (unint64_t *)(*(_QWORD *)&v723[8] + 8);
        do
          v464 = __ldxr(v463);
        while (__stxr(v464 + 1, v463));
      }
      *(_QWORD *)v738 = &off_1E6997980;
      *(_QWORD *)&v738[8] = v461;
      *(_QWORD *)&v738[16] = v462;
      *(_QWORD *)&v738[24] = v738;
      std::__function::__value_func<void ()>::swap[abi:ne180100](v738, (_QWORD *)(v452 + 288));
      v465 = *(_QWORD **)&v738[24];
      if (*(_BYTE **)&v738[24] == v738)
      {
        v466 = 4;
        v465 = v738;
      }
      else
      {
        if (!*(_QWORD *)&v738[24])
          goto LABEL_822;
        v466 = 5;
      }
      (*(void (**)(void))(*v465 + 8 * v466))();
LABEL_822:
      v467 = *(std::__shared_weak_count **)&v723[8];
      if (*(_QWORD *)&v723[8])
      {
        v468 = (unint64_t *)(*(_QWORD *)&v723[8] + 8);
        do
          v469 = __ldaxr(v468);
        while (__stlxr(v469 - 1, v468));
        if (!v469)
        {
          ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
          std::__shared_weak_count::__release_weak(v467);
        }
      }
      v470 = operator new(0x90uLL);
      v470[1] = 0;
      v470[2] = 0;
      *v470 = &off_1E6985258;
      std::string::basic_string[abi:ne180100]<0>(v738, "file writer");
      AMCP::Graph::Manifest_Task::Manifest_Task((uint64_t)(v470 + 3), &v730, 1, 1uLL, 0, (__int128 *)v738, 0.0);
      if ((v738[23] & 0x80000000) != 0)
        operator delete(*(void **)v738);
      v722.__r_.__value_.__r.__words[0] = (std::string::size_type)(v470 + 3);
      v722.__r_.__value_.__l.__size_ = (std::string::size_type)v470;
      v471 = (std::__shared_weak_count *)v730.__r_.__value_.__l.__size_;
      if (v730.__r_.__value_.__l.__size_)
      {
        v472 = (unint64_t *)(v730.__r_.__value_.__l.__size_ + 8);
        do
          v473 = __ldaxr(v472);
        while (__stlxr(v473 - 1, v472));
        if (!v473)
        {
          ((void (*)(std::__shared_weak_count *))v471->__on_zero_shared)(v471);
          std::__shared_weak_count::__release_weak(v471);
        }
      }
      if (v441 < 0)
        operator delete(v442);
      if (SHIBYTE(v612.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v612.__r_.__value_.__l.__data_);
      v474 = (unint64_t)a7[2];
      v475 = a7[1];
      if ((unint64_t)v475 >= v474)
      {
        v480 = (v475 - *a7) >> 4;
        v481 = v480 + 1;
        if ((unint64_t)(v480 + 1) >> 60)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v482 = v474 - (_QWORD)*a7;
        if (v482 >> 3 > v481)
          v481 = v482 >> 3;
        if ((unint64_t)v482 >= 0x7FFFFFFFFFFFFFF0)
          v483 = 0xFFFFFFFFFFFFFFFLL;
        else
          v483 = v481;
        *(_QWORD *)&v738[32] = a7 + 2;
        v484 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v483);
        v486 = &v484[16 * v480];
        v487 = v722.__r_.__value_.__l.__size_;
        *(_OWORD *)v486 = *(_OWORD *)&v722.__r_.__value_.__l.__data_;
        if (v487)
        {
          v488 = (unint64_t *)(v487 + 8);
          do
            v489 = __ldxr(v488);
          while (__stxr(v489 + 1, v488));
        }
        v491 = *a7;
        v490 = a7[1];
        if (v490 == *a7)
        {
          v494 = vdupq_n_s64((unint64_t)v490);
          v492 = &v484[16 * v480];
        }
        else
        {
          v492 = &v484[16 * v480];
          do
          {
            v493 = *((_OWORD *)v490 - 1);
            v490 -= 16;
            *((_OWORD *)v492 - 1) = v493;
            v492 -= 16;
            *(_QWORD *)v490 = 0;
            *((_QWORD *)v490 + 1) = 0;
          }
          while (v490 != v491);
          v494 = *(int64x2_t *)a7;
        }
        v479 = v486 + 16;
        *a7 = v492;
        a7[1] = v486 + 16;
        *(int64x2_t *)&v738[8] = v494;
        v495 = a7[2];
        a7[2] = &v484[16 * v485];
        *(_QWORD *)&v738[24] = v495;
        *(_QWORD *)v738 = v494.i64[0];
        std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)v738);
      }
      else
      {
        *(_QWORD *)v475 = v722.__r_.__value_.__r.__words[0];
        v476 = v722.__r_.__value_.__l.__size_;
        *((_QWORD *)v475 + 1) = v722.__r_.__value_.__l.__size_;
        if (v476)
        {
          v477 = (unint64_t *)(v476 + 8);
          do
            v478 = __ldxr(v477);
          while (__stxr(v478 + 1, v477));
        }
        v479 = v475 + 16;
      }
      a7[1] = v479;
      v496 = *(_QWORD *)(v599 + 72);
      v610 = 0;
      v611 = 0;
      if (*(char *)(v595 + 23) < 0)
        std::string::__init_copy_ctor_external(&v607, *(const std::string::value_type **)v595, *(_QWORD *)(v595 + 8));
      else
        v607 = *(std::string *)v595;
      v608 = *v393;
      v609 = *(_DWORD *)(v595 + 32);
      std::string::basic_string[abi:ne180100]<0>(&v605, "File Writer");
      v497 = v605;
      v733[0] = v606;
      *(_QWORD *)((char *)v733 + 7) = *(_QWORD *)((char *)&v606 + 7);
      v498 = HIBYTE(v606);
      v606 = 0uLL;
      v605 = 0;
      *(_OWORD *)v738 = *(_OWORD *)&v607.__r_.__value_.__l.__data_;
      *(_DWORD *)&v738[32] = v609;
      v499 = v607.__r_.__value_.__r.__words[2];
      memset(&v607, 0, sizeof(v607));
      *(_QWORD *)&v738[16] = v499;
      *(_QWORD *)&v738[24] = v608;
      *(_QWORD *)&v738[55] = *(_QWORD *)((char *)v733 + 7);
      *(_QWORD *)&v738[40] = v497;
      *(_QWORD *)&v738[48] = v733[0];
      v738[63] = v498;
      v733[0] = 0;
      *(_QWORD *)((char *)v733 + 7) = 0;
      *(_QWORD *)&v738[64] = 0;
      LODWORD(v739) = 0;
      v500 = v657;
      v501 = *(_OWORD *)(v657 + 88);
      v502 = *(_OWORD *)(v657 + 104);
      v503 = *(std::__shared_count_vtbl **)(v657 + 128);
      v604 = *(_QWORD *)(v657 + 120);
      v603[0] = v501;
      v603[1] = v502;
      v504 = *(std::__shared_weak_count **)(v657 + 136);
      v601 = v503;
      v602 = v504;
      if (v504)
      {
        v505 = (unint64_t *)&v504->__shared_owners_;
        do
          v506 = __ldxr(v505);
        while (__stxr(v506 + 1, v505));
      }
      AMCP::Graph::Manifest_Inventory::request_shared_buffer_for_connection(v735, v496, &v610, (uint64_t)v738, (uint64_t)v603, 0, &v601, *(_DWORD *)(v500 + 156), 0, 2, 0);
      v507 = v602;
      if (v602)
      {
        v508 = (unint64_t *)&v602->__shared_owners_;
        do
          v509 = __ldaxr(v508);
        while (__stlxr(v509 - 1, v508));
        if (!v509)
        {
          ((void (*)(std::__shared_weak_count *))v507->__on_zero_shared)(v507);
          std::__shared_weak_count::__release_weak(v507);
        }
      }
      if ((v738[63] & 0x80000000) != 0)
        operator delete(*(void **)&v738[40]);
      if ((v738[23] & 0x80000000) != 0)
        operator delete(*(void **)v738);
      if (SHIBYTE(v606) < 0)
        operator delete(v605);
      if (SHIBYTE(v607.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v607.__r_.__value_.__l.__data_);
      v510 = v611;
      if (v611)
      {
        v511 = (unint64_t *)&v611->__shared_owners_;
        do
          v512 = __ldaxr(v511);
        while (__stlxr(v512 - 1, v511));
        if (!v512)
        {
          ((void (*)(std::__shared_weak_count *))v510->__on_zero_shared)(v510);
          std::__shared_weak_count::__release_weak(v510);
        }
      }
      v513 = *(_QWORD *)&v694[24];
      v600 = *(_OWORD *)v735;
      if (*(_QWORD *)&v735[8])
      {
        v514 = (unint64_t *)(*(_QWORD *)&v735[8] + 8);
        do
          v515 = __ldxr(v514);
        while (__stxr(v515 + 1, v514));
      }
      AMCP::Graph::connect(*(char **)v99, v513, &v722.__r_.__value_.__l.__data_, 0, &v600);
      v516 = (std::__shared_weak_count *)*((_QWORD *)&v600 + 1);
      if (*((_QWORD *)&v600 + 1))
      {
        v517 = (unint64_t *)(*((_QWORD *)&v600 + 1) + 8);
        do
          v518 = __ldaxr(v517);
        while (__stlxr(v518 - 1, v517));
        if (!v518)
        {
          ((void (*)(std::__shared_weak_count *))v516->__on_zero_shared)(v516);
          std::__shared_weak_count::__release_weak(v516);
        }
      }
      v519 = *(std::__shared_weak_count **)&v735[8];
      if (*(_QWORD *)&v735[8])
      {
        v520 = (unint64_t *)(*(_QWORD *)&v735[8] + 8);
        do
          v521 = __ldaxr(v520);
        while (__stlxr(v521 - 1, v520));
        if (!v521)
        {
          ((void (*)(std::__shared_weak_count *))v519->__on_zero_shared)(v519);
          std::__shared_weak_count::__release_weak(v519);
        }
      }
      v522 = (std::__shared_weak_count *)v722.__r_.__value_.__l.__size_;
      if (v722.__r_.__value_.__l.__size_)
      {
        v523 = (unint64_t *)(v722.__r_.__value_.__l.__size_ + 8);
        do
          v524 = __ldaxr(v523);
        while (__stlxr(v524 - 1, v523));
        if (!v524)
        {
          ((void (*)(std::__shared_weak_count *))v522->__on_zero_shared)(v522);
          std::__shared_weak_count::__release_weak(v522);
        }
      }
    }
  }
  v394 = (std::__shared_weak_count *)*((_QWORD *)&v657 + 1);
  if (*((_QWORD *)&v657 + 1))
  {
    v395 = (unint64_t *)(*((_QWORD *)&v657 + 1) + 8);
    do
      v396 = __ldaxr(v395);
    while (__stlxr(v396 - 1, v395));
    if (!v396)
    {
      ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
      std::__shared_weak_count::__release_weak(v394);
    }
  }
  v397 = (std::__shared_weak_count *)*((_QWORD *)&v672 + 1);
  if (*((_QWORD *)&v672 + 1))
  {
    v398 = (unint64_t *)(*((_QWORD *)&v672 + 1) + 8);
    do
      v399 = __ldaxr(v398);
    while (__stlxr(v399 - 1, v398));
    if (!v399)
    {
      ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
      std::__shared_weak_count::__release_weak(v397);
    }
  }
  if (SHIBYTE(v677.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v677.__r_.__value_.__l.__data_);
  if (SHIBYTE(v680.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v680.__r_.__value_.__l.__data_);
  v400 = (std::__shared_weak_count *)*((_QWORD *)&v683 + 1);
  if (*((_QWORD *)&v683 + 1))
  {
    v401 = (unint64_t *)(*((_QWORD *)&v683 + 1) + 8);
    do
      v402 = __ldaxr(v401);
    while (__stlxr(v402 - 1, v401));
    if (!v402)
    {
      ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
      std::__shared_weak_count::__release_weak(v400);
    }
  }
  v403 = (std::__shared_weak_count *)*((_QWORD *)&v693 + 1);
  if (*((_QWORD *)&v693 + 1))
  {
    v404 = (unint64_t *)(*((_QWORD *)&v693 + 1) + 8);
    do
      v405 = __ldaxr(v404);
    while (__stlxr(v405 - 1, v404));
    if (!v405)
    {
      ((void (*)(std::__shared_weak_count *))v403->__on_zero_shared)(v403);
      std::__shared_weak_count::__release_weak(v403);
    }
  }
  v406 = (std::__shared_weak_count *)*((_QWORD *)&v692 + 1);
  if (*((_QWORD *)&v692 + 1))
  {
    v407 = (unint64_t *)(*((_QWORD *)&v692 + 1) + 8);
    do
      v408 = __ldaxr(v407);
    while (__stlxr(v408 - 1, v407));
    if (!v408)
    {
      ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
      std::__shared_weak_count::__release_weak(v406);
    }
  }
  v409 = (std::__shared_weak_count *)*((_QWORD *)&v691 + 1);
  if (*((_QWORD *)&v691 + 1))
  {
    v410 = (unint64_t *)(*((_QWORD *)&v691 + 1) + 8);
    do
      v411 = __ldaxr(v410);
    while (__stlxr(v411 - 1, v410));
    if (!v411)
    {
      ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
      std::__shared_weak_count::__release_weak(v409);
    }
  }
  if (*((_QWORD *)&v688 + 1))
  {
    *(_QWORD *)&v689 = *((_QWORD *)&v688 + 1);
    operator delete(*((void **)&v688 + 1));
  }
  if ((_QWORD)v687)
  {
    *((_QWORD *)&v687 + 1) = v687;
    operator delete((void *)v687);
  }
  v412 = (std::__shared_weak_count *)*((_QWORD *)&v700 + 1);
  if (*((_QWORD *)&v700 + 1))
  {
    v413 = (unint64_t *)(*((_QWORD *)&v700 + 1) + 8);
    do
      v414 = __ldaxr(v413);
    while (__stlxr(v414 - 1, v413));
    if (!v414)
    {
      ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
      std::__shared_weak_count::__release_weak(v412);
    }
  }
  v415 = (std::__shared_weak_count *)*((_QWORD *)&v699 + 1);
  if (*((_QWORD *)&v699 + 1))
  {
    v416 = (unint64_t *)(*((_QWORD *)&v699 + 1) + 8);
    do
      v417 = __ldaxr(v416);
    while (__stlxr(v417 - 1, v416));
    if (!v417)
    {
      ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
      std::__shared_weak_count::__release_weak(v415);
    }
  }
  if (SBYTE7(v697) < 0)
    operator delete((void *)v696);
  if ((v694[23] & 0x80000000) != 0)
    operator delete(*(void **)v694);
  for (i = 64; i != 16; i -= 24)
  {
    *(_QWORD *)v738 = &v705[i];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v738);
  }
  v419 = v708;
  if (v708)
  {
    v420 = (unint64_t *)&v708->__shared_owners_;
    do
      v421 = __ldaxr(v420);
    while (__stlxr(v421 - 1, v420));
    if (!v421)
    {
      ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
      std::__shared_weak_count::__release_weak(v419);
    }
  }
  if (*(_QWORD *)&v719[3])
  {
    *(_QWORD *)&v719[5] = *(_QWORD *)&v719[3];
    operator delete(*(void **)&v719[3]);
  }
  v422 = v717;
  if (v717)
  {
    v423 = (unint64_t *)&v717->__shared_owners_;
    do
      v424 = __ldaxr(v423);
    while (__stlxr(v424 - 1, v423));
    if (!v424)
    {
      ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
      std::__shared_weak_count::__release_weak(v422);
    }
  }
  if (__src[1])
  {
    *(void **)&v713 = __src[1];
    operator delete(__src[1]);
  }
  if (SHIBYTE(__src[0]) < 0)
    operator delete(v711[0]);
  if ((__str[63] & 0x80000000) != 0)
    operator delete(*(void **)&__str[40]);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
}

void sub_1B5ABC090(_Unwind_Exception *a1)
{
  char v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t i;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x940]);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x460]);
  v2 = STACK[0x3C7];
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3A0]);
  AMCP::Wire_Identifier::~Wire_Identifier((void **)&STACK[0x410]);
  if (v2 < 0)
    operator delete((void *)STACK[0x3B0]);
  if (SLOBYTE(STACK[0x3F7]) < 0)
    operator delete((void *)STACK[0x3E0]);
  if (SLOBYTE(STACK[0x4D7]) < 0)
    operator delete((void *)STACK[0x4C0]);
  if (SLOBYTE(STACK[0x507]) < 0)
    operator delete((void *)STACK[0x4F0]);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x520]);
  v3 = (std::__shared_weak_count *)STACK[0x618];
  if (STACK[0x618])
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)STACK[0x608];
  if (STACK[0x608])
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)STACK[0x5F8];
  if (STACK[0x5F8])
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (void *)STACK[0x5D0];
  if (STACK[0x5D0])
  {
    STACK[0x5D8] = (unint64_t)v12;
    operator delete(v12);
  }
  v13 = (void *)STACK[0x5B8];
  if (STACK[0x5B8])
  {
    STACK[0x5C0] = (unint64_t)v13;
    operator delete(v13);
  }
  v14 = (std::__shared_weak_count *)STACK[0x688];
  if (STACK[0x688])
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)STACK[0x678];
  if (STACK[0x678])
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (SLOBYTE(STACK[0x65F]) < 0)
    operator delete((void *)STACK[0x648]);
  if (SLOBYTE(STACK[0x637]) < 0)
    operator delete((void *)STACK[0x620]);
  for (i = 64; i != 16; i -= 24)
  {
    STACK[0x620] = (unint64_t)&STACK[0x6F8] + i;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x620]);
  }
  v21 = (std::__shared_weak_count *)STACK[0x768];
  if (STACK[0x768])
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (void *)STACK[0x830];
  if (STACK[0x830])
  {
    STACK[0x838] = (unint64_t)v24;
    operator delete(v24);
  }
  v25 = (std::__shared_weak_count *)STACK[0x818];
  if (STACK[0x818])
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (void *)STACK[0x7D8];
  if (STACK[0x7D8])
  {
    STACK[0x7E0] = (unint64_t)v28;
    operator delete(v28);
  }
  if (SLOBYTE(STACK[0x7D7]) < 0)
    operator delete((void *)STACK[0x7C0]);
  if (SLOBYTE(STACK[0x7AF]) < 0)
    operator delete((void *)STACK[0x798]);
  if (SLOBYTE(STACK[0x787]) < 0)
    operator delete((void *)STACK[0x770]);
  _Unwind_Resume(a1);
}

void AMCP::Graph::connect(char *a1, unint64_t a2, char **a3, unint64_t a4, _QWORD *a5)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  _QWORD v21[2];

  v8 = (std::__shared_weak_count *)a5[1];
  v21[0] = *a5;
  v21[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  AMCP::Graph::Manifest_Task::add_connection(a1, 1, a2, v21);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = *a3;
  v14 = *a5;
  v15 = (std::__shared_weak_count *)a5[1];
  v20[0] = v14;
  v20[1] = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  AMCP::Graph::Manifest_Task::add_connection(v13, 0, a4, v20);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1B5ABD358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Task>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6985258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Task>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6985258;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Task>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  v2 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 72);
  v3 = 48;
  do
  {
    v4 = (void **)(a1 + v3);
    std::vector<AMCP::Graph::Manifest_Task::Terminal_Connections>::__destroy_vector::operator()[abi:ne180100](&v4);
    v3 -= 24;
  }
  while (v3);
}

void AMCP::Graph::Manifest::get_converter_buffer(uint64_t *a1, uint64_t a2, int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  double v17;
  int v18;
  int v19;
  int v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  int32x4_t v48;
  uint64_t v49;
  int *v50;
  std::__shared_count_vtbl *v51;
  std::__shared_weak_count *v52;
  _OWORD v53[2];
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  __int128 v57;
  std::string v58;
  uint64_t v59;
  int v60;
  std::string __p;
  uint64_t v62;
  int v63;
  uint64_t v64;
  std::__shared_weak_count *v65;

  v14 = *(_QWORD *)(a2 + 72);
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v58 = *(std::string *)a5;
  v59 = *(_QWORD *)(a5 + 24);
  v60 = *(_DWORD *)(a5 + 32);
  v15 = (_OWORD *)(a5 + 40);
  v50 = a3;
  v49 = v14;
  if (*(char *)(a5 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a5 + 40), *(_QWORD *)(a5 + 48));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v15;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(a5 + 56);
  }
  v62 = *(_QWORD *)(a5 + 64);
  v63 = *(_DWORD *)(a5 + 72);
  v16 = *a4;
  if (!*a4)
    goto LABEL_26;
  v17 = *(double *)a6;
  v48 = *(int32x4_t *)(a6 + 8);
  v18 = *(_DWORD *)(a6 + 24);
  v19 = *(_DWORD *)(a6 + 28);
  v20 = *(_DWORD *)(a6 + 32);
  v21 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::find<AMCP::Wire_Identifier>((_QWORD *)(v16 + 8), (unsigned __int8 **)&v58);
  if (!v21)
    goto LABEL_26;
  v22 = v20;
  v23 = v21[12];
  *a1 = v23;
  v24 = (std::__shared_weak_count *)v21[13];
  a1[1] = (uint64_t)v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
  }
  if (v17 != *(double *)(v23 + 88)
    || (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v48, *(int32x4_t *)(v23 + 96))), 0xFuLL))) & 1) == 0
    || v18 != *(_DWORD *)(v23 + 112)
    || v19 != *(_DWORD *)(v23 + 116)
    || v22 != *(_DWORD *)(v23 + 120))
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1);
LABEL_26:
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_27;
  }
  v64 = v23;
  v65 = v24;
  if (v24)
  {
    v27 = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  AMCP::Graph::Manifest_Inventory::add_buffer(v49, &v64);
  if (v24)
  {
    v29 = (unint64_t *)&v24->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
LABEL_27:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (!*a1)
  {
    v64 = 0;
    v65 = 0;
    v31 = *(_QWORD *)(a2 + 72);
    v55 = 0;
    v56 = 0;
    if (*(char *)(a5 + 23) < 0)
      std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
    else
      v58 = *(std::string *)a5;
    v59 = *(_QWORD *)(a5 + 24);
    v60 = *(_DWORD *)(a5 + 32);
    if (*(char *)(a5 + 63) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a5 + 40), *(_QWORD *)(a5 + 48));
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v15;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(a5 + 56);
    }
    v62 = *(_QWORD *)(a5 + 64);
    v63 = *(_DWORD *)(a5 + 72);
    v32 = *(_OWORD *)(a6 + 16);
    v53[0] = *(_OWORD *)a6;
    v53[1] = v32;
    v54 = *(_QWORD *)(a6 + 32);
    v33 = *(std::__shared_weak_count **)(a7 + 8);
    v51 = *(std::__shared_count_vtbl **)a7;
    v52 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    AMCP::Graph::Manifest_Inventory::request_shared_buffer_for_connection(&v57, v31, &v55, (uint64_t)&v58, (uint64_t)v53, 0, &v51, v50[50], v50[48], 2, v50[51]);
    std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)a1, &v57);
    v36 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v57 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = v52;
    if (v52)
    {
      v40 = (unint64_t *)&v52->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    v42 = v56;
    if (v56)
    {
      v43 = (unint64_t *)&v56->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = v65;
    if (v65)
    {
      v46 = (unint64_t *)&v65->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
}

void sub_1B5ABD85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v35 - 120);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v34);
  AMCP::Wire_Identifier::~Wire_Identifier(&__p);
  _Unwind_Resume(a1);
}

uint64_t std::tuple<std::shared_ptr<AMCP::Graph::Node_Proc>,std::string>::~tuple(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1);
}

std::string *std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return this;
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Log>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6985208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Log>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6985208;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Log>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  std::mutex::~mutex((std::mutex *)(a1 + 72));
  if (*(_QWORD *)(a1 + 56))
  {
    v3 = *(_QWORD *)(a1 + 40);
    v2 = *(_QWORD *)(a1 + 48);
    v4 = *(_QWORD **)v2;
    v4[1] = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    *(_QWORD *)(a1 + 56) = 0;
    while (v2 != a1 + 40)
    {
      v5 = *(_QWORD *)(v2 + 8);
      std::__list_imp<std::pair<AMCP::Graph::Manifest_Message_Type,std::string>>::__delete_node[abi:ne180100]<>((void **)v2);
      v2 = v5;
    }
  }
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Inventory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69851B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Inventory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69851B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Graph::Manifest_Inventory>::__on_zero_shared(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v2 = a1 + 24;
  v3 = (uint64_t *)a1[27];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (uint64_t *)a1[23];
  if (v5 == a1 + 20)
  {
    v6 = 4;
    v5 = a1 + 20;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = a1[17];
  if (v7)
  {
    v8 = a1[18];
    v9 = (void *)a1[17];
    if (v8 != v7)
    {
      do
        v8 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v8 - 16);
      while (v8 != v7);
      v9 = (void *)a1[17];
    }
    a1[18] = v7;
    operator delete(v9);
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 15));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 13));
  std::unique_ptr<AMCP::Graph::Manifest_Counter>::reset[abi:ne180100](a1 + 11, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 9));
  return std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::~__hash_table((uint64_t)(a1 + 4));
}

void AMCP::Graph::Manifest::calculate_anchor_time(uint64_t a1, uint64_t a2, float *a3, int a4, unint64_t a5, int a6)
{
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  double sample_time;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  AMCP::Log::Scope_Registry *v23;
  char v24;
  BOOL v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  _opaque_pthread_t *v29;
  mach_port_t v30;
  double v31;
  std::logic_error_vtbl *v32;
  const char *v33;
  unint64_t *v34;
  unint64_t v35;
  double v36;
  void *exception;
  double v38;
  std::logic_error_vtbl *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  double v43;
  std::logic_error_vtbl *v44;
  const char *v45;
  unint64_t *v46;
  unint64_t v47;
  const char *(__cdecl *what)(const std::logic_error *__hidden);
  void (__cdecl *v49)(std::logic_error *__hidden);
  unint64_t *v50;
  unint64_t v51;
  const char *imp;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::logic_error_vtbl *v57;
  const char *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  double v70;
  std::logic_error v71;
  unint64_t *v72;
  unint64_t v73;
  AMCP::Log::Scope_Registry *v74;
  char v75;
  BOOL v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t *buffer_alignments;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD **v87;
  _QWORD *v88;
  _QWORD **v89;
  int v90;
  _QWORD *v91;
  int *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::logic_error v97;
  _QWORD *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  AMCP::Log::Scope_Registry *v113;
  char v114;
  char v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  std::logic_error_vtbl *v119;
  char *v120;
  unint64_t *v121;
  unint64_t v122;
  double v123;
  char v124;
  __int128 v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  std::logic_error_vtbl *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  BOOL v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  std::logic_error *v148;
  std::string *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t host_time;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  std::logic_error v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  double v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  AMCP::Log::Scope_Registry *v242;
  char v243;
  BOOL v244;
  unint64_t *v245;
  unint64_t v246;
  NSObject *v247;
  _opaque_pthread_t *v248;
  mach_port_t v249;
  void *v250;
  NSObject *v251;
  _opaque_pthread_t *v252;
  mach_port_t v253;
  double v254;
  std::logic_error_vtbl *v255;
  unint64_t *v256;
  unint64_t v257;
  double v258;
  void *v259;
  double v260;
  std::logic_error_vtbl *v261;
  unint64_t *v262;
  unint64_t v263;
  double v264;
  NSObject *v265;
  _opaque_pthread_t *v266;
  mach_port_t v267;
  double v268;
  std::logic_error_vtbl *v269;
  const char *v270;
  unint64_t *v271;
  unint64_t v272;
  double v273;
  void *v274;
  double v275;
  std::logic_error_vtbl *v276;
  uint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  double v280;
  NSObject *v281;
  _opaque_pthread_t *v283;
  mach_port_t v284;
  void *v285;
  std::logic_error v286;
  std::__shared_weak_count *v287;
  std::logic_error v288;
  uint64_t v289;
  std::logic_error v290;
  __int128 v291;
  std::logic_error v292;
  __int128 v293;
  __int128 v294;
  std::logic_error v295;
  uint64_t v296;
  std::logic_error v297;
  std::logic_error v298;
  uint64_t v299;
  std::logic_error v300;
  std::logic_error v301;
  std::string *v302;
  std::__shared_weak_count *v303;
  std::string v304;
  std::__shared_weak_count *v305;
  uint64_t v306;
  std::__shared_weak_count *v307;
  uint64_t (**v308)();
  __int128 v309;
  std::logic_error v310;
  uint64_t v311;
  _QWORD *v312[2];
  uint64_t v313;
  std::__shared_weak_count *v314;
  std::logic_error v315;
  void *v316;
  std::logic_error v317;
  uint64_t v318;
  int v319;
  char v320;
  std::string v321;
  std::string *v322;
  std::__shared_weak_count *v323;
  _BYTE buf[24];
  _BYTE v325[30];
  uint64_t v326;

  v326 = *MEMORY[0x1E0C80C00];
  AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v294, *(_QWORD *)(a2 + 72), *(std::__shared_weak_count **)(a2 + 80));
  *(_OWORD *)(a1 + 24) = v294;
  *(_DWORD *)a1 = 2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v294 = 0uLL;
  if (a4 != 2)
  {
    if (a4 != 1)
    {
      if (!a4)
      {
        if (a6)
          std::__throw_bad_variant_access[abi:ne180100]();
        AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v293, *(_QWORD *)(a2 + 72), *(std::__shared_weak_count **)(a2 + 80));
        *(_DWORD *)buf = 2;
        *(_QWORD *)&buf[8] = a5;
        *(_QWORD *)&buf[16] = 0;
        *(_OWORD *)v325 = v293;
        v293 = 0uLL;
        *(_QWORD *)(a1 + 16) = 0;
        *(_OWORD *)a1 = *(_OWORD *)buf;
        std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 24, (__int128 *)v325);
        v12 = *(std::__shared_weak_count **)&v325[8];
        if (*(_QWORD *)&v325[8])
        {
          v13 = (unint64_t *)(*(_QWORD *)&v325[8] + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = (std::__shared_weak_count *)*((_QWORD *)&v293 + 1);
        if (*((_QWORD *)&v293 + 1))
        {
          v16 = (unint64_t *)(*((_QWORD *)&v293 + 1) + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
        v19 = *(_QWORD *)(a1 + 24);
        v20 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)buf = v19;
        *(_QWORD *)&buf[8] = v20;
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(p_shared_owners);
          while (__stxr(v22 + 1, p_shared_owners));
        }
        v23 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 136))(v19);
        v25 = round(sample_time) >= round(*(double *)&v23) || v24 == 0;
        if (v20)
        {
          v26 = (unint64_t *)&v20->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        if (!v25)
        {
          AMCP::Log::Scope_Registry::get(v23);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v28 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            v29 = pthread_self();
            v30 = pthread_mach_thread_np(v29);
            v31 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
            v32 = *(std::logic_error_vtbl **)(a1 + 24);
            v33 = *(const char **)(a1 + 32);
            v315.__vftable = v32;
            v315.__imp_.__imp_ = v33;
            if (v33)
            {
              v34 = (unint64_t *)(v33 + 8);
              do
                v35 = __ldxr(v34);
              while (__stxr(v35 + 1, v34));
            }
            v36 = COERCE_DOUBLE((*((uint64_t (**)(std::logic_error_vtbl *))v32->~logic_error + 17))(v32));
            *(_DWORD *)buf = 67110402;
            *(_DWORD *)&buf[4] = v30;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "Manifest.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 418;
            *(_WORD *)v325 = 2080;
            *(_QWORD *)&v325[2] = "not (anchor_time.get_sample_time() >= anchor_time.get_clock()->get_anchor_time())";
            *(_WORD *)&v325[10] = 2048;
            *(_QWORD *)&v325[12] = vcvtmd_s64_f64(v31);
            *(_WORD *)&v325[20] = 2048;
            *(_QWORD *)&v325[22] = vcvtmd_s64_f64(v36);
            _os_log_error_impl(&dword_1B57BA000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Manifest anchor time should not represent a time before the timebase's anchor time: time(%lld) anchor(%lld)", buf, 0x36u);
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v315);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v295);
          exception = __cxa_allocate_exception(0x40uLL);
          v38 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
          v39 = *(std::logic_error_vtbl **)(a1 + 24);
          v40 = *(_QWORD *)(a1 + 32);
          v298.__vftable = v39;
          v298.__imp_.__imp_ = (const char *)v40;
          if (v40)
          {
            v41 = (unint64_t *)(v40 + 8);
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
          }
          v43 = COERCE_DOUBLE((*((uint64_t (**)(std::logic_error_vtbl *))v39->~logic_error + 17))(v39));
          caulk::make_string((caulk *)"Manifest anchor time should not represent a time before the timebase's anchor time: time(%lld) anchor(%lld)", (uint64_t)&v321, vcvtmd_s64_f64(v38), vcvtmd_s64_f64(v43));
          std::logic_error::logic_error(&v301, &v321);
          v301.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v315, &v301);
          v317 = (std::logic_error)0;
          v318 = 0;
          v319 = -1;
          v315.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v316 = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v315);
          *(_QWORD *)&v325[8] = "DAL::DAL_Time AMCP::Graph::Manifest::calculate_anchor_time(const Manifest_Execution_Cont"
                                "ext &, Anchor_Policy, std::variant<Sample_Time, uint64_t>) const";
          *(_QWORD *)&v325[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
          *(_DWORD *)&v325[24] = 418;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v304.__r_.__value_.__l.__data_);
          v309 = *(_OWORD *)&v304.__r_.__value_.__l.__data_;
          v308 = off_1E69A20A0;
          v310.__vftable = (std::logic_error_vtbl *)v304.__r_.__value_.__r.__words[2];
          memset(&v304, 0, sizeof(v304));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v308);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
        }
      }
      goto LABEL_324;
    }
    AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v292, *(_QWORD *)(a2 + 72), *(std::__shared_weak_count **)(a2 + 80));
    v44 = *(std::logic_error_vtbl **)(a2 + 72);
    v45 = *(const char **)(a2 + 80);
    v295.__vftable = v44;
    v295.__imp_.__imp_ = v45;
    if (v45)
    {
      v46 = (unint64_t *)(v45 + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    v49 = v44[3].~logic_error_0;
    what = v44[3].what;
    v298.__vftable = (std::logic_error_vtbl *)v49;
    v298.__imp_.__imp_ = (const char *)what;
    if (what)
    {
      v50 = (unint64_t *)((char *)what + 8);
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    imp = v292.__imp_.__imp_;
    v286 = v292;
    if (v292.__imp_.__imp_)
    {
      v53 = (unint64_t *)(v292.__imp_.__imp_ + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
      *(_DWORD *)buf = 2;
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = 0;
      *(std::logic_error *)v325 = v286;
      v304.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      v55 = (unint64_t *)(imp + 8);
      *(std::logic_error *)&v304.__r_.__value_.__r.__words[1] = v286;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    else
    {
      *(_DWORD *)buf = 2;
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = 0;
      *(_OWORD *)v325 = (unint64_t)v292.__vftable;
      v304.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      *(_OWORD *)&v304.__r_.__value_.__r.__words[1] = (unint64_t)v292.__vftable;
    }
    v322 = 0;
    v148 = (std::logic_error *)operator new(0x20uLL);
    v148->__vftable = (std::logic_error_vtbl *)&off_1E6985138;
    v148->__imp_.__imp_ = buf;
    v148[1] = v286;
    *(_OWORD *)&v304.__r_.__value_.__r.__words[1] = 0uLL;
    v322 = (std::string *)v148;
    AMCP::Graph::Timebase_Set::for_each(*((_QWORD **)v49 + 2), (uint64_t)&v321);
    v149 = v322;
    if (v322 == &v321)
    {
      v150 = 4;
      v149 = &v321;
    }
    else
    {
      if (!v322)
      {
LABEL_164:
        v151 = mach_absolute_time();
        v301 = v286;
        if (imp)
        {
          v152 = (unint64_t *)(imp + 8);
          do
            v153 = __ldxr(v152);
          while (__stxr(v153 + 1, v152));
        }
        LODWORD(v315.__vftable) = 1;
        v315.__imp_.__imp_ = 0;
        v316 = (void *)v151;
        v287 = (std::__shared_weak_count *)v301.__imp_.__imp_;
        v317 = v301;
        v301.__vftable = 0;
        v301.__imp_.__imp_ = 0;
        boost::operators_impl::operator-((AMCP::DAL::DAL_Time *)&v308, (uint64_t)&v315, (AMCP::DAL::DAL_Time_Delta *)buf);
        if (v287)
        {
          v154 = (unint64_t *)&v287->__shared_owners_;
          do
            v155 = __ldaxr(v154);
          while (__stlxr(v155 - 1, v154));
          if (!v155)
          {
            ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
            std::__shared_weak_count::__release_weak(v287);
          }
        }
        v156 = (std::__shared_weak_count *)v301.__imp_.__imp_;
        if (v301.__imp_.__imp_)
        {
          v157 = (unint64_t *)(v301.__imp_.__imp_ + 8);
          do
            v158 = __ldaxr(v157);
          while (__stlxr(v158 - 1, v157));
          if (!v158)
          {
            ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
            std::__shared_weak_count::__release_weak(v156);
          }
        }
        v159 = *(std::__shared_weak_count **)&v325[8];
        if (*(_QWORD *)&v325[8])
        {
          v160 = (unint64_t *)(*(_QWORD *)&v325[8] + 8);
          do
            v161 = __ldaxr(v160);
          while (__stlxr(v161 - 1, v160));
          if (!v161)
          {
            ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
            std::__shared_weak_count::__release_weak(v159);
          }
        }
        v162 = (std::__shared_weak_count *)v298.__imp_.__imp_;
        if (v298.__imp_.__imp_)
        {
          v163 = (unint64_t *)(v298.__imp_.__imp_ + 8);
          do
            v164 = __ldaxr(v163);
          while (__stlxr(v164 - 1, v163));
          if (!v164)
          {
            ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
            std::__shared_weak_count::__release_weak(v162);
          }
        }
        v165 = (std::__shared_weak_count *)v295.__imp_.__imp_;
        if (v295.__imp_.__imp_)
        {
          v166 = (unint64_t *)(v295.__imp_.__imp_ + 8);
          do
            v167 = __ldaxr(v166);
          while (__stlxr(v167 - 1, v166));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
            std::__shared_weak_count::__release_weak(v165);
          }
        }
        v168 = (std::__shared_weak_count *)v292.__imp_.__imp_;
        if (v292.__imp_.__imp_)
        {
          v169 = (unint64_t *)(v292.__imp_.__imp_ + 8);
          do
            v170 = __ldaxr(v169);
          while (__stlxr(v170 - 1, v169));
          if (!v170)
          {
            ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
            std::__shared_weak_count::__release_weak(v168);
          }
        }
        if (a6 != 1)
          std::__throw_bad_variant_access[abi:ne180100]();
        host_time = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)&v308);
        AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v291, *(_QWORD *)(a2 + 72), *(std::__shared_weak_count **)(a2 + 80));
        if (a5 <= host_time)
          v172 = host_time;
        else
          v172 = a5;
        *(_DWORD *)buf = 1;
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)&buf[16] = v172;
        *(_OWORD *)v325 = v291;
        v291 = 0uLL;
        *(_OWORD *)a1 = *(unint64_t *)buf;
        *(_QWORD *)(a1 + 16) = v172;
        std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 24, (__int128 *)v325);
        v173 = *(std::__shared_weak_count **)&v325[8];
        if (*(_QWORD *)&v325[8])
        {
          v174 = (unint64_t *)(*(_QWORD *)&v325[8] + 8);
          do
            v175 = __ldaxr(v174);
          while (__stlxr(v175 - 1, v174));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
        }
        v176 = (std::__shared_weak_count *)*((_QWORD *)&v291 + 1);
        if (*((_QWORD *)&v291 + 1))
        {
          v177 = (unint64_t *)(*((_QWORD *)&v291 + 1) + 8);
          do
            v178 = __ldaxr(v177);
          while (__stlxr(v178 - 1, v177));
          if (!v178)
          {
            ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
            std::__shared_weak_count::__release_weak(v176);
          }
        }
        AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
        AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)a1);
        kdebug_trace();
        v179 = (std::__shared_weak_count *)v310.__imp_.__imp_;
        if (v310.__imp_.__imp_)
        {
          v180 = (unint64_t *)(v310.__imp_.__imp_ + 8);
          do
            v181 = __ldaxr(v180);
          while (__stlxr(v181 - 1, v180));
          if (!v181)
          {
            ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
            std::__shared_weak_count::__release_weak(v179);
          }
        }
        goto LABEL_324;
      }
      v150 = 5;
    }
    (*(void (**)(void))(v149->__r_.__value_.__r.__words[0] + 8 * v150))();
    goto LABEL_164;
  }
  AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v313, *(_QWORD *)(a2 + 72), *(std::__shared_weak_count **)(a2 + 80));
  v57 = *(std::logic_error_vtbl **)(a2 + 72);
  v58 = *(const char **)(a2 + 80);
  v315.__vftable = v57;
  v315.__imp_.__imp_ = v58;
  if (v58)
  {
    v59 = (unint64_t *)(v58 + 8);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  v61 = (uint64_t)v57[2].~logic_error;
  v62 = (std::__shared_weak_count *)v57[2].~logic_error_0;
  *(_QWORD *)buf = v61;
  *(_QWORD *)&buf[8] = v62;
  if (v62)
  {
    v63 = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  AMCP::Graph::Synchronized_Mixer_Manager::get_anchor_time(&v288, v61, &v313);
  if (v62)
  {
    v65 = (unint64_t *)&v62->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v67 = (std::__shared_weak_count *)v315.__imp_.__imp_;
  if (v315.__imp_.__imp_)
  {
    v68 = (unint64_t *)(v315.__imp_.__imp_ + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v288);
  v71 = v290;
  *(std::logic_error *)buf = v290;
  if (v290.__imp_.__imp_)
  {
    v72 = (unint64_t *)(v290.__imp_.__imp_ + 8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v74 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(std::logic_error_vtbl *))v71.~logic_error + 17))(v71.__vftable);
  v76 = round(v70) >= round(*(double *)&v74) || v75 == 0;
  if (v71.__imp_.__imp_)
  {
    v77 = (unint64_t *)(v71.__imp_.__imp_ + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      (*(void (**)(const char *))(*(_QWORD *)v71.__imp_.__imp_ + 16))(v71.__imp_.__imp_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v71.__imp_.__imp_);
    }
  }
  if (!v76)
  {
    AMCP::Log::Scope_Registry::get(v74);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v251 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v251, OS_LOG_TYPE_ERROR))
    {
      v252 = pthread_self();
      v253 = pthread_mach_thread_np(v252);
      v254 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v288);
      v255 = v290.__vftable;
      v315 = v290;
      if (v290.__imp_.__imp_)
      {
        v256 = (unint64_t *)(v290.__imp_.__imp_ + 8);
        do
          v257 = __ldxr(v256);
        while (__stxr(v257 + 1, v256));
      }
      v258 = COERCE_DOUBLE((*((uint64_t (**)(std::logic_error_vtbl *))v255->~logic_error + 17))(v255));
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v253;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Manifest.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 448;
      *(_WORD *)v325 = 2080;
      *(_QWORD *)&v325[2] = "not (anchor_time.get_sample_time() >= anchor_time.get_clock()->get_anchor_time())";
      *(_WORD *)&v325[10] = 2048;
      *(_QWORD *)&v325[12] = vcvtmd_s64_f64(v254);
      *(_WORD *)&v325[20] = 2048;
      *(_QWORD *)&v325[22] = vcvtmd_s64_f64(v258);
      _os_log_error_impl(&dword_1B57BA000, v251, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Manifest anchor time should not represent a time before the timebase's anchor time: time(%lld) anchor(%lld)", buf, 0x36u);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v315);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v295);
    v259 = __cxa_allocate_exception(0x40uLL);
    v260 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v288);
    v261 = v290.__vftable;
    v298 = v290;
    if (v290.__imp_.__imp_)
    {
      v262 = (unint64_t *)(v290.__imp_.__imp_ + 8);
      do
        v263 = __ldxr(v262);
      while (__stxr(v263 + 1, v262));
    }
    v264 = COERCE_DOUBLE((*((uint64_t (**)(std::logic_error_vtbl *))v261->~logic_error + 17))(v261));
    caulk::make_string((caulk *)"Manifest anchor time should not represent a time before the timebase's anchor time: time(%lld) anchor(%lld)", (uint64_t)&v321, vcvtmd_s64_f64(v260), vcvtmd_s64_f64(v264));
    std::logic_error::logic_error(&v301, &v321);
    v301.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v315, &v301);
    v317 = (std::logic_error)0;
    v318 = 0;
    v319 = -1;
    v315.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v316 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v315);
    *(_QWORD *)&v325[8] = "DAL::DAL_Time AMCP::Graph::Manifest::calculate_anchor_time_from_current_time(const Manifest_Ex"
                          "ecution_Context &) const";
    *(_QWORD *)&v325[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
    *(_DWORD *)&v325[24] = 448;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v304.__r_.__value_.__l.__data_);
    v309 = *(_OWORD *)&v304.__r_.__value_.__l.__data_;
    v308 = off_1E69A20A0;
    v310.__vftable = (std::logic_error_vtbl *)v304.__r_.__value_.__r.__words[2];
    memset(&v304, 0, sizeof(v304));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v308);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v259, (uint64_t)buf);
  }
  if (((uint64_t)v288.__vftable & 0xFFFFFFFE) == 2)
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v288);
  v79 = *(_QWORD *)(a2 + 72);
  v80 = *(std::__shared_weak_count **)(a2 + 80);
  *(_QWORD *)buf = v79;
  *(_QWORD *)&buf[8] = v80;
  if (v80)
  {
    v81 = (unint64_t *)&v80->__shared_owners_;
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
  }
  buffer_alignments = AMCP::Graph::Manifest_Inventory::get_buffer_alignments(&v311, *(_QWORD **)(v79 + 24));
  if (v80)
  {
    v84 = (unint64_t *)&v80->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v86 = v312[0];
  if (v312[0])
  {
    v87 = v312;
    do
    {
      v88 = v86;
      v89 = v87;
      v90 = *((_DWORD *)v86 + 7);
      v91 = v86 + 1;
      if (v90 >= 1)
      {
        v91 = v88;
        v87 = (_QWORD **)v88;
      }
      v86 = (_QWORD *)*v91;
    }
    while (v86);
    if (v87 != v312)
    {
      v92 = (int *)(v90 >= 1 ? v88 : v89);
      if (v92[7] <= 1)
      {
        v93 = *(_QWORD *)(a2 + 72);
        v94 = *(std::__shared_weak_count **)(a2 + 80);
        v306 = v93;
        v307 = v94;
        if (v94)
        {
          v95 = (unint64_t *)&v94->__shared_owners_;
          do
            v96 = __ldxr(v95);
          while (__stxr(v96 + 1, v95));
        }
        v97 = (std::logic_error)0;
        v298 = (std::logic_error)0;
        v98 = *(_QWORD **)(v93 + 24);
        if (v98)
        {
          v99 = 0;
          do
          {
            v100 = v98[12];
            if (*(_DWORD *)(v100 + 156) == 1)
            {
              v101 = *(_QWORD *)(v100 + 128);
              v102 = *(std::__shared_weak_count **)(v100 + 136);
              *(_QWORD *)buf = v101;
              *(_QWORD *)&buf[8] = v102;
              if (v102)
              {
                v103 = (unint64_t *)&v102->__shared_owners_;
                do
                  v104 = __ldxr(v103);
                while (__stxr(v104 + 1, v103));
              }
              v105 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v101 + 144))(v101, 1);
              if (v102)
              {
                v106 = (unint64_t *)&v102->__shared_owners_;
                do
                  v107 = __ldaxr(v106);
                while (__stlxr(v107 - 1, v106));
                if (!v107)
                {
                  ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                  std::__shared_weak_count::__release_weak(v102);
                }
              }
              v108 = v98[12];
              v109 = *(_QWORD *)(v108 + 128);
              v110 = *(std::__shared_weak_count **)(v108 + 136);
              *(_QWORD *)buf = v109;
              *(_QWORD *)&buf[8] = v110;
              if (v110)
              {
                v111 = (unint64_t *)&v110->__shared_owners_;
                do
                  v112 = __ldxr(v111);
                while (__stxr(v112 + 1, v111));
              }
              v113 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 136))(v109);
              v115 = v114;
              if (v110)
              {
                v116 = (unint64_t *)&v110->__shared_owners_;
                do
                  v117 = __ldaxr(v116);
                while (__stlxr(v117 - 1, v116));
                if (!v117)
                {
                  ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                  std::__shared_weak_count::__release_weak(v110);
                }
              }
              if (!v115)
              {
                AMCP::Log::Scope_Registry::get(v113);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
                v247 = **(NSObject ***)buf;
                std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
                if (os_log_type_enabled(v247, OS_LOG_TYPE_ERROR))
                {
                  v248 = pthread_self();
                  v249 = pthread_mach_thread_np(v248);
                  *(_DWORD *)buf = 67109890;
                  *(_DWORD *)&buf[4] = v249;
                  *(_WORD *)&buf[8] = 2080;
                  *(_QWORD *)&buf[10] = "Manifest_Inventory.cpp";
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = 582;
                  *(_WORD *)v325 = 2080;
                  *(_QWORD *)&v325[2] = "not (b.second->get_timebase()->get_anchor_time().has_value())";
                  _os_log_error_impl(&dword_1B57BA000, v247, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Input timebase has been started but does not have an anchor time.", buf, 0x22u);
                }
                AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v320);
                v250 = __cxa_allocate_exception(0x40uLL);
                caulk::make_string((caulk *)"Input timebase has been started but does not have an anchor time.", (uint64_t)&v304);
                std::logic_error::logic_error(&v295, &v304);
                v295.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
                std::logic_error::logic_error(&v315, &v295);
                v317 = (std::logic_error)0;
                v318 = 0;
                v319 = -1;
                v315.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
                v316 = &unk_1E69A1230;
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v315);
                *(_QWORD *)&v325[8] = "DAL::DAL_Time AMCP::Graph::Manifest_Inventory::get_latest_input_anchor_time() const";
                *(_QWORD *)&v325[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
                *(_DWORD *)&v325[24] = 582;
                applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v301);
                *(std::logic_error *)&v321.__r_.__value_.__r.__words[1] = v301;
                v321.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
                v322 = v302;
                v301.__vftable = 0;
                v301.__imp_.__imp_ = 0;
                v302 = 0;
                boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v321);
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v250, (uint64_t)buf);
              }
              v118 = v98[12];
              v119 = *(std::logic_error_vtbl **)(v118 + 128);
              v120 = *(char **)(v118 + 136);
              v315.__vftable = v119;
              v315.__imp_.__imp_ = v120;
              if (v120)
              {
                v121 = (unint64_t *)(v120 + 8);
                do
                  v122 = __ldxr(v121);
                while (__stxr(v122 + 1, v121));
              }
              v123 = COERCE_DOUBLE((*((uint64_t (**)(std::logic_error_vtbl *))v119->~logic_error + 17))(v119));
              if (!v124)
                std::__throw_bad_optional_access[abi:ne180100]();
              v125 = *(_OWORD *)(v98[12] + 128);
              v126 = *(_QWORD *)(v98[12] + 136);
              if (v126)
              {
                v127 = (unint64_t *)(v126 + 8);
                do
                  v128 = __ldxr(v127);
                while (__stxr(v128 + 1, v127));
              }
              *(_DWORD *)buf = 2;
              *(double *)&buf[8] = (double)(HIDWORD(v105) + v105) + v123;
              *(_QWORD *)&buf[16] = 0;
              *(_OWORD *)v325 = v125;
              if (v120)
              {
                v129 = (unint64_t *)(v120 + 8);
                do
                  v130 = __ldaxr(v129);
                while (__stlxr(v130 - 1, v129));
                if (!v130)
                {
                  (*(void (**)(char *))(*(_QWORD *)v120 + 16))(v120);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v120);
                }
              }
              buffer_alignments = (uint64_t *)AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)buf);
              if (v99 <= buffer_alignments)
              {
                buffer_alignments = (uint64_t *)AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)buf);
                v99 = buffer_alignments;
                v131 = v98[12];
                v133 = *(std::logic_error_vtbl **)(v131 + 128);
                v132 = *(_QWORD *)(v131 + 136);
                if (v132)
                {
                  v134 = (unint64_t *)(v132 + 8);
                  do
                    v135 = __ldxr(v134);
                  while (__stxr(v135 + 1, v134));
                }
                v136 = (std::__shared_weak_count *)v298.__imp_.__imp_;
                v298.__vftable = v133;
                v298.__imp_.__imp_ = (const char *)v132;
                if (v136)
                {
                  v137 = (unint64_t *)&v136->__shared_owners_;
                  do
                    v138 = __ldaxr(v137);
                  while (__stlxr(v138 - 1, v137));
                  if (!v138)
                  {
                    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                    std::__shared_weak_count::__release_weak(v136);
                  }
                }
              }
              v139 = *(std::__shared_weak_count **)&v325[8];
              if (*(_QWORD *)&v325[8])
              {
                v140 = (unint64_t *)(*(_QWORD *)&v325[8] + 8);
                do
                  v141 = __ldaxr(v140);
                while (__stlxr(v141 - 1, v140));
                if (!v141)
                {
                  ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                  std::__shared_weak_count::__release_weak(v139);
                }
              }
            }
            v98 = (_QWORD *)*v98;
          }
          while (v98);
          if (v298.__vftable)
            v142 = 1;
          else
            v142 = v99 == 0;
          if (!v142)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)buffer_alignments);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v281 = **(NSObject ***)buf;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
            if (os_log_type_enabled(v281, OS_LOG_TYPE_ERROR))
            {
              v283 = pthread_self();
              v284 = pthread_mach_thread_np(v283);
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&buf[4] = v284;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = "Manifest_Inventory.cpp";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 595;
              *(_WORD *)v325 = 2080;
              *(_QWORD *)&v325[2] = "not (timebase != nullptr || latest_anchor == 0)";
              _os_log_error_impl(&dword_1B57BA000, v281, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Did not find an input aligned timebase", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v320);
            v285 = __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"Did not find an input aligned timebase", (uint64_t)&v304);
            std::logic_error::logic_error(&v295, &v304);
            v295.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
            std::logic_error::logic_error(&v315, &v295);
            v317 = (std::logic_error)0;
            v318 = 0;
            v319 = -1;
            v315.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
            v316 = &unk_1E69A1230;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v315);
            *(_QWORD *)&v325[8] = "DAL::DAL_Time AMCP::Graph::Manifest_Inventory::get_latest_input_anchor_time() const";
            *(_QWORD *)&v325[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
            *(_DWORD *)&v325[24] = 595;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v301);
            *(std::logic_error *)&v321.__r_.__value_.__r.__words[1] = v301;
            v321.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
            v322 = v302;
            v301.__vftable = 0;
            v301.__imp_.__imp_ = 0;
            v302 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v321);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v285, (uint64_t)buf);
          }
          v143 = (std::__shared_weak_count *)v298.__imp_.__imp_;
          v97 = v298;
          if (v298.__imp_.__imp_)
          {
            v144 = (unint64_t *)(v298.__imp_.__imp_ + 8);
            do
              v145 = __ldxr(v144);
            while (__stxr(v145 + 1, v144));
            LODWORD(v308) = 1;
            *(_QWORD *)&v309 = 0;
            *((_QWORD *)&v309 + 1) = v99;
            v310 = v97;
            v146 = (unint64_t *)&v143->__shared_owners_;
            do
              v147 = __ldaxr(v146);
            while (__stlxr(v147 - 1, v146));
            if (!v147)
            {
              ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
              std::__shared_weak_count::__release_weak(v143);
            }
            goto LABEL_218;
          }
        }
        else
        {
          v99 = 0;
        }
        LODWORD(v308) = 1;
        *(_QWORD *)&v309 = 0;
        *((_QWORD *)&v309 + 1) = v99;
        v310 = v97;
LABEL_218:
        if (v94)
        {
          v182 = (unint64_t *)&v94->__shared_owners_;
          do
            v183 = __ldaxr(v182);
          while (__stlxr(v183 - 1, v182));
          if (!v183)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        AMCP::DAL::DAL_Time::translate_time((uint64_t)&v315, (AMCP::DAL::DAL_Time *)&v308, &v313);
        v185 = v313;
        v184 = v314;
        if (v314)
        {
          v186 = (unint64_t *)&v314->__shared_owners_;
          do
            v187 = __ldxr(v186);
          while (__stxr(v187 + 1, v186));
        }
        buf[0] = 0;
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)&buf[16] = 0;
        *(_QWORD *)v325 = v185;
        *(_QWORD *)&v325[8] = v184;
        *(_DWORD *)&v325[16] = 0;
        AMCP::Graph::Manifest_Counter::start((uint64_t)buf, (AMCP::DAL::DAL_Time *)&v288);
        v188 = (std::__shared_weak_count *)v310.__imp_.__imp_;
        *(std::logic_error *)&v304.__r_.__value_.__l.__data_ = v310;
        if (v310.__imp_.__imp_)
        {
          v189 = (unint64_t *)(v310.__imp_.__imp_ + 8);
          do
            v190 = __ldxr(v189);
          while (__stxr(v190 + 1, v189));
        }
        AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)&v321, (AMCP::DAL::DAL_Time_Delta *)a3, (uint64_t *)&v304);
        if (v188)
        {
          v191 = (unint64_t *)&v188->__shared_owners_;
          do
            v192 = __ldaxr(v191);
          while (__stlxr(v192 - 1, v191));
          if (!v192)
          {
            ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
            std::__shared_weak_count::__release_weak(v188);
          }
        }
        v193 = (std::__shared_weak_count *)v310.__imp_.__imp_;
        v301 = v310;
        if (v310.__imp_.__imp_)
        {
          v194 = (unint64_t *)(v310.__imp_.__imp_ + 8);
          do
            v195 = __ldxr(v194);
          while (__stxr(v195 + 1, v194));
        }
        AMCP::Graph::Manifest_Counter::calculate_buffer_start((AMCP::DAL::DAL_Time *)&v304, (uint64_t)buf, (uint64_t *)&v301, 1, (AMCP::DAL::DAL_Time_Delta *)&v321, a3[10]);
        if (v193)
        {
          v196 = (unint64_t *)&v193->__shared_owners_;
          do
            v197 = __ldaxr(v196);
          while (__stlxr(v197 - 1, v196));
          if (!v197)
          {
            ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
            std::__shared_weak_count::__release_weak(v193);
          }
        }
        AMCP::DAL::DAL_Time::translate_time((uint64_t)&v301, (AMCP::DAL::DAL_Time *)&v304, &v313);
        if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v301, (AMCP::DAL::DAL_Time *)&v315))
        {
          AMCP::DAL::DAL_Time::operator-((uint64_t)&v295, (AMCP::DAL::DAL_Time *)&v301, (AMCP::DAL::DAL_Time *)&v315);
          v298 = v295;
          v299 = v296;
          v198 = (std::__shared_weak_count *)v297.__imp_.__imp_;
          v300 = v297;
          if (v297.__imp_.__imp_)
          {
            v199 = (unint64_t *)(v297.__imp_.__imp_ + 8);
            do
              v200 = __ldxr(v199);
            while (__stxr(v200 + 1, v199));
          }
          if (((uint64_t)v298.__vftable & 1) != 0)
            v299 = (uint64_t)((double)v299 * 1.10000002);
          if (((uint64_t)v298.__vftable & 2) != 0)
            *(double *)&v298.__imp_.__imp_ = *(double *)&v298.__imp_.__imp_ * 1.10000002;
          if (v198)
          {
            v201 = (unint64_t *)&v198->__shared_owners_;
            do
              v202 = __ldaxr(v201);
            while (__stlxr(v202 - 1, v201));
            if (!v202)
            {
              ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
              std::__shared_weak_count::__release_weak(v198);
            }
          }
          boost::operators_impl::operator-((AMCP::DAL::DAL_Time *)&v295, (uint64_t)&v288, (AMCP::DAL::DAL_Time_Delta *)&v298);
          v288 = v295;
          v289 = v296;
          v203 = v297;
          v297 = (std::logic_error)0;
          v204 = (std::__shared_weak_count *)v290.__imp_.__imp_;
          v290 = v203;
          if (v204)
          {
            v205 = (unint64_t *)&v204->__shared_owners_;
            do
              v206 = __ldaxr(v205);
            while (__stlxr(v206 - 1, v205));
            if (!v206)
            {
              ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
              std::__shared_weak_count::__release_weak(v204);
            }
          }
          v207 = (std::__shared_weak_count *)v297.__imp_.__imp_;
          if (v297.__imp_.__imp_)
          {
            v208 = (unint64_t *)(v297.__imp_.__imp_ + 8);
            do
              v209 = __ldaxr(v208);
            while (__stlxr(v209 - 1, v208));
            if (!v209)
            {
              ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
              std::__shared_weak_count::__release_weak(v207);
            }
          }
          v210 = (std::__shared_weak_count *)v300.__imp_.__imp_;
          if (v300.__imp_.__imp_)
          {
            v211 = (unint64_t *)(v300.__imp_.__imp_ + 8);
            do
              v212 = __ldaxr(v211);
            while (__stlxr(v212 - 1, v211));
            if (!v212)
            {
              ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
              std::__shared_weak_count::__release_weak(v210);
            }
          }
        }
        v213 = v303;
        if (v303)
        {
          v214 = (unint64_t *)&v303->__shared_owners_;
          do
            v215 = __ldaxr(v214);
          while (__stlxr(v215 - 1, v214));
          if (!v215)
          {
            ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
            std::__shared_weak_count::__release_weak(v213);
          }
        }
        v216 = v305;
        if (v305)
        {
          v217 = (unint64_t *)&v305->__shared_owners_;
          do
            v218 = __ldaxr(v217);
          while (__stlxr(v218 - 1, v217));
          if (!v218)
          {
            ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
            std::__shared_weak_count::__release_weak(v216);
          }
        }
        v219 = v323;
        if (v323)
        {
          v220 = (unint64_t *)&v323->__shared_owners_;
          do
            v221 = __ldaxr(v220);
          while (__stlxr(v221 - 1, v220));
          if (!v221)
          {
            ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
            std::__shared_weak_count::__release_weak(v219);
          }
        }
        v222 = *(std::__shared_weak_count **)&v325[8];
        if (*(_QWORD *)&v325[8])
        {
          v223 = (unint64_t *)(*(_QWORD *)&v325[8] + 8);
          do
            v224 = __ldaxr(v223);
          while (__stlxr(v224 - 1, v223));
          if (!v224)
          {
            ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
            std::__shared_weak_count::__release_weak(v222);
          }
        }
        v225 = (std::__shared_weak_count *)v317.__imp_.__imp_;
        if (v317.__imp_.__imp_)
        {
          v226 = (unint64_t *)(v317.__imp_.__imp_ + 8);
          do
            v227 = __ldaxr(v226);
          while (__stlxr(v227 - 1, v226));
          if (!v227)
          {
            ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
            std::__shared_weak_count::__release_weak(v225);
          }
        }
        v228 = (std::__shared_weak_count *)v310.__imp_.__imp_;
        if (v310.__imp_.__imp_)
        {
          v229 = (unint64_t *)(v310.__imp_.__imp_ + 8);
          do
            v230 = __ldaxr(v229);
          while (__stlxr(v230 - 1, v229));
          if (!v230)
          {
            ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
            std::__shared_weak_count::__release_weak(v228);
          }
        }
      }
    }
  }
  if (((uint64_t)v288.__vftable & 0xFFFFFFFE) == 2)
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v288);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v312[0]);
  v231 = v314;
  if (v314)
  {
    v232 = (unint64_t *)&v314->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  *(std::logic_error *)a1 = v288;
  *(_QWORD *)(a1 + 16) = v289;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 24, (__int128 *)&v290);
  v234 = (std::__shared_weak_count *)v290.__imp_.__imp_;
  if (v290.__imp_.__imp_)
  {
    v235 = (unint64_t *)(v290.__imp_.__imp_ + 8);
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
  v237 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
  v238 = *(_QWORD *)(a1 + 24);
  v239 = *(std::__shared_weak_count **)(a1 + 32);
  *(_QWORD *)buf = v238;
  *(_QWORD *)&buf[8] = v239;
  if (v239)
  {
    v240 = (unint64_t *)&v239->__shared_owners_;
    do
      v241 = __ldxr(v240);
    while (__stxr(v241 + 1, v240));
  }
  v242 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v238 + 136))(v238);
  v244 = round(v237) >= round(*(double *)&v242) || v243 == 0;
  if (v239)
  {
    v245 = (unint64_t *)&v239->__shared_owners_;
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 - 1, v245));
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  if (!v244)
  {
    AMCP::Log::Scope_Registry::get(v242);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v265 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v265, OS_LOG_TYPE_ERROR))
    {
      v266 = pthread_self();
      v267 = pthread_mach_thread_np(v266);
      v268 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
      v269 = *(std::logic_error_vtbl **)(a1 + 24);
      v270 = *(const char **)(a1 + 32);
      v315.__vftable = v269;
      v315.__imp_.__imp_ = v270;
      if (v270)
      {
        v271 = (unint64_t *)(v270 + 8);
        do
          v272 = __ldxr(v271);
        while (__stxr(v272 + 1, v271));
      }
      v273 = COERCE_DOUBLE((*((uint64_t (**)(std::logic_error_vtbl *))v269->~logic_error + 17))(v269));
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v267;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Manifest.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 434;
      *(_WORD *)v325 = 2080;
      *(_QWORD *)&v325[2] = "not (anchor_time.get_sample_time() >= anchor_time.get_clock()->get_anchor_time())";
      *(_WORD *)&v325[10] = 2048;
      *(_QWORD *)&v325[12] = vcvtmd_s64_f64(v268);
      *(_WORD *)&v325[20] = 2048;
      *(_QWORD *)&v325[22] = vcvtmd_s64_f64(v273);
      _os_log_error_impl(&dword_1B57BA000, v265, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Manifest anchor time should not represent a time before the timebase's anchor time: time(%lld) anchor(%lld)", buf, 0x36u);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v315);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v295);
    v274 = __cxa_allocate_exception(0x40uLL);
    v275 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
    v276 = *(std::logic_error_vtbl **)(a1 + 24);
    v277 = *(_QWORD *)(a1 + 32);
    v298.__vftable = v276;
    v298.__imp_.__imp_ = (const char *)v277;
    if (v277)
    {
      v278 = (unint64_t *)(v277 + 8);
      do
        v279 = __ldxr(v278);
      while (__stxr(v279 + 1, v278));
    }
    v280 = COERCE_DOUBLE((*((uint64_t (**)(std::logic_error_vtbl *))v276->~logic_error + 17))(v276));
    caulk::make_string((caulk *)"Manifest anchor time should not represent a time before the timebase's anchor time: time(%lld) anchor(%lld)", (uint64_t)&v321, vcvtmd_s64_f64(v275), vcvtmd_s64_f64(v280));
    std::logic_error::logic_error(&v301, &v321);
    v301.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v315, &v301);
    v317 = (std::logic_error)0;
    v318 = 0;
    v319 = -1;
    v315.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v316 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v315);
    *(_QWORD *)&v325[8] = "DAL::DAL_Time AMCP::Graph::Manifest::calculate_anchor_time(const Manifest_Execution_Context &,"
                          " Anchor_Policy, std::variant<Sample_Time, uint64_t>) const";
    *(_QWORD *)&v325[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
    *(_DWORD *)&v325[24] = 434;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v304.__r_.__value_.__l.__data_);
    v309 = *(_OWORD *)&v304.__r_.__value_.__l.__data_;
    v308 = off_1E69A20A0;
    v310.__vftable = (std::logic_error_vtbl *)v304.__r_.__value_.__r.__words[2];
    memset(&v304, 0, sizeof(v304));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v308);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v274, (uint64_t)buf);
  }
LABEL_324:
  if ((*(_DWORD *)a1 & 0xFFFFFFFE) == 2)
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
}

void sub_1B5ABFC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)a58);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v60);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest::get_master_timebase(AMCP::Graph::Manifest *this, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)this = *(_QWORD *)(a2 + 96);
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  if (a3)
  {
    v9 = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

_QWORD *std::__function::__func<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6985138;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void std::__function::__func<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6985138;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E6985138;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

_QWORD *std::__function::__func<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = result[1];
  *a2 = &off_1E6985138;
  a2[1] = v2;
  v3 = result[3];
  a2[2] = result[2];
  a2[3] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
}

void std::__function::__func<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

void std::__function::__func<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::operator()(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unsigned int v7;
  __n128 v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  AMCP::DAL::DAL_Time_Delta *v13;
  _BOOL4 v14;
  AMCP::DAL::DAL_Time_Delta *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  _BYTE v28[32];
  std::__shared_weak_count *v29;
  int v30;
  double v31;
  uint64_t v32;
  __int128 v33;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v3 + 1);
  if (*((_QWORD *)&v3 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v3 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v27 = v3;
  v7 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 184))();
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v30 = 2;
    v31 = (double)v7;
    v32 = 0;
    v33 = v27;
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      v8.n128_f64[0] = (double)v7;
      ((void (*)(std::__shared_weak_count *, __n128))v4->__on_zero_shared)(v4, v8);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v30 = 2;
    v31 = (double)v7;
    v32 = 0;
    v33 = v27;
  }
  AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)v28, (AMCP::DAL::DAL_Time_Delta *)&v30, (uint64_t *)(a1 + 16));
  v13 = *(AMCP::DAL::DAL_Time_Delta **)(a1 + 8);
  v14 = AMCP::DAL::DAL_Time_Delta::operator<(v13, (uint64_t)v28);
  if (v14)
    v15 = (AMCP::DAL::DAL_Time_Delta *)v28;
  else
    v15 = v13;
  v16 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v16 = *(_DWORD *)v15;
  *(_QWORD *)(v16 + 8) = *((_QWORD *)v15 + 1);
  *(_QWORD *)(v16 + 16) = *((_QWORD *)v15 + 2);
  v17 = *((_QWORD *)v15 + 3);
  v18 = (uint64_t *)&v29;
  if (!v14)
    v18 = (uint64_t *)((char *)v13 + 32);
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(v16 + 24), v17, *v18);
  v19 = v29;
  if (v29)
  {
    v20 = (unint64_t *)&v29->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (!*((_QWORD *)&v33 + 1))
    goto LABEL_26;
  v23 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (!v4)
      return;
  }
  else
  {
LABEL_26:
    if (!v4)
      return;
  }
  v25 = (unint64_t *)&v4->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1B5AC0958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  if (a15)
  {
    p_shared_owners = (unint64_t *)&a15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v16);
  if (v15)
  {
    v20 = (unint64_t *)&v15->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP5GraphL38get_earliest_start_time_across_devicesENSt3__110shared_ptrINS0_8TimebaseEEERKNS2_INS0_12Timebase_SetEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::target_type()
{
}

std::string *AMCP::Graph::Manifest::setup_processing(AMCP::Log::Scope_Registry *a1, AMCP::DAL::DAL_Time_Delta *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  std::logic_error_vtbl *v13;
  unint64_t *v14;
  unint64_t v15;
  BOOL v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v29;
  AMCP::Log::Scope_Registry *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::logic_error_vtbl *v36;
  char *v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *p_what;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  int v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  __int128 v55;
  AMCP::DAL::Ring_Buffer_Base *v56;
  _QWORD *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  AMCP::DAL::Ring_Buffer_Base *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t **v76;
  uint64_t *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t *v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  unsigned int v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  const char *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *imp;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  AMCP::Log::Scope_Registry *v140;
  uint64_t v141;
  _QWORD *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  _QWORD *size;
  std::string::size_type v150;
  std::string::size_type v151;
  __int128 v152;
  int64x2_t v153;
  std::string::size_type v154;
  unsigned int *v155;
  unsigned int *j;
  _QWORD *v157;
  std::string::size_type v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  std::string::size_type v162;
  uint64_t v163;
  unint64_t v164;
  int64_t v165;
  unint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  __int128 v170;
  unint64_t *v171;
  unint64_t v172;
  _QWORD *v173;
  std::string::size_type v174;
  std::string::size_type v175;
  __int128 v176;
  int64x2_t v177;
  std::string::size_type v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE *v187;
  AMCP::Log::Scope_Registry *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  AMCP::Log::Scope_Registry *v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::string *v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  AMCP::Log::Scope_Registry *v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t *v203;
  uint64_t v204;
  AMCP::Graph::Timebase_Set *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  AMCP::Log::Scope_Registry *v209;
  int v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  NSObject *v214;
  unint64_t *v215;
  unint64_t v216;
  _opaque_pthread_t *v217;
  mach_port_t v218;
  std::__shared_weak_count *v220;
  NSObject *v221;
  unint64_t *v222;
  unint64_t v223;
  _opaque_pthread_t *v224;
  mach_port_t v225;
  std::logic_error *v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  std::logic_error v230;
  std::__shared_weak_count *v231;
  NSObject *v232;
  unint64_t *v233;
  unint64_t v234;
  _opaque_pthread_t *v235;
  mach_port_t v236;
  std::logic_error *v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  std::logic_error v241;
  std::__shared_weak_count *v242;
  NSObject *v243;
  unint64_t *v244;
  unint64_t v245;
  _opaque_pthread_t *v246;
  mach_port_t v247;
  std::logic_error *v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  std::logic_error v252;
  std::__shared_weak_count *v253;
  NSObject *v254;
  unint64_t *v255;
  unint64_t v256;
  _opaque_pthread_t *v257;
  mach_port_t v258;
  std::logic_error *v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  std::logic_error v263;
  std::__shared_weak_count *v264;
  NSObject *v265;
  unint64_t *v266;
  unint64_t v267;
  _opaque_pthread_t *v268;
  mach_port_t v269;
  std::logic_error *v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  std::logic_error v274;
  NSObject *v275;
  _opaque_pthread_t *v276;
  mach_port_t v277;
  void *exception;
  NSObject *v279;
  _opaque_pthread_t *v280;
  mach_port_t v281;
  void *v282;
  NSObject *v283;
  _opaque_pthread_t *v284;
  mach_port_t v285;
  void *v286;
  NSObject *v287;
  _opaque_pthread_t *v288;
  mach_port_t v289;
  void *v290;
  NSObject *v291;
  _opaque_pthread_t *v292;
  mach_port_t v293;
  void *v294;
  std::__shared_weak_count *v295;
  NSObject *v296;
  unint64_t *v297;
  unint64_t v298;
  _opaque_pthread_t *v299;
  mach_port_t v300;
  std::logic_error *v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  std::logic_error v305;
  uint64_t v306;
  AMCP::DAL::DAL_Time_Delta *v308;
  AMCP::Log::Scope_Registry *v309;
  uint64_t **i;
  AMCP::Graph::Manifest_Inventory *v311;
  std::logic_error v312;
  std::string v313;
  uint64_t v314;
  std::logic_error v315;
  uint64_t v316;
  _BYTE v317[24];
  std::string v318;
  std::logic_error v319;
  void *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  uint64_t (**v325)();
  int64x2_t v326;
  __int128 v327;
  _BYTE buf[24];
  _BYTE v329[24];
  int v330;
  uint64_t v331;

  v331 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v275 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v275, OS_LOG_TYPE_ERROR))
    {
      v276 = pthread_self();
      v277 = pthread_mach_thread_np(v276);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v277;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Manifest.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 490;
      *(_WORD *)v329 = 2080;
      *(_QWORD *)&v329[2] = "not (m_processing_state == Processing_State::Idle)";
      _os_log_error_impl(&dword_1B57BA000, v275, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v313);
    std::logic_error::logic_error(&v315, &v313);
    v315.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v319, &v315);
    v321 = 0;
    v322 = 0;
    v323 = 0;
    v324 = -1;
    v319.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v320 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v319);
    *(_QWORD *)&v329[8] = "Start_Stop_Result AMCP::Graph::Manifest::setup_processing(const Manifest_Execution_Context &, "
                          "const Manifest_Start_State &, const std::atomic_uint32_t &)";
    *(_QWORD *)&v329[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
    v330 = 490;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v318.__r_.__value_.__l.__data_);
    v326 = *(int64x2_t *)&v318.__r_.__value_.__l.__data_;
    v325 = off_1E69A20A0;
    *(_QWORD *)&v327 = *((_QWORD *)&v318.__r_.__value_.__l + 2);
    memset(&v318, 0, sizeof(v318));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v325);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v7 = *((_QWORD *)a2 + 3);
  v8 = *((_QWORD *)a2 + 4);
  *(_QWORD *)buf = v7;
  *(_QWORD *)&buf[8] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *((_QWORD *)a1 + 9);
  v13 = *(std::logic_error_vtbl **)(v11 + 96);
  v12 = *(char **)(v11 + 104);
  v319.__vftable = v13;
  v319.__imp_.__imp_ = v12;
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v309 = a1;
  v16 = (v7 | (unint64_t)v13) == 0;
  if (v7 && v13)
  {
    v17 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 16))(v7);
    v7 = (*((uint64_t (**)(std::logic_error_vtbl *))v13->~logic_error + 2))(v13);
    v18 = v17[23];
    if ((v18 & 0x80u) == 0)
      v19 = v17[23];
    else
      v19 = *((_QWORD *)v17 + 1);
    v20 = *(unsigned __int8 *)(v7 + 23);
    v21 = (char)v20;
    if ((v20 & 0x80u) != 0)
      v20 = *(_QWORD *)(v7 + 8);
    if (v19 == v20)
    {
      if (v21 >= 0)
        v22 = (unsigned __int8 *)v7;
      else
        v22 = *(unsigned __int8 **)v7;
      if ((v18 & 0x80) != 0)
      {
        v7 = memcmp(*(const void **)v17, v22, *((_QWORD *)v17 + 1));
        v16 = (_DWORD)v7 == 0;
      }
      else if (v17[23])
      {
        v23 = v18 - 1;
        do
        {
          v25 = *v17++;
          v24 = v25;
          v27 = *v22++;
          v26 = v27;
          v29 = v23-- != 0;
          v16 = v24 == v26;
        }
        while (v24 == v26 && v29);
      }
      else
      {
        v16 = 1;
      }
    }
    else
    {
      v16 = 0;
    }
  }
  v30 = v309;
  if (v12)
  {
    v31 = (unint64_t *)(v12 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      (*(void (**)(char *))(*(_QWORD *)v12 + 16))(v12);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v12);
    }
  }
  if (*(_QWORD *)&buf[8])
  {
    v33 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 16))(*(_QWORD *)&buf[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if (!v16)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v279 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v279, OS_LOG_TYPE_ERROR))
    {
      v280 = pthread_self();
      v281 = pthread_mach_thread_np(v280);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v281;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Manifest.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 494;
      *(_WORD *)v329 = 2080;
      *(_QWORD *)&v329[2] = "not (is_same_timebase(execution_context.m_time_interval.get_clock(), m_inventory->get_master_timebase()))";
      _os_log_error_impl(&dword_1B57BA000, v279, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Execution context is not using master timebase", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
    v282 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Execution context is not using master timebase", (uint64_t)&v313);
    std::logic_error::logic_error(&v315, &v313);
    v315.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v319, &v315);
    v321 = 0;
    v322 = 0;
    v323 = 0;
    v324 = -1;
    v319.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v320 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v319);
    *(_QWORD *)&v329[8] = "Start_Stop_Result AMCP::Graph::Manifest::setup_processing(const Manifest_Execution_Context &, "
                          "const Manifest_Start_State &, const std::atomic_uint32_t &)";
    *(_QWORD *)&v329[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
    v330 = 494;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v318.__r_.__value_.__l.__data_);
    v326 = *(int64x2_t *)&v318.__r_.__value_.__l.__data_;
    v325 = off_1E69A20A0;
    *(_QWORD *)&v327 = *((_QWORD *)&v318.__r_.__value_.__l + 2);
    memset(&v318, 0, sizeof(v318));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v325);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v282, (uint64_t)buf);
  }
  v35 = *((_QWORD *)v309 + 9);
  v36 = *(std::logic_error_vtbl **)(v35 + 80);
  v37 = *(char **)(v35 + 88);
  v312.__vftable = v36;
  v312.__imp_.__imp_ = v37;
  if (v37)
  {
    v38 = (unint64_t *)(v37 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = *(char **)(a3 + 8);
  v41 = *(_QWORD *)(a3 + 16);
  if (v40 == (char *)v41)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v283 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v283, OS_LOG_TYPE_ERROR))
    {
      v284 = pthread_self();
      v285 = pthread_mach_thread_np(v284);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v285;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Timebase_Set.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 51;
      *(_WORD *)v329 = 2080;
      *(_QWORD *)&v329[2] = "not (not state_snapshot.empty())";
      _os_log_error_impl(&dword_1B57BA000, v283, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to adopt an empty state", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v317);
    v286 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to adopt an empty state", (uint64_t)&v313);
    std::logic_error::logic_error(&v315, &v313);
    v315.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v319, &v315);
    v321 = 0;
    v322 = 0;
    v323 = 0;
    v324 = -1;
    v319.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v320 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v319);
    *(_QWORD *)&v329[8] = "void AMCP::Graph::Timebase_Set::adopt_state(const Play_State_Manager::State_Snapshot &)";
    *(_QWORD *)&v329[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Timebase_Set.cpp";
    v330 = 51;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v318.__r_.__value_.__l.__data_);
    v326 = *(int64x2_t *)&v318.__r_.__value_.__l.__data_;
    v325 = off_1E69A20A0;
    *(_QWORD *)&v327 = *((_QWORD *)&v318.__r_.__value_.__l + 2);
    memset(&v318, 0, sizeof(v318));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v325);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v286, (uint64_t)buf);
  }
  p_what = (char *)&v36[1].what;
  if (&v36[1].what != (const char *(__cdecl **)(const std::logic_error *__hidden))(a3 + 8))
    p_what = std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(p_what, v40, v41, (v41 - (uint64_t)v40) >> 2);
  if (v37)
  {
    v43 = (unint64_t *)(v37 + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      (*(void (**)(char *))(*(_QWORD *)v37 + 16))(v37);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v37);
    }
  }
  v308 = a2;
  v306 = a4;
  v311 = (AMCP::Graph::Manifest_Inventory *)*((_QWORD *)v309 + 9);
  v45 = (_QWORD *)*((_QWORD *)v311 + 3);
  if (v45)
  {
    v46 = *(double *)(a3 + 40);
    do
    {
      v47 = v45[12];
      if (*(_DWORD *)(v47 + 148) != 2 || *(_QWORD *)(v47 + 304))
        goto LABEL_95;
      v48 = *(_QWORD *)(v47 + 128);
      v49 = *(std::__shared_weak_count **)(v47 + 136);
      if (v49)
      {
        p_shared_owners = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldxr(p_shared_owners);
        while (__stxr(v51 + 1, p_shared_owners));
        v52 = *(_DWORD *)(v47 + 320);
        do
          v53 = __ldxr(p_shared_owners);
        while (__stxr(v53 + 1, p_shared_owners));
        v54 = v49;
      }
      else
      {
        v54 = 0;
        v52 = *(_DWORD *)(v47 + 320);
      }
      *(_QWORD *)&v55 = v48;
      *((_QWORD *)&v55 + 1) = v54;
      LODWORD(v325) = 2;
      *(double *)v326.i64 = v46 + (double)v52 + v46 + (double)v52;
      v326.i64[1] = 0;
      v327 = v55;
      switch(*(_DWORD *)(v47 + 152))
      {
        case 1:
          v56 = (AMCP::DAL::Ring_Buffer_Base *)operator new();
          AMCP::DAL::Ring_Buffer_Base::Ring_Buffer_Base(v56, (const CA::StreamDescription *)(v47 + 88), (const AMCP::DAL::DAL_Time_Delta *)&v325);
          *(_QWORD *)v56 = &off_1E698BCB8;
          v57 = (_QWORD *)operator new();
          *v57 = &off_1E699F4A8;
          v57[1] = 0;
          v57[2] = 0;
          v57[3] = v56;
          v58 = *(std::__shared_weak_count **)(v47 + 312);
          *(_QWORD *)(v47 + 304) = v56;
          *(_QWORD *)(v47 + 312) = v57;
          if (v58)
          {
            v59 = (unint64_t *)&v58->__shared_owners_;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              v61 = v58;
              goto LABEL_81;
            }
          }
          break;
        case 2:
        case 3:
          v70 = (AMCP::DAL::Ring_Buffer_Base *)operator new();
          AMCP::DAL::Ring_Buffer_Base::Ring_Buffer_Base(v70, (const CA::StreamDescription *)(v47 + 88), (const AMCP::DAL::DAL_Time_Delta *)&v325);
          *(_QWORD *)v70 = &off_1E6993510;
          *(_QWORD *)buf = v70;
          std::shared_ptr<AMCP::DAL::DAL_Buffer>::operator=[abi:ne180100]<AMCP::DAL::Mixing_Ring_Buffer,std::default_delete<AMCP::DAL::Mixing_Ring_Buffer>,void>((_QWORD *)(v47 + 304), (uint64_t *)buf);
          if (*(_QWORD *)buf)
            (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
          break;
        case 4:
          v62 = *((_QWORD *)v311 + 6);
          if (!v62)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)p_what);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v295 = *(std::__shared_weak_count **)&buf[8];
            v296 = **(NSObject ***)buf;
            if (*(_QWORD *)&buf[8])
            {
              v297 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v298 = __ldaxr(v297);
              while (__stlxr(v298 - 1, v297));
              if (!v298)
              {
                ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
                std::__shared_weak_count::__release_weak(v295);
              }
            }
            if (os_log_type_enabled(v296, OS_LOG_TYPE_ERROR))
            {
              v299 = pthread_self();
              v300 = pthread_mach_thread_np(v299);
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&buf[4] = v300;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = "Manifest_Buffer.cpp";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 90;
              *(_WORD *)v329 = 2080;
              *(_QWORD *)&v329[2] = "not (msm.operator BOOL())";
              _os_log_error_impl(&dword_1B57BA000, v296, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to create a synchronized mixer without a manager", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v317);
            v301 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"Attempt to create a synchronized mixer without a manager", (uint64_t)&v318);
            std::logic_error::logic_error(&v312, &v318);
            v302 = MEMORY[0x1E0DE5018];
            v312.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
            std::logic_error::logic_error(&v319, &v312);
            v321 = 0;
            v322 = 0;
            v323 = 0;
            v324 = -1;
            v319.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
            v320 = &unk_1E69A1230;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v319);
            *(_QWORD *)&v329[8] = "void AMCP::Graph::Manifest_Buffer::allocate(const std::shared_ptr<Synchronized_Mixer_M"
                                  "anager> &, DAL::Sample_Time)";
            *(_QWORD *)&v329[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
            v330 = 90;
            std::vector<void *>::vector(&v315);
            v303 = backtrace((void **)&v315.~logic_error, (unint64_t)(v315.__imp_.__imp_ - (const char *)v315.__vftable) >> 3);
            std::vector<void *>::resize((char **)&v315, v303);
            v313.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
            *(std::logic_error *)&v313.__r_.__value_.__r.__words[1] = v315;
            v314 = v316;
            v315.__vftable = 0;
            v315.__imp_.__imp_ = 0;
            v316 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v313);
            v301[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
            std::logic_error::logic_error(v301, (const std::logic_error *)buf);
            v301->__vftable = (std::logic_error_vtbl *)(v302 + 16);
            v301[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
            v304 = *(_QWORD *)v329;
            v301[1].__imp_.__imp_ = *(const char **)v329;
            if (v304)
              (*(void (**)(uint64_t))(*(_QWORD *)v304 + 24))(v304);
            v305 = *(std::logic_error *)&v329[8];
            LODWORD(v301[3].__vftable) = v330;
            v301[2] = v305;
            v301->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
            v301[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
            v301[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
          }
          AMCP::Graph::Synchronized_Mixer_Manager::get_mixer(buf, v62, v47 + 8, v47 + 88, (const AMCP::DAL::DAL_Time_Delta *)&v325);
          v63 = *(_OWORD *)buf;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          v64 = *(std::__shared_weak_count **)(v47 + 312);
          *(_OWORD *)(v47 + 304) = v63;
          if (v64)
          {
            v65 = (unint64_t *)&v64->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          v67 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v68 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              v61 = v67;
LABEL_81:
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          break;
        default:
          break;
      }
      v71 = (std::__shared_weak_count *)*((_QWORD *)&v327 + 1);
      if (!*((_QWORD *)&v327 + 1))
        goto LABEL_88;
      v72 = (unint64_t *)(*((_QWORD *)&v327 + 1) + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
        if (v49)
        {
LABEL_89:
          v74 = (unint64_t *)&v49->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
      }
      else
      {
LABEL_88:
        if (v49)
          goto LABEL_89;
      }
      v47 = v45[12];
      v30 = v309;
LABEL_95:
      p_what = (char *)std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(v47 + 328), *((_QWORD *)v30 + 12), *((_QWORD *)v30 + 13));
      v45 = (_QWORD *)*v45;
    }
    while (v45);
  }
  v76 = (uint64_t **)*((_QWORD *)v311 + 14);
  for (i = (uint64_t **)*((_QWORD *)v311 + 15); v76 != i; v76 += 2)
  {
    v77 = *v76;
    v78 = (std::__shared_weak_count *)(*v76)[1];
    if (v78)
    {
      v79 = std::__shared_weak_count::lock(v78);
      if (v79)
      {
        v80 = v79;
        if (*v77)
        {
          v81 = (unsigned int *)(*v77 + 128);
          v82 = atomic_load(v81);
          if ((v82 & 0x80000000) != 0)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v79);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v264 = *(std::__shared_weak_count **)&buf[8];
            v265 = **(NSObject ***)buf;
            if (*(_QWORD *)&buf[8])
            {
              v266 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v267 = __ldaxr(v266);
              while (__stlxr(v267 - 1, v266));
              if (!v267)
              {
                ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                std::__shared_weak_count::__release_weak(v264);
              }
            }
            if (os_log_type_enabled(v265, OS_LOG_TYPE_ERROR))
            {
              v268 = pthread_self();
              v269 = pthread_mach_thread_np(v268);
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&buf[4] = v269;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = "Device.h";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 80;
              *(_WORD *)v329 = 2080;
              *(_QWORD *)&v329[2] = "not (m_refcount >= 0)";
              _os_log_error_impl(&dword_1B57BA000, v265, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
            v270 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"", (uint64_t)&v313);
            std::logic_error::logic_error(&v315, &v313);
            v271 = MEMORY[0x1E0DE5018];
            v315.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
            std::logic_error::logic_error(&v319, &v315);
            v321 = 0;
            v322 = 0;
            v323 = 0;
            v324 = -1;
            v319.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
            v320 = &unk_1E69A1230;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v319);
            *(_QWORD *)&v329[8] = "void AMCP::IO_Core::Device_Node_State::add_reference()";
            *(_QWORD *)&v329[16] = "Source/AMCP/IO/IO_Core/Device.h";
            v330 = 80;
            std::vector<void *>::vector(&v318);
            v272 = backtrace((void **)v318.__r_.__value_.__l.__data_, (v318.__r_.__value_.__l.__size_ - v318.__r_.__value_.__r.__words[0]) >> 3);
            std::vector<void *>::resize(&v318.__r_.__value_.__l.__data_, v272);
            v326 = *(int64x2_t *)&v318.__r_.__value_.__l.__data_;
            v325 = off_1E69A20A0;
            *(_QWORD *)&v327 = *((_QWORD *)&v318.__r_.__value_.__l + 2);
            memset(&v318, 0, sizeof(v318));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v325);
            v270[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
            std::logic_error::logic_error(v270, (const std::logic_error *)buf);
            v270->__vftable = (std::logic_error_vtbl *)(v271 + 16);
            v270[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
            v273 = *(_QWORD *)v329;
            v270[1].__imp_.__imp_ = *(const char **)v329;
            if (v273)
              (*(void (**)(uint64_t))(*(_QWORD *)v273 + 24))(v273);
            v274 = *(std::logic_error *)&v329[8];
            LODWORD(v270[3].__vftable) = v330;
            v270[2] = v274;
            v270->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
            v270[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
            v270[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
          }
          do
            v83 = __ldaxr(v81);
          while (__stlxr(v83 + 1, v81));
        }
        v84 = (unint64_t *)&v79->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
    }
    v86 = *v76;
    v87 = (std::__shared_weak_count *)(*v76)[1];
    if (!v87 || (v87 = std::__shared_weak_count::lock(v87), (v88 = v87) == 0) || (v89 = *v86) == 0)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v87);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v220 = *(std::__shared_weak_count **)&buf[8];
      v221 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v222 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v223 = __ldaxr(v222);
        while (__stlxr(v223 - 1, v222));
        if (!v223)
        {
          ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
          std::__shared_weak_count::__release_weak(v220);
        }
      }
      if (os_log_type_enabled(v221, OS_LOG_TYPE_ERROR))
      {
        v224 = pthread_self();
        v225 = pthread_mach_thread_np(v224);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v225;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Device_Connection.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 42;
        *(_WORD *)v329 = 2080;
        *(_QWORD *)&v329[2] = "not (device_state.operator BOOL())";
        _os_log_error_impl(&dword_1B57BA000, v221, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
      v226 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v313);
      std::logic_error::logic_error(&v315, &v313);
      v227 = MEMORY[0x1E0DE5018];
      v315.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v319, &v315);
      v321 = 0;
      v322 = 0;
      v323 = 0;
      v324 = -1;
      v319.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v320 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v319);
      *(_QWORD *)&v329[8] = "void AMCP::IO_Core::Device_Connection::setup_processing()";
      *(_QWORD *)&v329[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
      v330 = 42;
      std::vector<void *>::vector(&v318);
      v228 = backtrace((void **)v318.__r_.__value_.__l.__data_, (v318.__r_.__value_.__l.__size_ - v318.__r_.__value_.__r.__words[0]) >> 3);
      std::vector<void *>::resize(&v318.__r_.__value_.__l.__data_, v228);
      v326 = *(int64x2_t *)&v318.__r_.__value_.__l.__data_;
      v325 = off_1E69A20A0;
      *(_QWORD *)&v327 = *((_QWORD *)&v318.__r_.__value_.__l + 2);
      memset(&v318, 0, sizeof(v318));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v325);
      v226[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::logic_error::logic_error(v226, (const std::logic_error *)buf);
      v226->__vftable = (std::logic_error_vtbl *)(v227 + 16);
      v226[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
      v229 = *(_QWORD *)v329;
      v226[1].__imp_.__imp_ = *(const char **)v329;
      if (v229)
        (*(void (**)(uint64_t))(*(_QWORD *)v229 + 24))(v229);
      v230 = *(std::logic_error *)&v329[8];
      LODWORD(v226[3].__vftable) = v330;
      v226[2] = v230;
      v226->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
      v226[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
      v226[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
    }
    v91 = *(_QWORD *)(v89 + 96);
    v90 = *(std::__shared_weak_count **)(v89 + 104);
    if (v90)
    {
      v92 = (unint64_t *)&v90->__shared_owners_;
      do
        v93 = __ldxr(v92);
      while (__stxr(v93 + 1, v92));
      do
        v94 = __ldaxr(v92);
      while (__stlxr(v94 - 1, v92));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
    if (!v91)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v87);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v242 = *(std::__shared_weak_count **)&buf[8];
      v243 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v244 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v245 = __ldaxr(v244);
        while (__stlxr(v245 - 1, v244));
        if (!v245)
        {
          ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
          std::__shared_weak_count::__release_weak(v242);
        }
      }
      if (os_log_type_enabled(v243, OS_LOG_TYPE_ERROR))
      {
        v246 = pthread_self();
        v247 = pthread_mach_thread_np(v246);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v247;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Device_Connection.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 43;
        *(_WORD *)v329 = 2080;
        *(_QWORD *)&v329[2] = "not (device_state->get_engine())";
        _os_log_error_impl(&dword_1B57BA000, v243, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
      v248 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v313);
      std::logic_error::logic_error(&v315, &v313);
      v249 = MEMORY[0x1E0DE5018];
      v315.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v319, &v315);
      v321 = 0;
      v322 = 0;
      v323 = 0;
      v324 = -1;
      v319.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v320 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v319);
      *(_QWORD *)&v329[8] = "void AMCP::IO_Core::Device_Connection::setup_processing()";
      *(_QWORD *)&v329[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
      v330 = 43;
      std::vector<void *>::vector(&v318);
      v250 = backtrace((void **)v318.__r_.__value_.__l.__data_, (v318.__r_.__value_.__l.__size_ - v318.__r_.__value_.__r.__words[0]) >> 3);
      std::vector<void *>::resize(&v318.__r_.__value_.__l.__data_, v250);
      v326 = *(int64x2_t *)&v318.__r_.__value_.__l.__data_;
      v325 = off_1E69A20A0;
      *(_QWORD *)&v327 = *((_QWORD *)&v318.__r_.__value_.__l + 2);
      memset(&v318, 0, sizeof(v318));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v325);
      v248[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::logic_error::logic_error(v248, (const std::logic_error *)buf);
      v248->__vftable = (std::logic_error_vtbl *)(v249 + 16);
      v248[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
      v251 = *(_QWORD *)v329;
      v248[1].__imp_.__imp_ = *(const char **)v329;
      if (v251)
        (*(void (**)(uint64_t))(*(_QWORD *)v251 + 24))(v251);
      v252 = *(std::logic_error *)&v329[8];
      LODWORD(v248[3].__vftable) = v330;
      v248[2] = v252;
      v248->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
      v248[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
      v248[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
    }
    v95 = atomic_load((unsigned int *)(v89 + 128));
    if (v95 == 1)
    {
      v97 = *(_QWORD *)(v89 + 96);
      v96 = *(_QWORD *)(v89 + 104);
      if (v96)
      {
        v98 = (unint64_t *)(v96 + 8);
        do
          v99 = __ldxr(v98);
        while (__stxr(v99 + 1, v98));
      }
      *(_QWORD *)buf = &off_1E69983C8;
      *(_QWORD *)&buf[8] = v97;
      *(_QWORD *)&buf[16] = v96;
      *(_QWORD *)v329 = buf;
      AMCP::IO_Core::Device_Node_State::for_each_stream_connection(v89, (uint64_t)buf);
      v100 = *(_QWORD **)v329;
      if (*(_BYTE **)v329 == buf)
      {
        v100 = buf;
        v101 = 4;
        goto LABEL_124;
      }
      if (*(_QWORD *)v329)
      {
        v101 = 5;
LABEL_124:
        (*(void (**)(void))(*v100 + 8 * v101))();
      }
    }
    v102 = 0;
    v103 = 0;
    *(_QWORD *)buf = 1;
    do
    {
      v104 = v102;
      v105 = *(_DWORD *)&buf[4 * v103];
      v106 = *(_QWORD **)(v89 + 8 + 40 * v105 + 16);
      if (v106)
      {
        v107 = *(_QWORD *)(v89 + 136 + 24 * v105);
        do
        {
          *(_QWORD *)(v107 + ((v106[5] >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v106[5];
          v106 = (_QWORD *)*v106;
        }
        while (v106);
      }
      v102 = 1;
      v103 = 1;
    }
    while ((v104 & 1) == 0);
    if (*(_QWORD *)(v89 + 168))
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v89 + 96) + 160))(*(_QWORD *)(v89 + 96), v89 + 160);
    if (*(_QWORD *)(v89 + 144))
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v89 + 96) + 176))(*(_QWORD *)(v89 + 96), v89 + 136);
    *(_QWORD *)buf = &off_1E6998238;
    *(_QWORD *)v329 = buf;
    AMCP::IO_Core::Device_Node_State::for_each_stream_connection(v89, (uint64_t)buf);
    v108 = *(_QWORD **)v329;
    if (*(_BYTE **)v329 == buf)
    {
      v108 = buf;
      v109 = 4;
      goto LABEL_138;
    }
    if (*(_QWORD *)v329)
    {
      v109 = 5;
LABEL_138:
      (*(void (**)(void))(*v108 + 8 * v109))();
    }
    v110 = (unint64_t *)&v88->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
    v112 = *v76;
    v113 = (std::__shared_weak_count *)(*v76)[1];
    if (!v113
      || (v114 = *(unsigned int *)(*((_QWORD *)v311 + 8) + 40),
          v113 = std::__shared_weak_count::lock(v113),
          (v115 = v113) == 0)
      || (v116 = *v112) == 0)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v113);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v231 = *(std::__shared_weak_count **)&buf[8];
      v232 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v233 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v234 = __ldaxr(v233);
        while (__stlxr(v234 - 1, v233));
        if (!v234)
        {
          ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
          std::__shared_weak_count::__release_weak(v231);
        }
      }
      if (os_log_type_enabled(v232, OS_LOG_TYPE_ERROR))
      {
        v235 = pthread_self();
        v236 = pthread_mach_thread_np(v235);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v236;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Device_Connection.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 54;
        *(_WORD *)v329 = 2080;
        *(_QWORD *)&v329[2] = "not (device_state.operator BOOL())";
        _os_log_error_impl(&dword_1B57BA000, v232, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
      v237 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v313);
      std::logic_error::logic_error(&v315, &v313);
      v238 = MEMORY[0x1E0DE5018];
      v315.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v319, &v315);
      v321 = 0;
      v322 = 0;
      v323 = 0;
      v324 = -1;
      v319.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v320 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v319);
      *(_QWORD *)&v329[8] = "void AMCP::IO_Core::Device_Connection::begin_processing(uint32_t, const DAL::DAL_Time_Delta &)";
      *(_QWORD *)&v329[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
      v330 = 54;
      std::vector<void *>::vector(&v318);
      v239 = backtrace((void **)v318.__r_.__value_.__l.__data_, (v318.__r_.__value_.__l.__size_ - v318.__r_.__value_.__r.__words[0]) >> 3);
      std::vector<void *>::resize(&v318.__r_.__value_.__l.__data_, v239);
      v326 = *(int64x2_t *)&v318.__r_.__value_.__l.__data_;
      v325 = off_1E69A20A0;
      *(_QWORD *)&v327 = *((_QWORD *)&v318.__r_.__value_.__l + 2);
      memset(&v318, 0, sizeof(v318));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v325);
      v237[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::logic_error::logic_error(v237, (const std::logic_error *)buf);
      v237->__vftable = (std::logic_error_vtbl *)(v238 + 16);
      v237[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
      v240 = *(_QWORD *)v329;
      v237[1].__imp_.__imp_ = *(const char **)v329;
      if (v240)
        (*(void (**)(uint64_t))(*(_QWORD *)v240 + 24))(v240);
      v241 = *(std::logic_error *)&v329[8];
      LODWORD(v237[3].__vftable) = v330;
      v237[2] = v241;
      v237->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
      v237[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
      v237[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
    }
    v118 = *(_QWORD *)(v116 + 96);
    v117 = *(std::__shared_weak_count **)(v116 + 104);
    if (v117)
    {
      v119 = (unint64_t *)&v117->__shared_owners_;
      do
        v120 = __ldxr(v119);
      while (__stxr(v120 + 1, v119));
      do
        v121 = __ldaxr(v119);
      while (__stlxr(v121 - 1, v119));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    if (!v118)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v113);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v253 = *(std::__shared_weak_count **)&buf[8];
      v254 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v255 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v256 = __ldaxr(v255);
        while (__stlxr(v256 - 1, v255));
        if (!v256)
        {
          ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
          std::__shared_weak_count::__release_weak(v253);
        }
      }
      if (os_log_type_enabled(v254, OS_LOG_TYPE_ERROR))
      {
        v257 = pthread_self();
        v258 = pthread_mach_thread_np(v257);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v258;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Device_Connection.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 55;
        *(_WORD *)v329 = 2080;
        *(_QWORD *)&v329[2] = "not (device_state->get_engine())";
        _os_log_error_impl(&dword_1B57BA000, v254, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
      v259 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v313);
      std::logic_error::logic_error(&v315, &v313);
      v260 = MEMORY[0x1E0DE5018];
      v315.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v319, &v315);
      v321 = 0;
      v322 = 0;
      v323 = 0;
      v324 = -1;
      v319.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v320 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v319);
      *(_QWORD *)&v329[8] = "void AMCP::IO_Core::Device_Connection::begin_processing(uint32_t, const DAL::DAL_Time_Delta &)";
      *(_QWORD *)&v329[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
      v330 = 55;
      std::vector<void *>::vector(&v318);
      v261 = backtrace((void **)v318.__r_.__value_.__l.__data_, (v318.__r_.__value_.__l.__size_ - v318.__r_.__value_.__r.__words[0]) >> 3);
      std::vector<void *>::resize(&v318.__r_.__value_.__l.__data_, v261);
      v326 = *(int64x2_t *)&v318.__r_.__value_.__l.__data_;
      v325 = off_1E69A20A0;
      *(_QWORD *)&v327 = *((_QWORD *)&v318.__r_.__value_.__l + 2);
      memset(&v318, 0, sizeof(v318));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v325);
      v259[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::logic_error::logic_error(v259, (const std::logic_error *)buf);
      v259->__vftable = (std::logic_error_vtbl *)(v260 + 16);
      v259[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
      v262 = *(_QWORD *)v329;
      v259[1].__imp_.__imp_ = *(const char **)v329;
      if (v262)
        (*(void (**)(uint64_t))(*(_QWORD *)v262 + 24))(v262);
      v263 = *(std::logic_error *)&v329[8];
      LODWORD(v259[3].__vftable) = v330;
      v259[2] = v263;
      v259->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
      v259[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
      v259[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
    }
    v122 = atomic_load((unsigned int *)(v116 + 128));
    if (v122 != 1)
      goto LABEL_177;
    v124 = *(_QWORD *)(v116 + 96);
    v123 = *(std::__shared_weak_count **)(v116 + 104);
    if (v123)
    {
      v125 = (unint64_t *)&v123->__shared_owners_;
      do
        v126 = __ldxr(v125);
      while (__stxr(v126 + 1, v125));
    }
    v127 = *(const char **)(v116 + 120);
    v319.__vftable = *(std::logic_error_vtbl **)(v116 + 112);
    v319.__imp_.__imp_ = v127;
    if (v127)
    {
      v128 = (unint64_t *)(v127 + 8);
      do
        v129 = __ldxr(v128);
      while (__stxr(v129 + 1, v128));
    }
    AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)buf, v308, (uint64_t *)&v319);
    if ((buf[0] & 2) == 0)
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v124 + 224))(v124, v114, vcvtmd_s64_f64(*(double *)&buf[8]));
    v130 = *(std::__shared_weak_count **)&v329[8];
    if (*(_QWORD *)&v329[8])
    {
      v131 = (unint64_t *)(*(_QWORD *)&v329[8] + 8);
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
    imp = (std::__shared_weak_count *)v319.__imp_.__imp_;
    if (!v319.__imp_.__imp_)
      goto LABEL_171;
    v134 = (unint64_t *)(v319.__imp_.__imp_ + 8);
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
      if (v123)
      {
LABEL_172:
        v136 = (unint64_t *)&v123->__shared_owners_;
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
    }
    else
    {
LABEL_171:
      if (v123)
        goto LABEL_172;
    }
LABEL_177:
    v138 = (unint64_t *)&v115->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  AMCP::Graph::Manifest_Inventory::take_power_assertions(v311);
  v141 = *((_QWORD *)v309 + 9);
  v142 = *(_QWORD **)(v141 + 80);
  v143 = *(std::__shared_weak_count **)(v141 + 88);
  if (v143)
  {
    v144 = (unint64_t *)&v143->__shared_owners_;
    do
      v145 = __ldxr(v144);
    while (__stxr(v145 + 1, v144));
  }
  if (v142[5] == v142[6])
  {
    AMCP::Log::Scope_Registry::get(v140);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v287 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v287, OS_LOG_TYPE_ERROR))
    {
      v288 = pthread_self();
      v289 = pthread_mach_thread_np(v288);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v289;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Timebase_Set.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 59;
      *(_WORD *)v329 = 2080;
      *(_QWORD *)&v329[2] = "not (not m_state.empty())";
      _os_log_error_impl(&dword_1B57BA000, v287, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to start a Timebase_Set with no start state", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
    v290 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to start a Timebase_Set with no start state", (uint64_t)&v313);
    std::logic_error::logic_error(&v315, &v313);
    v315.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v319, &v315);
    v321 = 0;
    v322 = 0;
    v323 = 0;
    v324 = -1;
    v319.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v320 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v319);
    *(_QWORD *)&v329[8] = "Start_Stop_Result AMCP::Graph::Timebase_Set::start() const";
    *(_QWORD *)&v329[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Timebase_Set.cpp";
    v330 = 59;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v318.__r_.__value_.__l.__data_);
    v326 = *(int64x2_t *)&v318.__r_.__value_.__l.__data_;
    v325 = off_1E69A20A0;
    *(_QWORD *)&v327 = *((_QWORD *)&v318.__r_.__value_.__l + 2);
    memset(&v318, 0, sizeof(v318));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v325);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v290, (uint64_t)buf);
  }
  v146 = v142[3];
  if (!v146)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v291 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v291, OS_LOG_TYPE_ERROR))
    {
      v292 = pthread_self();
      v293 = pthread_mach_thread_np(v292);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v293;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Timebase_Set.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 60;
      *(_WORD *)v329 = 2080;
      *(_QWORD *)&v329[2] = "not (not m_timebases.empty())";
      _os_log_error_impl(&dword_1B57BA000, v291, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to run an manifest with no timebases", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
    v294 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to run an manifest with no timebases", (uint64_t)&v313);
    std::logic_error::logic_error(&v315, &v313);
    v315.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v319, &v315);
    v321 = 0;
    v322 = 0;
    v323 = 0;
    v324 = -1;
    v319.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v320 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v319);
    *(_QWORD *)&v329[8] = "Start_Stop_Result AMCP::Graph::Timebase_Set::start() const";
    *(_QWORD *)&v329[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Timebase_Set.cpp";
    v330 = 60;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v318.__r_.__value_.__l.__data_);
    v326 = *(int64x2_t *)&v318.__r_.__value_.__l.__data_;
    v325 = off_1E69A20A0;
    *(_QWORD *)&v327 = *((_QWORD *)&v318.__r_.__value_.__l + 2);
    memset(&v318, 0, sizeof(v318));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v325);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v294, (uint64_t)buf);
  }
  memset(&v318, 0, sizeof(v318));
  if (v146 >> 60)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  *(_QWORD *)&v329[8] = (char *)&v318.__r_.__value_.__l + 16;
  v147 = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v146);
  size = (_QWORD *)v318.__r_.__value_.__l.__size_;
  v150 = v318.__r_.__value_.__r.__words[0];
  if (v318.__r_.__value_.__l.__size_ == v318.__r_.__value_.__r.__words[0])
  {
    v153 = vdupq_n_s64(v318.__r_.__value_.__l.__size_);
    v151 = (std::string::size_type)v147;
  }
  else
  {
    v151 = (std::string::size_type)v147;
    do
    {
      v152 = *((_OWORD *)size - 1);
      size -= 2;
      *(_OWORD *)(v151 - 16) = v152;
      v151 -= 16;
      *size = 0;
      size[1] = 0;
    }
    while (size != (_QWORD *)v150);
    v153 = *(int64x2_t *)&v318.__r_.__value_.__l.__data_;
  }
  v318.__r_.__value_.__r.__words[0] = v151;
  v318.__r_.__value_.__l.__size_ = (std::string::size_type)v147;
  *(int64x2_t *)&buf[8] = v153;
  v154 = v318.__r_.__value_.__r.__words[2];
  v318.__r_.__value_.__r.__words[2] = (std::string::size_type)v147 + 16 * v148;
  *(_QWORD *)v329 = v154;
  *(_QWORD *)buf = v153.i64[0];
  std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)buf);
  v155 = (unsigned int *)v142[5];
  for (j = (unsigned int *)v142[6]; v155 != j; ++v155)
  {
    v157 = v142 + 2;
    while (1)
    {
      v157 = (_QWORD *)*v157;
      if (!v157)
        break;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v157[2] + 80))(v157[2], *v155);
      v158 = v318.__r_.__value_.__l.__size_;
      if (v318.__r_.__value_.__l.__size_ >= v318.__r_.__value_.__r.__words[2])
      {
        v163 = (uint64_t)(v318.__r_.__value_.__l.__size_ - v318.__r_.__value_.__r.__words[0]) >> 4;
        v164 = v163 + 1;
        if ((unint64_t)(v163 + 1) >> 60)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v165 = v318.__r_.__value_.__r.__words[2] - v318.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v318.__r_.__value_.__r.__words[2] - v318.__r_.__value_.__r.__words[0]) >> 3 > v164)
          v164 = v165 >> 3;
        if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF0)
          v166 = 0xFFFFFFFFFFFFFFFLL;
        else
          v166 = v164;
        *((_QWORD *)&v327 + 1) = (char *)&v318.__r_.__value_.__l + 16;
        v167 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v166);
        v169 = &v167[16 * v163];
        v170 = *((_OWORD *)v157 + 1);
        *(_OWORD *)v169 = v170;
        if (*((_QWORD *)&v170 + 1))
        {
          v171 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
          do
            v172 = __ldxr(v171);
          while (__stxr(v172 + 1, v171));
        }
        v173 = (_QWORD *)v318.__r_.__value_.__l.__size_;
        v174 = v318.__r_.__value_.__r.__words[0];
        if (v318.__r_.__value_.__l.__size_ == v318.__r_.__value_.__r.__words[0])
        {
          v177 = vdupq_n_s64(v318.__r_.__value_.__l.__size_);
          v175 = (std::string::size_type)&v167[16 * v163];
        }
        else
        {
          v175 = (std::string::size_type)&v167[16 * v163];
          do
          {
            v176 = *((_OWORD *)v173 - 1);
            v173 -= 2;
            *(_OWORD *)(v175 - 16) = v176;
            v175 -= 16;
            *v173 = 0;
            v173[1] = 0;
          }
          while (v173 != (_QWORD *)v174);
          v177 = *(int64x2_t *)&v318.__r_.__value_.__l.__data_;
        }
        v162 = (std::string::size_type)(v169 + 16);
        v318.__r_.__value_.__r.__words[0] = v175;
        v318.__r_.__value_.__l.__size_ = (std::string::size_type)(v169 + 16);
        v326 = v177;
        v178 = v318.__r_.__value_.__r.__words[2];
        v318.__r_.__value_.__r.__words[2] = (std::string::size_type)&v167[16 * v168];
        *(_QWORD *)&v327 = v178;
        v325 = (uint64_t (**)())v177.i64[0];
        std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v325);
      }
      else
      {
        *(_QWORD *)v318.__r_.__value_.__l.__size_ = v157[2];
        v159 = v157[3];
        *(_QWORD *)(v158 + 8) = v159;
        if (v159)
        {
          v160 = (unint64_t *)(v159 + 8);
          do
            v161 = __ldxr(v160);
          while (__stxr(v161 + 1, v160));
        }
        v162 = v158 + 16;
      }
      v318.__r_.__value_.__l.__size_ = v162;
    }
  }
  *(_QWORD *)buf = &v318;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v143)
  {
    v179 = (unint64_t *)&v143->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v181 = *((_QWORD *)v309 + 12);
  if (v181)
  {
    AMCP::Graph::Manifest::get_iocontext_uid((AMCP::Graph::Manifest *)buf, v309);
    if (buf[23] >= 0)
      v187 = buf;
    else
      LOBYTE(v187) = buf[0];
    AMCP::Graph::Manifest_Log::add_message(v181, 0, "Manifest: %s Hardware Start: %p", v182, v183, v184, v185, v186, (char)v187);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v188 = v309;
  if (*(_DWORD *)(a3 + 4) == 2)
  {
    v189 = *((_QWORD *)v309 + 2);
    if (v189 != *((_QWORD *)v309 + 1))
    {
      v188 = v309;
      do
      {
        v190 = *(_QWORD *)(v189 - 16);
        v189 -= 16;
        AMCP::Graph::Manifest_Task::maybe_create_data_flow_calculator(v190);
        (*(void (**)(_QWORD, AMCP::DAL::DAL_Time_Delta *))(**(_QWORD **)(v190 + 104) + 40))(*(_QWORD *)(v190 + 104), v308);
      }
      while (v189 != *((_QWORD *)v309 + 1));
    }
    v191 = *((_QWORD *)v188 + 9);
    v192 = *(AMCP::Log::Scope_Registry **)(v191 + 80);
    v193 = *(std::__shared_weak_count **)(v191 + 88);
    *(_QWORD *)buf = v192;
    *(_QWORD *)&buf[8] = v193;
    if (v193)
    {
      v194 = (unint64_t *)&v193->__shared_owners_;
      do
        v195 = __ldxr(v194);
      while (__stxr(v195 + 1, v194));
    }
    v196 = AMCP::Graph::Timebase_Set::wait_for_time_to_start(v192, v306);
    if (v193)
    {
      v197 = (unint64_t *)&v193->__shared_owners_;
      do
        v198 = __ldaxr(v197);
      while (__stlxr(v198 - 1, v197));
      goto LABEL_246;
    }
  }
  else
  {
    v199 = *((_QWORD *)v309 + 9);
    v200 = *(AMCP::Log::Scope_Registry **)(v199 + 80);
    v193 = *(std::__shared_weak_count **)(v199 + 88);
    *(_QWORD *)buf = v200;
    *(_QWORD *)&buf[8] = v193;
    if (v193)
    {
      v201 = (unint64_t *)&v193->__shared_owners_;
      do
        v202 = __ldxr(v201);
      while (__stxr(v202 + 1, v201));
    }
    v196 = AMCP::Graph::Timebase_Set::wait_for_time_to_start(v200, v306);
    if (v193)
    {
      v203 = (unint64_t *)&v193->__shared_owners_;
      do
        v198 = __ldaxr(v203);
      while (__stlxr(v198 - 1, v203));
LABEL_246:
      if (!v198)
      {
        ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
        std::__shared_weak_count::__release_weak(v193);
      }
    }
  }
  if ((_DWORD)v196 != 1)
  {
    *(_DWORD *)v188 = 1;
    return v196;
  }
  v204 = *((_QWORD *)v188 + 9);
  v205 = *(AMCP::Graph::Timebase_Set **)(v204 + 80);
  v206 = *(std::__shared_weak_count **)(v204 + 88);
  *(_QWORD *)buf = v205;
  *(_QWORD *)&buf[8] = v206;
  if (v206)
  {
    v207 = (unint64_t *)&v206->__shared_owners_;
    do
      v208 = __ldxr(v207);
    while (__stxr(v208 + 1, v207));
  }
  v209 = (AMCP::Log::Scope_Registry *)AMCP::Graph::Timebase_Set::stop(v205);
  v210 = (int)v209;
  if (!v206)
    goto LABEL_256;
  v211 = (unint64_t *)&v206->__shared_owners_;
  do
    v212 = __ldaxr(v211);
  while (__stlxr(v212 - 1, v211));
  if (!v212)
  {
    ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
    std::__shared_weak_count::__release_weak(v206);
    if (!v210)
      return v196;
  }
  else
  {
LABEL_256:
    if (!(_DWORD)v209)
      return v196;
  }
  AMCP::Log::Scope_Registry::get(v209);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v213 = *(std::__shared_weak_count **)&buf[8];
  v214 = **(NSObject ***)buf;
  if (*(_QWORD *)&buf[8])
  {
    v215 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  if (os_log_type_enabled(v214, OS_LOG_TYPE_DEBUG))
  {
    v217 = pthread_self();
    v218 = pthread_mach_thread_np(v217);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v218;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = "Manifest.cpp";
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = 517;
    _os_log_debug_impl(&dword_1B57BA000, v214, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Error stopping timebases after start failure", buf, 0x18u);
  }
  return v196;
}

void sub_1B5AC3060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *__p,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;

  v49 = *(std::__shared_weak_count **)(v47 - 200);
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v46)
  {
    v52 = (unint64_t *)&v46->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5AC38CC()
{
  JUMPOUT(0x1B5AC38D4);
}

void sub_1B5AC3938()
{
  JUMPOUT(0x1B5AC3940);
}

void sub_1B5AC3968()
{
  JUMPOUT(0x1B5AC3FDCLL);
}

void sub_1B5AC3970(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19, uint64_t a20,uint64_t a21,uint64_t (**a22)(),__int128 a23,uint64_t a24,std::string *a25,std::logic_error a26,std::logic_error a27,uint64_t a28,_QWORD *a29,uint64_t a30,std::logic_error a31,std::logic_error a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37)
{
  uint64_t v37;
  uint64_t v38;
  AMCP::Log::Scope_Registry *v39;
  unsigned int *v40;
  unsigned int *v41;
  _QWORD *v42;
  uint64_t v43;
  NSObject *v44;
  _opaque_pthread_t *v45;
  mach_port_t v46;
  uint64_t v47;
  void *exception;

  if (a2 == 2)
  {
    v39 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    v40 = *(unsigned int **)(v37 + 40);
    v41 = *(unsigned int **)(v37 + 48);
    if (v40 != v41)
    {
      do
      {
        v42 = a29;
        v43 = a30;
        while (v42 != (_QWORD *)v43)
        {
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v42 + 112))(*v42, *v40);
          v42 += 2;
        }
        ++v40;
      }
      while (v40 != v41);
      __cxa_end_catch();
      JUMPOUT(0x1B5AC1628);
    }
    AMCP::Log::Scope_Registry::get(v39);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v38 - 192), "com.apple.coreaudio", "AMCP");
    v44 = **(NSObject ***)(v38 - 192);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v38 - 192);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      v45 = pthread_self();
      v46 = pthread_mach_thread_np(v45);
      *(_DWORD *)(v38 - 192) = 67109890;
      *(_DWORD *)(v38 - 188) = v46;
      *(_WORD *)(v38 - 184) = 2080;
      v47 = v38 - 232;
      *(_QWORD *)(v47 + 50) = "Timebase_Set.cpp";
      *(_WORD *)(v38 - 174) = 1024;
      *(_DWORD *)(v38 - 172) = 82;
      *(_WORD *)(v38 - 168) = 2080;
      *(_QWORD *)(v47 + 66) = "not (not m_state.empty())";
      _os_log_error_impl(&dword_1B57BA000, v44, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)(v38 - 192), 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)((char *)&a28 + 7));
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&a25);
    std::logic_error::logic_error(&a27, (const std::string *)&a25);
    a27.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&a32, &a27);
    a34 = 0;
    a35 = 0;
    a36 = 0;
    a37 = -1;
    a32.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    a33 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl(v38 - 192, (uint64_t)&a32);
    *(_QWORD *)(v38 - 160) = "Start_Stop_Result AMCP::Graph::Timebase_Set::start() const";
    *(_QWORD *)(v38 - 152) = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Timebase_Set.cpp";
    *(_DWORD *)(v38 - 144) = 82;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&a19);
    a22 = off_1E69A20A0;
    a23 = a19;
    a24 = a20;
    a19 = 0uLL;
    a20 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>(v38 - 192, (uint64_t)&a22);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, v38 - 192);
  }
  JUMPOUT(0x1B5AC313CLL);
}

void sub_1B5AC3B84(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5AC39C4);
  }
  JUMPOUT(0x1B5AC3FDCLL);
}

void sub_1B5AC3C84()
{
  __cxa_end_catch();
  JUMPOUT(0x1B5AC313CLL);
}

void sub_1B5AC3D70()
{
  JUMPOUT(0x1B5AC3D78);
}

void sub_1B5AC3DBC()
{
  JUMPOUT(0x1B5AC3DC4);
}

void sub_1B5AC3E08()
{
  JUMPOUT(0x1B5AC3E10);
}

void sub_1B5AC3E38()
{
  JUMPOUT(0x1B5AC3E40);
}

void sub_1B5AC3E80()
{
  JUMPOUT(0x1B5AC3E88);
}

void sub_1B5AC3ECC()
{
  JUMPOUT(0x1B5AC3ED4);
}

void sub_1B5AC3F14(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B5AC3FDCLL);
}

void sub_1B5AC3F24()
{
  JUMPOUT(0x1B5AC3F2CLL);
}

void sub_1B5AC3F54()
{
  JUMPOUT(0x1B5AC3F5CLL);
}

void AMCP::Graph::Manifest::get_iocontext_uid(AMCP::Graph::Manifest *this, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  uint64_t v15;
  void *exception;
  std::__shared_weak_count *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t (**v20)();
  __int128 v21;
  uint64_t v22;
  std::string v23;
  std::logic_error v24;
  std::logic_error v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint8_t buf[8];
  __int16 v33;
  char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  _BYTE v38[28];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = a2[11];
  v3 = a2[1];
  if (v2 >= (a2[2] - v3) >> 4)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      v15 = (uint64_t)(a2[2] - a2[1]) >> 4;
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v14;
      v33 = 2080;
      v34 = "Manifest.cpp";
      v35 = 1024;
      v36 = 815;
      v37 = 2080;
      *(_QWORD *)v38 = "not (index < m_tasks.size())";
      *(_WORD *)&v38[8] = 2048;
      *(_QWORD *)&v38[10] = v2;
      *(_WORD *)&v38[18] = 2048;
      *(_QWORD *)&v38[20] = v15;
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Index out of bounds - index: %ld  size: %ld", buf, 0x36u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Index out of bounds - index: %ld  size: %ld", (uint64_t)&v23, v2, (uint64_t)(a2[2] - a2[1]) >> 4);
    std::logic_error::logic_error(&v24, &v23);
    v24.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v25, &v24);
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = -1;
    v25.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v26 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v25);
    *(_QWORD *)&v38[6] = "std::shared_ptr<Manifest_Task> AMCP::Graph::Manifest::get_nth(size_t) const";
    *(_QWORD *)&v38[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
    *(_DWORD *)&v38[22] = 815;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v18);
    v21 = v18;
    v22 = v19;
    v18 = 0uLL;
    v19 = 0;
    v20 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v20);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = *(_OWORD *)(v3 + 16 * v2);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v4 + 1);
  v5 = *(_QWORD *)(v3 + 16 * v2);
  if (*((_QWORD *)&v4 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (*(char *)(v4 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this, *(const std::string::value_type **)(v4 + 64), *(_QWORD *)(v4 + 72));
  }
  else
  {
    v8 = *(_OWORD *)(v4 + 64);
    *((_QWORD *)this + 2) = *(_QWORD *)(v5 + 80);
    *(_OWORD *)this = v8;
  }
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1B5AC42D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest::maybe_write_dot_file(AMCP::Log::Scope_Registry ***this)
{
  std::string *v2;
  __int128 v3;
  const char *v4;
  const char *v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  std::__shared_weak_count *st_ino;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::ios_base *v24;
  const std::locale::facet *v25;
  const std::locale::facet *v26;
  const std::locale::facet *v27;
  const std::locale::facet *v28;
  unint64_t v29;
  unint64_t v30;
  const std::locale::facet *v31;
  const std::locale::facet *v32;
  const std::locale::facet *v33;
  AMCP::Log::Scope_Registry **v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  AMCP::Log::Scope_Registry *v38;
  std::string::size_type v39;
  std::string::size_type v40;
  const std::string::value_type *v41;
  uint64_t v42;
  _BYTE *v43;
  char *v44;
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  void **v55;
  std::string::size_type v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  __int128 v60;
  void **v61;
  std::string::size_type v62;
  const std::string::value_type *v63;
  std::string::size_type v64;
  unint64_t v65;
  uint64_t v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  __int128 v70;
  void **v71;
  std::string::size_type v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  void **v77;
  std::string::size_type v78;
  std::string *v79;
  std::string::size_type size;
  const std::locale::facet *v81;
  _QWORD *v82;
  _QWORD *v83;
  const std::locale::facet *v84;
  unint64_t v85;
  AMCP::Log::Scope_Registry *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint8x8_t v91;
  _QWORD **v92;
  _QWORD *i;
  unint64_t v94;
  float v95;
  _BOOL8 v96;
  unint64_t v97;
  unint64_t v98;
  size_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  const std::locale::facet *v105;
  const std::locale::facet *v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t nth_connection_list;
  unint64_t **v115;
  unint64_t **v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *p_shared_owners;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint8x8_t v124;
  unint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  unint64_t v128;
  char *v129;
  __int128 v130;
  unint64_t v131;
  uint8x8_t v132;
  unint64_t v133;
  _QWORD *v134;
  _QWORD *j;
  unint64_t v136;
  _QWORD *v137;
  std::string *v138;
  std::string::size_type v139;
  const std::locale::facet *v140;
  _QWORD *v141;
  std::string *v142;
  std::string::size_type v143;
  _QWORD *v144;
  std::string *v145;
  std::string::size_type v146;
  const std::locale::facet *v147;
  unint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  std::string *v151;
  std::string::size_type v152;
  std::string *v153;
  std::string::size_type v154;
  const std::locale::facet *v155;
  unint64_t *v156;
  unint64_t v157;
  const std::locale::facet *v158;
  _opaque_pthread_t *v159;
  mach_port_t v160;
  std::string *v161;
  AMCP::Log::Scope_Registry **v162;
  AMCP::Log::Scope_Registry **v163;
  _QWORD *v164;
  char v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  AMCP::Log::Scope_Registry **v169;
  std::string v170;
  std::string v171;
  void *v172[2];
  unsigned __int8 v173;
  void *v174[2];
  unsigned __int8 v175;
  AMCP::Log::Scope_Registry *v176;
  unint64_t v177;
  void *v178[2];
  __int128 v179;
  int v180;
  _BYTE v181[32];
  float v182;
  std::string v183;
  std::string v184;
  std::string v185;
  std::string v186;
  void *__p[2];
  char *v188;
  _BYTE v189[32];
  int v190;
  uint64_t v191[3];
  uint64_t v192[3];
  uint64_t v193[3];
  uint64_t v194[3];
  _QWORD v195[3];
  std::string v196;
  stat v197[2];
  _QWORD v198[22];

  v198[19] = *MEMORY[0x1E0C80C00];
  AMCP::Graph::File_Capture_Settings::instance((AMCP::Graph::File_Capture_Settings *)this);
  if (byte_1EF12F85C)
  {
    std::string::basic_string[abi:ne180100]<0>(v174, ".dot");
    AMCP::Graph::Manifest::get_iocontext_uid((AMCP::Graph::Manifest *)v172, this);
    get_temporary_folder((std::string *)v197);
    v2 = std::string::append((std::string *)v197, "Graphs/", 7uLL);
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    *(_QWORD *)&v181[16] = *((_QWORD *)&v2->__r_.__value_.__l + 2);
    *(_OWORD *)v181 = v3;
    v2->__r_.__value_.__l.__size_ = 0;
    v2->__r_.__value_.__r.__words[2] = 0;
    v2->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v197[0].st_gid) < 0)
      operator delete(*(void **)&v197[0].st_dev);
    if (v181[23] >= 0)
      v4 = v181;
    else
      v4 = *(const char **)v181;
    if (stat(v4, v197) == -1)
    {
      if (v181[23] >= 0)
        v5 = v181;
      else
        v5 = *(const char **)v181;
      mkdir(v5, 0x1FDu);
    }
    if ((v173 & 0x80u) == 0)
      v6 = v172;
    else
      v6 = (void **)v172[0];
    if ((v173 & 0x80u) == 0)
      v7 = v173;
    else
      v7 = (std::string::size_type)v172[1];
    v8 = std::string::append((std::string *)v181, (const std::string::value_type *)v6, v7);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    *(_QWORD *)&v189[16] = *((_QWORD *)&v8->__r_.__value_.__l + 2);
    *(_OWORD *)v189 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append((std::string *)v189, "-Manifest", 9uLL);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v171.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if ((v189[23] & 0x80000000) != 0)
      operator delete(*(void **)v189);
    if ((v181[23] & 0x80000000) != 0)
      operator delete(*(void **)v181);
    std::string::append(&v171, "-XXXXXX", 7uLL);
    if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v171;
    else
      v12 = (std::string *)v171.__r_.__value_.__r.__words[0];
    mktemp((char *)v12);
    if ((v175 & 0x80u) == 0)
      v13 = v174;
    else
      v13 = (void **)v174[0];
    if ((v175 & 0x80u) == 0)
      v14 = v175;
    else
      v14 = (std::string::size_type)v174[1];
    v15 = std::string::append(&v171, (const std::string::value_type *)v13, v14);
    if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v170, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
    else
      v170 = v171;
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v197, "com.apple.coreaudio", "AMCP");
    st_ino = (std::__shared_weak_count *)v197[0].st_ino;
    v17 = **(NSObject ***)&v197[0].st_dev;
    if (v197[0].st_ino)
    {
      v18 = (unint64_t *)(v197[0].st_ino + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))st_ino->__on_zero_shared)(st_ino);
        std::__shared_weak_count::__release_weak(st_ino);
      }
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      v159 = pthread_self();
      v160 = pthread_mach_thread_np(v159);
      v161 = &v170;
      if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v161 = (std::string *)v170.__r_.__value_.__r.__words[0];
      v197[0].st_dev = 67109890;
      *(_DWORD *)&v197[0].st_mode = v160;
      LOWORD(v197[0].st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&v197[0].st_ino + 2) = (__darwin_ino64_t)"Manifest.cpp";
      HIWORD(v197[0].st_uid) = 1024;
      v197[0].st_gid = 984;
      LOWORD(v197[0].st_rdev) = 2080;
      *(_QWORD *)((char *)&v197[0].st_rdev + 2) = v161;
      _os_log_debug_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Manifest::writing manifest dot file to %s", (uint8_t *)v197, 0x22u);
    }
    memset(v181, 0, sizeof(v181));
    v182 = 1.0;
    v20 = MEMORY[0x1E0DE4FB0];
    v21 = MEMORY[0x1E0DE4FB0] + 64;
    v22 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
    v23 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
    v198[0] = MEMORY[0x1E0DE4FB0] + 64;
    *(_QWORD *)&v197[0].st_dev = v22;
    *(_QWORD *)((char *)&v197[0].st_dev + *(_QWORD *)(v22 - 24)) = v23;
    v24 = (std::ios_base *)((char *)v197 + *(_QWORD *)(*(_QWORD *)&v197[0].st_dev - 24));
    std::ios_base::init(v24, &v197[0].st_ino);
    v24[1].__vftable = 0;
    v24[1].__fmtflags_ = -1;
    *(_QWORD *)&v197[0].st_dev = v20 + 24;
    v198[0] = v21;
    MEMORY[0x1B5E50268](&v197[0].st_ino);
    if (!std::filebuf::open())
      std::ios_base::clear((std::ios_base *)((char *)v197 + *(_QWORD *)(*(_QWORD *)&v197[0].st_dev - 24)), *(_DWORD *)((char *)&v197[0].st_atimespec.tv_sec + *(_QWORD *)(*(_QWORD *)&v197[0].st_dev - 24)) | 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"// You can view this on http://www.webgraphviz.com\n", 51);
    std::ios_base::getloc((const std::ios_base *)((char *)v197 + *(_QWORD *)(*(_QWORD *)&v197[0].st_dev - 24)));
    v25 = std::locale::use_facet((const std::locale *)v189, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale((std::locale *)v189);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"\tdigraph G {", 12);
    std::ios_base::getloc((const std::ios_base *)((char *)v197 + *(_QWORD *)(*(_QWORD *)&v197[0].st_dev - 24)));
    v26 = std::locale::use_facet((const std::locale *)v189, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
    std::locale::~locale((std::locale *)v189);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"\tsize =\"8,8\";", 13);
    std::ios_base::getloc((const std::ios_base *)((char *)v197 + *(_QWORD *)(*(_QWORD *)&v197[0].st_dev - 24)));
    v27 = std::locale::use_facet((const std::locale *)v189, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
    std::locale::~locale((std::locale *)v189);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"\tnode [shape=plaintext fontcolor=white]", 39);
    std::ios_base::getloc((const std::ios_base *)((char *)v197 + *(_QWORD *)(*(_QWORD *)&v197[0].st_dev - 24)));
    v28 = std::locale::use_facet((const std::locale *)v189, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
    std::locale::~locale((std::locale *)v189);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"\n\t/* write the hidden positioning graph on the left */\n\t", 56);
    if (this[2] != this[1])
    {
      v29 = 0;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"P", 1);
        std::ostream::operator<<();
        v30 = ((char *)this[2] - (char *)this[1]) >> 4;
        if (v29 < v30 - 1)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"->", 2);
          v30 = ((char *)this[2] - (char *)this[1]) >> 4;
        }
        ++v29;
      }
      while (v29 < v30);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)" [color=white]", 14);
    std::ios_base::getloc((const std::ios_base *)((char *)v197 + *(_QWORD *)(*(_QWORD *)&v197[0].st_dev - 24)));
    v31 = std::locale::use_facet((const std::locale *)v189, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
    std::locale::~locale((std::locale *)v189);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"\n\t/* write the nodes */", 23);
    std::ios_base::getloc((const std::ios_base *)((char *)v197 + *(_QWORD *)(*(_QWORD *)&v197[0].st_dev - 24)));
    v32 = std::locale::use_facet((const std::locale *)v189, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
    std::locale::~locale((std::locale *)v189);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"\tnode [shape=record fontname=Helvetica fontsize=8 fontcolor=black];",
      67);
    std::ios_base::getloc((const std::ios_base *)((char *)v197 + *(_QWORD *)(*(_QWORD *)&v197[0].st_dev - 24)));
    v33 = std::locale::use_facet((const std::locale *)v189, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
    std::locale::~locale((std::locale *)v189);
    std::ostream::put();
    std::ostream::flush();
    v34 = this[1];
    v162 = this[2];
    if (v34 != v162)
    {
      v35 = 0;
      while (1)
      {
        v36 = (_QWORD *)std::ostream::operator<<();
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"[label=\"", 8);
        v38 = *v34;
        v164 = v37;
        if (*((char *)*v34 + 87) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v189, *((const std::string::value_type **)v38 + 8), *((_QWORD *)v38 + 9));
        }
        else
        {
          *(_OWORD *)v189 = *((_OWORD *)v38 + 4);
          *(_QWORD *)&v189[16] = *((_QWORD *)v38 + 10);
        }
        v39 = v189[23];
        v40 = *(_QWORD *)&v189[8];
        v41 = *(const std::string::value_type **)v189;
        if (v189[23] >= 0)
          v42 = v189[23];
        else
          v42 = *(_QWORD *)&v189[8];
        if (v189[23] >= 0)
          v43 = v189;
        else
          v43 = *(_BYTE **)v189;
        if (v42 >= 2)
        {
          v44 = &v43[v42];
          v45 = v43;
          do
          {
            v46 = (char *)memchr(v45, 45, v42 - 1);
            if (!v46)
              break;
            if (*(_WORD *)v46 == 15917)
            {
LABEL_170:
              if (v46 != v44 && v46 - v43 != -1)
              {
                std::string::replace((std::string *)v189, v46 - v43, 2uLL, "-\\>", 3uLL);
                v39 = v189[23];
                v40 = *(_QWORD *)&v189[8];
                v41 = *(const std::string::value_type **)v189;
                v101 = v189[23] >= 0 ? v189[23] : *(_QWORD *)&v189[8];
                v43 = v189[23] >= 0 ? v189 : *(_BYTE **)v189;
                if (v101 >= 2)
                {
                  v44 = &v43[v101];
                  v100 = v43;
                  do
                  {
                    v46 = (char *)memchr(v100, 45, v101 - 1);
                    if (!v46)
                      break;
                    if (*(_WORD *)v46 == 15917)
                      goto LABEL_170;
                    v100 = v46 + 1;
                    v101 = v44 - (_BYTE *)v100;
                  }
                  while (v44 - (_BYTE *)v100 >= 2);
                }
              }
              break;
            }
            v45 = v46 + 1;
            v42 = v44 - (_BYTE *)v45;
          }
          while (v44 - (_BYTE *)v45 >= 2);
        }
        v48 = *(_QWORD *)*v34;
        v47 = *((_QWORD *)*v34 + 1);
        v166 = *((_QWORD *)*v34 + 3);
        v168 = *((_QWORD *)*v34 + 4);
        v196.__r_.__value_.__r.__words[2] = 0x200000000000000;
        *(_OWORD *)&v196.__r_.__value_.__l.__data_ = 0x207BuLL;
        v49 = v47 - v48;
        if (v47 != v48)
        {
          std::string::append(&v196, "{ ", 2uLL);
          v50 = 0;
          do
          {
            AMCP::Graph::get_connection_format_string((uint64_t)v178, *v34, 0, v50);
            std::to_string(&v183, v50);
            v51 = std::string::insert(&v183, 0, " <source", 8uLL);
            v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
            v184.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v52;
            v51->__r_.__value_.__l.__size_ = 0;
            v51->__r_.__value_.__r.__words[2] = 0;
            v51->__r_.__value_.__r.__words[0] = 0;
            v53 = std::string::append(&v184, ">", 1uLL);
            v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
            v185.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v54;
            v53->__r_.__value_.__l.__size_ = 0;
            v53->__r_.__value_.__r.__words[2] = 0;
            v53->__r_.__value_.__r.__words[0] = 0;
            if ((SBYTE7(v179) & 0x80u) == 0)
              v55 = v178;
            else
              v55 = (void **)v178[0];
            if ((SBYTE7(v179) & 0x80u) == 0)
              v56 = BYTE7(v179);
            else
              v56 = (std::string::size_type)v178[1];
            v57 = std::string::append(&v185, (const std::string::value_type *)v55, v56);
            v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
            v186.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v186.__r_.__value_.__l.__data_ = v58;
            v57->__r_.__value_.__l.__size_ = 0;
            v57->__r_.__value_.__r.__words[2] = 0;
            v57->__r_.__value_.__r.__words[0] = 0;
            v59 = std::string::append(&v186, " \\  ", 4uLL);
            v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
            v188 = (char *)v59->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v60;
            v59->__r_.__value_.__l.__size_ = 0;
            v59->__r_.__value_.__r.__words[2] = 0;
            v59->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v188) >= 0)
              v61 = __p;
            else
              v61 = (void **)__p[0];
            if (SHIBYTE(v188) >= 0)
              v62 = HIBYTE(v188);
            else
              v62 = (std::string::size_type)__p[1];
            std::string::append(&v196, (const std::string::value_type *)v61, v62);
            if (SHIBYTE(v188) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v186.__r_.__value_.__l.__data_);
            if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v185.__r_.__value_.__l.__data_);
            if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v184.__r_.__value_.__l.__data_);
            if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v183.__r_.__value_.__l.__data_);
            if (v49 / 40 - 1 != v50)
              std::string::append(&v196, " | ", 3uLL);
            if (SBYTE7(v179) < 0)
              operator delete(v178[0]);
            ++v50;
          }
          while (v49 / 40 != v50);
          std::string::append(&v196, "} | ", 4uLL);
          v39 = v189[23];
          v40 = *(_QWORD *)&v189[8];
          v41 = *(const std::string::value_type **)v189;
        }
        if ((v39 & 0x80u) == 0)
          v63 = v189;
        else
          v63 = v41;
        if ((v39 & 0x80u) == 0)
          v64 = v39;
        else
          v64 = v40;
        std::string::append(&v196, v63, v64);
        if (v168 != v166)
        {
          std::string::append(&v196, " | { ", 5uLL);
          v65 = 0;
          v66 = (v168 - v166) / 40;
          do
          {
            AMCP::Graph::get_connection_format_string((uint64_t)v178, *v34, 1u, v65);
            std::to_string(&v183, v65);
            v67 = std::string::insert(&v183, 0, " <dest", 6uLL);
            v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
            v184.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v68;
            v67->__r_.__value_.__l.__size_ = 0;
            v67->__r_.__value_.__r.__words[2] = 0;
            v67->__r_.__value_.__r.__words[0] = 0;
            v69 = std::string::append(&v184, ">", 1uLL);
            v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
            v185.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v70;
            v69->__r_.__value_.__l.__size_ = 0;
            v69->__r_.__value_.__r.__words[2] = 0;
            v69->__r_.__value_.__r.__words[0] = 0;
            if ((SBYTE7(v179) & 0x80u) == 0)
              v71 = v178;
            else
              v71 = (void **)v178[0];
            if ((SBYTE7(v179) & 0x80u) == 0)
              v72 = BYTE7(v179);
            else
              v72 = (std::string::size_type)v178[1];
            v73 = std::string::append(&v185, (const std::string::value_type *)v71, v72);
            v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
            v186.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v186.__r_.__value_.__l.__data_ = v74;
            v73->__r_.__value_.__l.__size_ = 0;
            v73->__r_.__value_.__r.__words[2] = 0;
            v73->__r_.__value_.__r.__words[0] = 0;
            v75 = std::string::append(&v186, " \\  ", 4uLL);
            v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
            v188 = (char *)v75->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v76;
            v75->__r_.__value_.__l.__size_ = 0;
            v75->__r_.__value_.__r.__words[2] = 0;
            v75->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v188) >= 0)
              v77 = __p;
            else
              v77 = (void **)__p[0];
            if (SHIBYTE(v188) >= 0)
              v78 = HIBYTE(v188);
            else
              v78 = (std::string::size_type)__p[1];
            std::string::append(&v196, (const std::string::value_type *)v77, v78);
            if (SHIBYTE(v188) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v186.__r_.__value_.__l.__data_);
            if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v185.__r_.__value_.__l.__data_);
            if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v184.__r_.__value_.__l.__data_);
            if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v183.__r_.__value_.__l.__data_);
            if (v66 - 1 != v65)
              std::string::append(&v196, " | ", 3uLL);
            if (SBYTE7(v179) < 0)
              operator delete(v178[0]);
            ++v65;
          }
          while (v66 != v65);
        }
        std::string::append(&v196, "}}", 2uLL);
        if ((v189[23] & 0x80000000) != 0)
          operator delete(*(void **)v189);
        if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v79 = &v196;
        else
          v79 = (std::string *)v196.__r_.__value_.__r.__words[0];
        if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v196.__r_.__value_.__r.__words[2]);
        else
          size = v196.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)v79, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"\" ];", 4);
        std::ios_base::getloc((const std::ios_base *)((char *)v164 + *(_QWORD *)(*v164 - 24)));
        v81 = std::locale::use_facet((const std::locale *)v189, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v81->__vftable[2].~facet_0)(v81, 10);
        std::locale::~locale((std::locale *)v189);
        std::ostream::put();
        std::ostream::flush();
        if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v196.__r_.__value_.__l.__data_);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"\t\t{rank=same P", 14);
        v82 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)" ", 1);
        v83 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"}; /* fix this node to the hidden node */",
          41);
        std::ios_base::getloc((const std::ios_base *)((char *)v83 + *(_QWORD *)(*v83 - 24)));
        v84 = std::locale::use_facet((const std::locale *)v189, MEMORY[0x1E0DE4A90]);
        v85 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v84->__vftable[2].~facet_0)(v84, 10);
        std::locale::~locale((std::locale *)v189);
        std::ostream::put();
        std::ostream::flush();
        v86 = *v34;
        v87 = 0x9DDFEA08EB382D69 * ((8 * *v34 + 8) ^ ((unint64_t)*v34 >> 32));
        v88 = 0x9DDFEA08EB382D69 * (((unint64_t)*v34 >> 32) ^ (v87 >> 47) ^ v87);
        v89 = 0x9DDFEA08EB382D69 * (v88 ^ (v88 >> 47));
        v90 = *(_QWORD *)&v181[8];
        if (*(_QWORD *)&v181[8])
        {
          v91 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v181[8]);
          v91.i16[0] = vaddlv_u8(v91);
          if (v91.u32[0] > 1uLL)
          {
            v85 = 0x9DDFEA08EB382D69 * (v88 ^ (v88 >> 47));
            if (v89 >= *(_QWORD *)&v181[8])
              v85 = v89 % *(_QWORD *)&v181[8];
          }
          else
          {
            v85 = v89 & (*(_QWORD *)&v181[8] - 1);
          }
          v92 = *(_QWORD ***)(*(_QWORD *)v181 + 8 * v85);
          if (v92)
          {
            for (i = *v92; i; i = (_QWORD *)*i)
            {
              v94 = i[1];
              if (v94 == v89)
              {
                if ((AMCP::Log::Scope_Registry *)i[2] == v86)
                  goto LABEL_191;
              }
              else
              {
                if (v91.u32[0] > 1uLL)
                {
                  if (v94 >= *(_QWORD *)&v181[8])
                    v94 %= *(_QWORD *)&v181[8];
                }
                else
                {
                  v94 &= *(_QWORD *)&v181[8] - 1;
                }
                if (v94 != v85)
                  break;
              }
            }
          }
        }
        i = operator new(0x20uLL);
        *i = 0;
        i[1] = v89;
        i[2] = v86;
        i[3] = 0;
        v95 = (float)(unint64_t)(*(_QWORD *)&v181[24] + 1);
        if (!v90 || (float)(v182 * (float)v90) < v95)
        {
          v96 = (v90 & (v90 - 1)) != 0;
          if (v90 < 3)
            v96 = 1;
          v97 = v96 | (2 * v90);
          v98 = vcvtps_u32_f32(v95 / v182);
          if (v97 <= v98)
            v99 = v98;
          else
            v99 = v97;
          std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v181, v99);
          v90 = *(_QWORD *)&v181[8];
          if ((*(_QWORD *)&v181[8] & (*(_QWORD *)&v181[8] - 1)) != 0)
          {
            if (v89 >= *(_QWORD *)&v181[8])
              v85 = v89 % *(_QWORD *)&v181[8];
            else
              v85 = v89;
          }
          else
          {
            v85 = (*(_QWORD *)&v181[8] - 1) & v89;
          }
        }
        v102 = *(_QWORD *)v181;
        v103 = *(_QWORD **)(*(_QWORD *)v181 + 8 * v85);
        if (v103)
        {
          *i = *v103;
        }
        else
        {
          *i = *(_QWORD *)&v181[16];
          *(_QWORD *)&v181[16] = i;
          *(_QWORD *)(v102 + 8 * v85) = &v181[16];
          if (!*i)
            goto LABEL_190;
          v104 = *(_QWORD *)(*i + 8);
          if ((v90 & (v90 - 1)) != 0)
          {
            if (v104 >= v90)
              v104 %= v90;
          }
          else
          {
            v104 &= v90 - 1;
          }
          v103 = (_QWORD *)(*(_QWORD *)v181 + 8 * v104);
        }
        *v103 = i;
LABEL_190:
        ++*(_QWORD *)&v181[24];
LABEL_191:
        i[3] = v35++;
        v34 += 2;
        if (v34 == v162)
          goto LABEL_194;
      }
    }
    v35 = 0;
LABEL_194:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"\tnode [shape=box,style=\"rounded,filled\",height=.1];",
      51);
    std::ios_base::getloc((const std::ios_base *)((char *)v197 + *(_QWORD *)(*(_QWORD *)&v197[0].st_dev - 24)));
    v105 = std::locale::use_facet((const std::locale *)v189, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v105->__vftable[2].~facet_0)(v105, 10);
    std::locale::~locale((std::locale *)v189);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"\n\t/* write the edges and buffers with clock coloring */", 55);
    std::ios_base::getloc((const std::ios_base *)((char *)v197 + *(_QWORD *)(*(_QWORD *)&v197[0].st_dev - 24)));
    v106 = std::locale::use_facet((const std::locale *)v189, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v106->__vftable[2].~facet_0)(v106, 10);
    std::locale::~locale((std::locale *)v189);
    std::ostream::put();
    std::ostream::flush();
    std::string::basic_string[abi:ne180100]<0>(v189, "black");
    std::string::basic_string[abi:ne180100]<0>(&v189[24], "purple");
    std::string::basic_string[abi:ne180100]<0>(v191, "blue");
    std::string::basic_string[abi:ne180100]<0>(v192, "red");
    std::string::basic_string[abi:ne180100]<0>(v193, "green");
    std::string::basic_string[abi:ne180100]<0>(v194, "gray");
    std::string::basic_string[abi:ne180100]<0>(v195, "orange");
    __p[0] = 0;
    __p[1] = 0;
    v188 = 0;
    v178[0] = __p;
    LOBYTE(v178[1]) = 0;
    __p[0] = operator new(0xA8uLL);
    __p[1] = __p[0];
    v188 = (char *)__p[0] + 168;
    v107 = 0;
    __p[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v188, (__int128 *)v189, (__int128 *)&v196, (std::string *)__p[0]);
    do
    {
      if (SHIBYTE(v195[v107 + 2]) < 0)
        operator delete((void *)v195[v107]);
      v107 -= 3;
    }
    while (v107 != -21);
    memset(v189, 0, sizeof(v189));
    v190 = 1065353216;
    *(_OWORD *)v178 = 0u;
    v179 = 0u;
    v180 = 1065353216;
    v169 = this[1];
    v163 = this[2];
    if (v169 != v163)
    {
      v108 = 0;
      do
      {
        v109 = 0;
        v110 = 0;
        v196.__r_.__value_.__r.__words[0] = 0x100000000;
        do
        {
          v111 = *((_DWORD *)&v196.__r_.__value_.__l.__data_ + v110);
          v165 = v109;
          v112 = *((_QWORD *)*v169 + 3 * v111 + 1) - *((_QWORD *)*v169 + 3 * v111);
          if (!v112)
            goto LABEL_294;
          v113 = 0;
          v167 = 0xCCCCCCCCCCCCCCCDLL * (v112 >> 3);
          do
          {
            nth_connection_list = AMCP::Graph::Manifest_Task::get_nth_connection_list(*v169, v113, v111);
            v115 = *(unint64_t ***)nth_connection_list;
            v116 = *(unint64_t ***)(nth_connection_list + 8);
            while (v115 != v116)
            {
              v117 = (*v115)[16];
              v118 = (std::__shared_weak_count *)(*v115)[17];
              v184.__r_.__value_.__r.__words[0] = v117;
              v184.__r_.__value_.__l.__size_ = (std::string::size_type)v118;
              if (v118)
              {
                p_shared_owners = (unint64_t *)&v118->__shared_owners_;
                do
                  v120 = __ldxr(p_shared_owners);
                while (__stxr(v120 + 1, p_shared_owners));
              }
              if (!v178[1])
                goto LABEL_224;
              v121 = 0x9DDFEA08EB382D69 * (((8 * v117) + 8) ^ HIDWORD(v117));
              v122 = 0x9DDFEA08EB382D69 * (HIDWORD(v117) ^ (v121 >> 47) ^ v121);
              v123 = 0x9DDFEA08EB382D69 * (v122 ^ (v122 >> 47));
              v124 = (uint8x8_t)vcnt_s8((int8x8_t)v178[1]);
              v124.i16[0] = vaddlv_u8(v124);
              if (v124.u32[0] > 1uLL)
              {
                v125 = v123;
                if ((void *)v123 >= v178[1])
                  v125 = v123 % (unint64_t)v178[1];
              }
              else
              {
                v125 = v123 & ((unint64_t)v178[1] - 1);
              }
              v126 = (_QWORD *)*((_QWORD *)v178[0] + v125);
              if (!v126 || (v127 = (_QWORD *)*v126) == 0)
              {
LABEL_224:
                std::__hash_table<std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<AMCP::Graph::Timebase>,std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,true>,std::__unordered_map_equal<std::shared_ptr<AMCP::Graph::Timebase>,std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<AMCP::Graph::Timebase>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<AMCP::Graph::Timebase> const&>,std::tuple<>>((uint64_t)v178, v117, &v184)[4] = v108;
                v148 = v108++;
                goto LABEL_225;
              }
              while (1)
              {
                v128 = v127[1];
                if (v128 == v123)
                  break;
                if (v124.u32[0] > 1uLL)
                {
                  if ((void *)v128 >= v178[1])
                    v128 %= (unint64_t)v178[1];
                }
                else
                {
                  v128 &= (unint64_t)v178[1] - 1;
                }
                if (v128 != v125)
                  goto LABEL_224;
LABEL_223:
                v127 = (_QWORD *)*v127;
                if (!v127)
                  goto LABEL_224;
              }
              if (v127[2] != v117)
                goto LABEL_223;
              v148 = std::__hash_table<std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<AMCP::Graph::Timebase>,std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,true>,std::__unordered_map_equal<std::shared_ptr<AMCP::Graph::Timebase>,std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<AMCP::Graph::Timebase>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<AMCP::Graph::Timebase> const&>,std::tuple<>>((uint64_t)v178, v117, &v184)[4];
LABEL_225:
              if (v148 >= 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3))
              {
                std::string::basic_string[abi:ne180100]<0>(&v186, "black");
              }
              else
              {
                v129 = (char *)__p[0] + 24 * v148;
                if (v129[23] < 0)
                {
                  std::string::__init_copy_ctor_external(&v186, *(const std::string::value_type **)v129, *((_QWORD *)v129 + 1));
                }
                else
                {
                  v130 = *(_OWORD *)v129;
                  v186.__r_.__value_.__r.__words[2] = *((_QWORD *)v129 + 2);
                  *(_OWORD *)&v186.__r_.__value_.__l.__data_ = v130;
                }
              }
              v131 = **v115;
              v177 = v131;
              if (*(_QWORD *)&v189[8])
              {
                v132 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v189[8]);
                v132.i16[0] = vaddlv_u8(v132);
                if (v132.u32[0] > 1uLL)
                {
                  v133 = v131;
                  if (v131 >= *(_QWORD *)&v189[8])
                    v133 = v131 % *(_QWORD *)&v189[8];
                }
                else
                {
                  v133 = (*(_QWORD *)&v189[8] - 1) & v131;
                }
                v134 = *(_QWORD **)(*(_QWORD *)v189 + 8 * v133);
                if (v134)
                {
                  for (j = (_QWORD *)*v134; j; j = (_QWORD *)*j)
                  {
                    v136 = j[1];
                    if (v136 == v131)
                    {
                      if (j[2] == v131)
                      {
                        std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((float *)v189, v131, &v177);
                        if (!v111)
                          goto LABEL_269;
LABEL_255:
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"\t", 1);
                        v176 = *v169;
                        std::__hash_table<std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>,std::__unordered_map_hasher<AMCP::Graph::Manifest_Task *,std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>,std::hash<AMCP::Graph::Manifest_Task *>,std::equal_to<AMCP::Graph::Manifest_Task *>,true>,std::__unordered_map_equal<AMCP::Graph::Manifest_Task *,std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>,std::equal_to<AMCP::Graph::Manifest_Task *>,std::hash<AMCP::Graph::Manifest_Task *>,true>,std::allocator<std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>>>::__emplace_unique_key_args<AMCP::Graph::Manifest_Task *,std::piecewise_construct_t const&,std::tuple<AMCP::Graph::Manifest_Task *&&>,std::tuple<>>((uint64_t)v181, (unint64_t)v176, &v176);
                        v141 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)":dest", 5);
                        std::to_string(&v185, v113);
                        if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v142 = &v185;
                        else
                          v142 = (std::string *)v185.__r_.__value_.__r.__words[0];
                        if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v143 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
                        else
                          v143 = v185.__r_.__value_.__l.__size_;
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)v142, v143);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)":s->", 4);
                        v144 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)":n[color=", 9);
                        if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v145 = &v186;
                        else
                          v145 = (std::string *)v186.__r_.__value_.__r.__words[0];
                        if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v146 = HIBYTE(v186.__r_.__value_.__r.__words[2]);
                        else
                          v146 = v186.__r_.__value_.__l.__size_;
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)v145, v146);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)" arrowhead=none];",
                          17);
                        std::ios_base::getloc((const std::ios_base *)((char *)v144 + *(_QWORD *)(*v144 - 24)));
                        v147 = std::locale::use_facet((const std::locale *)&v183, MEMORY[0x1E0DE4A90]);
                        ((void (*)(const std::locale::facet *, uint64_t))v147->__vftable[2].~facet_0)(v147, 10);
                        std::locale::~locale((std::locale *)&v183);
                        std::ostream::put();
                        std::ostream::flush();
                        goto LABEL_282;
                      }
                    }
                    else
                    {
                      if (v132.u32[0] > 1uLL)
                      {
                        if (v136 >= *(_QWORD *)&v189[8])
                          v136 %= *(_QWORD *)&v189[8];
                      }
                      else
                      {
                        v136 &= *(_QWORD *)&v189[8] - 1;
                      }
                      if (v136 != v133)
                        break;
                    }
                  }
                }
              }
              std::to_string(&v185, v131);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"\t", 1);
              v137 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)"[label=\"", 8);
              if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v138 = &v185;
              else
                v138 = (std::string *)v185.__r_.__value_.__r.__words[0];
              if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v139 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
              else
                v139 = v185.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)v138, v139);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)"\" ];", 4);
              std::ios_base::getloc((const std::ios_base *)((char *)v137 + *(_QWORD *)(*v137 - 24)));
              v140 = std::locale::use_facet((const std::locale *)&v183, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v140->__vftable[2].~facet_0)(v140, 10);
              std::locale::~locale((std::locale *)&v183);
              std::ostream::put();
              std::ostream::flush();
              std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((float *)v189, v131, &v177)[3] = v35;
              if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v185.__r_.__value_.__l.__data_);
              ++v35;
              if (v111)
                goto LABEL_255;
LABEL_269:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"\t", 1);
              v149 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v149, (uint64_t)":s->", 4);
              v176 = *v169;
              std::__hash_table<std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>,std::__unordered_map_hasher<AMCP::Graph::Manifest_Task *,std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>,std::hash<AMCP::Graph::Manifest_Task *>,std::equal_to<AMCP::Graph::Manifest_Task *>,true>,std::__unordered_map_equal<AMCP::Graph::Manifest_Task *,std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>,std::equal_to<AMCP::Graph::Manifest_Task *>,std::hash<AMCP::Graph::Manifest_Task *>,true>,std::allocator<std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>>>::__emplace_unique_key_args<AMCP::Graph::Manifest_Task *,std::piecewise_construct_t const&,std::tuple<AMCP::Graph::Manifest_Task *&&>,std::tuple<>>((uint64_t)v181, (unint64_t)v176, &v176);
              v150 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)":source", 7);
              std::to_string(&v185, v113);
              if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v151 = &v185;
              else
                v151 = (std::string *)v185.__r_.__value_.__r.__words[0];
              if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v152 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
              else
                v152 = v185.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)v151, v152);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)":n[color=", 9);
              if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v153 = &v186;
              else
                v153 = (std::string *)v186.__r_.__value_.__r.__words[0];
              if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v154 = HIBYTE(v186.__r_.__value_.__r.__words[2]);
              else
                v154 = v186.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)v153, v154);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)"];", 2);
              std::ios_base::getloc((const std::ios_base *)((char *)v150 + *(_QWORD *)(*v150 - 24)));
              v155 = std::locale::use_facet((const std::locale *)&v183, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v155->__vftable[2].~facet_0)(v155, 10);
              std::locale::~locale((std::locale *)&v183);
              std::ostream::put();
              std::ostream::flush();
LABEL_282:
              if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v185.__r_.__value_.__l.__data_);
              if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v186.__r_.__value_.__l.__data_);
                if (!v118)
                  goto LABEL_292;
              }
              else if (!v118)
              {
                goto LABEL_292;
              }
              v156 = (unint64_t *)&v118->__shared_owners_;
              do
                v157 = __ldaxr(v156);
              while (__stlxr(v157 - 1, v156));
              if (!v157)
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v118);
              }
LABEL_292:
              v115 += 2;
            }
            ++v113;
          }
          while (v113 != v167);
LABEL_294:
          v109 = 1;
          v110 = 1;
        }
        while ((v165 & 1) == 0);
        v169 += 2;
      }
      while (v169 != v163);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"}", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v197 + *(_QWORD *)(*(_QWORD *)&v197[0].st_dev - 24)));
    v158 = std::locale::use_facet((const std::locale *)&v186, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v158->__vftable[2].~facet_0)(v158, 10);
    std::locale::~locale((std::locale *)&v186);
    std::ostream::put();
    std::ostream::flush();
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)v178);
    std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)v189);
    *(_QWORD *)v189 = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v189);
    *(_QWORD *)&v197[0].st_dev = *MEMORY[0x1E0DE4F48];
    *(_QWORD *)((char *)&v197[0].st_dev + *(_QWORD *)(*(_QWORD *)&v197[0].st_dev - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
    MEMORY[0x1B5E50274](&v197[0].st_ino);
    std::ostream::~ostream();
    MEMORY[0x1B5E50598](v198);
    std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)v181);
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v170.__r_.__value_.__l.__data_);
    if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v171.__r_.__value_.__l.__data_);
    if ((char)v173 < 0)
      operator delete(v172[0]);
    if ((char)v175 < 0)
      operator delete(v174[0]);
  }
}

void sub_1B5AC5E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,std::locale a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::locale a67;
  void *a71;
  std::locale a72;
  uint64_t v73;
  uint64_t v74;

  std::locale::~locale(&a67);
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)&a45);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&a72);
  a72.__locale_ = (std::locale::__imp *)&a71;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  v73 = MEMORY[0x1E0DE4F48];
  v74 = *MEMORY[0x1E0DE4F48];
  STACK[0x270] = *MEMORY[0x1E0DE4F48];
  *(unint64_t *)((char *)&STACK[0x270] + *(_QWORD *)(v74 - 24)) = *(_QWORD *)(v73 + 24);
  MEMORY[0x1B5E50274](a10);
  std::ostream::~ostream();
  MEMORY[0x1B5E50598](a11);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&a51);
  if (a22 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a36 < 0)
    operator delete(a31);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest::calculate_all_required_input_samples(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  AMCP::Log::Scope_Registry *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t **nth_connection_list;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  _opaque_pthread_t *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double sample_time;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  AMCP::Log::Scope_Registry *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  BOOL v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  BOOL v60;
  char v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  BOOL v74;
  unsigned __int8 *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unsigned __int8 *v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  char v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  BOOL v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  unsigned __int8 *v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  int v110;
  char v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  _BOOL8 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *size;
  NSObject *v128;
  unint64_t *v129;
  unint64_t v130;
  _opaque_pthread_t *v131;
  mach_port_t v132;
  double v133;
  double v134;
  std::logic_error *exception;
  double v136;
  double v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  std::logic_error v141;
  std::__shared_weak_count *v142;
  NSObject *v143;
  unint64_t *v144;
  unint64_t v145;
  _opaque_pthread_t *v146;
  mach_port_t v147;
  std::logic_error *v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  std::logic_error v152;
  std::__shared_weak_count *v153;
  NSObject *v154;
  unint64_t *v155;
  unint64_t v156;
  _opaque_pthread_t *v157;
  mach_port_t v158;
  std::logic_error *v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  std::logic_error v163;
  std::__shared_weak_count *v164;
  NSObject *v165;
  unint64_t *v166;
  unint64_t v167;
  _opaque_pthread_t *v168;
  mach_port_t v169;
  std::logic_error *v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  std::logic_error v174;
  std::__shared_weak_count *v175;
  NSObject *v176;
  unint64_t *v177;
  unint64_t v178;
  _opaque_pthread_t *v179;
  mach_port_t v180;
  std::logic_error *v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  std::logic_error v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  AMCP::Log::Scope_Registry *v189;
  unint64_t v190;
  __int128 v191;
  uint64_t v192;
  uint64_t (**v193)();
  __int128 v194;
  uint64_t v195;
  std::string v196;
  std::logic_error v197;
  std::string __p;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  char v203;
  int v204;
  __int128 v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  std::string buf;
  _BYTE v209[30];
  char v210;
  uint64_t v211;

  v211 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a1 + 8))
    return;
  do
  {
    v5 = *(_QWORD *)(v2 - 16);
    v2 -= 16;
    AMCP::Graph::Manifest_Task::maybe_create_data_flow_calculator(v5);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 104) + 40))(*(_QWORD *)(v5 + 104), a2);
  }
  while (v2 != *(_QWORD *)(a1 + 8));
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 == v2)
    return;
  v186 = a1;
  do
  {
    v7 = *(AMCP::Log::Scope_Registry **)(v6 - 16);
    v6 -= 16;
    v189 = v7;
    v8 = *((_QWORD *)v7 + 1) - *(_QWORD *)v7;
    if (!v8)
      continue;
    v9 = 0;
    v10 = v8 / 40;
    if (v10 <= 1)
      v10 = 1;
    v187 = v6;
    v188 = v10;
    do
    {
      v190 = v9;
      nth_connection_list = (uint64_t **)AMCP::Graph::Manifest_Task::get_nth_connection_list(v189, v9, 0);
      v13 = *nth_connection_list;
      v12 = nth_connection_list[1];
      while (v13 != v12)
      {
        v14 = *v13;
        v15 = *(_QWORD *)(*v13 + 160);
        v16 = *(_OWORD *)(*v13 + 192);
        v17 = *(_QWORD *)(*v13 + 200);
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 2;
        *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = v15;
        *(_OWORD *)v209 = v16;
        boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v204, v14 + 168, (uint64_t)&buf);
        v20 = *(std::__shared_weak_count **)&v209[8];
        if (*(_QWORD *)&v209[8])
        {
          v21 = (unint64_t *)(*(_QWORD *)&v209[8] + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v23 = *(_QWORD *)(v14 + 328);
        if (v23)
        {
          v24 = pthread_self();
          v25 = pthread_mach_thread_np(v24);
          AMCP::Graph::Manifest_Buffer::get_buffer_id(&buf, v14);
          AMCP::Wire_Identifier_to_string(&__p, (const void **)&buf.__r_.__value_.__l.__data_);
          AMCP::Graph::Manifest_Log::add_message(v23, 4, "%u\tManifest_Buffer(%ld)::update_producer_target_samples:  source: %s", v26, v27, v28, v29, v30, v25);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v210 < 0)
            operator delete(*(void **)&v209[16]);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          v31 = *(_QWORD *)(v14 + 328);
          if (v31)
          {
            sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v14 + 248));
            vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v204));
            AMCP::Graph::Manifest_Log::add_message(v31, 4, "\t\tcurrent target %lld, potential target %lld", v33, v34, v35, v36, v37, vcvtmd_s64_f64(sample_time));
          }
        }
        if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(v14 + 248), (AMCP::DAL::DAL_Time *)&v204))
        {
          *(_DWORD *)(v14 + 248) = v204;
          *(_OWORD *)(v14 + 256) = v205;
          std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(v14 + 272), v206, (uint64_t)v207);
        }
        v38 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v14 + 248));
        if (AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v14 + 248)) != (double)(uint64_t)floor(v38))
        {
          AMCP::Log::Scope_Registry::get(v39);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
          size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
          v128 = *(NSObject **)buf.__r_.__value_.__l.__data_;
          if (buf.__r_.__value_.__l.__size_)
          {
            v129 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
            do
              v130 = __ldaxr(v129);
            while (__stlxr(v130 - 1, v129));
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
          {
            v131 = pthread_self();
            v132 = pthread_mach_thread_np(v131);
            v133 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v14 + 248));
            v134 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v14 + 248));
            LODWORD(buf.__r_.__value_.__l.__data_) = 67110402;
            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v132;
            LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
            WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf.__r_.__value_.__r.__words[2]) = 456;
            *(_WORD *)v209 = 2080;
            *(_QWORD *)&v209[2] = "not (m_producer_target_position.get_sample_time().floor().get() == m_producer_target_p"
                                  "osition.get_sample_time().get_double())";
            *(_WORD *)&v209[10] = 2048;
            *(_QWORD *)&v209[12] = vcvtmd_s64_f64(v133);
            *(_WORD *)&v209[20] = 2048;
            *(double *)&v209[22] = v134;
            _os_log_error_impl(&dword_1B57BA000, v128, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s %lld != %f", (uint8_t *)&buf, 0x36u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v203);
          exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
          v136 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v14 + 248));
          v137 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v14 + 248));
          caulk::make_string((caulk *)"%lld != %f", (uint64_t)&v196, vcvtmd_s64_f64(v136), *(_QWORD *)&v137);
          std::logic_error::logic_error(&v197, &v196);
          v138 = MEMORY[0x1E0DE5018];
          v197.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)&__p, &v197);
          v199 = 0;
          v200 = 0;
          v201 = 0;
          v202 = -1;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&__p);
          *(_QWORD *)&v209[8] = "void AMCP::Graph::Manifest_Buffer::update_producer_target_samples()";
          *(_QWORD *)&v209[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          *(_DWORD *)&v209[24] = 456;
          std::vector<void *>::vector(&v191);
          v139 = backtrace((void **)v191, (*((_QWORD *)&v191 + 1) - (_QWORD)v191) >> 3);
          std::vector<void *>::resize((char **)&v191, v139);
          v193 = off_1E69A20A0;
          v194 = v191;
          v195 = v192;
          v191 = 0uLL;
          v192 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v193);
          exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
          std::logic_error::logic_error(exception, (const std::logic_error *)&buf);
          exception->__vftable = (std::logic_error_vtbl *)(v138 + 16);
          exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
          v140 = *(_QWORD *)v209;
          exception[1].__imp_.__imp_ = *(const char **)v209;
          if (v140)
            (*(void (**)(uint64_t))(*(_QWORD *)v140 + 24))(v140);
          v141 = *(std::logic_error *)&v209[8];
          LODWORD(exception[3].__vftable) = *(_DWORD *)&v209[24];
          exception[2] = v141;
          exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
          exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
          exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
        }
        v40 = *(_QWORD *)(v14 + 272);
        v41 = *(std::__shared_weak_count **)(v14 + 280);
        if (v41)
        {
          p_shared_owners = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldxr(p_shared_owners);
          while (__stxr(v43 + 1, p_shared_owners));
        }
        v44 = *(_QWORD *)(v14 + 128);
        v45 = *(std::__shared_weak_count **)(v14 + 136);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        v48 = (v40 | v44) == 0;
        if (!v40 || !v44)
          goto LABEL_60;
        v49 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v40 + 16))(v40);
        v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
        v50 = v49[23];
        if ((v50 & 0x80u) == 0)
          v51 = v49[23];
        else
          v51 = *((_QWORD *)v49 + 1);
        v52 = *(unsigned __int8 *)(v40 + 23);
        v53 = (char)v52;
        if ((v52 & 0x80u) != 0)
          v52 = *(_QWORD *)(v40 + 8);
        if (v51 == v52)
        {
          if (v53 >= 0)
            v54 = (unsigned __int8 *)v40;
          else
            v54 = *(unsigned __int8 **)v40;
          if ((v50 & 0x80) != 0)
          {
            v40 = memcmp(*(const void **)v49, v54, *((_QWORD *)v49 + 1));
            v48 = (_DWORD)v40 == 0;
            goto LABEL_60;
          }
          if (v49[23])
          {
            v55 = v50 - 1;
            do
            {
              v57 = *v49++;
              v56 = v57;
              v59 = *v54++;
              v58 = v59;
              v60 = v55-- != 0;
              v61 = v60;
              v48 = v56 == v58;
            }
            while (v56 == v58 && (v61 & 1) != 0);
LABEL_60:
            if (!v45)
              goto LABEL_65;
            goto LABEL_61;
          }
          v48 = 1;
          if (!v45)
            goto LABEL_65;
        }
        else
        {
          v48 = 0;
          if (!v45)
            goto LABEL_65;
        }
LABEL_61:
        v62 = (unint64_t *)&v45->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
LABEL_65:
        if (v41)
        {
          v64 = (unint64_t *)&v41->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        if (!v48)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v40);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
          v142 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
          v143 = *(NSObject **)buf.__r_.__value_.__l.__data_;
          if (buf.__r_.__value_.__l.__size_)
          {
            v144 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
            do
              v145 = __ldaxr(v144);
            while (__stlxr(v145 - 1, v144));
            if (!v145)
            {
              ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
              std::__shared_weak_count::__release_weak(v142);
            }
          }
          if (os_log_type_enabled(v143, OS_LOG_TYPE_ERROR))
          {
            v146 = pthread_self();
            v147 = pthread_mach_thread_np(v146);
            LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v147;
            LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
            WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf.__r_.__value_.__r.__words[2]) = 457;
            *(_WORD *)v209 = 2080;
            *(_QWORD *)&v209[2] = "not (is_same_timebase(m_producer_target_position.get_clock(), get_timebase()))";
            _os_log_error_impl(&dword_1B57BA000, v143, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v203);
          v148 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v196);
          std::logic_error::logic_error(&v197, &v196);
          v149 = MEMORY[0x1E0DE5018];
          v197.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)&__p, &v197);
          v199 = 0;
          v200 = 0;
          v201 = 0;
          v202 = -1;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&__p);
          *(_QWORD *)&v209[8] = "void AMCP::Graph::Manifest_Buffer::update_producer_target_samples()";
          *(_QWORD *)&v209[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          *(_DWORD *)&v209[24] = 457;
          std::vector<void *>::vector(&v191);
          v150 = backtrace((void **)v191, (*((_QWORD *)&v191 + 1) - (_QWORD)v191) >> 3);
          std::vector<void *>::resize((char **)&v191, v150);
          v193 = off_1E69A20A0;
          v194 = v191;
          v195 = v192;
          v191 = 0uLL;
          v192 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v193);
          v148[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
          std::logic_error::logic_error(v148, (const std::logic_error *)&buf);
          v148->__vftable = (std::logic_error_vtbl *)(v149 + 16);
          v148[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
          v151 = *(_QWORD *)v209;
          v148[1].__imp_.__imp_ = *(const char **)v209;
          if (v151)
            (*(void (**)(uint64_t))(*(_QWORD *)v151 + 24))(v151);
          v152 = *(std::logic_error *)&v209[8];
          LODWORD(v148[3].__vftable) = *(_DWORD *)&v209[24];
          v148[2] = v152;
          v148->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
          v148[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
          v148[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
        }
        v66 = *(_QWORD *)(v14 + 232);
        v67 = *(std::__shared_weak_count **)(v14 + 240);
        if (v67)
        {
          v68 = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
        }
        v70 = *(_QWORD *)(v14 + 128);
        v71 = *(std::__shared_weak_count **)(v14 + 136);
        if (v71)
        {
          v72 = (unint64_t *)&v71->__shared_owners_;
          do
            v73 = __ldxr(v72);
          while (__stxr(v73 + 1, v72));
        }
        v74 = (v66 | v70) == 0;
        if (!v66 || !v70)
          goto LABEL_100;
        v75 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v66 + 16))(v66);
        v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70);
        v76 = v75[23];
        if ((v76 & 0x80u) == 0)
          v77 = v75[23];
        else
          v77 = *((_QWORD *)v75 + 1);
        v78 = *(unsigned __int8 *)(v66 + 23);
        v79 = (char)v78;
        if ((v78 & 0x80u) != 0)
          v78 = *(_QWORD *)(v66 + 8);
        if (v77 == v78)
        {
          if (v79 >= 0)
            v80 = (unsigned __int8 *)v66;
          else
            v80 = *(unsigned __int8 **)v66;
          if ((v76 & 0x80) != 0)
          {
            v66 = memcmp(*(const void **)v75, v80, *((_QWORD *)v75 + 1));
            v74 = (_DWORD)v66 == 0;
            goto LABEL_100;
          }
          if (v75[23])
          {
            v81 = v76 - 1;
            do
            {
              v83 = *v75++;
              v82 = v83;
              v85 = *v80++;
              v84 = v85;
              v60 = v81-- != 0;
              v86 = v60;
              v74 = v82 == v84;
            }
            while (v82 == v84 && (v86 & 1) != 0);
LABEL_100:
            if (!v71)
              goto LABEL_105;
            goto LABEL_101;
          }
          v74 = 1;
          if (!v71)
            goto LABEL_105;
        }
        else
        {
          v74 = 0;
          if (!v71)
            goto LABEL_105;
        }
LABEL_101:
        v87 = (unint64_t *)&v71->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
LABEL_105:
        if (v67)
        {
          v89 = (unint64_t *)&v67->__shared_owners_;
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        if (!v74)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v66);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
          v153 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
          v154 = *(NSObject **)buf.__r_.__value_.__l.__data_;
          if (buf.__r_.__value_.__l.__size_)
          {
            v155 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
            do
              v156 = __ldaxr(v155);
            while (__stlxr(v156 - 1, v155));
            if (!v156)
            {
              ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
              std::__shared_weak_count::__release_weak(v153);
            }
          }
          if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
          {
            v157 = pthread_self();
            v158 = pthread_mach_thread_np(v157);
            LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v158;
            LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
            WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf.__r_.__value_.__r.__words[2]) = 458;
            *(_WORD *)v209 = 2080;
            *(_QWORD *)&v209[2] = "not (is_same_timebase(m_producer_write_position.get_clock(), get_timebase()))";
            _os_log_error_impl(&dword_1B57BA000, v154, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v203);
          v159 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v196);
          std::logic_error::logic_error(&v197, &v196);
          v160 = MEMORY[0x1E0DE5018];
          v197.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)&__p, &v197);
          v199 = 0;
          v200 = 0;
          v201 = 0;
          v202 = -1;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&__p);
          *(_QWORD *)&v209[8] = "void AMCP::Graph::Manifest_Buffer::update_producer_target_samples()";
          *(_QWORD *)&v209[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          *(_DWORD *)&v209[24] = 458;
          std::vector<void *>::vector(&v191);
          v161 = backtrace((void **)v191, (*((_QWORD *)&v191 + 1) - (_QWORD)v191) >> 3);
          std::vector<void *>::resize((char **)&v191, v161);
          v193 = off_1E69A20A0;
          v194 = v191;
          v195 = v192;
          v191 = 0uLL;
          v192 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v193);
          v159[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
          std::logic_error::logic_error(v159, (const std::logic_error *)&buf);
          v159->__vftable = (std::logic_error_vtbl *)(v160 + 16);
          v159[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
          v162 = *(_QWORD *)v209;
          v159[1].__imp_.__imp_ = *(const char **)v209;
          if (v162)
            (*(void (**)(uint64_t))(*(_QWORD *)v162 + 24))(v162);
          v163 = *(std::logic_error *)&v209[8];
          LODWORD(v159[3].__vftable) = *(_DWORD *)&v209[24];
          v159[2] = v163;
          v159->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
          v159[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
          v159[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
        }
        v91 = *(_QWORD *)(v14 + 192);
        v92 = *(std::__shared_weak_count **)(v14 + 200);
        if (v92)
        {
          v93 = (unint64_t *)&v92->__shared_owners_;
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
        }
        v95 = *(_QWORD *)(v14 + 128);
        v96 = *(std::__shared_weak_count **)(v14 + 136);
        if (v96)
        {
          v97 = (unint64_t *)&v96->__shared_owners_;
          do
            v98 = __ldxr(v97);
          while (__stxr(v98 + 1, v97));
        }
        v99 = (v91 | v95) == 0;
        if (!v91 || !v95)
          goto LABEL_140;
        v100 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v91 + 16))(v91);
        v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v95 + 16))(v95);
        v101 = v100[23];
        if ((v101 & 0x80u) == 0)
          v102 = v100[23];
        else
          v102 = *((_QWORD *)v100 + 1);
        v103 = *(unsigned __int8 *)(v91 + 23);
        v104 = (char)v103;
        if ((v103 & 0x80u) != 0)
          v103 = *(_QWORD *)(v91 + 8);
        if (v102 == v103)
        {
          if (v104 >= 0)
            v105 = (unsigned __int8 *)v91;
          else
            v105 = *(unsigned __int8 **)v91;
          if ((v101 & 0x80) != 0)
          {
            v91 = memcmp(*(const void **)v100, v105, *((_QWORD *)v100 + 1));
            v99 = (_DWORD)v91 == 0;
            goto LABEL_140;
          }
          if (v100[23])
          {
            v106 = v101 - 1;
            do
            {
              v108 = *v100++;
              v107 = v108;
              v110 = *v105++;
              v109 = v110;
              v60 = v106-- != 0;
              v111 = v60;
              v99 = v107 == v109;
            }
            while (v107 == v109 && (v111 & 1) != 0);
LABEL_140:
            if (!v96)
              goto LABEL_145;
            goto LABEL_141;
          }
          v99 = 1;
          if (!v96)
            goto LABEL_145;
        }
        else
        {
          v99 = 0;
          if (!v96)
            goto LABEL_145;
        }
LABEL_141:
        v112 = (unint64_t *)&v96->__shared_owners_;
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 - 1, v112));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
LABEL_145:
        if (v92)
        {
          v114 = (unint64_t *)&v92->__shared_owners_;
          do
            v115 = __ldaxr(v114);
          while (__stlxr(v115 - 1, v114));
          if (!v115)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        if (!v99)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v91);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
          v164 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
          v165 = *(NSObject **)buf.__r_.__value_.__l.__data_;
          if (buf.__r_.__value_.__l.__size_)
          {
            v166 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
            do
              v167 = __ldaxr(v166);
            while (__stlxr(v167 - 1, v166));
            if (!v167)
            {
              ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
              std::__shared_weak_count::__release_weak(v164);
            }
          }
          if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
          {
            v168 = pthread_self();
            v169 = pthread_mach_thread_np(v168);
            LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v169;
            LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
            WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf.__r_.__value_.__r.__words[2]) = 459;
            *(_WORD *)v209 = 2080;
            *(_QWORD *)&v209[2] = "not (is_same_timebase(m_consumer_read_position.get_clock(), get_timebase()))";
            _os_log_error_impl(&dword_1B57BA000, v165, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v203);
          v170 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v196);
          std::logic_error::logic_error(&v197, &v196);
          v171 = MEMORY[0x1E0DE5018];
          v197.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)&__p, &v197);
          v199 = 0;
          v200 = 0;
          v201 = 0;
          v202 = -1;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&__p);
          *(_QWORD *)&v209[8] = "void AMCP::Graph::Manifest_Buffer::update_producer_target_samples()";
          *(_QWORD *)&v209[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          *(_DWORD *)&v209[24] = 459;
          std::vector<void *>::vector(&v191);
          v172 = backtrace((void **)v191, (*((_QWORD *)&v191 + 1) - (_QWORD)v191) >> 3);
          std::vector<void *>::resize((char **)&v191, v172);
          v193 = off_1E69A20A0;
          v194 = v191;
          v195 = v192;
          v191 = 0uLL;
          v192 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v193);
          v170[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
          std::logic_error::logic_error(v170, (const std::logic_error *)&buf);
          v170->__vftable = (std::logic_error_vtbl *)(v171 + 16);
          v170[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
          v173 = *(_QWORD *)v209;
          v170[1].__imp_.__imp_ = *(const char **)v209;
          if (v173)
            (*(void (**)(uint64_t))(*(_QWORD *)v173 + 24))(v173);
          v174 = *(std::logic_error *)&v209[8];
          LODWORD(v170[3].__vftable) = *(_DWORD *)&v209[24];
          v170[2] = v174;
          v170->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
          v170[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
          v170[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
        }
        v116 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(v14 + 248), (AMCP::DAL::DAL_Time *)(v14 + 168));
        if (v116)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v116);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
          v175 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
          v176 = *(NSObject **)buf.__r_.__value_.__l.__data_;
          if (buf.__r_.__value_.__l.__size_)
          {
            v177 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
            do
              v178 = __ldaxr(v177);
            while (__stlxr(v178 - 1, v177));
            if (!v178)
            {
              ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
              std::__shared_weak_count::__release_weak(v175);
            }
          }
          if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
          {
            v179 = pthread_self();
            v180 = pthread_mach_thread_np(v179);
            LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v180;
            LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
            WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf.__r_.__value_.__r.__words[2]) = 464;
            *(_WORD *)v209 = 2080;
            *(_QWORD *)&v209[2] = "not (m_producer_target_position >= m_consumer_read_position)";
            _os_log_error_impl(&dword_1B57BA000, v176, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v203);
          v181 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v196);
          std::logic_error::logic_error(&v197, &v196);
          v182 = MEMORY[0x1E0DE5018];
          v197.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)&__p, &v197);
          v199 = 0;
          v200 = 0;
          v201 = 0;
          v202 = -1;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&__p);
          *(_QWORD *)&v209[8] = "void AMCP::Graph::Manifest_Buffer::update_producer_target_samples()";
          *(_QWORD *)&v209[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          *(_DWORD *)&v209[24] = 464;
          std::vector<void *>::vector(&v191);
          v183 = backtrace((void **)v191, (*((_QWORD *)&v191 + 1) - (_QWORD)v191) >> 3);
          std::vector<void *>::resize((char **)&v191, v183);
          v193 = off_1E69A20A0;
          v194 = v191;
          v195 = v192;
          v191 = 0uLL;
          v192 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v193);
          v181[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
          std::logic_error::logic_error(v181, (const std::logic_error *)&buf);
          v181->__vftable = (std::logic_error_vtbl *)(v182 + 16);
          v181[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
          v184 = *(_QWORD *)v209;
          v181[1].__imp_.__imp_ = *(const char **)v209;
          if (v184)
            (*(void (**)(uint64_t))(*(_QWORD *)v184 + 24))(v184);
          v185 = *(std::logic_error *)&v209[8];
          LODWORD(v181[3].__vftable) = *(_DWORD *)&v209[24];
          v181[2] = v185;
          v181->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
          v181[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
          v181[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
        }
        v117 = *(_QWORD *)(v14 + 328);
        if (v117)
        {
          v118 = *(_QWORD *)(v14 + 160);
          AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v14 + 248));
          AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v14 + 168));
          AMCP::Graph::Manifest_Log::add_message(v117, 4, "\t\tmin required: %lf  p target: %lf  c read: %lf", v119, v120, v121, v122, v123, v118);
        }
        v124 = v207;
        if (v207)
        {
          v125 = (unint64_t *)&v207->__shared_owners_;
          do
            v126 = __ldaxr(v125);
          while (__stlxr(v126 - 1, v125));
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
        }
        v13 += 2;
      }
      v9 = v190 + 1;
    }
    while (v190 + 1 != v188);
    v6 = v187;
    v2 = *(_QWORD *)(v186 + 8);
  }
  while (v6 != v2);
}

void sub_1B5AC7608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,std::__shared_weak_count *a48)
{
  unint64_t *p_shared_owners;
  unint64_t v50;

  if (a48)
  {
    p_shared_owners = (unint64_t *)&a48->__shared_owners_;
    do
      v50 = __ldaxr(p_shared_owners);
    while (__stlxr(v50 - 1, p_shared_owners));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))a48->__on_zero_shared)(a48);
      std::__shared_weak_count::__release_weak(a48);
    }
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::get_connection_format_string(uint64_t a1, AMCP::Log::Scope_Registry *a2, unsigned int a3, unint64_t a4)
{
  _QWORD **nth_connection_list;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  std::string *v10;
  void *v11;
  int16x8_t v12;
  std::string::size_type v13;
  unsigned __int8 v14;
  int32x4_t v15;
  uint32x4_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  std::string *v20;
  __int128 v21;
  const std::string::value_type *v22;
  std::string *v23;
  __int128 v24;
  void **v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *p_s;
  std::string::size_type size;
  std::string *v33;
  std::string::size_type v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *__p[2];
  std::string::size_type v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string __s;
  _QWORD v49[3];

  v49[2] = *MEMORY[0x1E0C80C00];
  nth_connection_list = (_QWORD **)AMCP::Graph::Manifest_Task::get_nth_connection_list(a2, a4, a3);
  v38 = 0;
  v39 = 0;
  v37 = 0;
  std::vector<std::shared_ptr<AMCP::Graph::Manifest_Buffer>>::__init_with_size[abi:ne180100]<std::shared_ptr<AMCP::Graph::Manifest_Buffer>*,std::shared_ptr<AMCP::Graph::Manifest_Buffer>*>(&v37, *nth_connection_list, nth_connection_list[1], ((char *)nth_connection_list[1] - (char *)*nth_connection_list) >> 4);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, "");
  if (v38 == v37)
    goto LABEL_54;
  v6 = *(_DWORD *)(*(_QWORD *)v37 + 96);
  v7 = *(_DWORD *)(*(_QWORD *)v37 + 100);
  v9 = *(_DWORD *)(*(_QWORD *)v37 + 112);
  v8 = *(_DWORD *)(*(_QWORD *)v37 + 116);
  std::to_string(&v42, *(double *)(*(_QWORD *)v37 + 88));
  v10 = std::string::append(&v42, "-", 1uLL);
  v12 = *(int16x8_t *)&v10->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(int16x8_t *)&v43.__r_.__value_.__l.__data_ = v12;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v6 == 1819304813)
  {
    v13 = 0;
    memset(&__s, 0, sizeof(__s));
    if ((v7 & 1) != 0)
    {
      v13 = 1;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      __s.__r_.__value_.__s.__data_[0] = 70;
    }
    if ((v7 & 5) == 4)
    {
      v14 = 83;
    }
    else
    {
      if ((v7 & 5) != 0)
        goto LABEL_11;
      v14 = 85;
    }
    v13 = 1;
    *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
    LOWORD(__s.__r_.__value_.__l.__data_) = v14;
LABEL_11:
    if (v9)
    {
      if ((v7 & 0x20) != 0)
      {
        v18 = 1;
      }
      else
      {
        v18 = v8;
        if (!v8)
          goto LABEL_14;
      }
      v19 = 8 * (v9 / v18);
      goto LABEL_17;
    }
LABEL_14:
    v19 = 0;
LABEL_17:
    std::to_string(&v46, v19);
    v20 = std::string::insert(&v46, 0, (const std::string::value_type *)&__s, v13);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if ((v7 & 0x20) != 0)
      v22 = "";
    else
      v22 = "I";
    v23 = std::string::append(&v47, v22, (v7 & 0x20) == 0);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v41 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    v17 = HIBYTE(v41);
    v11 = __p[1];
    goto LABEL_27;
  }
  v12.i32[0] = bswap32(v6);
  *(int8x8_t *)v12.i8 = vzip1_s8(*(int8x8_t *)v12.i8, *(int8x8_t *)v12.i8);
  v15.i64[0] = 0x1F0000001FLL;
  v15.i64[1] = 0x1F0000001FLL;
  v16.i64[0] = 0x5F0000005FLL;
  v16.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)v12.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v16, (uint32x4_t)vsraq_n_s32(v15, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v12.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v12.i8, (int8x8_t)0x2E002E002E002ELL);
  v17 = 4;
  HIBYTE(v41) = 4;
  LODWORD(__p[0]) = vmovn_s16(v12).u32[0];
  BYTE4(__p[0]) = 0;
LABEL_27:
  if ((v17 & 0x80u) == 0)
    v25 = __p;
  else
    v25 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v26 = v17;
  else
    v26 = (std::string::size_type)v11;
  v27 = std::string::append(&v43, (const std::string::value_type *)v25, v26);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = std::string::append(&v44, "-", 1uLL);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__s, v8);
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_s = &__s;
  else
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    size = __s.__r_.__value_.__l.__size_;
  v33 = std::string::append(&v45, (const std::string::value_type *)p_s, size);
  v34 = v33->__r_.__value_.__r.__words[0];
  v49[0] = v33->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v49 + 7) = *(std::string::size_type *)((char *)&v33->__r_.__value_.__r.__words[1] + 7);
  v35 = HIBYTE(v33->__r_.__value_.__r.__words[2]);
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v36 = v49[0];
  *(_QWORD *)a1 = v34;
  *(_QWORD *)(a1 + 8) = v36;
  *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)v49 + 7);
  *(_BYTE *)(a1 + 23) = v35;
LABEL_54:
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
}

void sub_1B5AC7FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;
  uint64_t v51;

  if (*(char *)(v51 - 121) < 0)
    operator delete(*(void **)(v51 - 144));
  if (a50 < 0)
    operator delete(__p);
  if (*(char *)(v51 - 89) < 0)
    operator delete(*(void **)(v51 - 112));
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
    operator delete(a19);
  if (*(char *)(v50 + 23) < 0)
    operator delete(*(void **)v50);
  *(_QWORD *)(v51 - 112) = &a10;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 112));
  _Unwind_Resume(a1);
}

void sub_1B5AC80AC()
{
  JUMPOUT(0x1B5AC80A4);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B5AC815C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<AMCP::Graph::Timebase>,std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,true>,std::__unordered_map_equal<std::shared_ptr<AMCP::Graph::Timebase>,std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<AMCP::Graph::Timebase>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<AMCP::Graph::Timebase> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  void *v39;
  _QWORD v40[2];
  char v41;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v15 = operator new(0x28uLL);
  v40[0] = v15;
  v40[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  v16 = a3[1];
  v15[2] = *a3;
  v15[3] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v15[4] = 0;
  v41 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = *(void **)a1;
          *(_QWORD *)a1 = v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v14;
          if (*v14)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v14;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v35);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v39 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v39)
          operator delete(v39);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v36 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  i = (_QWORD *)v40[0];
  if (v36)
  {
    *(_QWORD *)v40[0] = *v36;
LABEL_75:
    *v36 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v40[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v14;
  if (*i)
  {
    v37 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9)
        v37 %= v9;
    }
    else
    {
      v37 &= v9 - 1;
    }
    v36 = (_QWORD *)(*(_QWORD *)a1 + 8 * v37);
    goto LABEL_75;
  }
LABEL_76:
  v40[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::shared_ptr<AMCP::Graph::Timebase>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<AMCP::Graph::Timebase>,void *>>>>::reset[abi:ne180100]((uint64_t)v40);
  return i;
}

void sub_1B5AC85BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<AMCP::Graph::Timebase>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<AMCP::Graph::Timebase>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v14 = 1;
  if (v7 >= 3)
    v14 = (v7 & (v7 - 1)) != 0;
  v15 = v14 | (2 * v7);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = (int8x8_t)v16;
  else
    prime = (int8x8_t)v15;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (*(_QWORD *)&prime <= v24)
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v18 = operator new(8 * *(_QWORD *)&prime);
  v19 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v18;
  if (v19)
    operator delete(v19);
  v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
  while (*(_QWORD *)&prime != v20);
  v21 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v21)
  {
    v22 = v21[1];
    v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&prime)
        v22 %= *(_QWORD *)&prime;
    }
    else
    {
      v22 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
    v27 = (_QWORD *)*v21;
    if (*v21)
    {
      do
      {
        v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&prime)
            v28 %= *(_QWORD *)&prime;
        }
        else
        {
          v28 &= *(_QWORD *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *v21 = *v27;
          *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
          v27 = v21;
        }
        v28 = v22;
LABEL_56:
        v21 = v27;
        v27 = (_QWORD *)*v27;
        v22 = v28;
      }
      while (v27);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v30)
  {
    *i = *v30;
LABEL_72:
    *v30 = i;
    goto LABEL_73;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v29[v5] = a1 + 4;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void sub_1B5AC89A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>,std::__unordered_map_hasher<AMCP::Graph::Manifest_Task *,std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>,std::hash<AMCP::Graph::Manifest_Task *>,std::equal_to<AMCP::Graph::Manifest_Task *>,true>,std::__unordered_map_equal<AMCP::Graph::Manifest_Task *,std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>,std::equal_to<AMCP::Graph::Manifest_Task *>,std::hash<AMCP::Graph::Manifest_Task *>,true>,std::allocator<std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>>>::__emplace_unique_key_args<AMCP::Graph::Manifest_Task *,std::piecewise_construct_t const&,std::tuple<AMCP::Graph::Manifest_Task *&&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B5AC8BE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Manifest::get_overload_time_in_host_time(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  float v10;
  double v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t host_time;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v26;
  int v27;
  double v28;
  uint64_t v29;
  __int128 v30;
  _QWORD v31[4];
  std::__shared_weak_count *v32;
  _BYTE v33[32];
  std::__shared_weak_count *v34;

  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(std::__shared_weak_count **)(a1 + 80);
  v31[0] = v4;
  v31[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  AMCP::Graph::Manifest_Counter::get_current_cycle_anchor_time((uint64_t)v33, *(_QWORD *)(v4 + 64));
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v10 = *(float *)(a2 + 40);
  if ((*(_BYTE *)a2 & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)a2);
  v11 = *(double *)(a2 + 8);
  AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v26, *(_QWORD *)(a1 + 72), *(std::__shared_weak_count **)(a1 + 80));
  v27 = 2;
  v28 = (float)(v10 * (float)(uint64_t)vcvtmd_s64_f64(v11));
  v29 = 0;
  v30 = v26;
  v26 = 0uLL;
  boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)v31, (uint64_t)v33, (uint64_t)&v27);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  host_time = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)v31);
  v19 = v32;
  if (v32)
  {
    v20 = (unint64_t *)&v32->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v34;
  if (v34)
  {
    v23 = (unint64_t *)&v34->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return host_time;
}

void sub_1B5AC8DEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest::end_processing(_QWORD *a1, int a2, float *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  AMCP::Graph::Manifest_Inventory *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t (**v34)();
  unint64_t *v35;
  unint64_t v36;
  std::string::size_type v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *size;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unsigned int v48;
  unsigned __int128 *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t **i;
  uint64_t *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::logic_error_vtbl ***v71;
  std::logic_error_vtbl ***j;
  std::logic_error_vtbl **v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  std::logic_error_vtbl *v76;
  void (__cdecl *v77)(std::logic_error *__hidden);
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  std::logic_error_vtbl *v82;
  void (__cdecl *v83)(std::logic_error *__hidden);
  void (__cdecl *v84)(std::logic_error *__hidden);
  unint64_t *v85;
  unint64_t v86;
  uint8_t *v87;
  uint64_t v88;
  std::__shared_weak_count *imp;
  unint64_t *v90;
  unint64_t v91;
  std::logic_error_vtbl **v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  std::logic_error_vtbl *v96;
  unsigned int *v97;
  int v98;
  unsigned int v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint8_t *v108;
  NSObject *v109;
  _opaque_pthread_t *v110;
  mach_port_t v111;
  void *exception;
  NSObject *v113;
  _opaque_pthread_t *v114;
  mach_port_t v115;
  void *v116;
  _QWORD *v117;
  AMCP::Graph::Manifest_Inventory *v118;
  std::logic_error v119;
  __int128 v120;
  uint64_t v121;
  uint64_t (**v122)();
  __int128 v123;
  uint64_t v124;
  std::string v125;
  std::logic_error v126;
  char v127;
  uint8_t buf[8];
  signed __int128 __p;
  __int128 v130;
  const char *v131;
  int v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count *v136;
  unsigned __int128 v137;
  __int128 v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  int v141;
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0xFFFFFFFE) == 2)
  {
    v5 = a1;
    v6 = (uint64_t *)a1[1];
    v7 = (uint64_t *)a1[2];
    while (v6 != v7)
    {
      v8 = *v6;
      *(_DWORD *)(v8 + 88) = 0;
      v9 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 312);
      if (v9)
      {
        *(_DWORD *)buf = a2;
        (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v9 + 48))(v9, buf);
      }
      v6 += 2;
    }
    v118 = (AMCP::Graph::Manifest_Inventory *)v5[9];
    v10 = (_QWORD *)*((_QWORD *)v118 + 3);
    if (v10)
    {
      v11 = 0;
      do
      {
        v12 = v10[12];
        v13 = *(_QWORD *)(v12 + 304);
        if (v13)
        {
          if (*(char *)(v12 + 31) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v137, *(const std::string::value_type **)(v12 + 8), *(_QWORD *)(v12 + 16));
          }
          else
          {
            v137 = *(_OWORD *)(v12 + 8);
            *(_QWORD *)&v138 = *(_QWORD *)(v12 + 24);
          }
          *((_QWORD *)&v138 + 1) = *(_QWORD *)(v12 + 32);
          LODWORD(v139) = *(_DWORD *)(v12 + 40);
          *(_DWORD *)buf = a2;
          __p = v137;
          v130 = v138;
          v137 = 0uLL;
          *(_QWORD *)&v138 = 0;
          LODWORD(v131) = (_DWORD)v139;
          LOBYTE(v13) = (*(uint64_t (**)(uint64_t, uint8_t *, _QWORD))(*(_QWORD *)v13 + 192))(v13, buf, *(unsigned int *)(v12 + 156));
          if (SBYTE7(v130) < 0)
            operator delete((void *)__p);
        }
        v11 |= v13;
        v10 = (_QWORD *)*v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    v14 = v118;
    v15 = *((_QWORD *)v118 + 8);
    if (*(_BYTE *)v15)
    {
      v16 = *((_QWORD *)v118 + 12);
      v17 = (std::__shared_weak_count *)*((_QWORD *)v118 + 13);
      *(_QWORD *)buf = v16;
      *(_QWORD *)&__p = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
      }
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 168))(v16);
      v21 = v20;
      if (!v17)
        goto LABEL_26;
      v22 = (unint64_t *)&v17->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if (!v21)
          goto LABEL_101;
      }
      else
      {
LABEL_26:
        if (!v20)
          goto LABEL_101;
      }
      AMCP::Graph::create_cycle_info((uint64_t)buf, v15, a3);
      v117 = v5;
      v25 = (uint64_t *)*((_QWORD *)v118 + 14);
      v24 = (uint64_t *)*((_QWORD *)v118 + 15);
      while (1)
      {
        if (v25 == v24)
        {
          *(_BYTE *)v15 = 0;
          v5 = v117;
          v14 = v118;
          for (i = (uint64_t **)*((_QWORD *)v118 + 3); i; i = (uint64_t **)*i)
          {
            if ((v11 & 1) != 0)
              AMCP::Graph::Manifest_Buffer::advance((AMCP::Graph::Manifest_Buffer *)i[12]);
            v54 = i[12];
            v55 = v54[37];
            if (v55)
              v54[37] = v55 - 1;
          }
          v56 = v136;
          if (v136)
          {
            v57 = (unint64_t *)&v136->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          v59 = v135;
          if (v135)
          {
            v60 = (unint64_t *)&v135->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          v62 = v134;
          if (v134)
          {
            v63 = (unint64_t *)&v134->__shared_owners_;
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          v65 = v133;
          if (v133)
          {
            v66 = (unint64_t *)&v133->__shared_owners_;
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
          v68 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
          if (*((_QWORD *)&v130 + 1))
          {
            v69 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          goto LABEL_101;
        }
        if ((v11 & 1) != 0)
          AMCP::IO_Core::Device_Connection::end_cycle(*v25, (uint64_t)buf, (AMCP::DAL::DAL_Time_Delta *)a3);
        v26 = (uint64_t *)*v25;
        v27 = *(std::__shared_weak_count **)(*v25 + 8);
        if (v27)
        {
          v28 = *(unsigned int *)(v15 + 40);
          v29 = std::__shared_weak_count::lock(v27);
          *((_QWORD *)&v120 + 1) = v29;
          if (v29)
            break;
        }
LABEL_68:
        v25 += 2;
      }
      v30 = v29;
      v31 = *v26;
      *(_QWORD *)&v120 = v31;
      if (v31)
      {
        v32 = atomic_load((unsigned int *)(v31 + 128));
        if (v32 == 1)
        {
          v34 = *(uint64_t (***)())(v31 + 96);
          v33 = *(_QWORD *)(v31 + 104);
          v122 = v34;
          *(_QWORD *)&v123 = v33;
          if (v33)
          {
            v35 = (unint64_t *)(v33 + 8);
            do
              v36 = __ldxr(v35);
            while (__stxr(v36 + 1, v35));
          }
          v37 = *(_QWORD *)(v31 + 120);
          v125.__r_.__value_.__r.__words[0] = *(_QWORD *)(v31 + 112);
          v125.__r_.__value_.__l.__size_ = v37;
          if (v37)
          {
            v38 = (unint64_t *)(v37 + 8);
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
          }
          AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)&v137, (AMCP::DAL::DAL_Time_Delta *)a3, (uint64_t *)&v125);
          if ((v137 & 2) == 0)
            AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v137);
          (*((void (**)(uint64_t (**)(), uint64_t, unint64_t))*v34 + 29))(v34, v28, vcvtmd_s64_f64(*((double *)&v137 + 1)));
          v40 = v139;
          if (v139)
          {
            v41 = (unint64_t *)&v139->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
          size = (std::__shared_weak_count *)v125.__r_.__value_.__l.__size_;
          if (v125.__r_.__value_.__l.__size_)
          {
            v44 = (unint64_t *)(v125.__r_.__value_.__l.__size_ + 8);
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          if ((_QWORD)v123)
          {
            v46 = (unint64_t *)(v123 + 8);
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              (*(void (**)(_QWORD))(*(_QWORD *)v123 + 16))(v123);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v123);
            }
          }
        }
        v48 = atomic_load((unsigned int *)(v31 + 128));
        if (v48 == 1)
        {
          *(_QWORD *)&v137 = &off_1E6998348;
          *((_QWORD *)&v138 + 1) = &v137;
          AMCP::IO_Core::Device_Node_State::for_each_stream_connection(v31, (uint64_t)&v137);
          v49 = (unsigned __int128 *)*((_QWORD *)&v138 + 1);
          if (*((unsigned __int128 **)&v138 + 1) == &v137)
          {
            v49 = &v137;
            v50 = 4;
            goto LABEL_63;
          }
          if (*((_QWORD *)&v138 + 1))
          {
            v50 = 5;
LABEL_63:
            (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
          }
        }
      }
      v51 = (unint64_t *)&v30->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
      goto LABEL_68;
    }
LABEL_101:
    v71 = (std::logic_error_vtbl ***)*((_QWORD *)v14 + 14);
    for (j = (std::logic_error_vtbl ***)*((_QWORD *)v14 + 15); v71 != j; v71 += 2)
    {
      v73 = *v71;
      v74 = (std::__shared_weak_count *)(*v71)[1];
      if (!v74)
        goto LABEL_126;
      v75 = std::__shared_weak_count::lock(v74);
      v126.__imp_.__imp_ = (const char *)v75;
      if (!v75)
        goto LABEL_126;
      v76 = *v73;
      v126.__vftable = v76;
      if (!v76)
      {
        imp = v75;
LABEL_122:
        v90 = (unint64_t *)&imp->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
        goto LABEL_126;
      }
      v77 = v76[4].~logic_error;
      v78 = (std::__shared_weak_count *)v76[4].~logic_error_0;
      if (v78)
      {
        v79 = (unint64_t *)&v78->__shared_owners_;
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
        do
          v81 = __ldaxr(v79);
        while (__stlxr(v81 - 1, v79));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      if (!v77)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v75);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v109 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
        {
          v110 = pthread_self();
          v111 = pthread_mach_thread_np(v110);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v111;
          LOWORD(__p) = 2080;
          *(_QWORD *)((char *)&__p + 2) = "Device_Connection.cpp";
          WORD5(__p) = 1024;
          HIDWORD(__p) = 92;
          LOWORD(v130) = 2080;
          *(_QWORD *)((char *)&v130 + 2) = "not (device_state->get_engine())";
          _os_log_error_impl(&dword_1B57BA000, v109, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v127);
        exception = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v125);
        std::logic_error::logic_error(&v119, &v125);
        v119.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)&v137, &v119);
        *((_QWORD *)&v138 + 1) = 0;
        v139 = 0;
        v140 = 0;
        v141 = -1;
        *(_QWORD *)&v137 = off_1E69A1208;
        *(_QWORD *)&v138 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v137);
        *((_QWORD *)&v130 + 1) = "void AMCP::IO_Core::Device_Connection::cleanup_processing()";
        v131 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
        v132 = 92;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v120);
        v122 = off_1E69A20A0;
        v123 = v120;
        v124 = v121;
        v120 = 0uLL;
        v121 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v122);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
      }
      v82 = v126.__vftable;
      v84 = v126.__vftable[4].~logic_error;
      v83 = v126.__vftable[4].~logic_error_0;
      if (v83)
      {
        v85 = (unint64_t *)((char *)v83 + 8);
        do
          v86 = __ldxr(v85);
        while (__stxr(v86 + 1, v85));
      }
      *(_QWORD *)buf = &off_1E6998448;
      *(_QWORD *)&__p = v84;
      v137 = 0uLL;
      *((_QWORD *)&__p + 1) = v83;
      *(_QWORD *)&v130 = buf;
      AMCP::IO_Core::Device_Node_State::for_each_stream_connection((uint64_t)v82, (uint64_t)buf);
      v87 = (uint8_t *)v130;
      if ((uint8_t *)v130 == buf)
      {
        v87 = buf;
        v88 = 4;
      }
      else
      {
        if (!(_QWORD)v130)
          goto LABEL_121;
        v88 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v87 + 8 * v88))();
LABEL_121:
      imp = (std::__shared_weak_count *)v126.__imp_.__imp_;
      if (v126.__imp_.__imp_)
        goto LABEL_122;
LABEL_126:
      v92 = *v71;
      v93 = (std::__shared_weak_count *)(*v71)[1];
      if (v93)
      {
        v94 = std::__shared_weak_count::lock(v93);
        v119.__imp_.__imp_ = (const char *)v94;
        if (v94)
        {
          v95 = v94;
          v96 = *v92;
          v119.__vftable = v96;
          if (v96)
          {
            v97 = (unsigned int *)&v96[5].~logic_error_0;
            v98 = atomic_load(v97);
            if (v98 < 1)
            {
              AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v94);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
              v113 = **(NSObject ***)buf;
              std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
              if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
              {
                v114 = pthread_self();
                v115 = pthread_mach_thread_np(v114);
                *(_DWORD *)buf = 67109890;
                *(_DWORD *)&buf[4] = v115;
                LOWORD(__p) = 2080;
                *(_QWORD *)((char *)&__p + 2) = "Device.h";
                WORD5(__p) = 1024;
                HIDWORD(__p) = 81;
                LOWORD(v130) = 2080;
                *(_QWORD *)((char *)&v130 + 2) = "not (m_refcount > 0)";
                _os_log_error_impl(&dword_1B57BA000, v113, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
              }
              AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v127);
              v116 = __cxa_allocate_exception(0x40uLL);
              caulk::make_string((caulk *)"", (uint64_t)&v125);
              std::logic_error::logic_error(&v126, &v125);
              v126.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
              std::logic_error::logic_error((std::logic_error *)&v137, &v126);
              *((_QWORD *)&v138 + 1) = 0;
              v139 = 0;
              v140 = 0;
              v141 = -1;
              *(_QWORD *)&v137 = off_1E69A1208;
              *(_QWORD *)&v138 = &unk_1E69A1230;
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v137);
              *((_QWORD *)&v130 + 1) = "void AMCP::IO_Core::Device_Node_State::remove_reference()";
              v131 = "Source/AMCP/IO/IO_Core/Device.h";
              v132 = 81;
              applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v120);
              v122 = off_1E69A20A0;
              v123 = v120;
              v124 = v121;
              v120 = 0uLL;
              v121 = 0;
              boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v122);
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v116, (uint64_t)buf);
            }
            do
              v99 = __ldaxr(v97);
            while (__stlxr(v99 - 1, v97));
          }
          v100 = (unint64_t *)&v94->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
      }
    }
    AMCP::Graph::Manifest_Inventory::release_power_assertions(v118);
    *(_DWORD *)v5 = 1;
    v102 = v5[12];
    if (v102)
    {
      AMCP::Graph::Manifest::get_iocontext_uid((AMCP::Graph::Manifest *)buf, v5);
      if (__p >= 0)
        v108 = buf;
      else
        LOBYTE(v108) = buf[0];
      AMCP::Graph::Manifest_Log::add_message(v102, 1, "Manifest: %s Hardware End: %p", v103, v104, v105, v106, v107, (char)v108);
      if (SHIBYTE(__p) < 0)
        operator delete(*(void **)buf);
    }
  }
}

void sub_1B5AC993C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest::teardown_processing(AMCP::Graph::Manifest *this)
{
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void *__p[2];
  char v17;

  if (*(_DWORD *)this == 1)
  {
    v2 = *((_QWORD *)this + 9);
    v3 = *(void **)(v2 + 80);
    v4 = *(std::__shared_weak_count **)(v2 + 88);
    __p[0] = v3;
    __p[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    AMCP::Graph::Timebase_Set::stop((AMCP::Graph::Timebase_Set *)v3);
    if (v4)
    {
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v9 = *((_QWORD *)this + 12);
    if (v9)
    {
      AMCP::Graph::Manifest::get_iocontext_uid((AMCP::Graph::Manifest *)__p, this);
      if (v17 >= 0)
        v15 = __p;
      else
        LOBYTE(v15) = __p[0];
      AMCP::Graph::Manifest_Log::add_message(v9, 1, "Manifest: %s Hardware Stop: %p", v10, v11, v12, v13, v14, (char)v15);
      if (v17 < 0)
        operator delete(__p[0]);
    }
    *(_DWORD *)this = 0;
  }
}

void sub_1B5AC9D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Manifest::dump_manifest_log(std::__shared_weak_count **this)
{
  unsigned __int8 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  _QWORD block[5];

  if (this)
  {
    AMCP::Graph::Manifest_Log::get_queue((AMCP::Graph::Manifest_Log *)this);
    std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v6, (uint64_t)*this, this[1]);
    v2 = atomic_load((unsigned __int8 *)&unk_1EF12FB60);
    if ((v2 & 1) != 0)
      atomic_store(1u, byte_1EF12FB61);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN10applesauce8dispatch2v19sync_implIRZN4AMCP5Graph12Manifest_Log4dumpEvE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke;
    block[3] = &__block_descriptor_tmp_3903;
    block[4] = &v6;
    dispatch_sync((dispatch_queue_t)AMCP::Graph::Manifest_Log::get_queue(void)::s_instance, block);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void AMCP::IO_Core::DSP::~DSP(AMCP::IO_Core::DSP *this)
{
  AMCP::IO_Core::Node::~Node(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::IO_Core::DSP::get_class_id(AMCP::IO_Core::DSP *this)
{
  return 1685287022;
}

void HALS_MetaSubDevice::~HALS_MetaSubDevice(AMCP::Utility::Dispatch_Queue **this)
{
  HALS_MetaSubDevice::~HALS_MetaSubDevice(this);
  JUMPOUT(0x1B5E50688);
}

{
  unsigned __int8 v2;

  *this = (AMCP::Utility::Dispatch_Queue *)off_1E6985300;
  if (g_static_start_options == 1)
  {
    do
    {
      AMCP::Utility::Dispatch_Queue::flush_all_work(this[14]);
      v2 = atomic_load((unsigned __int8 *)this[14] + 33);
    }
    while ((v2 & 1) != 0);
  }
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100](this + 14, 0);
  CACFString::~CACFString((CACFString *)(this + 9));
  boost::variant<HALS_Device *,HALS_ClockDevice *>::destroy_content(*((unsigned int *)this + 14));
  HALS_Object::~HALS_Object((HALS_Object *)this);
}

unsigned int *HALS_MetaSubDevice::_Deactivate(HALS_MetaSubDevice *this)
{
  unsigned int *result;
  int v3;
  int v4;
  uint64_t v5;
  HALS_ObjectMap *Object;
  HALS_Object *v7;
  _QWORD v8[4];
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  result = (unsigned int *)HALS_MetaSubDevice::_GetObject(this);
  if (result)
  {
    v3 = *(_DWORD *)(HALS_MetaSubDevice::_GetObject(this) + 16);
    v4 = *((_DWORD *)this + 4);
    v5 = *((_QWORD *)this + 14);
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = ___ZN18HALS_MetaSubDevice11_DeactivateEv_block_invoke;
    v8[3] = &__block_descriptor_tmp_7802;
    v9 = v4;
    v10 = v3;
    LOBYTE(v3) = atomic_load((unsigned __int8 *)(v5 + 32));
    if ((v3 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)(v5 + 33));
    dispatch_async(*(dispatch_queue_t *)v5, v8);
    Object = (HALS_ObjectMap *)HALS_MetaSubDevice::_GetObject(this);
    HALS_ObjectMap::ReleaseObject_LongTerm(Object, v7);
    result = (unsigned int *)((char *)this + 56);
    switch(*((_DWORD *)this + 14) ^ (*((int *)this + 14) >> 31))
    {
      case 0:
        *((_QWORD *)this + 8) = 0;
        break;
      case 1:
        v12 = 0;
        v11 = 0;
        boost::variant<HALS_Device *,HALS_ClockDevice *>::variant_assign(result, (uint64_t)&v11);
        result = (unsigned int *)boost::variant<HALS_Device *,HALS_ClockDevice *>::destroy_content(0);
        break;
      case 2:
        boost::detail::variant::forced_return<BOOL>();
      case 3:
        boost::detail::variant::forced_return<BOOL>();
      case 4:
        boost::detail::variant::forced_return<BOOL>();
      case 5:
        boost::detail::variant::forced_return<BOOL>();
      case 6:
        boost::detail::variant::forced_return<BOOL>();
      case 7:
        boost::detail::variant::forced_return<BOOL>();
      case 8:
        boost::detail::variant::forced_return<BOOL>();
      case 9:
        boost::detail::variant::forced_return<BOOL>();
      case 0xA:
        boost::detail::variant::forced_return<BOOL>();
      case 0xB:
        boost::detail::variant::forced_return<BOOL>();
      case 0xC:
        boost::detail::variant::forced_return<BOOL>();
      case 0xD:
        boost::detail::variant::forced_return<BOOL>();
      case 0xE:
        boost::detail::variant::forced_return<BOOL>();
      case 0xF:
        boost::detail::variant::forced_return<BOOL>();
      case 0x10:
        boost::detail::variant::forced_return<BOOL>();
      case 0x11:
        boost::detail::variant::forced_return<BOOL>();
      case 0x12:
        boost::detail::variant::forced_return<BOOL>();
      case 0x13:
        boost::detail::variant::forced_return<BOOL>();
      default:
        boost::detail::variant::forced_return<BOOL>();
    }
  }
  *((_DWORD *)this + 2) = 0;
  return result;
}

void sub_1B5ACA018(_Unwind_Exception *a1)
{
  boost::variant<HALS_Device *,HALS_ClockDevice *>::destroy_content(0);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaSubDevice::HasProperty(HALS_MetaSubDevice *a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t result;
  int v9;
  int v10;
  uint64_t Object;
  int v12;

  result = (*(uint64_t (**)(HALS_MetaSubDevice *, int *, uint64_t))(*(_QWORD *)a1 + 176))(a1, a3, a4);
  if ((_DWORD)result)
  {
    result = 0;
    v9 = *a3;
    if (*a3 > 1852012898)
    {
      if (v9 <= 1919512166)
      {
        if (v9 != 1852012899 && v9 != 1869180523)
        {
          v10 = 1919055206;
          goto LABEL_20;
        }
      }
      else
      {
        if (v9 <= 1986425721)
        {
          if (v9 == 1919512167)
            return result;
          v10 = 1936092276;
          goto LABEL_20;
        }
        if (v9 == 1986425722)
          return result;
        if (v9 != 2020373603)
          goto LABEL_21;
        v12 = a3[1];
        return v12 == 1768845428 || v12 == 1869968496;
      }
    }
    else
    {
      if (v9 > 1685218912)
      {
        if (v9 <= 1685218931)
        {
          if (v9 != 1685218913 && v9 != 1685218929)
          {
LABEL_21:
            result = HALS_MetaSubDevice::_GetObject(a1);
            if (result)
            {
              Object = HALS_MetaSubDevice::_GetObject(a1);
              return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)Object + 88))(Object, a2, a3, a4);
            }
            return result;
          }
          return 1;
        }
        if (v9 == 1685218932)
          return 1;
        v10 = 1718843939;
LABEL_20:
        if (v9 == v10)
          return result;
        goto LABEL_21;
      }
      if (v9 != 1651730810 && v9 != 1651735075)
      {
        v10 = 1684434036;
        goto LABEL_20;
      }
    }
  }
  return result;
}

uint64_t HALS_MetaSubDevice::IsPropertySettable(HALS_MetaSubDevice *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t Object;
  _DWORD *exception;
  int v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)a1 + 88))(a1) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v13 = 2003332927;
    goto LABEL_14;
  }
  if ((*a3 - 1685218913) <= 0x13 && ((1 << (*a3 - 97)) & 0x90001) != 0 || *a3 == 2020373603)
    return 1;
  if (!HALS_MetaSubDevice::_GetObject(a1))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v14 = 136315394;
      v15 = "HALS_MetaSubDevice.cpp";
      v16 = 1024;
      v17 = 146;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaSubDevice::IsPropertySettable: no real device", (uint8_t *)&v14, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v13 = 1852797029;
LABEL_14:
    exception[2] = v13;
  }
  Object = HALS_MetaSubDevice::_GetObject(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t))(*(_QWORD *)Object + 96))(Object, a2, a3, a4);
}

uint64_t HALS_MetaSubDevice::GetPropertyDataSize(HALS_MetaSubDevice *a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12;
  unsigned __int16 v13;
  uint64_t Object;
  _DWORD *exception;
  int v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, a3, a6) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v17 = 2003332927;
    goto LABEL_14;
  }
  v12 = *a3;
  if (*a3 <= 1685218931)
  {
    if (v12 == 1685218913)
      return 4;
    v13 = 26225;
    goto LABEL_7;
  }
  if (v12 != 2020373603)
  {
    v13 = 26228;
LABEL_7:
    if (v12 == (v13 | 0x64720000))
      return 4;
    if (HALS_MetaSubDevice::_GetObject(a1))
    {
      Object = HALS_MetaSubDevice::_GetObject(a1);
      return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)Object + 104))(Object, a2, a3, a4, a5, a6);
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v18 = 136315394;
      v19 = "HALS_MetaSubDevice.cpp";
      v20 = 1024;
      v21 = 177;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaSubDevice::GetPropertyDataSize: no real device", (uint8_t *)&v18, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v17 = 1852797029;
LABEL_14:
    exception[2] = v17;
  }
  return 8;
}

void HALS_MetaSubDevice::GetPropertyData(HALS_MetaSubDevice *this, uint64_t a2, const AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, void *a6, unsigned int a7, const void *a8, HALS_Client *a9)
{
  AudioObjectPropertySelector mSelector;
  HALB_Mutex *v15;
  _QWORD *v16;
  HALB_Mutex *v17;
  unsigned int v18;
  uint64_t Object;
  _DWORD *exception;
  int v21;
  NSObject *v22;
  const char *v23;
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[7];
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v21 = 2003332927;
    goto LABEL_33;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1685218931)
  {
    if (mSelector != 1685218913)
    {
      if (mSelector == 1685218929)
      {
        if (a4 > 3)
        {
          v24[0] = MEMORY[0x1E0C809B0];
          v24[1] = 0x40000000;
          v24[2] = ___ZNK18HALS_MetaSubDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_8;
          v24[3] = &__block_descriptor_tmp_9_7798;
          v24[4] = this;
          v24[5] = a6;
          v15 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)this + 56))(this);
          v16 = v24;
LABEL_17:
          HALB_CommandGate::ExecuteCommand(v15, (uint64_t)v16);
          v18 = 4;
          goto LABEL_18;
        }
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_32;
        *(_DWORD *)buf = 136315394;
        v29 = "HALS_MetaSubDevice.cpp";
        v30 = 1024;
        v31 = 221;
        v22 = MEMORY[0x1E0C81028];
        v23 = "%25s:%-5d  HALS_MetaSubDevice::_GetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCo"
              "mpensationQuality";
        goto LABEL_31;
      }
LABEL_11:
      if (HALS_MetaSubDevice::_GetObject(this))
      {
        Object = HALS_MetaSubDevice::_GetObject(this);
        (*(void (**)(uint64_t))(*(_QWORD *)Object + 112))(Object);
        return;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v29 = "HALS_MetaSubDevice.cpp";
        v30 = 1024;
        v31 = 228;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaSubDevice::GetPropertyData: no real device", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      v21 = 1852797029;
LABEL_33:
      exception[2] = v21;
    }
    if (a4 > 3)
    {
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 0x40000000;
      v25[2] = ___ZNK18HALS_MetaSubDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_6;
      v25[3] = &__block_descriptor_tmp_7_7796;
      v25[4] = this;
      v25[5] = a6;
      v15 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)this + 56))(this);
      v16 = v25;
      goto LABEL_17;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_32;
    *(_DWORD *)buf = 136315394;
    v29 = "HALS_MetaSubDevice.cpp";
    v30 = 1024;
    v31 = 212;
    v22 = MEMORY[0x1E0C81028];
    v23 = "%25s:%-5d  HALS_MetaSubDevice::_GetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCompensationAlgorithm";
LABEL_31:
    _os_log_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_ERROR, v23, buf, 0x12u);
    goto LABEL_32;
  }
  if (mSelector == 1685218932)
  {
    if (a4 > 3)
    {
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 0x40000000;
      v26[2] = ___ZNK18HALS_MetaSubDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_4;
      v26[3] = &__block_descriptor_tmp_5_7794;
      v26[4] = this;
      v26[5] = a6;
      v15 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)this + 56))(this);
      v16 = v26;
      goto LABEL_17;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_32;
    *(_DWORD *)buf = 136315394;
    v29 = "HALS_MetaSubDevice.cpp";
    v30 = 1024;
    v31 = 203;
    v22 = MEMORY[0x1E0C81028];
    v23 = "%25s:%-5d  HALS_MetaSubDevice::_GetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCompensation";
    goto LABEL_31;
  }
  if (mSelector != 2020373603)
    goto LABEL_11;
  if (a4 <= 7)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
LABEL_32:
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      v21 = 561211770;
      goto LABEL_33;
    }
    *(_DWORD *)buf = 136315394;
    v29 = "HALS_MetaSubDevice.cpp";
    v30 = 1024;
    v31 = 194;
    v22 = MEMORY[0x1E0C81028];
    v23 = "%25s:%-5d  HALS_MetaSubDevice::_GetPropertyData: bad property data size for kAudioSubDevicePropertyExtraLatency";
    goto LABEL_31;
  }
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 0x40000000;
  v27[2] = ___ZNK18HALS_MetaSubDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
  v27[3] = &__block_descriptor_tmp_3_7792;
  v27[4] = this;
  v27[5] = a6;
  v27[6] = a3;
  v17 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v17, (uint64_t)v27);
  v18 = 8;
LABEL_18:
  *a5 = v18;
}

void HALS_MetaSubDevice::SetPropertyData(HALS_MetaSubDevice *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  _DWORD *v16;
  const AudioObjectPropertyAddress *v17;
  HALS_Device **v18;
  HALS_ObjectMap *v19;
  AudioObjectPropertySelector mSelector;
  HALB_Mutex *v21;
  HALS_NotificationManager *v22;
  uint64_t v23;
  HALB_Mutex *v24;
  HALS_NotificationManager *v25;
  uint64_t v26;
  uint64_t Object;
  HALS_Object *v28;
  HALB_Mutex *v29;
  HALS_NotificationManager *v30;
  uint64_t v31;
  HALB_Mutex *v32;
  HALS_NotificationManager *v33;
  uint64_t v34;
  AudioObjectPropertyScope mScope;
  _DWORD *exception;
  int v37;
  NSObject *v38;
  const char *v39;
  int v40;
  _DWORD *v41;
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[7];
  AudioObjectPropertyAddress buf;
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v37 = 2003332927;
    goto LABEL_39;
  }
  v16 = boost::variant<HALS_Device *,HALS_ClockDevice *>::apply_visitor<boost::detail::variant::get_visitor<HALS_Device *>>((int *)this + 14);
  if (!v16)
  {
    *(_QWORD *)&buf.mSelector = &off_1E6996208;
    boost::throw_exception<boost::bad_get>();
  }
  if (*(_QWORD *)v16 && HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, v17))
  {
    v18 = (HALS_Device **)boost::variant<HALS_Device *,HALS_ClockDevice *>::apply_visitor<boost::detail::variant::get_visitor<HALS_Device *>>((int *)this + 14);
    if (!v18)
    {
      *(_QWORD *)&buf.mSelector = &off_1E6996208;
      boost::throw_exception<boost::bad_get>();
    }
    if (!HALS_Device::IsHogModeOwnerOrFree(*v18, a8))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      v37 = 560492391;
LABEL_39:
      exception[2] = v37;
    }
  }
  v19 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1685218931)
  {
    if (mSelector != 1685218913)
    {
      if (mSelector == 1685218929)
      {
        if (a4 > 3)
        {
          v42[0] = MEMORY[0x1E0C809B0];
          v42[1] = 0x40000000;
          v42[2] = ___ZN18HALS_MetaSubDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_15;
          v42[3] = &__block_descriptor_tmp_16_7788;
          v42[4] = this;
          v42[5] = a5;
          v21 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v21, (uint64_t)v42);
          v22 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
          if (a8)
            v23 = *((unsigned int *)a8 + 4);
          else
            v23 = 0;
          strcpy((char *)&buf, "qfrdbolg");
          BYTE1(buf.mElement) = 0;
          HIWORD(buf.mElement) = 0;
          HALS_Object::PropertiesChanged(this, v22, v23, 1, &buf);
          goto LABEL_34;
        }
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_49;
        buf.mSelector = 136315394;
        *(_QWORD *)&buf.mScope = "HALS_MetaSubDevice.cpp";
        v47 = 1024;
        v48 = 287;
        v38 = MEMORY[0x1E0C81028];
        v39 = "%25s:%-5d  HALS_MetaSubDevice::_SetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCo"
              "mpensationQuality";
        goto LABEL_48;
      }
LABEL_18:
      if (HALS_MetaSubDevice::_GetObject(this))
      {
        Object = HALS_MetaSubDevice::_GetObject(this);
        (*(void (**)(uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *, HALS_Client *))(*(_QWORD *)Object + 120))(Object, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_34;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        buf.mSelector = 136315394;
        *(_QWORD *)&buf.mScope = "HALS_MetaSubDevice.cpp";
        v47 = 1024;
        v48 = 298;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaSubDevice::SetPropertyData: no real device", (uint8_t *)&buf, 0x12u);
      }
      v40 = 1852797029;
LABEL_50:
      v41 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v41 = &off_1E69A1B30;
      v41[2] = v40;
    }
    if (a4 > 3)
    {
      v43[0] = MEMORY[0x1E0C809B0];
      v43[1] = 0x40000000;
      v43[2] = ___ZN18HALS_MetaSubDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_13;
      v43[3] = &__block_descriptor_tmp_14_7786;
      v43[4] = this;
      v43[5] = a5;
      v29 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v29, (uint64_t)v43);
      v30 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
      if (a8)
        v31 = *((unsigned int *)a8 + 4);
      else
        v31 = 0;
      strcpy((char *)&buf, "afrdbolg");
      BYTE1(buf.mElement) = 0;
      HIWORD(buf.mElement) = 0;
      HALS_Object::PropertiesChanged(this, v30, v31, 1, &buf);
      goto LABEL_34;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      buf.mSelector = 136315394;
      *(_QWORD *)&buf.mScope = "HALS_MetaSubDevice.cpp";
      v47 = 1024;
      v48 = 274;
      v38 = MEMORY[0x1E0C81028];
      v39 = "%25s:%-5d  HALS_MetaSubDevice::_SetPropertyData: bad property data size for kAudioSubDevicePropertyDriftComp"
            "ensationAlgorithm";
      goto LABEL_48;
    }
    goto LABEL_49;
  }
  if (mSelector == 1685218932)
  {
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        buf.mSelector = 136315394;
        *(_QWORD *)&buf.mScope = "HALS_MetaSubDevice.cpp";
        v47 = 1024;
        v48 = 261;
        v38 = MEMORY[0x1E0C81028];
        v39 = "%25s:%-5d  HALS_MetaSubDevice::_SetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCompensation";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    v44[0] = MEMORY[0x1E0C809B0];
    v44[1] = 0x40000000;
    v44[2] = ___ZN18HALS_MetaSubDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_11;
    v44[3] = &__block_descriptor_tmp_12_7784;
    v44[4] = this;
    v44[5] = a5;
    v32 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v32, (uint64_t)v44);
    v33 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    if (a8)
      v34 = *((unsigned int *)a8 + 4);
    else
      v34 = 0;
    strcpy((char *)&buf, "tfrdbolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    HALS_Object::PropertiesChanged(this, v33, v34, 1, &buf);
  }
  else
  {
    if (mSelector != 2020373603)
      goto LABEL_18;
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        buf.mSelector = 136315394;
        *(_QWORD *)&buf.mScope = "HALS_MetaSubDevice.cpp";
        v47 = 1024;
        v48 = 248;
        v38 = MEMORY[0x1E0C81028];
        v39 = "%25s:%-5d  HALS_MetaSubDevice::_SetPropertyData: bad property data size for kAudioSubDevicePropertyExtraLatency";
LABEL_48:
        _os_log_impl(&dword_1B57BA000, v38, OS_LOG_TYPE_ERROR, v39, (uint8_t *)&buf, 0x12u);
      }
LABEL_49:
      v40 = 561211770;
      goto LABEL_50;
    }
    v45[0] = MEMORY[0x1E0C809B0];
    v45[1] = 0x40000000;
    v45[2] = ___ZN18HALS_MetaSubDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
    v45[3] = &__block_descriptor_tmp_10_7782;
    v45[4] = this;
    v45[5] = a3;
    v45[6] = a5;
    v24 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v24, (uint64_t)v45);
    v25 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    if (a8)
      v26 = *((unsigned int *)a8 + 4);
    else
      v26 = 0;
    mScope = a3->mScope;
    buf.mSelector = 2020373603;
    *(_QWORD *)&buf.mScope = mScope;
    HALS_Object::PropertiesChanged(this, v25, v26, 1, &buf);
  }
LABEL_34:
  HALS_ObjectMap::ReleaseObject(v19, v28);
}

void sub_1B5ACB10C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::exception::~exception((std::exception *)(v1 - 128));
  _Unwind_Resume(a1);
}

void HALS_MetaSubDevice::HandleObjectPropertiesChanged(HALS_MetaSubDevice *this, const HALS_Object *a2, uint64_t a3, uint64_t a4, AudioObjectPropertyAddress *a5)
{
  uint64_t v10;
  HALS_Object *v11;
  HALS_ObjectMap *v12;
  const AudioObjectPropertyAddress *v13;
  void *v14;
  _OWORD v15[2];

  v10 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  v12 = (HALS_ObjectMap *)v10;
  if (v10)
  {
    (*(void (**)(uint64_t, const HALS_Object *, uint64_t, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v10 + 160))(v10, a2, a3, a4, a5);
    if ((const HALS_Object *)HALS_MetaSubDevice::_GetObject(this) == a2)
    {
      memset(v15, 0, sizeof(v15));
      if ((_DWORD)a4)
      {
        a4 = a4;
        do
        {
          if (HALS_MetaDevice::PassRealNotificationToClient((HALS_MetaDevice *)a5->mSelector, (const AudioObjectPropertyAddress *)1))CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v15, a5, v13);
          ++a5;
          --a4;
        }
        while (a4);
        v14 = *(void **)&v15[0];
        if (*(_QWORD *)&v15[0] != *((_QWORD *)&v15[0] + 1))
          HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), a3, -1431655765 * ((*((_QWORD *)&v15[0] + 1) - *(_QWORD *)&v15[0]) >> 2), *(const AudioObjectPropertyAddress **)&v15[0]);
        if (v14)
          operator delete(v14);
      }
    }
  }
  HALS_ObjectMap::ReleaseObject(v12, v11);
}

void sub_1B5ACB25C(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  HALS_ObjectMap *v9;
  void *v10;

  if (v10)
    operator delete(v10);
  HALS_ObjectMap::ReleaseObject(v9, a2);
  _Unwind_Resume(a1);
}

void HALS_MetaSubDevice::HandleGroupObjectPropertiesChanged(unsigned int *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, AudioObjectPropertyAddress *a8, char a9, uint64_t a10, NSObject **a11)
{
  HALS_Object *v19;
  HALS_ObjectMap *v20;
  NSObject *v21;
  unint64_t v22;
  AudioObjectPropertyAddress *v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  AudioObjectPropertySelector mSelector;
  const AudioObjectPropertyAddress *v30;
  void *v31;
  unsigned int v32;
  _OWORD v33[2];
  dispatch_object_t object;

  v20 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)a1[12]);
  if (v20)
  {
    v32 = a3;
    v21 = *a11;
    object = v21;
    if (v21)
      dispatch_retain(v21);
    (*(void (**)(HALS_ObjectMap *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, char, uint64_t, dispatch_object_t *))(*(_QWORD *)v20 + 168))(v20, a2, a3, a4, a5, a6, a7, a8, a9, a10, &object);
    if (object)
      dispatch_release(object);
    if (HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)a1) && (_DWORD)a4)
    {
      v22 = 0;
      v23 = a8;
      do
      {
        v24 = *(_DWORD *)(a5 + 4 * v22);
        if (v24 == *(_DWORD *)(HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)a1) + 16))
        {
          v25 = v22;
        }
        else
        {
          v23 += *(unsigned int *)(a6 + 4 * v22);
          v25 = -1;
        }
        if (v25 != -1)
          break;
        ++v22;
      }
      while (v22 < a4);
      memset(v33, 0, sizeof(v33));
      if (v25 != -1)
      {
        v26 = *(unsigned int *)(a6 + 4 * v25);
        if ((_DWORD)v26)
        {
          v27 = 0;
          v28 = v25;
          do
          {
            mSelector = v23->mSelector;
            ++v23;
            if (HALS_MetaDevice::PassRealNotificationToClient((HALS_MetaDevice *)mSelector, (const AudioObjectPropertyAddress *)1))
            {
              CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v33, a8, v30);
              v26 = *(unsigned int *)(a6 + 4 * v28);
            }
            ++v27;
            ++a8;
          }
          while (v27 < v26);
          v31 = *(void **)&v33[0];
          if (*(_QWORD *)&v33[0] != *((_QWORD *)&v33[0] + 1))
            HALS_Object::PropertiesChanged((HALS_Object *)a1, (HALS_NotificationManager *)a1[4], v32, -1431655765 * ((*((_QWORD *)&v33[0] + 1) - *(_QWORD *)&v33[0]) >> 2), *(const AudioObjectPropertyAddress **)&v33[0]);
          if (v31)
            operator delete(v31);
        }
      }
    }
  }
  HALS_ObjectMap::ReleaseObject(v20, v19);
}

void sub_1B5ACB464(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, dispatch_object_t object)
{
  HALS_ObjectMap *v18;
  void *v19;

  if (v19)
    operator delete(v19);
  HALS_ObjectMap::ReleaseObject(v18, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaSubDevice::_GetObject(HALS_MetaSubDevice *this)
{
  if ((*((_DWORD *)this + 14) ^ (*((int *)this + 14) >> 31)) >= 2)
    boost::detail::variant::forced_return<BOOL>();
  return *((_QWORD *)this + 8);
}

_DWORD *boost::variant<HALS_Device *,HALS_ClockDevice *>::apply_visitor<boost::detail::variant::get_visitor<HALS_Device *>>(int *a1)
{
  _DWORD *result;
  int v2;

  v2 = *a1;
  result = a1 + 2;
  switch(v2 ^ (v2 >> 31))
  {
    case 0:
      return result;
    case 1:
      result = 0;
      break;
    default:
      boost::detail::variant::forced_return<BOOL>();
  }
  return result;
}

uint64_t ___ZN18HALS_MetaSubDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 4 * (**(_DWORD **)(result + 40) == 1768845428) + 88) = **(double **)(result + 48);
  return result;
}

uint64_t ___ZN18HALS_MetaSubDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_11(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 97) = **(_DWORD **)(result + 40) != 0;
  return result;
}

uint64_t ___ZN18HALS_MetaSubDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_13(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 100) = **(_DWORD **)(result + 40);
  return result;
}

uint64_t ___ZN18HALS_MetaSubDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_15(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 104) = **(_DWORD **)(result + 40);
  return result;
}

double ___ZNK18HALS_MetaSubDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1, double a2)
{
  double result;

  LODWORD(a2) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * (**(_DWORD **)(a1 + 48) == 1768845428) + 88);
  result = (double)*(unint64_t *)&a2;
  **(double **)(a1 + 40) = result;
  return result;
}

uint64_t ___ZNK18HALS_MetaSubDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_4(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(_QWORD *)(result + 32) + 97);
  return result;
}

uint64_t ___ZNK18HALS_MetaSubDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_6(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(_DWORD *)(*(_QWORD *)(result + 32) + 100);
  return result;
}

uint64_t ___ZNK18HALS_MetaSubDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_8(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(_DWORD *)(*(_QWORD *)(result + 32) + 104);
  return result;
}

void ___ZN18HALS_MetaSubDevice11_DeactivateEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const AudioObjectPropertyAddress *a5)
{
  const HALS_Listener *v5;
  int v6;
  _DWORD v7[2];
  __int128 v8;
  __int128 v9;

  v6 = *(_DWORD *)(a1 + 32);
  v5 = (const HALS_Listener *)*(unsigned int *)(a1 + 36);
  v7[0] = 0;
  v7[1] = v6;
  v8 = 0u;
  v9 = 0u;
  HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)v7, v5, &qword_1B5D58FAC, a4, a5);
  HALS_Listener::~HALS_Listener((HALS_Listener *)v7);
}

void sub_1B5ACB650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HALS_Listener::~HALS_Listener((HALS_Listener *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::variant<HALS_Device *,HALS_ClockDevice *>::variant_assign(unsigned int *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  if ((_DWORD)result == *(_DWORD *)a2)
  {
    switch(result ^ ((int)result >> 31))
    {
      case 0u:
      case 1u:
        *((_QWORD *)a1 + 1) = *(_QWORD *)(a2 + 8);
        return result;
      default:
        goto LABEL_8;
    }
  }
  switch(*(_DWORD *)a2 ^ (*(int *)a2 >> 31))
  {
    case 0:
      result = boost::variant<HALS_Device *,HALS_ClockDevice *>::destroy_content(result);
      *((_QWORD *)a1 + 1) = *(_QWORD *)(a2 + 8);
      *a1 = 0;
      break;
    case 1:
      result = boost::variant<HALS_Device *,HALS_ClockDevice *>::destroy_content(result);
      *((_QWORD *)a1 + 1) = *(_QWORD *)(a2 + 8);
      *a1 = 1;
      break;
    default:
LABEL_8:
      boost::detail::variant::forced_return<BOOL>();
  }
  return result;
}

uint64_t boost::variant<HALS_Device *,HALS_ClockDevice *>::destroy_content(uint64_t result)
{
  if ((result + 2) >= 4)
    boost::detail::variant::forced_return<BOOL>();
  return result;
}

void HALS_MetaSubDevice::_SetSubDeviceInfo(HALS_MetaSubDevice *this, CFDictionaryRef theDict)
{
  uint64_t v4;
  const __CFNumber *v5;
  _QWORD v6[2];

  if (theDict)
    CFRetain(theDict);
  v6[0] = &off_1E69A0DE0;
  v6[1] = theDict;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v4, theDict, CFSTR("latency-out"));
  *((_DWORD *)this + 22) = OS::CF::Number::GetValue<unsigned int>(v5, 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v4);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v4, theDict, CFSTR("latency-in"));
  *((_DWORD *)this + 23) = OS::CF::Number::GetValue<unsigned int>(v5, 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v4);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v4, theDict, CFSTR("don't pad"));
  *((_BYTE *)this + 96) = OS::CF::Number::GetValue<unsigned int>(v5, 0) == 0;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v4);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v4, theDict, CFSTR("drift"));
  *((_BYTE *)this + 97) = OS::CF::Number::GetValue<unsigned int>(v5, 0) != 0;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v4);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v4, theDict, CFSTR("drift algorithm"));
  *((_DWORD *)this + 25) = OS::CF::Number::GetValue<unsigned int>(v5, 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v4);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v4, theDict, CFSTR("drift quality"));
  *((_DWORD *)this + 26) = OS::CF::Number::GetValue<unsigned int>(v5, 64);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v4);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v6);
}

void HALS_MetaSubDevice::HALS_MetaSubDevice(HALS_MetaSubDevice *this, HALS_MetaDevice *a2, const __CFString *a3, const __CFDictionary *a4, HALS_Object *a5)
{
  uint64_t v9;
  uint64_t v10;
  void *v11[41];

  v11[40] = *(void **)MEMORY[0x1E0C80C00];
  HALS_Object::HALS_Object(this, 1634956642, 1634956642, (uint64_t)a2, a5);
  *(_QWORD *)v9 = off_1E6985300;
  *(_DWORD *)(v9 + 48) = *((_DWORD *)a2 + 4);
  *(_QWORD *)(v9 + 64) = 0;
  *(_DWORD *)(v9 + 56) = 0;
  if (a3)
    CFRetain(a3);
  *((_QWORD *)this + 9) = a3;
  *((_BYTE *)this + 80) = 1;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 48) = 1;
  *(_QWORD *)((char *)this + 100) = 0x4000000000;
  AMCP::Utility::Dispatch_Queue::create_concurrent_with_workloop((AMCP::Utility::Dispatch_Queue *)v11, "HALS_MetaSubDevice Concurrent Queue");
  v10 = operator new();
  *((_QWORD *)this + 14) = AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v10, v11[0]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v11);
  HALS_MetaSubDevice::_SetSubDeviceInfo(this, a4);
}

void sub_1B5ACBA2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN18HALS_MetaSubDevice16SetSubDeviceInfoEP11HALS_DevicePK14__CFDictionary_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  const __CFDictionary *v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  HALS_ObjectMap *Object;
  HALS_Object *v9;
  int v10;
  unsigned int v11;
  HALS_ObjectMap *v12;
  HALS_Object *v13;
  _DWORD v14[2];
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  const char *v24;
  __int16 v25;
  int v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = a1[4];
  v2 = a1[5];
  v3 = (const __CFDictionary *)a1[6];
  v22 = v2;
  if (!HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)v1)
    || HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)v1) == v2)
  {
    v7 = 0;
  }
  else
  {
    v4 = *(_DWORD *)(HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)v1) + 16);
    v5 = *(_DWORD *)(v1 + 16);
    v6 = *(_QWORD *)(v1 + 112);
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 0x40000000;
    v19[2] = ___ZN18HALS_MetaSubDevice17_SetSubDeviceInfoEP11HALS_DevicePK14__CFDictionary_block_invoke;
    v19[3] = &__block_descriptor_tmp_34_7817;
    v20 = v5;
    v21 = v4;
    LOBYTE(v4) = atomic_load((unsigned __int8 *)(v6 + 32));
    if ((v4 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)(v6 + 33));
    dispatch_async(*(dispatch_queue_t *)v6, v19);
    v7 = 1;
  }
  if (!HALS_MetaSubDevice::_GetObject<HALS_Device>(v1) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v23 = 136315394;
    v24 = "HALS_MetaSubDevice.cpp";
    v25 = 1024;
    v26 = 514;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaSubDevice::_SetSubDeviceInfo: Attempting to replace a clock device with a physical device", (uint8_t *)&v23, 0x12u);
  }
  if (HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)v1))
  {
    Object = (HALS_ObjectMap *)HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)v1);
    HALS_ObjectMap::ReleaseObject_LongTerm(Object, v9);
  }
  boost::variant<HALS_Device *,HALS_ClockDevice *>::assign<HALS_Device *>(v1 + 56, &v22);
  if (v7)
  {
    v17 = 0x2A2A2A2A2A2A2A2ALL;
    v18 = -1;
    v10 = *(_DWORD *)(v1 + 16);
    v14[0] = 0;
    v14[1] = v10;
    v15 = 0u;
    v16 = 0u;
    v11 = *(_DWORD *)(HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)v1) + 16);
    LOBYTE(v23) = 0;
    v27 = 0;
    HALS_NotificationManager::AddPropertyListener((uint64_t)v14, v11, (char *)&v17, (uint64_t)&v23);
    if (v27)
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&v23);
    HALS_Listener::~HALS_Listener((HALS_Listener *)v14);
  }
  v12 = (HALS_ObjectMap *)HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)v1);
  HALS_ObjectMap::RetainObject(v12, v13);
  HALS_MetaSubDevice::_SetSubDeviceInfo((HALS_MetaSubDevice *)v1, v3);
}

void ___ZN18HALS_MetaSubDevice17_SetSubDeviceInfoEP11HALS_DevicePK14__CFDictionary_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const AudioObjectPropertyAddress *a5)
{
  const HALS_Listener *v5;
  int v6;
  _DWORD v7[2];
  __int128 v8;
  __int128 v9;

  v6 = *(_DWORD *)(a1 + 32);
  v5 = (const HALS_Listener *)*(unsigned int *)(a1 + 36);
  v7[0] = 0;
  v7[1] = v6;
  v8 = 0u;
  v9 = 0u;
  HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)v7, v5, &qword_1B5D58FAC, a4, a5);
  HALS_Listener::~HALS_Listener((HALS_Listener *)v7);
}

void sub_1B5ACBD28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HALS_Listener::~HALS_Listener((HALS_Listener *)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaSubDevice::_GetObject<HALS_Device>(uint64_t a1)
{
  _DWORD *v1;

  v1 = boost::variant<HALS_Device *,HALS_ClockDevice *>::apply_visitor<boost::detail::variant::get_visitor<HALS_Device * const>>((int *)(a1 + 56));
  if (!v1)
    boost::throw_exception<boost::bad_get>();
  return *(_QWORD *)v1;
}

void sub_1B5ACBD80(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5ACBD5CLL);
}

uint64_t boost::variant<HALS_Device *,HALS_ClockDevice *>::assign<HALS_Device *>(uint64_t result, _QWORD *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  switch(*(_DWORD *)result ^ (*(int *)result >> 31))
  {
    case 0:
      *(_QWORD *)(result + 8) = *a2;
      break;
    case 1:
      v3 = *a2;
      v2 = 0;
      boost::variant<HALS_Device *,HALS_ClockDevice *>::variant_assign((unsigned int *)result, (uint64_t)&v2);
      result = boost::variant<HALS_Device *,HALS_ClockDevice *>::destroy_content(0);
      break;
    default:
      boost::detail::variant::forced_return<BOOL>();
  }
  return result;
}

void sub_1B5ACBE44(_Unwind_Exception *a1)
{
  boost::variant<HALS_Device *,HALS_ClockDevice *>::destroy_content(0);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaSubDevice::CopyRealIODevice(HALS_MetaSubDevice *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK18HALS_MetaSubDevice16CopyRealIODeviceEv_block_invoke;
  v4[3] = &unk_1E6985510;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5ACBEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZNK18HALS_MetaSubDevice16CopyRealIODeviceEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  HALS_ObjectMap **v3;
  HALS_Object *v4;
  HALS_ObjectMap *v5;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALS_MetaSubDevice::_CopyRealDevice<HALS_Device>(v2);
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v3 = (HALS_ObjectMap **)boost::variant<HALS_Device *,HALS_ClockDevice *>::apply_visitor<boost::detail::variant::get_visitor<HALS_ClockDevice * const>>((int *)(v2 + 56));
    if (!v3)
      boost::throw_exception<boost::bad_get>();
    v5 = *v3;
    HALS_ObjectMap::RetainObject(*v3, v4);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5;
  }
}

void sub_1B5ACBF90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5ACBF5CLL);
}

void sub_1B5ACBFBC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

_DWORD *boost::variant<HALS_Device *,HALS_ClockDevice *>::apply_visitor<boost::detail::variant::get_visitor<HALS_ClockDevice * const>>(int *a1)
{
  _DWORD *v1;

  v1 = 0;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      return v1;
    case 1:
      v1 = a1 + 2;
      break;
    default:
      boost::detail::variant::forced_return<BOOL>();
  }
  return v1;
}

uint64_t HALS_MetaSubDevice::CopyRealDeviceUID(HALS_MetaSubDevice *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK18HALS_MetaSubDevice17CopyRealDeviceUIDEv_block_invoke;
  v4[3] = &unk_1E6985538;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5ACC0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFTypeRef ___ZNK18HALS_MetaSubDevice17CopyRealDeviceUIDEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef result;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 40);
  result = *(CFTypeRef *)(v2 + 72);
  if (result)
  {
    result = CFRetain(result);
    v4 = *(_QWORD *)(v2 + 72);
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v4;
  return result;
}

void sub_1B5ACC10C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_MetaSubDevice::GetRealDeviceObjectID(HALS_MetaSubDevice *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK18HALS_MetaSubDevice21GetRealDeviceObjectIDEv_block_invoke;
  v4[3] = &unk_1E6985560;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5ACC1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_MetaSubDevice21GetRealDeviceObjectIDEv_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = HALS_MetaSubDevice::_GetObject(*(HALS_MetaSubDevice **)(a1 + 40));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(result + 16);
  return result;
}

void sub_1B5ACC1FC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_MetaSubDevice::GetExtraLatency(HALS_MetaSubDevice *this, char a2)
{
  HALB_Mutex *v2;
  uint64_t v3;
  _QWORD v5[6];
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK18HALS_MetaSubDevice15GetExtraLatencyEb_block_invoke;
  v5[3] = &unk_1E6985588;
  v5[4] = &v7;
  v5[5] = this;
  v6 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1B5ACC2A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_MetaSubDevice15GetExtraLatencyEb_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 40)
                                                                              + 4 * *(unsigned __int8 *)(result + 48)
                                                                              + 88);
  return result;
}

uint64_t HALS_MetaSubDevice::IsSynchPaddingOn(HALS_MetaSubDevice *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK18HALS_MetaSubDevice16IsSynchPaddingOnEv_block_invoke;
  v4[3] = &unk_1E69855B0;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5ACC36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_MetaSubDevice16IsSynchPaddingOnEv_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 40) + 96);
  return result;
}

uint64_t HALS_MetaSubDevice::IsDriftCorrectionOn(HALS_MetaSubDevice *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK18HALS_MetaSubDevice19IsDriftCorrectionOnEv_block_invoke;
  v4[3] = &unk_1E69855D8;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5ACC42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_MetaSubDevice19IsDriftCorrectionOnEv_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 40) + 97);
  return result;
}

uint64_t HALS_MetaSubDevice::GetDriftCorrectionAlgorithm(HALS_MetaSubDevice *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK18HALS_MetaSubDevice27GetDriftCorrectionAlgorithmEv_block_invoke;
  v4[3] = &unk_1E6985600;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5ACC4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_MetaSubDevice27GetDriftCorrectionAlgorithmEv_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 40) + 100);
  return result;
}

uint64_t HALS_MetaSubDevice::GetDriftCorrectionQuality(HALS_MetaSubDevice *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 64;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK18HALS_MetaSubDevice25GetDriftCorrectionQualityEv_block_invoke;
  v4[3] = &unk_1E6985628;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5ACC5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_MetaSubDevice25GetDriftCorrectionQualityEv_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 40) + 104);
  return result;
}

uint64_t HALS_MetaSubDevice::GetNumberStreams(HALS_MetaSubDevice *this, char a2)
{
  HALB_Mutex *v2;
  uint64_t v3;
  _QWORD v5[6];
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK18HALS_MetaSubDevice16GetNumberStreamsEb_block_invoke;
  v5[3] = &unk_1E6985650;
  v5[4] = &v7;
  v5[5] = this;
  v6 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1B5ACC674(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_MetaSubDevice16GetNumberStreamsEb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  HALS_IODevice *v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a1 + 48);
  result = HALS_MetaSubDevice::_GetObject<HALS_Device>(v2);
  if (result)
  {
    v5 = (HALS_IODevice *)HALS_MetaSubDevice::_GetObject<HALS_Device>(v2);
    result = HALS_IODevice::GetNumberStreams(v5, v3 != 0);
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5ACC6E4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_MetaSubDevice::CopyStreamByIndex(HALS_MetaSubDevice *this, char a2, int a3)
{
  HALB_Mutex *v3;
  uint64_t v4;
  _QWORD v6[6];
  int v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK18HALS_MetaSubDevice17CopyStreamByIndexEbj_block_invoke;
  v6[3] = &unk_1E6985678;
  v6[4] = &v9;
  v6[5] = this;
  v8 = a2;
  v7 = a3;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  v4 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1B5ACC794(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_MetaSubDevice17CopyStreamByIndexEbj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t result;
  HALS_IODevice *v6;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a1 + 52);
  v4 = *(_DWORD *)(a1 + 48);
  result = HALS_MetaSubDevice::_GetObject<HALS_Device>(v2);
  if (result)
  {
    v6 = (HALS_IODevice *)HALS_MetaSubDevice::_GetObject<HALS_Device>(v2);
    result = HALS_IODevice::CopyStreamByIndex(v6, v3 != 0, v4);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5ACC80C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_MetaSubDevice::GetTotalNumberChannels(HALS_MetaSubDevice *this, char a2)
{
  HALB_Mutex *v2;
  uint64_t v3;
  _QWORD v5[6];
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK18HALS_MetaSubDevice22GetTotalNumberChannelsEb_block_invoke;
  v5[3] = &unk_1E69856A0;
  v5[4] = &v7;
  v5[5] = this;
  v6 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1B5ACC8B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_MetaSubDevice22GetTotalNumberChannelsEb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  HALS_Device *v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a1 + 48);
  result = HALS_MetaSubDevice::_GetObject<HALS_Device>(v2);
  if (result)
  {
    v5 = (HALS_Device *)HALS_MetaSubDevice::_GetObject<HALS_Device>(v2);
    result = HALS_Device::GetTotalNumberChannels(v5, v3 != 0);
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5ACC928(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_MetaSubDevice::GetClockDomain(HALS_MetaSubDevice *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK18HALS_MetaSubDevice14GetClockDomainEv_block_invoke;
  v4[3] = &unk_1E69856C8;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5ACC9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_MetaSubDevice14GetClockDomainEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (HALS_MetaSubDevice::_GetObject<HALS_Device>(v2))
  {
    v3 = HALS_MetaSubDevice::_GetObject<HALS_Device>(v2);
LABEL_5:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 320))(v3);
    goto LABEL_6;
  }
  result = HALS_MetaSubDevice::_GetObject<HALS_ClockDevice>(v2);
  if (result)
  {
    v3 = HALS_MetaSubDevice::_GetObject<HALS_ClockDevice>(v2);
    goto LABEL_5;
  }
LABEL_6:
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5ACCA4C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_MetaSubDevice::_GetObject<HALS_ClockDevice>(uint64_t a1)
{
  _DWORD *v1;

  v1 = boost::variant<HALS_Device *,HALS_ClockDevice *>::apply_visitor<boost::detail::variant::get_visitor<HALS_ClockDevice * const>>((int *)(a1 + 56));
  if (!v1)
    boost::throw_exception<boost::bad_get>();
  return *(_QWORD *)v1;
}

void sub_1B5ACCAA0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5ACCA7CLL);
}

void AMCP::Box::~Box(AMCP::Box *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

AMCP::Box *AMCP::Box::Box(AMCP::Box *this, AMCP::System_Context *a2, unsigned int a3)
{
  AMCP::Object *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject **v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (AMCP::Object *)AMCP::Object::Object((uint64_t)this, (uint64_t)a2, a3);
  *(_QWORD *)v4 = &off_1E6985730;
  v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x61626F78);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    v7 = *v10;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v10);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      v11 = 2080;
      v12 = "Box.cpp";
      v13 = 1024;
      v14 = 26;
      v15 = 2080;
      v16 = "constructed_correct_class(k_class_id_box)";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1B5ACCC6C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Box::Box(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_mutex_base *v5;
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  _QWORD v20[2];
  uint8_t buf[8];
  _BYTE v22[10];
  __int16 v23;
  int v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v5 = *(std::__shared_mutex_base **)(**(_QWORD **)a2 + 16);
  *(_QWORD *)buf = &off_1E6985768;
  *(_QWORD *)v22 = a3;
  v25[0] = buf;
  AMCP::Core::Broker::fetch_first_core_if (v20, v5, (uint64_t)buf);
  *(_QWORD *)a1 = &off_1E696F358;
  v6 = v20[0];
  if (v20[0])
    v7 = *(_DWORD *)v20[0];
  else
    v7 = 0;
  *(_DWORD *)(a1 + 8) = v7;
  v8 = (std::__shared_weak_count *)v20[1];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v8;
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 32) = a2;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = a2;
  }
  v13 = (uint8_t *)v25[0];
  if ((uint8_t *)v25[0] == buf)
  {
    v14 = 4;
    v13 = buf;
  }
  else
  {
    if (!v25[0])
      goto LABEL_17;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_17:
  *(_QWORD *)a1 = &off_1E6985730;
  v15 = AMCP::Object::constructed_correct_class((AMCP::Object *)a1, (AMCP *)0x61626F78);
  if ((v15 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)v22 = 2080;
      *(_QWORD *)&v22[2] = "Box.cpp";
      v23 = 1024;
      v24 = 42;
      LOWORD(v25[0]) = 2080;
      *(_QWORD *)((char *)v25 + 2) = "constructed_correct_class(k_class_id_box)";
      _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", buf, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1B5ACCEA8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[3];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6985768;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6985768;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required;
  _BOOL8 v5;
  CFTypeRef cf;

  simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  if (!AMCP::is_base_of((AMCP *)0x61626F78, simple_required))
    return 0;
  AMCP::Core::Core::get_simple_required_property<1651861860u>(&cf, *a2);
  v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(**(const __CFString ***)(a1 + 8), (const __CFString **)&cf) == kCFCompareEqualTo;
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t std::__function::__func<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3BoxC1ERNS_14System_ContextEN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t AMCP::Core::Core::get_simple_required_property<1651861860u>(_QWORD *a1, AMCP::Core::Core *a2)
{
  AMCP::Log::Scope_Registry *v3;
  CFTypeRef v4;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  void *__p[2];
  char v10;
  CFTypeRef cf;
  char v12;
  _BYTE buf[10];
  char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  void **v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "diubbolg");
  buf[9] = 0;
  LOWORD(v14) = 0;
  AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(&cf, a2, (const AMCP::Address *)buf);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      v10 = 4;
      strcpy((char *)__p, "buid");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v8;
      *(_WORD *)&buf[8] = 2080;
      v14 = "Core.h";
      v15 = 1024;
      v16 = 391;
      v17 = 2080;
      v18 = "optional_value.operator BOOL() == true";
      v19 = 2080;
      v20 = __p;
      v21 = 1024;
      v22 = 1735159650;
      v23 = 1024;
      v24 = 0;
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v10 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  v4 = cf;
  if (cf)
    CFRetain(cf);
  *a1 = v4;
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void sub_1B5ACD188(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void AMCP::Box::get_box_uid(AMCP::Box *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
      AMCP::Core::Core::get_simple_required_property<1651861860u>(a2, v7);
    else
      *a2 = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
  }
}

unint64_t AMCP::Box::get_transport_type(AMCP::Box *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t simple_required;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
    simple_required = AMCP::Core::Core::get_simple_required_property<1953653102u>(v5);
  else
    simple_required = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return simple_required;
}

BOOL AMCP::Box::has_audio(AMCP::Box *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  AMCP::Log::Scope_Registry *v6;
  _BOOL8 v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    strcpy(buf, "uahbbolg");
    buf[9] = 0;
    LOWORD(v17) = 0;
    v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v11 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v15 = 4;
        strcpy((char *)__p, "bhau");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 2080;
        v17 = "Core.h";
        v18 = 1024;
        v19 = 391;
        v20 = 2080;
        v21 = "optional_value.operator BOOL() == true";
        v22 = 2080;
        v23 = __p;
        v24 = 1024;
        v25 = 1735159650;
        v26 = 1024;
        v27 = 0;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      abort();
    }
    v7 = v6 != 0;
  }
  else
  {
    v7 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1B5ACD4CC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

BOOL AMCP::Box::has_video(AMCP::Box *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  AMCP::Log::Scope_Registry *v6;
  _BOOL8 v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    strcpy(buf, "ivhbbolg");
    buf[9] = 0;
    LOWORD(v17) = 0;
    v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v11 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v15 = 4;
        strcpy((char *)__p, "bhvi");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 2080;
        v17 = "Core.h";
        v18 = 1024;
        v19 = 391;
        v20 = 2080;
        v21 = "optional_value.operator BOOL() == true";
        v22 = 2080;
        v23 = __p;
        v24 = 1024;
        v25 = 1735159650;
        v26 = 1024;
        v27 = 0;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      abort();
    }
    v7 = v6 != 0;
  }
  else
  {
    v7 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1B5ACD6B4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

BOOL AMCP::Box::has_midi(AMCP::Box *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  AMCP::Log::Scope_Registry *v6;
  _BOOL8 v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    strcpy(buf, "imhbbolg");
    buf[9] = 0;
    LOWORD(v17) = 0;
    v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v11 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v15 = 4;
        strcpy((char *)__p, "bhmi");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 2080;
        v17 = "Core.h";
        v18 = 1024;
        v19 = 391;
        v20 = 2080;
        v21 = "optional_value.operator BOOL() == true";
        v22 = 2080;
        v23 = __p;
        v24 = 1024;
        v25 = 1735159650;
        v26 = 1024;
        v27 = 0;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      abort();
    }
    v7 = v6 != 0;
  }
  else
  {
    v7 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1B5ACD89C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

BOOL AMCP::Box::is_protected(AMCP::Box *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  AMCP::Log::Scope_Registry *v6;
  _BOOL8 v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    strcpy(buf, "orpbbolg");
    buf[9] = 0;
    LOWORD(v17) = 0;
    v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v11 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v15 = 4;
        strcpy((char *)__p, "bpro");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 2080;
        v17 = "Core.h";
        v18 = 1024;
        v19 = 391;
        v20 = 2080;
        v21 = "optional_value.operator BOOL() == true";
        v22 = 2080;
        v23 = __p;
        v24 = 1024;
        v25 = 1735159650;
        v26 = 1024;
        v27 = 0;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      abort();
    }
    v7 = v6 != 0;
  }
  else
  {
    v7 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1B5ACDA84(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

BOOL AMCP::Box::acquired(AMCP::Box *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  AMCP::Log::Scope_Registry *v6;
  _BOOL8 v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    strcpy(buf, "noxbbolg");
    buf[9] = 0;
    LOWORD(v17) = 0;
    v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v11 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v15 = 4;
        strcpy((char *)__p, "bxon");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 2080;
        v17 = "Core.h";
        v18 = 1024;
        v19 = 391;
        v20 = 2080;
        v21 = "optional_value.operator BOOL() == true";
        v22 = 2080;
        v23 = __p;
        v24 = 1024;
        v25 = 1735159650;
        v26 = 1024;
        v27 = 0;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      abort();
    }
    v7 = v6 != 0;
  }
  else
  {
    v7 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1B5ACDC6C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Box::set_acquired(AMCP::Box *this, char a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  int v20;
  char v21;
  _OWORD v22[2];
  void (*v23)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v24;
  std::__shared_weak_count *v25;

  v21 = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (int8x8_t *)*((_QWORD *)this + 2);
  if (!v7)
    goto LABEL_20;
  v19 = 0x676C6F6262786F6ELL;
  v20 = 0;
  if (!AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v19))
    goto LABEL_20;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v24, v7, (unsigned int *)&v19);
  v8 = v24;
  if (!v24)
    goto LABEL_13;
  v9 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
  {
    v12 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v12))
    {
      memset(v22, 0, sizeof(v22));
      LOBYTE(v22[0]) = a2;
      v23 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v22);
      if (v23)
        v23(0, (uint64_t)v22, 0, 0);
      goto LABEL_8;
    }
LABEL_13:
    v10 = 1;
    goto LABEL_14;
  }
  AMCP::Core::Operation::call_function<void,BOOL const&>(v8, (uint64_t)&v21);
LABEL_8:
  v10 = 0;
LABEL_14:
  v13 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if ((v10 & 1) == 0)
  {
    v11 = 1;
    goto LABEL_21;
  }
LABEL_20:
  v11 = 0;
LABEL_21:
  v16 = (unint64_t *)&v6->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v11;
}

void sub_1B5ACDE0C(void *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v3 - 48);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5ACDDB4);
}

unint64_t AMCP::Box::get_acquisition_error(AMCP::Box *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    strcpy(buf, "foxbbolg");
    buf[9] = 0;
    LOWORD(v17) = 0;
    v6 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if (!HIDWORD(v6))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v11 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v15 = 4;
        strcpy((char *)__p, "bxof");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 2080;
        v17 = "Core.h";
        v18 = 1024;
        v19 = 391;
        v20 = 2080;
        v21 = "optional_value.operator BOOL() == true";
        v22 = 2080;
        v23 = __p;
        v24 = 1024;
        v25 = 1735159650;
        v26 = 1024;
        v27 = 0;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      abort();
    }
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1B5ACE018(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::Box::get_device_list(AMCP::Box *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  AMCP::Log::Scope_Registry *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *__p[2];
  char v16;
  void *v17;
  uint64_t v18;
  char v19;
  _BYTE buf[10];
  char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  void **v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      strcpy(buf, "#vdbbolg");
      buf[9] = 0;
      LOWORD(v21) = 0;
      AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v17, v7, (AMCP::Address *)buf);
      if (!v19)
      {
        AMCP::Log::Scope_Registry::get(v8);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v12 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          v13 = pthread_self();
          v14 = pthread_mach_thread_np(v13);
          v16 = 4;
          strcpy((char *)__p, "bdv#");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v14;
          *(_WORD *)&buf[8] = 2080;
          v21 = "Core.h";
          v22 = 1024;
          v23 = 391;
          v24 = 2080;
          v25 = "optional_value.operator BOOL() == true";
          v26 = 2080;
          v27 = __p;
          v28 = 1024;
          v29 = 1735159650;
          v30 = 1024;
          v31 = 0;
          _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v16 < 0)
            operator delete(__p[0]);
        }
        abort();
      }
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v9 = v17;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, v17, v18, (v18 - (uint64_t)v17) >> 2);
      if (v9)
        operator delete(v9);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_1B5ACE25C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::Box::get_clock_list(AMCP::Box *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  AMCP::Log::Scope_Registry *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *__p[2];
  char v16;
  void *v17;
  uint64_t v18;
  char v19;
  _BYTE buf[10];
  char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  void **v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      strcpy(buf, "#lcbbolg");
      buf[9] = 0;
      LOWORD(v21) = 0;
      AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v17, v7, (AMCP::Address *)buf);
      if (!v19)
      {
        AMCP::Log::Scope_Registry::get(v8);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v12 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          v13 = pthread_self();
          v14 = pthread_mach_thread_np(v13);
          v16 = 4;
          strcpy((char *)__p, "bcl#");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v14;
          *(_WORD *)&buf[8] = 2080;
          v21 = "Core.h";
          v22 = 1024;
          v23 = 391;
          v24 = 2080;
          v25 = "optional_value.operator BOOL() == true";
          v26 = 2080;
          v27 = __p;
          v28 = 1024;
          v29 = 1735159650;
          v30 = 1024;
          v31 = 0;
          _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v16 < 0)
            operator delete(__p[0]);
        }
        abort();
      }
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v9 = v17;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, v17, v18, (v18 - (uint64_t)v17) >> 2);
      if (v9)
        operator delete(v9);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_1B5ACE4A0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::Graph::Graph::~Graph(AMCP::Graph::Graph *this)
{
  AMCP::Graph::Graph::~Graph(this);
  JUMPOUT(0x1B5E50688);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  std::string __p;
  _QWORD v6[3];

  *(_QWORD *)this = &off_1E69857E8;
  AMCP::Graph::Graph::get_nodes(v6, *((_QWORD **)this + 24));
  v2 = (uint64_t *)v6[0];
  v3 = (uint64_t *)v6[1];
  while (v2 != v3)
  {
    v4 = *v2;
    if (*(char *)(*v2 + 47) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 24), *(_QWORD *)(v4 + 32));
    else
      __p = *(std::string *)(v4 + 24);
    AMCP::Graph::Graph::delete_node(this, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v2 += 2;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 296);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 280);
  std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::destroy(*((_QWORD **)this + 33));
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table((uint64_t)this + 216);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::~__hash_table((uint64_t)this + 176);
  std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::~__hash_table((uint64_t)this + 136);
  std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::~__hash_table((uint64_t)this + 96);
  std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::~__hash_table((uint64_t)this + 56);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>>>::~__hash_table((uint64_t)this + 16);
}

void AMCP::Graph::Graph::get_node_proc(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  _QWORD *v16;
  std::string *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unsigned __int8 **v32;
  unsigned __int8 *v33;
  unint64_t v34;
  char *v35;
  _QWORD *v36;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  size_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  std::string v56;
  __int128 v57;
  _QWORD v58[2];
  char v59;

  v7 = (uint64_t *)(a1 + 16);
  if (std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((_QWORD *)(a1 + 16), (unsigned __int8 *)a2))
  {
    goto LABEL_2;
  }
  _ZNSt3__115allocate_sharedB8ne180100IN4AMCP5Graph9Node_ProcENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v55);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v56 = *(std::string *)a2;
  v54 = v55;
  v57 = v55;
  v55 = 0uLL;
  v24 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v56);
  v25 = v24;
  v26 = *(_QWORD *)(a1 + 24);
  if (!v26)
    goto LABEL_59;
  v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
  v27.i16[0] = vaddlv_u8(v27);
  v28 = v27.u32[0];
  if (v27.u32[0] > 1uLL)
  {
    v3 = v24;
    if (v24 >= v26)
      v3 = v24 % v26;
  }
  else
  {
    v3 = (v26 - 1) & v24;
  }
  v32 = *(unsigned __int8 ***)(*v7 + 8 * v3);
  if (!v32 || (v33 = *v32) == 0)
  {
LABEL_59:
    v35 = (char *)operator new(0x38uLL);
    v36 = (_QWORD *)(a1 + 32);
    v58[0] = v35;
    v58[1] = a1 + 32;
    *(_QWORD *)v35 = 0;
    *((_QWORD *)v35 + 1) = v25;
    *(std::string *)(v35 + 16) = v56;
    memset(&v56, 0, sizeof(v56));
    *(_OWORD *)(v35 + 40) = v54;
    v57 = 0uLL;
    v59 = 1;
    v37 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
    v38 = *(float *)(a1 + 48);
    if (!v26 || (float)(v38 * (float)v26) < v37)
    {
      v39 = 1;
      if (v26 >= 3)
        v39 = (v26 & (v26 - 1)) != 0;
      v40 = v39 | (2 * v26);
      v41 = vcvtps_u32_f32(v37 / v38);
      if (v40 <= v41)
        v42 = v41;
      else
        v42 = v40;
      std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v7, v42);
      v26 = *(_QWORD *)(a1 + 24);
      if ((v26 & (v26 - 1)) != 0)
      {
        if (v25 >= v26)
          v3 = v25 % v26;
        else
          v3 = v25;
      }
      else
      {
        v3 = (v26 - 1) & v25;
      }
    }
    v46 = *v7;
    v47 = *(_QWORD **)(*v7 + 8 * v3);
    if (v47)
    {
      *(_QWORD *)v35 = *v47;
    }
    else
    {
      *(_QWORD *)v35 = *v36;
      *v36 = v35;
      *(_QWORD *)(v46 + 8 * v3) = v36;
      if (!*(_QWORD *)v35)
      {
LABEL_89:
        v58[0] = 0;
        ++*(_QWORD *)(a1 + 40);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v58);
        goto LABEL_90;
      }
      v48 = *(_QWORD *)(*(_QWORD *)v35 + 8);
      if ((v26 & (v26 - 1)) != 0)
      {
        if (v48 >= v26)
          v48 %= v26;
      }
      else
      {
        v48 &= v26 - 1;
      }
      v47 = (_QWORD *)(*v7 + 8 * v48);
    }
    *v47 = v35;
    goto LABEL_89;
  }
  while (1)
  {
    v34 = *((_QWORD *)v33 + 1);
    if (v34 == v25)
      break;
    if (v28 > 1)
    {
      if (v34 >= v26)
        v34 %= v26;
    }
    else
    {
      v34 &= v26 - 1;
    }
    if (v34 != v3)
      goto LABEL_59;
LABEL_58:
    v33 = *(unsigned __int8 **)v33;
    if (!v33)
      goto LABEL_59;
  }
  if (!std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v33 + 16, (unsigned __int8 *)&v56))
    goto LABEL_58;
  if (*((_QWORD *)&v54 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v54 + 1) + 16))(*((_QWORD *)&v54 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v54 + 1));
    }
  }
LABEL_90:
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  v49 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
  if (*((_QWORD *)&v55 + 1))
  {
    v50 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
LABEL_2:
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 24);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*v7 + 8 * v3);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v9)
          {
            if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((unsigned __int8 *)v14 + 16, (unsigned __int8 *)a2))
            {
              goto LABEL_73;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  v16 = (_QWORD *)(a1 + 32);
  v14 = (char *)operator new(0x38uLL);
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  v56.__r_.__value_.__l.__size_ = a1 + 32;
  v56.__r_.__value_.__s.__data_[16] = 0;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v9;
  v17 = (std::string *)(v14 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v14 + 4) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v14 + 5) = 0;
  *((_QWORD *)v14 + 6) = 0;
  v56.__r_.__value_.__s.__data_[16] = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v19 = *(float *)(a1 + 48);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v7, v23);
    v10 = *(_QWORD *)(a1 + 24);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v29 = *v7;
  v30 = *(_QWORD **)(*v7 + 8 * v3);
  if (v30)
  {
    *(_QWORD *)v14 = *v30;
    goto LABEL_71;
  }
  *(_QWORD *)v14 = *v16;
  *v16 = v14;
  *(_QWORD *)(v29 + 8 * v3) = v16;
  if (*(_QWORD *)v14)
  {
    v31 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v31 >= v10)
        v31 %= v10;
    }
    else
    {
      v31 &= v10 - 1;
    }
    v30 = (_QWORD *)(*v7 + 8 * v31);
LABEL_71:
    *v30 = v14;
  }
  v56.__r_.__value_.__r.__words[0] = 0;
  ++*(_QWORD *)(a1 + 40);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v56);
LABEL_73:
  *a3 = *((_QWORD *)v14 + 5);
  v43 = *((_QWORD *)v14 + 6);
  a3[1] = v43;
  if (v43)
  {
    v44 = (unint64_t *)(v43 + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
}

void sub_1B5ACEA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Graph::delete_node_proc(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  char v15;

  v3 = a1 + 2;
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(a1 + 2, a2);
  if (v4)
  {
    v5 = (int8x8_t)a1[3];
    v6 = *((_QWORD *)v4 + 1);
    v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v5)
        v6 %= *(_QWORD *)&v5;
    }
    else
    {
      v6 &= *(_QWORD *)&v5 - 1;
    }
    v8 = *(unsigned __int8 **)(*v3 + 8 * v6);
    do
    {
      v9 = v8;
      v8 = *(unsigned __int8 **)v8;
    }
    while (v8 != v4);
    if (v9 == (unsigned __int8 *)(a1 + 4))
      goto LABEL_19;
    v10 = *((_QWORD *)v9 + 1);
    if (v7.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v5)
        v10 %= *(_QWORD *)&v5;
    }
    else
    {
      v10 &= *(_QWORD *)&v5 - 1;
    }
    if (v10 != v6)
    {
LABEL_19:
      if (!*(_QWORD *)v4)
        goto LABEL_20;
      v11 = *(_QWORD *)(*(_QWORD *)v4 + 8);
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= *(_QWORD *)&v5)
          v11 %= *(_QWORD *)&v5;
      }
      else
      {
        v11 &= *(_QWORD *)&v5 - 1;
      }
      if (v11 != v6)
LABEL_20:
        *(_QWORD *)(*v3 + 8 * v6) = 0;
    }
    v12 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v7.u32[0] > 1uLL)
      {
        if (v13 >= *(_QWORD *)&v5)
          v13 %= *(_QWORD *)&v5;
      }
      else
      {
        v13 &= *(_QWORD *)&v5 - 1;
      }
      if (v13 != v6)
      {
        *(_QWORD *)(*v3 + 8 * v13) = v9;
        v12 = *(_QWORD *)v4;
      }
    }
    *(_QWORD *)v9 = v12;
    *(_QWORD *)v4 = 0;
    --a1[5];
    v14[0] = v4;
    v14[1] = a1 + 4;
    v15 = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
  }
}

_QWORD *AMCP::Graph::Graph::get_nodes(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  char **v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int64x2_t v24;
  char *v25;
  uint64_t v26;
  int64x2_t v27;
  char *v28;
  _QWORD *v29;

  *result = 0;
  result[1] = 0;
  result[2] = 0;
  if (a2)
  {
    v2 = a2;
    v3 = (char **)result;
    v4 = 0;
    v5 = result + 2;
    do
    {
      v6 = v2[5];
      if (!*(_DWORD *)(v6 + 16))
      {
        if ((unint64_t)v4 >= *v5)
        {
          v10 = (v4 - *v3) >> 4;
          if ((unint64_t)(v10 + 1) >> 60)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v11 = *v5 - (_QWORD)*v3;
          v12 = v11 >> 3;
          if (v11 >> 3 <= (unint64_t)(v10 + 1))
            v12 = v10 + 1;
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
            v13 = 0xFFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          v29 = v5;
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v13);
          v16 = &v14[16 * v10];
          v17 = *(_OWORD *)(v2 + 5);
          *(_OWORD *)v16 = v17;
          if (*((_QWORD *)&v17 + 1))
          {
            v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
          }
          v21 = *v3;
          v20 = v3[1];
          if (v20 == *v3)
          {
            v24 = vdupq_n_s64((unint64_t)v20);
            v22 = &v14[16 * v10];
          }
          else
          {
            v22 = &v14[16 * v10];
            do
            {
              v23 = *((_OWORD *)v20 - 1);
              v20 -= 16;
              *((_OWORD *)v22 - 1) = v23;
              v22 -= 16;
              *(_QWORD *)v20 = 0;
              *((_QWORD *)v20 + 1) = 0;
            }
            while (v20 != v21);
            v24 = *(int64x2_t *)v3;
          }
          v4 = v16 + 16;
          *v3 = v22;
          v3[1] = v16 + 16;
          v27 = v24;
          v25 = v3[2];
          v3[2] = &v14[16 * v15];
          v28 = v25;
          v26 = v24.i64[0];
          result = (_QWORD *)std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v26);
        }
        else
        {
          *(_QWORD *)v4 = v6;
          v7 = v2[6];
          *((_QWORD *)v4 + 1) = v7;
          if (v7)
          {
            v8 = (unint64_t *)(v7 + 8);
            do
              v9 = __ldxr(v8);
            while (__stxr(v9 + 1, v8));
          }
          v4 += 16;
        }
        v3[1] = v4;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_1B5ACEE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *AMCP::Graph::Graph::delete_node(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  unsigned __int8 *result;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void ***v12;
  void **v13;
  unint64_t v14;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *exception;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  void **v23;
  void **v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t (**v40)();
  __int128 v41;
  uint64_t v42;
  std::string v43;
  std::logic_error v44;
  std::logic_error v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char v51;
  uint8_t buf[8];
  _BYTE v53[10];
  __int16 v54;
  int v55;
  __int16 v56;
  _BYTE v57[14];
  const char *v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 22;
  result = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(a1 + 22, a2);
  if (!result)
    return result;
  v6 = result;
  v7 = *(_QWORD *)(*((_QWORD *)result + 5) + 176);
  if (v7)
    v8 = *(_DWORD *)(v7 + 8);
  else
    v8 = 0;
  v9 = a1[28];
  if (!v9)
    goto LABEL_22;
  v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = v8;
    if (v9 <= v8)
      v11 = v8 % v9;
  }
  else
  {
    v11 = ((_DWORD)v9 - 1) & v8;
  }
  v12 = *(void ****)(a1[27] + 8 * v11);
  if (!v12 || (v13 = *v12) == 0)
  {
LABEL_22:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v15 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)v53 = 2080;
      *(_QWORD *)&v53[2] = "Graph.cpp";
      v54 = 1024;
      v55 = 156;
      v56 = 2080;
      *(_QWORD *)v57 = "not (found != m_nodes_by_object_id.end())";
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Missing object ID for node in graph index", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v51);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Missing object ID for node in graph index", (uint64_t)&v43);
    std::logic_error::logic_error(&v44, &v43);
    v44.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v45, &v44);
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = -1;
    v45.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v46 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v45);
    *(_QWORD *)&v57[6] = "BOOL AMCP::Graph::Graph::delete_node(const Graph_Node_UID &)";
    v58 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
    v59 = 156;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v38);
    v41 = v38;
    v42 = v39;
    v38 = 0uLL;
    v39 = 0;
    v40 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v40);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  while (1)
  {
    v14 = (unint64_t)v13[1];
    if (v14 == v8)
      break;
    if (v10.u32[0] > 1uLL)
    {
      if (v14 >= v9)
        v14 %= v9;
    }
    else
    {
      v14 &= v9 - 1;
    }
    if (v14 != v11)
      goto LABEL_22;
LABEL_21:
    v13 = (void **)*v13;
    if (!v13)
      goto LABEL_22;
  }
  if (*((_DWORD *)v13 + 4) != v8)
    goto LABEL_21;
  AMCP::Graph::Graph::disconnect_any_wires_connected_to_node(a1, a2);
  v19 = (int8x8_t)a1[28];
  v20 = (unint64_t)v13[1];
  v21 = (uint8x8_t)vcnt_s8(v19);
  v21.i16[0] = vaddlv_u8(v21);
  if (v21.u32[0] > 1uLL)
  {
    if (v20 >= *(_QWORD *)&v19)
      v20 %= *(_QWORD *)&v19;
  }
  else
  {
    v20 &= *(_QWORD *)&v19 - 1;
  }
  v22 = a1[27];
  v23 = *(void ***)(v22 + 8 * v20);
  do
  {
    v24 = v23;
    v23 = (void **)*v23;
  }
  while (v23 != v13);
  if (v24 == a1 + 29)
    goto LABEL_42;
  v25 = (unint64_t)v24[1];
  if (v21.u32[0] > 1uLL)
  {
    if (v25 >= *(_QWORD *)&v19)
      v25 %= *(_QWORD *)&v19;
  }
  else
  {
    v25 &= *(_QWORD *)&v19 - 1;
  }
  if (v25 != v20)
  {
LABEL_42:
    if (!*v13)
      goto LABEL_43;
    v26 = *((_QWORD *)*v13 + 1);
    if (v21.u32[0] > 1uLL)
    {
      if (v26 >= *(_QWORD *)&v19)
        v26 %= *(_QWORD *)&v19;
    }
    else
    {
      v26 &= *(_QWORD *)&v19 - 1;
    }
    if (v26 != v20)
LABEL_43:
      *(_QWORD *)(v22 + 8 * v20) = 0;
  }
  v27 = *v13;
  if (*v13)
  {
    v28 = v27[1];
    if (v21.u32[0] > 1uLL)
    {
      if (v28 >= *(_QWORD *)&v19)
        v28 %= *(_QWORD *)&v19;
    }
    else
    {
      v28 &= *(_QWORD *)&v19 - 1;
    }
    if (v28 != v20)
    {
      *(_QWORD *)(a1[27] + 8 * v28) = v24;
      v27 = *v13;
    }
  }
  *v24 = v27;
  *v13 = 0;
  --a1[30];
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>::operator()[abi:ne180100](1, v13);
  v29 = (int8x8_t)a1[23];
  v30 = *((_QWORD *)v6 + 1);
  v31 = (uint8x8_t)vcnt_s8(v29);
  v31.i16[0] = vaddlv_u8(v31);
  if (v31.u32[0] > 1uLL)
  {
    if (v30 >= *(_QWORD *)&v29)
      v30 %= *(_QWORD *)&v29;
  }
  else
  {
    v30 &= *(_QWORD *)&v29 - 1;
  }
  v32 = *(unsigned __int8 **)(*v4 + 8 * v30);
  do
  {
    v33 = v32;
    v32 = *(unsigned __int8 **)v32;
  }
  while (v32 != v6);
  if (v33 == (unsigned __int8 *)(a1 + 24))
    goto LABEL_68;
  v34 = *((_QWORD *)v33 + 1);
  if (v31.u32[0] > 1uLL)
  {
    if (v34 >= *(_QWORD *)&v29)
      v34 %= *(_QWORD *)&v29;
  }
  else
  {
    v34 &= *(_QWORD *)&v29 - 1;
  }
  if (v34 != v30)
  {
LABEL_68:
    if (!*(_QWORD *)v6)
      goto LABEL_69;
    v35 = *(_QWORD *)(*(_QWORD *)v6 + 8);
    if (v31.u32[0] > 1uLL)
    {
      if (v35 >= *(_QWORD *)&v29)
        v35 %= *(_QWORD *)&v29;
    }
    else
    {
      v35 &= *(_QWORD *)&v29 - 1;
    }
    if (v35 != v30)
LABEL_69:
      *(_QWORD *)(*v4 + 8 * v30) = 0;
  }
  v36 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
  {
    v37 = *(_QWORD *)(v36 + 8);
    if (v31.u32[0] > 1uLL)
    {
      if (v37 >= *(_QWORD *)&v29)
        v37 %= *(_QWORD *)&v29;
    }
    else
    {
      v37 &= *(_QWORD *)&v29 - 1;
    }
    if (v37 != v30)
    {
      *(_QWORD *)(*v4 + 8 * v37) = v33;
      v36 = *(_QWORD *)v6;
    }
  }
  *(_QWORD *)v33 = v36;
  *(_QWORD *)v6 = 0;
  --a1[25];
  *(_QWORD *)buf = v6;
  *(_QWORD *)v53 = a1 + 24;
  v53[8] = 1;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
  return (unsigned __int8 *)(*(uint64_t (**)(_QWORD *, unsigned __int8 *))(*a1 + 24))(a1, a2);
}

void sub_1B5ACF420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 112) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 104);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 104) = 0;
  MEMORY[0x1B5E500E8](v29 - 128);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 129));
  _Unwind_Resume(a1);
}

void AMCP::Graph::Graph::disconnect_any_wires_connected_to_node(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  _QWORD *i;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t *j;
  void *v13;
  uint64_t **v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  AMCP::Wire_Identifier *v19;
  void *__p[2];
  uint64_t v21;
  std::string v22;
  uint64_t v23;
  int v24;
  std::string v25;
  uint64_t v26;
  int v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  std::string v33;
  uint64_t v34;
  int v35;
  std::string v36;
  uint64_t v37;
  int v38;
  void *v39;
  char v40;
  void *v41;
  void *v42;
  std::__shared_weak_count *v43;
  void *v44;
  void *v45;
  char v46;
  _QWORD v47[3];

  v3 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(a1 + 22, a2);
  if (v3)
  {
    v4 = v3;
    v19 = (AMCP::Wire_Identifier *)(a1 + 7);
    v5 = *((_QWORD *)v3 + 5);
    if (*(char *)(v5 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v5 + 24), *(_QWORD *)(v5 + 32));
      v5 = *((_QWORD *)v4 + 5);
    }
    else
    {
      v33 = *(std::string *)(v5 + 24);
    }
    AMCP::Graph::Wire_Index::get_wires_for_node((uint64_t)&v31, v19, (uint64_t)&v33, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v5 + 88) - *(_QWORD *)(v5 + 80)) >> 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56)) >> 4));
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    v29 = 0;
    v30 = 0;
    v28 = &v29;
    for (i = v32; i; i = (_QWORD *)*i)
    {
      if (*((char *)i + 39) < 0)
        std::string::__init_copy_ctor_external(&v25, (const std::string::value_type *)i[2], i[3]);
      else
        v25 = *(std::string *)(i + 2);
      v26 = i[5];
      v27 = *((_DWORD *)i + 12);
      if (*((char *)i + 79) < 0)
        std::string::__init_copy_ctor_external(&v22, (const std::string::value_type *)i[7], i[8]);
      else
        v22 = *(std::string *)(i + 7);
      v23 = i[10];
      v24 = *((_DWORD *)i + 22);
      v33 = v25;
      memset(&v25, 0, sizeof(v25));
      v34 = v26;
      v35 = v27;
      v36 = v22;
      memset(&v22, 0, sizeof(v22));
      v38 = *((_DWORD *)i + 22);
      v37 = i[10];
      v7 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(a1 + 12, (unsigned __int8 **)&v33);
      if (v7 && *((_BYTE *)v7 + 504))
      {
        AMCP::Graph::Wire_Index::get_tgid_for_wire((AMCP::Graph::Wire_Index *)__p, v19, (unsigned __int8 **)&v33);
        v8 = std::__tree<std::string>::__find_equal<std::string>((uint64_t)&v28, v47, __p);
        if (*v8)
        {
          if (SHIBYTE(v21) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v9 = v8;
          v10 = operator new(0x38uLL);
          v10[2] = *(_OWORD *)__p;
          *((_QWORD *)v10 + 6) = v21;
          __p[1] = 0;
          v21 = 0;
          __p[0] = 0;
          v11 = v47[0];
          *(_QWORD *)v10 = 0;
          *((_QWORD *)v10 + 1) = 0;
          *((_QWORD *)v10 + 2) = v11;
          *v9 = v10;
          if (*v28)
          {
            v28 = (uint64_t **)*v28;
            v10 = (_OWORD *)*v9;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v29, (uint64_t *)v10);
          ++v30;
        }
      }
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
    }
    for (j = (uint64_t *)a1[14]; j; j = (uint64_t *)*j)
    {
      if (*((_BYTE *)j + 504))
      {
        AMCP::Graph::Graph_Wire::Connection::Connection(&v33, (const AMCP::Graph::Graph_Wire::Connection *)(j + 36));
        v13 = v44;
        v14 = (uint64_t **)std::__tree<std::string>::find<std::string>((uint64_t)&v28, &v39);
        if (v13)
        {
          v45 = v13;
          operator delete(v13);
        }
        v15 = v43;
        if (v43)
        {
          p_shared_owners = (unint64_t *)&v43->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        if (v41)
        {
          v42 = v41;
          operator delete(v41);
        }
        if (v40 < 0)
          operator delete(v39);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v33.__r_.__value_.__l.__data_);
        if (&v29 != v14)
        {
          v33.__r_.__value_.__s.__data_[0] = 0;
          v46 = 0;
          if (*((_BYTE *)j + 504))
            std::__optional_destruct_base<AMCP::Graph::Graph_Wire::Connection,false>::reset[abi:ne180100]((uint64_t)(j + 36));
          std::__optional_destruct_base<AMCP::Graph::Graph_Wire::Connection,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v33);
        }
      }
    }
    std::__tree<std::string>::destroy((char *)v29);
    std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node(v32);
    v18 = v31;
    v31 = 0;
    if (v18)
      operator delete(v18);
  }
}

void sub_1B5ACF8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__shared_ptr_emplace<AMCP::Graph::Meta_Timebase_Factory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6985830;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Graph::Meta_Timebase_Factory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6985830;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::Graph::Meta_Timebase_Factory>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<double,std::string> const,std::shared_ptr<AMCP::Graph::Timebase>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    operator delete(v4);
}

void std::__shared_ptr_emplace<AMCP::Graph::Node>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6985880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Graph::Node>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6985880;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::Graph::Node>::__on_zero_shared(uint64_t a1)
{
  uint64_t i;
  std::__shared_weak_count *v3;
  void **v4;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 216);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 200);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 168);
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  for (i = 104; i != 56; i -= 24)
  {
    v4 = (void **)(a1 + i);
    std::vector<AMCP::Graph::Terminal>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void AMCP::Graph::Graph::connect_nodes(_QWORD *a1, uint64_t *a2, uint64_t *a3, const std::string::value_type *a4, _QWORD *a5)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  std::string *v13;
  uint64_t *v14;
  std::string::size_type v15;
  unsigned __int8 *v16;
  char *v17;
  uint64_t v18;
  std::string *v19;
  unint64_t v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  std::string::size_type size;
  uint64_t v29;
  int v30;
  unsigned __int8 *v31;
  uint64_t v32;
  std::string *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  BOOL v39;
  _BOOL4 v40;
  _BOOL4 v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  const std::string::value_type *v47;
  unsigned __int8 *v48;
  void *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t terminal;
  __int128 v58;
  uint64_t v59;
  AMCP::Log::Scope_Registry *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  double v64;
  double mSampleRate;
  int v66;
  _DWORD *v67;
  _DWORD *v68;
  char *v69;
  uint64_t v70;
  std::string *v71;
  int v72;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81;
  std::__shared_weak_count *v82;
  NSObject *v83;
  unint64_t *v84;
  unint64_t v85;
  _opaque_pthread_t *v86;
  mach_port_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  _BYTE *v91;
  void *v92;
  std::string *v93;
  std::string *v94;
  std::string *v95;
  std::string *v96;
  std::__shared_weak_count *v97;
  NSObject *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t *v101;
  _opaque_pthread_t *v102;
  mach_port_t v103;
  _BYTE *v104;
  const std::string::value_type *v105;
  std::logic_error *v106;
  _BYTE *v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  std::logic_error v111;
  std::__shared_weak_count *v112;
  NSObject *v113;
  unint64_t *v114;
  unint64_t v115;
  _opaque_pthread_t *v116;
  mach_port_t v117;
  void *exception;
  std::__shared_weak_count *v119;
  NSObject *v120;
  unint64_t *v121;
  unint64_t v122;
  _opaque_pthread_t *v123;
  mach_port_t v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  void *v128;
  uint64_t v129;
  std::string *v130;
  std::string *v131;
  uint64_t v132;
  _QWORD *v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  _BOOL4 v140;
  int v141;
  uint64_t nth_terminal;
  uint64_t *v143;
  char *v144;
  std::string v145;
  void *v146;
  char v147;
  void *v148;
  char v149;
  void *v150;
  void *v151;
  int v152;
  int v153;
  int v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  void *v157;
  void *v158;
  std::string v159;
  uint64_t v160;
  int v161;
  std::string v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  std::string v167;
  AudioStreamBasicDescription v168;
  std::string v169;
  unint64_t v170;
  int v171;
  std::string v172;
  void *v173;
  char *v174;
  __int128 v175;
  uint64_t v176;
  std::string v177;
  uint64_t v178;
  std::string v179;
  std::string v180;
  std::logic_error v181;
  _BYTE __s1[32];
  uint64_t v183;
  uint64_t v184;
  int v185;
  char v186;
  _BYTE buf[64];
  uint64_t v188;
  int v189;
  _BYTE __p[56];
  __int128 v191;
  int v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  int v201;
  _DWORD v202[11];
  _BYTE v203[54];
  uint64_t v204;

  v5 = a2;
  v204 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(*a2 + 56);
  v7 = *(_QWORD *)(*a2 + 64);
  v9 = *a3;
  if (*(_DWORD *)(*a3 + 48) != 1 && *(_DWORD *)(v9 + 16) == 1)
  {
    *(_QWORD *)__p = &off_1E69858D0;
    *(_QWORD *)&__p[8] = a4;
    *(_QWORD *)&__p[24] = __p;
    AMCP::Graph::Node::for_each_connection(v9, a1 + 7, (uint64_t)__p);
    v10 = *(_QWORD **)&__p[24];
    if (*(_BYTE **)&__p[24] == __p)
    {
      v11 = 4;
      v10 = __p;
    }
    else
    {
      if (!*(_QWORD *)&__p[24])
        goto LABEL_8;
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
LABEL_8:
  if (v7 != v8)
  {
    v12 = 0;
    v132 = 0x6DB6DB6DB6DB6DB7 * ((v7 - v8) >> 4);
    v133 = a1 + 7;
    v135 = a1 + 22;
    v136 = a1 + 17;
    v143 = v5;
    while (1)
    {
      nth_terminal = AMCP::Graph::Node::get_nth_terminal(*v5, v12, 0);
      v13 = (std::string *)*v5;
      if (*(char *)(*v5 + 47) < 0)
        std::string::__init_copy_ctor_external(&v172, v13[1].__r_.__value_.__l.__data_, v13[1].__r_.__value_.__l.__size_);
      else
        v172 = v13[1];
      v14 = a3;
      *(_OWORD *)__p = *(_OWORD *)&v172.__r_.__value_.__l.__data_;
      v15 = v172.__r_.__value_.__r.__words[2];
      memset(&v172, 0, sizeof(v172));
      *(_QWORD *)&__p[16] = v15;
      *(_QWORD *)&__p[24] = v12;
      *(_DWORD *)&__p[32] = 0;
      AMCP::Graph::Wire_Index::get_wires_for_terminal((char **)&v173, v133, (unsigned __int8 **)__p);
      v134 = v12;
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v17 = (char *)v173;
      v144 = v174;
      if (v173 != v174)
        break;
LABEL_228:
      if (v17)
        operator delete(v17);
      v12 = v134 + 1;
      if (v134 + 1 == v132)
        return;
    }
    while (1)
    {
      v18 = *(_QWORD *)v17;
      v19 = (std::string *)(*(_QWORD *)v17 + 40);
      if (*(char *)(*(_QWORD *)v17 + 63) < 0)
        std::string::__init_copy_ctor_external(&v169, *(const std::string::value_type **)(v18 + 40), *(_QWORD *)(v18 + 48));
      else
        v169 = *v19;
      v21 = (uint64_t *)(v18 + 64);
      v20 = *(_QWORD *)(v18 + 64);
      v171 = *(_DWORD *)(v18 + 72);
      v170 = v20;
      if (v171 != 1)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v16);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
        v112 = *(std::__shared_weak_count **)&__p[8];
        v113 = **(NSObject ***)__p;
        if (*(_QWORD *)&__p[8])
        {
          v114 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
          do
            v115 = __ldaxr(v114);
          while (__stlxr(v115 - 1, v114));
          if (!v115)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
        {
          v116 = pthread_self();
          v117 = pthread_mach_thread_np(v116);
          *(_DWORD *)__p = 67109890;
          *(_DWORD *)&__p[4] = v117;
          *(_WORD *)&__p[8] = 2080;
          *(_QWORD *)&__p[10] = "Graph.cpp";
          *(_WORD *)&__p[18] = 1024;
          *(_DWORD *)&__p[20] = 248;
          *(_WORD *)&__p[24] = 2080;
          *(_QWORD *)&__p[26] = "not (destination.m_wire_direction == Direction::input)";
          _os_log_error_impl(&dword_1B57BA000, v113, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Wire should connect to input terminal on destination node.", __p, 0x22u);
        }
        exception = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Wire should connect to input terminal on destination node.", (uint64_t)__s1);
        std::logic_error::logic_error((std::logic_error *)&v177, (const std::string *)__s1);
        v177.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
        std::logic_error::logic_error((std::logic_error *)buf, (const std::logic_error *)&v177);
        memset(&buf[24], 0, 24);
        *(_DWORD *)&buf[48] = -1;
        *(_QWORD *)buf = off_1E69A1208;
        *(_QWORD *)&buf[16] = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)buf);
        *(_QWORD *)&__p[32] = "void AMCP::Graph::Graph::connect_nodes(const std::shared_ptr<Node> &, const std::shared_pt"
                              "r<Node> &, Thread_Group_ID, Graph::Resource_Counts &)";
        *(_QWORD *)&__p[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
        *(_DWORD *)&__p[48] = 248;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v168);
        *(_OWORD *)&v203[8] = *(_OWORD *)&v168.mSampleRate;
        *(_QWORD *)v203 = off_1E69A20A0;
        *(_QWORD *)&v203[24] = *(_QWORD *)&v168.mBytesPerPacket;
        memset(&v168, 0, 24);
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)v203);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)__p);
      }
      if (*(_DWORD *)(*v5 + 48) != 1 && *(_BYTE *)(v18 + 408))
      {
        AMCP::Graph::Graph_Wire::Connection::Connection((std::string *)__p, (const AMCP::Graph::Graph_Wire::Connection *)(v18 + 192));
        *(_OWORD *)__s1 = v193;
        *(_QWORD *)&__s1[16] = v194;
        v193 = 0uLL;
        *(_QWORD *)&v194 = 0;
        if (*(_QWORD *)&v202[3])
        {
          *(_QWORD *)&v202[5] = *(_QWORD *)&v202[3];
          operator delete(*(void **)&v202[3]);
        }
        v22 = v200;
        if (v200)
        {
          p_shared_owners = (unint64_t *)&v200->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (*((_QWORD *)&v194 + 1))
        {
          *(_QWORD *)&v195 = *((_QWORD *)&v194 + 1);
          operator delete(*((void **)&v194 + 1));
        }
        if (SBYTE7(v194) < 0)
          operator delete((void *)v193);
        if (SBYTE7(v191) < 0)
          operator delete(*(void **)&__p[40]);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v16 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v135, (unsigned __int8 *)&v169);
        if (!v16)
          goto LABEL_265;
        v25 = *((_QWORD *)v16 + 5);
        if (*(_DWORD *)(v25 + 48) == 1)
        {
          v26 = __s1[23];
        }
        else
        {
          v42 = *(_DWORD *)(v25 + 16);
          v43 = __s1[23];
          v26 = __s1[23];
          if (v42 == 1)
          {
            if (__s1[23] >= 0)
              v44 = __s1[23];
            else
              v44 = *(_QWORD *)&__s1[8];
            v45 = *((unsigned __int8 *)a4 + 23);
            v46 = (char)v45;
            if ((v45 & 0x80u) != 0)
              v45 = *((_QWORD *)a4 + 1);
            if (v44 != v45)
              goto LABEL_265;
            if (v46 >= 0)
              v47 = a4;
            else
              v47 = *(const std::string::value_type **)a4;
            if ((__s1[23] & 0x80000000) == 0)
            {
              if (__s1[23])
              {
                v48 = __s1;
                while (*v48 == *(unsigned __int8 *)v47)
                {
                  ++v48;
                  ++v47;
                  if (!--v43)
                    goto LABEL_81;
                }
LABEL_265:
                AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v16);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
                v97 = *(std::__shared_weak_count **)&__p[8];
                v98 = **(NSObject ***)__p;
                if (*(_QWORD *)&__p[8])
                {
                  v99 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
                  do
                    v100 = __ldaxr(v99);
                  while (__stlxr(v100 - 1, v99));
                  if (!v100)
                  {
                    ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                    std::__shared_weak_count::__release_weak(v97);
                  }
                }
                v101 = (uint64_t *)a4;
                if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
                {
                  v102 = pthread_self();
                  v103 = pthread_mach_thread_np(v102);
                  v104 = __s1;
                  if (__s1[23] < 0)
                    v104 = *(_BYTE **)__s1;
                  v105 = a4;
                  if (a4[23] < 0)
                    v105 = *(const std::string::value_type **)a4;
                  *(_DWORD *)__p = 67110402;
                  *(_DWORD *)&__p[4] = v103;
                  *(_WORD *)&__p[8] = 2080;
                  *(_QWORD *)&__p[10] = "Graph.cpp";
                  *(_WORD *)&__p[18] = 1024;
                  *(_DWORD *)&__p[20] = 255;
                  *(_WORD *)&__p[24] = 2080;
                  *(_QWORD *)&__p[26] = "not (node != m_nodes_by_uid.end() && (node->second->node_has_fixed_thread_group("
                                        ") || old_group == group))";
                  *(_WORD *)&__p[34] = 2080;
                  *(_QWORD *)&__p[36] = v104;
                  *(_WORD *)&__p[44] = 2080;
                  *(_QWORD *)&__p[46] = v105;
                  _os_log_error_impl(&dword_1B57BA000, v98, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Groups do not match: %s, %s", __p, 0x36u);
                }
                v106 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
                v107 = __s1;
                if (__s1[23] < 0)
                  v107 = *(_BYTE **)__s1;
                if (a4[23] < 0)
                  v101 = *(uint64_t **)a4;
                caulk::make_string((caulk *)"Groups do not match: %s, %s", (uint64_t)&v168, v107, v101);
                std::logic_error::logic_error((std::logic_error *)&v180, (const std::string *)&v168);
                v108 = MEMORY[0x1E0DE5018];
                v180.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
                std::logic_error::logic_error((std::logic_error *)buf, (const std::logic_error *)&v180);
                memset(&buf[24], 0, 24);
                *(_DWORD *)&buf[48] = -1;
                *(_QWORD *)buf = off_1E69A1208;
                *(_QWORD *)&buf[16] = &unk_1E69A1230;
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)buf);
                *(_QWORD *)&__p[32] = "void AMCP::Graph::Graph::connect_nodes(const std::shared_ptr<Node> &, const std::s"
                                      "hared_ptr<Node> &, Thread_Group_ID, Graph::Resource_Counts &)";
                *(_QWORD *)&__p[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
                *(_DWORD *)&__p[48] = 255;
                std::vector<void *>::vector(&v177);
                v109 = backtrace((void **)v177.__r_.__value_.__l.__data_, (v177.__r_.__value_.__l.__size_ - v177.__r_.__value_.__r.__words[0]) >> 3);
                std::vector<void *>::resize(&v177.__r_.__value_.__l.__data_, v109);
                *(std::string *)&v203[8] = v177;
                *(_QWORD *)v203 = off_1E69A20A0;
                memset(&v177, 0, sizeof(v177));
                boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)v203);
                v106[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
                std::logic_error::logic_error(v106, (const std::logic_error *)__p);
                v106->__vftable = (std::logic_error_vtbl *)(v108 + 16);
                v106[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
                v110 = *(_QWORD *)&__p[24];
                v106[1].__imp_.__imp_ = *(const char **)&__p[24];
                if (v110)
                  (*(void (**)(uint64_t))(*(_QWORD *)v110 + 24))(v110);
                v111 = *(std::logic_error *)&__p[32];
                LODWORD(v106[3].__vftable) = *(_DWORD *)&__p[48];
                v106[2] = v111;
                v106->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
                v106[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
                v106[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
              }
              goto LABEL_224;
            }
            v49 = *(void **)__s1;
            v16 = (unsigned __int8 *)memcmp(*(const void **)__s1, v47, *(size_t *)&__s1[8]);
            if ((_DWORD)v16)
              goto LABEL_265;
LABEL_222:
            v81 = v49;
LABEL_223:
            operator delete(v81);
            goto LABEL_224;
          }
        }
LABEL_81:
        if (v26 < 0)
        {
          v49 = *(void **)__s1;
          goto LABEL_222;
        }
        goto LABEL_224;
      }
      v27 = *v14;
      if (*(char *)(*v14 + 47) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v27 + 24), *(_QWORD *)(v27 + 32));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(v27 + 24);
        *(_QWORD *)&__p[16] = *(_QWORD *)(v27 + 40);
      }
      if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v169.__r_.__value_.__r.__words[2]);
      else
        size = v169.__r_.__value_.__l.__size_;
      v29 = __p[23];
      v30 = __p[23];
      if (__p[23] < 0)
        v29 = *(_QWORD *)&__p[8];
      if (size != v29)
        break;
      if (__p[23] >= 0)
        v31 = __p;
      else
        v31 = *(unsigned __int8 **)__p;
      if ((*((_BYTE *)&v169.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v16 = (unsigned __int8 *)memcmp(v169.__r_.__value_.__l.__data_, v31, v169.__r_.__value_.__l.__size_);
        v40 = (_DWORD)v16 == 0;
        if (v30 < 0)
          goto LABEL_65;
      }
      else if (*((_BYTE *)&v169.__r_.__value_.__s + 23))
      {
        v32 = HIBYTE(v169.__r_.__value_.__r.__words[2]) - 1;
        v33 = &v169;
        do
        {
          v35 = v33->__r_.__value_.__s.__data_[0];
          v33 = (std::string *)((char *)v33 + 1);
          v34 = v35;
          v37 = *v31++;
          v36 = v37;
          v39 = v32-- != 0;
          v40 = v34 == v36;
        }
        while (v34 == v36 && v39);
        if ((__p[23] & 0x80000000) != 0)
          goto LABEL_65;
      }
      else
      {
        v40 = 1;
        if ((__p[23] & 0x80000000) != 0)
          goto LABEL_65;
      }
LABEL_61:
      v5 = v143;
      if (v40)
      {
        AMCP::Graph::Node::get_nth_terminal(*v14, v170, 1u);
        v41 = *(_DWORD *)(*v143 + 16) == 2;
        if (a4[23] < 0)
          std::string::__init_copy_ctor_external(&v167, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
        else
          v167 = *(std::string *)a4;
        v141 = *(_DWORD *)(nth_terminal + 100);
        if (*(char *)(v18 + 23) < 0)
          std::string::__init_copy_ctor_external(&v162, *(const std::string::value_type **)v18, *(_QWORD *)(v18 + 8));
        else
          v162 = *(std::string *)v18;
        v50 = (_QWORD *)(v18 + 24);
        v163 = *(_QWORD *)(v18 + 24);
        v164 = *(_DWORD *)(v18 + 32);
        if (*(char *)(v18 + 63) < 0)
          std::string::__init_copy_ctor_external(&v159, *(const std::string::value_type **)(v18 + 40), *(_QWORD *)(v18 + 48));
        else
          v159 = *v19;
        v140 = v41;
        v160 = *v21;
        v161 = *(_DWORD *)(v18 + 72);
        *(std::string *)buf = v162;
        memset(&v162, 0, sizeof(v162));
        *(_QWORD *)&buf[24] = v163;
        *(_DWORD *)&buf[32] = v164;
        *(std::string *)&buf[40] = v159;
        memset(&v159, 0, sizeof(v159));
        v51 = *v21;
        v189 = *(_DWORD *)(v18 + 72);
        v188 = v51;
        v52 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(v136, (unsigned __int8 **)buf);
        if (v52)
        {
          v54 = v52[12];
          v53 = (std::__shared_weak_count *)v52[13];
          v165 = v54;
          v166 = v53;
          if (v53)
          {
            v55 = (unint64_t *)&v53->__shared_owners_;
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
        }
        else
        {
          v53 = 0;
          v54 = 0;
          v166 = 0;
          v165 = 0;
        }
        if (*(char *)(v18 + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v203, *(const std::string::value_type **)(v18 + 40), *(_QWORD *)(v18 + 48));
        }
        else
        {
          *(_OWORD *)v203 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          *(_QWORD *)&v203[16] = *((_QWORD *)&v19->__r_.__value_.__l + 2);
        }
        *(_QWORD *)&v203[24] = *v21;
        *(_DWORD *)&v203[32] = *(_DWORD *)(v18 + 72);
        terminal = get_terminal((AMCP::Log::Scope_Registry *)v14, v203);
        if ((v203[23] & 0x80000000) != 0)
          operator delete(*(void **)v203);
        v58 = *(_OWORD *)(terminal + 16);
        *(_OWORD *)&v168.mSampleRate = *(_OWORD *)terminal;
        *(_OWORD *)&v168.mBytesPerPacket = v58;
        *(_QWORD *)&v168.mBitsPerChannel = *(_QWORD *)(terminal + 32);
        memset(__p, 0, 36);
        *(_OWORD *)&__p[40] = 0u;
        v191 = 0u;
        v192 = 0;
        v193 = 0u;
        v194 = 0u;
        v195 = 0u;
        v196 = 0u;
        v197 = 0;
        v198 = 64;
        v199 = 0;
        v200 = 0;
        v201 = 1;
        memset(v202, 0, 36);
        if (*(char *)(v18 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v203, *(const std::string::value_type **)v18, *(_QWORD *)(v18 + 8));
          *(_QWORD *)&v203[24] = *v50;
          *(_DWORD *)&v203[32] = *(_DWORD *)(v18 + 32);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        else
        {
          *(_OWORD *)v203 = *(_OWORD *)v18;
          *(_QWORD *)&v203[16] = *(_QWORD *)(v18 + 16);
          *(_QWORD *)&v203[24] = *v50;
          *(_DWORD *)&v203[32] = *(_DWORD *)(v18 + 32);
        }
        *(_OWORD *)__p = *(_OWORD *)v203;
        *(_QWORD *)&__p[16] = *(_QWORD *)&v203[16];
        *(_QWORD *)&__p[24] = *(_QWORD *)&v203[24];
        *(_DWORD *)&__p[32] = *(_DWORD *)&v203[32];
        if (*(char *)(v18 + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v203, *(const std::string::value_type **)(v18 + 40), *(_QWORD *)(v18 + 48));
        }
        else
        {
          *(_OWORD *)v203 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          *(_QWORD *)&v203[16] = *((_QWORD *)&v19->__r_.__value_.__l + 2);
        }
        *(_QWORD *)&v203[24] = *v21;
        *(_DWORD *)&v203[32] = *(_DWORD *)(v18 + 72);
        if (SBYTE7(v191) < 0)
          operator delete(*(void **)&__p[40]);
        *(_OWORD *)&__p[40] = *(_OWORD *)v203;
        v191 = *(_OWORD *)&v203[16];
        v192 = *(_DWORD *)&v203[32];
        if (SBYTE7(v194) < 0)
          operator delete((void *)v193);
        v193 = *(_OWORD *)&v167.__r_.__value_.__l.__data_;
        *(_QWORD *)&v194 = *((_QWORD *)&v167.__r_.__value_.__l + 2);
        *((_BYTE *)&v167.__r_.__value_.__s + 23) = 0;
        v167.__r_.__value_.__s.__data_[0] = 0;
        if ((__int128 *)((char *)&v194 + 8) != (__int128 *)(v18 + 80))
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v194 + 8, *(char **)(v18 + 80), *(_QWORD *)(v18 + 88), (uint64_t)(*(_QWORD *)(v18 + 88) - *(_QWORD *)(v18 + 80)) >> 2);
        if (&v202[3] != (_DWORD *)(v18 + 104))
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v202[3], *(char **)(v18 + 104), *(_QWORD *)(v18 + 112), (uint64_t)(*(_QWORD *)(v18 + 112) - *(_QWORD *)(v18 + 104)) >> 2);
        v14 = a3;
        v59 = *a3;
        HIDWORD(v198) = *(_DWORD *)(*a3 + 48);
        v201 = *(_DWORD *)(terminal + 88);
        v202[1] = *(_DWORD *)(terminal + 92);
        v202[2] = *(_DWORD *)(v59 + 160);
        v60 = (AMCP::Log::Scope_Registry *)std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v199, v54, (uint64_t)v53);
        v202[0] = v140;
        if (v141 != 1 && *(_DWORD *)(terminal + 100) != 1)
        {
          AMCP::Log::Scope_Registry::get(v60);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v203, "com.apple.coreaudio", "AMCP");
          v119 = *(std::__shared_weak_count **)&v203[8];
          v120 = **(NSObject ***)v203;
          if (*(_QWORD *)&v203[8])
          {
            v121 = (unint64_t *)(*(_QWORD *)&v203[8] + 8);
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
              std::__shared_weak_count::__release_weak(v119);
            }
          }
          if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
          {
            v123 = pthread_self();
            v124 = pthread_mach_thread_np(v123);
            v125 = *v21;
            v126 = *a3;
            if (*(char *)(*a3 + 47) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__s1, *(const std::string::value_type **)(v126 + 24), *(_QWORD *)(v126 + 32));
            }
            else
            {
              *(_OWORD *)__s1 = *(_OWORD *)(v126 + 24);
              *(_QWORD *)&__s1[16] = *(_QWORD *)(v126 + 40);
            }
            v127 = __s1;
            if (__s1[23] < 0)
              v127 = *(_BYTE **)__s1;
            *(_DWORD *)v203 = 67110402;
            *(_DWORD *)&v203[4] = v124;
            *(_WORD *)&v203[8] = 2080;
            *(_QWORD *)&v203[10] = "Graph_Wire.cpp";
            *(_WORD *)&v203[18] = 1024;
            *(_DWORD *)&v203[20] = 90;
            *(_WORD *)&v203[24] = 2080;
            *(_QWORD *)&v203[26] = "not (connection_works)";
            *(_WORD *)&v203[34] = 2048;
            *(_QWORD *)&v203[36] = v125;
            *(_WORD *)&v203[44] = 2080;
            *(_QWORD *)&v203[46] = v127;
            _os_log_error_impl(&dword_1B57BA000, v120, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to connect two terminals with owned buffers: terminal %zu of node '%s'", v203, 0x36u);
            if ((__s1[23] & 0x80000000) != 0)
              operator delete(*(void **)__s1);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v186);
          v128 = __cxa_allocate_exception(0x40uLL);
          v129 = *v21;
          v130 = (std::string *)*a3;
          if (*(char *)(*a3 + 47) < 0)
            std::string::__init_copy_ctor_external(&v179, v130[1].__r_.__value_.__l.__data_, v130[1].__r_.__value_.__l.__size_);
          else
            v179 = v130[1];
          v131 = &v179;
          if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v131 = (std::string *)v179.__r_.__value_.__r.__words[0];
          caulk::make_string((caulk *)"Attempt to connect two terminals with owned buffers: terminal %zu of node '%s'", (uint64_t)&v180, v129, v131);
          std::logic_error::logic_error(&v181, &v180);
          v181.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)__s1, &v181);
          v183 = 0;
          *(_QWORD *)&__s1[24] = 0;
          v184 = 0;
          v185 = -1;
          *(_QWORD *)__s1 = off_1E69A1208;
          *(_QWORD *)&__s1[16] = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v203, (uint64_t)__s1);
          *(_QWORD *)&v203[32] = "Graph_Wire::Connection AMCP::Graph::Graph_Wire::create_connection(const std::shared_ptr"
                                 "<Node> &, Thread_Group_ID, CA::StreamDescription &, Terminal_Buffer_Ownership, Connecti"
                                 "on::Terminal_Read_Policy, const std::shared_ptr<Wire_Volume_Connection> &) const";
          *(_QWORD *)&v203[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Wire.cpp";
          *(_DWORD *)&v203[48] = 90;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v175);
          *(_OWORD *)&v177.__r_.__value_.__r.__words[1] = v175;
          v177.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
          v178 = v176;
          v175 = 0uLL;
          v176 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v203, (uint64_t)&v177);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v128, (uint64_t)v203);
        }
        if (v53)
        {
          v61 = (unint64_t *)&v53->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        if ((buf[63] & 0x80000000) != 0)
          operator delete(*(void **)&buf[40]);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v159.__r_.__value_.__l.__data_);
        if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v162.__r_.__value_.__l.__data_);
        if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v167.__r_.__value_.__l.__data_);
        v63 = *(_OWORD *)(nth_terminal + 16);
        *(_OWORD *)__s1 = *(_OWORD *)nth_terminal;
        *(_OWORD *)&__s1[16] = v63;
        v183 = *(_QWORD *)(nth_terminal + 32);
        v196 = 0uLL;
        v64 = *(double *)__s1;
        mSampleRate = v168.mSampleRate;
        if (*(double *)__s1 != v168.mSampleRate
          || *(_DWORD *)&__s1[8] != v168.mFormatID
          || *(_QWORD *)&__s1[16] != *(_QWORD *)&v168.mBytesPerPacket
          || *(_DWORD *)&__s1[28] != v168.mChannelsPerFrame
          || (_DWORD)v183 != v168.mBitsPerChannel
          || (v60 = (AMCP::Log::Scope_Registry *)CA::Implementation::EquivalentFormatFlags((CA::Implementation *)__s1, &v168, 0, 0), v66 = 0, (v60 & 1) == 0))
        {
          *(_OWORD *)buf = *(_OWORD *)__s1;
          *(_OWORD *)&buf[16] = *(_OWORD *)&__s1[16];
          *(_QWORD *)&buf[32] = v183;
          *(AudioStreamBasicDescription *)v203 = v168;
          if (*(double *)__s1 == v168.mSampleRate
            && *(_DWORD *)&__s1[8] == v168.mFormatID
            && *(_QWORD *)&buf[16] == *(_QWORD *)&v203[16]
            && *(_QWORD *)&buf[28] == *(_QWORD *)&v203[28])
          {
            v60 = (AMCP::Log::Scope_Registry *)CA::Implementation::EquivalentFormatFlags((CA::Implementation *)buf, (const AudioStreamBasicDescription *)v203, 0, 0);
            *(_QWORD *)buf = 0;
            *(_QWORD *)v203 = 0;
            if ((v60 & 1) != 0)
              goto LABEL_151;
          }
          else
          {
            *(_QWORD *)buf = 0;
            *(_QWORD *)v203 = 0;
            if (*(_DWORD *)&__s1[8] != v168.mFormatID)
              goto LABEL_151;
          }
          if (*(_QWORD *)&buf[16] == *(_QWORD *)&v203[16] && *(_QWORD *)&buf[28] == *(_QWORD *)&v203[28])
          {
            v60 = (AMCP::Log::Scope_Registry *)CA::Implementation::EquivalentFormatFlags((CA::Implementation *)buf, (const AudioStreamBasicDescription *)v203, 0, 0);
            v66 = v60 ^ 1;
          }
          else
          {
LABEL_151:
            v66 = 1;
          }
        }
        v67 = *(_DWORD **)(v18 + 80);
        v68 = *(_DWORD **)(v18 + 88);
        v69 = *(char **)(v18 + 104);
        v70 = *(_QWORD *)(v18 + 112);
        if (v64 != mSampleRate)
        {
          if (*(_DWORD *)(v18 + 132) == 1)
            goto LABEL_232;
          LODWORD(v196) = 1;
        }
        if (v66)
        {
          if (!*(_DWORD *)(v18 + 136))
            goto LABEL_232;
          DWORD2(v196) = 1;
        }
        if (*(_DWORD *)&__s1[28] != v168.mChannelsPerFrame || v67 != v68)
        {
          if (v168.mChannelsPerFrame < (unint64_t)(v68 - v67))
          {
LABEL_232:
            AMCP::Log::Scope_Registry::get(v60);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v82 = *(std::__shared_weak_count **)&buf[8];
            v83 = **(NSObject ***)buf;
            if (*(_QWORD *)&buf[8])
            {
              v84 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v85 = __ldaxr(v84);
              while (__stlxr(v85 - 1, v84));
              if (!v85)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
            }
            if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
            {
              v86 = pthread_self();
              v87 = pthread_mach_thread_np(v86);
              v88 = *v143;
              if (*(char *)(*v143 + 47) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v203, *(const std::string::value_type **)(v88 + 24), *(_QWORD *)(v88 + 32));
              }
              else
              {
                *(_OWORD *)v203 = *(_OWORD *)(v88 + 24);
                *(_QWORD *)&v203[16] = *(_QWORD *)(v88 + 40);
              }
              if (v203[23] >= 0)
                v89 = v203;
              else
                v89 = *(_BYTE **)v203;
              v90 = *a3;
              if (*(char *)(*a3 + 47) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)__s1, *(const std::string::value_type **)(v90 + 24), *(_QWORD *)(v90 + 32));
              }
              else
              {
                *(_OWORD *)__s1 = *(_OWORD *)(v90 + 24);
                *(_QWORD *)&__s1[16] = *(_QWORD *)(v90 + 40);
              }
              v91 = __s1;
              if (__s1[23] < 0)
                v91 = *(_BYTE **)__s1;
              *(_DWORD *)buf = 67110402;
              *(_DWORD *)&buf[4] = v87;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = "Graph.cpp";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 268;
              *(_WORD *)&buf[24] = 2080;
              *(_QWORD *)&buf[26] = "not (did_connect)";
              *(_WORD *)&buf[34] = 2080;
              *(_QWORD *)&buf[36] = v89;
              *(_WORD *)&buf[44] = 2080;
              *(_QWORD *)&buf[46] = v91;
              _os_log_error_impl(&dword_1B57BA000, v83, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Connection failed: %s-->%s", buf, 0x36u);
              if ((__s1[23] & 0x80000000) != 0)
                operator delete(*(void **)__s1);
              if ((v203[23] & 0x80000000) != 0)
                operator delete(*(void **)v203);
            }
            v92 = __cxa_allocate_exception(0x40uLL);
            v93 = (std::string *)*v143;
            if (*(char *)(*v143 + 47) < 0)
              std::string::__init_copy_ctor_external(&v180, v93[1].__r_.__value_.__l.__data_, v93[1].__r_.__value_.__l.__size_);
            else
              v180 = v93[1];
            if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v94 = &v180;
            else
              v94 = (std::string *)v180.__r_.__value_.__r.__words[0];
            v95 = (std::string *)*a3;
            if (*(char *)(*a3 + 47) < 0)
              std::string::__init_copy_ctor_external(&v179, v95[1].__r_.__value_.__l.__data_, v95[1].__r_.__value_.__l.__size_);
            else
              v179 = v95[1];
            v96 = &v179;
            if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v96 = (std::string *)v179.__r_.__value_.__r.__words[0];
            caulk::make_string((caulk *)"Connection failed: %s-->%s", (uint64_t)&v177, v94, v96);
            std::logic_error::logic_error(&v181, &v177);
            v181.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
            std::logic_error::logic_error((std::logic_error *)v203, &v181);
            memset(&v203[24], 0, 24);
            *(_DWORD *)&v203[48] = -1;
            *(_QWORD *)v203 = off_1E69A1208;
            *(_QWORD *)&v203[16] = &unk_1E69A1230;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v203);
            *(_QWORD *)&buf[32] = "void AMCP::Graph::Graph::connect_nodes(const std::shared_ptr<Node> &, const std::share"
                                  "d_ptr<Node> &, Thread_Group_ID, Graph::Resource_Counts &)";
            *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
            *(_DWORD *)&buf[48] = 268;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v175);
            *(_OWORD *)&__s1[8] = v175;
            *(_QWORD *)__s1 = off_1E69A20A0;
            *(_QWORD *)&__s1[24] = v176;
            v175 = 0uLL;
            v176 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)__s1);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v92, (uint64_t)buf);
          }
          while (v67 != v68)
          {
            if (*v67 == -1)
              v72 = 3;
            else
              v72 = *v67 >= (signed int)v168.mChannelsPerFrame;
            if (v72 != 3 && v72 != 0)
              goto LABEL_232;
            ++v67;
          }
        }
        v5 = v143;
        if (v69 != (char *)v70 && &v202[3] != (_DWORD *)(v18 + 104))
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v202[3], v69, v70, (v70 - (uint64_t)v69) >> 2);
        v71 = (std::string *)(v18 + 192);
        if (*(_BYTE *)(v18 + 408))
        {
          AMCP::Graph::Graph_Wire::Connection::operator=((uint64_t)v71, (uint64_t)__p);
        }
        else
        {
          AMCP::Graph::Graph_Wire::Connection::Connection(v71, (const AMCP::Graph::Graph_Wire::Connection *)__p);
          *(_BYTE *)(v18 + 408) = 1;
        }
        AMCP::Graph::Graph_Wire::Connection::Connection(&v145, (const AMCP::Graph::Graph_Wire::Connection *)__p);
        if (v152)
          ++*a5;
        if (v154)
          ++a5[2];
        if (v150 != v151)
          ++a5[3];
        if (v153)
          ++a5[4];
        if (v155)
          ++a5[5];
        v74 = v157;
        if (v157 != v158)
          ++a5[6];
        if (v74)
        {
          v158 = v74;
          operator delete(v74);
        }
        v75 = v156;
        if (v156)
        {
          v76 = (unint64_t *)&v156->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        if (v150)
        {
          v151 = v150;
          operator delete(v150);
        }
        if (v149 < 0)
          operator delete(v148);
        if (v147 < 0)
          operator delete(v146);
        if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v145.__r_.__value_.__l.__data_);
        if (*(_QWORD *)&v202[3])
        {
          *(_QWORD *)&v202[5] = *(_QWORD *)&v202[3];
          operator delete(*(void **)&v202[3]);
        }
        v78 = v200;
        if (v200)
        {
          v79 = (unint64_t *)&v200->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        v16 = (unsigned __int8 *)*((_QWORD *)&v194 + 1);
        if (*((_QWORD *)&v194 + 1))
        {
          *(_QWORD *)&v195 = *((_QWORD *)&v194 + 1);
          operator delete(*((void **)&v194 + 1));
        }
        if (SBYTE7(v194) < 0)
          operator delete((void *)v193);
        if (SBYTE7(v191) < 0)
          operator delete(*(void **)&__p[40]);
        if ((__p[23] & 0x80000000) == 0)
          goto LABEL_224;
        v81 = *(void **)__p;
        goto LABEL_223;
      }
LABEL_224:
      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v169.__r_.__value_.__l.__data_);
      v17 += 8;
      if (v17 == v144)
      {
        v17 = (char *)v173;
        goto LABEL_228;
      }
    }
    v40 = 0;
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_61;
LABEL_65:
    operator delete(*(void **)__p);
    goto LABEL_61;
  }
}

void sub_1B5AD1408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  char a70;
  void *a72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  void *v77;

  v73 = (void *)STACK[0x4C0];
  if (STACK[0x4C0])
  {
    STACK[0x4C8] = (unint64_t)v73;
    operator delete(v73);
  }
  v74 = (std::__shared_weak_count *)STACK[0x4A8];
  if (STACK[0x4A8])
  {
    p_shared_owners = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(p_shared_owners);
    while (__stlxr(v76 - 1, p_shared_owners));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = (void *)STACK[0x468];
  if (STACK[0x468])
  {
    STACK[0x470] = (unint64_t)v77;
    operator delete(v77);
  }
  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete((void *)STACK[0x450]);
  if (SLOBYTE(STACK[0x43F]) < 0)
    operator delete((void *)STACK[0x428]);
  if (SLOBYTE(STACK[0x417]) < 0)
    operator delete((void *)STACK[0x400]);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x220]);
  AMCP::Wire_Identifier::~Wire_Identifier((void **)&STACK[0x3B0]);
  if (a70 < 0)
    operator delete(a65);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a72);
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  if (STACK[0x2C8])
    operator delete((void *)STACK[0x2C8]);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69858D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69858D0;
  a2[1] = v2;
  return result;
}

AMCP::Log::Scope_Registry *std::__function::__func<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::operator()(AMCP::Log::Scope_Registry *result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **v4;
  size_t v5;
  size_t v6;
  size_t v7;
  unsigned __int8 *v8;
  int v9;
  const void **v10;
  unsigned __int8 *v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  std::logic_error *exception;
  uint64_t v19;
  int v20;
  uint64_t v21;
  std::logic_error v22;
  __int128 v23;
  uint64_t v24;
  uint64_t (**v25)();
  __int128 v26;
  uint64_t v27;
  std::logic_error v28;
  std::logic_error v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  uint8_t buf[8];
  _BYTE v37[10];
  __int16 v38;
  int v39;
  _BYTE v40[24];
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 **)*((_QWORD *)result + 1);
  v5 = *(unsigned __int8 *)(a3 + 103);
  v6 = *(_QWORD *)(a3 + 88);
  if ((v5 & 0x80u) == 0)
    v7 = v5;
  else
    v7 = v6;
  v8 = (unsigned __int8 *)*((unsigned __int8 *)v4 + 23);
  v9 = (char)v8;
  if ((char)v8 < 0)
    v8 = v4[1];
  if ((unsigned __int8 *)v7 != v8)
    goto LABEL_17;
  v10 = (const void **)(a3 + 80);
  if (v9 >= 0)
    v11 = (unsigned __int8 *)*((_QWORD *)result + 1);
  else
    v11 = *v4;
  if ((v5 & 0x80) != 0)
  {
    result = (AMCP::Log::Scope_Registry *)memcmp(*v10, v11, v6);
    if ((_DWORD)result)
      goto LABEL_17;
  }
  else if ((_DWORD)v5)
  {
    while (*(unsigned __int8 *)v10 == *v11)
    {
      v10 = (const void **)((char *)v10 + 1);
      ++v11;
      if (!--v5)
        return result;
    }
LABEL_17:
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = *(std::__shared_weak_count **)v37;
    v13 = **(NSObject ***)buf;
    if (*(_QWORD *)v37)
    {
      v14 = (unint64_t *)(*(_QWORD *)v37 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)v37 = 2080;
      *(_QWORD *)&v37[2] = "Graph.cpp";
      v38 = 1024;
      v39 = 236;
      *(_WORD *)v40 = 2080;
      *(_QWORD *)&v40[2] = "connection.m_thread_group != group";
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
    exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    std::logic_error::logic_error(&v28, "");
    v19 = MEMORY[0x1E0DE5018];
    v28.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v29, &v28);
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = -1;
    v29.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v30 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v29);
    *(_QWORD *)&v40[8] = "auto AMCP::Graph::Graph::connect_nodes(const std::shared_ptr<Node> &, const std::shared_ptr<Nod"
                         "e> &, Thread_Group_ID, Graph::Resource_Counts &)::(anonymous class)::operator()(Direction, cons"
                         "t Graph_Wire::Connection &) const";
    *(_QWORD *)&v40[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
    v41 = 236;
    std::vector<void *>::vector(&v23);
    v20 = backtrace((void **)v23, (*((_QWORD *)&v23 + 1) - (_QWORD)v23) >> 3);
    std::vector<void *>::resize((char **)&v23, v20);
    v25 = off_1E69A20A0;
    v26 = v23;
    v27 = v24;
    v23 = 0uLL;
    v24 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v25);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(exception, (const std::logic_error *)buf);
    exception->__vftable = (std::logic_error_vtbl *)(v19 + 16);
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v21 = *(_QWORD *)v40;
    exception[1].__imp_.__imp_ = *(const char **)v40;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    v22 = *(std::logic_error *)&v40[8];
    LODWORD(exception[3].__vftable) = v41;
    exception[2] = v22;
    exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph5Graph13connect_nodesERKNSt3__110shared_ptrINS0_4NodeEEES7_NS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERNS1_15Resource_CountsEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::target_type()
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<AMCP::Wire_Identifier>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<AMCP::Wire_Identifier>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<AMCP::Wire_Identifier>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<AMCP::Wire_Identifier>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

std::string *std::vector<AMCP::Wire_Identifier>::__insert_with_size[abi:ne180100]<std::__wrap_iter<AMCP::Wire_Identifier*>,std::__wrap_iter<AMCP::Wire_Identifier*>>(std::string *result, uint64_t a2, std::string *a3, uint64_t a4, uint64_t a5)
{
  std::string *v6;
  std::string::__raw *v7;
  std::string::size_type v8;
  uint64_t v9;
  uint64_t v10;
  std::string::value_type *v11;
  std::string::size_type v12;
  unint64_t size;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::string *v18;
  std::string::size_type v19;
  uint64_t v20;
  unint64_t v21;
  std::string::size_type v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  std::string::size_type v30;
  std::string::size_type v31;
  void **v32;
  __int128 *v33;
  __int128 v34;
  void **v35;
  uint64_t v36;
  __int128 v37;
  std::string::size_type v38;
  uint64_t v39;
  std::string *v40;
  char *v41;
  uint64_t v42;
  std::string *v43;
  std::string::size_type v44;
  uint64_t v45;
  std::string *v46;
  __int128 v47;
  std::string::size_type v48;
  __int128 v49;
  std::string::size_type v50;
  std::string::size_type v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  std::string *v56;
  unint64_t v57;
  unint64_t v58;
  std::string *v59;
  uint64_t v60;
  unint64_t v61;
  std::string::value_type *v62;

  if (a5 >= 1)
  {
    v6 = a3;
    v7 = (std::string::__raw *)result;
    v8 = result->__r_.__value_.__r.__words[0];
    v9 = (int64_t)(a2 - result->__r_.__value_.__r.__words[0]) / 80;
    v10 = result->__r_.__value_.__r.__words[0] + 80 * v9;
    v11 = &result->__r_.__value_.__s.__data_[16];
    v12 = result->__r_.__value_.__r.__words[2];
    size = result->__r_.__value_.__l.__size_;
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - size) >> 4)) >= a5)
    {
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(size - v10) >> 4)) >= a5)
      {
        v18 = (std::string *)((char *)a3 + 80 * a5);
        v19 = result->__r_.__value_.__l.__size_;
      }
      else
      {
        v18 = (std::string *)((char *)a3 + 16 * ((uint64_t)(size - v10) >> 4));
        result = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>,AMCP::Wire_Identifier*,AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>((uint64_t)v18, a4, size);
        v19 = (std::string::size_type)result;
        v7->__words[1] = (std::string::size_type)result;
        if ((uint64_t)(size - v10) < 1)
          return result;
      }
      v20 = v10 + 80 * a5;
      v21 = v19 - 80 * a5;
      v22 = v19;
      if (v21 < size)
      {
        v22 = v19;
        do
        {
          v23 = *(_OWORD *)v21;
          *(_QWORD *)(v22 + 16) = *(_QWORD *)(v21 + 16);
          *(_OWORD *)v22 = v23;
          *(_QWORD *)(v21 + 8) = 0;
          *(_QWORD *)(v21 + 16) = 0;
          *(_QWORD *)v21 = 0;
          v24 = *(_QWORD *)(v21 + 24);
          *(_DWORD *)(v22 + 32) = *(_DWORD *)(v21 + 32);
          *(_QWORD *)(v22 + 24) = v24;
          v25 = *(_OWORD *)(v21 + 40);
          *(_QWORD *)(v22 + 56) = *(_QWORD *)(v21 + 56);
          *(_OWORD *)(v22 + 40) = v25;
          *(_QWORD *)(v21 + 48) = 0;
          *(_QWORD *)(v21 + 56) = 0;
          *(_QWORD *)(v21 + 40) = 0;
          v26 = *(_QWORD *)(v21 + 64);
          *(_DWORD *)(v22 + 72) = *(_DWORD *)(v21 + 72);
          *(_QWORD *)(v22 + 64) = v26;
          v22 += 80;
          v21 += 80;
        }
        while (v21 < size);
      }
      v7->__words[1] = v22;
      if (v19 != v20)
      {
        v27 = 0;
        v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v20) >> 4);
        v29 = -80 * v28;
        v30 = v8 + 80 * v28 + 80 * v9;
        do
        {
          v31 = v19 + v27;
          v32 = (void **)(v19 + v27 - 80);
          if (*(char *)(v19 + v27 - 57) < 0)
            operator delete(*v32);
          v33 = (__int128 *)(v30 + v27 - 80);
          v34 = *v33;
          *(_QWORD *)(v19 + v27 - 64) = *(_QWORD *)(v30 + v27 - 64);
          *(_OWORD *)v32 = v34;
          *(_BYTE *)(v30 + v27 - 57) = 0;
          *(_BYTE *)v33 = 0;
          LODWORD(v33) = *(_DWORD *)(v30 + v27 - 48);
          *(_QWORD *)(v31 - 56) = *(_QWORD *)(v30 + v27 - 56);
          *(_DWORD *)(v31 - 48) = (_DWORD)v33;
          v35 = (void **)(v31 - 40);
          if (*(char *)(v31 - 17) < 0)
            operator delete(*v35);
          v36 = v30 + v27;
          v37 = *(_OWORD *)(v30 + v27 - 40);
          *(_QWORD *)(v31 - 24) = *(_QWORD *)(v30 + v27 - 24);
          *(_OWORD *)v35 = v37;
          *(_BYTE *)(v36 - 17) = 0;
          *(_BYTE *)(v36 - 40) = 0;
          v38 = v19 + v27;
          v39 = *(_QWORD *)(v30 + v27 - 16);
          *(_DWORD *)(v38 - 8) = *(_DWORD *)(v30 + v27 - 8);
          *(_QWORD *)(v38 - 16) = v39;
          v27 -= 80;
        }
        while (v29 != v27);
      }
      return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Wire_Identifier *,AMCP::Wire_Identifier *,AMCP::Wire_Identifier *>(v6, v18, (std::string *)v10);
    }
    else
    {
      v14 = a5 - 0x3333333333333333 * ((uint64_t)(size - v8) >> 4);
      if (v14 > 0x333333333333333)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v8) >> 4);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x199999999999999)
        v16 = 0x333333333333333;
      else
        v16 = v14;
      v62 = v11;
      if (v16)
        v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>>(v16);
      else
        v17 = 0;
      v40 = (std::string *)(v16 + 80 * v9);
      v58 = v16;
      v59 = v40;
      v60 = (uint64_t)v40;
      v61 = v16 + 80 * v17;
      v41 = (char *)v40 + 80 * a5;
      v42 = 80 * a5;
      do
      {
        std::construct_at[abi:ne180100]<AMCP::Wire_Identifier,AMCP::Wire_Identifier&,AMCP::Wire_Identifier*>(v40, (__int128 *)v6);
        v40 = (std::string *)((char *)v40 + 80);
        v6 = (std::string *)((char *)v6 + 80);
        v42 -= 80;
      }
      while (v42);
      v43 = v59;
      v44 = v7->__words[0];
      if (v7->__words[0] == v10)
      {
        v46 = v59;
      }
      else
      {
        v45 = v10;
        do
        {
          v46 = (std::string *)((char *)v43 - 80);
          v47 = *(_OWORD *)(v45 - 80);
          v43[-3].__r_.__value_.__l.__size_ = *(_QWORD *)(v45 - 64);
          *(_OWORD *)&v43[-4].__r_.__value_.__r.__words[2] = v47;
          *(_QWORD *)(v45 - 72) = 0;
          *(_QWORD *)(v45 - 64) = 0;
          *(_QWORD *)(v45 - 80) = 0;
          v48 = *(_QWORD *)(v45 - 56);
          LODWORD(v43[-2].__r_.__value_.__l.__data_) = *(_DWORD *)(v45 - 48);
          v43[-3].__r_.__value_.__r.__words[2] = v48;
          v49 = *(_OWORD *)(v45 - 40);
          v43[-1].__r_.__value_.__r.__words[0] = *(_QWORD *)(v45 - 24);
          *(_OWORD *)&v43[-2].__r_.__value_.__r.__words[1] = v49;
          *(_QWORD *)(v45 - 32) = 0;
          *(_QWORD *)(v45 - 24) = 0;
          *(_QWORD *)(v45 - 40) = 0;
          v50 = *(_QWORD *)(v45 - 16);
          LODWORD(v43[-1].__r_.__value_.__r.__words[2]) = *(_DWORD *)(v45 - 8);
          v43[-1].__r_.__value_.__l.__size_ = v50;
          v45 -= 80;
          v43 = (std::string *)((char *)v43 - 80);
        }
        while (v45 != v44);
      }
      v51 = v7->__words[1];
      if (v51 != v10)
      {
        do
        {
          v52 = *(_OWORD *)v10;
          *((_QWORD *)v41 + 2) = *(_QWORD *)(v10 + 16);
          *(_OWORD *)v41 = v52;
          *(_QWORD *)(v10 + 8) = 0;
          *(_QWORD *)(v10 + 16) = 0;
          *(_QWORD *)v10 = 0;
          v53 = *(_QWORD *)(v10 + 24);
          *((_DWORD *)v41 + 8) = *(_DWORD *)(v10 + 32);
          *((_QWORD *)v41 + 3) = v53;
          v54 = *(_OWORD *)(v10 + 40);
          *((_QWORD *)v41 + 7) = *(_QWORD *)(v10 + 56);
          *(_OWORD *)(v41 + 40) = v54;
          *(_QWORD *)(v10 + 48) = 0;
          *(_QWORD *)(v10 + 56) = 0;
          *(_QWORD *)(v10 + 40) = 0;
          v55 = *(_QWORD *)(v10 + 64);
          *((_DWORD *)v41 + 18) = *(_DWORD *)(v10 + 72);
          *((_QWORD *)v41 + 8) = v55;
          v41 += 80;
          v10 += 80;
        }
        while (v10 != v51);
        v10 = v7->__words[1];
      }
      v56 = (std::string *)v7->__words[0];
      v7->__words[0] = (std::string::size_type)v46;
      v7->__words[1] = (std::string::size_type)v41;
      v57 = v7->__words[2];
      v7->__words[2] = v61;
      v60 = v10;
      v61 = v57;
      v58 = (unint64_t)v56;
      v59 = v56;
      return (std::string *)std::__split_buffer<AMCP::Wire_Identifier>::~__split_buffer((uint64_t)&v58);
    }
  }
  return result;
}

void sub_1B5AD2384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>,AMCP::Wire_Identifier*,AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      std::construct_at[abi:ne180100]<AMCP::Wire_Identifier,AMCP::Wire_Identifier&,AMCP::Wire_Identifier*>((std::string *)(a3 + v6), (__int128 *)(a1 + v6));
      v6 += 80;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Wire_Identifier *,AMCP::Wire_Identifier *,AMCP::Wire_Identifier *>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v5;
  int v6;
  int data;

  if (__str != a2)
  {
    v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      v6 = v5[1].__r_.__value_.__r.__words[1];
      this[1].__r_.__value_.__r.__words[0] = v5[1].__r_.__value_.__r.__words[0];
      LODWORD(this[1].__r_.__value_.__r.__words[1]) = v6;
      std::string::operator=((std::string *)((char *)this + 40), (std::string *)((char *)v5 + 40));
      data = (int)v5[3].__r_.__value_.__l.__data_;
      this[2].__r_.__value_.__r.__words[2] = v5[2].__r_.__value_.__r.__words[2];
      LODWORD(this[3].__r_.__value_.__l.__data_) = data;
      this = (std::string *)((char *)this + 80);
      v5 = (std::string *)((char *)v5 + 80);
    }
    while (v5 != a2);
  }
  return this;
}

std::string *std::construct_at[abi:ne180100]<AMCP::Wire_Identifier,AMCP::Wire_Identifier&,AMCP::Wire_Identifier*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string::size_type v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 3);
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 8);
  this[1].__r_.__value_.__r.__words[0] = v5;
  v6 = (std::string *)((char *)this + 40);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 40);
    this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = *((_QWORD *)a2 + 8);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  this[2].__r_.__value_.__r.__words[2] = v8;
  return this;
}

void sub_1B5AD2550(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<AMCP::Wire_Identifier>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<AMCP::Wire_Identifier>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<AMCP::Wire_Identifier>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<AMCP::Wire_Identifier>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void AMCP::Graph::Graph::get_thread_group_id_from_upstream(std::string *a1, _QWORD *a2, uint64_t a3, char **a4)
{
  AMCP::Log::Scope_Registry *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  int64x2_t v37;
  char *v38;
  uint64_t *v39;
  char v40;
  const void **v41;
  _QWORD *v42;
  AMCP::Log::Scope_Registry *v43;
  uint64_t v44;
  std::string::size_type size;
  std::string::size_type v46;
  char v47;
  std::string *p_str;
  std::string *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  int64x2_t v68;
  unint64_t v69;
  char v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  NSObject *v75;
  _opaque_pthread_t *v76;
  mach_port_t v77;
  void *v78;
  NSObject *v79;
  _opaque_pthread_t *v80;
  mach_port_t v81;
  void *exception;
  NSObject *v83;
  _opaque_pthread_t *v84;
  mach_port_t v85;
  void *v86;
  _QWORD *v87;
  AMCP::Wire_Identifier *v88;
  _QWORD *v89;
  __int128 v90;
  uint64_t v91;
  _BYTE v92[24];
  uint64_t v93;
  std::string v94;
  std::logic_error v95;
  void (**v96)();
  std::logic_error v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  std::string __str;
  std::string v103;
  uint64_t v104;
  int v105;
  std::string v106;
  uint64_t v107;
  int v108;
  int64x2_t v109;
  unint64_t v110;
  std::string v111;
  std::string __p;
  __int128 v113;
  uint8_t buf[8];
  int64x2_t v115;
  __int128 v116;
  const char *v117;
  int v118;
  std::string v119;
  __int128 v120;
  std::string v121;
  uint64_t v122;
  int v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v89 = a2 + 12;
  v8 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(a2 + 12, (unsigned __int8 **)a3);
  if (v8 && *((_BYTE *)v8 + 504))
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v119, "com.apple.coreaudio", "AMCP");
    v79 = *(NSObject **)v119.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v119);
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
    {
      v80 = pthread_self();
      v81 = pthread_mach_thread_np(v80);
      LODWORD(v119.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v119.__r_.__value_.__r.__words[0]) = v81;
      LOWORD(v119.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v119.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
      WORD1(v119.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v119.__r_.__value_.__r.__words[2]) = 409;
      LOWORD(v120) = 2080;
      *(_QWORD *)((char *)&v120 + 2) = "not (not m_wire_index.is_connected(current_wire))";
      _os_log_error_impl(&dword_1B57BA000, v79, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v119, 0x22u);
    }
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&__p);
    std::logic_error::logic_error((std::logic_error *)&v111, &__p);
    v111.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)buf, (const std::logic_error *)&v111);
    v116 = 0uLL;
    v117 = 0;
    v118 = -1;
    *(_QWORD *)buf = off_1E69A1208;
    v115.i64[1] = (uint64_t)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v119, (uint64_t)buf);
    *((_QWORD *)&v120 + 1) = "std::optional<Thread_Group_ID> AMCP::Graph::Graph::get_thread_group_id_from_upstream(const "
                             "Wire_Identifier &, std::vector<std::shared_ptr<Node>> &) const";
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AM"
                                                                "CP/IO/Graph/Graph.cpp";
    LODWORD(v121.__r_.__value_.__r.__words[1]) = 409;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v92);
    v96 = (void (**)())off_1E69A20A0;
    v97 = *(std::logic_error *)v92;
    v98 = *(_QWORD *)&v92[16];
    memset(v92, 0, sizeof(v92));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v119, (uint64_t)&v96);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&v119);
  }
  v9 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2 + 22, (unsigned __int8 *)a3);
  if (!v9)
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  v11 = *((_QWORD *)v9 + 5);
  v10 = *((_QWORD *)v9 + 6);
  *(_QWORD *)&v113 = v11;
  *((_QWORD *)&v113 + 1) = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v15 = *a4;
  v14 = a4[1];
  v16 = *a4;
  if (*a4 != v14)
  {
    while (*(_QWORD *)v16 != v11)
    {
      v16 += 16;
      if (v16 == v14)
      {
        v16 = a4[1];
        break;
      }
    }
  }
  if (v16 != v14)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v119, "com.apple.coreaudio", "AMCP");
    v83 = *(NSObject **)v119.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v119);
    if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
    {
      v84 = pthread_self();
      v85 = pthread_mach_thread_np(v84);
      LODWORD(v119.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v119.__r_.__value_.__r.__words[0]) = v85;
      LOWORD(v119.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v119.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
      WORD1(v119.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v119.__r_.__value_.__r.__words[2]) = 417;
      LOWORD(v120) = 2080;
      *(_QWORD *)((char *)&v120 + 2) = "not (std::find(path.begin(), path.end(), source_node) == path.end())";
      _os_log_error_impl(&dword_1B57BA000, v83, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Graph contains a cycle.", (uint8_t *)&v119, 0x22u);
    }
    v86 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Graph contains a cycle.", (uint64_t)&__p);
    std::logic_error::logic_error((std::logic_error *)&v111, &__p);
    v111.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)buf, (const std::logic_error *)&v111);
    v116 = 0uLL;
    v117 = 0;
    v118 = -1;
    *(_QWORD *)buf = off_1E69A1208;
    v115.i64[1] = (uint64_t)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v119, (uint64_t)buf);
    *((_QWORD *)&v120 + 1) = "std::optional<Thread_Group_ID> AMCP::Graph::Graph::get_thread_group_id_from_upstream(const "
                             "Wire_Identifier &, std::vector<std::shared_ptr<Node>> &) const";
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AM"
                                                                "CP/IO/Graph/Graph.cpp";
    LODWORD(v121.__r_.__value_.__r.__words[1]) = 417;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v92);
    v96 = (void (**)())off_1E69A20A0;
    v97 = *(std::logic_error *)v92;
    v98 = *(_QWORD *)&v92[16];
    memset(v92, 0, sizeof(v92));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v119, (uint64_t)&v96);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v86, (uint64_t)&v119);
  }
  v17 = (unint64_t)a4[2];
  if ((unint64_t)v14 >= v17)
  {
    v22 = (v14 - v15) >> 4;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v24 = v17 - (_QWORD)v15;
    v25 = (uint64_t)(v17 - (_QWORD)v15) >> 3;
    if (v25 > v23)
      v23 = v25;
    if (v24 >= 0x7FFFFFFFFFFFFFF0)
      v26 = 0xFFFFFFFFFFFFFFFLL;
    else
      v26 = v23;
    *((_QWORD *)&v120 + 1) = a4 + 2;
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v26);
    v29 = &v27[16 * v22];
    v30 = *((_QWORD *)&v113 + 1);
    *(_OWORD *)v29 = v113;
    if (v30)
    {
      v31 = (unint64_t *)(v30 + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v34 = *a4;
    v33 = a4[1];
    if (v33 == *a4)
    {
      v37 = vdupq_n_s64((unint64_t)v33);
      v35 = &v27[16 * v22];
    }
    else
    {
      v35 = &v27[16 * v22];
      do
      {
        v36 = *((_OWORD *)v33 - 1);
        v33 -= 16;
        *((_OWORD *)v35 - 1) = v36;
        v35 -= 16;
        *(_QWORD *)v33 = 0;
        *((_QWORD *)v33 + 1) = 0;
      }
      while (v33 != v34);
      v37 = *(int64x2_t *)a4;
    }
    v21 = v29 + 16;
    *a4 = v35;
    a4[1] = v29 + 16;
    *(int64x2_t *)&v119.__r_.__value_.__r.__words[1] = v37;
    v38 = a4[2];
    a4[2] = &v27[16 * v28];
    *(_QWORD *)&v120 = v38;
    v119.__r_.__value_.__r.__words[0] = v37.i64[0];
    std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v119);
    v18 = v113;
  }
  else
  {
    v18 = v113;
    *(_QWORD *)v14 = v113;
    *((_QWORD *)v14 + 1) = v10;
    if (v10)
    {
      v19 = (unint64_t *)(v10 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = v14 + 16;
  }
  a4[1] = v21;
  if (*(_DWORD *)(v18 + 48) == 1)
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_125;
  }
  if (*(_DWORD *)(v18 + 16) != 1)
  {
    if (*(char *)(v18 + 47) < 0)
      std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)(v18 + 24), *(_QWORD *)(v18 + 32));
    else
      v119 = *(std::string *)(v18 + 24);
    *a1 = v119;
    a1[1].__r_.__value_.__s.__data_[0] = 1;
    goto LABEL_125;
  }
  if (*(char *)(v18 + 47) < 0)
    std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)(v18 + 24), *(_QWORD *)(v18 + 32));
  else
    v119 = *(std::string *)(v18 + 24);
  v88 = (AMCP::Wire_Identifier *)(a2 + 7);
  AMCP::Graph::Wire_Index::get_wires_for_node((uint64_t)&__p, a2 + 7, (uint64_t)&v119, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v18 + 88) - *(_QWORD *)(v18 + 80)) >> 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v18 + 64) - *(_QWORD *)(v18 + 56)) >> 4));
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v119.__r_.__value_.__l.__data_);
  memset(&v111, 0, sizeof(v111));
  v109 = 0uLL;
  v110 = 0;
  v39 = (uint64_t *)__p.__r_.__value_.__r.__words[2];
  if (!__p.__r_.__value_.__r.__words[2])
    goto LABEL_119;
  v87 = a2;
  v40 = 0;
  do
  {
    if (*((char *)v39 + 39) < 0)
      std::string::__init_copy_ctor_external(&v106, (const std::string::value_type *)v39[2], v39[3]);
    else
      v106 = *(std::string *)(v39 + 2);
    v107 = v39[5];
    v108 = *((_DWORD *)v39 + 12);
    v41 = (const void **)(v39 + 7);
    if (*((char *)v39 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(&v103, (const std::string::value_type *)v39[7], v39[8]);
    }
    else
    {
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)v41;
      v103.__r_.__value_.__r.__words[2] = v39[9];
    }
    v104 = v39[10];
    v105 = *((_DWORD *)v39 + 22);
    v119 = v106;
    memset(&v106, 0, sizeof(v106));
    *(_QWORD *)&v120 = v107;
    DWORD2(v120) = v108;
    v121 = v103;
    memset(&v103, 0, sizeof(v103));
    v123 = *((_DWORD *)v39 + 22);
    v122 = v39[10];
    v42 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(v89, (unsigned __int8 **)&v119);
    if (v42 && *((_BYTE *)v42 + 504))
    {
      AMCP::Graph::Wire_Index::get_tgid_for_wire((AMCP::Graph::Wire_Index *)&__str, v88, (unsigned __int8 **)&v119);
      if ((v40 & 1) != 0)
      {
        v44 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
        if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v111.__r_.__value_.__r.__words[2]);
        else
          size = v111.__r_.__value_.__l.__size_;
        v46 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        v47 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v46 = __str.__r_.__value_.__l.__size_;
        if (size != v46)
          goto LABEL_131;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v111.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v43 = (AMCP::Log::Scope_Registry *)memcmp(v111.__r_.__value_.__l.__data_, p_str, v111.__r_.__value_.__l.__size_);
          if ((_DWORD)v43)
            goto LABEL_131;
        }
        else if (*((_BYTE *)&v111.__r_.__value_.__s + 23))
        {
          v49 = &v111;
          while (v49->__r_.__value_.__s.__data_[0] == p_str->__r_.__value_.__s.__data_[0])
          {
            v49 = (std::string *)((char *)v49 + 1);
            p_str = (std::string *)((char *)p_str + 1);
            if (!--v44)
              goto LABEL_86;
          }
LABEL_131:
          AMCP::Log::Scope_Registry::get(v43);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v75 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
          {
            v76 = pthread_self();
            v77 = pthread_mach_thread_np(v76);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v77;
            v115.i16[0] = 2080;
            *(uint64_t *)((char *)v115.i64 + 2) = (uint64_t)"Graph.cpp";
            v115.i16[5] = 1024;
            v115.i32[3] = 449;
            LOWORD(v116) = 2080;
            *(_QWORD *)((char *)&v116 + 2) = "not (group == temp)";
            _os_log_error_impl(&dword_1B57BA000, v75, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Node with Single_Thread policy should not have connected wires with different TIDs.", buf, 0x22u);
          }
          v78 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Node with Single_Thread policy should not have connected wires with different TIDs.", (uint64_t)&v94);
          std::logic_error::logic_error(&v95, &v94);
          v95.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)&v96, &v95);
          v98 = 0;
          v99 = 0;
          v100 = 0;
          v101 = -1;
          v96 = off_1E69A1208;
          v97.__imp_.__imp_ = (const char *)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v96);
          *((_QWORD *)&v116 + 1) = "std::optional<Thread_Group_ID> AMCP::Graph::Graph::get_thread_group_id_from_upstream("
                                   "const Wire_Identifier &, std::vector<std::shared_ptr<Node>> &) const";
          v117 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
          v118 = 449;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v90);
          *(_QWORD *)v92 = off_1E69A20A0;
          *(_OWORD *)&v92[8] = v90;
          v93 = v91;
          v90 = 0uLL;
          v91 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v92);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v78, (uint64_t)buf);
        }
      }
      else
      {
        std::string::operator=(&v111, &__str);
        v47 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
LABEL_86:
      if (v47 < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
LABEL_88:
      v40 = 1;
      goto LABEL_108;
    }
    if ((v40 & 1) != 0)
      goto LABEL_88;
    v50 = *((unsigned __int8 *)v39 + 79);
    if ((v50 & 0x80u) == 0)
      v51 = *((unsigned __int8 *)v39 + 79);
    else
      v51 = v39[8];
    v52 = *(unsigned __int8 *)(a3 + 23);
    v53 = (char)v52;
    if ((v52 & 0x80u) != 0)
      v52 = *(_QWORD *)(a3 + 8);
    if (v51 != v52)
      goto LABEL_90;
    if (v53 >= 0)
      v54 = (unsigned __int8 *)a3;
    else
      v54 = *(unsigned __int8 **)a3;
    if ((v50 & 0x80) != 0)
    {
      if (memcmp(*v41, v54, v39[8]))
        goto LABEL_90;
    }
    else if (*((_BYTE *)v39 + 79))
    {
      while (*(unsigned __int8 *)v41 == *v54)
      {
        v41 = (const void **)((char *)v41 + 1);
        ++v54;
        if (!--v50)
          goto LABEL_91;
      }
LABEL_90:
      v40 = 0;
      goto LABEL_108;
    }
LABEL_91:
    v55 = v109.i64[1];
    if (v109.i64[1] >= v110)
    {
      v57 = 0xCCCCCCCCCCCCCCCDLL * ((v109.i64[1] - v109.i64[0]) >> 4);
      v58 = v57 + 1;
      if (v57 + 1 > 0x333333333333333)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      if (0x999999999999999ALL * ((uint64_t)(v110 - v109.i64[0]) >> 4) > v58)
        v58 = 0x999999999999999ALL * ((uint64_t)(v110 - v109.i64[0]) >> 4);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v110 - v109.i64[0]) >> 4) >= 0x199999999999999)
        v59 = 0x333333333333333;
      else
        v59 = v58;
      *((_QWORD *)&v116 + 1) = &v110;
      if (v59)
        v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>>(v59);
      else
        v60 = 0;
      *(_QWORD *)buf = v59;
      v115.i64[0] = v59 + 80 * v57;
      v115.i64[1] = v115.i64[0];
      *(_QWORD *)&v116 = v59 + 80 * v60;
      std::construct_at[abi:ne180100]<AMCP::Wire_Identifier,AMCP::Wire_Identifier const&,AMCP::Wire_Identifier*>((std::string *)v115.i64[0], (__int128 *)&v119);
      v61 = v115.i64[0];
      v56 = v115.i64[1] + 80;
      v115.i64[1] += 80;
      v62 = v109.i64[1];
      v63 = v109.i64[0];
      if (v109.i64[1] == v109.i64[0])
      {
        v68 = vdupq_n_s64(v109.u64[1]);
      }
      else
      {
        do
        {
          v64 = *(_OWORD *)(v62 - 80);
          *(_QWORD *)(v61 - 64) = *(_QWORD *)(v62 - 64);
          *(_OWORD *)(v61 - 80) = v64;
          *(_QWORD *)(v62 - 72) = 0;
          *(_QWORD *)(v62 - 64) = 0;
          *(_QWORD *)(v62 - 80) = 0;
          v65 = *(_QWORD *)(v62 - 56);
          *(_DWORD *)(v61 - 48) = *(_DWORD *)(v62 - 48);
          *(_QWORD *)(v61 - 56) = v65;
          v66 = *(_OWORD *)(v62 - 40);
          *(_QWORD *)(v61 - 24) = *(_QWORD *)(v62 - 24);
          *(_OWORD *)(v61 - 40) = v66;
          *(_QWORD *)(v62 - 32) = 0;
          *(_QWORD *)(v62 - 24) = 0;
          *(_QWORD *)(v62 - 40) = 0;
          v67 = *(_QWORD *)(v62 - 16);
          *(_DWORD *)(v61 - 8) = *(_DWORD *)(v62 - 8);
          *(_QWORD *)(v61 - 16) = v67;
          v61 -= 80;
          v62 -= 80;
        }
        while (v62 != v63);
        v68 = v109;
        v56 = v115.i64[1];
      }
      v109.i64[0] = v61;
      v109.i64[1] = v56;
      v115 = v68;
      v69 = v110;
      v110 = v116;
      *(_QWORD *)&v116 = v69;
      *(_QWORD *)buf = v68.i64[0];
      std::__split_buffer<AMCP::Wire_Identifier>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::construct_at[abi:ne180100]<AMCP::Wire_Identifier,AMCP::Wire_Identifier const&,AMCP::Wire_Identifier*>((std::string *)v109.i64[1], (__int128 *)&v119);
      v56 = v55 + 80;
    }
    v40 = 0;
    v109.i64[1] = v56;
LABEL_108:
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v121.__r_.__value_.__l.__data_);
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v119.__r_.__value_.__l.__data_);
    v39 = (uint64_t *)*v39;
  }
  while (v39);
  if ((v40 & 1) != 0)
  {
    *a1 = v111;
    memset(&v111, 0, sizeof(v111));
    v70 = 1;
    goto LABEL_120;
  }
  if (v109.i64[0] != v109.i64[1])
  {
    AMCP::Graph::Graph::get_thread_group_id_from_upstream(a1, v87, v109.i64[0], a4);
    goto LABEL_121;
  }
LABEL_119:
  v70 = 0;
  a1->__r_.__value_.__s.__data_[0] = 0;
LABEL_120:
  a1[1].__r_.__value_.__s.__data_[0] = v70;
LABEL_121:
  v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node((_QWORD *)__p.__r_.__value_.__r.__words[2]);
  v71 = (void *)__p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v71)
    operator delete(v71);
LABEL_125:
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
}

void sub_1B5AD32B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Graph::get_thread_group_id_from_downstream(std::string *a1, _QWORD *a2, uint64_t a3, std::logic_error_vtbl ***a4, uint64_t a5)
{
  AMCP::Log::Scope_Registry *v10;
  unsigned __int8 *v11;
  const char *v12;
  std::logic_error_vtbl *v13;
  unint64_t *v14;
  unint64_t v15;
  std::logic_error_vtbl **v16;
  std::logic_error_vtbl **v17;
  std::logic_error_vtbl **v18;
  unint64_t v19;
  std::logic_error_vtbl *v20;
  unint64_t *v21;
  unint64_t v22;
  std::logic_error *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  std::logic_error *v31;
  const char *imp;
  unint64_t *v33;
  unint64_t v34;
  std::logic_error_vtbl **v35;
  std::logic_error_vtbl **v36;
  char *v37;
  __int128 v38;
  int64x2_t v39;
  std::logic_error_vtbl **v40;
  int what;
  uint64_t *v43;
  _OWORD *v44;
  _OWORD *v45;
  uint64_t *v46;
  _QWORD *v47;
  BOOL v48;
  uint64_t *v49;
  std::string *v50;
  std::string::size_type size;
  std::string *p_p;
  uint64_t v53;
  std::string::size_type v54;
  uint64_t v55;
  const void **v56;
  std::string *v57;
  unsigned __int8 *v58;
  const std::string::value_type *v59;
  _QWORD *v60;
  char v61;
  uint64_t v62;
  std::string::size_type v63;
  uint64_t v64;
  char v65;
  std::string::size_type v66;
  std::string *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  std::string::size_type v72;
  uint64_t v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  NSObject *v78;
  _opaque_pthread_t *v79;
  mach_port_t v80;
  void *exception;
  NSObject *v82;
  _opaque_pthread_t *v83;
  mach_port_t v84;
  void *v85;
  AMCP::Wire_Identifier *v86;
  char v87;
  std::logic_error_vtbl *v88;
  _QWORD *v89;
  uint64_t v90;
  std::string *v91;
  std::string *v92;
  _QWORD *__s2;
  std::string *__s2a;
  std::string v95;
  uint64_t v96;
  int v97;
  std::string v98;
  uint64_t v99;
  int v100;
  std::string v101;
  uint64_t v102;
  std::string __p;
  std::string v104;
  uint64_t v105;
  int v106;
  std::string v107;
  uint64_t v108;
  int v109;
  std::string v110;
  uint64_t v111;
  std::logic_error v112;
  __int128 v113;
  uint64_t v114;
  std::logic_error v115;
  std::string v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  std::string v121;
  uint64_t v122;
  int v123;
  std::string v124;
  __int128 v125;
  std::string v126;
  uint64_t v127;
  int v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  __s2 = a2 + 12;
  v10 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(a2 + 12, (unsigned __int8 **)a3);
  if (v10 && *((_BYTE *)v10 + 504))
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v124, "com.apple.coreaudio", "AMCP");
    v78 = *(NSObject **)v124.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v124);
    if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
    {
      v79 = pthread_self();
      v80 = pthread_mach_thread_np(v79);
      LODWORD(v124.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v124.__r_.__value_.__r.__words[0]) = v80;
      LOWORD(v124.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v124.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
      WORD1(v124.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v124.__r_.__value_.__r.__words[2]) = 477;
      LOWORD(v125) = 2080;
      *(_QWORD *)((char *)&v125 + 2) = "not (not m_wire_index.is_connected(current_wire))";
      _os_log_error_impl(&dword_1B57BA000, v78, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v124, 0x22u);
    }
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v110);
    std::logic_error::logic_error(&v115, &v110);
    v115.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v116, &v115);
    v117 = 0;
    v118 = 0;
    v119 = 0;
    v120 = -1;
    v116.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v116.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v124, (uint64_t)&v116);
    *((_QWORD *)&v125 + 1) = "std::optional<Thread_Group_ID> AMCP::Graph::Graph::get_thread_group_id_from_downstream(cons"
                             "t Wire_Identifier &, std::vector<std::shared_ptr<Node>> &, const std::set<Wire_Identifier> &) const";
    v126.__r_.__value_.__r.__words[0] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AM"
                                                                "CP/IO/Graph/Graph.cpp";
    LODWORD(v126.__r_.__value_.__r.__words[1]) = 477;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v113);
    *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = v113;
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    v122 = v114;
    v113 = 0uLL;
    v114 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v124, (uint64_t)&v121);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&v124);
  }
  v11 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2 + 22, (unsigned __int8 *)(a3 + 40));
  if (!v11)
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  v13 = (std::logic_error_vtbl *)*((_QWORD *)v11 + 5);
  v12 = (const char *)*((_QWORD *)v11 + 6);
  v115.__vftable = v13;
  v115.__imp_.__imp_ = v12;
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v17 = *a4;
  v16 = a4[1];
  v18 = *a4;
  if (*a4 != v16)
  {
    while (*v18 != v13)
    {
      v18 += 2;
      if (v18 == v16)
      {
        v18 = a4[1];
        break;
      }
    }
  }
  if (v18 != v16)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v124, "com.apple.coreaudio", "AMCP");
    v82 = *(NSObject **)v124.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v124);
    if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
    {
      v83 = pthread_self();
      v84 = pthread_mach_thread_np(v83);
      LODWORD(v124.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v124.__r_.__value_.__r.__words[0]) = v84;
      LOWORD(v124.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v124.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
      WORD1(v124.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v124.__r_.__value_.__r.__words[2]) = 485;
      LOWORD(v125) = 2080;
      *(_QWORD *)((char *)&v125 + 2) = "not (std::find(path_to_context.begin(), path_to_context.end(), dest_node) == path"
                                       "_to_context.end())";
      _os_log_error_impl(&dword_1B57BA000, v82, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Graph contains a cycle.", (uint8_t *)&v124, 0x22u);
    }
    v85 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Graph contains a cycle.", (uint64_t)&v110);
    std::logic_error::logic_error(&v112, &v110);
    v112.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v116, &v112);
    v117 = 0;
    v118 = 0;
    v119 = 0;
    v120 = -1;
    v116.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v116.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v124, (uint64_t)&v116);
    *((_QWORD *)&v125 + 1) = "std::optional<Thread_Group_ID> AMCP::Graph::Graph::get_thread_group_id_from_downstream(cons"
                             "t Wire_Identifier &, std::vector<std::shared_ptr<Node>> &, const std::set<Wire_Identifier> &) const";
    v126.__r_.__value_.__r.__words[0] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AM"
                                                                "CP/IO/Graph/Graph.cpp";
    LODWORD(v126.__r_.__value_.__r.__words[1]) = 485;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v113);
    *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = v113;
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    v122 = v114;
    v113 = 0uLL;
    v114 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v124, (uint64_t)&v121);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v85, (uint64_t)&v124);
  }
  v19 = (unint64_t)a4[2];
  if ((unint64_t)v16 >= v19)
  {
    v24 = ((char *)v16 - (char *)v17) >> 4;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v26 = v19 - (_QWORD)v17;
    v27 = (uint64_t)(v19 - (_QWORD)v17) >> 3;
    if (v27 > v25)
      v25 = v27;
    if (v26 >= 0x7FFFFFFFFFFFFFF0)
      v28 = 0xFFFFFFFFFFFFFFFLL;
    else
      v28 = v25;
    *((_QWORD *)&v125 + 1) = a4 + 2;
    v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v28);
    v31 = (std::logic_error *)&v29[16 * v24];
    imp = v115.__imp_.__imp_;
    *v31 = v115;
    if (imp)
    {
      v33 = (unint64_t *)(imp + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v36 = *a4;
    v35 = a4[1];
    if (v35 == *a4)
    {
      v39 = vdupq_n_s64((unint64_t)v35);
      v37 = &v29[16 * v24];
    }
    else
    {
      v37 = &v29[16 * v24];
      do
      {
        v38 = *((_OWORD *)v35 - 1);
        v35 -= 2;
        *((_OWORD *)v37 - 1) = v38;
        v37 -= 16;
        *v35 = 0;
        v35[1] = 0;
      }
      while (v35 != v36);
      v39 = *(int64x2_t *)a4;
    }
    v23 = v31 + 1;
    *a4 = (std::logic_error_vtbl **)v37;
    a4[1] = (std::logic_error_vtbl **)&v31[1];
    *(int64x2_t *)&v124.__r_.__value_.__r.__words[1] = v39;
    v40 = a4[2];
    a4[2] = (std::logic_error_vtbl **)&v29[16 * v30];
    *(_QWORD *)&v125 = v40;
    v124.__r_.__value_.__r.__words[0] = v39.i64[0];
    std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v124);
    v20 = v115.__vftable;
  }
  else
  {
    v20 = v115.__vftable;
    *v16 = v115.__vftable;
    v16[1] = (std::logic_error_vtbl *)v12;
    if (v12)
    {
      v21 = (unint64_t *)(v12 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = (std::logic_error *)(v16 + 2);
  }
  a4[1] = (std::logic_error_vtbl **)v23;
  what = (int)v20->what;
  if (!what)
  {
    if (SHIBYTE(v20[1].what) < 0)
      std::string::__init_copy_ctor_external(&v124, (const std::string::value_type *)v20[1].~logic_error, (std::string::size_type)v20[1].~logic_error_0);
    else
      v124 = (std::string)v20[1];
    *a1 = v124;
    a1[1].__r_.__value_.__s.__data_[0] = 1;
    goto LABEL_151;
  }
  if (LODWORD(v20[2].~logic_error) == 1 || what != 1)
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_151;
  }
  if (SHIBYTE(v20[1].what) < 0)
    std::string::__init_copy_ctor_external(&v124, (const std::string::value_type *)v20[1].~logic_error, (std::string::size_type)v20[1].~logic_error_0);
  else
    v124 = (std::string)v20[1];
  AMCP::Graph::Wire_Index::get_wires_for_node((uint64_t)&v110, a2 + 7, (uint64_t)&v124, 0x6DB6DB6DB6DB6DB7 * (((char *)v20[3].what - (char *)v20[3].~logic_error_0) >> 4), 0x6DB6DB6DB6DB6DB7 * (((char *)v20[2].what - (char *)v20[2].~logic_error_0) >> 4));
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  if (!v111)
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_149;
  }
  v91 = a1;
  v92 = (std::string *)&v20[1];
  v89 = a2;
  v43 = (uint64_t *)v110.__r_.__value_.__r.__words[2];
  v90 = a5;
  v88 = v20;
  if (v110.__r_.__value_.__r.__words[2])
  {
    v86 = (AMCP::Wire_Identifier *)(a2 + 7);
    do
    {
      v44 = v43 + 2;
      if (*((char *)v43 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(&v116, (const std::string::value_type *)v43[2], v43[3]);
      }
      else
      {
        *(_OWORD *)&v116.__r_.__value_.__l.__data_ = *v44;
        v116.__r_.__value_.__r.__words[2] = v43[4];
      }
      v117 = v43[5];
      LODWORD(v118) = *((_DWORD *)v43 + 12);
      v45 = v43 + 7;
      if (*((char *)v43 + 79) < 0)
      {
        std::string::__init_copy_ctor_external(&v121, (const std::string::value_type *)v43[7], v43[8]);
      }
      else
      {
        *(_OWORD *)&v121.__r_.__value_.__l.__data_ = *v45;
        v121.__r_.__value_.__r.__words[2] = v43[9];
      }
      v46 = v43 + 10;
      v122 = v43[10];
      v123 = *((_DWORD *)v43 + 22);
      v124 = v116;
      memset(&v116, 0, sizeof(v116));
      *(_QWORD *)&v125 = v117;
      DWORD2(v125) = v118;
      v126 = v121;
      memset(&v121, 0, sizeof(v121));
      v128 = *((_DWORD *)v43 + 22);
      v127 = v43[10];
      v47 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(__s2, (unsigned __int8 **)&v124);
      if (v47)
        v48 = *((_BYTE *)v47 + 504) != 0;
      else
        v48 = 0;
      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v126.__r_.__value_.__l.__data_);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v124.__r_.__value_.__l.__data_);
      if (v48)
      {
        if (*((char *)v43 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(&v107, (const std::string::value_type *)v43[2], v43[3]);
        }
        else
        {
          *(_OWORD *)&v107.__r_.__value_.__l.__data_ = *v44;
          v107.__r_.__value_.__r.__words[2] = v43[4];
        }
        v108 = v43[5];
        v109 = *((_DWORD *)v43 + 12);
        if (*((char *)v43 + 79) < 0)
        {
          std::string::__init_copy_ctor_external(&v104, (const std::string::value_type *)v43[7], v43[8]);
        }
        else
        {
          *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *v45;
          v104.__r_.__value_.__r.__words[2] = v43[9];
        }
        v106 = *((_DWORD *)v43 + 22);
        v124.__r_.__value_.__r.__words[2] = v107.__r_.__value_.__r.__words[2];
        *(_QWORD *)&v125 = v108;
        v62 = *v46;
        *(_OWORD *)&v124.__r_.__value_.__l.__data_ = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
        memset(&v107, 0, sizeof(v107));
        DWORD2(v125) = v109;
        *(_OWORD *)&v126.__r_.__value_.__l.__data_ = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
        v63 = v104.__r_.__value_.__r.__words[2];
        memset(&v104, 0, sizeof(v104));
        v105 = v62;
        v128 = *((_DWORD *)v43 + 22);
        v64 = *v46;
        v126.__r_.__value_.__r.__words[2] = v63;
        v127 = v64;
        AMCP::Graph::Wire_Index::get_tgid_for_wire((AMCP::Graph::Wire_Index *)&v116, v86, (unsigned __int8 **)&v124);
        *v91 = v116;
        v91[1].__r_.__value_.__s.__data_[0] = 1;
LABEL_144:
        if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v126.__r_.__value_.__l.__data_);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v124.__r_.__value_.__l.__data_);
        goto LABEL_149;
      }
      v43 = (uint64_t *)*v43;
    }
    while (v43);
    v49 = (uint64_t *)v110.__r_.__value_.__r.__words[2];
  }
  else
  {
    v49 = 0;
  }
  v102 = a5;
  v50 = (std::string *)&v20[1];
  if (SHIBYTE(v20[1].what) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v20[1].~logic_error, (std::string::size_type)v20[1].~logic_error_0);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v20[1].what;
  }
  if (!v49)
  {
    v61 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    goto LABEL_104;
  }
  v87 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  __s2a = p_p;
  while (1)
  {
    v53 = *((unsigned __int8 *)v49 + 39);
    v54 = v49[3];
    if ((v53 & 0x80u) == 0)
      v55 = *((unsigned __int8 *)v49 + 39);
    else
      v55 = v49[3];
    if (v55 != size)
      goto LABEL_101;
    v56 = (const void **)(v49 + 2);
    if ((v53 & 0x80) == 0)
      break;
    v59 = (const std::string::value_type *)*v56;
    if (!memcmp(*v56, __s2a, v49[3]))
    {
      std::string::__init_copy_ctor_external(&v116, v59, v54);
      goto LABEL_93;
    }
LABEL_101:
    v49 = (uint64_t *)*v49;
    if (!v49)
      goto LABEL_102;
  }
  v57 = __s2a;
  v58 = (unsigned __int8 *)(v49 + 2);
  if (*((_BYTE *)v49 + 39))
  {
    while (*v58 == v57->__r_.__value_.__s.__data_[0])
    {
      ++v58;
      v57 = (std::string *)((char *)v57 + 1);
      if (!--v53)
        goto LABEL_90;
    }
    goto LABEL_101;
  }
LABEL_90:
  *(_OWORD *)&v116.__r_.__value_.__l.__data_ = *(_OWORD *)v56;
  v116.__r_.__value_.__r.__words[2] = v49[4];
LABEL_93:
  v117 = v49[5];
  LODWORD(v118) = *((_DWORD *)v49 + 12);
  if (*((char *)v49 + 79) < 0)
    std::string::__init_copy_ctor_external(&v121, (const std::string::value_type *)v49[7], v49[8]);
  else
    v121 = *(std::string *)(v49 + 7);
  v122 = v49[10];
  v123 = *((_DWORD *)v49 + 22);
  v124 = v116;
  memset(&v116, 0, sizeof(v116));
  *(_QWORD *)&v125 = v117;
  DWORD2(v125) = v118;
  v126 = v121;
  memset(&v121, 0, sizeof(v121));
  v128 = *((_DWORD *)v49 + 22);
  v127 = v49[10];
  v60 = std::__tree<AMCP::Wire_Identifier>::find<AMCP::Wire_Identifier>(v102, (uint64_t)&v124);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  if ((_QWORD *)(v102 + 8) == v60)
    goto LABEL_101;
LABEL_102:
  v50 = v92;
  v61 = v87;
LABEL_104:
  if (v61 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v49)
    goto LABEL_137;
  v49 = (uint64_t *)v110.__r_.__value_.__r.__words[2];
  if (SHIBYTE(v88[1].what) < 0)
    std::string::__init_copy_ctor_external(&v101, (const std::string::value_type *)v88[1].~logic_error, (std::string::size_type)v88[1].~logic_error_0);
  else
    v101 = *v50;
  v65 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
  if (v49)
  {
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
    else
      v66 = v101.__r_.__value_.__l.__size_;
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v101;
    else
      v67 = (std::string *)v101.__r_.__value_.__r.__words[0];
    do
    {
      v68 = *((unsigned __int8 *)v49 + 39);
      if ((v68 & 0x80u) == 0)
        v69 = *((unsigned __int8 *)v49 + 39);
      else
        v69 = v49[3];
      if (v69 == v66)
      {
        if ((v68 & 0x80) != 0)
        {
          if (!memcmp((const void *)v49[2], v67, v49[3]))
            break;
        }
        else
        {
          if (!*((_BYTE *)v49 + 39))
            break;
          v70 = 0;
          while (*((unsigned __int8 *)v49 + v70 + 16) == v67->__r_.__value_.__s.__data_[v70])
          {
            if (v68 == ++v70)
              goto LABEL_134;
          }
        }
      }
      v49 = (uint64_t *)*v49;
    }
    while (v49);
  }
LABEL_134:
  if (v65 < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  if (v49)
  {
LABEL_137:
    if (*((char *)v49 + 39) < 0)
      std::string::__init_copy_ctor_external(&v98, (const std::string::value_type *)v49[2], v49[3]);
    else
      v98 = *(std::string *)(v49 + 2);
    v99 = v49[5];
    v100 = *((_DWORD *)v49 + 12);
    if (*((char *)v49 + 79) < 0)
      std::string::__init_copy_ctor_external(&v95, (const std::string::value_type *)v49[7], v49[8]);
    else
      v95 = *(std::string *)(v49 + 7);
    v97 = *((_DWORD *)v49 + 22);
    v124.__r_.__value_.__r.__words[2] = v98.__r_.__value_.__r.__words[2];
    *(_QWORD *)&v125 = v99;
    v71 = v49[10];
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = *(_OWORD *)&v98.__r_.__value_.__l.__data_;
    memset(&v98, 0, sizeof(v98));
    DWORD2(v125) = v100;
    *(_OWORD *)&v126.__r_.__value_.__l.__data_ = *(_OWORD *)&v95.__r_.__value_.__l.__data_;
    v72 = v95.__r_.__value_.__r.__words[2];
    memset(&v95, 0, sizeof(v95));
    v96 = v71;
    v128 = *((_DWORD *)v49 + 22);
    v73 = v49[10];
    v126.__r_.__value_.__r.__words[2] = v72;
    v127 = v73;
    AMCP::Graph::Graph::get_thread_group_id_from_downstream(v91, v89, &v124, a4, v90);
    goto LABEL_144;
  }
  v91->__r_.__value_.__s.__data_[0] = 0;
  v91[1].__r_.__value_.__s.__data_[0] = 0;
LABEL_149:
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node((_QWORD *)v110.__r_.__value_.__r.__words[2]);
  v74 = (void *)v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v74)
    operator delete(v74);
LABEL_151:
  v75 = (std::__shared_weak_count *)v115.__imp_.__imp_;
  if (v115.__imp_.__imp_)
  {
    v76 = (unint64_t *)(v115.__imp_.__imp_ + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
}

void sub_1B5AD4320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<AMCP::Wire_Identifier>::find<AMCP::Wire_Identifier>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a2 + 40;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)(v3 + 4), (uint64_t)(v3 + 9), a2, v5);
    if (v7 >= 0)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7 >= 0)
      v6 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v2 == v6
    || (std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(a2, v5, (uint64_t)(v6 + 4), (uint64_t)(v6 + 9)) & 0x80) != 0)
  {
    return v2;
  }
  return v6;
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = std::__synth_three_way[abi:ne180100]<AMCP::Terminal_Identifier,AMCP::Terminal_Identifier>(a1, a3);
  if (!(_BYTE)result)
    return std::__synth_three_way[abi:ne180100]<AMCP::Terminal_Identifier,AMCP::Terminal_Identifier>(a2, a4);
  return result;
}

uint64_t std::__synth_three_way[abi:ne180100]<AMCP::Terminal_Identifier,AMCP::Terminal_Identifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1 + 24;
  v12 = a1;
  v13 = a1 + 24;
  v5 = a1 + 32;
  v14 = a1 + 32;
  v6 = a2 + 24;
  v7 = a2 + 32;
  v9 = a2;
  v10 = a2 + 24;
  v11 = a2 + 32;
  if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,unsigned long const&,AMCP::Direction const&,std::string const&,unsigned long const&,AMCP::Direction const&,0ul,1ul,2ul>((uint64_t)&v12, (uint64_t)&v9) & 0x80) != 0)return 255;
  v12 = a2;
  v13 = v6;
  v14 = v7;
  v9 = a1;
  v10 = v4;
  v11 = v5;
  return (std::__tuple_compare_three_way[abi:ne180100]<std::string const&,unsigned long const&,AMCP::Direction const&,std::string const&,unsigned long const&,AMCP::Direction const&,0ul,1ul,2ul>((uint64_t)&v12, (uint64_t)&v9) >> 7) & 1;
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<std::string const&,unsigned long const&,AMCP::Direction const&,std::string const&,unsigned long const&,AMCP::Direction const&,0ul,1ul,2ul>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*(_QWORD **)a1, *(_QWORD **)a2);
  if (!(_BYTE)result)
  {
    v5 = **(_QWORD **)(a1 + 8);
    v6 = **(_QWORD **)(a2 + 8);
    result = v5 < v6 ? 0xFFFFFFFFLL : 1;
    if (v5 == v6)
    {
      v7 = **(_DWORD **)(a1 + 16);
      v8 = **(_DWORD **)(a2 + 16);
      if (v7 < v8)
        v9 = -1;
      else
        v9 = 1;
      if (v7 == v8)
        return 0;
      else
        return v9;
    }
  }
  return result;
}

void AMCP::Graph::Graph::connect_downstream_nodes(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v8;
  _QWORD *v9;
  AMCP::Log::Scope_Registry *v10;
  unsigned __int8 v11;
  size_t v12;
  uint64_t v13;
  int v14;
  const std::string::value_type *v15;
  void **p_s1;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  void *v21;
  unsigned __int8 v22;
  _QWORD *v23;
  void *v24;
  NSObject *v25;
  _opaque_pthread_t *v26;
  mach_port_t v27;
  void *exception;
  uint64_t v29;
  std::string v33;
  __int128 v34;
  uint64_t v35;
  uint64_t (**v36)();
  __int128 v37;
  uint64_t v38;
  std::string v39;
  std::logic_error v40;
  std::logic_error v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  void *__s1;
  size_t __n;
  unsigned __int8 v49;
  std::string v50;
  uint64_t v51;
  int v52;
  std::string v53;
  uint64_t v54;
  int v55;
  std::string v56;
  uint64_t v57;
  int v58;
  std::string __p;
  uint64_t v60;
  int v61;
  void *v62;
  _QWORD *v63;
  uint8_t buf[8];
  __int16 v65;
  char *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  _BYTE v70[14];
  const char *v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  if (*(_DWORD *)(*a3 + 48) == 1 || *(_DWORD *)(v5 + 16) != 1)
    return;
  if (*(char *)(v5 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(v5 + 24), *(_QWORD *)(v5 + 32));
    v5 = *a3;
  }
  else
  {
    v56 = *(std::string *)(v5 + 24);
  }
  AMCP::Graph::Wire_Index::get_wires_for_node((uint64_t)&v62, a1 + 7, (uint64_t)&v56, 0, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56)) >> 4));
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  v8 = v63;
  if (!v63)
  {
    v23 = 0;
    goto LABEL_53;
  }
  v29 = a2;
  do
  {
    if (*((char *)v8 + 39) < 0)
      std::string::__init_copy_ctor_external(&v53, (const std::string::value_type *)v8[2], v8[3]);
    else
      v53 = *(std::string *)(v8 + 2);
    v54 = v8[5];
    v55 = *((_DWORD *)v8 + 12);
    if (*((char *)v8 + 79) < 0)
      std::string::__init_copy_ctor_external(&v50, (const std::string::value_type *)v8[7], v8[8]);
    else
      v50 = *(std::string *)(v8 + 7);
    v51 = v8[10];
    v52 = *((_DWORD *)v8 + 22);
    v56 = v53;
    memset(&v53, 0, sizeof(v53));
    v57 = v54;
    v58 = v55;
    __p = v50;
    memset(&v50, 0, sizeof(v50));
    v61 = *((_DWORD *)v8 + 22);
    v60 = v8[10];
    v9 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(a1 + 12, (unsigned __int8 **)&v56);
    if (v9 && *((_BYTE *)v9 + 504))
    {
      AMCP::Graph::Wire_Index::get_tgid_for_wire((AMCP::Graph::Wire_Index *)&__s1, (const AMCP::Wire_Identifier *)(a1 + 7), (unsigned __int8 **)&v56);
      v11 = v49;
      if ((v49 & 0x80u) == 0)
        v12 = v49;
      else
        v12 = __n;
      v13 = *(unsigned __int8 *)(a2 + 23);
      v14 = (char)v13;
      if ((v13 & 0x80u) != 0)
        v13 = *(_QWORD *)(a2 + 8);
      if (v12 == v13)
      {
        if (v14 >= 0)
          v15 = (const std::string::value_type *)a2;
        else
          v15 = *(const std::string::value_type **)a2;
        if ((v49 & 0x80) != 0)
        {
          v21 = __s1;
          v22 = v49;
          v10 = (AMCP::Log::Scope_Registry *)memcmp(__s1, v15, __n);
          v11 = v22;
          a2 = v29;
          if (!(_DWORD)v10)
            goto LABEL_45;
        }
        else
        {
          if (!v49)
            goto LABEL_46;
          p_s1 = &__s1;
          v17 = v49;
          while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v15)
          {
            p_s1 = (void **)((char *)p_s1 + 1);
            ++v15;
            if (!--v17)
              goto LABEL_43;
          }
        }
      }
      if (*(_DWORD *)(*a3 + 48) != 1)
      {
        AMCP::Log::Scope_Registry::get(v10);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v25 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          v26 = pthread_self();
          v27 = pthread_mach_thread_np(v26);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v27;
          v65 = 2080;
          v66 = "Graph.cpp";
          v67 = 1024;
          v68 = 552;
          v69 = 2080;
          *(_QWORD *)v70 = "not (tgid == group || current_node->get_thread_policy() == Node_Thread_Policy::Node_Is_Shared"
                           "_Across_Threads)";
          _os_log_error_impl(&dword_1B57BA000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Conflicting TGIDs", buf, 0x22u);
        }
        exception = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Conflicting TGIDs", (uint64_t)&v39);
        std::logic_error::logic_error(&v40, &v39);
        v40.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v41, &v40);
        v43 = 0;
        v44 = 0;
        v45 = 0;
        v46 = -1;
        v41.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v42 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v41);
        *(_QWORD *)&v70[6] = "void AMCP::Graph::Graph::connect_downstream_nodes(const Thread_Group_ID &, const std::share"
                             "d_ptr<Node> &, const std::set<Wire_Identifier> &, Resource_Counts &)";
        v71 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
        v72 = 552;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v34);
        v37 = v34;
        v38 = v35;
        v34 = 0uLL;
        v35 = 0;
        v36 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v36);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
      }
LABEL_43:
      if ((v11 & 0x80) != 0)
      {
        v21 = __s1;
LABEL_45:
        operator delete(v21);
      }
    }
    else
    {
      v18 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(a1 + 22, (unsigned __int8 *)v8 + 56);
      if (v18)
      {
        v19 = v18;
        if ((_QWORD *)(a4 + 8) != std::__tree<AMCP::Wire_Identifier>::find<AMCP::Wire_Identifier>(a4, (uint64_t)&v56))
        {
          if (*(char *)(a2 + 23) < 0)
            std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
          else
            v33 = *(std::string *)a2;
          v20 = (uint64_t *)(v19 + 40);
          AMCP::Graph::Graph::connect_nodes(a1, a3, v20, (const std::string::value_type *)&v33, a5);
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v33.__r_.__value_.__l.__data_);
          AMCP::Graph::Graph::connect_downstream_nodes(a1, a2, v20, a4, a5);
        }
      }
    }
LABEL_46:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    v8 = (_QWORD *)*v8;
  }
  while (v8);
  v23 = v63;
LABEL_53:
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node(v23);
  v24 = v62;
  v62 = 0;
  if (v24)
    operator delete(v24);
}

void sub_1B5AD4D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55)
{
  char v55;
  uint64_t v56;

  if (v55 < 0)
    operator delete(__p);
  AMCP::Wire_Identifier::~Wire_Identifier(&a55);
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::~__hash_table(v56 - 216);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Graph::calculate_tgid_and_connect(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::string::size_type v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  std::string::size_type size;
  std::string::size_type v31;
  int v32;
  std::string *v33;
  std::string *p_s1;
  int v35;
  std::string *v36;
  void *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  NSObject *v40;
  _opaque_pthread_t *v41;
  mach_port_t v42;
  void *v43;
  int v44;
  std::string *v45;
  int v46;
  int v47;
  std::string *v48;
  uint64_t *i;
  std::string *v50;
  size_t v51;
  std::string::size_type v52;
  uint64_t v53;
  void **v54;
  int v55;
  int v56;
  int v57;
  int v58;
  BOOL v60;
  _BOOL4 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  AMCP::Log::Scope_Registry *v65;
  void **v66;
  NSObject *v67;
  _opaque_pthread_t *v68;
  mach_port_t v69;
  void *exception;
  NSObject *v71;
  _opaque_pthread_t *v72;
  mach_port_t v73;
  void *v74;
  NSObject *v75;
  _opaque_pthread_t *v76;
  mach_port_t v77;
  void *v78;
  std::string v79;
  std::string v80;
  std::string v81;
  unsigned __int8 v82;
  std::logic_error_vtbl **v83;
  uint64_t *v84;
  char *v85;
  std::string __s1;
  char v87;
  char *v88;
  char *v89;
  char *v90;
  std::string v91;
  std::string v92;
  uint64_t (**v93)();
  std::string v94;
  std::string v95;
  std::logic_error v96;
  char v97;
  std::string buf;
  __int16 v99;
  _BYTE v100[14];
  void *v101;
  int v102;
  char v103;
  void *v104;
  size_t v105;
  unsigned __int8 v106;
  void *v107;
  void *v108;
  std::__shared_weak_count *v109;
  void *__p;
  void *v111;
  std::string v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  v8 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>((_QWORD *)(a1 + 96), (unsigned __int8 **)a2);
  if (!v8 || !*((_BYTE *)v8 + 504))
  {
    v9 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((_QWORD *)(a1 + 176), (unsigned __int8 *)a2);
    v10 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((_QWORD *)(a1 + 176), (unsigned __int8 *)(a2 + 40));
    if (!v9)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v10);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      v67 = *(NSObject **)buf.__r_.__value_.__l.__data_;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      {
        v68 = pthread_self();
        v69 = pthread_mach_thread_np(v68);
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v69;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
        WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf.__r_.__value_.__r.__words[2]) = 607;
        v99 = 2080;
        *(_QWORD *)v100 = "not (has_src)";
        _os_log_error_impl(&dword_1B57BA000, v67, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Origins must have source nodes", (uint8_t *)&buf, 0x22u);
      }
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Origins must have source nodes", (uint64_t)&__s1);
      std::logic_error::logic_error((std::logic_error *)&v95, &__s1);
      v95.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error((std::logic_error *)&v112, (const std::logic_error *)&v95);
      v113 = 0;
      v114 = 0;
      v115 = 0;
      v116 = -1;
      v112.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
      v112.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v112);
      *(_QWORD *)&v100[6] = "void AMCP::Graph::Graph::calculate_tgid_and_connect(Wire_Identifier, const std::set<Wire_Ide"
                            "ntifier> &, Resource_Counts &)";
      v101 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
      v102 = 607;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v81.__r_.__value_.__l.__data_);
      v94 = v81;
      v93 = off_1E69A20A0;
      memset(&v81, 0, sizeof(v81));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v93);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&buf);
    }
    if (v10)
    {
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7
                            * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v9 + 5) + 64)
                                       - *(_QWORD *)(*((_QWORD *)v9 + 5) + 56)) >> 4)) > *(_QWORD *)(a2 + 24))
      {
        v11 = *((_QWORD *)v10 + 5);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v11 + 88) - *(_QWORD *)(v11 + 80)) >> 4)) > *(_QWORD *)(a2 + 64))
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
          v112.__r_.__value_.__r.__words[0] = *((_QWORD *)v10 + 5);
          v112.__r_.__value_.__l.__size_ = (std::string::size_type)v12;
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldxr(p_shared_owners);
            while (__stxr(v14 + 1, p_shared_owners));
          }
          v88 = 0;
          v89 = 0;
          v90 = 0;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
          buf.__r_.__value_.__s.__data_[8] = 0;
          v15 = (char *)operator new(0x10uLL);
          v88 = v15;
          v89 = v15;
          v90 = v15 + 16;
          *(_QWORD *)v15 = v11;
          *((_QWORD *)v15 + 1) = v12;
          if (v12)
          {
            v16 = (unint64_t *)&v12->__shared_owners_;
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
            v89 = v15 + 16;
            do
              v18 = __ldaxr(v16);
            while (__stlxr(v18 - 1, v16));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          else
          {
            v89 = v15 + 16;
          }
          AMCP::Graph::Graph::get_thread_group_id_from_upstream(&__s1, (_QWORD *)a1, a2, &v88);
          v20 = *((_QWORD *)v9 + 5);
          v19 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
          v112.__r_.__value_.__r.__words[0] = v20;
          v112.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
          if (v19)
          {
            v21 = (unint64_t *)&v19->__shared_owners_;
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v83 = 0;
          v84 = 0;
          v85 = 0;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
          buf.__r_.__value_.__s.__data_[8] = 0;
          v23 = (char *)operator new(0x10uLL);
          v83 = (std::logic_error_vtbl **)v23;
          v84 = (uint64_t *)v23;
          v85 = v23 + 16;
          *(_QWORD *)v23 = v20;
          *((_QWORD *)v23 + 1) = v19;
          if (v19)
          {
            v24 = (unint64_t *)&v19->__shared_owners_;
            do
              v25 = __ldxr(v24);
            while (__stxr(v25 + 1, v24));
            v84 = (uint64_t *)(v23 + 16);
            do
              v26 = __ldaxr(v24);
            while (__stlxr(v26 - 1, v24));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          else
          {
            v84 = (uint64_t *)(v23 + 16);
          }
          AMCP::Graph::Graph::get_thread_group_id_from_downstream(&v81, (_QWORD *)a1, a2, &v83, a3);
          v27 = v82;
          if (v87)
          {
            if (v82)
            {
              v28 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
              v29 = SHIBYTE(__s1.__r_.__value_.__r.__words[2]);
              if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
              else
                size = __s1.__r_.__value_.__l.__size_;
              v31 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
              v32 = SHIBYTE(v81.__r_.__value_.__r.__words[2]);
              if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v31 = v81.__r_.__value_.__l.__size_;
              if (size != v31)
                goto LABEL_53;
              if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v33 = &v81;
              else
                v33 = (std::string *)v81.__r_.__value_.__r.__words[0];
              if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              {
                if (memcmp(__s1.__r_.__value_.__l.__data_, v33, __s1.__r_.__value_.__l.__size_))
                  goto LABEL_53;
              }
              else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
              {
                p_s1 = &__s1;
                while (p_s1->__r_.__value_.__s.__data_[0] == v33->__r_.__value_.__s.__data_[0])
                {
                  p_s1 = (std::string *)((char *)p_s1 + 1);
                  v33 = (std::string *)((char *)v33 + 1);
                  if (!--v28)
                    goto LABEL_60;
                }
LABEL_53:
                v38 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((_QWORD *)(a1 + 176), (unsigned __int8 *)&__s1);
                v39 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((_QWORD *)(a1 + 176), (unsigned __int8 *)&v81);
                if (v38)
                {
                  if (*(_DWORD *)(*((_QWORD *)v38 + 5) + 16))
                  {
                    if (v39)
                    {
                      if (*(_DWORD *)(*((_QWORD *)v39 + 5) + 16))
                      {
                        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v39);
                        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
                        v40 = *(NSObject **)buf.__r_.__value_.__l.__data_;
                        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
                        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
                        {
                          v41 = pthread_self();
                          v42 = pthread_mach_thread_np(v41);
                          LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
                          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v42;
                          LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
                          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
                          WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
                          HIDWORD(buf.__r_.__value_.__r.__words[2]) = 661;
                          v99 = 2080;
                          *(_QWORD *)v100 = "not (found_upstream_group_origin == m_nodes_by_uid.end() || found_downstream"
                                            "_group_origin == m_nodes_by_uid.end())";
                          _os_log_error_impl(&dword_1B57BA000, v40, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Unable to overwrite either upstream or downstream tgids", (uint8_t *)&buf, 0x22u);
                        }
                        v43 = __cxa_allocate_exception(0x40uLL);
                        caulk::make_string((caulk *)"Unable to overwrite either upstream or downstream tgids", (uint64_t)&v95);
                        std::logic_error::logic_error((std::logic_error *)&v91, &v95);
                        v91.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
                        std::logic_error::logic_error((std::logic_error *)&v112, (const std::logic_error *)&v91);
                        v113 = 0;
                        v114 = 0;
                        v115 = 0;
                        v116 = -1;
                        v112.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
                        v112.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
                        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v112);
                        *(_QWORD *)&v100[6] = "void AMCP::Graph::Graph::calculate_tgid_and_connect(Wire_Identifier, const"
                                              " std::set<Wire_Identifier> &, Resource_Counts &)";
                        v101 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
                        v102 = 661;
                        applesauce::backtrace::snapshot_N<64>::snapshot_N(&v92.__r_.__value_.__l.__data_);
                        v94 = v92;
                        v93 = off_1E69A20A0;
                        memset(&v92, 0, sizeof(v92));
                        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v93);
                        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v43, (uint64_t)&buf);
                      }
                      goto LABEL_62;
                    }
                  }
                  else if (v39 && !*(_DWORD *)(*((_QWORD *)v39 + 5) + 16))
                  {
                    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v39);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
                    v75 = *(NSObject **)buf.__r_.__value_.__l.__data_;
                    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
                    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
                    {
                      v76 = pthread_self();
                      v77 = pthread_mach_thread_np(v76);
                      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
                      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v77;
                      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
                      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
                      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
                      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 653;
                      v99 = 2080;
                      *(_QWORD *)v100 = "not (found_downstream_group_origin == m_nodes_by_uid.end() || found_downstream_g"
                                        "roup_origin->second->get_node_type() != Node_Type::IOContext)";
                      _os_log_error_impl(&dword_1B57BA000, v75, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Cannot have two IOCs in group", (uint8_t *)&buf, 0x22u);
                    }
                    v78 = __cxa_allocate_exception(0x40uLL);
                    caulk::make_string((caulk *)"Cannot have two IOCs in group", (uint64_t)&v95);
                    std::logic_error::logic_error((std::logic_error *)&v91, &v95);
                    v91.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
                    std::logic_error::logic_error((std::logic_error *)&v112, (const std::logic_error *)&v91);
                    v113 = 0;
                    v114 = 0;
                    v115 = 0;
                    v116 = -1;
                    v112.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
                    v112.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
                    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v112);
                    *(_QWORD *)&v100[6] = "void AMCP::Graph::Graph::calculate_tgid_and_connect(Wire_Identifier, const std"
                                          "::set<Wire_Identifier> &, Resource_Counts &)";
                    v101 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
                    v102 = 653;
                    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v92.__r_.__value_.__l.__data_);
                    v94 = v92;
                    v93 = off_1E69A20A0;
                    memset(&v92, 0, sizeof(v92));
                    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v93);
                    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v78, (uint64_t)&buf);
                  }
                }
                else if (v39)
                {
LABEL_62:
                  v44 = 0;
                  v45 = &v81;
                  v46 = v32;
LABEL_66:
                  if (v46 < 0)
                    std::string::__init_copy_ctor_external(&v80, v45->__r_.__value_.__l.__data_, v45->__r_.__value_.__l.__size_);
                  else
                    v80 = *v45;
                  if (v44)
                    v47 = v32;
                  else
                    v47 = v29;
                  v48 = &__s1;
                  if (v44)
                    v48 = &v81;
                  if (v47 < 0)
                    std::string::__init_copy_ctor_external(&v79, v48->__r_.__value_.__l.__data_, v48->__r_.__value_.__l.__size_);
                  else
                    v79 = *v48;
                  for (i = *(uint64_t **)(a1 + 112); i; i = (uint64_t *)*i)
                  {
                    if (*((_BYTE *)i + 504))
                    {
                      AMCP::Graph::Graph_Wire::Connection::Connection(&buf, (const AMCP::Graph::Graph_Wire::Connection *)(i + 36));
                      if ((v106 & 0x80u) == 0)
                        v51 = v106;
                      else
                        v51 = v105;
                      v52 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
                      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v52 = v79.__r_.__value_.__l.__size_;
                      if (v51 == v52)
                      {
                        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v50 = &v79;
                        else
                          v50 = (std::string *)v79.__r_.__value_.__r.__words[0];
                        if ((v106 & 0x80) != 0)
                        {
                          v61 = memcmp(v104, v50, v105) == 0;
                        }
                        else if (v106)
                        {
                          v53 = v106 - 1;
                          v54 = &v104;
                          do
                          {
                            v56 = *(unsigned __int8 *)v54;
                            v54 = (void **)((char *)v54 + 1);
                            v55 = v56;
                            v58 = v50->__r_.__value_.__s.__data_[0];
                            v50 = (std::string *)((char *)v50 + 1);
                            v57 = v58;
                            v60 = v53-- != 0;
                            v61 = v55 == v57;
                          }
                          while (v55 == v57 && v60);
                        }
                        else
                        {
                          v61 = 1;
                        }
                      }
                      else
                      {
                        v61 = 0;
                      }
                      if (__p)
                      {
                        v111 = __p;
                        operator delete(__p);
                      }
                      v62 = v109;
                      if (v109)
                      {
                        v63 = (unint64_t *)&v109->__shared_owners_;
                        do
                          v64 = __ldaxr(v63);
                        while (__stlxr(v64 - 1, v63));
                        if (!v64)
                        {
                          ((void (*)(std::__shared_weak_count *, std::string *))v62->__on_zero_shared)(v62, v50);
                          std::__shared_weak_count::__release_weak(v62);
                        }
                      }
                      v65 = (AMCP::Log::Scope_Registry *)v107;
                      if (v107)
                      {
                        v108 = v107;
                        operator delete(v107);
                      }
                      if ((char)v106 < 0)
                        operator delete(v104);
                      if (v103 < 0)
                        operator delete(v101);
                      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(buf.__r_.__value_.__l.__data_);
                        if (v61)
                        {
LABEL_117:
                          if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
                            std::string::__init_copy_ctor_external(&v91, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
                          else
                            v91 = v80;
                          if (!*((_BYTE *)i + 504))
                          {
                            AMCP::Log::Scope_Registry::get(v65);
                            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
                            v71 = *(NSObject **)buf.__r_.__value_.__l.__data_;
                            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
                            if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
                            {
                              v72 = pthread_self();
                              v73 = pthread_mach_thread_np(v72);
                              LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
                              HIDWORD(buf.__r_.__value_.__r.__words[0]) = v73;
                              LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
                              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Wire.cpp";
                              WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
                              HIDWORD(buf.__r_.__value_.__r.__words[2]) = 98;
                              v99 = 2080;
                              *(_QWORD *)v100 = "not (m_connection.has_value())";
                              _os_log_error_impl(&dword_1B57BA000, v71, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Cannot update a connection that does not exist", (uint8_t *)&buf, 0x22u);
                            }
                            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v97);
                            v74 = __cxa_allocate_exception(0x40uLL);
                            caulk::make_string((caulk *)"Cannot update a connection that does not exist", (uint64_t)&v95);
                            std::logic_error::logic_error(&v96, &v95);
                            v96.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
                            std::logic_error::logic_error((std::logic_error *)&v112, &v96);
                            v113 = 0;
                            v114 = 0;
                            v115 = 0;
                            v116 = -1;
                            v112.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
                            v112.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
                            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v112);
                            *(_QWORD *)&v100[6] = "void AMCP::Graph::Graph_Wire::update_tgid(Thread_Group_ID)";
                            v101 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Wire.cpp";
                            v102 = 98;
                            applesauce::backtrace::snapshot_N<64>::snapshot_N(&v92.__r_.__value_.__l.__data_);
                            v94 = v92;
                            v93 = off_1E69A20A0;
                            memset(&v92, 0, sizeof(v92));
                            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v93);
                            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v74, (uint64_t)&buf);
                          }
                          v66 = (void **)(i + 46);
                          if (*((char *)i + 391) < 0)
                            operator delete(*v66);
                          *(_OWORD *)v66 = *(_OWORD *)&v91.__r_.__value_.__l.__data_;
                          i[48] = v91.__r_.__value_.__r.__words[2];
                          *((_BYTE *)&v91.__r_.__value_.__s + 23) = 0;
                          v91.__r_.__value_.__s.__data_[0] = 0;
                        }
                      }
                      else if (v61)
                      {
                        goto LABEL_117;
                      }
                    }
                  }
                  AMCP::Graph::Graph::connect_path<std::reverse_iterator<std::__wrap_iter<std::shared_ptr<AMCP::Graph::Node> *>>>((_QWORD *)a1, (uint64_t)&v80, (uint64_t)v89, (uint64_t)v89, (uint64_t)v88, (uint64_t)v88, a3, a4);
                  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v79.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v80.__r_.__value_.__l.__data_);
                  v27 = v82;
                  goto LABEL_130;
                }
                v45 = &__s1;
                v44 = 1;
                v46 = v29;
                goto LABEL_66;
              }
            }
LABEL_60:
            AMCP::Graph::Graph::connect_path<std::reverse_iterator<std::__wrap_iter<std::shared_ptr<AMCP::Graph::Node> *>>>((_QWORD *)a1, (uint64_t)&__s1, (uint64_t)v89, (uint64_t)v89, (uint64_t)v88, (uint64_t)v88, a3, a4);
          }
          else
          {
            if (!v82)
            {
              v35 = *(_DWORD *)(a1 + 8);
              *(_DWORD *)(a1 + 8) = v35 + 1;
              std::to_string(&v112, v35);
              v36 = std::string::insert(&v112, 0, "Arbitrary_TGID_", 0xFuLL);
              buf = *v36;
              v36->__r_.__value_.__l.__size_ = 0;
              v36->__r_.__value_.__r.__words[2] = 0;
              v36->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v112.__r_.__value_.__l.__data_);
              AMCP::Graph::Graph::connect_path<std::reverse_iterator<std::__wrap_iter<std::shared_ptr<AMCP::Graph::Node> *>>>((_QWORD *)a1, (uint64_t)&buf, (uint64_t)v89, (uint64_t)v89, (uint64_t)v88, (uint64_t)v88, a3, a4);
              if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_134;
              v37 = (void *)buf.__r_.__value_.__r.__words[0];
              goto LABEL_133;
            }
            AMCP::Graph::Graph::connect_path<std::__wrap_iter<std::shared_ptr<AMCP::Graph::Node> *>>((_QWORD *)a1, (uint64_t)&v81, (uint64_t *)v83, v84, a3, a4);
            v27 = 1;
          }
LABEL_130:
          if (!v27 || (SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_134;
          v37 = (void *)v81.__r_.__value_.__r.__words[0];
LABEL_133:
          operator delete(v37);
LABEL_134:
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
          std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
          if (v87)
          {
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s1.__r_.__value_.__l.__data_);
          }
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
          std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        }
      }
    }
  }
}

void sub_1B5AD5BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,__int16 a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35)
{
  uint64_t v35;

  if (a22 < 0)
    operator delete(__p);
  *(_QWORD *)(v35 - 144) = &a24;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 144));
  if (a33)
  {
    if (a32 < 0)
      operator delete(a27);
  }
  *(_QWORD *)(v35 - 144) = &a35;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 144));
  _Unwind_Resume(a1);
}

void AMCP::Graph::Graph::connect_path<std::__wrap_iter<std::shared_ptr<AMCP::Graph::Node> *>>(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t *v11;
  uint64_t *v12;
  std::string __p;

  if (a3 + 2 != a4)
  {
    v11 = a3;
    do
    {
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        __p = *(std::string *)a2;
      AMCP::Graph::Graph::connect_nodes(a1, v11, v11 + 2, (const std::string::value_type *)&__p, a6);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      a3 = v11 + 2;
      v12 = v11 + 4;
      v11 += 2;
    }
    while (v12 != a4);
  }
  AMCP::Graph::Graph::connect_downstream_nodes(a1, a2, a3, a5, a6);
}

void sub_1B5AD60F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Graph::connect_path<std::reverse_iterator<std::__wrap_iter<std::shared_ptr<AMCP::Graph::Node> *>>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v10;
  uint64_t v14;
  std::string __p;

  v10 = a4;
  if (a4 - 16 != a6)
  {
    v14 = a4;
    do
    {
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        __p = *(std::string *)a2;
      v10 = v14 - 16;
      AMCP::Graph::Graph::connect_nodes(a1, (uint64_t *)(v14 - 16), (uint64_t *)(v14 - 32), (const std::string::value_type *)&__p, a8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v14 -= 16;
    }
    while (v10 - 16 != a6);
  }
  AMCP::Graph::Graph::connect_downstream_nodes(a1, a2, (uint64_t *)(v10 - 16), a7, a8);
}

void sub_1B5AD61EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__tree<AMCP::Wire_Identifier>::__emplace_unique_key_args<AMCP::Wire_Identifier,AMCP::Wire_Identifier>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t **v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD v16[2];
  char v17;
  uint64_t v18;

  v5 = (uint64_t **)std::__tree<AMCP::Wire_Identifier>::__find_equal<AMCP::Wire_Identifier>(a1, &v18, a2);
  if (!*v5)
  {
    v6 = v5;
    v7 = operator new(0x70uLL);
    v16[1] = a1 + 8;
    v7[2] = *(_OWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v8 = *(_QWORD *)(a3 + 16);
    v9 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = 0;
    *((_QWORD *)v7 + 6) = v8;
    *((_QWORD *)v7 + 7) = v9;
    *((_DWORD *)v7 + 16) = *(_DWORD *)(a3 + 32);
    v10 = *(_OWORD *)(a3 + 40);
    v11 = *(_QWORD *)(a3 + 56);
    v12 = *(_QWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *((_DWORD *)v7 + 26) = *(_DWORD *)(a3 + 72);
    *(_OWORD *)((char *)v7 + 72) = v10;
    *((_QWORD *)v7 + 11) = v11;
    *((_QWORD *)v7 + 12) = v12;
    v17 = 1;
    v13 = v18;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v13;
    *v6 = (uint64_t *)v7;
    v14 = **(_QWORD **)a1;
    if (v14)
    {
      *(_QWORD *)a1 = v14;
      v15 = *v6;
    }
    else
    {
      v15 = (uint64_t *)v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v15);
    ++*(_QWORD *)(a1 + 16);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<AMCP::Wire_Identifier,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<AMCP::Wire_Identifier,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
  }
}

void std::__tree<AMCP::Wire_Identifier>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<AMCP::Wire_Identifier>::destroy(*a1);
    std::__tree<AMCP::Wire_Identifier>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<AMCP::Wire_Identifier,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

_QWORD *std::__tree<AMCP::Wire_Identifier>::__find_equal<AMCP::Wire_Identifier>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a3 + 40;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        v10 = (uint64_t)(v4 + 9);
        if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(a3, v7, (uint64_t)(v4 + 4), (uint64_t)(v4 + 9)) & 0x80) == 0)break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v9, v10, a3, v7) & 0x80) == 0)break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void std::unique_ptr<std::__tree_node<AMCP::Wire_Identifier,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<AMCP::Wire_Identifier,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<AMCP::Wire_Identifier,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::deque<std::shared_ptr<AMCP::Graph::Node>>::push_back(_QWORD *a1, __int128 *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t i;
  _QWORD *v79;
  char *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  __int128 v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = 32 * (v4 - v5) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x100)
    {
      a1[4] = v9 - 256;
      v13 = *(_QWORD *)v5;
      v11 = v5 + 8;
      v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1)
            v42 = 1;
          else
            v42 = (uint64_t)&v4[-*a1] >> 2;
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v42);
          v45 = &v43[8 * (v42 >> 2)];
          v46 = (uint64_t *)a1[1];
          v4 = v45;
          v47 = a1[2] - (_QWORD)v46;
          if (v47)
          {
            v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            v48 = 8 * (v47 >> 3);
            v49 = &v43[8 * (v42 >> 2)];
            do
            {
              v50 = *v46++;
              *(_QWORD *)v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v4 - v11;
          if (v4 == v11)
          {
            v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            v23 = (char *)a1[1];
          }
          v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v8 = a1[5];
      v10 = v8 + a1[4];
      goto LABEL_84;
    }
    v24 = v6 >> 3;
    v25 = (char *)a1[3];
    v26 = (char *)*a1;
    v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5)
            v52 = 1;
          else
            v52 = v27 >> 2;
          v53 = 2 * v52;
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v52);
          v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          v56 = (uint64_t *)a1[1];
          v57 = v5;
          v58 = a1[2] - (_QWORD)v56;
          if (v58)
          {
            v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            v59 = 8 * (v58 >> 3);
            v60 = v5;
            do
            {
              v61 = *v56++;
              *(_QWORD *)v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v29;
        v63 = (char *)a1[1];
        v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        v65 = *((_QWORD *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1)
              v100 = 1;
            else
              v100 = (uint64_t)&v64[-*a1] >> 2;
            v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v100);
            v103 = &v101[8 * (v100 >> 2)];
            v104 = (uint64_t *)a1[1];
            v64 = v103;
            v105 = a1[2] - (_QWORD)v104;
            if (v105)
            {
              v64 = &v103[v105 & 0xFFFFFFFFFFFFFFF8];
              v106 = 8 * (v105 >> 3);
              v107 = &v101[8 * (v100 >> 2)];
              do
              {
                v108 = *v104++;
                *(_QWORD *)v107 = v108;
                v107 += 8;
                v106 -= 8;
              }
              while (v106);
            }
            v109 = (char *)*a1;
            *a1 = v101;
            a1[1] = v103;
            a1[2] = v64;
            a1[3] = &v101[8 * v102];
            if (v109)
            {
              operator delete(v109);
              v64 = (char *)a1[2];
            }
          }
          else
          {
            v67 = v66 >> 3;
            v16 = v66 >> 3 < -1;
            v68 = (v66 >> 3) + 2;
            if (v16)
              v69 = v68;
            else
              v69 = v67 + 1;
            v70 = -(v69 >> 1);
            v71 = v69 >> 1;
            v72 = &v63[-8 * v71];
            v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              v63 = (char *)a1[1];
            }
            v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(_QWORD *)v64 = v65;
      }
      else
      {
        *(_QWORD *)v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26)
      v30 = 1;
    else
      v30 = v27 >> 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v30);
    v33 = v32;
    v34 = &v31[8 * v24];
    *(_QWORD *)&v35 = v31;
    *((_QWORD *)&v35 + 1) = v34;
    v113 = v35;
    v36 = operator new(0x1000uLL);
    *(_QWORD *)&v37 = v34;
    *((_QWORD *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      v38 = 8 * v24;
      *(_QWORD *)&v39 = v113;
      if (v6 >= 1)
      {
        v40 = v38 >> 3;
        if (v40 >= -1)
          v41 = v40 + 1;
        else
          v41 = v40 + 2;
        v34 -= 8 * (v41 >> 1);
        *(_QWORD *)&v37 = v34;
        *((_QWORD *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      v74 = v38 >> 2;
      if (v4 == v5)
        v75 = 1;
      else
        v75 = v74;
      v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v75);
      v34 = &v76[8 * (v75 >> 2)];
      *(_QWORD *)&v39 = v76;
      *((_QWORD *)&v39 + 1) = v34;
      *(_QWORD *)&v37 = v34;
      *((_QWORD *)&v37 + 1) = &v76[8 * v77];
      if (!v31)
        goto LABEL_56;
      v110 = v37;
      v113 = v39;
      operator delete(v31);
      v37 = v110;
    }
    v39 = v113;
LABEL_56:
    *(_QWORD *)v34 = v36;
    *(_QWORD *)&v37 = v37 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v79 = (_QWORD *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      {
        v81 = (_BYTE *)v37;
        if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
        {
          if (*((_QWORD *)&v37 + 1) == *((_QWORD *)&v39 + 1))
            v86 = 1;
          else
            v86 = (uint64_t)(*((_QWORD *)&v37 + 1) - *((_QWORD *)&v39 + 1)) >> 2;
          v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v86);
          v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          v89 = v80;
          v90 = v81 - (_BYTE *)v79;
          if (v81 != (_BYTE *)v79)
          {
            v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            v91 = 8 * (v90 >> 3);
            v92 = v80;
            v93 = v79;
            do
            {
              v94 = *v93++;
              *(_QWORD *)v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(_QWORD *)&v39 = v87;
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = v89;
          *((_QWORD *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            v111 = v37;
            v115 = v39;
            operator delete(v79);
            v37 = v111;
            v39 = v115;
          }
        }
        else
        {
          v82 = (uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1)
            v83 = v82 + 1;
          else
            v83 = v82 + 2;
          v84 = v83 >> 1;
          v85 = v37 + 8 * (v83 >> 1);
          v80 = (char *)(v85 - (v37 - *((_QWORD *)&v39 + 1)));
          if ((_QWORD)v37 == *((_QWORD *)&v39 + 1))
          {
            v81 = (_BYTE *)*((_QWORD *)&v39 + 1);
          }
          else
          {
            v112 = *((_QWORD *)&v37 + 1);
            v114 = v39;
            memmove((void *)(v85 - (v37 - *((_QWORD *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((_QWORD *)&v39 + 1));
            *((_QWORD *)&v37 + 1) = v112;
            *(_QWORD *)&v39 = v114;
          }
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = &v81[8 * v84];
        }
      }
      else
      {
        v80 = (char *)*((_QWORD *)&v39 + 1);
      }
      v95 = *(_QWORD *)(i - 8);
      *((_QWORD *)v80 - 1) = v95;
      *((_QWORD *)&v39 + 1) -= 8;
    }
    v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96)
      operator delete(v96);
    goto LABEL_83;
  }
LABEL_84:
  v97 = *a2;
  *(_OWORD *)(*(_QWORD *)&v5[(v10 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v10) = *a2;
  if (*((_QWORD *)&v97 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
    v8 = a1[5];
  }
  a1[5] = v8 + 1;
}

void sub_1B5AD6998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void std::__tree<std::shared_ptr<AMCP::Graph::Node>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::shared_ptr<AMCP::Graph::Node>>::destroy(*a1);
    std::__tree<std::shared_ptr<AMCP::Graph::Node>>::destroy(a1[1]);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::deque<std::shared_ptr<AMCP::Graph::Node>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6 + 16 * v5;
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(_BYTE *)(a1 + 40) + v5);
    if (v7 != v8)
    {
      do
      {
        v7 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v7) + 16;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 128;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 256;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void AMCP::Graph::Graph::find_nodes_connected_to_context(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::string::size_type v18;
  std::logic_error_vtbl *v19;
  void (__cdecl *v20)(std::logic_error *__hidden);
  _OWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t **v24;
  char v25;
  uint64_t *v26;
  std::string::size_type v27;
  AMCP::Log::Scope_Registry *v28;
  AMCP::Log::Scope_Registry *v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  std::string::size_type size;
  uint64_t v34;
  int v35;
  unsigned __int8 *v36;
  std::string *p_s1;
  std::__shared_weak_count *v38;
  NSObject *v39;
  unint64_t *v40;
  unint64_t v41;
  char **v42;
  char **v43;
  char *v44;
  void (**v45)();
  _opaque_pthread_t *v46;
  mach_port_t v47;
  unsigned __int8 *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  NSObject *v52;
  unint64_t *v53;
  unint64_t v54;
  _opaque_pthread_t *v55;
  mach_port_t v56;
  unsigned __int8 *v57;
  std::logic_error *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  std::logic_error v63;
  unsigned __int8 *v64;
  uint64_t v65;
  NSObject *v66;
  _opaque_pthread_t *v67;
  mach_port_t v68;
  void *exception;
  NSObject *v70;
  _opaque_pthread_t *v71;
  mach_port_t v72;
  _QWORD *v73;
  void *v74;
  _QWORD *v75;
  uint64_t v76;
  void *__p;
  std::__shared_weak_count *v78;
  _DWORD *v79;
  uint64_t v80;
  _DWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unsigned int v87;
  const char *imp;
  unsigned __int8 *v90;
  __int128 v91;
  uint64_t v92;
  std::string v93;
  uint64_t v94;
  std::string v95;
  std::logic_error v96;
  void (**v97)();
  std::string v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  std::string __s1;
  std::string v103;
  uint64_t v104;
  int v105;
  std::string v106;
  uint64_t v107;
  int v108;
  std::string v109;
  std::logic_error v110;
  std::string::size_type v111;
  _QWORD *v112;
  void *v113;
  uint64_t v114;
  uint64_t **v115;
  uint64_t *v116;
  uint64_t v117;
  std::string v118;
  std::string v119;
  _QWORD v120[3];
  int v121;
  std::string v122;
  _BYTE v123[40];
  uint64_t v124;
  int v125;
  uint64_t v126;

  v5 = (_QWORD *)a1;
  v126 = *MEMORY[0x1E0C80C00];
  v117 = 0;
  v116 = 0;
  v115 = &v116;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if ((char)a3[23] < 0)
    std::string::__init_copy_ctor_external(&v122, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  else
    v122 = *(std::string *)a3;
  v112 = &v112;
  v113 = &v112;
  v114 = 0;
  v6 = std::__list_imp<std::string>::__create_node[abi:ne180100]<std::string const&>((uint64_t)&v122);
  v7 = v112;
  *v6 = v112;
  v6[1] = &v112;
  v7[1] = v6;
  v8 = v114 + 1;
  v112 = v6;
  ++v114;
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v122.__r_.__value_.__l.__data_);
    v8 = v114;
  }
  v90 = a3;
  v76 = a2;
  if (!v8)
  {
    v86 = 0;
    goto LABEL_133;
  }
  v85 = (_QWORD *)(a2 + 176);
  v86 = 0;
  v82 = (_QWORD *)(a2 + 56);
  do
  {
    v9 = (void **)v113;
    if (*((char *)v113 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v118, *((const std::string::value_type **)v113 + 2), *((_QWORD *)v113 + 3));
      v9 = (void **)v113;
      v8 = v114;
    }
    else
    {
      v118 = *(std::string *)((char *)v113 + 16);
    }
    v10 = *v9;
    v10[1] = v9[1];
    *(_QWORD *)v9[1] = v10;
    v114 = v8 - 1;
    std::__list_imp<std::string>::__delete_node[abi:ne180100]<>(v9);
    if (!std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v85, (unsigned __int8 *)&v118)|| std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v5, (unsigned __int8 *)&v118))
    {
      goto LABEL_13;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v5, (unsigned __int8 *)&v118, (uint64_t)&v118);
    v11 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v85, (unsigned __int8 *)&v118);
    if (!v11)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v12 = *((_QWORD *)v11 + 5);
    v78 = (std::__shared_weak_count *)*((_QWORD *)v11 + 6);
    if (v78)
    {
      p_shared_owners = (unint64_t *)&v78->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    if (!v12)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v11);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v122, "com.apple.coreaudio", "AMCP");
      v66 = *(NSObject **)v122.__r_.__value_.__l.__data_;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v122);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
      {
        v67 = pthread_self();
        v68 = pthread_mach_thread_np(v67);
        LODWORD(v122.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v122.__r_.__value_.__r.__words[0]) = v68;
        LOWORD(v122.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v122.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
        WORD1(v122.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v122.__r_.__value_.__r.__words[2]) = 884;
        *(_WORD *)v123 = 2080;
        *(_QWORD *)&v123[2] = "not (n)";
        _os_log_error_impl(&dword_1B57BA000, v66, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v122, 0x22u);
      }
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v93);
      std::logic_error::logic_error((std::logic_error *)&__s1, &v93);
      __s1.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error((std::logic_error *)&v119, (const std::logic_error *)&__s1);
      memset(v120, 0, sizeof(v120));
      v121 = -1;
      v119.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
      v119.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v122, (uint64_t)&v119);
      *(_QWORD *)&v123[8] = "std::unordered_set<Graph_Node_UID> AMCP::Graph::Graph::find_nodes_connected_to_context(const"
                            " Graph_Node_UID &) const";
      *(_QWORD *)&v123[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
      *(_DWORD *)&v123[24] = 884;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v110);
      v97 = (void (**)())off_1E69A20A0;
      *(std::logic_error *)&v98.__r_.__value_.__l.__data_ = v110;
      v98.__r_.__value_.__r.__words[2] = v111;
      v110.__vftable = 0;
      v110.__imp_.__imp_ = 0;
      v111 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v122, (uint64_t)&v97);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&v122);
    }
    v15 = operator new(4uLL);
    *v15 = 0;
    v79 = v15 + 1;
    if (*(_DWORD *)(v12 + 16) <= 1u)
    {
      operator delete(v15);
      v15 = operator new(8uLL);
      *(_QWORD *)v15 = 0x100000000;
      v79 = v15 + 2;
    }
    v80 = v12 + 56;
    __p = v15;
    do
    {
      v81 = v15;
      v87 = *v15;
      v16 = *(_QWORD *)(v80 + 24 * v87 + 8) - *(_QWORD *)(v80 + 24 * v87);
      if (v16)
      {
        v17 = 0;
        v83 = 0x6DB6DB6DB6DB6DB7 * (v16 >> 4);
        while (1)
        {
          if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v109, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
          else
            v109 = v118;
          *(_OWORD *)&v122.__r_.__value_.__l.__data_ = *(_OWORD *)&v109.__r_.__value_.__l.__data_;
          v18 = v109.__r_.__value_.__r.__words[2];
          memset(&v109, 0, sizeof(v109));
          v122.__r_.__value_.__r.__words[2] = v18;
          *(_QWORD *)v123 = v17;
          *(_DWORD *)&v123[8] = v87;
          AMCP::Graph::Wire_Index::get_wires_for_terminal(&v110, v82, (unsigned __int8 **)&v122);
          v84 = v17;
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v122.__r_.__value_.__l.__data_);
          v19 = v110.__vftable;
          imp = v110.__imp_.__imp_;
          if (v110.__vftable != (std::logic_error_vtbl *)v110.__imp_.__imp_)
            break;
LABEL_107:
          if (v19)
            operator delete(v19);
          v17 = v84 + 1;
          if (v84 + 1 == v83)
            goto LABEL_110;
        }
        while (1)
        {
          v20 = v19->~logic_error;
          if (*((char *)v19->~logic_error + 23) < 0)
            std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
          else
            v106 = *(std::string *)v20;
          v107 = *((_QWORD *)v20 + 3);
          v108 = *((_DWORD *)v20 + 8);
          v21 = (_OWORD *)((char *)v20 + 40);
          if (*((char *)v20 + 63) < 0)
          {
            std::string::__init_copy_ctor_external(&v103, *((const std::string::value_type **)v20 + 5), *((_QWORD *)v20 + 6));
          }
          else
          {
            *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *v21;
            v103.__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 7);
          }
          v104 = *((_QWORD *)v20 + 8);
          v105 = *((_DWORD *)v20 + 18);
          v122 = v106;
          memset(&v106, 0, sizeof(v106));
          *(_QWORD *)v123 = v107;
          *(_DWORD *)&v123[8] = v108;
          *(std::string *)&v123[16] = v103;
          memset(&v103, 0, sizeof(v103));
          v22 = *((_QWORD *)v20 + 8);
          v125 = *((_DWORD *)v20 + 18);
          v124 = v22;
          v23 = v116;
          if (!v116)
            break;
          v24 = &v116;
          do
          {
            v25 = std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)(v23 + 4), (uint64_t)(v23 + 9), (uint64_t)&v122, (uint64_t)&v123[16]);
            if (v25 >= 0)
              v26 = v23;
            else
              v26 = v23 + 1;
            if (v25 >= 0)
              v24 = (uint64_t **)v23;
            v23 = (uint64_t *)*v26;
          }
          while (*v26);
          if (&v116 == v24
            || (std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)&v122, (uint64_t)&v123[16], (uint64_t)(v24 + 4), (uint64_t)(v24 + 9)) & 0x80) != 0)
          {
            break;
          }
          v5 = (_QWORD *)a1;
LABEL_97:
          if ((v123[39] & 0x80000000) != 0)
            operator delete(*(void **)&v123[16]);
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v122.__r_.__value_.__l.__data_);
          v19 = (std::logic_error_vtbl *)((char *)v19 + 8);
          if (v19 == (std::logic_error_vtbl *)imp)
          {
            v19 = v110.__vftable;
            goto LABEL_107;
          }
        }
        if (v87 == 1)
        {
          v5 = (_QWORD *)a1;
          if (*((char *)v20 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
            goto LABEL_58;
          }
          *(_OWORD *)&v119.__r_.__value_.__l.__data_ = *(_OWORD *)v20;
          v27 = *((_QWORD *)v20 + 2);
        }
        else
        {
          v5 = (_QWORD *)a1;
          if (*((char *)v20 + 63) < 0)
          {
            std::string::__init_copy_ctor_external(&v119, *((const std::string::value_type **)v20 + 5), *((_QWORD *)v20 + 6));
            goto LABEL_58;
          }
          *(_OWORD *)&v119.__r_.__value_.__l.__data_ = *v21;
          v27 = *((_QWORD *)v20 + 7);
        }
        v119.__r_.__value_.__r.__words[2] = v27;
LABEL_58:
        __s1 = v119;
        v28 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v85, (unsigned __int8 *)&__s1);
        v29 = v28;
        if (v28 && *(_DWORD *)(*((_QWORD *)v28 + 5) + 16))
        {
          v28 = (AMCP::Log::Scope_Registry *)std::__list_imp<std::string>::__create_node[abi:ne180100]<std::string const&>((uint64_t)&__s1);
          v30 = v112;
          *(_QWORD *)v28 = v112;
          *((_QWORD *)v28 + 1) = &v112;
          v30[1] = v28;
          v112 = v28;
          ++v114;
        }
        v31 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        v32 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        else
          size = __s1.__r_.__value_.__l.__size_;
        v34 = v90[23];
        v35 = (char)v34;
        if ((v34 & 0x80u) != 0)
          v34 = *((_QWORD *)v90 + 1);
        if (size == v34)
        {
          if (v35 >= 0)
            v36 = v90;
          else
            v36 = *(unsigned __int8 **)v90;
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          {
            v28 = (AMCP::Log::Scope_Registry *)memcmp(__s1.__r_.__value_.__l.__data_, v36, __s1.__r_.__value_.__l.__size_);
            if (!v29 || !(_DWORD)v28)
              goto LABEL_81;
LABEL_80:
            if (!*(_DWORD *)(*((_QWORD *)v29 + 5) + 16))
            {
LABEL_95:
              if (v32 < 0)
                operator delete(__s1.__r_.__value_.__l.__data_);
              goto LABEL_97;
            }
LABEL_81:
            if (*((_BYTE *)v20 + 408))
            {
              ++v86;
            }
            else
            {
              if (!*((_DWORD *)v20 + 32))
              {
                AMCP::Log::Scope_Registry::get(v28);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v119, "com.apple.coreaudio", "AMCP");
                v51 = (std::__shared_weak_count *)v119.__r_.__value_.__l.__size_;
                v52 = *(NSObject **)v119.__r_.__value_.__l.__data_;
                if (v119.__r_.__value_.__l.__size_)
                {
                  v53 = (unint64_t *)(v119.__r_.__value_.__l.__size_ + 8);
                  do
                    v54 = __ldaxr(v53);
                  while (__stlxr(v54 - 1, v53));
                  if (!v54)
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }
                if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
                {
                  v55 = pthread_self();
                  v56 = pthread_mach_thread_np(v55);
                  if ((v90[23] & 0x80u) == 0)
                    v57 = v90;
                  else
                    v57 = *(unsigned __int8 **)v90;
                  LODWORD(v119.__r_.__value_.__l.__data_) = 67110146;
                  HIDWORD(v119.__r_.__value_.__r.__words[0]) = v56;
                  LOWORD(v119.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&v119.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
                  WORD1(v119.__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(v119.__r_.__value_.__r.__words[2]) = 921;
                  LOWORD(v120[0]) = 2080;
                  *(_QWORD *)((char *)v120 + 2) = "not (wire.get_connection_policy() != Wire_Connection_Policy::Connection_Required)";
                  WORD1(v120[1]) = 2080;
                  *(_QWORD *)((char *)&v120[1] + 4) = v57;
                  _os_log_error_impl(&dword_1B57BA000, v52, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Required wire disconnected for context %s.", (uint8_t *)&v119, 0x2Cu);
                }
                v58 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
                if ((v90[23] & 0x80u) == 0)
                  v59 = v90;
                else
                  v59 = *(unsigned __int8 **)v90;
                caulk::make_string((caulk *)"Required wire disconnected for context %s.", (uint64_t)&v95, v59);
                std::logic_error::logic_error(&v96, &v95);
                v60 = MEMORY[0x1E0DE5018];
                v96.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
                std::logic_error::logic_error((std::logic_error *)&v97, &v96);
                v98.__r_.__value_.__r.__words[2] = 0;
                v99 = 0;
                v100 = 0;
                v101 = -1;
                v97 = off_1E69A1208;
                v98.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E69A1230;
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v119, (uint64_t)&v97);
                v120[1] = "std::unordered_set<Graph_Node_UID> AMCP::Graph::Graph::find_nodes_connected_to_context(const G"
                          "raph_Node_UID &) const";
                v120[2] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
                v121 = 921;
                std::vector<void *>::vector(&v91);
                v61 = backtrace((void **)v91, (*((_QWORD *)&v91 + 1) - (_QWORD)v91) >> 3);
                std::vector<void *>::resize((char **)&v91, v61);
                v93.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
                *(_OWORD *)&v93.__r_.__value_.__r.__words[1] = v91;
                v94 = v92;
                v91 = 0uLL;
                v92 = 0;
                boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v119, (uint64_t)&v93);
                v58[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
                std::logic_error::logic_error(v58, (const std::logic_error *)&v119);
                v58->__vftable = (std::logic_error_vtbl *)(v60 + 16);
                v58[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
                v62 = v120[0];
                v58[1].__imp_.__imp_ = (const char *)v120[0];
                if (v62)
                  (*(void (**)(uint64_t))(*(_QWORD *)v62 + 24))(v62);
                v63 = *(std::logic_error *)&v120[1];
                LODWORD(v58[3].__vftable) = v121;
                v58[2] = v63;
                v58->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
                v58[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
                v58[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
              }
              AMCP::Log::Scope_Registry::get(v28);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v119, "com.apple.coreaudio", "AMCP");
              v38 = (std::__shared_weak_count *)v119.__r_.__value_.__l.__size_;
              v39 = *(NSObject **)v119.__r_.__value_.__l.__data_;
              if (v119.__r_.__value_.__l.__size_)
              {
                v40 = (unint64_t *)(v119.__r_.__value_.__l.__size_ + 8);
                do
                  v41 = __ldaxr(v40);
                while (__stlxr(v41 - 1, v40));
                if (!v41)
                {
                  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                  std::__shared_weak_count::__release_weak(v38);
                }
              }
              if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
              {
                v46 = pthread_self();
                v47 = pthread_mach_thread_np(v46);
                if ((v90[23] & 0x80u) == 0)
                  v48 = v90;
                else
                  v48 = *(unsigned __int8 **)v90;
                LODWORD(v119.__r_.__value_.__l.__data_) = 67109890;
                HIDWORD(v119.__r_.__value_.__r.__words[0]) = v47;
                LOWORD(v119.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v119.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
                WORD1(v119.__r_.__value_.__r.__words[2]) = 1024;
                HIDWORD(v119.__r_.__value_.__r.__words[2]) = 922;
                LOWORD(v120[0]) = 2080;
                *(_QWORD *)((char *)v120 + 2) = v48;
                _os_log_debug_impl(&dword_1B57BA000, v39, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Transient wire disconnected for IOContext %s.", (uint8_t *)&v119, 0x22u);
              }
            }
            v42 = (char **)std::__tree<AMCP::Wire_Identifier>::__find_equal<AMCP::Wire_Identifier>((uint64_t)&v115, &v97, (uint64_t)&v122);
            if (!*v42)
            {
              v43 = v42;
              v44 = (char *)operator new(0x70uLL);
              v119.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
              v119.__r_.__value_.__l.__size_ = (std::string::size_type)&v116;
              v119.__r_.__value_.__s.__data_[16] = 0;
              std::construct_at[abi:ne180100]<AMCP::Wire_Identifier,AMCP::Wire_Identifier const&,AMCP::Wire_Identifier*>((std::string *)(v44 + 32), (__int128 *)&v122);
              v119.__r_.__value_.__s.__data_[16] = 1;
              v45 = v97;
              *(_QWORD *)v44 = 0;
              *((_QWORD *)v44 + 1) = 0;
              *((_QWORD *)v44 + 2) = v45;
              *v43 = v44;
              if (*v115)
              {
                v115 = (uint64_t **)*v115;
                v44 = *v43;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v116, (uint64_t *)v44);
              ++v117;
              v119.__r_.__value_.__r.__words[0] = 0;
              std::unique_ptr<std::__tree_node<AMCP::Wire_Identifier,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<AMCP::Wire_Identifier,void *>>>>::reset[abi:ne180100]((uint64_t)&v119);
            }
            v32 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
            goto LABEL_95;
          }
          if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
            goto LABEL_81;
          p_s1 = &__s1;
          while (p_s1->__r_.__value_.__s.__data_[0] == *v36)
          {
            p_s1 = (std::string *)((char *)p_s1 + 1);
            ++v36;
            if (!--v31)
              goto LABEL_81;
          }
        }
        if (!v29)
          goto LABEL_81;
        goto LABEL_80;
      }
LABEL_110:
      v15 = v81 + 1;
    }
    while (v81 + 1 != v79);
    operator delete(__p);
    if (v78)
    {
      v49 = (unint64_t *)&v78->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
LABEL_13:
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v118.__r_.__value_.__l.__data_);
    v8 = v114;
  }
  while (v114);
LABEL_133:
  v64 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>((_QWORD *)(v76 + 176), v90);
  if (v64)
  {
    v65 = *((_QWORD *)v64 + 5);
    if (*(_DWORD *)(v65 + 16))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v64);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v122, "com.apple.coreaudio", "AMCP");
      v70 = *(NSObject **)v122.__r_.__value_.__l.__data_;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v122);
      if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
      {
        v71 = pthread_self();
        v72 = pthread_mach_thread_np(v71);
        v73 = (_QWORD *)(v65 + 24);
        if (*(char *)(v65 + 47) < 0)
          v73 = (_QWORD *)*v73;
        LODWORD(v122.__r_.__value_.__l.__data_) = 67110146;
        HIDWORD(v122.__r_.__value_.__r.__words[0]) = v72;
        LOWORD(v122.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v122.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphNode.cpp";
        WORD1(v122.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v122.__r_.__value_.__r.__words[2]) = 654;
        *(_WORD *)v123 = 2080;
        *(_QWORD *)&v123[2] = "not (m_node_type == AMCP::Node_Type::IOContext)";
        *(_WORD *)&v123[10] = 2080;
        *(_QWORD *)&v123[12] = v73;
        _os_log_error_impl(&dword_1B57BA000, v70, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s set_number_of_connections called on a node that is not an IOContextNode: %s", (uint8_t *)&v122, 0x2Cu);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&__s1);
      v74 = __cxa_allocate_exception(0x40uLL);
      v75 = (_QWORD *)(v65 + 24);
      if (*(char *)(v65 + 47) < 0)
        v75 = (_QWORD *)*v75;
      caulk::make_string((caulk *)"set_number_of_connections called on a node that is not an IOContextNode: %s", (uint64_t)&v93, v75);
      std::logic_error::logic_error(&v110, &v93);
      v110.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)&v119, &v110);
      memset(v120, 0, sizeof(v120));
      v121 = -1;
      v119.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
      v119.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v122, (uint64_t)&v119);
      *(_QWORD *)&v123[8] = "void AMCP::Graph::Node::set_number_of_connections(size_t)";
      *(_QWORD *)&v123[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
      *(_DWORD *)&v123[24] = 654;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v118.__r_.__value_.__l.__data_);
      v97 = (void (**)())off_1E69A20A0;
      v98 = v118;
      memset(&v118, 0, sizeof(v118));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v122, (uint64_t)&v97);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v74, (uint64_t)&v122);
    }
    *(_QWORD *)(v65 + 104) = v86;
  }
  std::__list_imp<std::string>::clear(&v112);
  std::__tree<AMCP::Wire_Identifier>::destroy(v116);
}

void sub_1B5AD79C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, std::__shared_weak_count *a13)
{
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  std::__list_imp<std::string>::clear(&STACK[0x200]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v13);
  std::__tree<AMCP::Wire_Identifier>::destroy((_QWORD *)STACK[0x220]);
  _Unwind_Resume(a1);
}

void std::__list_imp<std::string>::__delete_node[abi:ne180100]<>(void **__p)
{
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

_QWORD *std::__list_imp<std::string>::__create_node[abi:ne180100]<std::string const&>(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x28uLL);
  v3 = (std::string *)(v2 + 2);
  *v2 = 0;
  v2[1] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v2[4] = *(_QWORD *)(a1 + 16);
  }
  return v2;
}

void sub_1B5AD7E74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<std::string>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = (_QWORD *)*result;
    v3[1] = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    while (result != v1)
    {
      v4 = (_QWORD *)result[1];
      std::__list_imp<std::string>::__delete_node[abi:ne180100]<>((void **)result);
      result = v4;
    }
  }
  return result;
}

uint64_t AMCP::Graph::calculate_clocks(std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::unordered_set<std::string>,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0::~$_0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 48);
  v2 = *(_QWORD **)(a1 + 40);
  if (v2 == (_QWORD *)(a1 + 16))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 16);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::vector<std::shared_ptr<AMCP::Graph::Node>>::reserve(_QWORD *result, unint64_t a2)
{
  char **v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  __int128 v9;
  int64x2_t v10;
  char *v11;
  uint64_t v12;
  int64x2_t v13;
  char *v14;
  _QWORD *v15;

  if (a2 > (uint64_t)(result[2] - *result) >> 4)
  {
    if (a2 >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v2 = (char **)result;
    v3 = result[1] - *result;
    v15 = result + 2;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(a2);
    v7 = *v2;
    v6 = v2[1];
    if (v6 == *v2)
    {
      v10 = vdupq_n_s64((unint64_t)v6);
      v8 = &v4[v3];
    }
    else
    {
      v8 = &v4[v3];
      do
      {
        v9 = *((_OWORD *)v6 - 1);
        v6 -= 16;
        *((_OWORD *)v8 - 1) = v9;
        v8 -= 16;
        *(_QWORD *)v6 = 0;
        *((_QWORD *)v6 + 1) = 0;
      }
      while (v6 != v7);
      v10 = *(int64x2_t *)v2;
    }
    *v2 = v8;
    v2[1] = &v4[v3];
    v13 = v10;
    v11 = v2[2];
    v2[2] = &v4[16 * v5];
    v14 = v11;
    v12 = v10.i64[0];
    return (_QWORD *)std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v12);
  }
  return result;
}

void AMCP::Graph::topological_sort(std::string **a1, uint64_t a2, _QWORD *a3, _QWORD *a4, char **a5, _QWORD *a6)
{
  std::string *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  std::string *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  std::string *v18;
  std::string::size_type v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::string **v30;
  std::string *v31;
  unint64_t *p_size;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  int64x2_t v49;
  char *v50;
  std::string __p;
  std::string v53;
  char *v54;
  char *v55;
  std::string v56;
  char *v57;
  _QWORD *v58;

  v11 = *a1;
  if (SHIBYTE((*a1)[1].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v56, v11[1].__r_.__value_.__l.__data_, v11[1].__r_.__value_.__l.__size_);
  else
    v56 = v11[1];
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(a6, (unsigned __int8 *)&v56);
  v13 = v12;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v56.__r_.__value_.__l.__data_);
    if (v13)
      return;
  }
  else if (v12)
  {
    return;
  }
  v14 = *a1;
  v15 = (*a1)[a2 + 2].__r_.__value_.__r.__words[2] - (*a1)[a2 + 2].__r_.__value_.__l.__size_;
  if (!v15)
    goto LABEL_42;
  v16 = 0;
  v17 = 0x6DB6DB6DB6DB6DB7 * (v15 >> 4);
  do
  {
    v18 = *a1;
    if (SHIBYTE((*a1)[1].__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v53, v18[1].__r_.__value_.__l.__data_, v18[1].__r_.__value_.__l.__size_);
    else
      v53 = v18[1];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
    v19 = v53.__r_.__value_.__r.__words[2];
    memset(&v53, 0, sizeof(v53));
    v56.__r_.__value_.__r.__words[2] = v19;
    v57 = v16;
    LODWORD(v58) = a2;
    AMCP::Graph::Wire_Index::get_wires_for_terminal(&v54, a4, (unsigned __int8 **)&v56);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    v21 = v54;
    v20 = v55;
    if (v54 != v55)
    {
      while (1)
      {
        v22 = *(_QWORD *)v21;
        if (*(_BYTE *)(*(_QWORD *)v21 + 408))
          break;
LABEL_36:
        v21 += 8;
        if (v21 == v20)
        {
          v21 = v54;
          goto LABEL_38;
        }
      }
      if ((_DWORD)a2 == 1)
      {
        if (*(char *)(v22 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)v22, *(_QWORD *)(v22 + 8));
LABEL_24:
          __p = v56;
          if (std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)&__p))
          {
            v23 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
            if (!v23)
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            v24 = (std::__shared_weak_count *)*((_QWORD *)v23 + 6);
            v56.__r_.__value_.__r.__words[0] = *((_QWORD *)v23 + 5);
            v56.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
            if (v24)
            {
              p_shared_owners = (unint64_t *)&v24->__shared_owners_;
              do
                v26 = __ldxr(p_shared_owners);
              while (__stxr(v26 + 1, p_shared_owners));
            }
            AMCP::Graph::topological_sort(&v56, a2, a3, a4, a5, a6);
            if (v24)
            {
              v27 = (unint64_t *)&v24->__shared_owners_;
              do
                v28 = __ldaxr(v27);
              while (__stlxr(v28 - 1, v27));
              if (!v28)
              {
                ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                std::__shared_weak_count::__release_weak(v24);
              }
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_36;
        }
      }
      else
      {
        if (*(char *)(v22 + 63) < 0)
        {
          std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(v22 + 40), *(_QWORD *)(v22 + 48));
          goto LABEL_24;
        }
        v22 += 40;
      }
      v56 = *(std::string *)v22;
      goto LABEL_24;
    }
LABEL_38:
    if (v21)
      operator delete(v21);
    ++v16;
  }
  while (v16 != (char *)v17);
  v14 = *a1;
LABEL_42:
  if (SHIBYTE(v14[1].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v56, v14[1].__r_.__value_.__l.__data_, v14[1].__r_.__value_.__l.__size_);
  else
    v56 = v14[1];
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)a6, (unsigned __int8 *)&v56, (uint64_t)&v56);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  v29 = (unint64_t)a5[2];
  v30 = (std::string **)a5[1];
  if ((unint64_t)v30 >= v29)
  {
    v35 = ((char *)v30 - *a5) >> 4;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v37 = v29 - (_QWORD)*a5;
    if (v37 >> 3 > v36)
      v36 = v37 >> 3;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    v58 = a5 + 2;
    v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v38);
    v41 = &v39[16 * v35];
    v42 = *(_OWORD *)a1;
    *(_OWORD *)v41 = *(_OWORD *)a1;
    if (*((_QWORD *)&v42 + 1))
    {
      v43 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v46 = *a5;
    v45 = a5[1];
    if (v45 == *a5)
    {
      v49 = vdupq_n_s64((unint64_t)v45);
      v47 = &v39[16 * v35];
    }
    else
    {
      v47 = &v39[16 * v35];
      do
      {
        v48 = *((_OWORD *)v45 - 1);
        v45 -= 16;
        *((_OWORD *)v47 - 1) = v48;
        v47 -= 16;
        *(_QWORD *)v45 = 0;
        *((_QWORD *)v45 + 1) = 0;
      }
      while (v45 != v46);
      v49 = *(int64x2_t *)a5;
    }
    v34 = v41 + 16;
    *a5 = v47;
    a5[1] = v41 + 16;
    *(int64x2_t *)&v56.__r_.__value_.__r.__words[1] = v49;
    v50 = a5[2];
    a5[2] = &v39[16 * v40];
    v57 = v50;
    v56.__r_.__value_.__r.__words[0] = v49.i64[0];
    std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v56);
  }
  else
  {
    *v30 = *a1;
    v31 = a1[1];
    v30[1] = v31;
    if (v31)
    {
      p_size = &v31->__r_.__value_.__l.__size_;
      do
        v33 = __ldxr(p_size);
      while (__stxr(v33 + 1, p_size));
    }
    v34 = (char *)(v30 + 2);
  }
  a5[1] = v34;
}

void sub_1B5AD83FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6985960;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6985960;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest>::__on_zero_shared(uint64_t a1)
{
  _opaque_pthread_t *v2;
  _opaque_pthread_t *v3;
  _BOOL8 is_thread_configured_for_realtime;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *v7;
  unint64_t v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  std::logic_error *exception;
  uint64_t v12;
  int v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  _opaque_pthread_t *v19;
  mach_port_t v20;
  uint64_t v21;
  int v22;
  std::logic_error v23;
  __int128 v24;
  uint64_t v25;
  uint64_t (**v26)();
  __int128 v27;
  uint64_t v28;
  std::string v29;
  std::logic_error v30;
  std::logic_error v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  uint8_t buf[8];
  _BYTE v39[10];
  __int16 v40;
  int v41;
  _BYTE v42[24];
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v2 = pthread_self();
  is_thread_configured_for_realtime = AMCP::Utility::is_thread_configured_for_realtime(v2, v3);
  if (is_thread_configured_for_realtime)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_thread_configured_for_realtime);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v5 = *(std::__shared_weak_count **)v39;
    v6 = **(NSObject ***)buf;
    if (*(_QWORD *)v39)
    {
      v7 = (unint64_t *)(*(_QWORD *)v39 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v10;
      *(_WORD *)v39 = 2080;
      *(_QWORD *)&v39[2] = "Manifest.cpp";
      v40 = 1024;
      v41 = 135;
      *(_WORD *)v42 = 2080;
      *(_QWORD *)&v42[2] = "not (not AMCP::Utility::is_thread_configured_for_realtime(pthread_self()))";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v37);
    exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v29);
    std::logic_error::logic_error(&v30, &v29);
    v12 = MEMORY[0x1E0DE5018];
    v30.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v31, &v30);
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = -1;
    v31.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v32 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v31);
    *(_QWORD *)&v42[8] = "AMCP::Graph::Manifest::~Manifest()";
    *(_QWORD *)&v42[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
    v43 = 135;
    std::vector<void *>::vector(&v24);
    v13 = backtrace((void **)v24, (*((_QWORD *)&v24 + 1) - (_QWORD)v24) >> 3);
    std::vector<void *>::resize((char **)&v24, v13);
    v27 = v24;
    v28 = v25;
    v24 = 0uLL;
    v25 = 0;
    v26 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v26);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(exception, (const std::logic_error *)buf);
    exception->__vftable = (std::logic_error_vtbl *)(v12 + 16);
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v14 = *(_QWORD *)v42;
    exception[1].__imp_.__imp_ = *(const char **)v42;
    if (v14)
      goto LABEL_21;
    goto LABEL_22;
  }
  if (*(_DWORD *)(a1 + 24))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_thread_configured_for_realtime);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v15 = *(std::__shared_weak_count **)v39;
    v16 = **(NSObject ***)buf;
    if (*(_QWORD *)v39)
    {
      v17 = (unint64_t *)(*(_QWORD *)v39 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v19 = pthread_self();
      v20 = pthread_mach_thread_np(v19);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v20;
      *(_WORD *)v39 = 2080;
      *(_QWORD *)&v39[2] = "Manifest.cpp";
      v40 = 1024;
      v41 = 138;
      *(_WORD *)v42 = 2080;
      *(_QWORD *)&v42[2] = "not (m_processing_state == Processing_State::Idle)";
      _os_log_error_impl(&dword_1B57BA000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to delete an active manifiest", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v37);
    exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to delete an active manifiest", (uint64_t)&v29);
    std::logic_error::logic_error(&v30, &v29);
    v21 = MEMORY[0x1E0DE5018];
    v30.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v31, &v30);
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = -1;
    v31.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v32 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v31);
    *(_QWORD *)&v42[8] = "AMCP::Graph::Manifest::~Manifest()";
    *(_QWORD *)&v42[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
    v43 = 138;
    std::vector<void *>::vector(&v24);
    v22 = backtrace((void **)v24, (*((_QWORD *)&v24 + 1) - (_QWORD)v24) >> 3);
    std::vector<void *>::resize((char **)&v24, v22);
    v27 = v24;
    v28 = v25;
    v24 = 0uLL;
    v25 = 0;
    v26 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v26);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(exception, (const std::logic_error *)buf);
    exception->__vftable = (std::logic_error_vtbl *)(v21 + 16);
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v14 = *(_QWORD *)v42;
    exception[1].__imp_.__imp_ = *(const char **)v42;
    if (v14)
LABEL_21:
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
LABEL_22:
    v23 = *(std::logic_error *)&v42[8];
    LODWORD(exception[3].__vftable) = v43;
    exception[2] = v23;
    exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 120);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 96);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>>>::~__hash_table(a1 + 56);
  *(_QWORD *)buf = a1 + 32;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1B5AD8994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  uint64_t v10;

  if (!a2)
    _Unwind_Resume(a1);
  MEMORY[0x1B5E500E8](v10);
  __clang_call_terminate(a1);
}

void sub_1B5AD89B8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *> *>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  uint64_t j;
  char *v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  _QWORD v26[2];
  char v27;

  v2 = a2;
  v4 = a1[1];
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v6 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6)
      v7 = a2 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      while (1)
      {
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v2 + 2));
        v9 = v2[5];
        *(_DWORD *)(v6 + 48) = *((_DWORD *)v2 + 12);
        *(_QWORD *)(v6 + 40) = v9;
        if ((uint64_t *)v6 != v2)
        {
          v11 = v2[7];
          v10 = v2[8];
          v12 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v11) >> 4);
          v13 = *(std::string **)(v6 + 56);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v6 + 72) - (_QWORD)v13) >> 4) >= v12)
          {
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v6 + 64) - (_QWORD)v13) >> 4) >= v12)
            {
              v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Wire_Identifier *,AMCP::Wire_Identifier *,AMCP::Wire_Identifier *>((std::string *)v2[7], (std::string *)v2[8], v13);
              for (j = *(_QWORD *)(v6 + 64);
                    (std::string *)j != v18;
                    std::__destroy_at[abi:ne180100]<AMCP::Wire_Identifier,0>(j))
              {
                j -= 80;
              }
              *(_QWORD *)(v6 + 64) = v18;
              goto LABEL_26;
            }
            v17 = (std::string *)(v11 + 16 * ((uint64_t)(*(_QWORD *)(v6 + 64) - (_QWORD)v13) >> 4));
            std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Wire_Identifier *,AMCP::Wire_Identifier *,AMCP::Wire_Identifier *>((std::string *)v2[7], v17, v13);
            v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>,AMCP::Wire_Identifier*,AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>((uint64_t)v17, v10, *(_QWORD *)(v6 + 64));
          }
          else
          {
            std::vector<AMCP::Wire_Identifier>::__vdeallocate((void **)(v6 + 56));
            if (v12 > 0x333333333333333)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v14 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(v6 + 72) - *(_QWORD *)(v6 + 56)) >> 4);
            if (v14 <= v12)
              v14 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v11) >> 4);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v6 + 72) - *(_QWORD *)(v6 + 56)) >> 4) >= 0x199999999999999)
              v15 = 0x333333333333333;
            else
              v15 = v14;
            std::vector<AMCP::Wire_Identifier>::__vallocate[abi:ne180100]((_QWORD *)(v6 + 56), v15);
            v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>,AMCP::Wire_Identifier*,AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>(v11, v10, *(_QWORD *)(v6 + 64));
          }
          *(_QWORD *)(v6 + 64) = v16;
        }
LABEL_26:
        v8 = *(_QWORD **)v6;
        std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::__node_insert_multi((uint64_t)a1, v6);
        v2 = (uint64_t *)*v2;
        if (v8)
        {
          v6 = (uint64_t)v8;
          if (v2)
            continue;
        }
        goto LABEL_28;
      }
    }
    v8 = (_QWORD *)v6;
LABEL_28:
    std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::__deallocate_node(v8);
  }
  for (; v2; v2 = (uint64_t *)*v2)
  {
    v20 = (char *)operator new(0x50uLL);
    v21 = (uint64_t)v20;
    v26[0] = v20;
    v26[1] = a1 + 2;
    v27 = 0;
    v22 = v20 + 16;
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = 0;
    if (*((char *)v2 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v20 + 16), (const std::string::value_type *)v2[2], v2[3]);
    }
    else
    {
      v23 = *((_OWORD *)v2 + 1);
      *((_QWORD *)v20 + 4) = v2[4];
      *v22 = v23;
    }
    v24 = v2[5];
    v25 = *((_DWORD *)v2 + 12);
    *(_QWORD *)(v21 + 56) = 0;
    *(_DWORD *)(v21 + 48) = v25;
    *(_QWORD *)(v21 + 40) = v24;
    *(_QWORD *)(v21 + 64) = 0;
    *(_QWORD *)(v21 + 72) = 0;
    std::vector<AMCP::Wire_Identifier>::__init_with_size[abi:ne180100]<AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>((_QWORD *)(v21 + 56), v2[7], v2[8], 0xCCCCCCCCCCCCCCCDLL * ((v2[8] - v2[7]) >> 4));
    v27 = 1;
    *(_QWORD *)(v21 + 8) = std::hash<AMCP::Terminal_Identifier>::operator()((uint64_t)v22);
    std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::__node_insert_multi((uint64_t)a1, v21);
    v26[0] = 0;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26);
  }
}

void sub_1B5AD8C7C()
{
  __break(1u);
}

void sub_1B5AD8CB0()
{
  uint64_t v0;
  void **v1;

  if (*(char *)(v0 + 39) < 0)
    operator delete(*v1);
  JUMPOUT(0x1B5AD8CCCLL);
}

void sub_1B5AD8CD8()
{
  __cxa_end_catch();
  JUMPOUT(0x1B5AD8CE0);
}

void std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *> *>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::string *v17;
  const AMCP::Graph::Graph_Wire::Connection *v18;
  char *v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  std::string *v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD v40[2];
  char v41;

  v2 = a2;
  v4 = a1[1];
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v6 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6)
      v7 = a2 == 0;
    else
      v7 = 1;
    if (v7)
    {
      v8 = (_QWORD *)v6;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v2 + 2));
        v9 = v2[5];
        *(_DWORD *)(v6 + 48) = *((_DWORD *)v2 + 12);
        *(_QWORD *)(v6 + 40) = v9;
        std::string::operator=((std::string *)(v6 + 56), (const std::string *)(v2 + 7));
        v10 = v2[10];
        *(_DWORD *)(v6 + 88) = *((_DWORD *)v2 + 22);
        *(_QWORD *)(v6 + 80) = v10;
        std::string::operator=((std::string *)(v6 + 96), (const std::string *)v2 + 4);
        v11 = v2[15];
        *(_DWORD *)(v6 + 128) = *((_DWORD *)v2 + 32);
        *(_QWORD *)(v6 + 120) = v11;
        std::string::operator=((std::string *)(v6 + 136), (const std::string *)(v2 + 17));
        v12 = v2[20];
        *(_DWORD *)(v6 + 168) = *((_DWORD *)v2 + 42);
        *(_QWORD *)(v6 + 160) = v12;
        if ((uint64_t *)v6 == v2)
        {
          v15 = *((_OWORD *)v2 + 14);
          v16 = *((_OWORD *)v2 + 15);
          *(_BYTE *)(v6 + 256) = *((_BYTE *)v2 + 256);
          *(_OWORD *)(v6 + 224) = v15;
          *(_OWORD *)(v6 + 240) = v16;
        }
        else
        {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v6 + 176), (char *)v2[22], v2[23], (v2[23] - v2[22]) >> 2);
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v6 + 200), (char *)v2[25], v2[26], (v2[26] - v2[25]) >> 2);
          v13 = *((_OWORD *)v2 + 14);
          v14 = *((_OWORD *)v2 + 15);
          *(_BYTE *)(v6 + 256) = *((_BYTE *)v2 + 256);
          *(_OWORD *)(v6 + 224) = v13;
          *(_OWORD *)(v6 + 240) = v14;
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v6 + 264), (std::string *)v2[33], (__int128 *)v2[34], 0xAAAAAAAAAAAAAAABLL * ((v2[34] - v2[33]) >> 3));
        }
        v17 = (std::string *)(v6 + 288);
        v18 = (const AMCP::Graph::Graph_Wire::Connection *)(v2 + 36);
        if (*(unsigned __int8 *)(v6 + 504) == *((unsigned __int8 *)v2 + 504))
        {
          if (*(_BYTE *)(v6 + 504))
            AMCP::Graph::Graph_Wire::Connection::operator=((uint64_t)v17, (uint64_t)v18);
        }
        else if (*(_BYTE *)(v6 + 504))
        {
          std::__optional_destruct_base<AMCP::Graph::Graph_Wire::Connection,false>::reset[abi:ne180100]((uint64_t)v17);
        }
        else
        {
          AMCP::Graph::Graph_Wire::Connection::Connection(v17, v18);
          *(_BYTE *)(v6 + 504) = 1;
        }
        std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(v6 + 512), v2[64], v2[65]);
        std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(v6 + 528), v2[66], v2[67]);
        v8 = *(_QWORD **)v6;
        std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__node_insert_multi((uint64_t)a1, v6);
        v2 = (uint64_t *)*v2;
        if (!v8)
          break;
        v6 = (uint64_t)v8;
      }
      while (v2);
    }
    std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::__deallocate_node(v8);
  }
  for (; v2; v2 = (uint64_t *)*v2)
  {
    v19 = (char *)operator new(0x220uLL);
    v20 = (uint64_t)v19;
    v40[0] = v19;
    v40[1] = a1 + 2;
    v41 = 0;
    v21 = v19 + 16;
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    if (*((char *)v2 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v19 + 16), (const std::string::value_type *)v2[2], v2[3]);
    }
    else
    {
      v22 = *((_OWORD *)v2 + 1);
      *((_QWORD *)v19 + 4) = v2[4];
      *v21 = v22;
    }
    v23 = v2[5];
    *(_DWORD *)(v20 + 48) = *((_DWORD *)v2 + 12);
    *(_QWORD *)(v20 + 40) = v23;
    v24 = (std::string *)(v20 + 56);
    if (*((char *)v2 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(v24, (const std::string::value_type *)v2[7], v2[8]);
    }
    else
    {
      v25 = *(_OWORD *)(v2 + 7);
      *(_QWORD *)(v20 + 72) = v2[9];
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
    }
    v26 = v2[10];
    *(_DWORD *)(v20 + 88) = *((_DWORD *)v2 + 22);
    *(_QWORD *)(v20 + 80) = v26;
    if (*((char *)v2 + 119) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v20 + 96), (const std::string::value_type *)v2[12], v2[13]);
    }
    else
    {
      v27 = *((_OWORD *)v2 + 6);
      *(_QWORD *)(v20 + 112) = v2[14];
      *(_OWORD *)(v20 + 96) = v27;
    }
    v28 = v2[15];
    *(_DWORD *)(v20 + 128) = *((_DWORD *)v2 + 32);
    *(_QWORD *)(v20 + 120) = v28;
    if (*((char *)v2 + 159) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v20 + 136), (const std::string::value_type *)v2[17], v2[18]);
    }
    else
    {
      v29 = *(_OWORD *)(v2 + 17);
      *(_QWORD *)(v20 + 152) = v2[19];
      *(_OWORD *)(v20 + 136) = v29;
    }
    v30 = v2[20];
    v31 = *((_DWORD *)v2 + 42);
    *(_QWORD *)(v20 + 176) = 0;
    *(_DWORD *)(v20 + 168) = v31;
    *(_QWORD *)(v20 + 160) = v30;
    *(_QWORD *)(v20 + 184) = 0;
    *(_QWORD *)(v20 + 192) = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v20 + 176), (const void *)v2[22], v2[23], (v2[23] - v2[22]) >> 2);
    *(_QWORD *)(v20 + 200) = 0;
    *(_QWORD *)(v20 + 208) = 0;
    *(_QWORD *)(v20 + 216) = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v20 + 200), (const void *)v2[25], v2[26], (v2[26] - v2[25]) >> 2);
    v32 = *((_OWORD *)v2 + 14);
    v33 = *((_OWORD *)v2 + 15);
    *(_BYTE *)(v20 + 256) = *((_BYTE *)v2 + 256);
    *(_OWORD *)(v20 + 224) = v32;
    *(_OWORD *)(v20 + 240) = v33;
    *(_QWORD *)(v20 + 272) = 0;
    *(_QWORD *)(v20 + 280) = 0;
    *(_QWORD *)(v20 + 264) = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v20 + 264), (__int128 *)v2[33], (__int128 *)v2[34], 0xAAAAAAAAAAAAAAABLL * ((v2[34] - v2[33]) >> 3));
    *(_BYTE *)(v20 + 288) = 0;
    *(_BYTE *)(v20 + 504) = 0;
    if (*((_BYTE *)v2 + 504))
    {
      AMCP::Graph::Graph_Wire::Connection::Connection((std::string *)(v20 + 288), (const AMCP::Graph::Graph_Wire::Connection *)(v2 + 36));
      *(_BYTE *)(v20 + 504) = 1;
    }
    *(_QWORD *)(v20 + 512) = v2[64];
    v34 = v2[65];
    *(_QWORD *)(v20 + 520) = v34;
    if (v34)
    {
      v35 = (unint64_t *)(v34 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    *(_QWORD *)(v20 + 528) = v2[66];
    v37 = v2[67];
    *(_QWORD *)(v20 + 536) = v37;
    if (v37)
    {
      v38 = (unint64_t *)(v37 + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    v41 = 1;
    *(_QWORD *)(v20 + 8) = std::hash<AMCP::Wire_Identifier>::operator()((uint64_t)v21);
    std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__node_insert_multi((uint64_t)a1, v20);
    v40[0] = 0;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *>>>>::reset[abi:ne180100]((uint64_t)v40);
  }
}

void sub_1B5AD9124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v3;
  uint64_t v4;
  void **v5;
  va_list va;

  va_start(va, a3);
  if (*(char *)(v4 + 119) < 0)
    operator delete(*v5);
  AMCP::Wire_Identifier::~Wire_Identifier(v3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *> *>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[2];
  char v23;

  v2 = a2;
  v4 = a1[1];
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v6 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6)
      v7 = a2 == 0;
    else
      v7 = 1;
    if (v7)
    {
      v8 = (_QWORD *)v6;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v2 + 2));
        v9 = v2[5];
        *(_DWORD *)(v6 + 48) = *((_DWORD *)v2 + 12);
        *(_QWORD *)(v6 + 40) = v9;
        std::string::operator=((std::string *)(v6 + 56), (const std::string *)(v2 + 7));
        v10 = v2[10];
        *(_DWORD *)(v6 + 88) = *((_DWORD *)v2 + 22);
        *(_QWORD *)(v6 + 80) = v10;
        std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(v6 + 96), v2[12], v2[13]);
        v8 = *(_QWORD **)v6;
        std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__node_insert_multi((uint64_t)a1, v6);
        v2 = (uint64_t *)*v2;
        if (!v8)
          break;
        v6 = (uint64_t)v8;
      }
      while (v2);
    }
    std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__deallocate_node(v8);
  }
  for (; v2; v2 = (uint64_t *)*v2)
  {
    v11 = (char *)operator new(0x70uLL);
    v12 = (uint64_t)v11;
    v22[0] = v11;
    v22[1] = a1 + 2;
    v23 = 0;
    v13 = v11 + 16;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    if (*((char *)v2 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v11 + 16), (const std::string::value_type *)v2[2], v2[3]);
    }
    else
    {
      v14 = *((_OWORD *)v2 + 1);
      *((_QWORD *)v11 + 4) = v2[4];
      *v13 = v14;
    }
    v15 = v2[5];
    *(_DWORD *)(v12 + 48) = *((_DWORD *)v2 + 12);
    *(_QWORD *)(v12 + 40) = v15;
    v16 = (std::string *)(v12 + 56);
    if (*((char *)v2 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(v16, (const std::string::value_type *)v2[7], v2[8]);
    }
    else
    {
      v17 = *(_OWORD *)(v2 + 7);
      *(_QWORD *)(v12 + 72) = v2[9];
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
    }
    v18 = v2[10];
    *(_DWORD *)(v12 + 88) = *((_DWORD *)v2 + 22);
    *(_QWORD *)(v12 + 80) = v18;
    *(_QWORD *)(v12 + 96) = v2[12];
    v19 = v2[13];
    *(_QWORD *)(v12 + 104) = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = 1;
    *(_QWORD *)(v12 + 8) = std::hash<AMCP::Wire_Identifier>::operator()((uint64_t)v13);
    std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__node_insert_multi((uint64_t)a1, v12);
    v22[0] = 0;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>>>>::reset[abi:ne180100]((uint64_t)v22);
  }
}

void sub_1B5AD93E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,void *> *>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  BOOL v7;
  _QWORD *v8;
  char *v9;
  std::string *v10;
  _QWORD v11[2];
  char v12;

  v2 = a2;
  v4 = a1[1];
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v6 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6)
      v7 = a2 == 0;
    else
      v7 = 1;
    if (v7)
    {
      v8 = (_QWORD *)v6;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v2 + 2));
        std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(v6 + 40), v2[5], v2[6]);
        v8 = *(_QWORD **)v6;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi((uint64_t)a1, v6);
        v2 = (uint64_t *)*v2;
        if (!v8)
          break;
        v6 = (uint64_t)v8;
      }
      while (v2);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__deallocate_node(v8);
  }
  for (; v2; v2 = (uint64_t *)*v2)
  {
    v9 = (char *)operator new(0x38uLL);
    v11[0] = v9;
    v11[1] = a1 + 2;
    v12 = 0;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    v10 = std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>::pair[abi:ne180100]((std::string *)(v9 + 16), (__int128 *)v2 + 1);
    v12 = 1;
    *((_QWORD *)v9 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v10);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi((uint64_t)a1, (uint64_t)v9);
    v11[0] = 0;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
}

void sub_1B5AD954C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__deallocate_node(v1);
  __cxa_rethrow();
}

void sub_1B5AD9564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *> *>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t i;
  void **v6;
  BOOL v7;
  void **v8;
  unint64_t v9;
  uint64_t *inserted;
  std::string *v11;
  std::string *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t *v15;

  v2 = a2;
  v4 = a1[1];
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v6 = (void **)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6)
      v7 = a2 == 0;
    else
      v7 = 1;
    if (v7)
    {
      v8 = v6;
    }
    else
    {
      do
      {
        *((_DWORD *)v6 + 4) = *((_DWORD *)v2 + 4);
        std::string::operator=((std::string *)v6 + 1, (const std::string *)v2 + 1);
        v8 = (void **)*v6;
        v9 = *((unsigned int *)v6 + 4);
        v6[1] = (void *)v9;
        inserted = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_prepare((uint64_t)a1, v9, (_DWORD *)v6 + 4);
        std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_perform(a1, v6, inserted);
        v2 = (uint64_t *)*v2;
        if (!v8)
          break;
        v6 = v8;
      }
      while (v2);
    }
    std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__deallocate_node(v8);
  }
  for (; v2; v2 = (uint64_t *)*v2)
  {
    v11 = (std::string *)operator new(0x30uLL);
    v11->__r_.__value_.__r.__words[0] = 0;
    v11->__r_.__value_.__l.__size_ = 0;
    v12 = v11 + 1;
    v13 = *((unsigned int *)v2 + 4);
    LODWORD(v11->__r_.__value_.__r.__words[2]) = v13;
    if (*((char *)v2 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v2[3], v2[4]);
      v13 = LODWORD(v11->__r_.__value_.__r.__words[2]);
    }
    else
    {
      v14 = *(_OWORD *)(v2 + 3);
      v11[1].__r_.__value_.__r.__words[2] = v2[5];
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v14;
    }
    v11->__r_.__value_.__l.__size_ = v13;
    v15 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_prepare((uint64_t)a1, v13, &v11->__r_.__value_.__r.__words[2]);
    std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_perform(a1, v11, v15);
  }
}

void sub_1B5AD96C4(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,void *> *,long>>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t *v10;
  uint64_t **leaf_high;
  __int128 *v12;
  BOOL v13;
  char *v14;
  uint64_t **v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t *v21;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v19 = (char *)a1;
    v20 = v8;
    v21 = v8;
    if (v8)
    {
      v20 = std::__tree<DSP_Host_Types::AudioProcessingType>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](v8 + 7, *((_QWORD *)v9 + 7), *((_QWORD *)v9 + 8));
          v10 = v21;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__find_leaf_high(a1, &v18, v21 + 4);
          std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)a1, v18, leaf_high, v10);
          v8 = v20;
          v21 = v20;
          if (v20)
            v20 = std::__tree<DSP_Host_Types::AudioProcessingType>::_DetachedTreeCache::__detach_next((uint64_t)v20);
          v12 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v12)
          {
            do
            {
              a2 = v12;
              v12 = *(__int128 **)v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v13 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v19);
  }
  if (a2 != a3)
  {
    do
    {
      v14 = (char *)operator new(0x48uLL);
      v19 = v14;
      v20 = (uint64_t *)(a1 + 8);
      LOBYTE(v21) = 0;
      std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>::pair[abi:ne180100]((std::string *)(v14 + 32), a2 + 2);
      LOBYTE(v21) = 1;
      v15 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__find_leaf_high(a1, &v18, (_QWORD *)v14 + 4);
      std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)a1, v18, v15, (uint64_t *)v14);
      v19 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v19);
      v16 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(__int128 **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (__int128 *)*((_QWORD *)a2 + 2);
          v13 = *(_QWORD *)v17 == (_QWORD)a2;
          a2 = v17;
        }
        while (!v13);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
}

void sub_1B5AD98E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = v4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v5;
        result = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v4 = (_QWORD *)v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_8:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::destroy(v2);
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned __int8 **v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint8x8_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned __int8 **v41;
  unint64_t v42;
  unint64_t v43;

  v2 = (_QWORD *)a2;
  v4 = (unsigned __int8 **)(a2 + 16);
  v43 = std::hash<AMCP::Wire_Identifier>::operator()(a2 + 16);
  v2[1] = v43;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    v8 = 1;
    if (v5 >= 3)
      v8 = (v5 & (v5 - 1)) != 0;
    v9 = v8 | (2 * v5);
    v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10)
      prime = (int8x8_t)v10;
    else
      prime = (int8x8_t)v9;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v5 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v5)
      goto LABEL_99;
    if (*(_QWORD *)&prime >= v5)
      goto LABEL_60;
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (*(_QWORD *)&prime <= v19)
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime >= v5)
    {
      v5 = *(_QWORD *)(a1 + 8);
      goto LABEL_60;
    }
    if (prime)
    {
LABEL_99:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = operator new(8 * *(_QWORD *)&prime);
      v13 = *(void **)a1;
      *(_QWORD *)a1 = v12;
      if (v13)
        operator delete(v13);
      v41 = v4;
      v14 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
      while (*(_QWORD *)&prime != v14);
      v15 = *(_QWORD **)(a1 + 16);
      if (v15)
      {
        v16 = v15[1];
        v17 = (uint8x8_t)vcnt_s8(prime);
        v17.i16[0] = vaddlv_u8(v17);
        v18 = v17.u32[0];
        v40 = v2;
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= *(_QWORD *)&prime)
            v16 %= *(_QWORD *)&prime;
        }
        else
        {
          v16 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v16) = a1 + 16;
        v22 = (_QWORD *)*v15;
        if (*v15)
        {
          v42 = v17.u32[0];
          do
          {
            v23 = v22[1];
            if (v18 > 1)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            if (v23 == v16)
            {
              v15 = v22;
            }
            else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
            {
              v24 = (_QWORD *)*v22;
              if (*v22)
              {
                v25 = v22;
                while (1)
                {
                  v26 = v24;
                  if (!std::equal_to<AMCP::Wire_Identifier>::operator()[abi:ne180100]((uint64_t)(v22 + 2), (unsigned __int8 **)v24 + 2))break;
                  v24 = (_QWORD *)*v26;
                  v25 = v26;
                  if (!*v26)
                    goto LABEL_47;
                }
                v24 = v26;
                v26 = v25;
LABEL_47:
                v18 = v42;
              }
              else
              {
                v26 = v22;
              }
              *v15 = v24;
              *v26 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = v22;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v15;
              v15 = v22;
              v16 = v23;
            }
            v22 = (_QWORD *)*v15;
          }
          while (*v15);
        }
        v5 = (unint64_t)prime;
        v2 = v40;
        v4 = v41;
      }
      else
      {
        v5 = (unint64_t)prime;
        v4 = v41;
      }
    }
    else
    {
      v27 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v27)
        operator delete(v27);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_60:
  v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v28.i16[0] = vaddlv_u8(v28);
  v29 = v28.u32[0];
  if (v28.u32[0] > 1uLL)
  {
    v30 = v43;
    if (v5 <= v43)
      v30 = v43 % v5;
  }
  else
  {
    v30 = (v5 - 1) & v43;
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
  if (v31)
  {
    v32 = (_QWORD *)*v31;
    if (*v31)
    {
      v33 = 0;
      do
      {
        v34 = v32;
        v35 = v32[1];
        if (v29 > 1)
        {
          v36 = v35;
          if (v35 >= v5)
            v36 = v35 % v5;
        }
        else
        {
          v36 = v35 & (v5 - 1);
        }
        if (v36 != v30)
          break;
        v37 = v35 == v43 && std::equal_to<AMCP::Wire_Identifier>::operator()[abi:ne180100]((uint64_t)(v34 + 2), v4);
        if ((v33 & !v37 & 1) != 0)
          break;
        v33 |= v37;
        v32 = (_QWORD *)*v34;
        v31 = v34;
      }
      while (*v34);
    }
  }
  v38 = v2[1];
  if (v29 > 1)
  {
    if (v38 >= v5)
      v38 %= v5;
  }
  else
  {
    v38 &= v5 - 1;
  }
  if (!v31)
  {
    *v2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = a1 + 16;
    if (!*v2)
      goto LABEL_95;
    v39 = *(_QWORD *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5)
        v39 %= v5;
    }
    else
    {
      v39 &= v5 - 1;
    }
LABEL_94:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v2;
    goto LABEL_95;
  }
  *v2 = *v31;
  *v31 = v2;
  if (*v2)
  {
    v39 = *(_QWORD *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5)
        v39 %= v5;
    }
    else
    {
      v39 &= v5 - 1;
    }
    if (v39 != v38)
      goto LABEL_94;
  }
LABEL_95:
  ++*(_QWORD *)(a1 + 24);
}

void std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  float v5;
  float v6;
  _BOOL8 v7;
  unint64_t v8;
  unint64_t v9;
  int8x8_t prime;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _BOOL4 v26;
  _QWORD *v27;
  void *v28;
  uint8x8_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  _BOOL4 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unsigned __int8 **v45;
  unint64_t v46;
  unsigned __int8 **v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;

  v45 = (unsigned __int8 **)(a2 + 16);
  v46 = std::hash<AMCP::Terminal_Identifier>::operator()(a2 + 16);
  *(_QWORD *)(a2 + 8) = v46;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v6 = *(float *)(a1 + 32);
  v44 = (_QWORD *)a2;
  if (!v4 || (float)(v6 * (float)v4) < v5)
  {
    v7 = 1;
    if (v4 >= 3)
      v7 = (v4 & (v4 - 1)) != 0;
    v8 = v7 | (2 * v4);
    v9 = vcvtps_u32_f32(v5 / v6);
    if (v8 <= v9)
      prime = (int8x8_t)v9;
    else
      prime = (int8x8_t)v8;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v4 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v4)
      goto LABEL_99;
    if (*(_QWORD *)&prime >= v4)
      goto LABEL_60;
    v18 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v4 < 3 || (v19 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v19.i16[0] = vaddlv_u8(v19), v19.u32[0] > 1uLL))
    {
      v18 = std::__next_prime(v18);
    }
    else
    {
      v20 = 1 << -(char)__clz(v18 - 1);
      if (v18 >= 2)
        v18 = v20;
    }
    if (*(_QWORD *)&prime <= v18)
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime >= v4)
    {
      v4 = *(_QWORD *)(a1 + 8);
      goto LABEL_60;
    }
    if (prime)
    {
LABEL_99:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = operator new(8 * *(_QWORD *)&prime);
      v12 = *(void **)a1;
      *(_QWORD *)a1 = v11;
      if (v12)
        operator delete(v12);
      v13 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v13++) = 0;
      while (*(_QWORD *)&prime != v13);
      v14 = *(_QWORD **)(a1 + 16);
      if (!v14)
        goto LABEL_50;
      v15 = v14[1];
      v16 = (uint8x8_t)vcnt_s8(prime);
      v16.i16[0] = vaddlv_u8(v16);
      v17 = v16.u32[0];
      if (v16.u32[0] > 1uLL)
      {
        if (v15 >= *(_QWORD *)&prime)
          v15 %= *(_QWORD *)&prime;
      }
      else
      {
        v15 &= *(_QWORD *)&prime - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = a1 + 16;
      v21 = (_QWORD *)*v14;
      if (*v14)
      {
        v22 = *(_QWORD *)&prime - 1;
        v43 = v16.u32[0];
        do
        {
          v23 = v21[1];
          if (v17 > 1)
          {
            if (v23 >= *(_QWORD *)&prime)
              v23 %= *(_QWORD *)&prime;
          }
          else
          {
            v23 &= v22;
          }
          if (v23 == v15)
          {
            v14 = v21;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
          {
            v24 = (_QWORD *)*v21;
            if (*v21)
            {
              v25 = v21;
              while (1)
              {
                v50 = v21 + 2;
                v51 = v21 + 5;
                v52 = v21 + 6;
                v47 = (unsigned __int8 **)(v24 + 2);
                v48 = v24 + 5;
                v49 = v24 + 6;
                v26 = std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v50, &v47);
                v27 = (_QWORD *)*v25;
                if (!v26)
                  break;
                v24 = (_QWORD *)*v27;
                v25 = (_QWORD *)*v25;
                if (!*v27)
                  goto LABEL_46;
              }
              v24 = (_QWORD *)*v25;
              v27 = v25;
LABEL_46:
              v22 = *(_QWORD *)&prime - 1;
              v17 = v43;
            }
            else
            {
              v27 = v21;
            }
            *v14 = v24;
            *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = v21;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v14;
            v14 = v21;
            v15 = v23;
          }
          v21 = (_QWORD *)*v14;
        }
        while (*v14);
        v4 = (unint64_t)prime;
      }
      else
      {
LABEL_50:
        v4 = (unint64_t)prime;
      }
    }
    else
    {
      v28 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v28)
        operator delete(v28);
      v4 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_60:
  v29 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v29.i16[0] = vaddlv_u8(v29);
  v30 = v29.u32[0];
  if (v29.u32[0] > 1uLL)
  {
    v31 = v46;
    if (v4 <= v46)
      v31 = v46 % v4;
  }
  else
  {
    v31 = (v4 - 1) & v46;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
  if (v32)
  {
    v33 = (_QWORD *)*v32;
    if (*v32)
    {
      v34 = 0;
      v35 = (_QWORD *)(a2 + 40);
      v36 = (_QWORD *)(a2 + 48);
      do
      {
        v37 = v33;
        v38 = v33[1];
        if (v30 > 1)
        {
          v39 = v38;
          if (v38 >= v4)
            v39 = v38 % v4;
        }
        else
        {
          v39 = v38 & (v4 - 1);
        }
        if (v39 != v31)
          break;
        if (v38 == v46)
        {
          v50 = v37 + 2;
          v51 = v37 + 5;
          v52 = v37 + 6;
          v47 = v45;
          v48 = v35;
          v49 = v36;
          v40 = std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v50, &v47);
        }
        else
        {
          v40 = 0;
        }
        if ((v34 & !v40 & 1) != 0)
          break;
        v34 |= v40;
        v33 = (_QWORD *)*v37;
        v32 = v37;
      }
      while (*v37);
    }
  }
  v41 = v44[1];
  if (v30 > 1)
  {
    if (v41 >= v4)
      v41 %= v4;
  }
  else
  {
    v41 &= v4 - 1;
  }
  if (!v32)
  {
    *v44 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v44;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v41) = a1 + 16;
    if (!*v44)
      goto LABEL_95;
    v42 = *(_QWORD *)(*v44 + 8);
    if (v30 > 1)
    {
      if (v42 >= v4)
        v42 %= v4;
    }
    else
    {
      v42 &= v4 - 1;
    }
LABEL_94:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v44;
    goto LABEL_95;
  }
  *v44 = *v32;
  *v32 = v44;
  if (*v44)
  {
    v42 = *(_QWORD *)(*v44 + 8);
    if (v30 > 1)
    {
      if (v42 >= v4)
        v42 %= v4;
    }
    else
    {
      v42 &= v4 - 1;
    }
    if (v42 != v41)
      goto LABEL_94;
  }
LABEL_95:
  ++*(_QWORD *)(a1 + 24);
}

_QWORD *std::vector<AMCP::Wire_Identifier>::__init_with_size[abi:ne180100]<AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<AMCP::Wire_Identifier>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>,AMCP::Wire_Identifier*,AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B5ADA3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<AMCP::Wire_Identifier>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x333333333333334)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void AMCP::Graph::Graph::restore_graph_state_from_snapshot(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v5;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  void *exception;
  __int128 v10;
  uint64_t v11;
  uint64_t (**v12)();
  __int128 v13;
  uint64_t v14;
  std::string v15;
  std::logic_error v16;
  std::logic_error v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint8_t buf[8];
  __int16 v25;
  char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  _BYTE v30[14];
  const char *v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if (!*a2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      v25 = 2080;
      v26 = "Graph.cpp";
      v27 = 1024;
      v28 = 1221;
      v29 = 2080;
      *(_QWORD *)v30 = "not (state)";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v23);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v15);
    std::logic_error::logic_error(&v16, &v15);
    v16.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v17, &v16);
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = -1;
    v17.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v18 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v17);
    *(_QWORD *)&v30[6] = "void AMCP::Graph::Graph::restore_graph_state_from_snapshot(const Graph_State &)";
    v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
    v32 = 1221;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v10);
    v13 = v10;
    v14 = v11;
    v10 = 0uLL;
    v11 = 0;
    v12 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v12);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = (_QWORD *)(a1 + 56);
  if (v5 != (_QWORD *)v2)
  {
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(v2 + 32);
    std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *> *>>(v5, *(uint64_t **)(v2 + 16));
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(v2 + 72);
    std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *> *>>((_QWORD *)(a1 + 96), *(uint64_t **)(v2 + 56));
    *(_DWORD *)(a1 + 168) = *(_DWORD *)(v2 + 112);
    std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *> *>>((_QWORD *)(a1 + 136), *(uint64_t **)(v2 + 96));
    v2 = *a2;
  }
  if (a1 + 176 != v2 + 120)
  {
    *(_DWORD *)(a1 + 208) = *(_DWORD *)(v2 + 152);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,void *> *>>((_QWORD *)(a1 + 176), *(uint64_t **)(v2 + 136));
    v2 = *a2;
  }
  if (a1 + 216 != v2 + 160)
  {
    *(_DWORD *)(a1 + 248) = *(_DWORD *)(v2 + 192);
    std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *> *>>((_QWORD *)(a1 + 216), *(uint64_t **)(v2 + 176));
    v2 = *a2;
  }
  if (a1 + 256 != v2 + 224)
    std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,void *> *,long>>(a1 + 256, *(__int128 **)(v2 + 224), (__int128 *)(v2 + 232));
}

void sub_1B5ADA730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

BOOL HALS_PDPUCPlugIn::ObjectIsPropertySettable(HALS_PDPUCPlugIn *this, uint64_t a2, const AudioObjectPropertyAddress *a3)
{
  int v4;
  uint8x8_t v5;
  int16x8_t v7;
  int16x8_t v8;
  uint64_t mElement;
  _DWORD *exception;
  int v11;
  _BYTE v12[5];
  unsigned __int32 v13;
  char v14;
  __int32 v15;
  char v16;
  char v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  __int32 *v23;
  __int16 v24;
  unsigned __int32 *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  v4 = ((uint64_t (*)(uint64_t, const AudioObjectPropertyAddress *, char *))this)(a2, a3, &v17);
  if (v4)
  {
    v5.i32[0] = a3->mSelector;
    v7 = (int16x8_t)vmovl_u8(v5);
    *(int16x4_t *)v7.i8 = vrev64_s16(*(int16x4_t *)v7.i8);
    *(int8x8_t *)v7.i8 = vmovn_s16(v7);
    v15 = v7.i32[0];
    v16 = 0;
    v7.i32[0] = a3->mScope;
    v8 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v7.i8);
    *(int16x4_t *)v8.i8 = vrev64_s16(*(int16x4_t *)v8.i8);
    v13 = vmovn_s16(v8).u32[0];
    v14 = 0;
    v12[0] = HIBYTE(v4);
    v12[1] = BYTE2(v4);
    v12[2] = BYTE1(v4);
    v11 = v4;
    v12[3] = v4;
    v12[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      mElement = a3->mElement;
      *(_DWORD *)buf = 136316674;
      v19 = "HALS_PDPUCPlugIn.cpp";
      v20 = 1024;
      v21 = 136;
      v22 = 2080;
      v23 = &v15;
      v24 = 2080;
      v25 = &v13;
      v26 = 2048;
      v27 = mElement;
      v28 = 1024;
      v29 = v11;
      v30 = 2080;
      v31 = v12;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PDPUCPlugIn::ObjectIsPropertySettable: got an error from the plug-in for property [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v11;
  }
  return v17 != 0;
}

uint64_t HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(HALS_PDPUCPlugIn *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5)
{
  int v6;
  uint8x8_t v7;
  int16x8_t v9;
  int16x8_t v10;
  uint64_t mElement;
  _DWORD *exception;
  int v13;
  _BYTE v14[5];
  unsigned __int32 v15;
  char v16;
  __int32 v17;
  char v18;
  unsigned int v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  __int32 *v25;
  __int16 v26;
  unsigned __int32 *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v6 = ((uint64_t (*)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, unsigned int *))this)(a2, a3, a4, a5, &v19);
  if (v6)
  {
    v7.i32[0] = a3->mSelector;
    v9 = (int16x8_t)vmovl_u8(v7);
    *(int16x4_t *)v9.i8 = vrev64_s16(*(int16x4_t *)v9.i8);
    *(int8x8_t *)v9.i8 = vmovn_s16(v9);
    v17 = v9.i32[0];
    v18 = 0;
    v9.i32[0] = a3->mScope;
    v10 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v9.i8);
    *(int16x4_t *)v10.i8 = vrev64_s16(*(int16x4_t *)v10.i8);
    v15 = vmovn_s16(v10).u32[0];
    v16 = 0;
    v14[0] = HIBYTE(v6);
    v14[1] = BYTE2(v6);
    v14[2] = BYTE1(v6);
    v13 = v6;
    v14[3] = v6;
    v14[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      mElement = a3->mElement;
      *(_DWORD *)buf = 136316674;
      v21 = "HALS_PDPUCPlugIn.cpp";
      v22 = 1024;
      v23 = 144;
      v24 = 2080;
      v25 = &v17;
      v26 = 2080;
      v27 = &v15;
      v28 = 2048;
      v29 = mElement;
      v30 = 1024;
      v31 = v13;
      v32 = 2080;
      v33 = v14;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PDPUCPlugIn::ObjectGetPropertyDataSize: got an error from the plug-in for property [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v13;
  }
  return v19;
}

uint64_t HALS_PDPUCPlugIn::ObjectGetPropertyData(HALS_PDPUCPlugIn *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, unsigned int *a6, void *a7)
{
  uint64_t result;
  uint8x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  uint64_t mElement;
  _DWORD *exception;
  int v14;
  _BYTE v15[5];
  unsigned __int32 v16;
  char v17;
  __int32 v18;
  char v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  __int32 *v25;
  __int16 v26;
  unsigned __int32 *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  result = ((uint64_t (*)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, unsigned int *, void *))this)(a2, a3, a4, a5, a6, a7);
  if ((_DWORD)result)
  {
    v9.i32[0] = a3->mSelector;
    v10 = (int16x8_t)vmovl_u8(v9);
    *(int16x4_t *)v10.i8 = vrev64_s16(*(int16x4_t *)v10.i8);
    *(int8x8_t *)v10.i8 = vmovn_s16(v10);
    v18 = v10.i32[0];
    v19 = 0;
    v10.i32[0] = a3->mScope;
    v11 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8);
    *(int16x4_t *)v11.i8 = vrev64_s16(*(int16x4_t *)v11.i8);
    v16 = vmovn_s16(v11).u32[0];
    v17 = 0;
    v15[0] = BYTE3(result);
    v15[1] = BYTE2(result);
    v15[2] = BYTE1(result);
    v14 = result;
    v15[3] = result;
    v15[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      mElement = a3->mElement;
      *(_DWORD *)buf = 136316674;
      v21 = "HALS_PDPUCPlugIn.cpp";
      v22 = 1024;
      v23 = 151;
      v24 = 2080;
      v25 = &v18;
      v26 = 2080;
      v27 = &v16;
      v28 = 2048;
      v29 = mElement;
      v30 = 1024;
      v31 = v14;
      v32 = 2080;
      v33 = v15;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PDPUCPlugIn::ObjectGetPropertyData: got an error from the plug-in for property [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v14;
  }
  return result;
}

uint64_t HALS_PDPUCPlugIn::ObjectSetPropertyData(HALS_PDPUCPlugIn *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7)
{
  uint64_t result;
  uint8x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  uint64_t mElement;
  _DWORD *exception;
  int v14;
  _BYTE v15[5];
  unsigned __int32 v16;
  char v17;
  __int32 v18;
  char v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  __int32 *v25;
  __int16 v26;
  unsigned __int32 *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  result = ((uint64_t (*)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *))this)(a2, a3, a4, a5, a6, a7);
  if ((_DWORD)result)
  {
    v9.i32[0] = a3->mSelector;
    v10 = (int16x8_t)vmovl_u8(v9);
    *(int16x4_t *)v10.i8 = vrev64_s16(*(int16x4_t *)v10.i8);
    *(int8x8_t *)v10.i8 = vmovn_s16(v10);
    v18 = v10.i32[0];
    v19 = 0;
    v10.i32[0] = a3->mScope;
    v11 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8);
    *(int16x4_t *)v11.i8 = vrev64_s16(*(int16x4_t *)v11.i8);
    v16 = vmovn_s16(v11).u32[0];
    v17 = 0;
    v15[0] = BYTE3(result);
    v15[1] = BYTE2(result);
    v15[2] = BYTE1(result);
    v14 = result;
    v15[3] = result;
    v15[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      mElement = a3->mElement;
      *(_DWORD *)buf = 136316674;
      v21 = "HALS_PDPUCPlugIn.cpp";
      v22 = 1024;
      v23 = 157;
      v24 = 2080;
      v25 = &v18;
      v26 = 2080;
      v27 = &v16;
      v28 = 2048;
      v29 = mElement;
      v30 = 1024;
      v31 = v14;
      v32 = 2080;
      v33 = v15;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PDPUCPlugIn::ObjectSetPropertyData: got an error from the plug-in for property [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v14;
  }
  return result;
}

uint64_t get_terminal(AMCP::Log::Scope_Registry *a1, unsigned __int8 *a2)
{
  std::string *v4;
  std::string::size_type size;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  int v11;
  void *v13;
  int v14;
  AMCP::Log::Scope_Registry *v15;
  unsigned int v16;
  unint64_t v17;
  NSObject *v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  std::string *v22;
  std::string *v23;
  unsigned __int8 *v24;
  void *exception;
  std::string *v26;
  std::string *v27;
  unsigned __int8 *v28;
  NSObject *v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  uint64_t v32;
  std::string *v33;
  std::string *v34;
  void *v35;
  uint64_t v36;
  std::string *v37;
  std::string *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t (**v41)();
  __int128 v42;
  uint64_t v43;
  std::string v44;
  std::string v45;
  std::logic_error v46;
  std::string v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  std::string v53;
  __int16 v54;
  _BYTE v55[28];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v4 = *(std::string **)a1;
  if (*(char *)(*(_QWORD *)a1 + 47) < 0)
    std::string::__init_copy_ctor_external(&v53, v4[1].__r_.__value_.__l.__data_, v4[1].__r_.__value_.__l.__size_);
  else
    v53 = v4[1];
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  else
    size = v53.__r_.__value_.__l.__size_;
  v6 = a2[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a2 + 1);
  if (size != v6)
  {
    if ((*((_BYTE *)&v53.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(v53.__r_.__value_.__l.__data_);
LABEL_28:
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v53, "com.apple.coreaudio", "AMCP");
    v19 = *(NSObject **)v53.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v53);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v20 = pthread_self();
      v21 = pthread_mach_thread_np(v20);
      v22 = *(std::string **)a1;
      if (*(char *)(*(_QWORD *)a1 + 47) < 0)
        std::string::__init_copy_ctor_external(&v47, v22[1].__r_.__value_.__l.__data_, v22[1].__r_.__value_.__l.__size_);
      else
        v47 = v22[1];
      v23 = &v47;
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v23 = (std::string *)v47.__r_.__value_.__r.__words[0];
      if ((a2[23] & 0x80u) == 0)
        v24 = a2;
      else
        v24 = *(unsigned __int8 **)a2;
      LODWORD(v53.__r_.__value_.__l.__data_) = 67110402;
      HIDWORD(v53.__r_.__value_.__r.__words[0]) = v21;
      LOWORD(v53.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v53.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphCommon.cpp";
      WORD1(v53.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v53.__r_.__value_.__r.__words[2]) = 24;
      v54 = 2080;
      *(_QWORD *)v55 = "not (node->get_uid() == key.m_node)";
      *(_WORD *)&v55[8] = 2080;
      *(_QWORD *)&v55[10] = v23;
      *(_WORD *)&v55[18] = 2080;
      *(_QWORD *)&v55[20] = v24;
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid connection: '%s' and '%s'", (uint8_t *)&v53, 0x36u);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v52);
    exception = __cxa_allocate_exception(0x40uLL);
    v26 = *(std::string **)a1;
    if (*(char *)(*(_QWORD *)a1 + 47) < 0)
      std::string::__init_copy_ctor_external(&v44, v26[1].__r_.__value_.__l.__data_, v26[1].__r_.__value_.__l.__size_);
    else
      v44 = v26[1];
    v27 = &v44;
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)v44.__r_.__value_.__r.__words[0];
    if ((a2[23] & 0x80u) == 0)
      v28 = a2;
    else
      v28 = *(unsigned __int8 **)a2;
    caulk::make_string((caulk *)"Invalid connection: '%s' and '%s'", (uint64_t)&v45, v27, v28);
    std::logic_error::logic_error(&v46, &v45);
    v46.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v47, &v46);
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = -1;
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v47.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v53, (uint64_t)&v47);
    *(_QWORD *)&v55[6] = "Terminal &get_terminal(const std::shared_ptr<Node> &, const Terminal_Identifier &)";
    *(_QWORD *)&v55[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphCommon.cpp";
    *(_DWORD *)&v55[22] = 24;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v39);
    v41 = off_1E69A20A0;
    v42 = v39;
    v43 = v40;
    v39 = 0uLL;
    v40 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v53, (uint64_t)&v41);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&v53);
  }
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *(unsigned __int8 **)a2;
  if ((*((_BYTE *)&v53.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v13 = (void *)v53.__r_.__value_.__r.__words[0];
    v14 = memcmp(v53.__r_.__value_.__l.__data_, v8, v53.__r_.__value_.__l.__size_);
    operator delete(v13);
    if (v14)
      goto LABEL_28;
  }
  else if (*((_BYTE *)&v53.__r_.__value_.__s + 23))
  {
    v9 = 0;
    do
    {
      v10 = v53.__r_.__value_.__s.__data_[v9];
      v11 = v8[v9];
    }
    while (v10 == v11 && HIBYTE(v53.__r_.__value_.__r.__words[2]) - 1 != v9++);
    if (v10 != v11)
      goto LABEL_28;
  }
  v15 = *(AMCP::Log::Scope_Registry **)a1;
  v16 = *((_DWORD *)a2 + 8);
  v17 = *((_QWORD *)a2 + 3);
  if (v17 >= 0x6DB6DB6DB6DB6DB7
            * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24 * v16 + 64) - *(_QWORD *)(*(_QWORD *)a1 + 24 * v16 + 56)) >> 4))
  {
    AMCP::Log::Scope_Registry::get(v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v53, "com.apple.coreaudio", "AMCP");
    v29 = *(NSObject **)v53.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v53);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v30 = pthread_self();
      v31 = pthread_mach_thread_np(v30);
      v32 = *((_QWORD *)a2 + 3);
      v33 = *(std::string **)a1;
      if (*(char *)(*(_QWORD *)a1 + 47) < 0)
        std::string::__init_copy_ctor_external(&v47, v33[1].__r_.__value_.__l.__data_, v33[1].__r_.__value_.__l.__size_);
      else
        v47 = v33[1];
      v34 = &v47;
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v34 = (std::string *)v47.__r_.__value_.__r.__words[0];
      LODWORD(v53.__r_.__value_.__l.__data_) = 67110402;
      HIDWORD(v53.__r_.__value_.__r.__words[0]) = v31;
      LOWORD(v53.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v53.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphCommon.cpp";
      WORD1(v53.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v53.__r_.__value_.__r.__words[2]) = 27;
      v54 = 2080;
      *(_QWORD *)v55 = "not (key.m_terminal_index < size)";
      *(_WORD *)&v55[8] = 2048;
      *(_QWORD *)&v55[10] = v32;
      *(_WORD *)&v55[18] = 2080;
      *(_QWORD *)&v55[20] = v34;
      _os_log_error_impl(&dword_1B57BA000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid terminal index: terminal %zu of node '%s'", (uint8_t *)&v53, 0x36u);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v52);
    v35 = __cxa_allocate_exception(0x40uLL);
    v36 = *((_QWORD *)a2 + 3);
    v37 = *(std::string **)a1;
    if (*(char *)(*(_QWORD *)a1 + 47) < 0)
      std::string::__init_copy_ctor_external(&v44, v37[1].__r_.__value_.__l.__data_, v37[1].__r_.__value_.__l.__size_);
    else
      v44 = v37[1];
    v38 = &v44;
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v38 = (std::string *)v44.__r_.__value_.__r.__words[0];
    caulk::make_string((caulk *)"Invalid terminal index: terminal %zu of node '%s'", (uint64_t)&v45, v36, v38);
    std::logic_error::logic_error(&v46, &v45);
    v46.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v47, &v46);
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = -1;
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v47.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v53, (uint64_t)&v47);
    *(_QWORD *)&v55[6] = "Terminal &get_terminal(const std::shared_ptr<Node> &, const Terminal_Identifier &)";
    *(_QWORD *)&v55[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphCommon.cpp";
    *(_DWORD *)&v55[22] = 27;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v39);
    v41 = off_1E69A20A0;
    v42 = v39;
    v43 = v40;
    v39 = 0uLL;
    v40 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v53, (uint64_t)&v41);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v35, (uint64_t)&v53);
  }
  return AMCP::Graph::Node::get_nth_terminal((uint64_t)v15, v17, v16);
}

void sub_1B5ADB4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36)
{
  int v36;
  void *v37;
  uint64_t v38;
  uint64_t v40;

  if (__p)
    operator delete(__p);
  if (a11)
    operator delete(a11);
  *(_QWORD *)(v38 - 128) = &unk_1E69A2000;
  v40 = *(_QWORD *)(v38 - 120);
  if (v40 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v40 + 32))(v40))
    *(_QWORD *)(v38 - 120) = 0;
  MEMORY[0x1B5E500E8](v38 - 144);
  a35 = &unk_1E69A2000;
  if (a36 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a36 + 32))(a36))
    a36 = 0;
  MEMORY[0x1B5E500E8](&a33);
  MEMORY[0x1B5E500DC](&a31);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v36 & 1) == 0)
    {
LABEL_19:
      AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v38 - 145));
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_19;
  }
  __cxa_free_exception(v37);
  goto LABEL_19;
}

uint64_t get_terminal_for_key(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  std::logic_error_vtbl *v5;
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t nth_terminal;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  std::string *v19;
  void *exception;
  std::string *v21;
  NSObject *v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  std::string *v25;
  void *v26;
  std::string *v27;
  std::logic_error v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  uint64_t v34;
  std::string v35;
  std::string v36;
  std::logic_error v37;
  std::string __p;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint8_t buf[8];
  __int16 v44;
  char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  _BYTE v49[28];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v3 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)a1);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v16 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = pthread_self();
      v18 = pthread_mach_thread_np(v17);
      AMCP::Terminal_Identifier_to_string(&__p, (const void **)a1);
      v19 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v18;
      v44 = 2080;
      v45 = "GraphCommon.cpp";
      v46 = 1024;
      v47 = 37;
      v48 = 2080;
      *(_QWORD *)v49 = "not (found != nodes.end())";
      *(_WORD *)&v49[8] = 2080;
      *(_QWORD *)&v49[10] = v19;
      _os_log_error_impl(&dword_1B57BA000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Missing node for connection in when building manifest: %s", buf, 0x2Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    AMCP::Terminal_Identifier_to_string(&v35, (const void **)a1);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v35;
    else
      v21 = (std::string *)v35.__r_.__value_.__r.__words[0];
    caulk::make_string((caulk *)"Missing node for connection in when building manifest: %s", (uint64_t)&v36, v21);
    std::logic_error::logic_error(&v37, &v36);
    v37.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&__p, &v37);
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = -1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(_QWORD *)&v49[6] = "Terminal &get_terminal_for_key(const Terminal_Identifier &, const AMCP::Graph::Node_Map &)";
    *(_QWORD *)&v49[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphCommon.cpp";
    *(_DWORD *)&v49[22] = 37;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v30);
    v33 = v30;
    v34 = v31;
    v30 = 0uLL;
    v31 = 0;
    v32 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v32);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = v3;
  v5 = (std::logic_error_vtbl *)*((_QWORD *)v3 + 5);
  v6 = (char *)*((_QWORD *)v4 + 6);
  v37.__vftable = v5;
  v37.__imp_.__imp_ = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_DWORD *)(a1 + 32);
  v10 = 0x6DB6DB6DB6DB6DB7 * (((char *)v5[v9 + 2].what - (char *)v5[v9 + 2].~logic_error_0) >> 4);
  v11 = *(_QWORD *)(a1 + 24);
  if (v11 > v10)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v22 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      AMCP::Terminal_Identifier_to_string(&__p, (const void **)a1);
      v25 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v24;
      v44 = 2080;
      v45 = "GraphCommon.cpp";
      v46 = 1024;
      v47 = 41;
      v48 = 2080;
      *(_QWORD *)v49 = "not (key.m_terminal_index <= num_other_terminals)";
      *(_WORD *)&v49[8] = 2080;
      *(_QWORD *)&v49[10] = v25;
      *(_WORD *)&v49[18] = 2048;
      *(_QWORD *)&v49[20] = v10;
      _os_log_error_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Missing terminal for connection in when building manifest - index: %s  terminals: %ld", buf, 0x36u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    v26 = __cxa_allocate_exception(0x40uLL);
    AMCP::Terminal_Identifier_to_string(&v35, (const void **)a1);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v35;
    else
      v27 = (std::string *)v35.__r_.__value_.__r.__words[0];
    caulk::make_string((caulk *)"Missing terminal for connection in when building manifest - index: %s  terminals: %ld", (uint64_t)&v36, v27, v10);
    std::logic_error::logic_error(&v28, &v36);
    v28.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&__p, &v28);
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = -1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(_QWORD *)&v49[6] = "Terminal &get_terminal_for_key(const Terminal_Identifier &, const AMCP::Graph::Node_Map &)";
    *(_QWORD *)&v49[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphCommon.cpp";
    *(_DWORD *)&v49[22] = 41;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v30);
    v33 = v30;
    v34 = v31;
    v30 = 0uLL;
    v31 = 0;
    v32 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v32);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v26, (uint64_t)buf);
  }
  nth_terminal = AMCP::Graph::Node::get_nth_terminal((uint64_t)v5, v11, v9);
  if (v6)
  {
    v13 = (unint64_t *)(v6 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(char *))(*(_QWORD *)v6 + 16))(v6);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6);
    }
  }
  return nth_terminal;
}

void sub_1B5ADBBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOPrewarmManager::Start(_QWORD *a1, int a2)
{
  uint64_t v2;
  _QWORD *v3;

  if (a2 == 1)
  {
    v2 = *a1;
    v3 = a1;
  }
  else
  {
    if (a2)
      goto LABEL_7;
    v3 = a1 + 1;
    v2 = a1[1];
  }
  if (v2 != -1)
    *v3 = v2 + 1;
LABEL_7:
  if (a1[1])
    return 2;
  else
    return *a1 != 0;
}

void HALS_IOPrewarmManager::GetState(HALS_IOPrewarmManager *this, unint64_t *a2)
{
  _DWORD *v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (a2[1])
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      if ((unint64_t)v6 >= v5)
      {
        v9 = v6 - v4;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v5 - (_QWORD)v4) >> 1 > v10)
          v10 = (uint64_t)(v5 - (_QWORD)v4) >> 1;
        if (v5 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL)
          v11 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v11);
        else
          v12 = 0;
        v13 = (_DWORD *)(v11 + 4 * v9);
        *v13 = 0;
        v8 = v13 + 1;
        while (v6 != v4)
        {
          v14 = *--v6;
          *--v13 = v14;
        }
        v5 = v11 + 4 * v12;
        *(_QWORD *)this = v13;
        *((_QWORD *)this + 1) = v8;
        *((_QWORD *)this + 2) = v5;
        if (v4)
          operator delete(v4);
        v4 = v13;
      }
      else
      {
        *v6 = 0;
        v8 = v6 + 1;
      }
      *((_QWORD *)this + 1) = v8;
      ++v7;
      v6 = v8;
    }
    while (v7 < a2[1]);
  }
  else
  {
    v4 = 0;
    v8 = 0;
  }
  if (*a2)
  {
    v15 = 0;
    v16 = *((_QWORD *)this + 2);
    do
    {
      if ((unint64_t)v8 >= v16)
      {
        v18 = v8 - v4;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v16 - (_QWORD)v4) >> 1 > v19)
          v19 = (uint64_t)(v16 - (_QWORD)v4) >> 1;
        if (v16 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
          v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v20);
        else
          v21 = 0;
        v22 = (_DWORD *)(v20 + 4 * v18);
        *v22 = 1;
        v17 = v22 + 1;
        while (v8 != v4)
        {
          v23 = *--v8;
          *--v22 = v23;
        }
        v16 = v20 + 4 * v21;
        *(_QWORD *)this = v22;
        *((_QWORD *)this + 1) = v17;
        *((_QWORD *)this + 2) = v16;
        if (v4)
          operator delete(v4);
        v4 = v22;
      }
      else
      {
        *v8 = 1;
        v17 = v8 + 1;
      }
      *((_QWORD *)this + 1) = v17;
      ++v15;
      v8 = v17;
    }
    while (v15 < *a2);
  }
}

void sub_1B5ADC028(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL HALS_DeviceManager::HasProperty(HALS_DeviceManager *this, HALS_Client *a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  signed int mSelector;
  _BOOL8 result;
  int v7;
  int NumberClockDevices;

  mSelector = a3->mSelector;
  result = 1;
  if ((int)a3->mSelector <= 1869638758)
  {
    if (mSelector > 1668049698)
    {
      if (mSelector <= 1685416291)
      {
        if (mSelector != 1668049699)
        {
          v7 = 1684370979;
          goto LABEL_26;
        }
        goto LABEL_29;
      }
      if (mSelector == 1685416292)
        return result;
      v7 = 1819173229;
      goto LABEL_26;
    }
    if (mSelector == 1650682995)
      return result;
    if (mSelector != 1651472419)
    {
      v7 = 1668047219;
      goto LABEL_26;
    }
    goto LABEL_28;
  }
  if (mSelector > 1937007733)
  {
    if (mSelector > 1969841250)
    {
      if (mSelector == 1969841251)
      {
LABEL_29:
        NumberClockDevices = HALS_DeviceManager::GetNumberClockDevices(this, a2);
        return NumberClockDevices != 0;
      }
      v7 = 1969841252;
LABEL_26:
      if (mSelector == v7)
        return result;
      return 0;
    }
    if (mSelector == 1937007734)
      return result;
    if (mSelector == 1969841250)
    {
LABEL_28:
      NumberClockDevices = HALS_DeviceManager::GetNumberBoxes(this, a4);
      return NumberClockDevices != 0;
    }
    return 0;
  }
  if (mSelector != 1869638759 && mSelector != 1870098020 && mSelector != 1885956452)
    return 0;
  return result;
}

uint64_t HALS_DeviceManager::IsPropertySettable(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  BOOL v4;
  int v5;

  v3 = *a3;
  if (*a3 > 1685416291)
  {
    v4 = (v3 - 1969841250) < 3 || v3 == 1685416292;
    v5 = 1885956452;
  }
  else
  {
    v4 = v3 == 1651472419 || v3 == 1668049699;
    v5 = 1684370979;
  }
  if (v4 || v3 == v5)
    return 0;
  else
    return HALS_Object::IsPropertySettable(a1, a2, a3);
}

uint64_t HALS_DeviceManager::GetPropertyDataSize(HALS_DeviceManager *this, HALS_Client *a2, AudioObjectPropertyAddress *a3, unsigned int a4, _DWORD *a5, HALS_Client *a6)
{
  signed int mSelector;
  uint64_t v9;
  int NumberDevices;
  uint64_t v13;
  HALB_Mutex *v14;
  HALS_ObjectMap **v15;
  HALS_ObjectMap **v16;
  HALS_ObjectMap **v17;
  HALS_ObjectMap **v18;
  HALB_Mutex *v19;
  HALS_Object *v20;
  unint64_t v21;
  HALS_ObjectMap **v22;
  int v23;
  unint64_t v24;
  HALS_ObjectMap **v25;
  unint64_t v26;
  HALB_Info *v27;
  HALB_Info *v28;
  int v29;
  _BOOL4 IsSubClass;
  BOOL v31;
  int v32;
  HALS_ObjectMap **v33;
  HALS_ObjectMap **v34;
  unint64_t v35;
  HALB_Info *v36;
  HALB_Info *v37;
  int v38;
  _BOOL4 v39;
  BOOL v40;
  int v41;
  unint64_t v43;
  HALB_Info *v44;
  HALB_Info *v45;
  int v46;
  _BOOL4 v47;
  BOOL v48;
  int v49;
  HALS_Object *v50;
  HALS_Object *v51;
  HALS_ObjectMap **v52;
  HALS_ObjectMap **i;
  HALS_ObjectMap **v54;
  HALS_ObjectMap **v55;
  HALS_ObjectMap **v56;
  uint64_t v57;
  HALS_ObjectMap **v58;
  HALS_ObjectMap **v59;
  uint64_t v60;
  HALS_ObjectMap **v61;
  HALS_ObjectMap **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t);
  void *v67;
  HALS_DeviceManager *v68;
  HALS_ObjectMap ***v69;
  HALS_Client *v70;

  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1870098019)
  {
    if (mSelector > 1684370978)
    {
      if (mSelector != 1684370979)
      {
        if (mSelector == 1685416292)
          return 32;
        return HALS_Object::GetPropertyDataSize((uint64_t)this, (uint64_t)a2, (int *)a3);
      }
      NumberDevices = HALS_DeviceManager::GetNumberDevices(this, a6, (HALS_Client *)a3);
    }
    else if (mSelector == 1651472419)
    {
      NumberDevices = HALS_DeviceManager::GetNumberBoxes(this, a6);
    }
    else
    {
      if (mSelector != 1668049699)
        return HALS_Object::GetPropertyDataSize((uint64_t)this, (uint64_t)a2, (int *)a3);
      NumberDevices = HALS_DeviceManager::GetNumberClockDevices(this, a2);
    }
    return (4 * NumberDevices);
  }
  if (mSelector <= 1969841249)
  {
    if (mSelector == 1870098020)
    {
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v13 = MEMORY[0x1E0C809B0];
      v64 = MEMORY[0x1E0C809B0];
      v65 = 0x40000000;
      v66 = ___ZNK18HALS_DeviceManager11CopyBoxListERNS_12BasicBoxListEP11HALS_Client_block_invoke;
      v67 = &__block_descriptor_tmp_8181;
      v68 = this;
      v69 = &v61;
      v70 = a6;
      v14 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DeviceManager *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v14, (uint64_t)&v64);
      v16 = v61;
      v15 = v62;
      v58 = 0;
      v59 = 0;
      v60 = 0;
      HALS_DeviceManager::CopyDeviceList(this, (HALS_DeviceManager::BasicDeviceList *)&v58, 0, a6);
      v18 = v58;
      v17 = v59;
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v64 = v13;
      v65 = 0x40000000;
      v66 = ___ZNK18HALS_DeviceManager19CopyClockDeviceListERNS_20BasicClockDeviceListEP11HALS_Client_block_invoke;
      v67 = &__block_descriptor_tmp_7_8182;
      v68 = this;
      v69 = &v55;
      v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DeviceManager *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v19, (uint64_t)&v64);
      v21 = (unint64_t)((char *)v15 - (char *)v16) >> 3;
      v22 = v55;
      v23 = ((unint64_t)((char *)v17 - (char *)v18) >> 3)
          + v21
          + ((unint64_t)((char *)v56 - (char *)v55) >> 3);
      if (a4 >= 4 && a5)
      {
        v24 = a4 >> 2;
        v25 = v61;
        v52 = v56;
        for (i = v62; v25 != i; ++v25)
        {
          v26 = 0;
          v27 = (HALB_Info *)*((unsigned int *)*v25 + 5);
          v28 = (HALB_Info *)*((unsigned int *)*v25 + 6);
          do
          {
            v29 = a5[v26];
            IsSubClass = HALB_Info::IsSubClass(v27, v29);
            v31 = IsSubClass;
            v32 = (_DWORD)v27 != (_DWORD)v28 || IsSubClass;
            if ((_DWORD)v27 != (_DWORD)v28 && !v31)
              v32 = HALB_Info::IsSubClass(v28, v29);
            if ((v32 & 1) != 0)
              break;
            ++v26;
          }
          while (v26 < v24);
          v23 -= v32 ^ 1;
        }
        v34 = v58;
        v33 = v59;
        v54 = v59;
        while (v34 != v33)
        {
          v35 = 0;
          v36 = (HALB_Info *)*((unsigned int *)*v34 + 5);
          v37 = (HALB_Info *)*((unsigned int *)*v34 + 6);
          do
          {
            v38 = a5[v35];
            v39 = HALB_Info::IsSubClass(v36, v38);
            v40 = v39;
            v41 = (_DWORD)v36 != (_DWORD)v37 || v39;
            if ((_DWORD)v36 != (_DWORD)v37 && !v40)
              v41 = HALB_Info::IsSubClass(v37, v38);
            if ((v41 & 1) != 0)
              break;
            ++v35;
          }
          while (v35 < v24);
          v23 -= v41 ^ 1;
          ++v34;
          v33 = v54;
        }
        while (v22 != v52)
        {
          v43 = 0;
          v44 = (HALB_Info *)*((unsigned int *)*v22 + 5);
          v45 = (HALB_Info *)*((unsigned int *)*v22 + 6);
          do
          {
            v46 = a5[v43];
            v47 = HALB_Info::IsSubClass(v44, v46);
            v48 = v47;
            v49 = (_DWORD)v44 != (_DWORD)v45 || v47;
            if ((_DWORD)v44 != (_DWORD)v45 && !v48)
              v49 = HALB_Info::IsSubClass(v45, v46);
            if ((v49 & 1) != 0)
              break;
            ++v43;
          }
          while (v43 < v24);
          v23 -= v49 ^ 1;
          ++v22;
        }
      }
      v9 = (4 * v23);
      HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v55, v20);
      HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v58, v50);
      HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v61, v51);
      return v9;
    }
    if (mSelector == 1885956452)
      return 8;
    return HALS_Object::GetPropertyDataSize((uint64_t)this, (uint64_t)a2, (int *)a3);
  }
  if (mSelector != 1969841250 && mSelector != 1969841251 && mSelector != 1969841252)
    return HALS_Object::GetPropertyDataSize((uint64_t)this, (uint64_t)a2, (int *)a3);
  return 4;
}

void sub_1B5ADC630(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  HALS_Object *v9;
  HALS_ObjectMap **v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, HALS_ObjectMap **);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va, a2);
  HALS_DeviceManager::BasicBoxList::~BasicBoxList((HALS_ObjectMap ***)va1, v9);
  _Unwind_Resume(a1);
}

void HALS_DeviceManager::GetPropertyData(HALS_DeviceManager *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, unsigned int a7, const __CFString **a8, HALS_Client *a9)
{
  uint64_t *v9;
  signed int mSelector;
  int v14;
  HALS_ObjectMap *v16;
  HALS_Object *v17;
  int v18;
  HALB_Mutex *v19;
  HALS_Object *v20;
  HALS_ObjectMap **v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  HALB_Mutex *v28;
  HALS_Object *v29;
  HALS_ObjectMap **v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  HALB_Mutex *v36;
  HALB_Mutex *v37;
  HALS_Object *v38;
  HALS_ObjectMap **v39;
  unsigned int v40;
  HALS_ObjectMap *v41;
  HALB_Info *v42;
  HALB_Info *v43;
  int *v44;
  uint64_t v45;
  int v46;
  int v47;
  BOOL IsSubClass;
  HALS_Object *v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  HALS_ObjectMap *v56;
  HALS_Object *v57;
  int v58;
  HALS_ObjectMap **v59;
  HALS_ObjectMap **v60;
  uint64_t v61;
  uint64_t v62;
  HALS_ObjectMap **v63;
  HALS_ObjectMap **v64;
  unint64_t v65;
  HALS_ObjectMap **v66;
  HALS_ObjectMap **v67;
  unint64_t v68;
  HALS_ObjectMap **v69;
  uint64_t v70;
  HALS_ObjectMap *v71;
  HALB_Info *v72;
  HALB_Info *v73;
  int *v74;
  uint64_t v75;
  int v76;
  int v77;
  BOOL v78;
  HALS_ObjectMap **v79;
  uint64_t v80;
  HALS_ObjectMap *v81;
  HALB_Info *v82;
  HALB_Info *v83;
  int *v84;
  uint64_t v85;
  int v86;
  int v87;
  BOOL v88;
  HALS_Object *v89;
  _DWORD *v90;
  _DWORD *v91;
  _DWORD *exception;
  _DWORD *v93;
  _DWORD *v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  _DWORD *v98;
  _DWORD *v99;
  _DWORD *v100;
  _DWORD *v101;
  _DWORD *v102;
  _DWORD *v103;
  _DWORD *v104;
  _DWORD *v105;
  unsigned int *v106;
  uint64_t v107;
  HALS_ObjectMap **v108;
  HALS_ObjectMap **v109;
  HALS_ObjectMap **v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  HALS_ObjectMap **v115;
  HALS_ObjectMap **v116;
  uint64_t v117;
  HALS_ObjectMap **v118;
  HALS_ObjectMap **v119;
  uint64_t v120;
  HALS_ObjectMap **v121;
  HALS_ObjectMap **v122;
  uint64_t v123;
  uint8_t buf[24];
  void *v125;
  HALS_DeviceManager *v126;
  HALS_ObjectMap ***v127;
  HALS_Client *v128;
  uint64_t v129;

  v9 = a6;
  v129 = *MEMORY[0x1E0C80C00];
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1870098019)
  {
    if (mSelector > 1969841249)
    {
      switch(mSelector)
      {
        case 1969841250:
          if (a7 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_DeviceManager.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1000;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: the qualifier is the wrong size for kAudioPlugInPropertyTranslateUIDToBox", buf, 0x12u);
            }
            exception = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)exception = &off_1E69A1B30;
            exception[2] = 1852797029;
          }
          if (!a8)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_DeviceManager.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1001;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: no qualifier data for kAudioPlugInPropertyTranslateUIDToBox", buf, 0x12u);
            }
            v96 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v96 = &off_1E69A1B30;
            v96[2] = 1852797029;
          }
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_DeviceManager.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1006;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: bad property data size for kAudioPlugInPropertyTranslateUIDToBox", buf, 0x12u);
            }
            v100 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v100 = &off_1E69A1B30;
            v100[2] = 561211770;
          }
          v16 = HALS_DeviceManager::CopyBoxByUID(this, *a8, a9);
          if (v16)
            v18 = *((_DWORD *)v16 + 4);
          else
            v18 = 0;
          break;
        case 1969841251:
          if (a7 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_DeviceManager.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1042;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: the qualifier is the wrong size for kAudioPlugInPropertyTranslateUIDToClockDevice", buf, 0x12u);
            }
            v94 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v94 = &off_1E69A1B30;
            v94[2] = 1852797029;
          }
          if (!a8)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_DeviceManager.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1043;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: no qualifier data for kAudioPlugInPropertyTranslateUIDToClockDevice", buf, 0x12u);
            }
            v98 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v98 = &off_1E69A1B30;
            v98[2] = 1852797029;
          }
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_DeviceManager.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1048;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: bad property data size for kAudioPlugInPropertyTranslateUIDToClockDevice", buf, 0x12u);
            }
            v102 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v102 = &off_1E69A1B30;
            v102[2] = 561211770;
          }
          v16 = HALS_DeviceManager::CopyClockDeviceByUID(this, *a8, (HALS_Client *)a3);
          if (v16)
            v18 = *((_DWORD *)v16 + 4);
          else
            v18 = 0;
          break;
        case 1969841252:
          if (a7 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_DeviceManager.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 958;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: the qualifier is the wrong size for kAudioHardwarePropertyTranslateUIDToDevice", buf, 0x12u);
            }
            v91 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v91 = &off_1E69A1B30;
            v91[2] = 1852797029;
          }
          if (!a8)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_DeviceManager.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 959;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: no qualifier data for kAudioHardwarePropertyTranslateUIDToDevice", buf, 0x12u);
            }
            v95 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v95 = &off_1E69A1B30;
            v95[2] = 1852797029;
          }
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_DeviceManager.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 964;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: bad property data size for kAudioHardwarePropertyTranslateUIDToDevice", buf, 0x12u);
            }
            v99 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v99 = &off_1E69A1B30;
            v99[2] = 561211770;
          }
          v16 = HALS_DeviceManager::CopyDeviceByUID(this, *a8, a9);
          if (v16)
            v18 = *((_DWORD *)v16 + 4);
          else
            v18 = 0;
          break;
        default:
          goto LABEL_78;
      }
      *(_DWORD *)v9 = v18;
      *a5 = 4;
      HALS_ObjectMap::ReleaseObject(v16, v17);
      return;
    }
    if (mSelector == 1870098020)
    {
      v121 = 0;
      v122 = 0;
      v123 = 0;
      v35 = MEMORY[0x1E0C809B0];
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZNK18HALS_DeviceManager11CopyBoxListERNS_12BasicBoxListEP11HALS_Client_block_invoke;
      v125 = &__block_descriptor_tmp_8181;
      v126 = this;
      v127 = &v121;
      v128 = a9;
      v36 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DeviceManager *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v36, (uint64_t)buf);
      v118 = 0;
      v119 = 0;
      v120 = 0;
      HALS_DeviceManager::CopyDeviceList(this, (HALS_DeviceManager::BasicDeviceList *)&v118, 0, a9);
      v115 = 0;
      v116 = 0;
      v117 = 0;
      *(_QWORD *)buf = v35;
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZNK18HALS_DeviceManager19CopyClockDeviceListERNS_20BasicClockDeviceListEP11HALS_Client_block_invoke;
      v125 = &__block_descriptor_tmp_7_8182;
      v126 = this;
      v127 = &v115;
      v37 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DeviceManager *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v37, (uint64_t)buf);
      v113 = a4 >> 2;
      v106 = a5;
      if (a7 < 4 || !a8)
      {
        v59 = v121;
        v60 = v122;
        if (v121 == v122)
        {
          v40 = 0;
        }
        else
        {
          v61 = 0;
          v62 = 0;
          if (v113 <= 1)
            v40 = 1;
          else
            v40 = a4 >> 2;
          do
          {
            *((_DWORD *)v9 + v62) = *((_DWORD *)v59[v62] + 4);
            if (v40 - 1 == v62)
              goto LABEL_95;
            ++v62;
            ++v61;
          }
          while (&v59[v61] != v60);
          v40 = v62;
        }
LABEL_95:
        v63 = v118;
        v64 = v119;
        if (v118 != v119)
        {
          v65 = v40;
          if (v113 <= v40 + 1)
            ++v40;
          else
            v40 = a4 >> 2;
          do
          {
            *((_DWORD *)v9 + v65++) = *((_DWORD *)*v63 + 4);
            if (v65 >= v113)
              goto LABEL_102;
            ++v63;
          }
          while (v63 != v64);
          v40 = v65;
        }
LABEL_102:
        v66 = v115;
        v67 = v116;
        if (v115 != v116)
        {
          v68 = v40;
          if (v113 <= v40 + 1)
            ++v40;
          else
            v40 = a4 >> 2;
          do
          {
            *((_DWORD *)v9 + v68++) = *((_DWORD *)*v66 + 4);
            if (v68 >= v113)
              goto LABEL_109;
            ++v66;
          }
          while (v66 != v67);
          v40 = v68;
        }
LABEL_109:
        *a5 = 4 * v40;
        goto LABEL_143;
      }
      v111 = a7 >> 2;
      v39 = v121;
      v108 = v122;
      if (v121 == v122)
      {
        v40 = 0;
        goto LABEL_111;
      }
      v40 = 0;
LABEL_41:
      v41 = *v39;
      v42 = (HALB_Info *)*((unsigned int *)*v39 + 5);
      v43 = (HALB_Info *)*((unsigned int *)*v39 + 6);
      v44 = (int *)a8;
      v45 = v111;
      while (1)
      {
        v47 = *v44++;
        v46 = v47;
        IsSubClass = HALB_Info::IsSubClass(v42, v47);
        if ((_DWORD)v42 == (_DWORD)v43 || IsSubClass)
        {
          if ((_DWORD)v42 != (_DWORD)v43 || IsSubClass)
          {
LABEL_49:
            *((_DWORD *)v9 + v40++) = *((_DWORD *)v41 + 4);
LABEL_50:
            if (v40 >= v113 || (++v39, v39 == v108))
            {
LABEL_111:
              v69 = v118;
              v109 = v119;
              if (v118 == v119)
                goto LABEL_127;
              if (v111 <= 1)
                v70 = 1;
              else
                v70 = v111;
              v107 = v70;
LABEL_116:
              v71 = *v69;
              v72 = (HALB_Info *)*((unsigned int *)*v69 + 5);
              v73 = (HALB_Info *)*((unsigned int *)*v69 + 6);
              v74 = (int *)a8;
              v75 = v107;
              while (1)
              {
                v77 = *v74++;
                v76 = v77;
                v78 = HALB_Info::IsSubClass(v72, v77);
                if ((_DWORD)v72 == (_DWORD)v73 || v78)
                {
                  if ((_DWORD)v72 != (_DWORD)v73 || v78)
                  {
LABEL_124:
                    *((_DWORD *)v9 + v40++) = *((_DWORD *)v71 + 4);
LABEL_125:
                    if (v40 < v113 && ++v69 != v109)
                      goto LABEL_116;
LABEL_127:
                    v79 = v115;
                    v110 = v116;
                    if (v115 == v116)
                      goto LABEL_143;
                    if (v111 <= 1)
                      v80 = 1;
                    else
                      v80 = v111;
                    v112 = v80;
LABEL_132:
                    v81 = *v79;
                    v82 = (HALB_Info *)*((unsigned int *)*v79 + 5);
                    v83 = (HALB_Info *)*((unsigned int *)*v79 + 6);
                    v84 = (int *)a8;
                    v85 = v112;
                    while (1)
                    {
                      v87 = *v84++;
                      v86 = v87;
                      v88 = HALB_Info::IsSubClass(v82, v87);
                      if ((_DWORD)v82 == (_DWORD)v83 || v88)
                      {
                        if ((_DWORD)v82 != (_DWORD)v83 || v88)
                        {
LABEL_140:
                          *((_DWORD *)v9 + v40++) = *((_DWORD *)v81 + 4);
LABEL_141:
                          if (v40 >= v113 || (++v79, v79 == v110))
                          {
LABEL_143:
                            *v106 = 4 * v40;
                            HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v115, v38);
                            HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v118, v89);
                            goto LABEL_144;
                          }
                          goto LABEL_132;
                        }
                      }
                      else if (HALB_Info::IsSubClass(v83, v86))
                      {
                        goto LABEL_140;
                      }
                      if (!--v85)
                        goto LABEL_141;
                    }
                  }
                }
                else if (HALB_Info::IsSubClass(v73, v76))
                {
                  goto LABEL_124;
                }
                if (!--v75)
                  goto LABEL_125;
              }
            }
            goto LABEL_41;
          }
        }
        else if (HALB_Info::IsSubClass(v43, v46))
        {
          goto LABEL_49;
        }
        if (!--v45)
          goto LABEL_50;
      }
    }
    v14 = 1885956452;
LABEL_26:
    if (mSelector == v14)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_DeviceManager.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 900;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::GetPropertyData: bad property data size for kAudioPlugInPropertyBundleID", buf, 0x12u);
        }
        v90 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v90 = &off_1E69A1B30;
        v90[2] = 561211770;
      }
      v26 = (const void *)*((_QWORD *)this + 6);
      if (v26)
      {
        CFRetain(v26);
        v27 = *((_QWORD *)this + 6);
      }
      else
      {
        v27 = 0;
      }
      *v9 = v27;
      *a5 = 8;
      return;
    }
LABEL_78:
    HALS_Object::GetPropertyData((uint64_t)this, a2, (int *)a3, a4, (int *)a5, a6);
    return;
  }
  if (mSelector <= 1684370978)
  {
    if (mSelector == 1651472419)
    {
      v121 = 0;
      v122 = 0;
      v123 = 0;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZNK18HALS_DeviceManager11CopyBoxListERNS_12BasicBoxListEP11HALS_Client_block_invoke;
      v125 = &__block_descriptor_tmp_8181;
      v126 = this;
      v127 = &v121;
      v128 = a9;
      v28 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DeviceManager *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v28, (uint64_t)buf);
      v30 = v121;
      v31 = v122 - v121;
      v32 = a4 >> 2;
      if (v31 < v32)
        v32 = v122 - v121;
      if ((_DWORD)v32)
      {
        v33 = v32;
        do
        {
          if (!v31)
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          v34 = (uint64_t)*v30++;
          *(_DWORD *)v9 = *(_DWORD *)(v34 + 16);
          v9 = (uint64_t *)((char *)v9 + 4);
          --v31;
          --v33;
        }
        while (v33);
      }
      *a5 = 4 * v32;
LABEL_144:
      HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v121, v29);
    }
    else
    {
      if (mSelector != 1668049699)
        goto LABEL_78;
      v121 = 0;
      v122 = 0;
      v123 = 0;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZNK18HALS_DeviceManager19CopyClockDeviceListERNS_20BasicClockDeviceListEP11HALS_Client_block_invoke;
      v125 = &__block_descriptor_tmp_7_8182;
      v126 = this;
      v127 = &v121;
      v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DeviceManager *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v19, (uint64_t)buf);
      v21 = v121;
      v22 = v122 - v121;
      v23 = a4 >> 2;
      if (v22 < v23)
        v23 = v122 - v121;
      if ((_DWORD)v23)
      {
        v24 = v23;
        do
        {
          if (!v22)
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          v25 = (uint64_t)*v21++;
          *(_DWORD *)v9 = *(_DWORD *)(v25 + 16);
          v9 = (uint64_t *)((char *)v9 + 4);
          --v22;
          --v24;
        }
        while (v24);
      }
      *a5 = 4 * v23;
      HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v121, v20);
    }
  }
  else if (mSelector == 1684370979)
  {
    memset(buf, 0, sizeof(buf));
    HALS_DeviceManager::CopyDeviceList(this, (HALS_DeviceManager::BasicDeviceList *)buf, 0, a9);
    v50 = *(uint64_t **)buf;
    v51 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
    v52 = a4 >> 2;
    if (v51 < v52)
      v52 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
    if ((_DWORD)v52)
    {
      v53 = v52;
      do
      {
        if (!v51)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v54 = *v50++;
        *(_DWORD *)v9 = *(_DWORD *)(v54 + 16);
        v9 = (uint64_t *)((char *)v9 + 4);
        --v51;
        --v53;
      }
      while (v53);
    }
    *a5 = 4 * v52;
    HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)buf, v49);
  }
  else
  {
    if (mSelector != 1685416292)
    {
      v14 = 1819173229;
      goto LABEL_26;
    }
    if (a4 <= 0x1F)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_DeviceManager.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 923;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: wrong data size for kAudioHardwarePropertyDeviceForUID", buf, 0x12u);
      }
      v93 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v93 = &off_1E69A1B30;
      v93[2] = 561211770;
    }
    if (!a6)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_DeviceManager.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 924;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: translation data is NULL", buf, 0x12u);
      }
      v97 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v97 = &off_1E69A1B30;
      v97[2] = 1852797029;
    }
    if (*((_DWORD *)a6 + 2) != 8)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_DeviceManager.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 930;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: wrong data size for input to kAudioHardwarePropertyDeviceForUID", buf, 0x12u);
      }
      v101 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v101 = &off_1E69A1B30;
      v101[2] = 561211770;
    }
    if (!*a6)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_DeviceManager.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 931;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: input to kAudioHardwarePropertyDeviceForUID is NULL", buf, 0x12u);
      }
      v103 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v103 = &off_1E69A1B30;
      v103[2] = 1852797029;
    }
    if (*((_DWORD *)a6 + 6) != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_DeviceManager.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 935;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: wrong data size for output to kAudioHardwarePropertyDeviceForUID", buf, 0x12u);
      }
      v104 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v104 = &off_1E69A1B30;
      v104[2] = 561211770;
    }
    v55 = (_DWORD *)a6[2];
    if (!v55)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_DeviceManager.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 936;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: output to kAudioHardwarePropertyDeviceForUID is NULL", buf, 0x12u);
      }
      v105 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v105 = &off_1E69A1B30;
      v105[2] = 1852797029;
    }
    v56 = HALS_DeviceManager::CopyDeviceByUID(this, *(const __CFString **)*a6, a9);
    if (v56)
      v58 = *((_DWORD *)v56 + 4);
    else
      v58 = 0;
    *v55 = v58;
    *a5 = a4;
    HALS_ObjectMap::ReleaseObject(v56, v57);
  }
}

void sub_1B5ADD8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void HALS_DeviceManager::HandleOwnedObjectPropertiesChanged(HALS_DeviceManager *this, const HALS_Object *a2, uint64_t a3, unsigned int a4, const AudioObjectPropertyAddress *a5, int a6)
{
  int v10;
  BOOL v11;
  int v12;
  const AudioObjectPropertyAddress *i;
  uint64_t v15;
  AudioObjectPropertyAddress *v17;
  AudioObjectPropertyAddress *v18;
  HALS_NotificationManager *v19;
  uint64_t v20;
  int v21;
  int v22;

  v10 = *((_DWORD *)a2 + 5);
  if (v10 <= 1701078389)
  {
    v11 = v10 == 1633773415;
    v12 = 1633969526;
  }
  else
  {
    v11 = v10 == 1701078390 || v10 == 1701733488;
    v12 = 1919182198;
  }
  if (!v11 && v10 != v12)
  {
    v21 = *((_DWORD *)a2 + 6);
    if (v10 == v21)
      return;
    if (v21 <= 1701078389)
    {
      if (v21 != 1633773415)
      {
        v22 = 1633969526;
LABEL_41:
        if (v21 != v22)
          return;
      }
    }
    else if (v21 != 1701078390 && v21 != 1919182198)
    {
      v22 = 1701733488;
      goto LABEL_41;
    }
  }
  i = a5;
  if (a4)
  {
    v15 = 12 * a4;
    for (i = a5; i->mSelector != 1751412337 && i->mSelector != 1751737454; ++i)
    {
      v15 -= 12;
      if (!v15)
        return;
    }
  }
  if (i != &a5[a4])
  {
    if (i->mSelector == 1751412337)
    {
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v18 = (AudioObjectPropertyAddress *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(1uLL);
      *(_QWORD *)&v18->mSelector = 0x676C6F6264657623;
      v18->mElement = 0;
      v17 = v18 + 1;
    }
    if (HALS_Device::IsHidden(a2))
      HALS_Device::ClearDeviceArrivalTime((const __CFString **)a2);
    else
      HALS_Device::UpdateDeviceArrivalTime(a2);
    if (v18 != v17)
    {
      v19 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
      v20 = -1431655765 * ((unint64_t)((char *)v17 - (char *)v18) >> 2);
      if (a6)
        HALS_Object::PropertiesChanged_Sync(this, v19, a3, v20, v18);
      else
        HALS_Object::PropertiesChanged(this, v19, a3, v20, v18);
      v17 = v18;
    }
    if (v17)
      operator delete(v17);
  }
}

void sub_1B5ADDB98(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HALS_DeviceManager::HandleOwnedObjectGroupPropertiesChanged(HALS_DeviceManager *this, HALS_ObjectMap *a2, uint64_t a3, unsigned int a4, const unsigned int *a5, const unsigned int *a6, unsigned int a7, const AudioObjectPropertyAddress *a8, BOOL a9)
{
  HALS_ObjectMap *v13;
  HALS_Object *v14;
  HALS_ObjectMap *v15;
  int v16;
  BOOL v17;
  int v18;
  int v20;
  int v21;

  v13 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(a2);
  v15 = v13;
  if (v13)
  {
    v16 = *((_DWORD *)v13 + 5);
    if (v16 <= 1701078389)
    {
      v17 = v16 == 1633773415;
      v18 = 1633969526;
    }
    else
    {
      v17 = v16 == 1701078390 || v16 == 1701733488;
      v18 = 1919182198;
    }
    if (!v17 && v16 != v18)
    {
      v20 = *((_DWORD *)v13 + 6);
      if (v16 == v20)
        goto LABEL_14;
      if (v20 <= 1701078389)
      {
        if (v20 != 1633773415)
        {
          v21 = 1633969526;
LABEL_22:
          if (v20 != v21)
            goto LABEL_14;
        }
      }
      else if (v20 != 1701078390 && v20 != 1919182198)
      {
        v21 = 1701733488;
        goto LABEL_22;
      }
    }
    HALS_DeviceManager::HandleOwnedObjectPropertiesChanged(this, v13, a3, a7, a8, a9);
  }
LABEL_14:
  HALS_ObjectMap::ReleaseObject(v15, v14);
}

void sub_1B5ADDCE0(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_DeviceManager::_CopyBoxList(uint64_t a1, _QWORD *a2)
{
  a2[1] = *a2;
}

void HALS_DeviceManager::_CopyClockDeviceList(uint64_t a1, _QWORD *a2)
{
  a2[1] = *a2;
}

void HALS_DeviceManager::_CopyIODeviceList(uint64_t a1, _QWORD *a2)
{
  a2[1] = *a2;
}

unsigned int *HALS_DeviceManager::CopyNonMetaDeviceByIsolatedUseCaseID(HALS_DeviceManager *a1, int a2, HALS_Client *a3)
{
  HALS_Object *v5;
  HALS_ObjectMap **v6;
  unsigned int *v7;
  uint64_t v8;
  HALS_Object *v10;
  uint64_t v12;
  int v13;
  HALS_ObjectMap **v14;
  HALS_ObjectMap **v15;
  uint64_t v16;
  int v17;
  int v18;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  HALS_DeviceManager::CopyDeviceList(a1, (HALS_DeviceManager::BasicDeviceList *)&v14, 1, a3);
  if (v14 == v15)
  {
    v7 = 0;
  }
  else
  {
    v6 = v14 + 1;
    do
    {
      v7 = (unsigned int *)*(v6 - 1);
      v12 = 0x676C6F6269756964;
      v13 = 0;
      v8 = v7[4];
      v18 = 0;
      v17 = 0;
      (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, int *, int *, _QWORD, _QWORD, HALS_Client *))(*(_QWORD *)v7 + 112))(v7, v8, &v12, 4, &v17, &v18, 0, 0, a3);
      if (v18 != a2)
        v7 = 0;
      if (v7)
        break;
    }
    while (v6++ != v15);
  }
  HALS_ObjectMap::RetainObject((HALS_ObjectMap *)v7, v5);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v14, v10);
  return v7;
}

void sub_1B5ADDE20(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

void HALS_DeviceManager::ClientDied(HALS_DeviceManager *this, HALS_Client *a2)
{
  HALS_Object *v3;
  unsigned int **v4;
  unsigned int **v5;
  uint64_t v6;
  unsigned int *v7;
  HALB_Mutex *v8;
  uint64_t v9;
  HALS_NotificationManager *v10;
  HALS_ObjectMap **v11;
  HALS_ObjectMap **v12;
  uint64_t v13;
  _QWORD v14[7];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  AudioObjectPropertyAddress v19;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  HALS_DeviceManager::CopyDeviceList(this, (HALS_DeviceManager::BasicDeviceList *)&v11, 1, 0);
  v4 = (unsigned int **)v11;
  v5 = (unsigned int **)v12;
  if (v11 != v12)
  {
    v6 = MEMORY[0x1E0C809B0];
    do
    {
      v7 = *v4;
      v15 = 0;
      v16 = &v15;
      v17 = 0x2000000000;
      v18 = 0;
      v14[0] = v6;
      v14[1] = 0x40000000;
      v14[2] = ___ZN11HALS_Device10ClientDiedEP11HALS_Client_block_invoke;
      v14[3] = &unk_1E699DA50;
      v14[4] = &v15;
      v14[5] = v7;
      v14[6] = a2;
      v8 = (HALB_Mutex *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 56))(v7);
      HALB_CommandGate::ExecuteCommand(v8, (uint64_t)v14);
      if (*((_BYTE *)v16 + 24))
      {
        if (a2)
          v9 = *((unsigned int *)a2 + 4);
        else
          v9 = 0;
        v10 = (HALS_NotificationManager *)v7[4];
        *(_QWORD *)&v19.mSelector = 0x676C6F6263646573;
        v19.mElement = 0;
        HALS_Object::PropertiesChanged((HALS_Object *)v7, v10, v9, 1, &v19);
      }
      _Block_object_dispose(&v15, 8);
      ++v4;
    }
    while (v4 != v5);
  }
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v11, v3);
}

void sub_1B5ADDF94(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HALS_ObjectMap **a9)
{
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&a9, a2);
  _Unwind_Resume(a1);
}

void HALS_DeviceManager::CreateObject()
{
  _DWORD *exception;
  int v1;
  const char *v2;
  __int16 v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v1 = 136315394;
    v2 = "HALS_DeviceManager.cpp";
    v3 = 1024;
    v4 = 1158;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DeviceManager::CreateObject: unimplemented", (uint8_t *)&v1, 0x12u);
  }
  exception = __cxa_allocate_exception(0x10uLL);
  *(_QWORD *)exception = &off_1E69A1B30;
  exception[2] = 1970171760;
}

void HALS_DeviceManager::ObjectsPublishedAndDied()
{
  _DWORD *exception;
  int v1;
  const char *v2;
  __int16 v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v1 = 136315394;
    v2 = "HALS_DeviceManager.cpp";
    v3 = 1024;
    v4 = 1165;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DeviceManager::ObjectsPublishedAndDied: unimplemented", (uint8_t *)&v1, 0x12u);
  }
  exception = __cxa_allocate_exception(0x10uLL);
  *(_QWORD *)exception = &off_1E69A1B30;
  exception[2] = 1970171760;
}

void HALS_DeviceManager::ObjectPropertiesChanged()
{
  _DWORD *exception;
  int v1;
  const char *v2;
  __int16 v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v1 = 136315394;
    v2 = "HALS_DeviceManager.cpp";
    v3 = 1024;
    v4 = 1172;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DeviceManager::ObjectsPropertiesChanged: unimplemented", (uint8_t *)&v1, 0x12u);
  }
  exception = __cxa_allocate_exception(0x10uLL);
  *(_QWORD *)exception = &off_1E69A1B30;
  exception[2] = 1970171760;
}

void HALS_DeviceManager::CopyDeviceList(HALS_DeviceManager *this, HALS_DeviceManager::BasicDeviceList *a2, char a3, HALS_Client *a4)
{
  HALB_Mutex *v7;
  HALS_Object *v8;
  HALS_Device **v9;
  HALS_Device **v10;
  _BOOL4 IsHidden;
  int v12;
  unint64_t v13;
  HALS_Device **v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  HALS_Device **v20;
  char *v21;
  char *v22;
  HALS_Device *v23;
  HALS_Object *v24;
  _QWORD v25[6];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __n128 (*v29)(_QWORD *, uint64_t);
  void (*v30)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v31[3];

  v26 = 0;
  v27 = &v26;
  v28 = 0x4002000000;
  v29 = __Block_byref_object_copy__8177;
  v30 = __Block_byref_object_dispose__8178;
  memset(v31, 0, sizeof(v31));
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 0x40000000;
  v25[2] = ___ZNK18HALS_DeviceManager14CopyDeviceListERNS_15BasicDeviceListEbP11HALS_Client_block_invoke;
  v25[3] = &unk_1E6985C28;
  v25[4] = &v26;
  v25[5] = this;
  v7 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DeviceManager *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v7, (uint64_t)v25);
  v9 = (HALS_Device **)v27[5];
  v10 = (HALS_Device **)v27[6];
  while (v9 != v10)
  {
    if ((a3 & 1) != 0)
    {
      IsHidden = 0;
      if (!a4)
        goto LABEL_6;
    }
    else
    {
      IsHidden = HALS_Device::IsHidden(*v9);
      if (!a4)
      {
LABEL_6:
        v12 = 1;
        goto LABEL_7;
      }
    }
    v12 = (*(uint64_t (**)(HALS_Device *, HALS_Client *))(*(_QWORD *)*v9 + 488))(*v9, a4);
LABEL_7:
    if (((IsHidden | v12 ^ 1) & 1) == 0)
    {
      HALS_ObjectMap::RetainObject(*v9, v8);
      v14 = (HALS_Device **)*((_QWORD *)a2 + 1);
      v13 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v14 >= v13)
      {
        v16 = ((uint64_t)v14 - *(_QWORD *)a2) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v17 = v13 - *(_QWORD *)a2;
        v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1))
          v18 = v16 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v19);
        else
          v8 = 0;
        v20 = (HALS_Device **)(v19 + 8 * v16);
        *v20 = *v9;
        v15 = v20 + 1;
        v22 = *(char **)a2;
        v21 = (char *)*((_QWORD *)a2 + 1);
        if (v21 != *(char **)a2)
        {
          do
          {
            v23 = (HALS_Device *)*((_QWORD *)v21 - 1);
            v21 -= 8;
            *--v20 = v23;
          }
          while (v21 != v22);
          v21 = *(char **)a2;
        }
        *(_QWORD *)a2 = v20;
        *((_QWORD *)a2 + 1) = v15;
        *((_QWORD *)a2 + 2) = v19 + 8 * (_QWORD)v8;
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v14 = *v9;
        v15 = v14 + 1;
      }
      *((_QWORD *)a2 + 1) = v15;
    }
    ++v9;
  }
  _Block_object_dispose(&v26, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v31, v24);
}

void sub_1B5ADE3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  HALS_ObjectMap ***v7;
  HALS_Object *v9;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v7, v9);
  _Unwind_Resume(a1);
}

void HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(HALS_ObjectMap ***this, HALS_Object *a2)
{
  HALS_ObjectMap **v3;

  v3 = *this;
  if (*this != this[1])
  {
    do
      HALS_ObjectMap::ReleaseObject(*v3++, a2);
    while (v3 != this[1]);
    v3 = *this;
  }
  if (v3)
  {
    this[1] = v3;
    operator delete(v3);
  }
}

__n128 __Block_byref_object_copy__8177(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__8178(uint64_t a1, HALS_Object *a2)
{
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)(a1 + 40), a2);
}

uint64_t ___ZNK18HALS_DeviceManager14CopyDeviceListERNS_15BasicDeviceListEbP11HALS_Client_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 264))(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
}

void sub_1B5ADE4AC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK18HALS_DeviceManager11CopyBoxListERNS_12BasicBoxListEP11HALS_Client_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 224))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t ___ZNK18HALS_DeviceManager19CopyClockDeviceListERNS_20BasicClockDeviceListEP11HALS_Client_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 232))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(HALS_ObjectMap ***this, HALS_Object *a2)
{
  HALS_ObjectMap **v3;

  v3 = *this;
  if (*this != this[1])
  {
    do
      HALS_ObjectMap::ReleaseObject(*v3++, a2);
    while (v3 != this[1]);
    v3 = *this;
  }
  if (v3)
  {
    this[1] = v3;
    operator delete(v3);
  }
}

void HALS_DeviceManager::BasicBoxList::~BasicBoxList(HALS_ObjectMap ***this, HALS_Object *a2)
{
  HALS_ObjectMap **v3;

  v3 = *this;
  if (*this != this[1])
  {
    do
      HALS_ObjectMap::ReleaseObject(*v3++, a2);
    while (v3 != this[1]);
    v3 = *this;
  }
  if (v3)
  {
    this[1] = v3;
    operator delete(v3);
  }
}

HALS_ObjectMap *HALS_DeviceManager::CopyDeviceByUID(HALS_DeviceManager *this, const __CFString *a2, HALS_Client *a3)
{
  HALS_Object *v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap *v6;
  const __CFString *v7;
  HALS_Object *v9;
  HALS_ObjectMap **v11;
  HALS_ObjectMap **v12;
  uint64_t v13;

  if (!a2)
    return 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  HALS_DeviceManager::CopyDeviceList(this, (HALS_DeviceManager::BasicDeviceList *)&v11, 1, a3);
  if (v11 != v12)
  {
    v5 = v11 + 1;
    while (1)
    {
      v6 = *(v5 - 1);
      v7 = (const __CFString *)(*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v6 + 200))(v6);
      if (v7)
      {
        if (CFStringCompare(v7, a2, 0))
          v6 = 0;
        if (v6)
          goto LABEL_15;
      }
      else
      {
        v6 = 0;
      }
      if (v5++ == v12)
        goto LABEL_15;
    }
  }
  v6 = 0;
LABEL_15:
  HALS_ObjectMap::RetainObject(v6, v4);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v11, v9);
  return v6;
}

void sub_1B5ADE664(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

HALS_ObjectMap *HALS_DeviceManager::CopyBoxByUID(HALS_DeviceManager *this, const __CFString *a2, HALS_Client *a3)
{
  HALB_Mutex *v4;
  HALS_Object *v5;
  HALS_ObjectMap **v6;
  HALS_ObjectMap **v7;
  HALS_ObjectMap *v8;
  const __CFString *v9;
  HALS_Object *v11;
  HALS_ObjectMap **v13;
  HALS_ObjectMap **v14;
  uint64_t v15;
  _QWORD v16[7];

  if (!a2)
    return 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = ___ZNK18HALS_DeviceManager11CopyBoxListERNS_12BasicBoxListEP11HALS_Client_block_invoke;
  v16[3] = &__block_descriptor_tmp_8181;
  v16[4] = this;
  v16[5] = &v13;
  v16[6] = a3;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DeviceManager *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v16);
  v6 = v14;
  if (v13 != v14)
  {
    v7 = v13 + 1;
    while (1)
    {
      v8 = *(v7 - 1);
      v9 = (const __CFString *)*((_QWORD *)v8 + 8);
      if (v9)
      {
        if (CFStringCompare(v9, a2, 0))
          v8 = 0;
        v6 = v14;
        if (v8)
          goto LABEL_15;
      }
      else
      {
        v8 = 0;
      }
      if (v7++ == v6)
        goto LABEL_15;
    }
  }
  v8 = 0;
LABEL_15:
  HALS_ObjectMap::RetainObject(v8, v5);
  HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v13, v11);
  return v8;
}

void sub_1B5ADE778(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HALS_ObjectMap **a9)
{
  HALS_DeviceManager::BasicBoxList::~BasicBoxList(&a9, a2);
  _Unwind_Resume(a1);
}

HALS_ObjectMap *HALS_DeviceManager::CopyClockDeviceByUID(HALS_DeviceManager *this, const __CFString *a2, HALS_Client *a3)
{
  HALB_Mutex *v4;
  HALS_Object *v5;
  HALS_ObjectMap **i;
  HALS_ObjectMap *v7;
  const __CFString *v8;
  HALS_Object *v9;
  HALS_ObjectMap **v11;
  HALS_ObjectMap **v12;
  uint64_t v13;
  _QWORD v14[6];

  if (!a2)
    return 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 0x40000000;
  v14[2] = ___ZNK18HALS_DeviceManager19CopyClockDeviceListERNS_20BasicClockDeviceListEP11HALS_Client_block_invoke;
  v14[3] = &__block_descriptor_tmp_7_8182;
  v14[4] = this;
  v14[5] = &v11;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DeviceManager *, const __CFString *, HALS_Client *))(*(_QWORD *)this + 56))(this, a2, a3);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v14);
  for (i = v11; i != v12; ++i)
  {
    v7 = *i;
    v8 = (const __CFString *)(*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)*i + 200))(*i);
    if (v8 && CFStringCompare(v8, a2, 0) == kCFCompareEqualTo)
      goto LABEL_8;
  }
  v7 = 0;
LABEL_8:
  HALS_ObjectMap::RetainObject(v7, v5);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v11, v9);
  return v7;
}

void sub_1B5ADE870(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

unint64_t HALS_DeviceManager::GetNumberDevices(HALS_DeviceManager *this, HALS_Client *a2, HALS_Client *a3)
{
  unint64_t v3;
  HALS_Object *v4;
  HALS_ObjectMap **v6;
  uint64_t v7;
  uint64_t v8;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  HALS_DeviceManager::CopyDeviceList(this, (HALS_DeviceManager::BasicDeviceList *)&v6, 0, a2);
  v3 = (unint64_t)(v7 - (_QWORD)v6) >> 3;
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v6, v4);
  return v3;
}

void sub_1B5ADE8D8(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

unint64_t HALS_DeviceManager::GetNumberBoxes(HALS_DeviceManager *this, HALS_Client *a2)
{
  HALB_Mutex *v2;
  unint64_t v3;
  HALS_Object *v4;
  HALS_ObjectMap **v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[7];

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK18HALS_DeviceManager11CopyBoxListERNS_12BasicBoxListEP11HALS_Client_block_invoke;
  v9[3] = &__block_descriptor_tmp_8181;
  v9[4] = this;
  v9[5] = &v6;
  v9[6] = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DeviceManager *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v9);
  v3 = (unint64_t)(v7 - (_QWORD)v6) >> 3;
  HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v6, v4);
  return v3;
}

void sub_1B5ADE978(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HALS_ObjectMap **a9)
{
  HALS_DeviceManager::BasicBoxList::~BasicBoxList(&a9, a2);
  _Unwind_Resume(a1);
}

unint64_t HALS_DeviceManager::GetNumberClockDevices(HALS_DeviceManager *this, HALS_Client *a2)
{
  HALB_Mutex *v2;
  unint64_t v3;
  HALS_Object *v4;
  HALS_ObjectMap **v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[6];

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK18HALS_DeviceManager19CopyClockDeviceListERNS_20BasicClockDeviceListEP11HALS_Client_block_invoke;
  v9[3] = &__block_descriptor_tmp_7_8182;
  v9[4] = this;
  v9[5] = &v6;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DeviceManager *, HALS_Client *))(*(_QWORD *)this + 56))(this, a2);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v9);
  v3 = (unint64_t)(v7 - (_QWORD)v6) >> 3;
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v6, v4);
  return v3;
}

void sub_1B5ADEA14(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

void HALS_DeviceManager::BasicIODeviceList::~BasicIODeviceList(HALS_ObjectMap ***this, HALS_Object *a2)
{
  HALS_ObjectMap **v3;

  v3 = *this;
  if (*this != this[1])
  {
    do
      HALS_ObjectMap::ReleaseObject(*v3++, a2);
    while (v3 != this[1]);
    v3 = *this;
  }
  if (v3)
  {
    this[1] = v3;
    operator delete(v3);
  }
}

void HALS_DeviceManager::HALS_DeviceManager(HALS_DeviceManager *this, HALS_System *a2, const __CFString *a3, uint64_t a4, HALS_Object *a5)
{
  unsigned int *v8;
  uint64_t v9;
  _DWORD *exception;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  HALS_Object::HALS_Object(this, 1634757735, 0, (uint64_t)a2, a5);
  *(_QWORD *)v9 = off_1E6985A90;
  *(_QWORD *)(v9 + 48) = a3;
  *(_BYTE *)(v9 + 56) = 1;
  *(_QWORD *)(v9 + 320) = a2;
  if (!a3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v11 = 136315394;
      v12 = "HALS_DeviceManager.cpp";
      v13 = 1024;
      v14 = 73;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::HALS_DeviceManager: all device managers have to have a bundle ID", (uint8_t *)&v11, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v11 = 256;
  CACFString::GetCString(a3, (__CFString *)this + 2, (char *)&v11, v8);
}

void sub_1B5ADEBD4(_Unwind_Exception *a1)
{
  HALS_Object *v1;
  CACFString *v2;

  CACFString::~CACFString(v2);
  HALS_Object::~HALS_Object(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_DeviceManager16CopyIODeviceListERNS_17BasicIODeviceListEP11HALS_Client_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 240))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void HALS_DeviceManager::CopyRawDeviceList(HALS_DeviceManager *this, HALS_DeviceManager::BasicDeviceList *a2)
{
  HALB_Mutex *v3;
  HALS_Object *v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap **i;
  unint64_t v7;
  HALS_ObjectMap **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  HALS_ObjectMap **v14;
  char *v15;
  char *v16;
  HALS_ObjectMap *v17;
  HALS_Object *v18;
  _QWORD v19[6];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __n128 (*v23)(_QWORD *, uint64_t);
  void (*v24)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v25[3];

  v20 = 0;
  v21 = &v20;
  v22 = 0x4002000000;
  v23 = __Block_byref_object_copy__8177;
  v24 = __Block_byref_object_dispose__8178;
  memset(v25, 0, sizeof(v25));
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 0x40000000;
  v19[2] = ___ZNK18HALS_DeviceManager17CopyRawDeviceListERNS_15BasicDeviceListE_block_invoke;
  v19[3] = &unk_1E6985C50;
  v19[4] = &v20;
  v19[5] = this;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DeviceManager *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v19);
  v5 = (HALS_ObjectMap **)v21[5];
  for (i = (HALS_ObjectMap **)v21[6]; v5 != i; ++v5)
  {
    HALS_ObjectMap::RetainObject(*v5, v4);
    v8 = (HALS_ObjectMap **)*((_QWORD *)a2 + 1);
    v7 = *((_QWORD *)a2 + 2);
    if ((unint64_t)v8 >= v7)
    {
      v10 = ((uint64_t)v8 - *(_QWORD *)a2) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v11 = v7 - *(_QWORD *)a2;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v13);
      else
        v4 = 0;
      v14 = (HALS_ObjectMap **)(v13 + 8 * v10);
      *v14 = *v5;
      v9 = v14 + 1;
      v16 = *(char **)a2;
      v15 = (char *)*((_QWORD *)a2 + 1);
      if (v15 != *(char **)a2)
      {
        do
        {
          v17 = (HALS_ObjectMap *)*((_QWORD *)v15 - 1);
          v15 -= 8;
          *--v14 = v17;
        }
        while (v15 != v16);
        v15 = *(char **)a2;
      }
      *(_QWORD *)a2 = v14;
      *((_QWORD *)a2 + 1) = v9;
      *((_QWORD *)a2 + 2) = v13 + 8 * (_QWORD)v4;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v8 = *v5;
      v9 = v8 + 1;
    }
    *((_QWORD *)a2 + 1) = v9;
  }
  _Block_object_dispose(&v20, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v25, v18);
}

void sub_1B5ADEDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  HALS_ObjectMap ***v7;
  HALS_Object *v9;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v7, v9);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_DeviceManager17CopyRawDeviceListERNS_15BasicDeviceListE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 264))(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
}

void sub_1B5ADEDFC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

HALS_ObjectMap *HALS_DeviceManager::CopyDeviceByObjectID(HALS_DeviceManager *this, int a2, HALS_Client *a3)
{
  HALS_Object *v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap *v6;
  BOOL v7;
  HALS_Object *v8;
  HALS_ObjectMap **v10;
  HALS_ObjectMap **v11;
  uint64_t v12;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  HALS_DeviceManager::CopyDeviceList(this, (HALS_DeviceManager::BasicDeviceList *)&v10, 1, a3);
  if (v10 == v11)
  {
    v6 = 0;
  }
  else
  {
    v5 = v10 + 1;
    do
    {
      if (*((_DWORD *)*(v5 - 1) + 4) == a2)
        v6 = *(v5 - 1);
      else
        v6 = 0;
      if (v6)
        v7 = 1;
      else
        v7 = v5 == v11;
      ++v5;
    }
    while (!v7);
  }
  HALS_ObjectMap::RetainObject(v6, v4);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v10, v8);
  return v6;
}

void sub_1B5ADEE90(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

void AMCP::DAL::PCM_Data_Handler::~PCM_Data_Handler(AMCP::DAL::PCM_Data_Handler *this)
{
  char *v1;

  *(_QWORD *)this = &off_1E6985C80;
  v1 = (char *)this + 56;
  std::vector<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v1);
}

{
  char *v1;

  *(_QWORD *)this = &off_1E6985C80;
  v1 = (char *)this + 56;
  std::vector<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v1);
  JUMPOUT(0x1B5E50688);
}

BOOL AMCP::DAL::PCM_Data_Handler::dal_operation_is_supported(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned __int16 *v4;
  int v5;
  int v6;

  v2 = *(unsigned __int8 *)(a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2 != 3)
    return 1;
  v4 = v3 >= 0 ? (unsigned __int16 *)a2 : *(unsigned __int16 **)a2;
  v5 = *v4;
  v6 = *((unsigned __int8 *)v4 + 2);
  if (v5 != 26989 || v6 != 120)
    return 1;
  if (*(_DWORD *)(a1 + 16) == 1819304813)
    return (*(_BYTE *)(a1 + 20) & 0x40) == 0;
  return 0;
}

uint64_t AMCP::DAL::PCM_Data_Handler::adopt(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  caulk::rt_safe_memory_resource *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int64x2_t v23;
  uint64_t v24;
  _QWORD v25[2];
  _QWORD v26[2];
  uint64_t v27;
  int64x2_t v28;
  uint64_t v29;
  _QWORD *v30;

  v4 = a1[8];
  v5 = a1[7];
  while (v4 != v5)
    AMCP::DAL::Audio_Samples_Data::~Audio_Samples_Data((AMCP::DAL::Audio_Samples_Data *)(v4 - 24));
  a1[8] = v5;
  v26[0] = a2;
  v26[1] = 0;
  v6 = *a2;
  if (*a2 < 0)
    std::terminate();
  v25[0] = a2;
  v25[1] = v6;
  v7 = a1[9];
  if (v5 >= v7)
  {
    v10 = a1[7];
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v10) >> 3);
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v10) >> 3);
    v13 = 2 * v12;
    if (2 * v12 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0x555555555555555)
      v14 = 0xAAAAAAAAAAAAAAALL;
    else
      v14 = v13;
    v30 = a1 + 9;
    if (v14)
    {
      v15 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>((caulk::rt_safe_memory_resource *)v14);
      v17 = v16;
    }
    else
    {
      v15 = 0;
      v17 = 0;
    }
    v18 = AMCP::DAL::Audio_Samples_Data::Audio_Samples_Data<gsl::details::span_iterator<gsl::span<std::byte,-1l>,false>>((uint64_t)v15 + 24 * v11, (uint64_t)v26, v25);
    v20 = a1[7];
    v19 = a1[8];
    if (v19 == v20)
    {
      v23 = vdupq_n_s64(v19);
      v21 = v18;
    }
    else
    {
      v21 = v18;
      do
      {
        v22 = *(_OWORD *)(v19 - 24);
        *(_QWORD *)(v21 - 8) = *(_QWORD *)(v19 - 8);
        *(_OWORD *)(v21 - 24) = v22;
        v21 -= 24;
        v19 -= 24;
      }
      while (v19 != v20);
      v23 = *(int64x2_t *)(a1 + 7);
    }
    v9 = v18 + 24;
    a1[7] = v21;
    a1[8] = v18 + 24;
    v28 = v23;
    v24 = a1[9];
    a1[9] = (char *)v15 + 24 * v17;
    v29 = v24;
    v27 = v23.i64[0];
    result = std::__split_buffer<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data> &>::~__split_buffer((uint64_t)&v27);
  }
  else
  {
    result = AMCP::DAL::Audio_Samples_Data::Audio_Samples_Data<gsl::details::span_iterator<gsl::span<std::byte,-1l>,false>>(v5, (uint64_t)v26, v25);
    v9 = v5 + 24;
  }
  a1[8] = v9;
  return result;
}

unint64_t AMCP::DAL::PCM_Data_Handler::get_allocation_size(AMCP::DAL::PCM_Data_Handler *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3);
}

double AMCP::DAL::PCM_Data_Handler::get_length_in_frames(AMCP::DAL::PCM_Data_Handler *this)
{
  uint64_t v1;
  NSObject *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  void *exception;
  __int128 v7;
  uint64_t v8;
  uint64_t (**v9)();
  __int128 v10;
  uint64_t v11;
  std::string v12;
  std::logic_error v13;
  std::logic_error v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint8_t buf[8];
  __int16 v22;
  char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _BYTE v27[14];
  const char *v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 7);
  if (v1 == *((_QWORD *)this + 8))
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v3 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = pthread_self();
      v5 = pthread_mach_thread_np(v4);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v5;
      v22 = 2080;
      v23 = "PCM_Data_Handler.cpp";
      v24 = 1024;
      v25 = 111;
      v26 = 2080;
      *(_QWORD *)v27 = "not (not m_samples.empty())";
      _os_log_error_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Bad format for PCM data", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Bad format for PCM data", (uint64_t)&v12);
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v14, &v13);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v15 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(_QWORD *)&v27[6] = "virtual Sample_Time AMCP::DAL::PCM_Data_Handler::get_length_in_frames() const";
    v28 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
    v29 = 111;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    v10 = v7;
    v11 = v8;
    v7 = 0uLL;
    v8 = 0;
    v9 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v9);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return (double)(*(_DWORD *)(v1 + 8) / *((_DWORD *)this + 8));
}

void sub_1B5ADF37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *AMCP::DAL::PCM_Data_Handler::get_audio_buffer_list@<X0>(uint64_t *a1@<X1>, caulk::rt_safe_memory_resource **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  caulk::rt_safe_memory_resource *result;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11[3];

  v4 = AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(*a1);
  AMCP::DAL::sample_group_from_samples<float>((unint64_t *)v11, (uint64_t **)(v4 + 56));
  v5 = *a1;
  if (*a1)
  {
    v6 = *(_OWORD *)(v5 + 24);
    v8 = *(_OWORD *)(v5 + 8);
    v9 = v6;
    v10 = *(_QWORD *)(v5 + 40);
  }
  else
  {
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
  }
  AMCP::DAL::create_abl(a2, (uint64_t *)v11, (uint64_t)&v8);
  result = (caulk::rt_safe_memory_resource *)v11[0];
  if (v11[0])
  {
    v11[1] = v11[0];
    return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v11[0], ((char *)v11[2] - (char *)v11[0]) >> 4);
  }
  return result;
}

void sub_1B5ADF500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, caulk::rt_safe_memory_resource *a14, uint64_t a15, uint64_t a16)
{
  if (a14)
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](a14, (a16 - (uint64_t)a14) >> 4);
  _Unwind_Resume(exception_object);
}

caulk::rt_safe_memory_resource *AMCP::DAL::PCM_Data_Handler::get_audio_buffer_list@<X0>(uint64_t *a1@<X1>, caulk::rt_safe_memory_resource **a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  AMCP::DAL::PCM_Data_Handler *v8;
  uint64_t v9;
  __int128 v10;
  caulk::rt_safe_memory_resource *result;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  void *v15[3];

  v8 = (AMCP::DAL::PCM_Data_Handler *)*a1;
  AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(*a1);
  AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)v15, v8, a3, a4);
  v9 = *a1;
  if (*a1)
  {
    v10 = *(_OWORD *)(v9 + 24);
    v12 = *(_OWORD *)(v9 + 8);
    v13 = v10;
    v14 = *(_QWORD *)(v9 + 40);
  }
  else
  {
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
  }
  AMCP::DAL::create_abl(a2, (uint64_t *)v15, (uint64_t)&v12);
  result = (caulk::rt_safe_memory_resource *)v15[0];
  if (v15[0])
  {
    v15[1] = v15[0];
    return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v15[0], ((char *)v15[2] - (char *)v15[0]) >> 4);
  }
  return result;
}

void sub_1B5ADF5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, caulk::rt_safe_memory_resource *a14, uint64_t a15, uint64_t a16)
{
  if (a14)
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](a14, (a16 - (uint64_t)a14) >> 4);
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::PCM_Data_Handler::copy(AMCP::DAL::PCM_Data_Handler *a1, double *a2, uint64_t *a3, uint64_t a4, double a5)
{
  AMCP::DAL::PCM_Data_Handler *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  AMCP::Log::Scope_Registry *v13;
  double length_in_frames;
  AMCP::Log::Scope_Registry *v15;
  const char *imp;
  std::logic_error_vtbl *v17;
  const char *v18;
  const char *(__cdecl **p_what)(const std::logic_error *__hidden);
  const char *(__cdecl **v20)(const std::logic_error *__hidden);
  unint64_t v21;
  unsigned int v22;
  BOOL v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  void *exception;
  NSObject *v30;
  _opaque_pthread_t *v31;
  mach_port_t v32;
  void *v33;
  NSObject *v34;
  _opaque_pthread_t *v35;
  mach_port_t v36;
  void *v37;
  std::logic_error v38;
  uint64_t v39;
  std::logic_error v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t (**v44)();
  __int128 v45;
  uint64_t v46;
  std::string v47;
  std::logic_error v48;
  std::logic_error v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char v55;
  uint8_t buf[8];
  __int16 v57;
  char *v58;
  __int16 v59;
  int v60;
  __int16 v61;
  _BYTE v62[28];
  __int16 v63;
  int64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v9 = (AMCP::DAL::PCM_Data_Handler *)*a3;
  AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(*a3);
  v10 = *(std::__shared_weak_count **)(a4 + 8);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (round(AMCP::DAL::PCM_Data_Handler::get_length_in_frames(v9)) <= 0.0)
  {
    AMCP::Log::Scope_Registry::get(v13);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v26 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v27 = pthread_self();
      v28 = pthread_mach_thread_np(v27);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v28;
      v57 = 2080;
      v58 = "PCM_Data_Handler.cpp";
      v59 = 1024;
      v60 = 307;
      v61 = 2080;
      *(_QWORD *)v62 = "not (dest_handler->get_length_in_frames() > 0_S)";
      _os_log_error_impl(&dword_1B57BA000, v26, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v47);
    std::logic_error::logic_error(&v40, &v47);
    v40.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v49, &v40);
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = -1;
    v49.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v50 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v49);
    *(_QWORD *)&v62[6] = "void AMCP::DAL::PCM_Data_Handler::copy_data(const Sample_Time_Range &, PCM_Data_Handler *, Samp"
                         "le_Time, DAL_Operation_Context_Ref) const";
    *(_QWORD *)&v62[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
    *(_DWORD *)&v62[22] = 307;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v42);
    v45 = v42;
    v46 = v43;
    v42 = 0uLL;
    v43 = 0;
    v44 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v44);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  length_in_frames = AMCP::DAL::PCM_Data_Handler::get_length_in_frames(v9);
  AMCP::DAL::PCM_Data_Handler::get_container_data((unint64_t *)&v40, a1, *a2, a2[1]);
  if (v40.__vftable == (std::logic_error_vtbl *)v40.__imp_.__imp_)
  {
    AMCP::Log::Scope_Registry::get(v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v30 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v31 = pthread_self();
      v32 = pthread_mach_thread_np(v31);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v32;
      v57 = 2080;
      v58 = "PCM_Data_Handler.cpp";
      v59 = 1024;
      v60 = 311;
      v61 = 2080;
      *(_QWORD *)v62 = "not (not source.empty())";
      _os_log_error_impl(&dword_1B57BA000, v30, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v48);
    v33 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v47);
    std::logic_error::logic_error(&v38, &v47);
    v38.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v49, &v38);
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = -1;
    v49.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v50 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v49);
    *(_QWORD *)&v62[6] = "void AMCP::DAL::PCM_Data_Handler::copy_data(const Sample_Time_Range &, PCM_Data_Handler *, Samp"
                         "le_Time, DAL_Operation_Context_Ref) const";
    *(_QWORD *)&v62[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
    *(_DWORD *)&v62[22] = 311;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v42);
    v45 = v42;
    v46 = v43;
    v42 = 0uLL;
    v43 = 0;
    v44 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v44);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v33, (uint64_t)buf);
  }
  AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)&v38, v9, a5, length_in_frames);
  imp = v40.__imp_.__imp_;
  v17 = v38.__vftable;
  v18 = v38.__imp_.__imp_;
  if (v40.__imp_.__imp_ - (const char *)v40.__vftable != v38.__imp_.__imp_ - (const char *)v38.__vftable)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v38.__vftable);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v34 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v35 = pthread_self();
      v36 = pthread_mach_thread_np(v35);
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v36;
      v57 = 2080;
      v58 = "PCM_Data_Handler.cpp";
      v59 = 1024;
      v60 = 324;
      v61 = 2080;
      *(_QWORD *)v62 = "not (source.size() == destination.size())";
      *(_WORD *)&v62[8] = 2080;
      *(_QWORD *)&v62[10] = "static void AMCP::DAL::PCM_Data_Handler::copy_samples(const Sample_Group<T> &, Sample_Group<"
                            "T> &, const CA::StreamDescription &) [T = float]";
      *(_WORD *)&v62[18] = 2048;
      *(_QWORD *)&v62[20] = (v40.__imp_.__imp_ - (const char *)v40.__vftable) >> 4;
      v63 = 2048;
      v64 = (v38.__imp_.__imp_ - (const char *)v38.__vftable) >> 4;
      _os_log_error_impl(&dword_1B57BA000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s %s: sample layout does not match (source=%zu streams, dest=%zu streams)!", buf, 0x40u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v55);
    v37 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"%s: sample layout does not match (source=%zu streams, dest=%zu streams)!", (uint64_t)&v47, "static void AMCP::DAL::PCM_Data_Handler::copy_samples(const Sample_Group<T> &, Sample_Group<T> &, const CA::StreamDescription &) [T = float]", (v40.__imp_.__imp_ - (const char *)v40.__vftable) >> 4, (v38.__imp_.__imp_ - (const char *)v38.__vftable) >> 4);
    std::logic_error::logic_error(&v48, &v47);
    v48.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v49, &v48);
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = -1;
    v49.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v50 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v49);
    *(_QWORD *)&v62[6] = "static void AMCP::DAL::PCM_Data_Handler::copy_samples(const Sample_Group<T> &, Sample_Group<T> "
                         "&, const CA::StreamDescription &) [T = float]";
    *(_QWORD *)&v62[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
    *(_DWORD *)&v62[22] = 324;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v42);
    v45 = v42;
    v46 = v43;
    v42 = 0uLL;
    v43 = 0;
    v44 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v44);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v37, (uint64_t)buf);
  }
  if (v40.__vftable != (std::logic_error_vtbl *)v40.__imp_.__imp_
    && v38.__vftable != (std::logic_error_vtbl *)v38.__imp_.__imp_)
  {
    p_what = &v40.what;
    v20 = &v38.what;
    do
    {
      v21 = (unint64_t)*(v20 - 1);
      if (v21 >= (unint64_t)*(p_what - 1))
        v21 = (unint64_t)*(p_what - 1);
      if (v21)
      {
        v22 = *((_DWORD *)a1 + 9);
        if ((*((_DWORD *)a1 + 5) & 0x20) != 0)
          v22 = 1;
        memcpy(*(v20 - 2), *(p_what - 2), *((_DWORD *)a1 + 8) * (int)v21 / v22);
        imp = v40.__imp_.__imp_;
        v18 = v38.__imp_.__imp_;
      }
      if (p_what == (const char *(__cdecl **)(const std::logic_error *__hidden))imp)
        break;
      p_what += 2;
      v23 = v20 == (const char *(__cdecl **)(const std::logic_error *__hidden))v18;
      v20 += 2;
    }
    while (!v23);
    v17 = v38.__vftable;
  }
  if (v17)
  {
    v38.__imp_.__imp_ = (const char *)v17;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v17, (v39 - (uint64_t)v17) >> 4);
  }
  if (v40.__vftable)
  {
    v40.__imp_.__imp_ = (const char *)v40.__vftable;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v40.__vftable, (int64_t)(v41 - (unint64_t)v40.__vftable) >> 4);
  }
  if (v10)
  {
    v24 = (unint64_t *)&v10->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1B5ADFD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, caulk::rt_safe_memory_resource *a18, caulk::rt_safe_memory_resource *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a18)
  {
    a19 = a18;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](a18, (a20 - (uint64_t)a18) >> 4);
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void AMCP::DAL::PCM_Data_Handler::mix(AMCP::Log::Scope_Registry *a1, AMCP::DAL::PCM_Data_Handler **a2, double a3, double a4, double a5)
{
  int v6;
  AMCP::Log::Scope_Registry *v8;
  BOOL v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  std::logic_error *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  std::logic_error v20;
  AMCP::DAL::PCM_Data_Handler *v24;
  double length_in_frames;
  AMCP::DAL::PCM_Data_Handler *v26;
  unsigned int v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  vDSP_Length v31;
  uint64_t v32;
  NSObject *v33;
  _opaque_pthread_t *v34;
  mach_port_t v35;
  void *v36;
  NSObject *v37;
  _opaque_pthread_t *v38;
  mach_port_t v39;
  void *exception;
  NSObject *v41;
  _opaque_pthread_t *v42;
  mach_port_t v43;
  void *v44;
  __int128 v45;
  uint64_t v46;
  std::string v47;
  std::logic_error v48;
  char v49;
  void *v50[2];
  uint64_t v51;
  uint64_t (**v52)();
  __int128 v53;
  uint64_t v54;
  std::string v55;
  std::logic_error v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint8_t buf[8];
  _BYTE v63[10];
  __int16 v64;
  int v65;
  _BYTE v66[24];
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a1 + 4) != 1819304813 || (v6 = *((_DWORD *)a1 + 5), (v6 & 0x40) != 0))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v37 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      v38 = pthread_self();
      v39 = pthread_mach_thread_np(v38);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v39;
      *(_WORD *)v63 = 2080;
      *(_QWORD *)&v63[2] = "PCM_Data_Handler.cpp";
      v64 = 1024;
      v65 = 385;
      *(_WORD *)v66 = 2080;
      *(_QWORD *)&v66[2] = "not (get_format().IsMixable())";
      _os_log_error_impl(&dword_1B57BA000, v37, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Format is not mixable", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v45);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Format is not mixable", (uint64_t)&v55);
    std::logic_error::logic_error((std::logic_error *)&v47, &v55);
    v47.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&v56, (const std::logic_error *)&v47);
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = -1;
    v56.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v57 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v56);
    *(_QWORD *)&v66[8] = "virtual void AMCP::DAL::PCM_Data_Handler::mix(Sample_Time_Range, Container, Sample_Time, DAL_Op"
                         "eration_Context_Ref) const";
    *(_QWORD *)&v66[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
    v67 = 385;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v50);
    v52 = off_1E69A20A0;
    v53 = *(_OWORD *)v50;
    v54 = v51;
    v50[0] = 0;
    v50[1] = 0;
    v51 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v52);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v8 = *a2;
  if (!*a2 || (*((_DWORD *)v8 + 4) == 1819304813 ? (v9 = (*((_DWORD *)v8 + 5) & 0x40) == 0) : (v9 = 0), !v9))
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v33 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      v34 = pthread_self();
      v35 = pthread_mach_thread_np(v34);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v35;
      *(_WORD *)v63 = 2080;
      *(_QWORD *)&v63[2] = "PCM_Data_Handler.cpp";
      v64 = 1024;
      v65 = 386;
      *(_WORD *)v66 = 2080;
      *(_QWORD *)&v66[2] = "not (dest_container.get_format().IsMixable())";
      _os_log_error_impl(&dword_1B57BA000, v33, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Format is not mixable", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v45);
    v36 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Format is not mixable", (uint64_t)&v55);
    std::logic_error::logic_error((std::logic_error *)&v47, &v55);
    v47.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&v56, (const std::logic_error *)&v47);
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = -1;
    v56.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v57 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v56);
    *(_QWORD *)&v66[8] = "virtual void AMCP::DAL::PCM_Data_Handler::mix(Sample_Time_Range, Container, Sample_Time, DAL_Op"
                         "eration_Context_Ref) const";
    *(_QWORD *)&v66[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
    v67 = 386;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v50);
    v52 = off_1E69A20A0;
    v53 = *(_OWORD *)v50;
    v54 = v51;
    v50[0] = 0;
    v50[1] = 0;
    v51 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v52);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v36, (uint64_t)buf);
  }
  if ((~v6 & 9) != 0)
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v10 = *(std::__shared_weak_count **)v63;
    v11 = **(NSObject ***)buf;
    if (*(_QWORD *)v63)
    {
      v12 = (unint64_t *)(*(_QWORD *)v63 + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v15;
      *(_WORD *)v63 = 2080;
      *(_QWORD *)&v63[2] = "PCM_Data_Handler.cpp";
      v64 = 1024;
      v65 = 387;
      *(_WORD *)v66 = 2080;
      *(_QWORD *)&v66[2] = "not ((get_format().mFormatFlags & kAudioFormatFlagIsFloat) and (get_format().mFormatFlags & k"
                           "AudioFormatFlagIsPacked))";
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We only support mixing 32bit float format samples", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v45);
    v16 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"We only support mixing 32bit float format samples", (uint64_t)&v55);
    std::logic_error::logic_error((std::logic_error *)&v47, &v55);
    v17 = MEMORY[0x1E0DE5018];
    v47.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&v56, (const std::logic_error *)&v47);
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = -1;
    v56.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v57 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v56);
    *(_QWORD *)&v66[8] = "virtual void AMCP::DAL::PCM_Data_Handler::mix(Sample_Time_Range, Container, Sample_Time, DAL_Op"
                         "eration_Context_Ref) const";
    *(_QWORD *)&v66[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
    v67 = 387;
    std::vector<void *>::vector(v50);
    v18 = backtrace((void **)v50[0], (unint64_t)((char *)v50[1] - (char *)v50[0]) >> 3);
    std::vector<void *>::resize((char **)v50, v18);
    v52 = off_1E69A20A0;
    v53 = *(_OWORD *)v50;
    v54 = v51;
    v50[0] = 0;
    v50[1] = 0;
    v51 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v52);
    v16[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(v16, (const std::logic_error *)buf);
    v16->__vftable = (std::logic_error_vtbl *)(v17 + 16);
    v16[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v19 = *(_QWORD *)v66;
    v16[1].__imp_.__imp_ = *(const char **)v66;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = *(std::logic_error *)&v66[8];
    LODWORD(v16[3].__vftable) = v67;
    v16[2] = v20;
    v16->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    v16[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    v16[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  v24 = (AMCP::DAL::PCM_Data_Handler *)AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>((uint64_t)v8);
  length_in_frames = AMCP::DAL::PCM_Data_Handler::get_length_in_frames(v24);
  if (round(a3 + length_in_frames - a5) < round(a4))
    a4 = a3 + length_in_frames - a5;
  if (round(a3) < round(a4))
  {
    AMCP::DAL::PCM_Data_Handler::get_container_data((unint64_t *)&v55, a1, a3, a4);
    v26 = *a2;
    AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>((uint64_t)v26);
    AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)v50, v26, a5, length_in_frames);
    if ((*((_BYTE *)a1 + 20) & 0x20) != 0)
      v27 = 1;
    else
      v27 = *((_DWORD *)a1 + 9);
    v28 = (uint64_t)(v55.__r_.__value_.__l.__size_ - v55.__r_.__value_.__r.__words[0]) >> 4;
    v29 = v50[0];
    if (v28 != ((char *)v50[1] - (char *)v50[0]) >> 4)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v50[0]);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v41 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        v42 = pthread_self();
        v43 = pthread_mach_thread_np(v42);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v43;
        *(_WORD *)v63 = 2080;
        *(_QWORD *)&v63[2] = "PCM_Data_Handler.cpp";
        v64 = 1024;
        v65 = 399;
        *(_WORD *)v66 = 2080;
        *(_QWORD *)&v66[2] = "not (source.size() == dest.size())";
        _os_log_error_impl(&dword_1B57BA000, v41, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v49);
      v44 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v47);
      std::logic_error::logic_error(&v48, &v47);
      v48.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v56, &v48);
      v58 = 0;
      v59 = 0;
      v60 = 0;
      v61 = -1;
      v56.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v57 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v56);
      *(_QWORD *)&v66[8] = "virtual void AMCP::DAL::PCM_Data_Handler::mix(Sample_Time_Range, Container, Sample_Time, DAL_"
                           "Operation_Context_Ref) const";
      *(_QWORD *)&v66[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
      v67 = 399;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v45);
      v52 = off_1E69A20A0;
      v53 = v45;
      v54 = v46;
      v45 = 0uLL;
      v46 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v52);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v44, (uint64_t)buf);
    }
    if (v55.__r_.__value_.__l.__size_ != v55.__r_.__value_.__r.__words[0])
    {
      v30 = 0;
      v31 = v27 * vcvtmd_s64_f64(a4 - a3);
      if (v28 <= 1)
        v32 = 1;
      else
        v32 = (uint64_t)(v55.__r_.__value_.__l.__size_ - v55.__r_.__value_.__r.__words[0]) >> 4;
      do
      {
        vDSP_vadd(*(const float **)((char *)v50[0] + v30), 1, *(const float **)(v55.__r_.__value_.__r.__words[0] + v30), 1, *(float **)((char *)v50[0] + v30), 1, v31);
        v30 += 16;
        --v32;
      }
      while (v32);
      v29 = v50[0];
    }
    if (v29)
    {
      v50[1] = v29;
      std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v29, (v51 - (uint64_t)v29) >> 4);
    }
    if (v55.__r_.__value_.__r.__words[0])
    {
      v55.__r_.__value_.__l.__size_ = v55.__r_.__value_.__r.__words[0];
      std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v55.__r_.__value_.__l.__data_, (uint64_t)(v55.__r_.__value_.__r.__words[2] - v55.__r_.__value_.__r.__words[0]) >> 4);
    }
  }
}

void sub_1B5AE09C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,caulk::rt_safe_memory_resource *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,caulk::rt_safe_memory_resource *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a25)
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](a25, (a27 - (uint64_t)a25) >> 4);
  if (a33)
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](a33, (a35 - (uint64_t)a33) >> 4);
  _Unwind_Resume(exception_object);
}

AMCP::DAL::PCM_Data_Handler *AMCP::DAL::PCM_Data_Handler::erase_range(AMCP::DAL::PCM_Data_Handler *result, double a2, double a3)
{
  double v3;
  AMCP::DAL::PCM_Data_Handler *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  void *v8;
  AMCP::DAL::PCM_Data_Handler *v9;
  uint64_t v10;

  v3 = a3 - a2;
  if (round(a3 - a2) > 0.0)
  {
    v4 = result;
    AMCP::DAL::PCM_Data_Handler::get_container_data((unint64_t *)&v8, result, a2, a3);
    result = v9;
    if (v9 != v8)
    {
      v5 = 0;
      v6 = *((_DWORD *)v4 + 8) * vcvtmd_s64_f64(v3);
      if ((unint64_t)((v9 - (AMCP::DAL::PCM_Data_Handler *)v8) >> 4) <= 1)
        v7 = 1;
      else
        v7 = (v9 - (AMCP::DAL::PCM_Data_Handler *)v8) >> 4;
      do
      {
        bzero(*(void **)((char *)v8 + v5), v6);
        v5 += 16;
        --v7;
      }
      while (v7);
      result = (AMCP::DAL::PCM_Data_Handler *)v8;
    }
    if (result)
    {
      v9 = result;
      return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](result, (v10 - (uint64_t)result) >> 4);
    }
  }
  return result;
}

uint64_t *AMCP::DAL::PCM_Data_Handler::get_ring_buffer_time_translator(AMCP::DAL::PCM_Data_Handler *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    AMCP::DAL::PCM_Data_Handler::get_ring_buffer_time_translator(void)const::s_translator = (uint64_t)&off_1E6985D50;
  }
  return &AMCP::DAL::PCM_Data_Handler::get_ring_buffer_time_translator(void)const::s_translator;
}

_QWORD *AMCP::DAL::PCM_Data_Handler::dal_operation_context_create@<X0>(_QWORD *a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = operator new();
  AMCP::DAL::PCM_Operation_Context::PCM_Operation_Context(v4, a1);
  *a2 = v4;
  result = (_QWORD *)operator new();
  *result = &off_1E6985DA0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v4;
  a2[1] = (uint64_t)result;
  return result;
}

void sub_1B5AE0E94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<AMCP::DAL::PCM_Operation_Context>::reset[abi:ne180100]((AMCP::DAL::PCM_Operation_Context **)va);
  _Unwind_Resume(a1);
}

double AMCP::DAL::PCM_Data_Handler::dal_operation_apply(AMCP::DAL::PCM_Data_Handler *a1, double *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, double a6, double a7)
{
  AMCP::Log::Scope_Registry *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  double v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  void *exception;
  _QWORD v33[2];
  __int128 v34;
  uint64_t v35;
  uint64_t (**v36)();
  __int128 v37;
  uint64_t v38;
  std::string v39;
  std::logic_error v40;
  std::logic_error v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  uint8_t buf[8];
  __int128 v49;
  __int16 v50;
  _BYTE v51[14];
  const char *v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v15 = round(AMCP::DAL::PCM_Data_Handler::get_length_in_frames(a1));
  if (v15 <= 0.0
    || (v16 = a2[1], v17 = round(*a2), v18 = round(v16), v17 < v18) && (v17 >= 0.0 ? (v19 = v15 < v18) : (v19 = 1), v19))
  {
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v29 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v30 = pthread_self();
      v31 = pthread_mach_thread_np(v30);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v31;
      LOWORD(v49) = 2080;
      *(_QWORD *)((char *)&v49 + 2) = "PCM_Data_Handler.cpp";
      WORD5(v49) = 1024;
      HIDWORD(v49) = 258;
      v50 = 2080;
      *(_QWORD *)v51 = "not (Sample_Time_Range(0_S, get_length_in_frames()).encompasses(source_range))";
      _os_log_error_impl(&dword_1B57BA000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v47);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v39);
    std::logic_error::logic_error(&v40, &v39);
    v40.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v41, &v40);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = -1;
    v41.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v42 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v41);
    *(_QWORD *)&v51[6] = "virtual Sample_Time_Range AMCP::DAL::PCM_Data_Handler::dal_operation_apply(const Sample_Time_Ra"
                         "nge &, Container, Sample_Time_Range, const DAL_Settings &, DAL_Operation_Context_Ref) const";
    v52 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
    v53 = 258;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v34);
    v37 = v34;
    v38 = v35;
    v34 = 0uLL;
    v35 = 0;
    v36 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v36);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v20 = *a5;
  AMCP::DAL::PCM_Data_Handler::get_container_data((unint64_t *)buf, a1, *a2, v16);
  v21 = *a3;
  v22 = (std::__shared_weak_count *)a3[1];
  v33[0] = v21;
  v33[1] = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  v25 = AMCP::DAL::PCM_Operation_Context::apply(v20, (uint64_t *)buf, a2, (uint64_t)v33, a4, a6, a7);
  if (v22)
  {
    v26 = (unint64_t *)&v22->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&v49 = *(_QWORD *)buf;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)buf, (uint64_t)(*((_QWORD *)&v49 + 1) - *(_QWORD *)buf) >> 4);
  }
  return v25;
}

void sub_1B5AE11D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  caulk::rt_safe_memory_resource *v31;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  v31 = *(caulk::rt_safe_memory_resource **)(v29 - 144);
  if (v31)
  {
    *(_QWORD *)(v29 - 136) = v31;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](v31, (uint64_t)(*(_QWORD *)(v29 - 128) - (_QWORD)v31) >> 4);
  }
  _Unwind_Resume(a1);
}

void *AMCP::DAL::PCM_Data_Handler::dal_operation_get_property(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  void *result;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  void *__p[2];
  char v20;

  v4 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "expected output samples for input samples");
  v5 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  v6 = v5;
  if (v20 < 0)
  {
    operator delete(__p[0]);
    if (v6)
      goto LABEL_3;
  }
  else if (v5)
  {
LABEL_3:
    std::string::basic_string[abi:ne180100]<0>(__p, "expected output samples for input samples");
    v7 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (v7)
      v8 = AMCP::Thing::convert_to<unsigned long long>((uint64_t)(v7 + 40));
    else
      v8 = 0;
    if (v20 < 0)
      operator delete(__p[0]);
    __p[0] = 0;
    result = *(void **)(v4 + 32);
    if (result)
      return (void *)(*(uint64_t (**)(void *, uint64_t, void **))(*(_QWORD *)result + 32))(result, v8, __p);
    return result;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "actual input samples consumed");
  v9 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  v10 = v9;
  if (v20 < 0)
  {
    operator delete(__p[0]);
    if (v10)
      goto LABEL_8;
  }
  else if (v9)
  {
LABEL_8:
    std::string::basic_string[abi:ne180100]<0>(__p, "actual input samples consumed");
    v11 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (v11)
      v12 = AMCP::Thing::convert_to<unsigned long long>((uint64_t)(v11 + 40));
    else
      v12 = 0;
    if (v20 < 0)
      operator delete(__p[0]);
    __p[0] = 0;
    result = *(void **)(v4 + 32);
    if (result)
    {
      (*(void (**)(void *, uint64_t, void **))(*(_QWORD *)result + 32))(result, v12, __p);
      return __p[0];
    }
    return result;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "required input samples for output samples");
  v14 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  v15 = v14;
  if (v20 < 0)
  {
    operator delete(__p[0]);
    if (v15)
      goto LABEL_18;
  }
  else if (v14)
  {
LABEL_18:
    std::string::basic_string[abi:ne180100]<0>(__p, "required input samples for output samples");
    v16 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (v16)
      v17 = AMCP::Thing::convert_to<unsigned long long>((uint64_t)(v16 + 40));
    else
      v17 = 0;
    if (v20 < 0)
      operator delete(__p[0]);
    result = *(void **)(v4 + 32);
    if (result)
      return (void *)(*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)result + 24))(result, v17);
    return result;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "get latency");
  v18 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v20 < 0)
    operator delete(__p[0]);
  if (!v18)
    return 0;
  result = *(void **)(v4 + 32);
  if (result)
    return (void *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_1B5AE1550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::PCM_Data_Handler::get_data(uint64_t *a1@<X1>, unint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v7;
  AMCP::DAL::PCM_Data_Handler *v8;
  double length_in_frames;
  double v10;
  double v11;
  double v12;
  BOOL v14;
  double v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64x2_t v34;
  unint64_t v35;
  uint64_t v36;
  int64x2_t v37;
  unint64_t v38;
  _QWORD *v39;

  v7 = *a1;
  v8 = (AMCP::DAL::PCM_Data_Handler *)AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(*a1);
  length_in_frames = AMCP::DAL::PCM_Data_Handler::get_length_in_frames(v8);
  v10 = round(length_in_frames);
  v11 = round(a3);
  v12 = round(a4);
  if (v10 <= 0.0 || v11 >= v12)
    goto LABEL_5;
  v14 = v11 <= 0.0;
  v15 = 0.0;
  if (!v14)
    v15 = a3;
  if (v12 < v10)
    length_in_frames = a4;
  if (round(v15) < round(length_in_frames))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v16 = *(_QWORD **)(v7 + 56);
    v17 = *(_QWORD **)(v7 + 64);
    if (v16 != v17)
    {
      v18 = 0;
      v19 = vcvtmd_s64_f64(v15);
      v20 = vcvtmd_s64_f64(length_in_frames - v15);
      v21 = a2 + 2;
      do
      {
        if ((*(_BYTE *)(v7 + 20) & 0x20) != 0)
          v22 = 1;
        else
          v22 = *(unsigned int *)(v7 + 36);
        v23 = *v16 + (*(_DWORD *)(v7 + 32) * v19);
        v24 = v22 * v20;
        if ((unint64_t)v18 >= *v21)
        {
          v25 = (uint64_t)((uint64_t)v18 - *a2) >> 4;
          if ((unint64_t)(v25 + 1) >> 60)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v26 = *v21 - *a2;
          v27 = v26 >> 3;
          if (v26 >> 3 <= (unint64_t)(v25 + 1))
            v27 = v25 + 1;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
            v28 = 0xFFFFFFFFFFFFFFFLL;
          else
            v28 = v27;
          v39 = a2 + 2;
          if (v28)
            v28 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(v28);
          else
            v29 = 0;
          v30 = (_QWORD *)(v28 + 16 * v25);
          *v30 = v23;
          v30[1] = v24;
          v31 = *a2;
          v32 = a2[1];
          if (v32 == *a2)
          {
            v34 = vdupq_n_s64(v32);
            v33 = v28 + 16 * v25;
          }
          else
          {
            v33 = v28 + 16 * v25;
            do
            {
              *(_OWORD *)(v33 - 16) = *(_OWORD *)(v32 - 16);
              v33 -= 16;
              v32 -= 16;
            }
            while (v32 != v31);
            v34 = *(int64x2_t *)a2;
          }
          v18 = v30 + 2;
          *a2 = v33;
          a2[1] = (unint64_t)(v30 + 2);
          v37 = v34;
          v35 = a2[2];
          a2[2] = v28 + 16 * v29;
          v38 = v35;
          v36 = v34.i64[0];
          std::__split_buffer<AMCP::DAL::Audio_Samples<unsigned char>,caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>> &>::~__split_buffer((uint64_t)&v36);
        }
        else
        {
          *v18 = v23;
          v18[1] = v24;
          v18 += 2;
        }
        a2[1] = (unint64_t)v18;
        v16 += 3;
      }
      while (v16 != v17);
    }
  }
  else
  {
LABEL_5:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_1B5AE1754(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  caulk::rt_safe_memory_resource *v3;

  v3 = *(caulk::rt_safe_memory_resource **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100](v3, (uint64_t)(*(_QWORD *)(v1 + 16) - (_QWORD)v3) >> 4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(uint64_t result)
{
  NSObject *v1;
  _opaque_pthread_t *v2;
  mach_port_t v3;
  void *exception;
  __int128 v5;
  uint64_t v6;
  uint64_t (**v7)();
  __int128 v8;
  uint64_t v9;
  std::string v10;
  std::logic_error v11;
  std::logic_error v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint8_t buf[8];
  __int16 v20;
  char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  _BYTE v25[14];
  const char *v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!result)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v1 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      v2 = pthread_self();
      v3 = pthread_mach_thread_np(v2);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v3;
      v20 = 2080;
      v21 = "Container.h";
      v22 = 1024;
      v23 = 121;
      v24 = 2080;
      *(_QWORD *)v25 = "not ((m_impl.get()) != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v1, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to call Container::GetContainerData on a null Container", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v18);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to call Container::GetContainerData on a null Container", (uint64_t)&v10);
    std::logic_error::logic_error(&v11, &v10);
    v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v12, &v11);
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = -1;
    v12.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v13 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v12);
    *(_QWORD *)&v25[6] = "T *AMCP::DAL::Container::get_container_data_ptr() const [T = AMCP::DAL::PCM_Data_Handler]";
    v26 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Container.h";
    v27 = 121;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v5);
    v8 = v5;
    v9 = v6;
    v5 = 0uLL;
    v6 = 0;
    v7 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v7);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return result;
}

void sub_1B5AE1984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

void AMCP::DAL::PCM_Data_Handler::get_container_data(unint64_t *a1, AMCP::DAL::PCM_Data_Handler *this, double a3, double a4)
{
  double length_in_frames;
  double v9;
  double v10;
  double v11;
  BOOL v13;
  double v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  int v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64x2_t v33;
  unint64_t v34;
  uint64_t v35;
  int64x2_t v36;
  unint64_t v37;
  _QWORD *v38;

  length_in_frames = AMCP::DAL::PCM_Data_Handler::get_length_in_frames(this);
  v9 = round(length_in_frames);
  v10 = round(a3);
  v11 = round(a4);
  if (v9 <= 0.0 || v10 >= v11)
    goto LABEL_5;
  v13 = v10 <= 0.0;
  v14 = 0.0;
  if (!v13)
    v14 = a3;
  if (v11 < v9)
    length_in_frames = a4;
  if (round(v14) < round(length_in_frames))
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    v15 = (_QWORD *)*((_QWORD *)this + 7);
    v16 = (_QWORD *)*((_QWORD *)this + 8);
    if (v15 != v16)
    {
      v17 = 0;
      v18 = vcvtmd_s64_f64(v14);
      v19 = vcvtmd_s64_f64(length_in_frames - v14);
      v20 = a1 + 2;
      do
      {
        if ((*((_BYTE *)this + 20) & 0x20) != 0)
          v21 = 1;
        else
          v21 = *((_DWORD *)this + 9);
        v22 = *v15 + (*((_DWORD *)this + 8) * v18);
        v23 = (v21 * v19);
        if ((unint64_t)v17 >= *v20)
        {
          v24 = (uint64_t)((uint64_t)v17 - *a1) >> 4;
          if ((unint64_t)(v24 + 1) >> 60)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v25 = *v20 - *a1;
          v26 = v25 >> 3;
          if (v25 >> 3 <= (unint64_t)(v24 + 1))
            v26 = v24 + 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
            v27 = 0xFFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          v38 = a1 + 2;
          if (v27)
            v27 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(v27);
          else
            v28 = 0;
          v29 = (_QWORD *)(v27 + 16 * v24);
          *v29 = v22;
          v29[1] = v23;
          v30 = *a1;
          v31 = a1[1];
          if (v31 == *a1)
          {
            v33 = vdupq_n_s64(v31);
            v32 = v27 + 16 * v24;
          }
          else
          {
            v32 = v27 + 16 * v24;
            do
            {
              *(_OWORD *)(v32 - 16) = *(_OWORD *)(v31 - 16);
              v32 -= 16;
              v31 -= 16;
            }
            while (v31 != v30);
            v33 = *(int64x2_t *)a1;
          }
          v17 = v29 + 2;
          *a1 = v32;
          a1[1] = (unint64_t)(v29 + 2);
          v36 = v33;
          v34 = a1[2];
          a1[2] = v27 + 16 * v28;
          v37 = v34;
          v35 = v33.i64[0];
          std::__split_buffer<AMCP::DAL::Audio_Samples<float>,caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>> &>::~__split_buffer((uint64_t)&v35);
        }
        else
        {
          *v17 = v22;
          v17[1] = v23;
          v17 += 2;
        }
        a1[1] = (unint64_t)v17;
        v15 += 3;
      }
      while (v15 != v16);
    }
  }
  else
  {
LABEL_5:
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1B5AE1C50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  caulk::rt_safe_memory_resource *v3;

  v3 = *(caulk::rt_safe_memory_resource **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](v3, (uint64_t)(*(_QWORD *)(v1 + 16) - (_QWORD)v3) >> 4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<AMCP::DAL::Audio_Samples<float>,caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  caulk::rt_safe_memory_resource *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(caulk::rt_safe_memory_resource **)a1;
  if (*(_QWORD *)a1)
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](v4, (uint64_t)(*(_QWORD *)(a1 + 24) - (_QWORD)v4) >> 4);
  return a1;
}

AMCP::DAL::PCM_Operation_Context *std::unique_ptr<AMCP::DAL::PCM_Operation_Context>::reset[abi:ne180100](AMCP::DAL::PCM_Operation_Context **a1)
{
  AMCP::DAL::PCM_Operation_Context *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    AMCP::DAL::PCM_Operation_Context::~PCM_Operation_Context(result);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void std::__shared_ptr_pointer<AMCP::DAL::PCM_Operation_Context *,std::shared_ptr<AMCP::DAL::DAL_Operation_Context>::__shared_ptr_default_delete<AMCP::DAL::DAL_Operation_Context,AMCP::DAL::PCM_Operation_Context>,std::allocator<AMCP::DAL::PCM_Operation_Context>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

AMCP::DAL::PCM_Operation_Context *std::__shared_ptr_pointer<AMCP::DAL::PCM_Operation_Context *,std::shared_ptr<AMCP::DAL::DAL_Operation_Context>::__shared_ptr_default_delete<AMCP::DAL::DAL_Operation_Context,AMCP::DAL::PCM_Operation_Context>,std::allocator<AMCP::DAL::PCM_Operation_Context>>::__on_zero_shared(uint64_t a1)
{
  AMCP::DAL::PCM_Operation_Context *result;

  result = *(AMCP::DAL::PCM_Operation_Context **)(a1 + 24);
  if (result)
  {
    AMCP::DAL::PCM_Operation_Context::~PCM_Operation_Context(result);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::PCM_Operation_Context *,std::shared_ptr<AMCP::DAL::DAL_Operation_Context>::__shared_ptr_default_delete<AMCP::DAL::DAL_Operation_Context,AMCP::DAL::PCM_Operation_Context>,std::allocator<AMCP::DAL::PCM_Operation_Context>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP3DAL21DAL_Operation_ContextEE27__shared_ptr_default_deleteIS3_NS2_21PCM_Operation_ContextEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMCP::DAL::PCM_Buffer_Time_Translator::~PCM_Buffer_Time_Translator(AMCP::DAL::PCM_Buffer_Time_Translator *this)
{
  JUMPOUT(0x1B5E50688);
}

void AMCP::DAL::PCM_Buffer_Time_Translator::translate_range(const AMCP::DAL::DAL_Time_Range *a1@<X1>, const AMCP::DAL::DAL_Time_Range *a2@<X2>, uint64_t *a3@<X8>)
{
  AMCP::DAL::DAL_Time *v7;
  _BOOL8 v8;
  _BOOL4 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  double sample_time;
  double v17;
  double v18;
  double v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  double v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  double v51;
  __int128 v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  caulk::rt_safe_memory_resource *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  caulk::rt_safe_memory_resource *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  caulk::rt_safe_memory_resource *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  NSObject *v107;
  _opaque_pthread_t *v108;
  mach_port_t v109;
  void *exception;
  uint64_t (**v111)();
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  std::string v116;
  std::logic_error v117;
  std::logic_error v118;
  void *v119;
  char *v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  int v123;
  char v124;
  _BYTE buf[40];
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v7 = (const AMCP::DAL::DAL_Time_Range *)((char *)a2 + 40);
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (const AMCP::DAL::DAL_Time_Range *)((char *)a2 + 40), a2);
  AMCP::DAL::DAL_Time::operator-((uint64_t)&v118, (const AMCP::DAL::DAL_Time_Range *)((char *)a1 + 40), a1);
  v8 = AMCP::DAL::DAL_Time_Delta::operator<((AMCP::DAL::DAL_Time_Delta *)&v118, (uint64_t)buf);
  v9 = v8;
  v10 = v121;
  if (v121)
  {
    p_shared_owners = (unint64_t *)&v121->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(std::__shared_weak_count **)&buf[32];
  if (*(_QWORD *)&buf[32])
  {
    v14 = (unint64_t *)(*(_QWORD *)&buf[32] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v9)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v107 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
    {
      v108 = pthread_self();
      v109 = pthread_mach_thread_np(v108);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v109;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "PCM_Data_Handler.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 445;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not (range.length() <= ref_range.length())";
      _os_log_error_impl(&dword_1B57BA000, v107, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v124);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v116);
    std::logic_error::logic_error(&v117, &v116);
    v117.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v118, &v117);
    v120 = 0;
    v121 = 0;
    v122 = 0;
    v123 = -1;
    v118.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v119 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v118);
    *(_QWORD *)&buf[32] = "virtual rt_safe_vector<Buffer_Time_Translator::Translation_Range> AMCP::DAL::PCM_Buffer_Time_T"
                          "ranslator::translate_range(const DAL_Time_Range &, const DAL_Time_Range &) const";
    *(_QWORD *)&v126 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
    DWORD2(v126) = 445;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v114);
    v111 = off_1E69A20A0;
    v112 = v114;
    *(_QWORD *)&v113 = v115;
    v114 = 0uLL;
    v115 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v111);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  sample_time = AMCP::DAL::DAL_Time::get_sample_time(a2);
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (const AMCP::DAL::DAL_Time_Range *)((char *)a1 + 40), a1);
  if ((buf[0] & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
  v17 = *(double *)&buf[8];
  v18 = fmod(round(sample_time), *(long double *)&buf[8]);
  if (round(v18) >= 0.0)
    v19 = -0.0;
  else
    v19 = v17;
  v20 = *(std::__shared_weak_count **)&buf[32];
  if (*(_QWORD *)&buf[32])
  {
    v21 = (unint64_t *)(*(_QWORD *)&buf[32] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = AMCP::DAL::DAL_Time::get_sample_time(v7);
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (const AMCP::DAL::DAL_Time_Range *)((char *)a1 + 40), a1);
  if ((buf[0] & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
  v24 = v18 + v19;
  v25 = *(double *)&buf[8];
  v26 = fmod(round(v23), *(long double *)&buf[8]);
  v27 = -0.0;
  if (round(v26) < 0.0)
    v27 = v25;
  v28 = v26 + v27;
  v29 = *(std::__shared_weak_count **)&buf[32];
  if (*(_QWORD *)&buf[32])
  {
    v30 = (unint64_t *)(*(_QWORD *)&buf[32] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v32 = round(v28);
  if (round(v24) >= v32)
  {
    v46.n128_f64[0] = AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (const AMCP::DAL::DAL_Time_Range *)((char *)a1 + 40), a1);
    if ((buf[0] & 2) == 0)
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
    v47 = *(double *)&buf[8];
    v48 = *(std::__shared_weak_count **)&buf[32];
    if (*(_QWORD *)&buf[32])
    {
      v49 = (unint64_t *)(*(_QWORD *)&buf[32] + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v48->__on_zero_shared)(v48, v46);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = v47 - v24 + round(AMCP::DAL::DAL_Time::get_sample_time(a2));
    v52 = *(_OWORD *)((char *)a2 + 24);
    v53 = *((_QWORD *)a2 + 4);
    if (v53)
    {
      v54 = (unint64_t *)(v53 + 8);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    LODWORD(v111) = 2;
    v112 = *(unint64_t *)&v51;
    v113 = v52;
    *(double *)buf = v24;
    *(double *)&buf[8] = v47;
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&buf[16], a2, (const AMCP::DAL::DAL_Time *)&v111);
    v56 = a3[2];
    v57 = a3[1];
    if (v57 >= v56)
    {
      v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - *a3) >> 5);
      v69 = v68 + 1;
      if (v68 + 1 > 0x2AAAAAAAAAAAAAALL)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - *a3) >> 5);
      if (2 * v70 > v69)
        v69 = 2 * v70;
      if (v70 >= 0x155555555555555)
        v71 = 0x2AAAAAAAAAAAAAALL;
      else
        v71 = v69;
      v121 = (std::__shared_weak_count *)(a3 + 2);
      v72 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>((caulk::rt_safe_memory_resource *)v71);
      v73 = (char *)v72 + 96 * v68;
      v118.__vftable = (std::logic_error_vtbl *)v72;
      v118.__imp_.__imp_ = v73;
      v120 = (char *)v72 + 96 * v74;
      *(_OWORD *)v73 = *(_OWORD *)buf;
      v75 = *(_OWORD *)&buf[16];
      *((_QWORD *)v73 + 4) = *(_QWORD *)&buf[32];
      *((_OWORD *)v73 + 1) = v75;
      *(_OWORD *)(v73 + 40) = v126;
      v126 = 0uLL;
      v76 = v127;
      *((_QWORD *)v73 + 9) = v128;
      *(_OWORD *)(v73 + 56) = v76;
      *((_OWORD *)v73 + 5) = v129;
      v129 = 0uLL;
      v119 = v73 + 96;
      std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__swap_out_circular_buffer(a3, &v118);
      v77 = a3[1];
      std::__split_buffer<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range> &>::~__split_buffer((uint64_t)&v118);
      v78 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
      a3[1] = v77;
      if (v78)
      {
        v79 = (unint64_t *)&v78->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
    }
    else
    {
      *(_OWORD *)v57 = *(_OWORD *)buf;
      v58 = *(_OWORD *)&buf[16];
      *(_QWORD *)(v57 + 32) = *(_QWORD *)&buf[32];
      *(_OWORD *)(v57 + 16) = v58;
      *(_OWORD *)(v57 + 40) = v126;
      v126 = 0uLL;
      v59 = v128;
      *(_OWORD *)(v57 + 56) = v127;
      *(_QWORD *)(v57 + 72) = v59;
      *(_OWORD *)(v57 + 80) = v129;
      v129 = 0uLL;
      a3[1] = v57 + 96;
    }
    v81 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
    if (*((_QWORD *)&v126 + 1))
    {
      v82 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    if (v32 > 0.0)
    {
      *(_QWORD *)buf = 0;
      *(double *)&buf[8] = v28;
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&buf[16], (const AMCP::DAL::DAL_Time *)&v111, v7);
      v84 = a3[1];
      v85 = a3[2];
      if (v84 >= v85)
      {
        v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84 - *a3) >> 5);
        v89 = v88 + 1;
        if (v88 + 1 > 0x2AAAAAAAAAAAAAALL)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v90 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - *a3) >> 5);
        if (2 * v90 > v89)
          v89 = 2 * v90;
        if (v90 >= 0x155555555555555)
          v91 = 0x2AAAAAAAAAAAAAALL;
        else
          v91 = v89;
        v121 = (std::__shared_weak_count *)(a3 + 2);
        v92 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>((caulk::rt_safe_memory_resource *)v91);
        v93 = (char *)v92 + 96 * v88;
        v118.__vftable = (std::logic_error_vtbl *)v92;
        v118.__imp_.__imp_ = v93;
        v120 = (char *)v92 + 96 * v94;
        *(_OWORD *)v93 = *(_OWORD *)buf;
        v95 = *(_OWORD *)&buf[16];
        *((_QWORD *)v93 + 4) = *(_QWORD *)&buf[32];
        *((_OWORD *)v93 + 1) = v95;
        *(_OWORD *)(v93 + 40) = v126;
        v126 = 0uLL;
        v96 = v127;
        *((_QWORD *)v93 + 9) = v128;
        *(_OWORD *)(v93 + 56) = v96;
        *((_OWORD *)v93 + 5) = v129;
        v129 = 0uLL;
        v119 = v93 + 96;
        std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__swap_out_circular_buffer(a3, &v118);
        v97 = a3[1];
        std::__split_buffer<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range> &>::~__split_buffer((uint64_t)&v118);
        v98 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
        a3[1] = v97;
        if (v98)
        {
          v99 = (unint64_t *)&v98->__shared_owners_;
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
      }
      else
      {
        *(_OWORD *)v84 = *(_OWORD *)buf;
        v86 = *(_OWORD *)&buf[16];
        *(_QWORD *)(v84 + 32) = *(_QWORD *)&buf[32];
        *(_OWORD *)(v84 + 16) = v86;
        *(_OWORD *)(v84 + 40) = v126;
        v126 = 0uLL;
        v87 = v128;
        *(_OWORD *)(v84 + 56) = v127;
        *(_QWORD *)(v84 + 72) = v87;
        *(_OWORD *)(v84 + 80) = v129;
        v129 = 0uLL;
        a3[1] = v84 + 96;
      }
      v101 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
      if (*((_QWORD *)&v126 + 1))
      {
        v102 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
    }
    v104 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
    if (*((_QWORD *)&v113 + 1))
    {
      v105 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
  }
  else
  {
    *(double *)buf = v24;
    *(double *)&buf[8] = v28;
    *(_OWORD *)&buf[16] = *(_OWORD *)a2;
    v33 = *((_QWORD *)a2 + 3);
    *(_QWORD *)&buf[32] = *((_QWORD *)a2 + 2);
    *(_QWORD *)&v126 = v33;
    v34 = *((_QWORD *)a2 + 4);
    *((_QWORD *)&v126 + 1) = v34;
    if (v34)
    {
      v35 = (unint64_t *)(v34 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v127 = *(_OWORD *)v7;
    v37 = *((_QWORD *)a2 + 8);
    v38 = *((_QWORD *)a2 + 9);
    v128 = *((_QWORD *)v7 + 2);
    *(_QWORD *)&v129 = v37;
    *((_QWORD *)&v129 + 1) = v38;
    if (v38)
    {
      v39 = (unint64_t *)(v38 + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = a3[2];
    v42 = a3[1];
    if (v42 >= v41)
    {
      v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *a3) >> 5);
      v61 = v60 + 1;
      if (v60 + 1 > 0x2AAAAAAAAAAAAAALL)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(v41 - *a3) >> 5) > v61)
        v61 = 0x5555555555555556 * ((uint64_t)(v41 - *a3) >> 5);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - *a3) >> 5) >= 0x155555555555555)
        v62 = 0x2AAAAAAAAAAAAAALL;
      else
        v62 = v61;
      v121 = (std::__shared_weak_count *)(a3 + 2);
      v63 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>((caulk::rt_safe_memory_resource *)v62);
      v64 = (char *)v63 + 96 * v60;
      v118.__vftable = (std::logic_error_vtbl *)v63;
      v118.__imp_.__imp_ = v64;
      v120 = (char *)v63 + 96 * v65;
      *(_OWORD *)v64 = *(_OWORD *)buf;
      v66 = *(_OWORD *)&buf[16];
      *((_QWORD *)v64 + 4) = *(_QWORD *)&buf[32];
      *((_OWORD *)v64 + 1) = v66;
      *(_OWORD *)(v64 + 40) = v126;
      v126 = 0uLL;
      v67 = v127;
      *((_QWORD *)v64 + 9) = v128;
      *(_OWORD *)(v64 + 56) = v67;
      *((_OWORD *)v64 + 5) = v129;
      v129 = 0uLL;
      v119 = v64 + 96;
      std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__swap_out_circular_buffer(a3, &v118);
      v45 = a3[1];
      std::__split_buffer<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range> &>::~__split_buffer((uint64_t)&v118);
    }
    else
    {
      *(_OWORD *)v42 = *(_OWORD *)buf;
      v43 = *(_QWORD *)&buf[32];
      *(_OWORD *)(v42 + 16) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v42 + 32) = v43;
      *(_QWORD *)(v42 + 40) = v33;
      *(_QWORD *)(v42 + 48) = v34;
      v126 = 0uLL;
      v44 = v128;
      *(_OWORD *)(v42 + 56) = v127;
      *(_QWORD *)(v42 + 72) = v44;
      *(_QWORD *)(v42 + 80) = v37;
      *(_QWORD *)(v42 + 88) = v38;
      v129 = 0uLL;
      v45 = v42 + 96;
    }
    a3[1] = v45;
  }
}

void sub_1B5AE27FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v47 + 24);
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a37);
  _Unwind_Resume(a1);
}

void AMCP::DAL::PCM_Data_Handler::get_other_data<float>(unint64_t *a1, AMCP::DAL::PCM_Data_Handler *this, double a3, double a4)
{
  double length_in_frames;
  double v9;
  double v10;
  double v11;
  BOOL v13;
  double v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64x2_t v33;
  unint64_t v34;
  uint64_t v35;
  int64x2_t v36;
  unint64_t v37;
  _QWORD *v38;

  length_in_frames = AMCP::DAL::PCM_Data_Handler::get_length_in_frames(this);
  v9 = round(length_in_frames);
  v10 = round(a3);
  v11 = round(a4);
  if (v9 <= 0.0 || v10 >= v11)
    goto LABEL_5;
  v13 = v10 <= 0.0;
  v14 = 0.0;
  if (!v13)
    v14 = a3;
  if (v11 < v9)
    length_in_frames = a4;
  if (round(v14) < round(length_in_frames))
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    v15 = (_QWORD *)*((_QWORD *)this + 7);
    v16 = (_QWORD *)*((_QWORD *)this + 8);
    if (v15 != v16)
    {
      v17 = 0;
      v18 = vcvtmd_s64_f64(v14);
      v19 = vcvtmd_s64_f64(length_in_frames - v14);
      v20 = a1 + 2;
      do
      {
        if ((*((_BYTE *)this + 20) & 0x20) != 0)
          v21 = 1;
        else
          v21 = *((unsigned int *)this + 9);
        v22 = *v15 + (*((_DWORD *)this + 8) * v18);
        v23 = v21 * v19;
        if ((unint64_t)v17 >= *v20)
        {
          v24 = (uint64_t)((uint64_t)v17 - *a1) >> 4;
          if ((unint64_t)(v24 + 1) >> 60)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v25 = *v20 - *a1;
          v26 = v25 >> 3;
          if (v25 >> 3 <= (unint64_t)(v24 + 1))
            v26 = v24 + 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
            v27 = 0xFFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          v38 = a1 + 2;
          if (v27)
            v27 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(v27);
          else
            v28 = 0;
          v29 = (_QWORD *)(v27 + 16 * v24);
          *v29 = v22;
          v29[1] = v23;
          v30 = *a1;
          v31 = a1[1];
          if (v31 == *a1)
          {
            v33 = vdupq_n_s64(v31);
            v32 = v27 + 16 * v24;
          }
          else
          {
            v32 = v27 + 16 * v24;
            do
            {
              *(_OWORD *)(v32 - 16) = *(_OWORD *)(v31 - 16);
              v32 -= 16;
              v31 -= 16;
            }
            while (v31 != v30);
            v33 = *(int64x2_t *)a1;
          }
          v17 = v29 + 2;
          *a1 = v32;
          a1[1] = (unint64_t)(v29 + 2);
          v36 = v33;
          v34 = a1[2];
          a1[2] = v27 + 16 * v28;
          v37 = v34;
          v35 = v33.i64[0];
          std::__split_buffer<AMCP::DAL::Audio_Samples<float>,caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>> &>::~__split_buffer((uint64_t)&v35);
        }
        else
        {
          *v17 = v22;
          v17[1] = v23;
          v17 += 2;
        }
        a1[1] = (unint64_t)v17;
        v15 += 3;
      }
      while (v15 != v16);
    }
  }
  else
  {
LABEL_5:
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1B5AE2B68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  caulk::rt_safe_memory_resource *v3;

  v3 = *(caulk::rt_safe_memory_resource **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](v3, (uint64_t)(*(_QWORD *)(v1 + 16) - (_QWORD)v3) >> 4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *AMCP::DAL::create_abl(caulk::rt_safe_memory_resource **a1, uint64_t *a2, uint64_t a3)
{
  caulk::rt_safe_memory_resource *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  char *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = AMCP::Utility::AudioBufferList_Create((AMCP::Utility *)((unint64_t)(a2[1] - *a2) >> 4));
  v17[0] = &off_1E69A1390;
  v18 = v17;
  *a1 = v6;
  std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)v17);
  result = v18;
  if (v18 == v17)
  {
    v8 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v8 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
LABEL_6:
  v9 = *a2;
  v10 = a2[1];
  v11 = v10 - *a2;
  if (v10 != *a2)
  {
    v12 = 0;
    v13 = v11 >> 4;
    v14 = *(_DWORD *)(a3 + 24);
    LODWORD(v15) = *(_DWORD *)(a3 + 28);
    if (v13 <= 1)
      v13 = 1;
    if ((*(_BYTE *)(a3 + 12) & 0x20) != 0)
      v15 = 1;
    else
      v15 = v15;
    do
    {
      v16 = (char *)*a1 + v12;
      *((_DWORD *)v16 + 2) = v15;
      *((_DWORD *)v16 + 3) = v14 * (*(_QWORD *)(v9 + v12 + 8) / v15);
      *((_QWORD *)v16 + 2) = *(_QWORD *)(v9 + v12);
      v12 += 16;
      --v13;
    }
    while (v13);
  }
  return result;
}

unint64_t *AMCP::DAL::sample_group_from_samples<float>(unint64_t *result, uint64_t **a2)
{
  unint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64x2_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64x2_t v27;
  unint64_t v28;
  uint64_t v29;
  int64x2_t v30;
  unint64_t v31;
  _QWORD *v32;

  v2 = result;
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  v3 = result + 2;
  v4 = *a2;
  v5 = a2[1];
  if (v5 != *a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 - *a2);
    if (v6 >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v32 = v3;
    v8 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(v6);
    v11 = *v2;
    v10 = v2[1];
    if (v10 == *v2)
    {
      v13 = vdupq_n_s64(v10);
      v12 = v8;
    }
    else
    {
      v12 = v8;
      do
      {
        *(_OWORD *)(v12 - 16) = *(_OWORD *)(v10 - 16);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v13 = *(int64x2_t *)v2;
    }
    *v2 = v12;
    v2[1] = v8;
    v30 = v13;
    v14 = v2[2];
    v2[2] = v8 + 16 * v9;
    v31 = v14;
    v29 = v13.i64[0];
    result = (unint64_t *)std::__split_buffer<AMCP::DAL::Audio_Samples<float>,caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>> &>::~__split_buffer((uint64_t)&v29);
    v4 = *a2;
    v5 = a2[1];
  }
  if (v4 != v5)
  {
    v15 = (_QWORD *)v2[1];
    do
    {
      v16 = *v4;
      v17 = (unint64_t)v4[1] >> 2;
      if ((unint64_t)v15 >= *v3)
      {
        v18 = (uint64_t)((uint64_t)v15 - *v2) >> 4;
        if ((unint64_t)(v18 + 1) >> 60)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v19 = *v3 - *v2;
        v20 = v19 >> 3;
        if (v19 >> 3 <= (unint64_t)(v18 + 1))
          v20 = v18 + 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
          v21 = 0xFFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        v32 = v3;
        if (v21)
          v21 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(v21);
        else
          v22 = 0;
        v23 = (_QWORD *)(v21 + 16 * v18);
        *v23 = v16;
        v23[1] = v17;
        v24 = *v2;
        v25 = v2[1];
        if (v25 == *v2)
        {
          v27 = vdupq_n_s64(v25);
          v26 = v21 + 16 * v18;
        }
        else
        {
          v26 = v21 + 16 * v18;
          do
          {
            *(_OWORD *)(v26 - 16) = *(_OWORD *)(v25 - 16);
            v26 -= 16;
            v25 -= 16;
          }
          while (v25 != v24);
          v27 = *(int64x2_t *)v2;
        }
        v15 = v23 + 2;
        *v2 = v26;
        v2[1] = (unint64_t)(v23 + 2);
        v30 = v27;
        v28 = v2[2];
        v2[2] = v21 + 16 * v22;
        v31 = v28;
        v29 = v27.i64[0];
        result = (unint64_t *)std::__split_buffer<AMCP::DAL::Audio_Samples<float>,caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>> &>::~__split_buffer((uint64_t)&v29);
      }
      else
      {
        *v15 = v16;
        v15[1] = v17;
        v15 += 2;
      }
      v2[1] = (unint64_t)v15;
      v4 += 3;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_1B5AE2E9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  caulk::rt_safe_memory_resource *v3;

  v3 = *(caulk::rt_safe_memory_resource **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](v3, (uint64_t)(*(_QWORD *)(v1 + 16) - (_QWORD)v3) >> 4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::DAL::PCM_Data_Handler::get_other_data_bytes(AMCP::Log::Scope_Registry *a1, double a2, double a3)
{
  uint64_t v6;
  BOOL v7;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *exception;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  std::string v18;
  std::logic_error v19;
  std::logic_error v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint8_t buf[8];
  __int128 v28;
  __int16 v29;
  _BYTE v30[14];
  const char *v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (round(a2) >= round(a3))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v11;
      LOWORD(v28) = 2080;
      *(_QWORD *)((char *)&v28 + 2) = "PCM_Data_Handler.cpp";
      WORD5(v28) = 1024;
      HIDWORD(v28) = 178;
      v29 = 2080;
      *(_QWORD *)v30 = "not (range.end() > range.start())";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v20, &v19);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v21 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(_QWORD *)&v30[6] = "static gsl::span<std::byte> AMCP::DAL::PCM_Data_Handler::get_other_data_bytes(const Container &"
                         ", Sample_Time_Range)";
    v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
    v32 = 178;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    v16 = v13;
    v17 = v14;
    v13 = 0uLL;
    v14 = 0;
    v15 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v15);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>((uint64_t)a1);
  AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)buf, a1, a2, a3);
  v6 = *((_DWORD *)a1 + 8) * vcvtmd_s64_f64(a3 - a2);
  if ((_DWORD)v6)
    v7 = **(_QWORD **)buf == 0;
  else
    v7 = 0;
  if (v7)
    std::terminate();
  *(_QWORD *)&v28 = *(_QWORD *)buf;
  std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)buf, (uint64_t)(*((_QWORD *)&v28 + 1) - *(_QWORD *)buf) >> 4);
  return v6;
}

void sub_1B5AE314C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 112) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 104);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 104) = 0;
  MEMORY[0x1B5E500E8](v29 - 128);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 129));
  _Unwind_Resume(a1);
}

void AMCP::ASP::Driver::~Driver(AMCP::ASP::Driver *this)
{
  AMCP::ASP::Driver::~Driver(this);
  JUMPOUT(0x1B5E50688);
}

{
  const void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = &off_1E6985DF0;
  *((_QWORD *)this + 3) = &unk_1E6985E18;
  v2 = (const void *)*((_QWORD *)this + 34);
  if (v2)
    CFRelease(v2);
  v3 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
    MEMORY[0x1B5E50688](v3, 0xA0C40CE99C112);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 200));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 152));
  std::mutex::~mutex((std::mutex *)((char *)this + 88));
  boost::container::vector<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>,void>::~vector((uint64_t)this + 64);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  *((_QWORD *)this + 3) = &off_1E697FC58;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void AMCP::ASP::Driver::shutdown(__CFBundle ***this)
{
  AMCP::Log::Scope_Registry *v2;
  int v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *v6;
  unint64_t v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void **v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  const __CFString **v18;
  void **v19;
  std::__shared_weak_count *v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _opaque_pthread_t *v24;
  mach_port_t v25;
  void **v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::runtime_error *exception;
  CFTypeRef v31;
  CFTypeRef cf;
  void *__p[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint8_t buf[8];
  _BYTE v38[10];
  __int16 v39;
  int v40;
  __int16 v41;
  void **v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v35, "com.apple.coreaudio", "AMCP");
  v3 = *(_DWORD *)(v35 + 16);
  if (v3 == 3)
  {
    AMCP::Log::Scope_Registry::get(v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v20 = *(std::__shared_weak_count **)v38;
    v21 = **(NSObject ***)buf;
    if (*(_QWORD *)v38)
    {
      v22 = (unint64_t *)(*(_QWORD *)v38 + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      goto LABEL_48;
    v24 = pthread_self();
    v25 = pthread_mach_thread_np(v24);
    mcp_applesauce::CF::PlugInRef_proxy::get_bundle(&v31, *this[6]);
    mcp_applesauce::CF::BundleRef_proxy::get_bundle_id((applesauce::CF::StringRef *)&cf, (__CFBundle *)v31);
    if (cf)
    {
      applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
      if (v34 >= 0)
        v26 = __p;
      else
        v26 = (void **)__p[0];
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v25;
      *(_WORD *)v38 = 2080;
      *(_QWORD *)&v38[2] = "ASP_Driver.cpp";
      v39 = 1024;
      v40 = 128;
      v41 = 2080;
      v42 = v26;
      _os_log_impl(&dword_1B57BA000, v21, OS_LOG_TYPE_INFO, "%6u %32s:%-5d Tearing down plug-in %s", buf, 0x22u);
      if (v34 < 0)
        operator delete(__p[0]);
      if (cf)
        CFRelease(cf);
      v11 = v31;
      if (v31)
        goto LABEL_47;
      goto LABEL_48;
    }
LABEL_54:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v3 == 2)
  {
    AMCP::Log::Scope_Registry::get(v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = *(std::__shared_weak_count **)v38;
    v13 = **(NSObject ***)buf;
    if (*(_QWORD *)v38)
    {
      v14 = (unint64_t *)(*(_QWORD *)v38 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      mcp_applesauce::CF::PlugInRef_proxy::get_bundle(&v31, *this[6]);
      mcp_applesauce::CF::BundleRef_proxy::get_bundle_id((applesauce::CF::StringRef *)&cf, (__CFBundle *)v31);
      v18 = (const __CFString **)applesauce::CF::StringRef::operator->(&cf);
      applesauce::CF::convert_to<std::string,0>((uint64_t)__p, *v18);
      if (v34 >= 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)v38 = 2080;
      *(_QWORD *)&v38[2] = "ASP_Driver.cpp";
      v39 = 1024;
      v40 = 128;
      v41 = 2080;
      v42 = v19;
      _os_log_debug_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tearing down plug-in %s", buf, 0x22u);
      if (v34 < 0)
        operator delete(__p[0]);
      applesauce::CF::StringRef::~StringRef(&cf);
      mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::~BasicRef(&v31);
    }
    goto LABEL_48;
  }
  if (v3 != 1)
    goto LABEL_48;
  AMCP::Log::Scope_Registry::get(v2);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v4 = *(std::__shared_weak_count **)v38;
  v5 = **(NSObject ***)buf;
  if (*(_QWORD *)v38)
  {
    v6 = (unint64_t *)(*(_QWORD *)v38 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    goto LABEL_48;
  v8 = pthread_self();
  v9 = pthread_mach_thread_np(v8);
  mcp_applesauce::CF::PlugInRef_proxy::get_bundle(&v31, *this[6]);
  mcp_applesauce::CF::BundleRef_proxy::get_bundle_id((applesauce::CF::StringRef *)&cf, (__CFBundle *)v31);
  if (!cf)
    goto LABEL_54;
  applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
  if (v34 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  *(_DWORD *)buf = 67109890;
  *(_DWORD *)&buf[4] = v9;
  *(_WORD *)v38 = 2080;
  *(_QWORD *)&v38[2] = "ASP_Driver.cpp";
  v39 = 1024;
  v40 = 128;
  v41 = 2080;
  v42 = v10;
  _os_log_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d Tearing down plug-in %s", buf, 0x22u);
  if (v34 < 0)
    operator delete(__p[0]);
  if (cf)
    CFRelease(cf);
  v11 = v31;
  if (v31)
LABEL_47:
    CFRelease(v11);
LABEL_48:
  v27 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_1B5AE3738(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {
    __cxa_free_exception(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'AMCP::ASP::Driver::~Driver(AMCP::ASP::Driver *this)
{
  AMCP::ASP::Driver::~Driver((AMCP::ASP::Driver *)((char *)this - 24));
}

{
  AMCP::ASP::Driver::~Driver((AMCP::ASP::Driver *)((char *)this - 24));
  JUMPOUT(0x1B5E50688);
}

uint64_t boost::container::vector<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>,void>::~vector(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)a1 + 8;
    do
    {
      --v2;
      v3 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v3) + 24;
    }
    while (v2);
  }
  if (*(_QWORD *)(a1 + 16))
    operator delete(*(void **)a1);
  return a1;
}

uint64_t AMCP::ASP::Host_Interface::properties_changed(AMCP::ASP::Host_Interface *this, const AudioServerPlugInHostInterface *a2, unsigned int a3, uint64_t a4, const AudioObjectPropertyAddress *a5)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t (***v14)();
  uint64_t (***v15)();
  uint64_t (**v16)();
  uint64_t (**v17)();
  int v18;
  uint64_t (***v19)();
  uint64_t (***v20)();
  uint64_t (**v21)();
  uint64_t (**v22)();
  uint64_t v23;
  uint64_t (***v24)();
  uint64_t (***v25)();
  uint64_t (**v26)();
  uint64_t (**v27)();
  int v28;
  _DWORD *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  char *v51;
  uint64_t (**v52)();
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  void *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t (**v66)();
  unint64_t *v67;
  unint64_t v68;
  uint64_t (**v69)();
  uint64_t (**v70)();
  unint64_t *v71;
  unint64_t v72;
  uint64_t (***v73)();
  _BOOL4 v75;
  uint64_t (***v76)();
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t (**v81)();
  unint64_t *v82;
  unint64_t v83;
  uint64_t (**v84)();
  uint64_t (**v85)();
  unint64_t *v86;
  unint64_t v87;
  uint64_t (***v88)();
  uint64_t (***v89)();
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *p_shared_owners;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t (***v112)();
  uint64_t v113;
  __int128 v114;
  int v115;
  _QWORD v116[2];
  void *__p;
  char *v118;
  unint64_t v119;
  uint64_t v120[4];
  uint64_t v121;
  std::__shared_weak_count *v122;
  unsigned int v123;
  unsigned int v124;
  char *v125;
  std::__shared_weak_count *v126;
  uint64_t (**v127)();
  char *v128;
  unint64_t v129;
  uint64_t (***v130)();
  uint64_t (***v131)();
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 5);
  if (a3 && !a4)
    goto LABEL_157;
  v6 = 560947818;
  v116[0] = a3;
  v116[1] = a4;
  AMCP::ASP::Driver::get_plugin_object_for_driver_id((AMCP::ASP::Driver *)&v125, v5, a2);
  v7 = v125;
  if (v125)
  {
    v8 = *((_DWORD *)v125 + 15);
    v123 = *((_DWORD *)v125 + 17);
    v124 = v8;
    AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v121, *(std::__shared_mutex_base **)(*(_QWORD *)(v5 + 32) + 16), v8);
    if (!v121)
    {
LABEL_116:
      v91 = v122;
      if (v122)
      {
        p_shared_owners = (unint64_t *)&v122->__shared_owners_;
        do
          v93 = __ldaxr(p_shared_owners);
        while (__stlxr(v93 - 1, p_shared_owners));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      goto LABEL_121;
    }
    kdebug_trace();
    v120[0] = v5;
    v120[1] = (uint64_t)&v124;
    v120[2] = (uint64_t)&v123;
    v120[3] = (uint64_t)&v121;
    if (!AMCP::is_base_of((AMCP *)0x61706C67, v123))
    {
      if (AMCP::is_base_of((AMCP *)0x6163746C, v123))
      {
        v42 = v123;
        if ((AMCP::is_base_of((AMCP *)0x736C6472, v123) & 1) != 0)
        {
          v43 = 0;
          v44 = 0;
          v45 = 1935962742;
        }
        else if ((AMCP::is_base_of((AMCP *)0x6C65766C, v42) & 1) != 0)
        {
          v44 = 1818453110;
          v45 = 1818456950;
          v43 = 1;
        }
        else if ((AMCP::is_base_of((AMCP *)0x746F676C, v42) & 1) != 0)
        {
          v43 = 0;
          v44 = 0;
          v45 = 1650685548;
        }
        else if ((AMCP::is_base_of((AMCP *)0x736C6374, v42) & 1) != 0)
        {
          v43 = 0;
          v44 = 0;
          v45 = 1935893353;
        }
        else
        {
          v43 = 0;
          v44 = 0;
          if (AMCP::is_base_of((AMCP *)0x7370616E, v42))
            v45 = 1936745334;
          else
            v45 = 0;
        }
        v98 = v116[0];
        if (!v116[0])
          goto LABEL_115;
        v99 = 0;
        v100 = 0;
        v101 = 0;
        do
        {
          v102 = *(_DWORD *)gsl::details::span_iterator<gsl::span<AudioObjectPropertyAddress,-1l>,false>::operator*(v116, v99);
          if (v102 == v44)
            v103 = v43;
          else
            v103 = 0;
          v104 = v103 | v101;
          v105 = v103 ^ 1 | v100;
          if (v102 == v45)
            v101 = 1;
          else
            v101 = v104;
          if (v102 != v45)
            v100 = v105;
          if (v99 >= v116[0])
            goto LABEL_157;
          ++v99;
        }
        while (v98 != v99);
        if ((v101 & 1) != 0)
          AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*(_QWORD *)(v5 + 32) + 32), v124);
        if ((v100 & 1) == 0)
          goto LABEL_115;
        v106 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 32);
        v107 = *(_DWORD *)(v5 + 280);
        v108 = v124;
        v109 = v126;
        if (v126)
        {
          v110 = (unint64_t *)&v126->__shared_owners_;
          do
            v111 = __ldxr(v110);
          while (__stxr(v111 + 1, v110));
        }
        v127 = &off_1E6986090;
        v128 = v7;
        v129 = (unint64_t)v109;
        v130 = &v127;
        AMCP::Core::Conductor::enqueue_config_change(v106, v107, v108, 0, (uint64_t)&v127);
        v112 = v130;
        if (v130 == &v127)
        {
          v113 = 4;
          v112 = &v127;
        }
        else
        {
          if (!v130)
            goto LABEL_115;
          v113 = 5;
        }
        (*v112)[v113]();
        goto LABEL_115;
      }
      v127 = 0;
      v128 = 0;
      v129 = 0;
      v46 = v116[0];
      if (v116[0])
      {
        v47 = 0;
        v48 = 0;
        while (1)
        {
          v49 = (unsigned int *)gsl::details::span_iterator<gsl::span<AudioObjectPropertyAddress,-1l>,false>::operator*(v116, v48);
          if ((AMCP::HAL::is_config_change_property((AMCP::HAL *)*v49) & 1) == 0)
          {
            if ((unint64_t)v47 >= v129)
            {
              v52 = v127;
              v53 = 0xAAAAAAAAAAAAAAABLL * ((v47 - (char *)v127) >> 2);
              v54 = v53 + 1;
              if (v53 + 1 > 0x1555555555555555)
LABEL_158:
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v129 - (_QWORD)v127) >> 2) > v54)
                v54 = 0x5555555555555556 * ((uint64_t)(v129 - (_QWORD)v127) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v129 - (_QWORD)v127) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v55 = 0x1555555555555555;
              else
                v55 = v54;
              if (v55)
                v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v55);
              else
                v56 = 0;
              v57 = *(_QWORD *)v49;
              v58 = v55 + 12 * v53;
              *(_DWORD *)(v58 + 8) = v49[2];
              *(_QWORD *)v58 = v57;
              v59 = v58;
              if (v47 != (char *)v52)
              {
                do
                {
                  v60 = *(_QWORD *)(v47 - 12);
                  v47 -= 12;
                  v61 = *((_DWORD *)v47 + 2);
                  *(_QWORD *)(v59 - 12) = v60;
                  v59 -= 12;
                  *(_DWORD *)(v59 + 8) = v61;
                }
                while (v47 != (char *)v52);
                v47 = (char *)v127;
              }
              v51 = (char *)(v58 + 12);
              v127 = (uint64_t (**)())v59;
              v128 = (char *)(v58 + 12);
              v129 = v55 + 12 * v56;
              if (v47)
                operator delete(v47);
            }
            else
            {
              v50 = *(_QWORD *)v49;
              *((_DWORD *)v47 + 2) = v49[2];
              *(_QWORD *)v47 = v50;
              v51 = v47 + 12;
            }
            v128 = v51;
            v47 = v51;
          }
          if (v48 >= v116[0])
            break;
          if (++v48 == v46)
            goto LABEL_78;
        }
LABEL_157:
        std::terminate();
      }
LABEL_78:
      AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_0::operator()<std::vector<AudioObjectPropertyAddress>>(v120, (uint64_t)&v127);
      v62 = v127;
      if (!v127)
        goto LABEL_115;
      goto LABEL_114;
    }
    __p = 0;
    v118 = 0;
    v119 = 0;
    v9 = v116[0];
    if (v116[0])
    {
      v10 = 0;
      v11 = 0;
      v115 = 0;
      DWORD1(v114) = 0;
      *((_QWORD *)&v114 + 1) = 0;
      while (1)
      {
        v12 = (_DWORD *)gsl::details::span_iterator<gsl::span<AudioObjectPropertyAddress,-1l>,false>::operator*(v116, v11);
        v13 = *v12;
        if (*v12 == 1684370979)
        {
          AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)&v127, v5, (uint64_t)&v125, (AMCP *)0x61646576, 0x64657623u);
          v24 = v130;
          v25 = v131;
          v26 = v127;
          v27 = (uint64_t (**)())v128;
          if (v130)
            operator delete(v130);
          if (v26)
            operator delete(v26);
          v28 = v26 != v27;
          if (v24 != v25)
            v28 = 2;
          DWORD1(v114) = v28;
        }
        else if (v13 == 1668049699)
        {
          AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)&v127, v5, (uint64_t)&v125, (AMCP *)0x61636C6B, 0x636C6B23u);
          v19 = v130;
          v20 = v131;
          v21 = v127;
          v22 = (uint64_t (**)())v128;
          if (v130)
            operator delete(v130);
          if (v21)
            operator delete(v21);
          v23 = v19 == v20 ? v21 != v22 : 2;
          *((_QWORD *)&v114 + 1) = v23;
        }
        else if (v13 == 1651472419)
        {
          AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)&v127, v5, (uint64_t)&v125, (AMCP *)0x61626F78, 0x626F7823u);
          v14 = v130;
          v15 = v131;
          v16 = v127;
          v17 = (uint64_t (**)())v128;
          if (v130)
            operator delete(v130);
          if (v16)
            operator delete(v16);
          v18 = v16 != v17;
          if (v14 != v15)
            v18 = 2;
          v115 = v18;
        }
        else
        {
          v29 = v12;
          if ((unint64_t)v10 >= v119)
          {
            v32 = (char *)__p;
            v33 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (_BYTE *)__p) >> 2);
            v34 = v33 + 1;
            if (v33 + 1 > 0x1555555555555555)
              goto LABEL_158;
            if (0x5555555555555556 * ((uint64_t)(v119 - (_QWORD)__p) >> 2) > v34)
              v34 = 0x5555555555555556 * ((uint64_t)(v119 - (_QWORD)__p) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v119 - (_QWORD)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v35 = 0x1555555555555555;
            else
              v35 = v34;
            if (v35)
              v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v35);
            else
              v36 = 0;
            v37 = *(_QWORD *)v29;
            v38 = (_DWORD *)(v35 + 12 * v33);
            v38[2] = v29[2];
            *(_QWORD *)v38 = v37;
            v39 = v38;
            if (v10 != v32)
            {
              do
              {
                v40 = *(_QWORD *)(v10 - 12);
                v10 -= 12;
                v41 = *((_DWORD *)v10 + 2);
                *(_QWORD *)(v39 - 3) = v40;
                v39 -= 3;
                v39[2] = v41;
              }
              while (v10 != v32);
              v10 = (char *)__p;
            }
            v31 = (char *)(v38 + 3);
            __p = v39;
            v118 = (char *)(v38 + 3);
            v119 = v35 + 12 * v36;
            if (v10)
              operator delete(v10);
          }
          else
          {
            v30 = *(_QWORD *)v12;
            *((_DWORD *)v10 + 2) = v12[2];
            *(_QWORD *)v10 = v30;
            v31 = v10 + 12;
          }
          v118 = v31;
          v10 = v31;
        }
        if (v11 >= v116[0])
          goto LABEL_157;
        if (++v11 == v9)
          goto LABEL_81;
      }
    }
    *((_QWORD *)&v114 + 1) = 0;
    DWORD1(v114) = 0;
    v115 = 0;
LABEL_81:
    if (*(_QWORD *)((char *)&v114 + 4))
    {
      v63 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 32);
      v64 = *(_DWORD *)(v5 + 280);
      v66 = *(uint64_t (***)())(v5 + 8);
      v65 = *(_QWORD *)(v5 + 16);
      if (v65)
      {
        v67 = (unint64_t *)(v65 + 16);
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v70 = (uint64_t (**)())v125;
      v69 = (uint64_t (**)())v126;
      if (v126)
      {
        v71 = (unint64_t *)&v126->__shared_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      v130 = 0;
      v73 = (uint64_t (***)())operator new(0x30uLL);
      *v73 = &off_1E6985F90;
      v73[1] = v66;
      v73[2] = (uint64_t (**)())v65;
      v73[3] = (uint64_t (**)())(v114 >> 32);
      v73[4] = v70;
      v73[5] = v69;
      v130 = v73;
      v75 = DWORD1(v114) == 2 || DWORD2(v114) == 2;
      AMCP::Core::Conductor::enqueue_config_change(v63, v64, v64, v75, (uint64_t)&v127);
      v76 = v130;
      if (v130 == &v127)
      {
        v77 = 4;
        v76 = &v127;
      }
      else
      {
        if (!v130)
          goto LABEL_101;
        v77 = 5;
      }
      (*v76)[v77]();
    }
LABEL_101:
    if (!v115)
      goto LABEL_113;
    v78 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 32);
    v79 = *(_DWORD *)(v5 + 280);
    v81 = *(uint64_t (***)())(v5 + 8);
    v80 = *(_QWORD *)(v5 + 16);
    if (v80)
    {
      v82 = (unint64_t *)(v80 + 16);
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
    }
    v85 = (uint64_t (**)())v125;
    v84 = (uint64_t (**)())v126;
    if (v126)
    {
      v86 = (unint64_t *)&v126->__shared_owners_;
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
    }
    v130 = 0;
    v88 = (uint64_t (***)())operator new(0x28uLL);
    *v88 = &off_1E6986010;
    v88[1] = v81;
    v88[2] = (uint64_t (**)())v80;
    v88[3] = v85;
    v88[4] = v84;
    v130 = v88;
    AMCP::Core::Conductor::enqueue_config_change(v78, v79, v79, v115 == 2, (uint64_t)&v127);
    v89 = v130;
    if (v130 == &v127)
    {
      v90 = 4;
      v89 = &v127;
    }
    else
    {
      if (!v130)
        goto LABEL_113;
      v90 = 5;
    }
    (*v89)[v90]();
LABEL_113:
    AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_0::operator()<std::vector<AudioObjectPropertyAddress>>(v120, (uint64_t)&__p);
    v62 = __p;
    if (!__p)
    {
LABEL_115:
      kdebug_trace();
      v6 = 0;
      goto LABEL_116;
    }
LABEL_114:
    operator delete(v62);
    goto LABEL_115;
  }
LABEL_121:
  v94 = v126;
  if (v126)
  {
    v95 = (unint64_t *)&v126->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  return v6;
}

void sub_1B5AE41D0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::ASP::Host_Interface::copy_from_storage(AMCP::ASP::Host_Interface *this, CFTypeRef cf, const __CFString *a3, const void **a4)
{
  uint64_t v6;
  os_unfair_lock_s *v7;
  const __CFDictionary *v8;
  void *v9;
  void *v10;
  std::runtime_error *exception;
  CFTypeRef cfa;
  void *v14;
  char v15;

  v6 = *((_QWORD *)this + 5);
  if (cf)
    CFRetain(cf);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, cf);
  v7 = (os_unfair_lock_s *)(v6 + 264);
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 264));
  v8 = *(const __CFDictionary **)(v6 + 272);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = (void *)applesauce::CF::details::at_key<applesauce::CF::StringRef const&>(v8, cfa);
  v10 = v9;
  if (v9)
  {
    CFRetain(v9);
    v14 = v10;
    v15 = 1;
    CFRetain(v10);
  }
  else
  {
    LOBYTE(v14) = 0;
    v15 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v14);
  os_unfair_lock_unlock(v7);
  if (cfa)
    CFRelease(cfa);
  if (a3)
  {
    a3->isa = v10;
  }
  else if (v10)
  {
    CFRelease(v10);
  }
  return 0;
}

void sub_1B5AE4300(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t AMCP::ASP::Host_Interface::write_to_storage(AMCP::ASP::Host_Interface *this, CFTypeRef cf, const __CFString *a3, const void *a4)
{
  uint64_t v6;
  __CFDictionary *MutableCopy;
  const void *v8;
  CFTypeRef cfa;
  const void *v11;

  v6 = *((_QWORD *)this + 5);
  if (cf)
    CFRetain(cf);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, cf);
  if (a3)
    CFRetain(a3);
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 264));
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *(CFDictionaryRef *)(v6 + 272));
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, cfa, a3);
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&v11, MutableCopy);
  v8 = *(const void **)(v6 + 272);
  *(_QWORD *)(v6 + 272) = v11;
  v11 = v8;
  if (v8)
    CFRelease(v8);
  if (MutableCopy)
    CFRelease(MutableCopy);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 264));
  if (a3)
    CFRelease(a3);
  if (cfa)
    CFRelease(cfa);
  return 0;
}

uint64_t AMCP::ASP::Host_Interface::delete_from_storage(AMCP::ASP::Host_Interface *this, CFTypeRef cf, const __CFString *a3)
{
  uint64_t v4;
  __CFDictionary *MutableCopy;
  const __CFDictionary *v6;
  const void *v7;
  void *key;
  const void *v10;

  v4 = *((_QWORD *)this + 5);
  if (cf)
    CFRetain(cf);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, cf);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 264));
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *(CFDictionaryRef *)(v4 + 272));
  v6 = MutableCopy;
  if (MutableCopy)
    CFDictionaryRemoveValue(MutableCopy, key);
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&v10, v6);
  v7 = *(const void **)(v4 + 272);
  *(_QWORD *)(v4 + 272) = v10;
  v10 = v7;
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 264));
  if (key)
    CFRelease(key);
  return 0;
}

uint64_t AMCP::ASP::Host_Interface::request_device_configuration_change(AMCP::ASP::Host_Interface *this, const AudioServerPlugInHostInterface *a2, uint64_t a3, uint64_t a4, void *a5)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  void *v12;
  void **p_lpsrc;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  std::__shared_weak_count *v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  void **v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  void *lpsrc;
  std::__shared_weak_count *v42;
  void **v43;
  uint64_t v44;

  v7 = (int)a2;
  v44 = *MEMORY[0x1E0C80C00];
  v8 = 560227702;
  v9 = *((_QWORD *)this + 5);
  AMCP::ASP::Driver::get_plugin_object_for_driver_id((AMCP::ASP::Driver *)&v39, v9, a2);
  v10 = v39;
  if (!v39 || !AMCP::is_base_of((AMCP *)0x61636C6B, *(_DWORD *)(v39 + 68)))
    goto LABEL_32;
  v11 = *(_DWORD *)(v10 + 60);
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v37, *(std::__shared_mutex_base **)(*(_QWORD *)(v9 + 32) + 16), v11);
  if (v37)
  {
    std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&lpsrc, *(_QWORD *)(v9 + 8), *(std::__shared_weak_count **)(v9 + 16));
    if (lpsrc
    {
      v35 = v12;
      v36 = v42;
      p_lpsrc = &lpsrc;
    }
    else
    {
      p_lpsrc = &v35;
    }
    *p_lpsrc = 0;
    p_lpsrc[1] = 0;
    v14 = v42;
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 32);
    v18 = *(_DWORD *)(v9 + 280);
    v20 = v35;
    v19 = v36;
    if (v36)
    {
      v21 = (unint64_t *)&v36->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v43 = 0;
    v23 = operator new(0x30uLL);
    *v23 = &off_1E6986110;
    v23[1] = v20;
    v23[2] = v19;
    *((_DWORD *)v23 + 6) = v7;
    v23[4] = a3;
    v23[5] = a4;
    v43 = (void **)v23;
    AMCP::Core::Conductor::enqueue_config_change(v17, v18, v11, 1, (uint64_t)&lpsrc);
    v24 = v43;
    if (v43 == &lpsrc)
    {
      v25 = 4;
      v24 = &lpsrc;
    }
    else
    {
      if (!v43)
        goto LABEL_21;
      v25 = 5;
    }
    (*((void (**)(void))*v24 + v25))();
LABEL_21:
    if (v19)
    {
      v26 = (unint64_t *)&v19->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v8 = 0;
  }
  v28 = v38;
  if (v38)
  {
    v29 = (unint64_t *)&v38->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
LABEL_32:
  v31 = v40;
  if (v40)
  {
    v32 = (unint64_t *)&v40->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  return v8;
}

void sub_1B5AE4790(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::ASP::Driver::get_plugin_object_for_driver_id(AMCP::ASP::Driver *this, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;

  v14 = a3;
  v12 = a2 + 88;
  v13 = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a2 + 88));
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>::find(&v15, (uint64_t *)(a2 + 64), &v14);
  v5 = *(_QWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 72);
  if (v5)
    v7 = 1;
  else
    v7 = v6 == 0;
  if (!v7)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (v15 == v5 + 24 * v6)
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v15 + 16);
    *(_QWORD *)this = *(_QWORD *)(v15 + 8);
    *((_QWORD *)this + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v12);
}

_QWORD *std::__function::__func<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0,std::allocator<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986110;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0,std::allocator<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986110;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0,std::allocator<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6986110;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0,std::allocator<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6986110;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0,std::allocator<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0,std::allocator<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0,std::allocator<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  AMCP::ASP::PlugIn_Object *v2;
  AMCP::ASP::PlugIn *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  AMCP::ASP::PlugIn_Object *v11;
  std::__shared_weak_count *v12;

  AMCP::ASP::Driver::get_plugin_object_for_driver_id((AMCP::ASP::Driver *)&v11, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 24));
  v2 = v11;
  if (v11 && AMCP::is_base_of((AMCP *)0x61636C6B, *((_DWORD *)v11 + 17)))
  {
    kdebug_trace();
    v3 = (AMCP::ASP::PlugIn *)*((_QWORD *)v2 + 3);
    v4 = (std::__shared_weak_count *)*((_QWORD *)v2 + 4);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      AMCP::ASP::PlugIn::PerformDeviceConfigChange(v3, *(unsigned int *)(a1 + 24), *(_QWORD *)(a1 + 32), *(void **)(a1 + 40));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    else
    {
      AMCP::ASP::PlugIn::PerformDeviceConfigChange(v3, *(unsigned int *)(a1 + 24), *(_QWORD *)(a1 + 32), *(void **)(a1 + 40));
    }
    kdebug_trace();
    AMCP::ASP::PlugIn_Object::update_core(v11);
    AMCP::ASP::Driver::update_owned_objects(*(_QWORD *)(a1 + 8), (uint64_t)&v11);
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1B5AE4AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0,std::allocator<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP6Driver35request_device_configuration_changeEjyPvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0,std::allocator<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0>,void ()(void)>::target_type()
{
}

void AMCP::ASP::Driver::update_owned_objects(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  void *v7[3];
  void *__p;

  if (AMCP::is_base_of((AMCP *)0x61646576, *(_DWORD *)(*(_QWORD *)a2 + 68)))
  {
    AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)v7, a1, a2, (AMCP *)0x61737472, 0x73746D23u);
    AMCP::ASP::Driver::update_owned_object_kind(a1, a2, 0x61737472u, (uint64_t)v7);
    if (__p)
      operator delete(__p);
    if (v7[0])
      operator delete(v7[0]);
    goto LABEL_8;
  }
  if (AMCP::is_base_of((AMCP *)0x61636C6B, *(_DWORD *)(*(_QWORD *)a2 + 68))
    || AMCP::is_base_of((AMCP *)0x61626F78, *(_DWORD *)(*(_QWORD *)a2 + 68)))
  {
LABEL_8:
    AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)v7, a1, a2, (AMCP *)0x6163746C, 0x6374726Cu);
    v4 = a1;
    v5 = a2;
    v6 = 1633907820;
    goto LABEL_9;
  }
  if (!AMCP::is_base_of((AMCP *)0x61706C67, *(_DWORD *)(*(_QWORD *)a2 + 68)))
    return;
  AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)v7, a1, a2, (AMCP *)0x61626F78, 0x626F7823u);
  AMCP::ASP::Driver::update_owned_object_kind(a1, a2, 0x61626F78u, (uint64_t)v7);
  if (__p)
    operator delete(__p);
  if (v7[0])
    operator delete(v7[0]);
  AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)v7, a1, a2, (AMCP *)0x61636C6B, 0x636C6B23u);
  AMCP::ASP::Driver::update_owned_object_kind(a1, a2, 0x61636C6Bu, (uint64_t)v7);
  if (__p)
    operator delete(__p);
  if (v7[0])
    operator delete(v7[0]);
  AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)v7, a1, a2, (AMCP *)0x61646576, 0x64657623u);
  v4 = a1;
  v5 = a2;
  v6 = 1633969526;
LABEL_9:
  AMCP::ASP::Driver::update_owned_object_kind(v4, v5, v6, (uint64_t)v7);
  if (__p)
    operator delete(__p);
  if (v7[0])
    operator delete(v7[0]);
}

void AMCP::ASP::Driver::compute_new_dead_objects_kind(uint64_t a1, uint64_t a2, uint64_t a3, AMCP *a4, AudioObjectPropertySelector a5)
{
  uint64_t v7;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  AMCP::ASP::PlugIn *v27;
  __int128 v28;
  AudioObjectPropertySelector v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  AudioObjectPropertyAddress v38;
  std::vector<unsigned int> __dst;
  char *v40;
  char *v41;
  unint64_t v42;

  v7 = a3;
  v10 = *(_DWORD *)(*(_QWORD *)a3 + 60);
  v41 = 0;
  v42 = 0;
  v40 = 0;
  __p = (void *)(a2 + 88);
  LOBYTE(v33) = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a2 + 88));
  v12 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  if (!v12 && v11)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (v11)
  {
    v29 = a5;
    v30 = v7;
    v31 = a1;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = v12 + 24 * v11;
    do
    {
      if (!v12)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v17 = *(_QWORD *)(v12 + 8);
      if (*(_DWORD *)(v17 + 56) == v10 && AMCP::is_base_of(a4, *(_DWORD *)(v17 + 68)))
      {
        if ((unint64_t)v15 >= v14)
        {
          v18 = (v15 - v13) >> 2;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v14 - (_QWORD)v13) >> 1 > v19)
            v19 = (uint64_t)(v14 - (_QWORD)v13) >> 1;
          if (v14 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v19;
          if (v20)
            v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v20);
          else
            v21 = 0;
          v22 = (char *)(v20 + 4 * v18);
          *(_DWORD *)v22 = *(_DWORD *)v12;
          v23 = v22 + 4;
          while (v15 != v13)
          {
            v24 = *((_DWORD *)v15 - 1);
            v15 -= 4;
            *((_DWORD *)v22 - 1) = v24;
            v22 -= 4;
          }
          v14 = v20 + 4 * v21;
          if (v13)
            operator delete(v13);
          v13 = v22;
          v15 = v23;
        }
        else
        {
          *(_DWORD *)v15 = *(_DWORD *)v12;
          v15 += 4;
        }
      }
      v12 += 24;
    }
    while (v12 != v16);
    v41 = v15;
    v42 = v14;
    v40 = v13;
    v7 = v30;
    a1 = v31;
    a5 = v29;
  }
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&__p);
  memset(&__dst, 0, sizeof(__dst));
  if (a5 == 1937009955)
  {
    strcpy((char *)&v38, "#mtstpni");
    BYTE1(v38.mElement) = 0;
    HIWORD(v38.mElement) = 0;
    AMCP::ASP::PlugIn::object_get_property_data<unsigned int [],unsigned int>((uint64_t)&__p, *(AMCP::ASP::PlugIn **)(a2 + 48), *(unsigned int *)(*(_QWORD *)v7 + 44), &v38);
    v25 = v33;
    v26 = *(unsigned int *)(*(_QWORD *)v7 + 44);
    v27 = *(AMCP::ASP::PlugIn **)(a2 + 48);
    v38.mScope = 1869968496;
    AMCP::ASP::PlugIn::object_get_property_data<unsigned int [],unsigned int>((uint64_t)&__p, v27, v26, &v38);
    v28 = v33;
    std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(&__dst, 0, (char *)v25, *((char **)&v25 + 1), (uint64_t)(*((_QWORD *)&v25 + 1) - v25) >> 2);
    std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(&__dst, __dst.__end_, (char *)v28, *((char **)&v28 + 1), (uint64_t)(*((_QWORD *)&v28 + 1) - v28) >> 2);
    if ((_QWORD)v28)
      operator delete((void *)v28);
    if ((_QWORD)v25)
      operator delete((void *)v25);
  }
  else
  {
    v38.mSelector = a5;
    *(_QWORD *)&v38.mScope = 1735159650;
    AMCP::ASP::PlugIn::object_get_property_data<unsigned int [],unsigned int>((uint64_t)&__p, *(AMCP::ASP::PlugIn **)(a2 + 48), *(unsigned int *)(*(_QWORD *)v7 + 44), &v38);
    *(_OWORD *)&__dst.__begin_ = v33;
    __dst.__end_cap_.__value_ = (unsigned int *)v34;
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  AMCP::Utility::compute_differences_sorted<unsigned int>((uint64_t)&__p, (unsigned int **)&v40, &__dst.__begin_);
  *(_OWORD *)a1 = v36;
  *(_QWORD *)(a1 + 16) = v37;
  *((_QWORD *)&v36 + 1) = 0;
  v37 = 0;
  *(_OWORD *)(a1 + 24) = v34;
  *(_QWORD *)(a1 + 40) = v35;
  v35 = 0;
  *(_QWORD *)&v36 = 0;
  v34 = 0uLL;
  if (__p)
  {
    *(_QWORD *)&v33 = __p;
    operator delete(__p);
  }
  if (__dst.__begin_)
  {
    __dst.__end_ = __dst.__begin_;
    operator delete(__dst.__begin_);
  }
  if (v40)
    operator delete(v40);
}

void AMCP::ASP::Driver::update_owned_object_kind(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned int *v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  unsigned int *v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *i;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  int v38;
  char *v39;
  char *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  AMCP::ASP::PlugIn_Object *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unsigned int *v66;
  uint64_t v68;
  char v69;
  AMCP::ASP::PlugIn_Object *v70[2];
  char v71[16];
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  __int128 v76;
  __int128 v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned int **)(a4 + 24);
  v66 = *(unsigned int **)(a4 + 32);
  if (v7 != v66)
  {
    v8 = 0uLL;
    do
    {
      v9 = *v7;
      v76 = v8;
      v77 = v8;
      v78 = 1065353216;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v76, v9, v9);
      v74 = a1 + 88;
      LOBYTE(v75) = 1;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 88));
      do
      {
        v11 = *(_QWORD *)(a1 + 64);
        v10 = *(_QWORD *)(a1 + 72);
        if (v11)
          v12 = 1;
        else
          v12 = v10 == 0;
        if (!v12)
          __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
        if (!v10)
          break;
        v13 = 0;
        v14 = 24 * v10;
        do
        {
          if (!v11)
            __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
          v15 = *(_DWORD *)v11;
          if (!std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(&v76, *(_DWORD *)v11)&& std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(&v76, *(_DWORD *)(*(_QWORD *)(v11 + 8) + 40)))
          {
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v76, v15, v15);
            v13 = 1;
          }
          v11 += 24;
          v14 -= 24;
        }
        while (v14);
      }
      while ((v13 & 1) != 0);
      v73 = 0;
      v72 = 0uLL;
      v16 = 0;
      if ((_QWORD)v77)
      {
        v17 = (_QWORD *)v77;
        do
        {
          ++v16;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>,std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>>((char *)&v72, (uint64_t *)v77, v16);
      std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v74);
      std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&v76);
      *(_QWORD *)&v76 = a1 + 88;
      BYTE8(v76) = 1;
      std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 88));
      v19 = (unsigned int *)*((_QWORD *)&v72 + 1);
      v18 = (unsigned int *)v72;
      if ((_QWORD)v72 != *((_QWORD *)&v72 + 1))
      {
        v20 = *(_QWORD *)(a1 + 72);
        do
        {
          v21 = *(_QWORD *)(a1 + 64);
          if (v21)
            v22 = 1;
          else
            v22 = v20 == 0;
          if (!v22)
            __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
          if (v20)
          {
            v23 = *(unsigned int **)(a1 + 64);
            v24 = v20;
            do
            {
              if (v24 != 1 && !v23)
                __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
              if (!v23)
                __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
              v25 = v24 >> 1;
              v26 = &v23[6 * (v24 >> 1)];
              v28 = *v26;
              v27 = v26 + 6;
              v24 += ~(v24 >> 1);
              if (v28 >= *v18)
                v24 = v25;
              else
                v23 = v27;
            }
            while (v24);
          }
          else
          {
            v23 = *(unsigned int **)(a1 + 64);
          }
          v29 = (unsigned int *)(v21 + 24 * v20);
          if (v23 != v29)
          {
            if (!v23)
              __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
            if (*v18 < *v23)
              v23 = (unsigned int *)(v21 + 24 * v20);
            if (v23 != v29)
            {
              if (v21 > (unint64_t)v23 || v23 >= v29)
                __assert_rtn("erase", "vector.hpp", 2092, "this->priv_in_range(position)");
              for (i = v23 + 6; i != v29; i += 6)
              {
                *(i - 6) = *i;
                std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)(i - 4), (__int128 *)(i + 2));
              }
              std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(v29 - 4));
              v20 = *(_QWORD *)(a1 + 72) - 1;
              *(_QWORD *)(a1 + 72) = v20;
            }
          }
          ++v18;
        }
        while (v18 != v19);
        v18 = (unsigned int *)v72;
      }
      std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v76);
      if (v18)
        operator delete(v18);
      ++v7;
      v8 = 0uLL;
    }
    while (v7 != v66);
  }
  v33 = *(_DWORD **)a4;
  v32 = *(_DWORD **)(a4 + 8);
  if (*(_DWORD **)a4 != v32)
  {
    do
    {
      v70[0] = 0;
      v70[1] = 0;
      v34 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)&v76 = *(_QWORD *)(a1 + 32);
      *((_QWORD *)&v76 + 1) = v34;
      if (v34)
      {
        v35 = (unint64_t *)(v34 + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      v37 = *(_DWORD *)(*(_QWORD *)a2 + 60);
      v38 = *(_DWORD *)(*(_QWORD *)a2 + 44);
      v39 = (char *)operator new(0x1A0uLL);
      v40 = v39;
      *(_OWORD *)(v39 + 8) = 0u;
      *(_QWORD *)v39 = &off_1E6985EC0;
      v72 = v76;
      v76 = 0u;
      v41 = *(std::__shared_weak_count **)(a1 + 56);
      v74 = *(_QWORD *)(a1 + 48);
      v75 = v41;
      if (v41)
      {
        p_shared_owners = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(p_shared_owners);
        while (__stxr(v43 + 1, p_shared_owners));
      }
      AMCP::ASP::PlugIn_Object::PlugIn_Object((uint64_t)(v39 + 24), &v72, (uint64_t)&v74, v37, v38, *v33, a3);
      v44 = v75;
      if (v75)
      {
        v45 = (unint64_t *)&v75->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
      if (*((_QWORD *)&v72 + 1))
      {
        v48 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      *(_QWORD *)&v50 = v40 + 24;
      *((_QWORD *)&v50 + 1) = v40;
      v51 = (std::__shared_weak_count *)v70[1];
      *(_OWORD *)v70 = v50;
      if (v51)
      {
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = v70[0];
      if (v70[0])
      {
        v68 = a1 + 88;
        v69 = 1;
        std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 88));
        LODWORD(v76) = *v33;
        *((_QWORD *)&v76 + 1) = v57;
        *(AMCP::ASP::PlugIn_Object **)&v77 = v70[1];
        if (v70[1])
        {
          v58 = (unint64_t *)((char *)v70[1] + 8);
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>::insert_unique((uint64_t)v71, (char *)(a1 + 64), (uint64_t)&v76);
        v60 = (std::__shared_weak_count *)v77;
        if ((_QWORD)v77)
        {
          v61 = (unint64_t *)(v77 + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v68);
        AMCP::ASP::PlugIn_Object::build_core(v70[0]);
        AMCP::ASP::Driver::update_owned_objects(a1, v70);
      }
      v63 = (std::__shared_weak_count *)v70[1];
      if (v70[1])
      {
        v64 = (unint64_t *)((char *)v70[1] + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      ++v33;
    }
    while (v33 != v32);
  }
}

void sub_1B5AE5784(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>::insert_unique(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char *v8;
  char *v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  __int128 *v15;
  char *v16;
  int v17;
  uint64_t v18;
  char *v19;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v3 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2)
    v4 = 1;
  else
    v4 = v3 == 0;
  if (!v4)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v8 = (char *)(*(_QWORD *)a2 + 24 * v3);
  v18 = *(_QWORD *)a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>*,true>,unsigned int>(&v19, &v18, v8, *(_DWORD *)a3);
  v9 = v19;
  if (v19 == v8)
  {
    *(_BYTE *)(a1 + 8) = 1;
LABEL_13:
    v11 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 > (unint64_t)v9)
      goto LABEL_26;
    v12 = *((_QWORD *)a2 + 1);
    if (!v11 && v12)
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    v13 = (char *)(v11 + 24 * v12);
    if (v9 > v13)
LABEL_26:
      __assert_rtn("emplace", "vector.hpp", 1862, "this->priv_in_range_or_end(position)");
    v14 = *((_QWORD *)a2 + 2);
    if (v14 < v12)
      __assert_rtn("priv_insert_forward_range", "vector.hpp", 2821, "this->m_holder.capacity() >= this->m_holder.m_size");
    if (v14 == v12)
    {
      boost::container::vector<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>,boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>*,boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>(&v19, a2, v9, a3);
      v9 = v19;
    }
    else if (v13 == v9)
    {
      *(_DWORD *)v9 = *(_DWORD *)a3;
      *(_OWORD *)(v11 + 24 * v12 + 8) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      ++*((_QWORD *)a2 + 1);
    }
    else
    {
      v15 = (__int128 *)(v13 - 24);
      *(_DWORD *)v13 = *((_DWORD *)v13 - 6);
      *(_OWORD *)(v11 + 24 * v12 + 8) = *((_OWORD *)v13 - 1);
      *((_QWORD *)v13 - 2) = 0;
      *((_QWORD *)v13 - 1) = 0;
      ++*((_QWORD *)a2 + 1);
      if (v13 - 24 != v9)
      {
        v16 = v13 - 24;
        do
        {
          v17 = *((_DWORD *)v16 - 6);
          v16 -= 24;
          *(_DWORD *)v15 = v17;
          std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)v15 + 8, v15 - 1);
          v15 = (__int128 *)v16;
        }
        while (v16 != v9);
      }
      *(_DWORD *)v9 = *(_DWORD *)a3;
      std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)(v9 + 8), (__int128 *)(a3 + 8));
    }
    goto LABEL_25;
  }
  if (!v19)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  v10 = *(_DWORD *)a3 >= *(_DWORD *)v19;
  *(_BYTE *)(a1 + 8) = *(_DWORD *)a3 < *(_DWORD *)v19;
  if (!v10)
    goto LABEL_13;
  if (!*(_QWORD *)a2)
    __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
LABEL_25:
  *(_QWORD *)a1 = v9;
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>,boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>*,boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>(_QWORD *a1, char *a2, char *a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *((_QWORD *)a2 + 2);
  if (v4 != *((_QWORD *)a2 + 1))
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  if (v4 == 0x555555555555555)
    goto LABEL_28;
  if (v4 >> 61 > 4)
    v5 = -1;
  else
    v5 = 8 * v4;
  if (v4 >> 61)
    v6 = v5;
  else
    v6 = 8 * v4 / 5;
  if (v6 >= 0x555555555555555)
    v6 = 0x555555555555555;
  v7 = v4 + 1 > v6 ? v4 + 1 : v6;
  if (v7 > 0x555555555555555)
LABEL_28:
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  v12 = *(char **)a2;
  v13 = (char *)operator new(24 * v7);
  v14 = v13;
  v15 = *(void **)a2;
  v16 = *(_QWORD *)a2 + 24 * *((_QWORD *)a2 + 1);
  v17 = v13;
  if (*(char **)a2 != a3)
  {
    v18 = *(char **)a2;
    v17 = v13;
    do
    {
      *(_DWORD *)v17 = *(_DWORD *)v18;
      *(_OWORD *)(v17 + 8) = *(_OWORD *)(v18 + 8);
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      v17 += 24;
      v18 += 24;
    }
    while (v18 != a3);
  }
  *(_DWORD *)v17 = *(_DWORD *)a4;
  *(_OWORD *)(v17 + 8) = *(_OWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if ((char *)v16 != a3)
  {
    v19 = v17 + 32;
    v20 = a3;
    do
    {
      *((_DWORD *)v19 - 2) = *(_DWORD *)v20;
      *v19 = *(_OWORD *)(v20 + 8);
      v19 = (_OWORD *)((char *)v19 + 24);
      *((_QWORD *)v20 + 1) = 0;
      *((_QWORD *)v20 + 2) = 0;
      v20 += 24;
    }
    while (v20 != (char *)v16);
  }
  if (v15)
  {
    v21 = *((_QWORD *)a2 + 1);
    if (v21)
    {
      v22 = (uint64_t)v15 + 8;
      do
      {
        --v21;
        v22 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v22) + 24;
      }
      while (v21);
    }
    operator delete(*(void **)a2);
  }
  v23 = *((_QWORD *)a2 + 1) + 1;
  *(_QWORD *)a2 = v14;
  *((_QWORD *)a2 + 1) = v23;
  *((_QWORD *)a2 + 2) = v7;
  *a1 = &v14[a3 - v12];
}

_QWORD *boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>*,true>,unsigned int>(_QWORD *result, _QWORD *a2, _DWORD *a3, unsigned int a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;

  if ((_DWORD *)*a2 != a3)
  {
    v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a3 - *a2) >> 3);
    a3 = (_DWORD *)*a2;
    do
    {
      if (v4 != 1 && !a3)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!a3)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v5 = v4 >> 1;
      v6 = &a3[6 * (v4 >> 1)];
      if (*v6 < a4)
      {
        a3 = v6 + 6;
        *a2 = v6 + 6;
        v5 = v4 + ~v5;
      }
      v4 = v5;
    }
    while (v5);
  }
  *result = a3;
  return result;
}

void std::__shared_ptr_emplace<AMCP::ASP::PlugIn_Object>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6985EC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::ASP::PlugIn_Object>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6985EC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::ASP::PlugIn_Object>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

char *std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>,std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>>(char *result, uint64_t *a2, unint64_t a3)
{
  char *v4;
  _DWORD *i;

  if (a3)
  {
    v4 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a3);
    for (i = (_DWORD *)*((_QWORD *)v4 + 1); a2; a2 = (uint64_t *)*a2)
      *i++ = *((_DWORD *)a2 + 4);
    *((_QWORD *)v4 + 1) = i;
  }
  return result;
}

void sub_1B5AE5D90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::ASP::PlugIn::object_get_property_data<unsigned int [],unsigned int>(uint64_t a1, AMCP::ASP::PlugIn *this, uint64_t a3, const AudioObjectPropertyAddress *a4)
{
  unint64_t PropertyDataSize;
  std::vector<unsigned int> v9;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(this, a3, 0, a4, 0, 0);
  if (!(PropertyDataSize >> 34) || (_DWORD)PropertyDataSize)
  {
    *(_DWORD *)a1 = PropertyDataSize;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    std::vector<unsigned int>::vector(&v9, PropertyDataSize >> 34);
    *(_DWORD *)a1 = AMCP::ASP::PlugIn::ObjectGetPropertyData(this, a3, 0, a4, 0, 0, (LODWORD(v9.__end_) - LODWORD(v9.__begin_)) & 0xFFFFFFFC, v9.__begin_);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(a1 + 8), v9.__begin_, (uint64_t)v9.__end_, v9.__end_ - v9.__begin_);
    if (v9.__begin_)
    {
      v9.__end_ = v9.__begin_;
      operator delete(v9.__begin_);
    }
  }
}

_QWORD *boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>::find(uint64_t *a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  _QWORD *result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;

  v3 = *a2;
  v4 = a2[1];
  v14 = v3;
  if (v3)
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  result = boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>*,true>,unsigned int>(a1, &v14, (_DWORD *)(v3 + 24 * v4), *a3);
  v10 = a2[1];
  if (*a2)
    v11 = 1;
  else
    v11 = v10 == 0;
  if (!v11)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v12 = *a2 + 24 * v10;
  v13 = (unsigned int *)*a1;
  if (*a1 != v12)
  {
    if (!v13)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    if (*a3 < *v13)
      *a1 = v12;
  }
  return result;
}

uint64_t gsl::details::span_iterator<gsl::span<AudioObjectPropertyAddress,-1l>,false>::operator*(_QWORD *a1, uint64_t a2)
{
  if (!a1 || a2 < 0 || *a1 <= a2)
    std::terminate();
  return a1[1] + 12 * a2;
}

void AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_0::operator()<std::vector<AudioObjectPropertyAddress>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _DWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  _QWORD *v18;
  _BYTE *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  _QWORD v31[41];

  v31[40] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    v4 = *a1;
    v5 = *(_QWORD *)(*a1 + 32);
    v6 = *(std::__shared_weak_count **)(*a1 + 40);
    v28 = v5;
    v29 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v31, *(dispatch_object_t *)(*(_QWORD *)(v5 + 32) + 352));
    v9 = *(_QWORD *)(v4 + 40);
    *(_QWORD *)&v22 = *(_QWORD *)(v4 + 32);
    *((_QWORD *)&v22 + 1) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v23 = 0;
    v24 = 0;
    v25 = 0;
    std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&v23, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
    v12 = (_DWORD *)a1[2];
    LODWORD(v26) = *(_DWORD *)a1[1];
    HIDWORD(v26) = *v12;
    v13 = (_QWORD *)a1[3];
    *(_QWORD *)&v27 = *v13;
    v14 = v13[1];
    *((_QWORD *)&v27 + 1) = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v17 = v31[0];
    v18 = (_QWORD *)operator new();
    *(_OWORD *)v18 = v22;
    v18[3] = 0;
    v18[4] = 0;
    v18[2] = 0;
    v19 = v23;
    std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(v18 + 2, v23, (uint64_t)v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 2));
    v18[5] = v26;
    *((_OWORD *)v18 + 3) = v27;
    v27 = 0uLL;
    v30 = 0;
    dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN10applesauce8dispatch2v15asyncIZZN4AMCP3ASP6Driver25driver_properties_changedEjRKN3gsl4spanI26AudioObjectPropertyAddressLln1EEEENK3__0clINSt3__16vectorIS8_NSE_9allocatorIS8_EEEEEEDaRKT_EUlvE_EEvP16dispatch_queue_sOSK_ENUlPvE_8__invokeESR_);
    _ZNSt3__110unique_ptrIZZN4AMCP3ASP6Driver25driver_properties_changedEjRKN3gsl4spanI26AudioObjectPropertyAddressLln1EEEENK3__0clINS_6vectorIS6_NS_9allocatorIS6_EEEEEEDaRKT_EUlvE_NS_14default_deleteISK_EEED1B8ne180100Ev(&v30);
    if (v19)
    {
      v24 = v19;
      operator delete(v19);
    }
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v31);
    if (v6)
    {
      v20 = (unint64_t *)&v6->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1B5AE61CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v20);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::HAL::is_config_change_property(AMCP::HAL *this)
{
  int v1;
  uint64_t result;
  int v3;

  v1 = (int)this;
  result = 1;
  if (v1 > 1870030193)
  {
    if (v1 > 1936092478)
    {
      if (v1 > 1937010787)
      {
        if (v1 <= 1952542819)
        {
          if (v1 == 1937010788)
            return result;
          v3 = 1937077093;
          goto LABEL_57;
        }
        if (v1 == 1952542820 || v1 == 1986425722)
          return result;
        v3 = 2003136116;
      }
      else
      {
        if ((v1 - 1936092479) <= 0x35 && ((1 << (v1 - 63)) & 0x20400400000001) != 0
          || v1 == 1936482681)
        {
          return result;
        }
        v3 = 1937009955;
      }
    }
    else if (v1 <= 1885762668)
    {
      if ((v1 - 1885762592) <= 0x1F && ((1 << (v1 - 32)) & 0x80000009) != 0 || v1 == 1870030194)
        return result;
      v3 = 1885762657;
    }
    else if (v1 > 1935763059)
    {
      if (v1 == 1935763060 || v1 == 1935894638)
        return result;
      v3 = 1936092451;
    }
    else
    {
      if (v1 == 1885762669 || v1 == 1902539642)
        return result;
      v3 = 1919055206;
    }
    goto LABEL_57;
  }
  if (v1 <= 1684629093)
  {
    if (v1 <= 1651730809)
    {
      if (v1 <= 1634562931)
      {
        if (v1 == 1633906541)
          return result;
        v3 = 1634169456;
        goto LABEL_57;
      }
      if (v1 == 1634562932 || v1 == 1634755428)
        return result;
      v3 = 1634955892;
    }
    else if (v1 > 1668049763)
    {
      if (v1 == 1668049764 || v1 == 1668575852)
        return result;
      v3 = 1684108387;
    }
    else
    {
      if (v1 == 1651730810 || v1 == 1651735075)
        return result;
      v3 = 1667658618;
    }
LABEL_57:
    if (v1 != v3)
      return 0;
    return result;
  }
  if (v1 > 1819569762)
  {
    if (v1 > 1853059618)
    {
      if (v1 == 1853059619 || v1 == 1853059700)
        return result;
      v3 = 1869180523;
    }
    else
    {
      if (v1 == 1819569763 || v1 == 1835628607)
        return result;
      v3 = 1852012899;
    }
    goto LABEL_57;
  }
  if (v1 > 1735354733)
  {
    if (v1 == 1735354734 || v1 == 1735356005)
      return result;
    v3 = 1735554416;
    goto LABEL_57;
  }
  if (v1 != 1684629094 && v1 != 1718839674)
  {
    v3 = 1718843939;
    goto LABEL_57;
  }
  return result;
}

_QWORD *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986090;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986090;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6986090;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6986090;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4>,void ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4>,void ()(void)>::operator()(uint64_t a1)
{
  AMCP::ASP::PlugIn_Object::update_core(*(AMCP::ASP::PlugIn_Object **)(a1 + 8));
}

uint64_t std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP6Driver25driver_properties_changedEjRKN3gsl4spanI26AudioObjectPropertyAddressLln1EEEE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4>,void ()(void)>::target_type()
{
}

uint64_t *_ZZN10applesauce8dispatch2v15asyncIZZN4AMCP3ASP6Driver25driver_properties_changedEjRKN3gsl4spanI26AudioObjectPropertyAddressLln1EEEENK3__0clINSt3__16vectorIS8_NSE_9allocatorIS8_EEEEEEDaRKT_EUlvE_EEvP16dispatch_queue_sOSK_ENUlPvE_8__invokeESR_(uint64_t a1)
{
  unint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  int8x8_t *v7;
  AMCP::Thing *v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];
  void (*v29)(_QWORD, _OWORD *, _QWORD, _QWORD);
  _QWORD v30[2];
  void *__p[2];
  void *v32[2];
  float v33;
  unsigned int v34;
  void *v35;
  void (*v36)(uint64_t, unsigned int *, _QWORD *, _QWORD);

  v27 = a1;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v32 = 0u;
  v33 = 1.0;
  v3 = *(unsigned int **)(a1 + 16);
  v4 = *(unsigned int **)(a1 + 24);
  if (v3 == v4)
    goto LABEL_58;
  do
  {
    LODWORD(v5) = *v3;
    if (*v3 == 1870098020)
      goto LABEL_57;
    if ((_DWORD)v5 == 1819569763)
    {
      if (AMCP::is_base_of((AMCP *)0x61737472, *(_DWORD *)(a1 + 44)))
        v5 = 1936487523;
      else
        v5 = 1819569763;
    }
    else
    {
      AMCP::get_property_traits_for_hal_selector((AMCP *)*v3, (uint64_t)&v34);
      v6 = HIDWORD(v36);
      v1 = v34;
      if (v35)
        operator delete(v35);
      if (v6)
        v5 = v1;
      else
        v5 = v5;
    }
    LODWORD(v30[0]) = v5;
    v26 = *(_QWORD *)(v3 + 1);
    *(_QWORD *)((char *)v30 + 4) = v26;
    v7 = *(int8x8_t **)(a1 + 48);
    v29 = 0;
    memset(v28, 0, sizeof(v28));
    AMCP::Core::Core::get_property_value((AMCP::Core::Core *)&v34, v7, (const AMCP::Thing *)v30, (uint64_t)v28);
    if (v29)
      v29(0, v28, 0, 0);
    v9 = v26 & 0xFF000000 | (unint64_t)(v5 << 32) | HIDWORD(v26) & 0xFFFFFF;
    v10 = (unint64_t)__p[1];
    if (!__p[1])
      goto LABEL_31;
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v1 = v26 & 0xFF000000 | (unint64_t)(v5 << 32) | HIDWORD(v26) & 0xFFFFFF;
      if ((void *)v9 >= __p[1])
        v1 = v9 % (unint64_t)__p[1];
    }
    else
    {
      v1 = v9 & ((unint64_t)__p[1] - 1);
    }
    v12 = (uint64_t **)*((_QWORD *)__p[0] + v1);
    if (!v12 || (v13 = *v12) == 0)
    {
LABEL_31:
      v15 = operator new(0x48uLL);
      *v15 = 0;
      v15[1] = v9;
      v15[2] = v30[0];
      *((_DWORD *)v15 + 6) = HIDWORD(v26);
      *((_OWORD *)v15 + 2) = 0u;
      *((_OWORD *)v15 + 3) = 0u;
      v15[8] = 0;
      if (v36)
        v36(1, &v34, v15 + 4, 0);
      v16 = (float)((unint64_t)v32[1] + 1);
      if (!v10 || (float)(v33 * (float)v10) < v16)
      {
        v17 = (v10 & (v10 - 1)) != 0;
        if (v10 < 3)
          v17 = 1;
        v18 = v17 | (2 * v10);
        v19 = vcvtps_u32_f32(v16 / v33);
        if (v18 <= v19)
          v20 = v19;
        else
          v20 = v18;
        std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)__p, v20);
        v10 = (unint64_t)__p[1];
        if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
        {
          if ((void *)v9 >= __p[1])
            v1 = v9 % (unint64_t)__p[1];
          else
            v1 = v9;
        }
        else
        {
          v1 = ((unint64_t)__p[1] - 1) & v9;
        }
      }
      v21 = __p[0];
      v22 = (_QWORD *)*((_QWORD *)__p[0] + v1);
      if (v22)
      {
        *v15 = *v22;
      }
      else
      {
        *v15 = v32[0];
        v32[0] = v15;
        v21[v1] = v32;
        if (!*v15)
        {
LABEL_54:
          ++v32[1];
          goto LABEL_55;
        }
        v23 = *(_QWORD *)(*v15 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v23 >= v10)
            v23 %= v10;
        }
        else
        {
          v23 &= v10 - 1;
        }
        v22 = (char *)__p[0] + 8 * v23;
      }
      *v22 = v15;
      goto LABEL_54;
    }
    while (1)
    {
      v14 = v13[1];
      if (v14 == v9)
        break;
      if (v11.u32[0] > 1uLL)
      {
        if ((void *)v14 >= __p[1])
          v14 %= (unint64_t)__p[1];
      }
      else
      {
        v14 &= (unint64_t)__p[1] - 1;
      }
      if (v14 != v1)
        goto LABEL_31;
LABEL_30:
      v13 = (uint64_t *)*v13;
      if (!v13)
        goto LABEL_31;
    }
    if (*((_DWORD *)v13 + 4) != (_DWORD)v5 || *(uint64_t *)((char *)v13 + 20) != v26)
      goto LABEL_30;
    AMCP::Thing::operator=((AMCP::Thing *)(v13 + 4), (uint64_t)&v34, v8);
LABEL_55:
    if (v36)
      v36(0, &v34, 0, 0);
LABEL_57:
    v3 += 3;
  }
  while (v3 != v4);
LABEL_58:
  AMCP::Core::Conductor::properties_changed_async(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_DWORD *)(a1 + 40), (uint64_t)__p);
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v32[0]);
  v24 = __p[0];
  __p[0] = 0;
  if (v24)
    operator delete(v24);
  return _ZNSt3__110unique_ptrIZZN4AMCP3ASP6Driver25driver_properties_changedEjRKN3gsl4spanI26AudioObjectPropertyAddressLln1EEEENK3__0clINS_6vectorIS6_NS_9allocatorIS6_EEEEEEDaRKT_EUlvE_NS_14default_deleteISK_EEED1B8ne180100Ev(&v27);
}

void sub_1B5AE6AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  _QWORD *v23;
  uint64_t v24;
  void (*v26)(_QWORD, uint64_t, _QWORD, _QWORD);

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Address,AMCP::Thing>,void *>>>::operator()[abi:ne180100](1, v23);
  v26 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v24 - 104);
  if (v26)
    v26(0, v24 - 136, 0, 0);
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table((uint64_t)&a23);
  _ZNSt3__110unique_ptrIZZN4AMCP3ASP6Driver25driver_properties_changedEjRKN3gsl4spanI26AudioObjectPropertyAddressLln1EEEENK3__0clINS_6vectorIS6_NS_9allocatorIS6_EEEEEEDaRKT_EUlvE_NS_14default_deleteISK_EEED1B8ne180100Ev(&a14);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZN4AMCP3ASP6Driver25driver_properties_changedEjRKN3gsl4spanI26AudioObjectPropertyAddressLln1EEEENK3__0clINS_6vectorIS6_NS_9allocatorIS6_EEEEEEDaRKT_EUlvE_NS_14default_deleteISK_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 + 48);
    v3 = *(void **)(v2 + 16);
    if (v3)
    {
      *(_QWORD *)(v2 + 24) = v3;
      operator delete(v3);
    }
    v4 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
    MEMORY[0x1B5E50688](v4, 0x1020C407BC62F60);
  }
  return a1;
}

_QWORD *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E6986010;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E6986010;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E6986010;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E6986010;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::operator()(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  AMCP::ASP::PlugIn_Object *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10[3];
  void *__p;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v7 = (AMCP::ASP::PlugIn_Object *)a1[3];
        v6 = (uint64_t)(a1 + 3);
        AMCP::ASP::PlugIn_Object::update_core(v7);
        AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)v10, v5, v6, (AMCP *)0x61626F78, 0x626F7823u);
        AMCP::ASP::Driver::update_owned_object_kind(v5, v6, 0x61626F78u, (uint64_t)v10);
        if (__p)
          operator delete(__p);
        if (v10[0])
          operator delete(v10[0]);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1B5AE6DC4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP6Driver25driver_properties_changedEjRKN3gsl4spanI26AudioObjectPropertyAddressLln1EEEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::target_type()
{
}

void std::__function::__alloc_func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

_QWORD *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E6985F90;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E6985F90;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E6985F90;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  v8 = a1[5];
  result[5] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

_QWORD *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E6985F90;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  v6 = result[5];
  a2[4] = result[4];
  a2[5] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8[3];
  void *__p;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        AMCP::ASP::PlugIn_Object::update_core(*(AMCP::ASP::PlugIn_Object **)(a1 + 32));
        if (*(_DWORD *)(a1 + 24))
        {
          AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)v8, v5, a1 + 32, (AMCP *)0x61646576, 0x64657623u);
          AMCP::ASP::Driver::update_owned_object_kind(v5, a1 + 32, 0x61646576u, (uint64_t)v8);
          if (__p)
            operator delete(__p);
          if (v8[0])
            operator delete(v8[0]);
        }
        if (*(_DWORD *)(a1 + 28))
        {
          AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)v8, v5, a1 + 32, (AMCP *)0x61636C6B, 0x636C6B23u);
          AMCP::ASP::Driver::update_owned_object_kind(v5, a1 + 32, 0x61636C6Bu, (uint64_t)v8);
          if (__p)
            operator delete(__p);
          if (v8[0])
            operator delete(v8[0]);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1B5AE7148(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP6Driver25driver_properties_changedEjRKN3gsl4spanI26AudioObjectPropertyAddressLln1EEEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::target_type()
{
}

void std::__function::__alloc_func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t AMCP::ASP::Driver::start(AMCP::ASP::Driver *this, const applesauce::CF::URLRef *a2)
{
  _QWORD *v4;
  CFPlugInRef v5;
  AMCP::Log::Scope_Registry *v6;
  const __CFUUID *v7;
  AMCP::Log::Scope_Registry *v8;
  const __CFUUID *v9;
  const __CFUUID *v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, _QWORD, _QWORD, _QWORD *);
  const __CFUUID *v14;
  CFUUIDBytes v15;
  AMCP::Log::Scope_Registry *v16;
  AMCP::Log::Scope_Registry *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *v22;
  AMCP::Log::Scope_Registry *v23;
  std::runtime_error_vtbl *v24;
  const char *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  const char *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *imp;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::runtime_error_vtbl *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  char *what;
  void (__cdecl *v51)(std::runtime_error *__hidden);
  unint64_t *v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  uint8_t *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v68;
  NSObject *v69;
  unint64_t *v70;
  unint64_t v71;
  _opaque_pthread_t *v72;
  mach_port_t v73;
  std::runtime_error *exception;
  int v75;
  uint64_t v76;
  std::runtime_error v77;
  std::__shared_weak_count *v78;
  NSObject *v79;
  unint64_t *v80;
  unint64_t v81;
  _opaque_pthread_t *v82;
  mach_port_t v83;
  std::runtime_error *v84;
  int v85;
  uint64_t v86;
  std::runtime_error v87;
  std::__shared_weak_count *v88;
  NSObject *v89;
  unint64_t *v90;
  unint64_t v91;
  _opaque_pthread_t *v92;
  mach_port_t v93;
  std::runtime_error *v94;
  int v95;
  uint64_t v96;
  std::runtime_error v97;
  std::__shared_weak_count *v98;
  NSObject *v99;
  unint64_t *v100;
  unint64_t v101;
  _opaque_pthread_t *v102;
  mach_port_t v103;
  std::runtime_error *v104;
  int v105;
  uint64_t v106;
  std::runtime_error v107;
  std::__shared_weak_count *v108;
  NSObject *v109;
  unint64_t *v110;
  unint64_t v111;
  _opaque_pthread_t *v112;
  mach_port_t v113;
  std::runtime_error *v114;
  int v115;
  uint64_t v116;
  std::runtime_error v117;
  std::__shared_weak_count *v118;
  NSObject *v119;
  unint64_t *v120;
  unint64_t v121;
  _opaque_pthread_t *v122;
  mach_port_t v123;
  std::runtime_error *v124;
  int v125;
  uint64_t v126;
  std::runtime_error v127;
  NSObject *v128;
  _opaque_pthread_t *v129;
  mach_port_t v130;
  void *v131;
  NSObject *v132;
  _opaque_pthread_t *v133;
  mach_port_t v134;
  void *v135;
  std::runtime_error *v136;
  NSObject *v137;
  _opaque_pthread_t *v138;
  mach_port_t v139;
  void *v140;
  char v141;
  CFTypeRef cf;
  CFArrayRef theArray;
  __int128 v144;
  uint64_t v145;
  uint64_t (**v146)();
  __int128 v147;
  uint64_t v148;
  std::runtime_error v149;
  std::runtime_error v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint8_t buf[8];
  __int128 v157;
  _BYTE v158[24];
  int v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E6985E70;
  v5 = CFPlugInCreate(0, a2);
  v6 = (AMCP::Log::Scope_Registry *)mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::PlugInRef_Traits>::BasicRef(v4 + 3, v5);
  v4[5] = 0;
  v4[4] = this;
  if (!v4[3])
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v68 = (std::__shared_weak_count *)v157;
    v69 = **(NSObject ***)buf;
    if ((_QWORD)v157)
    {
      v70 = (unint64_t *)(v157 + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      v72 = pthread_self();
      v73 = pthread_mach_thread_np(v72);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v73;
      LOWORD(v157) = 2080;
      *(_QWORD *)((char *)&v157 + 2) = "ASP_PlugIn.cpp";
      WORD5(v157) = 1024;
      HIDWORD(v157) = 27;
      *(_WORD *)v158 = 2080;
      *(_QWORD *)&v158[2] = "!m_plugin.is_valid()";
      _os_log_error_impl(&dword_1B57BA000, v69, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No plug-in", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&theArray);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v149, "No plug-in");
    std::runtime_error::runtime_error(&v150, &v149);
    v152 = 0;
    v153 = 0;
    v154 = 0;
    v155 = -1;
    v150.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v151 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v150);
    *(_QWORD *)&v158[8] = "AMCP::ASP::PlugIn::PlugIn(const CF::URL &, Driver &)";
    *(_QWORD *)&v158[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_PlugIn.cpp";
    v159 = 27;
    std::vector<void *>::vector(&v144);
    v75 = backtrace((void **)v144, (*((_QWORD *)&v144 + 1) - (_QWORD)v144) >> 3);
    std::vector<void *>::resize((char **)&v144, v75);
    v147 = v144;
    v148 = v145;
    v144 = 0uLL;
    v145 = 0;
    v146 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v146);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v76 = *(_QWORD *)v158;
    exception[1].__imp_.__imp_ = *(const char **)v158;
    if (v76)
      (*(void (**)(uint64_t))(*(_QWORD *)v76 + 24))(v76);
    v77 = *(std::runtime_error *)&v158[8];
    LODWORD(exception[3].__vftable) = v159;
    exception[2] = v77;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v7 = CFUUIDGetConstantUUIDWithBytes(0, 0x44u, 0x3Au, 0xBAu, 0xB8u, 0xE7u, 0xB3u, 0x49u, 0x1Au, 0xB9u, 0x85u, 0xBEu, 0xB9u, 0x18u, 0x70u, 0x30u, 0xDBu);
  mcp_applesauce::CF::PlugInRef_proxy::find_factories_for_type((applesauce::CF::ArrayRef *)&theArray, (const __CFUUID *)v4[3], v7);
  if (!theArray)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v78 = (std::__shared_weak_count *)v157;
    v79 = **(NSObject ***)buf;
    if ((_QWORD)v157)
    {
      v80 = (unint64_t *)(v157 + 8);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
    {
      v82 = pthread_self();
      v83 = pthread_mach_thread_np(v82);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v83;
      LOWORD(v157) = 2080;
      *(_QWORD *)((char *)&v157 + 2) = "ASP_PlugIn.cpp";
      WORD5(v157) = 1024;
      HIDWORD(v157) = 29;
      *(_WORD *)v158 = 2080;
      *(_QWORD *)&v158[2] = "!factory_array.is_valid()";
      _os_log_error_impl(&dword_1B57BA000, v79, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No factories array", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&cf);
    v84 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v149, "No factories array");
    std::runtime_error::runtime_error(&v150, &v149);
    v152 = 0;
    v153 = 0;
    v154 = 0;
    v155 = -1;
    v150.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v151 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v150);
    *(_QWORD *)&v158[8] = "AMCP::ASP::PlugIn::PlugIn(const CF::URL &, Driver &)";
    *(_QWORD *)&v158[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_PlugIn.cpp";
    v159 = 29;
    std::vector<void *>::vector(&v144);
    v85 = backtrace((void **)v144, (*((_QWORD *)&v144 + 1) - (_QWORD)v144) >> 3);
    std::vector<void *>::resize((char **)&v144, v85);
    v147 = v144;
    v148 = v145;
    v144 = 0uLL;
    v145 = 0;
    v146 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v146);
    v84[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v84, (const std::runtime_error *)buf);
    v84[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v86 = *(_QWORD *)v158;
    v84[1].__imp_.__imp_ = *(const char **)v158;
    if (v86)
      (*(void (**)(uint64_t))(*(_QWORD *)v86 + 24))(v86);
    v87 = *(std::runtime_error *)&v158[8];
    LODWORD(v84[3].__vftable) = v159;
    v84[2] = v87;
    v84->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v84[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v84[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  if (!CFArrayGetCount(theArray))
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v88 = (std::__shared_weak_count *)v157;
    v89 = **(NSObject ***)buf;
    if ((_QWORD)v157)
    {
      v90 = (unint64_t *)(v157 + 8);
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
    {
      v92 = pthread_self();
      v93 = pthread_mach_thread_np(v92);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v93;
      LOWORD(v157) = 2080;
      *(_QWORD *)((char *)&v157 + 2) = "ASP_PlugIn.cpp";
      WORD5(v157) = 1024;
      HIDWORD(v157) = 30;
      *(_WORD *)v158 = 2080;
      *(_QWORD *)&v158[2] = "factory_array->get_size() == 0";
      _os_log_error_impl(&dword_1B57BA000, v89, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No factories", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&cf);
    v94 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v149, "No factories");
    std::runtime_error::runtime_error(&v150, &v149);
    v152 = 0;
    v153 = 0;
    v154 = 0;
    v155 = -1;
    v150.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v151 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v150);
    *(_QWORD *)&v158[8] = "AMCP::ASP::PlugIn::PlugIn(const CF::URL &, Driver &)";
    *(_QWORD *)&v158[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_PlugIn.cpp";
    v159 = 30;
    std::vector<void *>::vector(&v144);
    v95 = backtrace((void **)v144, (*((_QWORD *)&v144 + 1) - (_QWORD)v144) >> 3);
    std::vector<void *>::resize((char **)&v144, v95);
    v147 = v144;
    v148 = v145;
    v144 = 0uLL;
    v145 = 0;
    v146 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v146);
    v94[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v94, (const std::runtime_error *)buf);
    v94[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v96 = *(_QWORD *)v158;
    v94[1].__imp_.__imp_ = *(const char **)v158;
    if (v96)
      (*(void (**)(uint64_t))(*(_QWORD *)v96 + 24))(v96);
    v97 = *(std::runtime_error *)&v158[8];
    LODWORD(v94[3].__vftable) = v159;
    v94[2] = v97;
    v94->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v94[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v94[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  if (!theArray)
  {
    v136 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v136, "Could not construct");
    __cxa_throw(v136, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = (AMCP::Log::Scope_Registry *)applesauce::CF::details::at_to<applesauce::CF::TypeRef>(&cf, theArray, 0);
  v9 = (const __CFUUID *)cf;
  if (!cf)
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v98 = (std::__shared_weak_count *)v157;
    v99 = **(NSObject ***)buf;
    if ((_QWORD)v157)
    {
      v100 = (unint64_t *)(v157 + 8);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
    {
      v102 = pthread_self();
      v103 = pthread_mach_thread_np(v102);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v103;
      LOWORD(v157) = 2080;
      *(_QWORD *)((char *)&v157 + 2) = "ASP_PlugIn.cpp";
      WORD5(v157) = 1024;
      HIDWORD(v157) = 33;
      *(_WORD *)v158 = 2080;
      *(_QWORD *)&v158[2] = "!factory_uuid.is_valid()";
      _os_log_error_impl(&dword_1B57BA000, v99, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Couldn't get the factory uuid", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v141);
    v104 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v149, "Couldn't get the factory uuid");
    std::runtime_error::runtime_error(&v150, &v149);
    v152 = 0;
    v153 = 0;
    v154 = 0;
    v155 = -1;
    v150.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v151 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v150);
    *(_QWORD *)&v158[8] = "AMCP::ASP::PlugIn::PlugIn(const CF::URL &, Driver &)";
    *(_QWORD *)&v158[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_PlugIn.cpp";
    v159 = 33;
    std::vector<void *>::vector(&v144);
    v105 = backtrace((void **)v144, (*((_QWORD *)&v144 + 1) - (_QWORD)v144) >> 3);
    std::vector<void *>::resize((char **)&v144, v105);
    v147 = v144;
    v148 = v145;
    v144 = 0uLL;
    v145 = 0;
    v146 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v146);
    v104[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v104, (const std::runtime_error *)buf);
    v104[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v106 = *(_QWORD *)v158;
    v104[1].__imp_.__imp_ = *(const char **)v158;
    if (v106)
      (*(void (**)(uint64_t))(*(_QWORD *)v106 + 24))(v106);
    v107 = *(std::runtime_error *)&v158[8];
    LODWORD(v104[3].__vftable) = v159;
    v104[2] = v107;
    v104->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v104[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v104[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v10 = CFUUIDGetConstantUUIDWithBytes(0, 0x44u, 0x3Au, 0xBAu, 0xB8u, 0xE7u, 0xB3u, 0x49u, 0x1Au, 0xB9u, 0x85u, 0xBEu, 0xB9u, 0x18u, 0x70u, 0x30u, 0xDBu);
  v11 = CFPlugInInstanceCreate(0, v9, v10);
  v12 = v11;
  if (!v11)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v108 = (std::__shared_weak_count *)v157;
    v109 = **(NSObject ***)buf;
    if ((_QWORD)v157)
    {
      v110 = (unint64_t *)(v157 + 8);
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
    if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
    {
      v112 = pthread_self();
      v113 = pthread_mach_thread_np(v112);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v113;
      LOWORD(v157) = 2080;
      *(_QWORD *)((char *)&v157 + 2) = "ASP_PlugIn.cpp";
      WORD5(v157) = 1024;
      HIDWORD(v157) = 36;
      *(_WORD *)v158 = 2080;
      *(_QWORD *)&v158[2] = "(iunknown_interface) == nullptr";
      _os_log_error_impl(&dword_1B57BA000, v109, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Couldn't get the factory uuid", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v141);
    v114 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v149, "Couldn't get the factory uuid");
    std::runtime_error::runtime_error(&v150, &v149);
    v152 = 0;
    v153 = 0;
    v154 = 0;
    v155 = -1;
    v150.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v151 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v150);
    *(_QWORD *)&v158[8] = "AMCP::ASP::PlugIn::PlugIn(const CF::URL &, Driver &)";
    *(_QWORD *)&v158[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_PlugIn.cpp";
    v159 = 36;
    std::vector<void *>::vector(&v144);
    v115 = backtrace((void **)v144, (*((_QWORD *)&v144 + 1) - (_QWORD)v144) >> 3);
    std::vector<void *>::resize((char **)&v144, v115);
    v147 = v144;
    v148 = v145;
    v144 = 0uLL;
    v145 = 0;
    v146 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v146);
    v114[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v114, (const std::runtime_error *)buf);
    v114[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v116 = *(_QWORD *)v158;
    v114[1].__imp_.__imp_ = *(const char **)v158;
    if (v116)
      (*(void (**)(uint64_t))(*(_QWORD *)v116 + 24))(v116);
    v117 = *(std::runtime_error *)&v158[8];
    LODWORD(v114[3].__vftable) = v159;
    v114[2] = v117;
    v114->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v114[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v114[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v13 = *(uint64_t (**)(void *, _QWORD, _QWORD, _QWORD *))(*(_QWORD *)v11 + 8);
  v14 = CFUUIDGetConstantUUIDWithBytes(0, 0xEEu, 0xA5u, 0x77u, 0x3Du, 0xCCu, 0x43u, 0x49u, 0xF1u, 0x8Eu, 0, 0x8Fu, 0x96u, 0xE7u, 0xD2u, 0x3Bu, 0x17u);
  v15 = CFUUIDGetUUIDBytes(v14);
  v16 = (AMCP::Log::Scope_Registry *)v13(v12, *(_QWORD *)&v15.byte0, *(_QWORD *)&v15.byte8, v4 + 5);
  if (!v4[5])
  {
    AMCP::Log::Scope_Registry::get(v16);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v118 = (std::__shared_weak_count *)v157;
    v119 = **(NSObject ***)buf;
    if ((_QWORD)v157)
    {
      v120 = (unint64_t *)(v157 + 8);
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
    {
      v122 = pthread_self();
      v123 = pthread_mach_thread_np(v122);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v123;
      LOWORD(v157) = 2080;
      *(_QWORD *)((char *)&v157 + 2) = "ASP_PlugIn.cpp";
      WORD5(v157) = 1024;
      HIDWORD(v157) = 40;
      *(_WORD *)v158 = 2080;
      *(_QWORD *)&v158[2] = "(m_interface) == nullptr";
      _os_log_error_impl(&dword_1B57BA000, v119, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Couldn't find the interface", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v141);
    v124 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v149, "Couldn't find the interface");
    std::runtime_error::runtime_error(&v150, &v149);
    v152 = 0;
    v153 = 0;
    v154 = 0;
    v155 = -1;
    v150.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v151 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v150);
    *(_QWORD *)&v158[8] = "AMCP::ASP::PlugIn::PlugIn(const CF::URL &, Driver &)";
    *(_QWORD *)&v158[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_PlugIn.cpp";
    v159 = 40;
    std::vector<void *>::vector(&v144);
    v125 = backtrace((void **)v144, (*((_QWORD *)&v144 + 1) - (_QWORD)v144) >> 3);
    std::vector<void *>::resize((char **)&v144, v125);
    v147 = v144;
    v148 = v145;
    v144 = 0uLL;
    v145 = 0;
    v146 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v146);
    v124[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v124, (const std::runtime_error *)buf);
    v124[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v126 = *(_QWORD *)v158;
    v124[1].__imp_.__imp_ = *(const char **)v158;
    if (v126)
      (*(void (**)(uint64_t))(*(_QWORD *)v126 + 24))(v126);
    v127 = *(std::runtime_error *)&v158[8];
    LODWORD(v124[3].__vftable) = v159;
    v124[2] = v127;
    v124->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v124[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v124[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  (*(void (**)(void *))(*(_QWORD *)v12 + 24))(v12);
  CFRelease(v9);
  v17 = theArray;
  if (theArray)
    CFRelease(theArray);
  *(_QWORD *)&v18 = v4 + 3;
  *((_QWORD *)&v18 + 1) = v4;
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  *((_OWORD *)this + 3) = v18;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (_QWORD *)*((_QWORD *)this + 6);
  if (!v22)
  {
    AMCP::Log::Scope_Registry::get(v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v128 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
    {
      v129 = pthread_self();
      v130 = pthread_mach_thread_np(v129);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v130;
      LOWORD(v157) = 2080;
      *(_QWORD *)((char *)&v157 + 2) = "ASP_Driver.cpp";
      WORD5(v157) = 1024;
      HIDWORD(v157) = 104;
      *(_WORD *)v158 = 2080;
      *(_QWORD *)&v158[2] = "(m_plugin_ptr.operator BOOL()) == false";
      _os_log_error_impl(&dword_1B57BA000, v128, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s couldn't create the plug-in", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&theArray);
    v131 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v149, "couldn't create the plug-in");
    std::runtime_error::runtime_error(&v150, &v149);
    v152 = 0;
    v153 = 0;
    v154 = 0;
    v155 = -1;
    v150.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v151 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v150);
    *(_QWORD *)&v158[8] = "void AMCP::ASP::Driver::start(const CF::URL &)";
    *(_QWORD *)&v158[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Driver.cpp";
    v159 = 104;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v144);
    v147 = v144;
    v148 = v145;
    v144 = 0uLL;
    v145 = 0;
    v146 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v146);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v131, (uint64_t)buf);
  }
  if (!*v22 || (v17 = (AMCP::Log::Scope_Registry *)v22[2]) == 0)
  {
    AMCP::Log::Scope_Registry::get(v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v132 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
    {
      v133 = pthread_self();
      v134 = pthread_mach_thread_np(v133);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v134;
      LOWORD(v157) = 2080;
      *(_QWORD *)((char *)&v157 + 2) = "ASP_Driver.cpp";
      WORD5(v157) = 1024;
      HIDWORD(v157) = 105;
      *(_WORD *)v158 = 2080;
      *(_QWORD *)&v158[2] = "(m_plugin_ptr->is_valid()) == false";
      _os_log_error_impl(&dword_1B57BA000, v132, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s couldn't open the plug-in", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&theArray);
    v135 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v149, "couldn't open the plug-in");
    std::runtime_error::runtime_error(&v150, &v149);
    v152 = 0;
    v153 = 0;
    v154 = 0;
    v155 = -1;
    v150.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v151 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v150);
    *(_QWORD *)&v158[8] = "void AMCP::ASP::Driver::start(const CF::URL &)";
    *(_QWORD *)&v158[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Driver.cpp";
    v159 = 105;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v144);
    v147 = v144;
    v148 = v145;
    v144 = 0uLL;
    v145 = 0;
    v146 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v146);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v135, (uint64_t)buf);
  }
  v23 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *, _QWORD))(*(_QWORD *)v17 + 32))(v17, *((_QWORD *)this + 32));
  if ((_DWORD)v23)
  {
    AMCP::Log::Scope_Registry::get(v23);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v137 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
    {
      v138 = pthread_self();
      v139 = pthread_mach_thread_np(v138);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v139;
      LOWORD(v157) = 2080;
      *(_QWORD *)((char *)&v157 + 2) = "ASP_Driver.cpp";
      WORD5(v157) = 1024;
      HIDWORD(v157) = 108;
      *(_WORD *)v158 = 2080;
      *(_QWORD *)&v158[2] = "(initialize_error) != 0";
      _os_log_error_impl(&dword_1B57BA000, v137, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s couldn't initialize the plug-in", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&theArray);
    v140 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v149, "couldn't initialize the plug-in");
    std::runtime_error::runtime_error(&v150, &v149);
    v152 = 0;
    v153 = 0;
    v154 = 0;
    v155 = -1;
    v150.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v151 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v150);
    *(_QWORD *)&v158[8] = "void AMCP::ASP::Driver::start(const CF::URL &)";
    *(_QWORD *)&v158[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Driver.cpp";
    v159 = 108;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v144);
    v147 = v144;
    v148 = v145;
    v144 = 0uLL;
    v145 = 0;
    v146 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v146);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v140, (uint64_t)buf);
  }
  v146 = (uint64_t (**)())((char *)this + 88);
  LOBYTE(v147) = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)((char *)this + 88));
  v24 = (std::runtime_error_vtbl *)*((_QWORD *)this + 4);
  v25 = (const char *)*((_QWORD *)this + 5);
  v149.__vftable = v24;
  v149.__imp_.__imp_ = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = operator new(0x1A0uLL);
  v29 = v28;
  v28[1] = 0;
  v28[2] = 0;
  *v28 = &off_1E6985EC0;
  v30 = v28 + 3;
  *(_QWORD *)buf = v24;
  *(_QWORD *)&v157 = v25;
  v149.__vftable = 0;
  v149.__imp_.__imp_ = 0;
  v31 = (const char *)*((_QWORD *)this + 7);
  v150.__vftable = (std::runtime_error_vtbl *)*((_QWORD *)this + 6);
  v150.__imp_.__imp_ = v31;
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  AMCP::ASP::PlugIn_Object::PlugIn_Object((uint64_t)(v28 + 3), (__int128 *)buf, (uint64_t)&v150, 1, 0, 1, 1634757735);
  imp = (std::__shared_weak_count *)v150.__imp_.__imp_;
  if (v150.__imp_.__imp_)
  {
    v35 = (unint64_t *)(v150.__imp_.__imp_ + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
  }
  v37 = (std::__shared_weak_count *)v157;
  if ((_QWORD)v157)
  {
    v38 = (unint64_t *)(v157 + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  *(_DWORD *)buf = 1;
  *(_QWORD *)&v157 = v30;
  *((_QWORD *)&v157 + 1) = v29;
  v144 = 0uLL;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>::insert_unique((uint64_t)&v150, (char *)this + 64, (uint64_t)buf);
  v40 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
  if (*((_QWORD *)&v157 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v150.__vftable;
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  if (*((_QWORD *)&v144 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)v149.__imp_.__imp_;
  if (v149.__imp_.__imp_)
  {
    v48 = (unint64_t *)(v149.__imp_.__imp_ + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v51 = v43->~runtime_error_0;
  what = (char *)v43->what;
  v150.__vftable = (std::runtime_error_vtbl *)v51;
  v150.__imp_.__imp_ = what;
  if (what)
  {
    v52 = (unint64_t *)(what + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  AMCP::ASP::PlugIn_Object::build_core((AMCP::ASP::PlugIn_Object *)v51);
  v54 = *((_DWORD *)v51 + 15);
  *((_DWORD *)this + 70) = v54;
  v55 = *(_QWORD *)(*((_QWORD *)this + 4) + 32);
  v57 = *((_QWORD *)this + 1);
  v56 = *((_QWORD *)this + 2);
  if (v56)
  {
    v58 = (unint64_t *)(v56 + 16);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  if (what)
  {
    v60 = (unint64_t *)(what + 8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  *(_QWORD *)v158 = 0;
  v62 = operator new(0x28uLL);
  *v62 = &off_1E6985F10;
  v62[1] = v57;
  v62[2] = v56;
  v62[3] = v51;
  v62[4] = what;
  *(_QWORD *)v158 = v62;
  AMCP::Core::Conductor::enqueue_config_change(v55, v54, v54, 1, (uint64_t)buf);
  v63 = *(uint8_t **)v158;
  if (*(uint8_t **)v158 == buf)
  {
    v64 = 4;
    v63 = buf;
    goto LABEL_63;
  }
  if (*(_QWORD *)v158)
  {
    v64 = 5;
LABEL_63:
    (*(void (**)(void))(*(_QWORD *)v63 + 8 * v64))();
  }
  if (what)
  {
    v65 = (unint64_t *)(what + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      (*(void (**)(char *))(*(_QWORD *)what + 16))(what);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)what);
    }
  }
  return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v146);
}

void sub_1B5AE8B84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,std::runtime_error a32,std::runtime_error a33,void *a34,uint64_t a35)
{
  uint64_t v35;
  std::runtime_error *v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  const void *v40;

  std::runtime_error::~runtime_error(v36);
  if (__p)
    operator delete(__p);
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  *(_QWORD *)(v37 - 144) = &unk_1E69A2000;
  v38 = *(_QWORD *)(v37 - 136);
  if (v38 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38))
    *(_QWORD *)(v37 - 136) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v37 - 160));
  a34 = &unk_1E69A2000;
  if (a35 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a35 + 32))(a35))
    a35 = 0;
  std::runtime_error::~runtime_error(&a33);
  std::runtime_error::~runtime_error(&a32);
  __cxa_free_exception(v36);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a19);
  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
  if (v39)
    CFRelease(v39);
  if (v40)
    CFRelease(v40);
  JUMPOUT(0x1B5AE9274);
}

void sub_1B5AE91D4()
{
  JUMPOUT(0x1B5AE91DCLL);
}

void sub_1B5AE91F0()
{
  JUMPOUT(0x1B5AE91F8);
}

void sub_1B5AE9240()
{
  const void *v0;

  if (v0)
    CFRelease(v0);
  JUMPOUT(0x1B5AE9260);
}

void sub_1B5AE9258()
{
  const void *v0;

  if (v0)
    CFRelease(v0);
  JUMPOUT(0x1B5AE9274);
}

void sub_1B5AE9270(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  CFTypeRef *v2;
  void *v4;

  if (*v2)
    CFRelease(*v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_1B5AE9298(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *std::__function::__func<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0,std::allocator<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E6985F10;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0,std::allocator<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E6985F10;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0,std::allocator<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E6985F10;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *std::__function::__func<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0,std::allocator<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0>,void ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E6985F10;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void std::__function::__func<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0,std::allocator<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0,std::allocator<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0,std::allocator<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        AMCP::ASP::Driver::update_owned_objects(v5, a1 + 24);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

uint64_t std::__function::__func<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0,std::allocator<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP6Driver5startERKN10applesauce2CF6URLRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0,std::allocator<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0>,void ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<AMCP::ASP::PlugIn>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6985E70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::ASP::PlugIn>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6985E70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::ASP::PlugIn>::__on_zero_shared(uint64_t a1)
{
  CFTypeRef *v1;
  uint64_t v2;

  v1 = (CFTypeRef *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (*v1)
    CFRelease(*v1);
}

void sub_1B5AE95A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Release");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5AE9584);
}

uint64_t AMCP::ASP::Driver::get_core_id_for_driver_id(AMCP::ASP::Driver *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  char *v8;
  char v9;
  unsigned int v10;
  uint64_t v11;

  v10 = a2;
  v8 = (char *)this + 88;
  v9 = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 88));
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>::find(&v11, (uint64_t *)this + 8, &v10);
  v3 = *((_QWORD *)this + 8);
  v4 = *((_QWORD *)this + 9);
  if (v3)
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (v11 == v3 + 24 * v4)
    v6 = 0;
  else
    v6 = *(unsigned int *)(*(_QWORD *)(v11 + 8) + 60);
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v8);
  return v6;
}

void ca::mach::error_category::~error_category(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x1B5E50688);
}

const char *ca::mach::error_category::name(ca::mach::error_category *this)
{
  return "Mach";
}

_QWORD *ca::mach::error_category::message@<X0>(mach_error_t error_value@<W1>, _QWORD *a2@<X8>)
{
  char *v4;

  v4 = mach_error_string(error_value);
  return std::string::basic_string[abi:ne180100]<0>(a2, v4);
}

uint64_t ca::mach::semaphore::wait(ca::mach::semaphore *this)
{
  const char *v2;

  do
    v2 = (const char *)MEMORY[0x1B5E51288](*(unsigned int *)this);
  while ((_DWORD)v2 == 14);
  return ca::mach::throw_if_mach_error((uint64_t)"semaphore_wait failed", v2);
}

void AMCP::ASP::PlugIn_Object::~PlugIn_Object(AMCP::ASP::PlugIn_Object *this)
{
  AMCP::ASP::PlugIn_Object::~PlugIn_Object(this);
  JUMPOUT(0x1B5E50688);
}

{
  AMCP::Log::Scope_Registry *is_base_of;
  AMCP::Log::Scope_Registry *v3;
  int v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *v7;
  unint64_t v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  int16x8_t *v11;
  int v12;
  int v13;
  NSObject *v14;
  os_log_type_t v15;
  std::__shared_weak_count *v16;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  int16x8_t *p_p;
  int v23;
  int v24;
  std::__shared_weak_count *v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  _opaque_pthread_t *v32;
  mach_port_t v33;
  int16x8_t *v34;
  int v35;
  int v36;
  int16x8_t __p;
  char v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint8_t buf[8];
  _BYTE v42[10];
  __int16 v43;
  int v44;
  __int16 v45;
  int16x8_t *v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E6986190;
  is_base_of = (AMCP::Log::Scope_Registry *)AMCP::is_base_of((AMCP *)0x61636C6B, *((_DWORD *)this + 17));
  if (!(_DWORD)is_base_of)
    goto LABEL_39;
  AMCP::Log::Scope_Registry::get(is_base_of);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v39, "com.apple.coreaudio", "AMCP");
  v4 = *(_DWORD *)(v39 + 16);
  switch(v4)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v16 = *(std::__shared_weak_count **)v42;
      v17 = **(NSObject ***)buf;
      if (*(_QWORD *)v42)
      {
        v18 = (unint64_t *)(*(_QWORD *)v42 + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        goto LABEL_34;
      v20 = pthread_self();
      v21 = pthread_mach_thread_np(v20);
      AMCP::make_string_for_class_id((AMCP *)*((unsigned int *)this + 16), &__p);
      if (v38 >= 0)
        p_p = &__p;
      else
        p_p = (int16x8_t *)__p.i64[0];
      v23 = *((_DWORD *)this + 15);
      v24 = *((_DWORD *)this + 11);
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v21;
      *(_WORD *)v42 = 2080;
      *(_QWORD *)&v42[2] = "ASP_Object.cpp";
      v43 = 1024;
      v44 = 1421;
      v45 = 2080;
      v46 = p_p;
      v47 = 1024;
      v48 = v23;
      v49 = 1024;
      v50 = v24;
      v14 = v17;
      v15 = OS_LOG_TYPE_INFO;
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v25 = *(std::__shared_weak_count **)v42;
      v26 = **(NSObject ***)buf;
      if (*(_QWORD *)v42)
      {
        v27 = (unint64_t *)(*(_QWORD *)v42 + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        goto LABEL_34;
      v32 = pthread_self();
      v33 = pthread_mach_thread_np(v32);
      AMCP::make_string_for_class_id((AMCP *)*((unsigned int *)this + 16), &__p);
      if (v38 >= 0)
        v34 = &__p;
      else
        v34 = (int16x8_t *)__p.i64[0];
      v35 = *((_DWORD *)this + 15);
      v36 = *((_DWORD *)this + 11);
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v33;
      *(_WORD *)v42 = 2080;
      *(_QWORD *)&v42[2] = "ASP_Object.cpp";
      v43 = 1024;
      v44 = 1421;
      v45 = 2080;
      v46 = v34;
      v47 = 1024;
      v48 = v35;
      v49 = 1024;
      v50 = v36;
      _os_log_debug_impl(&dword_1B57BA000, v26, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tearing down %s with object id %u driver id: %u", buf, 0x2Eu);
      goto LABEL_26;
    case 1:
      AMCP::Log::Scope_Registry::get(v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v5 = *(std::__shared_weak_count **)v42;
      v6 = **(NSObject ***)buf;
      if (*(_QWORD *)v42)
      {
        v7 = (unint64_t *)(*(_QWORD *)v42 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      AMCP::make_string_for_class_id((AMCP *)*((unsigned int *)this + 16), &__p);
      if (v38 >= 0)
        v11 = &__p;
      else
        v11 = (int16x8_t *)__p.i64[0];
      v12 = *((_DWORD *)this + 15);
      v13 = *((_DWORD *)this + 11);
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v10;
      *(_WORD *)v42 = 2080;
      *(_QWORD *)&v42[2] = "ASP_Object.cpp";
      v43 = 1024;
      v44 = 1421;
      v45 = 2080;
      v46 = v11;
      v47 = 1024;
      v48 = v12;
      v49 = 1024;
      v50 = v13;
      v14 = v6;
      v15 = OS_LOG_TYPE_DEFAULT;
      break;
    default:
      goto LABEL_34;
  }
  _os_log_impl(&dword_1B57BA000, v14, v15, "%6u %32s:%-5d Tearing down %s with object id %u driver id: %u", buf, 0x2Eu);
LABEL_26:
  if (v38 < 0)
    operator delete((void *)__p.i64[0]);
LABEL_34:
  v29 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
LABEL_39:
  AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 16), *((_DWORD *)this + 15));
  *((_DWORD *)this + 15) = 0;
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::ASP::PlugIn_Object *)((char *)this + 72));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  *(_QWORD *)this = &off_1E697FC58;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

void sub_1B5AE9BC0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::HAL::is_stock_hal_class(AMCP::HAL *this)
{
  int v1;
  uint64_t result;
  int v3;

  v1 = (int)this;
  result = 1;
  if (v1 <= 1751740517)
  {
    if (v1 > 1651273578)
    {
      if (v1 > 1685287522)
      {
        if (v1 > 1701734253)
        {
          if (v1 != 1701734254 && v1 != 1702259059)
          {
            v3 = 1718432370;
            goto LABEL_66;
          }
        }
        else if (v1 != 1685287523 && v1 != 1701078390)
        {
          v3 = 1701733488;
          goto LABEL_66;
        }
      }
      else if (v1 > 1668050547)
      {
        if (v1 != 1668050548 && v1 != 1684370292)
        {
          v3 = 1684895092;
          goto LABEL_66;
        }
      }
      else if (v1 != 1651273579 && v1 != 1668047723)
      {
        v3 = 1668049264;
        goto LABEL_66;
      }
    }
    else if (v1 > 1634757734)
    {
      if (v1 > 1634957682)
      {
        if (v1 != 1634957683 && v1 != 1635017576)
        {
          v3 = 1650602615;
          goto LABEL_66;
        }
      }
      else if (v1 != 1634757735 && v1 != 1634956402)
      {
        v3 = 1634956642;
        goto LABEL_66;
      }
    }
    else if (v1 > 1633907819)
    {
      if (v1 != 1633907820 && v1 != 1633969526)
      {
        v3 = 1634689642;
        goto LABEL_66;
      }
    }
    else if (v1 != 1633773415 && v1 != 1633841016)
    {
      v3 = 1633905771;
      goto LABEL_66;
    }
    return result;
  }
  if (v1 <= 1936028001)
  {
    if (v1 > 1836414052)
    {
      if (v1 <= 1885893480)
      {
        if (v1 != 1836414053 && v1 != 1852601964)
        {
          v3 = 1885888878;
          goto LABEL_66;
        }
        return result;
      }
      if (v1 == 1885893481 || v1 == 1886544237)
        return result;
      v3 = 1919182198;
    }
    else
    {
      if (v1 <= 1815241313)
      {
        if (v1 != 1751740518 && v1 != 1768907636)
        {
          v3 = 1784767339;
          goto LABEL_66;
        }
        return result;
      }
      if (v1 == 1815241314 || v1 == 1818588780)
        return result;
      v3 = 1819504226;
    }
LABEL_66:
    if (v1 != v3)
      return 0;
    return result;
  }
  if (v1 <= 1937072748)
  {
    if (v1 <= 1936483441)
    {
      if (v1 != 1936028002 && v1 != 1936028007)
      {
        v3 = 1936483188;
        goto LABEL_66;
      }
      return result;
    }
    if (v1 == 1936483442 || v1 == 1936682095)
      return result;
    v3 = 1936744814;
    goto LABEL_66;
  }
  if (v1 > 1953458027)
  {
    if (v1 > 1986817380)
    {
      if (v1 == 1986817381)
        return result;
      v3 = 1999790690;
    }
    else
    {
      if (v1 == 1953458028)
        return result;
      v3 = 1953656941;
    }
    goto LABEL_66;
  }
  if (v1 != 1937072749 && v1 != 1937072758)
  {
    v3 = 1952541794;
    goto LABEL_66;
  }
  return result;
}

uint64_t AMCP::ASP::PlugIn_Object::PlugIn_Object(uint64_t a1, __int128 *a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  __int128 v10;
  AMCP::ASP::PlugIn **v11;
  NSObject **v12;
  AMCP::ASP::PlugIn *v13;
  AMCP::Log::Scope_Registry *PropertyData;
  AMCP::ASP::PlugIn *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  AMCP::Log::Scope_Registry *is_stock_hal_class;
  uint64_t v20;
  unsigned int v21;
  int v22;
  std::__shared_weak_count *v23;
  NSObject *v24;
  unint64_t *v25;
  unint64_t v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  unsigned int v29;
  int8x8_t v30;
  int8x8_t v31;
  int32x4_t v32;
  int32x4_t v33;
  uint32x4_t v34;
  int16x8_t v35;
  std::runtime_error *v36;
  int v37;
  uint64_t v38;
  std::runtime_error v39;
  int v40;
  int v41;
  const char *v42;
  NSObject *v43;
  NSObject **v44;
  std::__shared_weak_count *v46;
  NSObject *v47;
  unint64_t *v48;
  unint64_t v49;
  _opaque_pthread_t *v50;
  mach_port_t v51;
  std::runtime_error *v52;
  int v53;
  uint64_t v54;
  std::runtime_error v55;
  std::__shared_weak_count *v56;
  NSObject *v57;
  unint64_t *v58;
  unint64_t v59;
  _opaque_pthread_t *v60;
  mach_port_t v61;
  std::runtime_error *exception;
  int v63;
  uint64_t v64;
  std::runtime_error v65;
  std::__shared_weak_count *v66;
  NSObject *v67;
  unint64_t *v68;
  unint64_t v69;
  _opaque_pthread_t *v70;
  mach_port_t v71;
  unsigned int v72;
  int8x8_t v73;
  int8x8_t v74;
  int32x4_t v75;
  int32x4_t v76;
  uint32x4_t v77;
  int16x8_t v78;
  std::runtime_error *v79;
  int v80;
  uint64_t v81;
  std::runtime_error v82;
  std::__shared_weak_count *v83;
  NSObject *v84;
  unint64_t *v85;
  unint64_t v86;
  _opaque_pthread_t *v87;
  mach_port_t v88;
  __int128 v89;
  uint64_t v90;
  void *__p;
  __int128 v92;
  uint64_t v93;
  std::runtime_error v94;
  std::runtime_error v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  char v101;
  _BYTE buf[24];
  _BYTE v103[32];
  char v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v10 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)(a1 + 8) = v10;
  *(_QWORD *)a1 = &off_1E6986190;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a3;
  v11 = (AMCP::ASP::PlugIn **)(a1 + 24);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 44) = a6;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = a4;
  v12 = (NSObject **)(a1 + 72);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 90) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 850045863;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 850045863;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 312) = 850045863;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 384) = dispatch_semaphore_create(0);
  v13 = *v11;
  strcpy(buf, "salcbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  LODWORD(v95.__vftable) = 0;
  PropertyData = (AMCP::Log::Scope_Registry *)AMCP::ASP::PlugIn::ObjectGetPropertyData(v13, a6, 0, (const AudioObjectPropertyAddress *)buf, 0, 0, 4, &v95);
  *(_DWORD *)(a1 + 48) = v95.__vftable;
  if ((_DWORD)PropertyData)
  {
    AMCP::Log::Scope_Registry::get(PropertyData);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v56 = *(std::__shared_weak_count **)&buf[8];
    v57 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v58 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      v60 = pthread_self();
      v61 = pthread_mach_thread_np(v60);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v61;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "ASP_Object.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1249;
      *(_WORD *)v103 = 2080;
      *(_QWORD *)&v103[2] = "error != 0";
      _os_log_error_impl(&dword_1B57BA000, v57, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s all driver objects are supposed to have a class", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v101);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v94, "all driver objects are supposed to have a class");
    std::runtime_error::runtime_error(&v95, &v94);
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = -1;
    v95.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v96 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v95);
    *(_QWORD *)&v103[8] = "AMCP::ASP::PlugIn_Object::PlugIn_Object(Core::System_Core_Ptr, PlugIn_Ptr, Object_ID, AudioObj"
                          "ectID, AudioObjectID, AudioClassID)";
    *(_QWORD *)&v103[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Object.cpp";
    *(_DWORD *)&v103[24] = 1249;
    std::vector<void *>::vector(&v89);
    v63 = backtrace((void **)v89, (*((_QWORD *)&v89 + 1) - (_QWORD)v89) >> 3);
    std::vector<void *>::resize((char **)&v89, v63);
    __p = off_1E69A20A0;
    v92 = v89;
    v93 = v90;
    v89 = 0uLL;
    v90 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&__p);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v64 = *(_QWORD *)v103;
    exception[1].__imp_.__imp_ = *(const char **)v103;
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64);
    v65 = *(std::runtime_error *)&v103[8];
    LODWORD(exception[3].__vftable) = *(_DWORD *)&v103[24];
    exception[2] = v65;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v15 = *(AMCP::ASP::PlugIn **)(a1 + 24);
  strcpy(buf, "slcbbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  LODWORD(v95.__vftable) = 0;
  v16 = AMCP::ASP::PlugIn::ObjectGetPropertyData(v15, a6, 0, (const AudioObjectPropertyAddress *)buf, 0, 0, 4, &v95);
  LODWORD(v17) = v95.__vftable;
  *(_DWORD *)(a1 + 52) = v95.__vftable;
  v18 = *(unsigned int *)(a1 + 48);
  if (v16)
  {
    is_stock_hal_class = (AMCP::Log::Scope_Registry *)AMCP::HAL::is_stock_hal_class((AMCP::HAL *)*(unsigned int *)(a1 + 48));
    if (!(_DWORD)is_stock_hal_class)
    {
      AMCP::Log::Scope_Registry::get(is_stock_hal_class);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v46 = *(std::__shared_weak_count **)&buf[8];
      v47 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v48 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        v50 = pthread_self();
        v51 = pthread_mach_thread_np(v50);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v51;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "ASP_Object.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 1256;
        *(_WORD *)v103 = 2080;
        *(_QWORD *)&v103[2] = "error != 0";
        _os_log_error_impl(&dword_1B57BA000, v47, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s all driver objects are supposed to have a base class", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v101);
      v52 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v94, "all driver objects are supposed to have a base class");
      std::runtime_error::runtime_error(&v95, &v94);
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = -1;
      v95.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v96 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v95);
      *(_QWORD *)&v103[8] = "AMCP::ASP::PlugIn_Object::PlugIn_Object(Core::System_Core_Ptr, PlugIn_Ptr, Object_ID, AudioO"
                            "bjectID, AudioObjectID, AudioClassID)";
      *(_QWORD *)&v103[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Object.cpp";
      *(_DWORD *)&v103[24] = 1256;
      std::vector<void *>::vector(&v89);
      v53 = backtrace((void **)v89, (*((_QWORD *)&v89 + 1) - (_QWORD)v89) >> 3);
      std::vector<void *>::resize((char **)&v89, v53);
      __p = off_1E69A20A0;
      v92 = v89;
      v93 = v90;
      v89 = 0uLL;
      v90 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&__p);
      v52[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::runtime_error::runtime_error(v52, (const std::runtime_error *)buf);
      v52[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
      v54 = *(_QWORD *)v103;
      v52[1].__imp_.__imp_ = *(const char **)v103;
      if (v54)
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54);
      v55 = *(std::runtime_error *)&v103[8];
      LODWORD(v52[3].__vftable) = *(_DWORD *)&v103[24];
      v52[2] = v55;
      v52->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
      v52[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
      v52[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
    }
    *(_DWORD *)(a1 + 52) = v18;
    LODWORD(v17) = v18;
  }
  if ((_DWORD)v18 == 1634689642)
  {
    v18 = 1634689642;
    if ((_DWORD)v17 != 1634689642)
      goto LABEL_11;
    *(_DWORD *)(a1 + 48) = a7;
    *(_DWORD *)(a1 + 52) = a7;
    LODWORD(v17) = a7;
    v18 = a7;
  }
  if ((_DWORD)a7 == 1633905771 && (_DWORD)v18 == 1633969526)
  {
    *(_DWORD *)(a1 + 48) = 1633905771;
    v18 = 1633905771;
  }
LABEL_11:
  if (AMCP::HAL::is_stock_hal_class((AMCP::HAL *)v18))
    v17 = v18;
  else
    v17 = v17;
  v20 = AMCP::HAL::is_stock_hal_class((AMCP::HAL *)v17);
  if ((v20 & 1) == 0)
  {
    *(_QWORD *)(a1 + 64) = 0;
    goto LABEL_52;
  }
  v21 = 0;
  if ((int)v17 <= 1815241313)
  {
    if ((int)v17 > 1668047722)
    {
      if ((int)v17 <= 1685287522)
      {
        if ((int)v17 > 1684370291)
        {
          if ((_DWORD)v17 == 1684370292)
            goto LABEL_82;
          v22 = 1684895092;
        }
        else
        {
          if ((_DWORD)v17 == 1668047723)
            goto LABEL_82;
          v22 = 1668049264;
        }
      }
      else if ((int)v17 <= 1718432369)
      {
        if ((_DWORD)v17 == 1685287523)
          goto LABEL_82;
        v22 = 1702259059;
      }
      else
      {
        if ((_DWORD)v17 == 1718432370 || (_DWORD)v17 == 1751740518)
          goto LABEL_82;
        v22 = 1784767339;
      }
    }
    else if ((int)v17 <= 1634689641)
    {
      if ((int)v17 > 1633907819)
      {
        if ((_DWORD)v17 == 1633907820)
          goto LABEL_82;
        v22 = 1633969526;
      }
      else
      {
        if ((_DWORD)v17 == 1633841016)
          goto LABEL_82;
        v22 = 1633905771;
      }
    }
    else if ((int)v17 <= 1634956401)
    {
      if ((_DWORD)v17 == 1634689642)
        goto LABEL_82;
      v22 = 1634757735;
    }
    else
    {
      if ((_DWORD)v17 == 1634956402 || (_DWORD)v17 == 1650602615)
        goto LABEL_82;
      v22 = 1651273579;
    }
    goto LABEL_81;
  }
  if ((int)v17 <= 1936483187)
  {
    if ((int)v17 <= 1852601963)
    {
      if ((int)v17 > 1819504225)
      {
        if ((_DWORD)v17 == 1819504226)
          goto LABEL_82;
        v22 = 1836414053;
      }
      else
      {
        if ((_DWORD)v17 == 1815241314)
          goto LABEL_82;
        v22 = 1818588780;
      }
    }
    else if ((int)v17 <= 1885893480)
    {
      if ((_DWORD)v17 == 1852601964)
        goto LABEL_82;
      v22 = 1885888878;
    }
    else
    {
      if ((_DWORD)v17 == 1885893481 || (_DWORD)v17 == 1936028002)
        goto LABEL_82;
      v22 = 1936028007;
    }
LABEL_81:
    if ((_DWORD)v17 != v22)
      goto LABEL_83;
    goto LABEL_82;
  }
  if ((int)v17 > 1937072757)
  {
    if ((int)v17 <= 1953458027)
    {
      if ((_DWORD)v17 == 1937072758)
        goto LABEL_82;
      v22 = 1952541794;
    }
    else
    {
      if ((_DWORD)v17 == 1953458028 || (_DWORD)v17 == 1999790690)
        goto LABEL_82;
      v22 = 1986817381;
    }
    goto LABEL_81;
  }
  if ((int)v17 <= 1936682094)
  {
    if ((_DWORD)v17 == 1936483188)
      goto LABEL_82;
    v22 = 1936483442;
    goto LABEL_81;
  }
  if ((_DWORD)v17 != 1936682095 && (_DWORD)v17 != 1936744814)
  {
    v22 = 1937072749;
    goto LABEL_81;
  }
LABEL_82:
  v21 = v17;
LABEL_83:
  AMCP::get_class_traits((AMCP *)buf, v18);
  v40 = buf[8];
  if (v104 < 0)
    operator delete(*(void **)&v103[24]);
  v20 = *(_QWORD *)&buf[16];
  if (*(_QWORD *)&buf[16])
  {
    *(_QWORD *)v103 = *(_QWORD *)&buf[16];
    operator delete(*(void **)&buf[16]);
  }
  if (v40)
    v41 = v21;
  else
    v41 = v18;
  *(_DWORD *)(a1 + 64) = v41;
  *(_DWORD *)(a1 + 68) = v21;
  if (!v41)
  {
LABEL_52:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v20);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v23 = *(std::__shared_weak_count **)&buf[8];
    v24 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v25 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v27 = pthread_self();
      v28 = pthread_mach_thread_np(v27);
      v29 = *(_DWORD *)(a1 + 52);
      v30.i32[0] = bswap32(*(_DWORD *)(a1 + 48));
      v31 = vzip1_s8(v30, v30);
      v32.i64[0] = 0x1F0000001FLL;
      v32.i64[1] = 0x1F0000001FLL;
      v33.i64[0] = 0x1F0000001FLL;
      v33.i64[1] = 0x1F0000001FLL;
      v34.i64[0] = 0x5F0000005FLL;
      v34.i64[1] = 0x5F0000005FLL;
      *(int8x8_t *)v35.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v34, (uint32x4_t)vsraq_n_s32(v33, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v31), 0x18uLL), 0x18uLL))), v31, (int8x8_t)0x2E002E002E002ELL);
      HIBYTE(v96) = 4;
      *(int8x8_t *)v35.i8 = vmovn_s16(v35);
      LODWORD(v95.__vftable) = v35.i32[0];
      BYTE4(v95.__vftable) = 0;
      v35.i32[0] = bswap32(v29);
      *(int8x8_t *)v35.i8 = vzip1_s8(*(int8x8_t *)v35.i8, *(int8x8_t *)v35.i8);
      HIBYTE(v92) = 4;
      *(int8x8_t *)v35.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v34, (uint32x4_t)vsraq_n_s32(v32, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v35.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v35.i8, (int8x8_t)0x2E002E002E002ELL);
      LODWORD(__p) = vmovn_s16(v35).u32[0];
      BYTE4(__p) = 0;
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v28;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "ASP_Object.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1271;
      *(_WORD *)v103 = 2080;
      *(_QWORD *)&v103[2] = "m_core_class_id == 0";
      *(_WORD *)&v103[10] = 2080;
      *(_QWORD *)&v103[12] = &v95;
      *(_WORD *)&v103[20] = 2080;
      *(_QWORD *)&v103[22] = &__p;
      _os_log_error_impl(&dword_1B57BA000, v24, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s There has to be a core class for %s / %s", buf, 0x36u);
      if (SHIBYTE(v92) < 0)
        operator delete(__p);
      if (SHIBYTE(v96) < 0)
        operator delete(v95.__vftable);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v101);
    v36 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v94, "There has to be a core class");
    std::runtime_error::runtime_error(&v95, &v94);
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = -1;
    v95.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v96 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v95);
    *(_QWORD *)&v103[8] = "AMCP::ASP::PlugIn_Object::PlugIn_Object(Core::System_Core_Ptr, PlugIn_Ptr, Object_ID, AudioObj"
                          "ectID, AudioObjectID, AudioClassID)";
    *(_QWORD *)&v103[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Object.cpp";
    *(_DWORD *)&v103[24] = 1271;
    std::vector<void *>::vector(&v89);
    v37 = backtrace((void **)v89, (*((_QWORD *)&v89 + 1) - (_QWORD)v89) >> 3);
    std::vector<void *>::resize((char **)&v89, v37);
    __p = off_1E69A20A0;
    v92 = v89;
    v93 = v90;
    v89 = 0uLL;
    v90 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&__p);
    v36[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v36, (const std::runtime_error *)buf);
    v36[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v38 = *(_QWORD *)v103;
    v36[1].__imp_.__imp_ = *(const char **)v103;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
    v39 = *(std::runtime_error *)&v103[8];
    LODWORD(v36[3].__vftable) = *(_DWORD *)&v103[24];
    v36[2] = v39;
    v36->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v36[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v36[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  if (!v21)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v20);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v66 = *(std::__shared_weak_count **)&buf[8];
    v67 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v68 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
    {
      v70 = pthread_self();
      v71 = pthread_mach_thread_np(v70);
      v72 = *(_DWORD *)(a1 + 52);
      v73.i32[0] = bswap32(*(_DWORD *)(a1 + 48));
      v74 = vzip1_s8(v73, v73);
      v75.i64[0] = 0x1F0000001FLL;
      v75.i64[1] = 0x1F0000001FLL;
      v76.i64[0] = 0x1F0000001FLL;
      v76.i64[1] = 0x1F0000001FLL;
      v77.i64[0] = 0x5F0000005FLL;
      v77.i64[1] = 0x5F0000005FLL;
      *(int8x8_t *)v78.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v77, (uint32x4_t)vsraq_n_s32(v76, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v74), 0x18uLL), 0x18uLL))), v74, (int8x8_t)0x2E002E002E002ELL);
      HIBYTE(v96) = 4;
      *(int8x8_t *)v78.i8 = vmovn_s16(v78);
      LODWORD(v95.__vftable) = v78.i32[0];
      BYTE4(v95.__vftable) = 0;
      v78.i32[0] = bswap32(v72);
      *(int8x8_t *)v78.i8 = vzip1_s8(*(int8x8_t *)v78.i8, *(int8x8_t *)v78.i8);
      HIBYTE(v92) = 4;
      *(int8x8_t *)v78.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v77, (uint32x4_t)vsraq_n_s32(v75, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v78.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v78.i8, (int8x8_t)0x2E002E002E002ELL);
      LODWORD(__p) = vmovn_s16(v78).u32[0];
      BYTE4(__p) = 0;
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v71;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "ASP_Object.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1272;
      *(_WORD *)v103 = 2080;
      *(_QWORD *)&v103[2] = "m_core_stock_class_id == 0";
      *(_WORD *)&v103[10] = 2080;
      *(_QWORD *)&v103[12] = &v95;
      *(_WORD *)&v103[20] = 2080;
      *(_QWORD *)&v103[22] = &__p;
      _os_log_error_impl(&dword_1B57BA000, v67, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s There has to be a core stock class for %s / %s", buf, 0x36u);
      if (SHIBYTE(v92) < 0)
        operator delete(__p);
      if (SHIBYTE(v96) < 0)
        operator delete(v95.__vftable);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v101);
    v79 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v94, "There has to be a core stock class");
    std::runtime_error::runtime_error(&v95, &v94);
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = -1;
    v95.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v96 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v95);
    *(_QWORD *)&v103[8] = "AMCP::ASP::PlugIn_Object::PlugIn_Object(Core::System_Core_Ptr, PlugIn_Ptr, Object_ID, AudioObj"
                          "ectID, AudioObjectID, AudioClassID)";
    *(_QWORD *)&v103[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Object.cpp";
    *(_DWORD *)&v103[24] = 1272;
    std::vector<void *>::vector(&v89);
    v80 = backtrace((void **)v89, (*((_QWORD *)&v89 + 1) - (_QWORD)v89) >> 3);
    std::vector<void *>::resize((char **)&v89, v80);
    __p = off_1E69A20A0;
    v92 = v89;
    v93 = v90;
    v89 = 0uLL;
    v90 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&__p);
    v79[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v79, (const std::runtime_error *)buf);
    v79[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v81 = *(_QWORD *)v103;
    v79[1].__imp_.__imp_ = *(const char **)v103;
    if (v81)
      (*(void (**)(uint64_t))(*(_QWORD *)v81 + 24))(v81);
    v82 = *(std::runtime_error *)&v103[8];
    LODWORD(v79[3].__vftable) = *(_DWORD *)&v103[24];
    v79[2] = v82;
    v79->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v79[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v79[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  if (AMCP::is_base_of((AMCP *)0x61636C6B, v21))
  {
    caulk::make_string((caulk *)"Object Work Queue: %u", (uint64_t)buf, a6);
    if (buf[23] >= 0)
      v42 = buf;
    else
      v42 = *(const char **)buf;
    v43 = dispatch_queue_create(v42, 0);
    v44 = AMCP::Utility::Dispatch_Queue::operator=(v12, v43);
    if (v43)
      dispatch_release(v43);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (!*v12)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v44);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v83 = *(std::__shared_weak_count **)&buf[8];
      v84 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v85 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
      {
        v87 = pthread_self();
        v88 = pthread_mach_thread_np(v87);
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v88;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "ASP_Object.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 1277;
        *(_WORD *)v103 = 2080;
        *(_QWORD *)&v103[2] = "m_work_queue.operator BOOL() == true";
        *(_WORD *)&v103[10] = 1024;
        *(_DWORD *)&v103[12] = a6;
        _os_log_error_impl(&dword_1B57BA000, v84, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Failed to create work queue for object %u", buf, 0x28u);
      }
      abort();
    }
  }
  return a1;
}

void sub_1B5AEB0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, std::runtime_error a19, std::runtime_error a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,std::runtime_error a30,uint64_t a31,uint64_t a32)
{
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  AMCP::Utility::Dispatch_Queue *v35;

  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v35);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v34);
  *v32 = &off_1E697FC58;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v33);
  _Unwind_Resume(a1);
}

void AMCP::ASP::PlugIn_Object::build_core(AMCP::ASP::PlugIn_Object *this)
{
  AMCP::ASP::PlugIn_Object *v1;
  __CFBundle ***v2;
  unsigned int v3;
  AMCP::Log::Scope_Registry *is_base_of;
  AMCP::Log::Scope_Registry *v5;
  int v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  int v13;
  int16x8_t *v14;
  int v15;
  NSObject *v16;
  os_log_type_t v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  int v24;
  int16x8_t *v25;
  int v26;
  std::__shared_weak_count *v27;
  NSObject *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  int v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  CFTypeRef v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  int16x8_t *v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  CFTypeRef v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  int16x8_t *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *p_shared_owners;
  unint64_t v110;
  int v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  int v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  unsigned int v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  __int128 v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  int v154;
  unint64_t *v155;
  unint64_t v156;
  CFTypeRef v157;
  unint64_t v158;
  char *v159;
  __n128 v160;
  int16x8_t *v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  int v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  int v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  int v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  int v183;
  unint64_t *v184;
  unint64_t v185;
  CFTypeRef v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  char *v190;
  unint64_t *v191;
  unint64_t v192;
  int16x8_t *v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  __int128 v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  CFTypeRef v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  char *v212;
  unint64_t *v213;
  unint64_t v214;
  int16x8_t *v215;
  uint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  int v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  CFTypeRef v233;
  unint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  char *v237;
  unint64_t *v238;
  unint64_t v239;
  int16x8_t *v240;
  uint64_t v241;
  unint64_t *v242;
  unint64_t v243;
  __int128 v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  CFTypeRef v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t Has_Property;
  unint64_t *v257;
  unint64_t v258;
  char *v259;
  unint64_t *v260;
  unint64_t v261;
  int16x8_t *v262;
  uint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  uint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  int v276;
  unint64_t *v277;
  unint64_t v278;
  CFTypeRef v279;
  unint64_t v280;
  unint64_t *v281;
  unint64_t v282;
  char *v283;
  unint64_t *v284;
  unint64_t v285;
  int16x8_t *v286;
  uint64_t v287;
  unint64_t *v288;
  unint64_t v289;
  __int128 v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  unint64_t *v297;
  unint64_t v298;
  CFTypeRef v299;
  unint64_t *v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  char *v305;
  unint64_t *v306;
  unint64_t v307;
  int16x8_t *v308;
  uint64_t v309;
  unint64_t *v310;
  unint64_t v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  unint64_t *v316;
  unint64_t v317;
  uint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  int v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  CFTypeRef v325;
  unint64_t v326;
  unint64_t *v327;
  unint64_t v328;
  char *v329;
  unint64_t *v330;
  unint64_t v331;
  int16x8_t *v332;
  uint64_t v333;
  unint64_t *v334;
  unint64_t v335;
  __int128 v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  unint64_t *v348;
  unint64_t v349;
  uint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  int v354;
  unint64_t *v355;
  unint64_t v356;
  CFTypeRef v357;
  unint64_t v358;
  unint64_t *v359;
  unint64_t v360;
  char *v361;
  unint64_t *v362;
  unint64_t v363;
  int16x8_t *v364;
  uint64_t v365;
  unint64_t *v366;
  unint64_t v367;
  __int128 v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  unint64_t *v375;
  unint64_t v376;
  CFTypeRef v377;
  unint64_t *v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t *v381;
  unint64_t v382;
  char *v383;
  unint64_t *v384;
  unint64_t v385;
  int16x8_t *v386;
  uint64_t v387;
  unint64_t *v388;
  unint64_t v389;
  unint64_t v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  unint64_t *v394;
  unint64_t v395;
  uint64_t v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  int v400;
  unint64_t *v401;
  unint64_t v402;
  CFTypeRef v403;
  unint64_t v404;
  unint64_t *v405;
  unint64_t v406;
  char *v407;
  unint64_t *v408;
  unint64_t v409;
  __n128 v410;
  int16x8_t *v411;
  uint64_t v412;
  unint64_t *v413;
  unint64_t v414;
  __int128 v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  unint64_t *v422;
  unint64_t v423;
  CFTypeRef v424;
  unint64_t *v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t *v428;
  unint64_t v429;
  char *v430;
  unint64_t *v431;
  unint64_t v432;
  int16x8_t *v433;
  uint64_t v434;
  unint64_t *v435;
  unint64_t v436;
  unint64_t v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  unint64_t *v441;
  unint64_t v442;
  std::__shared_weak_count *v443;
  unint64_t *v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t v447;
  __int128 v448;
  std::__shared_weak_count *v449;
  unint64_t *v450;
  unint64_t v451;
  unint64_t *v452;
  unint64_t v453;
  unint64_t v454;
  unint64_t *v455;
  unint64_t v456;
  CFTypeRef v457;
  unint64_t v458;
  char *v459;
  int16x8_t *v460;
  uint64_t v461;
  unint64_t v462;
  char *v463;
  int16x8_t *v464;
  uint64_t v465;
  __int128 v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  unint64_t v472;
  unint64_t *v473;
  unint64_t v474;
  unint64_t *v475;
  unint64_t v476;
  uint64_t v477;
  unint64_t *v478;
  unint64_t v479;
  int v480;
  unint64_t *v481;
  unint64_t v482;
  CFTypeRef v483;
  unint64_t v484;
  unint64_t *v485;
  unint64_t v486;
  char *v487;
  unint64_t *v488;
  unint64_t v489;
  int16x8_t *v490;
  uint64_t v491;
  unint64_t *v492;
  unint64_t v493;
  __int128 v494;
  std::__shared_weak_count *v495;
  unint64_t *v496;
  unint64_t v497;
  std::__shared_weak_count *v498;
  unint64_t *v499;
  unint64_t v500;
  unint64_t *v501;
  unint64_t v502;
  CFTypeRef v503;
  unint64_t *v504;
  unint64_t v505;
  unint64_t v506;
  unint64_t *v507;
  unint64_t v508;
  char *v509;
  unint64_t *v510;
  unint64_t v511;
  int16x8_t *v512;
  uint64_t v513;
  unint64_t *v514;
  unint64_t v515;
  unint64_t v516;
  std::__shared_weak_count *v517;
  unint64_t *v518;
  unint64_t v519;
  unint64_t *v520;
  CFTypeRef v521;
  unint64_t v522;
  unint64_t *v523;
  unint64_t v524;
  char *v525;
  unint64_t *v526;
  unint64_t v527;
  int16x8_t *v528;
  uint64_t v529;
  unint64_t *v530;
  unint64_t v531;
  CFTypeRef v532;
  unint64_t v533;
  unint64_t *v534;
  unint64_t v535;
  char *v536;
  unint64_t *v537;
  unint64_t v538;
  int16x8_t *v539;
  uint64_t v540;
  unint64_t *v541;
  unint64_t v542;
  __int128 v543;
  std::__shared_weak_count *v544;
  unint64_t *v545;
  unint64_t v546;
  std::__shared_weak_count *v547;
  unint64_t *v548;
  unint64_t v549;
  unint64_t *v550;
  unint64_t v551;
  unint64_t *v552;
  unint64_t v553;
  CFTypeRef v554;
  unint64_t *v555;
  unint64_t v556;
  unint64_t v557;
  unint64_t *v558;
  unint64_t v559;
  char *v560;
  unint64_t *v561;
  unint64_t v562;
  int16x8_t *v563;
  uint64_t v564;
  unint64_t *v565;
  unint64_t v566;
  unint64_t v567;
  CFTypeRef v568;
  unint64_t *v569;
  unint64_t v570;
  unint64_t v571;
  unint64_t *v572;
  unint64_t v573;
  char *v574;
  unint64_t *v575;
  unint64_t v576;
  int16x8_t *v577;
  uint64_t v578;
  unint64_t *v579;
  unint64_t v580;
  unint64_t v581;
  std::__shared_weak_count *v582;
  unint64_t *v583;
  unint64_t v584;
  unint64_t *v585;
  CFTypeRef v586;
  unint64_t v587;
  unint64_t *v588;
  unint64_t v589;
  char *v590;
  unint64_t *v591;
  unint64_t v592;
  int16x8_t *v593;
  uint64_t v594;
  unint64_t *v595;
  unint64_t v596;
  CFTypeRef v597;
  unint64_t v598;
  unint64_t *v599;
  unint64_t v600;
  char *v601;
  unint64_t *v602;
  unint64_t v603;
  int16x8_t *v604;
  uint64_t v605;
  unint64_t *v606;
  unint64_t v607;
  __int128 v608;
  std::__shared_weak_count *v609;
  unint64_t *v610;
  unint64_t v611;
  std::__shared_weak_count *v612;
  unint64_t *v613;
  unint64_t v614;
  unint64_t *v615;
  unint64_t v616;
  unint64_t *v617;
  unint64_t v618;
  CFTypeRef v619;
  unint64_t *v620;
  unint64_t v621;
  unint64_t Is_Property_Settable;
  unint64_t *v623;
  unint64_t v624;
  char *v625;
  unint64_t *v626;
  unint64_t v627;
  int16x8_t *v628;
  uint64_t v629;
  unint64_t *v630;
  unint64_t v631;
  unint64_t v632;
  CFTypeRef v633;
  unint64_t *v634;
  unint64_t v635;
  unint64_t v636;
  unint64_t *v637;
  unint64_t v638;
  char *v639;
  unint64_t *v640;
  unint64_t v641;
  int16x8_t *v642;
  uint64_t v643;
  unint64_t *v644;
  unint64_t v645;
  unint64_t v646;
  std::__shared_weak_count *v647;
  unint64_t *v648;
  unint64_t v649;
  unint64_t *v650;
  unint64_t v651;
  uint64_t v652;
  unint64_t *v653;
  unint64_t v654;
  AMCP::ASP::PlugIn_Object *v655;
  int v656;
  unint64_t *v657;
  unint64_t v658;
  CFTypeRef v659;
  unint64_t v660;
  unint64_t *v661;
  unint64_t v662;
  char *v663;
  unint64_t *v664;
  unint64_t v665;
  int16x8_t *v666;
  uint64_t v667;
  unint64_t *v668;
  unint64_t v669;
  __int128 v670;
  std::__shared_weak_count *v671;
  unint64_t *v672;
  unint64_t v673;
  std::__shared_weak_count *v674;
  unint64_t *v675;
  unint64_t v676;
  unint64_t *v677;
  unint64_t v678;
  CFTypeRef v679;
  unint64_t *v680;
  unint64_t v681;
  unint64_t v682;
  unint64_t *v683;
  unint64_t v684;
  char *v685;
  unint64_t *v686;
  unint64_t v687;
  int16x8_t *v688;
  uint64_t v689;
  unint64_t *v690;
  unint64_t v691;
  unint64_t v692;
  std::__shared_weak_count *v693;
  unint64_t *v694;
  unint64_t v695;
  unint64_t *v696;
  _opaque_pthread_t *v697;
  mach_port_t v698;
  int v699;
  int16x8_t *v700;
  int v701;
  __int128 *v702;
  __int128 v703;
  __int128 v704;
  std::__shared_weak_count *v705;
  AMCP::ASP::PlugIn_Object *v706;
  __int128 v707;
  __int128 v708;
  AMCP::Core::Core *v709;
  std::__shared_weak_count *v710;
  void *__p[2];
  __int128 v712;
  int v713;
  AudioObjectPropertyAddress v714;
  __int128 v715;
  uint64_t v716;
  int v717;
  double v718[2];
  __int128 v719;
  CFTypeRef v720[2];
  CFTypeRef cf[2];
  uint8_t buf[56];
  int16x8_t v723;
  char v724;
  int16x8_t *v725;
  uint64_t v726;

  v1 = this;
  v726 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 15) = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 16));
  *(_OWORD *)__p = 0u;
  v712 = 0u;
  v713 = 1065353216;
  v2 = (__CFBundle ***)((char *)v1 + 24);
  v3 = AMCP::ASP::calculate_max_element((AMCP::ASP::PlugIn **)v1 + 3, *((unsigned int *)v1 + 11), *((_DWORD *)v1 + 17));
  is_base_of = (AMCP::Log::Scope_Registry *)AMCP::is_base_of((AMCP *)0x61636C6B, *((_DWORD *)v1 + 17));
  if (!(_DWORD)is_base_of)
    goto LABEL_39;
  AMCP::Log::Scope_Registry::get(is_base_of);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
  v6 = *((_DWORD *)cf[0] + 4);
  switch(v6)
  {
    case 1:
      AMCP::Log::Scope_Registry::get(v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v18 = *(std::__shared_weak_count **)&buf[8];
      v19 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      v22 = pthread_self();
      v23 = pthread_mach_thread_np(v22);
      v24 = *((_DWORD *)v1 + 15);
      AMCP::make_string_for_class_id((AMCP *)*((unsigned int *)v1 + 16), &v723);
      if (v724 >= 0)
        v25 = &v723;
      else
        v25 = (int16x8_t *)v723.i64[0];
      v26 = *((_DWORD *)v1 + 11);
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v23;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "ASP_Object.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1294;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v24;
      *(_WORD *)&buf[30] = 2080;
      *(_QWORD *)&buf[32] = v25;
      *(_WORD *)&buf[40] = 1024;
      *(_DWORD *)&buf[42] = v26;
      v16 = v19;
      v17 = OS_LOG_TYPE_DEFAULT;
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v27 = *(std::__shared_weak_count **)&buf[8];
      v28 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v29 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        goto LABEL_34;
      v697 = pthread_self();
      v698 = pthread_mach_thread_np(v697);
      v699 = *((_DWORD *)v1 + 15);
      AMCP::make_string_for_class_id((AMCP *)*((unsigned int *)v1 + 16), &v723);
      if (v724 >= 0)
        v700 = &v723;
      else
        v700 = (int16x8_t *)v723.i64[0];
      v701 = *((_DWORD *)v1 + 11);
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v698;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "ASP_Object.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1294;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v699;
      *(_WORD *)&buf[30] = 2080;
      *(_QWORD *)&buf[32] = v700;
      *(_WORD *)&buf[40] = 1024;
      *(_DWORD *)&buf[42] = v701;
      _os_log_debug_impl(&dword_1B57BA000, v28, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Building Core %u for %s driver id: %u", buf, 0x2Eu);
      goto LABEL_26;
    case 3:
      AMCP::Log::Scope_Registry::get(v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v7 = *(std::__shared_weak_count **)&buf[8];
      v8 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        goto LABEL_34;
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      v13 = *((_DWORD *)v1 + 15);
      AMCP::make_string_for_class_id((AMCP *)*((unsigned int *)v1 + 16), &v723);
      if (v724 >= 0)
        v14 = &v723;
      else
        v14 = (int16x8_t *)v723.i64[0];
      v15 = *((_DWORD *)v1 + 11);
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "ASP_Object.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1294;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v13;
      *(_WORD *)&buf[30] = 2080;
      *(_QWORD *)&buf[32] = v14;
      *(_WORD *)&buf[40] = 1024;
      *(_DWORD *)&buf[42] = v15;
      v16 = v8;
      v17 = OS_LOG_TYPE_INFO;
      break;
    default:
      goto LABEL_34;
  }
  _os_log_impl(&dword_1B57BA000, v16, v17, "%6u %32s:%-5d Building Core %u for %s driver id: %u", buf, 0x2Eu);
LABEL_26:
  if (v724 < 0)
    operator delete((void *)v723.i64[0]);
LABEL_34:
  v31 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v32 = (unint64_t *)((char *)cf[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
LABEL_39:
  if (AMCP::is_base_of((AMCP *)0x61706C67, *((_DWORD *)v1 + 17)))
  {
    AMCP::ASP::PlugIn_Object::populate_object_core((uint64_t)v1, v3, (uint64_t)__p);
    mcp_applesauce::CF::PlugInRef_proxy::get_bundle(v720, **v2);
    mcp_applesauce::CF::BundleRef_proxy::get_bundle_id((applesauce::CF::StringRef *)cf, (__CFBundle *)v720[0]);
    v723.i64[0] = 0x676C6F6270696964;
    v723.i32[2] = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)buf, (uint64_t)&v723, cf[0]);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(_QWORD *)buf + 40), buf);
    v34 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v35 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (cf[0])
      CFRelease(cf[0]);
    if (v720[0])
      CFRelease(v720[0]);
    v37 = *((_DWORD *)v1 + 15);
    *(_QWORD *)buf = *(_QWORD *)(*((_QWORD *)v1 + 1) + 16);
    *(_DWORD *)&buf[8] = v37;
    *(_DWORD *)&buf[12] = 1633841016;
    AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>(v723.i64, 0, (__int128 *)buf, 1.58366006e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v723.i64[0] + 40), &v723);
    v38 = (std::__shared_weak_count *)v723.i64[1];
    if (v723.i64[1])
    {
      v39 = (unint64_t *)(v723.i64[1] + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = *((_DWORD *)v1 + 15);
    *(_QWORD *)buf = *(_QWORD *)(*((_QWORD *)v1 + 1) + 16);
    *(_DWORD *)&buf[8] = v41;
    *(_DWORD *)&buf[12] = 1633905771;
    AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>(v723.i64, 0, (__int128 *)buf, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v723.i64[0] + 40), &v723);
    v42 = (std::__shared_weak_count *)v723.i64[1];
    if (v723.i64[1])
    {
      v43 = (unint64_t *)(v723.i64[1] + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = *((_DWORD *)v1 + 15);
    *(_QWORD *)buf = *(_QWORD *)(*((_QWORD *)v1 + 1) + 16);
    *(_DWORD *)&buf[8] = v45;
    *(_DWORD *)&buf[12] = 1633969526;
    AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>(v723.i64, 0, (__int128 *)buf, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v723.i64[0] + 40), &v723);
    v46 = (std::__shared_weak_count *)v723.i64[1];
    if (v723.i64[1])
    {
      v47 = (unint64_t *)(v723.i64[1] + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
LABEL_62:
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    goto LABEL_66;
  }
  if (AMCP::is_base_of((AMCP *)0x61626F78, *((_DWORD *)v1 + 17)))
  {
    AMCP::ASP::PlugIn_Object::populate_box_core((uint64_t)v1, v3, (uint64_t)__p);
    goto LABEL_66;
  }
  if (!AMCP::is_base_of((AMCP *)0x61646576, *((_DWORD *)v1 + 17)))
  {
    if (AMCP::is_base_of((AMCP *)0x61737472, *((_DWORD *)v1 + 17)))
    {
      AMCP::ASP::PlugIn_Object::populate_object_core((uint64_t)v1, v3, (uint64_t)__p);
      v107 = *((_QWORD *)v1 + 3);
      v108 = (std::__shared_weak_count *)*((_QWORD *)v1 + 4);
      if (v108)
      {
        p_shared_owners = (unint64_t *)&v108->__shared_owners_;
        do
          v110 = __ldxr(p_shared_owners);
        while (__stxr(v110 + 1, p_shared_owners));
        v111 = *((_DWORD *)v1 + 11);
        *(_QWORD *)&v715 = 0x676C6F6273646972;
        DWORD2(v715) = 0;
        v720[0] = 0;
        v720[1] = 0;
        v112 = (unint64_t *)&v108->__shared_owners_;
        do
          v113 = __ldxr(v112);
        while (__stxr(v113 + 1, v112));
      }
      else
      {
        v111 = *((_DWORD *)v1 + 11);
        *(_QWORD *)&v715 = 0x676C6F6273646972;
        DWORD2(v715) = 0;
        v720[0] = 0;
        v720[1] = 0;
      }
      strcpy((char *)&v719, "ridsbolg");
      BYTE9(v719) = 0;
      WORD5(v719) = 0;
      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, *(double *)&v719);
      v233 = cf[0];
      v234 = AMCP::Implementation::get_type_marker<std::function<AMCP::Direction ()(void)>>();
      if (v108)
      {
        v235 = (unint64_t *)&v108->__shared_owners_;
        do
          v236 = __ldxr(v235);
        while (__stxr(v236 + 1, v235));
      }
      v725 = 0;
      v237 = (char *)operator new(0x28uLL);
      *(_QWORD *)v237 = &off_1E6989088;
      *((_QWORD *)v237 + 1) = v107;
      *((_QWORD *)v237 + 2) = v108;
      if (v108)
      {
        v238 = (unint64_t *)&v108->__shared_owners_;
        do
          v239 = __ldxr(v238);
        while (__stxr(v239 + 1, v238));
      }
      *((_DWORD *)v237 + 6) = v111;
      *(_QWORD *)(v237 + 28) = 0x676C6F6273646972;
      *((_DWORD *)v237 + 9) = 0;
      v725 = (int16x8_t *)v237;
      memset(buf, 0, 40);
      std::__function::__value_func<AMCP::Direction ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
      *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Direction ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v233, v234, (AMCP *)buf);
      if (*(_QWORD *)&buf[32])
        (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
      v240 = v725;
      if (v725 == &v723)
      {
        v241 = 4;
        v240 = &v723;
      }
      else
      {
        if (!v725)
        {
LABEL_349:
          if (v108)
          {
            v242 = (unint64_t *)&v108->__shared_owners_;
            do
              v243 = __ldaxr(v242);
            while (__stlxr(v243 - 1, v242));
            if (!v243)
            {
              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
              std::__shared_weak_count::__release_weak(v108);
            }
          }
          AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>((uint64_t)cf[0]);
          v244 = *(_OWORD *)cf;
          cf[0] = 0;
          cf[1] = 0;
          v245 = (std::__shared_weak_count *)v720[1];
          *(_OWORD *)v720 = v244;
          if (v245)
          {
            v246 = (unint64_t *)&v245->__shared_owners_;
            do
              v247 = __ldaxr(v246);
            while (__stlxr(v247 - 1, v246));
            if (!v247)
            {
              ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
              std::__shared_weak_count::__release_weak(v245);
            }
          }
          v248 = (std::__shared_weak_count *)cf[1];
          if (cf[1])
          {
            v249 = (unint64_t *)((char *)cf[1] + 8);
            do
              v250 = __ldaxr(v249);
            while (__stlxr(v250 - 1, v249));
            if (!v250)
            {
              ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
              std::__shared_weak_count::__release_weak(v248);
            }
          }
          if (v108)
          {
            v251 = (unint64_t *)&v108->__shared_owners_;
            do
              v252 = __ldaxr(v251);
            while (__stlxr(v252 - 1, v251));
            if (!v252)
            {
              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
              std::__shared_weak_count::__release_weak(v108);
            }
            v253 = v720[0];
            v254 = (unint64_t *)&v108->__shared_owners_;
            do
              v255 = __ldxr(v254);
            while (__stxr(v255 + 1, v254));
            Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
            v257 = (unint64_t *)&v108->__shared_owners_;
            do
              v258 = __ldxr(v257);
            while (__stxr(v258 + 1, v257));
          }
          else
          {
            v253 = v720[0];
            Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
          }
          v725 = 0;
          v259 = (char *)operator new(0x28uLL);
          *(_QWORD *)v259 = &off_1E6989108;
          *((_QWORD *)v259 + 1) = v107;
          *((_QWORD *)v259 + 2) = v108;
          if (v108)
          {
            v260 = (unint64_t *)&v108->__shared_owners_;
            do
              v261 = __ldxr(v260);
            while (__stxr(v261 + 1, v260));
          }
          *((_DWORD *)v259 + 6) = v111;
          *(_QWORD *)(v259 + 28) = 0x676C6F6273646972;
          *((_DWORD *)v259 + 9) = 0;
          v725 = (int16x8_t *)v259;
          memset(buf, 0, 40);
          std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
          *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
          std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v253, Has_Property, (AMCP *)buf);
          if (*(_QWORD *)&buf[32])
            (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
          v262 = v725;
          if (v725 == &v723)
          {
            v263 = 4;
            v262 = &v723;
          }
          else
          {
            if (!v725)
              goto LABEL_385;
            v263 = 5;
          }
          (*(void (**)(void))(v262->i64[0] + 8 * v263))();
LABEL_385:
          if (v108)
          {
            v264 = (unint64_t *)&v108->__shared_owners_;
            do
              v265 = __ldaxr(v264);
            while (__stlxr(v265 - 1, v264));
            if (!v265)
            {
              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
              std::__shared_weak_count::__release_weak(v108);
            }
            do
              v266 = __ldaxr(v264);
            while (__stlxr(v266 - 1, v264));
            if (!v266)
            {
              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
              std::__shared_weak_count::__release_weak(v108);
            }
          }
          if (v720[0])
            std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v720[0] + 10, v720);
          v267 = (std::__shared_weak_count *)v720[1];
          if (v720[1])
          {
            v268 = (unint64_t *)((char *)v720[1] + 8);
            do
              v269 = __ldaxr(v268);
            while (__stlxr(v269 - 1, v268));
            if (!v269)
            {
              ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
              std::__shared_weak_count::__release_weak(v267);
            }
          }
          if (v108)
          {
            v270 = (unint64_t *)&v108->__shared_owners_;
            do
              v271 = __ldaxr(v270);
            while (__stlxr(v271 - 1, v270));
            if (!v271)
            {
              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
              std::__shared_weak_count::__release_weak(v108);
            }
          }
          v272 = *((_QWORD *)v1 + 3);
          v273 = (std::__shared_weak_count *)*((_QWORD *)v1 + 4);
          if (v273)
          {
            v274 = (unint64_t *)&v273->__shared_owners_;
            do
              v275 = __ldxr(v274);
            while (__stxr(v275 + 1, v274));
            v276 = *((_DWORD *)v1 + 11);
            *(_QWORD *)&v715 = 0x676C6F627363686ELL;
            DWORD2(v715) = 0;
            v720[0] = 0;
            v720[1] = 0;
            v277 = (unint64_t *)&v273->__shared_owners_;
            do
              v278 = __ldxr(v277);
            while (__stxr(v278 + 1, v277));
          }
          else
          {
            v276 = *((_DWORD *)v1 + 11);
            *(_QWORD *)&v715 = 0x676C6F627363686ELL;
            DWORD2(v715) = 0;
            v720[0] = 0;
            v720[1] = 0;
          }
          strcpy((char *)&v719, "nhcsbolg");
          BYTE9(v719) = 0;
          WORD5(v719) = 0;
          std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, *(double *)&v719);
          v279 = cf[0];
          v280 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
          if (v273)
          {
            v281 = (unint64_t *)&v273->__shared_owners_;
            do
              v282 = __ldxr(v281);
            while (__stxr(v282 + 1, v281));
          }
          v725 = 0;
          v283 = (char *)operator new(0x28uLL);
          *(_QWORD *)v283 = &off_1E6989188;
          *((_QWORD *)v283 + 1) = v272;
          *((_QWORD *)v283 + 2) = v273;
          if (v273)
          {
            v284 = (unint64_t *)&v273->__shared_owners_;
            do
              v285 = __ldxr(v284);
            while (__stxr(v285 + 1, v284));
          }
          *((_DWORD *)v283 + 6) = v276;
          *(_QWORD *)(v283 + 28) = 0x676C6F627363686ELL;
          *((_DWORD *)v283 + 9) = 0;
          v725 = (int16x8_t *)v283;
          memset(buf, 0, 40);
          std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
          *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
          std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v279, v280, (AMCP *)buf);
          if (*(_QWORD *)&buf[32])
            (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
          v286 = v725;
          if (v725 == &v723)
          {
            v287 = 4;
            v286 = &v723;
          }
          else
          {
            if (!v725)
            {
LABEL_425:
              if (v273)
              {
                v288 = (unint64_t *)&v273->__shared_owners_;
                do
                  v289 = __ldaxr(v288);
                while (__stlxr(v289 - 1, v288));
                if (!v289)
                {
                  ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                  std::__shared_weak_count::__release_weak(v273);
                }
              }
              AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>((uint64_t)cf[0]);
              v290 = *(_OWORD *)cf;
              cf[0] = 0;
              cf[1] = 0;
              v291 = (std::__shared_weak_count *)v720[1];
              *(_OWORD *)v720 = v290;
              if (v291)
              {
                v292 = (unint64_t *)&v291->__shared_owners_;
                do
                  v293 = __ldaxr(v292);
                while (__stlxr(v293 - 1, v292));
                if (!v293)
                {
                  ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                  std::__shared_weak_count::__release_weak(v291);
                }
              }
              v294 = (std::__shared_weak_count *)cf[1];
              if (cf[1])
              {
                v295 = (unint64_t *)((char *)cf[1] + 8);
                do
                  v296 = __ldaxr(v295);
                while (__stlxr(v296 - 1, v295));
                if (!v296)
                {
                  ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                  std::__shared_weak_count::__release_weak(v294);
                }
              }
              if (v273)
              {
                v297 = (unint64_t *)&v273->__shared_owners_;
                do
                  v298 = __ldaxr(v297);
                while (__stlxr(v298 - 1, v297));
                if (!v298)
                {
                  ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                  std::__shared_weak_count::__release_weak(v273);
                }
                v299 = v720[0];
                v300 = (unint64_t *)&v273->__shared_owners_;
                do
                  v301 = __ldxr(v300);
                while (__stxr(v301 + 1, v300));
                v302 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
                v303 = (unint64_t *)&v273->__shared_owners_;
                do
                  v304 = __ldxr(v303);
                while (__stxr(v304 + 1, v303));
              }
              else
              {
                v299 = v720[0];
                v302 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
              }
              v725 = 0;
              v305 = (char *)operator new(0x28uLL);
              *(_QWORD *)v305 = &off_1E6989208;
              *((_QWORD *)v305 + 1) = v272;
              *((_QWORD *)v305 + 2) = v273;
              if (v273)
              {
                v306 = (unint64_t *)&v273->__shared_owners_;
                do
                  v307 = __ldxr(v306);
                while (__stxr(v307 + 1, v306));
              }
              *((_DWORD *)v305 + 6) = v276;
              *(_QWORD *)(v305 + 28) = 0x676C6F627363686ELL;
              *((_DWORD *)v305 + 9) = 0;
              v725 = (int16x8_t *)v305;
              memset(buf, 0, 40);
              std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
              *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
              std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v299, v302, (AMCP *)buf);
              if (*(_QWORD *)&buf[32])
                (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
              v308 = v725;
              if (v725 == &v723)
              {
                v309 = 4;
                v308 = &v723;
              }
              else
              {
                if (!v725)
                  goto LABEL_461;
                v309 = 5;
              }
              (*(void (**)(void))(v308->i64[0] + 8 * v309))();
LABEL_461:
              if (v273)
              {
                v310 = (unint64_t *)&v273->__shared_owners_;
                do
                  v311 = __ldaxr(v310);
                while (__stlxr(v311 - 1, v310));
                if (!v311)
                {
                  ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                  std::__shared_weak_count::__release_weak(v273);
                }
                do
                  v312 = __ldaxr(v310);
                while (__stlxr(v312 - 1, v310));
                if (!v312)
                {
                  ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                  std::__shared_weak_count::__release_weak(v273);
                }
              }
              if (v720[0])
                std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v720[0] + 10, v720);
              v313 = (std::__shared_weak_count *)v720[1];
              if (v720[1])
              {
                v314 = (unint64_t *)((char *)v720[1] + 8);
                do
                  v315 = __ldaxr(v314);
                while (__stlxr(v315 - 1, v314));
                if (!v315)
                {
                  ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
                  std::__shared_weak_count::__release_weak(v313);
                }
              }
              if (v273)
              {
                v316 = (unint64_t *)&v273->__shared_owners_;
                do
                  v317 = __ldaxr(v316);
                while (__stlxr(v317 - 1, v316));
                if (!v317)
                {
                  ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                  std::__shared_weak_count::__release_weak(v273);
                }
              }
              v318 = *((_QWORD *)v1 + 3);
              v319 = (std::__shared_weak_count *)*((_QWORD *)v1 + 4);
              if (v319)
              {
                v320 = (unint64_t *)&v319->__shared_owners_;
                do
                  v321 = __ldxr(v320);
                while (__stxr(v321 + 1, v320));
                v322 = *((_DWORD *)v1 + 11);
                v720[0] = 0;
                v720[1] = 0;
                do
                  v323 = __ldxr(v320);
                while (__stxr(v323 + 1, v320));
                v324 = v319;
              }
              else
              {
                v324 = 0;
                v322 = *((_DWORD *)v1 + 11);
                v720[0] = 0;
                v720[1] = 0;
              }
              std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366012e190);
              v325 = cf[0];
              v326 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
              if (v324)
              {
                v327 = (unint64_t *)&v324->__shared_owners_;
                do
                  v328 = __ldxr(v327);
                while (__stxr(v328 + 1, v327));
              }
              v725 = 0;
              v329 = (char *)operator new(0x30uLL);
              *(_QWORD *)v329 = &off_1E6989288;
              *((_QWORD *)v329 + 1) = v318;
              *((_QWORD *)v329 + 2) = v324;
              if (v324)
              {
                v330 = (unint64_t *)&v324->__shared_owners_;
                do
                  v331 = __ldxr(v330);
                while (__stxr(v331 + 1, v330));
              }
              *((_DWORD *)v329 + 6) = v322;
              *(_QWORD *)(v329 + 28) = 0x676C6F6274617073;
              *((_DWORD *)v329 + 9) = 0;
              *((_DWORD *)v329 + 10) = 0;
              v725 = (int16x8_t *)v329;
              memset(buf, 0, 40);
              std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
              *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
              std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v325, v326, (AMCP *)buf);
              if (*(_QWORD *)&buf[32])
                (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
              v332 = v725;
              if (v725 == &v723)
              {
                v333 = 4;
                v332 = &v723;
              }
              else
              {
                if (!v725)
                {
LABEL_501:
                  if (v324)
                  {
                    v334 = (unint64_t *)&v324->__shared_owners_;
                    do
                      v335 = __ldaxr(v334);
                    while (__stlxr(v335 - 1, v334));
                    if (!v335)
                    {
                      ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                      std::__shared_weak_count::__release_weak(v324);
                    }
                  }
                  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>((uint64_t)cf[0]);
                  v336 = *(_OWORD *)cf;
                  cf[0] = 0;
                  cf[1] = 0;
                  v337 = (std::__shared_weak_count *)v720[1];
                  *(_OWORD *)v720 = v336;
                  if (v337)
                  {
                    v338 = (unint64_t *)&v337->__shared_owners_;
                    do
                      v339 = __ldaxr(v338);
                    while (__stlxr(v339 - 1, v338));
                    if (!v339)
                    {
                      ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                      std::__shared_weak_count::__release_weak(v337);
                    }
                  }
                  v340 = (std::__shared_weak_count *)cf[1];
                  if (cf[1])
                  {
                    v341 = (unint64_t *)((char *)cf[1] + 8);
                    do
                      v342 = __ldaxr(v341);
                    while (__stlxr(v342 - 1, v341));
                    if (!v342)
                    {
                      ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
                      std::__shared_weak_count::__release_weak(v340);
                    }
                  }
                  if (v324)
                  {
                    v343 = (unint64_t *)&v324->__shared_owners_;
                    do
                      v344 = __ldaxr(v343);
                    while (__stlxr(v344 - 1, v343));
                    if (!v344)
                    {
                      ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                      std::__shared_weak_count::__release_weak(v324);
                    }
                  }
                  if (v720[0])
                    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v720[0] + 10, v720);
                  v345 = (std::__shared_weak_count *)v720[1];
                  if (v720[1])
                  {
                    v346 = (unint64_t *)((char *)v720[1] + 8);
                    do
                      v347 = __ldaxr(v346);
                    while (__stlxr(v347 - 1, v346));
                    if (!v347)
                    {
                      ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
                      std::__shared_weak_count::__release_weak(v345);
                    }
                  }
                  if (v319)
                  {
                    v348 = (unint64_t *)&v319->__shared_owners_;
                    do
                      v349 = __ldaxr(v348);
                    while (__stlxr(v349 - 1, v348));
                    if (!v349)
                    {
                      ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
                      std::__shared_weak_count::__release_weak(v319);
                    }
                  }
                  v350 = *((_QWORD *)v1 + 3);
                  v351 = (std::__shared_weak_count *)*((_QWORD *)v1 + 4);
                  if (v351)
                  {
                    v352 = (unint64_t *)&v351->__shared_owners_;
                    do
                      v353 = __ldxr(v352);
                    while (__stxr(v353 + 1, v352));
                    v354 = *((_DWORD *)v1 + 11);
                    *(_QWORD *)&v715 = 0x676C6F627465726DLL;
                    DWORD2(v715) = 0;
                    v720[0] = 0;
                    v720[1] = 0;
                    v355 = (unint64_t *)&v351->__shared_owners_;
                    do
                      v356 = __ldxr(v355);
                    while (__stxr(v356 + 1, v355));
                  }
                  else
                  {
                    v354 = *((_DWORD *)v1 + 11);
                    *(_QWORD *)&v715 = 0x676C6F627465726DLL;
                    DWORD2(v715) = 0;
                    v720[0] = 0;
                    v720[1] = 0;
                  }
                  strcpy((char *)&v719, "mretbolg");
                  BYTE9(v719) = 0;
                  WORD5(v719) = 0;
                  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, *(double *)&v719);
                  v357 = cf[0];
                  v358 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
                  if (v351)
                  {
                    v359 = (unint64_t *)&v351->__shared_owners_;
                    do
                      v360 = __ldxr(v359);
                    while (__stxr(v360 + 1, v359));
                  }
                  v725 = 0;
                  v361 = (char *)operator new(0x28uLL);
                  *(_QWORD *)v361 = &off_1E6989308;
                  *((_QWORD *)v361 + 1) = v350;
                  *((_QWORD *)v361 + 2) = v351;
                  if (v351)
                  {
                    v362 = (unint64_t *)&v351->__shared_owners_;
                    do
                      v363 = __ldxr(v362);
                    while (__stxr(v363 + 1, v362));
                  }
                  *((_DWORD *)v361 + 6) = v354;
                  *(_QWORD *)(v361 + 28) = 0x676C6F627465726DLL;
                  *((_DWORD *)v361 + 9) = 0;
                  v725 = (int16x8_t *)v361;
                  memset(buf, 0, 40);
                  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
                  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
                  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v357, v358, (AMCP *)buf);
                  if (*(_QWORD *)&buf[32])
                    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
                  v364 = v725;
                  if (v725 == &v723)
                  {
                    v365 = 4;
                    v364 = &v723;
                  }
                  else
                  {
                    if (!v725)
                    {
LABEL_553:
                      if (v351)
                      {
                        v366 = (unint64_t *)&v351->__shared_owners_;
                        do
                          v367 = __ldaxr(v366);
                        while (__stlxr(v367 - 1, v366));
                        if (!v367)
                        {
                          ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
                          std::__shared_weak_count::__release_weak(v351);
                        }
                      }
                      AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>((uint64_t)cf[0]);
                      v368 = *(_OWORD *)cf;
                      cf[0] = 0;
                      cf[1] = 0;
                      v369 = (std::__shared_weak_count *)v720[1];
                      *(_OWORD *)v720 = v368;
                      if (v369)
                      {
                        v370 = (unint64_t *)&v369->__shared_owners_;
                        do
                          v371 = __ldaxr(v370);
                        while (__stlxr(v371 - 1, v370));
                        if (!v371)
                        {
                          ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
                          std::__shared_weak_count::__release_weak(v369);
                        }
                      }
                      v372 = (std::__shared_weak_count *)cf[1];
                      if (cf[1])
                      {
                        v373 = (unint64_t *)((char *)cf[1] + 8);
                        do
                          v374 = __ldaxr(v373);
                        while (__stlxr(v374 - 1, v373));
                        if (!v374)
                        {
                          ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
                          std::__shared_weak_count::__release_weak(v372);
                        }
                      }
                      if (v351)
                      {
                        v375 = (unint64_t *)&v351->__shared_owners_;
                        do
                          v376 = __ldaxr(v375);
                        while (__stlxr(v376 - 1, v375));
                        if (!v376)
                        {
                          ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
                          std::__shared_weak_count::__release_weak(v351);
                        }
                        v377 = v720[0];
                        v378 = (unint64_t *)&v351->__shared_owners_;
                        do
                          v379 = __ldxr(v378);
                        while (__stxr(v379 + 1, v378));
                        v380 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
                        v381 = (unint64_t *)&v351->__shared_owners_;
                        do
                          v382 = __ldxr(v381);
                        while (__stxr(v382 + 1, v381));
                      }
                      else
                      {
                        v377 = v720[0];
                        v380 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
                      }
                      v725 = 0;
                      v383 = (char *)operator new(0x28uLL);
                      *(_QWORD *)v383 = &off_1E6989388;
                      *((_QWORD *)v383 + 1) = v350;
                      *((_QWORD *)v383 + 2) = v351;
                      if (v351)
                      {
                        v384 = (unint64_t *)&v351->__shared_owners_;
                        do
                          v385 = __ldxr(v384);
                        while (__stxr(v385 + 1, v384));
                      }
                      *((_DWORD *)v383 + 6) = v354;
                      *(_QWORD *)(v383 + 28) = 0x676C6F627465726DLL;
                      *((_DWORD *)v383 + 9) = 0;
                      v725 = (int16x8_t *)v383;
                      memset(buf, 0, 40);
                      std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
                      *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
                      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v377, v380, (AMCP *)buf);
                      if (*(_QWORD *)&buf[32])
                        (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
                      v386 = v725;
                      if (v725 == &v723)
                      {
                        v387 = 4;
                        v386 = &v723;
                      }
                      else
                      {
                        if (!v725)
                          goto LABEL_589;
                        v387 = 5;
                      }
                      (*(void (**)(void))(v386->i64[0] + 8 * v387))();
LABEL_589:
                      if (v351)
                      {
                        v388 = (unint64_t *)&v351->__shared_owners_;
                        do
                          v389 = __ldaxr(v388);
                        while (__stlxr(v389 - 1, v388));
                        if (!v389)
                        {
                          ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
                          std::__shared_weak_count::__release_weak(v351);
                        }
                        do
                          v390 = __ldaxr(v388);
                        while (__stlxr(v390 - 1, v388));
                        if (!v390)
                        {
                          ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
                          std::__shared_weak_count::__release_weak(v351);
                        }
                      }
                      if (v720[0])
                        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v720[0] + 10, v720);
                      v391 = (std::__shared_weak_count *)v720[1];
                      if (v720[1])
                      {
                        v392 = (unint64_t *)((char *)v720[1] + 8);
                        do
                          v393 = __ldaxr(v392);
                        while (__stlxr(v393 - 1, v392));
                        if (!v393)
                        {
                          ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
                          std::__shared_weak_count::__release_weak(v391);
                        }
                      }
                      if (v351)
                      {
                        v394 = (unint64_t *)&v351->__shared_owners_;
                        do
                          v395 = __ldaxr(v394);
                        while (__stlxr(v395 - 1, v394));
                        if (!v395)
                        {
                          ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
                          std::__shared_weak_count::__release_weak(v351);
                        }
                      }
                      v396 = *((_QWORD *)v1 + 3);
                      v397 = (std::__shared_weak_count *)*((_QWORD *)v1 + 4);
                      if (v397)
                      {
                        v398 = (unint64_t *)&v397->__shared_owners_;
                        do
                          v399 = __ldxr(v398);
                        while (__stxr(v399 + 1, v398));
                        v400 = *((_DWORD *)v1 + 11);
                        *(_QWORD *)&v715 = 0x676C6F62736C7463;
                        DWORD2(v715) = 0;
                        v720[0] = 0;
                        v720[1] = 0;
                        v401 = (unint64_t *)&v397->__shared_owners_;
                        do
                          v402 = __ldxr(v401);
                        while (__stxr(v402 + 1, v401));
                      }
                      else
                      {
                        v400 = *((_DWORD *)v1 + 11);
                        *(_QWORD *)&v715 = 0x676C6F62736C7463;
                        DWORD2(v715) = 0;
                        v720[0] = 0;
                        v720[1] = 0;
                      }
                      strcpy((char *)&v719, "ctlsbolg");
                      BYTE9(v719) = 0;
                      WORD5(v719) = 0;
                      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, *(double *)&v719);
                      v403 = cf[0];
                      v404 = AMCP::Implementation::get_type_marker<std::function<int ()(void)>>();
                      if (v397)
                      {
                        v405 = (unint64_t *)&v397->__shared_owners_;
                        do
                          v406 = __ldxr(v405);
                        while (__stxr(v406 + 1, v405));
                      }
                      v725 = 0;
                      v407 = (char *)operator new(0x28uLL);
                      *(_QWORD *)v407 = &off_1E6989408;
                      *((_QWORD *)v407 + 1) = v396;
                      *((_QWORD *)v407 + 2) = v397;
                      if (v397)
                      {
                        v408 = (unint64_t *)&v397->__shared_owners_;
                        do
                          v409 = __ldxr(v408);
                        while (__stxr(v409 + 1, v408));
                      }
                      *((_DWORD *)v407 + 6) = v400;
                      *(_QWORD *)(v407 + 28) = 0x676C6F626C746E63;
                      *((_DWORD *)v407 + 9) = 0;
                      v725 = (int16x8_t *)v407;
                      memset(buf, 0, 40);
                      std::__function::__value_func<int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
                      *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<int ()(void)>>::dispatch;
                      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v403, v404, (AMCP *)buf);
                      if (*(_QWORD *)&buf[32])
                        v410.n128_f64[0] = (*(double (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
                      v411 = v725;
                      if (v725 == &v723)
                      {
                        v412 = 4;
                        v411 = &v723;
                      }
                      else
                      {
                        if (!v725)
                        {
LABEL_629:
                          if (v397)
                          {
                            v413 = (unint64_t *)&v397->__shared_owners_;
                            do
                              v414 = __ldaxr(v413);
                            while (__stlxr(v414 - 1, v413));
                            if (!v414)
                            {
                              ((void (*)(std::__shared_weak_count *, __n128))v397->__on_zero_shared)(v397, v410);
                              std::__shared_weak_count::__release_weak(v397);
                            }
                          }
                          AMCP::Core::Operation_Utilities::add_generic_property_getter<int>((uint64_t)cf[0]);
                          v415 = *(_OWORD *)cf;
                          cf[0] = 0;
                          cf[1] = 0;
                          v416 = (std::__shared_weak_count *)v720[1];
                          *(_OWORD *)v720 = v415;
                          if (v416)
                          {
                            v417 = (unint64_t *)&v416->__shared_owners_;
                            do
                              v418 = __ldaxr(v417);
                            while (__stlxr(v418 - 1, v417));
                            if (!v418)
                            {
                              ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
                              std::__shared_weak_count::__release_weak(v416);
                            }
                          }
                          v419 = (std::__shared_weak_count *)cf[1];
                          if (cf[1])
                          {
                            v420 = (unint64_t *)((char *)cf[1] + 8);
                            do
                              v421 = __ldaxr(v420);
                            while (__stlxr(v421 - 1, v420));
                            if (!v421)
                            {
                              ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
                              std::__shared_weak_count::__release_weak(v419);
                            }
                          }
                          if (v397)
                          {
                            v422 = (unint64_t *)&v397->__shared_owners_;
                            do
                              v423 = __ldaxr(v422);
                            while (__stlxr(v423 - 1, v422));
                            if (!v423)
                            {
                              ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
                              std::__shared_weak_count::__release_weak(v397);
                            }
                            v424 = v720[0];
                            v425 = (unint64_t *)&v397->__shared_owners_;
                            do
                              v426 = __ldxr(v425);
                            while (__stxr(v426 + 1, v425));
                            v427 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
                            v428 = (unint64_t *)&v397->__shared_owners_;
                            do
                              v429 = __ldxr(v428);
                            while (__stxr(v429 + 1, v428));
                          }
                          else
                          {
                            v424 = v720[0];
                            v427 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
                          }
                          v725 = 0;
                          v430 = (char *)operator new(0x28uLL);
                          *(_QWORD *)v430 = &off_1E6989488;
                          *((_QWORD *)v430 + 1) = v396;
                          *((_QWORD *)v430 + 2) = v397;
                          if (v397)
                          {
                            v431 = (unint64_t *)&v397->__shared_owners_;
                            do
                              v432 = __ldxr(v431);
                            while (__stxr(v432 + 1, v431));
                          }
                          *((_DWORD *)v430 + 6) = v400;
                          *(_QWORD *)(v430 + 28) = 0x676C6F626C746E63;
                          *((_DWORD *)v430 + 9) = 0;
                          v725 = (int16x8_t *)v430;
                          memset(buf, 0, 40);
                          std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
                          *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
                          std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v424, v427, (AMCP *)buf);
                          if (*(_QWORD *)&buf[32])
                            (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
                          v433 = v725;
                          if (v725 == &v723)
                          {
                            v434 = 4;
                            v433 = &v723;
                          }
                          else
                          {
                            if (!v725)
                              goto LABEL_665;
                            v434 = 5;
                          }
                          (*(void (**)(void))(v433->i64[0] + 8 * v434))();
LABEL_665:
                          if (v397)
                          {
                            v435 = (unint64_t *)&v397->__shared_owners_;
                            do
                              v436 = __ldaxr(v435);
                            while (__stlxr(v436 - 1, v435));
                            if (!v436)
                            {
                              ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
                              std::__shared_weak_count::__release_weak(v397);
                            }
                            do
                              v437 = __ldaxr(v435);
                            while (__stlxr(v437 - 1, v435));
                            if (!v437)
                            {
                              ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
                              std::__shared_weak_count::__release_weak(v397);
                            }
                          }
                          if (v720[0])
                            std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v720[0] + 10, v720);
                          v438 = (std::__shared_weak_count *)v720[1];
                          if (v720[1])
                          {
                            v439 = (unint64_t *)((char *)v720[1] + 8);
                            do
                              v440 = __ldaxr(v439);
                            while (__stlxr(v440 - 1, v439));
                            if (!v440)
                            {
                              ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
                              std::__shared_weak_count::__release_weak(v438);
                            }
                          }
                          if (v397)
                          {
                            v441 = (unint64_t *)&v397->__shared_owners_;
                            do
                              v442 = __ldaxr(v441);
                            while (__stlxr(v442 - 1, v441));
                            if (!v442)
                            {
                              ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
                              std::__shared_weak_count::__release_weak(v397);
                            }
                          }
                          v707 = *(_OWORD *)v2;
                          v443 = (std::__shared_weak_count *)*((_QWORD *)v1 + 4);
                          if (v443)
                          {
                            v444 = (unint64_t *)(*((_QWORD *)v1 + 4) + 8);
                            do
                              v445 = __ldxr(v444);
                            while (__stxr(v445 + 1, v444));
                          }
                          v446 = *((unsigned int *)v1 + 11);
                          v447 = *((unsigned int *)v1 + 15);
                          v448 = *(_OWORD *)((char *)v1 + 8);
                          v704 = v448;
                          v449 = (std::__shared_weak_count *)*((_QWORD *)v1 + 2);
                          if (*((_QWORD *)&v448 + 1))
                          {
                            v450 = (unint64_t *)(*((_QWORD *)&v448 + 1) + 8);
                            do
                              v451 = __ldxr(v450);
                            while (__stxr(v451 + 1, v450));
                          }
                          cf[0] = 0;
                          cf[1] = 0;
                          if (v443)
                          {
                            v452 = (unint64_t *)&v443->__shared_owners_;
                            do
                              v453 = __ldxr(v452);
                            while (__stxr(v453 + 1, v452));
                            v719 = v707;
                            do
                              v454 = __ldxr(v452);
                            while (__stxr(v454 + 1, v452));
                            if (!v449)
                            {
LABEL_701:
                              std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v720, 0, 1.58366008e190);
                              v457 = v720[0];
                              v458 = AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>();
                              v725 = 0;
                              v459 = (char *)operator new(0x20uLL);
                              *(_QWORD *)v459 = &off_1E6986FB8;
                              *(_OWORD *)(v459 + 8) = v707;
                              *((_DWORD *)v459 + 6) = v446;
                              v725 = (int16x8_t *)v459;
                              memset(buf, 0, 40);
                              std::__function::__value_func<CA::StreamDescription ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
                              *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<CA::StreamDescription ()(void)>>::dispatch;
                              std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v457, v458, (AMCP *)buf);
                              if (*(_QWORD *)&buf[32])
                                (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
                              v460 = v725;
                              if (v725 == &v723)
                              {
                                v461 = 4;
                                v460 = &v723;
                              }
                              else
                              {
                                if (!v725)
                                  goto LABEL_708;
                                v461 = 5;
                              }
                              (*(void (**)(void))(v460->i64[0] + 8 * v461))();
LABEL_708:
                              AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>((uint64_t)v457);
                              v462 = AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>();
                              v708 = v719;
                              v719 = 0uLL;
                              v725 = 0;
                              v463 = (char *)operator new(0x30uLL);
                              *(_QWORD *)v463 = &off_1E6987038;
                              *(_OWORD *)(v463 + 8) = v708;
                              *((_QWORD *)v463 + 3) = v446 | (v447 << 32);
                              *((_OWORD *)v463 + 2) = v704;
                              v725 = (int16x8_t *)v463;
                              memset(buf, 0, 40);
                              std::__function::__value_func<void ()(CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
                              *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(CA::StreamDescription const&)>>::dispatch;
                              std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v457, v462, (AMCP *)buf);
                              if (*(_QWORD *)&buf[32])
                                (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
                              v464 = v725;
                              if (v725 == &v723)
                              {
                                v465 = 4;
                                v464 = &v723;
                              }
                              else
                              {
                                if (!v725)
                                {
LABEL_715:
                                  AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>((uint64_t)v457);
                                  v466 = *(_OWORD *)v720;
                                  v720[0] = 0;
                                  v720[1] = 0;
                                  *(_OWORD *)cf = v466;
                                  v467 = (std::__shared_weak_count *)*((_QWORD *)&v719 + 1);
                                  if (*((_QWORD *)&v719 + 1))
                                  {
                                    v468 = (unint64_t *)(*((_QWORD *)&v719 + 1) + 8);
                                    do
                                      v469 = __ldaxr(v468);
                                    while (__stlxr(v469 - 1, v468));
                                    if (!v469)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
                                      std::__shared_weak_count::__release_weak(v467);
                                    }
                                  }
                                  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)cf[0] + 10, cf);
                                  v470 = (std::__shared_weak_count *)cf[1];
                                  if (cf[1])
                                  {
                                    v471 = (unint64_t *)((char *)cf[1] + 8);
                                    do
                                      v472 = __ldaxr(v471);
                                    while (__stlxr(v472 - 1, v471));
                                    if (!v472)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
                                      std::__shared_weak_count::__release_weak(v470);
                                    }
                                  }
                                  if (v449)
                                  {
                                    v473 = (unint64_t *)&v449->__shared_owners_;
                                    do
                                      v474 = __ldaxr(v473);
                                    while (__stlxr(v474 - 1, v473));
                                    if (!v474)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v449->__on_zero_shared)(v449);
                                      std::__shared_weak_count::__release_weak(v449);
                                    }
                                  }
                                  if (v443)
                                  {
                                    v475 = (unint64_t *)&v443->__shared_owners_;
                                    do
                                      v476 = __ldaxr(v475);
                                    while (__stlxr(v476 - 1, v475));
                                    if (!v476)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
                                      std::__shared_weak_count::__release_weak(v443);
                                    }
                                  }
                                  v477 = *((_QWORD *)v1 + 3);
                                  v46 = (std::__shared_weak_count *)*((_QWORD *)v1 + 4);
                                  if (v46)
                                  {
                                    v478 = (unint64_t *)&v46->__shared_owners_;
                                    do
                                      v479 = __ldxr(v478);
                                    while (__stxr(v479 + 1, v478));
                                    v480 = *((_DWORD *)v1 + 11);
                                    *(_QWORD *)&v715 = 0x676C6F62666D7423;
                                    DWORD2(v715) = 0;
                                    v720[0] = 0;
                                    v720[1] = 0;
                                    v481 = (unint64_t *)&v46->__shared_owners_;
                                    do
                                      v482 = __ldxr(v481);
                                    while (__stxr(v482 + 1, v481));
                                  }
                                  else
                                  {
                                    v480 = *((_DWORD *)v1 + 11);
                                    *(_QWORD *)&v715 = 0x676C6F62666D7423;
                                    DWORD2(v715) = 0;
                                    v720[0] = 0;
                                    v720[1] = 0;
                                  }
                                  strcpy((char *)&v719, "#tmfbolg");
                                  BYTE9(v719) = 0;
                                  WORD5(v719) = 0;
                                  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, *(double *)&v719);
                                  v483 = cf[0];
                                  v484 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>();
                                  if (v46)
                                  {
                                    v485 = (unint64_t *)&v46->__shared_owners_;
                                    do
                                      v486 = __ldxr(v485);
                                    while (__stxr(v486 + 1, v485));
                                  }
                                  v725 = 0;
                                  v487 = (char *)operator new(0x28uLL);
                                  *(_QWORD *)v487 = &off_1E6989508;
                                  *((_QWORD *)v487 + 1) = v477;
                                  *((_QWORD *)v487 + 2) = v46;
                                  if (v46)
                                  {
                                    v488 = (unint64_t *)&v46->__shared_owners_;
                                    do
                                      v489 = __ldxr(v488);
                                    while (__stxr(v489 + 1, v488));
                                  }
                                  *((_DWORD *)v487 + 6) = v480;
                                  *(_QWORD *)(v487 + 28) = 0x676C6F6270667461;
                                  *((_DWORD *)v487 + 9) = 0;
                                  v725 = (int16x8_t *)v487;
                                  memset(buf, 0, 40);
                                  std::__function::__value_func<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
                                  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>::dispatch;
                                  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v483, v484, (AMCP *)buf);
                                  if (*(_QWORD *)&buf[32])
                                    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
                                  v490 = v725;
                                  if (v725 == &v723)
                                  {
                                    v491 = 4;
                                    v490 = &v723;
                                  }
                                  else
                                  {
                                    if (!v725)
                                    {
LABEL_755:
                                      if (v46)
                                      {
                                        v492 = (unint64_t *)&v46->__shared_owners_;
                                        do
                                          v493 = __ldaxr(v492);
                                        while (__stlxr(v493 - 1, v492));
                                        if (!v493)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                                          std::__shared_weak_count::__release_weak(v46);
                                        }
                                      }
                                      AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>((uint64_t)cf[0]);
                                      v494 = *(_OWORD *)cf;
                                      cf[0] = 0;
                                      cf[1] = 0;
                                      v495 = (std::__shared_weak_count *)v720[1];
                                      *(_OWORD *)v720 = v494;
                                      if (v495)
                                      {
                                        v496 = (unint64_t *)&v495->__shared_owners_;
                                        do
                                          v497 = __ldaxr(v496);
                                        while (__stlxr(v497 - 1, v496));
                                        if (!v497)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v495->__on_zero_shared)(v495);
                                          std::__shared_weak_count::__release_weak(v495);
                                        }
                                      }
                                      v498 = (std::__shared_weak_count *)cf[1];
                                      if (cf[1])
                                      {
                                        v499 = (unint64_t *)((char *)cf[1] + 8);
                                        do
                                          v500 = __ldaxr(v499);
                                        while (__stlxr(v500 - 1, v499));
                                        if (!v500)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v498->__on_zero_shared)(v498);
                                          std::__shared_weak_count::__release_weak(v498);
                                        }
                                      }
                                      if (v46)
                                      {
                                        v501 = (unint64_t *)&v46->__shared_owners_;
                                        do
                                          v502 = __ldaxr(v501);
                                        while (__stlxr(v502 - 1, v501));
                                        if (!v502)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                                          std::__shared_weak_count::__release_weak(v46);
                                        }
                                        v503 = v720[0];
                                        v504 = (unint64_t *)&v46->__shared_owners_;
                                        do
                                          v505 = __ldxr(v504);
                                        while (__stxr(v505 + 1, v504));
                                        v506 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
                                        v507 = (unint64_t *)&v46->__shared_owners_;
                                        do
                                          v508 = __ldxr(v507);
                                        while (__stxr(v508 + 1, v507));
                                      }
                                      else
                                      {
                                        v503 = v720[0];
                                        v506 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
                                      }
                                      v725 = 0;
                                      v509 = (char *)operator new(0x28uLL);
                                      *(_QWORD *)v509 = &off_1E6989588;
                                      *((_QWORD *)v509 + 1) = v477;
                                      *((_QWORD *)v509 + 2) = v46;
                                      if (v46)
                                      {
                                        v510 = (unint64_t *)&v46->__shared_owners_;
                                        do
                                          v511 = __ldxr(v510);
                                        while (__stxr(v511 + 1, v510));
                                      }
                                      *((_DWORD *)v509 + 6) = v480;
                                      *(_QWORD *)(v509 + 28) = 0x676C6F6270667461;
                                      *((_DWORD *)v509 + 9) = 0;
                                      v725 = (int16x8_t *)v509;
                                      memset(buf, 0, 40);
                                      std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
                                      *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
                                      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v503, v506, (AMCP *)buf);
                                      if (*(_QWORD *)&buf[32])
                                        (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
                                      v512 = v725;
                                      if (v725 == &v723)
                                      {
                                        v513 = 4;
                                        v512 = &v723;
                                      }
                                      else
                                      {
                                        if (!v725)
                                          goto LABEL_791;
                                        v513 = 5;
                                      }
                                      (*(void (**)(void))(v512->i64[0] + 8 * v513))();
LABEL_791:
                                      if (v46)
                                      {
                                        v514 = (unint64_t *)&v46->__shared_owners_;
                                        do
                                          v515 = __ldaxr(v514);
                                        while (__stlxr(v515 - 1, v514));
                                        if (!v515)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                                          std::__shared_weak_count::__release_weak(v46);
                                        }
                                        do
                                          v516 = __ldaxr(v514);
                                        while (__stlxr(v516 - 1, v514));
                                        if (!v516)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                                          std::__shared_weak_count::__release_weak(v46);
                                        }
                                      }
                                      if (v720[0])
                                        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v720[0] + 10, v720);
                                      v517 = (std::__shared_weak_count *)v720[1];
                                      if (v720[1])
                                      {
                                        v518 = (unint64_t *)((char *)v720[1] + 8);
                                        do
                                          v519 = __ldaxr(v518);
                                        while (__stlxr(v519 - 1, v518));
                                        if (!v519)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
                                          std::__shared_weak_count::__release_weak(v517);
                                        }
                                      }
                                      if (v46)
                                      {
                                        v520 = (unint64_t *)&v46->__shared_owners_;
                                        do
                                          v48 = __ldaxr(v520);
                                        while (__stlxr(v48 - 1, v520));
                                        goto LABEL_62;
                                      }
                                      goto LABEL_66;
                                    }
                                    v491 = 5;
                                  }
                                  (*(void (**)(void))(v490->i64[0] + 8 * v491))();
                                  goto LABEL_755;
                                }
                                v465 = 5;
                              }
                              (*(void (**)(void))(v464->i64[0] + 8 * v465))();
                              goto LABEL_715;
                            }
                          }
                          else
                          {
                            v719 = (unint64_t)v707;
                            if (!v449)
                              goto LABEL_701;
                          }
                          v455 = (unint64_t *)&v449->__shared_owners_;
                          do
                            v456 = __ldxr(v455);
                          while (__stxr(v456 + 1, v455));
                          goto LABEL_701;
                        }
                        v412 = 5;
                      }
                      (*(void (**)(__n128))(v411->i64[0] + 8 * v412))(v410);
                      goto LABEL_629;
                    }
                    v365 = 5;
                  }
                  (*(void (**)(void))(v364->i64[0] + 8 * v365))();
                  goto LABEL_553;
                }
                v333 = 5;
              }
              (*(void (**)(void))(v332->i64[0] + 8 * v333))();
              goto LABEL_501;
            }
            v287 = 5;
          }
          (*(void (**)(void))(v286->i64[0] + 8 * v287))();
          goto LABEL_425;
        }
        v241 = 5;
      }
      (*(void (**)(void))(v240->i64[0] + 8 * v241))();
      goto LABEL_349;
    }
    if (!AMCP::is_base_of((AMCP *)0x736C6472, *((_DWORD *)v1 + 17)))
    {
      if (AMCP::is_base_of((AMCP *)0x6C65766C, *((_DWORD *)v1 + 17)))
      {
        AMCP::ASP::PlugIn_Object::populate_volume_control_core((uint64_t)v1, v3, (uint64_t)__p);
      }
      else if (AMCP::is_base_of((AMCP *)0x746F676C, *((_DWORD *)v1 + 17)))
      {
        AMCP::ASP::PlugIn_Object::populate_BOOLean_control_core((uint64_t)v1, v3, (uint64_t)__p);
      }
      else if (AMCP::is_base_of((AMCP *)0x736C6374, *((_DWORD *)v1 + 17)))
      {
        AMCP::ASP::PlugIn_Object::populate_selector_control_core((uint64_t)v1, v3, (uint64_t)__p);
      }
      else if (AMCP::is_base_of((AMCP *)0x7370616E, *((_DWORD *)v1 + 17)))
      {
        AMCP::ASP::PlugIn_Object::populate_stereo_pan_control_core((uint64_t)v1, v3, (uint64_t)__p);
      }
      else if (AMCP::is_base_of((AMCP *)0x6163746C, *((_DWORD *)v1 + 17)))
      {
        AMCP::ASP::PlugIn_Object::populate_control_core((uint64_t)v1, v3, (uint64_t)__p);
      }
      else if (AMCP::is_base_of((AMCP *)0x61636C6B, *((_DWORD *)v1 + 17)))
      {
        AMCP::ASP::PlugIn_Object::populate_clock_core((uint64_t)v1, v3, (uint64_t)__p);
      }
      else if (AMCP::is_base_of((AMCP *)0x616F626A, *((_DWORD *)v1 + 17)))
      {
        AMCP::ASP::PlugIn_Object::populate_object_core((uint64_t)v1, v3, (uint64_t)__p);
      }
      goto LABEL_66;
    }
    AMCP::ASP::PlugIn_Object::populate_control_core((uint64_t)v1, v3, (uint64_t)__p);
    v115 = *((_QWORD *)v1 + 3);
    v114 = (std::__shared_weak_count *)*((_QWORD *)v1 + 4);
    if (v114)
    {
      v116 = (unint64_t *)&v114->__shared_owners_;
      do
        v117 = __ldxr(v116);
      while (__stxr(v117 + 1, v116));
      v118 = *((_DWORD *)v1 + 11);
      *(_QWORD *)&v715 = 0x676C6F6273647276;
      DWORD2(v715) = 0;
      v720[0] = 0;
      v720[1] = 0;
      v119 = (unint64_t *)&v114->__shared_owners_;
      do
        v120 = __ldxr(v119);
      while (__stxr(v120 + 1, v119));
      do
        v121 = __ldxr(v119);
      while (__stxr(v121 + 1, v119));
      v122 = v114;
    }
    else
    {
      v122 = 0;
      v118 = *((_DWORD *)v1 + 11);
      *(_QWORD *)&v715 = 0x676C6F6273647276;
      DWORD2(v715) = 0;
      v720[0] = 0;
      v720[1] = 0;
    }
    strcpy((char *)&v719, "vrdsbolg");
    BYTE9(v719) = 0;
    WORD5(v719) = 0;
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, *(double *)&v719);
    v586 = cf[0];
    v587 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
    if (v114)
    {
      v588 = (unint64_t *)&v114->__shared_owners_;
      do
        v589 = __ldxr(v588);
      while (__stxr(v589 + 1, v588));
    }
    v725 = 0;
    v590 = (char *)operator new(0x28uLL);
    *(_QWORD *)v590 = &off_1E6989888;
    *((_QWORD *)v590 + 1) = v115;
    *((_QWORD *)v590 + 2) = v114;
    if (v114)
    {
      v591 = (unint64_t *)&v114->__shared_owners_;
      do
        v592 = __ldxr(v591);
      while (__stxr(v592 + 1, v591));
    }
    *((_DWORD *)v590 + 6) = v118;
    *(_QWORD *)(v590 + 28) = 0x676C6F6273647276;
    *((_DWORD *)v590 + 9) = 0;
    v725 = (int16x8_t *)v590;
    memset(buf, 0, 40);
    std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
    *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v586, v587, (AMCP *)buf);
    if (*(_QWORD *)&buf[32])
      (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
    v593 = v725;
    if (v725 == &v723)
    {
      v594 = 4;
      v593 = &v723;
    }
    else
    {
      if (!v725)
      {
LABEL_942:
        if (v114)
        {
          v595 = (unint64_t *)&v114->__shared_owners_;
          do
            v596 = __ldaxr(v595);
          while (__stlxr(v596 - 1, v595));
          if (!v596)
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
        }
        v597 = cf[0];
        AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>((uint64_t)cf[0]);
        v598 = AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>();
        if (v122)
        {
          v599 = (unint64_t *)&v122->__shared_owners_;
          do
            v600 = __ldxr(v599);
          while (__stxr(v600 + 1, v599));
        }
        v725 = 0;
        v601 = (char *)operator new(0x28uLL);
        *(_QWORD *)v601 = &off_1E6989908;
        *((_QWORD *)v601 + 1) = v115;
        *((_QWORD *)v601 + 2) = v122;
        if (v122)
        {
          v602 = (unint64_t *)&v122->__shared_owners_;
          do
            v603 = __ldxr(v602);
          while (__stxr(v603 + 1, v602));
        }
        *((_DWORD *)v601 + 6) = v118;
        *(_QWORD *)(v601 + 28) = 0x676C6F6273647276;
        *((_DWORD *)v601 + 9) = 0;
        v725 = (int16x8_t *)v601;
        memset(buf, 0, 40);
        std::__function::__value_func<void ()(unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
        *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(unsigned int const&)>>::dispatch;
        std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v597, v598, (AMCP *)buf);
        if (*(_QWORD *)&buf[32])
          (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
        v604 = v725;
        if (v725 == &v723)
        {
          v605 = 4;
          v604 = &v723;
        }
        else
        {
          if (!v725)
          {
LABEL_960:
            if (v122)
            {
              v606 = (unint64_t *)&v122->__shared_owners_;
              do
                v607 = __ldaxr(v606);
              while (__stlxr(v607 - 1, v606));
              if (!v607)
              {
                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                std::__shared_weak_count::__release_weak(v122);
              }
            }
            AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>((uint64_t)cf[0]);
            v608 = *(_OWORD *)cf;
            cf[0] = 0;
            cf[1] = 0;
            v609 = (std::__shared_weak_count *)v720[1];
            *(_OWORD *)v720 = v608;
            if (v609)
            {
              v610 = (unint64_t *)&v609->__shared_owners_;
              do
                v611 = __ldaxr(v610);
              while (__stlxr(v611 - 1, v610));
              if (!v611)
              {
                ((void (*)(std::__shared_weak_count *))v609->__on_zero_shared)(v609);
                std::__shared_weak_count::__release_weak(v609);
              }
            }
            v612 = (std::__shared_weak_count *)cf[1];
            if (cf[1])
            {
              v613 = (unint64_t *)((char *)cf[1] + 8);
              do
                v614 = __ldaxr(v613);
              while (__stlxr(v614 - 1, v613));
              if (!v614)
              {
                ((void (*)(std::__shared_weak_count *))v612->__on_zero_shared)(v612);
                std::__shared_weak_count::__release_weak(v612);
              }
            }
            if (v122)
            {
              v615 = (unint64_t *)&v122->__shared_owners_;
              do
                v616 = __ldaxr(v615);
              while (__stlxr(v616 - 1, v615));
              if (!v616)
              {
                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                std::__shared_weak_count::__release_weak(v122);
              }
            }
            if (v114)
            {
              v617 = (unint64_t *)&v114->__shared_owners_;
              do
                v618 = __ldaxr(v617);
              while (__stlxr(v618 - 1, v617));
              if (!v618)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
              v619 = v720[0];
              v620 = (unint64_t *)&v114->__shared_owners_;
              do
                v621 = __ldxr(v620);
              while (__stxr(v621 + 1, v620));
              Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
              v623 = (unint64_t *)&v114->__shared_owners_;
              do
                v624 = __ldxr(v623);
              while (__stxr(v624 + 1, v623));
            }
            else
            {
              v619 = v720[0];
              Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
            }
            v725 = 0;
            v625 = (char *)operator new(0x28uLL);
            *(_QWORD *)v625 = &off_1E6989988;
            *((_QWORD *)v625 + 1) = v115;
            *((_QWORD *)v625 + 2) = v114;
            if (v114)
            {
              v626 = (unint64_t *)&v114->__shared_owners_;
              do
                v627 = __ldxr(v626);
              while (__stxr(v627 + 1, v626));
            }
            *((_DWORD *)v625 + 6) = v118;
            *(_QWORD *)(v625 + 28) = 0x676C6F6273647276;
            *((_DWORD *)v625 + 9) = 0;
            v725 = (int16x8_t *)v625;
            memset(buf, 0, 40);
            std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
            *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
            std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v619, Is_Property_Settable, (AMCP *)buf);
            if (*(_QWORD *)&buf[32])
              (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
            v628 = v725;
            if (v725 == &v723)
            {
              v629 = 4;
              v628 = &v723;
            }
            else
            {
              if (!v725)
                goto LABEL_1001;
              v629 = 5;
            }
            (*(void (**)(void))(v628->i64[0] + 8 * v629))();
LABEL_1001:
            if (v114)
            {
              v630 = (unint64_t *)&v114->__shared_owners_;
              do
                v631 = __ldaxr(v630);
              while (__stlxr(v631 - 1, v630));
              if (!v631)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
              do
                v632 = __ldaxr(v630);
              while (__stlxr(v632 - 1, v630));
              if (!v632)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
              v633 = v720[0];
              v634 = (unint64_t *)&v114->__shared_owners_;
              do
                v635 = __ldxr(v634);
              while (__stxr(v635 + 1, v634));
              v636 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
              v637 = (unint64_t *)&v114->__shared_owners_;
              do
                v638 = __ldxr(v637);
              while (__stxr(v638 + 1, v637));
            }
            else
            {
              v633 = v720[0];
              v636 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
            }
            v725 = 0;
            v639 = (char *)operator new(0x28uLL);
            *(_QWORD *)v639 = &off_1E6989A08;
            *((_QWORD *)v639 + 1) = v115;
            *((_QWORD *)v639 + 2) = v114;
            if (v114)
            {
              v640 = (unint64_t *)&v114->__shared_owners_;
              do
                v641 = __ldxr(v640);
              while (__stxr(v641 + 1, v640));
            }
            *((_DWORD *)v639 + 6) = v118;
            *(_QWORD *)(v639 + 28) = 0x676C6F6273647276;
            *((_DWORD *)v639 + 9) = 0;
            v725 = (int16x8_t *)v639;
            memset(buf, 0, 40);
            std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
            *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
            std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v633, v636, (AMCP *)buf);
            if (*(_QWORD *)&buf[32])
              (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
            v642 = v725;
            if (v725 == &v723)
            {
              v643 = 4;
              v642 = &v723;
            }
            else
            {
              if (!v725)
                goto LABEL_1025;
              v643 = 5;
            }
            (*(void (**)(void))(v642->i64[0] + 8 * v643))();
LABEL_1025:
            if (v114)
            {
              v644 = (unint64_t *)&v114->__shared_owners_;
              do
                v645 = __ldaxr(v644);
              while (__stlxr(v645 - 1, v644));
              if (!v645)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
              do
                v646 = __ldaxr(v644);
              while (__stlxr(v646 - 1, v644));
              if (!v646)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
            }
            if (v720[0])
              std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v720[0] + 10, v720);
            v647 = (std::__shared_weak_count *)v720[1];
            if (v720[1])
            {
              v648 = (unint64_t *)((char *)v720[1] + 8);
              do
                v649 = __ldaxr(v648);
              while (__stlxr(v649 - 1, v648));
              if (!v649)
              {
                ((void (*)(std::__shared_weak_count *))v647->__on_zero_shared)(v647);
                std::__shared_weak_count::__release_weak(v647);
              }
            }
            if (v114)
            {
              v650 = (unint64_t *)&v114->__shared_owners_;
              do
                v651 = __ldaxr(v650);
              while (__stlxr(v651 - 1, v650));
              if (!v651)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
            }
            v652 = *((_QWORD *)v1 + 3);
            v46 = (std::__shared_weak_count *)*((_QWORD *)v1 + 4);
            if (v46)
            {
              v653 = (unint64_t *)&v46->__shared_owners_;
              do
                v654 = __ldxr(v653);
              while (__stxr(v654 + 1, v653));
              v655 = v1;
              v656 = *((_DWORD *)v1 + 11);
              *(_QWORD *)&v715 = 0x676C6F6273647272;
              DWORD2(v715) = 0;
              v720[0] = 0;
              v720[1] = 0;
              v657 = (unint64_t *)&v46->__shared_owners_;
              do
                v658 = __ldxr(v657);
              while (__stxr(v658 + 1, v657));
            }
            else
            {
              v655 = v1;
              v656 = *((_DWORD *)v1 + 11);
              *(_QWORD *)&v715 = 0x676C6F6273647272;
              DWORD2(v715) = 0;
              v720[0] = 0;
              v720[1] = 0;
            }
            strcpy((char *)&v719, "rrdsbolg");
            BYTE9(v719) = 0;
            WORD5(v719) = 0;
            std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, *(double *)&v719);
            v659 = cf[0];
            v660 = AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>();
            if (v46)
            {
              v661 = (unint64_t *)&v46->__shared_owners_;
              do
                v662 = __ldxr(v661);
              while (__stxr(v662 + 1, v661));
            }
            v725 = 0;
            v663 = (char *)operator new(0x28uLL);
            *(_QWORD *)v663 = &off_1E6989A88;
            *((_QWORD *)v663 + 1) = v652;
            *((_QWORD *)v663 + 2) = v46;
            if (v46)
            {
              v664 = (unint64_t *)&v46->__shared_owners_;
              do
                v665 = __ldxr(v664);
              while (__stxr(v665 + 1, v664));
            }
            *((_DWORD *)v663 + 6) = v656;
            *(_QWORD *)(v663 + 28) = 0x676C6F6273647272;
            *((_DWORD *)v663 + 9) = 0;
            v725 = (int16x8_t *)v663;
            memset(buf, 0, 40);
            std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
            *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>::dispatch;
            std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v659, v660, (AMCP *)buf);
            if (*(_QWORD *)&buf[32])
              (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
            v666 = v725;
            if (v725 == &v723)
            {
              v667 = 4;
              v666 = &v723;
            }
            else
            {
              if (!v725)
              {
LABEL_1065:
                if (v46)
                {
                  v668 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v669 = __ldaxr(v668);
                  while (__stlxr(v669 - 1, v668));
                  if (!v669)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                }
                AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>((uint64_t)cf[0]);
                v670 = *(_OWORD *)cf;
                cf[0] = 0;
                cf[1] = 0;
                v671 = (std::__shared_weak_count *)v720[1];
                *(_OWORD *)v720 = v670;
                if (v671)
                {
                  v672 = (unint64_t *)&v671->__shared_owners_;
                  do
                    v673 = __ldaxr(v672);
                  while (__stlxr(v673 - 1, v672));
                  if (!v673)
                  {
                    ((void (*)(std::__shared_weak_count *))v671->__on_zero_shared)(v671);
                    std::__shared_weak_count::__release_weak(v671);
                  }
                }
                v674 = (std::__shared_weak_count *)cf[1];
                if (cf[1])
                {
                  v675 = (unint64_t *)((char *)cf[1] + 8);
                  do
                    v676 = __ldaxr(v675);
                  while (__stlxr(v676 - 1, v675));
                  if (!v676)
                  {
                    ((void (*)(std::__shared_weak_count *))v674->__on_zero_shared)(v674);
                    std::__shared_weak_count::__release_weak(v674);
                  }
                }
                if (v46)
                {
                  v677 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v678 = __ldaxr(v677);
                  while (__stlxr(v678 - 1, v677));
                  if (!v678)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                  v679 = v720[0];
                  v680 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v681 = __ldxr(v680);
                  while (__stxr(v681 + 1, v680));
                  v682 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
                  v683 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v684 = __ldxr(v683);
                  while (__stxr(v684 + 1, v683));
                }
                else
                {
                  v679 = v720[0];
                  v682 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
                }
                v725 = 0;
                v685 = (char *)operator new(0x28uLL);
                *(_QWORD *)v685 = &off_1E6989B08;
                *((_QWORD *)v685 + 1) = v652;
                *((_QWORD *)v685 + 2) = v46;
                if (v46)
                {
                  v686 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v687 = __ldxr(v686);
                  while (__stxr(v687 + 1, v686));
                }
                *((_DWORD *)v685 + 6) = v656;
                *(_QWORD *)(v685 + 28) = 0x676C6F6273647272;
                *((_DWORD *)v685 + 9) = 0;
                v725 = (int16x8_t *)v685;
                memset(buf, 0, 40);
                std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
                *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
                std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v679, v682, (AMCP *)buf);
                if (*(_QWORD *)&buf[32])
                  (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
                v688 = v725;
                v1 = v655;
                if (v725 == &v723)
                {
                  v689 = 4;
                  v688 = &v723;
                }
                else
                {
                  if (!v725)
                    goto LABEL_1101;
                  v689 = 5;
                }
                (*(void (**)(void))(v688->i64[0] + 8 * v689))();
LABEL_1101:
                if (v46)
                {
                  v690 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v691 = __ldaxr(v690);
                  while (__stlxr(v691 - 1, v690));
                  if (!v691)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                  do
                    v692 = __ldaxr(v690);
                  while (__stlxr(v692 - 1, v690));
                  if (!v692)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                }
                if (v720[0])
                  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v720[0] + 10, v720);
                v693 = (std::__shared_weak_count *)v720[1];
                if (v720[1])
                {
                  v694 = (unint64_t *)((char *)v720[1] + 8);
                  do
                    v695 = __ldaxr(v694);
                  while (__stlxr(v695 - 1, v694));
                  if (!v695)
                  {
                    ((void (*)(std::__shared_weak_count *))v693->__on_zero_shared)(v693);
                    std::__shared_weak_count::__release_weak(v693);
                  }
                }
                if (v46)
                {
                  v696 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v48 = __ldaxr(v696);
                  while (__stlxr(v48 - 1, v696));
                  goto LABEL_62;
                }
                goto LABEL_66;
              }
              v667 = 5;
            }
            (*(void (**)(void))(v666->i64[0] + 8 * v667))();
            goto LABEL_1065;
          }
          v605 = 5;
        }
        (*(void (**)(void))(v604->i64[0] + 8 * v605))();
        goto LABEL_960;
      }
      v594 = 5;
    }
    (*(void (**)(void))(v593->i64[0] + 8 * v594))();
    goto LABEL_942;
  }
  AMCP::ASP::PlugIn_Object::populate_clock_core((uint64_t)v1, v3, (uint64_t)__p);
  v702 = (__int128 *)((char *)v1 + 24);
  v55 = *((_QWORD *)v1 + 3);
  v54 = (std::__shared_weak_count *)*((_QWORD *)v1 + 4);
  if (v54)
  {
    v56 = (unint64_t *)&v54->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v58 = 0;
  v59 = (unint64_t *)&v54->__shared_owners_;
  v706 = v1;
  v60 = *((_DWORD *)v1 + 11);
  v61 = 0x676C6F6273616674;
  v62 = 1;
  do
  {
    v63 = v62;
    LODWORD(v53) = AMCP::Property_Traits<1935763060u>::k_valid_scopes[v58];
    v720[0] = 0;
    v720[1] = 0;
    if ((v62 & 1) != 0)
      v64 = 0x696E707473616674;
    else
      v64 = v61;
    if (v54)
    {
      do
        v65 = __ldxr(v59);
      while (__stxr(v65 + 1, v59));
    }
    LODWORD(v719) = 1935763060;
    *(_QWORD *)((char *)&v719 + 4) = v53;
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, *(double *)&v719);
    v66 = cf[0];
    v67 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
    if (v54)
    {
      do
        v68 = __ldxr(v59);
      while (__stxr(v68 + 1, v59));
    }
    v725 = 0;
    v69 = (char *)operator new(0x28uLL);
    *(_QWORD *)v69 = &off_1E6988C88;
    *((_QWORD *)v69 + 1) = v55;
    *((_QWORD *)v69 + 2) = v54;
    if (v54)
    {
      do
        v70 = __ldxr(v59);
      while (__stxr(v70 + 1, v59));
    }
    *((_DWORD *)v69 + 6) = v60;
    *(_QWORD *)(v69 + 28) = v64;
    *((_DWORD *)v69 + 9) = 0;
    v725 = (int16x8_t *)v69;
    memset(buf, 0, 40);
    std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
    *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v66, v67, (AMCP *)buf);
    if (*(_QWORD *)&buf[32])
      (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
    v71 = v725;
    if (v725 == &v723)
    {
      v71 = &v723;
      v72 = 4;
      goto LABEL_94;
    }
    if (v725)
    {
      v72 = 5;
LABEL_94:
      (*(void (**)(void))(v71->i64[0] + 8 * v72))();
    }
    if (v54)
    {
      do
        v73 = __ldaxr(v59);
      while (__stlxr(v73 - 1, v59));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>((uint64_t)cf[0]);
    v74 = *(_OWORD *)cf;
    cf[0] = 0;
    cf[1] = 0;
    v75 = (std::__shared_weak_count *)v720[1];
    *(_OWORD *)v720 = v74;
    if (v75)
    {
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    v78 = (std::__shared_weak_count *)cf[1];
    if (!cf[1])
      goto LABEL_108;
    v79 = (unint64_t *)((char *)cf[1] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
      if (!v54)
      {
LABEL_118:
        v82 = v720[0];
        v84 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
        goto LABEL_119;
      }
    }
    else
    {
LABEL_108:
      if (!v54)
        goto LABEL_118;
    }
    do
      v81 = __ldaxr(v59);
    while (__stlxr(v81 - 1, v59));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
    v82 = v720[0];
    do
      v83 = __ldxr(v59);
    while (__stxr(v83 + 1, v59));
    v84 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    do
      v85 = __ldxr(v59);
    while (__stxr(v85 + 1, v59));
LABEL_119:
    v725 = 0;
    v86 = (char *)operator new(0x28uLL);
    *(_QWORD *)v86 = &off_1E6988D08;
    *((_QWORD *)v86 + 1) = v55;
    *((_QWORD *)v86 + 2) = v54;
    if (v54)
    {
      do
        v87 = __ldxr(v59);
      while (__stxr(v87 + 1, v59));
    }
    *((_DWORD *)v86 + 6) = v60;
    *(_QWORD *)(v86 + 28) = v64;
    *((_DWORD *)v86 + 9) = 0;
    v725 = (int16x8_t *)v86;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
    *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v82, v84, (AMCP *)buf);
    if (*(_QWORD *)&buf[32])
      (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
    v88 = v725;
    if (v725 == &v723)
    {
      v88 = &v723;
      v89 = 4;
    }
    else
    {
      if (!v725)
        goto LABEL_128;
      v89 = 5;
    }
    (*(void (**)(void))(v88->i64[0] + 8 * v89))();
LABEL_128:
    if (v54)
    {
      do
        v90 = __ldaxr(v59);
      while (__stlxr(v90 - 1, v59));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
      do
        v91 = __ldaxr(v59);
      while (__stlxr(v91 - 1, v59));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    if (v720[0])
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v720[0] + 10, v720);
    v92 = (std::__shared_weak_count *)v720[1];
    if (v720[1])
    {
      v93 = (unint64_t *)((char *)v720[1] + 8);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    v62 = 0;
    v61 = 0x6F75747073616674;
    v58 = 1;
  }
  while ((v63 & 1) != 0);
  if (v54)
  {
    do
      v95 = __ldaxr(v59);
    while (__stlxr(v95 - 1, v59));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v96 = *((_QWORD *)v1 + 3);
  v97 = (std::__shared_weak_count *)*((_QWORD *)v1 + 4);
  if (v97)
  {
    v98 = (unint64_t *)&v97->__shared_owners_;
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
  }
  v100 = *((_DWORD *)v1 + 11);
  v101 = *((unsigned int *)v1 + 15);
  v102 = (std::__shared_weak_count *)*((_QWORD *)v1 + 2);
  *(_QWORD *)&v719 = *((_QWORD *)v1 + 1);
  *((_QWORD *)&v719 + 1) = v102;
  if (v102)
  {
    v103 = (unint64_t *)&v102->__shared_owners_;
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
    AMCP::ASP::make_channel_layout_property(0x696E7074u, v96, (uint64_t)v97, v100, v101, &v719, (uint64_t)__p);
    v105 = (unint64_t *)&v102->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  else
  {
    AMCP::ASP::make_channel_layout_property(0x696E7074u, v96, (uint64_t)v97, v100, v101, &v719, (uint64_t)__p);
  }
  if (v97)
  {
    v123 = (unint64_t *)&v97->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v125 = *((_QWORD *)v1 + 3);
  v126 = (std::__shared_weak_count *)*((_QWORD *)v1 + 4);
  if (v126)
  {
    v127 = (unint64_t *)&v126->__shared_owners_;
    do
      v128 = __ldxr(v127);
    while (__stxr(v128 + 1, v127));
  }
  v129 = *((_DWORD *)v1 + 11);
  v130 = *((unsigned int *)v1 + 15);
  v131 = (std::__shared_weak_count *)*((_QWORD *)v1 + 2);
  *(_QWORD *)&v715 = *((_QWORD *)v1 + 1);
  *((_QWORD *)&v715 + 1) = v131;
  if (v131)
  {
    v132 = (unint64_t *)&v131->__shared_owners_;
    do
      v133 = __ldxr(v132);
    while (__stxr(v133 + 1, v132));
    AMCP::ASP::make_channel_layout_property(0x6F757470u, v125, (uint64_t)v126, v129, v130, &v715, (uint64_t)__p);
    v134 = (unint64_t *)&v131->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  else
  {
    AMCP::ASP::make_channel_layout_property(0x6F757470u, v125, (uint64_t)v126, v129, v130, &v715, (uint64_t)__p);
  }
  if (v126)
  {
    v136 = (unint64_t *)&v126->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v138 = *((_QWORD *)v1 + 3);
  v139 = (std::__shared_weak_count *)*((_QWORD *)v1 + 4);
  if (v139)
  {
    v140 = (unint64_t *)&v139->__shared_owners_;
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
    AMCP::ASP::make_default_device_property(1768845428, v138, (uint64_t)v139, *((_DWORD *)v1 + 11), (uint64_t)__p);
    v142 = (unint64_t *)&v139->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  else
  {
    AMCP::ASP::make_default_device_property(1768845428, v138, 0, *((_DWORD *)v1 + 11), (uint64_t)__p);
  }
  v144 = *((_QWORD *)v1 + 3);
  v145 = (std::__shared_weak_count *)*((_QWORD *)v1 + 4);
  if (v145)
  {
    v146 = (unint64_t *)&v145->__shared_owners_;
    do
      v147 = __ldxr(v146);
    while (__stxr(v147 + 1, v146));
    AMCP::ASP::make_default_device_property(1869968496, v144, (uint64_t)v145, *((_DWORD *)v1 + 11), (uint64_t)__p);
    v148 = (unint64_t *)&v145->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  else
  {
    AMCP::ASP::make_default_device_property(1869968496, v144, 0, *((_DWORD *)v1 + 11), (uint64_t)__p);
  }
  v150 = *v702;
  v703 = *v702;
  v151 = (std::__shared_weak_count *)*((_QWORD *)v1 + 4);
  if (v151)
  {
    v152 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v153 = __ldxr(v152);
    while (__stxr(v153 + 1, v152));
    v154 = *((_DWORD *)v1 + 11);
    v155 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    cf[0] = 0;
    cf[1] = 0;
    do
      v156 = __ldxr(v155);
    while (__stxr(v156 + 1, v155));
  }
  else
  {
    v154 = *((_DWORD *)v1 + 11);
    cf[0] = 0;
    cf[1] = 0;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v720, 0, 8.13208706e228);
  v157 = v720[0];
  v158 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v725 = 0;
  v159 = (char *)operator new(0x20uLL);
  *(_QWORD *)v159 = &off_1E6986F38;
  *(_OWORD *)(v159 + 8) = v703;
  *((_DWORD *)v159 + 6) = v154;
  v725 = (int16x8_t *)v159;
  memset(buf, 0, 40);
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v157, v158, (AMCP *)buf);
  if (*(_QWORD *)&buf[32])
    v160.n128_f64[0] = (*(double (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  v161 = v725;
  if (v725 == &v723)
  {
    v162 = 4;
    v161 = &v723;
LABEL_223:
    (*(void (**)(__n128))(v161->i64[0] + 8 * v162))(v160);
  }
  else if (v725)
  {
    v162 = 5;
    goto LABEL_223;
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>((uint64_t)v157);
  *(_OWORD *)cf = *(_OWORD *)v720;
  v705 = (std::__shared_weak_count *)v720[1];
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v720[0] + 10, cf);
  if (v705)
  {
    v163 = (unint64_t *)&v705->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v705->__on_zero_shared)(v705);
      std::__shared_weak_count::__release_weak(v705);
    }
  }
  if (v151)
  {
    v165 = (unint64_t *)&v151->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v167 = *((_DWORD *)v1 + 15);
  *(_QWORD *)buf = *(_QWORD *)(*((_QWORD *)v1 + 1) + 16);
  *(_DWORD *)&buf[8] = v167;
  *(_DWORD *)&buf[12] = 1634956402;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>(v723.i64, 0, (__int128 *)buf, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v723.i64[0] + 40), &v723);
  v168 = (std::__shared_weak_count *)v723.i64[1];
  if (v723.i64[1])
  {
    v169 = (unint64_t *)(v723.i64[1] + 8);
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = *((_DWORD *)v1 + 15);
  *(_QWORD *)buf = *(_QWORD *)(*((_QWORD *)v1 + 1) + 16);
  *(_DWORD *)&buf[8] = v171;
  *(_OWORD *)&buf[12] = xmmword_1B5D68B60;
  *(_OWORD *)&buf[28] = xmmword_1B5D68B70;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>(v723.i64, 0, (uint64_t *)buf, 7.28117508e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v723.i64[0] + 40), &v723);
  v172 = (std::__shared_weak_count *)v723.i64[1];
  if (v723.i64[1])
  {
    v173 = (unint64_t *)(v723.i64[1] + 8);
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v175 = *((_DWORD *)v1 + 15);
  *(_QWORD *)buf = *(_QWORD *)(*((_QWORD *)v1 + 1) + 16);
  *(_DWORD *)&buf[8] = v175;
  *(_OWORD *)&buf[12] = xmmword_1B5D68B60;
  *(_OWORD *)&buf[28] = xmmword_1B5D68B80;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>(v723.i64, 0, (uint64_t *)buf, 8.13208706e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v723.i64[0] + 40), &v723);
  v176 = (std::__shared_weak_count *)v723.i64[1];
  if (v723.i64[1])
  {
    v177 = (unint64_t *)(v723.i64[1] + 8);
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = *((_QWORD *)v1 + 3);
  v180 = (std::__shared_weak_count *)*((_QWORD *)v1 + 4);
  if (v180)
  {
    v181 = (unint64_t *)&v180->__shared_owners_;
    do
      v182 = __ldxr(v181);
    while (__stxr(v182 + 1, v181));
    v183 = *((_DWORD *)v1 + 11);
    v716 = 0x676C6F6264646573;
    v717 = 0;
    v720[0] = 0;
    v720[1] = 0;
    v184 = (unint64_t *)&v180->__shared_owners_;
    do
      v185 = __ldxr(v184);
    while (__stxr(v185 + 1, v184));
  }
  else
  {
    v183 = *((_DWORD *)v1 + 11);
    v716 = 0x676C6F6264646573;
    v717 = 0;
    v720[0] = 0;
    v720[1] = 0;
  }
  strcpy((char *)v718, "seddbolg");
  BYTE1(v718[1]) = 0;
  WORD1(v718[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, v718[0]);
  v186 = cf[0];
  v187 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>();
  if (v180)
  {
    v188 = (unint64_t *)&v180->__shared_owners_;
    do
      v189 = __ldxr(v188);
    while (__stxr(v189 + 1, v188));
  }
  v725 = 0;
  v190 = (char *)operator new(0x28uLL);
  *(_QWORD *)v190 = &off_1E6988D88;
  *((_QWORD *)v190 + 1) = v179;
  *((_QWORD *)v190 + 2) = v180;
  if (v180)
  {
    v191 = (unint64_t *)&v180->__shared_owners_;
    do
      v192 = __ldxr(v191);
    while (__stxr(v192 + 1, v191));
  }
  *((_DWORD *)v190 + 6) = v183;
  *(_QWORD *)(v190 + 28) = 0x676C6F6264646573;
  *((_DWORD *)v190 + 9) = 0;
  v725 = (int16x8_t *)v190;
  memset(buf, 0, 40);
  std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::DictionaryRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v186, v187, (AMCP *)buf);
  if (*(_QWORD *)&buf[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  v193 = v725;
  if (v725 == &v723)
  {
    v194 = 4;
    v193 = &v723;
LABEL_268:
    (*(void (**)(void))(v193->i64[0] + 8 * v194))();
  }
  else if (v725)
  {
    v194 = 5;
    goto LABEL_268;
  }
  if (v180)
  {
    v195 = (unint64_t *)&v180->__shared_owners_;
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>((uint64_t)cf[0]);
  v197 = *(_OWORD *)cf;
  cf[0] = 0;
  cf[1] = 0;
  v198 = (std::__shared_weak_count *)v720[1];
  *(_OWORD *)v720 = v197;
  if (v198)
  {
    v199 = (unint64_t *)&v198->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v202 = (unint64_t *)((char *)cf[1] + 8);
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  if (v180)
  {
    v204 = (unint64_t *)&v180->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
    v206 = v720[0];
    v207 = (unint64_t *)&v180->__shared_owners_;
    do
      v208 = __ldxr(v207);
    while (__stxr(v208 + 1, v207));
    v209 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    v210 = (unint64_t *)&v180->__shared_owners_;
    do
      v211 = __ldxr(v210);
    while (__stxr(v211 + 1, v210));
  }
  else
  {
    v206 = v720[0];
    v209 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  v725 = 0;
  v212 = (char *)operator new(0x28uLL);
  *(_QWORD *)v212 = &off_1E6988E08;
  *((_QWORD *)v212 + 1) = v179;
  *((_QWORD *)v212 + 2) = v180;
  if (v180)
  {
    v213 = (unint64_t *)&v180->__shared_owners_;
    do
      v214 = __ldxr(v213);
    while (__stxr(v214 + 1, v213));
  }
  *((_DWORD *)v212 + 6) = v183;
  *(_QWORD *)(v212 + 28) = 0x676C6F6264646573;
  *((_DWORD *)v212 + 9) = 0;
  v725 = (int16x8_t *)v212;
  memset(buf, 0, 40);
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v206, v209, (AMCP *)buf);
  if (*(_QWORD *)&buf[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  v215 = v725;
  if (v725 == &v723)
  {
    v216 = 4;
    v215 = &v723;
LABEL_304:
    (*(void (**)(void))(v215->i64[0] + 8 * v216))();
  }
  else if (v725)
  {
    v216 = 5;
    goto LABEL_304;
  }
  if (v180)
  {
    v217 = (unint64_t *)&v180->__shared_owners_;
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
    do
      v219 = __ldaxr(v217);
    while (__stlxr(v219 - 1, v217));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  if (v720[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v720[0] + 10, v720);
  v220 = (std::__shared_weak_count *)v720[1];
  if (v720[1])
  {
    v221 = (unint64_t *)((char *)v720[1] + 8);
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  if (v180)
  {
    v223 = (unint64_t *)&v180->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  *(_QWORD *)&v714.mSelector = 0x676C6F6263646573;
  v714.mElement = 0;
  if (AMCP::ASP::PlugIn::ObjectHasProperty(*((AMCP::ASP::PlugIn **)v1 + 3), *((unsigned int *)v1 + 11), 0, &v714))
  {
    v225 = *((_QWORD *)v1 + 3);
    v46 = (std::__shared_weak_count *)*((_QWORD *)v706 + 4);
    if (v46)
    {
      v226 = (unint64_t *)&v46->__shared_owners_;
      do
        v227 = __ldxr(v226);
      while (__stxr(v227 + 1, v226));
      v228 = *((_DWORD *)v706 + 11);
      v716 = 0x676C6F6263646573;
      v717 = 0;
      v720[0] = 0;
      v720[1] = 0;
      v229 = (unint64_t *)&v46->__shared_owners_;
      do
        v230 = __ldxr(v229);
      while (__stxr(v230 + 1, v229));
      do
        v231 = __ldxr(v229);
      while (__stxr(v231 + 1, v229));
      v232 = v46;
    }
    else
    {
      v232 = 0;
      v228 = *((_DWORD *)v706 + 11);
      v716 = 0x676C6F6263646573;
      v717 = 0;
      v720[0] = 0;
      v720[1] = 0;
    }
    strcpy((char *)v718, "sedcbolg");
    BYTE1(v718[1]) = 0;
    WORD1(v718[1]) = 0;
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, v718[0]);
    v521 = cf[0];
    v522 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>();
    if (v46)
    {
      v523 = (unint64_t *)&v46->__shared_owners_;
      do
        v524 = __ldxr(v523);
      while (__stxr(v524 + 1, v523));
    }
    v725 = 0;
    v525 = (char *)operator new(0x28uLL);
    *(_QWORD *)v525 = &off_1E6988E88;
    *((_QWORD *)v525 + 1) = v225;
    *((_QWORD *)v525 + 2) = v46;
    if (v46)
    {
      v526 = (unint64_t *)&v46->__shared_owners_;
      do
        v527 = __ldxr(v526);
      while (__stxr(v527 + 1, v526));
    }
    *((_DWORD *)v525 + 6) = v228;
    *(_QWORD *)(v525 + 28) = 0x676C6F6263646573;
    *((_DWORD *)v525 + 9) = 0;
    v725 = (int16x8_t *)v525;
    memset(buf, 0, 40);
    std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
    *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::DictionaryRef ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v521, v522, (AMCP *)buf);
    if (*(_QWORD *)&buf[32])
      (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
    v528 = v725;
    if (v725 == &v723)
    {
      v529 = 4;
      v528 = &v723;
LABEL_823:
      (*(void (**)(void))(v528->i64[0] + 8 * v529))();
    }
    else if (v725)
    {
      v529 = 5;
      goto LABEL_823;
    }
    if (v46)
    {
      v530 = (unint64_t *)&v46->__shared_owners_;
      do
        v531 = __ldaxr(v530);
      while (__stlxr(v531 - 1, v530));
      if (!v531)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v532 = cf[0];
    AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>((uint64_t)cf[0]);
    v533 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::DictionaryRef const&)>>();
    if (v232)
    {
      v534 = (unint64_t *)&v232->__shared_owners_;
      do
        v535 = __ldxr(v534);
      while (__stxr(v535 + 1, v534));
    }
    v725 = 0;
    v536 = (char *)operator new(0x28uLL);
    *(_QWORD *)v536 = &off_1E6988F08;
    *((_QWORD *)v536 + 1) = v225;
    *((_QWORD *)v536 + 2) = v232;
    if (v232)
    {
      v537 = (unint64_t *)&v232->__shared_owners_;
      do
        v538 = __ldxr(v537);
      while (__stxr(v538 + 1, v537));
    }
    *((_DWORD *)v536 + 6) = v228;
    *(_QWORD *)(v536 + 28) = 0x676C6F6263646573;
    *((_DWORD *)v536 + 9) = 0;
    v725 = (int16x8_t *)v536;
    memset(buf, 0, 40);
    std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
    *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::DictionaryRef const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v532, v533, (AMCP *)buf);
    if (*(_QWORD *)&buf[32])
      (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
    v539 = v725;
    if (v725 == &v723)
    {
      v540 = 4;
      v539 = &v723;
LABEL_841:
      (*(void (**)(void))(v539->i64[0] + 8 * v540))();
    }
    else if (v725)
    {
      v540 = 5;
      goto LABEL_841;
    }
    if (v232)
    {
      v541 = (unint64_t *)&v232->__shared_owners_;
      do
        v542 = __ldaxr(v541);
      while (__stlxr(v542 - 1, v541));
      if (!v542)
      {
        ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
        std::__shared_weak_count::__release_weak(v232);
      }
    }
    AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>((uint64_t)cf[0]);
    v543 = *(_OWORD *)cf;
    cf[0] = 0;
    cf[1] = 0;
    v544 = (std::__shared_weak_count *)v720[1];
    *(_OWORD *)v720 = v543;
    if (v544)
    {
      v545 = (unint64_t *)&v544->__shared_owners_;
      do
        v546 = __ldaxr(v545);
      while (__stlxr(v546 - 1, v545));
      if (!v546)
      {
        ((void (*)(std::__shared_weak_count *))v544->__on_zero_shared)(v544);
        std::__shared_weak_count::__release_weak(v544);
      }
    }
    v547 = (std::__shared_weak_count *)cf[1];
    if (cf[1])
    {
      v548 = (unint64_t *)((char *)cf[1] + 8);
      do
        v549 = __ldaxr(v548);
      while (__stlxr(v549 - 1, v548));
      if (!v549)
      {
        ((void (*)(std::__shared_weak_count *))v547->__on_zero_shared)(v547);
        std::__shared_weak_count::__release_weak(v547);
      }
    }
    if (v232)
    {
      v550 = (unint64_t *)&v232->__shared_owners_;
      do
        v551 = __ldaxr(v550);
      while (__stlxr(v551 - 1, v550));
      if (!v551)
      {
        ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
        std::__shared_weak_count::__release_weak(v232);
      }
    }
    if (v46)
    {
      v552 = (unint64_t *)&v46->__shared_owners_;
      do
        v553 = __ldaxr(v552);
      while (__stlxr(v553 - 1, v552));
      if (!v553)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
      v554 = v720[0];
      v555 = (unint64_t *)&v46->__shared_owners_;
      do
        v556 = __ldxr(v555);
      while (__stxr(v556 + 1, v555));
      v557 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
      v558 = (unint64_t *)&v46->__shared_owners_;
      do
        v559 = __ldxr(v558);
      while (__stxr(v559 + 1, v558));
    }
    else
    {
      v554 = v720[0];
      v557 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
    }
    v725 = 0;
    v560 = (char *)operator new(0x28uLL);
    *(_QWORD *)v560 = &off_1E6988F88;
    *((_QWORD *)v560 + 1) = v225;
    *((_QWORD *)v560 + 2) = v46;
    if (v46)
    {
      v561 = (unint64_t *)&v46->__shared_owners_;
      do
        v562 = __ldxr(v561);
      while (__stxr(v562 + 1, v561));
    }
    *((_DWORD *)v560 + 6) = v228;
    *(_QWORD *)(v560 + 28) = 0x676C6F6263646573;
    *((_DWORD *)v560 + 9) = 0;
    v725 = (int16x8_t *)v560;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
    *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v554, v557, (AMCP *)buf);
    if (*(_QWORD *)&buf[32])
      (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
    v563 = v725;
    if (v725 == &v723)
    {
      v564 = 4;
      v563 = &v723;
LABEL_882:
      (*(void (**)(void))(v563->i64[0] + 8 * v564))();
    }
    else if (v725)
    {
      v564 = 5;
      goto LABEL_882;
    }
    if (v46)
    {
      v565 = (unint64_t *)&v46->__shared_owners_;
      do
        v566 = __ldaxr(v565);
      while (__stlxr(v566 - 1, v565));
      if (!v566)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
      do
        v567 = __ldaxr(v565);
      while (__stlxr(v567 - 1, v565));
      if (!v567)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
      v568 = v720[0];
      v569 = (unint64_t *)&v46->__shared_owners_;
      do
        v570 = __ldxr(v569);
      while (__stxr(v570 + 1, v569));
      v571 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      v572 = (unint64_t *)&v46->__shared_owners_;
      do
        v573 = __ldxr(v572);
      while (__stxr(v573 + 1, v572));
    }
    else
    {
      v568 = v720[0];
      v571 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    }
    v725 = 0;
    v574 = (char *)operator new(0x28uLL);
    *(_QWORD *)v574 = &off_1E6989008;
    *((_QWORD *)v574 + 1) = v225;
    *((_QWORD *)v574 + 2) = v46;
    if (v46)
    {
      v575 = (unint64_t *)&v46->__shared_owners_;
      do
        v576 = __ldxr(v575);
      while (__stxr(v576 + 1, v575));
    }
    *((_DWORD *)v574 + 6) = v228;
    *(_QWORD *)(v574 + 28) = 0x676C6F6263646573;
    *((_DWORD *)v574 + 9) = 0;
    v725 = (int16x8_t *)v574;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v723);
    *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v568, v571, (AMCP *)buf);
    if (*(_QWORD *)&buf[32])
      (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
    v577 = v725;
    v1 = v706;
    if (v725 == &v723)
    {
      v578 = 4;
      v577 = &v723;
LABEL_906:
      (*(void (**)(void))(v577->i64[0] + 8 * v578))();
    }
    else if (v725)
    {
      v578 = 5;
      goto LABEL_906;
    }
    if (v46)
    {
      v579 = (unint64_t *)&v46->__shared_owners_;
      do
        v580 = __ldaxr(v579);
      while (__stlxr(v580 - 1, v579));
      if (!v580)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
      do
        v581 = __ldaxr(v579);
      while (__stlxr(v581 - 1, v579));
      if (!v581)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (v720[0])
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v720[0] + 10, v720);
    v582 = (std::__shared_weak_count *)v720[1];
    if (v720[1])
    {
      v583 = (unint64_t *)((char *)v720[1] + 8);
      do
        v584 = __ldaxr(v583);
      while (__stlxr(v584 - 1, v583));
      if (!v584)
      {
        ((void (*)(std::__shared_weak_count *))v582->__on_zero_shared)(v582);
        std::__shared_weak_count::__release_weak(v582);
      }
    }
    if (v46)
    {
      v585 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(v585);
      while (__stlxr(v48 - 1, v585));
      goto LABEL_62;
    }
  }
LABEL_66:
  AMCP::Core::Broker::make_core(&v709, *(std::__shared_mutex_base **)(*((_QWORD *)v1 + 1) + 16), (uint64_t)__p, *((unsigned int *)v1 + 15));
  v49 = v710;
  if (v710)
  {
    v50 = (unint64_t *)&v710->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)v712);
  v52 = __p[0];
  __p[0] = 0;
  if (v52)
    operator delete(v52);
}

void sub_1B5AEF9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::ASP::calculate_max_element(AMCP::ASP::PlugIn **a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  unsigned int max_number_channels_for_scope;
  unsigned int v7;
  AMCP::ASP::PlugIn *v8;
  unsigned int v9;
  void *v10;
  unsigned int *v11;
  unsigned int *v12;
  AMCP::ASP::PlugIn *v13;
  unsigned int v14;
  int PropertyData;
  unsigned int v16;
  AudioObjectPropertyAddress v17;
  int v18;
  void *__p;
  unsigned int *v20;
  unsigned int v21;

  result = AMCP::is_base_of((AMCP *)0x61646576, a3);
  if ((_DWORD)result)
  {
    max_number_channels_for_scope = AMCP::ASP::get_max_number_channels_for_scope(1768845428, a1, a2);
    v7 = AMCP::ASP::get_max_number_channels_for_scope(1869968496, a1, a2);
    v8 = *a1;
    if (max_number_channels_for_scope <= v7)
      max_number_channels_for_scope = v7;
    *(_QWORD *)&v17.mSelector = 0x676C6F626374726CLL;
    v17.mElement = 0;
    AMCP::ASP::PlugIn::object_get_property_data<unsigned int [],unsigned int>((uint64_t)&v18, v8, a2, &v17);
    v9 = 0;
    v10 = __p;
    if (!v18)
    {
      v11 = v20;
      if (__p == v20)
      {
        v9 = 0;
        if (!__p)
        {
LABEL_14:
          if (max_number_channels_for_scope <= v9)
            return v9;
          else
            return max_number_channels_for_scope;
        }
LABEL_13:
        operator delete(v10);
        goto LABEL_14;
      }
      v9 = 0;
      v12 = (unsigned int *)__p;
      do
      {
        v13 = *a1;
        v14 = *v12++;
        *(_QWORD *)&v17.mSelector = 0x676C6F6263656C6DLL;
        v17.mElement = 0;
        v21 = 0;
        PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(v13, v14, 0, &v17, 0, 0, 4, &v21);
        v16 = v21;
        if (v9 > v21)
          v16 = v9;
        if (!PropertyData)
          v9 = v16;
      }
      while (v12 != v11);
    }
    if (!v10)
      goto LABEL_14;
    goto LABEL_13;
  }
  return result;
}

void AMCP::ASP::PlugIn_Object::populate_box_core(uint64_t a1, unsigned int a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int *v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t Has_Property;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  unint64_t *v68;
  unint64_t v69;
  __n128 v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  _QWORD *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  int v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t *v118;
  unint64_t v119;
  __n128 v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  __int128 v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  _QWORD *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  int v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  _QWORD *v167;
  unint64_t *v168;
  unint64_t v169;
  __n128 v170;
  _QWORD *v171;
  uint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  __int128 v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  _QWORD *v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  uint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  int v210;
  unint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  _QWORD *v217;
  unint64_t *v218;
  unint64_t v219;
  __n128 v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  __int128 v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  _QWORD *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  uint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  int v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t *v267;
  unint64_t v268;
  _QWORD *v269;
  unint64_t *v270;
  unint64_t v271;
  __n128 v272;
  _QWORD *v273;
  uint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  _QWORD *v281;
  unint64_t *v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  unint64_t *v290;
  unint64_t v291;
  __int128 v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t *v304;
  unint64_t v305;
  unint64_t Is_Property_Settable;
  unint64_t *v307;
  unint64_t v308;
  _QWORD *v309;
  unint64_t *v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  unint64_t *v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t *v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t *v324;
  unint64_t v325;
  _QWORD *v326;
  unint64_t *v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  unint64_t *v334;
  unint64_t v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  uint64_t v343;
  unint64_t *v344;
  unint64_t v345;
  int v346;
  unint64_t *v347;
  unint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t *v351;
  unint64_t v352;
  _QWORD *v353;
  unint64_t *v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  _QWORD *v360;
  uint64_t v361;
  unint64_t *v362;
  unint64_t v363;
  __int128 v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  unint64_t *v371;
  unint64_t v372;
  uint64_t v373;
  unint64_t *v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t *v377;
  unint64_t v378;
  _QWORD *v379;
  unint64_t *v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  _QWORD *v385;
  uint64_t v386;
  unint64_t *v387;
  unint64_t v388;
  unint64_t v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  unint64_t *v393;
  unint64_t v394;
  std::__shared_weak_count *v395;
  uint64_t v396;
  unint64_t *v397;
  unint64_t v398;
  int v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t *v404;
  unint64_t v405;
  _QWORD *v406;
  unint64_t *v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  _QWORD *v412;
  uint64_t v413;
  unint64_t *v414;
  unint64_t v415;
  unint64_t *v416;
  unint64_t v417;
  std::__shared_weak_count *v418;
  unint64_t *v419;
  unint64_t v420;
  unint64_t *v421;
  unint64_t v422;
  std::__shared_weak_count *v423;
  uint64_t v424;
  unint64_t *v425;
  unint64_t v426;
  int v427;
  unint64_t v428;
  std::__shared_weak_count *v429;
  uint64_t v430;
  unint64_t v431;
  unint64_t *v432;
  unint64_t v433;
  _QWORD *v434;
  unint64_t *v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  _QWORD *v440;
  uint64_t v441;
  unint64_t *v442;
  unint64_t v443;
  unint64_t *v444;
  unint64_t v445;
  std::__shared_weak_count *v446;
  unint64_t *v447;
  unint64_t v448;
  unint64_t *v449;
  unint64_t v450;
  uint64_t v451[2];
  uint64_t v452;
  int v453;
  __int128 v454;
  __int128 v455;
  double v456[2];
  __int128 v457;
  __int128 v458;
  void (*v459)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v460[24];
  _BYTE *v461;
  uint64_t v462;

  v462 = *MEMORY[0x1E0C80C00];
  AMCP::ASP::PlugIn_Object::populate_object_core(a1, a2, a3);
  v6 = *(_QWORD *)(a1 + 24);
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (int *)(a1 + 44);
    v10 = *(_DWORD *)(a1 + 44);
    v452 = 0x676C6F6262756964;
    v453 = 0;
    v454 = 0uLL;
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  else
  {
    v9 = (int *)(a1 + 44);
    v10 = *(_DWORD *)(a1 + 44);
    v452 = 0x676C6F6262756964;
    v453 = 0;
    v454 = 0uLL;
  }
  strcpy((char *)v456, "diubbolg");
  BYTE1(v456[1]) = 0;
  WORD1(v456[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v455, 0, v456[0]);
  v13 = v455;
  v14 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (v5)
  {
    v15 = (unint64_t *)&v5->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v461 = 0;
  v17 = operator new(0x28uLL);
  *v17 = &off_1E6987B38;
  v17[1] = v6;
  v17[2] = v5;
  if (v5)
  {
    v18 = (unint64_t *)&v5->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *((_DWORD *)v17 + 6) = v10;
  *(_QWORD *)((char *)v17 + 28) = 0x676C6F6262756964;
  *((_DWORD *)v17 + 9) = 0;
  v461 = v17;
  v457 = 0u;
  v458 = 0u;
  v459 = 0;
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)&v457, (uint64_t)v460);
  v459 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v13, v14, (AMCP *)&v457);
  if (v459)
    v459(0, (uint64_t)&v457, 0, 0);
  v20 = v461;
  if (v461 == v460)
  {
    v21 = 4;
    v20 = v460;
    goto LABEL_20;
  }
  if (v461)
  {
    v21 = 5;
LABEL_20:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
  if (v5)
  {
    v22 = (unint64_t *)&v5->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(v455);
  v24 = v455;
  v455 = 0uLL;
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v454 + 1);
  v454 = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v455 + 1);
  if (!*((_QWORD *)&v455 + 1))
    goto LABEL_35;
  v29 = (unint64_t *)(*((_QWORD *)&v455 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (v30)
  {
LABEL_35:
    if (v5)
      goto LABEL_36;
LABEL_46:
    v33 = v454;
    Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    goto LABEL_47;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  if (!v5)
    goto LABEL_46;
LABEL_36:
  v31 = (unint64_t *)&v5->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v33 = v454;
  v34 = (unint64_t *)&v5->__shared_owners_;
  do
    v35 = __ldxr(v34);
  while (__stxr(v35 + 1, v34));
  Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  v37 = (unint64_t *)&v5->__shared_owners_;
  do
    v38 = __ldxr(v37);
  while (__stxr(v38 + 1, v37));
LABEL_47:
  v461 = 0;
  v39 = operator new(0x28uLL);
  *v39 = &off_1E6987BB8;
  v39[1] = v6;
  v39[2] = v5;
  if (v5)
  {
    v40 = (unint64_t *)&v5->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  *((_DWORD *)v39 + 6) = v10;
  *(_QWORD *)((char *)v39 + 28) = 0x676C6F6262756964;
  *((_DWORD *)v39 + 9) = 0;
  v461 = v39;
  v457 = 0u;
  v458 = 0u;
  v459 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v457, (uint64_t)v460);
  v459 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v33, Has_Property, (AMCP *)&v457);
  if (v459)
    v459(0, (uint64_t)&v457, 0, 0);
  v42 = v461;
  if (v461 == v460)
  {
    v43 = 4;
    v42 = v460;
  }
  else
  {
    if (!v461)
      goto LABEL_57;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_57:
  if (v5)
  {
    v44 = (unint64_t *)&v5->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v46 = __ldaxr(v44);
    while (__stlxr(v46 - 1, v44));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if ((_QWORD)v454)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v454 + 40), &v454);
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v454 + 1);
  if (*((_QWORD *)&v454 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v454 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v5)
  {
    v50 = (unint64_t *)&v5->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v52 = *(std::__shared_weak_count **)(a1 + 32);
  v451[0] = *(_QWORD *)(a1 + 24);
  v451[1] = (uint64_t)v52;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
    AMCP::ASP::make_properties<1953653102u>(v451, *v9, a3);
    do
      v55 = __ldaxr(v53);
    while (__stlxr(v55 - 1, v53));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  else
  {
    AMCP::ASP::make_properties<1953653102u>(v451, *v9, a3);
  }
  v57 = *(_QWORD *)(a1 + 24);
  v56 = *(std::__shared_weak_count **)(a1 + 32);
  if (v56)
  {
    v58 = (unint64_t *)&v56->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
    v60 = *v9;
    v452 = 0x676C6F6262686175;
    v453 = 0;
    v454 = 0uLL;
    v61 = (unint64_t *)&v56->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  else
  {
    v60 = *v9;
    v452 = 0x676C6F6262686175;
    v453 = 0;
    v454 = 0uLL;
  }
  strcpy((char *)v456, "uahbbolg");
  BYTE1(v456[1]) = 0;
  WORD1(v456[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v455, 0, v456[0]);
  v63 = v455;
  v64 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  if (v56)
  {
    v65 = (unint64_t *)&v56->__shared_owners_;
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  v461 = 0;
  v67 = operator new(0x28uLL);
  *v67 = &off_1E6987D38;
  v67[1] = v57;
  v67[2] = v56;
  if (v56)
  {
    v68 = (unint64_t *)&v56->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  *((_DWORD *)v67 + 6) = v60;
  *(_QWORD *)((char *)v67 + 28) = 0x676C6F6262686175;
  *((_DWORD *)v67 + 9) = 0;
  v461 = v67;
  v457 = 0u;
  v458 = 0u;
  v459 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v457, (uint64_t)v460);
  v459 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v63, v64, (AMCP *)&v457);
  if (v459)
    v70.n128_f64[0] = ((double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))v459)(0, (uint64_t)&v457, 0, 0);
  v71 = v461;
  if (v461 == v460)
  {
    v72 = 4;
    v71 = v460;
    goto LABEL_104;
  }
  if (v461)
  {
    v72 = 5;
LABEL_104:
    (*(void (**)(__n128))(*v71 + 8 * v72))(v70);
  }
  if (v56)
  {
    v73 = (unint64_t *)&v56->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v56->__on_zero_shared)(v56, v70);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v455);
  v75 = v455;
  v455 = 0uLL;
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v454 + 1);
  v454 = v75;
  if (v76)
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v455 + 1);
  if (!*((_QWORD *)&v455 + 1))
    goto LABEL_119;
  v80 = (unint64_t *)(*((_QWORD *)&v455 + 1) + 8);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v81 - 1, v80));
  if (v81)
  {
LABEL_119:
    if (v56)
      goto LABEL_120;
LABEL_130:
    v84 = v454;
    v87 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    goto LABEL_131;
  }
  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
  std::__shared_weak_count::__release_weak(v79);
  if (!v56)
    goto LABEL_130;
LABEL_120:
  v82 = (unint64_t *)&v56->__shared_owners_;
  do
    v83 = __ldaxr(v82);
  while (__stlxr(v83 - 1, v82));
  if (!v83)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  v84 = v454;
  v85 = (unint64_t *)&v56->__shared_owners_;
  do
    v86 = __ldxr(v85);
  while (__stxr(v86 + 1, v85));
  v87 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  v88 = (unint64_t *)&v56->__shared_owners_;
  do
    v89 = __ldxr(v88);
  while (__stxr(v89 + 1, v88));
LABEL_131:
  v461 = 0;
  v90 = operator new(0x28uLL);
  *v90 = &off_1E6987DB8;
  v90[1] = v57;
  v90[2] = v56;
  if (v56)
  {
    v91 = (unint64_t *)&v56->__shared_owners_;
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
  }
  *((_DWORD *)v90 + 6) = v60;
  *(_QWORD *)((char *)v90 + 28) = 0x676C6F6262686175;
  *((_DWORD *)v90 + 9) = 0;
  v461 = v90;
  v457 = 0u;
  v458 = 0u;
  v459 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v457, (uint64_t)v460);
  v459 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v84, v87, (AMCP *)&v457);
  if (v459)
    v459(0, (uint64_t)&v457, 0, 0);
  v96 = v461;
  if (v461 == v460)
  {
    v97 = 4;
    v96 = v460;
  }
  else
  {
    if (!v461)
      goto LABEL_141;
    v97 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v96 + 8 * v97))(v96, v93, v94, v95);
LABEL_141:
  if (v56)
  {
    v98 = (unint64_t *)&v56->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
    do
      v100 = __ldaxr(v98);
    while (__stlxr(v100 - 1, v98));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if ((_QWORD)v454)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v454 + 40), &v454);
  v101 = (std::__shared_weak_count *)*((_QWORD *)&v454 + 1);
  if (*((_QWORD *)&v454 + 1))
  {
    v102 = (unint64_t *)(*((_QWORD *)&v454 + 1) + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  if (v56)
  {
    v104 = (unint64_t *)&v56->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v107 = *(_QWORD *)(a1 + 24);
  v106 = *(std::__shared_weak_count **)(a1 + 32);
  if (v106)
  {
    v108 = (unint64_t *)&v106->__shared_owners_;
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 1, v108));
    v110 = *v9;
    v452 = 0x676C6F6262687669;
    v453 = 0;
    v454 = 0uLL;
    v111 = (unint64_t *)&v106->__shared_owners_;
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 1, v111));
  }
  else
  {
    v110 = *v9;
    v452 = 0x676C6F6262687669;
    v453 = 0;
    v454 = 0uLL;
  }
  strcpy((char *)v456, "ivhbbolg");
  BYTE1(v456[1]) = 0;
  WORD1(v456[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v455, 0, v456[0]);
  v113 = v455;
  v114 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  if (v106)
  {
    v115 = (unint64_t *)&v106->__shared_owners_;
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
  }
  v461 = 0;
  v117 = operator new(0x28uLL);
  *v117 = &off_1E6987E38;
  v117[1] = v107;
  v117[2] = v106;
  if (v106)
  {
    v118 = (unint64_t *)&v106->__shared_owners_;
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
  }
  *((_DWORD *)v117 + 6) = v110;
  *(_QWORD *)((char *)v117 + 28) = 0x676C6F6262687669;
  *((_DWORD *)v117 + 9) = 0;
  v461 = v117;
  v457 = 0u;
  v458 = 0u;
  v459 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v457, (uint64_t)v460);
  v459 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v113, v114, (AMCP *)&v457);
  if (v459)
    v120.n128_f64[0] = ((double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))v459)(0, (uint64_t)&v457, 0, 0);
  v121 = v461;
  if (v461 == v460)
  {
    v122 = 4;
    v121 = v460;
    goto LABEL_180;
  }
  if (v461)
  {
    v122 = 5;
LABEL_180:
    (*(void (**)(__n128))(*v121 + 8 * v122))(v120);
  }
  if (v106)
  {
    v123 = (unint64_t *)&v106->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v106->__on_zero_shared)(v106, v120);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v455);
  v125 = v455;
  v455 = 0uLL;
  v126 = (std::__shared_weak_count *)*((_QWORD *)&v454 + 1);
  v454 = v125;
  if (v126)
  {
    v127 = (unint64_t *)&v126->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = (std::__shared_weak_count *)*((_QWORD *)&v455 + 1);
  if (!*((_QWORD *)&v455 + 1))
    goto LABEL_195;
  v130 = (unint64_t *)(*((_QWORD *)&v455 + 1) + 8);
  do
    v131 = __ldaxr(v130);
  while (__stlxr(v131 - 1, v130));
  if (v131)
  {
LABEL_195:
    if (v106)
      goto LABEL_196;
LABEL_206:
    v134 = v454;
    v137 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    goto LABEL_207;
  }
  ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
  std::__shared_weak_count::__release_weak(v129);
  if (!v106)
    goto LABEL_206;
LABEL_196:
  v132 = (unint64_t *)&v106->__shared_owners_;
  do
    v133 = __ldaxr(v132);
  while (__stlxr(v133 - 1, v132));
  if (!v133)
  {
    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
    std::__shared_weak_count::__release_weak(v106);
  }
  v134 = v454;
  v135 = (unint64_t *)&v106->__shared_owners_;
  do
    v136 = __ldxr(v135);
  while (__stxr(v136 + 1, v135));
  v137 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  v138 = (unint64_t *)&v106->__shared_owners_;
  do
    v139 = __ldxr(v138);
  while (__stxr(v139 + 1, v138));
LABEL_207:
  v461 = 0;
  v140 = operator new(0x28uLL);
  *v140 = &off_1E6987EB8;
  v140[1] = v107;
  v140[2] = v106;
  if (v106)
  {
    v141 = (unint64_t *)&v106->__shared_owners_;
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 1, v141));
  }
  *((_DWORD *)v140 + 6) = v110;
  *(_QWORD *)((char *)v140 + 28) = 0x676C6F6262687669;
  *((_DWORD *)v140 + 9) = 0;
  v461 = v140;
  v457 = 0u;
  v458 = 0u;
  v459 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v457, (uint64_t)v460);
  v459 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v134, v137, (AMCP *)&v457);
  if (v459)
    v459(0, (uint64_t)&v457, 0, 0);
  v146 = v461;
  if (v461 == v460)
  {
    v147 = 4;
    v146 = v460;
  }
  else
  {
    if (!v461)
      goto LABEL_217;
    v147 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v146 + 8 * v147))(v146, v143, v144, v145);
LABEL_217:
  if (v106)
  {
    v148 = (unint64_t *)&v106->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
    do
      v150 = __ldaxr(v148);
    while (__stlxr(v150 - 1, v148));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  if ((_QWORD)v454)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v454 + 40), &v454);
  v151 = (std::__shared_weak_count *)*((_QWORD *)&v454 + 1);
  if (*((_QWORD *)&v454 + 1))
  {
    v152 = (unint64_t *)(*((_QWORD *)&v454 + 1) + 8);
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  if (v106)
  {
    v154 = (unint64_t *)&v106->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v157 = *(_QWORD *)(a1 + 24);
  v156 = *(std::__shared_weak_count **)(a1 + 32);
  if (v156)
  {
    v158 = (unint64_t *)&v156->__shared_owners_;
    do
      v159 = __ldxr(v158);
    while (__stxr(v159 + 1, v158));
    v160 = *v9;
    v452 = 0x676C6F6262686D69;
    v453 = 0;
    v454 = 0uLL;
    v161 = (unint64_t *)&v156->__shared_owners_;
    do
      v162 = __ldxr(v161);
    while (__stxr(v162 + 1, v161));
  }
  else
  {
    v160 = *v9;
    v452 = 0x676C6F6262686D69;
    v453 = 0;
    v454 = 0uLL;
  }
  strcpy((char *)v456, "imhbbolg");
  BYTE1(v456[1]) = 0;
  WORD1(v456[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v455, 0, v456[0]);
  v163 = v455;
  v164 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  if (v156)
  {
    v165 = (unint64_t *)&v156->__shared_owners_;
    do
      v166 = __ldxr(v165);
    while (__stxr(v166 + 1, v165));
  }
  v461 = 0;
  v167 = operator new(0x28uLL);
  *v167 = &off_1E6987F38;
  v167[1] = v157;
  v167[2] = v156;
  if (v156)
  {
    v168 = (unint64_t *)&v156->__shared_owners_;
    do
      v169 = __ldxr(v168);
    while (__stxr(v169 + 1, v168));
  }
  *((_DWORD *)v167 + 6) = v160;
  *(_QWORD *)((char *)v167 + 28) = 0x676C6F6262686D69;
  *((_DWORD *)v167 + 9) = 0;
  v461 = v167;
  v457 = 0u;
  v458 = 0u;
  v459 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v457, (uint64_t)v460);
  v459 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v163, v164, (AMCP *)&v457);
  if (v459)
    v170.n128_f64[0] = ((double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))v459)(0, (uint64_t)&v457, 0, 0);
  v171 = v461;
  if (v461 == v460)
  {
    v172 = 4;
    v171 = v460;
    goto LABEL_256;
  }
  if (v461)
  {
    v172 = 5;
LABEL_256:
    (*(void (**)(__n128))(*v171 + 8 * v172))(v170);
  }
  if (v156)
  {
    v173 = (unint64_t *)&v156->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v156->__on_zero_shared)(v156, v170);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v455);
  v175 = v455;
  v455 = 0uLL;
  v176 = (std::__shared_weak_count *)*((_QWORD *)&v454 + 1);
  v454 = v175;
  if (v176)
  {
    v177 = (unint64_t *)&v176->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = (std::__shared_weak_count *)*((_QWORD *)&v455 + 1);
  if (!*((_QWORD *)&v455 + 1))
    goto LABEL_271;
  v180 = (unint64_t *)(*((_QWORD *)&v455 + 1) + 8);
  do
    v181 = __ldaxr(v180);
  while (__stlxr(v181 - 1, v180));
  if (v181)
  {
LABEL_271:
    if (v156)
      goto LABEL_272;
LABEL_282:
    v184 = v454;
    v187 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    goto LABEL_283;
  }
  ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
  std::__shared_weak_count::__release_weak(v179);
  if (!v156)
    goto LABEL_282;
LABEL_272:
  v182 = (unint64_t *)&v156->__shared_owners_;
  do
    v183 = __ldaxr(v182);
  while (__stlxr(v183 - 1, v182));
  if (!v183)
  {
    ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
    std::__shared_weak_count::__release_weak(v156);
  }
  v184 = v454;
  v185 = (unint64_t *)&v156->__shared_owners_;
  do
    v186 = __ldxr(v185);
  while (__stxr(v186 + 1, v185));
  v187 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  v188 = (unint64_t *)&v156->__shared_owners_;
  do
    v189 = __ldxr(v188);
  while (__stxr(v189 + 1, v188));
LABEL_283:
  v461 = 0;
  v190 = operator new(0x28uLL);
  *v190 = &off_1E6987FB8;
  v190[1] = v157;
  v190[2] = v156;
  if (v156)
  {
    v191 = (unint64_t *)&v156->__shared_owners_;
    do
      v192 = __ldxr(v191);
    while (__stxr(v192 + 1, v191));
  }
  *((_DWORD *)v190 + 6) = v160;
  *(_QWORD *)((char *)v190 + 28) = 0x676C6F6262686D69;
  *((_DWORD *)v190 + 9) = 0;
  v461 = v190;
  v457 = 0u;
  v458 = 0u;
  v459 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v457, (uint64_t)v460);
  v459 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v184, v187, (AMCP *)&v457);
  if (v459)
    v459(0, (uint64_t)&v457, 0, 0);
  v196 = v461;
  if (v461 == v460)
  {
    v197 = 4;
    v196 = v460;
  }
  else
  {
    if (!v461)
      goto LABEL_293;
    v197 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v196 + 8 * v197))(v196, v193, v194, v195);
LABEL_293:
  if (v156)
  {
    v198 = (unint64_t *)&v156->__shared_owners_;
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
    do
      v200 = __ldaxr(v198);
    while (__stlxr(v200 - 1, v198));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  if ((_QWORD)v454)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v454 + 40), &v454);
  v201 = (std::__shared_weak_count *)*((_QWORD *)&v454 + 1);
  if (*((_QWORD *)&v454 + 1))
  {
    v202 = (unint64_t *)(*((_QWORD *)&v454 + 1) + 8);
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  if (v156)
  {
    v204 = (unint64_t *)&v156->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v207 = *(_QWORD *)(a1 + 24);
  v206 = *(std::__shared_weak_count **)(a1 + 32);
  if (v206)
  {
    v208 = (unint64_t *)&v206->__shared_owners_;
    do
      v209 = __ldxr(v208);
    while (__stxr(v209 + 1, v208));
    v210 = *v9;
    v452 = 0x676C6F626270726FLL;
    v453 = 0;
    v454 = 0uLL;
    v211 = (unint64_t *)&v206->__shared_owners_;
    do
      v212 = __ldxr(v211);
    while (__stxr(v212 + 1, v211));
  }
  else
  {
    v210 = *v9;
    v452 = 0x676C6F626270726FLL;
    v453 = 0;
    v454 = 0uLL;
  }
  strcpy((char *)v456, "orpbbolg");
  BYTE1(v456[1]) = 0;
  WORD1(v456[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v455, 0, v456[0]);
  v213 = v455;
  v214 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  if (v206)
  {
    v215 = (unint64_t *)&v206->__shared_owners_;
    do
      v216 = __ldxr(v215);
    while (__stxr(v216 + 1, v215));
  }
  v461 = 0;
  v217 = operator new(0x28uLL);
  *v217 = &off_1E6988038;
  v217[1] = v207;
  v217[2] = v206;
  if (v206)
  {
    v218 = (unint64_t *)&v206->__shared_owners_;
    do
      v219 = __ldxr(v218);
    while (__stxr(v219 + 1, v218));
  }
  *((_DWORD *)v217 + 6) = v210;
  *(_QWORD *)((char *)v217 + 28) = 0x676C6F626270726FLL;
  *((_DWORD *)v217 + 9) = 0;
  v461 = v217;
  v457 = 0u;
  v458 = 0u;
  v459 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v457, (uint64_t)v460);
  v459 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v213, v214, (AMCP *)&v457);
  if (v459)
    v220.n128_f64[0] = ((double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))v459)(0, (uint64_t)&v457, 0, 0);
  v221 = v461;
  if (v461 == v460)
  {
    v222 = 4;
    v221 = v460;
    goto LABEL_332;
  }
  if (v461)
  {
    v222 = 5;
LABEL_332:
    (*(void (**)(__n128))(*v221 + 8 * v222))(v220);
  }
  if (v206)
  {
    v223 = (unint64_t *)&v206->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v206->__on_zero_shared)(v206, v220);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v455);
  v225 = v455;
  v455 = 0uLL;
  v226 = (std::__shared_weak_count *)*((_QWORD *)&v454 + 1);
  v454 = v225;
  if (v226)
  {
    v227 = (unint64_t *)&v226->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  v229 = (std::__shared_weak_count *)*((_QWORD *)&v455 + 1);
  if (!*((_QWORD *)&v455 + 1))
    goto LABEL_347;
  v230 = (unint64_t *)(*((_QWORD *)&v455 + 1) + 8);
  do
    v231 = __ldaxr(v230);
  while (__stlxr(v231 - 1, v230));
  if (v231)
  {
LABEL_347:
    if (v206)
      goto LABEL_348;
LABEL_358:
    v234 = v454;
    v237 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    goto LABEL_359;
  }
  ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
  std::__shared_weak_count::__release_weak(v229);
  if (!v206)
    goto LABEL_358;
LABEL_348:
  v232 = (unint64_t *)&v206->__shared_owners_;
  do
    v233 = __ldaxr(v232);
  while (__stlxr(v233 - 1, v232));
  if (!v233)
  {
    ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
    std::__shared_weak_count::__release_weak(v206);
  }
  v234 = v454;
  v235 = (unint64_t *)&v206->__shared_owners_;
  do
    v236 = __ldxr(v235);
  while (__stxr(v236 + 1, v235));
  v237 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  v238 = (unint64_t *)&v206->__shared_owners_;
  do
    v239 = __ldxr(v238);
  while (__stxr(v239 + 1, v238));
LABEL_359:
  v461 = 0;
  v240 = operator new(0x28uLL);
  *v240 = &off_1E69880B8;
  v240[1] = v207;
  v240[2] = v206;
  if (v206)
  {
    v241 = (unint64_t *)&v206->__shared_owners_;
    do
      v242 = __ldxr(v241);
    while (__stxr(v242 + 1, v241));
  }
  *((_DWORD *)v240 + 6) = v210;
  *(_QWORD *)((char *)v240 + 28) = 0x676C6F626270726FLL;
  *((_DWORD *)v240 + 9) = 0;
  v461 = v240;
  v457 = 0u;
  v458 = 0u;
  v459 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v457, (uint64_t)v460);
  v459 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v234, v237, (AMCP *)&v457);
  if (v459)
    v459(0, (uint64_t)&v457, 0, 0);
  v246 = v461;
  if (v461 == v460)
  {
    v247 = 4;
    v246 = v460;
  }
  else
  {
    if (!v461)
      goto LABEL_369;
    v247 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v246 + 8 * v247))(v246, v243, v244, v245);
LABEL_369:
  if (v206)
  {
    v248 = (unint64_t *)&v206->__shared_owners_;
    do
      v249 = __ldaxr(v248);
    while (__stlxr(v249 - 1, v248));
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
    do
      v250 = __ldaxr(v248);
    while (__stlxr(v250 - 1, v248));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  if ((_QWORD)v454)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v454 + 40), &v454);
  v251 = (std::__shared_weak_count *)*((_QWORD *)&v454 + 1);
  if (*((_QWORD *)&v454 + 1))
  {
    v252 = (unint64_t *)(*((_QWORD *)&v454 + 1) + 8);
    do
      v253 = __ldaxr(v252);
    while (__stlxr(v253 - 1, v252));
    if (!v253)
    {
      ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
      std::__shared_weak_count::__release_weak(v251);
    }
  }
  if (v206)
  {
    v254 = (unint64_t *)&v206->__shared_owners_;
    do
      v255 = __ldaxr(v254);
    while (__stlxr(v255 - 1, v254));
    if (!v255)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  v257 = *(_QWORD *)(a1 + 24);
  v256 = *(std::__shared_weak_count **)(a1 + 32);
  if (v256)
  {
    v258 = (unint64_t *)&v256->__shared_owners_;
    do
      v259 = __ldxr(v258);
    while (__stxr(v259 + 1, v258));
    v260 = *v9;
    v452 = 0x676C6F6262786F6ELL;
    v453 = 0;
    v454 = 0uLL;
    v261 = (unint64_t *)&v256->__shared_owners_;
    do
      v262 = __ldxr(v261);
    while (__stxr(v262 + 1, v261));
    do
      v263 = __ldxr(v261);
    while (__stxr(v263 + 1, v261));
    v264 = v256;
  }
  else
  {
    v264 = 0;
    v260 = *v9;
    v452 = 0x676C6F6262786F6ELL;
    v453 = 0;
    v454 = 0uLL;
  }
  strcpy((char *)v456, "noxbbolg");
  BYTE1(v456[1]) = 0;
  WORD1(v456[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v455, 0, v456[0]);
  v265 = v455;
  v266 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  if (v256)
  {
    v267 = (unint64_t *)&v256->__shared_owners_;
    do
      v268 = __ldxr(v267);
    while (__stxr(v268 + 1, v267));
  }
  v461 = 0;
  v269 = operator new(0x28uLL);
  *v269 = &off_1E6988138;
  v269[1] = v257;
  v269[2] = v256;
  if (v256)
  {
    v270 = (unint64_t *)&v256->__shared_owners_;
    do
      v271 = __ldxr(v270);
    while (__stxr(v271 + 1, v270));
  }
  *((_DWORD *)v269 + 6) = v260;
  *(_QWORD *)((char *)v269 + 28) = 0x676C6F6262786F6ELL;
  *((_DWORD *)v269 + 9) = 0;
  v461 = v269;
  v457 = 0u;
  v458 = 0u;
  v459 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v457, (uint64_t)v460);
  v459 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v265, v266, (AMCP *)&v457);
  if (v459)
    v272.n128_f64[0] = ((double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))v459)(0, (uint64_t)&v457, 0, 0);
  v273 = v461;
  if (v461 == v460)
  {
    v274 = 4;
    v273 = v460;
    goto LABEL_409;
  }
  if (v461)
  {
    v274 = 5;
LABEL_409:
    (*(void (**)(__n128))(*v273 + 8 * v274))(v272);
  }
  if (v256)
  {
    v275 = (unint64_t *)&v256->__shared_owners_;
    do
      v276 = __ldaxr(v275);
    while (__stlxr(v276 - 1, v275));
    if (!v276)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v256->__on_zero_shared)(v256, v272);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  v277 = v455;
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v455);
  v278 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  if (v264)
  {
    v279 = (unint64_t *)&v264->__shared_owners_;
    do
      v280 = __ldxr(v279);
    while (__stxr(v280 + 1, v279));
  }
  v461 = 0;
  v281 = operator new(0x28uLL);
  *v281 = &off_1E69881B8;
  v281[1] = v257;
  v281[2] = v264;
  if (v264)
  {
    v282 = (unint64_t *)&v264->__shared_owners_;
    do
      v283 = __ldxr(v282);
    while (__stxr(v283 + 1, v282));
  }
  *((_DWORD *)v281 + 6) = v260;
  *(_QWORD *)((char *)v281 + 28) = 0x676C6F6262786F6ELL;
  *((_DWORD *)v281 + 9) = 0;
  v461 = v281;
  v457 = 0u;
  v458 = 0u;
  v459 = 0;
  std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)&v457, (uint64_t)v460);
  v459 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v277, v278, (AMCP *)&v457);
  if (v459)
    v459(0, (uint64_t)&v457, 0, 0);
  v288 = v461;
  if (v461 == v460)
  {
    v289 = 4;
    v288 = v460;
    goto LABEL_427;
  }
  if (v461)
  {
    v289 = 5;
LABEL_427:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v288 + 8 * v289))(v288, v284, v285, v286, v287);
  }
  if (v264)
  {
    v290 = (unint64_t *)&v264->__shared_owners_;
    do
      v291 = __ldaxr(v290);
    while (__stlxr(v291 - 1, v290));
    if (!v291)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(v455);
  v292 = v455;
  v455 = 0uLL;
  v293 = (std::__shared_weak_count *)*((_QWORD *)&v454 + 1);
  v454 = v292;
  if (v293)
  {
    v294 = (unint64_t *)&v293->__shared_owners_;
    do
      v295 = __ldaxr(v294);
    while (__stlxr(v295 - 1, v294));
    if (!v295)
    {
      ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
      std::__shared_weak_count::__release_weak(v293);
    }
  }
  v296 = (std::__shared_weak_count *)*((_QWORD *)&v455 + 1);
  if (*((_QWORD *)&v455 + 1))
  {
    v297 = (unint64_t *)(*((_QWORD *)&v455 + 1) + 8);
    do
      v298 = __ldaxr(v297);
    while (__stlxr(v298 - 1, v297));
    if (!v298)
    {
      ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
      std::__shared_weak_count::__release_weak(v296);
    }
  }
  if (!v264)
    goto LABEL_447;
  v299 = (unint64_t *)&v264->__shared_owners_;
  do
    v300 = __ldaxr(v299);
  while (__stlxr(v300 - 1, v299));
  if (v300)
  {
LABEL_447:
    if (v256)
      goto LABEL_448;
LABEL_458:
    v303 = v454;
    Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
    goto LABEL_459;
  }
  ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
  std::__shared_weak_count::__release_weak(v264);
  if (!v256)
    goto LABEL_458;
LABEL_448:
  v301 = (unint64_t *)&v256->__shared_owners_;
  do
    v302 = __ldaxr(v301);
  while (__stlxr(v302 - 1, v301));
  if (!v302)
  {
    ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
    std::__shared_weak_count::__release_weak(v256);
  }
  v303 = v454;
  v304 = (unint64_t *)&v256->__shared_owners_;
  do
    v305 = __ldxr(v304);
  while (__stxr(v305 + 1, v304));
  Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
  v307 = (unint64_t *)&v256->__shared_owners_;
  do
    v308 = __ldxr(v307);
  while (__stxr(v308 + 1, v307));
LABEL_459:
  v461 = 0;
  v309 = operator new(0x28uLL);
  *v309 = &off_1E6988238;
  v309[1] = v257;
  v309[2] = v256;
  if (v256)
  {
    v310 = (unint64_t *)&v256->__shared_owners_;
    do
      v311 = __ldxr(v310);
    while (__stxr(v311 + 1, v310));
  }
  *((_DWORD *)v309 + 6) = v260;
  *(_QWORD *)((char *)v309 + 28) = 0x676C6F6262786F6ELL;
  *((_DWORD *)v309 + 9) = 0;
  v461 = v309;
  v457 = 0u;
  v458 = 0u;
  v459 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)&v457, (uint64_t)v460);
  v459 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v303, Is_Property_Settable, (AMCP *)&v457);
  if (v459)
    v459(0, (uint64_t)&v457, 0, 0);
  v315 = v461;
  if (v461 == v460)
  {
    v316 = 4;
    v315 = v460;
  }
  else
  {
    if (!v461)
      goto LABEL_469;
    v316 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v315 + 8 * v316))(v315, v312, v313, v314);
LABEL_469:
  if (v256)
  {
    v317 = (unint64_t *)&v256->__shared_owners_;
    do
      v318 = __ldaxr(v317);
    while (__stlxr(v318 - 1, v317));
    if (!v318)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
    do
      v319 = __ldaxr(v317);
    while (__stlxr(v319 - 1, v317));
    if (!v319)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
    v320 = v454;
    v321 = (unint64_t *)&v256->__shared_owners_;
    do
      v322 = __ldxr(v321);
    while (__stxr(v322 + 1, v321));
    v323 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    v324 = (unint64_t *)&v256->__shared_owners_;
    do
      v325 = __ldxr(v324);
    while (__stxr(v325 + 1, v324));
  }
  else
  {
    v320 = v454;
    v323 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  v461 = 0;
  v326 = operator new(0x28uLL);
  *v326 = &off_1E69882B8;
  v326[1] = v257;
  v326[2] = v256;
  if (v256)
  {
    v327 = (unint64_t *)&v256->__shared_owners_;
    do
      v328 = __ldxr(v327);
    while (__stxr(v328 + 1, v327));
  }
  *((_DWORD *)v326 + 6) = v260;
  *(_QWORD *)((char *)v326 + 28) = 0x676C6F6262786F6ELL;
  *((_DWORD *)v326 + 9) = 0;
  v461 = v326;
  v457 = 0u;
  v458 = 0u;
  v459 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v457, (uint64_t)v460);
  v459 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v320, v323, (AMCP *)&v457);
  if (v459)
    v459(0, (uint64_t)&v457, 0, 0);
  v332 = v461;
  if (v461 == v460)
  {
    v333 = 4;
    v332 = v460;
  }
  else
  {
    if (!v461)
      goto LABEL_493;
    v333 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v332 + 8 * v333))(v332, v329, v330, v331);
LABEL_493:
  if (v256)
  {
    v334 = (unint64_t *)&v256->__shared_owners_;
    do
      v335 = __ldaxr(v334);
    while (__stlxr(v335 - 1, v334));
    if (!v335)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
    do
      v336 = __ldaxr(v334);
    while (__stlxr(v336 - 1, v334));
    if (!v336)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  if ((_QWORD)v454)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v454 + 40), &v454);
  v337 = (std::__shared_weak_count *)*((_QWORD *)&v454 + 1);
  if (*((_QWORD *)&v454 + 1))
  {
    v338 = (unint64_t *)(*((_QWORD *)&v454 + 1) + 8);
    do
      v339 = __ldaxr(v338);
    while (__stlxr(v339 - 1, v338));
    if (!v339)
    {
      ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
      std::__shared_weak_count::__release_weak(v337);
    }
  }
  if (v256)
  {
    v340 = (unint64_t *)&v256->__shared_owners_;
    do
      v341 = __ldaxr(v340);
    while (__stlxr(v341 - 1, v340));
    if (!v341)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  v343 = *(_QWORD *)(a1 + 24);
  v342 = *(std::__shared_weak_count **)(a1 + 32);
  if (v342)
  {
    v344 = (unint64_t *)&v342->__shared_owners_;
    do
      v345 = __ldxr(v344);
    while (__stxr(v345 + 1, v344));
    v346 = *v9;
    v452 = 0x676C6F6262786F66;
    v453 = 0;
    v454 = 0uLL;
    v347 = (unint64_t *)&v342->__shared_owners_;
    do
      v348 = __ldxr(v347);
    while (__stxr(v348 + 1, v347));
  }
  else
  {
    v346 = *v9;
    v452 = 0x676C6F6262786F66;
    v453 = 0;
    v454 = 0uLL;
  }
  strcpy((char *)v456, "foxbbolg");
  BYTE1(v456[1]) = 0;
  WORD1(v456[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v455, 0, v456[0]);
  v349 = v455;
  v350 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  if (v342)
  {
    v351 = (unint64_t *)&v342->__shared_owners_;
    do
      v352 = __ldxr(v351);
    while (__stxr(v352 + 1, v351));
  }
  v461 = 0;
  v353 = operator new(0x28uLL);
  *v353 = &off_1E6988338;
  v353[1] = v343;
  v353[2] = v342;
  if (v342)
  {
    v354 = (unint64_t *)&v342->__shared_owners_;
    do
      v355 = __ldxr(v354);
    while (__stxr(v355 + 1, v354));
  }
  *((_DWORD *)v353 + 6) = v346;
  *(_QWORD *)((char *)v353 + 28) = 0x676C6F6262786F66;
  *((_DWORD *)v353 + 9) = 0;
  v461 = v353;
  v457 = 0u;
  v458 = 0u;
  v459 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)&v457, (uint64_t)v460);
  v459 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v349, v350, (AMCP *)&v457);
  if (v459)
    v459(0, (uint64_t)&v457, 0, 0);
  v360 = v461;
  if (v461 == v460)
  {
    v361 = 4;
    v360 = v460;
    goto LABEL_532;
  }
  if (v461)
  {
    v361 = 5;
LABEL_532:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v360 + 8 * v361))(v360, v356, v357, v358, v359);
  }
  if (v342)
  {
    v362 = (unint64_t *)&v342->__shared_owners_;
    do
      v363 = __ldaxr(v362);
    while (__stlxr(v363 - 1, v362));
    if (!v363)
    {
      ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
      std::__shared_weak_count::__release_weak(v342);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v455);
  v364 = v455;
  v455 = 0uLL;
  v365 = (std::__shared_weak_count *)*((_QWORD *)&v454 + 1);
  v454 = v364;
  if (v365)
  {
    v366 = (unint64_t *)&v365->__shared_owners_;
    do
      v367 = __ldaxr(v366);
    while (__stlxr(v367 - 1, v366));
    if (!v367)
    {
      ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
      std::__shared_weak_count::__release_weak(v365);
    }
  }
  v368 = (std::__shared_weak_count *)*((_QWORD *)&v455 + 1);
  if (!*((_QWORD *)&v455 + 1))
    goto LABEL_547;
  v369 = (unint64_t *)(*((_QWORD *)&v455 + 1) + 8);
  do
    v370 = __ldaxr(v369);
  while (__stlxr(v370 - 1, v369));
  if (v370)
  {
LABEL_547:
    if (v342)
      goto LABEL_548;
LABEL_558:
    v373 = v454;
    v376 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    goto LABEL_559;
  }
  ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
  std::__shared_weak_count::__release_weak(v368);
  if (!v342)
    goto LABEL_558;
LABEL_548:
  v371 = (unint64_t *)&v342->__shared_owners_;
  do
    v372 = __ldaxr(v371);
  while (__stlxr(v372 - 1, v371));
  if (!v372)
  {
    ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
    std::__shared_weak_count::__release_weak(v342);
  }
  v373 = v454;
  v374 = (unint64_t *)&v342->__shared_owners_;
  do
    v375 = __ldxr(v374);
  while (__stxr(v375 + 1, v374));
  v376 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  v377 = (unint64_t *)&v342->__shared_owners_;
  do
    v378 = __ldxr(v377);
  while (__stxr(v378 + 1, v377));
LABEL_559:
  v461 = 0;
  v379 = operator new(0x28uLL);
  *v379 = &off_1E69883B8;
  v379[1] = v343;
  v379[2] = v342;
  if (v342)
  {
    v380 = (unint64_t *)&v342->__shared_owners_;
    do
      v381 = __ldxr(v380);
    while (__stxr(v381 + 1, v380));
  }
  *((_DWORD *)v379 + 6) = v346;
  *(_QWORD *)((char *)v379 + 28) = 0x676C6F6262786F66;
  *((_DWORD *)v379 + 9) = 0;
  v461 = v379;
  v457 = 0u;
  v458 = 0u;
  v459 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v457, (uint64_t)v460);
  v459 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v373, v376, (AMCP *)&v457);
  if (v459)
    v459(0, (uint64_t)&v457, 0, 0);
  v385 = v461;
  if (v461 == v460)
  {
    v386 = 4;
    v385 = v460;
  }
  else
  {
    if (!v461)
      goto LABEL_569;
    v386 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v385 + 8 * v386))(v385, v382, v383, v384);
LABEL_569:
  if (v342)
  {
    v387 = (unint64_t *)&v342->__shared_owners_;
    do
      v388 = __ldaxr(v387);
    while (__stlxr(v388 - 1, v387));
    if (!v388)
    {
      ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
      std::__shared_weak_count::__release_weak(v342);
    }
    do
      v389 = __ldaxr(v387);
    while (__stlxr(v389 - 1, v387));
    if (!v389)
    {
      ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
      std::__shared_weak_count::__release_weak(v342);
    }
  }
  if ((_QWORD)v454)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v454 + 40), &v454);
  v390 = (std::__shared_weak_count *)*((_QWORD *)&v454 + 1);
  if (*((_QWORD *)&v454 + 1))
  {
    v391 = (unint64_t *)(*((_QWORD *)&v454 + 1) + 8);
    do
      v392 = __ldaxr(v391);
    while (__stlxr(v392 - 1, v391));
    if (!v392)
    {
      ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
      std::__shared_weak_count::__release_weak(v390);
    }
  }
  if (v342)
  {
    v393 = (unint64_t *)&v342->__shared_owners_;
    do
      v394 = __ldaxr(v393);
    while (__stlxr(v394 - 1, v393));
    if (!v394)
    {
      ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
      std::__shared_weak_count::__release_weak(v342);
    }
  }
  v396 = *(_QWORD *)(a1 + 24);
  v395 = *(std::__shared_weak_count **)(a1 + 32);
  if (v395)
  {
    v397 = (unint64_t *)&v395->__shared_owners_;
    do
      v398 = __ldxr(v397);
    while (__stxr(v398 + 1, v397));
    v399 = *v9;
    do
      v400 = __ldxr(v397);
    while (__stxr(v400 + 1, v397));
    v401 = v395;
  }
  else
  {
    v401 = 0;
    v399 = *v9;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v455, 0, 1.58366006e190);
  v402 = v455;
  v403 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  if (v401)
  {
    v404 = (unint64_t *)&v401->__shared_owners_;
    do
      v405 = __ldxr(v404);
    while (__stxr(v405 + 1, v404));
  }
  v461 = 0;
  v406 = operator new(0x20uLL);
  *v406 = &off_1E6988438;
  v406[1] = v396;
  v406[2] = v401;
  if (v401)
  {
    v407 = (unint64_t *)&v401->__shared_owners_;
    do
      v408 = __ldxr(v407);
    while (__stxr(v408 + 1, v407));
  }
  *((_DWORD *)v406 + 6) = v399;
  v461 = v406;
  v457 = 0u;
  v458 = 0u;
  v459 = 0;
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v457, (uint64_t)v460);
  v459 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v402, v403, (AMCP *)&v457);
  if (v459)
    v459(0, (uint64_t)&v457, 0, 0);
  v412 = v461;
  if (v461 == v460)
  {
    v413 = 4;
    v412 = v460;
    goto LABEL_608;
  }
  if (v461)
  {
    v413 = 5;
LABEL_608:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v412 + 8 * v413))(v412, v409, v410, v411);
  }
  if (v401)
  {
    v414 = (unint64_t *)&v401->__shared_owners_;
    do
      v415 = __ldaxr(v414);
    while (__stlxr(v415 - 1, v414));
    if (!v415)
    {
      ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
      std::__shared_weak_count::__release_weak(v401);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(v455);
  if (v401)
  {
    v416 = (unint64_t *)&v401->__shared_owners_;
    do
      v417 = __ldaxr(v416);
    while (__stlxr(v417 - 1, v416));
    if (!v417)
    {
      ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
      std::__shared_weak_count::__release_weak(v401);
    }
  }
  if ((_QWORD)v455)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v455 + 40), &v455);
  v418 = (std::__shared_weak_count *)*((_QWORD *)&v455 + 1);
  if (*((_QWORD *)&v455 + 1))
  {
    v419 = (unint64_t *)(*((_QWORD *)&v455 + 1) + 8);
    do
      v420 = __ldaxr(v419);
    while (__stlxr(v420 - 1, v419));
    if (!v420)
    {
      ((void (*)(std::__shared_weak_count *))v418->__on_zero_shared)(v418);
      std::__shared_weak_count::__release_weak(v418);
    }
  }
  if (v395)
  {
    v421 = (unint64_t *)&v395->__shared_owners_;
    do
      v422 = __ldaxr(v421);
    while (__stlxr(v422 - 1, v421));
    if (!v422)
    {
      ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
      std::__shared_weak_count::__release_weak(v395);
    }
  }
  v424 = *(_QWORD *)(a1 + 24);
  v423 = *(std::__shared_weak_count **)(a1 + 32);
  if (v423)
  {
    v425 = (unint64_t *)&v423->__shared_owners_;
    do
      v426 = __ldxr(v425);
    while (__stxr(v426 + 1, v425));
    v427 = *v9;
    do
      v428 = __ldxr(v425);
    while (__stxr(v428 + 1, v425));
    v429 = v423;
  }
  else
  {
    v429 = 0;
    v427 = *v9;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v455, 0, 1.58366006e190);
  v430 = v455;
  v431 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  if (v429)
  {
    v432 = (unint64_t *)&v429->__shared_owners_;
    do
      v433 = __ldxr(v432);
    while (__stxr(v433 + 1, v432));
  }
  v461 = 0;
  v434 = operator new(0x20uLL);
  *v434 = &off_1E69884B8;
  v434[1] = v424;
  v434[2] = v429;
  if (v429)
  {
    v435 = (unint64_t *)&v429->__shared_owners_;
    do
      v436 = __ldxr(v435);
    while (__stxr(v436 + 1, v435));
  }
  *((_DWORD *)v434 + 6) = v427;
  v461 = v434;
  v457 = 0u;
  v458 = 0u;
  v459 = 0;
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v457, (uint64_t)v460);
  v459 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v430, v431, (AMCP *)&v457);
  if (v459)
    v459(0, (uint64_t)&v457, 0, 0);
  v440 = v461;
  if (v461 == v460)
  {
    v441 = 4;
    v440 = v460;
    goto LABEL_650;
  }
  if (v461)
  {
    v441 = 5;
LABEL_650:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v440 + 8 * v441))(v440, v437, v438, v439);
  }
  if (v429)
  {
    v442 = (unint64_t *)&v429->__shared_owners_;
    do
      v443 = __ldaxr(v442);
    while (__stlxr(v443 - 1, v442));
    if (!v443)
    {
      ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
      std::__shared_weak_count::__release_weak(v429);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(v455);
  if (v429)
  {
    v444 = (unint64_t *)&v429->__shared_owners_;
    do
      v445 = __ldaxr(v444);
    while (__stlxr(v445 - 1, v444));
    if (!v445)
    {
      ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
      std::__shared_weak_count::__release_weak(v429);
    }
  }
  if ((_QWORD)v455)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v455 + 40), &v455);
  v446 = (std::__shared_weak_count *)*((_QWORD *)&v455 + 1);
  if (*((_QWORD *)&v455 + 1))
  {
    v447 = (unint64_t *)(*((_QWORD *)&v455 + 1) + 8);
    do
      v448 = __ldaxr(v447);
    while (__stlxr(v448 - 1, v447));
    if (!v448)
    {
      ((void (*)(std::__shared_weak_count *))v446->__on_zero_shared)(v446);
      std::__shared_weak_count::__release_weak(v446);
    }
  }
  if (v423)
  {
    v449 = (unint64_t *)&v423->__shared_owners_;
    do
      v450 = __ldaxr(v449);
    while (__stlxr(v450 - 1, v449));
    if (!v450)
    {
      ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
      std::__shared_weak_count::__release_weak(v423);
    }
  }
}

void sub_1B5AF23E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMCP::ASP::PlugIn_Object::populate_volume_control_core(uint64_t a1, unsigned int a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int *v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t Is_Property_Settable;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t Has_Property;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  int v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  _QWORD *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  __int128 v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  _QWORD *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  _QWORD *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  uint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  int v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  _QWORD *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  __int128 v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  _QWORD *v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  int v222;
  unint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  int v232;
  unint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  __int128 v241;
  __int128 v242;
  double v243[2];
  __int128 v244;
  __int128 v245;
  void (*v246)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v247[24];
  _BYTE *v248;
  uint64_t v249;

  v249 = *MEMORY[0x1E0C80C00];
  AMCP::ASP::PlugIn_Object::populate_control_core(a1, a2, a3);
  v6 = *(_QWORD *)(a1 + 24);
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (int *)(a1 + 44);
    v10 = *(_DWORD *)(a1 + 44);
    v241 = 0uLL;
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
    v14 = v5;
  }
  else
  {
    v14 = 0;
    v9 = (int *)(a1 + 44);
    v10 = *(_DWORD *)(a1 + 44);
    v241 = 0uLL;
  }
  strcpy((char *)v243, "vsclbolg");
  BYTE1(v243[1]) = 0;
  WORD1(v243[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v242, 0, v243[0]);
  v15 = v242;
  v16 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v248 = 0;
  v19 = operator new(0x28uLL);
  *v19 = &off_1E6989B88;
  v19[1] = v6;
  v19[2] = v5;
  if (v5)
  {
    v20 = (unint64_t *)&v5->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *((_DWORD *)v19 + 6) = v10;
  *(_QWORD *)((char *)v19 + 28) = 0x676C6F626C637376;
  *((_DWORD *)v19 + 9) = 0;
  v248 = v19;
  v244 = 0u;
  v245 = 0u;
  v246 = 0;
  std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)&v244, (uint64_t)v247);
  v246 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v15, v16, (AMCP *)&v244);
  if (v246)
    v246(0, (uint64_t)&v244, 0, 0);
  v24 = v248;
  if (v248 == v247)
  {
    v25 = 4;
    v24 = v247;
    goto LABEL_21;
  }
  if (v248)
  {
    v25 = 5;
LABEL_21:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v24 + 8 * v25))(v24, v22, v23);
  }
  if (v5)
  {
    v26 = (unint64_t *)&v5->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v28 = v242;
  AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(v242);
  v29 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
  if (v14)
  {
    v30 = (unint64_t *)&v14->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v248 = 0;
  v32 = operator new(0x28uLL);
  *v32 = &off_1E6989C08;
  v32[1] = v6;
  v32[2] = v14;
  if (v14)
  {
    v33 = (unint64_t *)&v14->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  *((_DWORD *)v32 + 6) = v10;
  *(_QWORD *)((char *)v32 + 28) = 0x676C6F626C637376;
  *((_DWORD *)v32 + 9) = 0;
  v248 = v32;
  v244 = 0u;
  v245 = 0u;
  v246 = 0;
  std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)&v244, (uint64_t)v247);
  v246 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v28, v29, (AMCP *)&v244);
  if (v246)
    v246(0, (uint64_t)&v244, 0, 0);
  v37 = v248;
  if (v248 == v247)
  {
    v38 = 4;
    v37 = v247;
    goto LABEL_39;
  }
  if (v248)
  {
    v38 = 5;
LABEL_39:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v37 + 8 * v38))(v37, v35, v36);
  }
  if (v14)
  {
    v39 = (unint64_t *)&v14->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(v242);
  v41 = v242;
  v242 = 0uLL;
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v241 + 1);
  v241 = v41;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
  if (*((_QWORD *)&v242 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (!v14)
    goto LABEL_59;
  v48 = (unint64_t *)&v14->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (v49)
  {
LABEL_59:
    if (v5)
      goto LABEL_60;
LABEL_70:
    v52 = v241;
    Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
    goto LABEL_71;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!v5)
    goto LABEL_70;
LABEL_60:
  v50 = (unint64_t *)&v5->__shared_owners_;
  do
    v51 = __ldaxr(v50);
  while (__stlxr(v51 - 1, v50));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v52 = v241;
  v53 = (unint64_t *)&v5->__shared_owners_;
  do
    v54 = __ldxr(v53);
  while (__stxr(v54 + 1, v53));
  Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
  v56 = (unint64_t *)&v5->__shared_owners_;
  do
    v57 = __ldxr(v56);
  while (__stxr(v57 + 1, v56));
LABEL_71:
  v248 = 0;
  v58 = operator new(0x28uLL);
  *v58 = &off_1E6989C88;
  v58[1] = v6;
  v58[2] = v5;
  if (v5)
  {
    v59 = (unint64_t *)&v5->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  *((_DWORD *)v58 + 6) = v10;
  *(_QWORD *)((char *)v58 + 28) = 0x676C6F626C637376;
  *((_DWORD *)v58 + 9) = 0;
  v248 = v58;
  v244 = 0u;
  v245 = 0u;
  v246 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)&v244, (uint64_t)v247);
  v246 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v52, Is_Property_Settable, (AMCP *)&v244);
  if (v246)
    v246(0, (uint64_t)&v244, 0, 0);
  v62 = v248;
  if (v248 == v247)
  {
    v63 = 4;
    v62 = v247;
  }
  else
  {
    if (!v248)
      goto LABEL_81;
    v63 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v62 + 8 * v63))(v62, v61);
LABEL_81:
  if (v5)
  {
    v64 = (unint64_t *)&v5->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v66 = __ldaxr(v64);
    while (__stlxr(v66 - 1, v64));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v67 = v241;
    v68 = (unint64_t *)&v5->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
    Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    v71 = (unint64_t *)&v5->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  else
  {
    v67 = v241;
    Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  v248 = 0;
  v73 = operator new(0x28uLL);
  *v73 = &off_1E6989D08;
  v73[1] = v6;
  v73[2] = v5;
  if (v5)
  {
    v74 = (unint64_t *)&v5->__shared_owners_;
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  *((_DWORD *)v73 + 6) = v10;
  *(_QWORD *)((char *)v73 + 28) = 0x676C6F626C637376;
  *((_DWORD *)v73 + 9) = 0;
  v248 = v73;
  v244 = 0u;
  v245 = 0u;
  v246 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v244, (uint64_t)v247);
  v246 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v67, Has_Property, (AMCP *)&v244);
  if (v246)
    v246(0, (uint64_t)&v244, 0, 0);
  v77 = v248;
  if (v248 == v247)
  {
    v78 = 4;
    v77 = v247;
  }
  else
  {
    if (!v248)
      goto LABEL_105;
    v78 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v77 + 8 * v78))(v77, v76);
LABEL_105:
  if (v5)
  {
    v79 = (unint64_t *)&v5->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v81 = __ldaxr(v79);
    while (__stlxr(v81 - 1, v79));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if ((_QWORD)v241)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v241 + 40), &v241);
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v241 + 1);
  if (*((_QWORD *)&v241 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v241 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (v5)
  {
    v85 = (unint64_t *)&v5->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v88 = *(_QWORD *)(a1 + 24);
  v87 = *(std::__shared_weak_count **)(a1 + 32);
  if (v87)
  {
    v89 = (unint64_t *)&v87->__shared_owners_;
    do
      v90 = __ldxr(v89);
    while (__stxr(v90 + 1, v89));
    v91 = *v9;
    v241 = 0uLL;
    v92 = (unint64_t *)&v87->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
    do
      v94 = __ldxr(v92);
    while (__stxr(v94 + 1, v92));
    v95 = v87;
  }
  else
  {
    v95 = 0;
    v91 = *v9;
    v241 = 0uLL;
  }
  strcpy((char *)v243, "vdclbolg");
  BYTE1(v243[1]) = 0;
  WORD1(v243[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v242, 0, v243[0]);
  v96 = v242;
  v97 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
  if (v87)
  {
    v98 = (unint64_t *)&v87->__shared_owners_;
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
  }
  v248 = 0;
  v100 = operator new(0x28uLL);
  *v100 = &off_1E6989D88;
  v100[1] = v88;
  v100[2] = v87;
  if (v87)
  {
    v101 = (unint64_t *)&v87->__shared_owners_;
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
  }
  *((_DWORD *)v100 + 6) = v91;
  *(_QWORD *)((char *)v100 + 28) = 0x676C6F626C636476;
  *((_DWORD *)v100 + 9) = 0;
  v248 = v100;
  v244 = 0u;
  v245 = 0u;
  v246 = 0;
  std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)&v244, (uint64_t)v247);
  v246 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v96, v97, (AMCP *)&v244);
  if (v246)
    v246(0, (uint64_t)&v244, 0, 0);
  v105 = v248;
  if (v248 == v247)
  {
    v106 = 4;
    v105 = v247;
    goto LABEL_145;
  }
  if (v248)
  {
    v106 = 5;
LABEL_145:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v105 + 8 * v106))(v105, v103, v104);
  }
  if (v87)
  {
    v107 = (unint64_t *)&v87->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v109 = v242;
  AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(v242);
  v110 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
  if (v95)
  {
    v111 = (unint64_t *)&v95->__shared_owners_;
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 1, v111));
  }
  v248 = 0;
  v113 = operator new(0x28uLL);
  *v113 = &off_1E6989E08;
  v113[1] = v88;
  v113[2] = v95;
  if (v95)
  {
    v114 = (unint64_t *)&v95->__shared_owners_;
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 1, v114));
  }
  *((_DWORD *)v113 + 6) = v91;
  *(_QWORD *)((char *)v113 + 28) = 0x676C6F626C636476;
  *((_DWORD *)v113 + 9) = 0;
  v248 = v113;
  v244 = 0u;
  v245 = 0u;
  v246 = 0;
  std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)&v244, (uint64_t)v247);
  v246 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v109, v110, (AMCP *)&v244);
  if (v246)
    v246(0, (uint64_t)&v244, 0, 0);
  v118 = v248;
  if (v248 == v247)
  {
    v119 = 4;
    v118 = v247;
    goto LABEL_163;
  }
  if (v248)
  {
    v119 = 5;
LABEL_163:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v118 + 8 * v119))(v118, v116, v117);
  }
  if (v95)
  {
    v120 = (unint64_t *)&v95->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(v242);
  v122 = v242;
  v242 = 0uLL;
  v123 = (std::__shared_weak_count *)*((_QWORD *)&v241 + 1);
  v241 = v122;
  if (v123)
  {
    v124 = (unint64_t *)&v123->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
  if (*((_QWORD *)&v242 + 1))
  {
    v127 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  if (!v95)
    goto LABEL_183;
  v129 = (unint64_t *)&v95->__shared_owners_;
  do
    v130 = __ldaxr(v129);
  while (__stlxr(v130 - 1, v129));
  if (v130)
  {
LABEL_183:
    if (v87)
      goto LABEL_184;
LABEL_194:
    v133 = v241;
    v136 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
    goto LABEL_195;
  }
  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
  std::__shared_weak_count::__release_weak(v95);
  if (!v87)
    goto LABEL_194;
LABEL_184:
  v131 = (unint64_t *)&v87->__shared_owners_;
  do
    v132 = __ldaxr(v131);
  while (__stlxr(v132 - 1, v131));
  if (!v132)
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
  }
  v133 = v241;
  v134 = (unint64_t *)&v87->__shared_owners_;
  do
    v135 = __ldxr(v134);
  while (__stxr(v135 + 1, v134));
  v136 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
  v137 = (unint64_t *)&v87->__shared_owners_;
  do
    v138 = __ldxr(v137);
  while (__stxr(v138 + 1, v137));
LABEL_195:
  v248 = 0;
  v139 = operator new(0x28uLL);
  *v139 = &off_1E6989E88;
  v139[1] = v88;
  v139[2] = v87;
  if (v87)
  {
    v140 = (unint64_t *)&v87->__shared_owners_;
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
  }
  *((_DWORD *)v139 + 6) = v91;
  *(_QWORD *)((char *)v139 + 28) = 0x676C6F626C636476;
  *((_DWORD *)v139 + 9) = 0;
  v248 = v139;
  v244 = 0u;
  v245 = 0u;
  v246 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)&v244, (uint64_t)v247);
  v246 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v133, v136, (AMCP *)&v244);
  if (v246)
    v246(0, (uint64_t)&v244, 0, 0);
  v143 = v248;
  if (v248 == v247)
  {
    v144 = 4;
    v143 = v247;
  }
  else
  {
    if (!v248)
      goto LABEL_205;
    v144 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v143 + 8 * v144))(v143, v142);
LABEL_205:
  if (v87)
  {
    v145 = (unint64_t *)&v87->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
    do
      v147 = __ldaxr(v145);
    while (__stlxr(v147 - 1, v145));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
    v148 = v241;
    v149 = (unint64_t *)&v87->__shared_owners_;
    do
      v150 = __ldxr(v149);
    while (__stxr(v150 + 1, v149));
    v151 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    v152 = (unint64_t *)&v87->__shared_owners_;
    do
      v153 = __ldxr(v152);
    while (__stxr(v153 + 1, v152));
  }
  else
  {
    v148 = v241;
    v151 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  v248 = 0;
  v154 = operator new(0x28uLL);
  *v154 = &off_1E6989F08;
  v154[1] = v88;
  v154[2] = v87;
  if (v87)
  {
    v155 = (unint64_t *)&v87->__shared_owners_;
    do
      v156 = __ldxr(v155);
    while (__stxr(v156 + 1, v155));
  }
  *((_DWORD *)v154 + 6) = v91;
  *(_QWORD *)((char *)v154 + 28) = 0x676C6F626C636476;
  *((_DWORD *)v154 + 9) = 0;
  v248 = v154;
  v244 = 0u;
  v245 = 0u;
  v246 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v244, (uint64_t)v247);
  v246 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v148, v151, (AMCP *)&v244);
  if (v246)
    v246(0, (uint64_t)&v244, 0, 0);
  v158 = v248;
  if (v248 == v247)
  {
    v159 = 4;
    v158 = v247;
  }
  else
  {
    if (!v248)
      goto LABEL_229;
    v159 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v158 + 8 * v159))(v158, v157);
LABEL_229:
  if (v87)
  {
    v160 = (unint64_t *)&v87->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
    do
      v162 = __ldaxr(v160);
    while (__stlxr(v162 - 1, v160));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if ((_QWORD)v241)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v241 + 40), &v241);
  v163 = (std::__shared_weak_count *)*((_QWORD *)&v241 + 1);
  if (*((_QWORD *)&v241 + 1))
  {
    v164 = (unint64_t *)(*((_QWORD *)&v241 + 1) + 8);
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  if (v87)
  {
    v166 = (unint64_t *)&v87->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v169 = *(_QWORD *)(a1 + 24);
  v168 = *(std::__shared_weak_count **)(a1 + 32);
  if (v168)
  {
    v170 = (unint64_t *)&v168->__shared_owners_;
    do
      v171 = __ldxr(v170);
    while (__stxr(v171 + 1, v170));
    v172 = *v9;
    v241 = 0uLL;
    v173 = (unint64_t *)&v168->__shared_owners_;
    do
      v174 = __ldxr(v173);
    while (__stxr(v174 + 1, v173));
  }
  else
  {
    v172 = *v9;
    v241 = 0uLL;
  }
  strcpy((char *)v243, "rdclbolg");
  BYTE1(v243[1]) = 0;
  WORD1(v243[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v242, 0, v243[0]);
  v175 = v242;
  v176 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRange ()(void)>>();
  if (v168)
  {
    v177 = (unint64_t *)&v168->__shared_owners_;
    do
      v178 = __ldxr(v177);
    while (__stxr(v178 + 1, v177));
  }
  v248 = 0;
  v179 = operator new(0x28uLL);
  *v179 = &off_1E6989F88;
  v179[1] = v169;
  v179[2] = v168;
  if (v168)
  {
    v180 = (unint64_t *)&v168->__shared_owners_;
    do
      v181 = __ldxr(v180);
    while (__stxr(v181 + 1, v180));
  }
  *((_DWORD *)v179 + 6) = v172;
  *(_QWORD *)((char *)v179 + 28) = 0x676C6F626C636472;
  *((_DWORD *)v179 + 9) = 0;
  v248 = v179;
  v244 = 0u;
  v245 = 0u;
  v246 = 0;
  std::__function::__value_func<CA::ValueRange ()(void)>::__value_func[abi:ne180100]((uint64_t)&v244, (uint64_t)v247);
  v246 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRange ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v175, v176, (AMCP *)&v244);
  if (v246)
    v246(0, (uint64_t)&v244, 0, 0);
  v184 = v248;
  if (v248 == v247)
  {
    v185 = 4;
    v184 = v247;
    goto LABEL_268;
  }
  if (v248)
  {
    v185 = 5;
LABEL_268:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v184 + 8 * v185))(v184, v182, v183);
  }
  if (v168)
  {
    v186 = (unint64_t *)&v168->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(v242);
  v188 = v242;
  v242 = 0uLL;
  v189 = (std::__shared_weak_count *)*((_QWORD *)&v241 + 1);
  v241 = v188;
  if (v189)
  {
    v190 = (unint64_t *)&v189->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v192 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
  if (!*((_QWORD *)&v242 + 1))
    goto LABEL_283;
  v193 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
  do
    v194 = __ldaxr(v193);
  while (__stlxr(v194 - 1, v193));
  if (v194)
  {
LABEL_283:
    if (v168)
      goto LABEL_284;
LABEL_294:
    v197 = v241;
    v200 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    goto LABEL_295;
  }
  ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
  std::__shared_weak_count::__release_weak(v192);
  if (!v168)
    goto LABEL_294;
LABEL_284:
  v195 = (unint64_t *)&v168->__shared_owners_;
  do
    v196 = __ldaxr(v195);
  while (__stlxr(v196 - 1, v195));
  if (!v196)
  {
    ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
    std::__shared_weak_count::__release_weak(v168);
  }
  v197 = v241;
  v198 = (unint64_t *)&v168->__shared_owners_;
  do
    v199 = __ldxr(v198);
  while (__stxr(v199 + 1, v198));
  v200 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  v201 = (unint64_t *)&v168->__shared_owners_;
  do
    v202 = __ldxr(v201);
  while (__stxr(v202 + 1, v201));
LABEL_295:
  v248 = 0;
  v203 = operator new(0x28uLL);
  *v203 = &off_1E698A008;
  v203[1] = v169;
  v203[2] = v168;
  if (v168)
  {
    v204 = (unint64_t *)&v168->__shared_owners_;
    do
      v205 = __ldxr(v204);
    while (__stxr(v205 + 1, v204));
  }
  *((_DWORD *)v203 + 6) = v172;
  *(_QWORD *)((char *)v203 + 28) = 0x676C6F626C636472;
  *((_DWORD *)v203 + 9) = 0;
  v248 = v203;
  v244 = 0u;
  v245 = 0u;
  v246 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v244, (uint64_t)v247);
  v246 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v197, v200, (AMCP *)&v244);
  if (v246)
    v246(0, (uint64_t)&v244, 0, 0);
  v207 = v248;
  if (v248 == v247)
  {
    v208 = 4;
    v207 = v247;
  }
  else
  {
    if (!v248)
      goto LABEL_305;
    v208 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v207 + 8 * v208))(v207, v206);
LABEL_305:
  if (v168)
  {
    v209 = (unint64_t *)&v168->__shared_owners_;
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
    do
      v211 = __ldaxr(v209);
    while (__stlxr(v211 - 1, v209));
    if (!v211)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  if ((_QWORD)v241)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v241 + 40), &v241);
  v212 = (std::__shared_weak_count *)*((_QWORD *)&v241 + 1);
  if (*((_QWORD *)&v241 + 1))
  {
    v213 = (unint64_t *)(*((_QWORD *)&v241 + 1) + 8);
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  if (v168)
  {
    v215 = (unint64_t *)&v168->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v242, 0, 1.5836601e190);
  v217 = v242;
  v219 = *(_QWORD *)(a1 + 24);
  v218 = *(_QWORD *)(a1 + 32);
  if (v218)
  {
    v220 = (unint64_t *)(v218 + 8);
    do
      v221 = __ldxr(v220);
    while (__stxr(v221 + 1, v220));
  }
  v222 = *v9;
  v223 = AMCP::Implementation::get_type_marker<std::function<float ()(float)>>();
  v248 = 0;
  v224 = operator new(0x20uLL);
  *v224 = &off_1E698A088;
  v224[1] = v219;
  v224[2] = v218;
  *((_DWORD *)v224 + 6) = v222;
  v248 = v224;
  v244 = 0u;
  v245 = 0u;
  v246 = 0;
  std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)&v244, (uint64_t)v247);
  v246 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<float ()(float)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v217, v223, (AMCP *)&v244);
  if (v246)
    v246(0, (uint64_t)&v244, 0, 0);
  v226 = v248;
  if (v248 == v247)
  {
    v227 = 4;
    v226 = v247;
  }
  else
  {
    if (!v248)
      goto LABEL_335;
    v227 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v226 + 8 * v227))(v226, v225);
LABEL_335:
  v229 = *(_QWORD *)(a1 + 24);
  v228 = *(_QWORD *)(a1 + 32);
  if (v228)
  {
    v230 = (unint64_t *)(v228 + 8);
    do
      v231 = __ldxr(v230);
    while (__stxr(v231 + 1, v230));
  }
  v232 = *v9;
  v233 = AMCP::Implementation::get_type_marker<std::function<float ()(float,BOOL)>>();
  v248 = 0;
  v234 = operator new(0x20uLL);
  *v234 = &off_1E698A108;
  v234[1] = v229;
  v234[2] = v228;
  *((_DWORD *)v234 + 6) = v232;
  v248 = v234;
  v244 = 0u;
  v245 = 0u;
  v246 = 0;
  std::__function::__value_func<float ()(float,BOOL)>::__value_func[abi:ne180100]((uint64_t)&v244, (uint64_t)v247);
  v246 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<float ()(float,BOOL)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v217, v233, (AMCP *)&v244);
  if (v246)
    v246(0, (uint64_t)&v244, 0, 0);
  v236 = v248;
  if (v248 == v247)
  {
    v237 = 4;
    v236 = v247;
  }
  else
  {
    if (!v248)
      goto LABEL_345;
    v237 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v236 + 8 * v237))(v236, v235);
LABEL_345:
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v217 + 40), &v242);
  v238 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
  if (*((_QWORD *)&v242 + 1))
  {
    v239 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
}

void sub_1B5AF3A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMCP::ASP::PlugIn_Object::populate_BOOLean_control_core(uint64_t a1, unsigned int a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  __n128 v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t Is_Property_Settable;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t Has_Property;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  __int128 v85;
  __int128 v86;
  double v87[2];
  __int128 v88;
  __int128 v89;
  double (*v90)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v91[24];
  _BYTE *v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  AMCP::ASP::PlugIn_Object::populate_control_core(a1, a2, a3);
  v6 = *(_QWORD *)(a1 + 24);
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_DWORD *)(a1 + 44);
    v85 = 0uLL;
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
    v13 = v5;
  }
  else
  {
    v13 = 0;
    v9 = *(_DWORD *)(a1 + 44);
    v85 = 0uLL;
  }
  strcpy((char *)v87, "lvcbbolg");
  BYTE1(v87[1]) = 0;
  WORD1(v87[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v86, 0, v87[0]);
  v14 = v86;
  v15 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  if (v5)
  {
    v16 = (unint64_t *)&v5->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v92 = 0;
  v18 = operator new(0x28uLL);
  *v18 = &off_1E698A188;
  v18[1] = v6;
  v18[2] = v5;
  if (v5)
  {
    v19 = (unint64_t *)&v5->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *((_DWORD *)v18 + 6) = v9;
  *(_QWORD *)((char *)v18 + 28) = 0x676C6F626263766CLL;
  *((_DWORD *)v18 + 9) = 0;
  v92 = v18;
  v88 = 0u;
  v89 = 0u;
  v90 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v88, (uint64_t)v91);
  v90 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v14, v15, (AMCP *)&v88);
  if (v90)
    v21.n128_f64[0] = v90(0, (uint64_t)&v88, 0, 0);
  v22 = v92;
  if (v92 == v91)
  {
    v23 = 4;
    v22 = v91;
    goto LABEL_21;
  }
  if (v92)
  {
    v23 = 5;
LABEL_21:
    (*(void (**)(__n128))(*v22 + 8 * v23))(v21);
  }
  if (v5)
  {
    v24 = (unint64_t *)&v5->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v5->__on_zero_shared)(v5, v21);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v26 = v86;
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v86);
  v27 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  if (v13)
  {
    v28 = (unint64_t *)&v13->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v92 = 0;
  v30 = operator new(0x28uLL);
  *v30 = &off_1E698A208;
  v30[1] = v6;
  v30[2] = v13;
  if (v13)
  {
    v31 = (unint64_t *)&v13->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  *((_DWORD *)v30 + 6) = v9;
  *(_QWORD *)((char *)v30 + 28) = 0x676C6F626263766CLL;
  *((_DWORD *)v30 + 9) = 0;
  v92 = v30;
  v88 = 0u;
  v89 = 0u;
  v90 = 0;
  std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)&v88, (uint64_t)v91);
  v90 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v26, v27, (AMCP *)&v88);
  if (v90)
    v90(0, (uint64_t)&v88, 0, 0);
  v35 = v92;
  if (v92 == v91)
  {
    v36 = 4;
    v35 = v91;
    goto LABEL_39;
  }
  if (v92)
  {
    v36 = 5;
LABEL_39:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v35 + 8 * v36))(v35, v33, v34);
  }
  if (v13)
  {
    v37 = (unint64_t *)&v13->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(v86);
  v39 = v86;
  v86 = 0uLL;
  v40 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  v85 = v39;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (!v13)
    goto LABEL_59;
  v46 = (unint64_t *)&v13->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (v47)
  {
LABEL_59:
    if (v5)
      goto LABEL_60;
LABEL_70:
    v50 = v85;
    Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
    goto LABEL_71;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!v5)
    goto LABEL_70;
LABEL_60:
  v48 = (unint64_t *)&v5->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v50 = v85;
  v51 = (unint64_t *)&v5->__shared_owners_;
  do
    v52 = __ldxr(v51);
  while (__stxr(v52 + 1, v51));
  Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
  v54 = (unint64_t *)&v5->__shared_owners_;
  do
    v55 = __ldxr(v54);
  while (__stxr(v55 + 1, v54));
LABEL_71:
  v92 = 0;
  v56 = operator new(0x28uLL);
  *v56 = &off_1E698A288;
  v56[1] = v6;
  v56[2] = v5;
  if (v5)
  {
    v57 = (unint64_t *)&v5->__shared_owners_;
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  *((_DWORD *)v56 + 6) = v9;
  *(_QWORD *)((char *)v56 + 28) = 0x676C6F626263766CLL;
  *((_DWORD *)v56 + 9) = 0;
  v92 = v56;
  v88 = 0u;
  v89 = 0u;
  v90 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)&v88, (uint64_t)v91);
  v90 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v50, Is_Property_Settable, (AMCP *)&v88);
  if (v90)
    v90(0, (uint64_t)&v88, 0, 0);
  v60 = v92;
  if (v92 == v91)
  {
    v61 = 4;
    v60 = v91;
  }
  else
  {
    if (!v92)
      goto LABEL_81;
    v61 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v60 + 8 * v61))(v60, v59);
LABEL_81:
  if (v5)
  {
    v62 = (unint64_t *)&v5->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v64 = __ldaxr(v62);
    while (__stlxr(v64 - 1, v62));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v65 = v85;
    v66 = (unint64_t *)&v5->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
    Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    v69 = (unint64_t *)&v5->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  else
  {
    v65 = v85;
    Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  v92 = 0;
  v71 = operator new(0x28uLL);
  *v71 = &off_1E698A308;
  v71[1] = v6;
  v71[2] = v5;
  if (v5)
  {
    v72 = (unint64_t *)&v5->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  *((_DWORD *)v71 + 6) = v9;
  *(_QWORD *)((char *)v71 + 28) = 0x676C6F626263766CLL;
  *((_DWORD *)v71 + 9) = 0;
  v92 = v71;
  v88 = 0u;
  v89 = 0u;
  v90 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v88, (uint64_t)v91);
  v90 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v65, Has_Property, (AMCP *)&v88);
  if (v90)
    v90(0, (uint64_t)&v88, 0, 0);
  v75 = v92;
  if (v92 == v91)
  {
    v76 = 4;
    v75 = v91;
  }
  else
  {
    if (!v92)
      goto LABEL_105;
    v76 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v75 + 8 * v76))(v75, v74);
LABEL_105:
  if (v5)
  {
    v77 = (unint64_t *)&v5->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v79 = __ldaxr(v77);
    while (__stlxr(v79 - 1, v77));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if ((_QWORD)v85)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v85 + 40), &v85);
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (v5)
  {
    v83 = (unint64_t *)&v5->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1B5AF429C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMCP::ASP::PlugIn_Object::populate_selector_control_core(uint64_t a1, unsigned int a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int *v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t Is_Property_Settable;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t Has_Property;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  __int128 v116;
  __int128 v117;
  double v118[2];
  __int128 v119;
  __int128 v120;
  void (*v121)(int, uint64_t, AMCP::Thing *, uint64_t *);
  char v122[24];
  char *v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  AMCP::ASP::PlugIn_Object::populate_control_core(a1, a2, a3);
  v6 = *(_QWORD *)(a1 + 24);
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (int *)(a1 + 44);
    v10 = *(_DWORD *)(a1 + 44);
    v116 = 0uLL;
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
    v14 = v5;
  }
  else
  {
    v14 = 0;
    v9 = (int *)(a1 + 44);
    v10 = *(_DWORD *)(a1 + 44);
    v116 = 0uLL;
  }
  strcpy((char *)v118, "iccsbolg");
  BYTE1(v118[1]) = 0;
  WORD1(v118[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v117, 0, v118[0]);
  v15 = v117;
  v16 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v123 = 0;
  v19 = operator new(0x28uLL);
  *v19 = &off_1E698A388;
  v19[1] = v6;
  v19[2] = v5;
  if (v5)
  {
    v20 = (unint64_t *)&v5->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *((_DWORD *)v19 + 6) = v10;
  *(_QWORD *)((char *)v19 + 28) = 0x676C6F6273636369;
  *((_DWORD *)v19 + 9) = 0;
  v123 = (char *)v19;
  v119 = 0u;
  v120 = 0u;
  v121 = 0;
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v119, (uint64_t)v122);
  v121 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v15, v16, (AMCP *)&v119);
  if (v121)
    v121(0, (uint64_t)&v119, 0, 0);
  v24 = v123;
  if (v123 == v122)
  {
    v25 = 4;
    v24 = v122;
    goto LABEL_21;
  }
  if (v123)
  {
    v25 = 5;
LABEL_21:
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)v24 + 8 * v25))(v24, v22, v23);
  }
  if (v5)
  {
    v26 = (unint64_t *)&v5->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v28 = v117;
  AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(v117);
  v29 = AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>();
  if (v14)
  {
    v30 = (unint64_t *)&v14->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v123 = 0;
  v32 = operator new(0x28uLL);
  *v32 = &off_1E698A408;
  v32[1] = v6;
  v32[2] = v14;
  if (v14)
  {
    v33 = (unint64_t *)&v14->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  *((_DWORD *)v32 + 6) = v10;
  *(_QWORD *)((char *)v32 + 28) = 0x676C6F6273636369;
  *((_DWORD *)v32 + 9) = 0;
  v123 = (char *)v32;
  v119 = 0u;
  v120 = 0u;
  v121 = 0;
  std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)&v119, (uint64_t)v122);
  v121 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(std::vector<unsigned int> const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v28, v29, (AMCP *)&v119);
  if (v121)
    v121(0, (uint64_t)&v119, 0, 0);
  v37 = v123;
  if (v123 == v122)
  {
    v38 = 4;
    v37 = v122;
    goto LABEL_39;
  }
  if (v123)
  {
    v38 = 5;
LABEL_39:
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)v37 + 8 * v38))(v37, v35, v36);
  }
  if (v14)
  {
    v39 = (unint64_t *)&v14->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(v117);
  v41 = v117;
  v117 = 0uLL;
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
  v116 = v41;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
  if (*((_QWORD *)&v117 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (!v14)
    goto LABEL_59;
  v48 = (unint64_t *)&v14->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (v49)
  {
LABEL_59:
    if (v5)
      goto LABEL_60;
LABEL_70:
    v52 = v116;
    Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
    goto LABEL_71;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!v5)
    goto LABEL_70;
LABEL_60:
  v50 = (unint64_t *)&v5->__shared_owners_;
  do
    v51 = __ldaxr(v50);
  while (__stlxr(v51 - 1, v50));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v52 = v116;
  v53 = (unint64_t *)&v5->__shared_owners_;
  do
    v54 = __ldxr(v53);
  while (__stxr(v54 + 1, v53));
  Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
  v56 = (unint64_t *)&v5->__shared_owners_;
  do
    v57 = __ldxr(v56);
  while (__stxr(v57 + 1, v56));
LABEL_71:
  v123 = 0;
  v58 = operator new(0x28uLL);
  *v58 = &off_1E698A488;
  v58[1] = v6;
  v58[2] = v5;
  if (v5)
  {
    v59 = (unint64_t *)&v5->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  *((_DWORD *)v58 + 6) = v10;
  *(_QWORD *)((char *)v58 + 28) = 0x676C6F6273636369;
  *((_DWORD *)v58 + 9) = 0;
  v123 = (char *)v58;
  v119 = 0u;
  v120 = 0u;
  v121 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)&v119, (uint64_t)v122);
  v121 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v52, Is_Property_Settable, (AMCP *)&v119);
  if (v121)
    v121(0, (uint64_t)&v119, 0, 0);
  v62 = v123;
  if (v123 == v122)
  {
    v63 = 4;
    v62 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_81;
    v63 = 5;
  }
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v62 + 8 * v63))(v62, v61);
LABEL_81:
  if (v5)
  {
    v64 = (unint64_t *)&v5->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v66 = __ldaxr(v64);
    while (__stlxr(v66 - 1, v64));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v67 = v116;
    v68 = (unint64_t *)&v5->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
    Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    v71 = (unint64_t *)&v5->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  else
  {
    v67 = v116;
    Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  v123 = 0;
  v73 = operator new(0x28uLL);
  *v73 = &off_1E698A508;
  v73[1] = v6;
  v73[2] = v5;
  if (v5)
  {
    v74 = (unint64_t *)&v5->__shared_owners_;
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  *((_DWORD *)v73 + 6) = v10;
  *(_QWORD *)((char *)v73 + 28) = 0x676C6F6273636369;
  *((_DWORD *)v73 + 9) = 0;
  v123 = (char *)v73;
  v119 = 0u;
  v120 = 0u;
  v121 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v119, (uint64_t)v122);
  v121 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v67, Has_Property, (AMCP *)&v119);
  if (v121)
    v121(0, (uint64_t)&v119, 0, 0);
  v77 = v123;
  if (v123 == v122)
  {
    v78 = 4;
    v77 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_105;
    v78 = 5;
  }
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v77 + 8 * v78))(v77, v76);
LABEL_105:
  if (v5)
  {
    v79 = (unint64_t *)&v5->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v81 = __ldaxr(v79);
    while (__stlxr(v81 - 1, v79));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if ((_QWORD)v116)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v116 + 40), &v116);
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
  if (*((_QWORD *)&v116 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (v5)
  {
    v85 = (unint64_t *)&v5->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v122[0] = 0;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)&v119, 0, v122, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v119 + 40), &v119);
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
  if (*((_QWORD *)&v119 + 1))
  {
    v88 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v91 = *(_QWORD *)(a1 + 24);
  v90 = *(std::__shared_weak_count **)(a1 + 32);
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
    v94 = *v9;
    do
      v95 = __ldxr(v92);
    while (__stxr(v95 + 1, v92));
    v96 = v90;
  }
  else
  {
    v96 = 0;
    v94 = *v9;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v117, 0, 1.58366012e190);
  v97 = v117;
  v98 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>();
  if (v96)
  {
    v99 = (unint64_t *)&v96->__shared_owners_;
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 1, v99));
  }
  v123 = 0;
  v101 = operator new(0x20uLL);
  *v101 = &off_1E698A588;
  v101[1] = v91;
  v101[2] = v96;
  if (v96)
  {
    v102 = (unint64_t *)&v96->__shared_owners_;
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
  *((_DWORD *)v101 + 6) = v94;
  v123 = (char *)v101;
  v119 = 0u;
  v120 = 0u;
  v121 = 0;
  std::__function::__value_func<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v119, (uint64_t)v122);
  v121 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v97, v98, (AMCP *)&v119);
  if (v121)
    v121(0, (uint64_t)&v119, 0, 0);
  v105 = v123;
  if (v123 == v122)
  {
    v106 = 4;
    v105 = v122;
    goto LABEL_149;
  }
  if (v123)
  {
    v106 = 5;
LABEL_149:
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v105 + 8 * v106))(v105, v104);
  }
  if (v96)
  {
    v107 = (unint64_t *)&v96->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(v117);
  if (v96)
  {
    v109 = (unint64_t *)&v96->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  if ((_QWORD)v117)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v117 + 40), &v117);
  v111 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
  if (*((_QWORD *)&v117 + 1))
  {
    v112 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  if (v90)
  {
    v114 = (unint64_t *)&v90->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
}

void sub_1B5AF4D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMCP::ASP::PlugIn_Object::populate_stereo_pan_control_core(uint64_t a1, unsigned int a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int *v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t Is_Property_Settable;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t Has_Property;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  int v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  __int128 v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  _QWORD *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  __int128 v136;
  __int128 v137;
  double v138[2];
  __int128 v139;
  __int128 v140;
  void (*v141)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v142[24];
  _BYTE *v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  AMCP::ASP::PlugIn_Object::populate_control_core(a1, a2, a3);
  v6 = *(_QWORD *)(a1 + 24);
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (int *)(a1 + 44);
    v10 = *(_DWORD *)(a1 + 44);
    v136 = 0uLL;
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
    v14 = v5;
  }
  else
  {
    v14 = 0;
    v9 = (int *)(a1 + 44);
    v10 = *(_DWORD *)(a1 + 44);
    v136 = 0uLL;
  }
  strcpy((char *)v138, "vcpsbolg");
  BYTE1(v138[1]) = 0;
  WORD1(v138[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v137, 0, v138[0]);
  v15 = v137;
  v16 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v143 = 0;
  v19 = operator new(0x28uLL);
  *v19 = &off_1E698A608;
  v19[1] = v6;
  v19[2] = v5;
  if (v5)
  {
    v20 = (unint64_t *)&v5->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *((_DWORD *)v19 + 6) = v10;
  *(_QWORD *)((char *)v19 + 28) = 0x676C6F6273706376;
  *((_DWORD *)v19 + 9) = 0;
  v143 = v19;
  v139 = 0u;
  v140 = 0u;
  v141 = 0;
  std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)&v139, (uint64_t)v142);
  v141 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v15, v16, (AMCP *)&v139);
  if (v141)
    v141(0, (uint64_t)&v139, 0, 0);
  v24 = v143;
  if (v143 == v142)
  {
    v25 = 4;
    v24 = v142;
    goto LABEL_21;
  }
  if (v143)
  {
    v25 = 5;
LABEL_21:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v24 + 8 * v25))(v24, v22, v23);
  }
  if (v5)
  {
    v26 = (unint64_t *)&v5->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v28 = v137;
  AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(v137);
  v29 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
  if (v14)
  {
    v30 = (unint64_t *)&v14->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v143 = 0;
  v32 = operator new(0x28uLL);
  *v32 = &off_1E698A688;
  v32[1] = v6;
  v32[2] = v14;
  if (v14)
  {
    v33 = (unint64_t *)&v14->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  *((_DWORD *)v32 + 6) = v10;
  *(_QWORD *)((char *)v32 + 28) = 0x676C6F6273706376;
  *((_DWORD *)v32 + 9) = 0;
  v143 = v32;
  v139 = 0u;
  v140 = 0u;
  v141 = 0;
  std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)&v139, (uint64_t)v142);
  v141 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v28, v29, (AMCP *)&v139);
  if (v141)
    v141(0, (uint64_t)&v139, 0, 0);
  v37 = v143;
  if (v143 == v142)
  {
    v38 = 4;
    v37 = v142;
    goto LABEL_39;
  }
  if (v143)
  {
    v38 = 5;
LABEL_39:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v37 + 8 * v38))(v37, v35, v36);
  }
  if (v14)
  {
    v39 = (unint64_t *)&v14->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(v137);
  v41 = v137;
  v137 = 0uLL;
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  v136 = v41;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (!v14)
    goto LABEL_59;
  v48 = (unint64_t *)&v14->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (v49)
  {
LABEL_59:
    if (v5)
      goto LABEL_60;
LABEL_70:
    v52 = v136;
    Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
    goto LABEL_71;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!v5)
    goto LABEL_70;
LABEL_60:
  v50 = (unint64_t *)&v5->__shared_owners_;
  do
    v51 = __ldaxr(v50);
  while (__stlxr(v51 - 1, v50));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v52 = v136;
  v53 = (unint64_t *)&v5->__shared_owners_;
  do
    v54 = __ldxr(v53);
  while (__stxr(v54 + 1, v53));
  Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
  v56 = (unint64_t *)&v5->__shared_owners_;
  do
    v57 = __ldxr(v56);
  while (__stxr(v57 + 1, v56));
LABEL_71:
  v143 = 0;
  v58 = operator new(0x28uLL);
  *v58 = &off_1E698A708;
  v58[1] = v6;
  v58[2] = v5;
  if (v5)
  {
    v59 = (unint64_t *)&v5->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  *((_DWORD *)v58 + 6) = v10;
  *(_QWORD *)((char *)v58 + 28) = 0x676C6F6273706376;
  *((_DWORD *)v58 + 9) = 0;
  v143 = v58;
  v139 = 0u;
  v140 = 0u;
  v141 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)&v139, (uint64_t)v142);
  v141 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v52, Is_Property_Settable, (AMCP *)&v139);
  if (v141)
    v141(0, (uint64_t)&v139, 0, 0);
  v62 = v143;
  if (v143 == v142)
  {
    v63 = 4;
    v62 = v142;
  }
  else
  {
    if (!v143)
      goto LABEL_81;
    v63 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v62 + 8 * v63))(v62, v61);
LABEL_81:
  if (v5)
  {
    v64 = (unint64_t *)&v5->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v66 = __ldaxr(v64);
    while (__stlxr(v66 - 1, v64));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v67 = v136;
    v68 = (unint64_t *)&v5->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
    Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    v71 = (unint64_t *)&v5->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  else
  {
    v67 = v136;
    Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  v143 = 0;
  v73 = operator new(0x28uLL);
  *v73 = &off_1E698A788;
  v73[1] = v6;
  v73[2] = v5;
  if (v5)
  {
    v74 = (unint64_t *)&v5->__shared_owners_;
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  *((_DWORD *)v73 + 6) = v10;
  *(_QWORD *)((char *)v73 + 28) = 0x676C6F6273706376;
  *((_DWORD *)v73 + 9) = 0;
  v143 = v73;
  v139 = 0u;
  v140 = 0u;
  v141 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v139, (uint64_t)v142);
  v141 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v67, Has_Property, (AMCP *)&v139);
  if (v141)
    v141(0, (uint64_t)&v139, 0, 0);
  v77 = v143;
  if (v143 == v142)
  {
    v78 = 4;
    v77 = v142;
  }
  else
  {
    if (!v143)
      goto LABEL_105;
    v78 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v77 + 8 * v78))(v77, v76);
LABEL_105:
  if (v5)
  {
    v79 = (unint64_t *)&v5->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v81 = __ldaxr(v79);
    while (__stlxr(v81 - 1, v79));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if ((_QWORD)v136)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v136 + 40), &v136);
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (v5)
  {
    v85 = (unint64_t *)&v5->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v88 = *(_QWORD *)(a1 + 24);
  v87 = *(std::__shared_weak_count **)(a1 + 32);
  if (v87)
  {
    v89 = (unint64_t *)&v87->__shared_owners_;
    do
      v90 = __ldxr(v89);
    while (__stxr(v90 + 1, v89));
    v91 = *v9;
    v136 = 0uLL;
    v92 = (unint64_t *)&v87->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  else
  {
    v91 = *v9;
    v136 = 0uLL;
  }
  strcpy((char *)v138, "ccpsbolg");
  BYTE1(v138[1]) = 0;
  WORD1(v138[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v137, 0, v138[0]);
  v94 = v137;
  v95 = AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>();
  if (v87)
  {
    v96 = (unint64_t *)&v87->__shared_owners_;
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }
  v143 = 0;
  v98 = operator new(0x28uLL);
  *v98 = &off_1E698A808;
  v98[1] = v88;
  v98[2] = v87;
  if (v87)
  {
    v99 = (unint64_t *)&v87->__shared_owners_;
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 1, v99));
  }
  *((_DWORD *)v98 + 6) = v91;
  *(_QWORD *)((char *)v98 + 28) = 0x676C6F6273706363;
  *((_DWORD *)v98 + 9) = 0;
  v143 = v98;
  v139 = 0u;
  v140 = 0u;
  v141 = 0;
  std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v139, (uint64_t)v142);
  v141 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v94, v95, (AMCP *)&v139);
  if (v141)
    v141(0, (uint64_t)&v139, 0, 0);
  v103 = v143;
  if (v143 == v142)
  {
    v104 = 4;
    v103 = v142;
    goto LABEL_144;
  }
  if (v143)
  {
    v104 = 5;
LABEL_144:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v103 + 8 * v104))(v103, v101, v102);
  }
  if (v87)
  {
    v105 = (unint64_t *)&v87->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(v137);
  v107 = v137;
  v137 = 0uLL;
  v108 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  v136 = v107;
  if (v108)
  {
    v109 = (unint64_t *)&v108->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (!*((_QWORD *)&v137 + 1))
    goto LABEL_159;
  v112 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
  do
    v113 = __ldaxr(v112);
  while (__stlxr(v113 - 1, v112));
  if (v113)
  {
LABEL_159:
    if (v87)
      goto LABEL_160;
LABEL_170:
    v116 = v136;
    v119 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    goto LABEL_171;
  }
  ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
  std::__shared_weak_count::__release_weak(v111);
  if (!v87)
    goto LABEL_170;
LABEL_160:
  v114 = (unint64_t *)&v87->__shared_owners_;
  do
    v115 = __ldaxr(v114);
  while (__stlxr(v115 - 1, v114));
  if (!v115)
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
  }
  v116 = v136;
  v117 = (unint64_t *)&v87->__shared_owners_;
  do
    v118 = __ldxr(v117);
  while (__stxr(v118 + 1, v117));
  v119 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  v120 = (unint64_t *)&v87->__shared_owners_;
  do
    v121 = __ldxr(v120);
  while (__stxr(v121 + 1, v120));
LABEL_171:
  v143 = 0;
  v122 = operator new(0x28uLL);
  *v122 = &off_1E698A888;
  v122[1] = v88;
  v122[2] = v87;
  if (v87)
  {
    v123 = (unint64_t *)&v87->__shared_owners_;
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 1, v123));
  }
  *((_DWORD *)v122 + 6) = v91;
  *(_QWORD *)((char *)v122 + 28) = 0x676C6F6273706363;
  *((_DWORD *)v122 + 9) = 0;
  v143 = v122;
  v139 = 0u;
  v140 = 0u;
  v141 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v139, (uint64_t)v142);
  v141 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v116, v119, (AMCP *)&v139);
  if (v141)
    v141(0, (uint64_t)&v139, 0, 0);
  v126 = v143;
  if (v143 == v142)
  {
    v127 = 4;
    v126 = v142;
  }
  else
  {
    if (!v143)
      goto LABEL_181;
    v127 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v126 + 8 * v127))(v126, v125);
LABEL_181:
  if (v87)
  {
    v128 = (unint64_t *)&v87->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
    do
      v130 = __ldaxr(v128);
    while (__stlxr(v130 - 1, v128));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if ((_QWORD)v136)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v136 + 40), &v136);
  v131 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  if (v87)
  {
    v134 = (unint64_t *)&v87->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
}

void sub_1B5AF59AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMCP::ASP::PlugIn_Object::populate_control_core(uint64_t a1, unsigned int a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int *v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t Has_Property;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  __int128 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unsigned int v98;
  int v99;
  int is_base_of;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  __n128 v108;
  _QWORD *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  int v120;
  __int128 v121;
  double v122[2];
  __int128 v123;
  __int128 v124;
  void (*v125)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v126[24];
  _BYTE *v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  AMCP::ASP::PlugIn_Object::populate_object_core(a1, a2, a3);
  v6 = *(_QWORD *)(a1 + 24);
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (int *)(a1 + 44);
    v10 = *(_DWORD *)(a1 + 44);
    v119 = 0x676C6F6263736370;
    v120 = 0;
    v121 = 0uLL;
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  else
  {
    v9 = (int *)(a1 + 44);
    v10 = *(_DWORD *)(a1 + 44);
    v119 = 0x676C6F6263736370;
    v120 = 0;
    v121 = 0uLL;
  }
  strcpy((char *)v122, "pcscbolg");
  BYTE1(v122[1]) = 0;
  WORD1(v122[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v117, 0, v122[0]);
  v13 = v117;
  v14 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  if (v5)
  {
    v15 = (unint64_t *)&v5->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v127 = 0;
  v17 = operator new(0x28uLL);
  *v17 = &off_1E6989608;
  v17[1] = v6;
  v17[2] = v5;
  if (v5)
  {
    v18 = (unint64_t *)&v5->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *((_DWORD *)v17 + 6) = v10;
  *(_QWORD *)((char *)v17 + 28) = 0x676C6F6263736370;
  *((_DWORD *)v17 + 9) = 0;
  v127 = v17;
  v123 = 0u;
  v124 = 0u;
  v125 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)&v123, (uint64_t)v126);
  v125 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v13, v14, (AMCP *)&v123);
  if (v125)
    v125(0, (uint64_t)&v123, 0, 0);
  v20 = v127;
  if (v127 == v126)
  {
    v21 = 4;
    v20 = v126;
    goto LABEL_20;
  }
  if (v127)
  {
    v21 = 5;
LABEL_20:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
  if (v5)
  {
    v22 = (unint64_t *)&v5->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v117);
  v24 = v117;
  v117 = 0uLL;
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
  v121 = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
  if (!*((_QWORD *)&v117 + 1))
    goto LABEL_35;
  v29 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (v30)
  {
LABEL_35:
    if (v5)
      goto LABEL_36;
LABEL_46:
    v33 = v121;
    Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    goto LABEL_47;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  if (!v5)
    goto LABEL_46;
LABEL_36:
  v31 = (unint64_t *)&v5->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v33 = v121;
  v34 = (unint64_t *)&v5->__shared_owners_;
  do
    v35 = __ldxr(v34);
  while (__stxr(v35 + 1, v34));
  Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  v37 = (unint64_t *)&v5->__shared_owners_;
  do
    v38 = __ldxr(v37);
  while (__stxr(v38 + 1, v37));
LABEL_47:
  v127 = 0;
  v39 = operator new(0x28uLL);
  *v39 = &off_1E6989688;
  v39[1] = v6;
  v39[2] = v5;
  if (v5)
  {
    v40 = (unint64_t *)&v5->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  *((_DWORD *)v39 + 6) = v10;
  *(_QWORD *)((char *)v39 + 28) = 0x676C6F6263736370;
  *((_DWORD *)v39 + 9) = 0;
  v127 = v39;
  v123 = 0u;
  v124 = 0u;
  v125 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v123, (uint64_t)v126);
  v125 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v33, Has_Property, (AMCP *)&v123);
  if (v125)
    v125(0, (uint64_t)&v123, 0, 0);
  v42 = v127;
  if (v127 == v126)
  {
    v43 = 4;
    v42 = v126;
  }
  else
  {
    if (!v127)
      goto LABEL_57;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_57:
  if (v5)
  {
    v44 = (unint64_t *)&v5->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v46 = __ldaxr(v44);
    while (__stlxr(v46 - 1, v44));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if ((_QWORD)v121)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v121 + 40), &v121);
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
  if (*((_QWORD *)&v121 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v5)
  {
    v50 = (unint64_t *)&v5->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v53 = *(_QWORD *)(a1 + 24);
  v52 = *(std::__shared_weak_count **)(a1 + 32);
  if (v52)
  {
    v54 = (unint64_t *)&v52->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
    v56 = *v9;
    v119 = 0x676C6F6263656C6DLL;
    v120 = 0;
    v121 = 0uLL;
    v57 = (unint64_t *)&v52->__shared_owners_;
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  else
  {
    v56 = *v9;
    v119 = 0x676C6F6263656C6DLL;
    v120 = 0;
    v121 = 0uLL;
  }
  strcpy((char *)v122, "mlecbolg");
  BYTE1(v122[1]) = 0;
  WORD1(v122[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v117, 0, v122[0]);
  v59 = v117;
  v60 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  if (v52)
  {
    v61 = (unint64_t *)&v52->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v127 = 0;
  v63 = operator new(0x28uLL);
  *v63 = &off_1E6989708;
  v63[1] = v53;
  v63[2] = v52;
  if (v52)
  {
    v64 = (unint64_t *)&v52->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  *((_DWORD *)v63 + 6) = v56;
  *(_QWORD *)((char *)v63 + 28) = 0x676C6F6263656C6DLL;
  *((_DWORD *)v63 + 9) = 0;
  v127 = v63;
  v123 = 0u;
  v124 = 0u;
  v125 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)&v123, (uint64_t)v126);
  v125 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v59, v60, (AMCP *)&v123);
  if (v125)
    v125(0, (uint64_t)&v123, 0, 0);
  v66 = v127;
  if (v127 == v126)
  {
    v67 = 4;
    v66 = v126;
    goto LABEL_96;
  }
  if (v127)
  {
    v67 = 5;
LABEL_96:
    (*(void (**)(void))(*v66 + 8 * v67))();
  }
  if (v52)
  {
    v68 = (unint64_t *)&v52->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v117);
  v70 = v117;
  v117 = 0uLL;
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
  v121 = v70;
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
  if (!*((_QWORD *)&v117 + 1))
    goto LABEL_111;
  v75 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (v76)
  {
LABEL_111:
    if (v52)
      goto LABEL_112;
LABEL_122:
    v79 = v121;
    v82 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    goto LABEL_123;
  }
  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
  std::__shared_weak_count::__release_weak(v74);
  if (!v52)
    goto LABEL_122;
LABEL_112:
  v77 = (unint64_t *)&v52->__shared_owners_;
  do
    v78 = __ldaxr(v77);
  while (__stlxr(v78 - 1, v77));
  if (!v78)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
  v79 = v121;
  v80 = (unint64_t *)&v52->__shared_owners_;
  do
    v81 = __ldxr(v80);
  while (__stxr(v81 + 1, v80));
  v82 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  v83 = (unint64_t *)&v52->__shared_owners_;
  do
    v84 = __ldxr(v83);
  while (__stxr(v84 + 1, v83));
LABEL_123:
  v127 = 0;
  v85 = operator new(0x28uLL);
  *v85 = &off_1E6989788;
  v85[1] = v53;
  v85[2] = v52;
  if (v52)
  {
    v86 = (unint64_t *)&v52->__shared_owners_;
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
  }
  *((_DWORD *)v85 + 6) = v56;
  *(_QWORD *)((char *)v85 + 28) = 0x676C6F6263656C6DLL;
  *((_DWORD *)v85 + 9) = 0;
  v127 = v85;
  v123 = 0u;
  v124 = 0u;
  v125 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v123, (uint64_t)v126);
  v125 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v79, v82, (AMCP *)&v123);
  if (v125)
    v125(0, (uint64_t)&v123, 0, 0);
  v88 = v127;
  if (v127 == v126)
  {
    v89 = 4;
    v88 = v126;
  }
  else
  {
    if (!v127)
      goto LABEL_133;
    v89 = 5;
  }
  (*(void (**)(_QWORD *))(*v88 + 8 * v89))(v88);
LABEL_133:
  if (v52)
  {
    v90 = (unint64_t *)&v52->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
    do
      v92 = __ldaxr(v90);
    while (__stlxr(v92 - 1, v90));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if ((_QWORD)v121)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v121 + 40), &v121);
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
  if (*((_QWORD *)&v121 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (v52)
  {
    v96 = (unint64_t *)&v52->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v98 = *(_DWORD *)(a1 + 68);
  if ((AMCP::is_base_of((AMCP *)0x736C6472, v98) & 1) != 0)
  {
    v99 = 1935962742;
  }
  else if ((AMCP::is_base_of((AMCP *)0x6C65766C, v98) & 1) != 0)
  {
    v99 = 1818456950;
  }
  else if ((AMCP::is_base_of((AMCP *)0x746F676C, v98) & 1) != 0)
  {
    v99 = 1650685548;
  }
  else if ((AMCP::is_base_of((AMCP *)0x736C6374, v98) & 1) != 0)
  {
    v99 = 1935893353;
  }
  else
  {
    is_base_of = AMCP::is_base_of((AMCP *)0x7370616E, v98);
    v99 = 1936745334;
    if (!is_base_of)
      v99 = 0;
  }
  v101 = *(_QWORD *)(a1 + 24);
  v102 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v117 = v101;
  *((_QWORD *)&v117 + 1) = v102;
  if (v102)
  {
    v103 = (unint64_t *)(v102 + 8);
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
  }
  LODWORD(v118) = *v9;
  DWORD1(v118) = v99;
  *((_QWORD *)&v118 + 1) = 1735159650;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v121, 0, 1.58366007e190);
  v105 = v121;
  v106 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v117 = 0uLL;
  v127 = 0;
  v107 = (char *)operator new(0x28uLL);
  *(_QWORD *)v107 = &off_1E6989808;
  *((_QWORD *)v107 + 1) = v101;
  *((_QWORD *)v107 + 2) = v102;
  *(_OWORD *)(v107 + 24) = v118;
  v127 = v107;
  v123 = 0u;
  v124 = 0u;
  v125 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v123, (uint64_t)v126);
  v125 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v105, v106, (AMCP *)&v123);
  if (v125)
    v108.n128_f64[0] = ((double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))v125)(0, (uint64_t)&v123, 0, 0);
  v109 = v127;
  if (v127 == v126)
  {
    v110 = 4;
    v109 = v126;
    goto LABEL_172;
  }
  if (v127)
  {
    v110 = 5;
LABEL_172:
    (*(void (**)(__n128))(*v109 + 8 * v110))(v108);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v105);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v121 + 40), &v121);
  v111 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
  if (*((_QWORD *)&v121 + 1))
  {
    v112 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
  if (*((_QWORD *)&v117 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
}

void sub_1B5AF6584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMCP::ASP::PlugIn_Object::populate_clock_core(uint64_t a1, unsigned int a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  AMCP::ASP::PlugIn *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t PropertyData;
  std::runtime_error_vtbl *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  unint64_t *v29;
  unint64_t v30;
  std::runtime_error *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t Has_Property;
  unint64_t *v48;
  unint64_t v49;
  char *v50;
  unint64_t *v51;
  unint64_t v52;
  std::runtime_error *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  int v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  char *v78;
  unint64_t *v79;
  unint64_t v80;
  __n128 v81;
  std::runtime_error *v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  __int128 v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  int v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  char *v111;
  unint64_t *v112;
  unint64_t v113;
  std::runtime_error *v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  char *v133;
  unint64_t *v134;
  unint64_t v135;
  std::runtime_error_vtbl *v136;
  std::runtime_error *v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  int v153;
  uint64_t v154;
  char v155;
  char v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  unint64_t v163;
  std::runtime_error *v164;
  uint64_t v165;
  unint64_t v166;
  __int128 v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  unint64_t v180;
  std::runtime_error *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  int v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  char *v202;
  unint64_t *v203;
  unint64_t v204;
  std::runtime_error *v205;
  uint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  char *v213;
  unint64_t *v214;
  unint64_t v215;
  std::runtime_error *v216;
  uint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  __int128 v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t Is_Property_Settable;
  unint64_t *v235;
  unint64_t v236;
  char *v237;
  unint64_t *v238;
  unint64_t v239;
  std::runtime_error *v240;
  uint64_t v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t *v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  char *v251;
  unint64_t *v252;
  unint64_t v253;
  std::runtime_error *v254;
  uint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t *v262;
  unint64_t v263;
  uint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  int v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  char *v275;
  unint64_t *v276;
  unint64_t v277;
  std::runtime_error *v278;
  uint64_t v279;
  unint64_t *v280;
  unint64_t v281;
  __int128 v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t *v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t *v295;
  unint64_t v296;
  char *v297;
  unint64_t *v298;
  unint64_t v299;
  std::runtime_error *v300;
  uint64_t v301;
  unint64_t *v302;
  unint64_t v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  const char *v312;
  unint64_t *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  std::runtime_error_vtbl *v318;
  unint64_t *v319;
  unint64_t v320;
  unint64_t v321;
  std::runtime_error *v322;
  std::runtime_error *v323;
  uint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  NSObject *v329;
  unint64_t *v330;
  unint64_t v331;
  _opaque_pthread_t *v332;
  mach_port_t v333;
  void *exception;
  uint64_t v335;
  uint64_t v337[2];
  uint64_t v338;
  int v339;
  __int128 v340;
  uint64_t v341;
  _BYTE v342[24];
  uint64_t v343;
  std::runtime_error v344;
  std::runtime_error v345;
  void *v346;
  std::runtime_error *v347;
  uint64_t v348;
  uint64_t v349;
  int v350;
  _BYTE buf[40];
  const char *v352;
  int v353;
  uint64_t v354;

  v354 = *MEMORY[0x1E0C80C00];
  AMCP::ASP::PlugIn_Object::populate_object_core(a1, a2, a3);
  v5 = *(AMCP::ASP::PlugIn **)(a1 + 24);
  v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = *(unsigned int *)(a1 + 44);
  strcpy(buf, " diubolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  if (AMCP::ASP::PlugIn::ObjectHasProperty(v5, v8, 0, (const AudioObjectPropertyAddress *)buf))
  {
    strcpy(buf, " diubolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    v345.__vftable = 0;
    PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(v5, v8, 0, (const AudioObjectPropertyAddress *)buf, 0, 0, 8, &v345);
    if (!(_DWORD)PropertyData)
    {
      v10 = v345.__vftable;
      if (v345.__vftable)
        goto LABEL_11;
    }
LABEL_527:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)PropertyData);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v328 = *(std::__shared_weak_count **)&buf[8];
    v329 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v330 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v331 = __ldaxr(v330);
      while (__stlxr(v331 - 1, v330));
      if (!v331)
      {
        ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
        std::__shared_weak_count::__release_weak(v328);
      }
    }
    if (os_log_type_enabled(v329, OS_LOG_TYPE_ERROR))
    {
      v332 = pthread_self();
      v333 = pthread_mach_thread_np(v332);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v333;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "ASP_Object.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 871;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "!device_uid.is_valid()";
      _os_log_error_impl(&dword_1B57BA000, v329, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s devices and clocks have to have UIDs", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v338);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v344, "devices and clocks have to have UIDs");
    std::runtime_error::runtime_error(&v345, &v344);
    v347 = 0;
    v348 = 0;
    v349 = 0;
    v350 = -1;
    v345.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v346 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v345);
    *(_QWORD *)&buf[32] = "Core::Operation_Ptr AMCP::ASP::make_property(const Address &, const PlugIn_Ptr &, AudioObjectID)";
    v352 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Object.cpp";
    v353 = 871;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v340);
    *(_QWORD *)v342 = off_1E69A20A0;
    *(_OWORD *)&v342[8] = v340;
    v343 = v341;
    v340 = 0uLL;
    v341 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)v342);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  strcpy(buf, "diucbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  PropertyData = AMCP::ASP::PlugIn::ObjectHasProperty(v5, v8, 0, (const AudioObjectPropertyAddress *)buf);
  if (!(_DWORD)PropertyData)
    goto LABEL_527;
  strcpy(buf, "diucbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  v345.__vftable = 0;
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(v5, v8, 0, (const AudioObjectPropertyAddress *)buf, 0, 0, 8, &v345);
  if ((_DWORD)PropertyData)
    goto LABEL_527;
  v10 = v345.__vftable;
  if (!v345.__vftable)
    goto LABEL_527;
LABEL_11:
  PropertyData = (unint64_t)applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, v10);
  v11 = *(const void **)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_527;
  v345.__vftable = (std::runtime_error_vtbl *)0x676C6F6275696420;
  LODWORD(v345.__imp_.__imp_) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)buf, (uint64_t)&v345, *(CFTypeRef *)buf);
  CFRelease(v11);
  if (*(_QWORD *)buf)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v12 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v4)
  {
    v15 = (unint64_t *)&v4->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(std::__shared_weak_count **)(a1 + 32);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v21 = *(_DWORD *)(a1 + 44);
    v338 = 0x676C6F626D756964;
    v339 = 0;
    v340 = 0uLL;
    v22 = (unint64_t *)&v18->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  else
  {
    v21 = *(_DWORD *)(a1 + 44);
    v338 = 0x676C6F626D756964;
    v339 = 0;
    v340 = 0uLL;
  }
  strcpy((char *)&v344, "diumbolg");
  BYTE1(v344.__imp_.__imp_) = 0;
  WORD1(v344.__imp_.__imp_) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v342, 0, *(double *)&v344.__vftable);
  v24 = *(_QWORD *)v342;
  v25 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (v18)
  {
    v26 = (unint64_t *)&v18->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v347 = 0;
  v28 = (char *)operator new(0x28uLL);
  *(_QWORD *)v28 = &off_1E6988538;
  *((_QWORD *)v28 + 1) = v17;
  *((_QWORD *)v28 + 2) = v18;
  if (v18)
  {
    v29 = (unint64_t *)&v18->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  *((_DWORD *)v28 + 6) = v21;
  *(_QWORD *)(v28 + 28) = 0x676C6F626D756964;
  *((_DWORD *)v28 + 9) = 0;
  v347 = (std::runtime_error *)v28;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v345);
  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v24, v25, (AMCP *)buf);
  if (*(_QWORD *)&buf[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  v31 = v347;
  if (v347 == &v345)
  {
    v32 = 4;
    v31 = &v345;
    goto LABEL_43;
  }
  if (v347)
  {
    v32 = 5;
LABEL_43:
    (*((void (**)(void))&v31->~runtime_error + v32))();
  }
  if (v18)
  {
    v33 = (unint64_t *)&v18->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(*(uint64_t *)v342);
  v35 = *(_OWORD *)v342;
  *(_OWORD *)v342 = 0uLL;
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
  v340 = v35;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = *(std::__shared_weak_count **)&v342[8];
  if (!*(_QWORD *)&v342[8])
    goto LABEL_58;
  v40 = (unint64_t *)(*(_QWORD *)&v342[8] + 8);
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (v41)
  {
LABEL_58:
    if (v18)
      goto LABEL_59;
LABEL_69:
    v44 = v340;
    Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    goto LABEL_70;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  if (!v18)
    goto LABEL_69;
LABEL_59:
  v42 = (unint64_t *)&v18->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  v44 = v340;
  v45 = (unint64_t *)&v18->__shared_owners_;
  do
    v46 = __ldxr(v45);
  while (__stxr(v46 + 1, v45));
  Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  v48 = (unint64_t *)&v18->__shared_owners_;
  do
    v49 = __ldxr(v48);
  while (__stxr(v49 + 1, v48));
LABEL_70:
  v347 = 0;
  v50 = (char *)operator new(0x28uLL);
  *(_QWORD *)v50 = &off_1E69885B8;
  *((_QWORD *)v50 + 1) = v17;
  *((_QWORD *)v50 + 2) = v18;
  if (v18)
  {
    v51 = (unint64_t *)&v18->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  *((_DWORD *)v50 + 6) = v21;
  *(_QWORD *)(v50 + 28) = 0x676C6F626D756964;
  *((_DWORD *)v50 + 9) = 0;
  v347 = (std::runtime_error *)v50;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v345);
  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v44, Has_Property, (AMCP *)buf);
  if (*(_QWORD *)&buf[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  v53 = v347;
  if (v347 == &v345)
  {
    v54 = 4;
    v53 = &v345;
  }
  else
  {
    if (!v347)
      goto LABEL_80;
    v54 = 5;
  }
  (*((void (**)(void))&v53->~runtime_error + v54))();
LABEL_80:
  if (v18)
  {
    v55 = (unint64_t *)&v18->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    do
      v57 = __ldaxr(v55);
    while (__stlxr(v57 - 1, v55));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if ((_QWORD)v340)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v340 + 40), &v340);
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
  if (*((_QWORD *)&v340 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (v18)
  {
    v61 = (unint64_t *)&v18->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v63 = *(std::__shared_weak_count **)(a1 + 32);
  v337[0] = *(_QWORD *)(a1 + 24);
  v337[1] = (uint64_t)v63;
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
    AMCP::ASP::make_properties<1953653102u>(v337, *(_DWORD *)(a1 + 44), a3);
    do
      v66 = __ldaxr(v64);
    while (__stlxr(v66 - 1, v64));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  else
  {
    AMCP::ASP::make_properties<1953653102u>(v337, *(_DWORD *)(a1 + 44), a3);
  }
  v67 = *(_QWORD *)(a1 + 24);
  v68 = *(std::__shared_weak_count **)(a1 + 32);
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
    v71 = *(_DWORD *)(a1 + 44);
    v340 = 0uLL;
    do
      v72 = __ldxr(v69);
    while (__stxr(v72 + 1, v69));
    v73 = v68;
  }
  else
  {
    v73 = 0;
    v71 = *(_DWORD *)(a1 + 44);
    v340 = 0uLL;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v342, 0, 1.58366008e190);
  v74 = *(_QWORD *)v342;
  v75 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  if (v73)
  {
    v76 = (unint64_t *)&v73->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  v347 = 0;
  v78 = (char *)operator new(0x30uLL);
  *(_QWORD *)v78 = &off_1E6988638;
  *((_QWORD *)v78 + 1) = v67;
  *((_QWORD *)v78 + 2) = v73;
  if (v73)
  {
    v79 = (unint64_t *)&v73->__shared_owners_;
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
  }
  *((_DWORD *)v78 + 6) = v71;
  *(_QWORD *)(v78 + 28) = 0x676C6F626869646ELL;
  *((_DWORD *)v78 + 9) = 0;
  v78[40] = 0;
  v347 = (std::runtime_error *)v78;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v345);
  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v74, v75, (AMCP *)buf);
  if (*(_QWORD *)&buf[32])
    v81.n128_f64[0] = (*(double (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  v82 = v347;
  if (v347 == &v345)
  {
    v83 = 4;
    v82 = &v345;
    goto LABEL_127;
  }
  if (v347)
  {
    v83 = 5;
LABEL_127:
    (*((void (**)(__n128))&v82->~runtime_error + v83))(v81);
  }
  if (v73)
  {
    v84 = (unint64_t *)&v73->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v73->__on_zero_shared)(v73, v81);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(*(uint64_t *)v342);
  v86 = *(_OWORD *)v342;
  *(_OWORD *)v342 = 0uLL;
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
  v340 = v86;
  if (v87)
  {
    v88 = (unint64_t *)&v87->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = *(std::__shared_weak_count **)&v342[8];
  if (*(_QWORD *)&v342[8])
  {
    v91 = (unint64_t *)(*(_QWORD *)&v342[8] + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (v73)
  {
    v93 = (unint64_t *)&v73->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if ((_QWORD)v340)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v340 + 40), &v340);
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
  if (*((_QWORD *)&v340 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  if (v68)
  {
    v98 = (unint64_t *)&v68->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v100 = *(_QWORD *)(a1 + 24);
  v101 = *(std::__shared_weak_count **)(a1 + 32);
  if (v101)
  {
    v102 = (unint64_t *)&v101->__shared_owners_;
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
    v104 = *(_DWORD *)(a1 + 44);
    v338 = 0x676C6F62636C6B64;
    v339 = 0;
    v340 = 0uLL;
    v105 = (unint64_t *)&v101->__shared_owners_;
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
  }
  else
  {
    v104 = *(_DWORD *)(a1 + 44);
    v338 = 0x676C6F62636C6B64;
    v339 = 0;
    v340 = 0uLL;
  }
  strcpy((char *)&v344, "dklcbolg");
  BYTE1(v344.__imp_.__imp_) = 0;
  WORD1(v344.__imp_.__imp_) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v342, 0, *(double *)&v344.__vftable);
  v107 = *(_QWORD *)v342;
  v108 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  if (v101)
  {
    v109 = (unint64_t *)&v101->__shared_owners_;
    do
      v110 = __ldxr(v109);
    while (__stxr(v110 + 1, v109));
  }
  v347 = 0;
  v111 = (char *)operator new(0x28uLL);
  *(_QWORD *)v111 = &off_1E69886B8;
  *((_QWORD *)v111 + 1) = v100;
  *((_QWORD *)v111 + 2) = v101;
  if (v101)
  {
    v112 = (unint64_t *)&v101->__shared_owners_;
    do
      v113 = __ldxr(v112);
    while (__stxr(v113 + 1, v112));
  }
  *((_DWORD *)v111 + 6) = v104;
  *(_QWORD *)(v111 + 28) = 0x676C6F62636C6B64;
  *((_DWORD *)v111 + 9) = 0;
  v347 = (std::runtime_error *)v111;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v345);
  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v107, v108, (AMCP *)buf);
  if (*(_QWORD *)&buf[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  v114 = v347;
  if (v347 == &v345)
  {
    v115 = 4;
    v114 = &v345;
    goto LABEL_179;
  }
  if (v347)
  {
    v115 = 5;
LABEL_179:
    (*((void (**)(void))&v114->~runtime_error + v115))();
  }
  if (v101)
  {
    v116 = (unint64_t *)&v101->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(*(uint64_t *)v342);
  v118 = *(_OWORD *)v342;
  *(_OWORD *)v342 = 0uLL;
  v119 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
  v340 = v118;
  if (v119)
  {
    v120 = (unint64_t *)&v119->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = *(std::__shared_weak_count **)&v342[8];
  if (!*(_QWORD *)&v342[8])
    goto LABEL_194;
  v123 = (unint64_t *)(*(_QWORD *)&v342[8] + 8);
  do
    v124 = __ldaxr(v123);
  while (__stlxr(v124 - 1, v123));
  if (v124)
  {
LABEL_194:
    if (v101)
      goto LABEL_195;
LABEL_205:
    v127 = v340;
    v130 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    goto LABEL_206;
  }
  ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
  std::__shared_weak_count::__release_weak(v122);
  if (!v101)
    goto LABEL_205;
LABEL_195:
  v125 = (unint64_t *)&v101->__shared_owners_;
  do
    v126 = __ldaxr(v125);
  while (__stlxr(v126 - 1, v125));
  if (!v126)
  {
    ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
    std::__shared_weak_count::__release_weak(v101);
  }
  v127 = v340;
  v128 = (unint64_t *)&v101->__shared_owners_;
  do
    v129 = __ldxr(v128);
  while (__stxr(v129 + 1, v128));
  v130 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  v131 = (unint64_t *)&v101->__shared_owners_;
  do
    v132 = __ldxr(v131);
  while (__stxr(v132 + 1, v131));
LABEL_206:
  v347 = 0;
  v133 = (char *)operator new(0x28uLL);
  *(_QWORD *)v133 = &off_1E6988738;
  *((_QWORD *)v133 + 1) = v100;
  *((_QWORD *)v133 + 2) = v101;
  if (v101)
  {
    v134 = (unint64_t *)&v101->__shared_owners_;
    do
      v135 = __ldxr(v134);
    while (__stxr(v135 + 1, v134));
  }
  *((_DWORD *)v133 + 6) = v104;
  *(_QWORD *)(v133 + 28) = 0x676C6F62636C6B64;
  *((_DWORD *)v133 + 9) = 0;
  v347 = (std::runtime_error *)v133;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v345);
  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v127, v130, (AMCP *)buf);
  if (*(_QWORD *)&buf[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  v137 = v347;
  if (v347 == &v345)
  {
    v138 = 4;
    v137 = &v345;
    goto LABEL_215;
  }
  if (v347)
  {
    v138 = 5;
LABEL_215:
    (*((void (**)(void))&v137->~runtime_error + v138))();
  }
  if (v101)
  {
    v139 = (unint64_t *)&v101->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
    do
      v141 = __ldaxr(v139);
    while (__stlxr(v141 - 1, v139));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  if ((_QWORD)v340)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v340 + 40), &v340);
  v142 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
  if (*((_QWORD *)&v340 + 1))
  {
    v143 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 8);
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  if (v101)
  {
    v145 = (unint64_t *)&v101->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v148 = *(_QWORD *)(a1 + 24);
  v147 = *(std::__shared_weak_count **)(a1 + 32);
  if (v147)
  {
    v149 = (unint64_t *)&v147->__shared_owners_;
    do
      v150 = __ldxr(v149);
    while (__stxr(v150 + 1, v149));
  }
  v151 = 0;
  v152 = (unint64_t *)&v147->__shared_owners_;
  v335 = a1;
  v153 = *(_DWORD *)(a1 + 44);
  v154 = 0x676C6F626C746E63;
  v155 = 1;
  do
  {
    v156 = v155;
    LODWORD(v136) = AMCP::Property_Traits<1819569763u>::k_valid_scopes[v151];
    v340 = 0uLL;
    if ((v155 & 1) != 0)
      v157 = 0x696E70746C746E63;
    else
      v157 = v154;
    if (v147)
    {
      do
        v158 = __ldxr(v152);
      while (__stxr(v158 + 1, v152));
    }
    LODWORD(v344.__vftable) = 1819569763;
    *(std::runtime_error_vtbl **)((char *)&v344.__vftable + 4) = v136;
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v342, 0, *(double *)&v344.__vftable);
    v159 = *(_QWORD *)v342;
    v160 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
    if (v147)
    {
      do
        v161 = __ldxr(v152);
      while (__stxr(v161 + 1, v152));
    }
    v347 = 0;
    v162 = (char *)operator new(0x28uLL);
    *(_QWORD *)v162 = &off_1E69887B8;
    *((_QWORD *)v162 + 1) = v148;
    *((_QWORD *)v162 + 2) = v147;
    if (v147)
    {
      do
        v163 = __ldxr(v152);
      while (__stxr(v163 + 1, v152));
    }
    *((_DWORD *)v162 + 6) = v153;
    *(_QWORD *)(v162 + 28) = v157;
    *((_DWORD *)v162 + 9) = 0;
    v347 = (std::runtime_error *)v162;
    memset(buf, 0, sizeof(buf));
    std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v345);
    *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v159, v160, (AMCP *)buf);
    if (*(_QWORD *)&buf[32])
      (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
    v164 = v347;
    if (v347 == &v345)
    {
      v164 = &v345;
      v165 = 4;
      goto LABEL_255;
    }
    if (v347)
    {
      v165 = 5;
LABEL_255:
      (*((void (**)(void))&v164->~runtime_error + v165))();
    }
    if (v147)
    {
      do
        v166 = __ldaxr(v152);
      while (__stlxr(v166 - 1, v152));
      if (!v166)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
    AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(*(uint64_t *)v342);
    v167 = *(_OWORD *)v342;
    *(_OWORD *)v342 = 0uLL;
    v168 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
    v340 = v167;
    if (v168)
    {
      v169 = (unint64_t *)&v168->__shared_owners_;
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
        std::__shared_weak_count::__release_weak(v168);
      }
    }
    v171 = *(std::__shared_weak_count **)&v342[8];
    if (!*(_QWORD *)&v342[8])
      goto LABEL_269;
    v172 = (unint64_t *)(*(_QWORD *)&v342[8] + 8);
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
      if (!v147)
      {
LABEL_279:
        v175 = v340;
        v177 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
        goto LABEL_280;
      }
    }
    else
    {
LABEL_269:
      if (!v147)
        goto LABEL_279;
    }
    do
      v174 = __ldaxr(v152);
    while (__stlxr(v174 - 1, v152));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
    v175 = v340;
    do
      v176 = __ldxr(v152);
    while (__stxr(v176 + 1, v152));
    v177 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    do
      v178 = __ldxr(v152);
    while (__stxr(v178 + 1, v152));
LABEL_280:
    v347 = 0;
    v179 = (char *)operator new(0x28uLL);
    *(_QWORD *)v179 = &off_1E6988838;
    *((_QWORD *)v179 + 1) = v148;
    *((_QWORD *)v179 + 2) = v147;
    if (v147)
    {
      do
        v180 = __ldxr(v152);
      while (__stxr(v180 + 1, v152));
    }
    *((_DWORD *)v179 + 6) = v153;
    *(_QWORD *)(v179 + 28) = v157;
    *((_DWORD *)v179 + 9) = 0;
    v347 = (std::runtime_error *)v179;
    memset(buf, 0, sizeof(buf));
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v345);
    *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v175, v177, (AMCP *)buf);
    if (*(_QWORD *)&buf[32])
      (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
    v181 = v347;
    if (v347 == &v345)
    {
      v181 = &v345;
      v182 = 4;
    }
    else
    {
      if (!v347)
        goto LABEL_289;
      v182 = 5;
    }
    (*((void (**)(void))&v181->~runtime_error + v182))();
LABEL_289:
    if (v147)
    {
      do
        v183 = __ldaxr(v152);
      while (__stlxr(v183 - 1, v152));
      if (!v183)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
      do
        v184 = __ldaxr(v152);
      while (__stlxr(v184 - 1, v152));
      if (!v184)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
    if ((_QWORD)v340)
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v340 + 40), &v340);
    v185 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
    if (*((_QWORD *)&v340 + 1))
    {
      v186 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 8);
      do
        v187 = __ldaxr(v186);
      while (__stlxr(v187 - 1, v186));
      if (!v187)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
      }
    }
    v155 = 0;
    v154 = 0x6F7574706C746E63;
    v151 = 1;
  }
  while ((v156 & 1) != 0);
  if (v147)
  {
    do
      v188 = __ldaxr(v152);
    while (__stlxr(v188 - 1, v152));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v190 = *(_QWORD *)(a1 + 24);
  v189 = *(std::__shared_weak_count **)(a1 + 32);
  if (v189)
  {
    v191 = (unint64_t *)&v189->__shared_owners_;
    do
      v192 = __ldxr(v191);
    while (__stxr(v192 + 1, v191));
    v193 = *(_DWORD *)(a1 + 44);
    v338 = 0x676C6F626E737274;
    v339 = 0;
    v340 = 0uLL;
    v194 = (unint64_t *)&v189->__shared_owners_;
    do
      v195 = __ldxr(v194);
    while (__stxr(v195 + 1, v194));
    do
      v196 = __ldxr(v194);
    while (__stxr(v196 + 1, v194));
    v197 = v189;
  }
  else
  {
    v197 = 0;
    v193 = *(_DWORD *)(a1 + 44);
    v338 = 0x676C6F626E737274;
    v339 = 0;
    v340 = 0uLL;
  }
  strcpy((char *)&v344, "trsnbolg");
  BYTE1(v344.__imp_.__imp_) = 0;
  WORD1(v344.__imp_.__imp_) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v342, 0, *(double *)&v344.__vftable);
  v198 = *(_QWORD *)v342;
  v199 = AMCP::Implementation::get_type_marker<std::function<double ()(void)>>();
  if (v189)
  {
    v200 = (unint64_t *)&v189->__shared_owners_;
    do
      v201 = __ldxr(v200);
    while (__stxr(v201 + 1, v200));
  }
  v347 = 0;
  v202 = (char *)operator new(0x28uLL);
  *(_QWORD *)v202 = &off_1E69888B8;
  *((_QWORD *)v202 + 1) = v190;
  *((_QWORD *)v202 + 2) = v189;
  if (v189)
  {
    v203 = (unint64_t *)&v189->__shared_owners_;
    do
      v204 = __ldxr(v203);
    while (__stxr(v204 + 1, v203));
  }
  *((_DWORD *)v202 + 6) = v193;
  *(_QWORD *)(v202 + 28) = 0x676C6F626E737274;
  *((_DWORD *)v202 + 9) = 0;
  v347 = (std::runtime_error *)v202;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<double ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v345);
  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<double ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v198, v199, (AMCP *)buf);
  if (*(_QWORD *)&buf[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  v205 = v347;
  if (v347 == &v345)
  {
    v206 = 4;
    v205 = &v345;
LABEL_328:
    (*((void (**)(void))&v205->~runtime_error + v206))();
  }
  else if (v347)
  {
    v206 = 5;
    goto LABEL_328;
  }
  if (v189)
  {
    v207 = (unint64_t *)&v189->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v209 = *(_QWORD *)v342;
  AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(*(uint64_t *)v342);
  v210 = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>();
  if (v197)
  {
    v211 = (unint64_t *)&v197->__shared_owners_;
    do
      v212 = __ldxr(v211);
    while (__stxr(v212 + 1, v211));
  }
  v347 = 0;
  v213 = (char *)operator new(0x28uLL);
  *(_QWORD *)v213 = &off_1E6988938;
  *((_QWORD *)v213 + 1) = v190;
  *((_QWORD *)v213 + 2) = v197;
  if (v197)
  {
    v214 = (unint64_t *)&v197->__shared_owners_;
    do
      v215 = __ldxr(v214);
    while (__stxr(v215 + 1, v214));
  }
  *((_DWORD *)v213 + 6) = v193;
  *(_QWORD *)(v213 + 28) = 0x676C6F626E737274;
  *((_DWORD *)v213 + 9) = 0;
  v347 = (std::runtime_error *)v213;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<void ()(double const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v345);
  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(double const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v209, v210, (AMCP *)buf);
  if (*(_QWORD *)&buf[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  v216 = v347;
  if (v347 == &v345)
  {
    v217 = 4;
    v216 = &v345;
LABEL_346:
    (*((void (**)(void))&v216->~runtime_error + v217))();
  }
  else if (v347)
  {
    v217 = 5;
    goto LABEL_346;
  }
  if (v197)
  {
    v218 = (unint64_t *)&v197->__shared_owners_;
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(*(uint64_t *)v342);
  v220 = *(_OWORD *)v342;
  *(_OWORD *)v342 = 0uLL;
  v221 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
  v340 = v220;
  if (v221)
  {
    v222 = (unint64_t *)&v221->__shared_owners_;
    do
      v223 = __ldaxr(v222);
    while (__stlxr(v223 - 1, v222));
    if (!v223)
    {
      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
      std::__shared_weak_count::__release_weak(v221);
    }
  }
  v224 = *(std::__shared_weak_count **)&v342[8];
  if (*(_QWORD *)&v342[8])
  {
    v225 = (unint64_t *)(*(_QWORD *)&v342[8] + 8);
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  if (v197)
  {
    v227 = (unint64_t *)&v197->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
      if (v189)
        goto LABEL_367;
      goto LABEL_377;
    }
  }
  if (!v189)
  {
LABEL_377:
    v231 = v340;
    Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
    goto LABEL_378;
  }
LABEL_367:
  v229 = (unint64_t *)&v189->__shared_owners_;
  do
    v230 = __ldaxr(v229);
  while (__stlxr(v230 - 1, v229));
  if (!v230)
  {
    ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
    std::__shared_weak_count::__release_weak(v189);
  }
  v231 = v340;
  v232 = (unint64_t *)&v189->__shared_owners_;
  do
    v233 = __ldxr(v232);
  while (__stxr(v233 + 1, v232));
  Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
  v235 = (unint64_t *)&v189->__shared_owners_;
  do
    v236 = __ldxr(v235);
  while (__stxr(v236 + 1, v235));
LABEL_378:
  v347 = 0;
  v237 = (char *)operator new(0x28uLL);
  *(_QWORD *)v237 = &off_1E69889B8;
  *((_QWORD *)v237 + 1) = v190;
  *((_QWORD *)v237 + 2) = v189;
  if (v189)
  {
    v238 = (unint64_t *)&v189->__shared_owners_;
    do
      v239 = __ldxr(v238);
    while (__stxr(v239 + 1, v238));
  }
  *((_DWORD *)v237 + 6) = v193;
  *(_QWORD *)(v237 + 28) = 0x676C6F626E737274;
  *((_DWORD *)v237 + 9) = 0;
  v347 = (std::runtime_error *)v237;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v345);
  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v231, Is_Property_Settable, (AMCP *)buf);
  if (*(_QWORD *)&buf[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  v240 = v347;
  if (v347 == &v345)
  {
    v241 = 4;
    v240 = &v345;
LABEL_387:
    (*((void (**)(void))&v240->~runtime_error + v241))();
  }
  else if (v347)
  {
    v241 = 5;
    goto LABEL_387;
  }
  if (v189)
  {
    v242 = (unint64_t *)&v189->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
    do
      v244 = __ldaxr(v242);
    while (__stlxr(v244 - 1, v242));
    if (!v244)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
    v245 = v340;
    v246 = (unint64_t *)&v189->__shared_owners_;
    do
      v247 = __ldxr(v246);
    while (__stxr(v247 + 1, v246));
    v248 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    v249 = (unint64_t *)&v189->__shared_owners_;
    do
      v250 = __ldxr(v249);
    while (__stxr(v250 + 1, v249));
  }
  else
  {
    v245 = v340;
    v248 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  v347 = 0;
  v251 = (char *)operator new(0x28uLL);
  *(_QWORD *)v251 = &off_1E6988A38;
  *((_QWORD *)v251 + 1) = v190;
  *((_QWORD *)v251 + 2) = v189;
  if (v189)
  {
    v252 = (unint64_t *)&v189->__shared_owners_;
    do
      v253 = __ldxr(v252);
    while (__stxr(v253 + 1, v252));
  }
  *((_DWORD *)v251 + 6) = v193;
  *(_QWORD *)(v251 + 28) = 0x676C6F626E737274;
  *((_DWORD *)v251 + 9) = 0;
  v347 = (std::runtime_error *)v251;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v345);
  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v245, v248, (AMCP *)buf);
  if (*(_QWORD *)&buf[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  v254 = v347;
  if (v347 == &v345)
  {
    v255 = 4;
    v254 = &v345;
LABEL_411:
    (*((void (**)(void))&v254->~runtime_error + v255))();
  }
  else if (v347)
  {
    v255 = 5;
    goto LABEL_411;
  }
  if (v189)
  {
    v256 = (unint64_t *)&v189->__shared_owners_;
    do
      v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
    do
      v258 = __ldaxr(v256);
    while (__stlxr(v258 - 1, v256));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  if ((_QWORD)v340)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v340 + 40), &v340);
  v259 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
  if (*((_QWORD *)&v340 + 1))
  {
    v260 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 8);
    do
      v261 = __ldaxr(v260);
    while (__stlxr(v261 - 1, v260));
    if (!v261)
    {
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
    }
  }
  if (v189)
  {
    v262 = (unint64_t *)&v189->__shared_owners_;
    do
      v263 = __ldaxr(v262);
    while (__stlxr(v263 - 1, v262));
    if (!v263)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v264 = *(_QWORD *)(a1 + 24);
  v265 = *(std::__shared_weak_count **)(a1 + 32);
  if (v265)
  {
    v266 = (unint64_t *)&v265->__shared_owners_;
    do
      v267 = __ldxr(v266);
    while (__stxr(v267 + 1, v266));
    v268 = *(_DWORD *)(a1 + 44);
    v338 = 0x676C6F626E737223;
    v339 = 0;
    v340 = 0uLL;
    v269 = (unint64_t *)&v265->__shared_owners_;
    do
      v270 = __ldxr(v269);
    while (__stxr(v270 + 1, v269));
  }
  else
  {
    v268 = *(_DWORD *)(a1 + 44);
    v338 = 0x676C6F626E737223;
    v339 = 0;
    v340 = 0uLL;
  }
  strcpy((char *)&v344, "#rsnbolg");
  BYTE1(v344.__imp_.__imp_) = 0;
  WORD1(v344.__imp_.__imp_) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v342, 0, *(double *)&v344.__vftable);
  v271 = *(_QWORD *)v342;
  v272 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRangeList ()(void)>>();
  if (v265)
  {
    v273 = (unint64_t *)&v265->__shared_owners_;
    do
      v274 = __ldxr(v273);
    while (__stxr(v274 + 1, v273));
  }
  v347 = 0;
  v275 = (char *)operator new(0x28uLL);
  *(_QWORD *)v275 = &off_1E6988AB8;
  *((_QWORD *)v275 + 1) = v264;
  *((_QWORD *)v275 + 2) = v265;
  if (v265)
  {
    v276 = (unint64_t *)&v265->__shared_owners_;
    do
      v277 = __ldxr(v276);
    while (__stxr(v277 + 1, v276));
  }
  *((_DWORD *)v275 + 6) = v268;
  *(_QWORD *)(v275 + 28) = 0x676C6F626E737223;
  *((_DWORD *)v275 + 9) = 0;
  v347 = (std::runtime_error *)v275;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<CA::ValueRangeList ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v345);
  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRangeList ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v271, v272, (AMCP *)buf);
  if (*(_QWORD *)&buf[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  v278 = v347;
  if (v347 == &v345)
  {
    v279 = 4;
    v278 = &v345;
LABEL_451:
    (*((void (**)(void))&v278->~runtime_error + v279))();
  }
  else if (v347)
  {
    v279 = 5;
    goto LABEL_451;
  }
  if (v265)
  {
    v280 = (unint64_t *)&v265->__shared_owners_;
    do
      v281 = __ldaxr(v280);
    while (__stlxr(v281 - 1, v280));
    if (!v281)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(*(uint64_t *)v342);
  v282 = *(_OWORD *)v342;
  *(_OWORD *)v342 = 0uLL;
  v283 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
  v340 = v282;
  if (v283)
  {
    v284 = (unint64_t *)&v283->__shared_owners_;
    do
      v285 = __ldaxr(v284);
    while (__stlxr(v285 - 1, v284));
    if (!v285)
    {
      ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
      std::__shared_weak_count::__release_weak(v283);
    }
  }
  v286 = *(std::__shared_weak_count **)&v342[8];
  if (*(_QWORD *)&v342[8])
  {
    v287 = (unint64_t *)(*(_QWORD *)&v342[8] + 8);
    do
      v288 = __ldaxr(v287);
    while (__stlxr(v288 - 1, v287));
    if (!v288)
    {
      ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
      std::__shared_weak_count::__release_weak(v286);
      if (v265)
        goto LABEL_467;
      goto LABEL_477;
    }
  }
  if (!v265)
  {
LABEL_477:
    v291 = v340;
    v294 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    goto LABEL_478;
  }
LABEL_467:
  v289 = (unint64_t *)&v265->__shared_owners_;
  do
    v290 = __ldaxr(v289);
  while (__stlxr(v290 - 1, v289));
  if (!v290)
  {
    ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
    std::__shared_weak_count::__release_weak(v265);
  }
  v291 = v340;
  v292 = (unint64_t *)&v265->__shared_owners_;
  do
    v293 = __ldxr(v292);
  while (__stxr(v293 + 1, v292));
  v294 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  v295 = (unint64_t *)&v265->__shared_owners_;
  do
    v296 = __ldxr(v295);
  while (__stxr(v296 + 1, v295));
LABEL_478:
  v347 = 0;
  v297 = (char *)operator new(0x28uLL);
  *(_QWORD *)v297 = &off_1E6988B38;
  *((_QWORD *)v297 + 1) = v264;
  *((_QWORD *)v297 + 2) = v265;
  if (v265)
  {
    v298 = (unint64_t *)&v265->__shared_owners_;
    do
      v299 = __ldxr(v298);
    while (__stxr(v299 + 1, v298));
  }
  *((_DWORD *)v297 + 6) = v268;
  *(_QWORD *)(v297 + 28) = 0x676C6F626E737223;
  *((_DWORD *)v297 + 9) = 0;
  v347 = (std::runtime_error *)v297;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v345);
  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v291, v294, (AMCP *)buf);
  if (*(_QWORD *)&buf[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  v300 = v347;
  if (v347 == &v345)
  {
    v301 = 4;
    v300 = &v345;
LABEL_487:
    (*((void (**)(void))&v300->~runtime_error + v301))();
  }
  else if (v347)
  {
    v301 = 5;
    goto LABEL_487;
  }
  if (v265)
  {
    v302 = (unint64_t *)&v265->__shared_owners_;
    do
      v303 = __ldaxr(v302);
    while (__stlxr(v303 - 1, v302));
    if (!v303)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
    }
    do
      v304 = __ldaxr(v302);
    while (__stlxr(v304 - 1, v302));
    if (!v304)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
    }
  }
  if ((_QWORD)v340)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v340 + 40), &v340);
  v305 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
  if (*((_QWORD *)&v340 + 1))
  {
    v306 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 8);
    do
      v307 = __ldaxr(v306);
    while (__stlxr(v307 - 1, v306));
    if (!v307)
    {
      ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
      std::__shared_weak_count::__release_weak(v305);
    }
  }
  if (v265)
  {
    v308 = (unint64_t *)&v265->__shared_owners_;
    do
      v309 = __ldaxr(v308);
    while (__stlxr(v309 - 1, v308));
    if (!v309)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v342, 0, 1.58366007e190);
  v310 = *(_QWORD *)v342;
  v312 = *(const char **)(a1 + 24);
  v311 = *(_QWORD *)(a1 + 32);
  if (v311)
  {
    v313 = (unint64_t *)(v311 + 8);
    do
      v314 = __ldxr(v313);
    while (__stxr(v314 + 1, v313));
  }
  v315 = *(unsigned int *)(a1 + 44);
  v316 = *(unsigned int *)(v335 + 60);
  v318 = *(std::runtime_error_vtbl **)(v335 + 8);
  v317 = *(_QWORD *)(v335 + 16);
  if (v317)
  {
    v319 = (unint64_t *)(v317 + 8);
    do
      v320 = __ldxr(v319);
    while (__stxr(v320 + 1, v319));
  }
  v321 = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>();
  v347 = 0;
  v322 = (std::runtime_error *)operator new(0x30uLL);
  v322->__vftable = (std::runtime_error_vtbl *)&off_1E6988BB8;
  v322->__imp_.__imp_ = v312;
  v322[1].__vftable = (std::runtime_error_vtbl *)v311;
  v322[1].__imp_.__imp_ = (const char *)(v315 | (v316 << 32));
  v322[2].__vftable = v318;
  v322[2].__imp_.__imp_ = (const char *)v317;
  v347 = v322;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v345);
  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v310, v321, (AMCP *)buf);
  if (*(_QWORD *)&buf[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  v323 = v347;
  if (v347 == &v345)
  {
    v324 = 4;
    v323 = &v345;
LABEL_520:
    (*((void (**)(void))&v323->~runtime_error + v324))();
  }
  else if (v347)
  {
    v324 = 5;
    goto LABEL_520;
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v310 + 40), v342);
  v325 = *(std::__shared_weak_count **)&v342[8];
  if (*(_QWORD *)&v342[8])
  {
    v326 = (unint64_t *)(*(_QWORD *)&v342[8] + 8);
    do
      v327 = __ldaxr(v326);
    while (__stlxr(v327 - 1, v326));
    if (!v327)
    {
      ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
      std::__shared_weak_count::__release_weak(v325);
    }
  }
}

