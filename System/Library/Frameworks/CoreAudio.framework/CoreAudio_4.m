void sub_1B59919C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void HALS_PDPlugIn::ObjectPropertiesChanged(HALS_PDPlugIn *this, HALS_ObjectMap *a2, uint64_t a3, const AudioObjectPropertyAddress *a4, HALS_Client *a5)
{
  HALB_Mutex *v10;
  uint64_t v11;
  HALS_Object *v12;
  HALS_ObjectMap *v13;
  uint64_t v14;
  _QWORD v15[6];
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = 0;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 0x40000000;
  v15[2] = ___ZN13HALS_PDPlugIn23ObjectPropertiesChangedEjjPK26AudioObjectPropertyAddressP11HALS_Client_block_invoke;
  v15[3] = &unk_1E6977F90;
  v16 = (int)a2;
  v15[4] = &v17;
  v15[5] = this;
  v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPlugIn *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v15);
  if (*((_BYTE *)v18 + 24))
  {
    v11 = HALS_ObjectMap::CopyObjectByObjectID(a2);
    v13 = (HALS_ObjectMap *)v11;
    if (v11)
    {
      if (a5)
        v14 = *((unsigned int *)a5 + 4);
      else
        v14 = 0;
      HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*(unsigned int *)(v11 + 16), v14, a3, a4);
    }
    HALS_ObjectMap::ReleaseObject(v13, v12);
  }
  _Block_object_dispose(&v17, 8);
}

void sub_1B5991AF0(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  HALS_ObjectMap *v17;

  HALS_ObjectMap::ReleaseObject(v17, a2);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void ___ZN13HALS_PDPlugIn23ObjectsPublishedAndDiedEjjPKjjS1_P11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  HALS_ObjectMap *v4;
  __int32 *v5;
  __int32 *v6;
  __int32 *v7;
  int64_t v8;
  __int32 *v9;
  __int32 *v10;
  __int32 *v11;
  int64_t v12;
  __int32 *v13;
  __int32 *v14;
  __int32 *v15;
  int64_t v16;
  uint64_t v17;
  HALS_ObjectMap *v18;
  HALS_Object *v19;
  unint64_t i;
  HALS_ObjectMap *v21;
  __int32 *v22;
  __int32 *v23;
  __int32 *v24;
  int64_t v25;
  uint64_t v26;
  HALS_Object *v27;
  HALS_Device *v28;
  int v29;
  char *v33;
  unint64_t v34;
  _DWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  int v45;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)(a1 + 64))
  {
    v3 = 0;
    do
    {
      v4 = (HALS_ObjectMap *)*(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * v3);
      v5 = *(__int32 **)(v2 + 600);
      v6 = wmemchr(*(__int32 **)(v2 + 592), *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v3), ((uint64_t)v5 - *(_QWORD *)(v2 + 592)) >> 2);
      if (v6)
        v5 = v6;
      v7 = *(__int32 **)(v2 + 600);
      if (v5 != v7)
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
        v8 = (char *)v7 - (char *)(v5 + 1);
        if (v7 != v5 + 1)
          memmove(v5, v5 + 1, (char *)v7 - (char *)(v5 + 1));
        *(_QWORD *)(v2 + 600) = (char *)v5 + v8;
      }
      v9 = *(__int32 **)(v2 + 576);
      v10 = wmemchr(*(__int32 **)(v2 + 568), (__int32)v4, ((uint64_t)v9 - *(_QWORD *)(v2 + 568)) >> 2);
      if (v10)
        v9 = v10;
      v11 = *(__int32 **)(v2 + 576);
      if (v9 != v11)
      {
        v12 = (char *)v11 - (char *)(v9 + 1);
        if (v11 != v9 + 1)
          memmove(v9, v9 + 1, (char *)v11 - (char *)(v9 + 1));
        *(_QWORD *)(v2 + 576) = (char *)v9 + v12;
      }
      v13 = *(__int32 **)(v2 + 552);
      v14 = wmemchr(*(__int32 **)(v2 + 544), (__int32)v4, ((uint64_t)v13 - *(_QWORD *)(v2 + 544)) >> 2);
      if (v14)
        v13 = v14;
      v15 = *(__int32 **)(v2 + 552);
      if (v13 != v15)
      {
        v16 = (char *)v15 - (char *)(v13 + 1);
        if (v15 != v13 + 1)
          memmove(v13, v13 + 1, (char *)v15 - (char *)(v13 + 1));
        *(_QWORD *)(v2 + 552) = (char *)v13 + v16;
      }
      v17 = HALS_ObjectMap::CopyObjectByObjectID(v4);
      v18 = (HALS_ObjectMap *)v17;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      HALS_ObjectMap::ObjectIsDead(v4);
      HALS_ObjectMap::ReleaseObject(v18, v19);
      ++v3;
    }
    while (v3 < *(unsigned int *)(a1 + 64));
  }
  if (*(_DWORD *)(a1 + 68))
  {
    for (i = 0; i < *(unsigned int *)(a1 + 68); ++i)
    {
      v21 = (HALS_ObjectMap *)*(unsigned int *)(*(_QWORD *)(a1 + 56) + 4 * i);
      v22 = *(__int32 **)(v2 + 576);
      v23 = wmemchr(*(__int32 **)(v2 + 568), *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * i), ((uint64_t)v22 - *(_QWORD *)(v2 + 568)) >> 2);
      if (v23)
        v22 = v23;
      v24 = *(__int32 **)(v2 + 576);
      if (v22 == v24)
        continue;
      v25 = (char *)v24 - (char *)(v22 + 1);
      if (v24 != v22 + 1)
        memmove(v22, v22 + 1, (char *)v24 - (char *)(v22 + 1));
      *(_QWORD *)(v2 + 576) = (char *)v22 + v25;
      v26 = HALS_ObjectMap::CopyObjectByObjectID(v21);
      v28 = (HALS_Device *)v26;
      if (v26)
      {
        v29 = *(_DWORD *)(v26 + 20);
        if (v29 <= 1701078389)
        {
          if (v29 == 1633773415 || v29 == 1633969526)
          {
LABEL_46:
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
            v33 = *(char **)(v2 + 600);
            v34 = *(_QWORD *)(v2 + 608);
            if ((unint64_t)v33 >= v34)
            {
              v36 = *(char **)(v2 + 592);
              v37 = (v33 - v36) >> 2;
              v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 62)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v39 = v34 - (_QWORD)v36;
              if (v39 >> 1 > v38)
                v38 = v39 >> 1;
              v40 = (unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL;
              v41 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v40)
                v41 = v38;
              if (v41)
              {
                v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v41);
                v33 = *(char **)(v2 + 600);
                v36 = *(char **)(v2 + 592);
              }
              else
              {
                v42 = 0;
              }
              v43 = (_DWORD *)(v41 + 4 * v37);
              *v43 = (_DWORD)v21;
              v35 = v43 + 1;
              while (v33 != v36)
              {
                v44 = *((_DWORD *)v33 - 1);
                v33 -= 4;
                *--v43 = v44;
              }
              *(_QWORD *)(v2 + 592) = v43;
              *(_QWORD *)(v2 + 600) = v35;
              *(_QWORD *)(v2 + 608) = v41 + 4 * v42;
              if (v36)
                operator delete(v36);
            }
            else
            {
              *(_DWORD *)v33 = (_DWORD)v21;
              v35 = v33 + 4;
            }
            *(_QWORD *)(v2 + 600) = v35;
            (**(void (***)(HALS_Device *))v28)(v28);
            HALS_Device::UpdateInternalIOContext(v28);
            goto LABEL_62;
          }
        }
        else if (v29 == 1701078390 || v29 == 1701733488 || v29 == 1919182198)
        {
          goto LABEL_46;
        }
        v45 = *(_DWORD *)(v26 + 24);
        if (v29 != v45)
        {
          if (v45 <= 1701078389)
          {
            if (v45 == 1633773415 || v45 == 1633969526)
              goto LABEL_46;
          }
          else if (v45 == 1701078390 || v45 == 1919182198 || v45 == 1701733488)
          {
            goto LABEL_46;
          }
        }
        (**(void (***)(uint64_t))v26)(v26);
      }
LABEL_62:
      HALS_ObjectMap::ReleaseObject(v28, v27);
    }
  }
}

void sub_1B5991F38(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void ___ZN13HALS_PDPlugIn12CreateObjectEjjP11HALS_Client_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  unint64_t v4;
  _DWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  int v15;
  char *v16;
  unint64_t v17;
  _DWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  int v27;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (char *)v2[69];
  v4 = v2[70];
  if ((unint64_t)v3 >= v4)
  {
    v6 = (char *)v2[68];
    v7 = (v3 - v6) >> 2;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 62)
      goto LABEL_32;
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 1 > v8)
      v8 = v9 >> 1;
    v10 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL;
    v11 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v8;
    if (v11)
    {
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v11);
      v3 = (char *)v2[69];
      v6 = (char *)v2[68];
    }
    else
    {
      v12 = 0;
    }
    v13 = (_DWORD *)(v11 + 4 * v7);
    v14 = v11 + 4 * v12;
    *v13 = *(_DWORD *)(a1 + 40);
    v5 = v13 + 1;
    while (v3 != v6)
    {
      v15 = *((_DWORD *)v3 - 1);
      v3 -= 4;
      *--v13 = v15;
    }
    v2[68] = v13;
    v2[69] = v5;
    v2[70] = v14;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_DWORD *)v3 = *(_DWORD *)(a1 + 40);
    v5 = v3 + 4;
  }
  v2[69] = v5;
  v16 = (char *)v2[72];
  v17 = v2[73];
  if ((unint64_t)v16 < v17)
  {
    *(_DWORD *)v16 = *(_DWORD *)(a1 + 40);
    v18 = v16 + 4;
    goto LABEL_31;
  }
  v19 = (char *)v2[71];
  v20 = (v16 - v19) >> 2;
  v21 = v20 + 1;
  if ((unint64_t)(v20 + 1) >> 62)
LABEL_32:
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v22 = v17 - (_QWORD)v19;
  if (v22 >> 1 > v21)
    v21 = v22 >> 1;
  v10 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL;
  v23 = 0x3FFFFFFFFFFFFFFFLL;
  if (!v10)
    v23 = v21;
  if (v23)
  {
    v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
    v16 = (char *)v2[72];
    v19 = (char *)v2[71];
  }
  else
  {
    v24 = 0;
  }
  v25 = (_DWORD *)(v23 + 4 * v20);
  v26 = v23 + 4 * v24;
  *v25 = *(_DWORD *)(a1 + 40);
  v18 = v25 + 1;
  while (v16 != v19)
  {
    v27 = *((_DWORD *)v16 - 1);
    v16 -= 4;
    *--v25 = v27;
  }
  v2[71] = v25;
  v2[72] = v18;
  v2[73] = v26;
  if (v19)
    operator delete(v19);
LABEL_31:
  v2[72] = v18;
}

void HALS_PDPlugIn::HALS_PDPlugIn(HALS_PDPlugIn *this, HALS_System *a2, const __CFURL *a3, uint64_t a4, HALS_Object *a5)
{
  _QWORD *v7;
  __CFBundle *v8;
  __CFBundle *v9;
  _QWORD *v10;
  __CFBundle *v11;
  void *FunctionPointerForName;
  __CFBundle *v13;
  void *v14;
  __CFBundle *v15;
  void *v16;
  __CFBundle *v17;
  void *v18;
  __CFBundle *v19;
  void *v20;
  __CFBundle *v21;
  void *v22;
  __CFBundle *v23;
  void *v24;
  __CFBundle *v25;
  void *v26;
  __CFBundle *v27;
  void *v28;
  __CFBundle *v29;
  void *v30;
  __CFBundle *v31;
  void *v32;
  __CFBundle *v33;
  void *v34;
  __CFBundle *v35;
  void *v36;
  __CFBundle *v37;
  void *v38;
  __CFBundle *v39;
  void *v40;
  __CFBundle *v41;
  CFStringRef Identifier;
  CFIndex v43;
  HALB_Mutex *v44;
  uint64_t v45;
  NSObject *v46;
  const char *v47;
  _DWORD *exception;
  int v49;
  NSObject *v50;
  const char *v51;
  _DWORD *v52;
  char v53[288];
  _QWORD v54[2];
  _BYTE buf[18];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  HALS_DeviceManager::HALS_DeviceManager(this, a2, CFSTR("temporary"), a4, a5);
  *v7 = off_1E6977E10;
  if (a3)
    CFRetain(a3);
  v54[0] = &off_1E6977FD8;
  v54[1] = a3;
  *((_QWORD *)this + 43) = &off_1E6971AA0;
  v8 = CFBundleCreate(0, a3);
  *((_QWORD *)this + 44) = v8;
  *((_BYTE *)this + 360) = 1;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_QWORD *)this + 60) = 0;
  if (!v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_PDPUCPlugIn.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 47;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: failed to create the bundle", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  if (!CFBundlePreflightExecutable(v8, 0))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_PDPUCPlugIn.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 51;
      v46 = MEMORY[0x1E0C81028];
      v47 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: preflighting the bundle failed";
      goto LABEL_48;
    }
LABEL_49:
    v49 = 1852797029;
    goto LABEL_97;
  }
  v9 = (__CFBundle *)*((_QWORD *)this + 44);
  if (!v9 || !CFBundleLoadExecutableAndReturnError(v9, 0))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_PDPUCPlugIn.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 55;
      v46 = MEMORY[0x1E0C81028];
      v47 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: loading the bundle's executable failed";
LABEL_48:
      _os_log_impl(&dword_1B57BA000, v46, OS_LOG_TYPE_ERROR, v47, buf, 0x12u);
      goto LABEL_49;
    }
    goto LABEL_49;
  }
  v10 = (_QWORD *)((char *)this + 368);
  v11 = (__CFBundle *)*((_QWORD *)this + 44);
  if (!v11)
  {
    *v10 = 0;
    goto LABEL_51;
  }
  FunctionPointerForName = CFBundleGetFunctionPointerForName(v11, CFSTR("PhysicalDevicePlugIn_Initialize"));
  *v10 = FunctionPointerForName;
  if (!FunctionPointerForName)
  {
LABEL_51:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_96;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_PDPUCPlugIn.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 59;
    v50 = MEMORY[0x1E0C81028];
    v51 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the Initialize routine";
LABEL_95:
    _os_log_impl(&dword_1B57BA000, v50, OS_LOG_TYPE_ERROR, v51, buf, 0x12u);
    goto LABEL_96;
  }
  v13 = (__CFBundle *)*((_QWORD *)this + 44);
  if (!v13)
  {
    *((_QWORD *)this + 47) = 0;
    goto LABEL_54;
  }
  v14 = CFBundleGetFunctionPointerForName(v13, CFSTR("PhysicalDevicePlugIn_Teardown"));
  *((_QWORD *)this + 47) = v14;
  if (!v14)
  {
LABEL_54:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_96;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_PDPUCPlugIn.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 62;
    v50 = MEMORY[0x1E0C81028];
    v51 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the Teardown routine";
    goto LABEL_95;
  }
  v15 = (__CFBundle *)*((_QWORD *)this + 44);
  if (!v15)
  {
    *((_QWORD *)this + 49) = 0;
    goto LABEL_57;
  }
  v16 = CFBundleGetFunctionPointerForName(v15, CFSTR("PhysicalDevicePlugIn_ObjectHasProperty"));
  *((_QWORD *)this + 49) = v16;
  if (!v16)
  {
LABEL_57:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_96;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_PDPUCPlugIn.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 65;
    v50 = MEMORY[0x1E0C81028];
    v51 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the ObjectHasProperty routine";
    goto LABEL_95;
  }
  v17 = (__CFBundle *)*((_QWORD *)this + 44);
  if (!v17)
  {
    *((_QWORD *)this + 50) = 0;
    goto LABEL_60;
  }
  v18 = CFBundleGetFunctionPointerForName(v17, CFSTR("PhysicalDevicePlugIn_ObjectIsPropertySettable"));
  *((_QWORD *)this + 50) = v18;
  if (!v18)
  {
LABEL_60:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_96;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_PDPUCPlugIn.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 68;
    v50 = MEMORY[0x1E0C81028];
    v51 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the ObjectIsPropertySettable routine";
    goto LABEL_95;
  }
  v19 = (__CFBundle *)*((_QWORD *)this + 44);
  if (!v19)
  {
    *((_QWORD *)this + 51) = 0;
    goto LABEL_63;
  }
  v20 = CFBundleGetFunctionPointerForName(v19, CFSTR("PhysicalDevicePlugIn_ObjectGetPropertyDataSize"));
  *((_QWORD *)this + 51) = v20;
  if (!v20)
  {
LABEL_63:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_96;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_PDPUCPlugIn.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 71;
    v50 = MEMORY[0x1E0C81028];
    v51 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the ObjectGetPropertyDataSize routine";
    goto LABEL_95;
  }
  v21 = (__CFBundle *)*((_QWORD *)this + 44);
  if (!v21)
  {
    *((_QWORD *)this + 52) = 0;
    goto LABEL_66;
  }
  v22 = CFBundleGetFunctionPointerForName(v21, CFSTR("PhysicalDevicePlugIn_ObjectGetPropertyData"));
  *((_QWORD *)this + 52) = v22;
  if (!v22)
  {
LABEL_66:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_96;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_PDPUCPlugIn.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 74;
    v50 = MEMORY[0x1E0C81028];
    v51 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the ObjectGetPropertyData routine";
    goto LABEL_95;
  }
  v23 = (__CFBundle *)*((_QWORD *)this + 44);
  if (!v23)
  {
    *((_QWORD *)this + 53) = 0;
    goto LABEL_69;
  }
  v24 = CFBundleGetFunctionPointerForName(v23, CFSTR("PhysicalDevicePlugIn_ObjectSetPropertyData"));
  *((_QWORD *)this + 53) = v24;
  if (!v24)
  {
LABEL_69:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_96;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_PDPUCPlugIn.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 77;
    v50 = MEMORY[0x1E0C81028];
    v51 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the ObjectSetPropertyData routine";
    goto LABEL_95;
  }
  v25 = (__CFBundle *)*((_QWORD *)this + 44);
  if (!v25)
  {
    *((_QWORD *)this + 54) = 0;
    goto LABEL_72;
  }
  v26 = CFBundleGetFunctionPointerForName(v25, CFSTR("PhysicalDevicePlugIn_GetZeroTimeStamp"));
  *((_QWORD *)this + 54) = v26;
  if (!v26)
  {
LABEL_72:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_96;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_PDPUCPlugIn.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 80;
    v50 = MEMORY[0x1E0C81028];
    v51 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the GetZeroTimeStamp routine";
    goto LABEL_95;
  }
  v27 = (__CFBundle *)*((_QWORD *)this + 44);
  if (!v27)
  {
    *((_QWORD *)this + 55) = 0;
    goto LABEL_75;
  }
  v28 = CFBundleGetFunctionPointerForName(v27, CFSTR("PhysicalDevicePlugIn_BeginIOCycle"));
  *((_QWORD *)this + 55) = v28;
  if (!v28)
  {
LABEL_75:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_96;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_PDPUCPlugIn.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 83;
    v50 = MEMORY[0x1E0C81028];
    v51 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the BeginIOCycle routine";
    goto LABEL_95;
  }
  v29 = (__CFBundle *)*((_QWORD *)this + 44);
  if (!v29)
  {
    *((_QWORD *)this + 56) = 0;
    goto LABEL_78;
  }
  v30 = CFBundleGetFunctionPointerForName(v29, CFSTR("PhysicalDevicePlugIn_AcquireIOBufferForStream"));
  *((_QWORD *)this + 56) = v30;
  if (!v30)
  {
LABEL_78:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_96;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_PDPUCPlugIn.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 86;
    v50 = MEMORY[0x1E0C81028];
    v51 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the AcquireIOBufferForStream routine";
    goto LABEL_95;
  }
  v31 = (__CFBundle *)*((_QWORD *)this + 44);
  if (!v31)
  {
    *((_QWORD *)this + 57) = 0;
    goto LABEL_81;
  }
  v32 = CFBundleGetFunctionPointerForName(v31, CFSTR("PhysicalDevicePlugIn_ReadFromStream"));
  *((_QWORD *)this + 57) = v32;
  if (!v32)
  {
LABEL_81:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_96;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_PDPUCPlugIn.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 89;
    v50 = MEMORY[0x1E0C81028];
    v51 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the ReadFromStream routine";
    goto LABEL_95;
  }
  v33 = (__CFBundle *)*((_QWORD *)this + 44);
  if (!v33)
  {
    *((_QWORD *)this + 58) = 0;
    goto LABEL_84;
  }
  v34 = CFBundleGetFunctionPointerForName(v33, CFSTR("PhysicalDevicePlugIn_WriteToStream"));
  *((_QWORD *)this + 58) = v34;
  if (!v34)
  {
LABEL_84:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_96;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_PDPUCPlugIn.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 92;
    v50 = MEMORY[0x1E0C81028];
    v51 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the WriteToStream routine";
    goto LABEL_95;
  }
  v35 = (__CFBundle *)*((_QWORD *)this + 44);
  if (!v35)
  {
    *((_QWORD *)this + 59) = 0;
    goto LABEL_87;
  }
  v36 = CFBundleGetFunctionPointerForName(v35, CFSTR("PhysicalDevicePlugIn_ReleaseIOBufferForStream"));
  *((_QWORD *)this + 59) = v36;
  if (!v36)
  {
LABEL_87:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_96;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_PDPUCPlugIn.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 95;
    v50 = MEMORY[0x1E0C81028];
    v51 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the ReleaseIOBufferForStream routine";
    goto LABEL_95;
  }
  v37 = (__CFBundle *)*((_QWORD *)this + 44);
  if (!v37)
  {
    *((_QWORD *)this + 60) = 0;
    goto LABEL_90;
  }
  v38 = CFBundleGetFunctionPointerForName(v37, CFSTR("PhysicalDevicePlugIn_EndIOCycle"));
  *((_QWORD *)this + 60) = v38;
  if (!v38)
  {
LABEL_90:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_96;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_PDPUCPlugIn.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 98;
    v50 = MEMORY[0x1E0C81028];
    v51 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the EndIOCycle routine";
    goto LABEL_95;
  }
  v39 = (__CFBundle *)*((_QWORD *)this + 44);
  if (!v39)
  {
    *((_QWORD *)this + 48) = 0;
LABEL_93:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_PDPUCPlugIn.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 101;
      v50 = MEMORY[0x1E0C81028];
      v51 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the PerformDeviceConfigChange routine";
      goto LABEL_95;
    }
LABEL_96:
    v49 = 2003329396;
LABEL_97:
    v52 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v52 = &off_1E69A1B30;
    v52[2] = v49;
  }
  v40 = CFBundleGetFunctionPointerForName(v39, CFSTR("PhysicalDevicePlugIn_PerformDeviceConfigChange"));
  *((_QWORD *)this + 48) = v40;
  if (!v40)
    goto LABEL_93;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v54);
  *((_QWORD *)this + 61) = HALS_PDPlugIn::Host_ObjectPropertyChanged;
  *((_QWORD *)this + 62) = HALS_PDPlugIn::Host_PhysicalDevicesCreated;
  *((_QWORD *)this + 63) = HALS_PDPlugIn::Host_PhysicalDevicesDestroyed;
  *((_QWORD *)this + 64) = HALS_PDPlugIn::Host_RequestDeviceConfigChange;
  *((_QWORD *)this + 65) = this;
  *((_QWORD *)this + 66) = *((unsigned int *)this + 4);
  *((_QWORD *)this + 67) = HALS_PDPlugIn::Host_ObjectsCreatedAndDestroyed;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_QWORD *)this + 76) = 0;
  v41 = (__CFBundle *)*((_QWORD *)this + 44);
  if (v41)
    Identifier = CFBundleGetIdentifier(v41);
  else
    Identifier = 0;
  *(_QWORD *)buf = &off_1E69A0F60;
  *(_QWORD *)&buf[8] = Identifier;
  CACFString::operator=((uint64_t)this + 48, Identifier);
  v43 = OS::CF::String::AsCString((CFIndex)buf, (UInt8 *)this + 64, 256);
  MEMORY[0x1E0C80A78](v43);
  snprintf(v53, 0x11FuLL, "com.apple.audio.manager.%s", (const char *)this + 64);
  v44 = (HALB_Mutex *)operator new();
  HALB_Mutex::HALB_Mutex(v44);
  *((_QWORD *)this + 41) = v44;
  snprintf(v53, 0x11FuLL, "com.apple.audio.manager.%s.event", (const char *)this + 64);
  v45 = operator new();
  *((_QWORD *)this + 42) = AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v45, v53);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
}

void sub_1B5992CBC(_Unwind_Exception *a1)
{
  void **v1;
  HALB_CFBundle *v2;
  void *v4;
  void **v5;
  void *v6;
  void *v7;

  v4 = v1[74];
  if (v4)
  {
    v1[75] = v4;
    operator delete(v4);
  }
  v5 = v1 + 68;
  v6 = v1[71];
  if (v6)
  {
    v1[72] = v6;
    operator delete(v6);
  }
  v7 = *v5;
  if (*v5)
  {
    v1[69] = v7;
    operator delete(v7);
  }
  HALB_CFBundle::~HALB_CFBundle(v2);
  *v1 = off_1E6985A90;
  CACFString::~CACFString((CACFString *)(v1 + 6));
  HALS_Object::~HALS_Object((HALS_Object *)v1);
  _Unwind_Resume(a1);
}

uint64_t HALS_PDPlugIn::Host_ObjectPropertyChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  HALS_ObjectMap *v8;
  HALS_Object *v9;
  _DWORD *exception;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v7 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 40));
  v8 = (HALS_ObjectMap *)v7;
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "HALS_PDPlugIn.cpp";
      v14 = 1024;
      v15 = 443;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPlugIn::Host_ObjectPropertyChanged: no plug-in", (uint8_t *)&v12, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 296))(v7, a2, a3, a4, 0);
  HALS_ObjectMap::ReleaseObject(v8, v9);
  return 0;
}

void sub_1B5992EC0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B5992ED8(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5992DF0);
  }
  JUMPOUT(0x1B5992EC8);
}

void sub_1B5992F08()
{
  JUMPOUT(0x1B5992EC8);
}

uint64_t HALS_PDPlugIn::Host_PhysicalDevicesCreated(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  HALS_PDPUCPlugIn **v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t PropertyDataSize;
  int v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  HALS_Object *v20;
  _DWORD *exception;
  _BYTE v23[12];
  unsigned int v24;
  AudioObjectPropertyAddress buf;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = (HALS_PDPUCPlugIn **)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 40));
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      buf.mSelector = 136315394;
      *(_QWORD *)&buf.mScope = "HALS_PDPlugIn.cpp";
      v26 = 1024;
      v27 = 461;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPlugIn::Host_PhysicalDevicesCreated: no plug-in", (uint8_t *)&buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  BYTE1(buf.mElement) = 0;
  HIWORD(buf.mElement) = 0;
  strcpy((char *)&buf, "#mtsbolg");
  if ((_DWORD)a2)
  {
    v6 = a2;
    v7 = a3;
    do
    {
      PropertyDataSize = HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(v5[51], *v7, &buf, 0, 0);
      v9 = MEMORY[0x1E0C80A78]();
      v11 = &v23[-v10];
      v24 = 4 * v9;
      HALS_PDPUCPlugIn::ObjectGetPropertyData(v5[52], *v7, &buf, 0, 0, &v24, &v23[-v10]);
      (*((void (**)(HALS_PDPUCPlugIn **, _QWORD, uint64_t, _BYTE *, _QWORD, _QWORD, _QWORD))*v5 + 36))(v5, *v7, PropertyDataSize, v11, 0, 0, 0);
      if (!(_DWORD)PropertyDataSize)
      {
        strcpy((char *)&buf, "#mtstpni");
        BYTE1(buf.mElement) = 0;
        HIWORD(buf.mElement) = 0;
        v12 = HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(v5[51], *v7, &buf, 0, 0);
        v13 = MEMORY[0x1E0C80A78]();
        v15 = &v23[-v14];
        v24 = 4 * v13;
        HALS_PDPUCPlugIn::ObjectGetPropertyData(v5[52], *v7, &buf, 0, 0, &v24, &v23[-v14]);
        (*((void (**)(HALS_PDPUCPlugIn **, _QWORD, uint64_t, _BYTE *, _QWORD, _QWORD, _QWORD))*v5 + 36))(v5, *v7, v12, v15, 0, 0, 0);
        strcpy((char *)&buf, "#mtsptuo");
        BYTE1(buf.mElement) = 0;
        HIWORD(buf.mElement) = 0;
        v16 = HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(v5[51], *v7, &buf, 0, 0);
        v17 = MEMORY[0x1E0C80A78]();
        v19 = &v23[-v18];
        v24 = 4 * v17;
        HALS_PDPUCPlugIn::ObjectGetPropertyData(v5[52], *v7, &buf, 0, 0, &v24, &v23[-v18]);
        (*((void (**)(HALS_PDPUCPlugIn **, _QWORD, uint64_t, _BYTE *, _QWORD, _QWORD, _QWORD))*v5 + 36))(v5, *v7, v16, v19, 0, 0, 0);
      }
      ++v7;
      --v6;
    }
    while (v6);
  }
  (*((void (**)(HALS_PDPUCPlugIn **, uint64_t, uint64_t, unsigned int *, _QWORD, _QWORD, _QWORD))*v5 + 36))(v5, 1, a2, a3, 0, 0, 0);
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v5, v20);
  return 0;
}

void sub_1B5993280(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B5993298(void *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  if ((_DWORD)a2)
  {
    HALS_ObjectMap::ReleaseObject(v2, a2);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B59931A0);
  }
  JUMPOUT(0x1B5993288);
}

void sub_1B5993308()
{
  JUMPOUT(0x1B5993288);
}

uint64_t HALS_PDPlugIn::Host_PhysicalDevicesDestroyed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  HALS_ObjectMap *v6;
  HALS_Object *v7;
  _DWORD *exception;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 40));
  v6 = (HALS_ObjectMap *)v5;
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "HALS_PDPlugIn.cpp";
      v12 = 1024;
      v13 = 537;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPlugIn::Host_PhysicalDevicesDestroyed: no plug-in", (uint8_t *)&v10, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 288))(v5, 1, 0, 0, a2, a3, 0);
  HALS_ObjectMap::ReleaseObject(v6, v7);
  return 0;
}

void sub_1B599344C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B5993464(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B599337CLL);
  }
  JUMPOUT(0x1B5993454);
}

void sub_1B5993494()
{
  JUMPOUT(0x1B5993454);
}

uint64_t HALS_PDPlugIn::Host_RequestDeviceConfigChange(uint64_t a1, HALS_ObjectMap *a2, uint64_t a3)
{
  HALS_ObjectMap *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  HALS_Object *v9;
  HALS_Object *v10;
  _DWORD *exception;
  _DWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  _BYTE block[24];
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 40));
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)block = 136315394;
      *(_QWORD *)&block[4] = "HALS_PDPlugIn.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 555;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPlugIn::Host_RequestDeviceConfigChange: no plug-in", block, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  v6 = HALS_ObjectMap::CopyObjectByObjectID(a2);
  if (!v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)block = 136315394;
      *(_QWORD *)&block[4] = "HALS_PDPlugIn.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 559;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPlugIn::Host_RequestDeviceConfigChange: no device", block, 0x12u);
    }
    v13 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v13 = &off_1E69A1B30;
    v13[2] = 560947818;
  }
  kdebug_trace();
  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  *(_QWORD *)block = MEMORY[0x1E0C809B0];
  *(_QWORD *)&block[8] = 0x40000000;
  *(_QWORD *)&block[16] = ___ZN14HALS_PDPDevice32HandlePlugIn_RequestConfigChangeEPv_block_invoke;
  v19 = &unk_1E6976740;
  v20 = &v14;
  v21 = v6;
  v22 = a3;
  v7 = atomic_load((unsigned __int8 *)(v6 + 1376));
  if ((v7 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(v6 + 1377));
  dispatch_sync(*(dispatch_queue_t *)(v6 + 1344), block);
  kdebug_trace();
  v8 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v6, v9);
  HALS_ObjectMap::ReleaseObject(v5, v10);
  return v8;
}

void sub_1B5993720(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B599373C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HALS_ObjectMap *v9;
  HALS_ObjectMap *v10;
  HALS_Object *v12;
  HALS_Object *v13;

  if (a2)
  {
    _Block_object_dispose(&a9, 8);
    HALS_ObjectMap::ReleaseObject(v10, v12);
    HALS_ObjectMap::ReleaseObject(v9, v13);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B59935B4);
  }
  JUMPOUT(0x1B599372CLL);
}

void sub_1B59937C8()
{
  JUMPOUT(0x1B599372CLL);
}

uint64_t HALS_PDPlugIn::Host_ObjectsCreatedAndDestroyed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  HALS_ObjectMap *v12;
  HALS_Object *v13;
  _DWORD *exception;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v11 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 40));
  v12 = (HALS_ObjectMap *)v11;
  if (!v11)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v16 = 136315394;
      v17 = "HALS_PDPlugIn.cpp";
      v18 = 1024;
      v19 = 585;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPlugIn::Host_ObjectsCreatedAndDestroyed: no plug-in", (uint8_t *)&v16, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 288))(v11, a2, a3, a4, a5, a6, 0);
  HALS_ObjectMap::ReleaseObject(v12, v13);
  return 0;
}

void sub_1B5993924(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B599393C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5993850);
  }
  JUMPOUT(0x1B599392CLL);
}

void sub_1B599398C()
{
  JUMPOUT(0x1B599392CLL);
}

void OS::CF::URL::~URL(OS::CF::URL *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);
  JUMPOUT(0x1B5E50688);
}

OS::CF::MutableArray *OS::CF::MutableArray::MutableArray(OS::CF::MutableArray *this)
{
  CFMutableArrayRef Mutable;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  *(_QWORD *)this = &off_1E69960C8;
  *((_QWORD *)this + 1) = Mutable;
  return this;
}

void OS::CF::MutableArray::AppendValue<OS::CF::String>(__CFArray *a1, const void *a2)
{
  if (a1)
  {
    if (a2)
      CFArrayAppendValue(a1, a2);
  }
}

const __CFArray *OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::String>(const __CFArray *result, uint64_t a2, CFIndex a3)
{
  const __CFArray *v4;
  const void *ValueAtIndex;
  const void *v7;
  CFTypeID v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)result = &off_1E69A0F60;
  *((_QWORD *)result + 1) = 0;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v4 = result;
    result = *(const __CFArray **)(a2 + 8);
    if (result)
    {
      result = (const __CFArray *)CFArrayGetCount(result);
      if ((uint64_t)result > a3)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), a3);
        v7 = ValueAtIndex;
        v8 = ValueAtIndex ? CFGetTypeID(ValueAtIndex) : 0;
        result = (const __CFArray *)CFStringGetTypeID();
        if ((const __CFArray *)v8 == result)
        {
          if (v7)
          {
            CFRetain(v7);
            v9 = (uint64_t)v4;
            v10 = (uint64_t)v7;
          }
          else
          {
            v9 = (uint64_t)v4;
            v10 = 0;
          }
          return (const __CFArray *)OS::CF::UntypedObject::operator=(v9, v10);
        }
      }
    }
  }
  return result;
}

void OS::CF::MutableArray::~MutableArray(OS::CF::MutableArray *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t Resampler2::SetPrimeMethod(uint64_t this, int a2)
{
  double v2;

  if (*(_DWORD *)(this + 108) == 1818848869)
  {
    *(_DWORD *)(this + 64) = 1;
  }
  else
  {
    *(_DWORD *)(this + 112) = a2;
    if (a2)
    {
      if (a2 == 2)
        a2 = *(_DWORD *)(*(_QWORD *)(this + 48) + 12) - 1;
      else
        a2 = *(_DWORD *)(*(_QWORD *)(this + 48) + 20);
    }
    *(_DWORD *)(this + 64) = a2;
    *(_QWORD *)(this + 184) = 0;
    *(_BYTE *)(this + 192) = 1;
    v2 = *(double *)(this + 136);
    *(double *)(this + 152) = v2;
    if (v2 != 0.0)
    {
      *(_BYTE *)(this + 125) = 0;
      return Resampler2::SetConverterFunction(this);
    }
  }
  return this;
}

uint64_t Resampler2::SetConverterFunction(uint64_t this)
{
  void *v1;
  int v2;
  void *v3;
  void *v4;

  if (*(_DWORD *)(this + 108) == 1818848869)
  {
    v1 = Resampler2::ConvertLinear;
  }
  else
  {
    if (*(int *)(this + 120) < 1)
    {
      v2 = *(unsigned __int8 *)(this + 256);
      v3 = Resampler2::ConvertScalar<Resampler2::RampedRate>;
      v4 = Resampler2::ConvertScalar<Resampler2::FixedRate>;
    }
    else
    {
      if (*(_BYTE *)(this + 125))
      {
        v1 = Resampler2::ConvertSIMD_SmallIntegerRatio;
        goto LABEL_11;
      }
      v2 = *(unsigned __int8 *)(this + 256);
      v3 = Resampler2::ConvertSIMD<Resampler2::RampedRate>;
      v4 = Resampler2::ConvertSIMD<Resampler2::FixedRate>;
    }
    if (v2)
      v1 = v3;
    else
      v1 = v4;
  }
LABEL_11:
  *(_QWORD *)this = v1;
  *(_QWORD *)(this + 8) = 0;
  return this;
}

void Resampler2::ConvertSIMD<Resampler2::FixedRate>(uint64_t a1, float *a2, float *a3, uint64_t a4, int a5)
{
  uint64_t v5;
  float *v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  int v22;
  const float *v23;
  float32x4_t *v24;
  float32x4_t *v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int v36;
  float32x4_t v37;
  unint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  unsigned int v148;
  unsigned int v149;
  float32x4_t *v150;
  float32x4_t *v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float v171;
  int8x16_t v172;
  int8x16_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  double v178;
  int v179;
  int v180;
  float32x4_t *v181;
  float32x4_t *v182;
  float32x4_t *v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float32x4_t v199;
  float32x4_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  unsigned int v234;
  unsigned int v235;
  float32x4_t *v236;
  float32x4_t *v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float v245;
  int8x16_t v246;
  float v247;
  float32x4_t *v248;
  unint64_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float64x2_t v254;
  float64x2_t v255;
  int64x2_t v256;
  int64x2_t v257;
  float64x2_t v258;
  unint64_t v259;
  int v260;

  v5 = a4;
  v6 = a3;
  v8 = a1;
  v9 = *(unsigned int *)(a1 + 108);
  v10 = *(int **)(a1 + 48);
  if ((_DWORD)v9 == 1818848869)
    v11 = 2;
  else
    v11 = v10[3];
  v259 = (int)v11;
  v12 = 4 * (int)v11;
  v13 = *(_QWORD *)(a1 + 72);
  v14 = (double)v10[4];
  v15 = *(double *)(a1 + 152);
  v16 = *(double *)(a1 + 160);
  if (a3)
  {
    if ((int)a4 >= 1)
    {
      v17 = 0;
      v18 = *(_QWORD *)(a1 + 80);
      v19 = a5;
      do
      {
        v20 = **(_QWORD **)(v8 + 48);
        v21 = (v15 - (double)(int)v15) * v14;
        v22 = v11 * (int)v21;
        v23 = (const float *)(v20 + 4 * v22);
        v24 = (float32x4_t *)(v13 + 4 * (int)v15);
        v25 = (float32x4_t *)(v18 + 4 * (int)v15);
        v26 = (double)(int)v21;
        if ((_DWORD)v9 == 1650553971)
        {
          v260 = v17;
          v27 = v11;
          v28 = v5;
          v29 = v9;
          v30 = v13;
          v31 = v8;
          v32 = v19;
          vdotprD2i(v24->f32, v25->f32, v23, &v23[v259], v21 - v26, a2, v6, v259);
          v17 = v260;
          v19 = v32;
          v8 = v31;
          v13 = v30;
          v9 = v29;
          v5 = v28;
          v11 = v27;
        }
        else
        {
          v33 = 0uLL;
          v34 = 0uLL;
          v35 = 0uLL;
          v36 = v11;
          v37 = 0uLL;
          if ((int)v11 >= 64)
          {
            v38 = 0;
            v39 = v20 + v12 + 4 * v22;
            v36 = v11;
            do
            {
              v40 = v24[v38 / 0x10];
              v41 = v24[v38 / 0x10 + 1];
              v42 = *(float32x4_t *)&v23[v38 / 4];
              v43 = *(float32x4_t *)&v23[v38 / 4 + 4];
              v44 = vmlaq_f32(v33, v42, v40);
              v45 = *(float32x4_t *)(v39 + v38);
              v46 = *(float32x4_t *)(v39 + v38 + 16);
              v47 = vmlaq_f32(v34, v45, v40);
              v48 = v25[v38 / 0x10];
              v49 = v25[v38 / 0x10 + 1];
              v50 = vmlaq_f32(v44, v43, v41);
              v51 = vmlaq_f32(v47, v46, v41);
              v52 = vmlaq_f32(vmlaq_f32(v35, v42, v48), v43, v49);
              v53 = vmlaq_f32(vmlaq_f32(v37, v45, v48), v46, v49);
              v54 = v24[v38 / 0x10 + 2];
              v55 = v24[v38 / 0x10 + 3];
              v56 = *(float32x4_t *)&v23[v38 / 4 + 8];
              v57 = *(float32x4_t *)&v23[v38 / 4 + 12];
              v58 = vmlaq_f32(v50, v56, v54);
              v59 = *(float32x4_t *)(v39 + v38 + 32);
              v60 = *(float32x4_t *)(v39 + v38 + 48);
              v61 = vmlaq_f32(v51, v59, v54);
              v62 = v25[v38 / 0x10 + 2];
              v63 = v25[v38 / 0x10 + 3];
              v64 = vmlaq_f32(v58, v57, v55);
              v65 = vmlaq_f32(v61, v60, v55);
              v66 = vmlaq_f32(vmlaq_f32(v52, v56, v62), v57, v63);
              v67 = vmlaq_f32(vmlaq_f32(v53, v59, v62), v60, v63);
              v68 = v24[v38 / 0x10 + 4];
              v69 = v24[v38 / 0x10 + 5];
              v70 = *(float32x4_t *)&v23[v38 / 4 + 16];
              v71 = *(float32x4_t *)&v23[v38 / 4 + 20];
              v72 = vmlaq_f32(v64, v70, v68);
              v73 = *(float32x4_t *)(v39 + v38 + 64);
              v74 = *(float32x4_t *)(v39 + v38 + 80);
              v75 = vmlaq_f32(v65, v73, v68);
              v76 = v25[v38 / 0x10 + 4];
              v77 = v25[v38 / 0x10 + 5];
              v78 = vmlaq_f32(v72, v71, v69);
              v79 = vmlaq_f32(v75, v74, v69);
              v80 = vmlaq_f32(vmlaq_f32(v66, v70, v76), v71, v77);
              v81 = vmlaq_f32(vmlaq_f32(v67, v73, v76), v74, v77);
              v82 = v24[v38 / 0x10 + 6];
              v83 = v24[v38 / 0x10 + 7];
              v84 = *(float32x4_t *)&v23[v38 / 4 + 24];
              v85 = *(float32x4_t *)&v23[v38 / 4 + 28];
              v86 = vmlaq_f32(v78, v84, v82);
              v87 = *(float32x4_t *)(v39 + v38 + 96);
              v88 = *(float32x4_t *)(v39 + v38 + 112);
              v89 = vmlaq_f32(v79, v87, v82);
              v90 = v25[v38 / 0x10 + 6];
              v91 = v25[v38 / 0x10 + 7];
              v92 = vmlaq_f32(v86, v85, v83);
              v93 = vmlaq_f32(v89, v88, v83);
              v94 = vmlaq_f32(vmlaq_f32(v80, v84, v90), v85, v91);
              v95 = vmlaq_f32(vmlaq_f32(v81, v87, v90), v88, v91);
              v96 = v24[v38 / 0x10 + 8];
              v97 = v24[v38 / 0x10 + 9];
              v98 = *(float32x4_t *)&v23[v38 / 4 + 32];
              v99 = *(float32x4_t *)&v23[v38 / 4 + 36];
              v100 = vmlaq_f32(v92, v98, v96);
              v101 = *(float32x4_t *)(v39 + v38 + 128);
              v102 = *(float32x4_t *)(v39 + v38 + 144);
              v103 = vmlaq_f32(v93, v101, v96);
              v104 = v25[v38 / 0x10 + 8];
              v105 = v25[v38 / 0x10 + 9];
              v106 = vmlaq_f32(v100, v99, v97);
              v107 = vmlaq_f32(v103, v102, v97);
              v108 = vmlaq_f32(vmlaq_f32(v94, v98, v104), v99, v105);
              v109 = vmlaq_f32(vmlaq_f32(v95, v101, v104), v102, v105);
              v110 = v24[v38 / 0x10 + 10];
              v111 = v24[v38 / 0x10 + 11];
              v112 = *(float32x4_t *)&v23[v38 / 4 + 40];
              v113 = *(float32x4_t *)&v23[v38 / 4 + 44];
              v114 = vmlaq_f32(v106, v112, v110);
              v115 = *(float32x4_t *)(v39 + v38 + 160);
              v116 = *(float32x4_t *)(v39 + v38 + 176);
              v117 = vmlaq_f32(v107, v115, v110);
              v118 = v25[v38 / 0x10 + 10];
              v119 = v25[v38 / 0x10 + 11];
              v120 = vmlaq_f32(v114, v113, v111);
              v121 = vmlaq_f32(v117, v116, v111);
              v122 = vmlaq_f32(vmlaq_f32(v108, v112, v118), v113, v119);
              v123 = vmlaq_f32(vmlaq_f32(v109, v115, v118), v116, v119);
              v124 = v24[v38 / 0x10 + 12];
              v125 = v24[v38 / 0x10 + 13];
              v126 = *(float32x4_t *)&v23[v38 / 4 + 48];
              v127 = *(float32x4_t *)&v23[v38 / 4 + 52];
              v128 = vmlaq_f32(v120, v126, v124);
              v129 = *(float32x4_t *)(v39 + v38 + 192);
              v130 = *(float32x4_t *)(v39 + v38 + 208);
              v131 = vmlaq_f32(v121, v129, v124);
              v132 = v25[v38 / 0x10 + 12];
              v133 = v25[v38 / 0x10 + 13];
              v134 = vmlaq_f32(v128, v127, v125);
              v135 = vmlaq_f32(v131, v130, v125);
              v136 = vmlaq_f32(vmlaq_f32(v122, v126, v132), v127, v133);
              v137 = vmlaq_f32(vmlaq_f32(v123, v129, v132), v130, v133);
              v138 = v24[v38 / 0x10 + 14];
              v139 = v24[v38 / 0x10 + 15];
              v140 = *(float32x4_t *)&v23[v38 / 4 + 56];
              v141 = *(float32x4_t *)&v23[v38 / 4 + 60];
              v142 = vmlaq_f32(v134, v140, v138);
              v143 = *(float32x4_t *)(v39 + v38 + 224);
              v144 = *(float32x4_t *)(v39 + v38 + 240);
              v145 = vmlaq_f32(v135, v143, v138);
              v146 = v25[v38 / 0x10 + 14];
              v147 = v25[v38 / 0x10 + 15];
              v148 = v36;
              v33 = vmlaq_f32(v142, v141, v139);
              v34 = vmlaq_f32(v145, v144, v139);
              v35 = vmlaq_f32(vmlaq_f32(v136, v140, v146), v141, v147);
              v37 = vmlaq_f32(vmlaq_f32(v137, v143, v146), v144, v147);
              v36 -= 64;
              v38 += 256;
            }
            while (v148 > 0x7F);
            v25 = (float32x4_t *)((char *)v25 + v38);
            v24 = (float32x4_t *)((char *)v24 + v38);
            v23 = (const float *)((char *)v23 + v38);
          }
          if (v36 >= 16)
          {
            v149 = v36 + 16;
            v150 = (float32x4_t *)(v23 + 8);
            do
            {
              v151 = (float32x4_t *)((char *)v150 + v12);
              v152 = v24[1];
              v153 = v150[-2];
              v154 = v150[-1];
              v155 = *(float32x4_t *)((char *)v150 + v12 - 32);
              v156 = *(float32x4_t *)((char *)v150 + v12 - 16);
              v157 = v25[1];
              v158 = vmlaq_f32(vmlaq_f32(v33, v153, *v24), v154, v152);
              v159 = vmlaq_f32(vmlaq_f32(v34, v155, *v24), v156, v152);
              v160 = vmlaq_f32(vmlaq_f32(v35, v153, *v25), v154, v157);
              v161 = vmlaq_f32(vmlaq_f32(v37, v155, *v25), v156, v157);
              v162 = v24[2];
              v163 = v24[3];
              v164 = *v150;
              v165 = v150[1];
              v150 += 4;
              v166 = vmlaq_f32(v158, v164, v162);
              v167 = v151[1];
              v168 = vmlaq_f32(v159, *v151, v162);
              v169 = v25[2];
              v170 = v25[3];
              v33 = vmlaq_f32(v166, v165, v163);
              v34 = vmlaq_f32(v168, v167, v163);
              v35 = vmlaq_f32(vmlaq_f32(v160, v164, v169), v165, v170);
              v149 -= 16;
              v37 = vmlaq_f32(vmlaq_f32(v161, *v151, v169), v167, v170);
              v24 += 4;
              v25 += 4;
            }
            while (v149 > 0x1F);
          }
          v171 = v21 - v26;
          v172 = (int8x16_t)vmlaq_n_f32(v33, vsubq_f32(v34, v33), v171);
          v173 = (int8x16_t)vmlaq_n_f32(v35, vsubq_f32(v37, v35), v171);
          *a2 = vaddv_f32(vadd_f32(*(float32x2_t *)v172.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v172, v172, 8uLL)));
          *v6 = vaddv_f32(vadd_f32(*(float32x2_t *)v173.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v173, v173, 8uLL)));
        }
        a2 += v19;
        v6 += v19;
        v15 = v16 + v15;
        ++v17;
      }
      while (v17 != (_DWORD)v5);
    }
  }
  else if ((int)a4 >= 1)
  {
    v174 = 0;
    v175 = *(_QWORD *)v10;
    v176 = a5;
    v177 = 4 * (int)v11;
    do
    {
      v178 = (v15 - (double)(int)v15) * v14;
      v179 = (int)v178;
      v180 = v11 * (int)v178;
      v181 = (float32x4_t *)(v175 + 4 * v180);
      v182 = (float32x4_t *)(v13 + 4 * (int)v15);
      if ((_DWORD)v9 == 1650553971)
      {
        v183 = (float32x4_t *)((char *)v181 + 4 * (int)v11);
        v184 = v182[1];
        v185 = vmulq_f32(v184, v181[1]);
        v186 = vmulq_f32(*v182, *v181);
        v187 = vmulq_f32(v184, v183[1]);
        v188 = vmulq_f32(*v182, *v183);
        v189 = v181[2];
        v190 = v181[3];
        v191 = v183[2];
        v192 = v183[3];
        v193 = v182[2];
        v194 = v182[3];
        v195 = 0uLL;
        if ((unint64_t)(int)v11 >> 2 == 4)
        {
          v196 = 0uLL;
          v197 = 0uLL;
          v198 = 0uLL;
        }
        else
        {
          v248 = v182 + 4;
          v197 = 0uLL;
          v249 = 16 * ((unint64_t)(int)v11 >> 2) - 64;
          v198 = 0uLL;
          v196 = 0uLL;
          do
          {
            v196 = vaddq_f64(v196, vaddq_f64(vcvt_hight_f64_f32(v185), vcvt_hight_f64_f32(v186)));
            v195 = vaddq_f64(v195, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v185.f32), vcvtq_f64_f32(*(float32x2_t *)v186.f32)));
            v198 = vaddq_f64(v198, vaddq_f64(vcvt_hight_f64_f32(v187), vcvt_hight_f64_f32(v188)));
            v197 = vaddq_f64(v197, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v187.f32), vcvtq_f64_f32(*(float32x2_t *)v188.f32)));
            v186 = vmulq_f32(v193, v189);
            v185 = vmulq_f32(v194, v190);
            v188 = vmulq_f32(v193, v191);
            v187 = vmulq_f32(v194, v192);
            v193 = *v248;
            v194 = v248[1];
            v248 += 2;
            v189 = v181[4];
            v190 = v181[5];
            v191 = *(float32x4_t *)((char *)v181 + v177 + 64);
            v192 = *(float32x4_t *)((char *)v181 + v177 + 80);
            v181 += 2;
            v249 -= 32;
          }
          while (v249);
        }
        v250 = vmulq_f32(v190, v194);
        v251 = vmulq_f32(v189, v193);
        v252 = vmulq_f32(v192, v194);
        v253 = vmulq_f32(v191, v193);
        v254 = vaddq_f64(vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v187), vcvt_hight_f64_f32(v188)), v198), vaddq_f64(vcvt_hight_f64_f32(v252), vcvt_hight_f64_f32(v253)));
        v255 = vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v187.f32), vcvtq_f64_f32(*(float32x2_t *)v188.f32)), v197), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v252.f32), vcvtq_f64_f32(*(float32x2_t *)v253.f32)));
        v256 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v185.f32), vcvtq_f64_f32(*(float32x2_t *)v186.f32)), v195), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v250.f32), vcvtq_f64_f32(*(float32x2_t *)v251.f32))), vaddq_f64(vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v185), vcvt_hight_f64_f32(v186)), v196), vaddq_f64(vcvt_hight_f64_f32(v250), vcvt_hight_f64_f32(v251))));
        v257 = (int64x2_t)vaddq_f64(v255, v254);
        v258 = vaddq_f64((float64x2_t)vzip1q_s64(v257, v256), (float64x2_t)vzip2q_s64(v257, v256));
        v247 = v258.f64[1] + (v178 - (double)v179) * (v258.f64[0] - v258.f64[1]);
      }
      else
      {
        v199 = 0uLL;
        v200 = 0uLL;
        v201 = v11;
        if ((int)v11 >= 64)
        {
          v202 = 0;
          v203 = v175 + v12 + 4 * v180;
          v201 = v11;
          do
          {
            v204 = v182[v202];
            v205 = v182[v202 + 1];
            v206 = vmlaq_f32(vmlaq_f32(v199, v181[v202], v204), v181[v202 + 1], v205);
            v207 = vmlaq_f32(vmlaq_f32(v200, *(float32x4_t *)(v203 + v202 * 16), v204), *(float32x4_t *)(v203 + v202 * 16 + 16), v205);
            v208 = v182[v202 + 2];
            v209 = v182[v202 + 3];
            v210 = vmlaq_f32(vmlaq_f32(v206, v181[v202 + 2], v208), v181[v202 + 3], v209);
            v211 = vmlaq_f32(vmlaq_f32(v207, *(float32x4_t *)(v203 + v202 * 16 + 32), v208), *(float32x4_t *)(v203 + v202 * 16 + 48), v209);
            v212 = v182[v202 + 4];
            v213 = v182[v202 + 5];
            v214 = vmlaq_f32(vmlaq_f32(v210, v181[v202 + 4], v212), v181[v202 + 5], v213);
            v215 = vmlaq_f32(vmlaq_f32(v211, *(float32x4_t *)(v203 + v202 * 16 + 64), v212), *(float32x4_t *)(v203 + v202 * 16 + 80), v213);
            v216 = v182[v202 + 6];
            v217 = v182[v202 + 7];
            v218 = vmlaq_f32(vmlaq_f32(v214, v181[v202 + 6], v216), v181[v202 + 7], v217);
            v219 = vmlaq_f32(vmlaq_f32(v215, *(float32x4_t *)(v203 + v202 * 16 + 96), v216), *(float32x4_t *)(v203 + v202 * 16 + 112), v217);
            v220 = v182[v202 + 8];
            v221 = v182[v202 + 9];
            v222 = vmlaq_f32(vmlaq_f32(v218, v181[v202 + 8], v220), v181[v202 + 9], v221);
            v223 = vmlaq_f32(vmlaq_f32(v219, *(float32x4_t *)(v203 + v202 * 16 + 128), v220), *(float32x4_t *)(v203 + v202 * 16 + 144), v221);
            v224 = v182[v202 + 10];
            v225 = v182[v202 + 11];
            v226 = vmlaq_f32(vmlaq_f32(v222, v181[v202 + 10], v224), v181[v202 + 11], v225);
            v227 = vmlaq_f32(vmlaq_f32(v223, *(float32x4_t *)(v203 + v202 * 16 + 160), v224), *(float32x4_t *)(v203 + v202 * 16 + 176), v225);
            v228 = v182[v202 + 12];
            v229 = v182[v202 + 13];
            v230 = vmlaq_f32(vmlaq_f32(v226, v181[v202 + 12], v228), v181[v202 + 13], v229);
            v231 = vmlaq_f32(vmlaq_f32(v227, *(float32x4_t *)(v203 + v202 * 16 + 192), v228), *(float32x4_t *)(v203 + v202 * 16 + 208), v229);
            v232 = v182[v202 + 14];
            v233 = v182[v202 + 15];
            v234 = v201;
            v199 = vmlaq_f32(vmlaq_f32(v230, v181[v202 + 14], v232), v181[v202 + 15], v233);
            v200 = vmlaq_f32(vmlaq_f32(v231, *(float32x4_t *)(v203 + v202 * 16 + 224), v232), *(float32x4_t *)(v203 + v202 * 16 + 240), v233);
            v201 -= 64;
            v202 += 16;
          }
          while (v234 > 0x7F);
          v182 = (float32x4_t *)((char *)v182 + v202 * 16);
          v181 = (float32x4_t *)((char *)v181 + v202 * 16);
        }
        if (v201 >= 16)
        {
          v235 = v201 + 16;
          v236 = v181 + 2;
          do
          {
            v237 = (float32x4_t *)((char *)v236 + v12);
            v238 = v182[1];
            v239 = vmlaq_f32(vmlaq_f32(v199, v236[-2], *v182), v236[-1], v238);
            v240 = vmlaq_f32(vmlaq_f32(v200, *(float32x4_t *)((char *)v236 + v12 - 32), *v182), *(float32x4_t *)((char *)v236 + v12 - 16), v238);
            v241 = v182[2];
            v242 = v182[3];
            v243 = *v236;
            v244 = v236[1];
            v236 += 4;
            v199 = vmlaq_f32(vmlaq_f32(v239, v243, v241), v244, v242);
            v200 = vmlaq_f32(vmlaq_f32(v240, *v237, v241), v237[1], v242);
            v235 -= 16;
            v182 += 4;
          }
          while (v235 > 0x1F);
        }
        v245 = v178 - (double)v179;
        v246 = (int8x16_t)vmlaq_n_f32(v199, vsubq_f32(v200, v199), v245);
        v247 = vaddv_f32(vadd_f32(*(float32x2_t *)v246.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v246, v246, 8uLL)));
      }
      *a2 = v247;
      a2 += v176;
      v15 = v16 + v15;
      ++v174;
    }
    while (v174 != (_DWORD)v5);
  }
  *(double *)(v8 + 152) = v15;
}

void Resampler2::ConvertSIMD<Resampler2::RampedRate>(Resampler2 *this, float *a2, float *a3, int a4, int a5)
{
  float *v6;
  float64x2_t v9;
  float64x2_t v10;
  int v11;
  uint64_t v12;
  int v13;
  double v14;
  double v15;
  double v16;
  float64x2_t v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  int v33;
  const float *v34;
  float32x4_t *v35;
  float32x4_t *v36;
  double v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int v41;
  float32x4_t v42;
  unint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  unsigned int v153;
  unsigned int v154;
  float32x4_t *v155;
  float32x4_t *v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float v176;
  int8x16_t v177;
  int8x16_t v178;
  int v179;
  uint64_t v180;
  double v181;
  uint64_t v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  uint64_t v188;
  double v189;
  int v190;
  int v191;
  float32x4_t *v192;
  float32x4_t *v193;
  float32x4_t *v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float32x4_t v210;
  float32x4_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  unsigned int v245;
  unsigned int v246;
  float32x4_t *v247;
  float32x4_t *v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float v256;
  int8x16_t v257;
  float v258;
  float32x4_t *v259;
  unint64_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float64x2_t v265;
  float64x2_t v266;
  int64x2_t v267;
  int64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  uint64_t v271;
  double v272;
  double v273;

  v6 = a3;
  v9 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(-*((double *)this + 16)), 0);
  v10 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(-*((double *)this + 33)), 0);
  v11 = *((_DWORD *)this + 27);
  v12 = *((_QWORD *)this + 6);
  if (v11 == 1818848869)
    v13 = 2;
  else
    v13 = *(_DWORD *)(v12 + 12);
  v14 = *((double *)this + 25);
  v15 = *((double *)this + 26);
  v16 = *((double *)this + 31);
  v270 = vaddq_f64(*(float64x2_t *)((char *)this + 216), v9);
  v17 = vaddq_f64(*(float64x2_t *)((char *)this + 232), v10);
  v18 = (double)*((int *)this + 16);
  v19 = 4 * v13;
  v271 = *((_QWORD *)this + 9);
  v20 = (double)*(int *)(v12 + 16);
  v21 = *((double *)this + 19);
  if (a3)
  {
    if (a4 >= 1)
    {
      v22 = 0;
      v23 = *((_QWORD *)this + 10);
      v24 = a5;
      v25 = v17.f64[1];
      v26 = 0.0;
      v272 = v17.f64[0];
      do
      {
        if (v25 <= (double)(int)v26)
          v27 = v15;
        else
          v27 = v14 + v16 * ((double)(int)v26 - v17.f64[0]);
        *((double *)this + 20) = v27;
        Resampler2::SetVarispeedSinc((uint64_t)this, v27);
        if (v25 <= v26)
        {
          v29 = (v26 - v25) * v15;
          v28 = v270.f64[1];
        }
        else
        {
          v28 = (v26 - v272) * (v14 + v16 * 0.5 * (v26 - v272));
          v29 = v270.f64[0];
        }
        v17.f64[0] = v272;
        v30 = fmax(v29 + v28, 0.0);
        if (v30 >= v18)
          v21 = v18;
        else
          v21 = v30;
        v31 = **((_QWORD **)this + 6);
        v32 = (v21 - (double)(int)v21) * v20;
        v33 = v13 * (int)v32;
        v34 = (const float *)(v31 + 4 * v33);
        v35 = (float32x4_t *)(v271 + 4 * (int)v21);
        v36 = (float32x4_t *)(v23 + 4 * (int)v21);
        v37 = (double)(int)v32;
        if (v11 == 1650553971)
        {
          vdotprD2i(v35->f32, v36->f32, v34, &v34[v13], v32 - v37, a2, v6, v13);
          v17.f64[0] = v272;
        }
        else
        {
          v38 = 0uLL;
          v39 = 0uLL;
          v40 = 0uLL;
          v41 = v13;
          v42 = 0uLL;
          if (v13 >= 64)
          {
            v43 = 0;
            v44 = v31 + v19 + 4 * v33;
            v41 = v13;
            do
            {
              v45 = v35[v43 / 0x10];
              v46 = v35[v43 / 0x10 + 1];
              v47 = *(float32x4_t *)&v34[v43 / 4];
              v48 = *(float32x4_t *)&v34[v43 / 4 + 4];
              v49 = vmlaq_f32(v38, v47, v45);
              v50 = *(float32x4_t *)(v44 + v43);
              v51 = *(float32x4_t *)(v44 + v43 + 16);
              v52 = vmlaq_f32(v39, v50, v45);
              v53 = v36[v43 / 0x10];
              v54 = v36[v43 / 0x10 + 1];
              v55 = vmlaq_f32(v49, v48, v46);
              v56 = vmlaq_f32(v52, v51, v46);
              v57 = vmlaq_f32(vmlaq_f32(v40, v47, v53), v48, v54);
              v58 = vmlaq_f32(vmlaq_f32(v42, v50, v53), v51, v54);
              v59 = v35[v43 / 0x10 + 2];
              v60 = v35[v43 / 0x10 + 3];
              v61 = *(float32x4_t *)&v34[v43 / 4 + 8];
              v62 = *(float32x4_t *)&v34[v43 / 4 + 12];
              v63 = vmlaq_f32(v55, v61, v59);
              v64 = *(float32x4_t *)(v44 + v43 + 32);
              v65 = *(float32x4_t *)(v44 + v43 + 48);
              v66 = vmlaq_f32(v56, v64, v59);
              v67 = v36[v43 / 0x10 + 2];
              v68 = v36[v43 / 0x10 + 3];
              v69 = vmlaq_f32(v63, v62, v60);
              v70 = vmlaq_f32(v66, v65, v60);
              v71 = vmlaq_f32(vmlaq_f32(v57, v61, v67), v62, v68);
              v72 = vmlaq_f32(vmlaq_f32(v58, v64, v67), v65, v68);
              v73 = v35[v43 / 0x10 + 4];
              v74 = v35[v43 / 0x10 + 5];
              v75 = *(float32x4_t *)&v34[v43 / 4 + 16];
              v76 = *(float32x4_t *)&v34[v43 / 4 + 20];
              v77 = vmlaq_f32(v69, v75, v73);
              v78 = *(float32x4_t *)(v44 + v43 + 64);
              v79 = *(float32x4_t *)(v44 + v43 + 80);
              v80 = vmlaq_f32(v70, v78, v73);
              v81 = v36[v43 / 0x10 + 4];
              v82 = v36[v43 / 0x10 + 5];
              v83 = vmlaq_f32(v77, v76, v74);
              v84 = vmlaq_f32(v80, v79, v74);
              v85 = vmlaq_f32(vmlaq_f32(v71, v75, v81), v76, v82);
              v86 = vmlaq_f32(vmlaq_f32(v72, v78, v81), v79, v82);
              v87 = v35[v43 / 0x10 + 6];
              v88 = v35[v43 / 0x10 + 7];
              v89 = *(float32x4_t *)&v34[v43 / 4 + 24];
              v90 = *(float32x4_t *)&v34[v43 / 4 + 28];
              v91 = vmlaq_f32(v83, v89, v87);
              v92 = *(float32x4_t *)(v44 + v43 + 96);
              v93 = *(float32x4_t *)(v44 + v43 + 112);
              v94 = vmlaq_f32(v84, v92, v87);
              v95 = v36[v43 / 0x10 + 6];
              v96 = v36[v43 / 0x10 + 7];
              v97 = vmlaq_f32(v91, v90, v88);
              v98 = vmlaq_f32(v94, v93, v88);
              v99 = vmlaq_f32(vmlaq_f32(v85, v89, v95), v90, v96);
              v100 = vmlaq_f32(vmlaq_f32(v86, v92, v95), v93, v96);
              v101 = v35[v43 / 0x10 + 8];
              v102 = v35[v43 / 0x10 + 9];
              v103 = *(float32x4_t *)&v34[v43 / 4 + 32];
              v104 = *(float32x4_t *)&v34[v43 / 4 + 36];
              v105 = vmlaq_f32(v97, v103, v101);
              v106 = *(float32x4_t *)(v44 + v43 + 128);
              v107 = *(float32x4_t *)(v44 + v43 + 144);
              v108 = vmlaq_f32(v98, v106, v101);
              v109 = v36[v43 / 0x10 + 8];
              v110 = v36[v43 / 0x10 + 9];
              v111 = vmlaq_f32(v105, v104, v102);
              v112 = vmlaq_f32(v108, v107, v102);
              v113 = vmlaq_f32(vmlaq_f32(v99, v103, v109), v104, v110);
              v114 = vmlaq_f32(vmlaq_f32(v100, v106, v109), v107, v110);
              v115 = v35[v43 / 0x10 + 10];
              v116 = v35[v43 / 0x10 + 11];
              v117 = *(float32x4_t *)&v34[v43 / 4 + 40];
              v118 = *(float32x4_t *)&v34[v43 / 4 + 44];
              v119 = vmlaq_f32(v111, v117, v115);
              v120 = *(float32x4_t *)(v44 + v43 + 160);
              v121 = *(float32x4_t *)(v44 + v43 + 176);
              v122 = vmlaq_f32(v112, v120, v115);
              v123 = v36[v43 / 0x10 + 10];
              v124 = v36[v43 / 0x10 + 11];
              v125 = vmlaq_f32(v119, v118, v116);
              v126 = vmlaq_f32(v122, v121, v116);
              v127 = vmlaq_f32(vmlaq_f32(v113, v117, v123), v118, v124);
              v128 = vmlaq_f32(vmlaq_f32(v114, v120, v123), v121, v124);
              v129 = v35[v43 / 0x10 + 12];
              v130 = v35[v43 / 0x10 + 13];
              v131 = *(float32x4_t *)&v34[v43 / 4 + 48];
              v132 = *(float32x4_t *)&v34[v43 / 4 + 52];
              v133 = vmlaq_f32(v125, v131, v129);
              v134 = *(float32x4_t *)(v44 + v43 + 192);
              v135 = *(float32x4_t *)(v44 + v43 + 208);
              v136 = vmlaq_f32(v126, v134, v129);
              v137 = v36[v43 / 0x10 + 12];
              v138 = v36[v43 / 0x10 + 13];
              v139 = vmlaq_f32(v133, v132, v130);
              v140 = vmlaq_f32(v136, v135, v130);
              v141 = vmlaq_f32(vmlaq_f32(v127, v131, v137), v132, v138);
              v142 = vmlaq_f32(vmlaq_f32(v128, v134, v137), v135, v138);
              v143 = v35[v43 / 0x10 + 14];
              v144 = v35[v43 / 0x10 + 15];
              v145 = *(float32x4_t *)&v34[v43 / 4 + 56];
              v146 = *(float32x4_t *)&v34[v43 / 4 + 60];
              v147 = vmlaq_f32(v139, v145, v143);
              v148 = *(float32x4_t *)(v44 + v43 + 224);
              v149 = *(float32x4_t *)(v44 + v43 + 240);
              v150 = vmlaq_f32(v140, v148, v143);
              v151 = v36[v43 / 0x10 + 14];
              v152 = v36[v43 / 0x10 + 15];
              v153 = v41;
              v38 = vmlaq_f32(v147, v146, v144);
              v39 = vmlaq_f32(v150, v149, v144);
              v40 = vmlaq_f32(vmlaq_f32(v141, v145, v151), v146, v152);
              v42 = vmlaq_f32(vmlaq_f32(v142, v148, v151), v149, v152);
              v41 -= 64;
              v43 += 256;
            }
            while (v153 > 0x7F);
            v36 = (float32x4_t *)((char *)v36 + v43);
            v35 = (float32x4_t *)((char *)v35 + v43);
            v34 = (const float *)((char *)v34 + v43);
          }
          if (v41 >= 16)
          {
            v154 = v41 + 16;
            v155 = (float32x4_t *)(v34 + 8);
            do
            {
              v156 = (float32x4_t *)((char *)v155 + v19);
              v157 = v35[1];
              v158 = v155[-2];
              v159 = v155[-1];
              v160 = *(float32x4_t *)((char *)v155 + v19 - 32);
              v161 = *(float32x4_t *)((char *)v155 + v19 - 16);
              v162 = v36[1];
              v163 = vmlaq_f32(vmlaq_f32(v38, v158, *v35), v159, v157);
              v164 = vmlaq_f32(vmlaq_f32(v39, v160, *v35), v161, v157);
              v165 = vmlaq_f32(vmlaq_f32(v40, v158, *v36), v159, v162);
              v166 = vmlaq_f32(vmlaq_f32(v42, v160, *v36), v161, v162);
              v167 = v35[2];
              v168 = v35[3];
              v169 = *v155;
              v170 = v155[1];
              v155 += 4;
              v171 = vmlaq_f32(v163, v169, v167);
              v172 = v156[1];
              v173 = vmlaq_f32(v164, *v156, v167);
              v174 = v36[2];
              v175 = v36[3];
              v38 = vmlaq_f32(v171, v170, v168);
              v39 = vmlaq_f32(v173, v172, v168);
              v40 = vmlaq_f32(vmlaq_f32(v165, v169, v174), v170, v175);
              v154 -= 16;
              v42 = vmlaq_f32(vmlaq_f32(v166, *v156, v174), v172, v175);
              v35 += 4;
              v36 += 4;
            }
            while (v154 > 0x1F);
          }
          v176 = v32 - v37;
          v177 = (int8x16_t)vmlaq_n_f32(v38, vsubq_f32(v39, v38), v176);
          v178 = (int8x16_t)vmlaq_n_f32(v40, vsubq_f32(v42, v40), v176);
          *a2 = vaddv_f32(vadd_f32(*(float32x2_t *)v177.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v177, v177, 8uLL)));
          *v6 = vaddv_f32(vadd_f32(*(float32x2_t *)v178.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v178, v178, 8uLL)));
        }
        a2 += v24;
        v6 += v24;
        ++v22;
        v26 = v26 + 1.0;
      }
      while (v22 != a4);
    }
  }
  else if (a4 >= 1)
  {
    v179 = 0;
    v180 = a5;
    v181 = v17.f64[1];
    v182 = 4 * v13;
    v183 = 0.0;
    v273 = v17.f64[0];
    do
    {
      if (v181 <= (double)(int)v183)
        v184 = v15;
      else
        v184 = v14 + v16 * ((double)(int)v183 - v17.f64[0]);
      *((double *)this + 20) = v184;
      Resampler2::SetVarispeedSinc((uint64_t)this, v184);
      if (v181 <= v183)
      {
        v186 = (v183 - v181) * v15;
        v185 = v270.f64[1];
      }
      else
      {
        v185 = (v183 - v273) * (v14 + v16 * 0.5 * (v183 - v273));
        v186 = v270.f64[0];
      }
      v17.f64[0] = v273;
      v187 = fmax(v186 + v185, 0.0);
      if (v187 >= v18)
        v21 = v18;
      else
        v21 = v187;
      v188 = **((_QWORD **)this + 6);
      v189 = (v21 - (double)(int)v21) * v20;
      v190 = (int)v189;
      v191 = v13 * (int)v189;
      v192 = (float32x4_t *)(v188 + 4 * v191);
      v193 = (float32x4_t *)(v271 + 4 * (int)v21);
      if (v11 == 1650553971)
      {
        v194 = (float32x4_t *)((char *)v192 + 4 * v13);
        v195 = v193[1];
        v196 = vmulq_f32(v195, v192[1]);
        v197 = vmulq_f32(*v193, *v192);
        v198 = vmulq_f32(v195, v194[1]);
        v199 = vmulq_f32(*v193, *v194);
        v200 = v192[2];
        v201 = v192[3];
        v202 = v194[2];
        v203 = v194[3];
        v204 = v193[2];
        v205 = v193[3];
        v206 = 0uLL;
        if ((unint64_t)v13 >> 2 == 4)
        {
          v207 = 0uLL;
          v208 = 0uLL;
          v209 = 0uLL;
        }
        else
        {
          v259 = v193 + 4;
          v208 = 0uLL;
          v260 = 16 * ((unint64_t)v13 >> 2) - 64;
          v209 = 0uLL;
          v207 = 0uLL;
          do
          {
            v207 = vaddq_f64(v207, vaddq_f64(vcvt_hight_f64_f32(v196), vcvt_hight_f64_f32(v197)));
            v206 = vaddq_f64(v206, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v196.f32), vcvtq_f64_f32(*(float32x2_t *)v197.f32)));
            v209 = vaddq_f64(v209, vaddq_f64(vcvt_hight_f64_f32(v198), vcvt_hight_f64_f32(v199)));
            v208 = vaddq_f64(v208, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v198.f32), vcvtq_f64_f32(*(float32x2_t *)v199.f32)));
            v197 = vmulq_f32(v204, v200);
            v196 = vmulq_f32(v205, v201);
            v199 = vmulq_f32(v204, v202);
            v198 = vmulq_f32(v205, v203);
            v204 = *v259;
            v205 = v259[1];
            v259 += 2;
            v200 = v192[4];
            v201 = v192[5];
            v202 = *(float32x4_t *)((char *)v192 + v182 + 64);
            v203 = *(float32x4_t *)((char *)v192 + v182 + 80);
            v192 += 2;
            v260 -= 32;
          }
          while (v260);
        }
        v261 = vmulq_f32(v201, v205);
        v262 = vmulq_f32(v200, v204);
        v263 = vmulq_f32(v203, v205);
        v264 = vmulq_f32(v202, v204);
        v265 = vaddq_f64(vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v198), vcvt_hight_f64_f32(v199)), v209), vaddq_f64(vcvt_hight_f64_f32(v263), vcvt_hight_f64_f32(v264)));
        v266 = vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v198.f32), vcvtq_f64_f32(*(float32x2_t *)v199.f32)), v208), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v263.f32), vcvtq_f64_f32(*(float32x2_t *)v264.f32)));
        v267 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v196.f32), vcvtq_f64_f32(*(float32x2_t *)v197.f32)), v206), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v261.f32), vcvtq_f64_f32(*(float32x2_t *)v262.f32))), vaddq_f64(vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v196), vcvt_hight_f64_f32(v197)), v207), vaddq_f64(vcvt_hight_f64_f32(v261), vcvt_hight_f64_f32(v262))));
        v268 = (int64x2_t)vaddq_f64(v266, v265);
        v269 = vaddq_f64((float64x2_t)vzip1q_s64(v268, v267), (float64x2_t)vzip2q_s64(v268, v267));
        v258 = v269.f64[1] + (v189 - (double)v190) * (v269.f64[0] - v269.f64[1]);
      }
      else
      {
        v210 = 0uLL;
        v211 = 0uLL;
        v212 = v13;
        if (v13 >= 64)
        {
          v213 = 0;
          v214 = v188 + v19 + 4 * v191;
          v212 = v13;
          do
          {
            v215 = v193[v213];
            v216 = v193[v213 + 1];
            v217 = vmlaq_f32(vmlaq_f32(v210, v192[v213], v215), v192[v213 + 1], v216);
            v218 = vmlaq_f32(vmlaq_f32(v211, *(float32x4_t *)(v214 + v213 * 16), v215), *(float32x4_t *)(v214 + v213 * 16 + 16), v216);
            v219 = v193[v213 + 2];
            v220 = v193[v213 + 3];
            v221 = vmlaq_f32(vmlaq_f32(v217, v192[v213 + 2], v219), v192[v213 + 3], v220);
            v222 = vmlaq_f32(vmlaq_f32(v218, *(float32x4_t *)(v214 + v213 * 16 + 32), v219), *(float32x4_t *)(v214 + v213 * 16 + 48), v220);
            v223 = v193[v213 + 4];
            v224 = v193[v213 + 5];
            v225 = vmlaq_f32(vmlaq_f32(v221, v192[v213 + 4], v223), v192[v213 + 5], v224);
            v226 = vmlaq_f32(vmlaq_f32(v222, *(float32x4_t *)(v214 + v213 * 16 + 64), v223), *(float32x4_t *)(v214 + v213 * 16 + 80), v224);
            v227 = v193[v213 + 6];
            v228 = v193[v213 + 7];
            v229 = vmlaq_f32(vmlaq_f32(v225, v192[v213 + 6], v227), v192[v213 + 7], v228);
            v230 = vmlaq_f32(vmlaq_f32(v226, *(float32x4_t *)(v214 + v213 * 16 + 96), v227), *(float32x4_t *)(v214 + v213 * 16 + 112), v228);
            v231 = v193[v213 + 8];
            v232 = v193[v213 + 9];
            v233 = vmlaq_f32(vmlaq_f32(v229, v192[v213 + 8], v231), v192[v213 + 9], v232);
            v234 = vmlaq_f32(vmlaq_f32(v230, *(float32x4_t *)(v214 + v213 * 16 + 128), v231), *(float32x4_t *)(v214 + v213 * 16 + 144), v232);
            v235 = v193[v213 + 10];
            v236 = v193[v213 + 11];
            v237 = vmlaq_f32(vmlaq_f32(v233, v192[v213 + 10], v235), v192[v213 + 11], v236);
            v238 = vmlaq_f32(vmlaq_f32(v234, *(float32x4_t *)(v214 + v213 * 16 + 160), v235), *(float32x4_t *)(v214 + v213 * 16 + 176), v236);
            v239 = v193[v213 + 12];
            v240 = v193[v213 + 13];
            v241 = vmlaq_f32(vmlaq_f32(v237, v192[v213 + 12], v239), v192[v213 + 13], v240);
            v242 = vmlaq_f32(vmlaq_f32(v238, *(float32x4_t *)(v214 + v213 * 16 + 192), v239), *(float32x4_t *)(v214 + v213 * 16 + 208), v240);
            v243 = v193[v213 + 14];
            v244 = v193[v213 + 15];
            v245 = v212;
            v210 = vmlaq_f32(vmlaq_f32(v241, v192[v213 + 14], v243), v192[v213 + 15], v244);
            v211 = vmlaq_f32(vmlaq_f32(v242, *(float32x4_t *)(v214 + v213 * 16 + 224), v243), *(float32x4_t *)(v214 + v213 * 16 + 240), v244);
            v212 -= 64;
            v213 += 16;
          }
          while (v245 > 0x7F);
          v193 = (float32x4_t *)((char *)v193 + v213 * 16);
          v192 = (float32x4_t *)((char *)v192 + v213 * 16);
        }
        if (v212 >= 16)
        {
          v246 = v212 + 16;
          v247 = v192 + 2;
          do
          {
            v248 = (float32x4_t *)((char *)v247 + v19);
            v249 = v193[1];
            v250 = vmlaq_f32(vmlaq_f32(v210, v247[-2], *v193), v247[-1], v249);
            v251 = vmlaq_f32(vmlaq_f32(v211, *(float32x4_t *)((char *)v247 + v19 - 32), *v193), *(float32x4_t *)((char *)v247 + v19 - 16), v249);
            v252 = v193[2];
            v253 = v193[3];
            v254 = *v247;
            v255 = v247[1];
            v247 += 4;
            v210 = vmlaq_f32(vmlaq_f32(v250, v254, v252), v255, v253);
            v211 = vmlaq_f32(vmlaq_f32(v251, *v248, v252), v248[1], v253);
            v246 -= 16;
            v193 += 4;
          }
          while (v246 > 0x1F);
        }
        v256 = v189 - (double)v190;
        v257 = (int8x16_t)vmlaq_n_f32(v210, vsubq_f32(v211, v210), v256);
        v258 = vaddv_f32(vadd_f32(*(float32x2_t *)v257.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v257, v257, 8uLL)));
      }
      *a2 = v258;
      a2 += v180;
      ++v179;
      v183 = v183 + 1.0;
    }
    while (v179 != a4);
  }
  *((double *)this + 19) = v21;
}

uint64_t Resampler2::ConvertScalar<Resampler2::FixedRate>(uint64_t result, float *a2, _DWORD *a3, int a4, int a5)
{
  uint64_t *v5;
  int v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  uint64_t v20;
  float v21;
  int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  unsigned int v236;
  unsigned int v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float v310;
  float v311;
  float v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float v321;
  float v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  float v337;
  float v338;
  float v339;
  double v340;
  float v341;
  int v342;
  uint64_t v343;
  uint64_t v344;
  double v345;
  float *v346;
  float *v347;
  float *v348;
  uint64_t v349;
  float v350;
  int v351;
  float v352;
  float v353;
  float v354;
  float v355;
  float v356;
  float v357;
  float v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v363;
  float v364;
  float v365;
  float v366;
  float v367;
  float v368;
  float v369;
  float v370;
  float v371;
  float v372;
  float v373;
  float v374;
  float v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float v380;
  float v381;
  float v382;
  float v383;
  float v384;
  float v385;
  float v386;
  float v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  float v394;
  float v395;
  float v396;
  float v397;
  float v398;
  float v399;
  float v400;
  float v401;
  float v402;
  float v403;
  float v404;
  float v405;
  float v406;
  float v407;
  float v408;
  float v409;
  float v410;
  float v411;
  float v412;
  float v413;
  float v414;
  unsigned int v415;
  unsigned int v416;
  float v417;
  float v418;
  float v419;
  float v420;
  float v421;
  float v422;
  float v423;
  float v424;
  float v425;
  float v426;
  float v427;
  float v428;
  float v429;
  float v430;
  float v431;
  float v432;
  float v433;
  float v434;
  float v435;
  float v436;
  float v437;
  float v438;
  float v439;
  float v440;
  float v441;
  float v442;
  float v443;
  float v444;
  float v445;
  float v446;

  v5 = *(uint64_t **)(result + 48);
  if (*(_DWORD *)(result + 108) == 1818848869)
    v6 = 2;
  else
    v6 = *((_DWORD *)v5 + 3);
  v7 = *(_QWORD *)(result + 72);
  v8 = *(double *)(result + 152);
  v9 = *(double *)(result + 160);
  v10 = (double)*((int *)v5 + 4);
  if (a3)
  {
    if (a4 >= 1)
    {
      v11 = 0;
      v12 = *(_QWORD *)(result + 80);
      v13 = *v5;
      v14 = a5;
      do
      {
        v15 = (v8 - (double)(int)v8) * v10;
        v16 = (float *)(v13 + 4 * v6 * (int)v15);
        v17 = &v16[v6];
        v18 = (float *)(v7 + 4 * (int)v8);
        v19 = (float *)(v12 + 4 * (int)v8);
        if (v6 < 32)
        {
          v25 = 0.0;
          v24 = 0.0;
          v23 = 0.0;
          v22 = v6;
          v21 = 0.0;
        }
        else
        {
          v20 = 0;
          v21 = 0.0;
          v22 = v6;
          v23 = 0.0;
          v24 = 0.0;
          v25 = 0.0;
          do
          {
            v26 = v18[v20];
            v27 = v18[v20 + 1];
            v28 = v16[v20];
            v29 = v16[v20 + 1];
            v30 = v25 + (float)(v26 * v28);
            v31 = v17[v20];
            v32 = v17[v20 + 1];
            v33 = v24 + (float)(v26 * v31);
            v34 = v19[v20];
            v35 = v19[v20 + 1];
            v36 = v30 + (float)(v27 * v29);
            v37 = v33 + (float)(v27 * v32);
            v38 = (float)(v23 + (float)(v34 * v28)) + (float)(v35 * v29);
            v39 = (float)(v21 + (float)(v34 * v31)) + (float)(v35 * v32);
            v40 = v18[v20 + 2];
            v41 = v18[v20 + 3];
            v42 = v16[v20 + 2];
            v43 = v16[v20 + 3];
            v44 = v17[v20 + 2];
            v45 = v17[v20 + 3];
            v46 = v19[v20 + 2];
            v47 = v19[v20 + 3];
            v48 = (float)(v36 + (float)(v40 * v42)) + (float)(v41 * v43);
            v49 = (float)(v37 + (float)(v40 * v44)) + (float)(v41 * v45);
            v50 = (float)(v38 + (float)(v46 * v42)) + (float)(v47 * v43);
            v51 = (float)(v39 + (float)(v46 * v44)) + (float)(v47 * v45);
            v52 = v18[v20 + 4];
            v53 = v18[v20 + 5];
            v54 = v16[v20 + 4];
            v55 = v16[v20 + 5];
            v56 = v17[v20 + 4];
            v57 = v17[v20 + 5];
            v58 = v48 + (float)(v52 * v54);
            v59 = v49 + (float)(v52 * v56);
            v60 = v19[v20 + 4];
            v61 = v19[v20 + 5];
            v62 = v58 + (float)(v53 * v55);
            v63 = v59 + (float)(v53 * v57);
            v64 = (float)(v50 + (float)(v60 * v54)) + (float)(v61 * v55);
            v65 = (float)(v51 + (float)(v60 * v56)) + (float)(v61 * v57);
            v66 = v18[v20 + 6];
            v67 = v18[v20 + 7];
            v68 = v16[v20 + 6];
            v69 = v16[v20 + 7];
            v70 = v62 + (float)(v66 * v68);
            v71 = v17[v20 + 6];
            v72 = v17[v20 + 7];
            v73 = v63 + (float)(v66 * v71);
            v74 = v19[v20 + 6];
            v75 = v19[v20 + 7];
            v76 = v70 + (float)(v67 * v69);
            v77 = v73 + (float)(v67 * v72);
            v78 = (float)(v64 + (float)(v74 * v68)) + (float)(v75 * v69);
            v79 = (float)(v65 + (float)(v74 * v71)) + (float)(v75 * v72);
            v80 = v18[v20 + 8];
            v81 = v18[v20 + 9];
            v82 = v16[v20 + 8];
            v83 = v16[v20 + 9];
            v84 = v17[v20 + 8];
            v85 = v17[v20 + 9];
            v86 = v19[v20 + 8];
            v87 = v19[v20 + 9];
            v88 = (float)(v76 + (float)(v80 * v82)) + (float)(v81 * v83);
            v89 = (float)(v77 + (float)(v80 * v84)) + (float)(v81 * v85);
            v90 = (float)(v78 + (float)(v86 * v82)) + (float)(v87 * v83);
            v91 = (float)(v79 + (float)(v86 * v84)) + (float)(v87 * v85);
            v92 = v18[v20 + 10];
            v93 = v18[v20 + 11];
            v94 = v16[v20 + 10];
            v95 = v16[v20 + 11];
            v96 = v17[v20 + 10];
            v97 = v17[v20 + 11];
            v98 = v88 + (float)(v92 * v94);
            v99 = v89 + (float)(v92 * v96);
            v100 = v19[v20 + 10];
            v101 = v19[v20 + 11];
            v102 = v98 + (float)(v93 * v95);
            v103 = v99 + (float)(v93 * v97);
            v104 = (float)(v90 + (float)(v100 * v94)) + (float)(v101 * v95);
            v105 = (float)(v91 + (float)(v100 * v96)) + (float)(v101 * v97);
            v106 = v18[v20 + 12];
            v107 = v18[v20 + 13];
            v108 = v16[v20 + 12];
            v109 = v16[v20 + 13];
            v110 = v102 + (float)(v106 * v108);
            v111 = v17[v20 + 12];
            v112 = v17[v20 + 13];
            v113 = v103 + (float)(v106 * v111);
            v114 = v19[v20 + 12];
            v115 = v19[v20 + 13];
            v116 = v110 + (float)(v107 * v109);
            v117 = v113 + (float)(v107 * v112);
            v118 = (float)(v104 + (float)(v114 * v108)) + (float)(v115 * v109);
            v119 = (float)(v105 + (float)(v114 * v111)) + (float)(v115 * v112);
            v120 = v18[v20 + 14];
            v121 = v18[v20 + 15];
            v122 = v16[v20 + 14];
            v123 = v16[v20 + 15];
            v124 = v17[v20 + 14];
            v125 = v17[v20 + 15];
            v126 = v19[v20 + 14];
            v127 = v19[v20 + 15];
            v128 = (float)(v116 + (float)(v120 * v122)) + (float)(v121 * v123);
            v129 = (float)(v117 + (float)(v120 * v124)) + (float)(v121 * v125);
            v130 = (float)(v118 + (float)(v126 * v122)) + (float)(v127 * v123);
            v131 = (float)(v119 + (float)(v126 * v124)) + (float)(v127 * v125);
            v132 = v18[v20 + 16];
            v133 = v18[v20 + 17];
            v134 = v16[v20 + 16];
            v135 = v16[v20 + 17];
            v136 = v17[v20 + 16];
            v137 = v17[v20 + 17];
            v138 = v128 + (float)(v132 * v134);
            v139 = v129 + (float)(v132 * v136);
            v140 = v19[v20 + 16];
            v141 = v19[v20 + 17];
            v142 = v138 + (float)(v133 * v135);
            v143 = v139 + (float)(v133 * v137);
            v144 = (float)(v130 + (float)(v140 * v134)) + (float)(v141 * v135);
            v145 = (float)(v131 + (float)(v140 * v136)) + (float)(v141 * v137);
            v146 = v18[v20 + 18];
            v147 = v18[v20 + 19];
            v148 = v16[v20 + 18];
            v149 = v16[v20 + 19];
            v150 = v142 + (float)(v146 * v148);
            v151 = v17[v20 + 18];
            v152 = v17[v20 + 19];
            v153 = v143 + (float)(v146 * v151);
            v154 = v19[v20 + 18];
            v155 = v19[v20 + 19];
            v156 = v150 + (float)(v147 * v149);
            v157 = v153 + (float)(v147 * v152);
            v158 = (float)(v144 + (float)(v154 * v148)) + (float)(v155 * v149);
            v159 = (float)(v145 + (float)(v154 * v151)) + (float)(v155 * v152);
            v160 = v18[v20 + 20];
            v161 = v18[v20 + 21];
            v162 = v16[v20 + 20];
            v163 = v16[v20 + 21];
            v164 = v17[v20 + 20];
            v165 = v17[v20 + 21];
            v166 = v19[v20 + 20];
            v167 = v19[v20 + 21];
            v168 = (float)(v156 + (float)(v160 * v162)) + (float)(v161 * v163);
            v169 = (float)(v157 + (float)(v160 * v164)) + (float)(v161 * v165);
            v170 = (float)(v158 + (float)(v166 * v162)) + (float)(v167 * v163);
            v171 = (float)(v159 + (float)(v166 * v164)) + (float)(v167 * v165);
            v172 = v18[v20 + 22];
            v173 = v18[v20 + 23];
            v174 = v16[v20 + 22];
            v175 = v16[v20 + 23];
            v176 = v17[v20 + 22];
            v177 = v17[v20 + 23];
            v178 = v168 + (float)(v172 * v174);
            v179 = v169 + (float)(v172 * v176);
            v180 = v19[v20 + 22];
            v181 = v19[v20 + 23];
            v182 = v178 + (float)(v173 * v175);
            v183 = v179 + (float)(v173 * v177);
            v184 = (float)(v170 + (float)(v180 * v174)) + (float)(v181 * v175);
            v185 = (float)(v171 + (float)(v180 * v176)) + (float)(v181 * v177);
            v186 = v18[v20 + 24];
            v187 = v18[v20 + 25];
            v188 = v16[v20 + 24];
            v189 = v16[v20 + 25];
            v190 = v182 + (float)(v186 * v188);
            v191 = v17[v20 + 24];
            v192 = v17[v20 + 25];
            v193 = v183 + (float)(v186 * v191);
            v194 = v19[v20 + 24];
            v195 = v19[v20 + 25];
            v196 = v190 + (float)(v187 * v189);
            v197 = v193 + (float)(v187 * v192);
            v198 = (float)(v184 + (float)(v194 * v188)) + (float)(v195 * v189);
            v199 = (float)(v185 + (float)(v194 * v191)) + (float)(v195 * v192);
            v200 = v18[v20 + 26];
            v201 = v18[v20 + 27];
            v202 = v16[v20 + 26];
            v203 = v16[v20 + 27];
            v204 = v17[v20 + 26];
            v205 = v17[v20 + 27];
            v206 = v19[v20 + 26];
            v207 = v19[v20 + 27];
            v208 = (float)(v196 + (float)(v200 * v202)) + (float)(v201 * v203);
            v209 = (float)(v197 + (float)(v200 * v204)) + (float)(v201 * v205);
            v210 = (float)(v198 + (float)(v206 * v202)) + (float)(v207 * v203);
            v211 = (float)(v199 + (float)(v206 * v204)) + (float)(v207 * v205);
            v212 = v18[v20 + 28];
            v213 = v18[v20 + 29];
            v214 = v16[v20 + 28];
            v215 = v16[v20 + 29];
            v216 = v17[v20 + 28];
            v217 = v17[v20 + 29];
            v218 = v208 + (float)(v212 * v214);
            v219 = v209 + (float)(v212 * v216);
            v220 = v19[v20 + 28];
            v221 = v19[v20 + 29];
            v222 = v218 + (float)(v213 * v215);
            v223 = v219 + (float)(v213 * v217);
            v224 = (float)(v210 + (float)(v220 * v214)) + (float)(v221 * v215);
            v225 = (float)(v211 + (float)(v220 * v216)) + (float)(v221 * v217);
            v226 = v18[v20 + 30];
            v227 = v18[v20 + 31];
            v228 = v16[v20 + 30];
            v229 = v16[v20 + 31];
            v230 = v222 + (float)(v226 * v228);
            v231 = v17[v20 + 30];
            v232 = v17[v20 + 31];
            v233 = v223 + (float)(v226 * v231);
            v234 = v19[v20 + 30];
            v235 = v19[v20 + 31];
            v25 = v230 + (float)(v227 * v229);
            v24 = v233 + (float)(v227 * v232);
            v236 = v22;
            v23 = (float)(v224 + (float)(v234 * v228)) + (float)(v235 * v229);
            v21 = (float)(v225 + (float)(v234 * v231)) + (float)(v235 * v232);
            v22 -= 32;
            v20 += 32;
          }
          while (v236 > 0x3F);
          v19 = (float *)((char *)v19 + v20 * 4);
          v18 = (float *)((char *)v18 + v20 * 4);
          v17 = (float *)((char *)v17 + v20 * 4);
          v16 = (float *)((char *)v16 + v20 * 4);
        }
        if (v22 >= 16)
        {
          v237 = v22 + 16;
          do
          {
            v238 = v18[1];
            v239 = v16[1];
            v240 = v17[1];
            v241 = v19[1];
            v242 = (float)(v25 + (float)(*v18 * *v16)) + (float)(v238 * v239);
            v243 = (float)(v24 + (float)(*v18 * *v17)) + (float)(v238 * v240);
            v244 = (float)(v23 + (float)(*v19 * *v16)) + (float)(v241 * v239);
            v245 = (float)(v21 + (float)(*v19 * *v17)) + (float)(v241 * v240);
            v246 = v18[2];
            v247 = v18[3];
            v248 = v16[2];
            v249 = v16[3];
            v250 = v242 + (float)(v246 * v248);
            v251 = v17[2];
            v252 = v17[3];
            v253 = v243 + (float)(v246 * v251);
            v254 = v19[2];
            v255 = v19[3];
            v256 = v250 + (float)(v247 * v249);
            v257 = v253 + (float)(v247 * v252);
            v258 = (float)(v244 + (float)(v254 * v248)) + (float)(v255 * v249);
            v259 = (float)(v245 + (float)(v254 * v251)) + (float)(v255 * v252);
            v260 = v18[4];
            v261 = v18[5];
            v262 = v16[4];
            v263 = v16[5];
            v264 = v256 + (float)(v260 * v262);
            v265 = v17[4];
            v266 = v17[5];
            v267 = v257 + (float)(v260 * v265);
            v268 = v19[4];
            v269 = v19[5];
            v270 = v264 + (float)(v261 * v263);
            v271 = v267 + (float)(v261 * v266);
            v272 = (float)(v258 + (float)(v268 * v262)) + (float)(v269 * v263);
            v273 = (float)(v259 + (float)(v268 * v265)) + (float)(v269 * v266);
            v274 = v18[6];
            v275 = v18[7];
            v276 = v16[6];
            v277 = v16[7];
            v278 = v270 + (float)(v274 * v276);
            v279 = v17[6];
            v280 = v17[7];
            v281 = v271 + (float)(v274 * v279);
            v282 = v19[6];
            v283 = v19[7];
            v284 = v278 + (float)(v275 * v277);
            v285 = v281 + (float)(v275 * v280);
            v286 = (float)(v272 + (float)(v282 * v276)) + (float)(v283 * v277);
            v287 = (float)(v273 + (float)(v282 * v279)) + (float)(v283 * v280);
            v288 = v18[8];
            v289 = v18[9];
            v290 = v16[8];
            v291 = v16[9];
            v292 = v284 + (float)(v288 * v290);
            v293 = v17[8];
            v294 = v17[9];
            v295 = v285 + (float)(v288 * v293);
            v296 = v19[8];
            v297 = v19[9];
            v298 = v292 + (float)(v289 * v291);
            v299 = v295 + (float)(v289 * v294);
            v300 = (float)(v286 + (float)(v296 * v290)) + (float)(v297 * v291);
            v301 = (float)(v287 + (float)(v296 * v293)) + (float)(v297 * v294);
            v302 = v18[10];
            v303 = v18[11];
            v304 = v16[10];
            v305 = v16[11];
            v306 = v298 + (float)(v302 * v304);
            v307 = v17[10];
            v308 = v17[11];
            v309 = v299 + (float)(v302 * v307);
            v310 = v19[10];
            v311 = v19[11];
            v312 = v306 + (float)(v303 * v305);
            v313 = v309 + (float)(v303 * v308);
            v314 = (float)(v300 + (float)(v310 * v304)) + (float)(v311 * v305);
            v315 = (float)(v301 + (float)(v310 * v307)) + (float)(v311 * v308);
            v316 = v18[12];
            v317 = v18[13];
            v318 = v16[12];
            v319 = v16[13];
            v320 = v312 + (float)(v316 * v318);
            v321 = v17[12];
            v322 = v17[13];
            v323 = v313 + (float)(v316 * v321);
            v324 = v19[12];
            v325 = v19[13];
            v326 = v320 + (float)(v317 * v319);
            v327 = v323 + (float)(v317 * v322);
            v328 = (float)(v314 + (float)(v324 * v318)) + (float)(v325 * v319);
            v329 = (float)(v315 + (float)(v324 * v321)) + (float)(v325 * v322);
            v330 = v18[14];
            v331 = v18[15];
            v332 = v16[14];
            v333 = v16[15];
            v334 = v326 + (float)(v330 * v332);
            v335 = v17[14];
            v336 = v17[15];
            v337 = v327 + (float)(v330 * v335);
            v338 = v19[14];
            v339 = v19[15];
            v25 = v334 + (float)(v331 * v333);
            v24 = v337 + (float)(v331 * v336);
            v23 = (float)(v328 + (float)(v338 * v332)) + (float)(v339 * v333);
            v237 -= 16;
            v18 += 16;
            v21 = (float)(v329 + (float)(v338 * v335)) + (float)(v339 * v336);
            v16 += 16;
            v17 += 16;
            v19 += 16;
          }
          while (v237 > 0x1F);
        }
        v340 = v15 - (double)(int)v15;
        v341 = v25 + v340 * (float)(v24 - v25);
        *a2 = v341;
        a2 += v14;
        *(float *)&v340 = v23 + v340 * (float)(v21 - v23);
        *a3 = LODWORD(v340);
        a3 += v14;
        v8 = v9 + v8;
        ++v11;
      }
      while (v11 != a4);
    }
  }
  else if (a4 >= 1)
  {
    v342 = 0;
    v343 = *v5;
    v344 = a5;
    do
    {
      v345 = (v8 - (double)(int)v8) * v10;
      v346 = (float *)(v343 + 4 * v6 * (int)v345);
      v347 = &v346[v6];
      v348 = (float *)(v7 + 4 * (int)v8);
      if (v6 < 32)
      {
        v352 = 0.0;
        v350 = 0.0;
        v351 = v6;
      }
      else
      {
        v349 = 0;
        v350 = 0.0;
        v351 = v6;
        v352 = 0.0;
        do
        {
          v353 = v348[v349];
          v354 = v348[v349 + 1];
          v355 = (float)(v352 + (float)(v353 * v346[v349])) + (float)(v354 * v346[v349 + 1]);
          v356 = (float)(v350 + (float)(v353 * v347[v349])) + (float)(v354 * v347[v349 + 1]);
          v357 = v348[v349 + 2];
          v358 = v348[v349 + 3];
          v359 = (float)(v355 + (float)(v357 * v346[v349 + 2])) + (float)(v358 * v346[v349 + 3]);
          v360 = (float)(v356 + (float)(v357 * v347[v349 + 2])) + (float)(v358 * v347[v349 + 3]);
          v361 = v348[v349 + 4];
          v362 = v348[v349 + 5];
          v363 = (float)(v359 + (float)(v361 * v346[v349 + 4])) + (float)(v362 * v346[v349 + 5]);
          v364 = (float)(v360 + (float)(v361 * v347[v349 + 4])) + (float)(v362 * v347[v349 + 5]);
          v365 = v348[v349 + 6];
          v366 = v348[v349 + 7];
          v367 = (float)(v363 + (float)(v365 * v346[v349 + 6])) + (float)(v366 * v346[v349 + 7]);
          v368 = (float)(v364 + (float)(v365 * v347[v349 + 6])) + (float)(v366 * v347[v349 + 7]);
          v369 = v348[v349 + 8];
          v370 = v348[v349 + 9];
          v371 = (float)(v367 + (float)(v369 * v346[v349 + 8])) + (float)(v370 * v346[v349 + 9]);
          v372 = (float)(v368 + (float)(v369 * v347[v349 + 8])) + (float)(v370 * v347[v349 + 9]);
          v373 = v348[v349 + 10];
          v374 = v348[v349 + 11];
          v375 = (float)(v371 + (float)(v373 * v346[v349 + 10])) + (float)(v374 * v346[v349 + 11]);
          v376 = (float)(v372 + (float)(v373 * v347[v349 + 10])) + (float)(v374 * v347[v349 + 11]);
          v377 = v348[v349 + 12];
          v378 = v348[v349 + 13];
          v379 = (float)(v375 + (float)(v377 * v346[v349 + 12])) + (float)(v378 * v346[v349 + 13]);
          v380 = (float)(v376 + (float)(v377 * v347[v349 + 12])) + (float)(v378 * v347[v349 + 13]);
          v381 = v348[v349 + 14];
          v382 = v348[v349 + 15];
          v383 = (float)(v379 + (float)(v381 * v346[v349 + 14])) + (float)(v382 * v346[v349 + 15]);
          v384 = (float)(v380 + (float)(v381 * v347[v349 + 14])) + (float)(v382 * v347[v349 + 15]);
          v385 = v348[v349 + 16];
          v386 = v348[v349 + 17];
          v387 = (float)(v383 + (float)(v385 * v346[v349 + 16])) + (float)(v386 * v346[v349 + 17]);
          v388 = (float)(v384 + (float)(v385 * v347[v349 + 16])) + (float)(v386 * v347[v349 + 17]);
          v389 = v348[v349 + 18];
          v390 = v348[v349 + 19];
          v391 = (float)(v387 + (float)(v389 * v346[v349 + 18])) + (float)(v390 * v346[v349 + 19]);
          v392 = (float)(v388 + (float)(v389 * v347[v349 + 18])) + (float)(v390 * v347[v349 + 19]);
          v393 = v348[v349 + 20];
          v394 = v348[v349 + 21];
          v395 = (float)(v391 + (float)(v393 * v346[v349 + 20])) + (float)(v394 * v346[v349 + 21]);
          v396 = (float)(v392 + (float)(v393 * v347[v349 + 20])) + (float)(v394 * v347[v349 + 21]);
          v397 = v348[v349 + 22];
          v398 = v348[v349 + 23];
          v399 = (float)(v395 + (float)(v397 * v346[v349 + 22])) + (float)(v398 * v346[v349 + 23]);
          v400 = (float)(v396 + (float)(v397 * v347[v349 + 22])) + (float)(v398 * v347[v349 + 23]);
          v401 = v348[v349 + 24];
          v402 = v348[v349 + 25];
          v403 = (float)(v399 + (float)(v401 * v346[v349 + 24])) + (float)(v402 * v346[v349 + 25]);
          v404 = (float)(v400 + (float)(v401 * v347[v349 + 24])) + (float)(v402 * v347[v349 + 25]);
          v405 = v348[v349 + 26];
          v406 = v348[v349 + 27];
          v407 = (float)(v403 + (float)(v405 * v346[v349 + 26])) + (float)(v406 * v346[v349 + 27]);
          v408 = (float)(v404 + (float)(v405 * v347[v349 + 26])) + (float)(v406 * v347[v349 + 27]);
          v409 = v348[v349 + 28];
          v410 = v348[v349 + 29];
          v411 = (float)(v407 + (float)(v409 * v346[v349 + 28])) + (float)(v410 * v346[v349 + 29]);
          v412 = (float)(v408 + (float)(v409 * v347[v349 + 28])) + (float)(v410 * v347[v349 + 29]);
          v413 = v348[v349 + 30];
          v414 = v348[v349 + 31];
          v352 = (float)(v411 + (float)(v413 * v346[v349 + 30])) + (float)(v414 * v346[v349 + 31]);
          v415 = v351;
          v350 = (float)(v412 + (float)(v413 * v347[v349 + 30])) + (float)(v414 * v347[v349 + 31]);
          v351 -= 32;
          v349 += 32;
        }
        while (v415 > 0x3F);
        v348 = (float *)((char *)v348 + v349 * 4);
        v347 = (float *)((char *)v347 + v349 * 4);
        v346 = (float *)((char *)v346 + v349 * 4);
      }
      if (v351 >= 16)
      {
        v416 = v351 + 16;
        do
        {
          v417 = v348[1];
          v418 = (float)(v352 + (float)(*v348 * *v346)) + (float)(v417 * v346[1]);
          v419 = (float)(v350 + (float)(*v348 * *v347)) + (float)(v417 * v347[1]);
          v420 = v348[2];
          v421 = v348[3];
          v422 = (float)(v418 + (float)(v420 * v346[2])) + (float)(v421 * v346[3]);
          v423 = (float)(v419 + (float)(v420 * v347[2])) + (float)(v421 * v347[3]);
          v424 = v348[4];
          v425 = v348[5];
          v426 = (float)(v422 + (float)(v424 * v346[4])) + (float)(v425 * v346[5]);
          v427 = (float)(v423 + (float)(v424 * v347[4])) + (float)(v425 * v347[5]);
          v428 = v348[6];
          v429 = v348[7];
          v430 = (float)(v426 + (float)(v428 * v346[6])) + (float)(v429 * v346[7]);
          v431 = (float)(v427 + (float)(v428 * v347[6])) + (float)(v429 * v347[7]);
          v432 = v348[8];
          v433 = v348[9];
          v434 = (float)(v430 + (float)(v432 * v346[8])) + (float)(v433 * v346[9]);
          v435 = (float)(v431 + (float)(v432 * v347[8])) + (float)(v433 * v347[9]);
          v436 = v348[10];
          v437 = v348[11];
          v438 = (float)(v434 + (float)(v436 * v346[10])) + (float)(v437 * v346[11]);
          v439 = (float)(v435 + (float)(v436 * v347[10])) + (float)(v437 * v347[11]);
          v440 = v348[12];
          v441 = v348[13];
          v442 = (float)(v438 + (float)(v440 * v346[12])) + (float)(v441 * v346[13]);
          v443 = (float)(v439 + (float)(v440 * v347[12])) + (float)(v441 * v347[13]);
          v444 = v348[14];
          v445 = v348[15];
          v352 = (float)(v442 + (float)(v444 * v346[14])) + (float)(v445 * v346[15]);
          v416 -= 16;
          v350 = (float)(v443 + (float)(v444 * v347[14])) + (float)(v445 * v347[15]);
          v348 += 16;
          v346 += 16;
          v347 += 16;
        }
        while (v416 > 0x1F);
      }
      v446 = v345 - (double)(int)v345;
      *a2 = v352 + (float)(v446 * (float)(v350 - v352));
      a2 += v344;
      v8 = v9 + v8;
      ++v342;
    }
    while (v342 != a4);
  }
  *(double *)(result + 152) = v8;
  return result;
}

float *Resampler2::ConvertScalar<Resampler2::RampedRate>(float *this, float *a2, _DWORD *a3, int a4, int a5)
{
  _DWORD *v6;
  uint64_t v8;
  float64x2_t v9;
  float64x2_t v10;
  uint64_t v11;
  int v12;
  double v13;
  double v14;
  double v15;
  float64x2_t v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  float *v30;
  float *v31;
  float *v32;
  float *v33;
  uint64_t v34;
  float v35;
  int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  unsigned int v250;
  unsigned int v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float v310;
  float v311;
  float v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float v321;
  float v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  float v343;
  float v344;
  float v345;
  float v346;
  float v347;
  float v348;
  float v349;
  float v350;
  float v351;
  float v352;
  float v353;
  double v354;
  float v355;
  int v356;
  uint64_t v357;
  double v358;
  double v359;
  double v360;
  double v361;
  double v362;
  double v363;
  float *v364;
  float *v365;
  float *v366;
  uint64_t v367;
  float v368;
  int v369;
  float v370;
  float v371;
  float v372;
  float v373;
  float v374;
  float v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float v380;
  float v381;
  float v382;
  float v383;
  float v384;
  float v385;
  float v386;
  float v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  float v394;
  float v395;
  float v396;
  float v397;
  float v398;
  float v399;
  float v400;
  float v401;
  float v402;
  float v403;
  float v404;
  float v405;
  float v406;
  float v407;
  float v408;
  float v409;
  float v410;
  float v411;
  float v412;
  float v413;
  float v414;
  float v415;
  float v416;
  float v417;
  float v418;
  float v419;
  float v420;
  float v421;
  float v422;
  float v423;
  float v424;
  float v425;
  float v426;
  float v427;
  float v428;
  float v429;
  float v430;
  float v431;
  float v432;
  unsigned int v433;
  unsigned int v434;
  float v435;
  float v436;
  float v437;
  float v438;
  float v439;
  float v440;
  float v441;
  float v442;
  float v443;
  float v444;
  float v445;
  float v446;
  float v447;
  float v448;
  float v449;
  float v450;
  float v451;
  float v452;
  float v453;
  float v454;
  float v455;
  float v456;
  float v457;
  float v458;
  float v459;
  float v460;
  float v461;
  float v462;
  float v463;
  float v464;
  float64x2_t v465;
  double v466;
  double v467;

  v6 = a3;
  v8 = (uint64_t)this;
  v9 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(-*((double *)this + 16)), 0);
  v10 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(-*((double *)this + 33)), 0);
  v11 = *((_QWORD *)this + 6);
  if (*((_DWORD *)this + 27) == 1818848869)
    v12 = 2;
  else
    v12 = *(_DWORD *)(v11 + 12);
  v13 = *((double *)this + 25);
  v14 = *((double *)this + 26);
  v15 = *((double *)this + 31);
  v465 = vaddq_f64(*(float64x2_t *)(this + 54), v9);
  v16 = vaddq_f64(*(float64x2_t *)(this + 58), v10);
  v17 = (double)*((int *)this + 16);
  v18 = *((_QWORD *)this + 9);
  v19 = *((double *)this + 19);
  v20 = (double)*(int *)(v11 + 16);
  if (a3)
  {
    if (a4 >= 1)
    {
      v21 = 0;
      v22 = *((_QWORD *)this + 10);
      v23 = a5;
      v24 = v16.f64[1];
      v25 = 0.0;
      v466 = v16.f64[0];
      do
      {
        if (v24 <= (double)(int)v25)
          v26 = v14;
        else
          v26 = v13 + v15 * ((double)(int)v25 - v16.f64[0]);
        *(double *)(v8 + 160) = v26;
        this = (float *)Resampler2::SetVarispeedSinc(v8, v26);
        if (v24 <= v25)
        {
          v28 = (v25 - v24) * v14;
          v27 = v465.f64[1];
        }
        else
        {
          v27 = (v25 - v466) * (v13 + v15 * 0.5 * (v25 - v466));
          v28 = v465.f64[0];
        }
        v16.f64[0] = v466;
        v19 = fmax(v28 + v27, 0.0);
        if (v19 >= v17)
          v19 = v17;
        v29 = (v19 - (double)(int)v19) * v20;
        v30 = (float *)(**(_QWORD **)(v8 + 48) + 4 * v12 * (int)v29);
        v31 = &v30[v12];
        v32 = (float *)(v18 + 4 * (int)v19);
        v33 = (float *)(v22 + 4 * (int)v19);
        if (v12 < 32)
        {
          v39 = 0.0;
          v38 = 0.0;
          v37 = 0.0;
          v36 = v12;
          v35 = 0.0;
        }
        else
        {
          v34 = 0;
          v35 = 0.0;
          v36 = v12;
          v37 = 0.0;
          v38 = 0.0;
          v39 = 0.0;
          do
          {
            this = &v30[v34];
            v40 = v32[v34];
            v41 = v32[v34 + 1];
            v42 = v30[v34];
            v43 = v30[v34 + 1];
            v44 = v39 + (float)(v40 * v42);
            v45 = v31[v34];
            v46 = v31[v34 + 1];
            v47 = v38 + (float)(v40 * v45);
            v48 = v33[v34];
            v49 = v33[v34 + 1];
            v50 = v44 + (float)(v41 * v43);
            v51 = v47 + (float)(v41 * v46);
            v52 = (float)(v37 + (float)(v48 * v42)) + (float)(v49 * v43);
            v53 = (float)(v35 + (float)(v48 * v45)) + (float)(v49 * v46);
            v54 = v32[v34 + 2];
            v55 = v32[v34 + 3];
            v56 = v30[v34 + 2];
            v57 = v30[v34 + 3];
            v58 = v31[v34 + 2];
            v59 = v31[v34 + 3];
            v60 = v33[v34 + 2];
            v61 = v33[v34 + 3];
            v62 = (float)(v50 + (float)(v54 * v56)) + (float)(v55 * v57);
            v63 = (float)(v51 + (float)(v54 * v58)) + (float)(v55 * v59);
            v64 = (float)(v52 + (float)(v60 * v56)) + (float)(v61 * v57);
            v65 = (float)(v53 + (float)(v60 * v58)) + (float)(v61 * v59);
            v66 = v32[v34 + 4];
            v67 = v32[v34 + 5];
            v68 = v30[v34 + 4];
            v69 = v30[v34 + 5];
            v70 = v31[v34 + 4];
            v71 = v31[v34 + 5];
            v72 = v62 + (float)(v66 * v68);
            v73 = v63 + (float)(v66 * v70);
            v74 = v33[v34 + 4];
            v75 = v33[v34 + 5];
            v76 = v72 + (float)(v67 * v69);
            v77 = v73 + (float)(v67 * v71);
            v78 = (float)(v64 + (float)(v74 * v68)) + (float)(v75 * v69);
            v79 = (float)(v65 + (float)(v74 * v70)) + (float)(v75 * v71);
            v80 = v32[v34 + 6];
            v81 = v32[v34 + 7];
            v82 = v30[v34 + 6];
            v83 = v30[v34 + 7];
            v84 = v76 + (float)(v80 * v82);
            v85 = v31[v34 + 6];
            v86 = v31[v34 + 7];
            v87 = v77 + (float)(v80 * v85);
            v88 = v33[v34 + 6];
            v89 = v33[v34 + 7];
            v90 = v84 + (float)(v81 * v83);
            v91 = v87 + (float)(v81 * v86);
            v92 = (float)(v78 + (float)(v88 * v82)) + (float)(v89 * v83);
            v93 = (float)(v79 + (float)(v88 * v85)) + (float)(v89 * v86);
            v94 = v32[v34 + 8];
            v95 = v32[v34 + 9];
            v96 = v30[v34 + 8];
            v97 = v30[v34 + 9];
            v98 = v31[v34 + 8];
            v99 = v31[v34 + 9];
            v100 = v33[v34 + 8];
            v101 = v33[v34 + 9];
            v102 = (float)(v90 + (float)(v94 * v96)) + (float)(v95 * v97);
            v103 = (float)(v91 + (float)(v94 * v98)) + (float)(v95 * v99);
            v104 = (float)(v92 + (float)(v100 * v96)) + (float)(v101 * v97);
            v105 = (float)(v93 + (float)(v100 * v98)) + (float)(v101 * v99);
            v106 = v32[v34 + 10];
            v107 = v32[v34 + 11];
            v108 = v30[v34 + 10];
            v109 = v30[v34 + 11];
            v110 = v31[v34 + 10];
            v111 = v31[v34 + 11];
            v112 = v102 + (float)(v106 * v108);
            v113 = v103 + (float)(v106 * v110);
            v114 = v33[v34 + 10];
            v115 = v33[v34 + 11];
            v116 = v112 + (float)(v107 * v109);
            v117 = v113 + (float)(v107 * v111);
            v118 = (float)(v104 + (float)(v114 * v108)) + (float)(v115 * v109);
            v119 = (float)(v105 + (float)(v114 * v110)) + (float)(v115 * v111);
            v120 = v32[v34 + 12];
            v121 = v32[v34 + 13];
            v122 = v30[v34 + 12];
            v123 = v30[v34 + 13];
            v124 = v116 + (float)(v120 * v122);
            v125 = v31[v34 + 12];
            v126 = v31[v34 + 13];
            v127 = v117 + (float)(v120 * v125);
            v128 = v33[v34 + 12];
            v129 = v33[v34 + 13];
            v130 = v124 + (float)(v121 * v123);
            v131 = v127 + (float)(v121 * v126);
            v132 = (float)(v118 + (float)(v128 * v122)) + (float)(v129 * v123);
            v133 = (float)(v119 + (float)(v128 * v125)) + (float)(v129 * v126);
            v134 = v32[v34 + 14];
            v135 = v32[v34 + 15];
            v136 = v30[v34 + 14];
            v137 = v30[v34 + 15];
            v138 = v31[v34 + 14];
            v139 = v31[v34 + 15];
            v140 = v33[v34 + 14];
            v141 = v33[v34 + 15];
            v142 = (float)(v130 + (float)(v134 * v136)) + (float)(v135 * v137);
            v143 = (float)(v131 + (float)(v134 * v138)) + (float)(v135 * v139);
            v144 = (float)(v132 + (float)(v140 * v136)) + (float)(v141 * v137);
            v145 = (float)(v133 + (float)(v140 * v138)) + (float)(v141 * v139);
            v146 = v32[v34 + 16];
            v147 = v32[v34 + 17];
            v148 = v30[v34 + 16];
            v149 = v30[v34 + 17];
            v150 = v31[v34 + 16];
            v151 = v31[v34 + 17];
            v152 = v142 + (float)(v146 * v148);
            v153 = v143 + (float)(v146 * v150);
            v154 = v33[v34 + 16];
            v155 = v33[v34 + 17];
            v156 = v152 + (float)(v147 * v149);
            v157 = v153 + (float)(v147 * v151);
            v158 = (float)(v144 + (float)(v154 * v148)) + (float)(v155 * v149);
            v159 = (float)(v145 + (float)(v154 * v150)) + (float)(v155 * v151);
            v160 = v32[v34 + 18];
            v161 = v32[v34 + 19];
            v162 = v30[v34 + 18];
            v163 = v30[v34 + 19];
            v164 = v156 + (float)(v160 * v162);
            v165 = v31[v34 + 18];
            v166 = v31[v34 + 19];
            v167 = v157 + (float)(v160 * v165);
            v168 = v33[v34 + 18];
            v169 = v33[v34 + 19];
            v170 = v164 + (float)(v161 * v163);
            v171 = v167 + (float)(v161 * v166);
            v172 = (float)(v158 + (float)(v168 * v162)) + (float)(v169 * v163);
            v173 = (float)(v159 + (float)(v168 * v165)) + (float)(v169 * v166);
            v174 = v32[v34 + 20];
            v175 = v32[v34 + 21];
            v176 = v30[v34 + 20];
            v177 = v30[v34 + 21];
            v178 = v31[v34 + 20];
            v179 = v31[v34 + 21];
            v180 = v33[v34 + 20];
            v181 = v33[v34 + 21];
            v182 = (float)(v170 + (float)(v174 * v176)) + (float)(v175 * v177);
            v183 = (float)(v171 + (float)(v174 * v178)) + (float)(v175 * v179);
            v184 = (float)(v172 + (float)(v180 * v176)) + (float)(v181 * v177);
            v185 = (float)(v173 + (float)(v180 * v178)) + (float)(v181 * v179);
            v186 = v32[v34 + 22];
            v187 = v32[v34 + 23];
            v188 = v30[v34 + 22];
            v189 = v30[v34 + 23];
            v190 = v31[v34 + 22];
            v191 = v31[v34 + 23];
            v192 = v182 + (float)(v186 * v188);
            v193 = v183 + (float)(v186 * v190);
            v194 = v33[v34 + 22];
            v195 = v33[v34 + 23];
            v196 = v192 + (float)(v187 * v189);
            v197 = v193 + (float)(v187 * v191);
            v198 = (float)(v184 + (float)(v194 * v188)) + (float)(v195 * v189);
            v199 = (float)(v185 + (float)(v194 * v190)) + (float)(v195 * v191);
            v200 = v32[v34 + 24];
            v201 = v32[v34 + 25];
            v202 = v30[v34 + 24];
            v203 = v30[v34 + 25];
            v204 = v196 + (float)(v200 * v202);
            v205 = v31[v34 + 24];
            v206 = v31[v34 + 25];
            v207 = v197 + (float)(v200 * v205);
            v208 = v33[v34 + 24];
            v209 = v33[v34 + 25];
            v210 = v204 + (float)(v201 * v203);
            v211 = v207 + (float)(v201 * v206);
            v212 = (float)(v198 + (float)(v208 * v202)) + (float)(v209 * v203);
            v213 = (float)(v199 + (float)(v208 * v205)) + (float)(v209 * v206);
            v214 = v32[v34 + 26];
            v215 = v32[v34 + 27];
            v216 = v30[v34 + 26];
            v217 = v30[v34 + 27];
            v218 = v31[v34 + 26];
            v219 = v31[v34 + 27];
            v220 = v33[v34 + 26];
            v221 = v33[v34 + 27];
            v222 = (float)(v210 + (float)(v214 * v216)) + (float)(v215 * v217);
            v223 = (float)(v211 + (float)(v214 * v218)) + (float)(v215 * v219);
            v224 = (float)(v212 + (float)(v220 * v216)) + (float)(v221 * v217);
            v225 = (float)(v213 + (float)(v220 * v218)) + (float)(v221 * v219);
            v226 = v32[v34 + 28];
            v227 = v32[v34 + 29];
            v228 = v30[v34 + 28];
            v229 = v30[v34 + 29];
            v230 = v31[v34 + 28];
            v231 = v31[v34 + 29];
            v232 = v222 + (float)(v226 * v228);
            v233 = v223 + (float)(v226 * v230);
            v234 = v33[v34 + 28];
            v235 = v33[v34 + 29];
            v236 = v232 + (float)(v227 * v229);
            v237 = v233 + (float)(v227 * v231);
            v238 = (float)(v224 + (float)(v234 * v228)) + (float)(v235 * v229);
            v239 = (float)(v225 + (float)(v234 * v230)) + (float)(v235 * v231);
            v240 = v32[v34 + 30];
            v241 = v32[v34 + 31];
            v242 = v30[v34 + 30];
            v243 = v30[v34 + 31];
            v244 = v236 + (float)(v240 * v242);
            v245 = v31[v34 + 30];
            v246 = v31[v34 + 31];
            v247 = v237 + (float)(v240 * v245);
            v248 = v33[v34 + 30];
            v249 = v33[v34 + 31];
            v39 = v244 + (float)(v241 * v243);
            v38 = v247 + (float)(v241 * v246);
            v250 = v36;
            v37 = (float)(v238 + (float)(v248 * v242)) + (float)(v249 * v243);
            v35 = (float)(v239 + (float)(v248 * v245)) + (float)(v249 * v246);
            v36 -= 32;
            v34 += 32;
          }
          while (v250 > 0x3F);
          v33 = (float *)((char *)v33 + v34 * 4);
          v32 = (float *)((char *)v32 + v34 * 4);
          v31 = (float *)((char *)v31 + v34 * 4);
          v30 = (float *)((char *)v30 + v34 * 4);
        }
        if (v36 >= 16)
        {
          v251 = v36 + 16;
          do
          {
            v252 = v32[1];
            v253 = v30[1];
            v254 = v31[1];
            v255 = v33[1];
            v256 = (float)(v39 + (float)(*v32 * *v30)) + (float)(v252 * v253);
            v257 = (float)(v38 + (float)(*v32 * *v31)) + (float)(v252 * v254);
            v258 = (float)(v37 + (float)(*v33 * *v30)) + (float)(v255 * v253);
            v259 = (float)(v35 + (float)(*v33 * *v31)) + (float)(v255 * v254);
            v260 = v32[2];
            v261 = v32[3];
            v262 = v30[2];
            v263 = v30[3];
            v264 = v256 + (float)(v260 * v262);
            v265 = v31[2];
            v266 = v31[3];
            v267 = v257 + (float)(v260 * v265);
            v268 = v33[2];
            v269 = v33[3];
            v270 = v264 + (float)(v261 * v263);
            v271 = v267 + (float)(v261 * v266);
            v272 = (float)(v258 + (float)(v268 * v262)) + (float)(v269 * v263);
            v273 = (float)(v259 + (float)(v268 * v265)) + (float)(v269 * v266);
            v274 = v32[4];
            v275 = v32[5];
            v276 = v30[4];
            v277 = v30[5];
            v278 = v270 + (float)(v274 * v276);
            v279 = v31[4];
            v280 = v31[5];
            v281 = v271 + (float)(v274 * v279);
            v282 = v33[4];
            v283 = v33[5];
            v284 = v278 + (float)(v275 * v277);
            v285 = v281 + (float)(v275 * v280);
            v286 = (float)(v272 + (float)(v282 * v276)) + (float)(v283 * v277);
            v287 = (float)(v273 + (float)(v282 * v279)) + (float)(v283 * v280);
            v288 = v32[6];
            v289 = v32[7];
            v290 = v30[6];
            v291 = v30[7];
            v292 = v284 + (float)(v288 * v290);
            v293 = v31[6];
            v294 = v31[7];
            v295 = v285 + (float)(v288 * v293);
            v296 = v33[6];
            v297 = v33[7];
            v298 = v292 + (float)(v289 * v291);
            v299 = v295 + (float)(v289 * v294);
            v300 = (float)(v286 + (float)(v296 * v290)) + (float)(v297 * v291);
            v301 = (float)(v287 + (float)(v296 * v293)) + (float)(v297 * v294);
            v302 = v32[8];
            v303 = v32[9];
            v304 = v30[8];
            v305 = v30[9];
            v306 = v298 + (float)(v302 * v304);
            v307 = v31[8];
            v308 = v31[9];
            v309 = v299 + (float)(v302 * v307);
            v310 = v33[8];
            v311 = v33[9];
            v312 = v306 + (float)(v303 * v305);
            v313 = v309 + (float)(v303 * v308);
            v314 = (float)(v300 + (float)(v310 * v304)) + (float)(v311 * v305);
            v315 = (float)(v301 + (float)(v310 * v307)) + (float)(v311 * v308);
            v316 = v32[10];
            v317 = v32[11];
            v318 = v30[10];
            v319 = v30[11];
            v320 = v312 + (float)(v316 * v318);
            v321 = v31[10];
            v322 = v31[11];
            v323 = v313 + (float)(v316 * v321);
            v324 = v33[10];
            v325 = v33[11];
            v326 = v320 + (float)(v317 * v319);
            v327 = v323 + (float)(v317 * v322);
            v328 = (float)(v314 + (float)(v324 * v318)) + (float)(v325 * v319);
            v329 = (float)(v315 + (float)(v324 * v321)) + (float)(v325 * v322);
            v330 = v32[12];
            v331 = v32[13];
            v332 = v30[12];
            v333 = v30[13];
            v334 = v326 + (float)(v330 * v332);
            v335 = v31[12];
            v336 = v31[13];
            v337 = v327 + (float)(v330 * v335);
            v338 = v33[12];
            v339 = v33[13];
            v340 = v334 + (float)(v331 * v333);
            v341 = v337 + (float)(v331 * v336);
            v342 = (float)(v328 + (float)(v338 * v332)) + (float)(v339 * v333);
            v343 = (float)(v329 + (float)(v338 * v335)) + (float)(v339 * v336);
            v344 = v32[14];
            v345 = v32[15];
            v346 = v30[14];
            v347 = v30[15];
            v348 = v340 + (float)(v344 * v346);
            v349 = v31[14];
            v350 = v31[15];
            v351 = v341 + (float)(v344 * v349);
            v352 = v33[14];
            v353 = v33[15];
            v39 = v348 + (float)(v345 * v347);
            v38 = v351 + (float)(v345 * v350);
            v37 = (float)(v342 + (float)(v352 * v346)) + (float)(v353 * v347);
            v251 -= 16;
            v32 += 16;
            v35 = (float)(v343 + (float)(v352 * v349)) + (float)(v353 * v350);
            v30 += 16;
            v31 += 16;
            v33 += 16;
          }
          while (v251 > 0x1F);
        }
        v354 = v29 - (double)(int)v29;
        v355 = v39 + v354 * (float)(v38 - v39);
        *a2 = v355;
        a2 += v23;
        *(float *)&v354 = v37 + v354 * (float)(v35 - v37);
        *v6 = LODWORD(v354);
        v6 += v23;
        ++v21;
        v25 = v25 + 1.0;
      }
      while (v21 != a4);
    }
  }
  else if (a4 >= 1)
  {
    v356 = 0;
    v357 = a5;
    v358 = v16.f64[1];
    v359 = 0.0;
    v467 = v16.f64[0];
    do
    {
      if (v358 <= (double)(int)v359)
        v360 = v14;
      else
        v360 = v13 + v15 * ((double)(int)v359 - v16.f64[0]);
      *(double *)(v8 + 160) = v360;
      this = (float *)Resampler2::SetVarispeedSinc(v8, v360);
      if (v358 <= v359)
      {
        v362 = (v359 - v358) * v14;
        v361 = v465.f64[1];
      }
      else
      {
        v361 = (v359 - v467) * (v13 + v15 * 0.5 * (v359 - v467));
        v362 = v465.f64[0];
      }
      v16.f64[0] = v467;
      v19 = fmax(v362 + v361, 0.0);
      if (v19 >= v17)
        v19 = v17;
      v363 = (v19 - (double)(int)v19) * v20;
      v364 = (float *)(**(_QWORD **)(v8 + 48) + 4 * v12 * (int)v363);
      v365 = &v364[v12];
      v366 = (float *)(v18 + 4 * (int)v19);
      if (v12 < 32)
      {
        v370 = 0.0;
        v368 = 0.0;
        v369 = v12;
      }
      else
      {
        v367 = 0;
        v368 = 0.0;
        v369 = v12;
        v370 = 0.0;
        do
        {
          v371 = v366[v367];
          v372 = v366[v367 + 1];
          v373 = (float)(v370 + (float)(v371 * v364[v367])) + (float)(v372 * v364[v367 + 1]);
          v374 = (float)(v368 + (float)(v371 * v365[v367])) + (float)(v372 * v365[v367 + 1]);
          v375 = v366[v367 + 2];
          v376 = v366[v367 + 3];
          v377 = (float)(v373 + (float)(v375 * v364[v367 + 2])) + (float)(v376 * v364[v367 + 3]);
          v378 = (float)(v374 + (float)(v375 * v365[v367 + 2])) + (float)(v376 * v365[v367 + 3]);
          v379 = v366[v367 + 4];
          v380 = v366[v367 + 5];
          v381 = (float)(v377 + (float)(v379 * v364[v367 + 4])) + (float)(v380 * v364[v367 + 5]);
          v382 = (float)(v378 + (float)(v379 * v365[v367 + 4])) + (float)(v380 * v365[v367 + 5]);
          v383 = v366[v367 + 6];
          v384 = v366[v367 + 7];
          v385 = (float)(v381 + (float)(v383 * v364[v367 + 6])) + (float)(v384 * v364[v367 + 7]);
          v386 = (float)(v382 + (float)(v383 * v365[v367 + 6])) + (float)(v384 * v365[v367 + 7]);
          v387 = v366[v367 + 8];
          v388 = v366[v367 + 9];
          v389 = (float)(v385 + (float)(v387 * v364[v367 + 8])) + (float)(v388 * v364[v367 + 9]);
          v390 = (float)(v386 + (float)(v387 * v365[v367 + 8])) + (float)(v388 * v365[v367 + 9]);
          v391 = v366[v367 + 10];
          v392 = v366[v367 + 11];
          v393 = (float)(v389 + (float)(v391 * v364[v367 + 10])) + (float)(v392 * v364[v367 + 11]);
          v394 = (float)(v390 + (float)(v391 * v365[v367 + 10])) + (float)(v392 * v365[v367 + 11]);
          v395 = v366[v367 + 12];
          v396 = v366[v367 + 13];
          v397 = (float)(v393 + (float)(v395 * v364[v367 + 12])) + (float)(v396 * v364[v367 + 13]);
          v398 = (float)(v394 + (float)(v395 * v365[v367 + 12])) + (float)(v396 * v365[v367 + 13]);
          v399 = v366[v367 + 14];
          v400 = v366[v367 + 15];
          v401 = (float)(v397 + (float)(v399 * v364[v367 + 14])) + (float)(v400 * v364[v367 + 15]);
          v402 = (float)(v398 + (float)(v399 * v365[v367 + 14])) + (float)(v400 * v365[v367 + 15]);
          v403 = v366[v367 + 16];
          v404 = v366[v367 + 17];
          v405 = (float)(v401 + (float)(v403 * v364[v367 + 16])) + (float)(v404 * v364[v367 + 17]);
          v406 = (float)(v402 + (float)(v403 * v365[v367 + 16])) + (float)(v404 * v365[v367 + 17]);
          v407 = v366[v367 + 18];
          v408 = v366[v367 + 19];
          v409 = (float)(v405 + (float)(v407 * v364[v367 + 18])) + (float)(v408 * v364[v367 + 19]);
          v410 = (float)(v406 + (float)(v407 * v365[v367 + 18])) + (float)(v408 * v365[v367 + 19]);
          v411 = v366[v367 + 20];
          v412 = v366[v367 + 21];
          v413 = (float)(v409 + (float)(v411 * v364[v367 + 20])) + (float)(v412 * v364[v367 + 21]);
          v414 = (float)(v410 + (float)(v411 * v365[v367 + 20])) + (float)(v412 * v365[v367 + 21]);
          v415 = v366[v367 + 22];
          v416 = v366[v367 + 23];
          v417 = (float)(v413 + (float)(v415 * v364[v367 + 22])) + (float)(v416 * v364[v367 + 23]);
          v418 = (float)(v414 + (float)(v415 * v365[v367 + 22])) + (float)(v416 * v365[v367 + 23]);
          v419 = v366[v367 + 24];
          v420 = v366[v367 + 25];
          v421 = (float)(v417 + (float)(v419 * v364[v367 + 24])) + (float)(v420 * v364[v367 + 25]);
          v422 = (float)(v418 + (float)(v419 * v365[v367 + 24])) + (float)(v420 * v365[v367 + 25]);
          v423 = v366[v367 + 26];
          v424 = v366[v367 + 27];
          v425 = (float)(v421 + (float)(v423 * v364[v367 + 26])) + (float)(v424 * v364[v367 + 27]);
          v426 = (float)(v422 + (float)(v423 * v365[v367 + 26])) + (float)(v424 * v365[v367 + 27]);
          v427 = v366[v367 + 28];
          v428 = v366[v367 + 29];
          v429 = (float)(v425 + (float)(v427 * v364[v367 + 28])) + (float)(v428 * v364[v367 + 29]);
          v430 = (float)(v426 + (float)(v427 * v365[v367 + 28])) + (float)(v428 * v365[v367 + 29]);
          v431 = v366[v367 + 30];
          v432 = v366[v367 + 31];
          v370 = (float)(v429 + (float)(v431 * v364[v367 + 30])) + (float)(v432 * v364[v367 + 31]);
          v433 = v369;
          v368 = (float)(v430 + (float)(v431 * v365[v367 + 30])) + (float)(v432 * v365[v367 + 31]);
          v369 -= 32;
          v367 += 32;
        }
        while (v433 > 0x3F);
        v366 = (float *)((char *)v366 + v367 * 4);
        v365 = (float *)((char *)v365 + v367 * 4);
        v364 = (float *)((char *)v364 + v367 * 4);
      }
      if (v369 >= 16)
      {
        v434 = v369 + 16;
        do
        {
          v435 = v366[1];
          v436 = (float)(v370 + (float)(*v366 * *v364)) + (float)(v435 * v364[1]);
          v437 = (float)(v368 + (float)(*v366 * *v365)) + (float)(v435 * v365[1]);
          v438 = v366[2];
          v439 = v366[3];
          v440 = (float)(v436 + (float)(v438 * v364[2])) + (float)(v439 * v364[3]);
          v441 = (float)(v437 + (float)(v438 * v365[2])) + (float)(v439 * v365[3]);
          v442 = v366[4];
          v443 = v366[5];
          v444 = (float)(v440 + (float)(v442 * v364[4])) + (float)(v443 * v364[5]);
          v445 = (float)(v441 + (float)(v442 * v365[4])) + (float)(v443 * v365[5]);
          v446 = v366[6];
          v447 = v366[7];
          v448 = (float)(v444 + (float)(v446 * v364[6])) + (float)(v447 * v364[7]);
          v449 = (float)(v445 + (float)(v446 * v365[6])) + (float)(v447 * v365[7]);
          v450 = v366[8];
          v451 = v366[9];
          v452 = (float)(v448 + (float)(v450 * v364[8])) + (float)(v451 * v364[9]);
          v453 = (float)(v449 + (float)(v450 * v365[8])) + (float)(v451 * v365[9]);
          v454 = v366[10];
          v455 = v366[11];
          v456 = (float)(v452 + (float)(v454 * v364[10])) + (float)(v455 * v364[11]);
          v457 = (float)(v453 + (float)(v454 * v365[10])) + (float)(v455 * v365[11]);
          v458 = v366[12];
          v459 = v366[13];
          v460 = (float)(v456 + (float)(v458 * v364[12])) + (float)(v459 * v364[13]);
          v461 = (float)(v457 + (float)(v458 * v365[12])) + (float)(v459 * v365[13]);
          v462 = v366[14];
          v463 = v366[15];
          v370 = (float)(v460 + (float)(v462 * v364[14])) + (float)(v463 * v364[15]);
          v434 -= 16;
          v368 = (float)(v461 + (float)(v462 * v365[14])) + (float)(v463 * v365[15]);
          v366 += 16;
          v364 += 16;
          v365 += 16;
        }
        while (v434 > 0x1F);
      }
      v464 = v363 - (double)(int)v363;
      *a2 = v370 + (float)(v464 * (float)(v368 - v370));
      a2 += v357;
      ++v356;
      v359 = v359 + 1.0;
    }
    while (v356 != a4);
  }
  *(double *)(v8 + 152) = v19;
  return this;
}

uint64_t Resampler2::ConvertLinear(uint64_t this, float *a2, float *a3, int a4, unsigned int a5)
{
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;

  v5 = *(double *)(this + 152);
  v6 = *(double *)(this + 160);
  v7 = *(_QWORD *)(this + 72) + 4 * (int)v5;
  if (a3)
  {
    if (a4)
    {
      v8 = 0;
      v9 = *(_QWORD *)(this + 80) + 4 * (int)v5;
      do
      {
        v10 = *(float *)(v7 + 4 * (int)v5);
        v11 = *(float *)(v9 + 4 * (int)v5);
        v12 = 4 * (int)v5 + 4;
        v13 = *(float *)(v9 + v12);
        v14 = v5 - (double)(int)v5;
        a2[v8] = v10 + (float)(v14 * (float)(*(float *)(v7 + v12) - v10));
        a3[v8] = v11 + (float)(v14 * (float)(v13 - v11));
        v5 = v6 + v5;
        v8 += a5;
        --a4;
      }
      while (a4);
    }
  }
  else
  {
    for (; a4; --a4)
    {
      v15 = v5 - (double)(int)v5;
      *a2 = *(float *)(v7 + 4 * (int)v5)
          + (float)(v15 * (float)(*(float *)(v7 + 4 * (int)v5 + 4) - *(float *)(v7 + 4 * (int)v5)));
      v5 = v6 + v5;
      a2 += a5;
    }
  }
  *(double *)(this + 128) = *(double *)(this + 128) + (double)(int)v5;
  *(double *)(this + 152) = v5;
  return this;
}

double Resampler2::ConvertSIMD_SmallIntegerRatio(Resampler2 *this, float *a2, float *a3, int a4, int a5)
{
  float *v8;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  float32x4_t *v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float32x4_t *v44;
  float32x4_t *v45;
  float32x4_t *v46;
  float32x4_t *v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float64x2_t v52;
  float64x2_t v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  float32x4_t *v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float32x4_t *v67;
  float32x4_t *v68;
  float32x4_t *v69;
  float32x4_t v70;
  float32x4_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  double result;
  uint8_t buf[4];
  const char *v77;
  __int16 v78;
  int v79;
  __int16 v80;
  const char *v81;
  __int16 v82;
  int v83;
  __int16 v84;
  unsigned int v85;
  __int16 v86;
  unsigned int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  unsigned int v91;
  __int16 v92;
  unsigned int v93;
  uint64_t v94;

  v8 = a2;
  v94 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)this + 6);
  v11 = *((_DWORD *)this + 27);
  if (v11 == 1818848869)
  {
    v12 = 2;
    if (!a4)
      goto LABEL_38;
  }
  else
  {
    v12 = *(_DWORD *)(v10 + 12);
    if (!a4)
      goto LABEL_38;
  }
  v13 = *(_DWORD *)(v10 + 16);
  v15 = *((_DWORD *)this + 24);
  v14 = *((_DWORD *)this + 25);
  v16 = *((_DWORD *)this + 17) * v13;
  if (v15 + v14 * a4 <= v16)
  {
    v17 = *(_QWORD *)v10;
    v18 = v14 / v13;
    v19 = v14 % v13;
    v20 = v15 / v13;
    v21 = v15 % v13;
    if (v11 == 1650553971)
    {
      v22 = *((_QWORD *)this + 9);
      v23 = v12 >> 2;
      if (a3)
      {
        v24 = *((_QWORD *)this + 10);
        v25 = a4;
        do
        {
          v26 = v17 + 4 * v21 * v12;
          v27 = (float32x4_t *)(v22 + 4 * v20);
          v28 = (float32x4_t *)(v24 + 4 * v20);
          v29 = *(float32x4_t *)(v26 + 16);
          v30 = vmulq_f32(v27[1], v29);
          v31 = vmulq_f32(*v27, *(float32x4_t *)v26);
          v32 = vmulq_f32(v28[1], v29);
          v33 = vmulq_f32(*v28, *(float32x4_t *)v26);
          v34 = *(float32x4_t *)(v26 + 32);
          v35 = *(float32x4_t *)(v26 + 48);
          v36 = v28[2];
          v37 = v28[3];
          v38 = v27[2];
          v39 = v27[3];
          v40 = 0uLL;
          if ((_DWORD)v23 == 4)
          {
            v41 = 0uLL;
            v42 = 0uLL;
            v43 = 0uLL;
          }
          else
          {
            v44 = (float32x4_t *)(v26 + 64);
            v45 = v28 + 4;
            v46 = v27 + 4;
            v42 = 0uLL;
            v43 = 0uLL;
            v47 = (float32x4_t *)(v26 + 16 * v23);
            v41 = 0uLL;
            do
            {
              v41 = vaddq_f64(v41, vaddq_f64(vcvt_hight_f64_f32(v30), vcvt_hight_f64_f32(v31)));
              v40 = vaddq_f64(v40, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v30.f32), vcvtq_f64_f32(*(float32x2_t *)v31.f32)));
              v43 = vaddq_f64(v43, vaddq_f64(vcvt_hight_f64_f32(v32), vcvt_hight_f64_f32(v33)));
              v42 = vaddq_f64(v42, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v32.f32), vcvtq_f64_f32(*(float32x2_t *)v33.f32)));
              v31 = vmulq_f32(v38, v34);
              v30 = vmulq_f32(v39, v35);
              v33 = vmulq_f32(v36, v34);
              v32 = vmulq_f32(v37, v35);
              v38 = *v46;
              v39 = v46[1];
              v46 += 2;
              v36 = *v45;
              v37 = v45[1];
              v45 += 2;
              v34 = *v44;
              v35 = v44[1];
              v44 += 2;
            }
            while (v44 != v47);
          }
          v48 = vmulq_f32(v35, v39);
          v49 = vmulq_f32(v34, v38);
          v50 = vmulq_f32(v35, v37);
          v51 = vmulq_f32(v34, v36);
          v52 = vaddq_f64(vaddq_f64(v43, vaddq_f64(vcvt_hight_f64_f32(v32), vcvt_hight_f64_f32(v33))), vaddq_f64(vcvt_hight_f64_f32(v50), vcvt_hight_f64_f32(v51)));
          v53 = vaddq_f64(vaddq_f64(v42, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v32.f32), vcvtq_f64_f32(*(float32x2_t *)v33.f32))), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v50.f32), vcvtq_f64_f32(*(float32x2_t *)v51.f32)));
          v50.f32[0] = vaddvq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v40, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v30.f32), vcvtq_f64_f32(*(float32x2_t *)v31.f32))), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v48.f32), vcvtq_f64_f32(*(float32x2_t *)v49.f32))), vaddq_f64(vaddq_f64(v41, vaddq_f64(vcvt_hight_f64_f32(v30), vcvt_hight_f64_f32(v31))), vaddq_f64(vcvt_hight_f64_f32(v48), vcvt_hight_f64_f32(v49)))));
          *v8 = v50.f32[0];
          *(float *)v53.f64 = vaddvq_f64(vaddq_f64(v53, v52));
          *a3 = *(float *)v53.f64;
          v8 += a5;
          a3 += a5;
          v20 += v18;
          v54 = v21 + v19;
          if (v21 + v19 >= v13)
            ++v20;
          if (v54 < v13)
            v55 = 0;
          else
            v55 = v13;
          v21 = v54 - v55;
          --v25;
        }
        while (v25);
      }
      else
      {
        v56 = a4;
        do
        {
          v57 = v17 + 4 * v21 * v12;
          v58 = (float32x4_t *)(v22 + 4 * v20);
          v59 = vmulq_f32(v58[1], *(float32x4_t *)(v57 + 16));
          v60 = vmulq_f32(*v58, *(float32x4_t *)v57);
          v61 = *(float32x4_t *)(v57 + 32);
          v62 = *(float32x4_t *)(v57 + 48);
          v63 = v58[2];
          v64 = v58[3];
          v65 = 0uLL;
          if ((_DWORD)v23 == 4)
          {
            v66 = 0uLL;
          }
          else
          {
            v67 = (float32x4_t *)(v57 + 16 * v23);
            v68 = (float32x4_t *)(v57 + 64);
            v69 = v58 + 4;
            v66 = 0uLL;
            do
            {
              v66 = vaddq_f64(v66, vaddq_f64(vcvt_hight_f64_f32(v59), vcvt_hight_f64_f32(v60)));
              v65 = vaddq_f64(v65, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v59.f32), vcvtq_f64_f32(*(float32x2_t *)v60.f32)));
              v60 = vmulq_f32(v63, v61);
              v59 = vmulq_f32(v64, v62);
              v63 = *v69;
              v64 = v69[1];
              v69 += 2;
              v61 = *v68;
              v62 = v68[1];
              v68 += 2;
            }
            while (v68 != v67);
          }
          v70 = vmulq_f32(v62, v64);
          v71 = vmulq_f32(v61, v63);
          v71.f32[0] = vaddvq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v65, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v59.f32), vcvtq_f64_f32(*(float32x2_t *)v60.f32))), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v70.f32), vcvtq_f64_f32(*(float32x2_t *)v71.f32))), vaddq_f64(vaddq_f64(v66, vaddq_f64(vcvt_hight_f64_f32(v59), vcvt_hight_f64_f32(v60))), vaddq_f64(vcvt_hight_f64_f32(v70), vcvt_hight_f64_f32(v71)))));
          *v8 = v71.f32[0];
          v8 += a5;
          v20 += v18;
          v72 = v21 + v19;
          if (v21 + v19 >= v13)
            ++v20;
          if (v72 < v13)
            v73 = 0;
          else
            v73 = v13;
          v21 = v72 - v73;
          --v56;
        }
        while (v56);
      }
    }
    else if (a3)
    {
      StereoMultiCoefsSRC_Neon((_OWORD *)(*((_QWORD *)this + 9) + 4 * v20), (_OWORD *)(*((_QWORD *)this + 10) + 4 * v20), v17, a2, a3, a4, a5, v18 | (v19 << 16), v21, v13, v12);
    }
    else if ((v12 & 3) == 0)
    {
      MonoMultiCoefsSRC_Neon((_OWORD *)(*((_QWORD *)this + 9) + 4 * v20), v17, a2, a4, a5, v18 | (v19 << 16), v21, v13, v12);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136317186;
    v77 = "Resampler2.cpp";
    v78 = 1024;
    v79 = 2303;
    v80 = 2080;
    v81 = "ConvertSIMD_SmallIntegerRatio";
    v82 = 1024;
    v83 = 2303;
    v84 = 1024;
    v85 = v16;
    v86 = 1024;
    v87 = v15;
    v88 = 1024;
    v89 = v15 + v13 * a4;
    v90 = 1024;
    v91 = v14;
    v92 = 1024;
    v93 = v13;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "%25s:%-5d CADSPUtility:%s:%d: input buffer ticks %u but would read from %u to %u (tick rate %u, offsets %u)!", buf, 0x40u);
  }
LABEL_38:
  v74 = *((_DWORD *)this + 24) + *((_DWORD *)this + 25) * a4;
  *((_DWORD *)this + 24) = v74;
  result = *((double *)this + 18) * (double)v74;
  *((double *)this + 19) = result;
  return result;
}

uint64_t Resampler2::SetVarispeedSinc(uint64_t this, double a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;

  if (a2 <= 1.0)
  {
    v2 = 0;
  }
  else if (a2 <= 7.98)
  {
    v2 = sVarispeedRateTable[vcvtpd_s64_f64(a2 * 100.0) - 100];
  }
  else
  {
    v2 = 35;
  }
  v3 = *(_DWORD *)(this + 104) + 1;
  if (v3 >= 0x20)
    v4 = (v3 >> 5) - 1;
  else
    v4 = 0;
  *(_QWORD *)(this + 48) = *(_QWORD *)(**((_QWORD **)&sVarispeedSincKernels + v4) + 8 * v2);
  return this;
}

float vdotprD2i(const float *a1, const float *a2, const float *a3, const float *a4, double a5, float *a6, float *a7, unint64_t a8)
{
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float64x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float32x4_t v35;
  const float *v36;
  const float *v37;
  const float *v38;
  const float *v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float64x2_t v65;
  float64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  float64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  float64x2_t v72;
  float result;

  v8 = *(float32x4_t *)(a1 + 4);
  v9 = *(float32x4_t *)(a2 + 4);
  v10 = *(float32x4_t *)(a3 + 4);
  v11 = *(float32x4_t *)(a4 + 4);
  v12 = vmulq_f32(v8, v10);
  v13 = vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a3);
  v14 = vmulq_f32(v9, v10);
  v15 = vmulq_f32(*(float32x4_t *)a2, *(float32x4_t *)a3);
  v16 = vmulq_f32(v8, v11);
  v17 = vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a4);
  v18 = vmulq_f32(v9, v11);
  v19 = *(float32x4_t *)(a3 + 8);
  v20 = *(float32x4_t *)(a3 + 12);
  v21 = *(float32x4_t *)(a4 + 8);
  v22 = *(float32x4_t *)(a4 + 12);
  v23 = *(float32x4_t *)(a2 + 8);
  v24 = *(float32x4_t *)(a2 + 12);
  v25 = 0uLL;
  v26 = *(float32x4_t *)(a1 + 8);
  v27 = *(float32x4_t *)(a1 + 12);
  if (a8 >> 2 == 4)
  {
    v28 = 0uLL;
    v29 = 0uLL;
    v30 = 0uLL;
    v31 = 0uLL;
    v32 = 0uLL;
    v33 = 0uLL;
    v34 = 0uLL;
  }
  else
  {
    v35 = vmulq_f32(*(float32x4_t *)a2, *(float32x4_t *)a4);
    v36 = a4 + 16;
    v33 = 0uLL;
    v37 = a3 + 16;
    v34 = 0uLL;
    v38 = a2 + 16;
    v39 = a1 + 16;
    v31 = 0uLL;
    v32 = 0uLL;
    v29 = 0uLL;
    v30 = 0uLL;
    v28 = 0uLL;
    do
    {
      v28 = vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v12), vcvt_hight_f64_f32(v13)), v28);
      v25 = vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v12.f32), vcvtq_f64_f32(*(float32x2_t *)v13.f32)), v25);
      v30 = vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v14), vcvt_hight_f64_f32(v15)), v30);
      v29 = vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v14.f32), vcvtq_f64_f32(*(float32x2_t *)v15.f32)), v29);
      v40 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v16.f32), vcvtq_f64_f32(*(float32x2_t *)v17.f32));
      v41 = vaddq_f64(vcvt_hight_f64_f32(v16), vcvt_hight_f64_f32(v17));
      v42 = vcvt_hight_f64_f32(v18);
      v43 = vcvtq_f64_f32(*(float32x2_t *)v18.f32);
      v44 = vcvt_hight_f64_f32(v35);
      v45 = vcvtq_f64_f32(*(float32x2_t *)v35.f32);
      v13 = vmulq_f32(v19, v26);
      v12 = vmulq_f32(v20, v27);
      v17 = vmulq_f32(v21, v26);
      v16 = vmulq_f32(v22, v27);
      v26 = *(float32x4_t *)v39;
      v27 = *(float32x4_t *)(v39 + 4);
      v39 += 8;
      v15 = vmulq_f32(v19, v23);
      v14 = vmulq_f32(v20, v24);
      v35 = vmulq_f32(v21, v23);
      v18 = vmulq_f32(v22, v24);
      v23 = *(float32x4_t *)v38;
      v24 = *(float32x4_t *)(v38 + 4);
      v38 += 8;
      v32 = vaddq_f64(v41, v32);
      v31 = vaddq_f64(v40, v31);
      v19 = *(float32x4_t *)v37;
      v20 = *(float32x4_t *)(v37 + 4);
      v37 += 8;
      v21 = *(float32x4_t *)v36;
      v22 = *(float32x4_t *)(v36 + 4);
      v36 += 8;
      v34 = vaddq_f64(vaddq_f64(v42, v44), v34);
      v33 = vaddq_f64(vaddq_f64(v43, v45), v33);
    }
    while (v37 != &a3[4 * (a8 >> 2)]);
  }
  v46 = vcvtq_f64_f32(*(float32x2_t *)v12.f32);
  v47 = vcvtq_f64_f32(*(float32x2_t *)v13.f32);
  v48 = vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v12), vcvt_hight_f64_f32(v13)), v28);
  v49 = vcvtq_f64_f32(*(float32x2_t *)v14.f32);
  v50 = vcvtq_f64_f32(*(float32x2_t *)v15.f32);
  v51 = vcvt_hight_f64_f32(v15);
  v52 = vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v14), v51), v30);
  v53 = vcvtq_f64_f32(*(float32x2_t *)v17.f32);
  v54 = vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v16), vcvt_hight_f64_f32(v17)), v32);
  v55 = vaddq_f64(vaddq_f64(v50, vcvtq_f64_f32(*(float32x2_t *)v18.f32)), v33);
  v56 = vaddq_f64(vaddq_f64(v51, vcvt_hight_f64_f32(v18)), v34);
  v57 = vmulq_f32(v20, v27);
  v58 = vmulq_f32(v19, v26);
  v59 = vmulq_f32(v20, v24);
  v60 = vmulq_f32(v19, v23);
  v61 = vmulq_f32(v22, v27);
  v62 = vmulq_f32(v21, v26);
  v63 = vmulq_f32(v22, v24);
  v64 = vmulq_f32(v21, v23);
  v65 = vaddq_f64(v56, vaddq_f64(vcvt_hight_f64_f32(v63), vcvt_hight_f64_f32(v64)));
  v66 = vaddq_f64(v55, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v63.f32), vcvtq_f64_f32(*(float32x2_t *)v64.f32)));
  v67 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v46, v47), v25), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v57.f32), vcvtq_f64_f32(*(float32x2_t *)v58.f32))), vaddq_f64(v48, vaddq_f64(vcvt_hight_f64_f32(v57), vcvt_hight_f64_f32(v58))));
  v68 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v16.f32), v53), v31), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v61.f32), vcvtq_f64_f32(*(float32x2_t *)v62.f32))), vaddq_f64(v54, vaddq_f64(vcvt_hight_f64_f32(v61), vcvt_hight_f64_f32(v62))));
  v69 = vaddq_f64((float64x2_t)vzip1q_s64(v68, v67), (float64x2_t)vzip2q_s64(v68, v67));
  v70 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v49, v50), v29), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v59.f32), vcvtq_f64_f32(*(float32x2_t *)v60.f32))), vaddq_f64(v52, vaddq_f64(vcvt_hight_f64_f32(v59), vcvt_hight_f64_f32(v60))));
  v71 = (int64x2_t)vaddq_f64(v66, v65);
  v72 = vaddq_f64((float64x2_t)vzip1q_s64(v71, v70), (float64x2_t)vzip2q_s64(v71, v70));
  *(float *)v65.f64 = v69.f64[1] + a5 * (v69.f64[0] - v69.f64[1]);
  *a6 = *(float *)v65.f64;
  result = v72.f64[1] + a5 * (v72.f64[0] - v72.f64[1]);
  *a7 = result;
  return result;
}

void std::vector<SincKernel *>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void Resampler2::Resampler2(Resampler2 *this, double a2, double a3, int a4, double a5)
{
  double v5;
  double v6;
  double v8;
  BOOL v13;
  double v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  signed int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unsigned int v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  int v60;
  std::bad_alloc *exception;
  std::bad_alloc *v62;
  std::bad_alloc *v63;
  std::bad_alloc *v64;
  int v65;
  const char *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;
  uint64_t v73;

  v5 = a3;
  v6 = a2;
  v73 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((double *)this + 11) = a2;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = a4;
  *((_DWORD *)this + 27) = 1852797549;
  *((_DWORD *)this + 29) = 0;
  *((_WORD *)this + 62) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 19) = 0;
  v8 = a2 / a3;
  *((double *)this + 20) = v8;
  *((double *)this + 21) = 1.0 / v8;
  *((_WORD *)this + 88) = 1;
  *((_QWORD *)this + 23) = 0;
  *((_BYTE *)this + 192) = 1;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)((char *)this + 200) = _Q0;
  *(_OWORD *)((char *)this + 216) = xmmword_1B5D68D00;
  *(_OWORD *)((char *)this + 232) = xmmword_1B5D68D00;
  *((_QWORD *)this + 31) = 0;
  *((_BYTE *)this + 256) = 0;
  *((_QWORD *)this + 33) = 0;
  if (v6 <= 0.0 || a3 <= 0.0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v65 = 136315906;
      v66 = "Resampler2.cpp";
      v67 = 1024;
      v68 = 262;
      v69 = 2048;
      v70 = v6;
      v71 = 2048;
      v72 = v5;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d Resampler2 bad sample rate(s) : %11.2f %11.2f", (uint8_t *)&v65, 0x26u);
    }
    if (v6 > 0.0 || v5 > 0.0)
    {
      v13 = v5 <= 0.0 && v6 > 0.0;
      if (v13)
        v14 = v6;
      else
        v14 = v5;
      if (v6 <= 0.0)
        v6 = v5;
      v5 = v14;
    }
    else
    {
      v5 = 44100.0;
      v6 = 44100.0;
    }
  }
  v15 = *((_DWORD *)this + 27);
  if (v15 == 1818848869)
  {
    *((_QWORD *)this + 8) = 0x200200000001;
    *((_QWORD *)this + 23) = 1;
    v16 = 8194;
    goto LABEL_90;
  }
  v17 = vcvtmd_s64_f64(v6);
  v18 = vcvtmd_s64_f64(v5);
  if (v6 != (double)v17 || v5 != (double)v18)
    goto LABEL_41;
  if (v17 >= 0)
    v20 = v17;
  else
    v20 = -v17;
  if (v18 >= 0)
    v21 = v18;
  else
    v21 = -v18;
  v22 = 1;
  if (v20 >= 2 && v21 >= 2)
  {
    v22 = v21;
    do
    {
      if (v20 <= v22)
        v23 = v22;
      else
        v23 = v20;
      if (v20 < v22)
        v22 = v20;
      v20 = v23 % v22;
    }
    while ((int)(v23 % v22) > 0);
  }
  v24 = v18 / v22;
  if (v18 / v22 <= 640)
  {
    *((_BYTE *)this + 125) = 1;
    *((_DWORD *)this + 25) = v17 / v22;
    *((_DWORD *)this + 29) = v24;
    *((double *)this + 18) = 1.0 / (double)v24;
  }
  else
  {
LABEL_41:
    if (v15 == 1650553971)
      v24 = 512;
    else
      v24 = 128;
  }
  v25 = *((_DWORD *)this + 26);
  v26 = *((double *)this + 20);
  v27 = fmax(v26, 1.0);
  if (v15 != 1650553971)
  {
    if (v25 < 0x7F)
    {
      v29 = 0.9;
      if (v25 <= 0x5F)
      {
        if (v25 <= 0x3F)
          v30 = 80.0;
        else
          v30 = 90.0;
        if (v25 <= 0x3F)
          v31 = 16;
        else
          v31 = 32;
      }
      else
      {
        v31 = 64;
        v30 = 100.0;
      }
    }
    else
    {
      v30 = dbl_1B5D68D10[v26 < 1.09];
      v31 = 96;
      v29 = 0.9;
    }
    goto LABEL_54;
  }
  if (v25 > 0x7E)
  {
    v28 = 1152.0;
    v29 = 0.99;
LABEL_51:
    *(double *)&v32 = 160.0;
    goto LABEL_52;
  }
  if (v25 > 0x5F)
  {
    v28 = 555.0;
    v29 = 0.98;
    goto LABEL_51;
  }
  if (v25 <= 0x3F)
  {
    v29 = dbl_1B5D68D20[v25 > 0x1F];
    if (v25 <= 0x1F)
      v30 = 120.0;
    else
      v30 = 144.0;
    v28 = 88.2;
    if (v25 > 0x1F)
      v28 = 192.0;
    goto LABEL_53;
  }
  v28 = 323.4;
  v29 = 0.97;
  *(double *)&v32 = 144.0;
LABEL_52:
  v30 = *(double *)&v32;
LABEL_53:
  v31 = (vcvtpd_s64_f64(v27 * v28) + 15) & 0xFFFFFFF0;
LABEL_54:
  if (v31 <= 96)
    v33 = 96;
  else
    v33 = v31;
  pthread_mutex_lock(&sInitLocker);
  if (sIsInitialized == 1)
  {
    v34 = sSincKernelFactory;
  }
  else
  {
    v34 = operator new();
    *(_QWORD *)v34 = 0;
    *(_QWORD *)(v34 + 8) = 0;
    *(_QWORD *)(v34 + 16) = 0;
    std::vector<SincKernel *>::reserve((void **)v34, 0x20uLL);
    sSincKernelFactory = v34;
    sIsInitialized = 1;
  }
  v35 = 1.0 / v27 * v29;
  v36 = *(_QWORD *)(v34 + 8) - *(_QWORD *)v34;
  if (v36)
  {
    v37 = 0;
    v38 = v36 >> 3;
    v39 = 1;
    while (1)
    {
      v40 = *(_QWORD *)(*(_QWORD *)v34 + 8 * v37);
      if (*(double *)(v40 + 32) == v35
        && *(double *)(v40 + 24) == v30
        && *(_DWORD *)(v40 + 12) == v31
        && *(_DWORD *)(v40 + 16) == v24)
      {
        break;
      }
      v37 = v39;
      v13 = v38 > v39++;
      if (!v13)
        goto LABEL_67;
    }
  }
  else
  {
LABEL_67:
    v40 = operator new();
    *(_DWORD *)(v40 + 8) = 0;
    *(_DWORD *)(v40 + 12) = v31;
    *(_DWORD *)(v40 + 16) = v24;
    *(double *)(v40 + 24) = v30;
    *(double *)(v40 + 32) = v35;
    *(_QWORD *)v40 = malloc_type_calloc(v31 + v31 * v24, 4uLL, 0x100004052888210uLL);
    SincKernel::CalculateFilterCoefficients((SincKernel *)v40);
    v42 = *(uint64_t **)(v34 + 8);
    v41 = *(_QWORD *)(v34 + 16);
    if ((unint64_t)v42 >= v41)
    {
      v44 = ((uint64_t)v42 - *(_QWORD *)v34) >> 3;
      if ((unint64_t)(v44 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v45 = v41 - *(_QWORD *)v34;
      v46 = v45 >> 2;
      if (v45 >> 2 <= (unint64_t)(v44 + 1))
        v46 = v44 + 1;
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
        v47 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v47 = v46;
      if (v47)
        v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v47);
      else
        v48 = 0;
      v49 = (uint64_t *)(v47 + 8 * v44);
      v50 = v47 + 8 * v48;
      *v49 = v40;
      v43 = v49 + 1;
      v52 = *(char **)v34;
      v51 = *(char **)(v34 + 8);
      if (v51 != *(char **)v34)
      {
        do
        {
          v53 = *((_QWORD *)v51 - 1);
          v51 -= 8;
          *--v49 = v53;
        }
        while (v51 != v52);
        v51 = *(char **)v34;
      }
      *(_QWORD *)v34 = v49;
      *(_QWORD *)(v34 + 8) = v43;
      *(_QWORD *)(v34 + 16) = v50;
      if (v51)
        operator delete(v51);
    }
    else
    {
      *v42 = v40;
      v43 = v42 + 1;
    }
    *(_QWORD *)(v34 + 8) = v43;
  }
  ++*(_DWORD *)(v40 + 8);
  *((_QWORD *)this + 6) = v40;
  pthread_mutex_unlock(&sInitLocker);
  *((_QWORD *)this + 5) = *((_QWORD *)this + 6);
  if (*((_BYTE *)this + 176))
    v54 = v33 + 0x2000;
  else
    v54 = vcvtpd_u64_f64((double)v33 + *((double *)this + 20) * 1024.0);
  *((_DWORD *)this + 17) = v54;
  Resampler2::SetPrimeMethod((uint64_t)this, 1);
  v16 = *((_DWORD *)this + 17);
LABEL_90:
  v55 = malloc_type_malloc(4 * v16, 0x2C8E6D5CuLL);
  v56 = v55;
  if (v16 && !v55)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v62 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v62, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
  }
  bzero(v55, 4 * v16);
  *((_QWORD *)this + 9) = v56;
  v57 = *((unsigned int *)this + 17);
  v58 = malloc_type_malloc(4 * v57, 0x2C8E6D5CuLL);
  v59 = v58;
  if ((_DWORD)v57 && !v58)
  {
    v63 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v64 = std::bad_alloc::bad_alloc(v63);
    __cxa_throw(v64, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
  }
  bzero(v58, 4 * v57);
  *((_QWORD *)this + 10) = v59;
  if (gCAVectorUnitType)
    v60 = 200;
  else
    v60 = -1;
  if ((gCAVectorUnitType & 1) == 0)
  {
    if (getenv("CA_NoVector"))
    {
      fwrite("CA_NoVector set; Vector unit optimized routines will be bypassed\n",
        0x41uLL,
        1uLL,
        (FILE *)*MEMORY[0x1E0C80C10]);
      v60 = 0;
    }
    else
    {
      gCAVectorUnitType = 1;
      v60 = 200;
    }
  }
  *((_DWORD *)this + 30) = v60;
  Resampler2::SetConverterFunction((uint64_t)this);
}

void sub_1B5997234(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x1B5E50688](v1, 0x80C40D6874129);
  pthread_mutex_unlock(&sInitLocker);
  _Unwind_Resume(a1);
}

void Resampler2::~Resampler2(Resampler2 *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 16) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v14 = 136315394;
    v15 = "Resampler2.cpp";
    v16 = 1024;
    v17 = 365;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d Someone is deleting a Resampler while it is in use.\n", (uint8_t *)&v14, 0x12u);
  }
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 9) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    free(v3);
    *((_QWORD *)this + 10) = 0;
  }
  pthread_mutex_lock(&sInitLocker);
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = (uint64_t *)sSincKernelFactory;
    v6 = *(_DWORD *)(v4 + 8) - 1;
    *(_DWORD *)(v4 + 8) = v6;
    if (!v6)
    {
      v8 = *v5;
      v7 = v5[1];
      if (v7 != *v5)
      {
        v9 = 0;
        v10 = 1;
        while (*(_QWORD *)(v8 + 8 * v9) != v4)
        {
          v9 = v10;
          if ((v7 - *v5) >> 3 <= (unint64_t)v10++)
            goto LABEL_10;
        }
        v12 = v8 + 8 * v9;
        v13 = v7 - (v12 + 8);
        if (v7 != v12 + 8)
          memmove((void *)(v8 + 8 * v9), (const void *)(v12 + 8), v7 - (v12 + 8));
        v5[1] = v12 + v13;
        free(*(void **)v4);
        MEMORY[0x1B5E50688](v4, 0x1080C4003DAF236);
      }
    }
  }
LABEL_10:
  pthread_mutex_unlock(&sInitLocker);
}

void sub_1B599745C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t Resampler2::InitializeVarispeedMode(Resampler2 *this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  double v6;
  int v7;
  double v8;
  unsigned int v9;
  double v10;
  int v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  SincKernel *v15;
  double v16;
  double v17;
  void **v18;
  unint64_t v19;
  SincKernel **v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  SincKernel **v27;
  char *v28;
  char *v29;
  SincKernel *v30;
  int v31;

  v1 = this;
  if (((_DWORD)this + 1) >= 0x20)
    v2 = (((_DWORD)this + 1) >> 5) - 1;
  else
    v2 = 0;
  pthread_mutex_lock(&sInitLocker);
  if (!sVarispeedRefCount[v2])
  {
    v3 = sVarispeedSincKernels[v2];
    if (!v3)
    {
      v3 = operator new();
      *(_QWORD *)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      sVarispeedSincKernels[v2] = v3;
    }
    std::vector<SincKernel *>::reserve((void **)v3, 0x24uLL);
    v4 = 0;
    v5 = 0;
    v6 = 80.0;
    if (v1 <= 0x3F)
    {
      v7 = 16;
    }
    else
    {
      v6 = 90.0;
      v7 = 32;
    }
    if (v1 <= 0x5F)
    {
      v8 = v6;
    }
    else
    {
      v7 = 64;
      v8 = 100.0;
    }
    if (v1 <= 0x7E)
      v9 = v7;
    else
      v9 = 96;
    do
    {
      v10 = exp2((double)v4 * 3600.0 / 36.0 / 1200.0);
      v11 = vcvtpd_s64_f64(v10 * 100.0);
      if (v5 < v11 - 100)
      {
        v12 = v11 - (uint64_t)v5 - 100;
        v13 = &sVarispeedRateTable[v5];
        do
        {
          *v13++ = v4;
          --v12;
        }
        while (v12);
      }
      v14 = operator new();
      v15 = (SincKernel *)v14;
      v16 = dbl_1B5D68D10[v10 < 1.09];
      if (v1 <= 0x7E)
        v16 = v8;
      v17 = 1.0 / v10 * 0.9;
      *(_DWORD *)(v14 + 8) = 0;
      *(_DWORD *)(v14 + 12) = v9;
      *(_DWORD *)(v14 + 16) = 64;
      if (v10 <= 1.0)
        v17 = 0.9;
      *(double *)(v14 + 24) = v16;
      *(double *)(v14 + 32) = v17;
      *(_QWORD *)v14 = malloc_type_calloc(v9 & 0xFFFFE3FF | (((v9 >> 4) & 7) << 10), 4uLL, 0x100004052888210uLL);
      SincKernel::CalculateFilterCoefficients(v15);
      v18 = (void **)sVarispeedSincKernels[v2];
      v20 = (SincKernel **)v18[1];
      v19 = (unint64_t)v18[2];
      if ((unint64_t)v20 >= v19)
      {
        v22 = ((char *)v20 - (_BYTE *)*v18) >> 3;
        if ((unint64_t)(v22 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v23 = v19 - (_QWORD)*v18;
        v24 = v23 >> 2;
        if (v23 >> 2 <= (unint64_t)(v22 + 1))
          v24 = v22 + 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        if (v25)
          v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v25);
        else
          v26 = 0;
        v27 = (SincKernel **)(v25 + 8 * v22);
        *v27 = v15;
        v21 = v27 + 1;
        v29 = (char *)*v18;
        v28 = (char *)v18[1];
        if (v28 != *v18)
        {
          do
          {
            v30 = (SincKernel *)*((_QWORD *)v28 - 1);
            v28 -= 8;
            *--v27 = v30;
          }
          while (v28 != v29);
          v28 = (char *)*v18;
        }
        *v18 = v27;
        v18[1] = v21;
        v18[2] = (void *)(v25 + 8 * v26);
        if (v28)
          operator delete(v28);
      }
      else
      {
        *v20 = v15;
        v21 = v20 + 1;
      }
      v18[1] = v21;
      ++v4;
      v5 = v11 - 100;
    }
    while (v4 != 36);
    if (v11 <= 799)
    {
      if (v11 - 100 <= 699)
        v31 = 699;
      else
        v31 = v11 - 100;
      memset_pattern16(&sVarispeedRateTable[v11 - 100], &unk_1B5D68E80, 4 * (v31 - v11 + 100) + 4);
    }
  }
  ++sVarispeedRefCount[v2];
  return pthread_mutex_unlock(&sInitLocker);
}

void sub_1B59977C4(ResamplerInitLocker *a1)
{
  ResamplerInitLocker::~ResamplerInitLocker(a1);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

uint64_t Resampler2::ShutdownVarispeedMode(Resampler2 *this)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  void **v8;

  v1 = (int)this;
  pthread_mutex_lock(&sInitLocker);
  if ((v1 + 1) >= 0x20)
    v2 = ((v1 + 1) >> 5) - 1;
  else
    v2 = 0;
  v3 = sVarispeedRefCount[v2];
  if (v3 >= 1)
    sVarispeedRefCount[v2] = --v3;
  if (!v3)
  {
    v4 = (uint64_t *)sVarispeedSincKernels[v2];
    if (v4)
    {
      v5 = v4[1];
      if (v5 != *v4)
      {
        v6 = 0;
        v7 = 1;
        v5 = *v4;
        do
        {
          v8 = *(void ***)(v5 + 8 * v6);
          if (v8)
          {
            free(*v8);
            MEMORY[0x1B5E50688](v8, 0x1080C4003DAF236);
            v4 = (uint64_t *)sVarispeedSincKernels[v2];
            v5 = *v4;
          }
          v6 = v7++;
        }
        while (v6 < (v4[1] - v5) >> 3);
      }
      v4[1] = v5;
    }
  }
  return pthread_mutex_unlock(&sInitLocker);
}

uint64_t Resampler2::SetVarispeedRate(uint64_t this, double a2)
{
  uint64_t v3;

  if (*(_BYTE *)(this + 176))
  {
    v3 = this;
    *(_BYTE *)(this + 256) = 0;
    *(double *)(this + 160) = a2;
    *(double *)(this + 168) = 1.0 / a2;
    *(_BYTE *)(this + 125) = 0;
    Resampler2::SetConverterFunction(this);
    return Resampler2::SetVarispeedSinc(v3, a2);
  }
  return this;
}

uint64_t Resampler2::GetNumberOfSourceFrames(Resampler2 *this, unsigned int a2, unsigned int a3)
{
  int v3;
  double v5;
  double v6;
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float64x2_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;

  if (!a2)
    return 0;
  if (!*((_BYTE *)this + 125))
  {
    if (*((_BYTE *)this + 124))
      goto LABEL_8;
    v8 = (double)a2;
    if (!*((_BYTE *)this + 256))
    {
      v5 = *((double *)this + 20) * v8;
      goto LABEL_9;
    }
    v9 = *((double *)this + 29);
    v10 = *((double *)this + 30);
    v11 = v9 + (double)a3;
    if (v8 <= 1000000000.0)
      v12 = (double)a2;
    else
      v12 = 1000000000.0;
    if (v10 <= v11)
    {
      v14 = *((double *)this + 26);
      v15 = (v11 - v10) * v14;
      v16 = *((double *)this + 28);
      v13.f64[0] = v15 + v16;
      v17 = floor(v10 + (v15 + 1000000000.0) / v14);
      v18 = v12 + v11;
      if (v18 >= v17)
        v18 = v17;
      if (v10 <= v18)
      {
        v19 = v14 * (v18 - v10);
      }
      else
      {
        v16 = (v18 - v9) * (*((double *)this + 25) + *((double *)this + 31) * 0.5 * (v18 - v9));
        v19 = *((double *)this + 27);
      }
      v29 = v16 + v19;
    }
    else
    {
      if (v9 > v11)
      {
        v13 = (float64x2_t)xmmword_1B5D68D00;
LABEL_44:
        v5 = (double)vcvtpd_u64_f64(vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v13, 1), v13).f64[0]);
        goto LABEL_9;
      }
      v20 = *((double *)this + 31);
      v21 = v20 * 0.5;
      v22 = *((double *)this + 25);
      v23 = *((double *)this + 27);
      v24 = *((double *)this + 28);
      v13.f64[0] = v23 + (v11 - v9) * (v22 + v20 * 0.5 * (v11 - v9));
      v25 = v13.f64[0] + 1000000000.0;
      if (v24 <= v13.f64[0] + 1000000000.0)
      {
        v30 = v25 - v24;
        v27 = *((double *)this + 30);
        v28 = v30 / *((double *)this + 26);
      }
      else
      {
        v26 = v25 - v23;
        if (v20 == 0.0)
        {
          v27 = *((double *)this + 29);
          v28 = v26 / v22;
        }
        else
        {
          v28 = (sqrt(v22 * v22 + (v20 + v20) * v26) - v22) / v20;
          v27 = *((double *)this + 29);
        }
      }
      v31 = floor(v28 + v27);
      v32 = v12 + v11;
      if (v10 >= v31)
        v33 = v31;
      else
        v33 = *((double *)this + 30);
      if (v32 >= v33)
        v32 = v33;
      if (v10 <= v32)
        v23 = (v32 - v10) * *((double *)this + 26);
      else
        v24 = (v32 - v9) * (v22 + v21 * (v32 - v9));
      v29 = v24 + v23;
    }
    v13.f64[1] = v29;
    goto LABEL_44;
  }
  if (*((_BYTE *)this + 124))
  {
LABEL_8:
    v5 = (double)a2;
LABEL_9:
    v6 = 1.0;
    if (*((_DWORD *)this + 27) != 1818848869)
    {
      LODWORD(v6) = *(_DWORD *)(*((_QWORD *)this + 6) + 12);
      v6 = (double)*(unint64_t *)&v6 + -1.0;
    }
    v7 = vcvtpd_s64_f64(v6 + *((double *)this + 19) + v5 + -0.0001 - (double)*((int *)this + 16));
    return v7 & ~(v7 >> 31);
  }
  if (*((_DWORD *)this + 27) == 1818848869)
    v3 = 2;
  else
    v3 = *(_DWORD *)(*((_QWORD *)this + 6) + 12);
  v7 = v3
     + ~*((_DWORD *)this + 16)
     + (uint64_t)(*((unsigned int *)this + 25) * (unint64_t)a2
               + *((unsigned int *)this + 24)
               + (unint64_t)*((unsigned int *)this + 29)
               - 1)
     / *((unsigned int *)this + 29);
  return v7 & ~(v7 >> 31);
}

uint64_t Resampler2::PreFlight(Resampler2 *this, unsigned int *a2, unsigned int *a3)
{
  signed int v6;
  uint64_t result;
  int v8;
  double v9;
  double v10;
  double v11;
  signed int v12;
  int v13;
  uint64_t v14;

  v6 = *a3;
  result = Resampler2::GetNumberOfSourceFrames(this, *a3, 0);
  v8 = *a2;
  if (*((_BYTE *)this + 125) && !*((_BYTE *)this + 124))
  {
    if (*((_DWORD *)this + 27) == 1818848869)
      v13 = -1;
    else
      v13 = 1 - *(_DWORD *)(*((_QWORD *)this + 6) + 12);
    v14 = (uint64_t)((v13 + v8 + *((_DWORD *)this + 16)) * (unint64_t)*((unsigned int *)this + 29)
                  - *((unsigned int *)this + 24))
        / *((unsigned int *)this + 25);
    v12 = v14 & ~((int)v14 >> 31);
  }
  else
  {
    v9 = 1.0;
    if (*((_DWORD *)this + 27) != 1818848869)
    {
      LODWORD(v9) = *(_DWORD *)(*((_QWORD *)this + 6) + 12);
      v9 = (double)*(unint64_t *)&v9 + -1.0;
    }
    v10 = (double)(*((_DWORD *)this + 16) + v8) - v9 - *((double *)this + 19);
    if (!*((_BYTE *)this + 124))
      v10 = v10 * *((double *)this + 21);
    if (v10 >= 0.0)
      v11 = v10 + 0.0001;
    else
      v11 = 0.0001;
    v12 = vcvtmd_u64_f64(v11);
  }
  if ((int)result >= v8)
  {
    if (v12 < v6)
      *a3 = v12;
  }
  else
  {
    *a2 = result;
  }
  return result;
}

void *Resampler2::PushConvert(Resampler2 *this, const float *a2, const float *a3, float *a4, float *a5, unsigned int *a6, unsigned int *a7, int a8, unsigned int a9, unsigned int a10)
{
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  float *v23;
  unsigned int v24;
  size_t v25;
  float *v26;
  int v27;
  int v28;
  uint64_t v29;
  void (*v30)(_QWORD *, float *, float *);
  uint64_t v31;
  _QWORD *v32;
  const float *v33;
  int v34;
  const float *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  float *v39;
  int v40;
  uint64_t v41;
  size_t v42;
  unsigned int v43;
  void *result;
  unsigned int v45;
  uint64_t v47;
  float *v48;
  float *v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v56;
  float *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  float *v62;
  unsigned int v63;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;

  *((_BYTE *)this + 16) = 1;
  v68 = *a6;
  v67 = *a7;
  Resampler2::PreFlight(this, &v68, &v67);
  v15 = v67;
  if (v67)
  {
    v16 = 0;
    v17 = 0;
    v18 = v68;
    v57 = a5;
    v62 = a5;
    v19 = *((_DWORD *)this + 16);
    v56 = a8;
    while (1)
    {
      v20 = *((_DWORD *)this + 17) - v19;
      v60 = v18;
      v61 = v15;
      if (v20 >= v18)
        v20 = v18;
      v65 = v15;
      v66 = v20;
      Resampler2::PreFlight(this, &v66, &v65);
      v21 = v65;
      v22 = v66;
      v23 = (float *)(*((_QWORD *)this + 9) + 4 * v19);
      v63 = v66;
      if (a8 == 1)
      {
        v24 = v65;
        v25 = 4 * v66;
        memcpy(v23, &a2[v17], v25);
        v19 = *((_DWORD *)this + 16);
        if (a3)
        {
          memcpy((void *)(*((_QWORD *)this + 10) + 4 * v19), &a3[v17], v25);
          v19 = *((_DWORD *)this + 16);
        }
        v21 = v24;
      }
      else if (a3)
      {
        if (!v66)
          goto LABEL_18;
        v26 = (float *)(*((_QWORD *)this + 10) + 4 * v19);
        v27 = v17 * a8;
        do
        {
          *v23++ = a2[v27];
          *v26++ = a3[v27];
          v27 += a8;
          --v22;
        }
        while (v22);
      }
      else
      {
        if (!v66)
          goto LABEL_18;
        v28 = v17 * a8;
        v29 = v66;
        do
        {
          *v23++ = a2[v28];
          v28 += a8;
          --v29;
        }
        while (v29);
      }
      LODWORD(v22) = v63;
LABEL_18:
      *((_BYTE *)this + 192) = 0;
      *((_DWORD *)this + 16) = v19 + v22;
      if (v21)
      {
        v30 = *(void (**)(_QWORD *, float *, float *))this;
        v31 = *((_QWORD *)this + 1);
        v32 = (_QWORD *)((char *)this + (v31 >> 1));
        if ((v31 & 1) != 0)
          v30 = *(void (**)(_QWORD *, float *, float *))(*v32 + v30);
        v33 = a2;
        v34 = v17;
        v35 = a3;
        v36 = v16;
        v37 = v21;
        v30(v32, a4, v62);
        v38 = v65;
        v58 = v65 * a9;
        v59 = v66;
        v39 = &v62[v65 * a9];
        if (!v62)
          v39 = 0;
        v62 = v39;
        *((double *)this + 33) = *((double *)this + 33) + (double)v65;
        v40 = (int)*((double *)this + 19);
        v41 = v40;
        v42 = 4 * (*((_DWORD *)this + 16) - v40);
        memmove(*((void **)this + 9), (const void *)(*((_QWORD *)this + 9) + 4 * v40), v42);
        if (v57)
          memmove(*((void **)this + 10), (const void *)(*((_QWORD *)this + 10) + 4 * v41), v42);
        *((double *)this + 19) = *((double *)this + 19) - (double)(int)v41;
        v19 = *((_DWORD *)this + 16) - v41;
        *((_DWORD *)this + 16) = v19;
        *((_QWORD *)this + 23) -= v41;
        *((double *)this + 16) = *((double *)this + 16) + (double)(int)v41;
        if (*((_BYTE *)this + 125))
          *((_DWORD *)this + 24) -= *(_DWORD *)(*((_QWORD *)this + 6) + 16) * v41;
        v18 = v60 - v63;
        a4 += v58;
        v17 = v59 + v34;
        v16 = v38 + v36;
        v15 = v61 - v37;
        a3 = v35;
        a2 = v33;
        a8 = v56;
        if (v61 != v37)
          continue;
      }
      goto LABEL_30;
    }
  }
  v17 = 0;
  v16 = 0;
LABEL_30:
  v43 = *a6;
  result = (void *)Resampler2::GetNumberOfSourceFrames(this, 1u, v16);
  v45 = v43 - v17;
  if (v43 != v17 && v45 <= result)
  {
    if (a8 == 1)
    {
      result = memcpy((void *)(*((_QWORD *)this + 9) + 4 * *((int *)this + 16)), &a2[v17], 4 * (v43 - v17));
      if (a3)
        result = memcpy((void *)(*((_QWORD *)this + 10) + 4 * *((int *)this + 16)), &a3[v17], 4 * (v43 - v17));
    }
    else
    {
      v47 = *((int *)this + 16);
      v48 = (float *)(*((_QWORD *)this + 9) + 4 * v47);
      if (a3)
      {
        v49 = (float *)(*((_QWORD *)this + 10) + 4 * v47);
        v50 = v17 * a8;
        v51 = v43 - v17;
        do
        {
          *v48++ = a2[v50];
          *v49++ = a3[v50];
          v50 += a8;
          --v51;
        }
        while (v51);
      }
      else
      {
        v52 = v17 * a8;
        v53 = v43 - v17;
        do
        {
          *v48++ = a2[v52];
          v52 += a8;
          --v53;
        }
        while (v53);
      }
    }
    *((_DWORD *)this + 16) += v45;
  }
  *a7 = v16;
  *((_BYTE *)this + 16) = 0;
  return result;
}

void sub_1B59980A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = 0;
  _Unwind_Resume(a1);
}

const __CFString *CACFString::GetCString(const __CFString *theString, __CFString *a2, char *a3, unsigned int *a4)
{
  const __CFString *v6;
  int v7;
  int v8;
  CFIndex usedBufLen;
  CFRange v10;

  if (*(_DWORD *)a3)
  {
    v6 = theString;
    if (theString)
    {
      usedBufLen = 0;
      v10.length = CFStringGetLength(theString);
      v10.location = 0;
      theString = (const __CFString *)CFStringGetBytes(v6, v10, 0x8000100u, 0, 0, (UInt8 *)a2, (*(_DWORD *)a3 - 1), &usedBufLen);
      v7 = usedBufLen;
      *((_BYTE *)&a2->isa + usedBufLen) = 0;
      v8 = v7 + 1;
    }
    else
    {
      LOBYTE(a2->isa) = 0;
      v8 = 1;
    }
    *(_DWORD *)a3 = v8;
  }
  return theString;
}

void AMCP::Graph::Manifest_Log::get_queue(AMCP::Graph::Manifest_Log *this)
{
  unsigned __int8 v1;
  void *v2[41];

  v2[40] = *(void **)MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0)
  {
    {
      AMCP::Utility::Dispatch_Queue::create_serial_with_workloop((AMCP::Utility::Dispatch_Queue *)v2, "Manifest Log Queue");
      AMCP::Utility::Dispatch_Queue::Dispatch_Queue((uint64_t)&AMCP::Graph::Manifest_Log::get_queue(void)::s_instance, v2[0]);
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v2);
    }
  }
}

void AMCP::Graph::Manifest_Log::add_message(uint64_t a1, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  std::mutex *v12;
  std::string::value_type *v13;
  std::string::size_type v14;
  int v15;
  AMCP::Graph::Manifest_Log *v16;
  unsigned __int8 v17;
  NSObject *v18;
  uint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::string *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string::value_type *v28;
  std::__shared_weak_count *v29;
  _BYTE v30[7];
  char v31;
  std::string __p;
  _DWORD v33[2];
  char *v34;

  v12 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  v34 = &a9;
  vsnprintf(AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::temp_buffer, 0x7D0uLL, a3, &a9);
  std::string::basic_string[abi:ne180100]<0>(&v28, AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::temp_buffer);
  v13 = v28;
  v14 = (std::string::size_type)v29;
  v33[0] = *(_DWORD *)v30;
  *(_DWORD *)((char *)v33 + 3) = *(_DWORD *)&v30[3];
  v15 = v31;
  std::mutex::unlock(v12);
  AMCP::Graph::Manifest_Log::get_queue(v16);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v28, *(_QWORD *)a1, *(std::__shared_weak_count **)(a1 + 8));
  *(_DWORD *)v30 = a2;
  if (v15 < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v13, v14);
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    __p.__r_.__value_.__l.__size_ = v14;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = v33[0];
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v33 + 3);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v15;
  }
  v17 = atomic_load((unsigned __int8 *)&unk_1EF12FB60);
  if ((v17 & 1) != 0)
    atomic_store(1u, byte_1EF12FB61);
  v18 = AMCP::Graph::Manifest_Log::get_queue(void)::s_instance;
  v19 = operator new();
  v20 = (_QWORD *)v19;
  v21 = v29;
  *(_QWORD *)v19 = v28;
  *(_QWORD *)(v19 + 8) = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  *(_DWORD *)(v19 + 16) = *(_DWORD *)v30;
  v24 = (std::string *)(v19 + 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v24, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v20[5] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v34 = 0;
  dispatch_async_f(v18, v20, (dispatch_function_t)applesauce::dispatch::v1::async<AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::$_0 &>(dispatch_queue_s *,AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::$_0 &)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::$_0,std::default_delete<AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v34);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v25 = v29;
  if (!v29)
    goto LABEL_18;
  v26 = (unint64_t *)&v29->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (v27)
  {
LABEL_18:
    if ((v15 & 0x80000000) == 0)
      return;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  if (v15 < 0)
LABEL_19:
    operator delete(v13);
}

void sub_1B59983E4(void *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  __clang_call_terminate(a1);
}

void sub_1B5998410(_Unwind_Exception *a1)
{
  int v1;

  if (v1 < 0)
    JUMPOUT(0x1B5998418);
  _Unwind_Resume(a1);
}

void sub_1B5998424()
{
  std::mutex *v0;

  std::mutex::unlock(v0);
  JUMPOUT(0x1B5998430);
}

uint64_t *applesauce::dispatch::v1::async<AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::$_0 &>(dispatch_queue_s *,AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::$_0 &)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  std::string *v4;
  std::string *v5;
  _QWORD *v6;
  std::string **v7;
  std::string::size_type v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v13 = a1;
  v3 = a1 + 24;
  v2 = *(_QWORD **)a1;
  v4 = (std::string *)operator new(0x30uLL);
  v4->__r_.__value_.__r.__words[0] = 0;
  v4->__r_.__value_.__l.__size_ = 0;
  LODWORD(v4->__r_.__value_.__r.__words[2]) = *(_DWORD *)(a1 + 16);
  v5 = v4 + 1;
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
    v6 = *(_QWORD **)a1;
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
    v4[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 16);
    v6 = v2;
  }
  v8 = v2[2];
  v7 = (std::string **)(v2 + 2);
  v4->__r_.__value_.__r.__words[0] = v8;
  v4->__r_.__value_.__l.__size_ = (std::string::size_type)v7;
  *(_QWORD *)(v8 + 8) = v4;
  *v7 = v4;
  v7[2] = (std::string *)((char *)v7[2] + 1);
  v9 = v6[4];
  if (v9 > v6[5])
  {
    v10 = v6[3];
    v11 = *(_QWORD **)v10;
    v11[1] = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    v6[4] = v9 - 1;
    std::__list_imp<std::pair<AMCP::Graph::Manifest_Message_Type,std::string>>::__delete_node[abi:ne180100]<>((void **)v10);
  }
  return std::unique_ptr<AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::$_0,std::default_delete<AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::$_0>>::~unique_ptr[abi:ne180100](&v13);
}

void sub_1B5998508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  operator delete(v10);
  std::unique_ptr<AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::$_0,std::default_delete<AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::$_0,std::default_delete<AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 47) < 0)
      operator delete(*(void **)(v2 + 24));
    v3 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
    MEMORY[0x1B5E50688](v3, 0x1032C4046F781F9);
  }
  return a1;
}

void std::__list_imp<std::pair<AMCP::Graph::Manifest_Message_Type,std::string>>::__delete_node[abi:ne180100]<>(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

void ___ZN10applesauce8dispatch2v19sync_implIRZN4AMCP5Graph12Manifest_Log4dumpEvE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke(_BOOL8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  __int128 *p_p;
  uint64_t v13;
  __int128 __p;
  uint64_t v15;
  uint8_t buf[8];
  _BYTE v17[10];
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  __int128 *v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = **(_QWORD **)(a1 + 32);
  v2 = v1 + 16;
  v3 = *(_QWORD *)(v1 + 24);
  if (v3 != v1 + 16)
  {
    do
    {
      v15 = 0;
      __p = 0uLL;
      switch(*(_DWORD *)(v3 + 16))
      {
        case 0:
          HIBYTE(v15) = 5;
          qmemcpy(&__p, "Start", 5);
          break;
        case 1:
          HIBYTE(v15) = 4;
          LODWORD(__p) = 1886352467;
          break;
        case 2:
          HIBYTE(v15) = 8;
          v4 = 0x64616F6C7265764FLL;
          goto LABEL_12;
        case 3:
          HIBYTE(v15) = 7;
          qmemcpy(&__p, "Enqueue", 7);
          break;
        case 4:
          HIBYTE(v15) = 6;
          qmemcpy(&__p, "Buffer", 6);
          break;
        case 5:
          HIBYTE(v15) = 13;
          qmemcpy(&__p, "Swap Manifest", 13);
          break;
        case 6:
          HIBYTE(v15) = 11;
          *(_DWORD *)((char *)&__p + 7) = 1701669204;
          v5 = "Anchor Time";
          goto LABEL_11;
        case 7:
          HIBYTE(v15) = 11;
          *(_DWORD *)((char *)&__p + 7) = 1702521171;
          v5 = "Change Size";
LABEL_11:
          v4 = *(_QWORD *)v5;
LABEL_12:
          *(_QWORD *)&__p = v4;
          break;
        default:
          break;
      }
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v6 = *(std::__shared_weak_count **)v17;
      v7 = **(NSObject ***)buf;
      if (*(_QWORD *)v17)
      {
        v8 = (unint64_t *)(*(_QWORD *)v17 + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      a1 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
      if (a1)
      {
        v10 = pthread_self();
        v11 = pthread_mach_thread_np(v10);
        p_p = &__p;
        if (v15 < 0)
          p_p = (__int128 *)__p;
        v13 = v3 + 24;
        if (*(char *)(v3 + 47) < 0)
          v13 = *(_QWORD *)(v3 + 24);
        *(_DWORD *)buf = 67110402;
        *(_DWORD *)&buf[4] = v11;
        *(_WORD *)v17 = 2080;
        *(_QWORD *)&v17[2] = "Manifest_Log.cpp";
        v18 = 1024;
        v19 = 93;
        v20 = 1040;
        v21 = 14;
        v22 = 2080;
        v23 = p_p;
        v24 = 2080;
        v25 = v13;
        _os_log_debug_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d %14.14s: %s", buf, 0x32u);
      }
      if (SHIBYTE(v15) < 0)
        operator delete((void *)__p);
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
}

void sub_1B59988A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::get_control_property_traits_list(AMCP *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  if ((v1 & 1) == 0
  {
    AMCP::get_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  v2 = atomic_load(&AMCP::get_control_property_traits_list(void)::once);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&AMCP::get_control_property_traits_list(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_control_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_control_property_traits_list(void)::$_0 &&>>()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  void **v7[2];
  char v8;
  int v9[12];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v9, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v24, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v25, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v26, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v27, 1668506480, 1, 0, 0, &AMCP::Property_Traits<1668506480u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667591277u>::k_valid_scopes, 0, 1668506480, 18);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v28, 1667591277, 1, 0, 0, &AMCP::Property_Traits<1667591277u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668441199u>::k_valid_scopes, 0, 1667591277, 9);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v29, 1668441199, 1, 0, 0, &AMCP::Property_Traits<1668441199u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935962742u>::k_valid_scopes, 0, 0, 2);
  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  v7[1] = (void **)v0;
  v8 = 0;
  v1 = (char *)operator new(0x3F0uLL);
  *(_QWORD *)v0 = v1;
  *(_QWORD *)(v0 + 8) = v1;
  *(_QWORD *)(v0 + 16) = v1 + 1008;
  *(_QWORD *)(v0 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits*>(v0 + 16, v9, (int *)&v30, (uint64_t)v1);
  v7[0] = 0;
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100]((void ***)&AMCP::get_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, (void **)v0);
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100](v7, 0);
  v2 = 252;
  do
  {
    v3 = *(void **)&v9[v2 - 10];
    if (v3)
    {
      *(_QWORD *)&v9[v2 - 8] = v3;
      operator delete(v3);
    }
    v2 -= 12;
  }
  while (v2 * 4);
  v4 = *(unsigned int **)(AMCP::get_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr + 8);
  v5 = 126
     - 2
     * __clz(0xAAAAAAAAAAAAAAABLL* (((uint64_t)v4- *(_QWORD *)AMCP::get_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr) >> 4));
  if (v4 == *(unsigned int **)AMCP::get_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *,false>(*(unsigned int **)AMCP::get_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, v4, v6, 1);
}

void sub_1B5998F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v16 = v15;
  *(_QWORD *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1B5E50688](v14, 0x20C40960023A9);
  v18 = 1008;
  while (1)
  {
    v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(_QWORD *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18)
      _Unwind_Resume(a1);
  }
}

uint64_t AMCP::get_slider_control_property_traits_list(AMCP *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  if ((v1 & 1) == 0
  {
    AMCP::get_slider_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  v2 = atomic_load(&AMCP::get_slider_control_property_traits_list(void)::once);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&AMCP::get_slider_control_property_traits_list(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_slider_control_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_slider_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_slider_control_property_traits_list(void)::$_0 &&>>()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  void **v7[2];
  char v8;
  int v9[12];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v9, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v24, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v25, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v26, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v27, 1668506480, 1, 0, 0, &AMCP::Property_Traits<1668506480u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667591277u>::k_valid_scopes, 0, 1668506480, 18);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v28, 1667591277, 1, 0, 0, &AMCP::Property_Traits<1667591277u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668441199u>::k_valid_scopes, 0, 1667591277, 9);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v29, 1668441199, 1, 0, 0, &AMCP::Property_Traits<1668441199u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935962742u>::k_valid_scopes, 0, 0, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v30, 1935962742, 1, 0, 1, &AMCP::Property_Traits<1935962742u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935962738u>::k_valid_scopes, 0, 1935962742, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v31, 1935962738, 1, 0, 0, &AMCP::Property_Traits<1935962738u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1818456950u>::k_valid_scopes, 0, 1935962738, 13);
  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  v7[1] = (void **)v0;
  v8 = 0;
  v1 = (char *)operator new(0x450uLL);
  *(_QWORD *)v0 = v1;
  *(_QWORD *)(v0 + 8) = v1;
  *(_QWORD *)(v0 + 16) = v1 + 1104;
  *(_QWORD *)(v0 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits*>(v0 + 16, v9, (int *)&v32, (uint64_t)v1);
  v7[0] = 0;
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100]((void ***)&AMCP::get_slider_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, (void **)v0);
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100](v7, 0);
  v2 = 276;
  do
  {
    v3 = *(void **)&v9[v2 - 10];
    if (v3)
    {
      *(_QWORD *)&v9[v2 - 8] = v3;
      operator delete(v3);
    }
    v2 -= 12;
  }
  while (v2 * 4);
  v4 = *(unsigned int **)(AMCP::get_slider_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr
                        + 8);
  v5 = 126
     - 2
     * __clz(0xAAAAAAAAAAAAAAABLL* (((uint64_t)v4- *(_QWORD *)AMCP::get_slider_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr) >> 4));
  if (v4 == *(unsigned int **)AMCP::get_slider_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *,false>(*(unsigned int **)AMCP::get_slider_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, v4, v6, 1);
}

void sub_1B599966C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v16 = v15;
  *(_QWORD *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1B5E50688](v14, 0x20C40960023A9);
  v18 = 1104;
  while (1)
  {
    v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(_QWORD *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18)
      _Unwind_Resume(a1);
  }
}

uint64_t AMCP::get_level_control_property_traits_list(AMCP *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  if ((v1 & 1) == 0
  {
    AMCP::get_level_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  v2 = atomic_load(&AMCP::get_level_control_property_traits_list(void)::once);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&AMCP::get_level_control_property_traits_list(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_level_control_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_level_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_level_control_property_traits_list(void)::$_0 &&>>()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  void **v7[2];
  char v8;
  int v9[12];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v9, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v24, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v25, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v26, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v27, 1668506480, 1, 0, 0, &AMCP::Property_Traits<1668506480u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667591277u>::k_valid_scopes, 0, 1668506480, 18);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v28, 1667591277, 1, 0, 0, &AMCP::Property_Traits<1667591277u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668441199u>::k_valid_scopes, 0, 1667591277, 9);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v29, 1668441199, 1, 0, 0, &AMCP::Property_Traits<1668441199u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935962742u>::k_valid_scopes, 0, 0, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v30, 1818456950, 1, 0, 1, &AMCP::Property_Traits<1818456950u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1818453110u>::k_valid_scopes, 0, 1818456950, 10);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v31, 1818453110, 1, 0, 1, &AMCP::Property_Traits<1818453110u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1818453106u>::k_valid_scopes, 0, 1818453110, 10);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v32, 1818453106, 1, 0, 0, &AMCP::Property_Traits<1818453106u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650685548u>::k_valid_scopes, 0, 1818453106, 26);
  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  v7[1] = (void **)v0;
  v8 = 0;
  v1 = (char *)operator new(0x480uLL);
  *(_QWORD *)v0 = v1;
  *(_QWORD *)(v0 + 8) = v1;
  *(_QWORD *)(v0 + 16) = v1 + 1152;
  *(_QWORD *)(v0 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits*>(v0 + 16, v9, (int *)&v33, (uint64_t)v1);
  v7[0] = 0;
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100]((void ***)&AMCP::get_level_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, (void **)v0);
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100](v7, 0);
  v2 = 288;
  do
  {
    v3 = *(void **)&v9[v2 - 10];
    if (v3)
    {
      *(_QWORD *)&v9[v2 - 8] = v3;
      operator delete(v3);
    }
    v2 -= 12;
  }
  while (v2 * 4);
  v4 = *(unsigned int **)(AMCP::get_level_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr
                        + 8);
  v5 = 126
     - 2
     * __clz(0xAAAAAAAAAAAAAAABLL* (((uint64_t)v4- *(_QWORD *)AMCP::get_level_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr) >> 4));
  if (v4 == *(unsigned int **)AMCP::get_level_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *,false>(*(unsigned int **)AMCP::get_level_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, v4, v6, 1);
}

void sub_1B5999DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v16 = v15;
  *(_QWORD *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1B5E50688](v14, 0x20C40960023A9);
  v18 = 1152;
  while (1)
  {
    v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(_QWORD *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18)
      _Unwind_Resume(a1);
  }
}

uint64_t AMCP::get_BOOLean_control_property_traits_list(AMCP *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  if ((v1 & 1) == 0
  {
    AMCP::get_BOOLean_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  v2 = atomic_load(&AMCP::get_BOOLean_control_property_traits_list(void)::once);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&AMCP::get_BOOLean_control_property_traits_list(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_BOOLean_control_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_BOOLean_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_BOOLean_control_property_traits_list(void)::$_0 &&>>()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  void **v7[2];
  char v8;
  int v9[12];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v9, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v24, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v25, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v26, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v27, 1668506480, 1, 0, 0, &AMCP::Property_Traits<1668506480u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667591277u>::k_valid_scopes, 0, 1668506480, 18);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v28, 1667591277, 1, 0, 0, &AMCP::Property_Traits<1667591277u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668441199u>::k_valid_scopes, 0, 1667591277, 9);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v29, 1668441199, 1, 0, 0, &AMCP::Property_Traits<1668441199u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935962742u>::k_valid_scopes, 0, 0, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v30, 1650685548, 1, 0, 1, &AMCP::Property_Traits<1650685548u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935893353u>::k_valid_scopes, 0, 1650685548, 2);
  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  v7[1] = (void **)v0;
  v8 = 0;
  v1 = (char *)operator new(0x420uLL);
  *(_QWORD *)v0 = v1;
  *(_QWORD *)(v0 + 8) = v1;
  *(_QWORD *)(v0 + 16) = v1 + 1056;
  *(_QWORD *)(v0 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits*>(v0 + 16, v9, (int *)&v31, (uint64_t)v1);
  v7[0] = 0;
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100]((void ***)&AMCP::get_BOOLean_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, (void **)v0);
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100](v7, 0);
  v2 = 264;
  do
  {
    v3 = *(void **)&v9[v2 - 10];
    if (v3)
    {
      *(_QWORD *)&v9[v2 - 8] = v3;
      operator delete(v3);
    }
    v2 -= 12;
  }
  while (v2 * 4);
  v4 = *(unsigned int **)(AMCP::get_BOOLean_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr
                        + 8);
  v5 = 126
     - 2
     * __clz(0xAAAAAAAAAAAAAAABLL* (((uint64_t)v4- *(_QWORD *)AMCP::get_BOOLean_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr) >> 4));
  if (v4 == *(unsigned int **)AMCP::get_BOOLean_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *,false>(*(unsigned int **)AMCP::get_BOOLean_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, v4, v6, 1);
}

void sub_1B599A4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v16 = v15;
  *(_QWORD *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1B5E50688](v14, 0x20C40960023A9);
  v18 = 1056;
  while (1)
  {
    v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(_QWORD *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18)
      _Unwind_Resume(a1);
  }
}

uint64_t AMCP::get_selector_control_property_traits_list(AMCP *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  if ((v1 & 1) == 0
  {
    AMCP::get_selector_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  v2 = atomic_load(&AMCP::get_selector_control_property_traits_list(void)::once);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&AMCP::get_selector_control_property_traits_list(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_selector_control_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_selector_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_selector_control_property_traits_list(void)::$_0 &&>>()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  void **v7[2];
  char v8;
  int v9[12];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v9, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v24, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v25, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v26, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v27, 1668506480, 1, 0, 0, &AMCP::Property_Traits<1668506480u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667591277u>::k_valid_scopes, 0, 1668506480, 18);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v28, 1667591277, 1, 0, 0, &AMCP::Property_Traits<1667591277u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668441199u>::k_valid_scopes, 0, 1667591277, 9);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v29, 1668441199, 1, 0, 0, &AMCP::Property_Traits<1668441199u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935962742u>::k_valid_scopes, 0, 0, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v30, 1935893353, 1, 0, 1, &AMCP::Property_Traits<1935893353u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935893357u>::k_valid_scopes, 0, 1935893353, 20);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v31, 1935893357, 1, 0, 0, &AMCP::Property_Traits<1935893357u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935892841u>::k_valid_scopes, 0, 0, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v32, 1935892841, 1, 0, 0, &AMCP::Property_Traits<1935892841u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936745334u>::k_valid_scopes, 0, 0, 19);
  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  v7[1] = (void **)v0;
  v8 = 0;
  v1 = (char *)operator new(0x480uLL);
  *(_QWORD *)v0 = v1;
  *(_QWORD *)(v0 + 8) = v1;
  *(_QWORD *)(v0 + 16) = v1 + 1152;
  *(_QWORD *)(v0 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits*>(v0 + 16, v9, (int *)&v33, (uint64_t)v1);
  v7[0] = 0;
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100]((void ***)&AMCP::get_selector_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, (void **)v0);
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100](v7, 0);
  v2 = 288;
  do
  {
    v3 = *(void **)&v9[v2 - 10];
    if (v3)
    {
      *(_QWORD *)&v9[v2 - 8] = v3;
      operator delete(v3);
    }
    v2 -= 12;
  }
  while (v2 * 4);
  v4 = *(unsigned int **)(AMCP::get_selector_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr
                        + 8);
  v5 = 126
     - 2
     * __clz(0xAAAAAAAAAAAAAAABLL* (((uint64_t)v4- *(_QWORD *)AMCP::get_selector_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr) >> 4));
  if (v4 == *(unsigned int **)AMCP::get_selector_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *,false>(*(unsigned int **)AMCP::get_selector_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, v4, v6, 1);
}

void sub_1B599AC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v16 = v15;
  *(_QWORD *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1B5E50688](v14, 0x20C40960023A9);
  v18 = 1152;
  while (1)
  {
    v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(_QWORD *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18)
      _Unwind_Resume(a1);
  }
}

uint64_t AMCP::get_stereo_pan_control_property_traits_list(AMCP *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  if ((v1 & 1) == 0
  {
    AMCP::get_stereo_pan_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  v2 = atomic_load(&AMCP::get_stereo_pan_control_property_traits_list(void)::once);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&AMCP::get_stereo_pan_control_property_traits_list(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_stereo_pan_control_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_stereo_pan_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_stereo_pan_control_property_traits_list(void)::$_0 &&>>()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  void **v7[2];
  char v8;
  int v9[12];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v9, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v24, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v25, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v26, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v27, 1668506480, 1, 0, 0, &AMCP::Property_Traits<1668506480u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667591277u>::k_valid_scopes, 0, 1668506480, 18);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v28, 1667591277, 1, 0, 0, &AMCP::Property_Traits<1667591277u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668441199u>::k_valid_scopes, 0, 1667591277, 9);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v29, 1668441199, 1, 0, 0, &AMCP::Property_Traits<1668441199u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935962742u>::k_valid_scopes, 0, 0, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v30, 1936745334, 1, 0, 1, &AMCP::Property_Traits<1936745334u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936745315u>::k_valid_scopes, 0, 1936745334, 10);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v31, 1936745315, 1, 0, 0, &AMCP::Property_Traits<1936745315u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1853188452u>::k_valid_scopes, 0, 1936745315, 21);
  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  v7[1] = (void **)v0;
  v8 = 0;
  v1 = (char *)operator new(0x450uLL);
  *(_QWORD *)v0 = v1;
  *(_QWORD *)(v0 + 8) = v1;
  *(_QWORD *)(v0 + 16) = v1 + 1104;
  *(_QWORD *)(v0 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits*>(v0 + 16, v9, (int *)&v32, (uint64_t)v1);
  v7[0] = 0;
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100]((void ***)&AMCP::get_stereo_pan_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, (void **)v0);
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100](v7, 0);
  v2 = 276;
  do
  {
    v3 = *(void **)&v9[v2 - 10];
    if (v3)
    {
      *(_QWORD *)&v9[v2 - 8] = v3;
      operator delete(v3);
    }
    v2 -= 12;
  }
  while (v2 * 4);
  v4 = *(unsigned int **)(AMCP::get_stereo_pan_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr
                        + 8);
  v5 = 126
     - 2
     * __clz(0xAAAAAAAAAAAAAAABLL* (((uint64_t)v4- *(_QWORD *)AMCP::get_stereo_pan_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr) >> 4));
  if (v4 == *(unsigned int **)AMCP::get_stereo_pan_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *,false>(*(unsigned int **)AMCP::get_stereo_pan_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, v4, v6, 1);
}

void sub_1B599B39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v16 = v15;
  *(_QWORD *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1B5E50688](v14, 0x20C40960023A9);
  v18 = 1104;
  while (1)
  {
    v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(_QWORD *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18)
      _Unwind_Resume(a1);
  }
}

AMCP::Log::Scope_Registry *AMCP::Utility::configure_thread_for_realtime(_opaque_pthread_t *this, _opaque_pthread_t *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  thread_act_t v7;
  AMCP::Log::Scope_Registry *result;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *exception;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  std::string v18;
  std::logic_error v19;
  std::logic_error v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  integer_t policy_info[2];
  uint64_t v28;
  uint8_t buf[8];
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  _BYTE v35[26];
  integer_t v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a2 <= 0x4B2)
    v4 = 1202;
  else
    v4 = a2;
  LODWORD(v5) = v4 >> 1;
  if (v4 >> 1 <= 0x4B0)
    LODWORD(v5) = 1200;
  if (v5 >= 0x124F80)
    v5 = 1200000;
  else
    v5 = v5;
  if (a3)
    v6 = 0;
  else
    v6 = v4;
  *(_QWORD *)policy_info = v6 | (v5 << 32);
  v28 = v4 | 0x100000000;
  v7 = pthread_mach_thread_np(this);
  result = (AMCP::Log::Scope_Registry *)thread_policy_set(v7, 2u, policy_info, 4u);
  if ((_DWORD)result)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67111170;
      *(_DWORD *)&buf[4] = v11;
      v30 = 2080;
      v31 = "Thread_Utilities.cpp";
      v32 = 1024;
      v33 = 90;
      v34 = 2080;
      *(_QWORD *)v35 = "not (kernel_error == 0)";
      *(_WORD *)&v35[8] = 2048;
      *(_QWORD *)&v35[10] = a2;
      *(_WORD *)&v35[18] = 1024;
      *(_DWORD *)&v35[20] = policy_info[0];
      *(_WORD *)&v35[24] = 1024;
      v36 = policy_info[1];
      v37 = 1024;
      v38 = v28;
      v39 = 1024;
      v40 = HIDWORD(v28);
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s AMCP::Utility::Thread_Utilities::configure_thread_for_realtime - thread_policy_set failed. \tCycle Size: %llu \tThread Parameters: \t%u \t%u \t%u \t%d", buf, 0x44u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"AMCP::Utility::Thread_Utilities::configure_thread_for_realtime - thread_policy_set failed. \tCycle Size: %llu \tThread Parameters: \t%u \t%u \t%u \t%d", (uint64_t)&v18, a2, policy_info[0], policy_info[1], v28, HIDWORD(v28));
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v20, &v19);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v21 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(_QWORD *)&v35[6] = "kern_return_t AMCP::Utility::configure_thread_for_realtime(pthread_t, uint64_t, BOOL)";
    *(_QWORD *)&v35[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Utility/Thread_Utilities.cpp";
    *(_DWORD *)&v35[22] = 90;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    v16 = v13;
    v17 = v14;
    v13 = 0uLL;
    v14 = 0;
    v15 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v15);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return result;
}

void sub_1B599B6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v33;
  int v34;
  uint64_t v35;
  uint64_t v37;

  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  *(_QWORD *)(v35 - 96) = &unk_1E69A2000;
  v37 = *(_QWORD *)(v35 - 88);
  if (v37 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37))
    *(_QWORD *)(v35 - 88) = 0;
  MEMORY[0x1B5E500E8](v35 - 112);
  a32 = &unk_1E69A2000;
  if (a33 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a33 + 32))(a33))
    a33 = 0;
  MEMORY[0x1B5E500E8](&a30);
  MEMORY[0x1B5E500DC](&a28);
  if (a27 < 0)
    operator delete(a22);
  if (v34)
    __cxa_free_exception(v33);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v35 - 129));
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *AMCP::Utility::configure_thread_for_normal_priority(_opaque_pthread_t *this, _opaque_pthread_t *a2)
{
  thread_act_t v2;
  AMCP::Log::Scope_Registry *result;
  NSObject *v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  void *exception;
  __int128 v8;
  uint64_t v9;
  uint64_t (**v10)();
  __int128 v11;
  uint64_t v12;
  std::string v13;
  std::logic_error v14;
  std::logic_error v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  integer_t policy_info;
  uint8_t buf[8];
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  _BYTE v29[14];
  const char *v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  policy_info = 1;
  v2 = pthread_mach_thread_np(this);
  result = (AMCP::Log::Scope_Registry *)thread_policy_set(v2, 1u, &policy_info, 1u);
  if ((_DWORD)result)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v4 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = pthread_self();
      v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v6;
      v24 = 2080;
      v25 = "Thread_Utilities.cpp";
      v26 = 1024;
      v27 = 103;
      v28 = 2080;
      *(_QWORD *)v29 = "not (kernel_error == 0)";
      _os_log_error_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s AMCP::Utility::Thread_Utilities::configure_thread_for_normal_priority - thread_policy_set failed.", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v21);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"AMCP::Utility::Thread_Utilities::configure_thread_for_normal_priority - thread_policy_set failed.", (uint64_t)&v13);
    std::logic_error::logic_error(&v14, &v13);
    v14.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v15, &v14);
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = -1;
    v15.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v16 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v15);
    *(_QWORD *)&v29[6] = "kern_return_t AMCP::Utility::configure_thread_for_normal_priority(pthread_t)";
    v30 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Utility/Thread_Utilities.cpp";
    v31 = 103;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v8);
    v11 = v8;
    v12 = v9;
    v8 = 0uLL;
    v9 = 0;
    v10 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v10);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return result;
}

void sub_1B599B9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 117));
  _Unwind_Resume(a1);
}

BOOL AMCP::Utility::is_thread_configured_for_realtime(_opaque_pthread_t *this, _opaque_pthread_t *a2)
{
  AMCP::Log::Scope_Registry *v3;
  thread_inspect_t v4;
  AMCP::Log::Scope_Registry *v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *exception;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *v14;
  char v15;
  integer_t policy_info;
  mach_msg_type_number_t policy_infoCnt;
  BOOLean_t get_default;
  __int128 v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  std::string v24;
  std::logic_error v25;
  std::logic_error v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  NSObject **buf;
  __int16 v33;
  char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  _BYTE v38[14];
  const char *v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = (AMCP::Log::Scope_Registry *)pthread_self();
  if (v3 != (AMCP::Log::Scope_Registry *)this)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v7 = *buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v9;
      v33 = 2080;
      v34 = "Thread_Utilities.cpp";
      v35 = 1024;
      v36 = 112;
      v37 = 2080;
      *(_QWORD *)v38 = "not (in_thread == pthread_self())";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s is_thread_configured_for_realtime only works when in_thread == pthread_self()", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&get_default);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"is_thread_configured_for_realtime only works when in_thread == pthread_self()", (uint64_t)&v24);
    std::logic_error::logic_error(&v25, &v24);
    v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v26, &v25);
    v29 = 0;
    v30 = 0;
    v31 = -1;
    v26.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v27 = &unk_1E69A1230;
    v28 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v26);
    *(_QWORD *)&v38[6] = "BOOL AMCP::Utility::is_thread_configured_for_realtime(pthread_t)";
    v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Utility/Thread_Utilities.cpp";
    v40 = 112;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    v21 = off_1E69A20A0;
    v22 = v19;
    v23 = v20;
    v19 = 0uLL;
    v20 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v21);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&buf);
  }
  policy_infoCnt = 1;
  get_default = 0;
  v4 = pthread_mach_thread_np(this);
  v5 = (AMCP::Log::Scope_Registry *)thread_policy_get(v4, 1u, &policy_info, &policy_infoCnt, &get_default);
  if ((_DWORD)v5)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v11 = *buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v13;
      v33 = 2080;
      v34 = "Thread_Utilities.cpp";
      v35 = 1024;
      v36 = 121;
      v37 = 2080;
      *(_QWORD *)v38 = "not (the_error == 0)";
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v15);
    v14 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v24);
    std::logic_error::logic_error(&v25, &v24);
    v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v26, &v25);
    v29 = 0;
    v30 = 0;
    v31 = -1;
    v26.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v27 = &unk_1E69A1230;
    v28 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v26);
    *(_QWORD *)&v38[6] = "BOOL AMCP::Utility::is_thread_configured_for_realtime(pthread_t)";
    v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Utility/Thread_Utilities.cpp";
    v40 = 121;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    v21 = off_1E69A20A0;
    v22 = v19;
    v23 = v20;
    v19 = 0uLL;
    v20 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v21);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v14, (uint64_t)&buf);
  }
  return get_default != 0;
}

void sub_1B599BE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int16 a9, char a10, char a11, int a12, int a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,char a31)
{
  void *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;

  if (__p)
    operator delete(__p);
  if (a15)
  {
    a16 = (uint64_t)a15;
    operator delete(a15);
  }
  v32[9] = &unk_1E69A2000;
  v36 = v32[10];
  if (v36 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 32))(v36))
    v32[10] = 0;
  MEMORY[0x1B5E500E8](v34 - 128);
  v32[2] = &unk_1E69A2000;
  v37 = v32[3];
  if (v37 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37))
    v32[3] = 0;
  MEMORY[0x1B5E500E8](&a31);
  MEMORY[0x1B5E500DC](&a29);
  if (a28 < 0)
    operator delete(a23);
  if (v33)
    __cxa_free_exception(v31);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a11);
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *AMCP::Utility::configure_syscall_mask_for_realtime_priority(AMCP::Utility *this)
{
  AMCP::Log::Scope_Registry *v1;
  AMCP::Log::Scope_Registry *v2;
  caulk::concurrent::messenger *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _DWORD v13[2];

  v1 = (AMCP::Log::Scope_Registry *)debug_syscall_reject();
  v2 = v1;
  if ((_DWORD)v1)
  {
    AMCP::Log::Scope_Registry::get(v1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v11, "com.apple.coreaudio", "AMCP");
    v3 = *(caulk::concurrent::messenger **)(v11 + 8);
    v4 = pthread_self();
    v5 = pthread_mach_thread_np(v4);
    v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
    *(_DWORD *)(v6 + 16) = 0;
    *(_BYTE *)(v6 + 20) = 1;
    *(_DWORD *)(v6 + 24) = v5;
    *(_QWORD *)(v6 + 32) = "Thread_Utilities.cpp";
    *(_DWORD *)(v6 + 40) = 156;
    *(_QWORD *)v6 = &off_1E6978048;
    *(_QWORD *)(v6 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v3, (caulk::concurrent::message *)v6);
    v7 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  return v2;
}

void sub_1B599C17C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Utility::configure_syscall_mask_for_realtime_priority(void)::$_0,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Utility::configure_syscall_mask_for_realtime_priority(void)::$_0,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d AMCP::Utility::Thread_Utilities::configure_syscall_mask_for_realtime_priority - syscall set mask for real time priority failed", buf, 0x18u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Utility::configure_syscall_mask_for_realtime_priority(void)::$_0,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Utility::configure_syscall_mask_for_realtime_priority(void)::$_0,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

AMCP::Log::Scope_Registry *AMCP::Utility::configure_syscall_mask_for_normal_priority(AMCP::Utility *this)
{
  AMCP::Log::Scope_Registry *v1;
  AMCP::Log::Scope_Registry *v2;
  caulk::concurrent::messenger *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  char v13;

  v13 = 65;
  v1 = (AMCP::Log::Scope_Registry *)debug_syscall_reject();
  v2 = v1;
  if ((_DWORD)v1)
  {
    AMCP::Log::Scope_Registry::get(v1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v11, "com.apple.coreaudio", "AMCP");
    v3 = *(caulk::concurrent::messenger **)(v11 + 8);
    v4 = pthread_self();
    v5 = pthread_mach_thread_np(v4);
    v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
    *(_DWORD *)(v6 + 16) = 0;
    *(_BYTE *)(v6 + 20) = 1;
    *(_DWORD *)(v6 + 24) = v5;
    *(_QWORD *)(v6 + 32) = "Thread_Utilities.cpp";
    *(_DWORD *)(v6 + 40) = 181;
    *(_QWORD *)v6 = &off_1E69780A0;
    *(_QWORD *)(v6 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v3, (caulk::concurrent::message *)v6);
    v7 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  return v2;
}

void sub_1B599C444(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Utility::configure_syscall_mask_for_normal_priority(void)::$_0,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Utility::configure_syscall_mask_for_normal_priority(void)::$_0,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d AMCP::Utility::Thread_Utilities::configure_syscall_mask_for_normal_priority - syscall set mask for normal priority failed", buf, 0x18u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Utility::configure_syscall_mask_for_normal_priority(void)::$_0,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Utility::configure_syscall_mask_for_normal_priority(void)::$_0,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void HALS_AHPDevice::Activate(const __CFString **this)
{
  uint64_t v2;
  unsigned int *v3;
  const __CFString *v4;
  int v5;
  _DWORD *exception;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE buf[12];
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)" diubolg";
  v10 = 0;
  v2 = *((unsigned int *)this + 4);
  *(_QWORD *)buf = 0;
  ((void (*)(const __CFString **, uint64_t, uint64_t *, uint64_t, char *, _BYTE *, _QWORD, _QWORD, _QWORD))(*this)[3].data)(this, v2, &v9, 8, (char *)&v10 + 4, buf, 0, 0, 0);
  v7 = *(_QWORD *)buf;
  v8 = 1;
  if (!*(_QWORD *)buf)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_AHPDevice.cpp";
      v12 = 1024;
      v13 = 44;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPDevice::Activate: no UID", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  CACFString::operator=((uint64_t)(this + 12), (uint64_t)&v7);
  v4 = this[12];
  if (v4)
  {
    v5 = CFStringGetLength(v4) + 1;
    v4 = this[12];
  }
  else
  {
    v5 = 1;
  }
  *(_DWORD *)buf = v5;
  CACFString::GetCString(v4, (__CFString *)((char *)this + 156), buf, v3);
  HALS_Device::Activate(this);
  CACFString::~CACFString((CACFString *)&v7);
}

void sub_1B599C78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void HALS_AHPDevice::~HALS_AHPDevice(HALS_AHPDevice *this)
{
  HALS_Device::~HALS_Device(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_AHPDevice::HasProperty(HALS_Device ***this, const BOOL *a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector;
  BOOL v5;
  int v6;

  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1869638758)
  {
    v5 = mSelector == 1650682995;
    v6 = 1668047219;
  }
  else
  {
    v5 = mSelector == 1869638759 || mSelector == 1937007734;
    v6 = 1870098020;
  }
  if (v5 || mSelector == v6)
    return HALS_Device::HasProperty(this, a2, a3, a4);
  else
    return (*(unsigned int (**)(HALS_Device *))(*(_QWORD *)this[163][4] + 184))(this[163][4]) != 0;
}

uint64_t HALS_AHPDevice::IsPropertySettable(HALS_AHPDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  const BOOL *v8;
  AudioObjectPropertySelector mSelector;
  BOOL v10;
  int v11;
  _DWORD *exception;

  if (((*(uint64_t (**)(HALS_AHPDevice *))(*(_QWORD *)this + 88))(this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1869638758)
  {
    v10 = mSelector == 1650682995;
    v11 = 1668047219;
  }
  else
  {
    v10 = mSelector == 1869638759 || mSelector == 1937007734;
    v11 = 1870098020;
  }
  if (v10 || mSelector == v11)
    return HALS_Device::IsPropertySettable(this, v8, a3, a4);
  else
    return HALS_AHPPlugIn::ObjectIsPropertySettable(*(HALS_AHPPlugIn **)(*((_QWORD *)this + 163) + 32), a2, a3);
}

uint64_t HALS_AHPDevice::GetPropertyDataSize(HALS_Device ***this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, int *a5, AudioObjectPropertyAddress *a6)
{
  const BOOL *v12;
  AudioObjectPropertySelector mSelector;
  BOOL v14;
  int v15;
  _DWORD *exception;

  if ((((uint64_t (*)(HALS_Device ***, uint64_t, AudioObjectPropertyAddress *, AudioObjectPropertyAddress *))(*this)[11])(this, a2, a3, a6) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1869638758)
  {
    v14 = mSelector == 1650682995;
    v15 = 1668047219;
  }
  else
  {
    v14 = mSelector == 1869638759 || mSelector == 1937007734;
    v15 = 1870098020;
  }
  if (v14 || mSelector == v15)
    return HALS_Device::GetPropertyDataSize(this, v12, a3, a4, a5, a6);
  else
    return HALS_AHPPlugIn::ObjectGetPropertyDataSize(this[163][4], a2, a3, a4, a5);
}

void HALS_AHPDevice::GetPropertyData(HALS_AHPDevice *this, const BOOL *a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4, unsigned int *a5, unsigned int *a6, void *a7, int *a8, HALS_Client *a9)
{
  AudioObjectPropertySelector mSelector;
  BOOL v18;
  int v19;
  _DWORD *exception;

  if (((*(uint64_t (**)(HALS_AHPDevice *, const BOOL *, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1869638758)
  {
    v18 = mSelector == 1650682995;
    v19 = 1668047219;
  }
  else
  {
    v18 = mSelector == 1869638759 || mSelector == 1937007734;
    v19 = 1870098020;
  }
  if (v18 || mSelector == v19)
  {
    HALS_Device::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *a5 = a4;
    HALS_AHPPlugIn::ObjectGetPropertyData(*(HALS_AHPPlugIn **)(*((_QWORD *)this + 163) + 32), (uint64_t)a2, a3, (uint64_t)a7, a8, a5, a6);
  }
}

uint64_t HALS_AHPDevice::SetPropertyData(HALS_AHPDevice *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  _DWORD *exception;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_AHPDevice *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v17 = 136315394;
      v18 = "HALS_AHPDevice.cpp";
      v19 = 1024;
      v20 = 231;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPDevice::SetPropertyData: the property is not settable", (uint8_t *)&v17, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  return HALS_AHPPlugIn::ObjectSetPropertyData(*(HALS_AHPPlugIn **)(*((_QWORD *)this + 163) + 32), a2, a3, a6, a7, a4, a5);
}

uint64_t HALS_AHPDevice::CanBeAggregated(HALS_AHPDevice *this)
{
  return 0;
}

void HALS_AHPDevice::create_mcp_engine(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t HALS_AHPDevice::_GetNumberStreams(HALS_AHPDevice *this)
{
  return 0;
}

uint64_t HALS_AHPDevice::_CopyStreamByIndex(HALS_AHPDevice *this)
{
  return 0;
}

uint64_t HALS_AHPDevice::_CopyIOEngine(HALS_AHPDevice *this)
{
  return 0;
}

uint64_t HALS_AHPDevice::_GetTotalNumberChannels(HALS_AHPDevice *this)
{
  return 0;
}

uint64_t HALS_AHPDevice::Server_Internal_CreateIOProcID(HALS_AHPDevice *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), void *a3)
{
  int v3;
  _DWORD *exception;
  int v6;
  uint64_t v7;
  _BYTE v8[5];
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v3 = (*(uint64_t (**)(_QWORD, _QWORD, int (*)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), void *, uint64_t *))(**(_QWORD **)(*((_QWORD *)this + 163) + 32) + 224))(*(_QWORD *)(*((_QWORD *)this + 163) + 32), *((unsigned int *)this + 4), a2, a3, &v7);
  if (v3)
  {
    v8[0] = HIBYTE(v3);
    v8[1] = BYTE2(v3);
    v8[2] = BYTE1(v3);
    v6 = v3;
    v8[3] = v3;
    v8[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v10 = "HALS_AHPPlugIn.cpp";
      v11 = 1024;
      v12 = 132;
      v13 = 1024;
      v14 = v6;
      v15 = 2080;
      v16 = v8;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::DeviceCreateIOProcID: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v6;
  }
  return v7;
}

uint64_t HALS_AHPDevice::Server_Internal_CreateIOProcIDWithBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _DWORD *exception;
  int v6;
  uint64_t v7;
  _BYTE v8[5];
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v3 = (*(uint64_t (**)(_QWORD, uint64_t *, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 1304)
                                                                                            + 32)
                                                                              + 240))(*(_QWORD *)(*(_QWORD *)(a1 + 1304) + 32), &v7, *(unsigned int *)(a1 + 16), a2, a3);
  if (v3)
  {
    v8[0] = HIBYTE(v3);
    v8[1] = BYTE2(v3);
    v8[2] = BYTE1(v3);
    v6 = v3;
    v8[3] = v3;
    v8[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v10 = "HALS_AHPPlugIn.cpp";
      v11 = 1024;
      v12 = 138;
      v13 = 1024;
      v14 = v6;
      v15 = 2080;
      v16 = v8;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::DeviceCreateIOProcIDWithBlock: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v6;
  }
  return v7;
}

uint64_t HALS_AHPDevice::Server_Internal_DestroyIOProcID(HALS_AHPDevice *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  uint64_t result;
  _DWORD *exception;
  int v4;
  _BYTE v5[5];
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, _QWORD, int (*)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *)))(**(_QWORD **)(*((_QWORD *)this + 163) + 32) + 232))(*(_QWORD *)(*((_QWORD *)this + 163) + 32), *((unsigned int *)this + 4), a2);
  if ((_DWORD)result)
  {
    v5[0] = BYTE3(result);
    v5[1] = BYTE2(result);
    v5[2] = BYTE1(result);
    v4 = result;
    v5[3] = result;
    v5[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v7 = "HALS_AHPPlugIn.cpp";
      v8 = 1024;
      v9 = 156;
      v10 = 1024;
      v11 = v4;
      v12 = 2080;
      v13 = v5;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::DeviceCreateIOProcID: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v4;
  }
  return result;
}

uint64_t HALS_AHPDevice::Server_Internal_AddIOProc(HALS_AHPDevice *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), void *a3)
{
  uint64_t result;
  _DWORD *exception;
  int v5;
  _BYTE v6[5];
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, _QWORD, int (*)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), void *))(**(_QWORD **)(*((_QWORD *)this + 163) + 32) + 48))(*(_QWORD *)(*((_QWORD *)this + 163) + 32), *((unsigned int *)this + 4), a2, a3);
  if ((_DWORD)result)
  {
    v6[0] = BYTE3(result);
    v6[1] = BYTE2(result);
    v6[2] = BYTE1(result);
    v5 = result;
    v6[3] = result;
    v6[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v8 = "HALS_AHPPlugIn.cpp";
      v9 = 1024;
      v10 = 162;
      v11 = 1024;
      v12 = v5;
      v13 = 2080;
      v14 = v6;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::AddIOProc: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v5;
  }
  return result;
}

uint64_t HALS_AHPDevice::Server_Internal_RemoveIOProc(HALS_AHPDevice *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  uint64_t result;
  _DWORD *exception;
  int v4;
  _BYTE v5[5];
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, _QWORD, int (*)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *)))(**(_QWORD **)(*((_QWORD *)this + 163) + 32) + 56))(*(_QWORD *)(*((_QWORD *)this + 163) + 32), *((unsigned int *)this + 4), a2);
  if ((_DWORD)result)
  {
    v5[0] = BYTE3(result);
    v5[1] = BYTE2(result);
    v5[2] = BYTE1(result);
    v4 = result;
    v5[3] = result;
    v5[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v7 = "HALS_AHPPlugIn.cpp";
      v8 = 1024;
      v9 = 168;
      v10 = 1024;
      v11 = v4;
      v12 = 2080;
      v13 = v5;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::RemoveIOProc: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v4;
  }
  return result;
}

uint64_t HALS_AHPDevice::Server_Internal_StartIOProcID(HALS_AHPDevice *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  uint64_t result;
  _DWORD *exception;
  int v4;
  _BYTE v5[5];
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, _QWORD, int (*)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *)))(**(_QWORD **)(*((_QWORD *)this + 163) + 32) + 64))(*(_QWORD *)(*((_QWORD *)this + 163) + 32), *((unsigned int *)this + 4), a2);
  if ((_DWORD)result)
  {
    v5[0] = BYTE3(result);
    v5[1] = BYTE2(result);
    v5[2] = BYTE1(result);
    v4 = result;
    v5[3] = result;
    v5[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v7 = "HALS_AHPPlugIn.cpp";
      v8 = 1024;
      v9 = 174;
      v10 = 1024;
      v11 = v4;
      v12 = 2080;
      v13 = v5;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::StartIOProc: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v4;
  }
  return result;
}

uint64_t HALS_AHPDevice::Server_Internal_StartIOProcIDAtTime(HALS_AHPDevice *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t result;
  _DWORD *exception;
  int v6;
  _BYTE v7[5];
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, _QWORD, int (*)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), AudioTimeStamp *, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 163) + 32) + 152))(*(_QWORD *)(*((_QWORD *)this + 163) + 32), *((unsigned int *)this + 4), a2, a3, a4);
  if ((_DWORD)result)
  {
    v7[0] = BYTE3(result);
    v7[1] = BYTE2(result);
    v7[2] = BYTE1(result);
    v6 = result;
    v7[3] = result;
    v7[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v9 = "HALS_AHPPlugIn.cpp";
      v10 = 1024;
      v11 = 180;
      v12 = 1024;
      v13 = v6;
      v14 = 2080;
      v15 = v7;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::StartIOProcAtTime: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v6;
  }
  return result;
}

uint64_t HALS_AHPDevice::Server_Internal_StopIOProcID(HALS_AHPDevice *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  uint64_t result;
  _DWORD *exception;
  int v4;
  _BYTE v5[5];
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, _QWORD, int (*)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *)))(**(_QWORD **)(*((_QWORD *)this + 163) + 32) + 72))(*(_QWORD *)(*((_QWORD *)this + 163) + 32), *((unsigned int *)this + 4), a2);
  if ((_DWORD)result)
  {
    v5[0] = BYTE3(result);
    v5[1] = BYTE2(result);
    v5[2] = BYTE1(result);
    v4 = result;
    v5[3] = result;
    v5[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v7 = "HALS_AHPPlugIn.cpp";
      v8 = 1024;
      v9 = 186;
      v10 = 1024;
      v11 = v4;
      v12 = 2080;
      v13 = v5;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::StopIOProc: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v4;
  }
  return result;
}

uint64_t HALS_AHPDevice::GetCurrentTime(HALS_AHPDevice *this, AudioTimeStamp *a2)
{
  uint64_t result;
  _DWORD *exception;
  int v4;
  _BYTE v5[5];
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, _QWORD, AudioTimeStamp *))(**(_QWORD **)(*((_QWORD *)this + 163) + 32)
                                                                       + 88))(*(_QWORD *)(*((_QWORD *)this + 163) + 32), *((unsigned int *)this + 4), a2);
  if ((_DWORD)result)
  {
    v5[0] = BYTE3(result);
    v5[1] = BYTE2(result);
    v5[2] = BYTE1(result);
    v4 = result;
    v5[3] = result;
    v5[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v7 = "HALS_AHPPlugIn.cpp";
      v8 = 1024;
      v9 = 198;
      v10 = 1024;
      v11 = v4;
      v12 = 2080;
      v13 = v5;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::DeviceGetCurrentTime: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v4;
  }
  return result;
}

uint64_t HALS_AHPDevice::TranslateTime(HALS_AHPDevice *this, const AudioTimeStamp *a2, AudioTimeStamp *a3)
{
  uint64_t result;
  _DWORD *exception;
  int v5;
  _BYTE v6[5];
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, _QWORD, const AudioTimeStamp *, AudioTimeStamp *))(**(_QWORD **)(*((_QWORD *)this + 163) + 32)
                                                                                               + 96))(*(_QWORD *)(*((_QWORD *)this + 163) + 32), *((unsigned int *)this + 4), a2, a3);
  if ((_DWORD)result)
  {
    v6[0] = BYTE3(result);
    v6[1] = BYTE2(result);
    v6[2] = BYTE1(result);
    v5 = result;
    v6[3] = result;
    v6[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v8 = "HALS_AHPPlugIn.cpp";
      v9 = 1024;
      v10 = 204;
      v11 = 1024;
      v12 = v5;
      v13 = 2080;
      v14 = v6;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::TranslateTime: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v5;
  }
  return result;
}

uint64_t HALS_AHPDevice::GetNearestStartTime(HALS_AHPDevice *this, AudioTimeStamp *a2, uint64_t a3)
{
  uint64_t result;
  _DWORD *exception;
  int v5;
  _BYTE v6[5];
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, _QWORD, AudioTimeStamp *, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 163)
                                                                                              + 32)
                                                                                + 160))(*(_QWORD *)(*((_QWORD *)this + 163) + 32), *((unsigned int *)this + 4), a2, a3);
  if ((_DWORD)result)
  {
    v6[0] = BYTE3(result);
    v6[1] = BYTE2(result);
    v6[2] = BYTE1(result);
    v5 = result;
    v6[3] = result;
    v6[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v8 = "HALS_AHPPlugIn.cpp";
      v9 = 1024;
      v10 = 210;
      v11 = 1024;
      v12 = v5;
      v13 = 2080;
      v14 = v6;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::GetNearestStartTime: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v5;
  }
  return result;
}

void HALS_AHPStream::Activate(HALS_AHPStream *this)
{
  HALS_Object *v2;
  unsigned int v3;
  int v4;
  AudioObjectPropertyAddress v5;

  v5.mElement = 0;
  *(_QWORD *)&v5.mSelector = *(_QWORD *)"ridsbolg";
  v3 = 4;
  v4 = 0;
  HALS_AHPPlugIn::ObjectGetPropertyData(*(HALS_AHPPlugIn **)(*((_QWORD *)this + 8) + 32), *((unsigned int *)this + 4), &v5, 0, 0, &v3, &v4);
  *((_BYTE *)this + 52) = v4 != 0;
  HALS_Object::Activate(this, v2);
}

void HALS_AHPStream::~HALS_AHPStream(HALS_AHPStream *this)
{
  HALS_Object::~HALS_Object(this);
  JUMPOUT(0x1B5E50688);
}

BOOL HALS_AHPStream::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v4;
  _BOOL8 result;
  BOOL v6;
  int v7;

  v4 = *a3;
  result = 1;
  if (*a3 > 1869638758)
  {
    v6 = v4 == 1869638759;
    v7 = 1937007734;
  }
  else
  {
    v6 = v4 == 1650682995;
    v7 = 1668047219;
  }
  if (!v6 && v4 != v7)
    return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 64) + 32) + 184))(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 32)) != 0;
  return result;
}

uint64_t HALS_AHPStream::IsPropertySettable(HALS_AHPStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t v7;
  uint64_t v8;
  AudioObjectPropertySelector mSelector;
  BOOL v10;
  int v11;
  _DWORD *exception;

  v7 = (*(uint64_t (**)(HALS_AHPStream *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a4);
  if ((v7 & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    v10 = mSelector == 1937007734;
    v11 = 1869638759;
  }
  else
  {
    v10 = mSelector == 1650682995;
    v11 = 1668047219;
  }
  if (v10 || mSelector == v11)
    return HALS_Object::IsPropertySettable(v7, v8, (int *)a3);
  else
    return HALS_AHPPlugIn::ObjectIsPropertySettable(*(HALS_AHPPlugIn **)(*((_QWORD *)this + 8) + 32), a2, a3);
}

uint64_t HALS_AHPStream::GetPropertyDataSize(HALS_AHPStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, HALS_Client *a6)
{
  uint64_t v11;
  uint64_t v12;
  AudioObjectPropertySelector mSelector;
  BOOL v14;
  int v15;
  _DWORD *exception;

  v11 = (*(uint64_t (**)(HALS_AHPStream *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a6);
  if ((v11 & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    v14 = mSelector == 1937007734;
    v15 = 1869638759;
  }
  else
  {
    v14 = mSelector == 1650682995;
    v15 = 1668047219;
  }
  if (v14 || mSelector == v15)
    return HALS_Object::GetPropertyDataSize(v11, v12, (int *)a3);
  else
    return HALS_AHPPlugIn::ObjectGetPropertyDataSize(*(HALS_AHPPlugIn **)(*((_QWORD *)this + 8) + 32), a2, a3, a4, a5);
}

uint64_t HALS_AHPStream::GetPropertyData(HALS_AHPStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  uint64_t v17;
  AudioObjectPropertySelector mSelector;
  BOOL v19;
  int v20;
  _DWORD *exception;

  if (((*(uint64_t (**)(HALS_AHPStream *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    v19 = mSelector == 1937007734;
    v20 = 1869638759;
  }
  else
  {
    v19 = mSelector == 1650682995;
    v20 = 1668047219;
  }
  if (v19 || mSelector == v20)
    return HALS_Object::GetPropertyData((uint64_t)this, v17, (int *)a3, a4, (int *)a5, a6);
  *a5 = a4;
  return HALS_AHPPlugIn::ObjectGetPropertyData(*(HALS_AHPPlugIn **)(*((_QWORD *)this + 8) + 32), a2, a3, a7, a8, a5, a6);
}

uint64_t HALS_AHPStream::SetPropertyData(HALS_AHPStream *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  AudioObjectPropertySelector mSelector;
  BOOL v21;
  int v22;
  _DWORD *exception;

  if (((*(uint64_t (**)(HALS_AHPStream *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    v21 = mSelector == 1937007734;
    v22 = 1869638759;
  }
  else
  {
    v21 = mSelector == 1650682995;
    v22 = 1668047219;
  }
  if (v21 || mSelector == v22)
    HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v16, v17, v18, v19, (uint64_t)a8);
  return HALS_AHPPlugIn::ObjectSetPropertyData(*(HALS_AHPPlugIn **)(*((_QWORD *)this + 8) + 32), a2, a3, a6, a7, a4, a5);
}

uint64_t HALS_Stream::GetIOBuffer(HALS_Stream *this)
{
  return 0;
}

uint64_t HALS_Stream::GetIOBufferByteSize(HALS_Stream *this)
{
  return 0;
}

void HALS_AHPControl::Activate(HALS_AHPControl *this)
{
  HALS_Object *v2;
  unsigned int v3;
  AudioObjectPropertyAddress v4;
  unsigned int v5;
  AudioObjectPropertyAddress v6;

  v6.mElement = 0;
  *(_QWORD *)&v6.mSelector = *(_QWORD *)"pcscbolg";
  v5 = 4;
  HALS_AHPPlugIn::ObjectGetPropertyData(*(HALS_AHPPlugIn **)(*((_QWORD *)this + 9) + 32), *((unsigned int *)this + 4), &v6, 0, 0, &v5, (char *)this + 48);
  *(_QWORD *)&v4.mSelector = *(_QWORD *)"mlecbolg";
  v4.mElement = 0;
  v3 = 4;
  HALS_AHPPlugIn::ObjectGetPropertyData(*(HALS_AHPPlugIn **)(*((_QWORD *)this + 9) + 32), *((unsigned int *)this + 4), &v4, 0, 0, &v3, (char *)this + 52);
  HALS_Object::Activate(this, v2);
}

void HALS_AHPControl::~HALS_AHPControl(HALS_AHPControl *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6995A68;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  HALS_Object::~HALS_Object(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E6995A68;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  HALS_Object::~HALS_Object(this);
  JUMPOUT(0x1B5E50688);
}

BOOL HALS_AHPControl::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v4;
  _BOOL8 result;
  BOOL v6;
  int v7;

  v4 = *a3;
  result = 1;
  if (*a3 > 1869638758)
  {
    v6 = v4 == 1869638759;
    v7 = 1937007734;
  }
  else
  {
    v6 = v4 == 1650682995;
    v7 = 1668047219;
  }
  if (!v6 && v4 != v7)
    return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 72) + 32) + 184))(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 32)) != 0;
  return result;
}

uint64_t HALS_AHPControl::IsPropertySettable(HALS_AHPControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t v7;
  uint64_t v8;
  AudioObjectPropertySelector mSelector;
  BOOL v10;
  int v11;
  _DWORD *exception;

  v7 = (*(uint64_t (**)(HALS_AHPControl *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a4);
  if ((v7 & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    v10 = mSelector == 1937007734;
    v11 = 1869638759;
  }
  else
  {
    v10 = mSelector == 1650682995;
    v11 = 1668047219;
  }
  if (v10 || mSelector == v11)
    return HALS_Object::IsPropertySettable(v7, v8, (int *)a3);
  else
    return HALS_AHPPlugIn::ObjectIsPropertySettable(*(HALS_AHPPlugIn **)(*((_QWORD *)this + 9) + 32), a2, a3);
}

uint64_t HALS_AHPControl::GetPropertyDataSize(HALS_AHPControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, HALS_Client *a6)
{
  uint64_t v11;
  uint64_t v12;
  AudioObjectPropertySelector mSelector;
  BOOL v14;
  int v15;
  _DWORD *exception;

  v11 = (*(uint64_t (**)(HALS_AHPControl *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a6);
  if ((v11 & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    v14 = mSelector == 1937007734;
    v15 = 1869638759;
  }
  else
  {
    v14 = mSelector == 1650682995;
    v15 = 1668047219;
  }
  if (v14 || mSelector == v15)
    return HALS_Object::GetPropertyDataSize(v11, v12, (int *)a3);
  else
    return HALS_AHPPlugIn::ObjectGetPropertyDataSize(*(HALS_AHPPlugIn **)(*((_QWORD *)this + 9) + 32), a2, a3, a4, a5);
}

uint64_t HALS_AHPControl::GetPropertyData(HALS_AHPControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  uint64_t v17;
  AudioObjectPropertySelector mSelector;
  BOOL v19;
  int v20;
  _DWORD *exception;

  if (((*(uint64_t (**)(HALS_AHPControl *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    v19 = mSelector == 1937007734;
    v20 = 1869638759;
  }
  else
  {
    v19 = mSelector == 1650682995;
    v20 = 1668047219;
  }
  if (v19 || mSelector == v20)
    return HALS_Object::GetPropertyData((uint64_t)this, v17, (int *)a3, a4, (int *)a5, a6);
  *a5 = a4;
  return HALS_AHPPlugIn::ObjectGetPropertyData(*(HALS_AHPPlugIn **)(*((_QWORD *)this + 9) + 32), a2, a3, a7, a8, a5, a6);
}

uint64_t HALS_AHPControl::SetPropertyData(HALS_AHPControl *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, void *a5, unsigned int a6, const void *a7, HALS_Client *a8)
{
  AudioObjectPropertySelector mSelector;
  int v15;
  unint64_t v16;
  AudioObjectPropertyElement mElement;
  unsigned int v18;
  unsigned int v19;
  int v20;
  HALS_ObjectMap *v21;
  const char *v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *exception;
  void *__p[2];
  char v33;
  void *v34[2];
  char v35;

  if (((*(uint64_t (**)(HALS_AHPControl *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1818456949)
  {
    if (mSelector != 1818456950)
    {
      if (mSelector == 1937007734)
        goto LABEL_20;
      v15 = 1869638759;
LABEL_18:
      if (mSelector != v15)
        return HALS_AHPPlugIn::ObjectSetPropertyData(*(HALS_AHPPlugIn **)(*((_QWORD *)this + 9) + 32), a2, a3, a6, a7, a4, a5);
LABEL_20:
      kdebug_trace();
      HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v25, v26, v27, v28, (uint64_t)a8);
    }
  }
  else if (mSelector != 1818453110)
  {
    if (mSelector == 1650682995)
      goto LABEL_20;
    v15 = 1668047219;
    goto LABEL_18;
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "HALS_AHPControl::SetPropertyData");
  v16 = *(_QWORD *)&a3->mSelector;
  mElement = a3->mElement;
  v19 = *((_DWORD *)this + 12);
  v18 = *((_DWORD *)this + 13);
  v21 = (HALS_ObjectMap *)*((unsigned int *)this + 14);
  v20 = *((_DWORD *)this + 15);
  v22 = "no control type";
  if (v20 == 1)
    v22 = "software control";
  if (v20)
    v23 = (char *)v22;
  else
    v23 = "external driver";
  std::string::basic_string[abi:ne180100]<0>(__p, v23);
  LogVolumeChangeForServerSideControl((uint64_t)v34, a2, v16, mElement, a4, (float *)a5, v21, v19, v18, (uint64_t)__p);
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  return HALS_AHPPlugIn::ObjectSetPropertyData(*(HALS_AHPPlugIn **)(*((_QWORD *)this + 9) + 32), a2, a3, a6, a7, a4, a5);
}

void sub_1B599E714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t HALS_AHPControl::GetHardwareReferenceStreamControlValue()
{
  return 0;
}

uint64_t HALS_IOA2Device::Activate(HALS_IOA2Device *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  HALS_Object *v7;
  HALS_Object *v8;
  uint64_t v9;
  uint64_t v10;
  uintptr_t v11;
  uint64_t v12;
  char v13;
  char v14;
  std::mutex *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  _DWORD *v31;
  _DWORD *v32;
  NSObject *v33;
  NSObject *v34;
  _DWORD *v35;
  _DWORD *v36;
  NSObject *v37;
  NSObject *v38;
  BOOL has_engine_for_device;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _DWORD *exception;
  _DWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  int v61;
  HALS_IOA2Device *v62;
  _QWORD handler[4];
  int v64;
  int v65;
  HALS_IOA2Device *v66;
  int v67;
  HALS_IOA2Device *v68;
  int v69;
  HALS_IOA2Device *v70;
  BOOL v71;
  char v72[2];
  _BYTE buf[24];
  void *v74;
  int v75;
  char v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)this + 4);
  v71 = 0;
  HALS_IOA2Device::_UpdateStreams((uint64_t)this, (uint64_t)v72);
  v69 = MEMORY[0x1B5E5064C]();
  v70 = this;
  HALS_IOA2Device::_UpdateControls(this, &v71);
  v67 = MEMORY[0x1B5E5064C]();
  v68 = this;
  *(_QWORD *)buf = 0;
  HALB_UCObject::CopyProperty_CFArray((const __CFDictionary **)this + 226, CFSTR("custom property info"), (const __CFArray **)buf);
  v3 = OS::CF::UntypedObject::operator=((uint64_t)this + 1784, *(uint64_t *)buf);
  if (!*((_QWORD *)this + 222))
  {
    v4 = operator new();
    HALS_IOEngine2::HALS_IOEngine2((HALS_IOEngine2 *)v4, this, v5, v6, v7);
    *(_QWORD *)v4 = off_1E6992008;
    *(_QWORD *)(v4 + 1112) = this;
    *(_WORD *)(v4 + 1120) = 0;
    *((_QWORD *)this + 222) = v4;
    v3 = HALS_IOEngine2::Activate((HALS_IOEngine2 *)v4, v8);
  }
  v65 = MEMORY[0x1B5E5064C](v3);
  v66 = this;
  v9 = (*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 64))(this);
  v10 = MEMORY[0x1E0C809B0];
  v11 = *((unsigned int *)this + 462);
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 0x40000000;
  handler[2] = ___ZN15HALS_IOA2Device8ActivateEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_4034;
  v64 = v2;
  if (!(_DWORD)v11)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "Dispatch_Queue.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 231;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Dispatch_Queue::install_mach_port_receiver: a mach port is required", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v12 = v9;
  v13 = *((_BYTE *)this + 1852);
  v14 = *((_BYTE *)this + 1853);
  v15 = (std::mutex *)(v9 + 152);
  std::mutex::lock((std::mutex *)(v9 + 152));
  v16 = *(_QWORD *)(v12 + 128);
  v17 = *(_QWORD *)(v12 + 136);
  if (v16 != v17)
  {
    while (*(_DWORD *)(v16 + 8) != (_DWORD)v11)
    {
      v16 += 16;
      if (v16 == v17)
        goto LABEL_9;
    }
  }
  if (v16 == v17)
  {
LABEL_9:
    v18 = dispatch_source_create(MEMORY[0x1E0C80D98], v11, 0, *(dispatch_queue_t *)v12);
    if (!v18)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "Dispatch_Queue.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 242;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Dispatch_Queue::install_mach_port_receiver: failed to create the mach port event source", buf, 0x12u);
      }
      v54 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v54 = &off_1E69A1B30;
      v54[2] = 2003329396;
    }
    v19 = v18;
    dispatch_source_set_event_handler(v18, handler);
    *(_QWORD *)buf = v10;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZN4AMCP7Utility14Dispatch_Queue26install_mach_port_receiverEjU13block_pointerFvvEbb_block_invoke;
    v74 = &__block_descriptor_tmp_2_3832;
    v75 = v11;
    v76 = v13;
    v77 = v14;
    dispatch_source_set_cancel_handler(v19, buf);
    v21 = *(_QWORD *)(v12 + 136);
    v20 = *(_QWORD *)(v12 + 144);
    if (v21 >= v20)
    {
      v23 = *(_QWORD *)(v12 + 128);
      v24 = (uint64_t)(v21 - v23) >> 4;
      if ((unint64_t)(v24 + 1) >> 60)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v25 = v20 - v23;
      v26 = v25 >> 3;
      if (v25 >> 3 <= (unint64_t)(v24 + 1))
        v26 = v24 + 1;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
        v27 = 0xFFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      if (v27 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v28 = (char *)operator new(16 * v27);
      v29 = &v28[16 * v24];
      v30 = &v28[16 * v27];
      *(_QWORD *)v29 = v19;
      *((_DWORD *)v29 + 2) = v11;
      dispatch_retain(v19);
      v22 = v29 + 16;
      v32 = *(_DWORD **)(v12 + 128);
      v31 = *(_DWORD **)(v12 + 136);
      if (v31 == v32)
      {
        *(_QWORD *)(v12 + 128) = v29;
        *(_QWORD *)(v12 + 136) = v22;
        *(_QWORD *)(v12 + 144) = v30;
        if (!v31)
          goto LABEL_31;
      }
      else
      {
        do
        {
          v34 = *((_QWORD *)v31 - 2);
          v31 -= 4;
          v33 = v34;
          *((_QWORD *)v29 - 2) = v34;
          v29 -= 16;
          *((_DWORD *)v29 + 2) = v31[2];
          if (v34)
            dispatch_retain(v33);
        }
        while (v31 != v32);
        v35 = *(_DWORD **)(v12 + 128);
        v31 = *(_DWORD **)(v12 + 136);
        *(_QWORD *)(v12 + 128) = v29;
        *(_QWORD *)(v12 + 136) = v22;
        *(_QWORD *)(v12 + 144) = v30;
        if (v31 != v35)
        {
          v36 = v31;
          do
          {
            v38 = *((_QWORD *)v36 - 2);
            v36 -= 4;
            v37 = v38;
            if (v38)
            {
              dispatch_release(v37);
              *((_QWORD *)v31 - 2) = 0;
            }
            v31 = v36;
          }
          while (v36 != v35);
          v31 = v35;
        }
        if (!v31)
          goto LABEL_31;
      }
      operator delete(v31);
    }
    else
    {
      *(_QWORD *)v21 = v19;
      *(_DWORD *)(v21 + 8) = v11;
      dispatch_retain(v19);
      v22 = (char *)(v21 + 16);
    }
LABEL_31:
    *(_QWORD *)(v12 + 136) = v22;
    dispatch_release(v19);
    dispatch_resume(v19);
  }
  std::mutex::unlock(v15);
  *(_DWORD *)buf = MEMORY[0x1B5E5064C]();
  *(_QWORD *)&buf[8] = this;
  if (*((_BYTE *)this + 1800))
    HALS_IOA2Device::_OpenConnection(this);
  v61 = MEMORY[0x1B5E5064C]();
  v62 = this;
  v57 = 0;
  v58 = 0;
  HALS_System::GetInstance(&v59, 0, &v57);
  has_engine_for_device = HALS_IOContext_Manager::has_engine_for_device(*(HALS_IOContext_Manager **)(v59 + 1392), this);
  v40 = v60;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v58;
  if (!v58)
    goto LABEL_43;
  v44 = (unint64_t *)&v58->__shared_owners_;
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
    if (has_engine_for_device)
      goto LABEL_55;
  }
  else
  {
LABEL_43:
    if (has_engine_for_device)
      goto LABEL_55;
  }
  v55 = 0;
  v56 = 0;
  HALS_System::GetInstance(&v59, 0, &v55);
  HALS_IOContext_Manager::create_engine_for_device(*(os_unfair_lock_s **)(v59 + 1392), this);
  v46 = v60;
  if (v60)
  {
    v47 = (unint64_t *)&v60->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v56;
  if (v56)
  {
    v50 = (unint64_t *)&v56->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
LABEL_55:
  HALS_Device::Activate((const __CFString **)this);
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_4,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&v61);
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_3,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)buf);
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_2,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&v65);
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_1,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&v67);
  return applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&v69);
}

void sub_1B599ED68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;

  MEMORY[0x1B5E50688](v26, 0x10E1C407563A043);
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_1,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&a24);
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void HALS_IOA2Device::~HALS_IOA2Device(HALS_IOA2Device *this)
{
  HALS_IOA2Device::~HALS_IOA2Device(this);
  JUMPOUT(0x1B5E50688);
}

{
  uint64_t v2;
  HALS_Object *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  uint64_t i;
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  *(_QWORD *)this = off_1E69786F8;
  v2 = *((_QWORD *)this + 222);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    HALS_ObjectMap::ObjectIsDead(*((HALS_ObjectMap **)this + 222), v3);
    *((_QWORD *)this + 222) = 0;
  }
  v13 = 0;
  v14 = 0;
  HALS_System::GetInstance(&v15, 0, &v13);
  HALS_IOContext_Manager::destroy_engine_for_device(*(os_unfair_lock_s **)(v15 + 1392), this);
  v4 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 238));
  CACFArray::~CACFArray((HALS_IOA2Device *)((char *)this + 1880));
  HALB_MachPort::~HALB_MachPort((mach_port_name_t *)this + 462);
  HALB_UCObject::~HALB_UCObject((HALS_IOA2Device *)((char *)this + 1808));
  OS::CF::UntypedObject::~UntypedObject((HALS_IOA2Device *)((char *)this + 1784));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_IOA2Device *)((char *)this + 1456));
  std::__tree<std::__value_type<CAPropertyAddress,unsigned int>,std::__map_value_compare<CAPropertyAddress,std::__value_type<CAPropertyAddress,unsigned int>,CAPropertyAddress::LessThan,false>,std::allocator<std::__value_type<CAPropertyAddress,unsigned int>>>::~__tree((uint64_t)this + 1400);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 173));
  v10 = (void *)*((_QWORD *)this + 169);
  if (v10)
  {
    *((_QWORD *)this + 170) = v10;
    operator delete(v10);
  }
  for (i = 0; i != -48; i -= 24)
  {
    v12 = *(void **)((char *)this + i + 1328);
    if (v12)
    {
      *(_QWORD *)((char *)this + i + 1336) = v12;
      operator delete(v12);
    }
  }
  HALS_Device::~HALS_Device(this);
}

uint64_t HALS_IOA2Device::_Deactivate(HALS_IOA2Device **this)
{
  HALS_IOA2Device *v2;
  int v3;
  AMCP::Utility::Dispatch_Queue *v4;

  HALS_IOA2Device::_CloseConnection(this);
  HALS_IOA2Device::_TeardownStreams((HALS_IOA2Device *)this);
  HALS_IOA2Device::_TeardownControls((HALS_IOA2Device *)this);
  if (*((_BYTE *)this + 1864))
  {
    v2 = this[234];
    if (v2)
      (*(void (**)(HALS_IOA2Device *))(*(_QWORD *)v2 + 8))(v2);
    *((_BYTE *)this + 1864) = 0;
    this[234] = 0;
  }
  v3 = *((_DWORD *)this + 462);
  *((_DWORD *)this + 462) = 0;
  v4 = (AMCP::Utility::Dispatch_Queue *)(*((uint64_t (**)(HALS_IOA2Device **))*this + 8))(this);
  AMCP::Utility::Dispatch_Queue::remove_mach_port_receiver(v4, v3);
  return HALS_Device::_Deactivate((HALS_Device *)this);
}

uint64_t HALS_IOA2Device::CopyResourceBundle(HALS_IOA2Device *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK15HALS_IOA2Device18CopyResourceBundleEv_block_invoke;
  v4[3] = &unk_1E69791B8;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B599EF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOA2Device::IsPropertySettable(AudioObjectPropertyAddress *this, unsigned int a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector;
  int v8;
  uint64_t IsPropertySettable;
  HALB_Mutex *v11;
  const BOOL *v12;
  unsigned int *v13;
  HALS_Object *v14;
  _DWORD *exception;
  _QWORD v16[8];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t (*v21)();
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[8];
  uint64_t v29;

  if (((*(uint64_t (**)(AudioObjectPropertyAddress *))(*(_QWORD *)&this->mSelector + 88))(this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1751474531)
  {
    if (mSelector == 1751474532 || mSelector == 1919251299)
      return 0;
    v8 = 1919251302;
  }
  else
  {
    if (mSelector == 1635087471)
      return 0;
    if (mSelector == 1667329635)
      return 1;
    v8 = 1668641652;
  }
  if (mSelector == v8)
    return 0;
  HALS_IOA2Device::GetCustomPropertyInfoByAddress((HALS_IOA2Device *)v28, this, (CAPropertyAddress *)a3);
  if (v29)
  {
    IsPropertySettable = 0;
  }
  else
  {
    v24 = 0;
    v25 = &v24;
    v26 = 0x2000000000;
    v27 = 0;
    v17 = 0;
    v18 = &v17;
    v19 = 0x3802000000;
    v20 = __Block_byref_object_copy__22;
    v21 = __Block_byref_object_dispose__23;
    v22 = 0;
    v23 = 0;
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 0x40000000;
    v16[2] = ___ZNK15HALS_IOA2Device18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke;
    v16[3] = &unk_1E6978CB8;
    v16[6] = this;
    v16[7] = a3;
    v16[4] = &v24;
    v16[5] = &v17;
    v11 = (HALB_Mutex *)(*(uint64_t (**)(AudioObjectPropertyAddress *))(*(_QWORD *)&this->mSelector + 56))(this);
    HALB_CommandGate::ExecuteCommand(v11, (uint64_t)v16);
    v13 = (unsigned int *)v25[3];
    if (v13)
    {
      IsPropertySettable = (*(uint64_t (**)(unsigned int *, _QWORD, uint64_t *, AudioObjectPropertyAddress *))(*(_QWORD *)v13 + 96))(v13, v13[4], v18 + 5, a4);
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v25[3], v14);
    }
    else
    {
      IsPropertySettable = HALS_Device::IsPropertySettable((HALS_Device *)this, v12, a3, a4);
    }
    _Block_object_dispose(&v17, 8);
    _Block_object_dispose(&v24, 8);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v28);
  return IsPropertySettable;
}

void sub_1B599F19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 80), 8);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v10 - 48));
  _Unwind_Resume(a1);
}

uint64_t HALS_IOA2Device::GetPropertyDataSize(HALS_IOA2Device *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, int *a5, AudioObjectPropertyAddress *a6)
{
  signed int mSelector;
  uint64_t PropertyDataSize;
  HALB_Mutex *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  void *v22;
  int v23;
  HALB_Mutex *v24;
  HALB_Mutex *v25;
  const BOOL *v26;
  unsigned int *v27;
  HALS_Object *v28;
  uint64_t v29;
  double *v30;
  double *v31;
  int v32;
  HALS_Object *v33;
  _DWORD *exception;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  _QWORD v39[8];
  _QWORD v40[6];
  int v41;
  void *__p;
  char *v43;
  uint64_t v44;
  _QWORD v45[6];
  double *v46[4];
  _BYTE buf[24];
  uint64_t (*v48)(uint64_t, uint64_t);
  void (*v49)(uint64_t, HALS_Object *);
  HALS_ObjectMap *v50;
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_IOA2Device *, uint64_t, AudioObjectPropertyAddress *, AudioObjectPropertyAddress *))(*(_QWORD *)this + 88))(this, a2, a3, a6) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  PropertyDataSize = 4;
  if ((int)a3->mSelector > 1751474531)
  {
    if (mSelector > 1919251298)
    {
      if (mSelector == 1919251299 || mSelector == 1919251302)
        return PropertyDataSize;
      if (mSelector != 1920168547)
        goto LABEL_25;
      return 8;
    }
    if (mSelector == 1751474532)
      return 8;
    if (mSelector == 1853059619)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3002000000;
      v48 = __Block_byref_object_copy__27;
      v49 = __Block_byref_object_dispose__28;
      v50 = 0;
      v45[0] = MEMORY[0x1E0C809B0];
      v45[1] = 0x40000000;
      v45[2] = ___ZNK15HALS_IOA2Device19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
      v45[3] = &unk_1E6978CE0;
      v45[4] = buf;
      v45[5] = this;
      v13 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v13, (uint64_t)v45);
      v14 = *(unsigned int **)(*(_QWORD *)&buf[8] + 40);
      if (v14)
      {
        v15 = v14[4];
        strcpy((char *)v46, "atfpbolg");
        BYTE1(v46[1]) = 0;
        WORD1(v46[1]) = 0;
        v16 = (*(unsigned int (**)(unsigned int *, uint64_t, double **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v14 + 104))(v14, v15, v46, 0, 0, 0)/ 0x38;
        v17 = operator new[]();
        v18 = *(unsigned int **)(*(_QWORD *)&buf[8] + 40);
        v19 = v18[4];
        strcpy((char *)v46, "atfpbolg");
        BYTE1(v46[1]) = 0;
        WORD1(v46[1]) = 0;
        LODWORD(__p) = 0;
        (*(void (**)(unsigned int *, uint64_t, double **, _QWORD, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v18 + 112))(v18, v19, v46, 56 * v16, &__p, v17, 0, 0, 0);
        v20 = __p;
        v21 = __p / 0x38uLL;
        memset(v46, 0, 24);
        __p = 0;
        v43 = 0;
        v44 = 0;
        std::vector<CAAudioValueRange>::reserve((void **)v46, v21);
        std::vector<CAAudioValueRange>::reserve(&__p, v21);
        if (v20 > 0x37)
        {
          if (v21 <= 1)
            v29 = 1;
          else
            v29 = v21;
          v30 = (double *)(v17 + 40);
          do
          {
            CAAudioValueRange_ComputeUnion(v30, v46, (char **)&__p);
            v22 = __p;
            std::vector<CAAudioValueRange>::__assign_with_size[abi:ne180100]<CAAudioValueRange*,CAAudioValueRange*>(v46, (char *)__p, v43, (v43 - (_BYTE *)__p) >> 4);
            v30 += 7;
            --v29;
          }
          while (v29);
        }
        else
        {
          v22 = __p;
        }
        v31 = v46[0];
        v32 = LODWORD(v46[1]) - LODWORD(v46[0]);
        if (v22)
          operator delete(v22);
        PropertyDataSize = v32 & 0xFFFFFFF0;
        if (v31)
          operator delete(v31);
        MEMORY[0x1B5E50664](v17, 0x1000C8021716A34);
      }
      else
      {
        PropertyDataSize = 16;
      }
      _Block_object_dispose(buf, 8);
      HALS_ObjectMap::ReleaseObject(v50, v33);
      return PropertyDataSize;
    }
LABEL_25:
    HALS_IOA2Device::GetCustomPropertyInfoByAddress((HALS_IOA2Device *)&__p, (const AudioObjectPropertyAddress *)this, (CAPropertyAddress *)a3);
    if (v43)
    {
      PropertyDataSize = 8;
    }
    else
    {
      v46[0] = 0;
      v46[1] = (double *)v46;
      v46[2] = (double *)0x2000000000;
      v46[3] = 0;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3802000000;
      v48 = __Block_byref_object_copy__22;
      v49 = (void (*)(uint64_t, HALS_Object *))__Block_byref_object_dispose__23;
      v50 = 0;
      v51 = 0;
      v39[0] = MEMORY[0x1E0C809B0];
      v39[1] = 0x40000000;
      v39[2] = ___ZNK15HALS_IOA2Device19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_34;
      v39[3] = &unk_1E6978D30;
      v39[6] = this;
      v39[7] = a3;
      v39[4] = v46;
      v39[5] = buf;
      v25 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v39);
      v27 = (unsigned int *)*((_QWORD *)v46[1] + 3);
      if (v27)
      {
        PropertyDataSize = (*(uint64_t (**)(unsigned int *, _QWORD, uint64_t, uint64_t, int *, AudioObjectPropertyAddress *))(*(_QWORD *)v27 + 104))(v27, v27[4], *(_QWORD *)&buf[8] + 40, a4, a5, a6);
        HALS_ObjectMap::ReleaseObject(*((HALS_ObjectMap **)v46[1] + 3), v28);
      }
      else
      {
        PropertyDataSize = HALS_Device::GetPropertyDataSize((HALS_Device ***)this, v26, a3, a4, a5, a6);
      }
      _Block_object_dispose(buf, 8);
      _Block_object_dispose(v46, 8);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&__p);
    return PropertyDataSize;
  }
  if (mSelector <= 1667329634)
  {
    if (mSelector == 1634429294 || mSelector == 1635087471)
      return PropertyDataSize;
    goto LABEL_25;
  }
  if (mSelector != 1667329635)
  {
    if (mSelector == 1668641652)
      return 12 * OS::CF::ArrayBase<__CFArray const*>::GetSize(*((const __CFArray **)this + 224));
    goto LABEL_25;
  }
  if ((_DWORD)a4 != 4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1144;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_GetPropertyDataSize: bad qualifier data size for property 'canc'", buf, 0x12u);
    }
    v36 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v36 = &off_1E69A1B30;
    v36[2] = 561211770;
  }
  if (!a5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1145;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_GetPropertyDataSize: inQualifierData was NULL for property 'canc'", buf, 0x12u);
    }
    v37 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v37 = &off_1E69A1B30;
    v37[2] = 2003329396;
  }
  v23 = *a5;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3802000000;
  v48 = __Block_byref_object_copy__30;
  v49 = (void (*)(uint64_t, HALS_Object *))__Block_byref_object_dispose__31;
  v50 = 0;
  v51 = 0;
  v40[0] = MEMORY[0x1E0C809B0];
  v40[1] = 0x40000000;
  v40[2] = ___ZNK15HALS_IOA2Device19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_32;
  v40[3] = &unk_1E6978D08;
  v41 = v23;
  v40[4] = buf;
  v40[5] = this;
  v24 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v24, (uint64_t)v40);
  if (!*(_QWORD *)(*(_QWORD *)&buf[8] + 40))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(v46[0]) = 136315394;
      *(double **)((char *)v46 + 4) = (double *)"HALS_IOA2Device.cpp";
      WORD2(v46[1]) = 1024;
      *(_DWORD *)((char *)&v46[1] + 6) = 1157;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_GetPropertyDataSize: bad block ID for property 'canc'", (uint8_t *)v46, 0x12u);
    }
    v38 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v38 = &off_1E69A1B30;
    v38[2] = 2003329396;
  }
  PropertyDataSize = *(unsigned int *)(*(_QWORD *)&buf[8] + 48);
  _Block_object_dispose(buf, 8);
  return PropertyDataSize;
}

void sub_1B599F954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p)
{
  uint64_t v26;
  uint64_t v27;
  HALS_Object *v29;

  MEMORY[0x1B5E50664](v26, 0x1000C8021716A34);
  _Block_object_dispose((const void *)(v27 - 144), 8);
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(v27 - 104), v29);
  _Unwind_Resume(a1);
}

void HALS_IOA2Device::GetPropertyData(HALS_IOA2Device *this, const BOOL *a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4, unsigned int *a5, unsigned int *a6, unsigned int a7, int *a8, HALS_Client *a9)
{
  uint64_t v14;
  uint64_t v15;
  signed int mSelector;
  AudioObjectPropertyScope mScope;
  unint64_t v18;
  unsigned __int8 v19;
  int v20;
  HALB_Mutex *v21;
  HALB_Mutex *v22;
  HALB_Mutex *v23;
  HALB_Mutex *v24;
  int v25;
  HALB_Mutex *v26;
  HALB_Mutex *v27;
  HALB_Mutex *v28;
  HALB_Mutex *v29;
  HALB_Mutex *v30;
  HALB_Mutex *v31;
  HALB_Mutex *v32;
  HALB_Mutex *v33;
  HALB_Mutex *v34;
  HALB_Mutex *v35;
  unint64_t Size;
  unint64_t v37;
  CFIndex v38;
  char *v39;
  _QWORD *v40;
  unsigned int v41;
  HALB_Mutex *v42;
  unsigned int *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  double *v52;
  const __CFNumber *v53;
  const __CFNumber *v54;
  unint64_t v55;
  size_t v56;
  HALB_Mutex *v57;
  HALB_Mutex *v58;
  HALB_Mutex *v59;
  unsigned int TotalNumberChannelsForClient;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  _QWORD *v66;
  HALB_Mutex *v67;
  const __CFArray *v68;
  unint64_t v69;
  _DWORD *v70;
  HALB_Mutex *v71;
  HALB_Mutex *v72;
  HALB_Mutex *v73;
  CFTypeRef v74;
  HALB_Mutex *v75;
  void **p_p;
  HALB_Mutex *v77;
  unsigned int *v78;
  HALS_Object *v79;
  HALB_Mutex *v80;
  double NominalSampleRate;
  unsigned int v82;
  HALS_Object *v83;
  _DWORD *exception;
  _DWORD *v85;
  _DWORD *v86;
  _DWORD *v87;
  _DWORD *v88;
  _DWORD *v89;
  _DWORD *v90;
  _DWORD *v91;
  _DWORD *v92;
  _DWORD *v93;
  _DWORD *v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  _DWORD *v98;
  _DWORD *v99;
  _DWORD *v100;
  _DWORD *v101;
  _DWORD *v102;
  _DWORD *v103;
  _DWORD *v104;
  _DWORD *v105;
  _DWORD *v106;
  _DWORD *v107;
  _DWORD *v108;
  _DWORD *v109;
  _DWORD *v110;
  int v111;
  _DWORD *v112;
  void *v114[2];
  _QWORD v117[8];
  _QWORD v118[5];
  _QWORD v119[3];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _BYTE v123[16];
  _QWORD v124[9];
  int v125;
  int v126;
  uint64_t v127;
  const __CFNumber *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD v131[6];
  _QWORD v132[6];
  void *__p;
  CFTypeRef cf;
  uint64_t v135;
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  BOOL v139;
  _QWORD v140[9];
  _QWORD v141[6];
  _QWORD v142[10];
  BOOL v143;
  _QWORD v144[8];
  _QWORD v145[8];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[7];
  _QWORD v151[7];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _BYTE buf[24];
  uint64_t (*v156)(uint64_t, uint64_t);
  uint64_t (*v157)();
  HALS_ObjectMap *v158;
  uint64_t v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_IOA2Device *, const BOOL *, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  v14 = (*(uint64_t (**)(HALS_IOA2Device *, HALS_Client *))(*(_QWORD *)this + 696))(this, a9);
  mSelector = a3->mSelector;
  mScope = a3->mScope;
  if ((int)a3->mSelector <= 1819173228)
  {
    if (mSelector > 1735354733)
    {
      if (mSelector > 1751737453)
      {
        if (mSelector > 1818455661)
        {
          if (mSelector == 1818455662)
          {
            if (a4 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1271;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioObjectPropertyElementNumberName", buf, 0x12u);
              }
              v104 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v104 = &off_1E69A1B30;
              v104[2] = 561211770;
            }
            v150[0] = MEMORY[0x1E0C809B0];
            v150[1] = 0x40000000;
            v150[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_45;
            v150[3] = &__block_descriptor_tmp_46;
            v150[4] = this;
            v150[5] = a6;
            v150[6] = a3;
            v59 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v59, (uint64_t)v150);
            goto LABEL_136;
          }
          if (mSelector == 1819107691)
          {
            if (a4 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1253;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioObjectPropertyManufacturer", buf, 0x12u);
              }
              v98 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v98 = &off_1E69A1B30;
              v98[2] = 561211770;
            }
            v152[0] = MEMORY[0x1E0C809B0];
            v152[1] = 0x40000000;
            v152[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_41;
            v152[3] = &__block_descriptor_tmp_42;
            v152[4] = this;
            v152[5] = a6;
            v31 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v31, (uint64_t)v152);
            goto LABEL_136;
          }
          goto LABEL_129;
        }
        if (mSelector != 1751737454)
        {
          if (mSelector == 1818452846)
          {
            if (a4 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1262;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioObjectPropertyElementCategoryName", buf, 0x12u);
              }
              v90 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v90 = &off_1E69A1B30;
              v90[2] = 561211770;
            }
            v151[0] = MEMORY[0x1E0C809B0];
            v151[1] = 0x40000000;
            v151[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_43;
            v151[3] = &__block_descriptor_tmp_44_3972;
            v151[4] = this;
            v151[5] = a6;
            v151[6] = a3;
            v23 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v23, (uint64_t)v151);
            goto LABEL_136;
          }
LABEL_129:
          HALS_IOA2Device::GetCustomPropertyInfoByAddress((HALS_IOA2Device *)&__p, (const AudioObjectPropertyAddress *)this, (CAPropertyAddress *)a3);
          v74 = cf;
          if (cf)
          {
            if (a4 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1650;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for a custom property", buf, 0x12u);
              }
              v112 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v112 = &off_1E69A1B30;
              v112[2] = 561211770;
            }
            v118[0] = MEMORY[0x1E0C809B0];
            v118[1] = 1174405120;
            v118[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_88;
            v118[3] = &__block_descriptor_tmp_91;
            v118[4] = this;
            CFRetain(cf);
            v119[0] = &off_1E69A0DE0;
            v119[1] = v74;
            v119[2] = a6;
            v75 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v75, (uint64_t)v118);
            *a5 = 8;
            OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v119);
          }
          else
          {
            v127 = 0;
            v128 = (const __CFNumber *)&v127;
            v129 = 0x2000000000;
            v130 = 0;
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x3802000000;
            v156 = __Block_byref_object_copy__22;
            v157 = __Block_byref_object_dispose__23;
            v158 = 0;
            LODWORD(v159) = 0;
            v117[0] = MEMORY[0x1E0C809B0];
            v117[1] = 0x40000000;
            v117[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_92;
            v117[3] = &unk_1E6979088;
            v117[6] = this;
            v117[7] = a3;
            v117[4] = &v127;
            v117[5] = buf;
            v77 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v77, (uint64_t)v117);
            v78 = (unsigned int *)*((_QWORD *)v128 + 3);
            if (v78)
            {
              (*(void (**)(unsigned int *, _QWORD, uint64_t, AudioObjectPropertyAddress *, unsigned int *, unsigned int *, _QWORD, int *, HALS_Client *))(*(_QWORD *)v78 + 112))(v78, v78[4], *(_QWORD *)&buf[8] + 40, a4, a5, a6, a7, a8, a9);
              HALS_ObjectMap::ReleaseObject(*((HALS_ObjectMap **)v128 + 3), v79);
            }
            else
            {
              HALS_Device::GetPropertyData(this, a2, a3, a4, a5, a6, (void *)a7, a8, a9);
            }
            _Block_object_dispose(buf, 8);
            _Block_object_dispose(&v127, 8);
          }
          p_p = &__p;
LABEL_149:
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)p_p);
          return;
        }
      }
      else
      {
        if (mSelector <= 1751412336)
        {
          if (mSelector == 1735354734 || mSelector == 1735356005)
          {
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1330;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceIsRunning", buf, 0x12u);
              }
              v85 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v85 = &off_1E69A1B30;
              v85[2] = 561211770;
            }
            *a6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 222) + 672))(*((_QWORD *)this + 222));
            goto LABEL_126;
          }
          goto LABEL_129;
        }
        if (mSelector != 1751412337)
        {
          if (mSelector == 1751474532)
          {
            if (a4 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1607;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyHeadsetInfo", buf, 0x12u);
              }
              v96 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v96 = &off_1E69A1B30;
              v96[2] = 561211770;
            }
            v122[0] = MEMORY[0x1E0C809B0];
            v122[1] = 0x40000000;
            v122[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_82;
            v122[3] = &__block_descriptor_tmp_83;
            v122[4] = this;
            v122[5] = a6;
            v29 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v29, (uint64_t)v122);
LABEL_136:
            v41 = 8;
            goto LABEL_137;
          }
          goto LABEL_129;
        }
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1536;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyIsHidden", buf, 0x12u);
        }
        v87 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v87 = &off_1E69A1B30;
        v87[2] = 561211770;
      }
      v132[0] = MEMORY[0x1E0C809B0];
      v132[1] = 0x40000000;
      v132[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_74;
      v132[3] = &__block_descriptor_tmp_75;
      v132[4] = this;
      v132[5] = a6;
      v33 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v33, (uint64_t)v132);
      goto LABEL_126;
    }
    if (mSelector > 1667330159)
    {
      if (mSelector > 1668641651)
      {
        if (mSelector == 1668641652)
        {
          Size = (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(*((const __CFArray **)this + 224));
          if (Size >= a4 / 0xCuLL)
            v37 = a4 / 0xCuLL;
          else
            v37 = Size;
          if ((_DWORD)v37)
          {
            v38 = 0;
            v39 = (char *)this + 1784;
            v40 = a6 + 1;
            do
            {
              OS::CF::ArrayBase<__CFArray const*>::operator[]((const __CFArray *)v123, (uint64_t)v39, v38);
              OS::CF::UntypedObject::As<OS::CF::Dictionary>(&__p, (uint64_t)v123);
              OS::CF::DictionaryBase<__CFDictionary const*>::operator[]((uint64_t)&v127, (CFDictionaryRef)cf, CFSTR("property selector"));
              OS::CF::UntypedObject::As<OS::CF::Number>(buf, (uint64_t)&v127);
              *((_DWORD *)v40 - 1) = OS::CF::Number::GetValue<unsigned int>(*(const __CFNumber **)&buf[8], 0);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v127);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&__p);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v123);
              *v40 = 1886155636;
              v40 = (_QWORD *)((char *)v40 + 12);
              ++v38;
            }
            while (v37 != v38);
          }
          v41 = 12 * v37;
          goto LABEL_137;
        }
        if (mSelector == 1684434036)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1339;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceCanBeDefaultDevice", buf, 0x12u);
            }
            v94 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v94 = &off_1E69A1B30;
            v94[2] = 561211770;
          }
          v145[0] = MEMORY[0x1E0C809B0];
          v145[1] = 0x40000000;
          v145[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_57;
          v145[3] = &__block_descriptor_tmp_58;
          v145[4] = this;
          v145[5] = a6;
          v145[6] = a3;
          v145[7] = a9;
          v28 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v28, (uint64_t)v145);
          goto LABEL_126;
        }
      }
      else
      {
        if (mSelector == 1667330160)
        {
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1280;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyConfigurationApplication", buf, 0x12u);
            }
            v100 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v100 = &off_1E69A1B30;
            v100[2] = 561211770;
          }
          v149[0] = MEMORY[0x1E0C809B0];
          v149[1] = 0x40000000;
          v149[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_47;
          v149[3] = &__block_descriptor_tmp_48;
          v149[4] = this;
          v149[5] = a6;
          v34 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v34, (uint64_t)v149);
          if (!*(_QWORD *)a6)
            *(_QWORD *)a6 = CFRetain(CFSTR("com.apple.audio.AudioMIDISetup"));
          goto LABEL_136;
        }
        if (mSelector == 1668049764)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1320;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyClockDomain", buf, 0x12u);
            }
            v88 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v88 = &off_1E69A1B30;
            v88[2] = 561211770;
          }
          v146[0] = MEMORY[0x1E0C809B0];
          v146[1] = 0x40000000;
          v146[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_55;
          v146[3] = &__block_descriptor_tmp_56;
          v146[4] = this;
          v146[5] = a6;
          v21 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v21, (uint64_t)v146);
          goto LABEL_126;
        }
      }
      goto LABEL_129;
    }
    if (mSelector != 1634429294)
    {
      if (mSelector == 1635087471)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x2000000000;
        LODWORD(v156) = 1;
        v120[0] = MEMORY[0x1E0C809B0];
        v120[1] = 0x40000000;
        v120[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_86;
        v120[3] = &unk_1E6979030;
        v120[4] = buf;
        v120[5] = this;
        v71 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v71, (uint64_t)v120);
        *a6 = *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
        *a5 = 4;
      }
      else
      {
        if (mSelector != 1667329635)
          goto LABEL_129;
        if (a7 != 4)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1553;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyDataSize: bad qualifier data size for property 'canc'", buf, 0x12u);
          }
          v92 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v92 = &off_1E69A1B30;
          v92[2] = 561211770;
        }
        if (!a8)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1554;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyDataSize: inQualifierData was NULL for property 'canc'", buf, 0x12u);
          }
          v109 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v109 = &off_1E69A1B30;
          v109[2] = 2003329396;
        }
        v25 = *a8;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3802000000;
        v156 = __Block_byref_object_copy__30;
        v157 = __Block_byref_object_dispose__31;
        v158 = 0;
        LODWORD(v159) = 0;
        v127 = 0;
        v128 = (const __CFNumber *)&v127;
        v129 = 0x2000000000;
        LODWORD(v130) = 0;
        v124[0] = MEMORY[0x1E0C809B0];
        v124[1] = 0x40000000;
        v124[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_78;
        v124[3] = &unk_1E6978FC8;
        v125 = v25;
        v126 = (int)a4;
        v124[6] = this;
        v124[7] = a5;
        v124[4] = buf;
        v124[5] = &v127;
        v124[8] = a6;
        v26 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v26, (uint64_t)v124);
        if (*((_DWORD *)v128 + 6))
        {
          v110 = __cxa_allocate_exception(0x10uLL);
          v111 = *((_DWORD *)v128 + 6);
          *(_QWORD *)v110 = &off_1E69A1B30;
          v110[2] = v111;
        }
        _Block_object_dispose(&v127, 8);
      }
      _Block_object_dispose(buf, 8);
      return;
    }
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1311;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyRelatedDevices", buf, 0x12u);
      }
      v107 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v107 = &off_1E69A1B30;
      v107[2] = 561211770;
    }
    v20 = *((_DWORD *)this + 4);
LABEL_125:
    *a6 = v20;
LABEL_126:
    v41 = 4;
LABEL_137:
    *a5 = v41;
    return;
  }
  v18 = v14;
  v19 = v15;
  if (mSelector > 1919251298)
  {
    if (mSelector > 1935763059)
    {
      if (mSelector > 1936876643)
      {
        if (mSelector == 1936876644)
        {
          TotalNumberChannelsForClient = HALS_Device::GetTotalNumberChannelsForClient(this, mScope == 1768845428, a9);
          v61 = caulk::numeric::exceptional_mul<unsigned int>(TotalNumberChannelsForClient);
          v62 = caulk::numeric::exceptional_add<unsigned int>(v61);
          if (v62 > a4)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1424;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyDefaultChannelLayout", buf, 0x12u);
            }
            v105 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v105 = &off_1E69A1B30;
            v105[2] = 561211770;
          }
          v63 = v62;
          v64 = (*(uint64_t (**)(HALS_IOA2Device *, BOOL, HALS_Client *))(*(_QWORD *)this + 600))(this, mScope == 1768845428, a9);
          *(_QWORD *)a6 = 0;
          a6[2] = v64;
          if (v64)
          {
            v65 = v64;
            v66 = a6 + 4;
            do
            {
              *((_DWORD *)v66 - 1) = -1;
              *v66 = 0;
              v66[1] = 0;
              v66 = (_QWORD *)((char *)v66 + 20);
              --v65;
            }
            while (v65);
          }
          *a5 = v63;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x3802000000;
          v156 = __Block_byref_object_copy__67;
          v157 = (uint64_t (*)())__Block_byref_object_dispose__68;
          v158 = (HALS_ObjectMap *)&off_1E69A0EA8;
          v159 = 0;
          v138[0] = MEMORY[0x1E0C809B0];
          v138[1] = 0x40000000;
          v138[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_69;
          v138[3] = &unk_1E6978F18;
          v138[5] = this;
          v138[4] = buf;
          v139 = mScope == 1768845428;
          v67 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v67, (uint64_t)v138);
          v68 = *(const __CFArray **)(*(_QWORD *)&buf[8] + 48);
          if (v68)
          {
            v69 = 0;
            v70 = a6 + 3;
            while ((unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v68) > v69 && v69 < a6[2])
            {
              OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Number>(&v127, *(_QWORD *)&buf[8] + 40, v69);
              *v70 = OS::CF::Number::GetValue<unsigned int>(v128, 0);
              v70 += 5;
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v127);
              ++v69;
              v68 = *(const __CFArray **)(*(_QWORD *)&buf[8] + 48);
            }
          }
          _Block_object_dispose(buf, 8);
          p_p = (void **)&v158;
          goto LABEL_149;
        }
        if (mSelector == 1953653102)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1302;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyTransportType", buf, 0x12u);
            }
            v99 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v99 = &off_1E69A1B30;
            v99[2] = 561211770;
          }
          v147[0] = MEMORY[0x1E0C809B0];
          v147[1] = 0x40000000;
          v147[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_53;
          v147[3] = &__block_descriptor_tmp_54;
          v147[4] = this;
          v147[5] = a6;
          v32 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v32, (uint64_t)v147);
          goto LABEL_126;
        }
      }
      else
      {
        if (mSelector == 1935763060)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1405;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertySafetyOffset", buf, 0x12u);
            }
            v102 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v102 = &off_1E69A1B30;
            v102[2] = 561211770;
          }
          v140[0] = MEMORY[0x1E0C809B0];
          v140[1] = 0x40000000;
          v140[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_65;
          v140[3] = &__block_descriptor_tmp_66;
          v140[4] = this;
          v140[5] = a3;
          v140[6] = v14;
          v140[7] = v15;
          v140[8] = a6;
          v57 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v57, (uint64_t)v140);
          goto LABEL_126;
        }
        if (mSelector == 1936092276)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1348;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceCanBeDefaultSystemDevice", buf, 0x12u);
            }
            v91 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v91 = &off_1E69A1B30;
            v91[2] = 561211770;
          }
          v144[0] = MEMORY[0x1E0C809B0];
          v144[1] = 0x40000000;
          v144[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_59;
          v144[3] = &__block_descriptor_tmp_60_3983;
          v144[4] = this;
          v144[5] = a6;
          v144[6] = a3;
          v144[7] = a9;
          v24 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v24, (uint64_t)v144);
          goto LABEL_126;
        }
      }
      goto LABEL_129;
    }
    if (mSelector > 1919512166)
    {
      if (mSelector == 1919512167)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1396;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyZeroTimeStampPeriod", buf, 0x12u);
          }
          v103 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v103 = &off_1E69A1B30;
          v103[2] = 561211770;
        }
        v141[0] = MEMORY[0x1E0C809B0];
        v141[1] = 0x40000000;
        v141[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_63;
        v141[3] = &__block_descriptor_tmp_64;
        v141[4] = this;
        v141[5] = a6;
        v58 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v58, (uint64_t)v141);
        goto LABEL_126;
      }
      if (mSelector == 1920168547)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1545;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyResourceBundle", buf, 0x12u);
          }
          v97 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v97 = &off_1E69A1B30;
          v97[2] = 561211770;
        }
        v131[0] = MEMORY[0x1E0C809B0];
        v131[1] = 0x40000000;
        v131[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_76;
        v131[3] = &__block_descriptor_tmp_77;
        v131[4] = this;
        v131[5] = a6;
        v30 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v30, (uint64_t)v131);
        goto LABEL_136;
      }
      goto LABEL_129;
    }
    if (mSelector != 1919251299 && mSelector != 1919251302)
      goto LABEL_129;
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1636;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyWantsControlsRestored or kAudioDevicePropertyWantsStreamFormatsRestored", buf, 0x12u);
      }
      v86 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v86 = &off_1E69A1B30;
      v86[2] = 561211770;
    }
    v20 = 1;
    goto LABEL_125;
  }
  if (mSelector <= 1836411235)
  {
    switch(mSelector)
    {
      case 1819173229:
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1226;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioObjectPropertyName", buf, 0x12u);
          }
          v108 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v108 = &off_1E69A1B30;
          v108[2] = 561211770;
        }
        v154[0] = MEMORY[0x1E0C809B0];
        v154[1] = 0x40000000;
        v154[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
        v154[3] = &__block_descriptor_tmp_36_3968;
        v154[4] = this;
        v154[5] = a6;
        v73 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v73, (uint64_t)v154);
        goto LABEL_136;
      case 1819569763:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1357;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyLatency", buf, 0x12u);
          }
          v106 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v106 = &off_1E69A1B30;
          v106[2] = 561211770;
        }
        v142[0] = MEMORY[0x1E0C809B0];
        v142[1] = 0x40000000;
        v142[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_61;
        v142[3] = &__block_descriptor_tmp_62;
        v142[4] = this;
        v142[5] = a3;
        v143 = mScope == 1768845428;
        v142[6] = v14;
        v142[7] = v15;
        v142[8] = a9;
        v142[9] = a6;
        v72 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v72, (uint64_t)v142);
        goto LABEL_126;
      case 1819634020:
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1616;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyLegacyUIDList", buf, 0x12u);
          }
          v93 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v93 = &off_1E69A1B30;
          v93[2] = 561211770;
        }
        v121[0] = MEMORY[0x1E0C809B0];
        v121[1] = 0x40000000;
        v121[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_84;
        v121[3] = &__block_descriptor_tmp_85;
        v121[4] = this;
        v121[5] = a6;
        v27 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v27, (uint64_t)v121);
        goto LABEL_136;
    }
    goto LABEL_129;
  }
  if (mSelector <= 1853059618)
  {
    if (mSelector == 1836411236)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1293;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyModelUID", buf, 0x12u);
        }
        v101 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v101 = &off_1E69A1B30;
        v101[2] = 561211770;
      }
      v148[0] = MEMORY[0x1E0C809B0];
      v148[1] = 0x40000000;
      v148[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_51;
      v148[3] = &__block_descriptor_tmp_52;
      v148[4] = this;
      v148[5] = a6;
      v35 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v35, (uint64_t)v148);
      goto LABEL_136;
    }
    if (mSelector == 1851878764)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1235;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA1Device::GetPropertyData: bad property data size for kAudioObjectPropertyName", buf, 0x12u);
        }
        v89 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v89 = &off_1E69A1B30;
        v89[2] = 561211770;
      }
      v153[0] = MEMORY[0x1E0C809B0];
      v153[1] = 0x40000000;
      v153[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_37;
      v153[3] = &__block_descriptor_tmp_40;
      v153[4] = this;
      v153[5] = a6;
      v22 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v22, (uint64_t)v153);
      goto LABEL_136;
    }
    goto LABEL_129;
  }
  if (mSelector != 1853059619)
  {
    if (mSelector == 1853059700)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1448;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyNominalSampleRate", buf, 0x12u);
        }
        v95 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v95 = &off_1E69A1B30;
        v95[2] = 561211770;
      }
      if ((_BYTE)v15)
      {
        *(_QWORD *)a6 = v14;
        return;
      }
      v137[0] = MEMORY[0x1E0C809B0];
      v137[1] = 0x40000000;
      v137[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_71;
      v137[3] = &__block_descriptor_tmp_72;
      v137[4] = this;
      v137[5] = a6;
      v80 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v80, (uint64_t)v137);
      goto LABEL_136;
    }
    goto LABEL_129;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3002000000;
  v156 = __Block_byref_object_copy__27;
  v157 = (uint64_t (*)())__Block_byref_object_dispose__28;
  v158 = 0;
  v136[0] = MEMORY[0x1E0C809B0];
  v136[1] = 0x40000000;
  v136[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
  v136[3] = &unk_1E6978F60;
  v136[5] = this;
  v136[4] = buf;
  v42 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v42, (uint64_t)v136);
  v43 = *(unsigned int **)(*(_QWORD *)&buf[8] + 40);
  if (v43)
  {
    v44 = v43[4];
    v127 = 0x676C6F6270667461;
    LODWORD(v128) = 0;
    v45 = (*(unsigned int (**)(unsigned int *, uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v43 + 104))(v43, v44, &v127, 0, 0, 0)/ 0x38;
    v46 = operator new[]();
    v47 = *(unsigned int **)(*(_QWORD *)&buf[8] + 40);
    v48 = v47[4];
    v127 = 0x676C6F6270667461;
    LODWORD(v128) = 0;
    LODWORD(__p) = 0;
    (*(void (**)(unsigned int *, uint64_t, uint64_t *, _QWORD, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v47 + 112))(v47, v48, &v127, 56 * v45, &__p, v46, 0, 0, 0);
    v49 = __p;
    v50 = __p / 0x38uLL;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    cf = 0;
    __p = 0;
    v135 = 0;
    std::vector<CAAudioValueRange>::reserve((void **)&v127, v50);
    std::vector<CAAudioValueRange>::reserve(&__p, v50);
    if (v49 >= 0x38)
    {
      v51 = v19;
      *(int64x2_t *)v114 = vdupq_n_s64(v18);
      v52 = (double *)(v46 + 40);
      do
      {
        if (v51)
        {
          *((_QWORD *)v52 - 5) = v18;
          *(_OWORD *)v52 = *(_OWORD *)v114;
        }
        CAAudioValueRange_ComputeUnion(v52, (double **)&v127, (char **)&__p);
        std::vector<CAAudioValueRange>::__assign_with_size[abi:ne180100]<CAAudioValueRange*,CAAudioValueRange*>(&v127, (char *)__p, (char *)cf, ((_BYTE *)cf - (_BYTE *)__p) >> 4);
        v52 += 7;
        --v50;
      }
      while (v50);
    }
    v54 = (const __CFNumber *)v127;
    v53 = v128;
    v55 = ((uint64_t)v128 - v127) >> 4;
    if (v55 >= a4 >> 4)
      LODWORD(v55) = a4 >> 4;
    v56 = (16 * v55);
    *a5 = v56;
    if (v53 == v54)
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    memcpy(a6, v54, v56);
    if (__p)
      operator delete(__p);
    if (v54)
      operator delete(v54);
    MEMORY[0x1B5E50664](v46, 0x1000C8021716A34);
  }
  else
  {
    if (v19)
      NominalSampleRate = *(double *)&v18;
    else
      NominalSampleRate = HALS_IOA2UCDevice::GetNominalSampleRate((const __CFDictionary **)this + 226);
    if (a4 < 0x10)
    {
      v82 = 0;
    }
    else
    {
      *(double *)a6 = NominalSampleRate;
      *((double *)a6 + 1) = NominalSampleRate;
      v82 = 16;
    }
    *a5 = v82;
  }
  _Block_object_dispose(buf, 8);
  HALS_ObjectMap::ReleaseObject(v158, v83);
}

void sub_1B59A1E30(_Unwind_Exception *a1)
{
  uint64_t v1;
  HALS_Object *v3;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(v1 - 136), v3);
  _Unwind_Resume(a1);
}

void HALS_IOA2Device::SetPropertyData(HALS_IOA2Device *this, const AudioObjectPropertyAddress *a2, AudioObjectPropertyAddress *a3, uint64_t a4, _DWORD *a5, uint64_t a6, int *a7, HALS_Client *a8)
{
  const AudioObjectPropertyAddress *v16;
  AudioObjectPropertySelector mSelector;
  pid_t v18;
  HALB_Mutex *v19;
  _DWORD *v20;
  int v21;
  int v22;
  HALB_Mutex *v23;
  uint64_t *v24;
  HALB_Mutex *v25;
  unsigned int *v26;
  HALS_Object *v27;
  _DWORD *exception;
  int v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  int v34;
  _QWORD v35[8];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[7];
  int v41;
  int v42;
  _QWORD v43[7];
  _BYTE buf[24];
  uint64_t (*v45)(uint64_t, uint64_t);
  uint64_t (*v46)();
  uint64_t v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_IOA2Device *, const AudioObjectPropertyAddress *, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v29 = 1852797029;
    goto LABEL_24;
  }
  mSelector = a3->mSelector;
  if (!HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, v16))
    goto LABEL_9;
  if (a8)
    v18 = *((_DWORD *)a8 + 58);
  else
    v18 = getpid();
  if (*((_DWORD *)this + 38) != v18 && HALS_Device::GetHogModeOwner(this) != -1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v29 = 560492391;
LABEL_24:
    exception[2] = v29;
  }
  mSelector = a3->mSelector;
LABEL_9:
  if (mSelector == 1667329635)
  {
    if ((_DWORD)a6 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1708;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_SetPropertyData: bad qualifier data size for property 'canc'", buf, 0x12u);
      }
      v31 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v31 = &off_1E69A1B30;
      v31[2] = 561211770;
    }
    if (!a7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1709;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_SetPropertyData: inQualifierData was NULL for property 'canc'", buf, 0x12u);
      }
      v32 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v32 = &off_1E69A1B30;
      v32[2] = 2003329396;
    }
    v22 = *a7;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    LODWORD(v45) = 0;
    v40[0] = MEMORY[0x1E0C809B0];
    v40[1] = 0x40000000;
    v40[2] = ___ZN15HALS_IOA2Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_95;
    v40[3] = &unk_1E69790D8;
    v41 = v22;
    v42 = a4;
    v40[5] = this;
    v40[6] = a5;
    v40[4] = buf;
    v23 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v23, (uint64_t)v40);
    if (*(_DWORD *)(*(_QWORD *)&buf[8] + 24))
    {
      v33 = __cxa_allocate_exception(0x10uLL);
      v34 = *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
      *(_QWORD *)v33 = &off_1E69A1B30;
      v33[2] = v34;
    }
    goto LABEL_17;
  }
  if (mSelector == 1853059700)
  {
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1692;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_SetPropertyData: bad property data size for kAudioDevicePropertyNominalSampleRate", buf, 0x12u);
      }
      v30 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v30 = &off_1E69A1B30;
      v30[2] = 561211770;
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    LODWORD(v45) = 0;
    v43[0] = MEMORY[0x1E0C809B0];
    v43[1] = 0x40000000;
    v43[2] = ___ZN15HALS_IOA2Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
    v43[3] = &unk_1E69790B0;
    v43[5] = this;
    v43[6] = a5;
    v43[4] = buf;
    v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v19, (uint64_t)v43);
    if (*(_DWORD *)(*(_QWORD *)&buf[8] + 24))
    {
      v20 = __cxa_allocate_exception(0x10uLL);
      v21 = *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
      *(_QWORD *)v20 = &off_1E69A1B30;
      v20[2] = v21;
    }
LABEL_17:
    v24 = (uint64_t *)buf;
    goto LABEL_22;
  }
  v36 = 0;
  v37 = &v36;
  v38 = 0x2000000000;
  v39 = 0;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3802000000;
  v45 = __Block_byref_object_copy__22;
  v46 = __Block_byref_object_dispose__23;
  v47 = 0;
  v48 = 0;
  v35[0] = MEMORY[0x1E0C809B0];
  v35[1] = 0x40000000;
  v35[2] = ___ZN15HALS_IOA2Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_97;
  v35[3] = &unk_1E6979100;
  v35[6] = this;
  v35[7] = a3;
  v35[4] = &v36;
  v35[5] = buf;
  v25 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v35);
  v26 = (unsigned int *)v37[3];
  if (v26)
  {
    (*(void (**)(unsigned int *, _QWORD, uint64_t, uint64_t, _DWORD *, uint64_t, int *, HALS_Client *))(*(_QWORD *)v26 + 120))(v26, v26[4], *(_QWORD *)&buf[8] + 40, a4, a5, a6, a7, a8);
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v37[3], v27);
  }
  else
  {
    HALS_Device::SetPropertyData(this, a2, a3, a4, a5, a6, a7, a8);
  }
  _Block_object_dispose(buf, 8);
  v24 = &v36;
LABEL_22:
  _Block_object_dispose(v24, 8);
}

void sub_1B59A2500(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOA2Device::WantsOwnedObjectPropertiesChanged(HALS_IOA2Device *this)
{
  return 1;
}

void HALS_IOA2Device::HandleOwnedObjectPropertiesChanged(HALS_IOA2Device *this, const HALS_Object *a2, unsigned int a3, unsigned int a4, const AudioObjectPropertyAddress *a5, int a6)
{
  unsigned int v12;
  const AudioObjectPropertyAddress *v13;
  _BOOL4 IsSubClass;
  HALB_Info *v15;
  uint64_t v16;
  int v17;
  AudioObjectPropertySelector mSelector;
  AudioObjectPropertySelector *v19;
  unsigned __int16 v20;
  int v21;
  unsigned __int16 v22;
  void *v23;
  HALS_NotificationManager *v24;
  uint64_t v25;
  const AudioObjectPropertyAddress *v26;
  AudioObjectPropertyAddress v27;
  _OWORD v28[2];

  memset(v28, 0, sizeof(v28));
  v12 = *((_DWORD *)a2 + 5);
  IsSubClass = HALB_Info::IsSubClass((HALB_Info *)v12, 1633907820);
  v15 = (HALB_Info *)*((unsigned int *)a2 + 6);
  if (v12 == (_DWORD)v15 || IsSubClass)
  {
    if (v12 != (_DWORD)v15)
      IsSubClass = 1;
    if (!IsSubClass)
      goto LABEL_46;
    goto LABEL_8;
  }
  if (HALB_Info::IsSubClass(v15, 1633907820))
  {
LABEL_8:
    if (!*((_DWORD *)a2 + 42) || !a4)
      goto LABEL_46;
    v26 = a5;
    v16 = a4;
    while (1)
    {
      v17 = *((_DWORD *)a2 + 6);
      if (v17 > 1936483441)
        break;
      if (v17 != 1651273579)
      {
        if (v17 == 1818588780)
        {
          mSelector = a5->mSelector;
          if ((int)a5->mSelector > 1818456931)
          {
            v19 = (AudioObjectPropertySelector *)((char *)a2 + 184);
            if (mSelector == 1818456932)
              goto LABEL_41;
            v19 = (AudioObjectPropertySelector *)((char *)a2 + 172);
            if (mSelector == 1818456950)
              goto LABEL_41;
            v19 = (AudioObjectPropertySelector *)((char *)a2 + 192);
            v22 = 29798;
          }
          else
          {
            v19 = (AudioObjectPropertySelector *)((char *)a2 + 180);
            if (mSelector == 1818453106)
              goto LABEL_41;
            v19 = (AudioObjectPropertySelector *)((char *)a2 + 188);
            if (mSelector == 1818453107)
              goto LABEL_41;
            v19 = (AudioObjectPropertySelector *)((char *)a2 + 176);
            v22 = 25718;
          }
          v21 = v22 | 0x6C630000;
        }
        else
        {
          if (v17 != 1936483188)
            goto LABEL_42;
          mSelector = a5->mSelector;
          if ((int)a5->mSelector > 1935893352)
          {
            v19 = (AudioObjectPropertySelector *)((char *)a2 + 172);
            if (mSelector == 1935893353)
              goto LABEL_41;
            v19 = (AudioObjectPropertySelector *)((char *)a2 + 180);
            v20 = 26990;
          }
          else
          {
            v19 = (AudioObjectPropertySelector *)((char *)a2 + 184);
            if (mSelector == 1668049771)
              goto LABEL_41;
            v19 = (AudioObjectPropertySelector *)((char *)a2 + 176);
            v20 = 24937;
          }
          v21 = v20 | 0x73630000;
        }
        goto LABEL_40;
      }
      v19 = (AudioObjectPropertySelector *)((char *)a2 + 172);
      if (a5->mSelector == 1651272546)
        goto LABEL_41;
      if (a5->mSelector == 1651272548)
      {
        v19 = (AudioObjectPropertySelector *)((char *)a2 + 176);
LABEL_41:
        v27.mSelector = *v19;
        *(_QWORD *)&v27.mScope = *((_QWORD *)a2 + 6);
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v28, &v27, v13);
      }
LABEL_42:
      ++a5;
      if (!--v16)
      {
        v23 = *(void **)&v28[0];
        if (*(_QWORD *)&v28[0] == *((_QWORD *)&v28[0] + 1))
        {
          a5 = v26;
        }
        else
        {
          a5 = v26;
          v24 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
          v25 = -1431655765 * ((*((_QWORD *)&v28[0] + 1) - *(_QWORD *)&v28[0]) >> 2);
          if (a6)
            HALS_Object::PropertiesChanged_Sync(this, v24, a3, v25, *(const AudioObjectPropertyAddress **)&v28[0]);
          else
            HALS_Object::PropertiesChanged(this, v24, a3, v25, *(const AudioObjectPropertyAddress **)&v28[0]);
        }
        goto LABEL_47;
      }
    }
    switch(v17)
    {
      case 1953458028:
        mSelector = a5->mSelector;
        v19 = (AudioObjectPropertySelector *)((char *)a2 + 172);
        v21 = 1650685548;
        break;
      case 1936744814:
        mSelector = a5->mSelector;
        v19 = (AudioObjectPropertySelector *)((char *)a2 + 172);
        if (a5->mSelector == 1936745334)
          goto LABEL_41;
        v19 = (AudioObjectPropertySelector *)((char *)a2 + 176);
        v21 = 1936745315;
        break;
      case 1936483442:
        mSelector = a5->mSelector;
        v19 = (AudioObjectPropertySelector *)((char *)a2 + 172);
        if (a5->mSelector == 1935962742)
          goto LABEL_41;
        v19 = (AudioObjectPropertySelector *)((char *)a2 + 176);
        v21 = 1935962738;
        break;
      default:
        goto LABEL_42;
    }
LABEL_40:
    if (mSelector == v21)
      goto LABEL_41;
    goto LABEL_42;
  }
LABEL_46:
  v23 = 0;
LABEL_47:
  HALS_Device::HandleOwnedObjectPropertiesChanged(this, a2, a3, a4, a5, a6);
  if (v23)
  {
    *((_QWORD *)&v28[0] + 1) = v23;
    operator delete(v23);
  }
}

void sub_1B59A28EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;

  if (v19)
    operator delete(v19);
  _Unwind_Resume(exception_object);
}

void HALS_IOA2Device::create_mcp_engine(HALS_IOA2Device *this@<X0>, _OWORD *a2@<X8>)
{
  const __CFDictionary **v4;
  double NominalSampleRate;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  dispatch_queue_t *v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  int v18;
  CFTypeRef v19;
  void *exception;
  const std::error_category *v21;
  void *v22;
  const std::error_category *v23;
  _OWORD *v24;
  int v25;
  int v26;
  int v27;
  io_connect_t connect;
  void *__p[3];
  void *v30[3];
  CFTypeRef cf;
  CFTypeRef v32;
  io_connect_t v33;
  dispatch_object_t v34[40];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = (const __CFDictionary **)((char *)this + 1808);
  v34[0] = 0;
  HALB_UCObject::CopyProperty_CFString((const __CFDictionary **)this + 226, CFSTR("device UID"), (const __CFString **)v34);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v34[0]);
  NominalSampleRate = HALS_IOA2UCDevice::GetNominalSampleRate(v4);
  LODWORD(v34[0]) = 0;
  HALB_UCObject::CopyProperty_UInt32(v4, CFSTR("clock domain"), (unsigned int *)v34);
  v6 = (int)v34[0];
  LODWORD(v34[0]) = 0;
  HALB_UCObject::CopyProperty_UInt32(v4, CFSTR("input safety offset"), (unsigned int *)v34);
  v7 = (int)v34[0];
  LODWORD(v34[0]) = 0;
  HALB_UCObject::CopyProperty_UInt32(v4, CFSTR("output safety offset"), (unsigned int *)v34);
  v8 = (int)v34[0];
  LODWORD(v34[0]) = 0;
  HALB_UCObject::CopyProperty_UInt32(v4, CFSTR("input latency"), (unsigned int *)v34);
  v9 = (int)v34[0];
  LODWORD(v34[0]) = 0;
  HALB_UCObject::CopyProperty_UInt32(v4, CFSTR("output latency"), (unsigned int *)v34);
  v10 = (int)v34[0];
  v11 = *((unsigned __int8 *)this + 1843);
  LOBYTE(v34[0]) = 0;
  HALB_UCObject::CopyProperty_BOOL(v4, CFSTR("wants input trap"), (BOOL *)v34);
  v12 = LOBYTE(v34[0]);
  LOBYTE(v34[0]) = 0;
  HALB_UCObject::CopyProperty_BOOL(v4, CFSTR("wants output trap"), (BOOL *)v34);
  v27 = LOBYTE(v34[0]);
  LODWORD(v34[0]) = 0;
  HALB_UCObject::CopyProperty_UInt32(v4, CFSTR("io buffer frame size"), (unsigned int *)v34);
  LODWORD(v4) = v34[0];
  make_stream_list((uint64_t)v30, (_QWORD *)this + 166);
  v25 = (int)v4;
  v26 = v12;
  make_stream_list((uint64_t)__p, (_QWORD *)this + 163);
  AMCP::Utility::Dispatch_Queue::create_serial_with_workloop((AMCP::Utility::Dispatch_Queue *)v34, "IOAudio2::Engine Queue");
  v13 = (dispatch_queue_t *)((char *)this + 1456);
  AMCP::Utility::Dispatch_Queue::operator=((NSObject **)this + 182, v34[0]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v34);
  connect = *((_DWORD *)this + 455);
  v14 = IOConnectAddRef(connect);
  if ((_DWORD)v14)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v21 = std::system_category();
    MEMORY[0x1B5E5022C](exception, v14, v21, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  v24 = a2;
  v15 = operator new(0x330uLL);
  v16 = v10;
  v15[1].isa = 0;
  v15[2].isa = 0;
  v15->isa = (Class)&off_1E6979290;
  v33 = connect;
  v17 = IOConnectAddRef(connect);
  if ((_DWORD)v17)
  {
    v22 = __cxa_allocate_exception(0x20uLL);
    v23 = std::system_category();
    MEMORY[0x1B5E5022C](v22, v17, v23, "Error on IOConnectAddRef");
    __cxa_throw(v22, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  v18 = v9;
  v19 = cf;
  if (cf)
    CFRetain(cf);
  v32 = v19;
  AMCP::IOAudio2::Engine::Engine((uint64_t)&v15[3], &v33, &v32, v25, v6, v11 != 0, v7, v8, NominalSampleRate, v18, v16, (uint64_t)v30, (uint64_t)__p, v26 != 0, v27 != 0, v13);
  if (v19)
    CFRelease(v19);
  IOConnectRelease(v33);
  v34[0] = v15 + 3;
  v34[1] = v15;
  std::shared_ptr<AMCP::ASP::Engine>::__enable_weak_this[abi:ne180100]<AMCP::Core::Engine,AMCP::ASP::Engine,void>((uint64_t)v34, &v15[4].isa, (uint64_t)&v15[3]);
  *v24 = *(_OWORD *)v34;
  IOConnectRelease(connect);
  if (__p[0])
    operator delete(__p[0]);
  if (v30[0])
    operator delete(v30[0]);
  if (cf)
    CFRelease(cf);
}

void sub_1B59A2CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, io_connect_t connect, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,const void *a25,__int16 a26,char a27,char a28,int a29,int a30,io_connect_t a31)
{
  void *v31;
  std::__shared_weak_count *v32;
  void *v34;

  __cxa_free_exception(v31);
  std::__shared_weak_count::~__shared_weak_count(v32);
  operator delete(v34);
  IOConnectRelease(connect);
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  applesauce::CF::StringRef::~StringRef(&a25);
  _Unwind_Resume(a1);
}

void sub_1B59A2D84()
{
  JUMPOUT(0x1B59A2D30);
}

uint64_t HALS_IOA2Device::_GetClockAlgorithm(HALS_IOA2Device *this)
{
  return 1835103847;
}

uint64_t HALS_IOA2Device::_GetNumberStreams(HALS_IOA2Device *this, unsigned int a2)
{
  return (*((_QWORD *)this + 3 * a2 + 164) - *((_QWORD *)this + 3 * a2 + 163)) >> 3;
}

HALS_ObjectMap *HALS_IOA2Device::_CopyStreamByIndex(HALS_IOA2Device *this, HALS_Object *a2, unsigned int a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  HALS_ObjectMap *v6;

  v3 = (char *)this + 24 * a2;
  v4 = *((_QWORD *)v3 + 164);
  v5 = *((_QWORD *)v3 + 163);
  if (a3 >= (unint64_t)((v4 - v5) >> 3))
    v6 = 0;
  else
    v6 = *(HALS_ObjectMap **)(v5 + 8 * a3);
  HALS_ObjectMap::RetainObject(v6, a2);
  return v6;
}

HALS_ObjectMap *HALS_IOA2Device::_CopyIOEngine(HALS_ObjectMap **this, HALS_Object *a2)
{
  HALS_ObjectMap::RetainObject(this[222], a2);
  return this[222];
}

void HALS_IOA2Device::_HogModeOwnerChanged(HALS_IOA2Device **this, int a2)
{
  if (!*((_BYTE *)this + 1800))
  {
    if (a2 == -1)
    {
      HALS_IOA2Device::_CloseConnection(this);
    }
    else if (getpid() == a2)
    {
      HALS_IOA2Device::_OpenConnection((HALS_IOA2Device *)this);
    }
  }
}

uint64_t HALS_IOA2Device::_ReadHogModeOwnerStore(HALS_IOA2Device *this)
{
  HALB_UCObject *v1;
  CFTypeRef v2;
  CFTypeID v3;
  uint64_t v4;
  pid_t v6;
  CFTypeRef v7;
  char v8;
  CFTypeRef cf;
  unsigned int valuePtr;

  v1 = (HALS_IOA2Device *)((char *)this + 1808);
  *((_BYTE *)this + 1840) = 1;
  cf = 0;
  if (!HALB_UCObject::CopyProperty_CFType((const __CFDictionary **)this + 226, CFSTR("exclusive access owner"), &cf))
    return 0xFFFFFFFFLL;
  v2 = cf;
  v3 = CFGetTypeID(cf);
  if (v3 != CFNumberGetTypeID())
  {
    CFRelease(v2);
    return 0xFFFFFFFFLL;
  }
  v7 = v2;
  v8 = 0;
  valuePtr = 0;
  if (v2)
  {
    CFNumberGetValue((CFNumberRef)v2, kCFNumberSInt32Type, &valuePtr);
    v4 = valuePtr;
  }
  else
  {
    v4 = 0;
  }
  CACFNumber::~CACFNumber((CACFNumber *)&v7);
  CFRelease(v2);
  if ((_DWORD)v4 != -1)
  {
    v6 = CAProcess::sPID;
    if (CAProcess::sPID == -1)
    {
      v6 = getpid();
      CAProcess::sPID = v6;
    }
    if ((_DWORD)v4 != v6 && ((int)v4 < 1 || kill(v4, 0) && *__error() == 3))
    {
      v4 = 0xFFFFFFFFLL;
      HALB_UCObject::SetProperty_SInt32(v1, (const __CFString *)0xFFFFFFFFLL);
    }
  }
  return v4;
}

void sub_1B59A2FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFNumber::~CACFNumber((CACFNumber *)&a9);
  _Unwind_Resume(a1);
}

void HALS_IOA2Device::_WriteHogModeOwnerStore(HALS_IOA2Device *this, const __CFString *a2)
{
  HALB_UCObject::SetProperty_SInt32((HALS_IOA2Device *)((char *)this + 1808), a2);
}

uint64_t HALS_IOA2Device::_CopyDefaultElementName(HALS_IOA2Device *this)
{
  return 0;
}

uint64_t HALS_IOA2Device::_GetTotalNumberChannels(HALS_IOA2Device *this, unsigned int a2)
{
  char *v2;
  unsigned int **v3;
  uint64_t v4;
  unsigned int ***v5;
  unsigned int *v6;
  uint64_t v7;
  _BYTE v9[28];
  int v10;
  uint64_t v11;
  int v12;
  int v13;

  v2 = (char *)this + 24 * a2;
  v3 = (unsigned int **)*((_QWORD *)v2 + 163);
  if (v3 == *((unsigned int ***)v2 + 164))
    return 0;
  LODWORD(v4) = 0;
  v5 = (unsigned int ***)(v2 + 1312);
  do
  {
    v6 = *v3++;
    v7 = v6[4];
    v11 = 0x676C6F6270667420;
    v12 = 0;
    v13 = 0;
    (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, int *, _BYTE *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v6 + 112))(v6, v7, &v11, 40, &v13, v9, 0, 0, 0);
    v4 = (v10 + v4);
  }
  while (v3 != *v5);
  return v4;
}

void HALS_IOA2Device::_CopyStreamList(uint64_t a1, unsigned int a2, void **a3)
{
  uint64_t v4;
  HALS_Object *v5;
  HALS_ObjectMap **v6;
  HALS_ObjectMap **i;
  HALS_ObjectMap *v8;
  unint64_t v9;
  HALS_ObjectMap **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  HALS_ObjectMap **v16;
  char *v17;
  char *v18;
  HALS_ObjectMap *v19;

  a3[1] = *a3;
  v4 = a1 + 24 * a2;
  std::vector<void const*>::reserve(a3, (uint64_t)(*(_QWORD *)(v4 + 1312) - *(_QWORD *)(v4 + 1304)) >> 3);
  v6 = *(HALS_ObjectMap ***)(v4 + 1304);
  for (i = *(HALS_ObjectMap ***)(v4 + 1312); v6 != i; ++v6)
  {
    HALS_ObjectMap::RetainObject(*v6, v5);
    v8 = *v6;
    v10 = (HALS_ObjectMap **)a3[1];
    v9 = (unint64_t)a3[2];
    if ((unint64_t)v10 >= v9)
    {
      v12 = ((char *)v10 - (_BYTE *)*a3) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v13 = v9 - (_QWORD)*a3;
      v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v15);
      else
        v5 = 0;
      v16 = (HALS_ObjectMap **)(v15 + 8 * v12);
      *v16 = v8;
      v11 = (char *)(v16 + 1);
      v18 = (char *)*a3;
      v17 = (char *)a3[1];
      if (v17 != *a3)
      {
        do
        {
          v19 = (HALS_ObjectMap *)*((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v16 = v19;
        }
        while (v17 != v18);
        v17 = (char *)*a3;
      }
      *a3 = v16;
      a3[1] = v11;
      a3[2] = (void *)(v15 + 8 * (_QWORD)v5);
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v10 = v8;
      v11 = (char *)(v10 + 1);
    }
    a3[1] = v11;
  }
}

void HALS_IOA2Device::_CopyControls(HALS_IOA2Device *this, HALS_Device::BasicControlList *a2)
{
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  HALS_Device::BasicControlList *v4;
  HALS_ObjectMap *v5;
  unint64_t v6;
  HALS_ObjectMap **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  HALS_ObjectMap **v13;
  char *v14;
  char *v15;
  HALS_ObjectMap *v16;

  v2 = (HALS_ObjectMap **)*((_QWORD *)this + 169);
  v3 = (HALS_ObjectMap **)*((_QWORD *)this + 170);
  if (v2 != v3)
  {
    v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, a2);
      v5 = *v2;
      v7 = (HALS_ObjectMap **)*((_QWORD *)v4 + 1);
      v6 = *((_QWORD *)v4 + 2);
      if ((unint64_t)v7 >= v6)
      {
        v9 = ((uint64_t)v7 - *(_QWORD *)v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v10 = v6 - *(_QWORD *)v4;
        v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        else
          a2 = 0;
        v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *v13 = v5;
        v8 = v13 + 1;
        v15 = *(char **)v4;
        v14 = (char *)*((_QWORD *)v4 + 1);
        if (v14 != *(char **)v4)
        {
          do
          {
            v16 = (HALS_ObjectMap *)*((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v13 = v16;
          }
          while (v14 != v15);
          v14 = *(char **)v4;
        }
        *(_QWORD *)v4 = v13;
        *((_QWORD *)v4 + 1) = v8;
        *((_QWORD *)v4 + 2) = v12 + 8 * (_QWORD)a2;
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v7 = v5;
        v8 = v7 + 1;
      }
      *((_QWORD *)v4 + 1) = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

uint64_t HALS_IOA2Device::_GetNumberControls(HALS_IOA2Device *this)
{
  return (*((_QWORD *)this + 170) - *((_QWORD *)this + 169)) >> 3;
}

HALS_ObjectMap *HALS_IOA2Device::_CopyControlByIndex(HALS_IOA2Device *this, HALS_Object *a2)
{
  uint64_t v2;
  HALS_ObjectMap *v3;

  v2 = *((_QWORD *)this + 169);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 170) - v2) >> 3))
    v3 = 0;
  else
    v3 = *(HALS_ObjectMap **)(v2 + 8 * a2);
  HALS_ObjectMap::RetainObject(v3, a2);
  return v3;
}

uint64_t HALS_IOA2Device::_CopyControlByDescription(HALS_IOA2Device *this, int a2, int a3, int a4)
{
  unsigned int *v5;
  HALS_ObjectMap *v6;
  int v8[3];

  v8[0] = a2;
  v8[1] = a3;
  v8[2] = a4;
  v5 = (unsigned int *)std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::find<std::tuple<unsigned int,unsigned int,unsigned int>>((uint64_t)this + 1376, v8);
  if ((unsigned int *)((char *)this + 1384) == v5)
    return 0;
  v6 = (HALS_ObjectMap *)v5[10];
  if (!(_DWORD)v6)
    return 0;
  else
    return HALS_ObjectMap::CopyObjectByObjectID(v6);
}

void HALS_IOA2Device::_ClientDescriptionChanged(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const __CFDictionary *v4;
  const __CFNumber *Value;
  const __CFNumber *v6;
  CFTypeID v7;
  unint64_t v8;
  kern_return_t v9;
  mach_port_t v10;
  kern_return_t v11;
  _DWORD *exception;
  double valuePtr;
  unint64_t v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  kern_return_t v20;
  uint64_t input[3];

  input[2] = *MEMORY[0x1E0C80C00];
  buf[0] = 0;
  HALB_UCObject::CopyProperty_BOOL((const __CFDictionary **)(a1 + 1808), CFSTR("supports client description"), (BOOL *)buf);
  if (!buf[0])
    return;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 728))(a1);
  valuePtr = 0.0;
  v14 = 0;
  if (*(_QWORD *)(a1 + 536) != v2)
  {
    v3 = v2;
    CACFDictionary::GetUInt64(*(_QWORD *)(v2 + 8), CFSTR("kind"), &v14);
    v4 = *(const __CFDictionary **)(v3 + 8);
    if (v4)
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(v4, CFSTR("UsageCaseSampleRate"));
      if (Value)
      {
        v6 = Value;
        v7 = CFGetTypeID(Value);
        if (v7 == CFNumberGetTypeID())
          CFNumberGetValue(v6, kCFNumberFloat64Type, &valuePtr);
      }
    }
    if (v14 != 5)
    {
      if (v14 == 4)
      {
        v8 = 2;
        goto LABEL_14;
      }
      if (v14 != 2)
      {
        v8 = 1;
        goto LABEL_14;
      }
    }
    v8 = 3;
LABEL_14:
    v14 = v8;
    goto LABEL_15;
  }
  v8 = 0;
LABEL_15:
  v9 = 1937010544;
  input[0] = v8;
  input[1] = vcvtd_n_u64_f64(valuePtr - (double)(unint64_t)floor(valuePtr), 0x20uLL)
           + (vcvtmd_u64_f64(valuePtr) << 32);
  v10 = *(_DWORD *)(a1 + 1820);
  if (!v10
    || !*(_BYTE *)(a1 + 1842)
    || (v9 = IOConnectCallMethod(v10, 0xCu, input, 2u, 0, 0, 0, 0, 0, 0)) != 0)
  {
    v11 = v9;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v16 = "HALS_IOA2UCDevice.cpp";
      v17 = 1024;
      v18 = 311;
      v19 = 1024;
      v20 = v11;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::SetClientDescription: got an error when telling the hardware to change client description, Error: 0x%X", buf, 0x18u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v11;
  }
}

void HALS_IOA2Device::PerformNonDriverConfigChange(HALS_IOA2Device *this, int a2, int a3)
{
  uint64_t v5;
  unsigned __int8 v6;
  _QWORD v7[5];
  int v8;
  _OWORD v9[2];

  if (a2)
  {
    memset(v9, 0, sizeof(v9));
    HALS_IOA2Device::HandleConfigChange((unsigned int *)this, (uint64_t)v9);
  }
  else
  {
    v5 = (*(uint64_t (**)(HALS_IOA2Device *))(*(_QWORD *)this + 64))(this);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 0x40000000;
    v7[2] = ___ZN15HALS_IOA2Device28PerformNonDriverConfigChangeEbj_block_invoke;
    v7[3] = &__block_descriptor_tmp_112;
    v7[4] = this;
    v8 = a3;
    v6 = atomic_load((unsigned __int8 *)(v5 + 32));
    if ((v6 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)(v5 + 33));
    dispatch_async(*(dispatch_queue_t *)v5, v7);
  }
}

void sub_1B59A3648(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B59A3638);
}

void HALS_IOA2Device::HandleConfigChange(unsigned int *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  HALB_Mutex *v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  const AudioObjectPropertyAddress *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  HALS_ObjectMap *v17;
  HALS_NotificationManager *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  HALB_Mutex *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  const AudioObjectPropertyAddress *v32;
  const AudioObjectPropertyAddress *v33;
  const AudioObjectPropertyAddress *v34;
  unsigned int *v35;
  unsigned int *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  HALS_ObjectMap *v43;
  HALS_Object *v44;
  HALS_ObjectMap *v45;
  os_unfair_lock_s *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unsigned int v59;
  HALB_Mutex *v60;
  HALS_Object *v61;
  _QWORD v62[6];
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  _QWORD v69[8];
  uint64_t v70;
  std::__shared_weak_count *v71;
  void *__p;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t);
  void (*v79)(uint64_t);
  CFTypeRef v80[3];
  CFTypeRef cf;
  uint64_t v82;
  std::__shared_weak_count *v83;
  _QWORD v84[6];
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  unsigned int *v90;
  uint64_t v91;
  _BYTE v92[18];
  __int16 v93;
  unsigned int *v94;
  __int16 v95;
  unsigned int v96;
  _BYTE buf[40];
  __int128 v98;
  __int128 v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v4 = a1[4];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1860;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = a1 + 39;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v4;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOA2Device::HandleConfigChange: %s|%d: begin --->", buf, 0x22u);
  }
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v85 = 0;
  v86 = &v85;
  v87 = 0x2000000000;
  v88 = 0;
  v5 = MEMORY[0x1E0C809B0];
  v84[0] = MEMORY[0x1E0C809B0];
  v84[1] = 0x40000000;
  v84[2] = ___ZN15HALS_IOA2Device18HandleConfigChangeERK20IOAudio2Notificationj_block_invoke;
  v84[3] = &unk_1E6979128;
  v84[4] = &v85;
  v84[5] = a1;
  v6 = (HALB_Mutex *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v84);
  v82 = 0;
  v83 = 0;
  HALS_System::GetInstance(buf, 0, &v82);
  v7 = *(_QWORD *)buf;
  v8 = (const void *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 200))(a1);
  v9 = v8;
  if (v8)
    CFRetain(v8);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v9);
  HALS_System::GetRawDeviceListUsingClockDevice(v7, (uint64_t)&v89, &cf);
  if (cf)
    CFRelease(cf);
  v11 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v83;
  if (v83)
  {
    p_shared_owners = (unint64_t *)&v83->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (HALS_ObjectMap *)v86[3];
  if (v17)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4802000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__104;
    *(_QWORD *)&buf[32] = __Block_byref_object_dispose__105;
    v98 = 0u;
    v99 = 0u;
    v75 = 0;
    v76 = &v75;
    v77 = 0x4002000000;
    v78 = __Block_byref_object_copy__106;
    v79 = __Block_byref_object_dispose__107;
    memset(v80, 0, sizeof(v80));
    v18 = (HALS_NotificationManager *)a1[4];
    strcpy(v92, "bgfcbolg");
    v92[9] = 0;
    *(_WORD *)&v92[10] = 0;
    HALS_NotificationManager::PropertiesChanged_Sync(v18, 0, 1u, (const AudioObjectPropertyAddress *)v92, v10);
    __p = 0;
    v73 = 0;
    v74 = 0;
    (*(void (**)(HALS_ObjectMap *, void **))(*(_QWORD *)v17 + 216))(v17, &__p);
    v70 = 0;
    v71 = 0;
    HALS_System::GetInstance(v92, 0, &v70);
    HALS_IOContext_Manager::pause_contexts_for_device(*(os_unfair_lock_s **)(*(_QWORD *)v92 + 1392), (HALS_IODevice *)a1);
    v19 = *(std::__shared_weak_count **)&v92[8];
    if (*(_QWORD *)&v92[8])
    {
      v20 = (unint64_t *)(*(_QWORD *)&v92[8] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v71;
    if (v71)
    {
      v23 = (unint64_t *)&v71->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v69[0] = v5;
    v69[1] = 0x40000000;
    v69[2] = ___ZN15HALS_IOA2Device18HandleConfigChangeERK20IOAudio2Notificationj_block_invoke_108;
    v69[3] = &unk_1E6979150;
    v69[6] = a1;
    v69[7] = a2;
    v69[4] = buf;
    v69[5] = &v75;
    v25 = (HALB_Mutex *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 56))(a1);
    HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v69);
    (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v17 + 928))(v17);
    v67 = 0;
    v68 = 0;
    HALS_System::GetInstance(v92, 0, &v67);
    HALS_IOContext_Manager::rebuild_engine_for_device(*(HALS_IOContext_Manager **)(*(_QWORD *)v92 + 1392), (const HALS_IODevice *)a1);
    v26 = *(std::__shared_weak_count **)&v92[8];
    if (*(_QWORD *)&v92[8])
    {
      v27 = (unint64_t *)(*(_QWORD *)&v92[8] + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v68;
    if (v68)
    {
      v30 = (unint64_t *)&v68->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)a1 + 440))(a1)
      && ((*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 432))(a1) & 1) == 0)
    {
      *(_QWORD *)v92 = 0x676C6F6268647370;
      *(_DWORD *)&v92[4] = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 448))(a1);
      *(_DWORD *)&v92[8] = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(*(_QWORD *)&buf[8] + 40), (AudioObjectPropertyAddress *)v92, v32);
    }
    kdebug_trace();
    v33 = *(const AudioObjectPropertyAddress **)(*(_QWORD *)&buf[8] + 40);
    v34 = *(const AudioObjectPropertyAddress **)(*(_QWORD *)&buf[8] + 48);
    if (v33 != v34)
    {
      HALS_Object::PropertiesChanged_Sync((HALS_Object *)a1, (HALS_NotificationManager *)a1[4], 0, -1431655765 * ((unint64_t)((char *)v34 - (char *)v33) >> 2), v33);
      v35 = (unsigned int *)v89;
      v36 = v90;
      if (v89 != v90)
      {
        do
          HALS_Object::PropertiesChanged_Sync((HALS_Object *)a1, (HALS_NotificationManager *)*v35++, 0, -1431655765 * ((*(_QWORD *)(*(_QWORD *)&buf[8] + 48) - *(_QWORD *)(*(_QWORD *)&buf[8] + 40)) >> 2), *(const AudioObjectPropertyAddress **)(*(_QWORD *)&buf[8] + 40));
        while (v35 != v36);
      }
    }
    v37 = v76;
    v38 = v76[5];
    v39 = v76[6] - v38;
    if ((v39 & 0x1FFFFFFFE0) != 0)
    {
      v40 = 0;
      v41 = 0;
      do
      {
        if (v41 >= v39 >> 5)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v42 = v38 + v40;
        if (*(_QWORD *)(v38 + v40) != *(_QWORD *)(v38 + v40 + 8))
        {
          v43 = (HALS_ObjectMap *)*(unsigned int *)(v42 + 24);
          v45 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v43);
          if (v45)
            HALS_Object::PropertiesChanged_Sync((HALS_Object *)a1, v43, 0, -1431655765 * ((*(_QWORD *)(v42 + 8) - *(_QWORD *)v42) >> 2), *(const AudioObjectPropertyAddress **)v42);
          HALS_ObjectMap::ReleaseObject(v45, v44);
          v37 = v76;
        }
        ++v41;
        v38 = v37[5];
        v39 = v37[6] - v38;
        v40 += 32;
      }
      while (v41 < ((unint64_t)v39 >> 5));
    }
    kdebug_trace();
    (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v17 + 232))(v17);
    (*(void (**)(HALS_ObjectMap *, void **))(*(_QWORD *)v17 + 224))(v17, &__p);
    v65 = 0;
    v66 = 0;
    HALS_System::GetInstance(v92, 0, &v65);
    v46 = (os_unfair_lock_s *)(*(_QWORD *)(*(_QWORD *)v92 + 1392) + 16);
    os_unfair_lock_lock(v46);
    os_unfair_lock_unlock(v46);
    v47 = *(std::__shared_weak_count **)&v92[8];
    if (*(_QWORD *)&v92[8])
    {
      v48 = (unint64_t *)(*(_QWORD *)&v92[8] + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = v66;
    if (v66)
    {
      v51 = (unint64_t *)&v66->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v63 = 0;
    v64 = 0;
    HALS_System::GetInstance(v92, 0, &v63);
    HALS_IOContext_Manager::resume_contexts_for_device(*(os_unfair_lock_s **)(*(_QWORD *)v92 + 1392), (HALS_IODevice *)a1);
    v53 = *(std::__shared_weak_count **)&v92[8];
    if (*(_QWORD *)&v92[8])
    {
      v54 = (unint64_t *)(*(_QWORD *)&v92[8] + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = v64;
    if (v64)
    {
      v57 = (unint64_t *)&v64->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v59 = a1[4];
      *(_DWORD *)v92 = 136315906;
      *(_QWORD *)&v92[4] = "HALS_IOA2Device.cpp";
      *(_WORD *)&v92[12] = 1024;
      *(_DWORD *)&v92[14] = 2149;
      v93 = 2080;
      v94 = a1 + 39;
      v95 = 1024;
      v96 = v59;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOA2Device::_HandleConfigChange: %s|%d:   end <---", v92, 0x22u);
    }
    if (__p)
    {
      v73 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(&v75, 8);
    *(_QWORD *)v92 = v80;
    std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)v92);
    _Block_object_dispose(buf, 8);
    if ((_QWORD)v98)
    {
      *((_QWORD *)&v98 + 1) = v98;
      operator delete((void *)v98);
    }
  }
  else
  {
    v62[0] = v5;
    v62[1] = 0x40000000;
    v62[2] = ___ZN15HALS_IOA2Device18HandleConfigChangeERK20IOAudio2Notificationj_block_invoke_110;
    v62[3] = &__block_descriptor_tmp_111;
    v62[4] = a1;
    v62[5] = a2;
    v60 = (HALB_Mutex *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 56))(a1);
    HALB_CommandGate::ExecuteCommand(v60, (uint64_t)v62);
  }
  kdebug_trace();
  HALS_ObjectMap::ReleaseObject(v17, v61);
  _Block_object_dispose(&v85, 8);
  if (v89)
    operator delete(v89);
}

void sub_1B59A3F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  HALS_ObjectMap *v59;
  uint64_t v60;
  HALS_Object *v62;
  void *v63;

  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a35, 8);
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Block_object_dispose((const void *)(v60 - 192), 8);
  v63 = *(void **)(v60 - 152);
  if (v63)
  {
    *(_QWORD *)(v60 - 144) = v63;
    operator delete(v63);
  }
  HALS_ObjectMap::ReleaseObject(v59, v62);
  _Block_object_dispose(&a55, 8);
  if (a59)
    operator delete(a59);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_IOA2Device28PerformNonDriverConfigChangeEbj_block_invoke(uint64_t a1)
{
  unsigned int *v1;
  _OWORD v2[2];

  v1 = *(unsigned int **)(a1 + 32);
  memset(v2, 0, sizeof(v2));
  HALS_IOA2Device::HandleConfigChange(v1, (uint64_t)v2);
}

void sub_1B59A40A8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B59A409CLL);
}

void ___ZN15HALS_IOA2Device18HandleConfigChangeERK20IOAudio2Notificationj_block_invoke(uint64_t a1, HALS_Object *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1776);
  if (v2)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v2;
    HALS_ObjectMap::RetainObject(*(HALS_ObjectMap **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), a2);
  }
}

char *__Block_byref_object_copy__104(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *result;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v3 = a1 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  result = std::vector<CAPropertyAddress>::__init_with_size[abi:ne180100]<CAPropertyAddress*,CAPropertyAddress*>((char *)(a1 + 40), *(uint64_t **)(a2 + 40), *(uint64_t **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2));
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(a2 + 64);
  return result;
}

void __Block_byref_object_dispose__105(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t __Block_byref_object_copy__106(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = a1 + 40;
  *(_QWORD *)(v2 + 16) = 0;
  return std::vector<CAPropertyAddressList>::__init_with_size[abi:ne180100]<CAPropertyAddressList*,CAPropertyAddressList*>(v2, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 5);
}

void __Block_byref_object_dispose__107(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN15HALS_IOA2Device18HandleConfigChangeERK20IOAudio2Notificationj_block_invoke_108(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  CAPropertyAddressListVector *v15;
  const AudioObjectPropertyAddress *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  const AudioObjectPropertyAddress *v25;
  AudioObjectPropertyAddress v26;
  BOOL v27;
  __int16 v28;
  _BYTE v29[16];
  _QWORD *v30;
  uint64_t v31;
  AudioObjectPropertyAddress v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  _BYTE buf[12];
  __int16 v40;
  _BYTE v41[10];
  __int16 v42;
  _QWORD v43[6];

  *(_QWORD *)((char *)&v43[3] + 6) = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v29);
  HALS_DeviceState::Capture((HALS_DeviceState *)v29, (HALS_Device *)v2, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
  v3 = *(_QWORD *)(v2 + 1856);
  *(_QWORD *)(v2 + 1856) = 0;
  HALS_IOA2Device::_UnmapDataExchangeBlocks((HALS_IOA2Device *)v2);
  HALS_IOA2Device::_UnmapBlockControlBuffers(*(HALS_IOA2Device **)(v2 + 1352), *(HALS_IOA2Device **)(v2 + 1360));
  HALS_IOA2Device::_ReleaseIOBuffers((HALS_IOA2Device *)v2);
  kdebug_trace();
  v4 = HALS_IOA2UCDevice::PerformConfigChange(v2 + 1808, *(void **)(a1 + 56));
  kdebug_trace();
  if (v4 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
    v40 = 1024;
    *(_DWORD *)v41 = 1930;
    *(_WORD *)&v41[4] = 1024;
    *(_DWORD *)&v41[6] = v4;
    v42 = 2080;
    v43[0] = v2 + 156;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOA2Device::HandleConfigChange: got an error (0x%X) from the performConfigChange routine of '%s'", buf, 0x22u);
  }
  *(_BYTE *)(v2 + 1840) = 1;
  HALB_UCObject::CacheProperties((HALB_UCObject *)(v2 + 1808));
  v5 = 0;
  v6 = 1;
  do
  {
    v7 = v6;
    v8 = v2 + 24 * v5;
    v9 = *(_QWORD *)(v8 + 1304);
    if (*(_QWORD *)(v8 + 1312) != v9)
    {
      v10 = 0;
      v11 = (uint64_t *)(v8 + 1304);
      v12 = (_QWORD *)(v8 + 1312);
      v13 = 1;
      do
      {
        HALS_IOA2Stream::BuildFormatList(*(HALS_IOA2Stream **)(v9 + 8 * v10));
        v10 = v13;
        v9 = *v11;
        ++v13;
      }
      while (v10 < (*v12 - *v11) >> 3);
    }
    v6 = 0;
    v5 = 1;
  }
  while ((v7 & 1) != 0);
  v28 = 0;
  v27 = 0;
  HALS_IOA2Device::_UpdateStreams(v2, (uint64_t)&v28);
  HALS_IOA2Device::_UpdateControls((HALS_IOA2Device *)v2, &v27);
  HALS_IOA2Device::_MapIOBuffers((HALS_IOA2Device *)v2);
  HALS_IOA2Device::_MapBlockControlBuffers(*(HALS_IOA2Device **)(v2 + 1352), *(HALS_IOA2Device **)(v2 + 1360));
  HALS_IOA2Device::_MapDataExchangeBlocks((HALS_IOA2Device *)v2);
  if (v3)
  {
    v14 = *(unsigned int *)(v2 + 1820);
    if ((_DWORD)v14)
      MEMORY[0x1B5E4FAE8](v14, 0, *MEMORY[0x1E0C83DA0], v3);
  }
  HALS_IOA2UCDevice::MapEngineStatus((HALB_UCObject *)(v2 + 1808), (uint64_t *)(v2 + 1856));
  HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)buf);
  HALS_DeviceState::Capture((HALS_DeviceState *)buf, (HALS_Device *)v2, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
  HALS_DeviceState::Compare((HALS_DeviceState *)v29, (const HALS_DeviceState *)buf, (const AudioObjectPropertyAddress *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), (CAPropertyAddressList **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v15);
  *(_QWORD *)&v26.mSelector = 0x676C6F6200000000;
  if (HIBYTE(v28) | v28)
  {
    v26.mSelector = 1937009955;
    v26.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), &v26, v16);
    if (HIBYTE(v28))
    {
      *(_QWORD *)&v26.mSelector = 0x696E707473746D23;
      v26.mElement = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), &v26, v16);
    }
    if ((_BYTE)v28)
    {
      *(_QWORD *)&v26.mSelector = 0x6F75747073746D23;
      v26.mElement = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), &v26, v16);
    }
  }
  if (v27)
  {
    *(_QWORD *)&v26.mSelector = 0x676C6F626374726CLL;
    v26.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), &v26, v16);
  }
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_QWORD *)(v17 + 40) == *(_QWORD *)(v17 + 48))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v19 = *(uint64_t **)(v18 + 40);
    v20 = *(uint64_t **)(v18 + 48);
    while (v19 != v20)
    {
      v21 = *v19;
      v22 = v19[1];
      v19 += 4;
      if (v21 != v22)
        goto LABEL_26;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v23 = *(_DWORD *)(v2 + 16);
      v32.mSelector = 136315906;
      *(_QWORD *)&v32.mScope = "HALS_IOA2Device.cpp";
      v33 = 1024;
      v34 = 2008;
      v35 = 2080;
      v36 = v2 + 156;
      v37 = 1024;
      v38 = v23;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOA2Device::_HandleConfigChange: %s|%d: but nothing changed", (uint8_t *)&v32, 0x22u);
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    }
  }
LABEL_26:
  *(_QWORD *)&v26.mSelector = 0x676C6F6264696666;
  v26.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v17 + 40), &v26, v16);
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  strcpy((char *)&v32, "egfcbolg");
  BYTE1(v32.mElement) = 0;
  HIWORD(v32.mElement) = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v24 + 40), &v32, v25);
  *(_QWORD *)&v32.mSelector = (char *)v43 + 6;
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(_QWORD **)&v41[2]);
  *(_QWORD *)buf = &v31;
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v30);
}

void sub_1B59A4640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2)
  {
    HALS_DeviceState::~HALS_DeviceState((HALS_DeviceState *)&a25);
    HALS_DeviceState::~HALS_DeviceState((HALS_DeviceState *)&a12);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B59A4604);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN15HALS_IOA2Device18HandleConfigChangeERK20IOAudio2Notificationj_block_invoke_110(uint64_t a1)
{
  return HALS_IOA2UCDevice::PerformConfigChange(*(_QWORD *)(a1 + 32) + 1808, *(void **)(a1 + 40));
}

double HALS_IOA2Device::_UnmapDataExchangeBlocks(HALS_IOA2Device *this)
{
  char *v2;
  char *v3;
  BOOL v4;
  char *v5;
  char *v6;
  double result;

  v2 = (char *)*((_QWORD *)this + 237);
  v3 = (char *)this + 1904;
  if (v2 != (char *)this + 1904)
  {
    do
    {
      if (*((_QWORD *)v2 + 5))
        v4 = *((_DWORD *)this + 455) == 0;
      else
        v4 = 1;
      if (!v4)
        MEMORY[0x1B5E4FAE8]();
      v5 = (char *)*((_QWORD *)v2 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v2 + 2);
          v4 = *(_QWORD *)v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v4);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 238));
  *((_QWORD *)this + 237) = v3;
  result = 0.0;
  *((_OWORD *)this + 119) = 0u;
  return result;
}

void HALS_IOA2Device::_UnmapBlockControlBuffers(HALS_IOA2Device *this, HALS_IOA2Device *a2)
{
  HALS_IOA2Device *v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v12;
  HALS_Object *v13;
  HALS_ObjectMap *v14;
  int v15;
  int v16;
  BOOL v21;
  uint64_t v22;

  if (this != a2)
  {
    v3 = this;
    v4 = (unsigned int *)MEMORY[0x1E0C83DA0];
    do
    {
      v5 = *(_QWORD *)v3;
      v6 = *(_DWORD *)(*(_QWORD *)v3 + 20);
      v7 = *(_DWORD *)(*(_QWORD *)v3 + 24);
      if (v6 == v7)
      {
        if (v6 != 1936028002 && v6 != 1651273579)
          goto LABEL_45;
      }
      else if (v6 != 1651273579 && v6 != 1936028002 && v7 != 1651273579 && v7 != 1936028002)
      {
        goto LABEL_45;
      }
      v12 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v5 + 56));
      v14 = (HALS_ObjectMap *)v12;
      v15 = *(_DWORD *)(v5 + 20);
      v16 = *(_DWORD *)(v5 + 24);
      if (v15 == v16)
      {
        if (v15 == 1936028002 || v15 == 1651273579)
          goto LABEL_37;
      }
      else if (v15 == 1651273579 || v15 == 1936028002 || v16 == 1651273579 || v16 == 1936028002)
      {
LABEL_37:
        if (*(_QWORD *)(v5 + 104))
          v21 = v12 == 0;
        else
          v21 = 1;
        if (!v21)
        {
          v22 = *(unsigned int *)(v12 + 1820);
          if ((_DWORD)v22)
            MEMORY[0x1B5E4FAE8](v22, *(_DWORD *)(v5 + 72) & 0xFFFFFFF | 0x30000000u, *v4);
          *(_QWORD *)(v5 + 104) = 0;
          *(_DWORD *)(v5 + 112) = 0;
        }
      }
      HALS_ObjectMap::ReleaseObject(v14, v13);
LABEL_45:
      v3 = (HALS_IOA2Device *)((char *)v3 + 8);
    }
    while (v3 != a2);
  }
}

void HALS_IOA2Device::_ReleaseIOBuffers(HALS_IOA2Device *this)
{
  uint64_t v2;
  char v3;
  char v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  HALS_Object *v13;
  HALS_ObjectMap *v14;
  int v15;
  BOOL v16;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = (char *)this + 24 * v2;
    v6 = *((_QWORD *)v5 + 163);
    if (*((_QWORD *)v5 + 164) != v6)
    {
      v7 = 0;
      v8 = (uint64_t *)(v5 + 1304);
      v9 = v5 + 1312;
      v10 = 1;
      do
      {
        v11 = *(_QWORD *)(v6 + 8 * v7);
        v12 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v11 + 48));
        v14 = (HALS_ObjectMap *)v12;
        if (v12)
        {
          v15 = *(_DWORD *)(v12 + 1820);
          if (*(_QWORD *)(v11 + 128))
            v16 = v15 == 0;
          else
            v16 = 1;
          if (!v16)
            MEMORY[0x1B5E4FAE8]();
        }
        *(_QWORD *)(v11 + 128) = 0;
        *(_DWORD *)(v11 + 136) = 0;
        HALS_ObjectMap::ReleaseObject(v14, v13);
        v7 = v10;
        v6 = *v8;
        ++v10;
      }
      while (v7 < (*v9 - *v8) >> 3);
    }
    v3 = 0;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
}

void sub_1B59A4998(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_IOA2Device::_UpdateStreams(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFString *v14;
  char v15;
  char v16;
  int Count;
  unsigned int v18;
  void **v19;
  unsigned int **v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  _BOOL4 IsEnabledForAnyClientOrContext;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t i;
  char *v47;
  __int128 v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  int v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v67;
  int v68;
  HALS_Object *v69;
  unint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  HALS_IOA2Stream *v92;
  HALS_Object *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD **v107;
  _QWORD *v108;
  void (***v109)(_QWORD);
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  int8x16_t *v127;
  unint64_t v128;
  uint64_t v129;
  BOOL v130;
  uint64_t j;
  void *v132;
  uint64_t k;
  void *v134;
  void *__p;
  char *v136;
  _BYTE *v137;
  const __CFDictionary **v138;
  BOOL v139;
  char v140;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  unsigned int v145;
  CFArrayRef theArray;
  __int16 v147;
  uint8_t buf[8];
  __int16 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;

  v3 = 0;
  v153 = *MEMORY[0x1E0C80C00];
  v4 = 1;
  do
  {
    v5 = v4;
    *(_BYTE *)(a2 + v3) = 0;
    v6 = a1 + 24 * v3;
    v7 = *(_QWORD *)(v6 + 1312);
    v8 = *(uint64_t **)(v6 + 1304);
    v9 = v7 - (_QWORD)v8;
    v10 = (v7 - (uint64_t)v8) >> 3;
    if ((int)v10 >= 1)
    {
      v11 = (v9 >> 3);
      do
      {
        if (!v10)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v12 = *v8++;
        *(_BYTE *)(v12 + 13) = 0;
        --v10;
        --v11;
      }
      while (v11);
    }
    v4 = 0;
    v3 = 1;
  }
  while ((v5 & 1) != 0);
  v13 = 0;
  v138 = (const __CFDictionary **)(a1 + 1808);
  v151 = 0u;
  v152 = 0u;
  v150 = 0u;
  v14 = CFSTR("output streams");
  v143 = 0u;
  v144 = 0u;
  v142 = 0u;
  v15 = 1;
  do
  {
    v16 = v15;
    theArray = 0;
    HALB_UCObject::CopyProperty_CFArray(v138, v14, &theArray);
    *(_QWORD *)buf = theArray;
    v149 = 1;
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        v18 = 0;
        v19 = (void **)&v142 + 3 * v13;
        v20 = (unsigned int **)(v19 + 1);
        v21 = v19 + 2;
        do
        {
          theArray = 0;
          v147 = 1;
          CACFArray::GetCACFDictionary((CFArrayRef *)buf, v18, (CACFDictionary *)&theArray);
          if (theArray)
          {
            v145 = 0;
            if (CACFDictionary::GetUInt32((uint64_t)theArray, CFSTR("stream ID"), &v145))
            {
              v22 = *v20;
              if ((unint64_t)*v20 >= *v21)
              {
                v24 = (unsigned int *)*v19;
                v25 = ((char *)v22 - (_BYTE *)*v19) >> 2;
                v26 = v25 + 1;
                if ((unint64_t)(v25 + 1) >> 62)
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                v27 = *v21 - (_QWORD)v24;
                if (v27 >> 1 > v26)
                  v26 = v27 >> 1;
                v28 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL;
                v29 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v28)
                  v29 = v26;
                if (v29)
                {
                  v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v29);
                  v22 = *v20;
                  v24 = (unsigned int *)*v19;
                }
                else
                {
                  v30 = 0;
                }
                v31 = (unsigned int *)(v29 + 4 * v25);
                *v31 = v145;
                v23 = v31 + 1;
                while (v22 != v24)
                {
                  v32 = *--v22;
                  *--v31 = v32;
                }
                *v19 = v31;
                *v20 = v23;
                *v21 = v29 + 4 * v30;
                if (v24)
                  operator delete(v24);
              }
              else
              {
                *v22 = v145;
                v23 = v22 + 1;
              }
              *v20 = v23;
            }
          }
          CACFDictionary::~CACFDictionary((CACFDictionary *)&theArray);
          ++v18;
        }
        while (v18 != Count);
      }
    }
    CACFArray::~CACFArray((CACFArray *)buf);
    v15 = 0;
    v14 = CFSTR("input streams");
    v13 = 1;
  }
  while ((v16 & 1) != 0);
  v33 = *(_QWORD *)(a1 + 448);
  IsEnabledForAnyClientOrContext = HALS_ReferenceStreamStateManager::ReferenceStreamIsEnabledForAnyClientOrContext(*(std::__shared_mutex_base **)(a1 + 440));
  v35 = v142;
  v36 = *((_QWORD *)&v143 + 1);
  v37 = v144;
  v38 = operator new(0x50uLL);
  v39 = (*((_QWORD *)&v35 + 1) - (_QWORD)v35) >> 2;
  *v38 = 0;
  v38[1] = v39;
  v40 = a2 + 1;
  v42 = (v33 & 0xFF00000000) != 0 && (_DWORD)v33 == 1 && IsEnabledForAnyClientOrContext;
  *((_QWORD *)v38 + 1) = v35;
  *((_QWORD *)v38 + 2) = 0;
  *((_QWORD *)v38 + 3) = &v150;
  *((_QWORD *)v38 + 4) = a2;
  v38[10] = 1;
  v38[11] = (unint64_t)(v37 - v36) >> 2;
  *((_QWORD *)v38 + 6) = v36;
  *((_QWORD *)v38 + 7) = 1;
  *((_QWORD *)v38 + 8) = (char *)&v151 + 8;
  *((_QWORD *)v38 + 9) = v40;
  if (v42)
  {
    v43 = (char *)v38;
    v44 = (char *)operator new(0xA0uLL);
    v45 = v44;
    *((_DWORD *)v44 + 20) = 0;
    *((_DWORD *)v44 + 21) = v39;
    *((_QWORD *)v44 + 11) = v35;
    *((_QWORD *)v44 + 12) = 0x100000001;
    *((_QWORD *)v44 + 13) = (char *)&v151 + 8;
    *((_QWORD *)v44 + 14) = v40;
    v136 = v44 + 120;
    for (i = 40; i != -40; i -= 40)
    {
      v47 = &v44[i];
      v48 = *(_OWORD *)&v43[i + 16];
      *(_OWORD *)v47 = *(_OWORD *)&v43[i];
      *((_OWORD *)v47 + 1) = v48;
      *((_QWORD *)v47 + 4) = *(_QWORD *)&v43[i + 32];
    }
    operator delete(v43);
    v38 = v45;
  }
  else
  {
    v136 = (char *)(v38 + 20);
  }
  __p = v38;
  v49 = (char *)v38;
  do
  {
    v50 = *((unsigned int *)v49 + 1);
    if ((int)v50 >= 1)
    {
      v51 = 0;
      v52 = *((_QWORD *)v49 + 1);
      v53 = (void **)*((_QWORD *)v49 + 3);
      v137 = (_BYTE *)*((_QWORD *)v49 + 4);
      v54 = *((_DWORD *)v49 + 5);
      v139 = *((_DWORD *)v49 + 4) != 0;
      do
      {
        v55 = 0;
        v56 = 1;
        while (1)
        {
          v57 = v56;
          v58 = a1 + 24 * v55;
          v59 = *(_QWORD *)(v58 + 1312);
          v60 = *(_QWORD *)(v58 + 1304);
          v61 = v59 - v60;
          if (v61)
            break;
LABEL_51:
          v56 = 0;
          v55 = 1;
          if ((v57 & 1) == 0)
          {
            v67 = operator new();
            v68 = *(_DWORD *)(v52 + 4 * v51);
            HALS_Object::HALS_Object((HALS_Object *)v67, 1634956402, 1634956402, a1, v69);
            *(_DWORD *)(v67 + 48) = *(_DWORD *)(a1 + 16);
            *(_BYTE *)(v67 + 52) = v139;
            *(_QWORD *)v67 = off_1E697CF28;
            *(_DWORD *)(v67 + 56) = v54;
            *(_DWORD *)(v67 + 60) = v68;
            *(_BYTE *)(v67 + 64) = 0;
            *(_QWORD *)(v67 + 72) = &off_1E69749F0;
            *(_OWORD *)(v67 + 80) = 0u;
            *(_OWORD *)(v67 + 96) = 0u;
            *(_OWORD *)(v67 + 112) = 0u;
            *(_OWORD *)(v67 + 124) = 0u;
            v71 = (uint64_t *)v53[1];
            v70 = (unint64_t)v53[2];
            if ((unint64_t)v71 >= v70)
            {
              v74 = ((char *)v71 - (_BYTE *)*v53) >> 3;
              if ((unint64_t)(v74 + 1) >> 61)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v75 = v70 - (_QWORD)*v53;
              v76 = v75 >> 2;
              if (v75 >> 2 <= (unint64_t)(v74 + 1))
                v76 = v74 + 1;
              if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
                v77 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v77 = v76;
              if (v77)
                v77 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v77);
              else
                v78 = 0;
              v79 = (uint64_t *)(v77 + 8 * v74);
              *v79 = v67;
              v72 = v79 + 1;
              v81 = (char *)*v53;
              v80 = (char *)v53[1];
              if (v80 != *v53)
              {
                do
                {
                  v82 = *((_QWORD *)v80 - 1);
                  v80 -= 8;
                  *--v79 = v82;
                }
                while (v80 != v81);
                v80 = (char *)*v53;
              }
              *v53 = v79;
              v53[1] = v72;
              v53[2] = (void *)(v77 + 8 * v78);
              if (v80)
                operator delete(v80);
            }
            else
            {
              *v71 = v67;
              v72 = v71 + 1;
            }
            v53[1] = v72;
            v73 = v137;
            goto LABEL_55;
          }
        }
        v62 = 0;
        v63 = v61 >> 3;
        v64 = 1;
        while (1)
        {
          v65 = *(_QWORD *)(v60 + 8 * v62);
          if (*(_DWORD *)(v65 + 60) == *(_DWORD *)(v52 + 4 * v51) && *(_DWORD *)(v65 + 56) == v54)
            break;
          v62 = v64;
          if (v63 <= v64++)
            goto LABEL_51;
        }
        v73 = (_BYTE *)(v65 + 13);
LABEL_55:
        *v73 = 1;
        ++v51;
      }
      while (v51 != v50);
    }
    v49 += 40;
  }
  while (v49 != v136);
  v83 = 0;
  v84 = 1;
  do
  {
    v85 = v84;
    v86 = a1 + 24 * v83;
    v87 = *(_QWORD *)(v86 + 1312) - *(_QWORD *)(v86 + 1304);
    if ((int)(v87 >> 3) >= 1)
    {
      v88 = (_QWORD *)(v86 + 1304);
      v89 = (_QWORD *)(v86 + 1312);
      v90 = (v87 >> 3) + 1;
      while (1)
      {
        v91 = (v90 - 2);
        if (v91 >= (uint64_t)(*v89 - *v88) >> 3)
          break;
        v92 = *(HALS_IOA2Stream **)(*v88 + 8 * v91);
        if (*((_BYTE *)v92 + 13))
        {
          HALS_IOA2Stream::BuildFormatList(v92);
        }
        else
        {
          (*(void (**)(HALS_IOA2Stream *))(*(_QWORD *)v92 + 8))(v92);
          HALS_ObjectMap::ObjectIsDead(v92, v93);
          v94 = *v88 + 8 * v91;
          v95 = *v89 - (v94 + 8);
          if (*v89 != v94 + 8)
            memmove((void *)v94, (const void *)(v94 + 8), *v89 - (v94 + 8));
          *v89 = v94 + v95;
          *(_BYTE *)(a2 + v83) = 1;
        }
        if ((unint64_t)--v90 <= 1)
          goto LABEL_84;
      }
LABEL_126:
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    }
LABEL_84:
    v84 = 0;
    v83 = 1;
  }
  while ((v85 & 1) != 0);
  v96 = 0;
  v97 = 1;
  do
  {
    v98 = v97;
    v99 = (uint64_t *)&v150 + 3 * v96;
    v100 = v99[1];
    v101 = *v99;
    v102 = v100 - *v99;
    if (v100 != *v99)
    {
      v140 = v98;
      v103 = v102 >> 3;
      if ((int)v103 >= 1)
      {
        v104 = 0;
        v105 = a1 + 24 * v96;
        v106 = (_QWORD *)(v105 + 1304);
        v107 = (_QWORD **)(v105 + 1312);
        v108 = (_QWORD *)(v105 + 1320);
        while (v103 > v104)
        {
          v109 = *(void (****)(_QWORD))(v101 + 8 * v104);
          v110 = *v107;
          if ((unint64_t)*v107 >= *v108)
          {
            v112 = ((uint64_t)v110 - *v106) >> 3;
            if ((unint64_t)(v112 + 1) >> 61)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v113 = *v108 - *v106;
            v114 = v113 >> 2;
            if (v113 >> 2 <= (unint64_t)(v112 + 1))
              v114 = v112 + 1;
            if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
              v115 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v115 = v114;
            if (v115)
              v115 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v115);
            else
              v116 = 0;
            v117 = (_QWORD *)(v115 + 8 * v112);
            *v117 = v109;
            v111 = v117 + 1;
            v118 = *v107;
            v119 = (_QWORD *)*v106;
            if (*v107 != (_QWORD *)*v106)
            {
              do
              {
                v120 = *--v118;
                *--v117 = v120;
              }
              while (v118 != v119);
              v118 = (_QWORD *)*v106;
            }
            *v106 = v117;
            *v107 = v111;
            *v108 = v115 + 8 * v116;
            if (v118)
              operator delete(v118);
          }
          else
          {
            *v110 = v109;
            v111 = v110 + 1;
          }
          *v107 = v111;
          (**v109)(v109);
          ++v104;
          v101 = *v99;
          v121 = v99[1] - *v99;
          v103 = v121 >> 3;
          if ((uint64_t)v104 >= (int)((unint64_t)v121 >> 3))
            goto LABEL_107;
        }
        goto LABEL_126;
      }
LABEL_107:
      *(_BYTE *)(a2 + v96) = 1;
      v98 = v140;
    }
    v97 = 0;
    v96 = 1;
  }
  while ((v98 & 1) != 0);
  v122 = 0;
  v123 = 1;
  do
  {
    v124 = v123;
    v125 = a1 + 24 * v122;
    v126 = *(_QWORD *)(v125 + 1304);
    v127 = *(int8x16_t **)(v125 + 1312);
    v128 = 126 - 2 * __clz(((uint64_t)v127->i64 - v126) >> 3);
    if (v127 == (int8x16_t *)v126)
      v129 = 0;
    else
      v129 = v128;
    std::__introsort<std::_ClassicAlgPolicy,HALS_IOA2Device::_UpdateStreams(std::array<BOOL,2ul> &)::$_0 &,HALS_IOA2Stream **,false>(v126, v127, v129, 1);
    v123 = 0;
    v122 = 1;
  }
  while ((v124 & 1) != 0);
  v130 = *(_QWORD *)(a1 + 1312) == *(_QWORD *)(a1 + 1304) && *(_QWORD *)(a1 + 1336) != *(_QWORD *)(a1 + 1328);
  *(_BYTE *)(a1 + 432) = v130;
  operator delete(__p);
  for (j = 0; j != -48; j -= 24)
  {
    v132 = *(void **)((char *)&v143 + j + 8);
    if (v132)
    {
      *(_QWORD *)((char *)&v144 + j) = v132;
      operator delete(v132);
    }
  }
  for (k = 0; k != -48; k -= 24)
  {
    v134 = *(void **)((char *)&v151 + k + 8);
    if (v134)
    {
      *(_QWORD *)((char *)&v152 + k) = v134;
      operator delete(v134);
    }
  }
}

void sub_1B59A52C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;

  operator delete(__p);
  v28 = 0;
  while (1)
  {
    v29 = *(void **)((char *)&a20 + v28);
    if (v29)
    {
      *(uint64_t *)((char *)&a21 + v28) = (uint64_t)v29;
      operator delete(v29);
    }
    v28 -= 24;
    if (v28 == -48)
    {
      v30 = 0;
      v31 = v27 - 144;
      while (1)
      {
        v32 = *(void **)(v31 + v30 + 24);
        if (v32)
        {
          *(_QWORD *)(v31 + v30 + 32) = v32;
          operator delete(v32);
        }
        v30 -= 24;
        if (v30 == -48)
          JUMPOUT(0x1B59A5374);
      }
    }
  }
}

void HALS_IOA2Device::_UpdateControls(HALS_IOA2Device *this, BOOL *a2)
{
  BOOL *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int Count;
  __int128 v10;
  uint64_t *v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  HALS_Object *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  _DWORD *exception;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  HALS_IOA2Control *v41;
  HALS_Object *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (***v51)(_QWORD);
  _QWORD *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char ***v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  uint64_t *v70;
  unsigned int v71;
  uint64_t v72;
  char *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t i;
  int v77;
  char **v78;
  char **v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t **v95;
  __int128 v96;
  BOOL *v97;
  unint64_t v98;
  unsigned int v99;
  const __CFDictionary *v100;
  __int16 v101;
  CFArrayRef v102;
  __int16 v103;
  const __CFDictionary *v104;
  __int16 v105;
  unsigned int v106;
  _BYTE buf[12];
  _DWORD v108[5];
  uint64_t v109;

  v2 = a2;
  v109 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  v4 = *((_QWORD *)this + 169);
  v5 = *((_QWORD *)this + 170) - v4;
  v6 = v5 >> 3;
  if ((int)(v5 >> 3) >= 1)
  {
    v7 = ((unint64_t)v5 >> 3);
    do
    {
      if (!v6)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      v8 = *(_DWORD *)(*(_QWORD *)v4 + 60);
      if (v8 <= 1)
        *(_BYTE *)(*(_QWORD *)v4 + 13) = v8;
      v4 += 8;
      --v6;
      --v7;
    }
    while (v7);
  }
  *(_QWORD *)buf = 0;
  HALB_UCObject::CopyProperty_CFArray((const __CFDictionary **)this + 226, CFSTR("controls"), (const __CFArray **)buf);
  v102 = *(CFArrayRef *)buf;
  v103 = 1;
  if (*(_QWORD *)buf && (Count = CFArrayGetCount(*(CFArrayRef *)buf), Count >= 1))
  {
    v94 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    *(_QWORD *)&v10 = 136315394;
    v96 = v10;
    v97 = v2;
    do
    {
      v100 = 0;
      v101 = 1;
      CACFArray::GetCACFDictionary(&v102, v13, (CACFDictionary *)&v100);
      if (v100)
      {
        v99 = 0;
        if (CACFDictionary::GetUInt32((uint64_t)v100, CFSTR("control ID"), &v99))
        {
          v14 = 0;
          v15 = *((_QWORD *)this + 169);
          while ((*((_QWORD *)this + 170) - v15) >> 3 > (unint64_t)v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v14++);
            if (v16)
              v17 = *(_DWORD *)(v16 + 72) == v99;
            else
              v17 = 0;
            if (v17)
            {
              *(_BYTE *)(v16 + 13) = 1;
              goto LABEL_55;
            }
          }
          v106 = 0;
          v104 = v100;
          v105 = 0;
          v98 = v12;
          if (v100)
          {
            if (!CACFDictionary::GetUInt32((uint64_t)v100, CFSTR("class"), &v106))
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v96;
                *(_QWORD *)&buf[4] = "HALS_IOA2UCDevice.cpp";
                LOWORD(v108[0]) = 1024;
                *(_DWORD *)((char *)v108 + 2) = 848;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetControlInfoByIndex_Class: there is no control class", buf, 0x12u);
              }
              exception = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)exception = &off_1E69A1B30;
              exception[2] = 1852797029;
            }
            v18 = v106;
          }
          else
          {
            v18 = 0;
          }
          CACFDictionary::~CACFDictionary((CACFDictionary *)&v104);
          v106 = 0;
          v104 = v100;
          v105 = 0;
          if (v100)
          {
            if (!CACFDictionary::GetUInt32((uint64_t)v100, CFSTR("base class"), &v106))
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v96;
                *(_QWORD *)&buf[4] = "HALS_IOA2UCDevice.cpp";
                LOWORD(v108[0]) = 1024;
                *(_DWORD *)((char *)v108 + 2) = 836;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetControlInfoByIndex_BaseClass: there is no control base class", buf, 0x12u);
              }
              v32 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v32 = &off_1E69A1B30;
              v32[2] = 1852797029;
            }
            v19 = v106;
          }
          else
          {
            v19 = 0;
          }
          CACFDictionary::~CACFDictionary((CACFDictionary *)&v104);
          v106 = 0;
          v104 = v100;
          v105 = 0;
          if (v100)
          {
            if (!CACFDictionary::GetUInt32((uint64_t)v100, CFSTR("scope"), &v106))
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v96;
                *(_QWORD *)&buf[4] = "HALS_IOA2UCDevice.cpp";
                LOWORD(v108[0]) = 1024;
                *(_DWORD *)((char *)v108 + 2) = 860;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetControlInfoByIndex_Class: there is no control scope", buf, 0x12u);
              }
              v33 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v33 = &off_1E69A1B30;
              v33[2] = 1852797029;
            }
            v20 = (HALS_Object *)v106;
          }
          else
          {
            v20 = 0;
          }
          CACFDictionary::~CACFDictionary((CACFDictionary *)&v104);
          v106 = 0;
          v104 = v100;
          v105 = 0;
          if (v100)
          {
            if (!CACFDictionary::GetUInt32((uint64_t)v100, CFSTR("element"), &v106))
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v96;
                *(_QWORD *)&buf[4] = "HALS_IOA2UCDevice.cpp";
                LOWORD(v108[0]) = 1024;
                *(_DWORD *)((char *)v108 + 2) = 872;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetControlInfoByIndex_Element: there is no control scope", buf, 0x12u);
              }
              v34 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v34 = &off_1E69A1B30;
              v34[2] = 1852797029;
            }
            v21 = v106;
          }
          else
          {
            v21 = 0;
          }
          CACFDictionary::~CACFDictionary((CACFDictionary *)&v104);
          v22 = operator new();
          HALS_IOA2Control::HALS_IOA2Control(v22, (uint64_t)this, v99, v100, v18, v19, v20, v21, 0);
          v2 = v97;
          v12 = v98;
          if ((unint64_t)v11 >= v98)
          {
            v23 = v11 - v94;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v98 - (_QWORD)v94) >> 2 > v24)
              v24 = (uint64_t)(v98 - (_QWORD)v94) >> 2;
            if (v98 - (unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
              v25 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v25 = v24;
            if (v25)
            {
              v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v25);
              v2 = v97;
            }
            else
            {
              v26 = 0;
            }
            v27 = (uint64_t *)(v25 + 8 * v23);
            *v27 = v22;
            v28 = v27 + 1;
            if (v11 == v94)
            {
              v29 = v94;
            }
            else
            {
              v29 = v94;
              do
              {
                v30 = *--v11;
                *--v27 = v30;
              }
              while (v11 != v29);
            }
            v12 = v25 + 8 * v26;
            if (v29)
              operator delete(v29);
            v94 = v27;
            v11 = v28;
          }
          else
          {
            *v11++ = v22;
          }
        }
      }
LABEL_55:
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v100);
      ++v13;
    }
    while (v13 != Count);
  }
  else
  {
    v94 = 0;
    v11 = 0;
    v12 = 0;
  }
  if ((*((_QWORD *)this + 56) & 0xFF00000000) != 0 && *((_QWORD *)this + 56) == 1
    || *((_QWORD *)this + 164) == *((_QWORD *)this + 163))
  {
    goto LABEL_76;
  }
  *(_QWORD *)buf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  *(_WORD *)&buf[8] = 257;
  v35 = operator new();
  HALS_IOA2Control::HALS_IOA2Control(v35, (uint64_t)this, 0, *(const __CFDictionary **)buf, 1702259059, 1650685548, (HALS_Object *)0x6F757470, 0, 1);
  CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
  if ((unint64_t)v11 >= v12)
  {
    v88 = v11 - v94;
    v89 = v88 + 1;
    if ((unint64_t)(v88 + 1) >> 61)
LABEL_161:
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    if ((uint64_t)(v12 - (_QWORD)v94) >> 2 > v89)
      v89 = (uint64_t)(v12 - (_QWORD)v94) >> 2;
    if (v12 - (unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
      v90 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v90 = v89;
    if (v90)
      v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v90);
    v91 = (uint64_t *)(v90 + 8 * v88);
    *v91 = v35;
    v36 = (char *)(v91 + 1);
    if (v11 == v94)
    {
      v92 = v94;
      if (!v94)
        goto LABEL_155;
    }
    else
    {
      v92 = v94;
      do
      {
        v93 = *--v11;
        *--v91 = v93;
      }
      while (v11 != v92);
      if (!v92)
        goto LABEL_155;
    }
    operator delete(v92);
LABEL_155:
    v94 = v91;
    goto LABEL_77;
  }
  *v11++ = v35;
LABEL_76:
  v36 = (char *)v11;
LABEL_77:
  v37 = *((_QWORD *)this + 170) - *((_QWORD *)this + 169);
  if ((int)(v37 >> 3) >= 1)
  {
    v38 = (v37 >> 3) + 1;
    while (1)
    {
      v39 = (v38 - 2);
      v40 = *((_QWORD *)this + 169);
      if (v39 >= (*((_QWORD *)this + 170) - v40) >> 3)
        break;
      v41 = *(HALS_IOA2Control **)(v40 + 8 * v39);
      if (*((_BYTE *)v41 + 13))
      {
        HALS_IOA2Control::SynchronizeWithRegistry(v41);
      }
      else
      {
        *v2 = 1;
        (*(void (**)(HALS_IOA2Control *))(*(_QWORD *)v41 + 8))(v41);
        HALS_ObjectMap::ObjectIsDead(v41, v42);
        v43 = *((_QWORD *)this + 169) + 8 * v39;
        v44 = *((_QWORD *)this + 170);
        v45 = v44 - (v43 + 8);
        if (v44 != v43 + 8)
          memmove((void *)v43, (const void *)(v43 + 8), v44 - (v43 + 8));
        *((_QWORD *)this + 170) = v43 + v45;
      }
      if ((unint64_t)--v38 <= 1)
        goto LABEL_86;
    }
LABEL_159:
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  }
LABEL_86:
  v46 = v36 - (char *)v94;
  if (v36 != (char *)v94)
  {
    v47 = v46 >> 3;
    if ((int)(v46 >> 3) >= 1)
    {
      v48 = 0;
      v49 = (int)(v46 >> 3);
      if (v49 <= 1)
        v50 = 1;
      else
        v50 = v49;
      do
      {
        *v2 = 1;
        if (v48 == v47)
          goto LABEL_159;
        v51 = (void (***)(_QWORD))v94[v48];
        (**v51)(v51);
        v52 = (_QWORD *)*((_QWORD *)this + 170);
        v53 = *((_QWORD *)this + 171);
        if ((unint64_t)v52 >= v53)
        {
          v55 = *((_QWORD *)this + 169);
          v56 = ((uint64_t)v52 - v55) >> 3;
          if ((unint64_t)(v56 + 1) >> 61)
            goto LABEL_161;
          v57 = v53 - v55;
          v58 = v57 >> 2;
          if (v57 >> 2 <= (unint64_t)(v56 + 1))
            v58 = v56 + 1;
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
            v59 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v59 = v58;
          if (v59)
            v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v59);
          else
            v60 = 0;
          v61 = (_QWORD *)(v59 + 8 * v56);
          *v61 = v51;
          v54 = v61 + 1;
          v62 = (char *)*((_QWORD *)this + 170);
          v63 = (char *)*((_QWORD *)this + 169);
          if (v62 != v63)
          {
            do
            {
              v64 = *((_QWORD *)v62 - 1);
              v62 -= 8;
              *--v61 = v64;
            }
            while (v62 != v63);
            v62 = (char *)*((_QWORD *)this + 169);
          }
          *((_QWORD *)this + 169) = v61;
          *((_QWORD *)this + 170) = v54;
          *((_QWORD *)this + 171) = v59 + 8 * v60;
          if (v62)
            operator delete(v62);
        }
        else
        {
          *v52 = v51;
          v54 = v52 + 1;
        }
        *((_QWORD *)this + 170) = v54;
      }
      while (++v48 != v50);
    }
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 173));
  *((_QWORD *)this + 172) = (char *)this + 1384;
  *((_QWORD *)this + 174) = 0;
  *((_QWORD *)this + 173) = 0;
  v65 = (char ***)((char *)this + 1408);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 176));
  *((_QWORD *)this + 175) = (char *)this + 1408;
  *((_QWORD *)this + 177) = 0;
  *((_QWORD *)this + 176) = 0;
  v66 = *((_QWORD *)this + 169);
  *(_QWORD *)&v96 = *((_QWORD *)this + 170);
  if (v66 == (_QWORD)v96)
    goto LABEL_139;
  v95 = (uint64_t **)((char *)this + 1376);
  do
  {
    v67 = *(_DWORD *)(*(_QWORD *)v66 + 48);
    v68 = *(_DWORD *)(*(_QWORD *)v66 + 52);
    v69 = *(_DWORD *)(*(_QWORD *)v66 + 16);
    *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)v66 + 20);
    *(_DWORD *)&buf[4] = v67;
    LODWORD(v98) = v67;
    *(_DWORD *)&buf[8] = v68;
    v108[0] = v69;
    v70 = std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::__emplace_unique_key_args<std::tuple<unsigned int,unsigned int,unsigned int>,std::pair<std::tuple<unsigned int,unsigned int,unsigned int> const,unsigned int>>(v95, (int *)buf, buf);
    if (!*(_DWORD *)(*(_QWORD *)v66 + 168))
      goto LABEL_133;
    v97 = (BOOL *)&v94;
    MEMORY[0x1E0C80A78](v70);
    v73 = (char *)&v94 - ((v72 + 15) & 0x7FFFFFFF0);
    v74 = *(_DWORD *)(*(_QWORD *)v66 + 168);
    v75 = v71 >= v74 ? v74 : v71;
    if (!(_DWORD)v75)
      goto LABEL_133;
    memcpy(v73, (const void *)(*(_QWORD *)v66 + 172), 4 * v75);
    for (i = 0; i != v75; ++i)
    {
      v77 = *(_DWORD *)(*(_QWORD *)v66 + 16);
      *(_DWORD *)buf = *(_DWORD *)&v73[4 * i];
      *(_DWORD *)&buf[4] = v98;
      *(_DWORD *)&buf[8] = v68;
      v108[0] = v77;
      v78 = (char **)((char *)this + 1408);
      v79 = (char **)((char *)this + 1408);
      if (!*v65)
        goto LABEL_129;
      v80 = *((_QWORD *)this + 181);
      if (!v80)
LABEL_158:
        std::__throw_bad_function_call[abi:ne180100]();
      v78 = (char **)((char *)this + 1408);
      v79 = *v65;
      while ((*(unsigned int (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v80 + 48))(v80, buf, (uint64_t)v79 + 28))
      {
        v81 = *v79;
        v78 = v79;
        if (!*v79)
          goto LABEL_129;
LABEL_126:
        v80 = *((_QWORD *)this + 181);
        v79 = (char **)v81;
        if (!v80)
          goto LABEL_158;
      }
      v82 = *((_QWORD *)this + 181);
      if (!v82)
        goto LABEL_158;
      if ((*(unsigned int (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v82 + 48))(v82, (uint64_t)v79 + 28, buf))
      {
        v78 = v79 + 1;
        v81 = v79[1];
        if (!v81)
          goto LABEL_129;
        goto LABEL_126;
      }
      if (!*v78)
      {
LABEL_129:
        v83 = (char *)operator new(0x30uLL);
        *(_QWORD *)(v83 + 28) = *(_QWORD *)buf;
        v84 = v108[0];
        *((_DWORD *)v83 + 9) = *(_DWORD *)&buf[8];
        *((_DWORD *)v83 + 10) = v84;
        *(_QWORD *)v83 = 0;
        *((_QWORD *)v83 + 1) = 0;
        *((_QWORD *)v83 + 2) = v79;
        *v78 = v83;
        v85 = **((_QWORD **)this + 175);
        if (v85)
        {
          *((_QWORD *)this + 175) = v85;
          v83 = *v78;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 176), (uint64_t *)v83);
        ++*((_QWORD *)this + 177);
      }
    }
LABEL_133:
    v66 += 8;
  }
  while (v66 != (_QWORD)v96);
  v86 = *((_QWORD *)this + 169);
  v87 = *((_QWORD *)this + 170);
  if (v86 != v87)
  {
    while (*(_DWORD *)(*(_QWORD *)v86 + 20) != 1702259059)
    {
      v86 += 8;
      if (v86 == v87)
        goto LABEL_139;
    }
    *((_DWORD *)this + 112) = *(_DWORD *)(*(_QWORD *)v86 + 60);
    *((_BYTE *)this + 452) = 1;
  }
LABEL_139:
  CACFArray::~CACFArray((CACFArray *)&v102);
  if (v94)
    operator delete(v94);
}

void sub_1B59A5FE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1B5E50688](v1, 0x10F1C404AE012DFLL);
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v2 - 128));
  CACFArray::~CACFArray((CACFArray *)(v2 - 168));
  v4 = *(void **)(v2 - 240);
  if (v4)
    operator delete(v4);
  _Unwind_Resume(a1);
}

void HALS_IOA2Device::_MapIOBuffers(HALS_IOA2Device *this)
{
  uint64_t v1;
  char v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  HALS_Object *v11;
  uint64_t v12;
  int v13;
  CFArrayRef v14;
  _DWORD *exception;
  char v17;
  CFArrayRef v18;
  __int16 v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v1 = 0;
  v24 = *MEMORY[0x1E0C80C00];
  v2 = 1;
  do
  {
    v17 = v2;
    v3 = (char *)this + 24 * v1;
    v4 = *((_QWORD *)v3 + 163);
    if (*((_QWORD *)v3 + 164) != v4)
    {
      v5 = 0;
      v6 = (uint64_t *)(v3 + 1304);
      v7 = v3 + 1312;
      v8 = 1;
      do
      {
        v9 = *(_QWORD *)(v4 + 8 * v5);
        v10 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v9 + 48));
        v12 = v10;
        if (v10)
        {
          v13 = *(_DWORD *)(v9 + 60);
          v14 = HALS_IOA2UCDevice::CopyStreamDictionaryByID((const __CFDictionary **)(v10 + 1808), v13);
          v18 = v14;
          v19 = 1;
          if (!v14)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              v21 = "HALS_IOA2UCDevice.cpp";
              v22 = 1024;
              v23 = 708;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::MapIOBufferForStream: no stream for the given ID", buf, 0x12u);
            }
            exception = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)exception = &off_1E69A1B30;
            exception[2] = 1852797029;
          }
          *(_DWORD *)buf = 1;
          CACFDictionary::GetUInt32((uint64_t)v14, CFSTR("buffer mapping options"), (unsigned int *)buf);
          *(_QWORD *)(v9 + 128) = HALB_UCObject::MapMemory((HALB_UCObject *)(v12 + 1808), v13 + 0x10000000, *(unsigned int *)buf, (unsigned int *)(v9 + 136));
          CACFDictionary::~CACFDictionary((CACFDictionary *)&v18);
        }
        HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v12, v11);
        v5 = v8;
        v4 = *v6;
        ++v8;
      }
      while (v5 < (*v7 - *v6) >> 3);
    }
    v2 = 0;
    v1 = 1;
  }
  while ((v17 & 1) != 0);
}

void sub_1B59A626C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  HALS_ObjectMap *v3;
  HALS_Object *v5;
  va_list va;

  va_start(va, a3);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  HALS_ObjectMap::ReleaseObject(v3, v5);
  _Unwind_Resume(a1);
}

void HALS_IOA2Device::_MapBlockControlBuffers(HALS_IOA2Device *this, HALS_IOA2Device *a2)
{
  HALS_IOA2Device *i;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v11;
  HALS_Object *v12;
  uint64_t v13;
  int v14;
  int v15;
  BOOL v20;
  uint64_t v21;
  int v22;
  _DWORD *exception;
  uint64_t v24;
  __int16 v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (this != a2)
  {
    for (i = this; i != a2; i = (HALS_IOA2Device *)((char *)i + 8))
    {
      v4 = *(_QWORD *)i;
      v5 = *(_DWORD *)(*(_QWORD *)i + 20);
      v6 = *(_DWORD *)(*(_QWORD *)i + 24);
      if (v5 == v6)
      {
        if (v5 != 1936028002 && v5 != 1651273579)
          continue;
      }
      else if (v5 != 1651273579 && v5 != 1936028002 && v6 != 1651273579 && v6 != 1936028002)
      {
        continue;
      }
      v11 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v4 + 56));
      v13 = v11;
      v14 = *(_DWORD *)(v4 + 20);
      v15 = *(_DWORD *)(v4 + 24);
      if (v14 == v15)
      {
        if (v14 == 1936028002 || v14 == 1651273579)
          goto LABEL_37;
      }
      else if (v14 == 1651273579 || v14 == 1936028002 || v15 == 1651273579 || v15 == 1936028002)
      {
LABEL_37:
        if (*(_QWORD *)(v4 + 104))
          v20 = 1;
        else
          v20 = v11 == 0;
        if (!v20)
        {
          v21 = *(_QWORD *)(v4 + 80);
          v22 = *(_DWORD *)(v4 + 72);
          v24 = v21;
          v25 = 0;
          if (!v21)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              v27 = "HALS_IOA2UCDevice.cpp";
              v28 = 1024;
              v29 = 1130;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::MapBlockControlBuffer: no control for the given ID", buf, 0x12u);
            }
            exception = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)exception = &off_1E69A1B30;
            exception[2] = 1852797029;
          }
          *(_DWORD *)buf = 1;
          CACFDictionary::GetUInt32(v21, CFSTR("mapping options"), (unsigned int *)buf);
          *(_QWORD *)(v4 + 104) = HALB_UCObject::MapMemory((HALB_UCObject *)(v13 + 1808), v22 & 0xFFFFFFF | 0x30000000u, *(unsigned int *)buf, (unsigned int *)(v4 + 112));
          CACFDictionary::~CACFDictionary((CACFDictionary *)&v24);
        }
      }
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v13, v12);
    }
  }
}

void sub_1B59A6510(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B59A651CLL);
  __clang_call_terminate(a1);
}

const __CFArray *HALS_IOA2Device::_MapDataExchangeBlocks(HALS_IOA2Device *this)
{
  unsigned int v2;
  CFArrayRef *v3;
  const __CFDictionary **v4;
  const __CFString *v5;
  const __CFArray *result;
  unsigned int v7;
  unsigned int Count;
  unsigned int i;
  int UInt32;
  int v11;
  CFArrayRef v12;
  const __CFString *v13;
  const __CFDictionary **v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  _DWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *exception;
  _QWORD *v27;
  unsigned int v28;
  unsigned int v29;
  __CFDictionary *v30;
  __int16 v31;
  __CFDictionary *v32;
  CFArrayRef v33;
  __int16 v34;
  unsigned int v35;
  CFArrayRef theArray;
  __int16 v37;
  _BYTE buf[12];
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 239))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
      v39 = 1024;
      v40 = 2435;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_MapDataExchangeBlocks: the size mDataExchangeBlockInfoMap is non-zero", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v2 = 0;
  v3 = (CFArrayRef *)((char *)this + 1880);
  v4 = (const __CFDictionary **)((char *)this + 1808);
  v27 = (_QWORD *)((char *)this + 1904);
  v5 = CFSTR("block ID");
  while (1)
  {
    result = *v3;
    if (*v3)
      result = (const __CFArray *)CFArrayGetCount(result);
    if (v2 >= result)
      return result;
    v32 = 0;
    if (CACFArray::GetDictionary(v3, v2, &v32))
    {
      v30 = v32;
      v31 = 0;
      v29 = 0;
      if (CACFDictionary::GetUInt32((uint64_t)v32, v5, &v29))
      {
        v7 = v29;
        if (v29 >> 28)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
            v39 = 1024;
            v40 = 2448;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_MapDataExchangeBlocks: driver returned data exchange block ID that is larger than can fit in the lower 28 bits of a 32 bit integer", buf, 0x12u);
          }
          v24 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v24 = &off_1E69A1B30;
          v24[2] = 1852797029;
        }
        v28 = 0;
        theArray = 0;
        HALB_UCObject::CopyProperty_CFArray(v4, CFSTR("data exchange blocks"), &theArray);
        *(_QWORD *)buf = theArray;
        *(_WORD *)&buf[8] = 1;
        if (theArray && (Count = CFArrayGetCount(theArray)) != 0)
        {
          for (i = 0; i < Count; ++i)
          {
            theArray = 0;
            v37 = 0;
            CACFArray::GetCACFDictionary((CFArrayRef *)buf, i, (CACFDictionary *)&theArray);
            if (theArray
              && ((v35 = 0, UInt32 = CACFDictionary::GetUInt32((uint64_t)theArray, CFSTR("block ID"), &v35), v35 == v7)
                ? (v11 = UInt32)
                : (v11 = 0),
                  v11 == 1 && theArray))
            {
              CFRetain(theArray);
              v12 = theArray;
            }
            else
            {
              v12 = 0;
            }
            CACFDictionary::~CACFDictionary((CACFDictionary *)&theArray);
            if (v12)
              break;
          }
        }
        else
        {
          v12 = 0;
        }
        CACFArray::~CACFArray((CACFArray *)buf);
        v33 = v12;
        v34 = 1;
        if (!v12)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_IOA2UCDevice.cpp";
            v39 = 1024;
            v40 = 1224;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::MapDataExchangeBlockBuffer: no data exchange block for the given ID", buf, 0x12u);
          }
          v25 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v25 = &off_1E69A1B30;
          v25[2] = 1852797029;
        }
        v13 = v5;
        *(_DWORD *)buf = 1;
        CACFDictionary::GetUInt32((uint64_t)v12, CFSTR("buffer mapping options"), (unsigned int *)buf);
        v14 = v4;
        v15 = HALB_UCObject::MapMemory((HALB_UCObject *)v4, v7 + 0x20000000, *(unsigned int *)buf, &v28);
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v33);
        v16 = v28;
        v17 = v29;
        v18 = v27;
        v19 = v27;
        v20 = *v27;
        if (*v27)
        {
          while (1)
          {
            while (1)
            {
              v19 = (_QWORD *)v20;
              v21 = *(_DWORD *)(v20 + 32);
              if (v29 >= v21)
                break;
              v20 = *v19;
              v18 = v19;
              if (!*v19)
                goto LABEL_32;
            }
            if (v21 >= v29)
              break;
            v20 = v19[1];
            if (!v20)
            {
              v18 = v19 + 1;
              goto LABEL_32;
            }
          }
        }
        else
        {
LABEL_32:
          v22 = operator new(0x38uLL);
          v22[8] = v17;
          *((_QWORD *)v22 + 5) = v15;
          v22[12] = v16;
          *(_QWORD *)v22 = 0;
          *((_QWORD *)v22 + 1) = 0;
          *((_QWORD *)v22 + 2) = v19;
          *v18 = v22;
          v23 = **((_QWORD **)this + 237);
          if (v23)
          {
            *((_QWORD *)this + 237) = v23;
            v22 = (_DWORD *)*v18;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 238), (uint64_t *)v22);
          ++*((_QWORD *)this + 239);
        }
        v4 = v14;
        v5 = v13;
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v30);
    }
    ++v2;
  }
}

void sub_1B59A69BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  CACFArray::~CACFArray((CACFArray *)va1);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,HALS_IOA2Device::_UpdateStreams(std::array<BOOL,2ul> &)::$_0 &,HALS_IOA2Stream **,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v5;
  int8x16_t *v6;
  uint64_t *v7;
  int8x16_t *i;
  int8x16_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  int8x16_t *v24;
  uint64_t *j;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unsigned int v40;
  BOOL v41;
  BOOL v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  int8x16_t *v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int8x16_t *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  BOOL v61;
  unsigned int v62;
  uint64_t v63;
  int8x16_t *v64;
  uint64_t *v65;
  uint64_t v66;
  BOOL v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  int8x16_t *v78;
  BOOL v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  BOOL v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unsigned int v92;
  int64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  unsigned int v99;
  uint64_t *v100;
  uint64_t v101;
  BOOL v102;
  unsigned int v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  unsigned int v109;
  BOOL v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v121;
  uint64_t *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  unsigned int v128;
  uint64_t v129;
  uint64_t *v130;
  unsigned int v132;
  uint64_t *v134;
  uint64_t v135;
  BOOL v136;
  unsigned int v137;
  int8x16_t *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  unsigned int v142;
  int64_t v143;
  int64_t v145;
  int8x16_t *v147;

  v5 = (int8x16_t *)result;
LABEL_2:
  v6 = a2;
  v7 = &a2[-1].i64[1];
  i = v5;
  while (2)
  {
    v9 = i;
    v10 = (char *)v6 - (char *)i;
    v11 = v10 >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = *v7;
        v60 = v9->i64[0];
        if (*v7)
          v61 = v60 == 0;
        else
          v61 = 1;
        if (!v61)
        {
          v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 200))(v60);
          if (v62 < result)
          {
            v63 = v9->i64[0];
            v9->i64[0] = *v7;
            *v7 = v63;
          }
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9->i64, &v9->i64[1], v7);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9->i64, &v9->i64[1], v9[1].i64, v7);
      case 5:
        v64 = v9 + 1;
        v65 = &v9[1].i64[1];
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9->i64, &v9->i64[1], v9[1].i64, &v9[1].i64[1]);
        result = *v7;
        v66 = v9[1].i64[1];
        if (*v7)
          v67 = v66 == 0;
        else
          v67 = 1;
        if (!v67)
        {
          v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 200))(v66);
          if (v68 < result)
          {
            v69 = *v65;
            *v65 = *v7;
            *v7 = v69;
            result = *v65;
            if (*v65)
            {
              v70 = v64->i64[0];
              if (v64->i64[0])
              {
                v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 200))(v70);
                if (v71 < result)
                {
                  v72 = v64->i64[0];
                  result = *v65;
                  v64->i64[0] = *v65;
                  *v65 = v72;
                  if (result)
                  {
                    v73 = v9->i64[1];
                    if (v73)
                    {
                      v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 200))(v73);
                      if (v74 < result)
                      {
                        v75 = v9->i64[1];
                        result = v9[1].i64[0];
                        v9->i64[1] = result;
                        v9[1].i64[0] = v75;
                        if (result)
                        {
                          v76 = v9->i64[0];
                          if (v9->i64[0])
                          {
                            v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 200))(v76);
                            if (v77 < result)
                              *v9 = vextq_s8(*v9, *v9, 8uLL);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result;
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (v9 == v6)
              return result;
            v93 = (unint64_t)(v11 - 2) >> 1;
            v145 = v93;
            v147 = v9;
            while (1)
            {
              v94 = v93;
              if (v145 >= v93)
              {
                v95 = (2 * v93) | 1;
                v96 = &v9->i64[v95];
                if (2 * v93 + 2 < v11)
                {
                  v97 = v96[1];
                  if (*v96 && v97 != 0)
                  {
                    v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v96 + 200))(*v96);
                    if (v99 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 200))(v97))
                    {
                      ++v96;
                      v95 = 2 * v94 + 2;
                    }
                  }
                }
                v9 = v147;
                v100 = &v147->i64[v94];
                result = *v96;
                v101 = *v100;
                if (*v96)
                  v102 = v101 == 0;
                else
                  v102 = 1;
                if (v102)
                {
                  v143 = v94;
                  goto LABEL_157;
                }
                v103 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 200))(v101);
                if (v103 >= result)
                {
                  v143 = v94;
                  v101 = *v100;
                  while (1)
                  {
LABEL_157:
                    v104 = v100;
                    v100 = v96;
                    *v104 = *v96;
                    if (v145 < v95)
                      break;
                    v105 = (2 * v95) | 1;
                    v96 = &v9->i64[v105];
                    v106 = 2 * v95 + 2;
                    if (v106 >= v11)
                    {
                      v95 = (2 * v95) | 1;
                    }
                    else
                    {
                      v107 = v96[1];
                      if (*v96)
                        v108 = v107 == 0;
                      else
                        v108 = 1;
                      v95 = (2 * v95) | 1;
                      if (!v108)
                      {
                        v109 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v96 + 200))(*v96);
                        if (v109 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v107 + 200))(v107))
                        {
                          v95 = v105;
                        }
                        else
                        {
                          ++v96;
                          v95 = v106;
                        }
                      }
                    }
                    result = *v96;
                    v110 = !*v96 || v101 == 0;
                    v9 = v147;
                    if (!v110)
                    {
                      v111 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 200))(v101);
                      if (v111 < result)
                        break;
                    }
                  }
                  *v100 = v101;
                  v94 = v143;
                }
              }
              v93 = v94 - 1;
              if (!v94)
              {
                v112 = (unint64_t)v10 >> 3;
                do
                {
                  v113 = 0;
                  v114 = v9->i64[0];
                  v115 = (uint64_t *)v9;
                  do
                  {
                    v116 = v115;
                    v115 += v113 + 1;
                    v117 = 2 * v113;
                    v113 = (2 * v113) | 1;
                    v118 = v117 + 2;
                    if (v117 + 2 < v112)
                    {
                      v119 = v115[1];
                      result = *v115;
                      if (*v115 && v119 != 0)
                      {
                        v121 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 200))(v119);
                        if (v121 < result)
                        {
                          ++v115;
                          v113 = v118;
                        }
                      }
                    }
                    *v116 = *v115;
                  }
                  while (v113 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
                  v122 = &a2[-1].i64[1];
                  v21 = v115 == (uint64_t *)&a2[-1].u64[1];
                  a2 = (int8x16_t *)((char *)a2 - 8);
                  if (v21)
                  {
                    *v115 = v114;
                    v9 = v147;
                  }
                  else
                  {
                    *v115 = *v122;
                    *v122 = v114;
                    v9 = v147;
                    v123 = (char *)v115 - (char *)v147 + 8;
                    if (v123 >= 9)
                    {
                      v124 = (((unint64_t)v123 >> 3) - 2) >> 1;
                      v125 = &v147->i64[v124];
                      result = *v125;
                      v126 = *v115;
                      if (*v125 && v126 != 0)
                      {
                        v128 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v126 + 200))(v126);
                        if (v128 < result)
                        {
                          v129 = *v115;
                          do
                          {
                            v130 = v115;
                            v115 = v125;
                            *v130 = *v125;
                            if (!v124)
                              break;
                            v124 = (v124 - 1) >> 1;
                            v125 = &v147->i64[v124];
                            result = *v125;
                            if (!*v125 || v129 == 0)
                              break;
                            v132 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v129 + 200))(v129);
                          }
                          while (v132 < result);
                          *v115 = v129;
                        }
                      }
                    }
                  }
                }
                while (v112-- > 2);
                return result;
              }
            }
          }
          v12 = (uint64_t *)v9;
          v13 = (unint64_t)v11 >> 1;
          v14 = &v12[(unint64_t)v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v14, v12, v7);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v12, v14, v7);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v12 + 1, v14 - 1, a2[-1].i64);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v12 + 2, &v12[v13 + 1], &a2[-2].i64[1]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v14 - 1, v14, &v12[v13 + 1]);
            v15 = *v12;
            *v12 = *v14;
            *v14 = v15;
          }
          v5 = (int8x16_t *)v12;
          --a3;
          if ((a4 & 1) == 0)
          {
            result = *(v12 - 1);
            v16 = *v12;
            if (result && v16)
            {
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16);
              if (v17 < result)
                goto LABEL_13;
              v16 = *v12;
            }
            if (v16
              && (v43 = *v7) != 0
              && (v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16),
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 200))(v43),
                  v44 < result))
            {
              for (i = (int8x16_t *)(v12 + 1); ; i = (int8x16_t *)((char *)i + 8))
              {
                v45 = i->i64[0];
                if (i->i64[0])
                {
                  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16);
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 200))(v45);
                  if (v46 < result)
                    break;
                }
              }
            }
            else
            {
              for (i = (int8x16_t *)(v12 + 1); i < v6; i = (int8x16_t *)((char *)i + 8))
              {
                if (v16)
                {
                  v47 = i->i64[0];
                  if (i->i64[0])
                  {
                    v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16);
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 200))(v47);
                    if (v48 < result)
                      break;
                  }
                }
              }
            }
            v49 = v6;
            if (i < v6)
            {
              v50 = &a2[-1].i64[1];
              do
              {
                v49 = (int8x16_t *)v50;
                if (!v16)
                  break;
                v51 = *v50;
                if (!*v50)
                  break;
                v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16);
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 200))(v51);
                v50 = &v49[-1].i64[1];
              }
              while (v52 < result);
            }
            while (i < v49)
            {
              v53 = i->i64[0];
              i->i64[0] = v49->i64[0];
              i = (int8x16_t *)((char *)i + 8);
              v49->i64[0] = v53;
              if (!v16)
                goto LABEL_80;
              while (1)
              {
                v54 = i->i64[0];
                if (i->i64[0])
                {
                  v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16);
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 200))(v54);
                  if (v55 < result)
                    break;
                }
                do
LABEL_80:
                  i = (int8x16_t *)((char *)i + 8);
                while (!v16);
              }
              v56 = (int8x16_t *)((char *)v49 - 8);
              do
              {
                v49 = v56;
                v57 = v56->i64[0];
                if (!v56->i64[0])
                  break;
                v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16);
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 200))(v57);
                v56 = (int8x16_t *)((char *)v49 - 8);
              }
              while (v58 < result);
            }
            v59 = &i[-1].i64[1];
            if (&i[-1].u64[1] != (unint64_t *)v5)
              v5->i64[0] = *v59;
            a4 = 0;
            *v59 = v16;
            continue;
          }
LABEL_13:
          v18 = v12 + 1;
          v19 = *v12;
          do
          {
            v20 = (unint64_t)v18;
            if (*v18)
              v21 = v19 == 0;
            else
              v21 = 1;
            if (v21)
              break;
            v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v18 + 200))(*v18);
            v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19);
            v18 = (_QWORD *)(v20 + 8);
          }
          while (v22 < v23);
          v24 = (int8x16_t *)(v20 - 8);
          j = &a2[-1].i64[1];
          if ((uint64_t *)(v20 - 8) == v12)
          {
            for (j = &a2[-1].i64[1]; v20 < (unint64_t)(j + 1); --j)
            {
              if (*j)
                v28 = v19 == 0;
              else
                v28 = 1;
              if (!v28)
              {
                v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*j + 200))(*j);
                if (v29 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19))
                  goto LABEL_35;
              }
            }
            ++j;
          }
          else
          {
            while (1)
            {
              if (*j && v19 != 0)
              {
                v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*j + 200))(*j);
                if (v27 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19))
                  break;
              }
              --j;
            }
          }
LABEL_35:
          if (v20 < (unint64_t)j)
          {
            v30 = (uint64_t *)v20;
            v31 = j;
            do
            {
              v32 = *v30;
              *v30 = *v31;
              *v31 = v32;
              v33 = v30 + 1;
              do
              {
                v30 = v33;
                if (*v33)
                  v34 = v19 == 0;
                else
                  v34 = 1;
                if (v34)
                  break;
                v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v33 + 200))(*v33);
                v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19);
                v33 = v30 + 1;
              }
              while (v35 < v36);
              v24 = (int8x16_t *)(v30 - 1);
              while (1)
              {
                v38 = *--v31;
                v37 = v38;
                if (v38)
                  v39 = v19 == 0;
                else
                  v39 = 1;
                if (!v39)
                {
                  v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 200))(v37);
                  if (v40 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19))
                    break;
                }
              }
            }
            while (v30 < v31);
          }
          if (v24 != v5)
            v5->i64[0] = v24->i64[0];
          v24->i64[0] = v19;
          v41 = v20 >= (unint64_t)j;
          v6 = a2;
          if (!v41)
            goto LABEL_56;
          v42 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HALS_IOA2Device::_UpdateStreams(std::array<BOOL,2ul> &)::$_0 &,HALS_IOA2Stream **>(v5, v24);
          i = (int8x16_t *)&v24->u64[1];
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HALS_IOA2Device::_UpdateStreams(std::array<BOOL,2ul> &)::$_0 &,HALS_IOA2Stream **>((int8x16_t *)&v24->u64[1], a2);
          if (!(_DWORD)result)
          {
            if (v42)
              continue;
LABEL_56:
            result = std::__introsort<std::_ClassicAlgPolicy,HALS_IOA2Device::_UpdateStreams(std::array<BOOL,2ul> &)::$_0 &,HALS_IOA2Stream **,false>(v5, v24, a3, a4 & 1);
            a4 = 0;
            i = (int8x16_t *)&v24->u64[1];
            continue;
          }
          a2 = v24;
          if (v42)
            return result;
          goto LABEL_2;
        }
        v78 = (int8x16_t *)&v9->u64[1];
        v80 = v9 == v6 || v78 == v6;
        if ((a4 & 1) != 0)
        {
          if (v80)
            return result;
          v81 = 0;
          v82 = (uint64_t *)v9;
          while (1)
          {
            v83 = v82;
            v82 = (uint64_t *)v78;
            v84 = *v83;
            result = v83[1];
            if (result)
              v85 = v84 == 0;
            else
              v85 = 1;
            if (!v85)
            {
              v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 200))(v84);
              if (v86 < result)
              {
                v87 = *v82;
                v88 = v81;
                while (1)
                {
                  v89 = v88;
                  v90 = (uint64_t *)((char *)v9->i64 + v88);
                  v90[1] = *v90;
                  if (!v89)
                    break;
                  if (!v87)
                    goto LABEL_136;
                  v91 = *(v90 - 1);
                  if (!v91)
                    goto LABEL_136;
                  --v83;
                  v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 200))(v87);
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 200))(v91);
                  v88 = v89 - 8;
                  if (v92 >= result)
                  {
                    v83 = (uint64_t *)((char *)v9->i64 + v89);
                    goto LABEL_136;
                  }
                }
                v83 = (uint64_t *)v9;
LABEL_136:
                *v83 = v87;
              }
            }
            v78 = (int8x16_t *)(v82 + 1);
            v81 += 8;
            if (v82 + 1 == (uint64_t *)a2)
              return result;
          }
        }
        if (!v80)
        {
          do
          {
            v134 = (uint64_t *)v9;
            v9 = v78;
            v135 = *v134;
            result = v134[1];
            if (result)
              v136 = v135 == 0;
            else
              v136 = 1;
            if (!v136)
            {
              v137 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 200))(v135);
              if (v137 < result)
              {
                v138 = v9;
                v139 = v9->i64[0];
                do
                {
                  v140 = v134;
                  v134[1] = *v134;
                  if (!v139)
                    break;
                  --v134;
                  v141 = *(v140 - 1);
                  if (!v141)
                    break;
                  v142 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 200))(v139);
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v141 + 200))(v141);
                }
                while (v142 < result);
                *v140 = v139;
                v9 = v138;
              }
            }
            v78 = (int8x16_t *)&v9->u64[1];
          }
          while (&v9->u64[1] != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HALS_IOA2Device::_UpdateStreams(std::array<BOOL,2ul> &)::$_0 &,HALS_IOA2Stream **>(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  int8x16_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v25;
  int8x16_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2[-1].i64[1];
      v7 = a1->i64[0];
      if (v6)
        v8 = v7 == 0;
      else
        v8 = 1;
      if (!v8)
      {
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 200))(v6);
        if (v9 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7))
        {
          v10 = a1->i64[0];
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v10;
        }
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1->i64, &a1->i64[1], a1[1].i64, &a2[-1].i64[1]);
      return 1;
    case 5:
      v25 = &a1->i64[1];
      v26 = a1 + 1;
      v27 = &a1[1].i64[1];
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1]);
      v28 = a2[-1].i64[1];
      result = 1;
      if (!v28)
        return result;
      v29 = a1[1].i64[1];
      if (!v29)
        return result;
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 200))(a2[-1].i64[1]);
      if (v30 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 200))(v29))
        return 1;
      v31 = *v27;
      *v27 = a2[-1].i64[1];
      a2[-1].i64[1] = v31;
      result = 1;
      if (!*v27)
        return result;
      v32 = v26->i64[0];
      if (!v26->i64[0])
        return result;
      v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v27 + 200))(*v27);
      if (v33 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 200))(v32))
        return 1;
      v34 = v26->i64[0];
      v35 = *v27;
      v26->i64[0] = *v27;
      *v27 = v34;
      result = 1;
      if (!v35)
        return result;
      v36 = *v25;
      if (!*v25)
        return result;
      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 200))(v35);
      if (v37 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 200))(v36))
        return 1;
      v39 = a1->i64[1];
      v38 = a1[1].i64[0];
      a1->i64[1] = v38;
      a1[1].i64[0] = v39;
      result = 1;
      if (!v38)
        return result;
      v40 = a1->i64[0];
      if (!a1->i64[0])
        return result;
      v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 200))(v38);
      if (v41 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v40 + 200))(v40))
        *a1 = vextq_s8(*a1, *a1, 8uLL);
      return 1;
    default:
      v11 = a1 + 1;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1->i64, &a1->i64[1], a1[1].i64);
      v12 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v13 = 0;
      v14 = 16;
      break;
  }
  while (1)
  {
    v15 = v11->i64[0];
    if (*v12 && v15 != 0)
    {
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v12 + 200))(*v12);
      if (v17 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 200))(v15))
      {
        v18 = *v12;
        v19 = v14;
        while (1)
        {
          v20 = v19;
          v21 = (uint64_t *)((char *)a1->i64 + v19);
          v21[1] = *v21;
          if (!v20)
            break;
          if (!v18)
            goto LABEL_22;
          v22 = *(v21 - 1);
          if (!v22)
            goto LABEL_22;
          v11 = (int8x16_t *)((char *)v11 - 8);
          v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 200))(v18);
          v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 200))(v22);
          v19 = v20 - 8;
          if (v23 >= v24)
          {
            v11 = (int8x16_t *)((char *)a1 + v20);
            goto LABEL_22;
          }
        }
        v11 = a1;
LABEL_22:
        v11->i64[0] = v18;
        if (++v13 == 8)
          return v12 + 1 == (uint64_t *)a2;
      }
    }
    v11 = (int8x16_t *)v12;
    v14 += 8;
    if (++v12 == (uint64_t *)a2)
      return 1;
  }
}

uint64_t std::vector<CAPropertyAddressList>::__init_with_size[abi:ne180100]<CAPropertyAddressList*,CAPropertyAddressList*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  _QWORD v11[3];
  char v12;
  char *v13;
  char *v14;

  if (a4)
  {
    if (a4 >> 59)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (_QWORD *)result;
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CAPropertyAddressList>>(a4);
    v8 = v7;
    *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[32 * v9];
    v13 = v7;
    v14 = v7;
    v11[0] = v6 + 2;
    v11[1] = &v13;
    v11[2] = &v14;
    v12 = 0;
    if (a2 != a3)
    {
      v10 = v7;
      do
      {
        *(_QWORD *)v10 = 0;
        *((_QWORD *)v10 + 1) = 0;
        *((_QWORD *)v10 + 2) = 0;
        std::vector<CAPropertyAddress>::__init_with_size[abi:ne180100]<CAPropertyAddress*,CAPropertyAddress*>(v10, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
        *((_QWORD *)v10 + 3) = *(_QWORD *)(a2 + 24);
        v10 = v14 + 32;
        v14 += 32;
        a2 += 32;
      }
      while (a2 != a3);
      v8 = v10;
    }
    v12 = 1;
    result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CAPropertyAddressList>,CAPropertyAddressList*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
    v6[1] = v8;
  }
  return result;
}

void sub_1B59A7A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CAPropertyAddressList>,CAPropertyAddressList*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      v4 = **(_QWORD **)(a1 + 16);
      do
      {
        v6 = *(void **)(v4 - 32);
        v4 -= 32;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v2 - 24) = v5;
          operator delete(v5);
        }
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void HALS_IOA2Device::_CloseConnection(HALS_IOA2Device **this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v2 = *((unsigned int *)this + 455);
  if ((_DWORD)v2)
    MEMORY[0x1B5E4FAB8](v2, 0, 0, 0);
  HALS_IOA2Device::_UnmapDataExchangeBlocks((HALS_IOA2Device *)this);
  HALS_IOA2Device::_UnmapBlockControlBuffers(this[169], this[170]);
  HALS_IOA2Device::_ReleaseIOBuffers((HALS_IOA2Device *)this);
  v3 = *((unsigned int *)this + 455);
  if (this[232] && (_DWORD)v3)
  {
    MEMORY[0x1B5E4FAE8](v3, 0, *MEMORY[0x1E0C83DA0]);
    LODWORD(v3) = *((_DWORD *)this + 455);
  }
  this[232] = 0;
  if ((_DWORD)v3)
  {
    IOServiceClose(v3);
    *((_DWORD *)this + 455) = 0;
  }
  v10 = 0;
  v11 = 0;
  HALS_System::GetInstance(&v12, 0, &v10);
  HALS_IOContext_Manager::destroy_engine_for_device(*(os_unfair_lock_s **)(v12 + 1392), (const HALS_IODevice *)this);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1B59A7C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_IOA2Device::_OpenConnection(HALS_IOA2Device *this)
{
  io_service_t v2;
  kern_return_t v3;
  uint64_t v4;
  unsigned int v5;
  kern_return_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  HALS_Object *v18;
  HALS_ObjectMap *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  kern_return_t v27;
  _DWORD *v28;
  kern_return_t v29;
  _DWORD *exception;
  uint64_t v31;
  std::__shared_weak_count *v32;
  _BYTE buf[18];
  __int16 v34;
  kern_return_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)this + 454);
  if (v2)
  {
    if (!*((_DWORD *)this + 455))
    {
      v3 = IOServiceOpen(v2, *MEMORY[0x1E0C83DA0], 0, (io_connect_t *)this + 455);
      if (v3)
      {
        v29 = v3;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "HALB_UCObject.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 710;
          v34 = 1024;
          v35 = v29;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_UCObject::OpenConnection: failed to open a connection, Error: 0x%X", buf, 0x18u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = v29;
      }
    }
  }
  HALS_IOA2UCDevice::MapEngineStatus((HALS_IOA2Device *)((char *)this + 1808), (uint64_t *)this + 232);
  v4 = *((unsigned int *)this + 455);
  if ((_DWORD)v4)
  {
    v5 = *((_DWORD *)this + 462);
    v6 = MEMORY[0x1B5E4FAB8](v4, 0, v5, *((unsigned int *)this + 4));
    if (v5)
    {
      if (v6)
      {
        v27 = v6;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "HALB_UCObject.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 730;
          v34 = 1024;
          v35 = v27;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_UCObject::SetConnectionNotificationPort: Cannot set the connection's's notification port., Error: 0x%X", buf, 0x18u);
        }
        v28 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v28 = &off_1E69A1B30;
        v28[2] = v27;
      }
    }
  }
  HALS_IOA2Device::_MapIOBuffers(this);
  HALS_IOA2Device::_MapBlockControlBuffers(*((HALS_IOA2Device **)this + 169), *((HALS_IOA2Device **)this + 170));
  HALS_IOA2Device::_MapDataExchangeBlocks(this);
  v7 = 0;
  v8 = 1;
  do
  {
    v9 = v8;
    v10 = (char *)this + 24 * v7;
    v11 = *((_QWORD *)v10 + 163);
    if (*((_QWORD *)v10 + 164) != v11)
    {
      v12 = 0;
      v13 = (uint64_t *)(v10 + 1304);
      v14 = v10 + 1312;
      v15 = 1;
      do
      {
        v16 = *(_QWORD *)(v11 + 8 * v12);
        v17 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v16 + 48));
        v19 = (HALS_ObjectMap *)v17;
        if (v17 && !*(_DWORD *)(v16 + 56))
          HALS_IOA2UCDevice::SetStreamActive((HALS_IOA2UCDevice *)(v17 + 1808), *(_DWORD *)(v16 + 60), *(unsigned __int8 *)(v16 + 64));
        HALS_ObjectMap::ReleaseObject(v19, v18);
        v12 = v15;
        v11 = *v13;
        ++v15;
      }
      while (v12 < (*v14 - *v13) >> 3);
    }
    v8 = 0;
    v7 = 1;
  }
  while ((v9 & 1) != 0);
  v20 = *((_QWORD *)this + 222);
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 928))(v20);
  v31 = 0;
  v32 = 0;
  HALS_System::GetInstance(buf, 0, &v31);
  HALS_IOContext_Manager::rebuild_engine_for_device(*(HALS_IOContext_Manager **)(*(_QWORD *)buf + 1392), this);
  v21 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_1B59A7FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void make_stream_list(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::reserve((void **)a1, (uint64_t)(a2[1] - *a2) >> 3);
  v4 = (_QWORD *)*a2;
  v5 = (_QWORD *)a2[1];
  if ((_QWORD *)*a2 != v5)
  {
    do
    {
      v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 200))(*v4);
      v7 = *v4;
      v8 = *(_DWORD *)(*v4 + 60);
      v9 = *(unsigned int *)(*v4 + 16);
      v34 = 0x676C6F6270667420;
      v35 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, char *, __int128 *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v7 + 112))(v7, v9, &v34, 40, (char *)&v35 + 4, &v31, 0, 0, 0);
      v11 = *(_DWORD **)(a1 + 8);
      v10 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v11 >= v10)
      {
        v16 = *(_DWORD **)a1;
        v17 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v11 - *(_QWORD *)a1) >> 3);
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) > 0x492492492492492)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v19 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v10 - (_QWORD)v16) >> 3);
        if (2 * v19 > v18)
          v18 = 2 * v19;
        if (v19 >= 0x249249249249249)
          v20 = 0x492492492492492;
        else
          v20 = v18;
        if (v20)
          v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v20);
        else
          v21 = 0;
        v22 = v20 + 56 * v17;
        v23 = v33;
        v24 = v32;
        v25 = v31;
        *(_DWORD *)v22 = v6;
        *(_DWORD *)(v22 + 4) = v8;
        *(_DWORD *)(v22 + 8) = 1;
        *(_OWORD *)(v22 + 16) = v25;
        *(_OWORD *)(v22 + 32) = v24;
        *(_QWORD *)(v22 + 48) = v23;
        if (v11 == v16)
        {
          v30 = v20 + 56 * v17;
        }
        else
        {
          v26 = v20 + 56 * v17;
          do
          {
            v27 = *(_OWORD *)(v11 - 14);
            v28 = *(_OWORD *)(v11 - 10);
            v29 = *(_OWORD *)(v11 - 6);
            v30 = v26 - 56;
            *(_QWORD *)(v26 - 8) = *((_QWORD *)v11 - 1);
            *(_OWORD *)(v26 - 24) = v29;
            *(_OWORD *)(v26 - 40) = v28;
            *(_OWORD *)(v26 - 56) = v27;
            v11 -= 14;
            v26 -= 56;
          }
          while (v11 != v16);
        }
        v15 = (_DWORD *)(v22 + 56);
        *(_QWORD *)a1 = v30;
        *(_QWORD *)(a1 + 8) = v22 + 56;
        *(_QWORD *)(a1 + 16) = v20 + 56 * v21;
        if (v16)
          operator delete(v16);
      }
      else
      {
        v12 = v33;
        v13 = v32;
        v14 = v31;
        *v11 = v6;
        v11[1] = v8;
        v11[2] = 1;
        *((_OWORD *)v11 + 1) = v14;
        *((_OWORD *)v11 + 2) = v13;
        *((_QWORD *)v11 + 6) = v12;
        v15 = v11 + 14;
      }
      *(_QWORD *)(a1 + 8) = v15;
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_1B59A8244(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN15HALS_IOA2Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  mach_port_t v3;
  int v4;
  _DWORD *exception;
  unint64_t inputStruct;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v1 = result;
  v13 = *MEMORY[0x1E0C80C00];
  LODWORD(result) = 1937010544;
  v2 = *(_QWORD *)(v1 + 40);
  inputStruct = vcvtd_n_s64_f64(**(double **)(v1 + 48) - (double)(uint64_t)floor(**(double **)(v1 + 48)), 0x20uLL)
              + (vcvtmd_s64_f64(**(double **)(v1 + 48)) << 32);
  v3 = *(_DWORD *)(v2 + 1820);
  if (!v3
    || !*(_BYTE *)(v2 + 1842)
    || (result = IOConnectCallMethod(v3, 4u, 0, 0, &inputStruct, 8uLL, 0, 0, 0, 0), (_DWORD)result))
  {
    v4 = result;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v8 = "HALS_IOA2UCDevice.cpp";
      v9 = 1024;
      v10 = 223;
      v11 = 1024;
      v12 = v4;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::SetNominalSampleRate: got an error when telling the hardware to change a control value, Error: 0x%X", buf, 0x18u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v4;
  }
  return result;
}

uint64_t ___ZN15HALS_IOA2Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_95(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  void *v9;
  unsigned int v10;
  int v11;
  _DWORD *exception;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(result + 40);
  v2 = *(_QWORD *)(v1 + 1904);
  if (v2)
  {
    v3 = result;
    v4 = *(_DWORD *)(result + 56);
    v5 = v1 + 1904;
    do
    {
      v6 = *(_DWORD *)(v2 + 32);
      v7 = v6 >= v4;
      if (v6 >= v4)
        v8 = (uint64_t *)v2;
      else
        v8 = (uint64_t *)(v2 + 8);
      if (v7)
        v5 = v2;
      v2 = *v8;
    }
    while (*v8);
    if (v5 != v1 + 1904 && v4 >= *(_DWORD *)(v5 + 32))
    {
      v9 = *(void **)(v5 + 40);
      if (v9)
      {
        v10 = *(_DWORD *)(v3 + 60);
        if (v10 <= *(_DWORD *)(v5 + 48))
        {
          if (*(_QWORD *)(v3 + 48))
          {
            memcpy(v9, *(const void **)(v3 + 48), *(unsigned int *)(v3 + 60));
            v4 = *(_DWORD *)(v3 + 56);
            v10 = *(_DWORD *)(v3 + 60);
          }
          return HALS_IOA2UCDevice::MoveDataExchangeBlockData((HALS_IOA2UCDevice *)(v1 + 1808), v4, 1u, v10);
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v13 = 136315394;
          v14 = "HALS_IOA2Device.cpp";
          v15 = 1024;
          v16 = 1718;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_SetPropertyData: wrong data size for property 'canc'", (uint8_t *)&v13, 0x12u);
        }
        v11 = 561211770;
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v13 = 136315394;
          v14 = "HALS_IOA2Device.cpp";
          v15 = 1024;
          v16 = 1717;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_SetPropertyData: bad block ID for property 'canc'", (uint8_t *)&v13, 0x12u);
        }
        v11 = 2003329396;
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = v11;
    }
  }
  return result;
}

void sub_1B59A8608(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  _DWORD *v4;
  int v5;

  if (a2)
  {
    v4 = __cxa_begin_catch(a1);
    if (a2 == 2)
      v5 = v4[2];
    else
      v5 = 2003329396;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = v5;
    __cxa_end_catch();
    JUMPOUT(0x1B59A84D0);
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void sub_1B59A86A4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

BOOL ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1)
{
  const __CFDictionary **v2;
  _BOOL8 result;
  __CFString *v4;

  v2 = (const __CFDictionary **)(*(_QWORD *)(a1 + 32) + 1808);
  v4 = 0;
  result = HALB_UCObject::CopyProperty_CFString(v2, CFSTR("device name"), (const __CFString **)&v4);
  **(_QWORD **)(a1 + 40) = v4;
  return result;
}

void sub_1B59A8700(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_37(uint64_t a1)
{
  uint64_t v2;
  const __CFString *v3;
  const __CFString *v4;
  HALB_CFBundle *v5;
  CFTypeRef cf;
  char v7;

  v2 = *(_QWORD *)(a1 + 32);
  cf = 0;
  HALB_UCObject::CopyProperty_CFString((const __CFDictionary **)(v2 + 1808), CFSTR("device name"), (const __CFString **)&cf);
  v4 = (const __CFString *)cf;
  if (!*(_BYTE *)(v2 + 1864))
  {
    *(_BYTE *)(v2 + 1864) = 1;
    cf = 0;
    v7 = 1;
    CACFString::~CACFString((CACFString *)&cf);
  }
  v5 = *(HALB_CFBundle **)(v2 + 1872);
  if (!v5 || !*((_QWORD *)v5 + 1))
  {
    if (!v4)
    {
      **(_QWORD **)(a1 + 40) = 0;
      return;
    }
    CFRetain(v4);
    **(_QWORD **)(a1 + 40) = v4;
LABEL_9:
    CFRelease(v4);
    return;
  }
  **(_QWORD **)(a1 + 40) = HALB_CFBundle::CopyLocalizedString(v5, v4, CFSTR("IOAudioEngineDescription"), v4, v3);
  if (v4)
    goto LABEL_9;
}

void sub_1B59A87DC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

BOOL ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_41(uint64_t a1)
{
  const __CFDictionary **v2;
  _BOOL8 result;
  __CFString *v4;

  v2 = (const __CFDictionary **)(*(_QWORD *)(a1 + 32) + 1808);
  v4 = 0;
  result = HALB_UCObject::CopyProperty_CFString(v2, CFSTR("device manufacturer"), (const __CFString **)&v4);
  **(_QWORD **)(a1 + 40) = v4;
  return result;
}

void sub_1B59A8840(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_43(uint64_t result)
{
  **(_QWORD **)(result + 40) = 0;
  return result;
}

uint64_t ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_45(uint64_t result)
{
  **(_QWORD **)(result + 40) = 0;
  return result;
}

uint64_t ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_47(uint64_t result)
{
  **(_QWORD **)(result + 40) = 0;
  return result;
}

BOOL ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_51(uint64_t a1)
{
  const __CFDictionary **v2;
  _BOOL8 result;
  __CFString *v4;

  v2 = (const __CFDictionary **)(*(_QWORD *)(a1 + 32) + 1808);
  v4 = 0;
  result = HALB_UCObject::CopyProperty_CFString(v2, CFSTR("model UID"), (const __CFString **)&v4);
  **(_QWORD **)(a1 + 40) = v4;
  return result;
}

void sub_1B59A88C4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_53(uint64_t a1)
{
  const __CFDictionary **v2;
  unsigned int v3;

  v2 = (const __CFDictionary **)(*(_QWORD *)(a1 + 32) + 1808);
  v3 = 0;
  HALB_UCObject::CopyProperty_UInt32(v2, CFSTR("transport type"), &v3);
  **(_DWORD **)(a1 + 40) = v3;
}

void sub_1B59A8924(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_55(uint64_t a1)
{
  const __CFDictionary **v2;
  unsigned int v3;

  v2 = (const __CFDictionary **)(*(_QWORD *)(a1 + 32) + 1808);
  v3 = 0;
  HALB_UCObject::CopyProperty_UInt32(v2, CFSTR("clock domain"), &v3);
  **(_DWORD **)(a1 + 40) = v3;
}

void sub_1B59A8984(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_57(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, BOOL, _QWORD))(**(_QWORD **)(a1 + 32) + 568))(*(_QWORD *)(a1 + 32), *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4) == 1768845428, *(_QWORD *)(a1 + 56));
  **(_DWORD **)(a1 + 40) = result != 0;
  return result;
}

void sub_1B59A89EC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_59(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, BOOL, _QWORD))(**(_QWORD **)(a1 + 32) + 568))(*(_QWORD *)(a1 + 32), *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4) == 1768845428, *(_QWORD *)(a1 + 56));
  **(_DWORD **)(a1 + 40) = result != 0;
  return result;
}

void sub_1B59A8A50(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_61(uint64_t a1)
{
  const __CFDictionary **v2;
  int v3;
  const __CFString *v4;
  unsigned int v5;
  double v6;
  HALS_Client *v7;
  uint64_t DSPLatencyForClient;
  unsigned int v9;

  v2 = *(const __CFDictionary ***)(a1 + 32);
  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4);
  v9 = 0;
  if (v3 == 1768845428)
    v4 = CFSTR("input latency");
  else
    v4 = CFSTR("output latency");
  HALB_UCObject::CopyProperty_UInt32(v2 + 226, v4, &v9);
  v5 = v9;
  if ((*((unsigned int (**)(const __CFDictionary **))*v2 + 55))(v2))
    v5 += HALS_Device::GetStreamDSPLatency((HALS_Device *)v2, (const BOOL *)*(unsigned __int8 *)(a1 + 80));
  if (*(_BYTE *)(a1 + 56))
  {
    v6 = *(double *)(a1 + 48);
    v5 = (v6 / (*((double (**)(const __CFDictionary **))*v2 + 33))(v2) * (double)v5);
  }
  v7 = *(HALS_Client **)(a1 + 64);
  if (v7)
  {
    DSPLatencyForClient = HALS_Device::GetDSPLatencyForClient((HALS_Device *)v2, *(_BYTE *)(a1 + 80), v7);
    if ((DSPLatencyForClient & 0xFF00000000) != 0)
      v5 += DSPLatencyForClient;
  }
  **(_DWORD **)(a1 + 72) = v5;
}

void sub_1B59A8B48(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_63(uint64_t a1)
{
  const __CFDictionary **v2;
  unsigned int v3;

  v2 = (const __CFDictionary **)(*(_QWORD *)(a1 + 32) + 1808);
  v3 = 0;
  HALB_UCObject::CopyProperty_UInt32(v2, CFSTR("io buffer frame size"), &v3);
  **(_DWORD **)(a1 + 40) = v3;
}

void sub_1B59A8BB4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_65(uint64_t a1)
{
  const __CFDictionary **v2;
  int v3;
  const __CFString *v4;
  unsigned int v5;
  double v6;
  unsigned int v7;

  v2 = *(const __CFDictionary ***)(a1 + 32);
  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4);
  v7 = 0;
  if (v3 == 1768845428)
    v4 = CFSTR("input safety offset");
  else
    v4 = CFSTR("output safety offset");
  HALB_UCObject::CopyProperty_UInt32(v2 + 226, v4, &v7);
  v5 = v7;
  if (*(_BYTE *)(a1 + 56))
  {
    v6 = *(double *)(a1 + 48);
    v5 = (v6 / (*((double (**)(const __CFDictionary **))*v2 + 33))(v2) * (double)v5);
  }
  **(_DWORD **)(a1 + 64) = v5;
}

void sub_1B59A8C6C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t __Block_byref_object_copy__67(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 40) = &off_1E69A0EA8;
  return result;
}

void __Block_byref_object_dispose__68(uint64_t a1)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 40));
}

uint64_t ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_69(uint64_t a1)
{
  const __CFDictionary **v2;
  const __CFString *v3;
  __CFArray *v5;

  v2 = (const __CFDictionary **)(*(_QWORD *)(a1 + 40) + 1808);
  if (*(_BYTE *)(a1 + 48))
    v3 = CFSTR("input channel layout");
  else
    v3 = CFSTR("output channel layout");
  v5 = 0;
  HALB_UCObject::CopyProperty_CFArray(v2, v3, &v5);
  return OS::CF::UntypedObject::operator=(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, (uint64_t)v5);
}

void sub_1B59A8D10(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_71(uint64_t a1)
{
  **(double **)(a1 + 40) = HALS_IOA2UCDevice::GetNominalSampleRate((const __CFDictionary **)(*(_QWORD *)(a1 + 32)
                                                                                           + 1808));
}

void sub_1B59A8D54(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t __Block_byref_object_copy__27(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__28(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 40), a2);
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(uint64_t a1, HALS_Object *a2)
{
  _QWORD *v3;
  HALS_ObjectMap **v4;
  HALS_ObjectMap *v5;
  HALS_ObjectMap **v6;
  HALS_ObjectMap **v7;
  uint64_t v8;
  HALS_ObjectMap *v9;
  HALS_Object *v10;

  v3 = *(_QWORD **)(a1 + 40);
  v4 = (HALS_ObjectMap **)v3[163];
  if ((HALS_ObjectMap **)v3[164] == v4)
  {
    v6 = (HALS_ObjectMap **)v3[167];
    v7 = (HALS_ObjectMap **)v3[166];
    if (v6 == v7)
      return;
    v5 = *v7;
  }
  else
  {
    v5 = *v4;
  }
  HALS_ObjectMap::RetainObject(v5, a2);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = *(HALS_ObjectMap **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v5;
  HALS_ObjectMap::ReleaseObject(v9, v10);
}

uint64_t ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_74(uint64_t result)
{
  **(_DWORD **)(result + 40) = 0;
  return result;
}

uint64_t ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_76(uint64_t result)
{
  **(_QWORD **)(result + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void sub_1B59A90C8(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  _DWORD *v4;

  if (a2)
  {
    v4 = __cxa_begin_catch(a1);
    if (a2 == 2)
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 24) = v4[2];
    else
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 24) = 2003329396;
    __cxa_end_catch();
    JUMPOUT(0x1B59A8F8CLL);
  }
  _Unwind_Resume(a1);
}

CFTypeID ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_82(uint64_t a1)
{
  const __CFDictionary **v2;
  const void *v3;
  CFTypeID v4;
  CFTypeID result;
  _DWORD *exception;
  _BYTE cf[12];
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFDictionary **)(*(_QWORD *)(a1 + 32) + 1808);
  *(_QWORD *)cf = 0;
  if (HALB_UCObject::CopyProperty_CFType(v2, CFSTR("headset info"), (const void **)cf))
  {
    v3 = *(const void **)cf;
    v4 = CFGetTypeID(*(CFTypeRef *)cf);
    result = CFDictionaryGetTypeID();
    if (v4 == result)
    {
      if (v3)
        goto LABEL_7;
    }
    else
    {
      CFRelease(v3);
    }
  }
  result = (CFTypeID)CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  v3 = (const void *)result;
  if (!result)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)cf = 136315394;
      *(_QWORD *)&cf[4] = "HALS_IOA2UCDevice.cpp";
      v8 = 1024;
      v9 = 285;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::CopyHeadsetInfo: could not allocate an empty dictionary", cf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003329396;
  }
LABEL_7:
  **(_QWORD **)(a1 + 40) = v3;
  return result;
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_84(uint64_t a1)
{
  const __CFDictionary **v2;
  CFTypeRef v3;
  CFMutableArrayRef Mutable;
  __CFArray *v5;
  CFTypeRef cf;
  __int16 v7;
  void *value;
  char v9;
  __CFArray *v10;

  v2 = (const __CFDictionary **)(*(_QWORD *)(a1 + 32) + 1808);
  v10 = 0;
  if (!HALB_UCObject::CopyProperty_CFArray(v2, CFSTR("legacy UID list"), &v10))
  {
    value = 0;
    v9 = 1;
    cf = 0;
    if (HALB_UCObject::CopyProperty_CFString(v2, CFSTR("legacy UID list"), (const __CFString **)&cf))
    {
      v3 = cf;
      CACFString::operator=((uint64_t)&value, cf);
      if (v3)
        CFRelease(v3);
    }
    if (value)
    {
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
      cf = Mutable;
      v7 = 257;
      if (Mutable && (CFArrayAppendValue(Mutable, value), cf))
      {
        CFRetain(cf);
        v5 = (__CFArray *)cf;
      }
      else
      {
        v5 = 0;
      }
      v10 = v5;
      CACFArray::~CACFArray((CACFArray *)&cf);
    }
    CACFString::~CACFString((CACFString *)&value);
  }
  **(_QWORD **)(a1 + 40) = v10;
}

void sub_1B59A93C4(void *a1)
{
  uint64_t v2;
  uint64_t v3;

  CACFArray::~CACFArray((CACFArray *)&v2);
  CACFString::~CACFString((CACFString *)&v3);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_86(uint64_t a1)
{
  const __CFDictionary **v2;
  unsigned int v3;

  v2 = (const __CFDictionary **)(*(_QWORD *)(a1 + 40) + 1808);
  v3 = 1;
  HALB_UCObject::CopyProperty_UInt32(v2, CFSTR("allows auto route"), &v3);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
}

void sub_1B59A9458(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_88(uint64_t a1)
{
  uint64_t v2;
  const void *TypeID;
  const __CFString *v4;
  _BYTE v5[8];
  CFTypeRef cf;
  void (**v7)(OS::CF::String *__hidden);
  const __CFString *v8;
  void *v9;

  v2 = *(_QWORD *)(a1 + 32);
  v9 = 0;
  OS::CF::DictionaryBase<__CFDictionary const*>::operator[]((uint64_t)v5, *(CFDictionaryRef *)(a1 + 48), CFSTR("registry key"));
  TypeID = OS::CF::UntypedObject::GetTypeID(cf);
  if (TypeID == (const void *)CFStringGetTypeID())
  {
    v4 = (const __CFString *)cf;
    if (cf)
      CFRetain(cf);
    v8 = v4;
  }
  else
  {
    v4 = 0;
    v8 = 0;
  }
  v7 = &off_1E69A0F60;
  HALB_UCObject::CopyProperty_CFType((const __CFDictionary **)(v2 + 1808), v4, (const void **)&v9);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v7);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v5);
  **(_QWORD **)(a1 + 56) = v9;
}

void sub_1B59A9528(void *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va1);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B59A9510);
}

void sub_1B59A958C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

OS::CF::UntypedObject *__copy_helper_block_e8_40c24_ZTSN2OS2CF10DictionaryE(uint64_t a1, uint64_t a2)
{
  OS::CF::UntypedObject *result;

  result = OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(a1 + 40), *(CFTypeRef *)(a2 + 48));
  *(_QWORD *)(a1 + 40) = &off_1E69A0DE0;
  return result;
}

void __destroy_helper_block_e8_40c24_ZTSN2OS2CF10DictionaryE(uint64_t a1)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 40));
}

void ___ZNK15HALS_IOA2Device19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(uint64_t a1, HALS_Object *a2)
{
  _QWORD *v3;
  HALS_ObjectMap **v4;
  HALS_ObjectMap *v5;
  HALS_ObjectMap **v6;
  HALS_ObjectMap **v7;
  uint64_t v8;
  HALS_ObjectMap *v9;
  HALS_Object *v10;

  v3 = *(_QWORD **)(a1 + 40);
  v4 = (HALS_ObjectMap **)v3[163];
  if ((HALS_ObjectMap **)v3[164] == v4)
  {
    v6 = (HALS_ObjectMap **)v3[167];
    v7 = (HALS_ObjectMap **)v3[166];
    if (v6 == v7)
      return;
    v5 = *v7;
  }
  else
  {
    v5 = *v4;
  }
  HALS_ObjectMap::RetainObject(v5, a2);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = *(HALS_ObjectMap **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v5;
  HALS_ObjectMap::ReleaseObject(v9, v10);
}

uint64_t ___ZNK15HALS_IOA2Device19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_32(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(result + 40);
  v2 = *(_QWORD *)(v1 + 1904);
  if (v2)
  {
    v3 = v1 + 1904;
    v4 = *(_DWORD *)(result + 48);
    v5 = v1 + 1904;
    do
    {
      v6 = *(_DWORD *)(v2 + 32);
      v7 = v6 >= v4;
      if (v6 >= v4)
        v8 = (uint64_t *)v2;
      else
        v8 = (uint64_t *)(v2 + 8);
      if (v7)
        v5 = v2;
      v2 = *v8;
    }
    while (*v8);
    if (v5 != v3 && v4 >= *(_DWORD *)(v5 + 32))
    {
      v9 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
      v10 = *(_QWORD *)(v5 + 40);
      *(_DWORD *)(v9 + 48) = *(_DWORD *)(v5 + 48);
      *(_QWORD *)(v9 + 40) = v10;
    }
  }
  return result;
}

void sub_1B59A96E8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void sub_1B59A9734(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t __Block_byref_object_copy__4020(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 40) = &off_1E69A0F60;
  return result;
}

void __Block_byref_object_dispose__4021(uint64_t a1)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 40));
}

uint64_t ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_2(uint64_t a1)
{
  const __CFDictionary **v2;
  __CFString *v4;

  v2 = (const __CFDictionary **)(*(_QWORD *)(a1 + 40) + 1808);
  v4 = 0;
  HALB_UCObject::CopyProperty_CFString(v2, CFSTR("device manufacturer"), (const __CFString **)&v4);
  return OS::CF::UntypedObject::operator=(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, (uint64_t)v4);
}

void sub_1B59A97B8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_3(uint64_t a1)
{
  return OS::CF::UntypedObject::operator=(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, 0);
}

uint64_t ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_4(uint64_t a1)
{
  return OS::CF::UntypedObject::operator=(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, 0);
}

uint64_t ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_5(uint64_t a1)
{
  const __CFDictionary **v2;
  __CFString *v4;

  v2 = (const __CFDictionary **)(*(_QWORD *)(a1 + 40) + 1808);
  v4 = 0;
  HALB_UCObject::CopyProperty_CFString(v2, CFSTR("model UID"), (const __CFString **)&v4);
  return OS::CF::UntypedObject::operator=(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, (uint64_t)v4);
}

void sub_1B59A9844(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_6(uint64_t a1)
{
  return OS::CF::UntypedObject::operator=(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, 0);
}

void ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_7(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  CFStringRef v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = CFStringCreateWithCString(0, "Codec", 0x600u);
  v5 = 1;
  if (CFStringCompare(*(CFStringRef *)(v2 + 96), v4, 0))
    v3 = 0;
  else
    v3 = *(_QWORD *)(v2 + 1912) != 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  CACFString::~CACFString((CACFString *)&v4);
}

void sub_1B59A98F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFString::~CACFString((CACFString *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B59A98E0);
}

BOOL ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_8(uint64_t a1)
{
  _BOOL8 result;

  result = HALB_UCObject::HasProperty((HALB_UCObject *)(*(_QWORD *)(a1 + 40) + 1808), CFSTR("headset info"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B59A9950(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

BOOL ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_9(uint64_t a1)
{
  _BOOL8 result;

  result = HALB_UCObject::HasProperty((HALB_UCObject *)(*(_QWORD *)(a1 + 40) + 1808), CFSTR("legacy UID list"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B59A999C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

BOOL ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_10(uint64_t a1)
{
  _BOOL8 result;

  result = HALB_UCObject::HasProperty((HALB_UCObject *)(*(_QWORD *)(a1 + 40) + 1808), CFSTR("allows auto route"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B59A99E8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Device18CopyResourceBundleEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 40);
  if (!*(_BYTE *)(v2 + 1864))
  {
    *(_BYTE *)(v2 + 1864) = 1;
    v4 = 0;
    v5 = 1;
    CACFString::~CACFString((CACFString *)&v4);
  }
  v3 = *(_QWORD *)(v2 + 1872);
  if (v3)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(v3 + 8);
    CFRetain(*(CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  }
}

void HALS_IOA2Device::_TeardownStreams(HALS_IOA2Device *this)
{
  uint64_t v2;
  char v3;
  char v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  HALS_ObjectMap *v11;
  HALS_Object *v12;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = (char *)this + 24 * v2;
    v6 = v5 + 1312;
    v7 = *((_QWORD *)v5 + 164);
    if (v7 != *((_QWORD *)v5 + 163))
    {
      v8 = 0;
      v9 = (uint64_t *)(v5 + 1304);
      v10 = 1;
      v7 = *((_QWORD *)v5 + 163);
      do
      {
        v11 = *(HALS_ObjectMap **)(v7 + 8 * v8);
        (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v11 + 8))(v11);
        HALS_ObjectMap::ObjectIsDead(v11, v12);
        v8 = v10;
        v7 = *v9;
        ++v10;
      }
      while (v8 < (*v6 - *v9) >> 3);
    }
    v3 = 0;
    *v6 = v7;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
}

void HALS_IOA2Device::_TeardownControls(HALS_IOA2Device *this)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  HALS_ObjectMap *v5;
  HALS_Object *v6;

  v2 = *((_QWORD *)this + 170);
  if (v2 != *((_QWORD *)this + 169))
  {
    v3 = 0;
    v4 = 1;
    v2 = *((_QWORD *)this + 169);
    do
    {
      v5 = *(HALS_ObjectMap **)(v2 + 8 * v3);
      (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v5 + 8))(v5);
      HALS_ObjectMap::ObjectIsDead(v5, v6);
      v3 = v4;
      v2 = *((_QWORD *)this + 169);
      ++v4;
    }
    while (v3 < (*((_QWORD *)this + 170) - v2) >> 3);
  }
  *((_QWORD *)this + 170) = v2;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 173));
  *((_QWORD *)this + 172) = (char *)this + 1384;
  *((_QWORD *)this + 174) = 0;
  *((_QWORD *)this + 173) = 0;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 176));
  *((_QWORD *)this + 175) = (char *)this + 1408;
  *((_QWORD *)this + 177) = 0;
  *((_QWORD *)this + 176) = 0;
}

uint64_t std::__tree<std::__value_type<CAPropertyAddress,unsigned int>,std::__map_value_compare<CAPropertyAddress,std::__value_type<CAPropertyAddress,unsigned int>,CAPropertyAddress::LessThan,false>,std::allocator<std::__value_type<CAPropertyAddress,unsigned int>>>::~__tree(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(a1 + 8));
  v2 = *(_QWORD **)(a1 + 48);
  if (v2 == (_QWORD *)(a1 + 24))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 24);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void ___ZN15HALS_IOA2Device8ActivateEv_block_invoke(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  _BOOL4 v3;
  HALS_Object *v4;
  mach_port_name_t v5;
  const AudioObjectPropertyAddress *v6;
  mach_msg_return_t v7;
  uint64_t v8;
  uint8x8_t v9;
  _BYTE *v10;
  int v11;
  _DWORD *v12;
  int v13;
  int *v14;
  int v16;
  HALB_Mutex *v17;
  unsigned int *v18;
  HALS_Object *v19;
  int v20;
  HALB_Mutex *v21;
  uint64_t v22;
  void *v25;
  int v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  BOOL v31;
  AudioObjectPropertyAddress *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int *v45;
  _BYTE *v47;
  _BYTE *v48;
  __int32 v49;
  int16x8_t v50;
  int16x8_t v51;
  const AudioObjectPropertyAddress *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  const char *v56;
  uint8_t *v57;
  uint32_t v58;
  char *v59;
  _DWORD *exception;
  unsigned __int32 v61;
  char v62;
  AudioObjectPropertyAddress v63;
  _QWORD v64[5];
  int v65;
  AudioObjectPropertyAddress v66;
  _BYTE v67[34];
  __int16 v68;
  unsigned __int32 *v69;
  __int16 v70;
  int v71;
  _BYTE buf[28];
  _DWORD v73[269];
  _BYTE v74[40];
  uint64_t v75;
  int v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 32);
  v2 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v1);
  v3 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v3)
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2266;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v2 + 156;
      LOWORD(v73[0]) = 1024;
      *(_DWORD *)((char *)v73 + 2) = v1;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOA2Device::IOAudio2DeviceNotificationPortMessageHandler: %s|%d +++++++++------>", buf, 0x22u);
    }
    v5 = *(_DWORD *)(v2 + 1848);
    if (v5)
    {
      memset(buf, 0, 24);
      v7 = mach_msg((mach_msg_header_t *)buf, 2, 0, 0x448u, v5, 0, 0);
      if (!v7)
      {
        if (v73[0])
        {
          v8 = 0;
          v9.i32[1] = 0;
          while (1)
          {
            v10 = &buf[32 * v8];
            v13 = *((_DWORD *)v10 + 9);
            v12 = v10 + 36;
            v11 = v13;
            v14 = v12 - 1;
            if (v13 > 1735354733)
            {
              if (v11 == 1735354734 || v11 == 1751215220)
              {
                v9.i32[1] = 0;
                memset(v67, 0, 32);
                if (v11 == 1751215220 || v11 == 1735354734)
                {
                  *(_QWORD *)&v66.mSelector = 0x676C6F62676F6E65;
                  v66.mElement = 0;
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v67, &v66, v6);
                  v25 = *(void **)v67;
                  if (*(_QWORD *)v67 != *(_QWORD *)&v67[8])
                    HALS_Object::PropertiesChanged((HALS_Object *)v2, (HALS_NotificationManager *)*(unsigned int *)(v2 + 16), 0, -1431655765 * ((*(_QWORD *)&v67[8] - *(_QWORD *)v67) >> 2), *(const AudioObjectPropertyAddress **)v67);
                  if (v25)
                    operator delete(v25);
                }
              }
              else if (v11 == 1886547824)
              {
                *(_BYTE *)(v2 + 1840) = 1;
                v26 = *v14;
                v27 = (unsigned int *)(v2 + 16);
                if (*v14)
                {
                  v28 = 0;
                  v29 = *(_QWORD *)(v2 + 1352);
                  while ((*(_QWORD *)(v2 + 1360) - v29) >> 3 > (unint64_t)v28)
                  {
                    v30 = *(unsigned int **)(v29 + 8 * v28++);
                    if (v30)
                      v31 = v30[18] == v26;
                    else
                      v31 = 0;
                    if (v31)
                      goto LABEL_53;
                  }
                  v30 = 0;
LABEL_53:
                  v35 = 0;
                  v36 = 1;
                  do
                  {
                    v37 = v36;
                    v38 = v2 + 24 * v35;
                    v39 = *(_QWORD *)(v38 + 1312);
                    v40 = *(_QWORD *)(v38 + 1304);
                    v41 = v39 - v40;
                    if (v41)
                    {
                      v42 = 0;
                      v43 = v41 >> 3;
                      v44 = 1;
                      while (1)
                      {
                        v45 = *(unsigned int **)(v40 + 8 * v42);
                        if (v45[15] == v26 && !v45[14])
                          break;
                        v42 = v44;
                        if (v43 <= v44++)
                          goto LABEL_59;
                      }
                      v27 = v45 + 4;
                      goto LABEL_63;
                    }
LABEL_59:
                    v36 = 0;
                    v35 = 1;
                  }
                  while ((v37 & 1) != 0);
                  if (!v30)
                    goto LABEL_64;
                  HALS_IOA2Control::SynchronizeWithRegistry((HALS_IOA2Control *)v30);
                  v27 = v30 + 4;
                }
LABEL_63:
                v30 = (unsigned int *)*v27;
LABEL_64:
                v47 = &buf[32 * v8];
                v49 = *((_DWORD *)v47 + 10);
                v48 = v47 + 40;
                v9.i32[0] = v49;
                v50 = (int16x8_t)vmovl_u8(v9);
                *(int16x4_t *)v50.i8 = vrev64_s16(*(int16x4_t *)v50.i8);
                *(int8x8_t *)v50.i8 = vmovn_s16(v50);
                v66.mSelector = v50.i32[0];
                LOBYTE(v66.mScope) = 0;
                v50.i32[0] = *((_DWORD *)v48 + 1);
                v51 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v50.i8);
                *(int16x4_t *)v51.i8 = vrev64_s16(*(int16x4_t *)v51.i8);
                v61 = vmovn_s16(v51).u32[0];
                v62 = 0;
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                {
                  v53 = *(_QWORD *)&v73[8 * v8 + 5];
                  *(_DWORD *)v67 = 136316418;
                  *(_QWORD *)&v67[4] = "HALS_IOA2Device.cpp";
                  *(_WORD *)&v67[12] = 1024;
                  *(_DWORD *)&v67[14] = 2327;
                  *(_WORD *)&v67[18] = 1024;
                  *(_DWORD *)&v67[20] = (_DWORD)v30;
                  *(_WORD *)&v67[24] = 2080;
                  *(_QWORD *)&v67[26] = &v66;
                  v68 = 2080;
                  v69 = &v61;
                  v70 = 1024;
                  v71 = v53;
                  _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOA2Device::IOAudio2DeviceNotificationPortMessageHandler: property changed: ID: %d Address: '%s', '%s', %d", v67, 0x32u);
                }
                if ((_DWORD)v30)
                {
                  v54 = *(_QWORD *)&v73[8 * v8 + 5];
                  *(_QWORD *)&v63.mSelector = *(_QWORD *)v48;
                  v63.mElement = v54;
                  HALS_NotificationManager::PropertiesChanged((HALS_NotificationManager *)v30, 0, 1, &v63, v52);
                }
              }
              goto LABEL_68;
            }
            if (v11 != 1668247142)
              break;
            HALS_IOA2Device::HandleConfigChange((unsigned int *)v2, (uint64_t)v14);
LABEL_68:
            if (++v8 >= (unint64_t)v73[0])
              goto LABEL_69;
          }
          if (v11 != 1668443751 && v11 != 1668702572)
            goto LABEL_68;
          v16 = *v14;
          *(_QWORD *)v67 = 0;
          *(_QWORD *)&v67[8] = v67;
          *(_OWORD *)&v67[16] = 0x2000000000uLL;
          *(_QWORD *)v74 = MEMORY[0x1E0C809B0];
          *(_QWORD *)&v74[8] = 0x40000000;
          *(_QWORD *)&v74[16] = ___ZNK15HALS_IOA2Device17CopyControlByUCIDEj_block_invoke;
          *(_QWORD *)&v74[24] = &unk_1E6978AD8;
          *(_QWORD *)&v74[32] = v67;
          v75 = v2;
          v76 = v16;
          v17 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
          HALB_CommandGate::ExecuteCommand(v17, (uint64_t)v74);
          v18 = *(unsigned int **)(*(_QWORD *)&v67[8] + 24);
          _Block_object_dispose(v67, 8);
          if (!v18)
          {
LABEL_51:
            HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v18, v19);
            goto LABEL_68;
          }
          memset(v74, 0, 32);
          if (*v12 == 1668443751)
          {
            *(_BYTE *)(v2 + 1840) = 1;
            HALS_IOA2Control::SynchronizeWithRegistry((HALS_IOA2Control *)v18);
            v22 = 26;
          }
          else
          {
            if (*v12 != 1668702572)
            {
              v32 = 0;
              v33 = 0;
              goto LABEL_47;
            }
            v20 = v73[8 * v8 + 3];
            v64[0] = MEMORY[0x1E0C809B0];
            v64[1] = 0x40000000;
            v64[2] = ___ZN16HALS_IOA2Control12PushNewValueEi_block_invoke;
            v64[3] = &__block_descriptor_tmp_65_9036;
            v64[4] = v18;
            v65 = v20;
            v21 = (HALB_Mutex *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v18 + 56))(v18);
            HALB_CommandGate::ExecuteCommand(v21, (uint64_t)v64);
            v22 = 25;
          }
          (*(void (**)(unsigned int *, _BYTE *))(*(_QWORD *)v18 + 8 * v22))(v18, v74);
          v32 = *(AudioObjectPropertyAddress **)v74;
          v33 = *(_QWORD *)&v74[8];
LABEL_47:
          v34 = -1431655765 * ((unint64_t)(v33 - (_QWORD)v32) >> 2);
          if ((_DWORD)v34)
          {
            HALS_Object::PropertiesChanged((HALS_Object *)v2, (HALS_NotificationManager *)v18[4], 0, v34, v32);
            v32 = *(AudioObjectPropertyAddress **)v74;
          }
          if (v32)
          {
            *(_QWORD *)&v74[8] = v32;
            operator delete(v32);
          }
          goto LABEL_51;
        }
LABEL_69:
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v67 = 136315906;
          *(_QWORD *)&v67[4] = "HALS_IOA2Device.cpp";
          *(_WORD *)&v67[12] = 1024;
          *(_DWORD *)&v67[14] = 2343;
          *(_WORD *)&v67[18] = 2080;
          *(_QWORD *)&v67[20] = v2 + 156;
          *(_WORD *)&v67[28] = 1024;
          *(_DWORD *)&v67[30] = v1;
          v55 = MEMORY[0x1E0C81028];
          v56 = "%25s:%-5d  HALS_IOA2Device::IOAudio2DeviceNotificationPortMessageHandler: %s|%d <------+++++++++";
          v57 = v67;
          v58 = 34;
LABEL_73:
          _os_log_impl(&dword_1B57BA000, v55, OS_LOG_TYPE_DEFAULT, v56, v57, v58);
          goto LABEL_74;
        }
        goto LABEL_74;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v59 = mach_error_string(v7);
        *(_DWORD *)v74 = 136315906;
        *(_QWORD *)&v74[4] = "HALB_MachPort.cpp";
        *(_WORD *)&v74[12] = 1024;
        *(_DWORD *)&v74[14] = 240;
        *(_WORD *)&v74[18] = 1024;
        *(_DWORD *)&v74[20] = v7;
        *(_WORD *)&v74[24] = 2080;
        *(_QWORD *)&v74[26] = v59;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_MachPort::ReceiveMessage: mach_msg() returned error 0x%X: '%s'", v74, 0x22u);
      }
    }
    else
    {
      v7 = 268451842;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v74 = 136315650;
      *(_QWORD *)&v74[4] = "HALS_IOA2Device.cpp";
      *(_WORD *)&v74[12] = 1024;
      *(_DWORD *)&v74[14] = 2276;
      *(_WORD *)&v74[18] = 1024;
      *(_DWORD *)&v74[20] = v7;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_IOAudio2DeviceNotificationPortMessageHandler: failed to receive the message, Error: 0x%X", v74, 0x18u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v7;
  }
  if (v3)
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "HALS_IOA2Device.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2349;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v1;
    v55 = MEMORY[0x1E0C81028];
    v56 = "%25s:%-5d  HALS_IOA2Device::IOAudio2DeviceNotificationPortMessageHandler: got a message for a non-existent device (%d)";
    v57 = buf;
    v58 = 24;
    goto LABEL_73;
  }
LABEL_74:
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v2, v4);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_4,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  uint64_t v2;

  if ((int)MEMORY[0x1B5E5064C]() > *(_DWORD *)a1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v2 + 1800))
      HALS_IOA2Device::_CloseConnection((HALS_IOA2Device **)v2);
  }
  return a1;
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_3,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  AMCP::Utility::Dispatch_Queue *v4;

  if ((int)MEMORY[0x1B5E5064C]() > *(_DWORD *)a1)
  {
    v2 = *(_DWORD **)(a1 + 8);
    v3 = v2[462];
    v2[462] = 0;
    v4 = (AMCP::Utility::Dispatch_Queue *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 64))(v2);
    AMCP::Utility::Dispatch_Queue::remove_mach_port_receiver(v4, v3);
  }
  return a1;
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_2,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  uint64_t v2;
  HALS_Object *v3;

  if ((int)MEMORY[0x1B5E5064C]() > *(_DWORD *)a1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 1776) + 8))(*(_QWORD *)(v2 + 1776));
    HALS_ObjectMap::ObjectIsDead(*(HALS_ObjectMap **)(v2 + 1776), v3);
    *(_QWORD *)(v2 + 1776) = 0;
  }
  return a1;
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_1,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1B5E5064C]() > *(_DWORD *)a1)
    HALS_IOA2Device::_TeardownControls(*(HALS_IOA2Device **)(a1 + 8));
  return a1;
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1B5E5064C]() > *(_DWORD *)a1)
    HALS_IOA2Device::_TeardownStreams(*(HALS_IOA2Device **)(a1 + 8));
  return a1;
}

void ___ZNK15HALS_IOA2Device17CopyControlByUCIDEj_block_invoke(uint64_t a1, HALS_Object *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;

  v2 = 0;
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(v3 + 1360);
  v5 = *(_QWORD *)(v3 + 1352);
  v6 = (v4 - v5) >> 3;
  while (v6 > v2)
  {
    v7 = *(_QWORD *)(v5 + 8 * v2++);
    if (v7)
      v8 = *(_DWORD *)(v7 + 72) == *(_DWORD *)(a1 + 48);
    else
      v8 = 0;
    if (v8)
      goto LABEL_10;
  }
  v7 = 0;
LABEL_10:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v7;
  HALS_ObjectMap::RetainObject(*(HALS_ObjectMap **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), a2);
}

void _ZNSt3__110__function6__funcIZN17CAPropertyAddress8LessThanC1EvEUlRKT_RKT0_E_NS_9allocatorISA_EEFbRK26AudioObjectPropertyAddressSF_EED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *_ZNKSt3__110__function6__funcIZN17CAPropertyAddress8LessThanC1EvEUlRKT_RKT0_E_NS_9allocatorISA_EEFbRK26AudioObjectPropertyAddressSF_EE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6979200;
  return result;
}

void _ZNKSt3__110__function6__funcIZN17CAPropertyAddress8LessThanC1EvEUlRKT_RKT0_E_NS_9allocatorISA_EEFbRK26AudioObjectPropertyAddressSF_EE7__cloneEPNS0_6__baseISG_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6979200;
}

BOOL _ZNSt3__110__function6__funcIZN17CAPropertyAddress8LessThanC1EvEUlRKT_RKT0_E_NS_9allocatorISA_EEFbRK26AudioObjectPropertyAddressSF_EEclESF_SF_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v3;
  unsigned int v4;
  BOOL v5;

  v3 = a2[1];
  v4 = a3[1];
  v5 = v3 >= v4;
  if (v3 == v4)
  {
    v5 = *a2 >= *a3;
    if (*a2 == *a3)
      v5 = a2[2] >= a3[2];
  }
  return !v5;
}

uint64_t _ZNKSt3__110__function6__funcIZN17CAPropertyAddress8LessThanC1EvEUlRKT_RKT0_E_NS_9allocatorISA_EEFbRK26AudioObjectPropertyAddressSF_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN17CAPropertyAddress8LessThanC1EvEUlRKT_RKT0_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN17CAPropertyAddress8LessThanC1EvEUlRKT_RKT0_E_NS_9allocatorISA_EEFbRK26AudioObjectPropertyAddressSF_EE11target_typeEv()
{
  return &_ZTIZN17CAPropertyAddress8LessThanC1EvEUlRKT_RKT0_E_;
}

uint64_t std::unordered_set<unsigned int>::unordered_set(uint64_t a1, uint64_t a2)
{
  uint64_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a1, *((_DWORD *)i + 4), *((_DWORD *)i + 4));
  return a1;
}

void sub_1B59AA994(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(HALS_Client *,BOOL)>::operator()(uint64_t a1, uint64_t a2, char a3)
{
  char v4;
  uint64_t v5;

  v5 = a2;
  v4 = a3;
  if (!a1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)a1 + 48))(a1, &v5, &v4);
}

BOOL HALS_ReferenceStreamStateManager::GetReferenceStreamStateForClient(std::__shared_mutex_base *this, int a2)
{
  uint64_t *i;
  _BOOL8 v5;
  std::__shared_mutex_base *v7;
  char v8;

  v7 = this;
  v8 = 1;
  std::__shared_mutex_base::lock_shared(this);
  for (i = *(uint64_t **)&this[1].__mut_.__m_.__opaque[8]; i; i = (uint64_t *)*i)
  {
    if (*((_DWORD *)i + 4) == a2)
      break;
  }
  v5 = i != 0;
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v7);
  return v5;
}

BOOL HALS_ReferenceStreamStateManager::ReferenceStreamIsEnabledForAnyClientOrContext(std::__shared_mutex_base *this)
{
  _BOOL8 v2;
  std::__shared_mutex_base *v4;
  char v5;

  v4 = this;
  v5 = 1;
  std::__shared_mutex_base::lock_shared(this);
  v2 = (*(_QWORD *)&this[1].__mut_.__m_.__opaque[16] | this[1].__gate1_.__cv_.__sig) != 0;
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v4);
  return v2;
}

uint64_t AMCP::get_object_property_traits_list(AMCP *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  if ((v1 & 1) == 0
  {
    AMCP::get_object_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  v2 = atomic_load(&AMCP::get_object_property_traits_list(void)::once);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&AMCP::get_object_property_traits_list(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_object_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_object_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_object_property_traits_list(void)::$_0 &&>>()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  void **v7[2];
  char v8;
  int v9[12];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v9, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v24, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v25, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v26, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  v7[1] = (void **)v0;
  v8 = 0;
  v1 = (char *)operator new(0x360uLL);
  *(_QWORD *)v0 = v1;
  *(_QWORD *)(v0 + 8) = v1;
  *(_QWORD *)(v0 + 16) = v1 + 864;
  *(_QWORD *)(v0 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits*>(v0 + 16, v9, (int *)&v27, (uint64_t)v1);
  v7[0] = 0;
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100]((void ***)&AMCP::get_object_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, (void **)v0);
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100](v7, 0);
  v2 = 216;
  do
  {
    v3 = *(void **)&v9[v2 - 10];
    if (v3)
    {
      *(_QWORD *)&v9[v2 - 8] = v3;
      operator delete(v3);
    }
    v2 -= 12;
  }
  while (v2 * 4);
  v4 = *(unsigned int **)(AMCP::get_object_property_traits_list(void)::s_indesctructible_property_traits_list_ptr + 8);
  v5 = 126
     - 2
     * __clz(0xAAAAAAAAAAAAAAABLL* (((uint64_t)v4- *(_QWORD *)AMCP::get_object_property_traits_list(void)::s_indesctructible_property_traits_list_ptr) >> 4));
  if (v4 == *(unsigned int **)AMCP::get_object_property_traits_list(void)::s_indesctructible_property_traits_list_ptr)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *,false>(*(unsigned int **)AMCP::get_object_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, v4, v6, 1);
}

void sub_1B59AB060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v16 = v15;
  *(_QWORD *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1B5E50688](v14, 0x20C40960023A9);
  v18 = 864;
  while (1)
  {
    v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(_QWORD *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18)
      _Unwind_Resume(a1);
  }
}

uint64_t AMCP::get_device_property_traits_list(AMCP *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  if ((v1 & 1) == 0
  {
    AMCP::get_device_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  v2 = atomic_load(&AMCP::get_device_property_traits_list(void)::once);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&AMCP::get_device_property_traits_list(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_device_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_device_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_device_property_traits_list(void)::$_0 &&>>()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  void **v7[2];
  char v8;
  int v9[12];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v9, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v24, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v25, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v26, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v27, 1969841184, 1, 1, 0, &AMCP::Property_Traits<1969841184u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1836411236u>::k_valid_scopes, 0, 1668639076, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v28, 1953653102, 1, 0, 0, &AMCP::Property_Traits<1953653102u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651007861u>::k_valid_scopes, 0, 1953653102, 23);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v29, 1668049764, 1, 0, 0, &AMCP::Property_Traits<1668049764u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1819569763u>::k_valid_scopes, 0, 1668049764, 7);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v30, 1819569763, 1, 0, 0, AMCP::Property_Traits<1819569763u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1853059700u>::k_valid_scopes, 0, 1819569763, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v31, 1853059700, 1, 0, 1, &AMCP::Property_Traits<1853059700u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1853059619u>::k_valid_scopes, 0, 1853059700, 17);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v32, 1853059619, 1, 0, 0, &AMCP::Property_Traits<1853059619u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1935763060u>::k_valid_scopes, 0, 1853059619, 25);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v33, 1836411236, 0, 0, 0, &AMCP::Property_Traits<1836411236u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1751737454u>::k_valid_scopes, 0, 1836411236, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v34, 1935763060, 1, 0, 0, AMCP::Property_Traits<1935763060u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1937009955u>::k_valid_scopes, 0, 1935763060, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v35, 1937009955, 1, 0, 0, &AMCP::Property_Traits<1937009955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1685222501u>::k_valid_scopes, 0, 1937009955, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v36, 1685222501, 0, 0, 0, &AMCP::Property_Traits<1685222501u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1936879204u>::k_valid_scopes, 0, 1685222501, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v37, 1936879204, 0, 0, 0, AMCP::Property_Traits<1936879204u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1684434036u>::k_valid_scopes, 0, 1936876644, 27);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v38, 1684434036, 1, 0, 0, &AMCP::Property_Traits<1684434036u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936092276u>::k_valid_scopes, 0, 1684434036, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v39, 1936092276, 1, 0, 0, &AMCP::Property_Traits<1936092276u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1684301171u>::k_valid_scopes, 0, 1936092276, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v40, 1684301171, 0, 0, 0, &AMCP::Property_Traits<1684301171u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667523955u>::k_valid_scopes, 0, 1684301171, 3);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v41, 1667523955, 0, 0, 1, &AMCP::Property_Traits<1667523955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935960434u>::k_valid_scopes, 0, 1667523955, 3);
  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  v7[1] = (void **)v0;
  v8 = 0;
  v1 = (char *)operator new(0x630uLL);
  *(_QWORD *)v0 = v1;
  *(_QWORD *)(v0 + 8) = v1;
  *(_QWORD *)(v0 + 16) = v1 + 1584;
  *(_QWORD *)(v0 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits*>(v0 + 16, v9, (int *)&v42, (uint64_t)v1);
  v7[0] = 0;
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100]((void ***)&AMCP::get_device_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, (void **)v0);
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100](v7, 0);
  v2 = 396;
  do
  {
    v3 = *(void **)&v9[v2 - 10];
    if (v3)
    {
      *(_QWORD *)&v9[v2 - 8] = v3;
      operator delete(v3);
    }
    v2 -= 12;
  }
  while (v2 * 4);
  v4 = *(unsigned int **)(AMCP::get_device_property_traits_list(void)::s_indesctructible_property_traits_list_ptr + 8);
  v5 = 126
     - 2
     * __clz(0xAAAAAAAAAAAAAAABLL* (((uint64_t)v4- *(_QWORD *)AMCP::get_device_property_traits_list(void)::s_indesctructible_property_traits_list_ptr) >> 4));
  if (v4 == *(unsigned int **)AMCP::get_device_property_traits_list(void)::s_indesctructible_property_traits_list_ptr)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *,false>(*(unsigned int **)AMCP::get_device_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, v4, v6, 1);
}

void sub_1B59ABA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v16 = v15;
  *(_QWORD *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1B5E50688](v14, 0x20C40960023A9);
  v18 = 1584;
  while (1)
  {
    v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(_QWORD *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18)
      _Unwind_Resume(a1);
  }
}

void HALS_MultiChannelMixer::SetupGainTable(HALS_MultiChannelMixer *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  std::__shared_weak_count *end;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  HALS_Object *v48;
  HALS_Device *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unsigned int TotalNumberChannels;
  std::vector<char>::pointer begin;
  unsigned int v58;
  char *v59;
  int v60;
  _BOOL4 IsLayoutSMTPE_A_Mixable;
  AudioChannelLayout *v62;
  char *v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  char *v68;
  void *v69;
  void **v70;
  uint64_t v71;
  char *v72;
  void *v73;
  void **v74;
  void *__p;
  std::__shared_weak_count *v76;
  std::vector<char> v77;
  char *v78;
  char **v79;
  std::vector<char>::value_type __x[4];
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  int v84;

  v2 = *((_QWORD *)this + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 2) - v2) >> 4) <= a2)
    goto LABEL_95;
  if ((*((_BYTE *)this + 44) & 0x20) != 0)
    v5 = 1;
  else
    v5 = *((unsigned int *)this + 15);
  v6 = v2 + 80 * a2;
  v7 = (unsigned int *)(v6 + 36);
  v8 = *(unsigned int *)(v6 + 36);
  LODWORD(v81) = 0;
  std::vector<float>::vector(&__p, v5, &v81);
  v11 = *(_QWORD **)(v6 + 64);
  v10 = (uint64_t *)(v6 + 64);
  v9 = v11;
  v13 = v10 - 1;
  v12 = *(v10 - 1);
  v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - v12) >> 3);
  v15 = v8 - v14;
  if (v8 <= v14)
  {
    if (v8 >= v14)
      goto LABEL_25;
    v33 = (_QWORD *)(v12 + 24 * v8);
    if (v9 != v33)
    {
      v34 = v9;
      do
      {
        v36 = (void *)*(v34 - 3);
        v34 -= 3;
        v35 = v36;
        if (v36)
        {
          *(v9 - 2) = v35;
          operator delete(v35);
        }
        v9 = v34;
      }
      while (v34 != v33);
    }
    goto LABEL_24;
  }
  v16 = v2 + 80 * a2;
  v19 = *(_QWORD *)(v16 + 72);
  v18 = (char **)(v16 + 72);
  v17 = v19;
  if (0xAAAAAAAAAAAAAAABLL * ((v19 - (uint64_t)v9) >> 3) >= v15)
  {
    v33 = &v9[3 * v15];
    v37 = 24 * v8 - 24 * v14;
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v9, __p, (uint64_t)v76, ((char *)v76 - (_BYTE *)__p) >> 2);
      v9 += 3;
      v37 -= 24;
    }
    while (v37);
LABEL_24:
    *v10 = (uint64_t)v33;
    goto LABEL_25;
  }
  v79 = v18;
  v20 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v12) >> 3);
  v21 = 2 * v20;
  if (2 * v20 <= v8)
    v21 = v8;
  if (v20 >= 0x555555555555555)
    v22 = 0xAAAAAAAAAAAAAAALL;
  else
    v22 = v21;
  v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v22);
  v24 = &v23[24 * v14];
  v77.__begin_ = v23;
  v77.__end_ = v24;
  v77.__end_cap_.__value_ = v24;
  v78 = &v23[24 * v25];
  v26 = 3 * v8;
  v27 = &v23[24 * v8];
  v28 = 8 * v26 - 24 * v14;
  do
  {
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v24, __p, (uint64_t)v76, ((char *)v76 - (_BYTE *)__p) >> 2);
    v24 += 24;
    v28 -= 24;
  }
  while (v28);
  v77.__end_cap_.__value_ = v27;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)v18, *v10, (_QWORD *)*v10, *v13, (_QWORD *)*v13, (uint64_t)v77.__end_, (uint64_t)v77.__end_);
  v29 = (char *)*v13;
  *v13 = v30;
  v77.__end_ = v29;
  v31 = (char *)*v10;
  *v10 = (uint64_t)v77.__end_cap_.__value_;
  v77.__end_cap_.__value_ = v31;
  v32 = *v18;
  *v18 = v78;
  v78 = v32;
  v77.__begin_ = v29;
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v77);
LABEL_25:
  if (__p)
  {
    v76 = (std::__shared_weak_count *)__p;
    operator delete(__p);
  }
  v38 = *((_QWORD *)this + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 2) - v38) >> 4) <= a2)
LABEL_95:
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  v39 = *v7;
  v40 = *(unsigned int *)(v38 + 80 * a2);
  v83 = 0x6F75747073726E64;
  v84 = 0;
  __p = 0;
  v76 = 0;
  HALS_System::GetInstance(&v77, 0, (uint64_t *)&__p);
  v41 = HALS_System::sIsInitialized;
  end = (std::__shared_weak_count *)v77.__end_;
  if (v77.__end_)
  {
    v43 = (unint64_t *)(v77.__end_ + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
      std::__shared_weak_count::__release_weak(end);
    }
  }
  v45 = v76;
  if (!v76)
    goto LABEL_37;
  p_shared_owners = (unint64_t *)&v76->__shared_owners_;
  do
    v47 = __ldaxr(p_shared_owners);
  while (__stlxr(v47 - 1, p_shared_owners));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    if ((v41 & 1) == 0)
      goto LABEL_90;
  }
  else
  {
LABEL_37:
    if ((v41 & 1) == 0)
    {
LABEL_90:
      HALS_MultiChannelMixer::GenerateDefaultGainTable((char *)*v13, (char *)*v10);
      return;
    }
  }
  v81 = 0;
  v82 = 0;
  HALS_System::GetInstance(&v77, 0, &v81);
  v49 = HALS_System::CopyDeviceByObjectID((HALS_System *)v77.__begin_, v40, 0);
  v50 = (std::__shared_weak_count *)v77.__end_;
  if (v77.__end_)
  {
    v51 = (unint64_t *)(v77.__end_ + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v82;
  if (!v82)
    goto LABEL_47;
  v54 = (unint64_t *)&v82->__shared_owners_;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
    if (!v49)
      goto LABEL_57;
  }
  else
  {
LABEL_47:
    if (!v49)
    {
LABEL_57:
      IsLayoutSMTPE_A_Mixable = 0;
      goto LABEL_77;
    }
  }
  if (!(*(unsigned int (**)(HALS_Device *, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v49 + 88))(v49, v40, &v83, 0))goto LABEL_57;
  TotalNumberChannels = HALS_Device::GetTotalNumberChannels(v49, 0);
  __x[0] = 0;
  std::vector<char>::vector(&v77, 0x20uLL, __x);
  begin = v77.__begin_;
  *(_QWORD *)v77.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  if (TotalNumberChannels <= 1)
    v58 = 1;
  else
    v58 = TotalNumberChannels;
  v59 = (char *)(20 * v58 + 12);
  __x[0] = 0;
  v60 = (int)v77.__end_;
  if (v59 <= (std::vector<char>::pointer)(v77.__end_ - begin))
  {
    if (v59 < (std::vector<char>::pointer)(v77.__end_ - begin))
    {
      v60 = (_DWORD)begin + (_DWORD)v59;
      v77.__end_ = &v59[(_QWORD)begin];
    }
  }
  else
  {
    std::vector<char>::__append(&v77, (std::vector<char>::size_type)&v59[-(v77.__end_ - begin)], __x);
    begin = v77.__begin_;
    v60 = (int)v77.__end_;
  }
  *((_DWORD *)begin + 2) = TotalNumberChannels;
  *(_DWORD *)__x = 0;
  (*(void (**)(HALS_Device *, uint64_t, uint64_t *, _QWORD, std::vector<char>::value_type *, std::vector<char>::pointer, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v49 + 112))(v49, v40, &v83, (v60 - (_DWORD)begin), __x, begin, 0, 0, 0);
  v63 = v77.__begin_;
  v64 = *(_DWORD *)v77.__begin_;
  if (*(int *)v77.__begin_ > 8519687)
  {
    if (v64 <= 12713991)
    {
      if (v64 != 8519688 && v64 != 12582924)
      {
        v65 = 12648464;
        goto LABEL_74;
      }
LABEL_75:
      IsLayoutSMTPE_A_Mixable = 1;
LABEL_76:
      v77.__end_ = v63;
      operator delete(v63);
      goto LABEL_77;
    }
    if (v64 == 12713992 || v64 == 12779530)
      goto LABEL_75;
    v65 = 12845066;
LABEL_74:
    if (v64 != v65)
    {
      IsLayoutSMTPE_A_Mixable = 0;
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  if (v64 > 7929861)
  {
    if (v64 == 7929862 || v64 == 8257544)
      goto LABEL_75;
    v65 = 8388616;
    goto LABEL_74;
  }
  if (v64)
  {
    v65 = 7405571;
    goto LABEL_74;
  }
  IsLayoutSMTPE_A_Mixable = HALS_MultiChannelMixer::IsLayoutSMTPE_A_Mixable((HALS_MultiChannelMixer *)v77.__begin_, v62);
  v63 = v77.__begin_;
  if (v77.__begin_)
    goto LABEL_76;
LABEL_77:
  HALS_ObjectMap::ReleaseObject(v49, v48);
  if (!IsLayoutSMTPE_A_Mixable)
    goto LABEL_90;
  v66 = *(_DWORD *)this;
  HALS_MultiChannelMixer::GenerateDefaultGainTable((char *)*v13, (char *)*v10);
  if (v39 >= 3 && v66 == 1)
  {
    v67 = *v13;
    v68 = (char *)operator new(8uLL);
    v77.__begin_ = v68;
    *(_QWORD *)v68 = 0x3F0000003F000000;
    v77.__end_ = v68 + 8;
    v77.__end_cap_.__value_ = v68 + 8;
    std::vector<std::vector<float>>::insert(v10 - 1, (_QWORD *)(v67 + 48), (uint64_t)&v77);
    if (v77.__begin_)
      operator delete(v77.__begin_);
    v70 = (void **)(*v10 - 24);
    v69 = *v70;
    if (*v70)
    {
      *(_QWORD *)(*v10 - 16) = v69;
      operator delete(v69);
    }
    *v10 = (uint64_t)v70;
    v71 = *v13;
    if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v70 - *v13) >> 3) >= 4)
    {
      v72 = (char *)operator new(8uLL);
      v77.__end_ = v72 + 8;
      v77.__end_cap_.__value_ = v72 + 8;
      *(_QWORD *)v72 = 0;
      v77.__begin_ = v72;
      std::vector<std::vector<float>>::insert(v10 - 1, (_QWORD *)(v71 + 72), (uint64_t)&v77);
      if (v77.__begin_)
        operator delete(v77.__begin_);
      v74 = (void **)(*v10 - 24);
      v73 = *v74;
      if (*v74)
      {
        *(_QWORD *)(*v10 - 16) = v73;
        operator delete(v73);
      }
      *v10 = (uint64_t)v74;
    }
  }
}

void sub_1B59AC110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<HALS_MultiChannelMixer::StreamInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 80;
        v7 = (void **)(v4 - 24);
        std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *HALS_MultiChannelMixer::GenerateDefaultGainTable(char *result, char *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  float v6;
  _QWORD *i;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (a2 == result)
    goto LABEL_18;
  v2 = (a2 - result) / 24;
  v3 = *((_QWORD *)result + 1);
  v4 = (v3 - *(_QWORD *)result) >> 2;
  if (v2 > v4)
  {
    v5 = 0;
    v6 = (float)v4 / (float)v2;
    for (i = result + 8; ; i += 3)
    {
      v8 = *(i - 1);
      v9 = (*i - v8) >> 2;
      if (v9 <= v5)
        break;
      *(float *)(v8 + 4 * v5) = v6;
      if (v5 + 1 == v9)
        v5 = 0;
      else
        ++v5;
      if (!--v2)
        return result;
    }
LABEL_17:
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  }
  if (v3 != *(_QWORD *)result)
  {
    v10 = 0;
    v11 = 0;
    if (v4 <= 1)
      v4 = 1;
    while (v2 > v11)
    {
      v12 = *(_QWORD *)&result[24 * v11];
      if (v10 >= (*(_QWORD *)&result[24 * v11 + 8] - v12) >> 2)
        goto LABEL_17;
      *(_DWORD *)(v12 + 4 * v10) = 1065353216;
      v11 = (v11 + 1) % v2;
      if (v4 == ++v10)
        return result;
    }
LABEL_18:
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  }
  return result;
}

void std::vector<std::vector<float>>::insert(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int64x2_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  char *v41;
  uint64_t v42;
  char *v43;
  int64x2_t v44;
  char *v45;
  uint64_t v46;

  v4 = a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = (uint64_t)a2 - *a1;
  v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
  v11 = (uint64_t)(a1 + 2);
  v10 = a1[2];
  if (v6 >= v10)
  {
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v16 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v7) >> 3);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v16;
    v42 = v11;
    if (v18)
      v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v18);
    else
      v19 = 0;
    v20 = (_QWORD *)(v18 + 8 * (v8 >> 3));
    v39 = (char *)v18;
    *(_QWORD *)&v40 = v20;
    *((_QWORD *)&v40 + 1) = v20;
    v41 = (char *)(v18 + 24 * v19);
    if (v9 == v19)
    {
      if (v8 < 1)
      {
        if ((_QWORD *)v7 == v4)
          v26 = 1;
        else
          v26 = 0x5555555555555556 * (v8 >> 3);
        v46 = v11;
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v26);
        v29 = v40;
        if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
        {
          v32 = vdupq_n_s64(v40);
          v30 = (uint64_t)&v27[24 * (v26 >> 2)];
        }
        else
        {
          v30 = (uint64_t)&v27[24 * (v26 >> 2) + *((_QWORD *)&v40 + 1) - v40];
          v31 = &v27[24 * (v26 >> 2)];
          do
          {
            *(_QWORD *)v31 = 0;
            *((_QWORD *)v31 + 1) = 0;
            *((_QWORD *)v31 + 2) = 0;
            *(_OWORD *)v31 = *(_OWORD *)v29;
            *((_QWORD *)v31 + 2) = *(_QWORD *)(v29 + 16);
            *(_QWORD *)v29 = 0;
            *(_QWORD *)(v29 + 8) = 0;
            *(_QWORD *)(v29 + 16) = 0;
            v31 += 24;
            v29 += 24;
          }
          while (v31 != (char *)v30);
          v32 = (int64x2_t)v40;
        }
        v33 = v41;
        v43 = v39;
        v39 = v27;
        *(_QWORD *)&v40 = &v27[24 * (v26 >> 2)];
        v44 = v32;
        *((_QWORD *)&v40 + 1) = v30;
        v41 = &v27[24 * v28];
        v45 = v33;
        std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v43);
        v20 = (_QWORD *)*((_QWORD *)&v40 + 1);
      }
      else
      {
        v21 = v9 + 2;
        if (v9 >= -1)
          v21 = v9 + 1;
        v20 -= 3 * (v21 >> 1);
        *(_QWORD *)&v40 = v20;
        *((_QWORD *)&v40 + 1) = v20;
      }
    }
    *v20 = 0;
    v20[1] = 0;
    v20[2] = 0;
    *(_OWORD *)v20 = *(_OWORD *)a3;
    v20[2] = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *((_QWORD *)&v40 + 1) += 24;
    std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(v11, (uint64_t)v4, v4, *a1, (_QWORD *)*a1, v40, v40);
    *(_QWORD *)&v40 = v34;
    v35 = (_QWORD *)a1[1];
    v36 = (_QWORD *)*((_QWORD *)&v40 + 1);
    if (v4 != v35)
    {
      do
      {
        *v36 = 0;
        v36[1] = 0;
        v36[2] = 0;
        *(_OWORD *)v36 = *(_OWORD *)v4;
        v36[2] = v4[2];
        *v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
        v36 += 3;
        v4 += 3;
      }
      while (v4 != v35);
      v34 = v40;
      v4 = (_QWORD *)a1[1];
    }
    v37 = *a1;
    *a1 = v34;
    a1[1] = (uint64_t)v36;
    v38 = a1[2];
    a1[2] = (uint64_t)v41;
    *((_QWORD *)&v40 + 1) = v4;
    v41 = (char *)v38;
    v39 = (char *)v37;
    *(_QWORD *)&v40 = v37;
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v39);
  }
  else if (a2 == (_QWORD *)v6)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_QWORD *)(v7 + 8 * (v8 >> 3) + 16) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    a1[1] = (uint64_t)(a2 + 3);
  }
  else
  {
    v12 = a2 + 3;
    v13 = v6 - 24;
    if (v6 < 0x18)
    {
      v15 = (_QWORD *)a1[1];
    }
    else
    {
      v14 = v6 - 24;
      v15 = (_QWORD *)a1[1];
      do
      {
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        *(_OWORD *)v15 = *(_OWORD *)v14;
        v15[2] = *(_QWORD *)(v14 + 16);
        *(_QWORD *)v14 = 0;
        *(_QWORD *)(v14 + 8) = 0;
        *(_QWORD *)(v14 + 16) = 0;
        v15 += 3;
        v14 += 24;
      }
      while (v14 < v6);
    }
    a1[1] = (uint64_t)v15;
    if ((_QWORD *)v6 != v12)
    {
      v22 = (uint64_t)(v6 - (_QWORD)v12) >> 3;
      do
      {
        v23 = *(void **)v13;
        if (*(_QWORD *)v13)
        {
          *(_QWORD *)(v13 + 8) = v23;
          operator delete(v23);
          *(_QWORD *)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
          *(_QWORD *)(v13 + 16) = 0;
        }
        v24 = (uint64_t)&v4[v22 - 3];
        *(_OWORD *)v13 = *(_OWORD *)v24;
        *(_QWORD *)(v13 + 16) = v4[v22 - 1];
        *(_QWORD *)v24 = 0;
        *(_QWORD *)(v24 + 8) = 0;
        *(_QWORD *)(v24 + 16) = 0;
        v13 -= 24;
        v22 -= 3;
      }
      while (v22 * 8);
    }
    v25 = (void *)*v4;
    if (*v4)
    {
      *(_QWORD *)(v7 + 8 * (v8 >> 3) + 8) = v25;
      operator delete(v25);
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
    }
    *(_OWORD *)v4 = *(_OWORD *)a3;
    *(_QWORD *)(v7 + 8 * (v8 >> 3) + 16) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
}

void sub_1B59AC6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::vector<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

double std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  __int128 v8;
  double result;

  while (a3 != a5)
  {
    *(_QWORD *)(a7 - 24) = 0;
    *(_QWORD *)(a7 - 16) = 0;
    a7 -= 24;
    *(_QWORD *)(a7 + 16) = 0;
    v8 = *(_OWORD *)(a3 - 3);
    a3 -= 3;
    result = *(double *)&v8;
    *(_OWORD *)a7 = v8;
    *(_QWORD *)(a7 + 16) = a3[2];
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

BOOL HALS_MultiChannelMixer::IsLayoutSMTPE_A_Mixable(HALS_MultiChannelMixer *this, AudioChannelLayout *a2)
{
  _OWORD *v3;
  unint64_t v4;
  unint64_t v5;
  int *v6;
  int v7;
  int v8;
  _BOOL8 v9;

  v3 = operator new(0x10uLL);
  *v3 = xmmword_1B5D68D30;
  LODWORD(v4) = *((_DWORD *)this + 2);
  if (v4 >= 4)
    v4 = 4;
  else
    v4 = v4;
  if ((_DWORD)v4)
  {
    if (*((_DWORD *)this + 3) == 1)
    {
      v5 = 0;
      v6 = (int *)((char *)this + 32);
      while (v4 - 1 != v5)
      {
        v7 = *v6;
        v6 += 5;
        v8 = *((_DWORD *)v3 + ++v5);
        if (v7 != v8)
          goto LABEL_13;
      }
      v5 = v4;
LABEL_13:
      v9 = v5 >= v4;
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v9 = 1;
  }
  operator delete(v3);
  return v9;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<float>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (!(a2 >> 62))
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

caulk::rt_safe_memory_resource *std::vector<caulk::rt_vector<float>,caulk::rt_allocator<caulk::rt_vector<float>>>::__destroy_vector::operator()[abi:ne180100](caulk::rt_safe_memory_resource *result)
{
  caulk::rt_safe_memory_resource **v1;
  caulk::rt_safe_memory_resource *v2;
  caulk::rt_safe_memory_resource ***v3;
  caulk::rt_safe_memory_resource *v4;
  caulk::rt_safe_memory_resource *v5;
  caulk::rt_safe_memory_resource **v6;
  caulk::rt_safe_memory_resource *v7;
  caulk::rt_safe_memory_resource *v8;
  caulk::rt_safe_memory_resource *v9;

  v1 = *(caulk::rt_safe_memory_resource ***)result;
  v2 = **(caulk::rt_safe_memory_resource ***)result;
  if (v2)
  {
    v3 = (caulk::rt_safe_memory_resource ***)result;
    v4 = v1[1];
    v5 = **(caulk::rt_safe_memory_resource ***)result;
    v6 = v1;
    if (v4 != v2)
    {
      v7 = v1[1];
      do
      {
        v9 = (caulk::rt_safe_memory_resource *)*((_QWORD *)v7 - 3);
        v7 = (caulk::rt_safe_memory_resource *)((char *)v7 - 24);
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v4 - 2) = v8;
          std::allocator_traits<caulk::rt_allocator<float>>::deallocate[abi:ne180100](v8, (uint64_t)(*((_QWORD *)v4 - 1) - (_QWORD)v8) >> 2);
        }
        v4 = v7;
      }
      while (v7 != v2);
      v6 = *v3;
      v5 = **v3;
    }
    v1[1] = v2;
    return std::allocator_traits<caulk::rt_allocator<caulk::rt_vector<float>>>::deallocate[abi:ne180100](v5, 0xAAAAAAAAAAAAAAABLL * ((v6[2] - v5) >> 3));
  }
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](void *a1)
{
  caulk::rt_safe_memory_resource *result;

  result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
  if (*MEMORY[0x1E0DDB4F0])
    return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, a1);
  __break(1u);
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<caulk::rt_vector<float>>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (a2 < 0xAAAAAAAAAAAAAABLL)
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

_QWORD *std::vector<caulk::rt_vector<float>,caulk::rt_allocator<caulk::rt_vector<float>>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 24) = 0;
    *(_QWORD *)(v4 - 16) = 0;
    v4 -= 24;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = v2[2];
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<caulk::rt_vector<float>,caulk::rt_allocator<caulk::rt_vector<float>> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  caulk::rt_safe_memory_resource *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(caulk::rt_safe_memory_resource **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      std::allocator_traits<caulk::rt_allocator<float>>::deallocate[abi:ne180100](v4, (uint64_t)(*(_QWORD *)(v2 - 8) - (_QWORD)v4) >> 2);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(_QWORD *)a1)
    std::allocator_traits<caulk::rt_allocator<caulk::rt_vector<float>>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)a1, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)a1) >> 3));
  return a1;
}

void ***std::__exception_guard_exceptions<std::vector<char,caulk::rt_allocator<char>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***a1)
{
  void **v2;
  void *v3;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = **a1;
    if (v3)
    {
      v2[1] = v3;
      std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v3);
    }
  }
  return a1;
}

void HALS_IOStackDescription::GetFormat(HALS_IOStackDescription *this, AudioStreamBasicDescription *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  UInt32 v9;
  UInt32 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v3 = (uint64_t *)*((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2) - (_QWORD)v3;
  if (v4)
  {
    if (-1431655765 * (v4 >> 3))
    {
      v6 = *v3;
      if (*(_DWORD *)(v6 + 108))
      {
        HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v11, (uint64_t *)(v6 + 112));
      }
      else
      {
        v7 = *(_OWORD *)(v6 + 384);
        v11 = *(_OWORD *)(v6 + 368);
        v12 = v7;
        v13 = *(_QWORD *)(v6 + 400);
      }
      v8 = v12;
      *(_OWORD *)&a2->mSampleRate = v11;
      *(_OWORD *)&a2->mBytesPerPacket = v8;
      *(_QWORD *)&a2->mBitsPerChannel = v13;
      if (a2->mFormatID == 1819304813)
      {
        v9 = *(_DWORD *)this;
        v10 = ((8 * a2->mBytesPerFrame / a2->mChannelsPerFrame) >> 3) * *(_DWORD *)this;
        a2->mBytesPerFrame = v10;
        a2->mChannelsPerFrame = v9;
        a2->mBytesPerPacket = v10;
      }
    }
  }
  else
  {
    *(_QWORD *)&a2->mBitsPerChannel = 0;
    *(_OWORD *)&a2->mSampleRate = 0u;
    *(_OWORD *)&a2->mBytesPerPacket = 0u;
  }
}

void AMCP::IOAudio2::Device_Sub_Object::~Device_Sub_Object(AMCP::IOAudio2::Device_Sub_Object *this)
{
  AMCP::IOAudio2::Device_Sub_Object::~Device_Sub_Object(this);
  JUMPOUT(0x1B5E50688);
}

{
  const void *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E6998E60;
  v2 = (const void *)*((_QWORD *)this + 5);
  if (v2)
    CFRelease(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void std::__function::__func<HALS_BufferFactory::acquire_output_buffers(void)::$_0,std::allocator<HALS_BufferFactory::acquire_output_buffers(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_BufferFactory::acquire_output_buffers(void)::$_0,std::allocator<HALS_BufferFactory::acquire_output_buffers(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6979580;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_BufferFactory::acquire_output_buffers(void)::$_0,std::allocator<HALS_BufferFactory::acquire_output_buffers(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6979580;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<HALS_BufferFactory::acquire_output_buffers(void)::$_0,std::allocator<HALS_BufferFactory::acquire_output_buffers(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::operator()(uint64_t a1, unsigned int *a2, uint64_t a3, HALS_IOStreamInfo *a4)
{
  uint64_t v5;

  v5 = HALS_BufferFactory::acquire_buffers_non_dsp(*(HALS_BufferFactory **)(a1 + 8), (HALB_IOBufferManager_Server *)*a2, a3, a4);
  if (!(_DWORD)v5)
    HALS_BufferFactory::acquire_buffers_for_dsp(*(HALS_IOStreamInfo **)(a3 + 112), *(HALS_IOStreamInfo **)(a3 + 120));
  return v5;
}

uint64_t std::__function::__func<HALS_BufferFactory::acquire_output_buffers(void)::$_0,std::allocator<HALS_BufferFactory::acquire_output_buffers(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN18HALS_BufferFactory22acquire_output_buffersEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_BufferFactory::acquire_output_buffers(void)::$_0,std::allocator<HALS_BufferFactory::acquire_output_buffers(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::target_type()
{
}

uint64_t HALS_BufferFactory::acquire_buffers_non_dsp(HALS_BufferFactory *this, HALB_IOBufferManager_Server *a2, uint64_t a3, HALS_IOStreamInfo *a4)
{
  unint64_t IOBuffer;
  HALS_IOProcessor *v6;
  vm_address_t Buffer;
  uint64_t result;
  unint64_t v9;
  vm_address_t v10;
  vm_address_t v11;

  IOBuffer = HALB_IOBufferManager_Server::GetIOBuffer(this, *(unsigned __int8 *)(a3 + 8), a2, (unsigned int *)(a3 + 64));
  *(_QWORD *)(a3 + 56) = IOBuffer;
  if (!IOBuffer)
    return 2003329396;
  v6 = *(HALS_IOProcessor **)(a3 + 96);
  if (v6)
  {
    if (HALS_IOProcessor::NeedsIntermediate1Buffer(*(HALS_IOProcessor **)(a3 + 96)))
    {
      Buffer = HALB_IOBufferManager_Server::AllocateBuffer(*(unsigned int *)(a3 + 48));
      v6 = *(HALS_IOProcessor **)(a3 + 96);
    }
    else
    {
      Buffer = 0;
    }
    *(_QWORD *)(a3 + 32) = Buffer;
    if (HALS_IOProcessor::NeedsIntermediate2Buffer(v6))
    {
      v10 = HALB_IOBufferManager_Server::AllocateBuffer(*(unsigned int *)(a3 + 48));
      v6 = *(HALS_IOProcessor **)(a3 + 96);
    }
    else
    {
      v10 = 0;
    }
    *(_QWORD *)(a3 + 40) = v10;
    result = HALS_IOProcessor::NeedsLocalBuffer(v6);
    if ((_DWORD)result)
    {
      v11 = HALB_IOBufferManager_Server::AllocateBuffer(*(unsigned int *)(a3 + 24));
      result = 0;
    }
    else
    {
      v11 = *(_QWORD *)(a3 + 56);
    }
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    v9 = IOBuffer;
    result = 0;
    *(_QWORD *)(a3 + 16) = v9;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
  }
  return result;
}

HALS_IOStreamInfo *HALS_BufferFactory::acquire_buffers_for_dsp(HALS_IOStreamInfo *this, HALS_IOStreamInfo *a2)
{
  HALS_IOStreamInfo *v3;

  if (this != a2)
  {
    v3 = this;
    do
    {
      *((_QWORD *)v3 + 2) = HALB_IOBufferManager_Server::AllocateBuffer(*((unsigned int *)v3 + 6));
      this = (HALS_IOStreamInfo *)HALB_IOBufferManager_Server::AllocateBuffer(*((unsigned int *)v3 + 10));
      *((_QWORD *)v3 + 4) = this;
      v3 = (HALS_IOStreamInfo *)((char *)v3 + 128);
    }
    while (v3 != a2);
  }
  return this;
}

void std::__function::__func<HALS_BufferFactory::acquire_input_buffers(void)::$_0,std::allocator<HALS_BufferFactory::acquire_input_buffers(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_BufferFactory::acquire_input_buffers(void)::$_0,std::allocator<HALS_BufferFactory::acquire_input_buffers(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6979500;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_BufferFactory::acquire_input_buffers(void)::$_0,std::allocator<HALS_BufferFactory::acquire_input_buffers(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6979500;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<HALS_BufferFactory::acquire_input_buffers(void)::$_0,std::allocator<HALS_BufferFactory::acquire_input_buffers(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, HALS_IOStreamInfo *a4)
{
  uint64_t v5;

  v5 = HALS_BufferFactory::acquire_buffers_non_dsp(*(HALS_BufferFactory **)(a1 + 8), (HALB_IOBufferManager_Server *)*(unsigned int *)(a2 + 8), *(_QWORD *)a2, a4);
  if (!(_DWORD)v5)
    HALS_BufferFactory::acquire_buffers_for_dsp(*(HALS_IOStreamInfo **)(*(_QWORD *)a2 + 112), *(HALS_IOStreamInfo **)(*(_QWORD *)a2 + 120));
  return v5;
}

uint64_t std::__function::__func<HALS_BufferFactory::acquire_input_buffers(void)::$_0,std::allocator<HALS_BufferFactory::acquire_input_buffers(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN18HALS_BufferFactory21acquire_input_buffersEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_BufferFactory::acquire_input_buffers(void)::$_0,std::allocator<HALS_BufferFactory::acquire_input_buffers(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target_type()
{
}

void std::__function::__func<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0,std::allocator<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0,std::allocator<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6979480;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0,std::allocator<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6979480;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0,std::allocator<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::operator()(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  HALB_IOBufferManager_Server::AddIOBuffer(*(HALB_IOBufferManager_Server **)(a1 + 8), *(unsigned __int8 *)(a3 + 8), *a2, *(_DWORD *)(a3 + 24));
  return 0;
}

uint64_t std::__function::__func<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0,std::allocator<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN18HALS_BufferFactory35calculate_shared_output_buffer_sizeEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0,std::allocator<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::target_type()
{
}

void std::__function::__func<HALS_BufferFactory::calculate_shared_input_buffer_size(void)::$_0,std::allocator<HALS_BufferFactory::calculate_shared_input_buffer_size(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_BufferFactory::calculate_shared_input_buffer_size(void)::$_0,std::allocator<HALS_BufferFactory::calculate_shared_input_buffer_size(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6979400;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_BufferFactory::calculate_shared_input_buffer_size(void)::$_0,std::allocator<HALS_BufferFactory::calculate_shared_input_buffer_size(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6979400;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<HALS_BufferFactory::calculate_shared_input_buffer_size(void)::$_0,std::allocator<HALS_BufferFactory::calculate_shared_input_buffer_size(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::operator()(uint64_t a1, unsigned int *a2)
{
  HALB_IOBufferManager_Server::AddIOBuffer(*(HALB_IOBufferManager_Server **)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)a2 + 8), a2[2], *(_DWORD *)(*(_QWORD *)a2 + 24));
  return 0;
}

uint64_t std::__function::__func<HALS_BufferFactory::calculate_shared_input_buffer_size(void)::$_0,std::allocator<HALS_BufferFactory::calculate_shared_input_buffer_size(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN18HALS_BufferFactory34calculate_shared_input_buffer_sizeEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_BufferFactory::calculate_shared_input_buffer_size(void)::$_0,std::allocator<HALS_BufferFactory::calculate_shared_input_buffer_size(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target_type()
{
}

void std::__function::__func<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0,std::allocator<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0,std::allocator<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6979370;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0,std::allocator<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6979370;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0,std::allocator<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::operator()(uint64_t a1, int a2, HALS_BufferFactory **this, HALS_IOEngineInfo *a4)
{
  HALS_BufferFactory::calculate_buffer_size_for_non_dsp((HALS_BufferFactory *)this, (HALS_IOStreamInfo *)*(unsigned int *)(a1 + 8), *(_QWORD *)(a1 + 16), a4);
  HALS_BufferFactory::calculate_buffer_size_for_dsp(this[14], this[15], *(_DWORD *)(a1 + 8), *(HALS_IOEngineInfo **)(a1 + 16));
  return 0;
}

uint64_t std::__function::__func<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0,std::allocator<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN18HALS_BufferFactory28calculate_output_buffer_sizeEjP17HALS_IOEngineInfoE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0,std::allocator<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::target_type()
{
}

void HALS_BufferFactory::calculate_buffer_size_for_non_dsp(HALS_BufferFactory *this, HALS_IOStreamInfo *a2, uint64_t a3, HALS_IOEngineInfo *a4)
{
  int v5;
  uint64_t *v7;
  __int128 v9;
  double v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v5 = (int)a2;
  if (*((_DWORD *)this + 27))
  {
    v7 = (uint64_t *)*((_QWORD *)this + 14);
    if (*((uint64_t **)this + 15) == v7 || v7 == 0)
      v11 = *((_QWORD *)this + 51);
    else
      v11 = *v7;
    if (*(_QWORD *)(v11 + 8))
    {
      HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v16, (uint64_t *)this + 14);
      if (a3)
        goto LABEL_13;
      goto LABEL_10;
    }
LABEL_22:
    v15 = 4096;
    goto LABEL_25;
  }
  v11 = *((_QWORD *)this + 51);
  if (!*(_QWORD *)(v11 + 8))
    goto LABEL_22;
  v9 = *((_OWORD *)this + 24);
  v16 = *((_OWORD *)this + 23);
  v17 = v9;
  v18 = *((_QWORD *)this + 50);
  if (a3)
  {
LABEL_13:
    (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 8) + 328))(*(_QWORD *)(a3 + 8));
    goto LABEL_14;
  }
LABEL_10:
  v10 = *(double *)&v16;
LABEL_14:
  if (DWORD2(v16) == 1819304813)
  {
    v12 = v10 == *(double *)&v16 && *(_BYTE *)(v11 + 297) == 0;
    v13 = 24 * v5;
    if (v12)
      v13 = v5;
    v14 = v13 * DWORD2(v17);
  }
  else
  {
    v14 = v17;
  }
  v15 = v14 + *(_DWORD *)(v11 + 308);
LABEL_25:
  *((_DWORD *)this + 6) = v15;
  *((_DWORD *)this + 12) = v15;
}

void HALS_BufferFactory::calculate_buffer_size_for_dsp(HALS_BufferFactory *this, HALS_IOStreamInfo *a2, int a3, HALS_IOEngineInfo *a4)
{
  HALS_IOStreamInfo *v7;
  NSObject *v8;
  uint64_t v9;
  double v10;
  int v11;
  int v12;
  int v13;
  double v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (this != a2)
  {
    v7 = this;
    v18 = 24 * a3;
    v8 = MEMORY[0x1E0C81028];
    do
    {
      v9 = *(_QWORD *)v7;
      if (*(_QWORD *)(*(_QWORD *)v7 + 8))
      {
        if (*((_DWORD *)v7 + 25) == 4)
        {
          *((_DWORD *)v7 + 6) = 0;
          *((_DWORD *)v7 + 10) = 0;
          *((_DWORD *)v7 + 12) = 0;
        }
        else
        {
          v10 = *((double *)v7 + 7);
          v11 = *((_DWORD *)v7 + 16);
          v12 = *((_DWORD *)v7 + 18);
          v13 = *((_DWORD *)v7 + 20);
          v14 = v10;
          if (a4)
            (*(void (**)(_QWORD, double))(**((_QWORD **)a4 + 1) + 328))(*((_QWORD *)a4 + 1), v10);
          if (v11 == 1819304813)
          {
            v15 = v14 == v10 && *(_BYTE *)(v9 + 297) == 0;
            v16 = v18;
            if (v15)
              v16 = a3;
            v12 = v16 * v13;
          }
          v17 = v12 + *(_DWORD *)(v9 + 308);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            v20 = "HALS_BufferFactory.cpp";
            v21 = 1024;
            v22 = 365;
            v23 = 1024;
            v24 = v17;
            _os_log_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_BufferFactory::calculate_buffer_size_for_dsp(): theIOBufferByteSize = %u", buf, 0x18u);
          }
          *((_DWORD *)v7 + 6) = v17;
          *((_DWORD *)v7 + 10) = v17;
          *((_DWORD *)v7 + 12) = *(_DWORD *)(*(_QWORD *)v7 + 308);
        }
      }
      else
      {
        *((_DWORD *)v7 + 6) = 4096;
        *((_DWORD *)v7 + 10) = 4096;
      }
      v7 = (HALS_IOStreamInfo *)((char *)v7 + 128);
    }
    while (v7 != a2);
  }
}

void std::__function::__func<HALS_BufferFactory::calculate_input_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0,std::allocator<HALS_BufferFactory::calculate_input_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_BufferFactory::calculate_input_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0,std::allocator<HALS_BufferFactory::calculate_input_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E69792F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_BufferFactory::calculate_input_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0,std::allocator<HALS_BufferFactory::calculate_input_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69792F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_BufferFactory::calculate_input_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0,std::allocator<HALS_BufferFactory::calculate_input_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::operator()(uint64_t a1, HALS_BufferFactory **a2, uint64_t a3, HALS_IOEngineInfo *a4)
{
  HALS_BufferFactory::calculate_buffer_size_for_non_dsp(*a2, (HALS_IOStreamInfo *)*(unsigned int *)(a1 + 8), *(_QWORD *)(a1 + 16), a4);
  HALS_BufferFactory::calculate_buffer_size_for_dsp(*((HALS_BufferFactory **)*a2 + 14), *((HALS_IOStreamInfo **)*a2 + 15), *(_DWORD *)(a1 + 8), *(HALS_IOEngineInfo **)(a1 + 16));
  return 0;
}

uint64_t std::__function::__func<HALS_BufferFactory::calculate_input_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0,std::allocator<HALS_BufferFactory::calculate_input_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN18HALS_BufferFactory27calculate_input_buffer_sizeEjP17HALS_IOEngineInfoE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_BufferFactory::calculate_input_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0,std::allocator<HALS_BufferFactory::calculate_input_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target_type()
{
}

void std::__function::__func<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6979680;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6979680;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::operator()(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *a2;
  v5 = *(_QWORD **)(a1 + 8);
  v6 = **(unsigned int **)(a1 + 16);
  if (*(_DWORD *)(a3 + 108))
    HALS_BufferFactory::register_buffers_for_dsp(v5, v4, a3, v6);
  else
    HALS_BufferFactory::register_buffers_non_dsp((uint64_t)v5, v4, a3, v6);
  return 0;
}

uint64_t std::__function::__func<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN18HALS_BufferFactory16register_buffersERK24HALS_IOStreamActiveStatejE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::target_type()
{
}

_QWORD *HALS_BufferFactory::register_buffers_for_dsp(_QWORD *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a3 + 8))
  {
    if (result[4] > (unint64_t)a2)
    {
      result += 3;
      goto LABEL_5;
    }
  }
  else if (result[1] > (unint64_t)a2)
  {
LABEL_5:
    if (((*(_QWORD *)(*result + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1) == 0)
      return result;
  }
  v6 = *(_QWORD *)(a3 + 112);
  v7 = *(_QWORD *)(a3 + 120);
  while (v6 != v7)
  {
    result = *(_QWORD **)(*(_QWORD *)v6 + 8);
    if (result)
    {
      if (*(_QWORD *)(v6 + 16))
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t, _QWORD))(*result + 656))(result, *(unsigned __int8 *)(a3 + 8), *(unsigned int *)(v6 + 96), a4, *(unsigned int *)(v6 + 24));
    }
    v6 += 128;
  }
  return result;
}

void sub_1B59AD710(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_BufferFactory::register_buffers_non_dsp(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  BOOL v7;
  uint64_t v8;

  if (!*(_DWORD *)(a3 + 108)
    || ((v6 = *(uint64_t **)(a3 + 112), *(uint64_t **)(a3 + 120) != v6) ? (v7 = v6 == 0) : (v7 = 1), v7))
  {
    v6 = (uint64_t *)(a3 + 408);
  }
  v8 = *v6;
  if (*(_BYTE *)(a3 + 8))
  {
    if (*(_QWORD *)(result + 32) > (unint64_t)a2)
    {
      result += 24;
      goto LABEL_12;
    }
  }
  else if (*(_QWORD *)(result + 8) > (unint64_t)a2)
  {
LABEL_12:
    if (((*(_QWORD *)(*(_QWORD *)result + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1) == 0)
      return result;
  }
  result = *(_QWORD *)(v8 + 8);
  if (result && *(_QWORD *)(a3 + 16))
  {
    result = (*(uint64_t (**)(uint64_t, BOOL, _QWORD))(*(_QWORD *)result + 488))(result, *(_BYTE *)(a3 + 8) != 0, *(unsigned int *)(a3 + 12));
    if ((result & 1) == 0)
      return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v8 + 8) + 656))(*(_QWORD *)(v8 + 8), *(unsigned __int8 *)(a3 + 8), *(unsigned int *)(a3 + 12), a4, *(unsigned int *)(a3 + 24), *(_QWORD *)(a3 + 16));
  }
  return result;
}

void sub_1B59AD800(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void std::__function::__func<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0,std::allocator<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0,std::allocator<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6979600;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0,std::allocator<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6979600;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0,std::allocator<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::operator()(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(*(_QWORD *)a2 + 108);
  v5 = a2[2];
  v6 = *(_QWORD **)(a1 + 8);
  v7 = **(unsigned int **)(a1 + 16);
  if (v4)
    HALS_BufferFactory::register_buffers_for_dsp(v6, v5, v3, v7);
  else
    HALS_BufferFactory::register_buffers_non_dsp((uint64_t)v6, v5, v3, v7);
  return 0;
}

uint64_t std::__function::__func<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0,std::allocator<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN18HALS_BufferFactory16register_buffersERK24HALS_IOStreamActiveStatejE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0,std::allocator<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target_type()
{
}

void std::__function::__func<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6979780;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6979780;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::operator()(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *a2;
  v5 = *(_QWORD **)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (*(_DWORD *)(a3 + 108))
    HALS_BufferFactory::unregister_buffers_for_dsp(v5, v4, a3, v6);
  else
    HALS_BufferFactory::unregister_buffers_non_dsp((uint64_t)v5, v4, a3, v6);
  return 0;
}

uint64_t std::__function::__func<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN18HALS_BufferFactory18unregister_buffersERK24HALS_IOStreamActiveStatejE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::target_type()
{
}

_QWORD *HALS_BufferFactory::unregister_buffers_for_dsp(_QWORD *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a3 + 8))
  {
    if (result[4] > (unint64_t)a2)
    {
      result += 3;
      goto LABEL_5;
    }
  }
  else if (result[1] > (unint64_t)a2)
  {
LABEL_5:
    if (((*(_QWORD *)(*result + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1) == 0)
      return result;
  }
  v6 = *(_QWORD *)(a3 + 112);
  v7 = *(_QWORD *)(a3 + 120);
  while (v6 != v7)
  {
    result = *(_QWORD **)(*(_QWORD *)v6 + 8);
    if (result)
    {
      if (*(_QWORD *)(v6 + 16))
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t, _QWORD))(*result + 664))(result, *(unsigned __int8 *)(a3 + 8), *(unsigned int *)(v6 + 96), a4, *(unsigned int *)(v6 + 24));
    }
    v6 += 128;
  }
  return result;
}

void sub_1B59ADAA4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_BufferFactory::unregister_buffers_non_dsp(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  BOOL v7;
  uint64_t v8;

  if (!*(_DWORD *)(a3 + 108)
    || ((v6 = *(uint64_t **)(a3 + 112), *(uint64_t **)(a3 + 120) != v6) ? (v7 = v6 == 0) : (v7 = 1), v7))
  {
    v6 = (uint64_t *)(a3 + 408);
  }
  v8 = *v6;
  if (*(_BYTE *)(a3 + 8))
  {
    if (*(_QWORD *)(result + 32) > (unint64_t)a2)
    {
      result += 24;
      goto LABEL_12;
    }
  }
  else if (*(_QWORD *)(result + 8) > (unint64_t)a2)
  {
LABEL_12:
    if (((*(_QWORD *)(*(_QWORD *)result + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1) == 0)
      return result;
  }
  result = *(_QWORD *)(v8 + 8);
  if (result && *(_QWORD *)(a3 + 16))
  {
    result = (*(uint64_t (**)(uint64_t, BOOL, _QWORD))(*(_QWORD *)result + 488))(result, *(_BYTE *)(a3 + 8) != 0, *(unsigned int *)(a3 + 12));
    if ((result & 1) == 0)
      return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v8 + 8) + 664))(*(_QWORD *)(v8 + 8), *(unsigned __int8 *)(a3 + 8), *(unsigned int *)(a3 + 12), a4, *(unsigned int *)(a3 + 24), *(_QWORD *)(a3 + 16));
  }
  return result;
}

void sub_1B59ADB94(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void std::__function::__func<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0,std::allocator<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0,std::allocator<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6979700;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0,std::allocator<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6979700;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0,std::allocator<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::operator()(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(*(_QWORD *)a2 + 108);
  v5 = *(_QWORD **)(a1 + 8);
  v6 = a2[2];
  v7 = *(unsigned int *)(a1 + 16);
  if (v4)
    HALS_BufferFactory::unregister_buffers_for_dsp(v5, v6, v3, v7);
  else
    HALS_BufferFactory::unregister_buffers_non_dsp((uint64_t)v5, v6, v3, v7);
  return 0;
}

uint64_t std::__function::__func<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0,std::allocator<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN18HALS_BufferFactory18unregister_buffersERK24HALS_IOStreamActiveStatejE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0,std::allocator<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target_type()
{
}

void std::__function::__func<HALS_BufferFactory::free_buffers(void)::$_1,std::allocator<HALS_BufferFactory::free_buffers(void)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_BufferFactory::free_buffers(void)::$_1,std::allocator<HALS_BufferFactory::free_buffers(void)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6979880;
  return result;
}

void std::__function::__func<HALS_BufferFactory::free_buffers(void)::$_1,std::allocator<HALS_BufferFactory::free_buffers(void)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6979880;
}

uint64_t std::__function::__func<HALS_BufferFactory::free_buffers(void)::$_1,std::allocator<HALS_BufferFactory::free_buffers(void)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::operator()(int a1, HALS_IOStreamInfo *a2, HALS_BufferFactory *this)
{
  HALS_BufferFactory::free_buffers_non_dsp(this, a2);
  return 0;
}

uint64_t std::__function::__func<HALS_BufferFactory::free_buffers(void)::$_1,std::allocator<HALS_BufferFactory::free_buffers(void)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN18HALS_BufferFactory12free_buffersEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_BufferFactory::free_buffers(void)::$_1,std::allocator<HALS_BufferFactory::free_buffers(void)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::target_type()
{
}

void HALS_BufferFactory::free_buffers_non_dsp(HALS_BufferFactory *this, HALS_IOStreamInfo *a2)
{
  HALB_IOBufferManager_Server *v3;

  v3 = (HALB_IOBufferManager_Server *)*((_QWORD *)this + 2);
  if (v3 != *((HALB_IOBufferManager_Server **)this + 7))
    HALB_IOBufferManager_Server::FreeBuffer(v3, *((_DWORD *)this + 6));
  HALB_IOBufferManager_Server::FreeBuffer(*((HALB_IOBufferManager_Server **)this + 4), *((_DWORD *)this + 12));
  HALB_IOBufferManager_Server::FreeBuffer(*((HALB_IOBufferManager_Server **)this + 5), *((_DWORD *)this + 12));
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
}

void sub_1B59ADDB4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void std::__function::__func<HALS_BufferFactory::free_buffers(void)::$_0,std::allocator<HALS_BufferFactory::free_buffers(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_BufferFactory::free_buffers(void)::$_0,std::allocator<HALS_BufferFactory::free_buffers(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6979800;
  return result;
}

void std::__function::__func<HALS_BufferFactory::free_buffers(void)::$_0,std::allocator<HALS_BufferFactory::free_buffers(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6979800;
}

uint64_t std::__function::__func<HALS_BufferFactory::free_buffers(void)::$_0,std::allocator<HALS_BufferFactory::free_buffers(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::operator()(uint64_t a1, HALS_IOStreamInfo *a2)
{
  HALS_BufferFactory *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(HALS_BufferFactory **)a2;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 112);
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 120);
  if (v3 != v4)
  {
    do
    {
      HALB_IOBufferManager_Server::FreeBuffer(*(HALB_IOBufferManager_Server **)(v3 + 16), *(_DWORD *)(v3 + 24));
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
      HALB_IOBufferManager_Server::FreeBuffer(*(HALB_IOBufferManager_Server **)(v3 + 32), *(_DWORD *)(v3 + 40));
      *(_QWORD *)(v3 + 32) = 0;
      *(_DWORD *)(v3 + 40) = 0;
      v3 += 128;
    }
    while (v3 != v4);
    v2 = *(HALS_BufferFactory **)a2;
  }
  HALS_BufferFactory::free_buffers_non_dsp(v2, a2);
  return 0;
}

uint64_t std::__function::__func<HALS_BufferFactory::free_buffers(void)::$_0,std::allocator<HALS_BufferFactory::free_buffers(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN18HALS_BufferFactory12free_buffersEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_BufferFactory::free_buffers(void)::$_0,std::allocator<HALS_BufferFactory::free_buffers(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target_type()
{
}

void HALS_MetaDevice::Activate(const __CFDictionary **this)
{
  HALS_ObjectMap *v2;
  HALS_ObjectMap *v3;
  HALB_Mutex *v4;
  HALS_Object *v5;
  BOOL v6[2];
  _QWORD v7[6];
  char v8;

  *(_WORD *)v6 = 0;
  HALS_MetaDevice::_UpdateStreams(this, v6);
  if (*((_BYTE *)this + 1492))
    v2 = (HALS_ObjectMap *)*((unsigned int *)this + 372);
  else
    v2 = 0;
  v3 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v2);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN15HALS_MetaDevice28InheritSubdeviceDSPForClientEbP11HALS_Client_block_invoke;
  v7[3] = &__block_descriptor_tmp_126;
  v8 = 1;
  v7[4] = this;
  v7[5] = v3;
  v4 = (HALB_Mutex *)(*((uint64_t (**)(const __CFDictionary **))*this + 7))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  HALS_Device::Activate((const __CFString **)this);
  HALS_ObjectMap::ReleaseObject(v3, v5);
}

void sub_1B59ADF80(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_MetaDevice::~HALS_MetaDevice(void **this)
{
  HALS_MetaDevice::~HALS_MetaDevice(this);
  JUMPOUT(0x1B5E50688);
}

{
  void *v2;
  uint64_t i;
  void *v4;

  *this = off_1E6979900;
  if (*((char *)this + 1847) < 0)
    operator delete(this[228]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(this + 188));
  v2 = this[187];
  this[187] = 0;
  if (v2)
    MEMORY[0x1B5E50688](v2, 0x20C4093837F09);
  for (i = 0; i != -6; i -= 3)
  {
    v4 = this[i + 183];
    if (v4)
    {
      this[i + 184] = v4;
      operator delete(v4);
    }
  }
  HALS_MetaDeviceDescription::~HALS_MetaDeviceDescription((HALS_MetaDeviceDescription *)(this + 165));
  HALS_Device::~HALS_Device((HALS_Device *)this);
}

uint64_t HALS_MetaDevice::_Deactivate(HALS_MetaDevice *this)
{
  uint64_t v2;
  char v3;
  char v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  HALS_ObjectMap *v11;
  HALS_Object *v12;
  _opaque_pthread_t *v13;
  _DWORD *exception;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (((*((_QWORD *)this + 175) - *((_QWORD *)this + 174)) & 0x7FFFFFFF8) != 0)
    HALS_MetaDevice::UnregisterTaps(this);
  v2 = 0;
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = (char *)this + 24 * v2;
    v6 = v5 + 1448;
    v7 = *((_QWORD *)v5 + 181);
    if (v7 != *((_QWORD *)v5 + 180))
    {
      v8 = 0;
      v9 = (uint64_t *)(v5 + 1440);
      v10 = 1;
      v7 = *((_QWORD *)v5 + 180);
      do
      {
        v11 = *(HALS_ObjectMap **)(v7 + 8 * v8);
        (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v11 + 8))(v11);
        HALS_ObjectMap::ObjectIsDead(v11, v12);
        v8 = v10;
        v7 = *v9;
        ++v10;
      }
      while (v8 < (*v6 - *v9) >> 3);
    }
    v3 = 0;
    *v6 = v7;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
  v13 = *(_opaque_pthread_t **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 165) + 56))(*((_QWORD *)this + 165))
                              + 72);
  if (v13 != pthread_self())
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v16 = 136315394;
      v17 = "HALS_MetaDeviceDescription.cpp";
      v18 = 1024;
      v19 = 63;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDeviceDescription::Deactivate: inner methods have to be called from inside the command gate", (uint8_t *)&v16, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  HALS_MetaDeviceDescription::TeardownSubDeviceList((HALS_MetaDevice *)((char *)this + 1320));
  HALS_MetaDeviceDescription::TeardownSubTapList((HALS_MetaDevice *)((char *)this + 1320));
  return HALS_Device::_Deactivate(this);
}

uint64_t HALS_MetaDevice::HasProperty(HALS_MetaDevice *this, unsigned int a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  const BOOL *v7;
  HALS_Client *v8;
  signed int mSelector;
  _BOOL8 v10;
  HALS_MetaDevice_HostedDSP *v11;
  unsigned int v12;
  int v14;
  int v15;
  HALB_Mutex *v16;
  _QWORD v18[6];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  _QWORD v24[2];

  if (!(*(unsigned int (**)(HALS_MetaDevice *, AudioObjectPropertyAddress *, AudioObjectPropertyAddress *))(*(_QWORD *)this + 176))(this, a3, a4))return 0;
  mSelector = a3->mSelector;
  v10 = 1;
  if ((int)a3->mSelector <= 1685287011)
  {
    if (mSelector > 1635017071)
    {
      if (mSelector <= 1685087595)
      {
        if (mSelector == 1635017072 || mSelector == 1684107364)
          return v10;
        v14 = 1684893796;
      }
      else
      {
        if ((mSelector - 1685278561) <= 0x11 && ((1 << (mSelector - 97)) & 0x20003) != 0)
        {
          v11 = (HALS_MetaDevice_HostedDSP *)*((_QWORD *)this + 187);
          if (v11)
          {
            v12 = mSelector - 1685278561;
            if (v12 <= 0x11 && ((0x20001u >> v12) & 1) != 0)
              return HALS_MetaDevice_HostedDSP::HasProperty(v11, a3, a4, v8);
          }
          return HALS_Device::HasProperty((HALS_Device ***)this, v7, a3, a4);
        }
        v14 = 1685087596;
      }
      goto LABEL_44;
    }
    if (mSelector <= 1634755427)
    {
      if (mSelector == 1633906541 || mSelector == 1634169456)
        return v10;
      v14 = 1634562932;
      goto LABEL_44;
    }
    if (mSelector == 1634755428)
      return v10;
    if (mSelector != 1634758765)
    {
      v15 = 1634758774;
LABEL_34:
      if (mSelector != v15)
        return HALS_Device::HasProperty((HALS_Device ***)this, v7, a3, a4);
      return 0;
    }
    return 0;
  }
  if (mSelector > 1851878763)
  {
    if (mSelector > 1952542754)
    {
      if (mSelector == 1952542755)
        return v10;
      if (mSelector != 1983996971 && mSelector != 1986622324)
        return HALS_Device::HasProperty((HALS_Device ***)this, v7, a3, a4);
      if (a3->mScope == 1768845428)
      {
        atomic_load((unsigned __int8 *)this + 1432);
        return v10;
      }
      return 0;
    }
    if (mSelector != 1851878764)
    {
      if (mSelector != 1852793963)
      {
        v15 = 1869180523;
        goto LABEL_34;
      }
      return 0;
    }
LABEL_30:
    v19 = 0;
    v20 = &v19;
    v21 = 0x3802000000;
    v22 = __Block_byref_object_copy__36;
    v23 = __Block_byref_object_dispose__37;
    v24[0] = &off_1E69A0F60;
    v24[1] = 0;
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 0x40000000;
    v18[2] = ___ZNK15HALS_MetaDevice11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke;
    v18[3] = &unk_1E6979DA8;
    v18[4] = &v19;
    v18[5] = this;
    v16 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v16, (uint64_t)v18);
    v10 = v20[6] != 0;
    _Block_object_dispose(&v19, 8);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v24);
    return v10;
  }
  if (mSelector <= 1769302371)
  {
    if (mSelector == 1685287012)
      return v10;
    if (mSelector != 1685414763)
    {
      v14 = 1735554416;
LABEL_44:
      if (mSelector != v14)
        return HALS_Device::HasProperty((HALS_Device ***)this, v7, a3, a4);
      return v10;
    }
    return 0;
  }
  switch(mSelector)
  {
    case 1769302372:
      return a3->mScope == 1735159650 && a3->mElement == 0;
    case 1819107691:
      return v10;
    case 1819173229:
      goto LABEL_30;
  }
  return HALS_Device::HasProperty((HALS_Device ***)this, v7, a3, a4);
}

void sub_1B59AE534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  OS::CF::UntypedObject *v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  OS::CF::UntypedObject::~UntypedObject(v8);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaDevice::IsPropertySettable(HALS_MetaDevice *this, unsigned int a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  AMCP::Log::Scope_Registry *v7;
  const BOOL *v8;
  signed int mSelector;
  _BOOL8 v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  HALB_Mutex *v15;
  NSObject *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  _DWORD *exception;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  uint8_t buf[8];
  __int128 v26;
  __int128 v27;
  _QWORD *v28;
  AudioObjectPropertyAddress *v29;
  AudioObjectPropertyAddress *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v7 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 88))(this);
  if ((v7 & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  v10 = 1;
  if ((int)a3->mSelector > 1685287011)
  {
    if (mSelector <= 1851878763)
    {
      if (mSelector > 1769302371)
      {
        if (mSelector == 1769302372)
          return 0;
        v11 = 1819173229;
      }
      else
      {
        if (mSelector == 1685287012)
          return 0;
        v11 = 1735554416;
      }
LABEL_32:
      if (mSelector != v11)
        return HALS_Device::IsPropertySettable(this, v8, a3, a4);
      return v10;
    }
    if (mSelector > 1952542754)
    {
      if (mSelector == 1952542755)
        return v10;
      if (mSelector != 1983996971 && mSelector != 1986622324)
        return HALS_Device::IsPropertySettable(this, v8, a3, a4);
      if (a3->mScope == 1768845428)
      {
        atomic_load((unsigned __int8 *)this + 1432);
        return v10;
      }
      return 0;
    }
    if (mSelector == 1851878764)
      return v10;
    v12 = 1869180523;
  }
  else
  {
    if (mSelector > 1684107363)
    {
      if (mSelector > 1685278560)
      {
        if ((mSelector - 1685278561) > 0x11)
          return HALS_Device::IsPropertySettable(this, v8, a3, a4);
        if (((1 << (mSelector - 97)) & 0x20003) == 0)
          return HALS_Device::IsPropertySettable(this, v8, a3, a4);
        v13 = (_QWORD *)*((_QWORD *)this + 187);
        if (!v13 || (mSelector - 1685278561) > 0x11 || ((0x20001u >> (mSelector - 97)) & 1) == 0)
          return HALS_Device::IsPropertySettable(this, v8, a3, a4);
        if (mSelector != 1685278561 && mSelector != 1685278578)
        {
          AMCP::Log::Scope_Registry::get(v7);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v17 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            v18 = pthread_self();
            v19 = pthread_mach_thread_np(v18);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v19;
            LOWORD(v26) = 2080;
            *(_QWORD *)((char *)&v26 + 2) = "HALS_MetaDevice_HostedDSP.cpp";
            WORD5(v26) = 1024;
            HIDWORD(v26) = 77;
            LOWORD(v27) = 2080;
            *(_QWORD *)((char *)&v27 + 2) = "HandlesProperty(inAddress, inClient)";
            _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s This property is not processed by HALS_MetaDevice_HostedDSP", buf, 0x22u);
          }
          abort();
        }
        v21 = 0;
        v22 = &v21;
        v23 = 0x2000000000;
        v24 = 0;
        v14 = *v13;
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&v26 = 0x40000000;
        *((_QWORD *)&v26 + 1) = ___ZNK25HALS_MetaDevice_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke;
        *(_QWORD *)&v27 = &unk_1E696B260;
        v29 = a3;
        v30 = a4;
        *((_QWORD *)&v27 + 1) = &v21;
        v28 = v13;
        v15 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14);
        HALB_CommandGate::ExecuteCommand(v15, (uint64_t)buf);
        v10 = *((_BYTE *)v22 + 24) != 0;
        _Block_object_dispose(&v21, 8);
        return v10;
      }
      if (mSelector != 1684107364 && mSelector != 1684893796)
      {
        v11 = 1685087596;
        goto LABEL_32;
      }
      return 0;
    }
    if (mSelector <= 1634562931)
    {
      if (mSelector == 1633906541)
        return v10;
      v12 = 1634169456;
    }
    else
    {
      if (mSelector == 1634562932 || mSelector == 1634755428)
        return v10;
      v12 = 1635017072;
    }
  }
  if (mSelector == v12)
    return 0;
  return HALS_Device::IsPropertySettable(this, v8, a3, a4);
}

void sub_1B59AE984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaDevice::GetPropertyDataSize(HALS_Device ***this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, int *a5, AudioObjectPropertyAddress *a6)
{
  AMCP::Log::Scope_Registry *v11;
  const BOOL *v12;
  signed int mSelector;
  uint64_t v14;
  int v15;
  HALB_Mutex *v16;
  HALB_Mutex *v17;
  HALS_Device **v19;
  HALS_Device *v20;
  HALB_Mutex *v21;
  uint8_t *v22;
  HALB_Mutex *v23;
  HALB_Mutex *v25;
  NSObject *v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  _DWORD *exception;
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[7];
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  uint8_t buf[8];
  __int128 v40;
  __int128 v41;
  HALS_Device **v42;
  AudioObjectPropertyAddress *v43;
  int *v44;
  AudioObjectPropertyAddress *v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v11 = (AMCP::Log::Scope_Registry *)((uint64_t (*)(HALS_Device ***, uint64_t, AudioObjectPropertyAddress *, AudioObjectPropertyAddress *))(*this)[11])(this, a2, a3, a6);
  if ((v11 & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  v14 = 4;
  if ((int)a3->mSelector <= 1685278560)
  {
    if (mSelector > 1634755427)
    {
      if (mSelector > 1684107363)
      {
        if (mSelector == 1684107364 || mSelector == 1684893796)
          return v14;
        v15 = 1685087596;
        goto LABEL_39;
      }
      if (mSelector != 1634755428)
      {
        if (mSelector == 1635017072)
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&v40 = buf;
          *((_QWORD *)&v40 + 1) = 0x2000000000;
          LODWORD(v41) = 0;
          v30[0] = MEMORY[0x1E0C809B0];
          v30[1] = 0x40000000;
          v30[2] = ___ZNK15HALS_MetaDevice19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4;
          v30[3] = &unk_1E6979E48;
          v30[4] = buf;
          v30[5] = this;
          v23 = (HALB_Mutex *)((uint64_t (*)(HALS_Device ***))(*this)[7])(this);
          HALB_CommandGate::ExecuteCommand(v23, (uint64_t)v30);
          goto LABEL_34;
        }
        return HALS_Device::GetPropertyDataSize(this, v12, a3, a4, a5, a6);
      }
      return 8;
    }
    if (mSelector > 1634429293)
    {
      if (mSelector == 1634429294)
        return v14;
      if (mSelector != 1634562932)
        return HALS_Device::GetPropertyDataSize(this, v12, a3, a4, a5, a6);
      return 8;
    }
    if (mSelector == 1633906541)
      return 8;
    if (mSelector != 1634169456)
      return HALS_Device::GetPropertyDataSize(this, v12, a3, a4, a5, a6);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&v40 = buf;
    *((_QWORD *)&v40 + 1) = 0x2000000000;
    LODWORD(v41) = 0;
    v31[0] = MEMORY[0x1E0C809B0];
    v31[1] = 0x40000000;
    v31[2] = ___ZNK15HALS_MetaDevice19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3;
    v31[3] = &unk_1E6979E20;
    v31[4] = buf;
    v31[5] = this;
    v17 = (HALB_Mutex *)((uint64_t (*)(HALS_Device ***))(*this)[7])(this);
    HALB_CommandGate::ExecuteCommand(v17, (uint64_t)v31);
LABEL_34:
    v14 = (4 * *(_DWORD *)(v40 + 24));
LABEL_42:
    v22 = buf;
LABEL_43:
    _Block_object_dispose(v22, 8);
    return v14;
  }
  if (mSelector <= 1735554415)
  {
    if ((mSelector - 1685278561) <= 0x11 && ((1 << (mSelector - 97)) & 0x20003) != 0)
    {
      v19 = this[187];
      if (!v19 || (mSelector - 1685278561) > 0x11 || ((0x20001u >> (mSelector - 97)) & 1) == 0)
        return HALS_Device::GetPropertyDataSize(this, v12, a3, a4, a5, a6);
      if (mSelector != 1685278561 && mSelector != 1685278578)
      {
        AMCP::Log::Scope_Registry::get(v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v26 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          v27 = pthread_self();
          v28 = pthread_mach_thread_np(v27);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v28;
          LOWORD(v40) = 2080;
          *(_QWORD *)((char *)&v40 + 2) = "HALS_MetaDevice_HostedDSP.cpp";
          WORD5(v40) = 1024;
          HIDWORD(v40) = 94;
          LOWORD(v41) = 2080;
          *(_QWORD *)((char *)&v41 + 2) = "HandlesProperty(inAddress, inClient)";
          _os_log_error_impl(&dword_1B57BA000, v26, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s This property is not processed by HALS_MetaDevice_HostedDSP", buf, 0x22u);
        }
        abort();
      }
      v35 = 0;
      v36 = &v35;
      v37 = 0x2000000000;
      v38 = 0;
      v20 = *v19;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v40 = 0x40000000;
      *((_QWORD *)&v40 + 1) = ___ZNK25HALS_MetaDevice_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
      *(_QWORD *)&v41 = &unk_1E696B288;
      v46 = a4;
      v43 = a3;
      v44 = a5;
      v45 = a6;
      *((_QWORD *)&v41 + 1) = &v35;
      v42 = v19;
      v21 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)v20 + 56))(v20);
      HALB_CommandGate::ExecuteCommand(v21, (uint64_t)buf);
      v14 = *((unsigned int *)v36 + 6);
      v22 = (uint8_t *)&v35;
      goto LABEL_43;
    }
    v15 = 1685287012;
  }
  else
  {
    if (mSelector > 1853059618)
    {
      if (mSelector == 1853059619)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&v40 = buf;
        *((_QWORD *)&v40 + 1) = 0x2000000000;
        LODWORD(v41) = 0;
        v32[0] = MEMORY[0x1E0C809B0];
        v32[1] = 0x40000000;
        v32[2] = ___ZNK15HALS_MetaDevice19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2;
        v32[3] = &unk_1E6979DF8;
        v32[4] = buf;
        v32[5] = this;
        v25 = (HALB_Mutex *)((uint64_t (*)(HALS_Device ***))(*this)[7])(this);
        HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v32);
        v14 = (16 * *(_DWORD *)(v40 + 24));
        goto LABEL_42;
      }
      if (mSelector == 1952542755)
        return 8;
      if (mSelector != 1870098020)
        return HALS_Device::GetPropertyDataSize(this, v12, a3, a4, a5, a6);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&v40 = buf;
      *((_QWORD *)&v40 + 1) = 0x2000000000;
      LODWORD(v41) = 0;
      v33[0] = MEMORY[0x1E0C809B0];
      v33[1] = 0x40000000;
      v33[2] = ___ZNK15HALS_MetaDevice19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
      v33[3] = &unk_1E6979DD0;
      v34 = a4 >> 2;
      v33[5] = this;
      v33[6] = a5;
      v33[4] = buf;
      v16 = (HALB_Mutex *)((uint64_t (*)(HALS_Device ***))(*this)[7])(this);
      HALB_CommandGate::ExecuteCommand(v16, (uint64_t)v33);
      goto LABEL_34;
    }
    if (mSelector == 1735554416)
      return 8;
    v15 = 1769302372;
  }
LABEL_39:
  if (mSelector != v15)
    return HALS_Device::GetPropertyDataSize(this, v12, a3, a4, a5, a6);
  return v14;
}

void sub_1B59AEF70(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void HALS_MetaDevice::GetPropertyData(HALS_MetaDevice *this, const BOOL *a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4, unsigned int *a5, unsigned int *a6, void *a7, int *a8, HALS_Client *a9)
{
  AMCP::Log::Scope_Registry *v17;
  signed int mSelector;
  AudioObjectPropertyScope mScope;
  uint64_t *v20;
  uint64_t v21;
  HALB_Mutex *v22;
  int v23;
  HALB_Mutex *v24;
  HALB_Mutex *v25;
  HALB_Mutex *v26;
  int v27;
  HALB_Mutex *v28;
  int v29;
  HALB_Mutex *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  HALB_Mutex *v34;
  HALB_Mutex *v35;
  uint64_t v36;
  HALB_Mutex *v37;
  HALB_Mutex *v38;
  int v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  HALB_Mutex *v46;
  int v47;
  HALB_Mutex *v48;
  HALB_Mutex *v49;
  HALB_Mutex *v50;
  HALB_Mutex *v51;
  HALB_Mutex *v52;
  int v53;
  unsigned int k;
  HALB_Mutex *v55;
  HALB_Mutex *v56;
  int Count;
  unsigned int i;
  unsigned int CFType;
  CFTypeRef v60;
  unsigned int v61;
  CFTypeID v62;
  int v63;
  unsigned int j;
  __CFArray *v65;
  HALB_Mutex *v66;
  unsigned int v67;
  HALB_Mutex *v68;
  HALB_Mutex *v69;
  uint64_t v70;
  HALB_Mutex *v71;
  HALB_Mutex *v72;
  unsigned int TotalNumberChannelsForClient;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  _QWORD *v79;
  NSObject *v80;
  _opaque_pthread_t *v81;
  mach_port_t v82;
  _DWORD *exception;
  _DWORD *v84;
  _DWORD *v85;
  _DWORD *v86;
  _DWORD *v87;
  _DWORD *v88;
  _DWORD *v89;
  _DWORD *v90;
  _DWORD *v91;
  _DWORD *v92;
  _DWORD *v93;
  _DWORD *v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  _DWORD *v98;
  _DWORD *v99;
  _DWORD *v100;
  _DWORD *v101;
  _DWORD *v102;
  _DWORD *v103;
  _DWORD *v104;
  _DWORD *v105;
  _DWORD *v106;
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[7];
  int v117;
  _QWORD v118[7];
  int v119;
  CFTypeRef cf;
  char v121;
  void *value;
  __int16 v123;
  AudioObjectPropertyAddress **v124;
  __int16 v125;
  _QWORD v126[6];
  _QWORD v127[7];
  int v128;
  _QWORD v129[6];
  _QWORD v130[6];
  BOOL v131;
  _QWORD v132[7];
  BOOL v133;
  _QWORD v134[7];
  BOOL v135;
  _QWORD v136[7];
  BOOL v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  CFArrayRef theArray;
  std::__shared_weak_count *v141;
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[8];
  unsigned int v145;
  unsigned int v146;
  __CFArray *Mutable;
  uint64_t v148;
  void (*v149)(uint64_t);
  void *v150;
  _BYTE *v151;
  CFArrayRef v152;
  _BYTE buf[24];
  __int128 v154;
  AudioObjectPropertyAddress *v155;
  unsigned int *v156;
  unsigned int *v157;
  int *v158;
  HALS_Client *v159;
  int v160;
  int v161;
  uint64_t v162;

  v162 = *MEMORY[0x1E0C80C00];
  v17 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_MetaDevice *, const BOOL *, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a9);
  if ((v17 & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  mScope = a3->mScope;
  if ((int)a3->mSelector <= 1735554415)
  {
    if (mSelector > 1684434035)
    {
      if (mSelector <= 1685278560)
      {
        switch(mSelector)
        {
          case 1684434036:
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1966;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceCanBeDefaultDevice", buf, 0x12u);
              }
              v95 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v95 = &off_1E69A1B30;
              v95[2] = 561211770;
            }
            v136[0] = MEMORY[0x1E0C809B0];
            v136[1] = 0x40000000;
            v136[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_51;
            v136[3] = &__block_descriptor_tmp_52_4153;
            v136[4] = this;
            v136[5] = a6;
            v137 = mScope == 1768845428;
            v136[6] = a9;
            v50 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v50, (uint64_t)v136);
            break;
          case 1684893796:
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2269;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyMaximumPastData", buf, 0x12u);
              }
              v94 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v94 = &off_1E69A1B30;
              v94[2] = 561211770;
            }
            v108[0] = MEMORY[0x1E0C809B0];
            v108[1] = 0x40000000;
            v108[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_86;
            v108[3] = &__block_descriptor_tmp_87_4181;
            v108[4] = this;
            v108[5] = a6;
            v49 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v49, (uint64_t)v108);
            break;
          case 1685087596:
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2278;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyEnableListening", buf, 0x12u);
              }
              v89 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v89 = &off_1E69A1B30;
              v89[2] = 561211770;
            }
            v107[0] = MEMORY[0x1E0C809B0];
            v107[1] = 0x40000000;
            v107[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_88;
            v107[3] = &__block_descriptor_tmp_89;
            v107[4] = this;
            v107[5] = a6;
            v28 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v28, (uint64_t)v107);
            break;
          default:
            goto LABEL_89;
        }
      }
      else
      {
        if (mSelector <= 1685287011)
        {
          if ((mSelector - 1685278561) <= 0x11 && ((1 << (mSelector - 97)) & 0x20003) != 0)
          {
            v20 = (uint64_t *)*((_QWORD *)this + 187);
            if (v20)
            {
              if ((mSelector - 1685278561) <= 0x11 && ((0x20001u >> (mSelector - 97)) & 1) != 0)
              {
                if (mSelector != 1685278561 && mSelector != 1685278578)
                {
                  AMCP::Log::Scope_Registry::get(v17);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
                  v80 = **(NSObject ***)buf;
                  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
                  if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
                  {
                    v81 = pthread_self();
                    v82 = pthread_mach_thread_np(v81);
                    *(_DWORD *)buf = 67109890;
                    *(_DWORD *)&buf[4] = v82;
                    *(_WORD *)&buf[8] = 2080;
                    *(_QWORD *)&buf[10] = "HALS_MetaDevice_HostedDSP.cpp";
                    *(_WORD *)&buf[18] = 1024;
                    *(_DWORD *)&buf[20] = 116;
                    LOWORD(v154) = 2080;
                    *(_QWORD *)((char *)&v154 + 2) = "HandlesProperty(inAddress, inClient)";
                    _os_log_error_impl(&dword_1B57BA000, v80, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s This property is not processed by HALS_MetaDevice_HostedDSP", buf, 0x22u);
                  }
                  abort();
                }
                v21 = *v20;
                *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                *(_QWORD *)&buf[8] = 0x40000000;
                *(_QWORD *)&buf[16] = ___ZNK25HALS_MetaDevice_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
                *(_QWORD *)&v154 = &__block_descriptor_tmp_7;
                *((_QWORD *)&v154 + 1) = v20;
                v155 = a3;
                v156 = a5;
                v157 = a6;
                v160 = (int)a4;
                v161 = (int)a7;
                v158 = a8;
                v159 = a9;
                v22 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 56))(v21);
                HALB_CommandGate::ExecuteCommand(v22, (uint64_t)buf);
                return;
              }
            }
          }
LABEL_89:
          HALS_Device::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
          return;
        }
        if (mSelector == 1685287012)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2251;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertySupportsPastData", buf, 0x12u);
            }
            v105 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v105 = &off_1E69A1B30;
            v105[2] = 561211770;
          }
          v110[0] = MEMORY[0x1E0C809B0];
          v110[1] = 0x40000000;
          v110[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_82;
          v110[3] = &__block_descriptor_tmp_83_4177;
          v110[4] = this;
          v110[5] = a6;
          v72 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v72, (uint64_t)v110);
        }
        else
        {
          if (mSelector != 1735354734 && mSelector != 1735356005)
            goto LABEL_89;
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1956;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceIsRunning", buf, 0x12u);
            }
            v84 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v84 = &off_1E69A1B30;
            v84[2] = 561211770;
          }
          v29 = *((_DWORD *)this + 4);
          v139 = 0;
          v138 = 0;
          HALS_System::GetInstance(&theArray, 0, &v138);
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x4002000000;
          *(_QWORD *)&v154 = __Block_byref_object_copy__35;
          *((_QWORD *)&v154 + 1) = __Block_byref_object_dispose__36;
          v156 = 0;
          v157 = 0;
          v155 = 0;
          Mutable = (__CFArray *)MEMORY[0x1E0C809B0];
          v148 = 0x40000000;
          v149 = ___ZN11HALS_System37IsUnderlyingIOContextRunningForDeviceEj_block_invoke;
          v150 = &unk_1E697E200;
          v151 = buf;
          v152 = theArray;
          v30 = (HALB_Mutex *)(*(uint64_t (**)(CFArrayRef))(*(_QWORD *)theArray + 56))(theArray);
          HALB_CommandGate::ExecuteCommand(v30, (uint64_t)&Mutable);
          v31 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
          v32 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
          while (1)
          {
            if (v31 == v32)
            {
              v39 = 0;
              goto LABEL_93;
            }
            if (*(_QWORD *)v31
              && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v31 + 96) + 720))(*(_QWORD *)(*(_QWORD *)v31 + 96)) == v29
              && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v31 + 96) + 152))(*(_QWORD *)(*(_QWORD *)v31 + 96)) & 1) != 0)
            {
              break;
            }
            v31 += 8;
          }
          v39 = 1;
LABEL_93:
          _Block_object_dispose(buf, 8);
          v124 = &v155;
          std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
          *a6 = v39;
          v40 = v141;
          if (v141)
          {
            p_shared_owners = (unint64_t *)&v141->__shared_owners_;
            do
              v42 = __ldaxr(p_shared_owners);
            while (__stlxr(v42 - 1, p_shared_owners));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
          v43 = v139;
          if (v139)
          {
            v44 = (unint64_t *)&v139->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
        }
      }
      goto LABEL_178;
    }
    if (mSelector <= 1634755427)
    {
      if (mSelector <= 1634429293)
      {
        if (mSelector != 1633906541)
        {
          if (mSelector != 1634169456)
            goto LABEL_89;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x2000000000;
          LODWORD(v154) = 0;
          v118[0] = MEMORY[0x1E0C809B0];
          v118[1] = 0x40000000;
          v118[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_68;
          v118[3] = &unk_1E6979FC8;
          v118[5] = this;
          v118[4] = buf;
          v119 = (int)a4;
          v118[6] = a6;
          v24 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v24, (uint64_t)v118);
          goto LABEL_105;
        }
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2149;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioAggregateDevicePropertyComposition", buf, 0x12u);
          }
          v98 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v98 = &off_1E69A1B30;
          v98[2] = 561211770;
        }
        v115[0] = MEMORY[0x1E0C809B0];
        v115[1] = 0x40000000;
        v115[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_71;
        v115[3] = &__block_descriptor_tmp_72_4169;
        v115[4] = this;
        v115[5] = a6;
        v55 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v55, (uint64_t)v115);
LABEL_168:
        v67 = 8;
LABEL_179:
        *a5 = v67;
        return;
      }
      if (mSelector != 1634429294)
      {
        if (mSelector != 1634562932)
          goto LABEL_89;
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2158;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioAggregateDevicePropertyMainSubDevice", buf, 0x12u);
          }
          v91 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v91 = &off_1E69A1B30;
          v91[2] = 561211770;
        }
        v114[0] = MEMORY[0x1E0C809B0];
        v114[1] = 0x40000000;
        v114[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_73;
        v114[3] = &__block_descriptor_tmp_74;
        v114[4] = this;
        v114[5] = a6;
        v35 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v35, (uint64_t)v114);
        goto LABEL_168;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1946;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyRelatedDevices", buf, 0x12u);
        }
        v102 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v102 = &off_1E69A1B30;
        v102[2] = 561211770;
      }
      v142[0] = MEMORY[0x1E0C809B0];
      v142[1] = 0x40000000;
      v142[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_49;
      v142[3] = &__block_descriptor_tmp_50;
      v142[4] = this;
      v142[5] = a6;
      v68 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v68, (uint64_t)v142);
LABEL_178:
      v67 = 4;
      goto LABEL_179;
    }
    if (mSelector <= 1668049763)
    {
      if (mSelector == 1634755428)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2167;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioAggregateDevicePropertyClockDevice", buf, 0x12u);
          }
          v100 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v100 = &off_1E69A1B30;
          v100[2] = 561211770;
        }
        v113[0] = MEMORY[0x1E0C809B0];
        v113[1] = 0x40000000;
        v113[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_75;
        v113[3] = &__block_descriptor_tmp_77_4172;
        v113[4] = this;
        v113[5] = a6;
        v66 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v66, (uint64_t)v113);
        goto LABEL_168;
      }
      if (mSelector != 1635017072)
        goto LABEL_89;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2000000000;
      LODWORD(v154) = 0;
      v116[0] = MEMORY[0x1E0C809B0];
      v116[1] = 0x40000000;
      v116[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3;
      v116[3] = &unk_1E6979FF0;
      v116[4] = buf;
      v116[5] = this;
      v117 = (int)a4;
      v116[6] = a6;
      v26 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v26, (uint64_t)v116);
      goto LABEL_105;
    }
    if (mSelector != 1668049764)
    {
      if (mSelector != 1684107364)
        goto LABEL_89;
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2260;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyAvailablePastData", buf, 0x12u);
        }
        v93 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v93 = &off_1E69A1B30;
        v93[2] = 561211770;
      }
      v109[0] = MEMORY[0x1E0C809B0];
      v109[1] = 0x40000000;
      v109[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_84;
      v109[3] = &__block_descriptor_tmp_85_4179;
      v109[4] = this;
      v109[5] = a6;
      v37 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v37, (uint64_t)v109);
      goto LABEL_178;
    }
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2229;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyClockDomain", buf, 0x12u);
      }
      v103 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v103 = &off_1E69A1B30;
      v103[2] = 561211770;
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    *(_QWORD *)&v154 = 0;
    v111[0] = MEMORY[0x1E0C809B0];
    v111[1] = 0x40000000;
    v111[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_80;
    v111[3] = &unk_1E697A0A0;
    v111[4] = buf;
    v111[5] = this;
    v69 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v69, (uint64_t)v111);
    v70 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
    if (v70)
    {
      (*(void (**)(uint64_t, _QWORD, AudioObjectPropertyAddress *, AudioObjectPropertyAddress *, unsigned int *, unsigned int *, void *, int *, HALS_Client *))(*(_QWORD *)v70 + 112))(v70, 0, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_107;
    }
    *a6 = 0;
    v47 = 4;
    goto LABEL_106;
  }
  if (mSelector <= 1853059618)
  {
    if (mSelector > 1819107690)
    {
      if (mSelector > 1819569762)
      {
        if (mSelector == 1819569763)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1984;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyLatency", buf, 0x12u);
            }
            v104 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v104 = &off_1E69A1B30;
            v104[2] = 561211770;
          }
          v132[0] = MEMORY[0x1E0C809B0];
          v132[1] = 0x40000000;
          v132[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_55;
          v132[3] = &__block_descriptor_tmp_56_4157;
          v132[4] = this;
          v132[5] = a6;
          v133 = mScope == 1768845428;
          v132[6] = a9;
          v71 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v71, (uint64_t)v132);
          goto LABEL_178;
        }
        v27 = 1851878764;
      }
      else
      {
        if (mSelector == 1819107691)
        {
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1928;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioObjectPropertyManufacturer", buf, 0x12u);
            }
            v101 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v101 = &off_1E69A1B30;
            v101[2] = 561211770;
          }
          *(_QWORD *)a6 = CFSTR("Apple Inc.");
          goto LABEL_168;
        }
        v27 = 1819173229;
      }
      if (mSelector != v27)
        goto LABEL_89;
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1919;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioObjectPropertyName", buf, 0x12u);
        }
        v85 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v85 = &off_1E69A1B30;
        v85[2] = 561211770;
      }
      v143[0] = MEMORY[0x1E0C809B0];
      v143[1] = 0x40000000;
      v143[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_45;
      v143[3] = &__block_descriptor_tmp_46_4146;
      v143[4] = this;
      v143[5] = a6;
      v38 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v38, (uint64_t)v143);
      goto LABEL_168;
    }
    if (mSelector > 1751737453)
    {
      if (mSelector != 1751737454)
      {
        if (mSelector != 1769302372)
          goto LABEL_89;
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2287;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyUseCaseID", buf, 0x12u);
          }
          v92 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v92 = &off_1E69A1B30;
          v92[2] = 561211770;
        }
        v36 = (*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 464))(this);
        if ((v36 & 0xFF00000000) != 0)
          v23 = v36;
        else
          v23 = 0;
LABEL_79:
        *a6 = v23;
        goto LABEL_178;
      }
    }
    else
    {
      if (mSelector == 1735554416)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2051;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioAggregateDevicePropertyFullSubDeviceList", buf, 0x12u);
          }
          v99 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v99 = &off_1E69A1B30;
          v99[2] = 561211770;
        }
        Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
        LOWORD(v148) = 257;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3802000000;
        *(_QWORD *)&v154 = __Block_byref_object_copy__62;
        *((_QWORD *)&v154 + 1) = __Block_byref_object_dispose__63;
        v155 = 0;
        LOWORD(v156) = 1;
        v126[0] = MEMORY[0x1E0C809B0];
        v126[1] = 0x40000000;
        v126[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_64;
        v126[3] = &unk_1E6979FA0;
        v126[5] = this;
        v126[4] = buf;
        v56 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v56, (uint64_t)v126);
        if (*(_QWORD *)(*(_QWORD *)&buf[8] + 40))
        {
          theArray = 0;
          LOWORD(v141) = 1;
          CACFDictionary::GetCACFArray((const __CFDictionary **)(*(_QWORD *)&buf[8] + 40), CFSTR("subdevices"), (CACFArray *)&theArray);
          if (theArray)
          {
            Count = CFArrayGetCount(theArray);
            if (Count)
            {
              for (i = 0; i != Count; ++i)
              {
                v124 = 0;
                v125 = 1;
                CACFArray::GetCACFDictionary(&theArray, i, (CACFDictionary *)&v124);
                if (v124)
                {
                  value = 0;
                  LOBYTE(v123) = 1;
                  CACFDictionary::GetCACFString((const __CFDictionary **)&v124, CFSTR("uid"), (CFTypeRef *)&value);
                  if (value && Mutable && BYTE1(v148))
                    CFArrayAppendValue(Mutable, value);
                  CACFString::~CACFString((CACFString *)&value);
                }
                else
                {
                  value = 0;
                  v123 = 1;
                  cf = 0;
                  CFType = CACFArray::GetCFType(&theArray, i, &cf);
                  v60 = cf;
                  if (cf)
                    v61 = CFType;
                  else
                    v61 = 0;
                  if (v61 == 1)
                  {
                    v62 = CFGetTypeID(cf);
                    if (v62 == CFArrayGetTypeID())
                      CACFDictionary::operator=((uint64_t)&value, v60);
                  }
                  if (value)
                  {
                    v63 = CFArrayGetCount((CFArrayRef)value);
                    if (v63)
                    {
                      for (j = 0; j != v63; ++j)
                      {
                        CACFArray::GetCACFDictionary((CFArrayRef *)&value, j, (CACFDictionary *)&v124);
                        if (v124)
                        {
                          cf = 0;
                          v121 = 1;
                          CACFDictionary::GetCACFString((const __CFDictionary **)&v124, CFSTR("uid"), &cf);
                          if (cf && Mutable && BYTE1(v148))
                            CFArrayAppendValue(Mutable, cf);
                          CACFString::~CACFString((CACFString *)&cf);
                        }
                      }
                    }
                  }
                  CACFArray::~CACFArray((CACFArray *)&value);
                }
                CACFDictionary::~CACFDictionary((CACFDictionary *)&v124);
              }
            }
          }
          CACFArray::~CACFArray((CACFArray *)&theArray);
        }
        if (Mutable)
        {
          CFRetain(Mutable);
          goto LABEL_163;
        }
LABEL_185:
        v65 = 0;
        goto LABEL_186;
      }
      if (mSelector != 1751412337)
        goto LABEL_89;
    }
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2042;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyIsHidden", buf, 0x12u);
      }
      v86 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v86 = &off_1E69A1B30;
      v86[2] = 561211770;
    }
    *a6 = HALS_MetaDeviceDescription::IsHidden((const __CFDictionary **)this + 165);
    goto LABEL_178;
  }
  if (mSelector <= 1935763059)
  {
    if (mSelector > 1870098019)
    {
      if (mSelector != 1870098020)
      {
        if (mSelector != 1919512167)
          goto LABEL_89;
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1993;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyZeroTimeStampPeriod", buf, 0x12u);
          }
          v33 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v33 = &off_1E69A1B30;
          v33[2] = 561211770;
        }
        goto LABEL_178;
      }
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2000000000;
      LODWORD(v154) = 0;
      v144[0] = MEMORY[0x1E0C809B0];
      v144[1] = 0x40000000;
      v144[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
      v144[3] = &unk_1E6979E70;
      v144[5] = this;
      v144[4] = buf;
      v145 = a4 >> 2;
      v146 = a7 >> 2;
      v144[6] = a8;
      v144[7] = a6;
      v48 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v48, (uint64_t)v144);
LABEL_105:
      v47 = 4 * *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
      goto LABEL_106;
    }
    if (mSelector != 1853059619)
    {
      if (mSelector != 1853059700)
        goto LABEL_89;
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2024;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyNominalSampleRate", buf, 0x12u);
        }
        v88 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v88 = &off_1E69A1B30;
        v88[2] = 561211770;
      }
      v129[0] = MEMORY[0x1E0C809B0];
      v129[1] = 0x40000000;
      v129[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_59;
      v129[3] = &__block_descriptor_tmp_60_4163;
      v129[4] = this;
      v129[5] = a6;
      v25 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v129);
      goto LABEL_168;
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    LODWORD(v154) = a4 >> 4;
    v127[0] = MEMORY[0x1E0C809B0];
    v127[1] = 0x40000000;
    v127[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
    v127[3] = &unk_1E6979F78;
    v128 = (int)a4;
    v127[5] = this;
    v127[4] = buf;
    v127[6] = a6;
    v46 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v46, (uint64_t)v127);
    v47 = 16 * *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
LABEL_106:
    *a5 = v47;
LABEL_107:
    _Block_object_dispose(buf, 8);
    return;
  }
  if (mSelector <= 1936876643)
  {
    if (mSelector == 1935763060)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2002;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertySafetyOffset", buf, 0x12u);
        }
        v96 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v96 = &off_1E69A1B30;
        v96[2] = 561211770;
      }
      v130[0] = MEMORY[0x1E0C809B0];
      v130[1] = 0x40000000;
      v130[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_57;
      v130[3] = &__block_descriptor_tmp_58_4160;
      v130[4] = this;
      v130[5] = a6;
      v131 = mScope == 1768845428;
      v51 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v51, (uint64_t)v130);
    }
    else
    {
      if (mSelector != 1936092276)
        goto LABEL_89;
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1975;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceCanBeDefaultSystemDevice", buf, 0x12u);
        }
        v90 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v90 = &off_1E69A1B30;
        v90[2] = 561211770;
      }
      v134[0] = MEMORY[0x1E0C809B0];
      v134[1] = 0x40000000;
      v134[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_53;
      v134[3] = &__block_descriptor_tmp_54_4155;
      v134[4] = this;
      v134[5] = a6;
      v135 = mScope == 1768845428;
      v134[6] = a9;
      v34 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v34, (uint64_t)v134);
    }
    goto LABEL_178;
  }
  if (mSelector != 1936876644)
  {
    if (mSelector != 1952542755)
    {
      if (mSelector != 1953653102)
        goto LABEL_89;
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1937;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyTransportType", buf, 0x12u);
        }
        v87 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v87 = &off_1E69A1B30;
        v87[2] = 561211770;
      }
      v23 = 1735554416;
      goto LABEL_79;
    }
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2189;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioAggregateDevicePropertyFullSubDeviceList", buf, 0x12u);
      }
      v97 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v97 = &off_1E69A1B30;
      v97[2] = 561211770;
    }
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
    LOWORD(v148) = 257;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3802000000;
    *(_QWORD *)&v154 = __Block_byref_object_copy__62;
    *((_QWORD *)&v154 + 1) = __Block_byref_object_dispose__63;
    v155 = 0;
    LOWORD(v156) = 1;
    v112[0] = MEMORY[0x1E0C809B0];
    v112[1] = 0x40000000;
    v112[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_78;
    v112[3] = &unk_1E697A078;
    v112[4] = buf;
    v112[5] = this;
    v52 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v52, (uint64_t)v112);
    if (*(_QWORD *)(*(_QWORD *)&buf[8] + 40))
    {
      theArray = 0;
      LOWORD(v141) = 1;
      CACFDictionary::GetCACFArray((const __CFDictionary **)(*(_QWORD *)&buf[8] + 40), CFSTR("taps"), (CACFArray *)&theArray);
      if (theArray)
      {
        v53 = CFArrayGetCount(theArray);
        if (v53)
        {
          for (k = 0; k != v53; ++k)
          {
            v124 = 0;
            v125 = 1;
            CACFArray::GetCACFDictionary(&theArray, k, (CACFDictionary *)&v124);
            if (v124)
            {
              value = 0;
              LOBYTE(v123) = 1;
              CACFDictionary::GetCACFString((const __CFDictionary **)&v124, CFSTR("uid"), (CFTypeRef *)&value);
              if (value && Mutable && BYTE1(v148))
                CFArrayAppendValue(Mutable, value);
              CACFString::~CACFString((CACFString *)&value);
            }
            CACFDictionary::~CACFDictionary((CACFDictionary *)&v124);
          }
        }
      }
      CACFArray::~CACFArray((CACFArray *)&theArray);
    }
    if (Mutable)
    {
      CFRetain(Mutable);
LABEL_163:
      v65 = Mutable;
LABEL_186:
      *(_QWORD *)a6 = v65;
      *a5 = 8;
      _Block_object_dispose(buf, 8);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v155);
      CACFArray::~CACFArray((CACFArray *)&Mutable);
      return;
    }
    goto LABEL_185;
  }
  TotalNumberChannelsForClient = HALS_Device::GetTotalNumberChannelsForClient(this, mScope == 1768845428, a9);
  v74 = caulk::numeric::exceptional_mul<unsigned int>(TotalNumberChannelsForClient);
  v75 = caulk::numeric::exceptional_add<unsigned int>(v74);
  if (v75 > a4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_MetaDevice.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2012;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDefaultChannelLayout", buf, 0x12u);
    }
    v106 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v106 = &off_1E69A1B30;
    v106[2] = 561211770;
  }
  v76 = v75;
  v77 = (*(uint64_t (**)(HALS_MetaDevice *, BOOL, HALS_Client *))(*(_QWORD *)this + 600))(this, mScope == 1768845428, a9);
  *(_QWORD *)a6 = 0;
  a6[2] = v77;
  if (v77)
  {
    v78 = v77;
    v79 = a6 + 4;
    do
    {
      *((_DWORD *)v79 - 1) = -1;
      *v79 = 0;
      v79[1] = 0;
      v79 = (_QWORD *)((char *)v79 + 20);
      --v78;
    }
    while (v78);
  }
  *a5 = v76;
}

void sub_1B59B127C(_Unwind_Exception *a1)
{
  CACFDictionary *v1;
  uint64_t v2;

  CACFArray::~CACFArray((CACFArray *)&STACK[0x418]);
  _Block_object_dispose((const void *)(v2 - 192), 8);
  CACFDictionary::~CACFDictionary(v1);
  CACFArray::~CACFArray((CACFArray *)(v2 - 240));
  _Unwind_Resume(a1);
}

void HALS_MetaDevice::SetPropertyData(HALS_MetaDevice *this, const AudioObjectPropertyAddress *a2, AudioObjectPropertyAddress *a3, unsigned int a4, _DWORD *a5, int a6, int *a7, HALS_Client *a8)
{
  const AudioObjectPropertyAddress *v16;
  signed int mSelector;
  AMCP::Log::Scope_Registry *IsHogModeOwnerOrFree;
  uint64_t *v19;
  uint64_t v20;
  HALB_Mutex *v21;
  HALS_Object *v22;
  HALS_NotificationManager *v23;
  uint64_t v24;
  HALB_Mutex *v25;
  const AudioObjectPropertyAddress *v26;
  const AudioObjectPropertyAddress *v27;
  HALB_Mutex *v28;
  HALS_DeviceState *v29;
  CAPropertyAddressListVector *v30;
  const AudioObjectPropertyAddress *v31;
  const AudioObjectPropertyAddress *v32;
  HALB_Mutex *v33;
  const AudioObjectPropertyAddress *v34;
  const AudioObjectPropertyAddress *v35;
  AudioObjectPropertyScope v36;
  BOOL v37;
  AMCP::Log::Scope_Registry *NumberStreamsExcludingReferenceStreams;
  int v39;
  std::string::size_type v40;
  HALB_Mutex *v41;
  const AudioObjectPropertyAddress *v42;
  const AudioObjectPropertyAddress *v43;
  const AudioObjectPropertyAddress *v44;
  const AudioObjectPropertyAddress *v45;
  void *v46;
  const AudioObjectPropertyAddress *v47;
  const AudioObjectPropertyAddress *v48;
  const AudioObjectPropertyAddress *v49;
  const AudioObjectPropertyAddress *v50;
  HALB_Mutex *v51;
  unsigned int *v52;
  unsigned int *v53;
  const AudioObjectPropertyAddress *v54;
  uint64_t v55;
  CAPropertyAddressListVector *v56;
  const AudioObjectPropertyAddress *v57;
  const AudioObjectPropertyAddress *v58;
  _QWORD *v59;
  HALB_Mutex *v60;
  _DWORD *v61;
  int v62;
  HALB_Mutex *v63;
  const void *v64;
  AudioObjectPropertyScope mScope;
  BOOL v66;
  int v67;
  HALB_Mutex *v68;
  _BOOL4 v69;
  HALS_DeviceState *v70;
  CAPropertyAddressListVector *v71;
  const AudioObjectPropertyAddress *v72;
  const AudioObjectPropertyAddress *v73;
  _opaque_pthread_t *v74;
  _opaque_pthread_t *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  std::ios_base *v82;
  uint64_t v83;
  AMCP::Log::Scope_Registry *v84;
  std::__shared_weak_count *size;
  NSObject *v86;
  unint64_t *v87;
  unint64_t v88;
  const std::locale::facet *v89;
  unsigned __int8 v90;
  AMCP::Log::Scope_Registry *v91;
  uint64_t v92;
  _QWORD *v93;
  _BYTE *v94;
  int v95;
  std::__shared_weak_count *v96;
  NSObject *v97;
  unint64_t *v98;
  unint64_t v99;
  _opaque_pthread_t *v100;
  mach_port_t v101;
  _BYTE *v102;
  HALB_Mutex *v103;
  HALS_DeviceState *v104;
  CAPropertyAddressListVector *v105;
  const AudioObjectPropertyAddress *v106;
  const AudioObjectPropertyAddress *v107;
  const AudioObjectPropertyAddress *v108;
  const AudioObjectPropertyAddress *v109;
  const AudioObjectPropertyAddress *v110;
  HALB_Mutex *v111;
  HALS_DeviceState *v112;
  CAPropertyAddressListVector *v113;
  const AudioObjectPropertyAddress *v114;
  const AudioObjectPropertyAddress *v115;
  int v116;
  uint64_t v117;
  HALB_Mutex *v118;
  HALS_DeviceState *v119;
  CAPropertyAddressListVector *v120;
  const AudioObjectPropertyAddress *v121;
  const AudioObjectPropertyAddress *v122;
  const AudioObjectPropertyAddress *v123;
  const AudioObjectPropertyAddress *v124;
  const AudioObjectPropertyAddress *v125;
  const AudioObjectPropertyAddress *v126;
  AudioObjectPropertyElement mElement;
  int v128;
  AudioObjectPropertyAddress *v129;
  CAPropertyAddressList *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  CAPropertyAddressList *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  HALS_Object *v140;
  HALS_ObjectMap *v141;
  uint64_t v142;
  uint64_t v144;
  HALS_NotificationManager *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *p_shared_owners;
  unint64_t v152;
  _opaque_pthread_t *v153;
  mach_port_t v154;
  NSObject *v155;
  _opaque_pthread_t *v156;
  mach_port_t v157;
  NSObject *v158;
  _opaque_pthread_t *v160;
  mach_port_t v161;
  void *v162;
  NSObject *v163;
  _opaque_pthread_t *v165;
  mach_port_t v166;
  void *v167;
  NSObject *v168;
  _opaque_pthread_t *v169;
  mach_port_t v170;
  void *v171;
  NSObject *v172;
  _opaque_pthread_t *v173;
  mach_port_t v174;
  void *v175;
  NSObject *v176;
  _opaque_pthread_t *v177;
  mach_port_t v178;
  void *v179;
  NSObject *v180;
  _opaque_pthread_t *v181;
  mach_port_t v182;
  void *v183;
  NSObject *v184;
  _opaque_pthread_t *v185;
  mach_port_t v186;
  void *v187;
  NSObject *v188;
  _opaque_pthread_t *v189;
  mach_port_t v190;
  void *v191;
  NSObject *v192;
  _opaque_pthread_t *v193;
  mach_port_t v194;
  void *v195;
  NSObject *v196;
  _opaque_pthread_t *v197;
  mach_port_t v198;
  void *v199;
  _DWORD *exception;
  int v201;
  NSObject *v202;
  const char *v203;
  _DWORD *v204;
  int v205;
  _DWORD *v206;
  _DWORD *v207;
  int v208;
  _DWORD *v209;
  int v210;
  _DWORD *v211;
  int v212;
  _DWORD *v213;
  int v214;
  _DWORD *v215;
  int v216;
  _DWORD *v217;
  int v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  _QWORD v221[8];
  _QWORD v222[7];
  int v223;
  BOOL v224;
  _QWORD v225[7];
  int v226;
  BOOL v227;
  uint64_t v228;
  __int128 v229;
  uint64_t v230;
  _BYTE v231[31];
  char v232;
  _QWORD v233[7];
  _QWORD v234[8];
  _QWORD v235[8];
  _QWORD v236[8];
  _QWORD v237[8];
  _QWORD v238[8];
  _QWORD v239[7];
  CAPropertyAddressList *v240;
  CAPropertyAddressList *v241;
  uint64_t v242;
  __int128 v243;
  __int128 v244;
  __int16 v245;
  __int128 v246;
  __int128 v247;
  _BYTE v248[32];
  AudioObjectPropertyAddress buf[2];
  __int128 v250;
  void *__p;
  AudioObjectPropertyAddress *v252;
  _DWORD *v253;
  int *v254;
  HALS_Client *v255;
  unsigned int v256;
  int v257;
  std::string v258;
  uint64_t v259;
  int v260;
  uint64_t v261[20];
  std::string v262;
  __int128 v263;
  HALS_MetaDevice *v264;
  HALS_Client *v265;
  char v266;
  uint64_t v267;

  v267 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_MetaDevice *, const AudioObjectPropertyAddress *, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v201 = 2003332927;
    goto LABEL_220;
  }
  mSelector = a3->mSelector;
  IsHogModeOwnerOrFree = (AMCP::Log::Scope_Registry *)HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, v16);
  if ((_DWORD)IsHogModeOwnerOrFree)
  {
    IsHogModeOwnerOrFree = (AMCP::Log::Scope_Registry *)HALS_Device::IsHogModeOwnerOrFree(this, a8);
    if ((IsHogModeOwnerOrFree & 1) != 0)
    {
      mSelector = a3->mSelector;
      goto LABEL_5;
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v201 = 560492391;
LABEL_220:
    exception[2] = v201;
  }
LABEL_5:
  v245 = 0;
  v243 = 0u;
  v244 = 0u;
  v241 = 0;
  v240 = 0;
  v242 = 0;
  if (mSelector > 1735554415)
  {
    if (mSelector <= 1853059699)
    {
      if (mSelector == 1735554416)
      {
        if (a4 > 7)
        {
          HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)buf);
          HALS_DeviceState::Capture((HALS_DeviceState *)buf, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
          v228 = 0;
          *(_QWORD *)&v229 = &v228;
          *((_QWORD *)&v229 + 1) = 0x2000000000;
          LODWORD(v230) = 0;
          v237[0] = MEMORY[0x1E0C809B0];
          v237[1] = 0x40000000;
          v237[2] = ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_93;
          v237[3] = &unk_1E697A198;
          v237[6] = a5;
          v237[7] = &v245;
          v237[5] = this;
          v237[4] = &v228;
          v103 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v103, (uint64_t)v237);
          if (*(_DWORD *)(v229 + 24))
          {
            v213 = __cxa_allocate_exception(0x10uLL);
            v214 = *(_DWORD *)(v229 + 24);
            *(_QWORD *)v213 = &off_1E69A1B30;
            v213[2] = v214;
          }
          HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)&v262);
          HALS_DeviceState::Capture(v104, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
          HALS_DeviceState::Compare((HALS_DeviceState *)buf, (const HALS_DeviceState *)&v262, (const AudioObjectPropertyAddress *)&v243, &v240, v105);
          strcpy(v248, "tsmabolg");
          v248[9] = 0;
          *(_WORD *)&v248[10] = 0;
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)v248, v106);
          strcpy(v248, "dcpabolg");
          v248[9] = 0;
          *(_WORD *)&v248[10] = 0;
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)v248, v107);
          strcpy(v248, "purgbolg");
          v248[9] = 0;
          *(_WORD *)&v248[10] = 0;
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)v248, v108);
          strcpy(v248, "prgabolg");
          v248[9] = 0;
          *(_WORD *)&v248[10] = 0;
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)v248, v109);
          strcpy(v248, "mocabolg");
          v248[9] = 0;
          *(_WORD *)&v248[10] = 0;
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)v248, v110);
          goto LABEL_128;
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          buf[0].mSelector = 136315394;
          *(_QWORD *)&buf[0].mScope = "HALS_MetaDevice.cpp";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 2362;
          v202 = MEMORY[0x1E0C81028];
          v203 = "%25s:%-5d  HALS_MetaDevice::SetPropertyData: bad property data size for kAudioAggregateDevicePropertyFullSubDeviceList";
          goto LABEL_238;
        }
        goto LABEL_239;
      }
      if (mSelector != 1819173229 && mSelector != 1851878764)
        goto LABEL_61;
      if (a4 <= 7)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_239;
        buf[0].mSelector = 136315394;
        *(_QWORD *)&buf[0].mScope = "HALS_MetaDevice.cpp";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 2325;
        v202 = MEMORY[0x1E0C81028];
        v203 = "%25s:%-5d  HALS_MetaDevice::SetPropertyData: bad property data size for kAudioObjectPropertyName";
        goto LABEL_238;
      }
      *(_QWORD *)&buf[0].mSelector = 0;
      *(_QWORD *)&buf[0].mElement = buf;
      *(_QWORD *)&buf[1].mScope = 0x2000000000;
      LODWORD(v250) = 0;
      v239[0] = MEMORY[0x1E0C809B0];
      v239[1] = 0x40000000;
      v239[2] = ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
      v239[3] = &unk_1E697A148;
      v239[6] = a5;
      v239[5] = this;
      v239[4] = buf;
      v33 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v33, (uint64_t)v239);
      if (*(_DWORD *)(*(_QWORD *)&buf[0].mElement + 24))
      {
        v204 = __cxa_allocate_exception(0x10uLL);
        v205 = *(_DWORD *)(*(_QWORD *)&buf[0].mElement + 24);
        *(_QWORD *)v204 = &off_1E69A1B30;
        v204[2] = v205;
      }
      v262.__r_.__value_.__r.__words[0] = 0x676C6F626C6E616DLL;
      LODWORD(v262.__r_.__value_.__r.__words[1]) = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)&v262, v34);
    }
    else
    {
      if (mSelector > 1983996970)
      {
        if (mSelector == 1983996971)
        {
          mScope = a3->mScope;
          v66 = mScope == 1768845428;
          if (mScope != 1768845428)
          {
            AMCP::Log::Scope_Registry::get(IsHogModeOwnerOrFree);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v163 = **(NSObject ***)&buf[0].mSelector;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
            if (os_log_type_enabled(v163, OS_LOG_TYPE_ERROR))
            {
              v165 = pthread_self();
              v166 = pthread_mach_thread_np(v165);
              buf[0].mSelector = 67109890;
              buf[0].mScope = v166;
              LOWORD(buf[0].mElement) = 2080;
              *(_QWORD *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice.cpp";
              HIWORD(buf[1].mScope) = 1024;
              buf[1].mElement = 2618;
              LOWORD(v250) = 2080;
              *(_QWORD *)((char *)&v250 + 2) = "isInput == false";
              _os_log_error_impl(&dword_1B57BA000, v163, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_MetaDevice::SetPropertyData: only valid for input scope kAudioDevicePropertyVoiceActivityDetectionEnable", (uint8_t *)buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v232);
            v167 = __cxa_allocate_exception(0x40uLL);
            *(_QWORD *)&v246 = &off_1E69A1B30;
            DWORD2(v246) = 1852797029;
            LODWORD(v262.__r_.__value_.__r.__words[1]) = 1852797029;
            v264 = 0;
            LODWORD(v265) = -1;
            v262.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E699E510;
            v262.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E699E538;
            v263 = 0uLL;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&v262);
            *((_QWORD *)&v250 + 1) = "virtual void HALS_MetaDevice::SetPropertyData(AudioObjectID, const AudioObjectPrope"
                                     "rtyAddress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
            __p = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Meta/HALS_MetaDevice.cpp";
            LODWORD(v252) = 2618;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v248);
            v229 = *(_OWORD *)v248;
            v228 = (uint64_t)off_1E69A20A0;
            v230 = *(_QWORD *)&v248[16];
            memset(v248, 0, 24);
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v228);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v167, (uint64_t)buf);
          }
          atomic_load((unsigned __int8 *)this + 1432);
          if (!a5)
          {
            AMCP::Log::Scope_Registry::get(IsHogModeOwnerOrFree);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v168 = **(NSObject ***)&buf[0].mSelector;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
            if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
            {
              v169 = pthread_self();
              v170 = pthread_mach_thread_np(v169);
              buf[0].mSelector = 67109890;
              buf[0].mScope = v170;
              LOWORD(buf[0].mElement) = 2080;
              *(_QWORD *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice.cpp";
              HIWORD(buf[1].mScope) = 1024;
              buf[1].mElement = 2620;
              LOWORD(v250) = 2080;
              *(_QWORD *)((char *)&v250 + 2) = "inData == nullptr";
              _os_log_error_impl(&dword_1B57BA000, v168, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_MetaDevice::SetPropertyData: inData is nullptr for kAudioDevicePropertyVoiceActivityDetectionEnable", (uint8_t *)buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v232);
            v171 = __cxa_allocate_exception(0x40uLL);
            *(_QWORD *)&v246 = &off_1E69A1B30;
            DWORD2(v246) = 1852797029;
            LODWORD(v262.__r_.__value_.__r.__words[1]) = 1852797029;
            v264 = 0;
            LODWORD(v265) = -1;
            v262.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E699E510;
            v262.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E699E538;
            v263 = 0uLL;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&v262);
            *((_QWORD *)&v250 + 1) = "virtual void HALS_MetaDevice::SetPropertyData(AudioObjectID, const AudioObjectPrope"
                                     "rtyAddress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
            __p = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Meta/HALS_MetaDevice.cpp";
            LODWORD(v252) = 2620;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v248);
            v229 = *(_OWORD *)v248;
            v228 = (uint64_t)off_1E69A20A0;
            v230 = *(_QWORD *)&v248[16];
            memset(v248, 0, 24);
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v228);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v171, (uint64_t)buf);
          }
          if (a4 != 4)
          {
            AMCP::Log::Scope_Registry::get(IsHogModeOwnerOrFree);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v176 = **(NSObject ***)&buf[0].mSelector;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
            if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
            {
              v177 = pthread_self();
              v178 = pthread_mach_thread_np(v177);
              buf[0].mSelector = 67109890;
              buf[0].mScope = v178;
              LOWORD(buf[0].mElement) = 2080;
              *(_QWORD *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice.cpp";
              HIWORD(buf[1].mScope) = 1024;
              buf[1].mElement = 2621;
              LOWORD(v250) = 2080;
              *(_QWORD *)((char *)&v250 + 2) = "inDataSize != sizeof(UInt32)";
              _os_log_error_impl(&dword_1B57BA000, v176, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_MetaDevice::SetPropertyData: inDataSize is not UInt32 for kAudioDevicePropertyVoiceActivityDetectionEnable", (uint8_t *)buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v232);
            v179 = __cxa_allocate_exception(0x40uLL);
            *(_QWORD *)&v246 = &off_1E69A1B30;
            DWORD2(v246) = 1852797029;
            LODWORD(v262.__r_.__value_.__r.__words[1]) = 1852797029;
            v264 = 0;
            LODWORD(v265) = -1;
            v262.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E699E510;
            v262.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E699E538;
            v263 = 0uLL;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&v262);
            *((_QWORD *)&v250 + 1) = "virtual void HALS_MetaDevice::SetPropertyData(AudioObjectID, const AudioObjectPrope"
                                     "rtyAddress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
            __p = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Meta/HALS_MetaDevice.cpp";
            LODWORD(v252) = 2621;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v248);
            v229 = *(_OWORD *)v248;
            v228 = (uint64_t)off_1E69A20A0;
            v230 = *(_QWORD *)&v248[16];
            memset(v248, 0, 24);
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v228);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v179, (uint64_t)buf);
          }
          if (!a8)
          {
            AMCP::Log::Scope_Registry::get(IsHogModeOwnerOrFree);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v184 = **(NSObject ***)&buf[0].mSelector;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
            if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
            {
              v185 = pthread_self();
              v186 = pthread_mach_thread_np(v185);
              buf[0].mSelector = 67109890;
              buf[0].mScope = v186;
              LOWORD(buf[0].mElement) = 2080;
              *(_QWORD *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice.cpp";
              HIWORD(buf[1].mScope) = 1024;
              buf[1].mElement = 2622;
              LOWORD(v250) = 2080;
              *(_QWORD *)((char *)&v250 + 2) = "inClient == nullptr";
              _os_log_error_impl(&dword_1B57BA000, v184, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_MetaDevice::SetPropertyData: inClient is null for kAudioDevicePropertyVoiceActivityDetectionEnable", (uint8_t *)buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v232);
            v187 = __cxa_allocate_exception(0x40uLL);
            *(_QWORD *)&v246 = &off_1E69A1B30;
            DWORD2(v246) = 1852797029;
            LODWORD(v262.__r_.__value_.__r.__words[1]) = 1852797029;
            v264 = 0;
            LODWORD(v265) = -1;
            v262.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E699E510;
            v262.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E699E538;
            v263 = 0uLL;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&v262);
            *((_QWORD *)&v250 + 1) = "virtual void HALS_MetaDevice::SetPropertyData(AudioObjectID, const AudioObjectPrope"
                                     "rtyAddress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
            __p = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Meta/HALS_MetaDevice.cpp";
            LODWORD(v252) = 2622;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v248);
            v229 = *(_OWORD *)v248;
            v228 = (uint64_t)off_1E69A20A0;
            v230 = *(_QWORD *)&v248[16];
            memset(v248, 0, 24);
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v228);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v187, (uint64_t)buf);
          }
          v67 = *a5;
          HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)buf);
          HALS_DeviceState::Capture((HALS_DeviceState *)buf, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
          v222[0] = MEMORY[0x1E0C809B0];
          v222[1] = 0x40000000;
          v222[2] = ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_113;
          v222[3] = &__block_descriptor_tmp_114;
          v223 = v67;
          v224 = v66;
          v222[4] = this;
          v222[5] = a8;
          v222[6] = &v245;
          v68 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v68, (uint64_t)v222);
          v69 = (_BYTE)v245 != 0;
          if ((_BYTE)v245)
          {
            HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)&v262);
            HALS_DeviceState::Capture(v70, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
            HALS_DeviceState::Compare((HALS_DeviceState *)buf, (const HALS_DeviceState *)&v262, (const AudioObjectPropertyAddress *)&v243, &v240, v71);
            v228 = 0x676C6F6261677270;
            LODWORD(v229) = 0;
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)&v228, v72);
            v228 = 0x676C6F6261636F6DLL;
            LODWORD(v229) = 0;
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)&v228, v73);
            v228 = (uint64_t)&v263 + 8;
            std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
            std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy((_QWORD *)v262.__r_.__value_.__r.__words[2]);
          }
          v262.__r_.__value_.__r.__words[0] = (std::string::size_type)&v250 + 8;
          std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v262);
          std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(_QWORD **)&buf[1].mScope);
          goto LABEL_135;
        }
        if (mSelector != 1986622324)
          goto LABEL_61;
        v36 = a3->mScope;
        v37 = v36 == 1768845428;
        if (v36 != 1768845428)
        {
          AMCP::Log::Scope_Registry::get(IsHogModeOwnerOrFree);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v158 = **(NSObject ***)&buf[0].mSelector;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
          {
            v160 = pthread_self();
            v161 = pthread_mach_thread_np(v160);
            buf[0].mSelector = 67109890;
            buf[0].mScope = v161;
            LOWORD(buf[0].mElement) = 2080;
            *(_QWORD *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice.cpp";
            HIWORD(buf[1].mScope) = 1024;
            buf[1].mElement = 2560;
            LOWORD(v250) = 2080;
            *(_QWORD *)((char *)&v250 + 2) = "isInput == false";
            _os_log_error_impl(&dword_1B57BA000, v158, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_MetaDevice::SetPropertyData: only valid for input scope kAudioDevicePropertyVocalIsolationType", (uint8_t *)buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v232);
          v162 = __cxa_allocate_exception(0x40uLL);
          *(_QWORD *)&v246 = &off_1E69A1B30;
          DWORD2(v246) = 1852797029;
          LODWORD(v262.__r_.__value_.__r.__words[1]) = 1852797029;
          v264 = 0;
          LODWORD(v265) = -1;
          v262.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E699E510;
          v262.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E699E538;
          v263 = 0uLL;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&v262);
          *((_QWORD *)&v250 + 1) = "virtual void HALS_MetaDevice::SetPropertyData(AudioObjectID, const AudioObjectPropert"
                                   "yAddress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          __p = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Meta/HALS_MetaDevice.cpp";
          LODWORD(v252) = 2560;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v248);
          v229 = *(_OWORD *)v248;
          v228 = (uint64_t)off_1E69A20A0;
          v230 = *(_QWORD *)&v248[16];
          memset(v248, 0, 24);
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v228);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v162, (uint64_t)buf);
        }
        NumberStreamsExcludingReferenceStreams = (AMCP::Log::Scope_Registry *)HALS_Device::GetNumberStreamsExcludingReferenceStreams(this, 1);
        if (!(_DWORD)NumberStreamsExcludingReferenceStreams)
        {
          AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v172 = **(NSObject ***)&buf[0].mSelector;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
          {
            v173 = pthread_self();
            v174 = pthread_mach_thread_np(v173);
            buf[0].mSelector = 67109890;
            buf[0].mScope = v174;
            LOWORD(buf[0].mElement) = 2080;
            *(_QWORD *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice.cpp";
            HIWORD(buf[1].mScope) = 1024;
            buf[1].mElement = 2562;
            LOWORD(v250) = 2080;
            *(_QWORD *)((char *)&v250 + 2) = "hasNonTapInputStream == false";
            _os_log_error_impl(&dword_1B57BA000, v172, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_MetaDevice::SetPropertyData: Device does not have non-tap input streams for  kAudioDevicePropertyVocalIsolationType", (uint8_t *)buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v232);
          v175 = __cxa_allocate_exception(0x40uLL);
          *(_QWORD *)&v246 = &off_1E69A1B30;
          DWORD2(v246) = 1852797029;
          LODWORD(v262.__r_.__value_.__r.__words[1]) = 1852797029;
          v264 = 0;
          LODWORD(v265) = -1;
          v262.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E699E510;
          v262.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E699E538;
          v263 = 0uLL;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&v262);
          *((_QWORD *)&v250 + 1) = "virtual void HALS_MetaDevice::SetPropertyData(AudioObjectID, const AudioObjectPropert"
                                   "yAddress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          __p = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Meta/HALS_MetaDevice.cpp";
          LODWORD(v252) = 2562;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v248);
          v229 = *(_OWORD *)v248;
          v228 = (uint64_t)off_1E69A20A0;
          v230 = *(_QWORD *)&v248[16];
          memset(v248, 0, 24);
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v228);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v175, (uint64_t)buf);
        }
        atomic_load((unsigned __int8 *)this + 1432);
        if (!a5)
        {
          AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v180 = **(NSObject ***)&buf[0].mSelector;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v180, OS_LOG_TYPE_ERROR))
          {
            v181 = pthread_self();
            v182 = pthread_mach_thread_np(v181);
            buf[0].mSelector = 67109890;
            buf[0].mScope = v182;
            LOWORD(buf[0].mElement) = 2080;
            *(_QWORD *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice.cpp";
            HIWORD(buf[1].mScope) = 1024;
            buf[1].mElement = 2564;
            LOWORD(v250) = 2080;
            *(_QWORD *)((char *)&v250 + 2) = "inData == nullptr";
            _os_log_error_impl(&dword_1B57BA000, v180, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_MetaDevice::SetPropertyData: inData is nullptr for kAudioDevicePropertyVocalIsolationType", (uint8_t *)buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v232);
          v183 = __cxa_allocate_exception(0x40uLL);
          *(_QWORD *)&v246 = &off_1E69A1B30;
          DWORD2(v246) = 1852797029;
          LODWORD(v262.__r_.__value_.__r.__words[1]) = 1852797029;
          v264 = 0;
          LODWORD(v265) = -1;
          v262.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E699E510;
          v262.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E699E538;
          v263 = 0uLL;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&v262);
          *((_QWORD *)&v250 + 1) = "virtual void HALS_MetaDevice::SetPropertyData(AudioObjectID, const AudioObjectPropert"
                                   "yAddress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          __p = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Meta/HALS_MetaDevice.cpp";
          LODWORD(v252) = 2564;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v248);
          v229 = *(_OWORD *)v248;
          v228 = (uint64_t)off_1E69A20A0;
          v230 = *(_QWORD *)&v248[16];
          memset(v248, 0, 24);
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v228);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v183, (uint64_t)buf);
        }
        if (a4 != 4)
        {
          AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v188 = **(NSObject ***)&buf[0].mSelector;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
          {
            v189 = pthread_self();
            v190 = pthread_mach_thread_np(v189);
            buf[0].mSelector = 67109890;
            buf[0].mScope = v190;
            LOWORD(buf[0].mElement) = 2080;
            *(_QWORD *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice.cpp";
            HIWORD(buf[1].mScope) = 1024;
            buf[1].mElement = 2565;
            LOWORD(v250) = 2080;
            *(_QWORD *)((char *)&v250 + 2) = "inDataSize != sizeof(UInt32)";
            _os_log_error_impl(&dword_1B57BA000, v188, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_MetaDevice::SetPropertyData: inDataSize is not UInt32 for kAudioDevicePropertyVocalIsolationType", (uint8_t *)buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v232);
          v191 = __cxa_allocate_exception(0x40uLL);
          *(_QWORD *)&v246 = &off_1E69A1B30;
          DWORD2(v246) = 1852797029;
          LODWORD(v262.__r_.__value_.__r.__words[1]) = 1852797029;
          v264 = 0;
          LODWORD(v265) = -1;
          v262.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E699E510;
          v262.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E699E538;
          v263 = 0uLL;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&v262);
          *((_QWORD *)&v250 + 1) = "virtual void HALS_MetaDevice::SetPropertyData(AudioObjectID, const AudioObjectPropert"
                                   "yAddress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          __p = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Meta/HALS_MetaDevice.cpp";
          LODWORD(v252) = 2565;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v248);
          v229 = *(_OWORD *)v248;
          v228 = (uint64_t)off_1E69A20A0;
          v230 = *(_QWORD *)&v248[16];
          memset(v248, 0, 24);
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v228);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v191, (uint64_t)buf);
        }
        if (!a8)
        {
          AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v192 = **(NSObject ***)&buf[0].mSelector;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v192, OS_LOG_TYPE_ERROR))
          {
            v193 = pthread_self();
            v194 = pthread_mach_thread_np(v193);
            buf[0].mSelector = 67109890;
            buf[0].mScope = v194;
            LOWORD(buf[0].mElement) = 2080;
            *(_QWORD *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice.cpp";
            HIWORD(buf[1].mScope) = 1024;
            buf[1].mElement = 2566;
            LOWORD(v250) = 2080;
            *(_QWORD *)((char *)&v250 + 2) = "inClient == nullptr";
            _os_log_error_impl(&dword_1B57BA000, v192, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_MetaDevice::SetPropertyData: inClient is null for kAudioDevicePropertyVocalIsolationType", (uint8_t *)buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v232);
          v195 = __cxa_allocate_exception(0x40uLL);
          *(_QWORD *)&v246 = &off_1E69A1B30;
          DWORD2(v246) = 1852797029;
          LODWORD(v262.__r_.__value_.__r.__words[1]) = 1852797029;
          v264 = 0;
          LODWORD(v265) = -1;
          v262.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E699E510;
          v262.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E699E538;
          v263 = 0uLL;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&v262);
          *((_QWORD *)&v250 + 1) = "virtual void HALS_MetaDevice::SetPropertyData(AudioObjectID, const AudioObjectPropert"
                                   "yAddress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          __p = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Meta/HALS_MetaDevice.cpp";
          LODWORD(v252) = 2566;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v248);
          v229 = *(_OWORD *)v248;
          v228 = (uint64_t)off_1E69A20A0;
          v230 = *(_QWORD *)&v248[16];
          memset(v248, 0, 24);
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v228);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v195, (uint64_t)buf);
        }
        v39 = *a5;
        if (*a5 >= 3u)
        {
          AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v196 = **(NSObject ***)&buf[0].mSelector;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
          {
            v197 = pthread_self();
            v198 = pthread_mach_thread_np(v197);
            buf[0].mSelector = 67109890;
            buf[0].mScope = v198;
            LOWORD(buf[0].mElement) = 2080;
            *(_QWORD *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice.cpp";
            HIWORD(buf[1].mScope) = 1024;
            buf[1].mElement = 2568;
            LOWORD(v250) = 2080;
            *(_QWORD *)((char *)&v250 + 2) = "dataValue > kAudioDevicePropertyVocalIsolationTypeBasic";
            _os_log_error_impl(&dword_1B57BA000, v196, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_MetaDevice::SetPropertyData inData is an invalid value for kAudioDevicePropertyVocalIsolationType", (uint8_t *)buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v232);
          v199 = __cxa_allocate_exception(0x40uLL);
          *(_QWORD *)&v246 = &off_1E69A1B30;
          DWORD2(v246) = 1852797029;
          LODWORD(v262.__r_.__value_.__r.__words[1]) = 1852797029;
          v264 = 0;
          LODWORD(v265) = -1;
          v262.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E699E510;
          v262.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E699E538;
          v263 = 0uLL;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&v262);
          *((_QWORD *)&v250 + 1) = "virtual void HALS_MetaDevice::SetPropertyData(AudioObjectID, const AudioObjectPropert"
                                   "yAddress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          __p = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Meta/HALS_MetaDevice.cpp";
          LODWORD(v252) = 2568;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v248);
          v229 = *(_OWORD *)v248;
          v228 = (uint64_t)off_1E69A20A0;
          v230 = *(_QWORD *)&v248[16];
          memset(v248, 0, 24);
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v228);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v199, (uint64_t)buf);
        }
        HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)&v228);
        HALS_DeviceState::Capture((HALS_DeviceState *)&v228, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
        v40 = MEMORY[0x1E0C809B0];
        v225[0] = MEMORY[0x1E0C809B0];
        v225[1] = 0x40000000;
        v225[2] = ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_110;
        v225[3] = &__block_descriptor_tmp_111_4131;
        v226 = v39;
        v225[4] = this;
        v225[5] = a8;
        v227 = v37;
        v225[6] = &v245;
        v41 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v41, (uint64_t)v225);
        if (!(_BYTE)v245)
        {
          *(_QWORD *)&buf[0].mSelector = v231;
          std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*((_QWORD **)&v229 + 1));
          goto LABEL_134;
        }
        memset(v248, 0, sizeof(v248));
        strcpy((char *)buf, "#mtsbolg");
        BYTE1(buf[0].mElement) = 0;
        HIWORD(buf[0].mElement) = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v248, buf, v42);
        strcpy((char *)buf, "tmfsbolg");
        BYTE1(buf[0].mElement) = 0;
        HIWORD(buf[0].mElement) = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v248, buf, v43);
        strcpy((char *)buf, "#mfsbolg");
        BYTE1(buf[0].mElement) = 0;
        HIWORD(buf[0].mElement) = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v248, buf, v44);
        strcpy((char *)buf, "yalsbolg");
        BYTE1(buf[0].mElement) = 0;
        HIWORD(buf[0].mElement) = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v248, buf, v45);
        v46 = *(void **)v248;
        HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), *((unsigned int *)a8 + 4), -1431655765 * ((*(_QWORD *)&v248[8] - *(_QWORD *)v248) >> 2), *(const AudioObjectPropertyAddress **)v248);
        v246 = 0u;
        v247 = 0u;
        strcpy((char *)buf, "tmfsbolg");
        BYTE1(buf[0].mElement) = 0;
        HIWORD(buf[0].mElement) = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v246, buf, v47);
        strcpy((char *)buf, "amfsbolg");
        BYTE1(buf[0].mElement) = 0;
        HIWORD(buf[0].mElement) = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v246, buf, v48);
        strcpy((char *)buf, " tfpbolg");
        BYTE1(buf[0].mElement) = 0;
        HIWORD(buf[0].mElement) = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v246, buf, v49);
        strcpy((char *)buf, "atfpbolg");
        BYTE1(buf[0].mElement) = 0;
        HIWORD(buf[0].mElement) = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v246, buf, v50);
        *(_QWORD *)&buf[0].mSelector = 0;
        *(_QWORD *)&buf[0].mElement = buf;
        *(_QWORD *)&buf[1].mScope = 0x4002000000;
        *(_QWORD *)&v250 = __Block_byref_object_copy__122;
        *((_QWORD *)&v250 + 1) = __Block_byref_object_dispose__123;
        v253 = 0;
        __p = 0;
        v252 = 0;
        v262.__r_.__value_.__r.__words[0] = v40;
        v262.__r_.__value_.__l.__size_ = 0x40000000;
        v262.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN15HALS_MetaDevice25NotifyDSPChangedForClientEbP11HALS_Client_block_invoke;
        *(_QWORD *)&v263 = &unk_1E697A340;
        v266 = 1;
        v264 = this;
        v265 = a8;
        *((_QWORD *)&v263 + 1) = buf;
        v51 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v51, (uint64_t)&v262);
        v52 = *(unsigned int **)(*(_QWORD *)&buf[0].mElement + 40);
        v53 = *(unsigned int **)(*(_QWORD *)&buf[0].mElement + 48);
        if (v52 != v53)
        {
          v54 = (const AudioObjectPropertyAddress *)v246;
          v55 = -1431655765 * ((*((_QWORD *)&v246 + 1) - (_QWORD)v246) >> 2);
          do
            HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*v52++, *((unsigned int *)a8 + 4), v55, v54);
          while (v52 != v53);
        }
        _Block_object_dispose(buf, 8);
        if (__p)
        {
          v252 = (AudioObjectPropertyAddress *)__p;
          operator delete(__p);
        }
        if ((_QWORD)v246)
          operator delete((void *)v246);
        if (v46)
          operator delete(v46);
        HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)buf);
        HALS_DeviceState::Capture((HALS_DeviceState *)buf, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
        HALS_DeviceState::Compare((HALS_DeviceState *)&v228, (const HALS_DeviceState *)buf, (const AudioObjectPropertyAddress *)&v243, &v240, v56);
        v262.__r_.__value_.__r.__words[0] = 0x676C6F6261677270;
        LODWORD(v262.__r_.__value_.__r.__words[1]) = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)&v262, v57);
        v262.__r_.__value_.__r.__words[0] = 0x676C6F6261636F6DLL;
        LODWORD(v262.__r_.__value_.__r.__words[1]) = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)&v262, v58);
        v262.__r_.__value_.__r.__words[0] = (std::string::size_type)&v250 + 8;
        std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v262);
        std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(_QWORD **)&buf[1].mScope);
        *(_QWORD *)&buf[0].mSelector = v231;
        std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        v59 = (_QWORD *)*((_QWORD *)&v229 + 1);
LABEL_118:
        std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v59);
        goto LABEL_119;
      }
      if (mSelector == 1853059700)
      {
        if (a4 > 7)
        {
          *(_QWORD *)&buf[0].mSelector = 0;
          *(_QWORD *)&buf[0].mElement = buf;
          *(_QWORD *)&buf[1].mScope = 0x2000000000;
          LODWORD(v250) = 0;
          v238[0] = MEMORY[0x1E0C809B0];
          v238[1] = 0x40000000;
          v238[2] = ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_91;
          v238[3] = &unk_1E697A170;
          v238[6] = a5;
          v238[7] = a8;
          v238[5] = this;
          v238[4] = buf;
          v63 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v63, (uint64_t)v238);
          if (*(_DWORD *)(*(_QWORD *)&buf[0].mElement + 24))
          {
            v209 = __cxa_allocate_exception(0x10uLL);
            v210 = *(_DWORD *)(*(_QWORD *)&buf[0].mElement + 24);
            *(_QWORD *)v209 = &off_1E69A1B30;
            v209[2] = v210;
          }
          goto LABEL_64;
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          buf[0].mSelector = 136315394;
          *(_QWORD *)&buf[0].mScope = "HALS_MetaDevice.cpp";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 2344;
          v202 = MEMORY[0x1E0C81028];
          v203 = "%25s:%-5d  HALS_MetaDevice::SetPropertyData: bad property data size for kAudioDevicePropertyNominalSampleRate";
          goto LABEL_238;
        }
LABEL_239:
        v206 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v206 = &off_1E69A1B30;
        v206[2] = 561211770;
      }
      if (mSelector != 1952542755)
      {
LABEL_61:
        HALS_Device::SetPropertyData(this, a2, a3, a4, a5, a6, a7, a8);
LABEL_134:
        v69 = 0;
LABEL_135:
        v116 = 0;
        goto LABEL_136;
      }
      if (a4 <= 7)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_239;
        buf[0].mSelector = 136315394;
        *(_QWORD *)&buf[0].mScope = "HALS_MetaDevice.cpp";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 2665;
        v202 = MEMORY[0x1E0C81028];
        v203 = "%25s:%-5d  HALS_MetaDevice::SetPropertyData: bad property data size for kAudioAggregateDevicePropertyTapList";
        goto LABEL_238;
      }
      HALS_MetaDevice::UnregisterTaps(this);
      *(_QWORD *)&buf[0].mSelector = 0;
      *(_QWORD *)&buf[0].mElement = buf;
      *(_QWORD *)&buf[1].mScope = 0x2000000000;
      LODWORD(v250) = 0;
      v221[0] = MEMORY[0x1E0C809B0];
      v221[1] = 0x40000000;
      v221[2] = ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_115;
      v221[3] = &unk_1E697A2A0;
      v221[6] = a5;
      v221[7] = &v245;
      v221[4] = buf;
      v221[5] = this;
      v25 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v221);
      if (*(_DWORD *)(*(_QWORD *)&buf[0].mElement + 24))
      {
        v207 = __cxa_allocate_exception(0x10uLL);
        v208 = *(_DWORD *)(*(_QWORD *)&buf[0].mElement + 24);
        *(_QWORD *)v207 = &off_1E69A1B30;
        v207[2] = v208;
      }
      v262.__r_.__value_.__r.__words[0] = 0x676C6F6261746170;
      LODWORD(v262.__r_.__value_.__r.__words[1]) = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)&v262, v26);
      v262.__r_.__value_.__r.__words[0] = 0x676C6F6274617023;
      LODWORD(v262.__r_.__value_.__r.__words[1]) = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)&v262, v27);
      HALS_MetaDevice::RegisterTaps(this);
    }
    _Block_object_dispose(buf, 8);
LABEL_119:
    v116 = 0;
    v69 = 1;
    goto LABEL_136;
  }
  if (mSelector > 1685087595)
  {
    if ((mSelector - 1685278561) <= 0x11 && ((1 << (mSelector - 97)) & 0x20003) != 0)
    {
      v19 = (uint64_t *)*((_QWORD *)this + 187);
      if (v19 && (mSelector - 1685278561) <= 0x11 && ((0x20001u >> (mSelector - 97)) & 1) != 0)
      {
        if (mSelector != 1685278561 && mSelector != 1685278578)
        {
          AMCP::Log::Scope_Registry::get(IsHogModeOwnerOrFree);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v155 = **(NSObject ***)&buf[0].mSelector;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
          {
            v156 = pthread_self();
            v157 = pthread_mach_thread_np(v156);
            buf[0].mSelector = 67109890;
            buf[0].mScope = v157;
            LOWORD(buf[0].mElement) = 2080;
            *(_QWORD *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice_HostedDSP.cpp";
            HIWORD(buf[1].mScope) = 1024;
            buf[1].mElement = 134;
            LOWORD(v250) = 2080;
            *(_QWORD *)((char *)&v250 + 2) = "HandlesProperty(inAddress, inClient)";
            _os_log_error_impl(&dword_1B57BA000, v155, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s This property is not processed by HALS_MetaDevice_HostedDSP", (uint8_t *)buf, 0x22u);
          }
          abort();
        }
        v262.__r_.__value_.__r.__words[0] = 0;
        v262.__r_.__value_.__l.__size_ = (std::string::size_type)&v262;
        v262.__r_.__value_.__r.__words[2] = 0x2000000000;
        LOBYTE(v263) = 0;
        v20 = *v19;
        *(_QWORD *)&buf[0].mSelector = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[0].mElement = 0x40000000;
        *(_QWORD *)&buf[1].mScope = ___ZN25HALS_MetaDevice_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
        *(_QWORD *)&v250 = &unk_1E696B2D0;
        v252 = a3;
        v253 = a5;
        v256 = a4;
        v257 = a6;
        v254 = a7;
        v255 = a8;
        __p = v19;
        *((_QWORD *)&v250 + 1) = &v262;
        v21 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 56))(v20);
        HALB_CommandGate::ExecuteCommand(v21, (uint64_t)buf);
        if (*(_BYTE *)(v262.__r_.__value_.__l.__size_ + 24))
        {
          v22 = (HALS_Object *)*v19;
          v23 = (HALS_NotificationManager *)*(unsigned int *)(*v19 + 16);
          if (a8)
            v24 = *((unsigned int *)a8 + 4);
          else
            v24 = 0;
          mElement = a3->mElement;
          v228 = *(_QWORD *)&a3->mSelector;
          LODWORD(v229) = mElement;
          HALS_Object::PropertiesChanged(v22, v23, v24, 1, (const AudioObjectPropertyAddress *)&v228);
        }
        v64 = &v262;
        goto LABEL_133;
      }
      goto LABEL_61;
    }
    if (mSelector == 1685087596)
    {
      if (a4 > 3)
      {
        *(_QWORD *)&buf[0].mSelector = 0;
        *(_QWORD *)&buf[0].mElement = buf;
        *(_QWORD *)&buf[1].mScope = 0x2000000000;
        LODWORD(v250) = 0;
        v233[0] = MEMORY[0x1E0C809B0];
        v233[1] = 0x40000000;
        v233[2] = ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_101;
        v233[3] = &unk_1E697A238;
        v233[5] = this;
        v233[6] = a5;
        v233[4] = buf;
        v60 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v60, (uint64_t)v233);
        if (*(_DWORD *)(*(_QWORD *)&buf[0].mElement + 24))
        {
          v61 = __cxa_allocate_exception(0x10uLL);
          v62 = *(_DWORD *)(*(_QWORD *)&buf[0].mElement + 24);
          *(_QWORD *)v61 = &off_1E69A1B30;
          v61[2] = v62;
        }
LABEL_64:
        v64 = buf;
LABEL_133:
        _Block_object_dispose(v64, 8);
        goto LABEL_134;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        buf[0].mSelector = 136315394;
        *(_QWORD *)&buf[0].mScope = "HALS_MetaDevice.cpp";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 2543;
        v202 = MEMORY[0x1E0C81028];
        v203 = "%25s:%-5d  HALS_MetaDevice::SetPropertyData: bad property data size for kAudioDevicePropertyEnableListening";
LABEL_238:
        _os_log_impl(&dword_1B57BA000, v202, OS_LOG_TYPE_ERROR, v203, (uint8_t *)buf, 0x12u);
        goto LABEL_239;
      }
      goto LABEL_239;
    }
    goto LABEL_61;
  }
  if (mSelector != 1633906541)
  {
    if (mSelector == 1634562932)
    {
      if (a4 <= 7)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_239;
        buf[0].mSelector = 136315394;
        *(_QWORD *)&buf[0].mScope = "HALS_MetaDevice.cpp";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 2471;
        v202 = MEMORY[0x1E0C81028];
        v203 = "%25s:%-5d  HALS_MetaDevice::SetPropertyData: bad property data size for kAudioAggregateDevicePropertyMainSubDevice";
        goto LABEL_238;
      }
      HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)buf);
      HALS_DeviceState::Capture((HALS_DeviceState *)buf, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
      v228 = 0;
      *(_QWORD *)&v229 = &v228;
      *((_QWORD *)&v229 + 1) = 0x2000000000;
      LODWORD(v230) = 0;
      v235[0] = MEMORY[0x1E0C809B0];
      v235[1] = 0x40000000;
      v235[2] = ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_97;
      v235[3] = &unk_1E697A1E8;
      v235[6] = a5;
      v235[7] = &v245;
      v235[4] = &v228;
      v235[5] = this;
      v111 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v111, (uint64_t)v235);
      if (*(_DWORD *)(v229 + 24))
      {
        v215 = __cxa_allocate_exception(0x10uLL);
        v216 = *(_DWORD *)(v229 + 24);
        *(_QWORD *)v215 = &off_1E69A1B30;
        v215[2] = v216;
      }
      HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)&v262);
      HALS_DeviceState::Capture(v112, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
      HALS_DeviceState::Compare((HALS_DeviceState *)buf, (const HALS_DeviceState *)&v262, (const AudioObjectPropertyAddress *)&v243, &v240, v113);
      strcpy(v248, "tsmabolg");
      v248[9] = 0;
      *(_WORD *)&v248[10] = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)v248, v114);
      strcpy(v248, "mocabolg");
      v248[9] = 0;
      *(_WORD *)&v248[10] = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)v248, v115);
    }
    else
    {
      if (mSelector != 1634755428)
        goto LABEL_61;
      if (a4 <= 7)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_239;
        buf[0].mSelector = 136315394;
        *(_QWORD *)&buf[0].mScope = "HALS_MetaDevice.cpp";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 2507;
        v202 = MEMORY[0x1E0C81028];
        v203 = "%25s:%-5d  HALS_MetaDevice::SetPropertyData: bad property data size for kAudioAggregateDevicePropertyClockDevice";
        goto LABEL_238;
      }
      HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)buf);
      HALS_DeviceState::Capture((HALS_DeviceState *)buf, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
      v228 = 0;
      *(_QWORD *)&v229 = &v228;
      *((_QWORD *)&v229 + 1) = 0x2000000000;
      LODWORD(v230) = 0;
      v234[0] = MEMORY[0x1E0C809B0];
      v234[1] = 0x40000000;
      v234[2] = ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_99;
      v234[3] = &unk_1E697A210;
      v234[6] = a5;
      v234[7] = &v245;
      v234[4] = &v228;
      v234[5] = this;
      v28 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v28, (uint64_t)v234);
      if (*(_DWORD *)(v229 + 24))
      {
        v211 = __cxa_allocate_exception(0x10uLL);
        v212 = *(_DWORD *)(v229 + 24);
        *(_QWORD *)v211 = &off_1E69A1B30;
        v211[2] = v212;
      }
      HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)&v262);
      HALS_DeviceState::Capture(v29, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
      HALS_DeviceState::Compare((HALS_DeviceState *)buf, (const HALS_DeviceState *)&v262, (const AudioObjectPropertyAddress *)&v243, &v240, v30);
      strcpy(v248, "dcpabolg");
      v248[9] = 0;
      *(_WORD *)&v248[10] = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)v248, v31);
      strcpy(v248, "mocabolg");
      v248[9] = 0;
      *(_WORD *)&v248[10] = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)v248, v32);
      HALS_Device::UpdateInternalIOContext(this);
    }
    *(_QWORD *)v248 = (char *)&v263 + 8;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)v248);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy((_QWORD *)v262.__r_.__value_.__r.__words[2]);
    _Block_object_dispose(&v228, 8);
    v262.__r_.__value_.__r.__words[0] = (std::string::size_type)&v250 + 8;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v262);
    v59 = *(_QWORD **)&buf[1].mScope;
    goto LABEL_118;
  }
  if (a4 <= 7)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_239;
    buf[0].mSelector = 136315394;
    *(_QWORD *)&buf[0].mScope = "HALS_MetaDevice.cpp";
    LOWORD(buf[1].mSelector) = 1024;
    *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 2402;
    v202 = MEMORY[0x1E0C81028];
    v203 = "%25s:%-5d  HALS_MetaDevice::SetPropertyData: bad property data size for kAudioAggregateDevicePropertyComposition";
    goto LABEL_238;
  }
  v74 = pthread_self();
  if (!AMCP::Utility::is_thread_configured_for_realtime(v74, v75))
    goto LABEL_126;
  std::vector<void *>::vector(&v228);
  v76 = backtrace((void **)v228, (unint64_t)(v229 - v228) >> 3);
  std::vector<void *>::resize((char **)&v228, v76);
  applesauce::backtrace::detail::symbolicate_snapshot(&v262, (uint64_t)&v228);
  v77 = MEMORY[0x1E0DE4FD0] + 104;
  v261[0] = MEMORY[0x1E0DE4FD0] + 104;
  v78 = MEMORY[0x1E0DE4FD0] + 64;
  v79 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v80 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v81 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)&buf[1].mScope = MEMORY[0x1E0DE4FD0] + 64;
  *(_QWORD *)&buf[0].mSelector = v80;
  *(_QWORD *)((char *)&buf[0].mSelector + *(_QWORD *)(v80 - 24)) = v81;
  *(_QWORD *)&buf[0].mElement = 0;
  v82 = (std::ios_base *)((char *)buf + *(_QWORD *)(*(_QWORD *)&buf[0].mSelector - 24));
  std::ios_base::init(v82, &v250);
  v82[1].__vftable = 0;
  v82[1].__fmtflags_ = -1;
  v83 = v79[5];
  *(_QWORD *)&buf[1].mScope = v79[4];
  *(_QWORD *)((char *)&buf[1].mScope + *(_QWORD *)(*(_QWORD *)&buf[1].mScope - 24)) = v83;
  *(_QWORD *)&buf[0].mSelector = v79[1];
  *(_QWORD *)((char *)&buf[0].mSelector + *(_QWORD *)(*(_QWORD *)&buf[0].mSelector - 24)) = v79[6];
  v261[0] = v77;
  *(_QWORD *)&buf[0].mSelector = MEMORY[0x1E0DE4FD0] + 24;
  *(_QWORD *)&buf[1].mScope = v78;
  std::streambuf::basic_streambuf();
  v258 = v262;
  *(_QWORD *)&v250 = MEMORY[0x1E0DE4FB8] + 16;
  memset(&v262, 0, sizeof(v262));
  v259 = 0;
  v260 = 24;
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)&v250);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v262.__r_.__value_.__l.__data_);
  memset(v248, 0, 24);
  AMCP::Log::Scope_Registry::get(v84);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v262, "com.apple.coreaudio", "AMCP");
  size = (std::__shared_weak_count *)v262.__r_.__value_.__l.__size_;
  v86 = *(NSObject **)v262.__r_.__value_.__l.__data_;
  if (v262.__r_.__value_.__l.__size_)
  {
    v87 = (unint64_t *)(v262.__r_.__value_.__l.__size_ + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
  {
    v153 = pthread_self();
    v154 = pthread_mach_thread_np(v153);
    LODWORD(v262.__r_.__value_.__l.__data_) = 67109634;
    HIDWORD(v262.__r_.__value_.__r.__words[0]) = v154;
    LOWORD(v262.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v262.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_MetaDevice.cpp";
    WORD1(v262.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(v262.__r_.__value_.__r.__words[2]) = 2409;
    _os_log_error_impl(&dword_1B57BA000, v86, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Set aggregate on IO thread!!! logging backtrace", (uint8_t *)&v262, 0x18u);
  }
  while (2)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)buf + *(_QWORD *)(*(_QWORD *)&buf[0].mSelector - 24)));
    v89 = std::locale::use_facet((const std::locale *)&v262, MEMORY[0x1E0DE4A90]);
    v90 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v89->__vftable[2].~facet_0)(v89, 10);
    std::locale::~locale((std::locale *)&v262);
    v91 = (AMCP::Log::Scope_Registry *)MEMORY[0x1B5E5028C]();
    if (!v262.__r_.__value_.__s.__data_[0])
      goto LABEL_101;
    if ((v248[23] & 0x80000000) != 0)
    {
      **(_BYTE **)v248 = 0;
      *(_QWORD *)&v248[8] = 0;
    }
    else
    {
      v248[0] = 0;
      v248[23] = 0;
    }
    v92 = 0;
    while (1)
    {
      v93 = *(void **)((char *)&__p + *(_QWORD *)(*(_QWORD *)&buf[0].mSelector - 24));
      v94 = (_BYTE *)v93[3];
      if (v94 != (_BYTE *)v93[4])
      {
        v93[3] = v94 + 1;
        LOBYTE(v93) = *v94;
        goto LABEL_92;
      }
      LODWORD(v93) = (*(uint64_t (**)(_QWORD *))(*v93 + 80))(v93);
      if ((_DWORD)v93 == -1)
        break;
LABEL_92:
      if (v90 == v93)
      {
        v95 = 0;
        goto LABEL_100;
      }
      std::string::push_back((std::string *)v248, (std::string::value_type)v93);
      ++v92;
      if ((v248[23] & 0x80000000) != 0 && *(_QWORD *)&v248[8] == 0x7FFFFFFFFFFFFFF7)
      {
        v95 = 4;
        goto LABEL_100;
      }
    }
    if (v92)
      v95 = 2;
    else
      v95 = 6;
LABEL_100:
    std::ios_base::clear((std::ios_base *)((char *)buf + *(_QWORD *)(*(_QWORD *)&buf[0].mSelector - 24)), *(_DWORD *)((char *)&v250 + *(_QWORD *)(*(_QWORD *)&buf[0].mSelector - 24) + 8) | v95);
LABEL_101:
    if ((*((_BYTE *)&v250 + *(_QWORD *)(*(_QWORD *)&buf[0].mSelector - 24) + 8) & 5) == 0)
    {
      AMCP::Log::Scope_Registry::get(v91);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v262, "com.apple.coreaudio", "AMCP");
      v96 = (std::__shared_weak_count *)v262.__r_.__value_.__l.__size_;
      v97 = *(NSObject **)v262.__r_.__value_.__l.__data_;
      if (v262.__r_.__value_.__l.__size_)
      {
        v98 = (unint64_t *)(v262.__r_.__value_.__l.__size_ + 8);
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
      {
        v100 = pthread_self();
        v101 = pthread_mach_thread_np(v100);
        v102 = v248;
        if (v248[23] < 0)
          v102 = *(_BYTE **)v248;
        LODWORD(v262.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v262.__r_.__value_.__r.__words[0]) = v101;
        LOWORD(v262.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v262.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_MetaDevice.cpp";
        WORD1(v262.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v262.__r_.__value_.__r.__words[2]) = 2412;
        LOWORD(v263) = 2080;
        *(_QWORD *)((char *)&v263 + 2) = v102;
        _os_log_error_impl(&dword_1B57BA000, v97, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d SetAggOnIOThreadBT: %s", (uint8_t *)&v262, 0x22u);
      }
      continue;
    }
    break;
  }
  if ((v248[23] & 0x80000000) != 0)
    operator delete(*(void **)v248);
  *(_QWORD *)&buf[0].mSelector = *MEMORY[0x1E0DE4F50];
  v117 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&buf[0].mSelector + *(_QWORD *)(*(_QWORD *)&buf[0].mSelector - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&buf[1].mScope = v117;
  *(_QWORD *)&v250 = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E50598](v261);
  if (v228)
  {
    *(_QWORD *)&v229 = v228;
    operator delete((void *)v228);
  }
LABEL_126:
  HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)buf);
  HALS_DeviceState::Capture((HALS_DeviceState *)buf, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
  HALS_MetaDevice::UnregisterTaps(this);
  v228 = 0;
  *(_QWORD *)&v229 = &v228;
  *((_QWORD *)&v229 + 1) = 0x2000000000;
  LODWORD(v230) = 0;
  v236[0] = MEMORY[0x1E0C809B0];
  v236[1] = 0x40000000;
  v236[2] = ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_95;
  v236[3] = &unk_1E697A1C0;
  v236[6] = a5;
  v236[7] = &v245;
  v236[5] = this;
  v236[4] = &v228;
  v118 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v118, (uint64_t)v236);
  if (*(_DWORD *)(v229 + 24))
  {
    v217 = __cxa_allocate_exception(0x10uLL);
    v218 = *(_DWORD *)(v229 + 24);
    *(_QWORD *)v217 = &off_1E69A1B30;
    v217[2] = v218;
  }
  HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)&v262);
  HALS_DeviceState::Capture(v119, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
  HALS_DeviceState::Compare((HALS_DeviceState *)buf, (const HALS_DeviceState *)&v262, (const AudioObjectPropertyAddress *)&v243, &v240, v120);
  strcpy(v248, "tsmabolg");
  v248[9] = 0;
  *(_WORD *)&v248[10] = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)v248, v121);
  strcpy(v248, "dcpabolg");
  v248[9] = 0;
  *(_WORD *)&v248[10] = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)v248, v122);
  strcpy(v248, "purgbolg");
  v248[9] = 0;
  *(_WORD *)&v248[10] = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)v248, v123);
  strcpy(v248, "patabolg");
  v248[9] = 0;
  *(_WORD *)&v248[10] = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)v248, v124);
  strcpy(v248, "mocabolg");
  v248[9] = 0;
  *(_WORD *)&v248[10] = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)v248, v125);
  strcpy(v248, "#patbolg");
  v248[9] = 0;
  *(_WORD *)&v248[10] = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)v248, v126);
  HALS_MetaDevice::RegisterTaps(this);
LABEL_128:
  *(_QWORD *)v248 = (char *)&v263 + 8;
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)v248);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy((_QWORD *)v262.__r_.__value_.__r.__words[2]);
  _Block_object_dispose(&v228, 8);
  v262.__r_.__value_.__r.__words[0] = (std::string::size_type)&v250 + 8;
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v262);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(_QWORD **)&buf[1].mScope);
  v69 = 1;
  v116 = 1;
LABEL_136:
  v128 = HIBYTE(v245) | v245;
  if (v128)
  {
    v262.__r_.__value_.__r.__words[0] = 0x676C6F6273746D23;
    LODWORD(v262.__r_.__value_.__r.__words[1]) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)&v262, v35);
    if (HIBYTE(v245))
    {
      v262.__r_.__value_.__r.__words[0] = 0x696E707473746D23;
      LODWORD(v262.__r_.__value_.__r.__words[1]) = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)&v262, v35);
    }
    v128 = v245;
    if ((_BYTE)v245)
    {
      v262.__r_.__value_.__r.__words[0] = 0x6F75747073746D23;
      LODWORD(v262.__r_.__value_.__r.__words[1]) = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)&v262, v35);
      v128 = v245;
    }
  }
  v129 = (AudioObjectPropertyAddress *)v243;
  if (HIBYTE(v245) || v128)
  {
    if ((_QWORD)v243 == *((_QWORD *)&v243 + 1))
    {
      v130 = v240;
      while (v130 != v241)
      {
        v131 = *(_QWORD *)v130;
        v132 = *((_QWORD *)v130 + 1);
        v130 = (CAPropertyAddressList *)((char *)v130 + 32);
        if (v131 != v132)
          goto LABEL_147;
      }
    }
    else
    {
LABEL_147:
      v262.__r_.__value_.__r.__words[0] = 0x676C6F6264696666;
      LODWORD(v262.__r_.__value_.__r.__words[1]) = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v243, (AudioObjectPropertyAddress *)&v262, v35);
      v129 = (AudioObjectPropertyAddress *)v243;
    }
  }
  if (v129 != *((AudioObjectPropertyAddress **)&v243 + 1))
  {
    if (a8)
      v133 = *((unsigned int *)a8 + 4);
    else
      v133 = 0;
    HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), v133, -1431655765 * ((*((_QWORD *)&v243 + 1) - (_QWORD)v129) >> 2), v129);
  }
  v134 = v240;
  v135 = v241 - v240;
  if (((v241 - v240) & 0x1FFFFFFFE0) != 0)
  {
    v136 = 0;
    v137 = 0;
    do
    {
      if (v137 >= v135 >> 5)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      v138 = (char *)v134 + v136;
      v139 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)((char *)v134 + v136 + 24));
      v141 = (HALS_ObjectMap *)v139;
      v142 = *((_QWORD *)v138 + 1);
      if (*(_QWORD *)v138 != v142 && v139 != 0)
      {
        if (a8)
          v144 = *((unsigned int *)a8 + 4);
        else
          v144 = 0;
        HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*(unsigned int *)(v139 + 16), v144, -1431655765 * ((unint64_t)(v142 - *(_QWORD *)v138) >> 2), *(const AudioObjectPropertyAddress **)v138);
      }
      HALS_ObjectMap::ReleaseObject(v141, v140);
      ++v137;
      v134 = v240;
      v135 = v241 - v240;
      v136 += 32;
    }
    while (v137 < ((unint64_t)(v241 - v240) >> 5));
  }
  if (((v69 | v116) & 1) != 0 && HIBYTE(v245) | v245)
  {
    v145 = (HALS_NotificationManager *)*(unsigned int *)(*((_QWORD *)this + 163) + 16);
    if (a8)
      v146 = *((unsigned int *)a8 + 4);
    else
      v146 = 0;
    strcpy((char *)buf, "#vedbolg");
    BYTE1(buf[0].mElement) = 0;
    HIWORD(buf[0].mElement) = 0;
    HALS_Object::PropertiesChanged(this, v145, v146, 1, buf);
    v219 = 0;
    v220 = 0;
    HALS_System::GetInstance(buf, 0, &v219);
    HALS_System::CheckForDefaultDeviceChanges(*(HALS_System **)&buf[0].mSelector);
    v147 = *(std::__shared_weak_count **)&buf[0].mElement;
    if (*(_QWORD *)&buf[0].mElement)
    {
      v148 = (unint64_t *)(*(_QWORD *)&buf[0].mElement + 8);
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
    v150 = v220;
    if (v220)
    {
      p_shared_owners = (unint64_t *)&v220->__shared_owners_;
      do
        v152 = __ldaxr(p_shared_owners);
      while (__stlxr(v152 - 1, p_shared_owners));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
    v129 = (AudioObjectPropertyAddress *)v243;
  }
  *(_QWORD *)&buf[0].mSelector = &v240;
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v129)
  {
    *((_QWORD *)&v243 + 1) = v129;
    operator delete(v129);
  }
}

void sub_1B59B4244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  __cxa_end_catch();
  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete((void *)STACK[0x360]);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x380]);
  if (a42)
    operator delete(a42);
  STACK[0x360] = (unint64_t)&STACK[0x2F8];
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x360]);
  if (STACK[0x310])
    operator delete((void *)STACK[0x310]);
  _Unwind_Resume(a1);
}

void HALS_MetaDevice::HandleObjectPropertiesChanged(HALS_MetaDevice *this, const HALS_Object *a2, uint64_t a3, int a4, const AudioObjectPropertyAddress *a5)
{
  HALB_Mutex *v7;
  const AudioObjectPropertyAddress *v8;
  const AudioObjectPropertyAddress *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  HALS_Object *v17;
  HALS_ObjectMap *v18;
  uint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  HALS_System *v30;
  std::__shared_weak_count *v31;
  _QWORD v32[10];
  int v33;
  int v34;
  void **v35;
  void ***v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  void (*v43)(uint64_t);
  _QWORD v44[3];
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char *(*v48)(uint64_t, uint64_t);
  void (*v49)(uint64_t);
  __int128 v50;
  __int128 v51;

  v45 = 0;
  v46 = &v45;
  v47 = 0x4802000000;
  v48 = __Block_byref_object_copy__4100;
  v49 = __Block_byref_object_dispose__4101;
  v50 = 0u;
  v51 = 0u;
  v39 = 0;
  v40 = &v39;
  v41 = 0x4002000000;
  v42 = __Block_byref_object_copy__1;
  v43 = __Block_byref_object_dispose__2;
  memset(v44, 0, sizeof(v44));
  v35 = 0;
  v36 = &v35;
  v37 = 0x2000000000;
  v38 = 0;
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 0x40000000;
  v32[2] = ___ZN15HALS_MetaDevice29HandleObjectPropertiesChangedEPK11HALS_ObjectjjPK26AudioObjectPropertyAddress_block_invoke;
  v32[3] = &unk_1E6979D58;
  v33 = a3;
  v34 = a4;
  v32[8] = a2;
  v32[9] = a5;
  v32[4] = &v35;
  v32[5] = &v45;
  v32[6] = &v39;
  v32[7] = this;
  v7 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v7, (uint64_t)v32);
  if (*((_BYTE *)v36 + 24))
    HALS_Device::UpdateInternalIOContext(this);
  v8 = (const AudioObjectPropertyAddress *)v46[5];
  v9 = (const AudioObjectPropertyAddress *)v46[6];
  v10 = v8 != v9;
  if (v8 != v9)
    HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), a3, -1431655765 * ((unint64_t)((char *)v9 - (char *)v8) >> 2), v8);
  v11 = v40[5];
  v12 = v40[6];
  if (((v12 - v11) & 0x1FFFFFFFE0) != 0)
  {
    if (v12 == v11)
LABEL_15:
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v15 = v11 + v13;
      v16 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v11 + v13 + 24));
      v18 = (HALS_ObjectMap *)v16;
      v19 = *(_QWORD *)(v15 + 8);
      if (*(_QWORD *)v15 != v19 && v16 != 0)
      {
        HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*(unsigned int *)(v16 + 16), 0, -1431655765 * ((unint64_t)(v19 - *(_QWORD *)v15) >> 2), *(const AudioObjectPropertyAddress **)v15);
        v10 = 1;
      }
      HALS_ObjectMap::ReleaseObject(v18, v17);
      ++v14;
      v11 = v40[5];
      v21 = v40[6] - v11;
      if (v14 >= ((unint64_t)v21 >> 5))
        break;
      v13 += 32;
      if (v14 >= v21 >> 5)
        goto LABEL_15;
    }
  }
  if (v10)
  {
    v28 = 0;
    v29 = 0;
    HALS_System::GetInstance(&v30, 0, &v28);
    HALS_System::CheckForDefaultDeviceChanges(v30);
    v22 = v31;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v29;
    if (v29)
    {
      v26 = (unint64_t *)&v29->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v39, 8);
  v35 = (void **)v44;
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&v35);
  _Block_object_dispose(&v45, 8);
  if ((_QWORD)v50)
  {
    *((_QWORD *)&v50 + 1) = v50;
    operator delete((void *)v50);
  }
}

void sub_1B59B4B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  void *v30;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&a24);
  _Block_object_dispose((const void *)(v28 - 152), 8);
  v30 = *(void **)(v28 - 112);
  if (v30)
  {
    *(_QWORD *)(v28 - 104) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(a1);
}

void HALS_MetaDevice::HandleGroupObjectPropertiesChanged(HALS_Device *a1, int a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9, uint64_t a10, dispatch_object_t *a11)
{
  NSObject *v18;
  HALB_Mutex *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  _opaque_pthread_t *v23;
  uint64_t v24;
  _QWORD v26[11];
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  NSObject *v31;
  void **v32;
  void ***v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t);
  _QWORD v41[3];
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char *(*v45)(uint64_t, uint64_t);
  void (*v46)(uint64_t);
  __int128 v47;
  __int128 v48;
  uint8_t buf[24];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v42 = 0;
  v43 = &v42;
  v44 = 0x4802000000;
  v45 = __Block_byref_object_copy__4100;
  v46 = __Block_byref_object_dispose__4101;
  v47 = 0u;
  v48 = 0u;
  v36 = 0;
  v37 = &v36;
  v38 = 0x4002000000;
  v39 = __Block_byref_object_copy__1;
  v40 = __Block_byref_object_dispose__2;
  memset(v41, 0, sizeof(v41));
  v32 = 0;
  v33 = &v32;
  v34 = 0x2000000000;
  v35 = 0;
  v18 = *a11;
  if (*a11)
  {
    dispatch_retain(*a11);
    dispatch_group_enter(v18);
  }
  v31 = v18;
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 0x40000000;
  v26[2] = ___ZN15HALS_MetaDevice34HandleGroupObjectPropertiesChangedEjjjPKjS1_jPK26AudioObjectPropertyAddressbRKNSt3__16vectorIjNS5_9allocatorIjEEEEN10applesauce8dispatch2v15groupE_block_invoke;
  v26[3] = &unk_1E6979D80;
  v27 = a2;
  v28 = a3;
  v29 = a4;
  v26[8] = a5;
  v26[9] = a6;
  v30 = a7;
  v26[10] = a8;
  v26[4] = &v32;
  v26[5] = &v42;
  v26[6] = &v36;
  v26[7] = a1;
  v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v19, (uint64_t)v26);
  if (*((_BYTE *)v33 + 24))
    HALS_Device::UpdateInternalIOContext(a1);
  v20 = *((_DWORD *)a1 + 4);
  v21 = v43;
  v22 = v37;
  v23 = *(_opaque_pthread_t **)((*(uint64_t (**)(HALS_Device *))(*(_QWORD *)a1 + 48))(a1) + 72);
  v24 = (uint64_t)(v21 + 5);
  if (v23 == pthread_self() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_Object.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 675;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Object::GroupPropertiesChanged: Notifications are being sent from inside the command gate.", buf, 0x12u);
  }
  memset(buf, 0, sizeof(buf));
  HALS_NotificationManager::GroupPropertiesChanged(a9, v20, a3, v24, v22 + 5, (uint64_t)buf);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  if (v18)
  {
    dispatch_group_leave(v18);
    dispatch_release(v18);
  }
  _Block_object_dispose(&v32, 8);
  _Block_object_dispose(&v36, 8);
  v32 = (void **)v41;
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&v32);
  _Block_object_dispose(&v42, 8);
  if ((_QWORD)v47)
  {
    *((_QWORD *)&v47 + 1) = v47;
    operator delete((void *)v47);
  }
}

void sub_1B59B4F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,dispatch_object_t a25,void **a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  void *v32;
  void *v33;

  v32 = *(void **)(v30 - 128);
  if (v32)
  {
    *(_QWORD *)(v30 - 120) = v32;
    operator delete(v32);
  }
  applesauce::dispatch::v1::group_session::~group_session(&a25);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  a26 = a11;
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&a26);
  _Block_object_dispose((const void *)(v30 - 200), 8);
  v33 = *(void **)(v30 - 160);
  if (v33)
  {
    *(_QWORD *)(v30 - 152) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaDevice::CanBeAggregated(HALS_MetaDevice *this)
{
  return 0;
}

void HALS_MetaDevice::FlushAllQueues(HALS_MetaDevice *this)
{
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_MetaDevice *)((char *)this + 664));
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_MetaDevice *)((char *)this + 984));
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_MetaDevice *)((char *)this + 1504));
}

uint64_t HALS_MetaDevice::DoAnyQueuesHaveWorkAfterFlush(HALS_MetaDevice *this)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  unsigned __int8 v3;

  v1 = atomic_load((unsigned __int8 *)this + 697);
  if ((v1 & 1) != 0)
    return 1;
  v2 = atomic_load((unsigned __int8 *)this + 1017);
  if ((v2 & 1) != 0)
    return 1;
  v3 = atomic_load((unsigned __int8 *)this + 1537);
  return v3 & 1;
}

void HALS_MetaDevice::create_mcp_engine(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t HALS_MetaDevice::_GetNumberStreams(HALS_MetaDevice *this, unsigned int a2)
{
  return (*((_QWORD *)this + 3 * a2 + 181) - *((_QWORD *)this + 3 * a2 + 180)) >> 3;
}

HALS_ObjectMap *HALS_MetaDevice::_CopyStreamByIndex(HALS_MetaDevice *this, HALS_Object *a2, unsigned int a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  HALS_ObjectMap *v6;

  v3 = (char *)this + 24 * a2;
  v4 = *((_QWORD *)v3 + 181);
  v5 = *((_QWORD *)v3 + 180);
  if (a3 >= (unint64_t)((v4 - v5) >> 3))
    v6 = 0;
  else
    v6 = *(HALS_ObjectMap **)(v5 + 8 * a3);
  HALS_ObjectMap::RetainObject(v6, a2);
  return v6;
}

uint64_t HALS_MetaDevice::_CopyIOEngine(HALS_MetaDevice *this)
{
  return 0;
}

uint64_t HALS_MetaDevice::IsolatedUseCaseID(HALS_MetaDevice *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t (*v9)();
  char v10;
  char v11;

  v5 = 0;
  v6 = &v5;
  v7 = 0x3002000000;
  v8 = __Block_byref_object_copy__127;
  v9 = __Block_byref_object_dispose__128;
  v10 = 0;
  v11 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK15HALS_MetaDevice17IsolatedUseCaseIDEv_block_invoke;
  v4[3] = &unk_1E697A3B0;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = v6[5];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B59B5100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL HALS_MetaDevice::CanBeSeenByProcess(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  _BOOL8 result;
  int v5;

  v3 = atomic_load((unsigned __int8 *)(a1 + 1432));
  result = 1;
  if (a2 && (v3 & 1) != 0)
  {
    v5 = *(_DWORD *)(a2 + 232);
    if (v5 != -1)
      return v5 == *(_DWORD *)(a1 + 1312);
  }
  return result;
}

uint64_t HALS_MetaDevice::_CopyDefaultElementName(HALS_MetaDevice *this, int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v6;
  uint64_t v8;
  uint64_t i;
  HALS_MetaSubDevice **v10;
  HALS_MetaSubDevice *v11;
  unsigned int TotalNumberChannels;
  uint64_t result;
  int v14;
  uint64_t v15;
  _DWORD v16[3];
  int v17;
  _QWORD v18[9];

  if (a2 != 1869968496 && a2 != 1768845428)
    return 0;
  v18[7] = v3;
  v18[8] = v4;
  v6 = a3;
  if (a3)
  {
    v8 = *((_QWORD *)this + 168);
    for (i = *((_QWORD *)this + 169); v8 != i; v8 += 24)
    {
      v10 = *(HALS_MetaSubDevice ***)v8;
      if (*(_QWORD *)(v8 + 8) != *(_QWORD *)v8)
      {
        v11 = *v10;
        TotalNumberChannels = HALS_MetaSubDevice::GetTotalNumberChannels(*v10, a2 == 1768845428);
        if (v6 <= TotalNumberChannels)
        {
          if (v11)
            goto LABEL_16;
        }
        else
        {
          v6 -= TotalNumberChannels;
        }
      }
    }
    return 0;
  }
  v11 = (HALS_MetaSubDevice *)*((_QWORD *)this + 177);
  if (!v11)
    return 0;
  v6 = 0;
LABEL_16:
  v16[0] = 1818454126;
  v16[1] = a2;
  v16[2] = v6;
  v14 = (*(uint64_t (**)(HALS_MetaSubDevice *, _QWORD, _DWORD *, _QWORD))(*(_QWORD *)v11 + 88))(v11, *((unsigned int *)v11 + 4), v16, 0);
  result = 0;
  if (v14)
  {
    v15 = *((unsigned int *)v11 + 4);
    v18[0] = 0;
    v17 = 0;
    (*(void (**)(HALS_MetaSubDevice *, uint64_t, _DWORD *, uint64_t, int *, _QWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v11 + 112))(v11, v15, v16, 8, &v17, v18, 0, 0, 0);
    return v18[0];
  }
  return result;
}

uint64_t HALS_MetaDevice::_GetTotalNumberChannels(HALS_MetaDevice *this, unsigned int a2)
{
  char *v2;
  unsigned int **v3;
  uint64_t v4;
  unsigned int ***v5;
  unsigned int *v6;
  uint64_t v7;
  _BYTE v9[28];
  int v10;
  uint64_t v11;
  int v12;
  int v13;

  v2 = (char *)this + 24 * a2;
  v3 = (unsigned int **)*((_QWORD *)v2 + 180);
  if (v3 == *((unsigned int ***)v2 + 181))
    return 0;
  LODWORD(v4) = 0;
  v5 = (unsigned int ***)(v2 + 1448);
  do
  {
    v6 = *v3++;
    v7 = v6[4];
    v11 = 0x676C6F6270667420;
    v12 = 0;
    v13 = 0;
    (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, int *, _BYTE *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v6 + 112))(v6, v7, &v11, 40, &v13, v9, 0, 0, 0);
    v4 = (v10 + v4);
  }
  while (v3 != *v5);
  return v4;
}

void HALS_MetaDevice::_CopyStreamList(uint64_t a1, unsigned int a2, void **a3)
{
  uint64_t v4;
  HALS_Object *v5;
  HALS_ObjectMap **v6;
  HALS_ObjectMap **i;
  HALS_ObjectMap *v8;
  unint64_t v9;
  HALS_ObjectMap **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  HALS_ObjectMap **v16;
  char *v17;
  char *v18;
  HALS_ObjectMap *v19;

  a3[1] = *a3;
  v4 = a1 + 24 * a2;
  std::vector<void const*>::reserve(a3, (uint64_t)(*(_QWORD *)(v4 + 1448) - *(_QWORD *)(v4 + 1440)) >> 3);
  v6 = *(HALS_ObjectMap ***)(v4 + 1440);
  for (i = *(HALS_ObjectMap ***)(v4 + 1448); v6 != i; ++v6)
  {
    HALS_ObjectMap::RetainObject(*v6, v5);
    v8 = *v6;
    v10 = (HALS_ObjectMap **)a3[1];
    v9 = (unint64_t)a3[2];
    if ((unint64_t)v10 >= v9)
    {
      v12 = ((char *)v10 - (_BYTE *)*a3) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v13 = v9 - (_QWORD)*a3;
      v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v15);
      else
        v5 = 0;
      v16 = (HALS_ObjectMap **)(v15 + 8 * v12);
      *v16 = v8;
      v11 = (char *)(v16 + 1);
      v18 = (char *)*a3;
      v17 = (char *)a3[1];
      if (v17 != *a3)
      {
        do
        {
          v19 = (HALS_ObjectMap *)*((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v16 = v19;
        }
        while (v17 != v18);
        v17 = (char *)*a3;
      }
      *a3 = v16;
      a3[1] = v11;
      a3[2] = (void *)(v15 + 8 * (_QWORD)v5);
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v10 = v8;
      v11 = (char *)(v10 + 1);
    }
    a3[1] = v11;
  }
}

uint64_t HALS_MetaDevice::_GetNumberStreamsForClient(HALS_MetaDevice *this, uint64_t a2, HALS_Client *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  HALS_ObjectMap *v19;
  int v20;
  HALS_Object *v21;

  v6 = HALS_Device::ClientDSPInfo::find((uint64_t)this + 616, (uint64_t)a3);
  if (!v6)
    goto LABEL_13;
  v7 = v6 + 5;
  v8 = 5;
  if ((_DWORD)a2)
  {
    v8 = 0;
    v7 = v6;
  }
  v9 = (_QWORD *)v6[v8];
  v10 = v7 + 1;
  if (v9 == v10)
  {
LABEL_13:
    v15 = (*(uint64_t (**)(HALS_MetaDevice *, uint64_t))(*(_QWORD *)this + 384))(this, a2);
    if (v15)
    {
      v16 = v15;
      LODWORD(v17) = 0;
      v18 = 0;
      do
      {
        v19 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_MetaDevice *, uint64_t, uint64_t))(*(_QWORD *)this + 392))(this, a2, v18);
        v20 = (*(uint64_t (**)(HALS_MetaDevice *, HALS_ObjectMap *, HALS_Client *))(*(_QWORD *)this + 608))(this, v19, a3);
        HALS_ObjectMap::ReleaseObject(v19, v21);
        v17 = (v17 + v20);
        v18 = (v18 + 1);
      }
      while (v16 != (_DWORD)v18);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      v11 = *((_DWORD *)v9 + 7) - 2;
      if (v11 < 7 && ((0x4Fu >> v11) & 1) != 0)
        return 1;
      v12 = (_QWORD *)v9[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v9[2];
          v14 = *v13 == (_QWORD)v9;
          v9 = v13;
        }
        while (!v14);
      }
      v9 = v13;
      if (v13 == v10)
        goto LABEL_13;
    }
  }
  return v17;
}

void sub_1B59B55BC(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

BOOL HALS_MetaDevice::_ClientCanUseStream(HALS_MetaDevice *this, HALS_Stream *a2, HALS_Client *a3)
{
  HALS_ObjectMap *v6;
  uint64_t v7;
  HALS_Object *v8;
  HALS_ObjectMap *v9;
  _BOOL8 ReferenceStreamStateForClient;
  uint64_t v11;

  if (!a2)
    return HALS_Device::_ClientCanUseStream((uint64_t)this, a2, (uint64_t)a3);
  if (!(*(unsigned int (**)(HALS_Stream *))(*(_QWORD *)a2 + 208))(a2))
  {
    if (*((_BYTE *)a2 + 52) && HALS_Stream::IsReferenceStream(a2))
    {
      v11 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)a2 + 7));
      v9 = (HALS_ObjectMap *)v11;
      ReferenceStreamStateForClient = 1;
      if (a3 && !*((_BYTE *)this + 520))
        ReferenceStreamStateForClient = HALS_ReferenceStreamStateManager::GetReferenceStreamStateForClient(*(std::__shared_mutex_base **)(v11 + 440), *((_DWORD *)a3 + 4));
      goto LABEL_15;
    }
    return HALS_Device::_ClientCanUseStream((uint64_t)this, a2, (uint64_t)a3);
  }
  if (!*((_BYTE *)a2 + 52) || !HALS_Stream::IsReferenceStream(a2))
    return 1;
  v6 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_Stream *))(*(_QWORD *)a2 + 280))(a2);
  v7 = HALS_ObjectMap::CopyObjectByObjectID(v6);
  v9 = (HALS_ObjectMap *)v7;
  ReferenceStreamStateForClient = 1;
  if (v7 && a3 && !*((_BYTE *)this + 520))
    ReferenceStreamStateForClient = HALS_ReferenceStreamStateManager::GetReferenceStreamStateForClient(*(std::__shared_mutex_base **)(v7 + 440), *((_DWORD *)a3 + 4));
LABEL_15:
  HALS_ObjectMap::ReleaseObject(v9, v8);
  return ReferenceStreamStateForClient;
}

void sub_1B59B56E4(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

CFDictionaryRef HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_MetaDevice *this, HALS_Client *a2)
{
  _QWORD *v3;
  HALS_Device_HostedDSP *v4;
  DSP_Host_OffloadDictionary *v5;
  AMCP::Log::Scope_Registry *v6;
  DSP_Host_OffloadDictionary *v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  int v14;
  void **v15;
  std::__shared_weak_count *v16;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  HALS_MetaSubDevice *v21;
  uint64_t *v22;
  HALS_MetaSubDevice *v23;
  uint64_t *v24;
  int v25;
  OS::CF::Boolean *v26;
  uint64_t v27;
  HALS_MetaSubDevice *FirstDeviceWithDirection;
  unsigned int TotalNumberChannels;
  uint64_t *v30;
  HALS_MetaSubDevice **v31;
  __CFDictionary *v32;
  int ExtraLatency;
  unsigned int NumberStreams;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  HALS_Object *v38;
  unsigned int *v39;
  OS::CF::Boolean *v40;
  OS::CF::Boolean *v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  int j;
  OS::CF::UntypedObject *v47;
  char *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t *v54;
  HALS_MetaSubDevice *v55;
  __CFDictionary *v56;
  int v57;
  int v58;
  int DriftCorrectionAlgorithm;
  int DriftCorrectionQuality;
  int v61;
  int v62;
  int k;
  HALS_Object *v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  NSObject **v68;
  int v69;
  __CFDictionary *v70;
  const void *v71;
  const __CFString *v72;
  NSObject *v73;
  NSObject **v74;
  DSP_Host_OffloadDictionary *v75;
  const __CFDictionary *v76;
  DSP_Host_OffloadDictionary *v77;
  const __CFDictionary *v78;
  CFDictionaryRef v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  HALS_MetaSubDevice **v84;
  HALS_MetaSubDevice *v85;
  uint64_t *v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int m;
  HALS_ObjectMap *v94;
  HALS_Object *v95;
  HALS_ObjectMap *v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  AMCP::Log::Scope_Registry *v100;
  const __CFNumber *v101;
  CFTypeID v102;
  int v103;
  _opaque_pthread_t *v104;
  mach_port_t v105;
  mach_port_t v106;
  int v107;
  void *v108;
  const void *v109;
  int v110;
  void (***v111)(OS::CF::String *__hidden);
  std::__shared_weak_count *v112;
  NSObject *v113;
  unint64_t *v114;
  unint64_t v115;
  _opaque_pthread_t *v116;
  mach_port_t v117;
  std::__shared_weak_count *v118;
  NSObject *v119;
  unint64_t *v120;
  unint64_t v121;
  _BOOL8 v122;
  _opaque_pthread_t *v123;
  mach_port_t v124;
  int8x8_t v125;
  int8x8_t v126;
  int32x4_t v127;
  uint32x4_t v128;
  int16x8_t v129;
  uint64_t v130;
  __int128 *v131;
  uint64_t *v132;
  __int128 *v133;
  unsigned int v134;
  uint64_t *v135;
  std::__shared_weak_count *v136;
  NSObject *v137;
  unint64_t *v138;
  unint64_t v139;
  _opaque_pthread_t *v140;
  mach_port_t v141;
  uint64_t *v142;
  uint64_t v143;
  unsigned int v144;
  __CFDictionary *v145;
  unsigned int n;
  HALS_Object *v147;
  HALS_ObjectMap *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  int v155;
  int v156;
  OS::CF::Boolean *v157;
  CFDictionaryRef v158;
  _QWORD *v159;
  uint64_t v160;
  DSP_Host_OffloadDictionary *v161;
  HALS_Client *v163;
  const __CFDictionary **v164;
  int StackedChannelPolicy;
  uint64_t i;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  int IsDriftCorrectionOn;
  BOOL v172[8];
  int IsSynchPaddingOn;
  BOOL v174[8];
  BOOL v175[8];
  NSObject **v176;
  __int128 v177;
  DSP_Host_OffloadDictionary *v178;
  void (**v179)(OS::CF::String *__hidden);
  uint64_t *v180;
  void (**v181)(OS::CF::String *__hidden);
  uint64_t *v182;
  char v183[8];
  CFDictionaryRef theDict;
  char v185[8];
  __CFArray *v186;
  uint64_t v187;
  uint64_t v188;
  void *value;
  __CFDictionary *v190;
  char v191;
  uint64_t v192;
  __CFArray *v193;
  HALS_System *v194;
  __CFDictionary *v195;
  uint64_t v196;
  __CFString *v197;
  _QWORD v198[3];
  _QWORD *v199;
  uint64_t v200;
  __CFDictionary *v201;
  uint64_t *v202;
  uint8_t buf[8];
  __int128 v204;
  __int16 v205;
  _BYTE v206[6];
  _BYTE v207[18];
  void (**v208)(OS::CF::String *__hidden);
  HALS_System **v209;
  _BYTE v210[7];
  char v211;
  _BYTE *v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  v178 = 0;
  HALS_Device::_GetDSPTypesForClient((uint64_t *)buf, (uint64_t)this, 1, (uint64_t)a2);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(0);
  v3 = (_QWORD *)v204;
  v176 = *(NSObject ***)buf;
  v177 = v204;
  if (*((_QWORD *)&v204 + 1))
  {
    *(_QWORD *)(v204 + 16) = &v177;
    *(_QWORD *)buf = &v204;
    v204 = 0uLL;
    v3 = 0;
  }
  else
  {
    v176 = (NSObject **)&v177;
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v3);
  v4 = (HALS_Device_HostedDSP *)*((_QWORD *)this + 76);
  if (v4)
  {
    HALS_Device_HostedDSP::RationalizeDSPOffloadsForClient((HALS_Device_HostedDSP *)buf, v4, (HALS_Client *)1, (uint64_t)a2);
    v5 = *(DSP_Host_OffloadDictionary **)buf;
  }
  else
  {
    v5 = 0;
  }
  v163 = a2;
  v6 = v178;
  v178 = v5;
  if (v6)
  {
    v6 = (AMCP::Log::Scope_Registry *)std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100]((uint64_t)v6);
    v5 = v178;
  }
  if (v5)
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v208, "dsp offload bypass override");
    if (OS::CF::DictionaryBase<__CFDictionary const*>::HasKey(*((const __CFDictionary **)this + 167), v208))
    {
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Dictionary>((uint64_t)buf, *((CFDictionaryRef *)this + 167), v208);
      if ((_QWORD)v204)
      {
        v7 = (DSP_Host_OffloadDictionary *)operator new();
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v7 + 1) = 0;
        *((_QWORD *)v7 + 2) = 0;
        DSP_Host_OffloadDictionary::deep_copy_from(v7, (const __CFString *)v204);
      }
      else
      {
        v7 = 0;
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
    }
    else
    {
      v7 = 0;
    }
    v6 = (AMCP::Log::Scope_Registry *)v208;
    if (v208)
      CFRelease(v208);
    if (v7)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v8 = (std::__shared_weak_count *)v204;
      v9 = **(NSObject ***)buf;
      if ((_QWORD)v204)
      {
        v10 = (unint64_t *)(v204 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v14 = *((_DWORD *)this + 4);
        DSP_Host_OffloadDictionary::get_debug_string((DSP_Host_OffloadDictionary *)&v208, (uint64_t)v7);
        v15 = v211 >= 0 ? (void **)&v208 : (void **)v208;
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v13;
        LOWORD(v204) = 2080;
        *(_QWORD *)((char *)&v204 + 2) = "HALS_MetaDevice.cpp";
        WORD5(v204) = 1024;
        HIDWORD(v204) = 928;
        v205 = 1024;
        *(_DWORD *)v206 = v14;
        *(_WORD *)&v206[4] = 2080;
        *(_QWORD *)v207 = v15;
        _os_log_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d [hal_dsp][offloads] (Device ID: %d) Aggregate device description overrides kAudioDevicePropertyDSPOffloadBypass with %s", buf, 0x28u);
        if (v211 < 0)
          operator delete(v208);
      }
      DSP_Host_OffloadDictionary::remove(v178, v7);
      v6 = (AMCP::Log::Scope_Registry *)std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100]((uint64_t)v7);
    }
  }
  AMCP::Log::Scope_Registry::get(v6);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v16 = (std::__shared_weak_count *)v204;
  v17 = **(NSObject ***)buf;
  if ((_QWORD)v204)
  {
    v18 = (unint64_t *)(v204 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    v104 = pthread_self();
    v105 = pthread_mach_thread_np(v104);
    v106 = v105;
    if (v163)
      v107 = *((_DWORD *)v163 + 4);
    else
      v107 = 0;
    v110 = *((_DWORD *)this + 4);
    if (v178)
    {
      DSP_Host_OffloadDictionary::get_debug_string((DSP_Host_OffloadDictionary *)&v208, (uint64_t)v178);
      if (v211 >= 0)
        v111 = &v208;
      else
        v111 = (void (***)(OS::CF::String *__hidden))v208;
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v106;
      LOWORD(v204) = 2080;
      *(_QWORD *)((char *)&v204 + 2) = "HALS_MetaDevice.cpp";
      WORD5(v204) = 1024;
      HIDWORD(v204) = 938;
      v205 = 1024;
      *(_DWORD *)v206 = v107;
      *(_WORD *)&v206[4] = 1024;
      *(_DWORD *)v207 = v110;
      *(_WORD *)&v207[4] = 2080;
      *(_QWORD *)&v207[6] = v111;
      _os_log_debug_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp][offloads] (Client ID: %d) (Device ID: %d) Aggregate context description has %s for offloads.", buf, 0x2Eu);
      if (v211 < 0)
        operator delete(v208);
    }
    else
    {
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v105;
      LOWORD(v204) = 2080;
      *(_QWORD *)((char *)&v204 + 2) = "HALS_MetaDevice.cpp";
      WORD5(v204) = 1024;
      HIDWORD(v204) = 938;
      v205 = 1024;
      *(_DWORD *)v206 = v107;
      *(_WORD *)&v206[4] = 1024;
      *(_DWORD *)v207 = v110;
      *(_WORD *)&v207[4] = 2080;
      *(_QWORD *)&v207[6] = "NOTHING";
      _os_log_debug_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp][offloads] (Client ID: %d) (Device ID: %d) Aggregate context description has %s for offloads.", buf, 0x2Eu);
    }
  }
  v20 = *((_DWORD *)this + 4);
  v198[0] = &off_1E697A420;
  v198[1] = this;
  v199 = v198;
  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)v183);
  OS::CF::Number::Number<unsigned int>(buf, v20);
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, CFSTR("device id"), (const void *)v204);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
  v21 = (HALS_MetaSubDevice *)*((_QWORD *)this + 177);
  if (v21)
  {
    v22 = HALS_MetaSubDevice::CopyRealDeviceUID((uint64_t *)&off_1E69A0F60, v21);
    v181 = &off_1E69A0F60;
    v182 = v22;
    if (v22)
      OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(theDict, CFSTR("master uid"), v22);
  }
  else
  {
    v181 = &off_1E69A0F60;
    v182 = 0;
  }
  v23 = (HALS_MetaSubDevice *)*((_QWORD *)this + 178);
  if (v23)
  {
    v24 = HALS_MetaSubDevice::CopyRealDeviceUID((uint64_t *)this, v23);
    v179 = &off_1E69A0F60;
    v180 = v24;
    if (v24)
    {
      OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(theDict, CFSTR("clock device uid"), v24);
      goto LABEL_49;
    }
  }
  else
  {
    v179 = &off_1E69A0F60;
    v180 = 0;
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)buf, *((CFDictionaryRef *)this + 167), CFSTR("clock"));
  if ((_QWORD)v204)
  {
    CFRetain((CFTypeRef)v204);
    if ((_QWORD)v204)
      OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(theDict, CFSTR("clock device uid"), (const void *)v204);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
LABEL_49:
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(buf, *((CFDictionaryRef *)this + 167), CFSTR("LDCM"));
  v25 = OS::CF::Boolean::AsBool((const __CFBoolean *)v204);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
  OS::CF::Boolean::Boolean(v26, v25);
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>(theDict, CFSTR("LDCM"), (const void *)v204);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
  v164 = (const __CFDictionary **)((char *)this + 1320);
  StackedChannelPolicy = HALS_MetaDeviceDescription::GetStackedChannelPolicy((const __CFDictionary **)this + 165);
  if ((HALS_MetaDeviceDescription::IsStackRequested((const __CFDictionary **)this + 165) & 1) != 0)
    goto LABEL_50;
  v48 = (char *)*((_QWORD *)this + 169);
  v49 = (char *)*((_QWORD *)this + 168);
  if (v48 - v49 == 24 && *((_QWORD *)v49 + 1) - *(_QWORD *)v49 > 8uLL)
    goto LABEL_50;
  if (v49 == v48)
    goto LABEL_88;
  v50 = v49 + 24;
  do
  {
    v51 = *((_QWORD *)v50 - 2) - *((_QWORD *)v50 - 3);
    v52 = v51 > 0xF || v50 == v48;
    v50 += 24;
  }
  while (!v52);
  if (v51 > 0xF)
  {
LABEL_50:
    OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)v185);
    v27 = *((_QWORD *)this + 168);
    for (i = *((_QWORD *)this + 169); v27 != i; v27 += 24)
    {
      if (*(_QWORD *)v27 != *(_QWORD *)(v27 + 8))
      {
        if (StackedChannelPolicy == 1
          && (FirstDeviceWithDirection = HALS_MetaDeviceDescription::FindFirstDeviceWithDirection((HALS_MetaSubDevice ***)v27)) != 0)
        {
          TotalNumberChannels = HALS_MetaSubDevice::GetTotalNumberChannels(FirstDeviceWithDirection, 0);
        }
        else
        {
          TotalNumberChannels = 2;
        }
        OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v208);
        OS::CF::Number::Number<unsigned int>(buf, TotalNumberChannels);
        OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>((__CFDictionary *)v209, CFSTR("channels"), (const void *)v204);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
        OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&v200);
        v31 = *(HALS_MetaSubDevice ***)v27;
        v30 = *(uint64_t **)(v27 + 8);
        v168 = v27;
        v169 = v30;
        while (v31 != (HALS_MetaSubDevice **)v30)
        {
          v32 = (__CFDictionary *)HALS_MetaSubDevice::CopyRealDeviceUID(v30, *v31);
          value = &off_1E69A0F60;
          v190 = v32;
          IsSynchPaddingOn = HALS_MetaSubDevice::IsSynchPaddingOn(*v31);
          IsDriftCorrectionOn = HALS_MetaSubDevice::IsDriftCorrectionOn(*v31);
          ExtraLatency = HALS_MetaSubDevice::GetExtraLatency(*v31, 0);
          OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&v196);
          NumberStreams = HALS_MetaSubDevice::GetNumberStreams(*v31, 0);
          if (TotalNumberChannels)
          {
            v35 = NumberStreams;
            if (NumberStreams)
            {
              v36 = 0;
              v37 = 0;
              do
              {
                v39 = (unsigned int *)HALS_MetaSubDevice::CopyStreamByIndex(*v31, 0, v36);
                if (v39)
                {
                  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v194);
                  OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(v195, CFSTR("uid"), v190);
                  OS::CF::Number::Number<unsigned int>(buf, v36);
                  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(v195, CFSTR("index"), (const void *)v204);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
                  OS::CF::Boolean::Boolean(v40, IsSynchPaddingOn);
                  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>(v195, CFSTR("synch padding"), (const void *)v204);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
                  OS::CF::Boolean::Boolean(v41, IsDriftCorrectionOn);
                  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>(v195, CFSTR("drift"), (const void *)v204);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
                  OS::CF::Number::Number<unsigned int>(v42, ExtraLatency);
                  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(v195, CFSTR("extra latency"), (const void *)v204);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
                  OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&v192);
                  v43 = v39[4];
                  v187 = 0x676C6F6270667420;
                  v188 = 0;
                  (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, char *, uint8_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v39 + 112))(v39, v43, &v187, 40, (char *)&v188 + 4, buf, 0, 0, 0);
                  v44 = *(_DWORD *)&v206[2];
                  v45 = v37;
                  for (j = *(_DWORD *)&v206[2]; j; --j)
                  {
                    if (v45 >= TotalNumberChannels)
                      OS::CF::Number::Number<int>(buf, -1);
                    else
                      OS::CF::Number::Number<unsigned int>(buf, v45);
                    OS::CF::MutableArray::AppendValue<OS::CF::Number>(v193, (const void *)v204);
                    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
                    ++v45;
                  }
                  v37 += v44;
                  OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>(v195, CFSTR("channel map"), v193);
                  OS::CF::MutableArray::AppendValue<OS::CF::MutableDictionary>((__CFArray *)v197, v195);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v192);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v194);
                }
                HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v39, v38);
                if (v37 >= TotalNumberChannels)
                  break;
                ++v36;
              }
              while (v36 < v35);
            }
          }
          OS::CF::MutableArray::AppendValue<OS::CF::MutableArray>(v201, v197);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v196);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&value);
          ++v31;
          v30 = v169;
        }
        if (OS::CF::ArrayBase<__CFArray *>::GetSize(v201))
          OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>((__CFDictionary *)v209, CFSTR("stream groups"), v201);
        OS::CF::MutableArray::AppendValue<OS::CF::MutableDictionary>(v186, v209);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v200);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v208);
        v27 = v168;
      }
    }
    if (OS::CF::ArrayBase<__CFArray *>::GetSize(v186))
      OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>(theDict, CFSTR("grid-out"), v186);
    v47 = (OS::CF::UntypedObject *)v185;
  }
  else
  {
LABEL_88:
    OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&v192);
    v53 = *((_QWORD *)this + 168);
    for (*(_QWORD *)v174 = *((_QWORD *)this + 169); v53 != *(_QWORD *)v174; v53 += 24)
    {
      v54 = *(uint64_t **)v53;
      if (*(_QWORD *)v53 != *(_QWORD *)(v53 + 8))
      {
        v55 = (HALS_MetaSubDevice *)*v54;
        if (*v54)
        {
          v56 = (__CFDictionary *)HALS_MetaSubDevice::CopyRealDeviceUID(v54, (HALS_MetaSubDevice *)*v54);
          v208 = &off_1E69A0F60;
          v209 = (HALS_System **)v56;
          v57 = HALS_MetaSubDevice::IsSynchPaddingOn(v55);
          v58 = HALS_MetaSubDevice::IsDriftCorrectionOn(v55);
          DriftCorrectionAlgorithm = HALS_MetaSubDevice::GetDriftCorrectionAlgorithm(v55);
          DriftCorrectionQuality = HALS_MetaSubDevice::GetDriftCorrectionQuality(v55);
          v61 = HALS_MetaSubDevice::GetExtraLatency(v55, 0);
          v62 = HALS_MetaSubDevice::GetNumberStreams(v55, 0);
          if (v62)
          {
            for (k = 0; k != v62; ++k)
            {
              v65 = (unsigned int *)HALS_MetaSubDevice::CopyStreamByIndex(v55, 0, k);
              if (v65)
              {
                OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v200);
                v66 = v65[4];
                v196 = 0x676C6F6270667420;
                LODWORD(v197) = 0;
                LODWORD(v194) = 0;
                (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, HALS_System **, uint8_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v65 + 112))(v65, v66, &v196, 40, &v194, buf, 0, 0, 0);
                OS::CF::Number::Number<unsigned int>(&value, *(int *)&v206[2]);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(v201, CFSTR("channels"), v190);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&value);
                OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)buf);
                OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&value);
                OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v196);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>((__CFDictionary *)v197, CFSTR("uid"), v209);
                OS::CF::Number::Number<unsigned int>(&v194, k);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>((__CFDictionary *)v197, CFSTR("index"), v195);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v194);
                OS::CF::Boolean::Boolean((OS::CF::Boolean *)&v194, v57);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>((__CFDictionary *)v197, CFSTR("synch padding"), v195);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v194);
                OS::CF::Boolean::Boolean((OS::CF::Boolean *)&v194, v58);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>((__CFDictionary *)v197, CFSTR("drift"), v195);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v194);
                OS::CF::Number::Number<unsigned int>(&v194, DriftCorrectionAlgorithm);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>((__CFDictionary *)v197, CFSTR("drift algorithm"), v195);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v194);
                OS::CF::Number::Number<unsigned int>(&v194, DriftCorrectionQuality);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>((__CFDictionary *)v197, CFSTR("drift quality"), v195);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v194);
                OS::CF::Number::Number<unsigned int>(&v194, v61);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>((__CFDictionary *)v197, CFSTR("extra latency"), v195);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v194);
                OS::CF::MutableArray::AppendValue<OS::CF::MutableDictionary>(v190, v197);
                OS::CF::MutableArray::AppendValue<OS::CF::MutableArray>((__CFArray *)v204, v190);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>(v201, CFSTR("stream groups"), (const void *)v204);
                OS::CF::MutableArray::AppendValue<OS::CF::MutableDictionary>(v193, v201);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v196);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&value);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v200);
              }
              HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v65, v64);
            }
          }
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v208);
        }
      }
    }
    if (OS::CF::ArrayBase<__CFArray *>::GetSize(v193))
      OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>(theDict, CFSTR("grid-out"), v193);
    v47 = (OS::CF::UntypedObject *)&v192;
  }
  OS::CF::UntypedObject::~UntypedObject(v47);
  v67 = (uint64_t)v199;
  if (v199)
  {
    if (v199 == v198)
    {
      v202 = &v200;
      (*(void (**)(_QWORD *, uint64_t *))(v198[0] + 24))(v198, &v200);
      goto LABEL_106;
    }
    v67 = (*(uint64_t (**)(void))(*v199 + 16))();
  }
  v202 = (uint64_t *)v67;
LABEL_106:
  OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&v194);
  if (!StackedChannelPolicy && (HALS_MetaDeviceDescription::IsStackRequested(v164) & 1) != 0)
    goto LABEL_152;
  v68 = v176;
  if (v176 != (NSObject **)&v177)
  {
    while (1)
    {
      v69 = *((_DWORD *)v68 + 7);
      if ((v69 - 2) < 2)
        break;
      if (v69 == 6)
      {
        OS::CF::Number::Number<unsigned int>(buf, 1);
        v70 = theDict;
        v71 = (const void *)v204;
        v72 = CFSTR("voice activity detection enable");
        goto LABEL_113;
      }
LABEL_114:
      v73 = v68[1];
      if (v73)
      {
        do
        {
          v74 = (NSObject **)v73;
          v73 = v73->isa;
        }
        while (v73);
      }
      else
      {
        do
        {
          v74 = (NSObject **)v68[2];
          v52 = *v74 == v68;
          v68 = v74;
        }
        while (!v52);
      }
      v68 = v74;
      if (v74 == (NSObject **)&v177)
        goto LABEL_120;
    }
    OS::CF::Number::Number<unsigned int>(buf, v69);
    v70 = theDict;
    v71 = (const void *)v204;
    v72 = CFSTR("vocal isolation type");
LABEL_113:
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(v70, v72, v71);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
    goto LABEL_114;
  }
LABEL_120:
  v75 = v178;
  if (v178)
  {
    v76 = (const __CFDictionary *)*((_QWORD *)v178 + 2);
    if (v76)
    {
      if (CFDictionaryGetCount(v76))
      {
        if (!DSP_Host_OffloadDictionary::has_all_id(v75))
        {
          v77 = v178;
          v78 = (const __CFDictionary *)*((_QWORD *)v178 + 2);
          if (v78)
          {
            if (CFDictionaryGetCount(v78))
            {
              v79 = PropertyListDeepImmutableCopy(*((const __CFString **)v77 + 2));
              *(_QWORD *)buf = &off_1E69A0DE0;
              *(_QWORD *)&v204 = v79;
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v208, "device dsp offloads input");
              OS::CF::MutableDictionary::SetValueForKey<OS::CF::Dictionary>(theDict, v208, (const void *)v204);
              if (v208)
                CFRelease(v208);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
            }
          }
        }
      }
    }
  }
  v208 = (void (**)(OS::CF::String *__hidden))v163;
  v209 = &v194;
  v80 = (uint64_t)v202;
  if (!v202)
    goto LABEL_132;
  if (v202 != &v200)
  {
    v80 = (*(uint64_t (**)(void))(*v202 + 16))();
LABEL_132:
    v212 = (_BYTE *)v80;
    goto LABEL_134;
  }
  v212 = v210;
  (*(void (**)(uint64_t *))(v200 + 24))(&v200);
LABEL_134:
  v81 = *((_QWORD *)this + 168);
  v82 = *((_QWORD *)this + 169);
  v170 = v82;
  while (v81 != v82)
  {
    v84 = *(HALS_MetaSubDevice ***)v81;
    v83 = *(uint64_t **)(v81 + 8);
    *(_QWORD *)v172 = v81;
    *(_QWORD *)v175 = v83;
    while (v84 != (HALS_MetaSubDevice **)v83)
    {
      v85 = *v84;
      v86 = HALS_MetaSubDevice::CopyRealDeviceUID(v83, *v84);
      *(_QWORD *)buf = &off_1E69A0F60;
      *(_QWORD *)&v204 = v86;
      v87 = HALS_MetaSubDevice::IsSynchPaddingOn(v85);
      v88 = HALS_MetaSubDevice::IsDriftCorrectionOn(v85);
      v89 = HALS_MetaSubDevice::GetDriftCorrectionAlgorithm(v85);
      v90 = HALS_MetaSubDevice::GetDriftCorrectionQuality(v85);
      v91 = HALS_MetaSubDevice::GetExtraLatency(v85, 1);
      v92 = HALS_MetaSubDevice::GetNumberStreams(v85, 1);
      if (v92)
      {
        for (m = 0; m != v92; ++m)
        {
          v94 = (HALS_ObjectMap *)HALS_MetaSubDevice::CopyStreamByIndex(v85, 1, m);
          v96 = v94;
          if (v94)
          {
            value = v94;
            v196 = (uint64_t)v208;
            if (!v212)
              std::__throw_bad_function_call[abi:ne180100]();
            if ((*(unsigned int (**)(_BYTE *, void **, uint64_t *))(*(_QWORD *)v212 + 48))(v212, &value, &v196))
            {
              OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&value);
              OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(v190, CFSTR("uid"), (const void *)v204);
              OS::CF::Number::Number<unsigned int>(&v196, m);
              OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(v190, CFSTR("index"), v197);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v196);
              OS::CF::Boolean::Boolean((OS::CF::Boolean *)&v196, v87);
              OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>(v190, CFSTR("synch padding"), v197);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v196);
              OS::CF::Boolean::Boolean((OS::CF::Boolean *)&v196, v88);
              OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>(v190, CFSTR("drift"), v197);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v196);
              OS::CF::Number::Number<unsigned int>(&v196, v89);
              OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(v190, CFSTR("drift algorithm"), v197);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v196);
              OS::CF::Number::Number<unsigned int>(&v196, v90);
              OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(v190, CFSTR("drift quality"), v197);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v196);
              OS::CF::Number::Number<unsigned int>(&v196, v91);
              OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(v190, CFSTR("extra latency"), v197);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v196);
              OS::CF::MutableArray::AppendValue<OS::CF::MutableDictionary>(v209[1], v190);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&value);
            }
          }
          HALS_ObjectMap::ReleaseObject(v96, v95);
        }
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
      ++v84;
      v83 = *(uint64_t **)v175;
    }
    v82 = v170;
    v81 = *(_QWORD *)v172 + 24;
  }
  v97 = v210;
  if (v212 == v210)
  {
    v98 = 4;
  }
  else
  {
    if (!v212)
      goto LABEL_152;
    v98 = 5;
    v97 = v212;
  }
  (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_152:
  if (OS::CF::ArrayBase<__CFArray *>::GetSize(v195))
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>(theDict, CFSTR("grid-in"), v195);
  v99 = HALS_MetaDeviceDescription::IsolatedUseCaseID(v164);
  v100 = theDict;
  if (!theDict
    || (v100 = (AMCP::Log::Scope_Registry *)CFDictionaryContainsKey(theDict, CFSTR("device id")), !(_DWORD)v100))
  {
    v103 = 0;
    goto LABEL_180;
  }
  *(_QWORD *)buf = &off_1E69A0F10;
  *(_QWORD *)&v204 = 0;
  v101 = theDict;
  if (theDict)
  {
    value = 0;
    if (!CFDictionaryGetValueIfPresent(theDict, CFSTR("device id"), (const void **)&value))
      goto LABEL_178;
    v102 = value ? CFGetTypeID(value) : 0;
    if (v102 != CFNumberGetTypeID())
      goto LABEL_178;
    v108 = value;
    if (value)
    {
      CFRetain(value);
      v109 = (const void *)v204;
      *(_QWORD *)&v204 = v108;
      if (v109)
        goto LABEL_177;
    }
    else
    {
      v109 = (const void *)v204;
      *(_QWORD *)&v204 = 0;
      if (v109)
LABEL_177:
        CFRelease(v109);
    }
LABEL_178:
    v101 = (const __CFNumber *)v204;
  }
  v103 = OS::CF::Number::GetValue<unsigned int>(v101, 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
LABEL_180:
  if (HIDWORD(v99))
  {
    AMCP::Log::Scope_Registry::get(v100);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v118 = (std::__shared_weak_count *)v204;
    v119 = **(NSObject ***)buf;
    if ((_QWORD)v204)
    {
      v120 = (unint64_t *)(v204 + 8);
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    v122 = os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT);
    if (v122)
    {
      v123 = pthread_self();
      v124 = pthread_mach_thread_np(v123);
      v125.i32[0] = bswap32(v99);
      v126 = vzip1_s8(v125, v125);
      v127.i64[0] = 0x1F0000001FLL;
      v127.i64[1] = 0x1F0000001FLL;
      v128.i64[0] = 0x5F0000005FLL;
      v128.i64[1] = 0x5F0000005FLL;
      v191 = 4;
      *(int8x8_t *)v129.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v128, (uint32x4_t)vsraq_n_s32(v127, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v126), 0x18uLL), 0x18uLL))), v126, (int8x8_t)0x2E002E002E002ELL);
      LODWORD(value) = vmovn_s16(v129).u32[0];
      BYTE4(value) = 0;
      *(_DWORD *)buf = 67110403;
      *(_DWORD *)&buf[4] = v124;
      LOWORD(v204) = 2080;
      *(_QWORD *)((char *)&v204 + 2) = "HALS_MetaDevice.cpp";
      WORD5(v204) = 1024;
      HIDWORD(v204) = 1136;
      v205 = 1024;
      *(_DWORD *)v206 = v103;
      *(_WORD *)&v206[4] = 2081;
      *(_QWORD *)v207 = "has isolated audio use case";
      *(_WORD *)&v207[8] = 2081;
      *(_QWORD *)&v207[10] = &value;
      _os_log_impl(&dword_1B57BA000, v119, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d [hal_dsp][iso] (Device ID: %d) %{private}s %{private}s.", buf, 0x32u);
      if (v191 < 0)
        operator delete(value);
    }
    v130 = v177;
    if ((_QWORD)v177)
    {
      v131 = &v177;
      do
      {
        v132 = (uint64_t *)v130;
        v133 = v131;
        v134 = *(_DWORD *)(v130 + 28);
        v135 = (uint64_t *)(v130 + 8);
        if (v134 >= 6)
        {
          v135 = v132;
          v131 = (__int128 *)v132;
        }
        v130 = *v135;
      }
      while (v130);
      if (v131 != &v177)
      {
        if (v134 < 6)
          v132 = (uint64_t *)v133;
        if (*((_DWORD *)v132 + 7) <= 6u)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v122);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v136 = (std::__shared_weak_count *)v204;
          v137 = **(NSObject ***)buf;
          if ((_QWORD)v204)
          {
            v138 = (unint64_t *)(v204 + 8);
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
              std::__shared_weak_count::__release_weak(v136);
            }
          }
          if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
          {
            v140 = pthread_self();
            v141 = pthread_mach_thread_np(v140);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v141;
            LOWORD(v204) = 2080;
            *(_QWORD *)((char *)&v204 + 2) = "HALS_MetaDevice.cpp";
            WORD5(v204) = 1024;
            HIDWORD(v204) = 1138;
            v205 = 1024;
            *(_DWORD *)v206 = v103;
            _os_log_impl(&dword_1B57BA000, v137, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d [hal_dsp][iso][mtd] (Device ID: %d) has DSP type property for mtd.", buf, 0x1Eu);
          }
        }
      }
    }
  }
  else if (!*((_QWORD *)&v177 + 1))
  {
    AMCP::Log::Scope_Registry::get(v100);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v112 = (std::__shared_weak_count *)v204;
    v113 = **(NSObject ***)buf;
    if ((_QWORD)v204)
    {
      v114 = (unint64_t *)(v204 + 8);
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
    {
      v116 = pthread_self();
      v117 = pthread_mach_thread_np(v116);
      *(_DWORD *)buf = 67110147;
      *(_DWORD *)&buf[4] = v117;
      LOWORD(v204) = 2080;
      *(_QWORD *)((char *)&v204 + 2) = "HALS_MetaDevice.cpp";
      WORD5(v204) = 1024;
      HIDWORD(v204) = 1143;
      v205 = 1024;
      *(_DWORD *)v206 = v103;
      *(_WORD *)&v206[4] = 2081;
      *(_QWORD *)v207 = "Has no isolated audio use case nor any DSP Types";
      _os_log_debug_impl(&dword_1B57BA000, v113, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp][iso] (Device ID: %d) %{private}s.", buf, 0x28u);
    }
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v194);
  v142 = v202;
  if (v202 == &v200)
  {
    v143 = 4;
    v142 = &v200;
    goto LABEL_217;
  }
  if (v202)
  {
    v143 = 5;
LABEL_217:
    (*(void (**)(void))(*v142 + 8 * v143))();
  }
  v144 = HALS_MetaDeviceDescription::IsPrivate(v164);
  v145 = (__CFDictionary *)HALS_MetaDeviceDescription::CopyTapList(*((CFDictionaryRef *)this + 167));
  v208 = &off_1E69A0EA8;
  v209 = (HALS_System **)v145;
  if (!v145)
    goto LABEL_246;
  OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&value);
  for (n = 0; (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize((const __CFArray *)v209) > n; ++n)
  {
    OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)buf, (uint64_t)&v208, n);
    if (!(_QWORD)v204)
      goto LABEL_239;
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v196, (CFDictionaryRef)v204, CFSTR("uid"));
    v192 = 0;
    v193 = 0;
    HALS_System::GetInstance(&v194, 0, &v192);
    v148 = (HALS_ObjectMap *)HALS_System::CopyTapByUUID(v194, v197);
    v149 = (std::__shared_weak_count *)v195;
    if (v195)
    {
      v150 = (unint64_t *)((char *)v195 + 8);
      do
        v151 = __ldaxr(v150);
      while (__stlxr(v151 - 1, v150));
      if (!v151)
      {
        ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
        std::__shared_weak_count::__release_weak(v149);
      }
    }
    v152 = (std::__shared_weak_count *)v193;
    if (!v193)
      goto LABEL_231;
    v153 = (unint64_t *)((char *)v193 + 8);
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
      if (v148)
      {
LABEL_232:
        if (*((_BYTE *)v148 + 83))
          v155 = v144;
        else
          v155 = 1;
        if (v155 == 1)
          OS::CF::MutableArray::AppendValue<OS::CF::Dictionary>(v190, (const void *)v204);
      }
    }
    else
    {
LABEL_231:
      if (v148)
        goto LABEL_232;
    }
    HALS_ObjectMap::ReleaseObject(v148, v147);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v196);
LABEL_239:
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
  }
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>(theDict, CFSTR("taps"), v190);
  if ((HALS_MetaDeviceDescription::IsPrivate(v164) & 1) != 0)
  {
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(buf, *((CFDictionaryRef *)this + 167), CFSTR("tapautostart"));
    if (OS::CF::Boolean::AsBool((const __CFBoolean *)v204))
      v156 = HALS_MetaDeviceDescription::IsPrivate(v164);
    else
      v156 = 0;
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
    OS::CF::Boolean::Boolean(v157, v156);
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>(theDict, CFSTR("tapautostart"), (const void *)v204);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&value);
LABEL_246:
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v208);
  v158 = theDict;
  if (theDict)
    CFRetain(theDict);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v179);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v181);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v183);
  v159 = v199;
  if (v199 == v198)
  {
    v160 = 4;
    v159 = v198;
LABEL_252:
    (*(void (**)(void))(*v159 + 8 * v160))();
  }
  else if (v199)
  {
    v160 = 5;
    goto LABEL_252;
  }
  v161 = v178;
  v178 = 0;
  if (v161)
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100]((uint64_t)v161);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v177);
  return v158;
}

void sub_1B59B6F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t HALS_MetaDevice::IsInputMutedForClient(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;

  if (!a2)
    return 0;
  v2 = atomic_load((unsigned __int8 *)(a2 + 696));
  return v2 & 1;
}

HALS_PlatformBehaviors *HALS_MetaDevice::HasInternalIOContext(HALS_MetaDevice *this)
{
  uint64_t *platform_behaviors;
  HALS_PlatformBehaviors *result;
  uint64_t *v3;

  platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(this);
  result = (HALS_PlatformBehaviors *)(*(uint64_t (**)(uint64_t *))(*platform_behaviors + 16))(platform_behaviors);
  if ((_DWORD)result != 1)
  {
    v3 = HALS_PlatformBehaviors::get_platform_behaviors(result);
    return (HALS_PlatformBehaviors *)((*(unsigned int (**)(uint64_t *))(*v3 + 16))(v3) == 2);
  }
  return result;
}

uint64_t HALS_MetaDevice::_GetStreamByStreamID(HALS_MetaDevice *this, int a2)
{
  uint64_t v2;
  char v3;
  char *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = (char *)this + 24 * v2;
    v5 = (uint64_t *)*((_QWORD *)v4 + 180);
    v6 = (uint64_t *)*((_QWORD *)v4 + 181);
    if (v5 == v6)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      do
      {
        v9 = *v5++;
        v8 = v9;
        if (*(_DWORD *)(v9 + 16) == a2)
          v7 = v8;
      }
      while (v5 != v6);
    }
    v10 = (v7 == 0) & v3;
    v2 = 1;
    v3 = 0;
  }
  while ((v10 & 1) != 0);
  return v7;
}

uint64_t HALS_MetaDevice::_GetStreamByRealStreamID(HALS_MetaDevice *this, int a2)
{
  uint64_t v4;
  char v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v4 = 0;
  v5 = 1;
  do
  {
    v6 = (char *)this + 24 * v4;
    v7 = (uint64_t *)*((_QWORD *)v6 + 180);
    if (v7 == *((uint64_t **)v6 + 181))
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v9 = (uint64_t **)(v6 + 1448);
      do
      {
        v11 = *v7++;
        v10 = v11;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 288))(v11) == a2)
          v8 = v10;
      }
      while (v7 != *v9);
    }
    v12 = (v8 == 0) & v5;
    v4 = 1;
    v5 = 0;
  }
  while ((v12 & 1) != 0);
  return v8;
}

uint64_t HALS_MetaDevice::_HandleObjectPropertiesChanged(HALS_MetaDevice *this, const HALS_Object *a2, unsigned int a3, unsigned int a4, AudioObjectPropertyAddress *a5, CAPropertyAddressList *a6, CAPropertyAddressListVector *a7)
{
  uint64_t result;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  int v19;
  AudioObjectPropertyScope *p_mScope;
  uint64_t v21;
  int v22;
  const HALS_Object *v24;
  int v25;
  char v26;
  char v27;
  uint64_t v28;
  AudioObjectPropertySelector mSelector;
  const AudioObjectPropertyAddress *v30;
  int v31;
  int v32;
  uint64_t v33;
  char v34;
  char v35;
  char *v36;
  unsigned int **v37;
  unsigned int ***v38;
  unsigned int *v39;
  const AudioObjectPropertyAddress *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  CAPropertyAddressList *v45;
  const AudioObjectPropertyAddress *v46;
  const AudioObjectPropertyAddress *v47;
  CAPropertyAddressListVector *v48;
  const AudioObjectPropertyAddress *v49;
  const AudioObjectPropertyAddress *v50;
  const AudioObjectPropertyAddress *v51;
  const AudioObjectPropertyAddress *v52;
  const AudioObjectPropertyAddress *v53;
  const AudioObjectPropertyAddress *v54;
  const AudioObjectPropertyAddress *v55;
  const AudioObjectPropertyAddress *v56;
  const AudioObjectPropertyAddress *v57;
  _BOOL4 v58;
  _BOOL4 v59;
  const AudioObjectPropertyAddress *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  HALS_Object *v65;
  HALS_ObjectMap *v66;
  HALB_Mutex *v67;
  const AudioObjectPropertyAddress *v68;
  unsigned int v69;
  uint64_t v70;
  unsigned __int8 v71;
  unsigned int v72;
  CAPropertyAddressList *v73;
  AudioObjectPropertyAddress v74;
  void **v75[4];
  uint64_t v76;
  __int128 v77;
  uint64_t (*v78)(uint64_t);
  void *v79;
  _QWORD v80[2];
  BOOL v81;
  unsigned __int8 v82[10];

  result = (*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 40))(this);
  if (!(_DWORD)result)
    return result;
  *(_WORD *)v82 = 0;
  if (a4)
  {
    v17 = 0;
    LOBYTE(v18) = 0;
    v19 = 0;
    p_mScope = &a5->mScope;
    v21 = a4;
    while (1)
    {
      v22 = *(p_mScope - 1);
      if (v22 > 1983996970)
      {
        if (v22 != 1986622324 && v22 != 1983996971)
          goto LABEL_15;
      }
      else
      {
        if (v22 == 1684629094)
        {
          v17 = 1;
          goto LABEL_15;
        }
        if (v22 != 1934647636)
          goto LABEL_15;
      }
      v16 = *(_QWORD *)p_mScope;
      v15 = v22 >> 8;
      v19 = 1;
      v18 = *(p_mScope - 1);
LABEL_15:
      p_mScope += 3;
      if (!--v21)
        goto LABEL_18;
    }
  }
  v19 = 0;
  LOBYTE(v18) = 0;
  v17 = 0;
LABEL_18:
  v70 = v16;
  v69 = v15;
  v71 = v18;
  v72 = a3;
  v24 = (const HALS_Object *)*((_QWORD *)this + 178);
  v73 = a6;
  if ((v24 || (v24 = (const HALS_Object *)*((_QWORD *)this + 177)) != 0)
    && (v24 == a2 || (v25 = *((_DWORD *)a2 + 4), v25 == HALS_MetaSubDevice::GetRealDeviceObjectID(v24))))
  {
    if (a4)
    {
      v26 = 0;
      v27 = 0;
      v28 = a4;
      do
      {
        mSelector = a5->mSelector;
        if (HALS_MetaDevice::PassRealNotificationToClient((HALS_MetaDevice *)a5->mSelector, (const AudioObjectPropertyAddress *)1))
        {
          CAPropertyAddressList::AppendUniqueItem(a6, a5, v30);
          mSelector = a5->mSelector;
        }
        if (mSelector == 1853059700)
          v27 = 1;
        if (mSelector == 1853059619)
          v26 = 1;
        ++a5;
        --v28;
      }
      while (v28);
    }
    else
    {
      v27 = 0;
      v26 = 0;
    }
    v31 = v27 & 1;
    v32 = v26 & 1;
    if ((v31 & 1) != 0)
    {
LABEL_36:
      v33 = 0;
      v34 = 1;
      do
      {
        v35 = v34;
        v36 = (char *)this + 24 * v33;
        v37 = (unsigned int **)*((_QWORD *)v36 + 180);
        if (v37 != *((unsigned int ***)v36 + 181))
        {
          v38 = (unsigned int ***)(v36 + 1448);
          do
          {
            v39 = *v37;
            if (!(*(unsigned int (**)(unsigned int *))(*(_QWORD *)*v37 + 280))(*v37))
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 272))(v39);
              v41 = (void *)v39[4];
              v42 = *(_QWORD *)a7;
              while (v42 != *((_QWORD *)a7 + 1))
              {
                v43 = *(void **)(v42 + 24);
                v42 += 32;
                if (v43 == v41)
                {
LABEL_49:
                  v45 = (CAPropertyAddressList *)(v42 - 32);
                  if (v31)
                  {
                    *(_QWORD *)&v77 = 0x676C6F6270667420;
                    DWORD2(v77) = 0;
                    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v42 - 32), (AudioObjectPropertyAddress *)&v77, v40);
                    *(_QWORD *)&v77 = 0x676C6F6273666D74;
                    DWORD2(v77) = 0;
                    CAPropertyAddressList::AppendUniqueItem(v45, (AudioObjectPropertyAddress *)&v77, v46);
                  }
                  if (v32)
                  {
                    *(_QWORD *)&v77 = 0x676C6F6270667461;
                    DWORD2(v77) = 0;
                    CAPropertyAddressList::AppendUniqueItem(v45, (AudioObjectPropertyAddress *)&v77, v40);
                    *(_QWORD *)&v77 = 0x676C6F6273666D61;
                    DWORD2(v77) = 0;
                    CAPropertyAddressList::AppendUniqueItem(v45, (AudioObjectPropertyAddress *)&v77, v47);
                  }
                  goto LABEL_40;
                }
              }
              v77 = 0uLL;
              v78 = 0;
              v79 = v41;
              CAPropertyAddressListVector::AppendItem(a7, (uint64_t **)&v77);
              v42 = *(_QWORD *)a7;
              while (v42 != *((_QWORD *)a7 + 1))
              {
                v44 = *(_QWORD *)(v42 + 24);
                v42 += 32;
                if (v44 == v39[4])
                  goto LABEL_49;
              }
            }
LABEL_40:
            ++v37;
          }
          while (v37 != *v38);
        }
        v34 = 0;
        v33 = 1;
      }
      while ((v35 & 1) != 0);
      goto LABEL_54;
    }
  }
  else
  {
    v31 = 0;
    v32 = 0;
  }
  if (v32)
    goto LABEL_36;
LABEL_54:
  if ((v17 & 1) != 0)
  {
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)&v77);
    HALS_DeviceState::Capture((HALS_DeviceState *)&v77, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    HALS_MetaDeviceDescription::UpdateSubDeviceList((CFDictionaryRef *)this + 165, 0);
    HALS_MetaDevice::_UpdateStreams((const __CFDictionary **)this, (BOOL *)v82);
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v75);
    HALS_DeviceState::Capture((HALS_DeviceState *)v75, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    HALS_DeviceState::Compare((HALS_DeviceState *)&v77, (const HALS_DeviceState *)v75, (const AudioObjectPropertyAddress *)v73, (CAPropertyAddressList **)a7, v48);
    *(_QWORD *)&v74.mSelector = 0x676C6F62616D7374;
    v74.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem(v73, &v74, v49);
    *(_QWORD *)&v74.mSelector = 0x676C6F6261706364;
    v74.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem(v73, &v74, v50);
    *(_QWORD *)&v74.mSelector = 0x676C6F6267727570;
    v74.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem(v73, &v74, v51);
    *(_QWORD *)&v74.mSelector = 0x676C6F6261677270;
    v74.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem(v73, &v74, v52);
    *(_QWORD *)&v74.mSelector = 0x676C6F6261746170;
    v74.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem(v73, &v74, v53);
    *(_QWORD *)&v74.mSelector = 0x676C6F6274617023;
    v74.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem(v73, &v74, v54);
    *(_QWORD *)&v74.mSelector = 0x676C6F6261636F6DLL;
    v74.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem(v73, &v74, v55);
    *(_QWORD *)&v74.mSelector = 0x676C6F6273746D23;
    v74.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem(v73, &v74, v56);
    v58 = v82[1];
    v59 = v82[0];
    if (v82[1] | v82[0])
    {
      *(_QWORD *)&v74.mSelector = 0x676C6F6273746D23;
      v74.mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(v73, &v74, v57);
      if (v58)
      {
        *(_QWORD *)&v74.mSelector = 0x696E707473746D23;
        v74.mElement = 0;
        CAPropertyAddressList::AppendUniqueItem(v73, &v74, v60);
      }
      if (v59)
      {
        *(_QWORD *)&v74.mSelector = 0x6F75747073746D23;
        v74.mElement = 0;
        CAPropertyAddressList::AppendUniqueItem(v73, &v74, v60);
      }
      if (*(_QWORD *)v73 == *((_QWORD *)v73 + 1))
      {
        v61 = *(uint64_t **)a7;
        while (v61 != *((uint64_t **)a7 + 1))
        {
          v62 = *v61;
          v63 = v61[1];
          v61 += 4;
          if (v62 != v63)
            goto LABEL_64;
        }
      }
      else
      {
LABEL_64:
        *(_QWORD *)&v74.mSelector = 0x676C6F6264696666;
        v74.mElement = 0;
        CAPropertyAddressList::AppendUniqueItem(v73, &v74, v60);
      }
    }
    *(_QWORD *)&v74.mSelector = &v76;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v75[2]);
    v75[0] = (void **)v80;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](v75);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v78);
  }
  if (v72 && v19)
  {
    v64 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v72);
    v66 = (HALS_ObjectMap *)v64;
    if (v64)
    {
      *(_QWORD *)&v77 = MEMORY[0x1E0C809B0];
      *((_QWORD *)&v77 + 1) = 0x40000000;
      v78 = ___ZN15HALS_MetaDevice28InheritSubdeviceDSPForClientEbP11HALS_Client_block_invoke;
      v79 = &__block_descriptor_tmp_126;
      v81 = (_DWORD)v70 == 1768845428;
      v80[0] = this;
      v80[1] = v64;
      v67 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v67, (uint64_t)&v77);
      LODWORD(v77) = v71 | (v69 << 8);
      *(_QWORD *)((char *)&v77 + 4) = v70;
      CAPropertyAddressList::AppendUniqueItem(v73, (AudioObjectPropertyAddress *)&v77, v68);
    }
    HALS_ObjectMap::ReleaseObject(v66, v65);
  }
  return v17 & 1;
}

void sub_1B59B7978(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  HALS_ObjectMap *v26;

  HALS_ObjectMap::ReleaseObject(v26, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaDevice::_HandleGroupObjectPropertiesChanged(HALS_MetaDevice *this, unsigned int a2, unsigned int a3, int a4, const unsigned int *a5, const unsigned int *a6, unsigned int a7, AudioObjectPropertyAddress *a8, CAPropertyAddressList *a9, CAPropertyAddressListVector *a10)
{
  uint64_t result;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  AudioObjectPropertyScope *p_mScope;
  uint64_t v22;
  int v23;
  HALS_MetaSubDevice *v25;
  int v26;
  int v27;
  uint64_t v28;
  AudioObjectPropertyAddress *v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  AudioObjectPropertySelector mSelector;
  const AudioObjectPropertyAddress *v35;
  uint64_t v36;
  char v37;
  char v38;
  char *v39;
  unsigned int **v40;
  unsigned int ***v41;
  unsigned int *v42;
  const AudioObjectPropertyAddress *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  CAPropertyAddressList *v48;
  const AudioObjectPropertyAddress *v49;
  const AudioObjectPropertyAddress *v50;
  uint64_t i;
  const AudioObjectPropertyAddress *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  CAPropertyAddressList *v58;
  unint64_t v59;
  AudioObjectPropertyAddress *v60;
  unint64_t v61;
  CAPropertyAddressListVector *v62;
  const AudioObjectPropertyAddress *v63;
  const AudioObjectPropertyAddress *v64;
  const AudioObjectPropertyAddress *v65;
  const AudioObjectPropertyAddress *v66;
  const AudioObjectPropertyAddress *v67;
  const AudioObjectPropertyAddress *v68;
  const AudioObjectPropertyAddress *v69;
  const AudioObjectPropertyAddress *v70;
  const AudioObjectPropertyAddress *v71;
  _BOOL4 v72;
  _BOOL4 v73;
  const AudioObjectPropertyAddress *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  HALS_Object *v79;
  HALS_ObjectMap *v80;
  HALB_Mutex *v81;
  const AudioObjectPropertyAddress *v82;
  unsigned int v83;
  unsigned __int8 v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  char v88;
  int v89;
  uint64_t v90;
  AudioObjectPropertyAddress v92;
  void **v93[4];
  uint64_t v94;
  __int128 v95;
  uint64_t (*v96)(uint64_t);
  void *v97;
  _QWORD v98[2];
  BOOL v99;
  unsigned __int8 v100[10];

  result = (*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 40))(this);
  if ((_DWORD)result)
  {
    *(_WORD *)v100 = 0;
    if (a7)
    {
      LOBYTE(v19) = 0;
      v20 = 0;
      p_mScope = &a8->mScope;
      v90 = v18;
      v22 = a7;
      while (1)
      {
        v23 = *(p_mScope - 1);
        if (v23 > 1983996970)
          break;
        if (v23 == 1934647636)
          goto LABEL_11;
        if (v23 == 1684629094)
        {
          v83 = v17;
          v88 = 0;
          v86 = 1;
          goto LABEL_17;
        }
LABEL_12:
        p_mScope += 3;
        if (!--v22)
        {
          v83 = v17;
          v86 = 0;
          v88 = 1;
          goto LABEL_17;
        }
      }
      if (v23 != 1986622324 && v23 != 1983996971)
        goto LABEL_12;
LABEL_11:
      v90 = *(_QWORD *)p_mScope;
      v17 = v23 >> 8;
      v20 = 1;
      v19 = *(p_mScope - 1);
      goto LABEL_12;
    }
    v20 = 0;
    LOBYTE(v19) = 0;
    v86 = 0;
    v88 = 1;
    v90 = v18;
LABEL_17:
    v85 = v20;
    v25 = (HALS_MetaSubDevice *)*((_QWORD *)this + 178);
    if (!v25)
      v25 = (HALS_MetaSubDevice *)*((_QWORD *)this + 177);
    v84 = v19;
    v26 = 0;
    v87 = a3;
    v89 = a4;
    v27 = 0;
    if (v25 && a4)
    {
      v28 = 0;
      v29 = a8;
      while (1)
      {
        v30 = a5[v28];
        if (v30 == *((_DWORD *)v25 + 4) || v30 == HALS_MetaSubDevice::GetRealDeviceObjectID(v25))
          break;
        v29 += a6[v28++];
        if (a4 == v28)
        {
          v26 = 0;
          v27 = 0;
          goto LABEL_38;
        }
      }
      v31 = a6[v28];
      if ((_DWORD)v31)
      {
        v32 = 0;
        v33 = 0;
        do
        {
          mSelector = v29->mSelector;
          if (HALS_MetaDevice::PassRealNotificationToClient((HALS_MetaDevice *)v29->mSelector, (const AudioObjectPropertyAddress *)1))
          {
            CAPropertyAddressList::AppendUniqueItem(a9, v29, v35);
            mSelector = v29->mSelector;
          }
          if (mSelector == 1853059700)
            v33 = 1;
          if (mSelector == 1853059619)
            v32 = 1;
          ++v29;
          --v31;
        }
        while (v31);
      }
      else
      {
        v33 = 0;
        v32 = 0;
      }
      v26 = v33 & 1;
      v27 = v32 & 1;
    }
LABEL_38:
    if ((v26 & 1) != 0 || v27)
    {
      v36 = 0;
      v37 = 1;
      do
      {
        v38 = v37;
        v39 = (char *)this + 24 * v36;
        v40 = (unsigned int **)*((_QWORD *)v39 + 180);
        if (v40 != *((unsigned int ***)v39 + 181))
        {
          v41 = (unsigned int ***)(v39 + 1448);
          do
          {
            v42 = *v40;
            if (!(*(unsigned int (**)(unsigned int *))(*(_QWORD *)*v40 + 280))(*v40))
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v42 + 272))(v42);
              v44 = (void *)v42[4];
              v45 = *(_QWORD *)a10;
              while (v45 != *((_QWORD *)a10 + 1))
              {
                v46 = *(void **)(v45 + 24);
                v45 += 32;
                if (v46 == v44)
                {
LABEL_53:
                  v48 = (CAPropertyAddressList *)(v45 - 32);
                  if (v26)
                  {
                    *(_QWORD *)&v95 = 0x676C6F6270667420;
                    DWORD2(v95) = 0;
                    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v45 - 32), (AudioObjectPropertyAddress *)&v95, v43);
                    *(_QWORD *)&v95 = 0x676C6F6273666D74;
                    DWORD2(v95) = 0;
                    CAPropertyAddressList::AppendUniqueItem(v48, (AudioObjectPropertyAddress *)&v95, v49);
                  }
                  if (v27)
                  {
                    *(_QWORD *)&v95 = 0x676C6F6270667461;
                    DWORD2(v95) = 0;
                    CAPropertyAddressList::AppendUniqueItem(v48, (AudioObjectPropertyAddress *)&v95, v43);
                    *(_QWORD *)&v95 = 0x676C6F6273666D61;
                    DWORD2(v95) = 0;
                    CAPropertyAddressList::AppendUniqueItem(v48, (AudioObjectPropertyAddress *)&v95, v50);
                  }
                  goto LABEL_44;
                }
              }
              v95 = 0uLL;
              v96 = 0;
              v97 = v44;
              CAPropertyAddressListVector::AppendItem(a10, (uint64_t **)&v95);
              v45 = *(_QWORD *)a10;
              while (v45 != *((_QWORD *)a10 + 1))
              {
                v47 = *(_QWORD *)(v45 + 24);
                v45 += 32;
                if (v47 == v42[4])
                  goto LABEL_53;
              }
            }
LABEL_44:
            ++v40;
          }
          while (v40 != *v41);
        }
        v37 = 0;
        v36 = 1;
      }
      while ((v38 & 1) != 0);
    }
    if (v89)
    {
      for (i = 0; i != v89; ++i)
      {
        v53 = (*(uint64_t (**)(HALS_MetaDevice *, _QWORD))(*(_QWORD *)this + 952))(this, a5[i]);
        if (v53
          || (v53 = (*(uint64_t (**)(HALS_MetaDevice *, _QWORD))(*(_QWORD *)this + 960))(this, a5[i])) != 0)
        {
          v54 = (void *)*(unsigned int *)(v53 + 16);
          v55 = *(_QWORD *)a10;
          while (v55 != *((_QWORD *)a10 + 1))
          {
            v56 = *(void **)(v55 + 24);
            v55 += 32;
            if (v56 == v54)
            {
LABEL_69:
              v58 = (CAPropertyAddressList *)(v55 - 32);
              goto LABEL_71;
            }
          }
          v95 = 0uLL;
          v96 = 0;
          v97 = v54;
          CAPropertyAddressListVector::AppendItem(a10, (uint64_t **)&v95);
          v55 = *(_QWORD *)a10;
          while (v55 != *((_QWORD *)a10 + 1))
          {
            v57 = *(_QWORD *)(v55 + 24);
            v55 += 32;
            if (v57 == *(_DWORD *)(v53 + 16))
              goto LABEL_69;
          }
          v58 = 0;
LABEL_71:
          if (a6[i])
          {
            v59 = 0;
            v60 = a8;
            do
            {
              CAPropertyAddressList::AppendUniqueItem(v58, v60, v52);
              ++v59;
              v61 = a6[i];
              ++v60;
            }
            while (v59 < v61);
          }
          else
          {
            LODWORD(v61) = 0;
          }
        }
        else
        {
          LODWORD(v61) = a6[i];
        }
        a8 += v61;
      }
    }
    if ((v88 & 1) == 0)
    {
      HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)&v95);
      HALS_DeviceState::Capture((HALS_DeviceState *)&v95, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
      HALS_MetaDeviceDescription::UpdateSubDeviceList((CFDictionaryRef *)this + 165, 0);
      HALS_MetaDevice::_UpdateStreams((const __CFDictionary **)this, (BOOL *)v100);
      HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v93);
      HALS_DeviceState::Capture((HALS_DeviceState *)v93, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
      HALS_DeviceState::Compare((HALS_DeviceState *)&v95, (const HALS_DeviceState *)v93, (const AudioObjectPropertyAddress *)a9, (CAPropertyAddressList **)a10, v62);
      *(_QWORD *)&v92.mSelector = 0x676C6F62616D7374;
      v92.mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a9, &v92, v63);
      *(_QWORD *)&v92.mSelector = 0x676C6F6261706364;
      v92.mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a9, &v92, v64);
      *(_QWORD *)&v92.mSelector = 0x676C6F6267727570;
      v92.mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a9, &v92, v65);
      *(_QWORD *)&v92.mSelector = 0x676C6F6261677270;
      v92.mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a9, &v92, v66);
      *(_QWORD *)&v92.mSelector = 0x676C6F6261746170;
      v92.mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a9, &v92, v67);
      *(_QWORD *)&v92.mSelector = 0x676C6F6274617023;
      v92.mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a9, &v92, v68);
      *(_QWORD *)&v92.mSelector = 0x676C6F6261636F6DLL;
      v92.mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a9, &v92, v69);
      *(_QWORD *)&v92.mSelector = 0x676C6F6273746D23;
      v92.mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a9, &v92, v70);
      v72 = v100[1];
      v73 = v100[0];
      if (v100[1] | v100[0])
      {
        *(_QWORD *)&v92.mSelector = 0x676C6F6273746D23;
        v92.mElement = 0;
        CAPropertyAddressList::AppendUniqueItem(a9, &v92, v71);
        if (v72)
        {
          *(_QWORD *)&v92.mSelector = 0x696E707473746D23;
          v92.mElement = 0;
          CAPropertyAddressList::AppendUniqueItem(a9, &v92, v74);
        }
        if (v73)
        {
          *(_QWORD *)&v92.mSelector = 0x6F75747073746D23;
          v92.mElement = 0;
          CAPropertyAddressList::AppendUniqueItem(a9, &v92, v74);
        }
        if (*(_QWORD *)a9 == *((_QWORD *)a9 + 1))
        {
          v75 = *(uint64_t **)a10;
          while (v75 != *((uint64_t **)a10 + 1))
          {
            v76 = *v75;
            v77 = v75[1];
            v75 += 4;
            if (v76 != v77)
              goto LABEL_88;
          }
        }
        else
        {
LABEL_88:
          *(_QWORD *)&v92.mSelector = 0x676C6F6264696666;
          v92.mElement = 0;
          CAPropertyAddressList::AppendUniqueItem(a9, &v92, v74);
        }
      }
      *(_QWORD *)&v92.mSelector = &v94;
      std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
      std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v93[2]);
      v93[0] = (void **)v98;
      std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](v93);
      std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v96);
    }
    if (v87 && v85)
    {
      v78 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v87);
      v80 = (HALS_ObjectMap *)v78;
      if (v78)
      {
        *(_QWORD *)&v95 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v95 + 1) = 0x40000000;
        v96 = ___ZN15HALS_MetaDevice28InheritSubdeviceDSPForClientEbP11HALS_Client_block_invoke;
        v97 = &__block_descriptor_tmp_126;
        v99 = (_DWORD)v90 == 1768845428;
        v98[0] = this;
        v98[1] = v78;
        v81 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v81, (uint64_t)&v95);
        LODWORD(v95) = v84 | (v83 << 8);
        *(_QWORD *)((char *)&v95 + 4) = v90;
        CAPropertyAddressList::AppendUniqueItem(a9, (AudioObjectPropertyAddress *)&v95, v82);
      }
      HALS_ObjectMap::ReleaseObject(v80, v79);
    }
    return v86;
  }
  return result;
}

void sub_1B59B8168(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  HALS_ObjectMap *v28;

  HALS_ObjectMap::ReleaseObject(v28, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaDevice::PassRealNotificationToClient(HALS_MetaDevice *this, const AudioObjectPropertyAddress *a2)
{
  int v2;
  uint64_t result;
  int v4;

  v2 = (int)this;
  result = 0;
  if (v2 > 1935762291)
  {
    if (v2 <= 1935960433)
    {
      if (v2 == 1935762292 || v2 == 1935763060)
        return 1;
      v4 = 1935894638;
    }
    else
    {
      if (v2 <= 1936092531)
      {
        if (v2 != 1935960434)
        {
          v4 = 1936092513;
          goto LABEL_20;
        }
        return 1;
      }
      if (v2 == 1936092532)
        return 1;
      v4 = 1952805485;
    }
LABEL_20:
    if (v2 != v4)
      return result;
    return 1;
  }
  if (v2 > 1853059699)
  {
    if (v2 == 1853059700)
      return (uint64_t)a2;
    if (v2 == 1885762592)
      return 1;
    v4 = 1885762657;
    goto LABEL_20;
  }
  if (v2 == 1684629094 || v2 == 1819569763)
    return 1;
  if (v2 == 1853059619)
    return a2;
  else
    return 0;
}

void HALS_MetaDevice::_UpdateStreams(const __CFDictionary **this, BOOL *a2)
{
  BOOL *v2;
  const __CFDictionary **v4;
  BOOL updated;
  const __CFDictionary *v6;
  uint64_t **v7;
  const __CFDictionary *v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  HALS_Object *v16;
  HALS_Device *v17;
  HALS_Object *v18;
  HALS_Object *v19;
  uint64_t v20;
  HALS_ObjectMap *v21;
  HALS_Object *v22;
  HALS_MetaStream *v23;
  HALS_MetaStream **v24;
  const __CFDictionary *v25;
  const __CFDictionary *v26;
  const __CFDictionary *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  HALS_MetaStream **v33;
  const __CFDictionary *v34;
  const __CFDictionary *v35;
  HALS_MetaStream *v36;
  unint64_t v37;
  const __CFDictionary *v38;
  HALS_ObjectMap *v39;
  HALS_Object *v40;
  char *v41;
  const __CFDictionary *v42;
  char *v43;
  const __CFDictionary *v44;
  unsigned __int8 v45;
  int v46;
  uint64_t v47;
  const __CFDictionary *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  HALS_Object *v52;
  HALS_Device *v53;
  HALS_Object *v54;
  HALS_Object *v55;
  uint64_t v56;
  HALS_ObjectMap *v57;
  HALS_Object *v58;
  HALS_MetaStream *v59;
  HALS_MetaStream **v60;
  const __CFDictionary *v61;
  const __CFDictionary *v62;
  const __CFDictionary *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  HALS_MetaStream **v69;
  const __CFDictionary *v70;
  const __CFDictionary *v71;
  HALS_MetaStream *v72;
  const __CFDictionary *v73;
  const __CFDictionary *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  HALS_ObjectMap *v78;
  HALS_Object *v79;
  uint64_t v80;
  int v81;
  HALS_Object *v82;
  uint64_t v83;
  uint64_t *v84;
  const __CFDictionary *v85;
  const __CFDictionary *v86;
  const __CFDictionary *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  const __CFDictionary *v94;
  const __CFDictionary *v95;
  uint64_t v96;
  unint64_t v97;
  const __CFDictionary *v98;
  HALS_ObjectMap *v99;
  HALS_Object *v100;
  char *v101;
  const __CFDictionary *v102;
  char *v103;
  char v104;
  char v105;
  char v106;
  int NumberStreams;
  uint64_t v108;
  uint64_t v109;
  unsigned int *v110;
  uint64_t v111;
  int v112;
  HALS_Object *v113;
  BOOL v114;
  const __CFDictionary *v116;
  const __CFDictionary *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;

  v2 = a2;
  v124 = *MEMORY[0x1E0C80C00];
  v4 = this + 165;
  if ((HALS_MetaDeviceDescription::IsStackRequested(this + 165) & 1) != 0)
    goto LABEL_2;
  v6 = this[169];
  v7 = (uint64_t **)this[168];
  if (v6 - (const __CFDictionary *)v7 == 24 && (unint64_t)((char *)v7[1] - (char *)*v7) > 8)
    goto LABEL_2;
  if (v7 == (uint64_t **)v6)
    goto LABEL_18;
  v8 = (const __CFDictionary *)(v7 + 3);
  do
  {
    v9 = *((_QWORD *)v8 - 2) - *((_QWORD *)v8 - 3);
    v10 = v9 > 0xF || v8 == v6;
    v8 = (const __CFDictionary *)((char *)v8 + 24);
  }
  while (!v10);
  if (v9 > 0xF)
  {
LABEL_2:
    updated = HALS_MetaDevice::_UpdateStreams_Output_Stacked(this);
    goto LABEL_53;
  }
  if (this[177])
    v11 = v7 == (uint64_t **)v6;
  else
    v11 = 1;
  if (!v11)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = *v7;
      if (*v7 != v7[1] && *v14)
      {
        v15 = HALS_MetaSubDevice::CopyRealDevice<HALS_Device>(*v14);
        v17 = (HALS_Device *)v15;
        if (v15)
        {
          v120 = 0;
          v121 = 0;
          v122 = 0;
          HALS_Device::CopyStreamList(v15, 0, &v120);
          if (v121 != v120)
          {
            v19 = 0;
            do
            {
              v20 = (*((uint64_t (**)(const __CFDictionary **, _QWORD, uint64_t))*this + 49))(this, 0, v13);
              v21 = (HALS_ObjectMap *)v20;
              if (v20)
              {
                (*(void (**)(uint64_t, _QWORD, HALS_Device *, HALS_Object *))(*(_QWORD *)v20 + 232))(v20, 0, v17, v19);
              }
              else
              {
                v23 = (HALS_MetaStream *)operator new();
                HALS_MetaStream::HALS_MetaStream(v23, (HALS_MetaDevice *)this, 0, v17, v19);
                v24 = (HALS_MetaStream **)this[181];
                v25 = this[182];
                if (v24 >= (HALS_MetaStream **)v25)
                {
                  v27 = this[180];
                  v28 = ((char *)v24 - (char *)v27) >> 3;
                  if ((unint64_t)(v28 + 1) >> 61)
                    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                  v29 = v25 - v27;
                  v30 = v29 >> 2;
                  if (v29 >> 2 <= (unint64_t)(v28 + 1))
                    v30 = v28 + 1;
                  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                    v31 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v31 = v30;
                  if (v31)
                    v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v31);
                  else
                    v32 = 0;
                  v33 = (HALS_MetaStream **)(v31 + 8 * v28);
                  *v33 = v23;
                  v26 = (const __CFDictionary *)(v33 + 1);
                  v34 = this[181];
                  v35 = this[180];
                  if (v34 != v35)
                  {
                    do
                    {
                      v36 = (HALS_MetaStream *)*((_QWORD *)v34 - 1);
                      v34 = (const __CFDictionary *)((char *)v34 - 8);
                      *--v33 = v36;
                    }
                    while (v34 != v35);
                    v34 = this[180];
                  }
                  this[180] = (const __CFDictionary *)v33;
                  this[181] = v26;
                  this[182] = (const __CFDictionary *)(v31 + 8 * v32);
                  if (v34)
                    operator delete(v34);
                }
                else
                {
                  *v24 = v23;
                  v26 = (const __CFDictionary *)(v24 + 1);
                }
                this[181] = v26;
                (**(void (***)(HALS_MetaStream *))v23)(v23);
                v12 = 1;
              }
              HALS_ObjectMap::ReleaseObject(v21, v22);
              v13 = (v13 + 1);
              v19 = (HALS_Object *)((_DWORD)v19 + 1);
            }
            while ((unint64_t)v19 < (v121 - v120) >> 3);
          }
          HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)&v120, v18);
        }
        HALS_ObjectMap::ReleaseObject(v17, v16);
      }
      v7 += 3;
    }
    while (v7 != (uint64_t **)v6);
    goto LABEL_47;
  }
LABEL_18:
  v12 = 0;
  LODWORD(v13) = 0;
LABEL_47:
  v37 = v13;
  v38 = this[180];
  if (v13 < (unint64_t)((this[181] - v38) >> 3))
  {
    do
    {
      v39 = (HALS_ObjectMap *)*((_QWORD *)v38 + v37);
      (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v39 + 8))(v39);
      HALS_ObjectMap::ObjectIsDead(v39, v40);
      v38 = this[180];
      v41 = (char *)v38 + 8 * v37;
      v42 = this[181];
      v43 = (char *)(v42 - (const __CFDictionary *)(v41 + 8));
      if (v42 != (const __CFDictionary *)(v41 + 8))
      {
        memmove((char *)v38 + 8 * v37, v41 + 8, v42 - (const __CFDictionary *)(v41 + 8));
        v38 = this[180];
      }
      this[181] = (const __CFDictionary *)&v43[(_QWORD)v41];
    }
    while (v37 < (&v43[(_QWORD)v41] - (char *)v38) >> 3);
    v12 = 1;
  }
  updated = v12 != 0;
  v2 = a2;
LABEL_53:
  *v2 = updated;
  v44 = this[177];
  if (HALS_MetaDeviceDescription::GetStackedChannelPolicy(v4))
    v45 = 0;
  else
    v45 = HALS_MetaDeviceDescription::IsStackRequested(v4);
  v46 = 0;
  v47 = 0;
  if (v44 && (v45 & 1) == 0)
  {
    v48 = this[168];
    v116 = this[169];
    if (v48 == v116)
    {
      v46 = 0;
      v47 = 0;
    }
    else
    {
      v46 = 0;
      v47 = 0;
      do
      {
        v50 = *(uint64_t **)v48;
        v49 = (uint64_t *)*((_QWORD *)v48 + 1);
        v117 = v48;
        while (v50 != v49)
        {
          v51 = HALS_MetaSubDevice::CopyRealDevice<HALS_Device>(*v50);
          v53 = (HALS_Device *)v51;
          if (v51)
          {
            v120 = 0;
            v121 = 0;
            v122 = 0;
            HALS_Device::CopyStreamList(v51, 1, &v120);
            if (v121 != v120)
            {
              v55 = 0;
              do
              {
                v56 = (*((uint64_t (**)(const __CFDictionary **, uint64_t, uint64_t))*this + 49))(this, 1, v47);
                v57 = (HALS_ObjectMap *)v56;
                if (v56)
                {
                  (*(void (**)(uint64_t, uint64_t, HALS_Device *, HALS_Object *))(*(_QWORD *)v56 + 232))(v56, 1, v53, v55);
                }
                else
                {
                  v59 = (HALS_MetaStream *)operator new();
                  HALS_MetaStream::HALS_MetaStream(v59, (HALS_MetaDevice *)this, 1, v53, v55);
                  v60 = (HALS_MetaStream **)this[184];
                  v61 = this[185];
                  if (v60 >= (HALS_MetaStream **)v61)
                  {
                    v63 = this[183];
                    v64 = ((char *)v60 - (char *)v63) >> 3;
                    if ((unint64_t)(v64 + 1) >> 61)
                      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                    v65 = v61 - v63;
                    v66 = v65 >> 2;
                    if (v65 >> 2 <= (unint64_t)(v64 + 1))
                      v66 = v64 + 1;
                    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
                      v67 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v67 = v66;
                    if (v67)
                      v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v67);
                    else
                      v68 = 0;
                    v69 = (HALS_MetaStream **)(v67 + 8 * v64);
                    *v69 = v59;
                    v62 = (const __CFDictionary *)(v69 + 1);
                    v70 = this[184];
                    v71 = this[183];
                    if (v70 != v71)
                    {
                      do
                      {
                        v72 = (HALS_MetaStream *)*((_QWORD *)v70 - 1);
                        v70 = (const __CFDictionary *)((char *)v70 - 8);
                        *--v69 = v72;
                      }
                      while (v70 != v71);
                      v70 = this[183];
                    }
                    this[183] = (const __CFDictionary *)v69;
                    this[184] = v62;
                    this[185] = (const __CFDictionary *)(v67 + 8 * v68);
                    if (v70)
                      operator delete(v70);
                  }
                  else
                  {
                    *v60 = v59;
                    v62 = (const __CFDictionary *)(v60 + 1);
                  }
                  this[184] = v62;
                  (**(void (***)(HALS_MetaStream *))v59)(v59);
                  v46 = 1;
                }
                HALS_ObjectMap::ReleaseObject(v57, v58);
                v47 = (v47 + 1);
                v55 = (HALS_Object *)((_DWORD)v55 + 1);
              }
              while ((unint64_t)v55 < (v121 - v120) >> 3);
            }
            HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)&v120, v54);
          }
          HALS_ObjectMap::ReleaseObject(v53, v52);
          ++v50;
        }
        v48 = (const __CFDictionary *)((char *)v117 + 24);
      }
      while ((const __CFDictionary *)((char *)v117 + 24) != v116);
    }
  }
  v73 = this[174];
  v74 = this[175];
  if (v73 == v74)
  {
    v75 = 0;
  }
  else
  {
    v75 = 0;
    do
    {
      v76 = *(_QWORD *)v73;
      v77 = (*((uint64_t (**)(const __CFDictionary **, uint64_t, uint64_t))*this + 49))(this, 1, v47);
      v78 = (HALS_ObjectMap *)v77;
      if (v77)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 248))(v77, *(unsigned int *)(v76 + 72));
      }
      else
      {
        v80 = operator new();
        v81 = *(_DWORD *)(v76 + 72);
        HALS_Object::HALS_Object((HALS_Object *)v80, 1634956402, 1634956402, (uint64_t)this, v82);
        *(_DWORD *)(v80 + 48) = *((_DWORD *)this + 4);
        *(_BYTE *)(v80 + 52) = 1;
        *(_DWORD *)(v80 + 56) = 0;
        *(_QWORD *)v80 = off_1E6983490;
        *(_QWORD *)(v80 + 64) = this;
        *(_BYTE *)(v80 + 72) = 1;
        *(_DWORD *)(v80 + 76) = 0;
        *(_QWORD *)(v80 + 80) = &off_1E69749F0;
        *(_QWORD *)(v80 + 144) = 0;
        *(_QWORD *)(v80 + 152) = 0;
        *(_OWORD *)(v80 + 88) = 0u;
        *(_OWORD *)(v80 + 104) = 0u;
        *(_OWORD *)(v80 + 120) = 0u;
        *(_DWORD *)(v80 + 136) = 0;
        *(_DWORD *)(v80 + 160) = v81;
        AMCP::Utility::Dispatch_Queue::create_concurrent_with_workloop((AMCP::Utility::Dispatch_Queue *)&v120, "HALS_MetaStream Concurrent Queue");
        v83 = operator new();
        *(_QWORD *)(v80 + 168) = AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v83, v120);
        AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&v120);
        HALS_MetaStream::AddRealTapPropertyListener((HALS_MetaStream *)v80);
        v84 = (uint64_t *)this[184];
        v85 = this[185];
        if (v84 >= (uint64_t *)v85)
        {
          v87 = this[183];
          v88 = ((char *)v84 - (char *)v87) >> 3;
          if ((unint64_t)(v88 + 1) >> 61)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v89 = v85 - v87;
          v90 = v89 >> 2;
          if (v89 >> 2 <= (unint64_t)(v88 + 1))
            v90 = v88 + 1;
          if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
            v91 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v91 = v90;
          if (v91)
            v91 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v91);
          else
            v92 = 0;
          v93 = (uint64_t *)(v91 + 8 * v88);
          *v93 = v80;
          v86 = (const __CFDictionary *)(v93 + 1);
          v94 = this[184];
          v95 = this[183];
          if (v94 != v95)
          {
            do
            {
              v96 = *((_QWORD *)v94 - 1);
              v94 = (const __CFDictionary *)((char *)v94 - 8);
              *--v93 = v96;
            }
            while (v94 != v95);
            v94 = this[183];
          }
          this[183] = (const __CFDictionary *)v93;
          this[184] = v86;
          this[185] = (const __CFDictionary *)(v91 + 8 * v92);
          if (v94)
            operator delete(v94);
        }
        else
        {
          *v84 = v80;
          v86 = (const __CFDictionary *)(v84 + 1);
        }
        this[184] = v86;
        (**(void (***)(uint64_t))v80)(v80);
        v75 = 1;
      }
      HALS_ObjectMap::ReleaseObject(v78, v79);
      v47 = (v47 + 1);
      v73 = (const __CFDictionary *)((char *)v73 + 8);
    }
    while (v73 != v74);
  }
  v97 = v47;
  v98 = this[183];
  if (v47 < (unint64_t)((this[184] - v98) >> 3))
  {
    do
    {
      v99 = (HALS_ObjectMap *)*((_QWORD *)v98 + v97);
      (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v99 + 8))(v99);
      HALS_ObjectMap::ObjectIsDead(v99, v100);
      v98 = this[183];
      v101 = (char *)v98 + 8 * v97;
      v102 = this[184];
      v103 = (char *)(v102 - (const __CFDictionary *)(v101 + 8));
      if (v102 != (const __CFDictionary *)(v101 + 8))
      {
        memmove((char *)v98 + 8 * v97, v101 + 8, v102 - (const __CFDictionary *)(v101 + 8));
        v98 = this[183];
      }
      this[184] = (const __CFDictionary *)&v103[(_QWORD)v101];
    }
    while (v97 < (&v103[(_QWORD)v101] - (char *)v98) >> 3);
    v46 = 1;
  }
  v104 = 0;
  a2[1] = (v46 | v75) != 0;
  v105 = 1;
  do
  {
    v106 = v105;
    NumberStreams = HALS_IODevice::GetNumberStreams((HALS_IODevice *)this, v104 & 1);
    if (NumberStreams)
    {
      v108 = 0;
      v109 = 1;
      do
      {
        v110 = (unsigned int *)(*((uint64_t (**)(const __CFDictionary **, _QWORD, uint64_t))*this + 49))(this, v104 & 1, v108);
        (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v110 + 264))(v110, v109);
        v111 = v110[4];
        v118 = 0x676C6F6270667420;
        v119 = 0;
        (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, char *, char **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v110 + 112))(v110, v111, &v118, 40, (char *)&v119 + 4, &v120, 0, 0, 0);
        v112 = v123;
        HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v110, v113);
        v109 = (v112 + v109);
        v108 = (v108 + 1);
      }
      while (NumberStreams != (_DWORD)v108);
    }
    v105 = 0;
    v104 = 1;
  }
  while ((v106 & 1) != 0);
  v114 = this[181] == this[180] && this[184] != this[183];
  *((_BYTE *)this + 432) = v114;
}

void sub_1B59B8BE8(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  HALS_ObjectMap *v8;
  HALS_Object *v10;
  va_list va;

  va_start(va, a8);
  HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)va, a2);
  HALS_ObjectMap::ReleaseObject(v8, v10);
  _Unwind_Resume(a1);
}

uint64_t ___ZN15HALS_MetaDevice28InheritSubdeviceDSPForClientEbP11HALS_Client_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BOOL4 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;

  if (*(_BYTE *)(result + 48))
  {
    v2 = *(uint64_t ***)(result + 32);
    v1 = *(_QWORD *)(result + 40);
    result = HALS_Device::GetNumberStreamsExcludingReferenceStreams((HALS_Device *)v2, 1);
    if ((_DWORD)result)
    {
      v22 = 0x696E707476697374;
      v23 = 0;
      v3 = v2[168];
      v4 = v2[169];
      if (v3 == v4)
        goto LABEL_11;
      v5 = 0;
      do
      {
        v7 = *v3;
        v6 = v3[1];
        v3 += 3;
        v5 += (unint64_t)(v6 - v7) >> 3;
      }
      while (v3 != v4);
      if (!v5)
      {
LABEL_11:
        v10 = v1 != 0;
      }
      else
      {
        v8 = 0;
        while (1)
        {
          result = HALS_MetaDeviceDescription::GetSubDeviceByIndex((uint64_t **)v2[168], (HALS_MetaDeviceDescription *)v2[169], v8);
          if (result)
          {
            v9 = result;
            result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t *, uint64_t))(*(_QWORD *)result + 88))(result, 0, &v22, v1);
            if ((result & 1) != 0)
              break;
          }
          if (v5 == ++v8)
            goto LABEL_11;
        }
        v19 = 4;
        v20 = 0;
        result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t *, uint64_t, int *, int *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v9 + 112))(v9, 0, &v22, 4, &v19, &v20, 0, 0, v1);
        v21 = v20;
        v10 = v1 != 0;
        if (v1 && v20)
        {
          result = ((uint64_t (*)(uint64_t **, _QWORD, uint64_t *, uint64_t, int *, _QWORD, _QWORD, uint64_t))(*v2)[15])(v2, 0, &v22, 4, &v21, 0, 0, v1);
          v10 = 1;
        }
      }
      v22 = 0x696E70747641642BLL;
      v23 = 0;
      v11 = v2[168];
      v12 = v2[169];
      if (v11 != v12)
      {
        v13 = 0;
        do
        {
          v15 = *v11;
          v14 = v11[1];
          v11 += 3;
          v13 += (unint64_t)(v14 - v15) >> 3;
        }
        while (v11 != v12);
        if (v13)
        {
          v16 = 0;
          while (1)
          {
            result = HALS_MetaDeviceDescription::GetSubDeviceByIndex((uint64_t **)v2[168], (HALS_MetaDeviceDescription *)v2[169], v16);
            if (result)
            {
              v17 = result;
              result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t *, uint64_t))(*(_QWORD *)result + 88))(result, 0, &v22, v1);
              if ((result & 1) != 0)
                break;
            }
            if (v13 == ++v16)
              return result;
          }
          v19 = 4;
          v20 = 0;
          result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t *, uint64_t, int *, int *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v17 + 112))(v17, 0, &v22, 4, &v19, &v20, 0, 0, v1);
          v21 = v20;
          if (v20)
            v18 = v10;
          else
            v18 = 0;
          if (v18)
            return ((uint64_t (*)(uint64_t **, _QWORD, uint64_t *, uint64_t, int *, _QWORD, _QWORD, uint64_t))(*v2)[15])(v2, 0, &v22, 4, &v21, 0, 0, v1);
        }
      }
    }
  }
  return result;
}

BOOL HALS_MetaDevice::_UpdateStreams_Output_Stacked(const __CFDictionary **this)
{
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  int v4;
  uint64_t v5;
  HALS_MetaSubDevice *FirstDeviceWithDirection;
  HALS_Device *v7;
  HALS_Object *v8;
  HALS_ObjectMap *v9;
  unsigned int TotalNumberChannels;
  uint64_t v11;
  uint64_t v12;
  HALS_ObjectMap *v13;
  HALS_Object *v14;
  uint64_t v15;
  HALS_Object *v16;
  uint64_t v17;
  uint64_t *v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  const __CFDictionary *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  const __CFDictionary *v28;
  const __CFDictionary *v29;
  uint64_t v30;
  unint64_t v31;
  const __CFDictionary *v32;
  HALS_ObjectMap *v33;
  HALS_Object *v34;
  char *v35;
  const __CFDictionary *v36;
  char *v37;
  void *v39[42];

  v39[40] = *(void **)MEMORY[0x1E0C80C00];
  if (!this[177] || (v2 = this[168], v3 = this[169], v2 == v3))
  {
    v4 = 0;
    LODWORD(v5) = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    do
    {
      if (*(_QWORD *)v2 != *((_QWORD *)v2 + 1))
      {
        FirstDeviceWithDirection = HALS_MetaDeviceDescription::FindFirstDeviceWithDirection((HALS_MetaSubDevice ***)v2);
        if (FirstDeviceWithDirection)
        {
          v7 = (HALS_Device *)HALS_MetaSubDevice::CopyRealDevice<HALS_Device>((uint64_t)FirstDeviceWithDirection);
          v9 = v7;
          if (v7)
          {
            TotalNumberChannels = HALS_Device::GetTotalNumberChannels(v7, 0);
            if (HALS_MetaDeviceDescription::GetStackedChannelPolicy(this + 165))
              v11 = TotalNumberChannels;
            else
              v11 = 2;
            v12 = (*((uint64_t (**)(const __CFDictionary **, _QWORD, uint64_t))*this + 49))(this, 0, v5);
            v13 = (HALS_ObjectMap *)v12;
            if (v12)
            {
              (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v12 + 240))(v12, 0, v11);
            }
            else
            {
              v15 = operator new();
              HALS_Object::HALS_Object((HALS_Object *)v15, 1634956402, 1634956402, (uint64_t)this, v16);
              *(_DWORD *)(v15 + 48) = *((_DWORD *)this + 4);
              *(_BYTE *)(v15 + 52) = 0;
              *(_DWORD *)(v15 + 56) = 0;
              *(_QWORD *)v15 = off_1E6983490;
              *(_QWORD *)(v15 + 64) = this;
              *(_BYTE *)(v15 + 72) = 0;
              *(_DWORD *)(v15 + 76) = 0;
              *(_QWORD *)(v15 + 80) = &off_1E69749F0;
              *(_OWORD *)(v15 + 88) = 0u;
              *(_OWORD *)(v15 + 104) = 0u;
              *(_OWORD *)(v15 + 120) = 0u;
              *(_DWORD *)(v15 + 136) = v11;
              *(_QWORD *)(v15 + 144) = 0;
              *(_QWORD *)(v15 + 152) = 0;
              *(_DWORD *)(v15 + 160) = 0;
              AMCP::Utility::Dispatch_Queue::create_concurrent_with_workloop((AMCP::Utility::Dispatch_Queue *)v39, "HALS_MetaStream Concurrent Queue");
              v17 = operator new();
              *(_QWORD *)(v15 + 168) = AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v17, v39[0]);
              AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v39);
              v18 = (uint64_t *)this[181];
              v19 = this[182];
              if (v18 >= (uint64_t *)v19)
              {
                v21 = this[180];
                v22 = ((char *)v18 - (char *)v21) >> 3;
                if ((unint64_t)(v22 + 1) >> 61)
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                v23 = v19 - v21;
                v24 = v23 >> 2;
                if (v23 >> 2 <= (unint64_t)(v22 + 1))
                  v24 = v22 + 1;
                if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
                  v25 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v25 = v24;
                if (v25)
                  v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v25);
                else
                  v26 = 0;
                v27 = (uint64_t *)(v25 + 8 * v22);
                *v27 = v15;
                v20 = (const __CFDictionary *)(v27 + 1);
                v28 = this[181];
                v29 = this[180];
                if (v28 != v29)
                {
                  do
                  {
                    v30 = *((_QWORD *)v28 - 1);
                    v28 = (const __CFDictionary *)((char *)v28 - 8);
                    *--v27 = v30;
                  }
                  while (v28 != v29);
                  v28 = this[180];
                }
                this[180] = (const __CFDictionary *)v27;
                this[181] = v20;
                this[182] = (const __CFDictionary *)(v25 + 8 * v26);
                if (v28)
                  operator delete(v28);
              }
              else
              {
                *v18 = v15;
                v20 = (const __CFDictionary *)(v18 + 1);
              }
              this[181] = v20;
              (**(void (***)(uint64_t))v15)(v15);
              v4 = 1;
            }
            HALS_ObjectMap::ReleaseObject(v13, v14);
            v5 = (v5 + 1);
          }
          HALS_ObjectMap::ReleaseObject(v9, v8);
        }
      }
      v2 = (const __CFDictionary *)((char *)v2 + 24);
    }
    while (v2 != v3);
  }
  v31 = v5;
  v32 = this[180];
  if (v5 < (unint64_t)((this[181] - v32) >> 3))
  {
    do
    {
      v33 = (HALS_ObjectMap *)*((_QWORD *)v32 + v31);
      (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v33 + 8))(v33);
      HALS_ObjectMap::ObjectIsDead(v33, v34);
      v32 = this[180];
      v35 = (char *)v32 + 8 * v31;
      v36 = this[181];
      v37 = (char *)(v36 - (const __CFDictionary *)(v35 + 8));
      if (v36 != (const __CFDictionary *)(v35 + 8))
      {
        memmove((char *)v32 + 8 * v31, v35 + 8, v36 - (const __CFDictionary *)(v35 + 8));
        v32 = this[180];
      }
      this[181] = (const __CFDictionary *)&v37[(_QWORD)v35];
    }
    while (v31 < (&v37[(_QWORD)v35] - (char *)v32) >> 3);
    v4 = 1;
  }
  return v4 != 0;
}

void sub_1B59B9324(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;
  HALS_Object *v4;

  HALS_ObjectMap::ReleaseObject(0, a2);
  HALS_ObjectMap::ReleaseObject(v2, v4);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaSubDevice::CopyRealDevice<HALS_Device>(uint64_t a1)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK18HALS_MetaSubDevice14CopyRealDeviceI11HALS_DeviceEEPT_v_block_invoke;
  v4[3] = &unk_1E697A3F0;
  v4[4] = &v5;
  v4[5] = a1;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B59B9454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B59B949C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

HALS_ObjectMap *HALS_MetaSubDevice::_CopyRealDevice<HALS_Device>(uint64_t a1)
{
  HALS_ObjectMap **v1;
  HALS_Object *v2;
  HALS_ObjectMap *v3;

  v1 = (HALS_ObjectMap **)boost::variant<HALS_Device *,HALS_ClockDevice *>::apply_visitor<boost::detail::variant::get_visitor<HALS_Device * const>>((int *)(a1 + 56));
  if (!v1)
    boost::throw_exception<boost::bad_get>();
  v3 = *v1;
  HALS_ObjectMap::RetainObject(*v1, v2);
  return v3;
}

void sub_1B59B94FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B59B94D4);
}

_DWORD *boost::variant<HALS_Device *,HALS_ClockDevice *>::apply_visitor<boost::detail::variant::get_visitor<HALS_Device * const>>(int *a1)
{
  _DWORD *result;
  int v2;

  v2 = *a1;
  result = a1 + 2;
  switch(v2 ^ (v2 >> 31))
  {
    case 0:
      return result;
    case 1:
      result = 0;
      break;
    default:
      boost::detail::variant::forced_return<BOOL>();
  }
  return result;
}

void boost::throw_exception<boost::bad_get>()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  exception[4] = 0;
  exception[5] = 0;
  *((_DWORD *)exception + 12) = -1;
  *exception = &off_1E6996190;
  exception[1] = &unk_1E69961C0;
  exception[2] = &unk_1E69961E8;
  exception[3] = 0;
}

uint64_t boost::wrapexcept<boost::bad_get>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_get>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)(v2 + 8) = &off_1E6996208;
  *(_QWORD *)v2 = &unk_1E69A1F88;
  *(_QWORD *)(v2 + 16) = &unk_1E69A2000;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 24) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 32) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(v2 + 48) = *(_DWORD *)(a1 + 48);
  *(_QWORD *)v2 = &off_1E6996190;
  *(_QWORD *)(v2 + 8) = &unk_1E69961C0;
  *(_QWORD *)(v2 + 16) = &unk_1E69961E8;
  boost::exception_detail::copy_boost_exception(v2 + 16, a1 + 16);
  return v2;
}

void sub_1B59B96A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;

  std::exception::~exception(v2);
  MEMORY[0x1B5E50688](v1, 0x10F1C40C404A9A7);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_get>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  boost::wrapexcept<boost::bad_get>::wrapexcept((uint64_t)exception, a1);
}

void sub_1B59B9728(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_get>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x1B5E50688);
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_get>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
}

{
  *(_QWORD *)(a1 + 8) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x1B5E50688);
}

const char *boost::bad_get::what(boost::bad_get *this)
{
  return "boost::bad_get: failed value get using boost::get";
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_get>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);
}

{
  *a1 = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);
  JUMPOUT(0x1B5E50688);
}

uint64_t boost::wrapexcept<boost::bad_get>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 8) = &off_1E6996208;
  *(_QWORD *)a1 = &unk_1E69A1F88;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &off_1E6996190;
  *(_QWORD *)(a1 + 8) = &unk_1E69961C0;
  *(_QWORD *)(a1 + 16) = &unk_1E69961E8;
  return a1;
}

void sub_1B59B992C(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void boost::bad_get::~bad_get(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1B5E50688);
}

HALS_MetaSubDevice *HALS_MetaDeviceDescription::FindFirstDeviceWithDirection(HALS_MetaSubDevice ***a1)
{
  HALS_MetaSubDevice **v1;
  HALS_MetaSubDevice **v2;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0;
  while (!HALS_MetaSubDevice::GetNumberStreams(*v1, 0))
  {
    if (++v1 == v2)
    {
      v1 = v2;
      break;
    }
  }
  if (v1 == a1[1])
    return 0;
  else
    return *v1;
}

void HostedDSPContextBuildArguments::~HostedDSPContextBuildArguments(HostedDSPContextBuildArguments *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v2);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 1));
}

OS::CF::MutableDictionary *OS::CF::MutableDictionary::MutableDictionary(OS::CF::MutableDictionary *this)
{
  CFMutableDictionaryRef Mutable;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  *(_QWORD *)this = &off_1E699E390;
  *((_QWORD *)this + 1) = Mutable;
  return this;
}

_QWORD *OS::CF::Number::Number<unsigned int>(_QWORD *a1, int a2)
{
  CFNumberRef v3;
  int valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  *a1 = &off_1E69A0F10;
  a1[1] = v3;
  return a1;
}

void OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
  {
    if (a3)
      CFDictionarySetValue(a1, a2, a3);
  }
}

void OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
  {
    if (a3)
      CFDictionarySetValue(a1, a2, a3);
  }
}

{
  if (a1)
    CFDictionarySetValue(a1, a2, a3);
}

void OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
  {
    if (a3)
      CFDictionarySetValue(a1, a2, a3);
  }
}

void OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
  {
    if (a3)
      CFDictionarySetValue(a1, a2, a3);
  }
}

void OS::CF::MutableArray::AppendValue<OS::CF::Dictionary>(__CFArray *a1, const void *a2)
{
  if (a1)
  {
    if (a2)
      CFArrayAppendValue(a1, a2);
  }
}

void OS::CF::MutableArray::AppendValue<OS::CF::MutableDictionary>(__CFArray *a1, const void *a2)
{
  if (a1)
  {
    if (a2)
      CFArrayAppendValue(a1, a2);
  }
}

const __CFArray *OS::CF::ArrayBase<__CFArray *>::GetSize(const __CFArray *result)
{
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

void OS::CF::MutableArray::AppendValue<OS::CF::MutableArray>(__CFArray *a1, const void *a2)
{
  if (a1)
  {
    if (a2)
      CFArrayAppendValue(a1, a2);
  }
}

void OS::CF::MutableArray::AppendValue<OS::CF::Number>(__CFArray *a1, const void *a2)
{
  if (a1)
  {
    if (a2)
      CFArrayAppendValue(a1, a2);
  }
}

_QWORD *OS::CF::Number::Number<int>(_QWORD *a1, int a2)
{
  CFNumberRef v3;
  int valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  *a1 = &off_1E69A0F10;
  a1[1] = v3;
  return a1;
}

void OS::CF::MutableDictionary::~MutableDictionary(OS::CF::MutableDictionary *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);
  JUMPOUT(0x1B5E50688);
}

void std::__function::__func<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0,std::allocator<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0>,BOOL ()(HALS_Stream *,HALS_Client *)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0,std::allocator<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0>,BOOL ()(HALS_Stream *,HALS_Client *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E697A420;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0,std::allocator<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0>,BOOL ()(HALS_Stream *,HALS_Client *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E697A420;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0,std::allocator<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0>,BOOL ()(HALS_Stream *,HALS_Client *)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 608))(*(_QWORD *)(a1 + 8), *a2, *a3);
}

uint64_t std::__function::__func<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0,std::allocator<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0>,BOOL ()(HALS_Stream *,HALS_Client *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK15HALS_MetaDevice33_CreateLegacyIOContextDescriptionEP11HALS_ClientE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0,std::allocator<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0>,BOOL ()(HALS_Stream *,HALS_Client *)>::target_type()
{
}

uint64_t __Block_byref_object_copy__127(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(result + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(result + 40) = v2;
  return result;
}

uint64_t ___ZNK15HALS_MetaDevice17IsolatedUseCaseIDEv_block_invoke(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = HALS_MetaDeviceDescription::IsolatedUseCaseID((const __CFDictionary **)(*(_QWORD *)(a1 + 40) + 1320));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  *(_BYTE *)(v3 + 44) = BYTE4(result);
  *(_DWORD *)(v3 + 40) = result;
  return result;
}

char *__Block_byref_object_copy__4100(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *result;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v3 = a1 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  result = std::vector<CAPropertyAddress>::__init_with_size[abi:ne180100]<CAPropertyAddress*,CAPropertyAddress*>((char *)(a1 + 40), *(uint64_t **)(a2 + 40), *(uint64_t **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2));
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(a2 + 64);
  return result;
}

void __Block_byref_object_dispose__4101(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = a1 + 40;
  *(_QWORD *)(v2 + 16) = 0;
  return std::vector<CAPropertyAddressList>::__init_with_size[abi:ne180100]<CAPropertyAddressList*,CAPropertyAddressList*>(v2, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 5);
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t ___ZN15HALS_MetaDevice34HandleGroupObjectPropertiesChangedEjjjPKjS1_jPK26AudioObjectPropertyAddressbRKNSt3__16vectorIjNS5_9allocatorIjEEEEN10applesauce8dispatch2v15groupE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 56) + 976))(*(_QWORD *)(a1 + 56), *(unsigned int *)(a1 + 88), *(unsigned int *)(a1 + 92), *(unsigned int *)(a1 + 96), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(unsigned int *)(a1 + 100), *(_QWORD *)(a1 + 80), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B59B9E60(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void applesauce::dispatch::v1::group_session::~group_session(dispatch_object_t *this)
{
  NSObject *v2;

  v2 = *this;
  if (v2)
  {
    dispatch_group_leave(v2);
    if (*this)
      dispatch_release(*this);
  }
}

uint64_t ___ZN15HALS_MetaDevice29HandleObjectPropertiesChangedEPK11HALS_ObjectjjPK26AudioObjectPropertyAddress_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 56)
                                                                                               + 968))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(unsigned int *)(a1 + 80), *(unsigned int *)(a1 + 84), *(_QWORD *)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B59B9F00(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  CFDictionaryRef Copy;
  uint64_t v4;
  CFDictionaryRef theDict;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = **(const void ***)(a1 + 48);
  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v4, *(CFDictionaryRef *)(v1 + 1336));
  if (v2)
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(theDict, CFSTR("name"), v2);
  else
    OS::CF::MutableDictionary::RemoveKey(theDict, CFSTR("name"));
  Copy = theDict;
  if (theDict)
    Copy = CFDictionaryCreateCopy(0, theDict);
  OS::CF::UntypedObject::operator=(v1 + 1328, (uint64_t)Copy);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v4);
}

void ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_91(uint64_t a1)
{
  _QWORD *v1;
  double v2;
  uint64_t v3;
  HALS_MetaSubDevice ***v4;
  HALS_MetaSubDevice ***v5;
  HALS_MetaSubDevice **v6;
  HALS_MetaSubDevice **v7;
  uint64_t v8;
  HALS_Object *v9;
  HALS_ObjectMap *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  HALS_Object *v14;
  HALS_ObjectMap *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  __int128 v22;
  HALS_MetaSubDevice *v23;
  uint64_t v24;
  HALS_Object *v25;
  HALS_ObjectMap *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v1 = *(_QWORD **)(a1 + 40);
  v2 = **(double **)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (HALS_MetaSubDevice ***)v1[168];
  v5 = (HALS_MetaSubDevice ***)v1[169];
  while (v4 != v5)
  {
    v6 = *v4;
    v7 = v4[1];
    while (v6 != v7)
    {
      v8 = HALS_MetaSubDevice::CopyRealIODevice(*v6);
      v10 = (HALS_ObjectMap *)v8;
      if (v8)
        (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v8 + 272))(v8, v3, v2);
      HALS_ObjectMap::ReleaseObject(v10, v9);
      ++v6;
    }
    v4 += 3;
  }
  v11 = v1[174];
  v12 = v1[175];
  while (v11 != v12)
  {
    v13 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(*(_QWORD *)v11 + 72));
    v15 = (HALS_ObjectMap *)v13;
    if (v13)
    {
      v16 = *(_QWORD *)(v13 + 248);
      v17 = (std::__shared_weak_count *)*((_QWORD *)v15 + 32);
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
        if (v2 != 0.0)
        {
          v20 = *(_OWORD *)(v16 + 40);
          v27 = *(_OWORD *)(v16 + 24);
          v28 = v20;
          v29 = *(_QWORD *)(v16 + 56);
          *(double *)&v27 = v2;
          HALS_MultiTap::set_format((HALS_MultiTap *)v16, &v27, 0);
        }
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      else if (v2 != 0.0)
      {
        v22 = *(_OWORD *)(v16 + 40);
        v27 = *(_OWORD *)(v16 + 24);
        v28 = v22;
        v29 = *(_QWORD *)(v16 + 56);
        *(double *)&v27 = v2;
        HALS_MultiTap::set_format((HALS_MultiTap *)v16, &v27, 0);
      }
    }
    HALS_ObjectMap::ReleaseObject(v15, v14);
    v11 += 8;
  }
  v23 = (HALS_MetaSubDevice *)v1[178];
  if (v23)
  {
    v24 = HALS_MetaSubDevice::CopyRealIODevice(v23);
    v26 = (HALS_ObjectMap *)v24;
    if (v24)
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v24 + 272))(v24, v3, v2);
    HALS_ObjectMap::ReleaseObject(v26, v25);
  }
}

void sub_1B59BA144(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  HALS_ObjectMap *v27;
  int v28;
  _DWORD *v30;
  int v31;

  v28 = (int)a2;
  HALS_ObjectMap::ReleaseObject(v27, a2);
  v30 = __cxa_begin_catch(a1);
  if (v28 == 2)
    v31 = v30[2];
  else
    v31 = 2003329396;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 32) + 8) + 24) = v31;
  __cxa_end_catch();
}

void ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_93(uint64_t a1)
{
  CFTypeRef *v2;
  const __CFDictionary **v3;
  const __CFArray *v4;
  const __CFArray *Size;
  const __CFArray *v6;
  CFIndex i;
  CFDictionaryRef Copy;
  _QWORD v9[2];
  uint64_t v10;
  __CFDictionary *v11;
  uint64_t v12;
  __CFArray *v13;
  _QWORD v14[2];
  _QWORD v15[12];

  v15[2] = *MEMORY[0x1E0C80C00];
  v3 = *(const __CFDictionary ***)(a1 + 40);
  v2 = *(CFTypeRef **)(a1 + 48);
  v4 = (const __CFArray *)*v2;
  if (*v2)
    CFRetain(*v2);
  v14[0] = &off_1E69A0EA8;
  v14[1] = v4;
  OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&v12);
  Size = OS::CF::ArrayBase<__CFArray const*>::GetSize(v4);
  if (Size)
  {
    v6 = Size;
    for (i = 0; (const __CFArray *)i != v6; ++i)
    {
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::String>((const __CFArray *)&v10, (uint64_t)v14, i);
      if (v11)
      {
        v15[0] = CFSTR("uid");
        v15[1] = v11;
        OS::CF::Dictionary::Dictionary(v9, (uint64_t)v15, 1uLL);
        OS::CF::MutableArray::AppendValue<OS::CF::Dictionary>(v13, (const void *)v9[1]);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v9);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v10);
    }
  }
  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v10, v3[167]);
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>(v11, CFSTR("subdevices"), v13);
  Copy = v11;
  if (v11)
    Copy = CFDictionaryCreateCopy(0, v11);
  OS::CF::UntypedObject::operator=((uint64_t)(v3 + 166), (uint64_t)Copy);
  HALS_MetaDeviceDescription::UpdateSubDeviceList(v3 + 165, 0);
  HALS_MetaDeviceDescription::UpdateSubTapList((HALS_MetaDeviceDescription *)(v3 + 165));
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v10);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v12);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v14);
  HALS_MetaDevice::_UpdateStreams(v3, *(BOOL **)(a1 + 56));
}

void HALS_MetaDevice::UnregisterTaps(HALS_MetaDevice *this)
{
  HALB_Mutex *v2;
  const __CFArray *v3;
  unsigned int i;
  HALS_Object *v5;
  HALS_ObjectMap *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  os_unfair_lock_s *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  HALS_System *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30[2];
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  HALS_System *v35;
  std::__shared_weak_count *v36;
  _BYTE v37[8];
  __CFString *v38;
  _BYTE v39[8];
  CFDictionaryRef theDict;
  _QWORD v41[6];
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  void (*v46)(uint64_t);
  _QWORD v47[2];

  v42 = 0;
  v43 = &v42;
  v44 = 0x3802000000;
  v45 = __Block_byref_object_copy__117;
  v46 = __Block_byref_object_dispose__118;
  v47[0] = &off_1E69A0EA8;
  v47[1] = 0;
  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 0x40000000;
  v41[2] = ___ZN15HALS_MetaDevice14UnregisterTapsEv_block_invoke;
  v41[3] = &unk_1E697A2F0;
  v41[4] = &v42;
  v41[5] = this;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v41);
  v3 = (const __CFArray *)v43[6];
  if (v3)
  {
    for (i = 0; ; ++i)
    {
      if ((unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v3) <= i)
        goto LABEL_45;
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v39, (uint64_t)(v43 + 5), i);
      if (theDict)
        break;
LABEL_44:
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v39);
      v3 = (const __CFArray *)v43[6];
    }
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v37, theDict, CFSTR("uid"));
    v33 = 0;
    v34 = 0;
    HALS_System::GetInstance(&v35, 0, &v33);
    v6 = (HALS_ObjectMap *)HALS_System::CopyTapByUUID(v35, v38);
    v7 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v34;
    if (!v34)
      goto LABEL_14;
    v11 = (unint64_t *)&v34->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (v6)
        goto LABEL_15;
    }
    else
    {
LABEL_14:
      if (v6)
      {
LABEL_15:
        v13 = (os_unfair_lock_s *)*((_QWORD *)v6 + 31);
        v14 = (std::__shared_weak_count *)*((_QWORD *)v6 + 32);
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
          HALS_MultiTap::unregister_meta_device(v13, *((_DWORD *)this + 4));
          do
            v17 = __ldaxr(v15);
          while (__stlxr(v17 - 1, v15));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        else
        {
          HALS_MultiTap::unregister_meta_device(v13, *((_DWORD *)this + 4));
        }
        v31 = 0;
        v32 = 0;
        HALS_System::GetInstance(&v35, 0, &v31);
        v18 = v35;
        v19 = (std::__shared_weak_count *)*((_QWORD *)v6 + 32);
        v30[0] = *((_QWORD *)v6 + 31);
        v30[1] = (uint64_t)v19;
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        HALS_System::RemoveTapFromAllContexts((uint64_t)v18, v30);
        if (v19)
        {
          v22 = (unint64_t *)&v19->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v24 = v36;
        if (v36)
        {
          v25 = (unint64_t *)&v36->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v27 = v32;
        if (v32)
        {
          v28 = (unint64_t *)&v32->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
      }
    }
    HALS_ObjectMap::ReleaseObject(v6, v5);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v37);
    goto LABEL_44;
  }
LABEL_45:
  _Block_object_dispose(&v42, 8);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v47);
}

void sub_1B59BA72C(_Unwind_Exception *a1)
{
  OS::CF::UntypedObject *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 120), 8);
  OS::CF::UntypedObject::~UntypedObject(v1);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_95(uint64_t a1)
{
  CFTypeRef *v2;
  uint64_t v3;
  CFTypeRef v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 40);
  v2 = *(CFTypeRef **)(a1 + 48);
  v4 = *v2;
  if (*v2)
  {
    CFRetain(*v2);
    v5 = v3 + 1328;
    v6 = (uint64_t)v4;
  }
  else
  {
    v5 = v3 + 1328;
    v6 = 0;
  }
  OS::CF::UntypedObject::operator=(v5, v6);
  HALS_MetaDeviceDescription::UpdateSubDeviceList((CFDictionaryRef *)(v3 + 1320), 0);
  HALS_MetaDeviceDescription::UpdateSubTapList((HALS_MetaDeviceDescription *)(v3 + 1320));
  atomic_store(HALS_MetaDeviceDescription::IsPrivate((const __CFDictionary **)(v3 + 1320)), (unsigned __int8 *)(v3 + 1432));
  HALS_MetaDevice::_UpdateStreams((const __CFDictionary **)v3, *(BOOL **)(a1 + 56));
}

void sub_1B59BA83C(void *a1, int a2)
{
  uint64_t v2;
  _DWORD *v4;
  int v5;

  v4 = __cxa_begin_catch(a1);
  if (a2 == 2)
    v5 = v4[2];
  else
    v5 = 2003329396;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = v5;
  __cxa_end_catch();
}

void HALS_MetaDevice::RegisterTaps(HALS_MetaDevice *this)
{
  HALB_Mutex *v2;
  const __CFArray *v3;
  unsigned int i;
  HALS_Object *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  os_unfair_lock_s *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  HALS_System *v20;
  std::__shared_weak_count *v21;
  _BYTE v22[8];
  __CFString *v23;
  _BYTE v24[8];
  CFDictionaryRef theDict;
  _QWORD v26[6];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  _QWORD v32[2];

  v27 = 0;
  v28 = &v27;
  v29 = 0x3802000000;
  v30 = __Block_byref_object_copy__117;
  v31 = __Block_byref_object_dispose__118;
  v32[0] = &off_1E69A0EA8;
  v32[1] = 0;
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 0x40000000;
  v26[2] = ___ZN15HALS_MetaDevice12RegisterTapsEv_block_invoke;
  v26[3] = &unk_1E697A2C8;
  v26[4] = &v27;
  v26[5] = this;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v26);
  v3 = (const __CFArray *)v28[6];
  if (v3)
  {
    for (i = 0; ; ++i)
    {
      if ((unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v3) <= i)
        goto LABEL_29;
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v24, (uint64_t)(v28 + 5), i);
      if (theDict)
        break;
LABEL_28:
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v24);
      v3 = (const __CFArray *)v28[6];
    }
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v22, theDict, CFSTR("uid"));
    v18 = 0;
    v19 = 0;
    HALS_System::GetInstance(&v20, 0, &v18);
    v6 = HALS_System::CopyTapByUUID(v20, v23);
    v7 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v19;
    if (!v19)
      goto LABEL_14;
    v11 = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (v6)
      {
LABEL_15:
        if (*(_BYTE *)(v6 + 240))
        {
          v13 = *(os_unfair_lock_s **)(v6 + 248);
          v14 = *(std::__shared_weak_count **)(v6 + 256);
          if (v14)
          {
            v15 = (unint64_t *)&v14->__shared_owners_;
            do
              v16 = __ldxr(v15);
            while (__stxr(v16 + 1, v15));
            HALS_MultiTap::register_meta_device(v13, *((_DWORD *)this + 4));
            do
              v17 = __ldaxr(v15);
            while (__stlxr(v17 - 1, v15));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          else
          {
            HALS_MultiTap::register_meta_device(v13, *((_DWORD *)this + 4));
          }
          HALS_Tap::AddTapToAllContexts((HALS_Tap *)v6);
        }
      }
    }
    else
    {
LABEL_14:
      if (v6)
        goto LABEL_15;
    }
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v6, v5);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v22);
    goto LABEL_28;
  }
LABEL_29:
  _Block_object_dispose(&v27, 8);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v32);
}

void sub_1B59BAAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  OS::CF::UntypedObject *v16;
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  OS::CF::UntypedObject::~UntypedObject(v16);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_97(uint64_t a1)
{
  const __CFString **v2;
  const __CFDictionary **v3;
  const __CFString *v4;
  CFDictionaryRef Copy;
  uint64_t v6;
  CFDictionaryRef theDict;

  v3 = *(const __CFDictionary ***)(a1 + 40);
  v2 = *(const __CFString ***)(a1 + 48);
  v4 = *v2;
  if (*v2 && HALS_MetaDeviceDescription::IsDeviceInRawDescription(v3 + 165, *v2))
  {
    OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v6, v3[167]);
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(theDict, CFSTR("master"), v4);
    Copy = theDict;
    if (theDict)
      Copy = CFDictionaryCreateCopy(0, theDict);
    OS::CF::UntypedObject::operator=((uint64_t)(v3 + 166), (uint64_t)Copy);
    HALS_MetaDeviceDescription::UpdateSubDeviceList(v3 + 165, 0);
    HALS_MetaDeviceDescription::UpdateSubTapList((HALS_MetaDeviceDescription *)(v3 + 165));
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v6);
  }
  HALS_MetaDevice::_UpdateStreams(v3, *(BOOL **)(a1 + 56));
}

void sub_1B59BABE4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  _DWORD *v19;
  int v20;
  uint64_t v21;

  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v21);
  v19 = __cxa_begin_catch(a1);
  if (a2 == 2)
    v20 = v19[2];
  else
    v20 = 2003329396;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 8) + 24) = v20;
  __cxa_end_catch();
}

void ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_99(uint64_t a1)
{
  uint64_t v1;
  const __CFDictionary **v2;
  const void *v3;
  HALS_MetaSubDevice *ClockSubDevice;
  int ClockDomain;
  HALS_MetaSubDevice ***v6;
  int v7;
  HALS_MetaSubDevice **v8;
  HALS_MetaSubDevice **v9;
  int v10;
  BOOL v11;
  int v12;
  __CFDictionary *v13;
  CFTypeID v14;
  const __CFArray *v15;
  const __CFArray *v16;
  const __CFArray *Size;
  unint64_t v18;
  CFIndex v19;
  unsigned int v20;
  char v21;
  const __CFArray *v22;
  unint64_t v23;
  CFIndex v24;
  unsigned int v25;
  _BOOL4 v26;
  CFDictionaryRef Copy;
  CFDictionaryRef *v29;
  HALS_ObjectMap *v30;
  HALS_Object *v31;
  CFDictionaryRef *v32;
  uint64_t v34;
  HALS_MetaSubDevice *v35;
  HALS_MetaSubDevice ***v36;
  HALS_MetaSubDevice ***v37;
  int v38;
  HALS_MetaSubDevice **v39;
  HALS_MetaSubDevice **v40;
  _QWORD v41[2];
  char v42[8];
  CFDictionaryRef theDict;
  int v44;
  uint64_t v45;
  int v46;
  _QWORD v47[2];
  void (**v48)(OS::CF::String *__hidden);
  __CFDictionary *v49;
  char v50[8];
  CFStringRef theString1;
  char v52[8];
  CFDictionaryRef v53;
  char v54[8];
  __CFArray *v55;
  char v56[8];
  const __CFArray *v57;
  void *value;
  __CFArray *v59;
  void (**v60)(OS::CF::Array *__hidden);
  const __CFArray *v61;

  v1 = a1;
  v2 = *(const __CFDictionary ***)(a1 + 40);
  v3 = **(const void ***)(a1 + 48);
  if (v3)
  {
    v34 = *(_QWORD *)(a1 + 40);
    OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)v42, v2[167]);
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(theDict, CFSTR("clock"), v3);
    v41[0] = &off_1E69A0F60;
    v41[1] = v3;
    v32 = v2 + 165;
    ClockSubDevice = (HALS_MetaSubDevice *)HALS_MetaDeviceDescription::AllocateClockSubDevice(v2 + 165, (uint64_t)v41);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v41);
    v35 = ClockSubDevice;
    if (ClockSubDevice)
    {
      ClockDomain = HALS_MetaSubDevice::GetClockDomain(ClockSubDevice);
      v6 = *(HALS_MetaSubDevice ****)(v34 + 1344);
      v36 = *(HALS_MetaSubDevice ****)(v34 + 1352);
      if (v6 != v36)
      {
        v7 = ClockDomain;
        v38 = ClockDomain;
        while (1)
        {
          v8 = *v6;
          v9 = v6[1];
          v37 = v6;
          v39 = v9;
          if (*v6 != v9)
            break;
LABEL_41:
          v6 = v37 + 3;
          if (v37 + 3 == v36)
            goto LABEL_42;
        }
        while (1)
        {
          v45 = 0x676C6F6264726674;
          v46 = 0;
          v10 = HALS_MetaSubDevice::GetClockDomain(*v8);
          if (v10)
            v11 = v10 == v7;
          else
            v11 = 0;
          v12 = !v11;
          v44 = v12;
          (*(void (**)(HALS_MetaSubDevice *, _QWORD, uint64_t *, uint64_t, int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v8 + 120))(*v8, *((unsigned int *)*v8 + 4), &v45, 4, &v44, 0, 0, 0);
          if (!v44)
            goto LABEL_40;
          v13 = (__CFDictionary *)HALS_MetaSubDevice::CopyRealDeviceUID(*v8);
          v60 = &off_1E69A0EA8;
          v61 = 0;
          if (theDict)
          {
            value = 0;
            if (CFDictionaryGetValueIfPresent(theDict, CFSTR("subdevices"), (const void **)&value))
            {
              v14 = value ? CFGetTypeID(value) : 0;
              if (v14 == CFArrayGetTypeID())
              {
                v15 = (const __CFArray *)value;
                if (value)
                {
                  CFRetain(value);
                  v16 = v61;
                  v61 = v15;
                  if (!v16)
                    goto LABEL_25;
                }
                else
                {
                  v16 = v61;
                  v61 = 0;
                  if (!v16)
                    goto LABEL_39;
                }
                CFRelease(v16);
              }
            }
            if (v61)
            {
LABEL_25:
              v40 = v8;
              OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&value);
              Size = OS::CF::ArrayBase<__CFArray const*>::GetSize(v61);
              if (Size)
              {
                v18 = (unint64_t)Size;
                v19 = 0;
                v20 = 0;
                v21 = 0;
                do
                {
                  OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Array>((const __CFArray *)v56, (uint64_t)&v60, v19);
                  OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)v54);
                  v22 = OS::CF::ArrayBase<__CFArray const*>::GetSize(v57);
                  if (v22)
                  {
                    v23 = (unint64_t)v22;
                    v24 = 0;
                    v25 = 1;
                    do
                    {
                      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v52, (uint64_t)v56, v24);
                      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v50, v53, CFSTR("uid"));
                      v48 = &off_1E69A0F60;
                      v49 = v13;
                      v26 = OS::CF::operator==(theString1, (const __CFString *)v13);
                      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v48);
                      if (v26)
                      {
                        OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v48, v53);
                        v21 = 1;
                        OS::CF::Number::Number<int>(v47, 1);
                        OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(v49, CFSTR("drift"), (const void *)v47[1]);
                        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v47);
                        OS::CF::MutableArray::AppendValue<OS::CF::MutableDictionary>(v55, v49);
                        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v48);
                      }
                      else
                      {
                        OS::CF::MutableArray::AppendValue<OS::CF::Dictionary>(v59, v53);
                      }
                      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v50);
                      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v52);
                      v24 = v25;
                    }
                    while (v23 > v25++);
                  }
                  if ((v21 & 1) != 0)
                    OS::CF::MutableArray::AppendValue<OS::CF::MutableArray>(v59, v55);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v54);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v56);
                  v19 = ++v20;
                }
                while (v18 > v20);
                v7 = v38;
                if ((v21 & 1) != 0)
                  OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>(theDict, CFSTR("subdevices"), v59);
              }
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&value);
              v9 = v39;
              v8 = v40;
            }
          }
LABEL_39:
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v60);
LABEL_40:
          if (++v8 == v9)
            goto LABEL_41;
        }
      }
    }
LABEL_42:
    Copy = theDict;
    if (theDict)
    {
      Copy = CFDictionaryCreateCopy(0, theDict);
      v29 = v32;
      v1 = a1;
      v2 = (const __CFDictionary **)v34;
      v30 = v35;
    }
    else
    {
      v1 = a1;
      v2 = (const __CFDictionary **)v34;
      v30 = v35;
      v29 = v32;
    }
    OS::CF::UntypedObject::operator=((uint64_t)(v2 + 166), (uint64_t)Copy);
    HALS_MetaDeviceDescription::UpdateSubDeviceList(v29, 0);
    HALS_MetaDeviceDescription::UpdateSubTapList((HALS_MetaDeviceDescription *)v29);
    HALS_ObjectMap::ReleaseObject(v30, v31);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v42);
  }
  HALS_MetaDevice::_UpdateStreams(v2, *(BOOL **)(v1 + 56));
}

void sub_1B59BB028(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, HALS_ObjectMap *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  int v56;
  _DWORD *v58;
  int v59;
  uint64_t v60;
  HALS_ObjectMap *v61;
  uint64_t v62;

  v56 = (int)a2;
  HALS_ObjectMap::ReleaseObject(v61, a2);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v62);
  v58 = __cxa_begin_catch(a1);
  if (v56 == 2)
    v59 = v58[2];
  else
    v59 = 2003329396;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v60 + 32) + 8) + 24) = v59;
  __cxa_end_catch();
}

void ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_101(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t **v3;
  _BOOL4 v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int *v7;
  HALS_Object *v8;
  HALS_ObjectMap *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BOOL4 v13;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(uint64_t ***)(v1 + 1344);
  v3 = *(uint64_t ***)(v1 + 1352);
  if (v2 != v3)
  {
    v4 = **(_DWORD **)(a1 + 48) != 0;
    do
    {
      v5 = *v2;
      v6 = v2[1];
      while (v5 != v6)
      {
        v7 = (unsigned int *)HALS_MetaSubDevice::CopyRealDevice<HALS_Device>(*v5);
        v9 = (HALS_ObjectMap *)v7;
        if (v7)
        {
          v10 = v7[4];
          v11 = 0x676C6F626470656CLL;
          v12 = 0;
          v13 = v4;
          (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, _BOOL4 *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v7 + 120))(v7, v10, &v11, 4, &v13, 0, 0, 0);
        }
        HALS_ObjectMap::ReleaseObject(v9, v8);
        ++v5;
      }
      v2 += 3;
    }
    while (v2 != v3);
  }
}

void sub_1B59BB1BC(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  HALS_ObjectMap *v23;
  int v24;
  _DWORD *v26;
  int v27;

  v24 = (int)a2;
  HALS_ObjectMap::ReleaseObject(v23, a2);
  v26 = __cxa_begin_catch(a1);
  if (v24 == 2)
    v27 = v26[2];
  else
    v27 = 2003329396;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 32) + 8) + 24) = v27;
  __cxa_end_catch();
}

void ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_110(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12[3];
  _QWORD *v13;
  _QWORD v14[2];
  _QWORD **v15;
  _QWORD *v16[2];
  uint64_t v17[3];
  uint64_t v18[3];
  uint64_t v19[3];
  unsigned int v20;
  uint64_t v21[3];
  uint64_t v22[3];
  uint64_t v23[3];
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD **)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 56);
  if (v3 == 2)
  {
    LODWORD(v24[0]) = 3;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v19, (unsigned int *)v24, 1);
    HALS_MetaDeviceDescription::SetSubDSPTypesForClient((uint64_t)(v2 + 330), v19);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v19[1]);
    v8 = *(unsigned __int8 *)(a1 + 60);
    v9 = *(_QWORD *)(a1 + 40);
    LODWORD(v24[0]) = 3;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v18, (unsigned int *)v24, 1);
    v20 = 2;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v17, &v20, 1);
    v6 = HALS_Device::_ConfigureDSPTypesForClient(v2, (const BOOL *)(v8 != 0), v9, (uint64_t)v18, v17);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v17[1]);
    v7 = (_QWORD *)v18[1];
  }
  else if (v3 == 1)
  {
    LODWORD(v24[0]) = 2;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v23, (unsigned int *)v24, 1);
    HALS_MetaDeviceDescription::SetSubDSPTypesForClient((uint64_t)(v2 + 330), v23);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v23[1]);
    v4 = *(unsigned __int8 *)(a1 + 60);
    v5 = *(_QWORD *)(a1 + 40);
    LODWORD(v24[0]) = 2;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v22, (unsigned int *)v24, 1);
    v20 = 3;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v21, &v20, 1);
    v6 = HALS_Device::_ConfigureDSPTypesForClient(v2, (const BOOL *)(v4 != 0), v5, (uint64_t)v22, v21);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v21[1]);
    v7 = (_QWORD *)v22[1];
  }
  else
  {
    v16[0] = 0;
    v16[1] = 0;
    v15 = v16;
    HALS_MetaDeviceDescription::SetSubDSPTypesForClient((uint64_t)(v2 + 330), &v15);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v16[0]);
    v10 = *(unsigned __int8 *)(a1 + 60);
    v11 = *(_QWORD *)(a1 + 40);
    v14[0] = 0;
    v14[1] = 0;
    v13 = v14;
    v24[0] = 0x200000003;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v12, (unsigned int *)v24, 2);
    v6 = HALS_Device::_ConfigureDSPTypesForClient(v2, (const BOOL *)(v10 != 0), v11, (uint64_t)&v13, v12);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v12[1]);
    v7 = (_QWORD *)v14[0];
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v7);
  **(_BYTE **)(a1 + 48) = v6;
}

void sub_1B59BB454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, uint64_t a20,uint64_t a21,_QWORD *a22)
{
  if (a2)
  {
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a19);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a22);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B59BB420);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_113(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _DWORD *v4;
  char v5;
  _QWORD *v6;
  uint64_t v7[3];
  _QWORD *v8;
  _QWORD v9[2];
  _QWORD **v10;
  _QWORD *v11[2];
  unsigned int v12;
  uint64_t v13[3];

  v2 = *(unsigned __int8 *)(a1 + 60);
  v4 = *(_DWORD **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)(a1 + 56))
  {
    v12 = 6;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v13, &v12, 1);
    v11[0] = 0;
    v11[1] = 0;
    v10 = v11;
    v5 = HALS_Device::_ConfigureDSPTypesForClient(v4, (const BOOL *)(v2 != 0), v3, (uint64_t)v13, &v10);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v11[0]);
    v6 = (_QWORD *)v13[1];
  }
  else
  {
    v9[0] = 0;
    v9[1] = 0;
    v8 = v9;
    v12 = 6;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v7, &v12, 1);
    v5 = HALS_Device::_ConfigureDSPTypesForClient(v4, (const BOOL *)(v2 != 0), v3, (uint64_t)&v8, v7);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v7[1]);
    v6 = (_QWORD *)v9[0];
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v6);
  **(_BYTE **)(a1 + 48) = v5;
}

void sub_1B59BB5E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a11);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a14);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B59BB5D4);
}

void ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_115(uint64_t a1)
{
  CFTypeRef *v2;
  const __CFDictionary **v3;
  const __CFArray *v4;
  const __CFArray *Size;
  const __CFArray *v6;
  CFIndex i;
  CFDictionaryRef Copy;
  _QWORD v9[2];
  uint64_t v10;
  __CFDictionary *v11;
  uint64_t v12;
  __CFArray *v13;
  _QWORD v14[2];
  _QWORD v15[12];

  v15[2] = *MEMORY[0x1E0C80C00];
  v3 = *(const __CFDictionary ***)(a1 + 40);
  v2 = *(CFTypeRef **)(a1 + 48);
  v4 = (const __CFArray *)*v2;
  if (*v2)
    CFRetain(*v2);
  v14[0] = &off_1E69A0EA8;
  v14[1] = v4;
  OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&v12);
  Size = OS::CF::ArrayBase<__CFArray const*>::GetSize(v4);
  if (Size)
  {
    v6 = Size;
    for (i = 0; (const __CFArray *)i != v6; ++i)
    {
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::String>((const __CFArray *)&v10, (uint64_t)v14, i);
      if (v11)
      {
        v15[0] = CFSTR("uid");
        v15[1] = v11;
        OS::CF::Dictionary::Dictionary(v9, (uint64_t)v15, 1uLL);
        OS::CF::MutableArray::AppendValue<OS::CF::Dictionary>(v13, (const void *)v9[1]);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v9);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v10);
    }
  }
  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v10, v3[167]);
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>(v11, CFSTR("taps"), v13);
  Copy = v11;
  if (v11)
    Copy = CFDictionaryCreateCopy(0, v11);
  OS::CF::UntypedObject::operator=((uint64_t)(v3 + 166), (uint64_t)Copy);
  HALS_MetaDeviceDescription::UpdateSubDeviceList(v3 + 165, 0);
  HALS_MetaDeviceDescription::UpdateSubTapList((HALS_MetaDeviceDescription *)(v3 + 165));
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v10);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v12);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v14);
  HALS_MetaDevice::_UpdateStreams(v3, *(BOOL **)(a1 + 56));
}

uint64_t *std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    v6 = 4 * a3;
    do
    {
      std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(a1, v4, *a2, *a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_1B59BB8C0(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*v1);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__122(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__123(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN15HALS_MetaDevice25NotifyDSPChangedForClientEbP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  HALS_Object *v7;
  HALS_ObjectMap *v8;
  _QWORD *v9;
  int v10;
  unint64_t v11;
  char *v12;
  _DWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  int v20;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 568))(v2, *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    do
    {
      v6 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v2 + 592))(v2, *(unsigned __int8 *)(a1 + 56), v5, *(_QWORD *)(a1 + 48));
      v8 = (HALS_ObjectMap *)v6;
      if (v6 && *(_DWORD *)(v6 + 56) == 2)
      {
        v9 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
        v10 = *(_DWORD *)(v6 + 16);
        v12 = (char *)v9[6];
        v11 = v9[7];
        if ((unint64_t)v12 >= v11)
        {
          v14 = (char *)v9[5];
          v15 = (v12 - v14) >> 2;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v17 = v11 - (_QWORD)v14;
          if (v17 >> 1 > v16)
            v16 = v17 >> 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v18);
            v14 = (char *)v9[5];
            v12 = (char *)v9[6];
          }
          else
          {
            v7 = 0;
          }
          v19 = (_DWORD *)(v18 + 4 * v15);
          *v19 = v10;
          v13 = v19 + 1;
          while (v12 != v14)
          {
            v20 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *--v19 = v20;
          }
          v9[5] = v19;
          v9[6] = v13;
          v9[7] = v18 + 4 * (_QWORD)v7;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_DWORD *)v12 = v10;
          v13 = v12 + 4;
        }
        v9[6] = v13;
      }
      HALS_ObjectMap::ReleaseObject(v8, v7);
      v5 = (v5 + 1);
    }
    while ((_DWORD)v5 != v4);
  }
}

void sub_1B59BBA6C(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__117(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 40) = &off_1E69A0EA8;
  return result;
}

void __Block_byref_object_dispose__118(uint64_t a1)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 40));
}

uint64_t ___ZN15HALS_MetaDevice12RegisterTapsEv_block_invoke(uint64_t a1)
{
  CFTypeRef v2;

  v2 = HALS_MetaDeviceDescription::CopyTapList(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 40) + 1336));
  return OS::CF::UntypedObject::operator=(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, (uint64_t)v2);
}

uint64_t ___ZN15HALS_MetaDevice14UnregisterTapsEv_block_invoke(uint64_t a1)
{
  CFTypeRef v2;

  v2 = HALS_MetaDeviceDescription::CopyTapList(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 40) + 1336));
  return OS::CF::UntypedObject::operator=(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, (uint64_t)v2);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, HALS_Object *a4)
{
  HALS_IODevice *v5;
  char v6;
  char v7;
  unsigned int NumberStreams;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v13;
  HALS_Object *v14;
  HALS_Object *v15;
  uint64_t v16;
  char v18;
  uint64_t **v19;
  HALS_MetaDeviceDescription *v20;
  int v21;
  HALS_MetaDeviceDescription *v22;
  uint64_t v23;
  uint64_t v24;
  int i;
  uint64_t SubDeviceByIndex;
  HALS_Object *v27;
  const unsigned int **v28;
  const unsigned int **v29;
  unint64_t v30;
  int v31;
  int v32;
  const unsigned int **v33;
  const unsigned int *v34;

  v5 = *(HALS_IODevice **)(a1 + 40);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) < *(_DWORD *)(a1 + 64))
  {
    v6 = 0;
    v7 = 1;
    do
    {
      NumberStreams = HALS_IODevice::GetNumberStreams(v5, v6 & 1);
      v9 = NumberStreams;
      v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v11 = *(_DWORD *)(a1 + 64);
      if (v10 < v11 && NumberStreams != 0)
      {
        v13 = 1;
        do
        {
          v16 = (*(uint64_t (**)(HALS_IODevice *, _QWORD, _QWORD))(*(_QWORD *)v5 + 392))(v5, v6 & 1, v13 - 1);
          if (v16
            && HALS_Object::IsObjectClassInClassIDList((HALS_Object *)*(unsigned int *)(a1 + 68), *(_QWORD *)(a1 + 48), (const unsigned int *)v16, v15))
          {
            *(_DWORD *)(*(_QWORD *)(a1 + 56)
                      + 4 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))++) = *(_DWORD *)(v16 + 16);
          }
          HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v16, v14);
          v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
          v11 = *(_DWORD *)(a1 + 64);
        }
        while (v10 < v11 && v13++ < v9);
      }
      v18 = (v10 < v11) & v7;
      v6 = 1;
      v7 = 0;
    }
    while ((v18 & 1) != 0);
  }
  v19 = (uint64_t **)*((_QWORD *)v5 + 168);
  v20 = (HALS_MetaDeviceDescription *)*((_QWORD *)v5 + 169);
  if (v19 != (uint64_t **)v20)
  {
    v21 = 0;
    v22 = (HALS_MetaDeviceDescription *)*((_QWORD *)v5 + 168);
    do
    {
      v24 = *(_QWORD *)v22;
      v23 = *((_QWORD *)v22 + 1);
      v22 = (HALS_MetaDeviceDescription *)((char *)v22 + 24);
      v21 += (unint64_t)(v23 - v24) >> 3;
    }
    while (v22 != v20);
    if (v21)
    {
      for (i = 0; i != v21; ++i)
      {
        SubDeviceByIndex = HALS_MetaDeviceDescription::GetSubDeviceByIndex(v19, v20, i);
        if (HALS_Object::IsObjectClassInClassIDList((HALS_Object *)*(unsigned int *)(a1 + 68), *(_QWORD *)(a1 + 48), (const unsigned int *)SubDeviceByIndex, v27))*(_DWORD *)(*(_QWORD *)(a1 + 56)+ 4 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))++) = *(_DWORD *)(SubDeviceByIndex + 16);
      }
    }
  }
  v28 = (const unsigned int **)*((_QWORD *)v5 + 175);
  v29 = (const unsigned int **)*((_QWORD *)v5 + 174);
  v30 = (unint64_t)((char *)v28 - (char *)v29) >> 3;
  if (!(_DWORD)v30)
    return;
  v31 = 0;
  do
  {
    if (v29 == v28)
      goto LABEL_37;
    v32 = 0;
    v33 = v29;
    while (1)
    {
      if (v32 != v31)
      {
        ++v32;
        goto LABEL_33;
      }
      v34 = *v33;
      v32 = v31;
      if (*v33)
        break;
LABEL_33:
      if (++v33 == v28)
        goto LABEL_37;
    }
    if (HALS_Object::IsObjectClassInClassIDList((HALS_Object *)*(unsigned int *)(a1 + 68), *(_QWORD *)(a1 + 48), *v33, a4))*(_DWORD *)(*(_QWORD *)(a1 + 56)+ 4 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))++) = v34[4];
LABEL_37:
    ++v31;
  }
  while (v31 != (_DWORD)v30);
}

void sub_1B59BBE8C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

CFTypeRef ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_45(uint64_t a1)
{
  CFTypeRef result;

  result = HALS_MetaDeviceDescription::CopyDeviceName(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 32) + 1336));
  **(_QWORD **)(a1 + 40) = result;
  return result;
}

uint64_t ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_49(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(_DWORD *)(*(_QWORD *)(result + 32) + 16);
  return result;
}

uint64_t ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_51(uint64_t a1)
{
  const __CFDictionary **v2;
  uint64_t result;

  v2 = *(const __CFDictionary ***)(a1 + 32);
  result = (*((uint64_t (**)(const __CFDictionary **, _QWORD, _QWORD))*v2 + 71))(v2, *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));
  if ((_DWORD)result)
    result = HALS_MetaDeviceDescription::CanBeDefaultDevice(v2 + 165, *(unsigned __int8 *)(a1 + 56), 0);
  **(_DWORD **)(a1 + 40) = result;
  return result;
}

void sub_1B59BBF44(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_53(uint64_t a1)
{
  const __CFDictionary **v2;
  uint64_t result;

  v2 = *(const __CFDictionary ***)(a1 + 32);
  result = (*((uint64_t (**)(const __CFDictionary **, _QWORD, _QWORD))*v2 + 71))(v2, *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));
  if ((_DWORD)result)
    result = HALS_MetaDeviceDescription::CanBeDefaultDevice(v2 + 165, *(unsigned __int8 *)(a1 + 56), 1);
  **(_DWORD **)(a1 + 40) = result;
  return result;
}

void sub_1B59BBFA8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

unint64_t ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_55(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  HALS_MetaSubDevice *v5;
  uint64_t v6;
  HALS_Object *v7;
  HALS_ObjectMap *v8;
  int v9;
  unint64_t result;
  int v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(HALS_MetaSubDevice **)(v2 + 1424);
  if (v5 || (v5 = *(HALS_MetaSubDevice **)(v2 + 1416)) != 0)
  {
    v6 = HALS_MetaSubDevice::CopyRealIODevice(v5);
    v8 = (HALS_ObjectMap *)v6;
    if (v6)
      v9 = (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)v6 + 304))(v6, v3 != 0);
    else
      v9 = 0;
    HALS_ObjectMap::ReleaseObject(v8, v7);
  }
  else
  {
    v9 = 0;
  }
  result = HALS_Device::_GetDSPLatencyForClient(v2, v3 != 0, v4);
  v11 = 0;
  if (result > 0x100000000)
    v11 = result;
  **(_DWORD **)(a1 + 40) = v9 + v11;
  return result;
}

void sub_1B59BC06C(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  HALS_ObjectMap *v16;

  HALS_ObjectMap::ReleaseObject(v16, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_57(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  HALS_MetaSubDevice *v4;
  uint64_t v5;
  HALS_Object *v6;
  HALS_ObjectMap *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = (HALS_MetaSubDevice *)v2[178];
  if (v4 || (v4 = (HALS_MetaSubDevice *)v2[177]) != 0)
  {
    v5 = HALS_MetaSubDevice::CopyRealIODevice(v4);
    v7 = (HALS_ObjectMap *)v5;
    if (v5)
      v8 = (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)v5 + 312))(v5, v3 != 0);
    else
      v8 = 0;
  }
  else
  {
    v9 = v2[175];
    v10 = v2[174];
    if (((v9 - v10) & 0x7FFFFFFF8) == 0 || v3 == 0)
    {
      v8 = 0;
      goto LABEL_7;
    }
    v12 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(*(_QWORD *)v10 + 72));
    v7 = (HALS_ObjectMap *)v12;
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 248);
      v14 = *(std::__shared_weak_count **)(v12 + 256);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
        v8 = *(_DWORD *)(v13 + 68);
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      else
      {
        v8 = *(_DWORD *)(v13 + 68);
      }
    }
    else
    {
      v8 = 0;
    }
  }
  HALS_ObjectMap::ReleaseObject(v7, v6);
LABEL_7:
  **(_DWORD **)(a1 + 40) = v8;
}

void sub_1B59BC1C4(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  HALS_ObjectMap *v14;

  HALS_ObjectMap::ReleaseObject(v14, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_59(uint64_t a1)
{
  **(double **)(a1 + 40) = HALS_MetaDeviceDescription::GetNominalSampleRate((HALS_MetaDeviceDescription *)(*(_QWORD *)(a1 + 32) + 1320));
}

void sub_1B59BC228(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _OWORD *v5;
  HALS_MetaSubDevice *v6;
  uint64_t v7;
  HALS_Object *v8;
  HALS_ObjectMap *v9;
  __int128 *v10;
  uint64_t v11;
  HALS_ObjectMap *v12;
  HALS_Object *v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  _QWORD v17[3];

  v1 = *(_DWORD *)(a1 + 56) >> 4;
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  *(_DWORD *)(v3 + 24) = 0;
  v4 = (_DWORD *)(v3 + 24);
  v5 = *(_OWORD **)(a1 + 48);
  v6 = *(HALS_MetaSubDevice **)(v2 + 1424);
  if (v6 || (v6 = *(HALS_MetaSubDevice **)(v2 + 1416)) != 0)
  {
    v7 = HALS_MetaSubDevice::CopyRealIODevice(v6);
    v9 = (HALS_ObjectMap *)v7;
    if (v7)
      (*(void (**)(uint64_t, uint64_t, _DWORD *, _OWORD *))(*(_QWORD *)v7 + 288))(v7, v1, v4, v5);
    HALS_ObjectMap::ReleaseObject(v9, v8);
  }
  else if (((*(_QWORD *)(v2 + 1400) - *(_QWORD *)(v2 + 1392)) & 0x7FFFFFFF8) != 0)
  {
    get_tap_sample_rate_range((uint64_t)v17);
    v10 = (__int128 *)v17[0];
    v11 = (v17[1] - v17[0]) >> 4;
    if (v11 >= v1)
      LODWORD(v11) = v1;
    *v4 = v11;
    v12 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(**(_QWORD **)(v2 + 1392) + 72));
    if (v12)
    {
      v14 = *v4;
      if ((_DWORD)v14)
      {
        v15 = v10;
        do
        {
          v16 = *v15++;
          *v5++ = v16;
          --v14;
        }
        while (v14);
      }
    }
    HALS_ObjectMap::ReleaseObject(v12, v13);
    if (v10)
      operator delete(v10);
  }
}

void sub_1B59BC33C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;

  if (v20)
    operator delete(v20);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

CFTypeRef __Block_byref_object_copy__62(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;
  int v4;
  BOOL v5;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  v4 = *(unsigned __int8 *)(a2 + 48);
  *(_BYTE *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  if (v4)
    v5 = result == 0;
  else
    v5 = 1;
  if (!v5)
    return CFRetain(result);
  return result;
}

void __Block_byref_object_dispose__63(uint64_t a1)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)(a1 + 40));
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_64(uint64_t a1)
{
  uint64_t v1;
  const __CFDictionary *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = HALS_MetaDeviceDescription::CopyRawDescription((CFDictionaryRef *)(*(_QWORD *)(a1 + 40) + 1320));
  CACFDictionary::AssignWithoutRetain((const __CFDictionary **)(v1 + 40), v2);
}

void sub_1B59BC3F8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_68(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  HALS_MetaSubDevice *SubDeviceByIndex;
  HALS_ObjectMap *v11;
  HALS_Object *v12;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(uint64_t **)(v2 + 1344);
  v4 = *(uint64_t **)(v2 + 1352);
  if (v3 == v4)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v7 = *v3;
      v6 = v3[1];
      v3 += 3;
      v5 += (unint64_t)(v6 - v7) >> 3;
    }
    while (v3 != v4);
  }
  if (v5 >= *(_DWORD *)(a1 + 56) >> 2)
    v8 = *(_DWORD *)(a1 + 56) >> 2;
  else
    v8 = v5;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v8;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v9 = 0;
    do
    {
      SubDeviceByIndex = (HALS_MetaSubDevice *)HALS_MetaDeviceDescription::GetSubDeviceByIndex(*(uint64_t ***)(v2 + 1344), *(HALS_MetaDeviceDescription **)(v2 + 1352), v9);
      v11 = (HALS_ObjectMap *)HALS_MetaSubDevice::CopyRealIODevice(SubDeviceByIndex);
      *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v9) = *((_DWORD *)v11 + 4);
      HALS_ObjectMap::ReleaseObject(v11, v12);
      ++v9;
    }
    while (v9 < *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  }
}

void sub_1B59BC4D4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  unint64_t i;
  int v8;
  uint64_t v9;
  HALS_ObjectMap *v10;
  HALS_Object *v11;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (*(_QWORD *)(v1 + 1400) - *(_QWORD *)(v1 + 1392)) >> 3;
  v3 = *(_DWORD *)(a1 + 56);
  v4 = v2 >= v3 >> 2;
  v5 = v3 >> 2;
  if (v4)
    LODWORD(v2) = v5;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v2;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    for (i = 0; i < *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24); ++i)
    {
      v8 = 0;
      v9 = *(_QWORD *)(v1 + 1392);
      while (v8 != (_DWORD)i)
      {
        ++v8;
LABEL_11:
        v9 += 8;
      }
      v8 = i;
      if (!*(_QWORD *)v9)
        goto LABEL_11;
      v10 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(*(_QWORD *)v9 + 72));
      *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * i) = *((_DWORD *)v10 + 4);
      HALS_ObjectMap::ReleaseObject(v10, v11);
    }
  }
}

void sub_1B59BC5AC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

CFDictionaryRef ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_71(uint64_t a1)
{
  CFDictionaryRef result;

  result = HALS_MetaDeviceDescription::CopyRawDescription((CFDictionaryRef *)(*(_QWORD *)(a1 + 32) + 1320));
  **(_QWORD **)(a1 + 40) = result;
  return result;
}

void sub_1B59BC5F0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void sub_1B59BC634(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_75(uint64_t a1)
{
  HALS_MetaSubDevice *v2;
  uint64_t v3;
  CFStringRef v4;
  char v5;

  v2 = *(HALS_MetaSubDevice **)(*(_QWORD *)(a1 + 32) + 1424);
  if (v2 && (v3 = HALS_MetaSubDevice::CopyRealDeviceUID(v2)) != 0)
  {
    **(_QWORD **)(a1 + 40) = v3;
  }
  else
  {
    v4 = CFStringCreateWithCString(0, "", 0x600u);
    v5 = 0;
    **(_QWORD **)(a1 + 40) = v4;
    CACFString::~CACFString((CACFString *)&v4);
  }
}

void sub_1B59BC6B4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_78(uint64_t a1)
{
  uint64_t v1;
  const __CFDictionary *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = HALS_MetaDeviceDescription::CopyRawDescription((CFDictionaryRef *)(*(_QWORD *)(a1 + 40) + 1320));
  CACFDictionary::AssignWithoutRetain((const __CFDictionary **)(v1 + 40), v2);
}

void sub_1B59BC700(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_80(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 40);
  v2 = *(_QWORD *)(v1 + 1424);
  if (!v2)
    v2 = *(_QWORD *)(v1 + 1416);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v2;
  return result;
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_82(uint64_t a1)
{
  uint64_t v2;
  HALS_MetaSubDevice ***v3;
  HALS_MetaSubDevice ***v4;
  char v5;
  HALS_MetaSubDevice **v6;
  HALS_MetaSubDevice **v7;
  uint64_t v8;
  HALS_Object *v9;
  HALS_ObjectMap *v10;
  char v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(HALS_MetaSubDevice ****)(v2 + 1344);
  v4 = *(HALS_MetaSubDevice ****)(v2 + 1352);
  if (v3 == v4)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = *v3;
      v7 = v3[1];
      while (v6 != v7)
      {
        v8 = HALS_MetaSubDevice::CopyRealIODevice(*v6);
        v10 = (HALS_ObjectMap *)v8;
        if (v8)
        {
          v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 408))(v8);
          if (v5)
            v5 = 1;
          else
            v5 = v11;
        }
        HALS_ObjectMap::ReleaseObject(v10, v9);
        ++v6;
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
  **(_DWORD **)(a1 + 40) = v5 != 0;
}

void sub_1B59BC7E4(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  HALS_ObjectMap *v18;

  HALS_ObjectMap::ReleaseObject(v18, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_84(uint64_t a1)
{
  uint64_t v2;
  HALS_MetaSubDevice ***v3;
  HALS_MetaSubDevice ***v4;
  unsigned int v5;
  HALS_MetaSubDevice **v6;
  HALS_MetaSubDevice **v7;
  uint64_t v8;
  HALS_Object *v9;
  HALS_ObjectMap *v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(HALS_MetaSubDevice ****)(v2 + 1344);
  v4 = *(HALS_MetaSubDevice ****)(v2 + 1352);
  if (v3 == v4)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = *v3;
      v7 = v3[1];
      while (v6 != v7)
      {
        v8 = HALS_MetaSubDevice::CopyRealIODevice(*v6);
        v10 = (HALS_ObjectMap *)v8;
        if (v8)
        {
          v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 416))(v8);
          if (v5 <= v11)
            v5 = v11;
        }
        HALS_ObjectMap::ReleaseObject(v10, v9);
        ++v6;
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
  **(_DWORD **)(a1 + 40) = v5;
}

void sub_1B59BC8CC(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  HALS_ObjectMap *v18;

  HALS_ObjectMap::ReleaseObject(v18, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_86(uint64_t a1)
{
  uint64_t v2;
  HALS_MetaSubDevice ***v3;
  HALS_MetaSubDevice ***v4;
  unsigned int v5;
  HALS_MetaSubDevice **v6;
  HALS_MetaSubDevice **v7;
  uint64_t v8;
  HALS_Object *v9;
  HALS_ObjectMap *v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(HALS_MetaSubDevice ****)(v2 + 1344);
  v4 = *(HALS_MetaSubDevice ****)(v2 + 1352);
  if (v3 == v4)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = *v3;
      v7 = v3[1];
      while (v6 != v7)
      {
        v8 = HALS_MetaSubDevice::CopyRealIODevice(*v6);
        v10 = (HALS_ObjectMap *)v8;
        if (v8)
        {
          v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 424))(v8);
          if (v5 <= v11)
            v5 = v11;
        }
        HALS_ObjectMap::ReleaseObject(v10, v9);
        ++v6;
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
  **(_DWORD **)(a1 + 40) = v5;
}

void sub_1B59BC9B4(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  HALS_ObjectMap *v18;

  HALS_ObjectMap::ReleaseObject(v18, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_88(uint64_t a1)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  HALS_ObjectMap *v7;
  HALS_Object *v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(uint64_t ***)(v2 + 1344);
  v4 = *(uint64_t ***)(v2 + 1352);
  while (v3 != v4)
  {
    v5 = *v3;
    v6 = v3[1];
    while (v5 != v6)
    {
      v7 = (HALS_ObjectMap *)HALS_MetaSubDevice::CopyRealDevice<HALS_Device>(*v5);
      HALS_ObjectMap::ReleaseObject(v7, v8);
      ++v5;
    }
    v3 += 3;
  }
  **(_DWORD **)(a1 + 40) = 0;
}

void sub_1B59BCA64(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void CACFDictionary::AssignWithoutRetain(const __CFDictionary **this, const __CFDictionary *a2)
{
  const __CFDictionary *v3;
  BOOL v5;

  v3 = *this;
  if (v3 != a2)
  {
    if (v3)
      v5 = *((_BYTE *)this + 8) == 0;
    else
      v5 = 1;
    if (!v5)
      CFRelease(v3);
    *this = a2;
    *((_BYTE *)this + 9) = 0;
  }
  *((_BYTE *)this + 8) = 1;
}

void ___ZNK15HALS_MetaDevice19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(uint64_t a1)
{
  char v2;
  _QWORD *v3;
  char v4;
  char v5;
  HALS_Object *v6;
  int v7;
  uint64_t v8;
  HALS_Object *v9;
  HALS_Object *v10;
  unsigned int *v11;
  uint64_t **v12;
  HALS_MetaDeviceDescription *v13;
  int v14;
  HALS_MetaDeviceDescription *v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  const unsigned int *SubDeviceByIndex;
  HALS_Object *v20;
  const unsigned int **v21;
  const unsigned int **v22;
  unint64_t v23;
  int v24;
  int v25;
  const unsigned int **v26;

  v2 = 0;
  v3 = *(_QWORD **)(a1 + 40);
  v4 = 1;
  do
  {
    v5 = v4;
    v7 = (*(uint64_t (**)(_QWORD *, _QWORD))(*v3 + 384))(v3, v2 & 1);
    if (v7)
    {
      v8 = 0;
      do
      {
        v11 = (unsigned int *)(*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v3 + 392))(v3, v2 & 1, v8);
        if (v11
          && HALS_Object::IsObjectClassInClassIDList((HALS_Object *)*(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 48), v11, v10))
        {
          ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        }
        HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v11, v9);
        v8 = (v8 + 1);
      }
      while (v7 != (_DWORD)v8);
    }
    v4 = 0;
    v2 = 1;
  }
  while ((v5 & 1) != 0);
  v12 = (uint64_t **)v3[168];
  v13 = (HALS_MetaDeviceDescription *)v3[169];
  if (v12 != (uint64_t **)v13)
  {
    v14 = 0;
    v15 = (HALS_MetaDeviceDescription *)v3[168];
    do
    {
      v17 = *(_QWORD *)v15;
      v16 = *((_QWORD *)v15 + 1);
      v15 = (HALS_MetaDeviceDescription *)((char *)v15 + 24);
      v14 += (unint64_t)(v16 - v17) >> 3;
    }
    while (v15 != v13);
    if (v14)
    {
      for (i = 0; i != v14; ++i)
      {
        SubDeviceByIndex = (const unsigned int *)HALS_MetaDeviceDescription::GetSubDeviceByIndex(v12, v13, i);
        if (HALS_Object::IsObjectClassInClassIDList((HALS_Object *)*(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 48), SubDeviceByIndex, v20))++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      }
    }
  }
  v21 = (const unsigned int **)v3[175];
  v22 = (const unsigned int **)v3[174];
  v23 = (unint64_t)((char *)v21 - (char *)v22) >> 3;
  if (!(_DWORD)v23)
    return;
  v24 = 0;
  do
  {
    if (v22 == v21)
      goto LABEL_29;
    v25 = 0;
    v26 = v22;
    while (1)
    {
      if (v25 != v24)
      {
        ++v25;
        goto LABEL_25;
      }
      v25 = v24;
      if (*v26)
        break;
LABEL_25:
      if (++v26 == v21)
        goto LABEL_29;
    }
    if (HALS_Object::IsObjectClassInClassIDList((HALS_Object *)*(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 48), *v26, v6))++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
LABEL_29:
    ++v24;
  }
  while (v24 != (_DWORD)v23);
}

void sub_1B59BCC98(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2(uint64_t a1)
{
  _QWORD *v2;
  HALS_MetaSubDevice *v3;
  uint64_t v4;
  HALS_Object *v5;
  HALS_ObjectMap *v6;
  unint64_t v7;
  void *v8[3];

  v2 = *(_QWORD **)(a1 + 40);
  v3 = (HALS_MetaSubDevice *)v2[178];
  if (v3 || (v3 = (HALS_MetaSubDevice *)v2[177]) != 0)
  {
    v4 = HALS_MetaSubDevice::CopyRealIODevice(v3);
    v6 = (HALS_ObjectMap *)v4;
    if (v4)
      LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 280))(v4);
    else
      LODWORD(v7) = 0;
    HALS_ObjectMap::ReleaseObject(v6, v5);
  }
  else if (((v2[175] - v2[174]) & 0x7FFFFFFF8) != 0)
  {
    get_tap_sample_rate_range((uint64_t)v8);
    v7 = (unint64_t)((char *)v8[1] - (char *)v8[0]) >> 4;
    if (v8[0])
      operator delete(v8[0]);
  }
  else
  {
    LODWORD(v7) = 0;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v7;
}

void sub_1B59BCD74(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  HALS_ObjectMap *v18;

  HALS_ObjectMap::ReleaseObject(v18, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK15HALS_MetaDevice19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 40);
  v2 = *(uint64_t **)(v1 + 1344);
  v3 = *(uint64_t **)(v1 + 1352);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v6 = *v2;
      v5 = v2[1];
      v2 += 3;
      v4 += (unint64_t)(v5 - v6) >> 3;
    }
    while (v2 != v3);
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v4;
  return result;
}

uint64_t ___ZNK15HALS_MetaDevice19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = (*(_QWORD *)(*(_QWORD *)(result + 40) + 1400)
                                                                   - *(_QWORD *)(*(_QWORD *)(result + 40) + 1392)) >> 3;
  return result;
}

uint64_t __Block_byref_object_copy__36(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 40) = &off_1E69A0F60;
  return result;
}

void __Block_byref_object_dispose__37(uint64_t a1)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 40));
}

uint64_t ___ZNK15HALS_MetaDevice11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke(uint64_t a1)
{
  CFTypeRef v2;

  v2 = HALS_MetaDeviceDescription::CopyDeviceName(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 40) + 1336));
  return OS::CF::UntypedObject::operator=(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, (uint64_t)v2);
}

void ___ZN15HALS_MetaDevice17RealDeviceArrivedEP11HALS_Device_block_invoke(uint64_t a1)
{
  CFDictionaryRef *v1;
  uint64_t v2;
  uint64_t v3;
  const __CFString *v4;
  _BOOL4 IsDeviceInRawDescription;
  CAPropertyAddressListVector *v6;
  const AudioObjectPropertyAddress *v7;
  const AudioObjectPropertyAddress *v8;
  const AudioObjectPropertyAddress *v9;
  const AudioObjectPropertyAddress *v10;
  const AudioObjectPropertyAddress *v11;
  const AudioObjectPropertyAddress *v12;
  const AudioObjectPropertyAddress *v13;
  const AudioObjectPropertyAddress *v14;
  _BOOL4 v15;
  _BOOL4 v16;
  const AudioObjectPropertyAddress *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  AudioObjectPropertyAddress v21;
  void **v22[4];
  uint64_t v23;
  _QWORD v24[4];
  uint64_t v25;
  BOOL v26[2];

  v1 = *(CFDictionaryRef **)(a1 + 48);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = (const __CFString *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 208))(*(_QWORD *)(a1 + 56));
  v24[0] = &off_1E69A0F60;
  v24[1] = v4;
  IsDeviceInRawDescription = HALS_MetaDeviceDescription::IsDeviceInRawDescription(v1 + 165, v4);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v24);
  if (IsDeviceInRawDescription)
  {
    *(_WORD *)v26 = 0;
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v24);
    HALS_DeviceState::Capture((HALS_DeviceState *)v24, (HALS_Device *)v1, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    HALS_MetaDeviceDescription::UpdateSubDeviceList(v1 + 165, 0);
    HALS_MetaDevice::_UpdateStreams(v1, v26);
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v22);
    HALS_DeviceState::Capture((HALS_DeviceState *)v22, (HALS_Device *)v1, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    HALS_DeviceState::Compare((HALS_DeviceState *)v24, (const HALS_DeviceState *)v22, (const AudioObjectPropertyAddress *)(v2 + 40), (CAPropertyAddressList **)(v3 + 40), v6);
    *(_QWORD *)&v21.mSelector = 0x676C6F62616D7374;
    v21.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v21, v7);
    *(_QWORD *)&v21.mSelector = 0x676C6F6261706364;
    v21.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v21, v8);
    *(_QWORD *)&v21.mSelector = 0x676C6F6267727570;
    v21.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v21, v9);
    *(_QWORD *)&v21.mSelector = 0x676C6F6261677270;
    v21.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v21, v10);
    *(_QWORD *)&v21.mSelector = 0x676C6F6261636F6DLL;
    v21.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v21, v11);
    *(_QWORD *)&v21.mSelector = 0x676C6F6261746170;
    v21.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v21, v12);
    *(_QWORD *)&v21.mSelector = 0x676C6F6274617023;
    v21.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v21, v13);
    v15 = v26[1];
    v16 = v26[0];
    if (v26[1] || v26[0])
    {
      *(_QWORD *)&v21.mSelector = 0x676C6F6273746D23;
      v21.mElement = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v21, v14);
      if (v15)
      {
        *(_QWORD *)&v21.mSelector = 0x696E707473746D23;
        v21.mElement = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v21, v17);
      }
      if (v16)
      {
        *(_QWORD *)&v21.mSelector = 0x6F75747073746D23;
        v21.mElement = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v21, v17);
      }
      if (*(_QWORD *)(v2 + 40) == *(_QWORD *)(v2 + 48))
      {
        v18 = *(uint64_t **)(v3 + 40);
        while (v18 != *(uint64_t **)(v3 + 48))
        {
          v19 = *v18;
          v20 = v18[1];
          v18 += 4;
          if (v19 != v20)
            goto LABEL_11;
        }
      }
      else
      {
LABEL_11:
        *(_QWORD *)&v21.mSelector = 0x676C6F6264696666;
        v21.mElement = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v21, v17);
      }
    }
    *(_QWORD *)&v21.mSelector = &v23;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v22[2]);
    v22[0] = (void **)&v25;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](v22);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy((_QWORD *)v24[2]);
  }
}

void sub_1B59BD198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void **a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21,uint64_t a22,uint64_t a23)
{
  a10 = (void **)&a16;
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(a14);
  a12 = (void **)&a23;
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(a21);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_MetaDevice14RealDeviceDiedEP11HALS_Device_block_invoke(_QWORD *a1)
{
  CFDictionaryRef *v1;
  HALS_Device *v2;
  uint64_t v3;
  uint64_t v4;
  const __CFString *v5;
  _BOOL4 IsDeviceInRawDescription;
  CAPropertyAddressListVector *v7;
  const AudioObjectPropertyAddress *v8;
  const AudioObjectPropertyAddress *v9;
  const AudioObjectPropertyAddress *v10;
  const AudioObjectPropertyAddress *v11;
  const AudioObjectPropertyAddress *v12;
  const AudioObjectPropertyAddress *v13;
  const AudioObjectPropertyAddress *v14;
  const AudioObjectPropertyAddress *v15;
  _BOOL4 v16;
  _BOOL4 v17;
  const AudioObjectPropertyAddress *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  AudioObjectPropertyAddress v22;
  void **v23[4];
  uint64_t v24;
  _QWORD v25[4];
  uint64_t v26;
  BOOL v27[2];

  v1 = (CFDictionaryRef *)a1[6];
  v2 = (HALS_Device *)a1[7];
  v3 = *(_QWORD *)(a1[4] + 8);
  v4 = *(_QWORD *)(a1[5] + 8);
  v5 = (const __CFString *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)v2 + 208))(v2);
  v25[0] = &off_1E69A0F60;
  v25[1] = v5;
  IsDeviceInRawDescription = HALS_MetaDeviceDescription::IsDeviceInRawDescription(v1 + 165, v5);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v25);
  if (IsDeviceInRawDescription)
  {
    *(_WORD *)v27 = 0;
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v25);
    HALS_DeviceState::Capture((HALS_DeviceState *)v25, (HALS_Device *)v1, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    HALS_MetaDeviceDescription::UpdateSubDeviceList(v1 + 165, v2);
    HALS_MetaDevice::_UpdateStreams(v1, v27);
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v23);
    HALS_DeviceState::Capture((HALS_DeviceState *)v23, (HALS_Device *)v1, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    HALS_DeviceState::Compare((HALS_DeviceState *)v25, (const HALS_DeviceState *)v23, (const AudioObjectPropertyAddress *)(v3 + 40), (CAPropertyAddressList **)(v4 + 40), v7);
    *(_QWORD *)&v22.mSelector = 0x676C6F62616D7374;
    v22.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v22, v8);
    *(_QWORD *)&v22.mSelector = 0x676C6F6261706364;
    v22.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v22, v9);
    *(_QWORD *)&v22.mSelector = 0x676C6F6267727570;
    v22.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v22, v10);
    *(_QWORD *)&v22.mSelector = 0x676C6F6261677270;
    v22.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v22, v11);
    *(_QWORD *)&v22.mSelector = 0x676C6F6261636F6DLL;
    v22.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v22, v12);
    *(_QWORD *)&v22.mSelector = 0x676C6F6261746170;
    v22.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v22, v13);
    *(_QWORD *)&v22.mSelector = 0x676C6F6274617023;
    v22.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v22, v14);
    v16 = v27[1];
    v17 = v27[0];
    if (v27[1] || v27[0])
    {
      *(_QWORD *)&v22.mSelector = 0x676C6F6273746D23;
      v22.mElement = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v22, v15);
      if (v16)
      {
        *(_QWORD *)&v22.mSelector = 0x696E707473746D23;
        v22.mElement = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v22, v18);
      }
      if (v17)
      {
        *(_QWORD *)&v22.mSelector = 0x6F75747073746D23;
        v22.mElement = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v22, v18);
      }
      if (*(_QWORD *)(v3 + 40) == *(_QWORD *)(v3 + 48))
      {
        v19 = *(uint64_t **)(v4 + 40);
        while (v19 != *(uint64_t **)(v4 + 48))
        {
          v20 = *v19;
          v21 = v19[1];
          v19 += 4;
          if (v20 != v21)
            goto LABEL_11;
        }
      }
      else
      {
LABEL_11:
        *(_QWORD *)&v22.mSelector = 0x676C6F6264696666;
        v22.mElement = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v22, v18);
      }
    }
    *(_QWORD *)&v22.mSelector = &v24;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v23[2]);
    v23[0] = (void **)&v26;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](v23);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy((_QWORD *)v25[2]);
  }
}

void sub_1B59BD4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void **a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21,uint64_t a22,uint64_t a23)
{
  a10 = (void **)&a16;
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(a14);
  a12 = (void **)&a23;
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(a21);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_MetaDevice25HandleTapSampleRateChangeEv_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  CAPropertyAddressListVector *v3;
  uint64_t v4;
  const AudioObjectPropertyAddress *v5;
  uint64_t v6;
  const AudioObjectPropertyAddress *v7;
  uint64_t v8;
  const AudioObjectPropertyAddress *v9;
  uint64_t v10;
  const AudioObjectPropertyAddress *v11;
  uint64_t v12;
  const AudioObjectPropertyAddress *v13;
  uint64_t v14;
  const AudioObjectPropertyAddress *v15;
  uint64_t v16;
  const AudioObjectPropertyAddress *v17;
  uint64_t v18;
  const AudioObjectPropertyAddress *v19;
  uint64_t v20;
  const AudioObjectPropertyAddress *v21;
  uint64_t v22;
  const AudioObjectPropertyAddress *v23;
  const AudioObjectPropertyAddress *v24;
  _BOOL4 v25;
  _BOOL4 v26;
  const AudioObjectPropertyAddress *v27;
  uint64_t v28;
  CAPropertyAddressList *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  AudioObjectPropertyAddress v37;
  void **v38[4];
  uint64_t v39;
  _BYTE v40[16];
  _QWORD *v41;
  uint64_t v42;
  BOOL v43[2];

  v1 = a1[6];
  if (((*(_QWORD *)(v1 + 1400) - *(_QWORD *)(v1 + 1392)) & 0x7FFFFFFF8) != 0)
  {
    *(_WORD *)v43 = 0;
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v40);
    HALS_DeviceState::Capture((HALS_DeviceState *)v40, (HALS_Device *)v1, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    HALS_MetaDeviceDescription::UpdateSubDeviceList((CFDictionaryRef *)(v1 + 1320), 0);
    HALS_MetaDevice::_UpdateStreams((const __CFDictionary **)v1, v43);
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v38);
    HALS_DeviceState::Capture((HALS_DeviceState *)v38, (HALS_Device *)v1, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    HALS_DeviceState::Compare((HALS_DeviceState *)v40, (const HALS_DeviceState *)v38, (const AudioObjectPropertyAddress *)(*(_QWORD *)(a1[4] + 8) + 40), (CAPropertyAddressList **)(*(_QWORD *)(a1[5] + 8) + 40), v3);
    v4 = *(_QWORD *)(a1[4] + 8);
    *(_QWORD *)&v37.mSelector = 0x676C6F62616D7374;
    v37.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v4 + 40), &v37, v5);
    v6 = *(_QWORD *)(a1[4] + 8);
    *(_QWORD *)&v37.mSelector = 0x676C6F6261706364;
    v37.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v6 + 40), &v37, v7);
    v8 = *(_QWORD *)(a1[4] + 8);
    *(_QWORD *)&v37.mSelector = 0x676C6F6267727570;
    v37.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v8 + 40), &v37, v9);
    v10 = *(_QWORD *)(a1[4] + 8);
    *(_QWORD *)&v37.mSelector = 0x676C6F6261677270;
    v37.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v10 + 40), &v37, v11);
    v12 = *(_QWORD *)(a1[4] + 8);
    *(_QWORD *)&v37.mSelector = 0x676C6F6261636F6DLL;
    v37.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v12 + 40), &v37, v13);
    v14 = *(_QWORD *)(a1[4] + 8);
    *(_QWORD *)&v37.mSelector = 0x676C6F6261746170;
    v37.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v14 + 40), &v37, v15);
    v16 = *(_QWORD *)(a1[4] + 8);
    *(_QWORD *)&v37.mSelector = 0x676C6F6274617023;
    v37.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v16 + 40), &v37, v17);
    v18 = *(_QWORD *)(a1[4] + 8);
    *(_QWORD *)&v37.mSelector = 0x676C6F626E737274;
    v37.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v18 + 40), &v37, v19);
    v20 = *(_QWORD *)(a1[4] + 8);
    *(_QWORD *)&v37.mSelector = 0x676C6F6261737274;
    v37.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v20 + 40), &v37, v21);
    v22 = *(_QWORD *)(a1[4] + 8);
    *(_QWORD *)&v37.mSelector = 0x676C6F626E737223;
    v37.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v22 + 40), &v37, v23);
    v25 = v43[1];
    v26 = v43[0];
    if (v43[1] || v43[0])
    {
      *(_QWORD *)&v37.mSelector = 0x676C6F6273746D23;
      v37.mElement = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(*(_QWORD *)(a1[4] + 8) + 40), &v37, v24);
      if (v25)
      {
        *(_QWORD *)&v37.mSelector = 0x696E707473746D23;
        v37.mElement = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(*(_QWORD *)(a1[4] + 8) + 40), &v37, v27);
      }
      if (v26)
      {
        *(_QWORD *)&v37.mSelector = 0x6F75747073746D23;
        v37.mElement = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(*(_QWORD *)(a1[4] + 8) + 40), &v37, v27);
      }
      v28 = *(_QWORD *)(a1[4] + 8);
      v30 = *(_QWORD *)(v28 + 40);
      v31 = *(_QWORD *)(v28 + 48);
      v29 = (CAPropertyAddressList *)(v28 + 40);
      if (v30 == v31)
      {
        v32 = *(_QWORD *)(a1[5] + 8);
        v33 = *(uint64_t **)(v32 + 40);
        v34 = *(uint64_t **)(v32 + 48);
        while (v33 != v34)
        {
          v35 = *v33;
          v36 = v33[1];
          v33 += 4;
          if (v35 != v36)
            goto LABEL_11;
        }
      }
      else
      {
LABEL_11:
        *(_QWORD *)&v37.mSelector = 0x676C6F6264696666;
        v37.mElement = 0;
        CAPropertyAddressList::AppendUniqueItem(v29, &v37, v27);
      }
    }
    *(_QWORD *)&v37.mSelector = &v39;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v38[2]);
    v38[0] = (void **)&v42;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](v38);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v41);
  }
}

void sub_1B59BD848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  HALS_DeviceState::~HALS_DeviceState((HALS_DeviceState *)va);
  HALS_DeviceState::~HALS_DeviceState((HALS_DeviceState *)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN15HALS_MetaDevice6HasTapEN10applesauce2CF9StringRefE_block_invoke(uint64_t a1)
{
  CFTypeRef v2;

  v2 = HALS_MetaDeviceDescription::CopyTapList(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 40) + 1336));
  return OS::CF::UntypedObject::operator=(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, (uint64_t)v2);
}

CFDictionaryRef ___ZN15HALS_MetaDevice16UpdateTapReadersEN10applesauce2CF9StringRefE_block_invoke(uint64_t a1)
{
  CFDictionaryRef result;

  result = HALS_MetaDeviceDescription::CopyRawDescription((CFDictionaryRef *)(*(_QWORD *)(a1 + 40) + 1320));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void HALS_AHPObject::~HALS_AHPObject(HALS_AHPObject *this)
{
  HALS_Object::~HALS_Object(this);
  JUMPOUT(0x1B5E50688);
}

BOOL HALS_AHPObject::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v4;
  _BOOL8 result;
  BOOL v6;
  int v7;

  v4 = *a3;
  result = 1;
  if (*a3 > 1869638758)
  {
    v6 = v4 == 1869638759;
    v7 = 1937007734;
  }
  else
  {
    v6 = v4 == 1650682995;
    v7 = 1668047219;
  }
  if (!v6 && v4 != v7)
    return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 32) + 184))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32)) != 0;
  return result;
}

uint64_t HALS_AHPObject::IsPropertySettable(HALS_AHPObject *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t v7;
  uint64_t v8;
  AudioObjectPropertySelector mSelector;
  BOOL v10;
  int v11;
  _DWORD *exception;

  v7 = (*(uint64_t (**)(HALS_AHPObject *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a4);
  if ((v7 & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    v10 = mSelector == 1937007734;
    v11 = 1869638759;
  }
  else
  {
    v10 = mSelector == 1650682995;
    v11 = 1668047219;
  }
  if (v10 || mSelector == v11)
    return HALS_Object::IsPropertySettable(v7, v8, (int *)a3);
  else
    return HALS_AHPPlugIn::ObjectIsPropertySettable(*(HALS_AHPPlugIn **)(*((_QWORD *)this + 6) + 32), a2, a3);
}

uint64_t HALS_AHPObject::GetPropertyDataSize(HALS_AHPObject *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, HALS_Client *a6)
{
  uint64_t v11;
  uint64_t v12;
  AudioObjectPropertySelector mSelector;
  BOOL v14;
  int v15;
  _DWORD *exception;

  v11 = (*(uint64_t (**)(HALS_AHPObject *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a6);
  if ((v11 & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    v14 = mSelector == 1937007734;
    v15 = 1869638759;
  }
  else
  {
    v14 = mSelector == 1650682995;
    v15 = 1668047219;
  }
  if (v14 || mSelector == v15)
    return HALS_Object::GetPropertyDataSize(v11, v12, (int *)a3);
  else
    return HALS_AHPPlugIn::ObjectGetPropertyDataSize(*(HALS_AHPPlugIn **)(*((_QWORD *)this + 6) + 32), a2, a3, a4, a5);
}

uint64_t HALS_AHPObject::GetPropertyData(HALS_AHPObject *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  uint64_t v17;
  AudioObjectPropertySelector mSelector;
  BOOL v19;
  int v20;
  _DWORD *exception;

  if (((*(uint64_t (**)(HALS_AHPObject *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    v19 = mSelector == 1937007734;
    v20 = 1869638759;
  }
  else
  {
    v19 = mSelector == 1650682995;
    v20 = 1668047219;
  }
  if (v19 || mSelector == v20)
    return HALS_Object::GetPropertyData((uint64_t)this, v17, (int *)a3, a4, (int *)a5, a6);
  *a5 = a4;
  return HALS_AHPPlugIn::ObjectGetPropertyData(*(HALS_AHPPlugIn **)(*((_QWORD *)this + 6) + 32), a2, a3, a7, a8, a5, a6);
}

uint64_t HALS_AHPObject::SetPropertyData(HALS_AHPObject *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  AudioObjectPropertySelector mSelector;
  BOOL v21;
  int v22;
  _DWORD *exception;

  if (((*(uint64_t (**)(HALS_AHPObject *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    v21 = mSelector == 1937007734;
    v22 = 1869638759;
  }
  else
  {
    v21 = mSelector == 1650682995;
    v22 = 1668047219;
  }
  if (v21 || mSelector == v22)
    HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v16, v17, v18, v19, (uint64_t)a8);
  return HALS_AHPPlugIn::ObjectSetPropertyData(*(HALS_AHPPlugIn **)(*((_QWORD *)this + 6) + 32), a2, a3, a6, a7, a4, a5);
}

void caulk::concurrent::details::rt_message_call<AMCP::Tone_Generator::generate_or_compare_audio(AMCP::DAL::DAL_Time const&,AMCP::DAL::DAL_Timed_Segment &,AMCP::DAL::Container const&,AMCP::Tone_Generator::Generate_Or_Compare,double)::$_0,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Tone_Generator::generate_or_compare_audio(AMCP::DAL::DAL_Time const&,AMCP::DAL::DAL_Timed_Segment &,AMCP::DAL::Container const&,AMCP::Tone_Generator::Generate_Or_Compare,double)::$_0,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Cannot compare empty range", buf, 0x18u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Tone_Generator::generate_or_compare_audio(AMCP::DAL::DAL_Time const&,AMCP::DAL::DAL_Timed_Segment &,AMCP::DAL::Container const&,AMCP::Tone_Generator::Generate_Or_Compare,double)::$_0,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Tone_Generator::generate_or_compare_audio(AMCP::DAL::DAL_Time const&,AMCP::DAL::DAL_Timed_Segment &,AMCP::DAL::Container const&,AMCP::Tone_Generator::Generate_Or_Compare,double)::$_0,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

_QWORD *AMCP::DAL::Sample_Setter<float>::~Sample_Setter(_QWORD *a1)
{
  caulk::rt_safe_memory_resource *v2;

  *a1 = &off_1E697A680;
  v2 = (caulk::rt_safe_memory_resource *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](v2, (uint64_t)(a1[3] - (_QWORD)v2) >> 4);
  }
  return a1;
}

void AMCP::DAL::Sample_Setter<float>::~Sample_Setter(_QWORD *a1)
{
  caulk::rt_safe_memory_resource *v2;

  *a1 = &off_1E697A680;
  v2 = (caulk::rt_safe_memory_resource *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](v2, (uint64_t)(a1[3] - (_QWORD)v2) >> 4);
  }
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::DAL::Sample_Setter<float>::numbers_of_channel_streams(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4;
}

uint64_t AMCP::DAL::Sample_Setter<float>::length_in_frames(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v1;
  NSObject *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  void *exception;
  __int128 v7;
  uint64_t v8;
  uint64_t (**v9)();
  __int128 v10;
  uint64_t v11;
  std::string v12;
  std::logic_error v13;
  std::logic_error v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint8_t buf[8];
  __int16 v22;
  char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _BYTE v27[14];
  const char *v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)a1 + 1);
  if (v1 == *((_QWORD *)a1 + 2))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v3 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = pthread_self();
      v5 = pthread_mach_thread_np(v4);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v5;
      v22 = 2080;
      v23 = "Sample_Format_Handler.h";
      v24 = 1024;
      v25 = 121;
      v26 = 2080;
      *(_QWORD *)v27 = "not (not m_sample_group.empty())";
      _os_log_error_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v12);
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v14, &v13);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v15 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(_QWORD *)&v27[6] = "virtual size_t AMCP::DAL::Sample_Setter<float>::length_in_frames() const [T = float]";
    v28 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v29 = 121;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    v10 = v7;
    v11 = v8;
    v7 = 0uLL;
    v8 = 0;
    v9 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v9);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return *(_QWORD *)(v1 + 8);
}

void sub_1B59BE230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *AMCP::DAL::Sample_Setter<float>::set_sample(AMCP::Log::Scope_Registry *result, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v4;
  NSObject *v5;
  _opaque_pthread_t *v6;
  mach_port_t v7;
  void *exception;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  std::string v18;
  std::logic_error v19;
  std::logic_error v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint8_t buf[8];
  __int16 v28;
  char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE v33[14];
  const char *v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)result + 1);
  if (a2 >= (*((_QWORD *)result + 2) - v4) >> 4)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v5 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = pthread_self();
      v7 = pthread_mach_thread_np(v6);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v7;
      v28 = 2080;
      v29 = "Sample_Format_Handler.h";
      v30 = 1024;
      v31 = 126;
      v32 = 2080;
      *(_QWORD *)v33 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v20, &v19);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v21 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(_QWORD *)&v33[6] = "virtual void AMCP::DAL::Sample_Setter<float>::set_sample(size_t, size_t, float) [T = float]";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v35 = 126;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    v16 = v13;
    v17 = v14;
    v13 = 0uLL;
    v14 = 0;
    v15 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v15);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (*(_QWORD *)(v4 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v11;
      v28 = 2080;
      v29 = "Sample_Format_Handler.h";
      v30 = 1024;
      v31 = 127;
      v32 = 2080;
      *(_QWORD *)v33 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    v12 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v20, &v19);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v21 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(_QWORD *)&v33[6] = "virtual void AMCP::DAL::Sample_Setter<float>::set_sample(size_t, size_t, float) [T = float]";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v35 = 127;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    v16 = v13;
    v17 = v14;
    v13 = 0uLL;
    v14 = 0;
    v15 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v15);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v12, (uint64_t)buf);
  }
  *(float *)(*(_QWORD *)(v4 + 16 * a2) + 4 * a3) = a4;
  return result;
}

void sub_1B59BE6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

float AMCP::DAL::Sample_Setter<float>::add_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  float result;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *exception;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::logic_error v21;
  std::logic_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  _BYTE v35[14];
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 1);
  if (a2 >= (*((_QWORD *)a1 + 2) - v4) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v9;
      v30 = 2080;
      v31 = "Sample_Format_Handler.h";
      v32 = 1024;
      v33 = 132;
      v34 = 2080;
      *(_QWORD *)v35 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v20);
    std::logic_error::logic_error(&v21, &v20);
    v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v23 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(_QWORD *)&v35[6] = "virtual void AMCP::DAL::Sample_Setter<float>::add_sample(size_t, size_t, float) [T = float]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v37 = 132;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (*(_QWORD *)(v4 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v13;
      v30 = 2080;
      v31 = "Sample_Format_Handler.h";
      v32 = 1024;
      v33 = 133;
      v34 = 2080;
      *(_QWORD *)v35 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    v14 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v20);
    std::logic_error::logic_error(&v21, &v20);
    v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v23 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(_QWORD *)&v35[6] = "virtual void AMCP::DAL::Sample_Setter<float>::add_sample(size_t, size_t, float) [T = float]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v37 = 133;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v14, (uint64_t)buf);
  }
  v5 = *(_QWORD *)(v4 + 16 * a2);
  result = *(float *)(v5 + 4 * a3) + a4;
  *(float *)(v5 + 4 * a3) = result;
  return result;
}

void sub_1B59BEC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

float AMCP::DAL::Sample_Setter<float>::subtract_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  float result;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *exception;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::logic_error v21;
  std::logic_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  _BYTE v35[14];
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 1);
  if (a2 >= (*((_QWORD *)a1 + 2) - v4) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v9;
      v30 = 2080;
      v31 = "Sample_Format_Handler.h";
      v32 = 1024;
      v33 = 138;
      v34 = 2080;
      *(_QWORD *)v35 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v20);
    std::logic_error::logic_error(&v21, &v20);
    v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v23 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(_QWORD *)&v35[6] = "virtual void AMCP::DAL::Sample_Setter<float>::subtract_sample(size_t, size_t, float) [T = float]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v37 = 138;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (*(_QWORD *)(v4 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v13;
      v30 = 2080;
      v31 = "Sample_Format_Handler.h";
      v32 = 1024;
      v33 = 139;
      v34 = 2080;
      *(_QWORD *)v35 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    v14 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v20);
    std::logic_error::logic_error(&v21, &v20);
    v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v23 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(_QWORD *)&v35[6] = "virtual void AMCP::DAL::Sample_Setter<float>::subtract_sample(size_t, size_t, float) [T = float]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v37 = 139;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v14, (uint64_t)buf);
  }
  v5 = *(_QWORD *)(v4 + 16 * a2);
  result = *(float *)(v5 + 4 * a3) - a4;
  *(float *)(v5 + 4 * a3) = result;
  return result;
}

void sub_1B59BF1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

float AMCP::DAL::Sample_Setter<float>::get_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  NSObject *v5;
  _opaque_pthread_t *v6;
  mach_port_t v7;
  void *exception;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  std::string v18;
  std::logic_error v19;
  std::logic_error v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint8_t buf[8];
  __int16 v28;
  char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE v33[14];
  const char *v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a1 + 1);
  if (a2 >= (*((_QWORD *)a1 + 2) - v3) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v5 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = pthread_self();
      v7 = pthread_mach_thread_np(v6);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v7;
      v28 = 2080;
      v29 = "Sample_Format_Handler.h";
      v30 = 1024;
      v31 = 144;
      v32 = 2080;
      *(_QWORD *)v33 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v20, &v19);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v21 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(_QWORD *)&v33[6] = "virtual float AMCP::DAL::Sample_Setter<float>::get_sample(size_t, size_t) [T = float]";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v35 = 144;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    v16 = v13;
    v17 = v14;
    v13 = 0uLL;
    v14 = 0;
    v15 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v15);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (*(_QWORD *)(v3 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v11;
      v28 = 2080;
      v29 = "Sample_Format_Handler.h";
      v30 = 1024;
      v31 = 145;
      v32 = 2080;
      *(_QWORD *)v33 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    v12 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v20, &v19);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v21 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(_QWORD *)&v33[6] = "virtual float AMCP::DAL::Sample_Setter<float>::get_sample(size_t, size_t) [T = float]";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v35 = 145;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    v16 = v13;
    v17 = v14;
    v13 = 0uLL;
    v14 = 0;
    v15 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v15);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v12, (uint64_t)buf);
  }
  return *(float *)(*(_QWORD *)(v3 + 16 * a2) + 4 * a3);
}

void sub_1B59BF6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

_QWORD *AMCP::DAL::Sample_Setter<int>::~Sample_Setter(_QWORD *a1)
{
  caulk::rt_safe_memory_resource *v2;

  *a1 = &off_1E697A618;
  v2 = (caulk::rt_safe_memory_resource *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<int>>>::deallocate[abi:ne180100](v2, (uint64_t)(a1[3] - (_QWORD)v2) >> 4);
  }
  return a1;
}

void AMCP::DAL::Sample_Setter<int>::~Sample_Setter(_QWORD *a1)
{
  caulk::rt_safe_memory_resource *v2;

  *a1 = &off_1E697A618;
  v2 = (caulk::rt_safe_memory_resource *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<int>>>::deallocate[abi:ne180100](v2, (uint64_t)(a1[3] - (_QWORD)v2) >> 4);
  }
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::DAL::Sample_Setter<int>::numbers_of_channel_streams(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4;
}

uint64_t AMCP::DAL::Sample_Setter<int>::length_in_frames(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v1;
  NSObject *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  void *exception;
  __int128 v7;
  uint64_t v8;
  uint64_t (**v9)();
  __int128 v10;
  uint64_t v11;
  std::string v12;
  std::logic_error v13;
  std::logic_error v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint8_t buf[8];
  __int16 v22;
  char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _BYTE v27[14];
  const char *v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)a1 + 1);
  if (v1 == *((_QWORD *)a1 + 2))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v3 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = pthread_self();
      v5 = pthread_mach_thread_np(v4);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v5;
      v22 = 2080;
      v23 = "Sample_Format_Handler.h";
      v24 = 1024;
      v25 = 121;
      v26 = 2080;
      *(_QWORD *)v27 = "not (not m_sample_group.empty())";
      _os_log_error_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v12);
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v14, &v13);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v15 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(_QWORD *)&v27[6] = "virtual size_t AMCP::DAL::Sample_Setter<int>::length_in_frames() const [T = int]";
    v28 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v29 = 121;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    v10 = v7;
    v11 = v8;
    v7 = 0uLL;
    v8 = 0;
    v9 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v9);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return *(_QWORD *)(v1 + 8);
}

void sub_1B59BFB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

double AMCP::DAL::Sample_Setter<int>::set_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v4;
  double result;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  void *exception;
  NSObject *v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  std::string v19;
  std::logic_error v20;
  std::logic_error v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint8_t buf[8];
  __int16 v29;
  char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  _BYTE v34[14];
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 1);
  if (a2 >= (*((_QWORD *)a1 + 2) - v4) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      v29 = 2080;
      v30 = "Sample_Format_Handler.h";
      v31 = 1024;
      v32 = 126;
      v33 = 2080;
      *(_QWORD *)v34 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v21, &v20);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v22 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(_QWORD *)&v34[6] = "virtual void AMCP::DAL::Sample_Setter<int>::set_sample(size_t, size_t, float) [T = int]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v36 = 126;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    v17 = v14;
    v18 = v15;
    v14 = 0uLL;
    v15 = 0;
    v16 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v16);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (*(_QWORD *)(v4 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v10 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v12;
      v29 = 2080;
      v30 = "Sample_Format_Handler.h";
      v31 = 1024;
      v32 = 127;
      v33 = 2080;
      *(_QWORD *)v34 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    v13 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v21, &v20);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v22 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(_QWORD *)&v34[6] = "virtual void AMCP::DAL::Sample_Setter<int>::set_sample(size_t, size_t, float) [T = int]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v36 = 127;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    v17 = v14;
    v18 = v15;
    v14 = 0uLL;
    v15 = 0;
    v16 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v16);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v13, (uint64_t)buf);
  }
  result = fminf(fmaxf(a4, -1.0), 1.0) * 2147483650.0;
  *(_DWORD *)(*(_QWORD *)(v4 + 16 * a2) + 4 * a3) = (int)result;
  return result;
}

void sub_1B59C0018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

double AMCP::DAL::Sample_Setter<int>::add_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v4;
  double result;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  void *exception;
  NSObject *v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  std::string v19;
  std::logic_error v20;
  std::logic_error v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint8_t buf[8];
  __int16 v29;
  char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  _BYTE v34[14];
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 1);
  if (a2 >= (*((_QWORD *)a1 + 2) - v4) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      v29 = 2080;
      v30 = "Sample_Format_Handler.h";
      v31 = 1024;
      v32 = 132;
      v33 = 2080;
      *(_QWORD *)v34 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v21, &v20);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v22 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(_QWORD *)&v34[6] = "virtual void AMCP::DAL::Sample_Setter<int>::add_sample(size_t, size_t, float) [T = int]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v36 = 132;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    v17 = v14;
    v18 = v15;
    v14 = 0uLL;
    v15 = 0;
    v16 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v16);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (*(_QWORD *)(v4 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v10 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v12;
      v29 = 2080;
      v30 = "Sample_Format_Handler.h";
      v31 = 1024;
      v32 = 133;
      v33 = 2080;
      *(_QWORD *)v34 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    v13 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v21, &v20);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v22 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(_QWORD *)&v34[6] = "virtual void AMCP::DAL::Sample_Setter<int>::add_sample(size_t, size_t, float) [T = int]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v36 = 133;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    v17 = v14;
    v18 = v15;
    v14 = 0uLL;
    v15 = 0;
    v16 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v16);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v13, (uint64_t)buf);
  }
  result = fminf(fmaxf(a4, -1.0), 1.0) * 2147483650.0;
  *(_DWORD *)(*(_QWORD *)(v4 + 16 * a2) + 4 * a3) += (int)result;
  return result;
}

void sub_1B59C0594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

double AMCP::DAL::Sample_Setter<int>::subtract_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v4;
  double result;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  void *exception;
  NSObject *v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  std::string v19;
  std::logic_error v20;
  std::logic_error v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint8_t buf[8];
  __int16 v29;
  char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  _BYTE v34[14];
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 1);
  if (a2 >= (*((_QWORD *)a1 + 2) - v4) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      v29 = 2080;
      v30 = "Sample_Format_Handler.h";
      v31 = 1024;
      v32 = 138;
      v33 = 2080;
      *(_QWORD *)v34 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v21, &v20);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v22 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(_QWORD *)&v34[6] = "virtual void AMCP::DAL::Sample_Setter<int>::subtract_sample(size_t, size_t, float) [T = int]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v36 = 138;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    v17 = v14;
    v18 = v15;
    v14 = 0uLL;
    v15 = 0;
    v16 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v16);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (*(_QWORD *)(v4 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v10 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v12;
      v29 = 2080;
      v30 = "Sample_Format_Handler.h";
      v31 = 1024;
      v32 = 139;
      v33 = 2080;
      *(_QWORD *)v34 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    v13 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v21, &v20);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v22 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(_QWORD *)&v34[6] = "virtual void AMCP::DAL::Sample_Setter<int>::subtract_sample(size_t, size_t, float) [T = int]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v36 = 139;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    v17 = v14;
    v18 = v15;
    v14 = 0uLL;
    v15 = 0;
    v16 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v16);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v13, (uint64_t)buf);
  }
  result = fminf(fmaxf(a4, -1.0), 1.0) * 2147483650.0;
  *(_DWORD *)(*(_QWORD *)(v4 + 16 * a2) + 4 * a3) -= (int)result;
  return result;
}

void sub_1B59C0B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

float AMCP::DAL::Sample_Setter<int>::get_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  NSObject *v5;
  _opaque_pthread_t *v6;
  mach_port_t v7;
  void *exception;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  std::string v18;
  std::logic_error v19;
  std::logic_error v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint8_t buf[8];
  __int16 v28;
  char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE v33[14];
  const char *v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a1 + 1);
  if (a2 >= (*((_QWORD *)a1 + 2) - v3) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v5 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = pthread_self();
      v7 = pthread_mach_thread_np(v6);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v7;
      v28 = 2080;
      v29 = "Sample_Format_Handler.h";
      v30 = 1024;
      v31 = 144;
      v32 = 2080;
      *(_QWORD *)v33 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v20, &v19);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v21 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(_QWORD *)&v33[6] = "virtual float AMCP::DAL::Sample_Setter<int>::get_sample(size_t, size_t) [T = int]";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v35 = 144;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    v16 = v13;
    v17 = v14;
    v13 = 0uLL;
    v14 = 0;
    v15 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v15);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (*(_QWORD *)(v3 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v11;
      v28 = 2080;
      v29 = "Sample_Format_Handler.h";
      v30 = 1024;
      v31 = 145;
      v32 = 2080;
      *(_QWORD *)v33 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    v12 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v20, &v19);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v21 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(_QWORD *)&v33[6] = "virtual float AMCP::DAL::Sample_Setter<int>::get_sample(size_t, size_t) [T = int]";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v35 = 145;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    v16 = v13;
    v17 = v14;
    v13 = 0uLL;
    v14 = 0;
    v15 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v15);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v12, (uint64_t)buf);
  }
  return (double)*(int *)(*(_QWORD *)(v3 + 16 * a2) + 4 * a3) / 2147483650.0;
}

void sub_1B59C1074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<int>>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (!(a2 >> 60))
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

_QWORD *AMCP::DAL::Sample_Setter<short>::~Sample_Setter(_QWORD *a1)
{
  caulk::rt_safe_memory_resource *v2;

  *a1 = &off_1E697A5A0;
  v2 = (caulk::rt_safe_memory_resource *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<short>>>::deallocate[abi:ne180100](v2, (uint64_t)(a1[3] - (_QWORD)v2) >> 4);
  }
  return a1;
}

void AMCP::DAL::Sample_Setter<short>::~Sample_Setter(_QWORD *a1)
{
  caulk::rt_safe_memory_resource *v2;

  *a1 = &off_1E697A5A0;
  v2 = (caulk::rt_safe_memory_resource *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<short>>>::deallocate[abi:ne180100](v2, (uint64_t)(a1[3] - (_QWORD)v2) >> 4);
  }
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::DAL::Sample_Setter<short>::numbers_of_channel_streams(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4;
}

uint64_t AMCP::DAL::Sample_Setter<short>::length_in_frames(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v1;
  NSObject *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  void *exception;
  __int128 v7;
  uint64_t v8;
  uint64_t (**v9)();
  __int128 v10;
  uint64_t v11;
  std::string v12;
  std::logic_error v13;
  std::logic_error v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint8_t buf[8];
  __int16 v22;
  char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _BYTE v27[14];
  const char *v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)a1 + 1);
  if (v1 == *((_QWORD *)a1 + 2))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v3 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = pthread_self();
      v5 = pthread_mach_thread_np(v4);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v5;
      v22 = 2080;
      v23 = "Sample_Format_Handler.h";
      v24 = 1024;
      v25 = 121;
      v26 = 2080;
      *(_QWORD *)v27 = "not (not m_sample_group.empty())";
      _os_log_error_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v12);
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v14, &v13);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v15 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(_QWORD *)&v27[6] = "virtual size_t AMCP::DAL::Sample_Setter<short>::length_in_frames() const [T = short]";
    v28 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v29 = 121;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    v10 = v7;
    v11 = v8;
    v7 = 0uLL;
    v8 = 0;
    v9 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v9);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return *(_QWORD *)(v1 + 8);
}

void sub_1B59C14F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

double AMCP::DAL::Sample_Setter<short>::set_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v4;
  double result;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  void *exception;
  NSObject *v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  std::string v19;
  std::logic_error v20;
  std::logic_error v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint8_t buf[8];
  __int16 v29;
  char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  _BYTE v34[14];
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 1);
  if (a2 >= (*((_QWORD *)a1 + 2) - v4) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      v29 = 2080;
      v30 = "Sample_Format_Handler.h";
      v31 = 1024;
      v32 = 126;
      v33 = 2080;
      *(_QWORD *)v34 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v21, &v20);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v22 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(_QWORD *)&v34[6] = "virtual void AMCP::DAL::Sample_Setter<short>::set_sample(size_t, size_t, float) [T = short]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v36 = 126;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    v17 = v14;
    v18 = v15;
    v14 = 0uLL;
    v15 = 0;
    v16 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v16);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (*(_QWORD *)(v4 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v10 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v12;
      v29 = 2080;
      v30 = "Sample_Format_Handler.h";
      v31 = 1024;
      v32 = 127;
      v33 = 2080;
      *(_QWORD *)v34 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    v13 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v21, &v20);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v22 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(_QWORD *)&v34[6] = "virtual void AMCP::DAL::Sample_Setter<short>::set_sample(size_t, size_t, float) [T = short]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v36 = 127;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    v17 = v14;
    v18 = v15;
    v14 = 0uLL;
    v15 = 0;
    v16 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v16);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v13, (uint64_t)buf);
  }
  result = fminf(fmaxf(a4, -1.0), 1.0) * 32767.0;
  *(_WORD *)(*(_QWORD *)(v4 + 16 * a2) + 2 * a3) = (int)result;
  return result;
}

void sub_1B59C19DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

double AMCP::DAL::Sample_Setter<short>::add_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v4;
  double result;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  void *exception;
  NSObject *v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  std::string v19;
  std::logic_error v20;
  std::logic_error v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint8_t buf[8];
  __int16 v29;
  char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  _BYTE v34[14];
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 1);
  if (a2 >= (*((_QWORD *)a1 + 2) - v4) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      v29 = 2080;
      v30 = "Sample_Format_Handler.h";
      v31 = 1024;
      v32 = 132;
      v33 = 2080;
      *(_QWORD *)v34 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v21, &v20);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v22 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(_QWORD *)&v34[6] = "virtual void AMCP::DAL::Sample_Setter<short>::add_sample(size_t, size_t, float) [T = short]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v36 = 132;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    v17 = v14;
    v18 = v15;
    v14 = 0uLL;
    v15 = 0;
    v16 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v16);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (*(_QWORD *)(v4 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v10 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v12;
      v29 = 2080;
      v30 = "Sample_Format_Handler.h";
      v31 = 1024;
      v32 = 133;
      v33 = 2080;
      *(_QWORD *)v34 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    v13 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v21, &v20);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v22 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(_QWORD *)&v34[6] = "virtual void AMCP::DAL::Sample_Setter<short>::add_sample(size_t, size_t, float) [T = short]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v36 = 133;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    v17 = v14;
    v18 = v15;
    v14 = 0uLL;
    v15 = 0;
    v16 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v16);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v13, (uint64_t)buf);
  }
  result = fminf(fmaxf(a4, -1.0), 1.0) * 32767.0;
  *(_WORD *)(*(_QWORD *)(v4 + 16 * a2) + 2 * a3) += (int)result;
  return result;
}

void sub_1B59C1F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

double AMCP::DAL::Sample_Setter<short>::subtract_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v4;
  double result;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  void *exception;
  NSObject *v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  std::string v19;
  std::logic_error v20;
  std::logic_error v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint8_t buf[8];
  __int16 v29;
  char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  _BYTE v34[14];
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 1);
  if (a2 >= (*((_QWORD *)a1 + 2) - v4) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      v29 = 2080;
      v30 = "Sample_Format_Handler.h";
      v31 = 1024;
      v32 = 138;
      v33 = 2080;
      *(_QWORD *)v34 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v21, &v20);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v22 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(_QWORD *)&v34[6] = "virtual void AMCP::DAL::Sample_Setter<short>::subtract_sample(size_t, size_t, float) [T = short]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v36 = 138;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    v17 = v14;
    v18 = v15;
    v14 = 0uLL;
    v15 = 0;
    v16 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v16);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (*(_QWORD *)(v4 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v10 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v12;
      v29 = 2080;
      v30 = "Sample_Format_Handler.h";
      v31 = 1024;
      v32 = 139;
      v33 = 2080;
      *(_QWORD *)v34 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    v13 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v21, &v20);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v22 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(_QWORD *)&v34[6] = "virtual void AMCP::DAL::Sample_Setter<short>::subtract_sample(size_t, size_t, float) [T = short]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v36 = 139;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    v17 = v14;
    v18 = v15;
    v14 = 0uLL;
    v15 = 0;
    v16 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v16);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v13, (uint64_t)buf);
  }
  result = fminf(fmaxf(a4, -1.0), 1.0) * 32767.0;
  *(_WORD *)(*(_QWORD *)(v4 + 16 * a2) + 2 * a3) -= (int)result;
  return result;
}

void sub_1B59C24D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

float AMCP::DAL::Sample_Setter<short>::get_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  NSObject *v5;
  _opaque_pthread_t *v6;
  mach_port_t v7;
  void *exception;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  std::string v18;
  std::logic_error v19;
  std::logic_error v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint8_t buf[8];
  __int16 v28;
  char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE v33[14];
  const char *v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a1 + 1);
  if (a2 >= (*((_QWORD *)a1 + 2) - v3) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v5 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = pthread_self();
      v7 = pthread_mach_thread_np(v6);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v7;
      v28 = 2080;
      v29 = "Sample_Format_Handler.h";
      v30 = 1024;
      v31 = 144;
      v32 = 2080;
      *(_QWORD *)v33 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v20, &v19);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v21 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(_QWORD *)&v33[6] = "virtual float AMCP::DAL::Sample_Setter<short>::get_sample(size_t, size_t) [T = short]";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v35 = 144;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    v16 = v13;
    v17 = v14;
    v13 = 0uLL;
    v14 = 0;
    v15 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v15);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (*(_QWORD *)(v3 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v11;
      v28 = 2080;
      v29 = "Sample_Format_Handler.h";
      v30 = 1024;
      v31 = 145;
      v32 = 2080;
      *(_QWORD *)v33 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    v12 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v20, &v19);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v21 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(_QWORD *)&v33[6] = "virtual float AMCP::DAL::Sample_Setter<short>::get_sample(size_t, size_t) [T = short]";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    v35 = 145;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    v16 = v13;
    v17 = v14;
    v13 = 0uLL;
    v14 = 0;
    v15 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v15);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v12, (uint64_t)buf);
  }
  return (double)*(__int16 *)(*(_QWORD *)(v3 + 16 * a2) + 2 * a3) / 32767.0;
}

void sub_1B59C2A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<short>>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (!(a2 >> 60))
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

void AMCP::Null_Driver::~Null_Driver(AMCP::Null_Driver *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

AMCP::Object *AMCP::Null_Driver::Null_Driver(AMCP::Object *a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  CFTypeRef cf;
  uint8_t buf[8];
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "com.apple.audio.Null-Driver");
  AMCP::Driver::Driver((uint64_t)a1, a2, (uint64_t)&cf);
  if (cf)
    CFRelease(cf);
  *(_QWORD *)a1 = &off_1E697A740;
  v4 = AMCP::Object::constructed_correct_class(a1, (AMCP *)0x6E756C6C);
  if ((v4 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      v11 = 2080;
      v12 = "Null_Driver.cpp";
      v13 = 1024;
      v14 = 25;
      v15 = 2080;
      v16 = "constructed_correct_class(k_class_id_null_driver)";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", buf, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1B59C2DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _QWORD *v10;
  std::__shared_weak_count *v12;

  *v10 = &off_1E696F358;
  v12 = (std::__shared_weak_count *)v10[3];
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  _Unwind_Resume(exception_object);
}

void AMCP::Null_Driver::create_objects(AMCP::Null_Driver *this@<X0>, const applesauce::CF::ArrayRef *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  int8x8_t *v9;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v11;
  unint64_t v12;
  AMCP::Log::Scope_Registry *v13;
  AMCP::Log::Scope_Registry *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  NSObject *v29;
  unint64_t *v30;
  unint64_t v31;
  _opaque_pthread_t *v32;
  mach_port_t v33;
  void *exception;
  NSObject *v35;
  _opaque_pthread_t *v36;
  mach_port_t v37;
  void *v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t (**v45)();
  __int128 v46;
  uint64_t v47;
  std::string v48;
  std::runtime_error v49;
  std::runtime_error v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  uint8_t buf[8];
  _BYTE v58[10];
  __int16 v59;
  int v60;
  const char *v61;
  const char *v62;
  int v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v5 && (v7 = std::__shared_weak_count::lock(v5)) != 0)
  {
    v8 = v7;
    v9 = (int8x8_t *)*((_QWORD *)this + 2);
    if (v9)
    {
      v39 = 0x676C6F626E756C6CLL;
      v40 = 0;
      operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v41, v9, (unsigned int *)&v39);
      v11 = v41;
      if (!v41)
      {
        AMCP::Log::Scope_Registry::get(operation);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v28 = *(std::__shared_weak_count **)v58;
        v29 = **(NSObject ***)buf;
        if (*(_QWORD *)v58)
        {
          v30 = (unint64_t *)(*(_QWORD *)v58 + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          v32 = pthread_self();
          v33 = pthread_mach_thread_np(v32);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v33;
          *(_WORD *)v58 = 2080;
          *(_QWORD *)&v58[2] = "Core.h";
          v59 = 1024;
          v60 = 202;
          _os_log_error_impl(&dword_1B57BA000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
        exception = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v48);
        std::runtime_error::runtime_error(&v49, &v48);
        std::runtime_error::runtime_error(&v50, &v49);
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = -1;
        v50.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v51 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
        v61 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Ty"
              "pe = std::vector<unsigned int>, Argument_Types = <const applesauce::CF::ArrayRef &>]";
        v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
        v63 = 202;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
        v46 = v43;
        v47 = v44;
        v43 = 0uLL;
        v44 = 0;
        v45 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v45);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
      }
      v12 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>>();
      v13 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v11, v12);
      if (!v13)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v35 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          v36 = pthread_self();
          v37 = pthread_mach_thread_np(v36);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v37;
          *(_WORD *)v58 = 2080;
          *(_QWORD *)&v58[2] = "Operation.h";
          v59 = 1024;
          v60 = 154;
          _os_log_error_impl(&dword_1B57BA000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
        v38 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v48);
        std::runtime_error::runtime_error(&v49, &v48);
        std::runtime_error::runtime_error(&v50, &v49);
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = -1;
        v50.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v51 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
        v61 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::vector<unsig"
              "ned int>, Argument_Types = <const applesauce::CF::ArrayRef &>]";
        v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        v63 = 154;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
        v46 = v43;
        v47 = v44;
        v43 = 0uLL;
        v44 = 0;
        v45 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v45);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v38, (uint64_t)buf);
      }
      v14 = v13;
      if (!*((_QWORD *)v13 + 7)
        || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>>(),
            (v13 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v14 + 7))(4, (uint64_t)v14 + 24, 0, buf)) == 0))
      {
        AMCP::Log::Scope_Registry::get(v13);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v21 = *(std::__shared_weak_count **)v58;
        v22 = **(NSObject ***)buf;
        if (*(_QWORD *)v58)
        {
          v23 = (unint64_t *)(*(_QWORD *)v58 + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          v25 = pthread_self();
          v26 = pthread_mach_thread_np(v25);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v26;
          *(_WORD *)v58 = 2080;
          *(_QWORD *)&v58[2] = "Operation.h";
          v59 = 1024;
          v60 = 161;
          _os_log_error_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
        v27 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v48);
        std::runtime_error::runtime_error(&v49, &v48);
        std::runtime_error::runtime_error(&v50, &v49);
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = -1;
        v50.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v51 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
        v61 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::vector<unsig"
              "ned int>, Argument_Types = <const applesauce::CF::ArrayRef &>]";
        v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        v63 = 161;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
        v46 = v43;
        v47 = v44;
        v43 = 0uLL;
        v44 = 0;
        v45 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v45);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v27, (uint64_t)buf);
      }
      v15 = *((_QWORD *)v13 + 3);
      if (!v15)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, const applesauce::CF::ArrayRef *))(*(_QWORD *)v15 + 48))(v15, a2);
      v16 = v42;
      if (v42)
      {
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    v19 = (unint64_t *)&v8->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_1B59C34EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::runtime_error a26,std::runtime_error a27,uint64_t a28,uint64_t a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[231];
}

void AMCP::Null_Driver::destroy_objects(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  void *exception;
  uint64_t v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)();
  __int128 v25;
  uint64_t v26;
  std::string v27;
  std::runtime_error v28;
  std::runtime_error v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  uint8_t buf[8];
  _BYTE v39[10];
  __int16 v40;
  int v41;
  const char *v42;
  const char *v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(int8x8_t **)(a1 + 16);
      if (v7)
      {
        v20 = 0x676C6F626E756C6CLL;
        v21 = 0;
        AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v36, v7, (unsigned int *)&v20);
        if (!v36)
        {
          AMCP::Log::Scope_Registry::get(0);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v13 = *(std::__shared_weak_count **)v39;
          v14 = **(NSObject ***)buf;
          if (*(_QWORD *)v39)
          {
            v15 = (unint64_t *)(*(_QWORD *)v39 + 8);
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            v17 = pthread_self();
            v18 = pthread_mach_thread_np(v17);
            *(_DWORD *)buf = 67109634;
            *(_DWORD *)&buf[4] = v18;
            *(_WORD *)v39 = 2080;
            *(_QWORD *)&v39[2] = "Core.h";
            v40 = 1024;
            v41 = 202;
            _os_log_error_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
          exception = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v27);
          std::runtime_error::runtime_error(&v28, &v27);
          std::runtime_error::runtime_error(&v29, &v28);
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = -1;
          v29.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
          v30 = &unk_1E69A1FE0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v29);
          v42 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_"
                "Type = void, Argument_Types = <const std::vector<unsigned int> &>]";
          v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
          v44 = 202;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v22);
          v25 = v22;
          v26 = v23;
          v22 = 0uLL;
          v23 = 0;
          v24 = off_1E69A20A0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v24);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
        }
        AMCP::Core::Operation::call_function<void,std::vector<unsigned int> const&>(v36, a2);
        v8 = v37;
        if (v37)
        {
          p_shared_owners = (unint64_t *)&v37->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      v11 = (unint64_t *)&v6->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1B59C3AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  if (!a2)
    _Unwind_Resume(exception_object);
  v29 = *(std::__shared_weak_count **)(v27 - 120);
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  __clang_call_terminate(exception_object);
}

void HALS_IOUAEngine::~HALS_IOUAEngine(HALS_IOUAEngine *this)
{
  HALS_IOUAEngine::~HALS_IOUAEngine(this);
  JUMPOUT(0x1B5E50688);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E697A778;
  v2 = *((_QWORD *)this + 142);
  if (v2)
  {
    v3 = *((_QWORD *)this + 143);
    if (v3)
      HALS_IOUAUCDriver::unmap_memory((HALS_IOUAUCDriver *)*(unsigned int *)(*((_QWORD *)this + 140) + 4), v2, v3);
  }
  v4 = *((_QWORD *)this + 144);
  if (v4)
  {
    v5 = *((_QWORD *)this + 145);
    if (v5)
      HALS_IOUAUCDriver::unmap_memory((HALS_IOUAUCDriver *)*(unsigned int *)(*((_QWORD *)this + 140) + 4), v4, v5);
  }
  v6 = *((_QWORD *)this + 146);
  if (v6)
  {
    v7 = *((_QWORD *)this + 147);
    if (v7)
      HALS_IOUAUCDriver::unmap_memory((HALS_IOUAUCDriver *)*(unsigned int *)(*((_QWORD *)this + 140) + 4), v6, v7);
  }
  *((_OWORD *)this + 72) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_OWORD *)this + 71) = 0u;
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>>>::destroy(*((_QWORD **)this + 149));
  *((_QWORD *)this + 148) = (char *)this + 1192;
  *((_QWORD *)this + 150) = 0;
  *((_QWORD *)this + 149) = 0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 1120);
  HALS_IOEngine2::~HALS_IOEngine2(this);
}

uint64_t HALS_IOEngine2::NeedNoDisplaySleepPowerAssertion(HALS_IOEngine2 *this)
{
  return 0;
}

uint64_t HALS_IOEngine2::UseClockBoundsCheck(HALS_IOEngine2 *this)
{
  return 1;
}

uint64_t HALS_IOUAEngine::GetZeroTimeStamp(HALS_IOUAEngine *this, unsigned int a2, double *a3, unint64_t *a4, unint64_t *a5)
{
  unsigned __int128 *v5;
  unsigned __int128 v6;

  v5 = (unsigned __int128 *)*((_QWORD *)this + 143);
  do
    v6 = __ldxp(v5);
  while (__stxp(v6, v5));
  *a3 = (double)(unint64_t)v6;
  *a4 = *((_QWORD *)&v6 + 1);
  return 0;
}

uint64_t HALS_IOUAEngine::Register_IOThread(HALS_IOUAEngine *this, unsigned int a2, uint64_t a3, double a4, unsigned int a5, int a6)
{
  char *v10;
  char *v11;
  char *v12;
  unsigned int v13;
  BOOL v14;
  char **v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  char *v19;
  char *v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  AMCP::Log::Scope_Registry *v29;
  int v30;
  uint64_t v31;
  AMCP::Log::Scope_Registry *v32;
  unsigned int v33;
  io_connect_t v34;
  std::string *v35;
  uintptr_t v36;
  AMCP::Log::Scope_Registry *v37;
  uint64_t v38;
  AMCP::Log::Scope_Registry *v39;
  unsigned int v40;
  io_connect_t v41;
  std::string *p_p;
  uintptr_t v43;
  AMCP::Log::Scope_Registry *v44;
  uint64_t v45;
  AMCP::Log::Scope_Registry *v46;
  int v47;
  AMCP::Log::Scope_Registry *v48;
  unint64_t *v49;
  unint64_t v50;
  NSObject *v52;
  _opaque_pthread_t *v53;
  mach_port_t v54;
  void *exception;
  NSObject *v56;
  _opaque_pthread_t *v57;
  mach_port_t v58;
  void *v59;
  NSObject *v60;
  _opaque_pthread_t *v61;
  mach_port_t v62;
  void *v63;
  NSObject *v64;
  _opaque_pthread_t *v65;
  mach_port_t v66;
  void *v67;
  NSObject *v68;
  _opaque_pthread_t *v69;
  mach_port_t v70;
  void *v71;
  NSObject *v72;
  _opaque_pthread_t *v73;
  mach_port_t v74;
  void *v75;
  NSObject *v76;
  _opaque_pthread_t *v77;
  mach_port_t v78;
  void *v79;
  NSObject *v80;
  _opaque_pthread_t *v81;
  mach_port_t v82;
  void *v83;
  int v84;
  NSObject *v85;
  _opaque_pthread_t *v86;
  mach_port_t v87;
  void *v88;
  caulk::mach::os_eventlink *v89;
  std::__shared_weak_count *v90;
  std::string __p;
  std::string v92;
  std::runtime_error v93;
  uint64_t v94;
  std::runtime_error v95;
  std::string v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  char v101;
  _BYTE v102[24];
  uint64_t v103;
  std::string v104;
  __int16 v105;
  _BYTE v106[22];
  int v107;
  uint64_t input;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v10 = (char *)this + 1192;
  v11 = (char *)*((_QWORD *)this + 149);
  if (v11)
  {
    v12 = (char *)this + 1192;
    do
    {
      v13 = *((_DWORD *)v11 + 8);
      v14 = v13 >= a3;
      if (v13 >= a3)
        v15 = (char **)v11;
      else
        v15 = (char **)(v11 + 8);
      if (v14)
        v12 = v11;
      v11 = *v15;
    }
    while (*v15);
    if (v12 != v10 && *((_DWORD *)v12 + 8) <= a3)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v104, "com.apple.coreaudio", "AMCP");
      v52 = *(NSObject **)v104.__r_.__value_.__l.__data_;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v104);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        v53 = pthread_self();
        v54 = pthread_mach_thread_np(v53);
        LODWORD(v104.__r_.__value_.__l.__data_) = 67110146;
        HIDWORD(v104.__r_.__value_.__r.__words[0]) = v54;
        LOWORD(v104.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOUAEngine.cpp";
        WORD1(v104.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v104.__r_.__value_.__r.__words[2]) = 132;
        v105 = 2080;
        *(_QWORD *)v106 = "io_ipc_info_iter != m_io_ipc_info_map.end()";
        *(_WORD *)&v106[8] = 2048;
        *(_QWORD *)&v106[10] = a3;
        _os_log_error_impl(&dword_1B57BA000, v52, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s IOContext %lu is already registered", (uint8_t *)&v104, 0x2Cu);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v92);
      exception = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v93, "IOContext is already registered");
      std::runtime_error::runtime_error((std::runtime_error *)&v96, &v93);
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = -1;
      v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69A1FB8;
      v96.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v104, (uint64_t)&v96);
      *(_QWORD *)&v106[6] = "virtual OSStatus HALS_IOUAEngine::Register_IOThread(AudioObjectID, UInt32, Float64, UInt32, mach_port_t)";
      *(_QWORD *)&v106[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAEngine.cpp";
      v107 = 132;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v102);
      v109 = *(_OWORD *)v102;
      input = (uint64_t)off_1E69A20A0;
      v110 = *(_QWORD *)&v102[16];
      memset(v102, 0, sizeof(v102));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&v104, (uint64_t)&input);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)&v104);
    }
  }
  if (!a6)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v104, "com.apple.coreaudio", "AMCP");
    v56 = *(NSObject **)v104.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v104);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      v57 = pthread_self();
      v58 = pthread_mach_thread_np(v57);
      LODWORD(v104.__r_.__value_.__l.__data_) = 67110146;
      HIDWORD(v104.__r_.__value_.__r.__words[0]) = v58;
      LOWORD(v104.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOUAEngine.cpp";
      WORD1(v104.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v104.__r_.__value_.__r.__words[2]) = 135;
      v105 = 2080;
      *(_QWORD *)v106 = "error || (ioc_workgroup_mach_port == MACH_PORT_NULL)";
      *(_WORD *)&v106[8] = 2048;
      *(_QWORD *)&v106[10] = 0;
      _os_log_error_impl(&dword_1B57BA000, v56, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to copy workgroup mach port %li", (uint8_t *)&v104, 0x2Cu);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v92);
    v59 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v93, "Failed to copy workgroup mach port");
    std::runtime_error::runtime_error((std::runtime_error *)&v96, &v93);
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = -1;
    v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69A1FB8;
    v96.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v104, (uint64_t)&v96);
    *(_QWORD *)&v106[6] = "virtual OSStatus HALS_IOUAEngine::Register_IOThread(AudioObjectID, UInt32, Float64, UInt32, mach_port_t)";
    *(_QWORD *)&v106[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAEngine.cpp";
    v107 = 135;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v102);
    v109 = *(_OWORD *)v102;
    input = (uint64_t)off_1E69A20A0;
    v110 = *(_QWORD *)&v102[16];
    memset(v102, 0, sizeof(v102));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&v104, (uint64_t)&input);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v59, (uint64_t)&v104);
  }
  caulk::make_string((caulk *)"eventlink-%u-%u", (uint64_t)&v92, *((unsigned int *)this + 278), a3);
  caulk::make_string((caulk *)"workgroup-%u-%u", (uint64_t)&__p, *((unsigned int *)this + 278), a3);
  v16 = (std::__shared_weak_count *)operator new(0x60uLL);
  v16->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697ACE8;
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v104, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
  else
    v104 = v92;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v96, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v96 = __p;
  caulk::mach::os_eventlink::make();
  caulk::mach::os_workgroup_managed::make();
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  v89 = (caulk::mach::os_eventlink *)&v16[1];
  v90 = v16;
  LODWORD(v104.__r_.__value_.__l.__data_) = a3;
  v104.__r_.__value_.__l.__size_ = (std::string::size_type)&v16[1];
  v104.__r_.__value_.__r.__words[2] = (std::string::size_type)v16;
  do
    v18 = __ldxr(p_shared_owners);
  while (__stxr(v18 + 1, p_shared_owners));
  v19 = *(char **)v10;
  v20 = v10;
  if (*(_QWORD *)v10)
  {
    while (1)
    {
      while (1)
      {
        v20 = v19;
        v21 = *((_DWORD *)v19 + 8);
        if (v21 <= a3)
          break;
        v19 = *(char **)v20;
        v10 = v20;
        if (!*(_QWORD *)v20)
          goto LABEL_32;
      }
      if (v21 >= a3)
        goto LABEL_35;
      v19 = (char *)*((_QWORD *)v20 + 1);
      if (!v19)
      {
        v10 = v20 + 8;
        break;
      }
    }
  }
LABEL_32:
  v22 = (char *)operator new(0x38uLL);
  *((_DWORD *)v22 + 8) = a3;
  *(_OWORD *)(v22 + 40) = *(_OWORD *)&v104.__r_.__value_.__r.__words[1];
  *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = v20;
  *(_QWORD *)v10 = v22;
  v23 = **((_QWORD **)this + 148);
  if (v23)
  {
    *((_QWORD *)this + 148) = v23;
    v22 = *(char **)v10;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 149), (uint64_t *)v22);
  ++*((_QWORD *)this + 150);
  v16 = (std::__shared_weak_count *)v104.__r_.__value_.__r.__words[2];
  if (v104.__r_.__value_.__r.__words[2])
  {
LABEL_35:
    v24 = (unint64_t *)&v16->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v26 = *((_QWORD *)this + 140);
  v27 = a3;
  input = *((unsigned int *)this + 278);
  *(_QWORD *)&v109 = a3;
  v28 = a5;
  *((_QWORD *)&v109 + 1) = (unint64_t)a4;
  v110 = a5;
  v29 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod(*(_DWORD *)(v26 + 4), 0x11u, &input, 4u, 0, 0, 0, 0, 0, 0);
  v30 = (int)v29;
  if ((_DWORD)v29)
  {
    AMCP::Log::Scope_Registry::get(v29);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v104, "com.apple.coreaudio", "AMCP");
    v60 = *(NSObject **)v104.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v104);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      v61 = pthread_self();
      v62 = pthread_mach_thread_np(v61);
      LODWORD(v104.__r_.__value_.__l.__data_) = 67110146;
      HIDWORD(v104.__r_.__value_.__r.__words[0]) = v62;
      LOWORD(v104.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOUAUCDriver.cpp";
      WORD1(v104.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v104.__r_.__value_.__r.__words[2]) = 520;
      v105 = 2080;
      *(_QWORD *)v106 = "ret != kIOReturnSuccess";
      *(_WORD *)&v106[8] = 1024;
      *(_DWORD *)&v106[10] = v30;
      _os_log_error_impl(&dword_1B57BA000, v60, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to register io thread %u", (uint8_t *)&v104, 0x28u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v101);
    v63 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v95, "Failed to register io thread");
    std::runtime_error::runtime_error((std::runtime_error *)&v96, &v95);
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = -1;
    v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69A1FB8;
    v96.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v104, (uint64_t)&v96);
    *(_QWORD *)&v106[6] = "void HALS_IOUAUCDriver::register_io_thread(AudioObjectID, AudioObjectID, double, uint32_t)";
    *(_QWORD *)&v106[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v107 = 520;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v93);
    *(std::runtime_error *)&v102[8] = v93;
    *(_QWORD *)v102 = off_1E69A20A0;
    v103 = v94;
    v93.__vftable = 0;
    v93.__imp_.__imp_ = 0;
    v94 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&v104, (uint64_t)v102);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v63, (uint64_t)&v104);
  }
  v31 = *((_QWORD *)this + 140);
  v32 = (AMCP::Log::Scope_Registry *)caulk::mach::os_eventlink::copy_mach_port(v89);
  if (!(_DWORD)v32)
  {
    AMCP::Log::Scope_Registry::get(v32);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v104, "com.apple.coreaudio", "AMCP");
    v64 = *(NSObject **)v104.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v104);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
    {
      v65 = pthread_self();
      v66 = pthread_mach_thread_np(v65);
      LODWORD(v104.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v104.__r_.__value_.__r.__words[0]) = v66;
      LOWORD(v104.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOUAUCDriver.cpp";
      WORD1(v104.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v104.__r_.__value_.__r.__words[2]) = 493;
      v105 = 2080;
      *(_QWORD *)v106 = "in_eventlink_mach_port == MACH_PORT_NULL";
      _os_log_error_impl(&dword_1B57BA000, v64, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid eventlink mach port", (uint8_t *)&v104, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v95);
    v67 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v93, "Invalid eventlink mach port");
    std::runtime_error::runtime_error((std::runtime_error *)&v96, &v93);
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = -1;
    v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69A1FB8;
    v96.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v104, (uint64_t)&v96);
    *(_QWORD *)&v106[6] = "void HALS_IOUAUCDriver::register_eventlink(const std::string &, mach_port_t)";
    *(_QWORD *)&v106[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v107 = 493;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v102);
    v109 = *(_OWORD *)v102;
    input = (uint64_t)off_1E69A20A0;
    v110 = *(_QWORD *)&v102[16];
    memset(v102, 0, sizeof(v102));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&v104, (uint64_t)&input);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v67, (uint64_t)&v104);
  }
  v33 = v32;
  v34 = *(_DWORD *)(v31 + 4);
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v92;
  else
    v35 = (std::string *)v92.__r_.__value_.__r.__words[0];
  v36 = strlen((const char *)v35);
  v37 = (AMCP::Log::Scope_Registry *)IOConnectTrap3(v34, 0, (uintptr_t)v35, v36, v33);
  if ((_DWORD)v37)
  {
    AMCP::Log::Scope_Registry::get(v37);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v104, "com.apple.coreaudio", "AMCP");
    v68 = *(NSObject **)v104.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v104);
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      v69 = pthread_self();
      v70 = pthread_mach_thread_np(v69);
      LODWORD(v104.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v104.__r_.__value_.__r.__words[0]) = v70;
      LOWORD(v104.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOUAUCDriver.cpp";
      WORD1(v104.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v104.__r_.__value_.__r.__words[2]) = 500;
      v105 = 2080;
      *(_QWORD *)v106 = "ret != kIOReturnSuccess";
      _os_log_error_impl(&dword_1B57BA000, v68, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to register event link", (uint8_t *)&v104, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v95);
    v71 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v93, "Failed to register event link");
    std::runtime_error::runtime_error((std::runtime_error *)&v96, &v93);
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = -1;
    v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69A1FB8;
    v96.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v104, (uint64_t)&v96);
    *(_QWORD *)&v106[6] = "void HALS_IOUAUCDriver::register_eventlink(const std::string &, mach_port_t)";
    *(_QWORD *)&v106[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v107 = 500;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v102);
    v109 = *(_OWORD *)v102;
    input = (uint64_t)off_1E69A20A0;
    v110 = *(_QWORD *)&v102[16];
    memset(v102, 0, sizeof(v102));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&v104, (uint64_t)&input);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v71, (uint64_t)&v104);
  }
  v38 = *((_QWORD *)this + 140);
  v39 = (AMCP::Log::Scope_Registry *)caulk::mach::os_workgroup_managed::copy_mach_port((caulk::mach::os_eventlink *)((char *)v89 + 8));
  if (!(_DWORD)v39)
  {
    AMCP::Log::Scope_Registry::get(v39);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v104, "com.apple.coreaudio", "AMCP");
    v72 = *(NSObject **)v104.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v104);
    if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
    {
      v73 = pthread_self();
      v74 = pthread_mach_thread_np(v73);
      LODWORD(v104.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v104.__r_.__value_.__r.__words[0]) = v74;
      LOWORD(v104.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOUAUCDriver.cpp";
      WORD1(v104.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v104.__r_.__value_.__r.__words[2]) = 505;
      v105 = 2080;
      *(_QWORD *)v106 = "in_workgroup_mach_port == MACH_PORT_NULL";
      _os_log_error_impl(&dword_1B57BA000, v72, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid workgroup mach port", (uint8_t *)&v104, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v95);
    v75 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v93, "Invalid workgroup mach port");
    std::runtime_error::runtime_error((std::runtime_error *)&v96, &v93);
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = -1;
    v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69A1FB8;
    v96.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v104, (uint64_t)&v96);
    *(_QWORD *)&v106[6] = "void HALS_IOUAUCDriver::register_workgroup(const std::string &, mach_port_t)";
    *(_QWORD *)&v106[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v107 = 505;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v102);
    v109 = *(_OWORD *)v102;
    input = (uint64_t)off_1E69A20A0;
    v110 = *(_QWORD *)&v102[16];
    memset(v102, 0, sizeof(v102));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&v104, (uint64_t)&input);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v75, (uint64_t)&v104);
  }
  v40 = v39;
  v41 = *(_DWORD *)(v38 + 4);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v43 = strlen((const char *)p_p);
  v44 = (AMCP::Log::Scope_Registry *)IOConnectTrap3(v41, 1u, (uintptr_t)p_p, v43, v40);
  if ((_DWORD)v44)
  {
    AMCP::Log::Scope_Registry::get(v44);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v104, "com.apple.coreaudio", "AMCP");
    v76 = *(NSObject **)v104.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v104);
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
    {
      v77 = pthread_self();
      v78 = pthread_mach_thread_np(v77);
      LODWORD(v104.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v104.__r_.__value_.__r.__words[0]) = v78;
      LOWORD(v104.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOUAUCDriver.cpp";
      WORD1(v104.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v104.__r_.__value_.__r.__words[2]) = 512;
      v105 = 2080;
      *(_QWORD *)v106 = "ret != kIOReturnSuccess";
      _os_log_error_impl(&dword_1B57BA000, v76, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to register workgroup", (uint8_t *)&v104, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v95);
    v79 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v93, "Failed to register workgroup");
    std::runtime_error::runtime_error((std::runtime_error *)&v96, &v93);
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = -1;
    v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69A1FB8;
    v96.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v104, (uint64_t)&v96);
    *(_QWORD *)&v106[6] = "void HALS_IOUAUCDriver::register_workgroup(const std::string &, mach_port_t)";
    *(_QWORD *)&v106[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v107 = 512;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v102);
    v109 = *(_OWORD *)v102;
    input = (uint64_t)off_1E69A20A0;
    v110 = *(_QWORD *)&v102[16];
    memset(v102, 0, sizeof(v102));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&v104, (uint64_t)&input);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v79, (uint64_t)&v104);
  }
  v45 = *((_QWORD *)this + 140);
  input = *((unsigned int *)this + 278);
  *(_QWORD *)&v109 = v27;
  *((_QWORD *)&v109 + 1) = (unint64_t)a4;
  v110 = v28;
  v46 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod(*(_DWORD *)(v45 + 4), 0x13u, &input, 4u, 0, 0, 0, 0, 0, 0);
  v47 = (int)v46;
  if ((_DWORD)v46)
  {
    AMCP::Log::Scope_Registry::get(v46);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v104, "com.apple.coreaudio", "AMCP");
    v80 = *(NSObject **)v104.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v104);
    if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
    {
      v81 = pthread_self();
      v82 = pthread_mach_thread_np(v81);
      LODWORD(v104.__r_.__value_.__l.__data_) = 67110146;
      HIDWORD(v104.__r_.__value_.__r.__words[0]) = v82;
      LOWORD(v104.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOUAUCDriver.cpp";
      WORD1(v104.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v104.__r_.__value_.__r.__words[2]) = 534;
      v105 = 2080;
      *(_QWORD *)v106 = "ret != kIOReturnSuccess";
      *(_WORD *)&v106[8] = 1024;
      *(_DWORD *)&v106[10] = v47;
      _os_log_error_impl(&dword_1B57BA000, v80, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to start io thread %u", (uint8_t *)&v104, 0x28u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v101);
    v83 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v95, "Failed to start io thread");
    std::runtime_error::runtime_error((std::runtime_error *)&v96, &v95);
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = -1;
    v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69A1FB8;
    v96.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v104, (uint64_t)&v96);
    *(_QWORD *)&v106[6] = "void HALS_IOUAUCDriver::start_io_thread(AudioObjectID, AudioObjectID, double, uint32_t)";
    *(_QWORD *)&v106[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v107 = 534;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v93);
    *(std::runtime_error *)&v102[8] = v93;
    *(_QWORD *)v102 = off_1E69A20A0;
    v103 = v94;
    v93.__vftable = 0;
    v93.__imp_.__imp_ = 0;
    v94 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&v104, (uint64_t)v102);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v83, (uint64_t)&v104);
  }
  if (*(_QWORD *)v89)
  {
    v48 = (AMCP::Log::Scope_Registry *)caulk::mach::os_eventlink::associate(v89);
    if ((_DWORD)v48)
    {
      v84 = (int)v48;
      AMCP::Log::Scope_Registry::get(v48);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v104, "com.apple.coreaudio", "AMCP");
      v85 = *(NSObject **)v104.__r_.__value_.__l.__data_;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v104);
      if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
      {
        v86 = pthread_self();
        v87 = pthread_mach_thread_np(v86);
        LODWORD(v104.__r_.__value_.__l.__data_) = 67110146;
        HIDWORD(v104.__r_.__value_.__r.__words[0]) = v87;
        LOWORD(v104.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOUAEngine.cpp";
        WORD1(v104.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v104.__r_.__value_.__r.__words[2]) = 152;
        v105 = 2080;
        *(_QWORD *)v106 = "error != 0";
        *(_WORD *)&v106[8] = 2048;
        *(_QWORD *)&v106[10] = v84;
        _os_log_error_impl(&dword_1B57BA000, v85, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to associate event link %li", (uint8_t *)&v104, 0x2Cu);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v95);
      v88 = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v93, "Failed to associate event link");
      std::runtime_error::runtime_error((std::runtime_error *)&v96, &v93);
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = -1;
      v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69A1FB8;
      v96.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v104, (uint64_t)&v96);
      *(_QWORD *)&v106[6] = "virtual OSStatus HALS_IOUAEngine::Register_IOThread(AudioObjectID, UInt32, Float64, UInt32, mach_port_t)";
      *(_QWORD *)&v106[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAEngine.cpp";
      v107 = 152;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v102);
      v109 = *(_OWORD *)v102;
      input = (uint64_t)off_1E69A20A0;
      v110 = *(_QWORD *)&v102[16];
      memset(v102, 0, sizeof(v102));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&v104, (uint64_t)&input);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v88, (uint64_t)&v104);
    }
  }
  if (v90)
  {
    v49 = (unint64_t *)&v90->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1B59C4EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,std::runtime_error a25,uint64_t a26,uint64_t a27,std::runtime_error a28,std::runtime_error a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,NSObject **buf,void *a40,__int16 a41,__int16 a42,int a43)
{
  uint64_t v43;
  AMCP::Log::Scope_Registry *v45;
  NSObject *v46;
  _opaque_pthread_t *v47;
  mach_port_t v48;

  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
    if (a18 < 0)
      operator delete(__p);
    if (a24 < 0)
      operator delete(a19);
    v45 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v45);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v46 = *buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      v47 = pthread_self();
      v48 = pthread_mach_thread_np(v47);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v48;
      LOWORD(a40) = 2080;
      *(_QWORD *)(v43 + 10) = "HALS_IOUAEngine.cpp";
      a42 = 1024;
      a43 = 157;
      _os_log_error_impl(&dword_1B57BA000, v46, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Failed to register io thread!", (uint8_t *)&buf, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B59C4050);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUAEngine::Unregister_IOThread(HALS_IOUAEngine *this, unsigned int a2, unsigned int a3)
{
  char *v4;
  char *v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  caulk::mach::os_eventlink *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  AMCP::Log::Scope_Registry *v14;
  uint64_t v15;
  AMCP::Log::Scope_Registry *v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  void *exception;
  int v28;
  NSObject *v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  void *v32;
  int v33;
  NSObject *v34;
  _opaque_pthread_t *v35;
  mach_port_t v36;
  void *v37;
  uint64_t v38[2];
  char *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t (**v42)();
  __int128 v43;
  uint64_t v44;
  std::runtime_error v45;
  std::runtime_error v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  uint8_t buf[8];
  _BYTE v54[10];
  __int16 v55;
  int v56;
  __int16 v57;
  _BYTE v58[22];
  int v59;
  std::runtime_error input;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v4 = (char *)*((_QWORD *)this + 149);
  if (!v4)
    goto LABEL_24;
  v6 = (char *)this + 1192;
  do
  {
    v7 = *((_DWORD *)v4 + 8);
    v8 = v7 >= a3;
    if (v7 >= a3)
      v9 = (char **)v4;
    else
      v9 = (char **)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == (char *)this + 1192 || *((_DWORD *)v6 + 8) > a3)
  {
LABEL_24:
    v39 = (char *)this + 1192;
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v21 = *(std::__shared_weak_count **)v54;
    v22 = **(NSObject ***)buf;
    if (*(_QWORD *)v54)
    {
      v23 = (unint64_t *)(*(_QWORD *)v54 + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v25 = pthread_self();
      v26 = pthread_mach_thread_np(v25);
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v26;
      *(_WORD *)v54 = 2080;
      *(_QWORD *)&v54[2] = "HALS_IOUAEngine.cpp";
      v55 = 1024;
      v56 = 171;
      v57 = 2080;
      *(_QWORD *)v58 = "io_ipc_info_iter == m_io_ipc_info_map.end()";
      *(_WORD *)&v58[8] = 2048;
      *(_QWORD *)&v58[10] = a3;
      _os_log_error_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to unregister IOThread, io ipc info not found, client id %lu", buf, 0x2Cu);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v45);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&input, "Failed to unregister IOThread, io ipc info not found");
    std::runtime_error::runtime_error(&v46, &input);
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = -1;
    v46.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v47 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v46);
    *(_QWORD *)&v58[6] = "virtual OSStatus HALS_IOUAEngine::Unregister_IOThread(AudioObjectID, UInt32)";
    *(_QWORD *)&v58[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAEngine.cpp";
    v59 = 171;
    std::vector<void *>::vector(&v40);
    v28 = backtrace((void **)v40, (*((_QWORD *)&v40 + 1) - (_QWORD)v40) >> 3);
    std::vector<void *>::resize((char **)&v40, v28);
    v42 = off_1E69A20A0;
    v43 = v40;
    v44 = v41;
    v40 = 0uLL;
    v41 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v42);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v38[1] = (uint64_t)&v39;
  v39 = v6;
  v10 = (caulk::mach::os_eventlink *)*((_QWORD *)v6 + 5);
  v11 = (std::__shared_weak_count *)*((_QWORD *)v6 + 6);
  v38[0] = (uint64_t)this;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if (*(_QWORD *)v10)
  {
    v14 = (AMCP::Log::Scope_Registry *)caulk::mach::os_eventlink::dissociate(v10);
    if ((_DWORD)v14)
    {
      v33 = (int)v14;
      AMCP::Log::Scope_Registry::get(v14);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v34 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        v35 = pthread_self();
        v36 = pthread_mach_thread_np(v35);
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v36;
        *(_WORD *)v54 = 2080;
        *(_QWORD *)&v54[2] = "HALS_IOUAEngine.cpp";
        v55 = 1024;
        v56 = 180;
        v57 = 2080;
        *(_QWORD *)v58 = "error != 0";
        *(_WORD *)&v58[8] = 2048;
        *(_QWORD *)&v58[10] = v33;
        _os_log_error_impl(&dword_1B57BA000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to disassociate event link %li", buf, 0x2Cu);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v45);
      v37 = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&input, "Failed to disassociate event link");
      std::runtime_error::runtime_error(&v46, &input);
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v51 = -1;
      v46.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v47 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v46);
      *(_QWORD *)&v58[6] = "virtual OSStatus HALS_IOUAEngine::Unregister_IOThread(AudioObjectID, UInt32)";
      *(_QWORD *)&v58[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAEngine.cpp";
      v59 = 180;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
      v42 = off_1E69A20A0;
      v43 = v40;
      v44 = v41;
      v40 = 0uLL;
      v41 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v42);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v37, (uint64_t)buf);
    }
  }
  v15 = *((_QWORD *)this + 140);
  input.__vftable = (std::runtime_error_vtbl *)*((unsigned int *)this + 278);
  input.__imp_.__imp_ = (const char *)a3;
  v16 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod(*(_DWORD *)(v15 + 4), 0x12u, (const uint64_t *)&input, 2u, 0, 0, 0, 0, 0, 0);
  v17 = (int)v16;
  if ((_DWORD)v16)
  {
    AMCP::Log::Scope_Registry::get(v16);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v29 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v30 = pthread_self();
      v31 = pthread_mach_thread_np(v30);
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v31;
      *(_WORD *)v54 = 2080;
      *(_QWORD *)&v54[2] = "HALS_IOUAUCDriver.cpp";
      v55 = 1024;
      v56 = 527;
      v57 = 2080;
      *(_QWORD *)v58 = "ret != kIOReturnSuccess";
      *(_WORD *)&v58[8] = 1024;
      *(_DWORD *)&v58[10] = v17;
      _os_log_error_impl(&dword_1B57BA000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to unregister io thread %u", buf, 0x28u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v52);
    v32 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v45, "Failed to unregister io thread");
    std::runtime_error::runtime_error(&v46, &v45);
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = -1;
    v46.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v47 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v46);
    *(_QWORD *)&v58[6] = "void HALS_IOUAUCDriver::unregister_io_thread(AudioObjectID, AudioObjectID)";
    *(_QWORD *)&v58[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v59 = 527;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
    v42 = off_1E69A20A0;
    v43 = v40;
    v44 = v41;
    v40 = 0uLL;
    v41 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v42);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v32, (uint64_t)buf);
  }
  if (v11)
  {
    v18 = (unint64_t *)&v11->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOUAEngine::Unregister_IOThread(unsigned int,unsigned int)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(v38);
  return 0;
}

void sub_1B59C5CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,std::runtime_error a25,std::runtime_error a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  AMCP::Log::Scope_Registry *v31;
  std::__shared_weak_count *v32;
  NSObject *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  _opaque_pthread_t *v36;
  mach_port_t v37;

  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
    applesauce::raii::v1::detail::ScopeGuard<HALS_IOUAEngine::Unregister_IOThread(unsigned int,unsigned int)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(&a14);
    v31 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v31);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v29 - 144), "com.apple.coreaudio", "AMCP");
    v32 = *(std::__shared_weak_count **)(v29 - 136);
    v33 = **(NSObject ***)(v29 - 144);
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v35 = __ldaxr(p_shared_owners);
      while (__stlxr(v35 - 1, p_shared_owners));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      v36 = pthread_self();
      v37 = pthread_mach_thread_np(v36);
      *(_DWORD *)(v29 - 144) = 67109634;
      *(_DWORD *)(v29 - 140) = v37;
      *(_WORD *)(v29 - 136) = 2080;
      *(_QWORD *)(v28 + 10) = "HALS_IOUAEngine.cpp";
      *(_WORD *)(v29 - 126) = 1024;
      *(_DWORD *)(v29 - 124) = 187;
      _os_log_error_impl(&dword_1B57BA000, v33, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Failed to unregister io thread!", (uint8_t *)(v29 - 144), 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B59C5764);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B59C6040()
{
  JUMPOUT(0x1B59C5ED8);
}

void sub_1B59C6048()
{
  __cxa_end_catch();
  JUMPOUT(0x1B59C5ED8);
}

uint64_t HALS_IOUAEngine::BeginIOCycle(HALS_IOUAEngine *this, unsigned int a2, const HALS_IOEngineInfo *a3)
{
  return 0;
}

uint64_t HALS_IOUAEngine::EndIOCycle(HALS_IOUAEngine *this, unsigned int a2, const HALS_IOEngineInfo *a3)
{
  return 0;
}

uint64_t HALS_IOEngine2::get_timebase@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 1088);
  *a2 = *(_QWORD *)(this + 1080);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t HALS_IOUAEngine::_TellHardwareToStart(uint64_t a1)
{
  uint64_t v1;
  AMCP::Log::Scope_Registry *v2;
  int v3;
  NSObject *v5;
  _opaque_pthread_t *v6;
  mach_port_t v7;
  void *exception;
  __int128 v9;
  uint64_t v10;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t v13;
  std::runtime_error v14;
  std::runtime_error v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint8_t buf[8];
  __int16 v23;
  char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _BYTE v28[14];
  const char *v29;
  int v30;
  uint64_t input[3];

  input[2] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 1120);
  input[0] = *(unsigned int *)(a1 + 1112);
  input[1] = 0;
  v2 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod(*(_DWORD *)(v1 + 4), 9u, input, 2u, 0, 0, 0, 0, 0, 0);
  v3 = (int)v2;
  if ((_DWORD)v2)
  {
    AMCP::Log::Scope_Registry::get(v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v5 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = pthread_self();
      v7 = pthread_mach_thread_np(v6);
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v7;
      v23 = 2080;
      v24 = "HALS_IOUAUCDriver.cpp";
      v25 = 1024;
      v26 = 481;
      v27 = 2080;
      *(_QWORD *)v28 = "ret != kIOReturnSuccess";
      *(_WORD *)&v28[8] = 1024;
      *(_DWORD *)&v28[10] = v3;
      _os_log_error_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to start device %u", buf, 0x28u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v21);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v14, "Failed to start device");
    std::runtime_error::runtime_error(&v15, &v14);
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = -1;
    v15.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v16 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v15);
    *(_QWORD *)&v28[6] = "void HALS_IOUAUCDriver::start_io(AudioObjectID, AudioDriverKit::IOUserAudioStartStopFlags)";
    v29 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v30 = 481;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v9);
    v11 = off_1E69A20A0;
    v12 = v9;
    v13 = v10;
    v9 = 0uLL;
    v10 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v11);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return 0;
}

void sub_1B59C62D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, std::runtime_error a19, std::runtime_error a20,void *a21,uint64_t a22)
{
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  AMCP::Log::Scope_Registry *v28;
  NSObject *v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;

  if (a2)
  {
    if (__p)
      operator delete(__p);
    if (a11)
      operator delete(a11);
    *(_QWORD *)(v25 - 128) = &unk_1E69A2000;
    v27 = *(_QWORD *)(v25 - 120);
    if (v27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27))
      *(_QWORD *)(v25 - 120) = 0;
    std::runtime_error::~runtime_error((std::runtime_error *)(v25 - 144));
    a21 = &unk_1E69A2000;
    if (a22 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a22 + 32))(a22))
      a22 = 0;
    std::runtime_error::~runtime_error(&a20);
    std::runtime_error::~runtime_error(&a19);
    if (v24)
      __cxa_free_exception(v22);
    AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 145));
    v28 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v28);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v25 - 144), "com.apple.coreaudio", "AMCP");
    v29 = **(NSObject ***)(v25 - 144);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v25 - 144);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v30 = pthread_self();
      v31 = pthread_mach_thread_np(v30);
      *(_DWORD *)(v25 - 144) = 67109634;
      *(_DWORD *)(v25 - 140) = v31;
      *(_WORD *)(v25 - 136) = 2080;
      *(_QWORD *)(v23 + 10) = "HALS_IOUAEngine.cpp";
      *(_WORD *)(v25 - 126) = 1024;
      *(_DWORD *)(v25 - 124) = 203;
      _os_log_error_impl(&dword_1B57BA000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception while starting IO!", (uint8_t *)(v25 - 144), 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B59C6104);
  }
  _Unwind_Resume(exception_object);
}

AMCP::Log::Scope_Registry *HALS_IOUAEngine::_TellHardwareToStop(uint64_t a1)
{
  uint64_t v1;
  AMCP::Log::Scope_Registry *result;
  int v3;
  NSObject *v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  void *exception;
  __int128 v8;
  uint64_t v9;
  uint64_t (**v10)();
  __int128 v11;
  uint64_t v12;
  std::runtime_error v13;
  std::runtime_error v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint8_t buf[8];
  __int16 v22;
  char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _BYTE v27[14];
  const char *v28;
  int v29;
  uint64_t input[3];

  input[2] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 1120);
  input[0] = *(unsigned int *)(a1 + 1112);
  input[1] = 0;
  result = (AMCP::Log::Scope_Registry *)IOConnectCallMethod(*(_DWORD *)(v1 + 4), 0xAu, input, 2u, 0, 0, 0, 0, 0, 0);
  v3 = (int)result;
  if ((_DWORD)result)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v4 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = pthread_self();
      v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v6;
      v22 = 2080;
      v23 = "HALS_IOUAUCDriver.cpp";
      v24 = 1024;
      v25 = 488;
      v26 = 2080;
      *(_QWORD *)v27 = "ret != kIOReturnSuccess";
      *(_WORD *)&v27[8] = 1024;
      *(_DWORD *)&v27[10] = v3;
      _os_log_error_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to stop device %u", buf, 0x28u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v13, "Failed to stop device");
    std::runtime_error::runtime_error(&v14, &v13);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = -1;
    v14.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v15 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(_QWORD *)&v27[6] = "void HALS_IOUAUCDriver::stop_io(AudioObjectID, AudioDriverKit::IOUserAudioStartStopFlags)";
    v28 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v29 = 488;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v8);
    v10 = off_1E69A20A0;
    v11 = v8;
    v12 = v9;
    v8 = 0uLL;
    v9 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v10);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return result;
}

void sub_1B59C66B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, std::runtime_error a19, std::runtime_error a20,void *a21,uint64_t a22)
{
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  AMCP::Log::Scope_Registry *v28;
  NSObject *v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;

  if (a2)
  {
    if (__p)
      operator delete(__p);
    if (a11)
      operator delete(a11);
    *(_QWORD *)(v25 - 128) = &unk_1E69A2000;
    v27 = *(_QWORD *)(v25 - 120);
    if (v27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27))
      *(_QWORD *)(v25 - 120) = 0;
    std::runtime_error::~runtime_error((std::runtime_error *)(v25 - 144));
    a21 = &unk_1E69A2000;
    if (a22 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a22 + 32))(a22))
      a22 = 0;
    std::runtime_error::~runtime_error(&a20);
    std::runtime_error::~runtime_error(&a19);
    if (v24)
      __cxa_free_exception(v22);
    AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 145));
    v28 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v28);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v25 - 144), "com.apple.coreaudio", "AMCP");
    v29 = **(NSObject ***)(v25 - 144);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v25 - 144);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v30 = pthread_self();
      v31 = pthread_mach_thread_np(v30);
      *(_DWORD *)(v25 - 144) = 67109634;
      *(_DWORD *)(v25 - 140) = v31;
      *(_WORD *)(v25 - 136) = 2080;
      *(_QWORD *)(v23 + 10) = "HALS_IOUAEngine.cpp";
      *(_WORD *)(v25 - 126) = 1024;
      *(_DWORD *)(v25 - 124) = 218;
      _os_log_error_impl(&dword_1B57BA000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception while stopping IO!", (uint8_t *)(v25 - 144), 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B59C64ECLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUAEngine::_BeginReading(HALS_IOUAEngine *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  char *v5;
  char *v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  std::runtime_error *exception;
  int v18;
  uint64_t v19;
  std::runtime_error v20;
  std::__shared_weak_count *v21;
  caulk::mach::os_eventlink *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  void (__cdecl *v29)(std::runtime_error *__hidden);
  _opaque_pthread_t *v30;
  mach_port_t v31;
  uint64_t v32;
  std::__shared_weak_count *imp;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v40;
  uint64_t v41;
  uint64_t (**v42)();
  __int128 v43;
  uint64_t v44;
  std::runtime_error v45;
  std::runtime_error v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  uint8_t buf[8];
  _BYTE v54[10];
  __int16 v55;
  int v56;
  _BYTE v57[24];
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v5 = (char *)*((_QWORD *)this + 149);
  if (!v5)
    goto LABEL_12;
  v7 = (char *)this + 1192;
  do
  {
    v8 = *((_DWORD *)v5 + 8);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (char **)v5;
    else
      v10 = (char **)(v5 + 8);
    if (v9)
      v7 = v5;
    v5 = *v10;
  }
  while (*v10);
  if (v7 == (char *)this + 1192 || *((_DWORD *)v7 + 8) > a2)
  {
LABEL_12:
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = *(std::__shared_weak_count **)v54;
    v12 = **(NSObject ***)buf;
    if (*(_QWORD *)v54)
    {
      v13 = (unint64_t *)(*(_QWORD *)v54 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v15 = pthread_self();
      v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v16;
      *(_WORD *)v54 = 2080;
      *(_QWORD *)&v54[2] = "HALS_IOUAEngine.cpp";
      v55 = 1024;
      v56 = 255;
      *(_WORD *)v57 = 2080;
      *(_QWORD *)&v57[2] = "io_ipc_info_iter == m_io_ipc_info_map.end()";
      *(_WORD *)&v57[10] = 2048;
      *(_QWORD *)&v57[12] = a2;
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to unregister IOThread, io ipc info not found, context id %lu", buf, 0x2Cu);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v52);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v45, "Failed to unregister IOThread, io ipc info not found");
    std::runtime_error::runtime_error(&v46, &v45);
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = -1;
    v46.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v47 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v46);
    *(_QWORD *)&v57[8] = "virtual int HALS_IOUAEngine::_BeginReading(AudioObjectID, UInt32, const HALS_IOEngineInfo &)";
    *(_QWORD *)&v57[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAEngine.cpp";
    v58 = 255;
    std::vector<void *>::vector(&v40);
    v18 = backtrace((void **)v40, (*((_QWORD *)&v40 + 1) - (_QWORD)v40) >> 3);
    std::vector<void *>::resize((char **)&v40, v18);
    v42 = off_1E69A20A0;
    v43 = v40;
    v44 = v41;
    v40 = 0uLL;
    v41 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v42);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v19 = *(_QWORD *)v57;
    exception[1].__imp_.__imp_ = *(const char **)v57;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = *(std::runtime_error *)&v57[8];
    LODWORD(exception[3].__vftable) = v58;
    exception[2] = v20;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v22 = (caulk::mach::os_eventlink *)*((_QWORD *)v7 + 5);
  v21 = (std::__shared_weak_count *)*((_QWORD *)v7 + 6);
  *(_QWORD *)buf = v22;
  *(_QWORD *)v54 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  v25 = *((_QWORD *)this + 147);
  *(_DWORD *)v25 = a3;
  *(_DWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 8) = (unint64_t)*((double *)a4 + 64);
  *(_QWORD *)(v25 + 16) = *((_QWORD *)a4 + 65);
  v26 = (*(double (**)(_QWORD))(**((_QWORD **)a4 + 1) + 328))(*((_QWORD *)a4 + 1));
  v27 = caulk::mach::os_eventlink::timed_wait_signal_or_error(v22, (double)a3 / v26);
  if ((v27 & 0xFF00000000) != 0 && v27 != 0)
  {
    v36 = 0;
    if (!v21)
      return v36;
    goto LABEL_38;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v27);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v46, "com.apple.coreaudio", "AMCP");
  v29 = v46.~runtime_error_0;
  v30 = pthread_self();
  v31 = pthread_mach_thread_np(v30);
  v32 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
  *(_DWORD *)(v32 + 16) = 0;
  *(_BYTE *)(v32 + 20) = 16;
  *(_DWORD *)(v32 + 24) = v31;
  *(_QWORD *)(v32 + 32) = "HALS_IOUAEngine.cpp";
  *(_DWORD *)(v32 + 40) = 272;
  *(_QWORD *)v32 = &off_1E697AD38;
  *(_QWORD *)(v32 + 8) = 0;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)v29, (caulk::concurrent::message *)v32);
  imp = (std::__shared_weak_count *)v46.__imp_.__imp_;
  if (v46.__imp_.__imp_)
  {
    v34 = (unint64_t *)(v46.__imp_.__imp_ + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
  }
  v36 = 2003329396;
  v21 = *(std::__shared_weak_count **)v54;
  if (*(_QWORD *)v54)
  {
LABEL_38:
    v37 = (unint64_t *)&v21->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return v36;
}

void sub_1B59C6CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v20 - 112);
  _Unwind_Resume(a1);
}

void HALS_IOUAEngine::_ReadFromStream_Read(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t *a6)
{
  uint64_t v6;
  char *v9;
  double v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int128 *v17;
  unint64_t v18;
  double v19;

  v6 = *a6;
  if (*a6)
  {
    v9 = (char *)(v6 + *((unsigned int *)a6 + 2));
    v10 = *(double *)(a4 + 80);
    if (v10 >= 0.0)
    {
      v11 = *(char **)(a3 + 168);
      v12 = *(unsigned int *)(*(_QWORD *)(a1 + 768) + 16);
      if (*(_DWORD *)(a3 + 128) == 1667326771)
        v13 = 4;
      else
        v13 = *(unsigned int *)(a3 + 144);
      v14 = (unint64_t)v10 % v12;
      v15 = a5;
      if (v14 + a5 <= v12)
        v16 = a5;
      else
        v16 = v12 - v14;
      memcpy(v9, &v11[v14 * v13], v16 * v13);
      if (v15 != v16)
        memcpy(&v9[v16 * v13], v11, (v15 - v16) * v13);
    }
    else
    {
      bzero((void *)(v6 + *((unsigned int *)a6 + 2)), a5);
    }
    v17 = *(unsigned __int128 **)(a1 + 1160);
    v18 = (unint64_t)*(double *)(a4 + 80);
    v19 = *(double *)(a4 + 144);
    do
      __ldxp(v17);
    while (__stxp(__PAIR128__((unint64_t)v19, v18), v17));
  }
}

uint64_t HALS_IOUAEngine::_EndWriting(HALS_IOUAEngine *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  char *v5;
  char *v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  std::runtime_error *exception;
  int v18;
  uint64_t v19;
  std::runtime_error v20;
  std::__shared_weak_count *v21;
  caulk::mach::os_eventlink *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  void (__cdecl *v29)(std::runtime_error *__hidden);
  _opaque_pthread_t *v30;
  mach_port_t v31;
  uint64_t v32;
  std::__shared_weak_count *imp;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v40;
  uint64_t v41;
  uint64_t (**v42)();
  __int128 v43;
  uint64_t v44;
  std::runtime_error v45;
  std::runtime_error v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  uint8_t buf[8];
  _BYTE v54[10];
  __int16 v55;
  int v56;
  _BYTE v57[24];
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v5 = (char *)*((_QWORD *)this + 149);
  if (!v5)
    goto LABEL_12;
  v7 = (char *)this + 1192;
  do
  {
    v8 = *((_DWORD *)v5 + 8);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (char **)v5;
    else
      v10 = (char **)(v5 + 8);
    if (v9)
      v7 = v5;
    v5 = *v10;
  }
  while (*v10);
  if (v7 == (char *)this + 1192 || *((_DWORD *)v7 + 8) > a2)
  {
LABEL_12:
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = *(std::__shared_weak_count **)v54;
    v12 = **(NSObject ***)buf;
    if (*(_QWORD *)v54)
    {
      v13 = (unint64_t *)(*(_QWORD *)v54 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v15 = pthread_self();
      v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v16;
      *(_WORD *)v54 = 2080;
      *(_QWORD *)&v54[2] = "HALS_IOUAEngine.cpp";
      v55 = 1024;
      v56 = 362;
      *(_WORD *)v57 = 2080;
      *(_QWORD *)&v57[2] = "io_ipc_info_iter == m_io_ipc_info_map.end()";
      *(_WORD *)&v57[10] = 2048;
      *(_QWORD *)&v57[12] = a2;
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to unregister IOThread, io ipc info not found, context id %lu", buf, 0x2Cu);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v52);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v45, "Failed to unregister IOThread, io ipc info not found");
    std::runtime_error::runtime_error(&v46, &v45);
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = -1;
    v46.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v47 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v46);
    *(_QWORD *)&v57[8] = "virtual int HALS_IOUAEngine::_EndWriting(AudioObjectID, UInt32, const HALS_IOEngineInfo &)";
    *(_QWORD *)&v57[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAEngine.cpp";
    v58 = 362;
    std::vector<void *>::vector(&v40);
    v18 = backtrace((void **)v40, (*((_QWORD *)&v40 + 1) - (_QWORD)v40) >> 3);
    std::vector<void *>::resize((char **)&v40, v18);
    v42 = off_1E69A20A0;
    v43 = v40;
    v44 = v41;
    v40 = 0uLL;
    v41 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v42);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v19 = *(_QWORD *)v57;
    exception[1].__imp_.__imp_ = *(const char **)v57;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = *(std::runtime_error *)&v57[8];
    LODWORD(exception[3].__vftable) = v58;
    exception[2] = v20;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v22 = (caulk::mach::os_eventlink *)*((_QWORD *)v7 + 5);
  v21 = (std::__shared_weak_count *)*((_QWORD *)v7 + 6);
  *(_QWORD *)buf = v22;
  *(_QWORD *)v54 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  v25 = *((_QWORD *)this + 147);
  *(_DWORD *)v25 = a3;
  *(_DWORD *)(v25 + 24) = 1;
  *(_QWORD *)(v25 + 8) = (unint64_t)*((double *)a4 + 72);
  *(_QWORD *)(v25 + 16) = *((_QWORD *)a4 + 73);
  v26 = (*(double (**)(_QWORD))(**((_QWORD **)a4 + 1) + 328))(*((_QWORD *)a4 + 1));
  v27 = caulk::mach::os_eventlink::timed_wait_signal_or_error(v22, (double)a3 / v26);
  if ((v27 & 0xFF00000000) != 0 && v27 != 0)
  {
    v36 = 0;
    if (!v21)
      return v36;
    goto LABEL_38;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v27);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v46, "com.apple.coreaudio", "AMCP");
  v29 = v46.~runtime_error_0;
  v30 = pthread_self();
  v31 = pthread_mach_thread_np(v30);
  v32 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
  *(_DWORD *)(v32 + 16) = 0;
  *(_BYTE *)(v32 + 20) = 16;
  *(_DWORD *)(v32 + 24) = v31;
  *(_QWORD *)(v32 + 32) = "HALS_IOUAEngine.cpp";
  *(_DWORD *)(v32 + 40) = 379;
  *(_QWORD *)v32 = &off_1E697AD90;
  *(_QWORD *)(v32 + 8) = 0;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)v29, (caulk::concurrent::message *)v32);
  imp = (std::__shared_weak_count *)v46.__imp_.__imp_;
  if (v46.__imp_.__imp_)
  {
    v34 = (unint64_t *)(v46.__imp_.__imp_ + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
  }
  v36 = 2003329396;
  v21 = *(std::__shared_weak_count **)v54;
  if (*(_QWORD *)v54)
  {
LABEL_38:
    v37 = (unint64_t *)&v21->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return v36;
}

void sub_1B59C7360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v20 - 112);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOUAEngine::_WriteToStream_Write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unsigned __int128 *v15;
  unint64_t v16;
  double v17;

  v8 = *(char **)(a3 + 168);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 768) + 16);
  if (*(_DWORD *)(a3 + 128) == 1667326771)
    v10 = 4;
  else
    v10 = *(unsigned int *)(a3 + 144);
  v11 = (unint64_t)*(double *)(a4 + 144) % v9;
  v12 = a5;
  if (v11 + a5 <= v9)
    v13 = a5;
  else
    v13 = v9 - v11;
  if (*(_QWORD *)a6)
    v14 = (char *)(*(_QWORD *)a6 + *(unsigned int *)(a6 + 8));
  else
    v14 = 0;
  memcpy(&v8[v11 * v10], v14, v13 * v10);
  if (v12 != v13)
    memcpy(v8, &v14[v13 * v10], (v12 - v13) * v10);
  v15 = *(unsigned __int128 **)(a1 + 1160);
  v16 = (unint64_t)*(double *)(a4 + 80);
  v17 = *(double *)(a4 + 144);
  do
    __ldxp(v15);
  while (__stxp(__PAIR128__((unint64_t)v17, v16), v15));
  return 0;
}

void caulk::concurrent::details::rt_message_call<HALS_IOUAEngine::_EndWriting(unsigned int,unsigned int,HALS_IOEngineInfo const&)::$_0,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOUAEngine::_EndWriting(unsigned int,unsigned int,HALS_IOEngineInfo const&)::$_0,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Timed out signalling event link", buf, 0x18u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOUAEngine::_EndWriting(unsigned int,unsigned int,HALS_IOEngineInfo const&)::$_0,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOUAEngine::_EndWriting(unsigned int,unsigned int,HALS_IOEngineInfo const&)::$_0,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOUAEngine::_BeginReading(unsigned int,unsigned int,HALS_IOEngineInfo const&)::$_0,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOUAEngine::_BeginReading(unsigned int,unsigned int,HALS_IOEngineInfo const&)::$_0,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Timed out signalling event link", buf, 0x18u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOUAEngine::_BeginReading(unsigned int,unsigned int,HALS_IOEngineInfo const&)::$_0,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOUAEngine::_BeginReading(unsigned int,unsigned int,HALS_IOEngineInfo const&)::$_0,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

uint64_t *applesauce::raii::v1::detail::ScopeGuard<HALS_IOUAEngine::Unregister_IOThread(unsigned int,unsigned int)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(uint64_t *a1)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;

  v2 = *a1;
  v3 = (uint64_t **)a1[1];
  v4 = *v3;
  v5 = (uint64_t *)(*v3)[1];
  if (v5)
  {
    do
    {
      v6 = v5;
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  else
  {
    v7 = *v3;
    do
    {
      v6 = (uint64_t *)v7[2];
      v8 = *v6 == (_QWORD)v7;
      v7 = v6;
    }
    while (!v8);
  }
  if (*(uint64_t **)(v2 + 1184) == v4)
    *(_QWORD *)(v2 + 1184) = v6;
  --*(_QWORD *)(v2 + 1200);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 1192), v4);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(v4 + 5));
  operator delete(v4);
  return a1;
}

void std::__shared_ptr_emplace<HALS_IOUAEngine::io_ipc_info_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697ACE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_IOUAEngine::io_ipc_info_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697ACE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<HALS_IOUAEngine::io_ipc_info_t>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)(a1 + 32));
  return caulk::mach::details::release_os_object(*(caulk::mach::details **)(a1 + 24), v2);
}

void sub_1B59C7A90(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, NSObject **a9, __int128 a10)
{
  AMCP::Log::Scope_Registry *v10;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;

  if (a2)
  {
    v10 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    v11 = *a9;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v13;
      LOWORD(a10) = 2080;
      *(_QWORD *)((char *)&a10 + 2) = "HALS_IOUAEngine.cpp";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 99;
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception unmapping engine buffers", (uint8_t *)&a9, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B59C7A28);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>>>::destroy(a1[1]);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
    operator delete(a1);
  }
}

void AMCP::IO_Core::Node::update_core(std::string::size_type a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  std::string *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::logic_error_vtbl *v32;
  std::string **v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  char *v37;
  std::string *v38;
  std::string *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::string **v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  std::string *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *imp;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::logic_error_vtbl *v60;
  std::string **v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  char *v65;
  std::string *v66;
  std::string *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::string **v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  std::string *v76;
  std::string *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  std::logic_error_vtbl *v98;
  std::string **v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  char *v103;
  std::string *v104;
  std::string *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::string **v109;
  uint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  std::string *v114;
  std::string *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  std::logic_error_vtbl *v124;
  std::string **v125;
  uint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  char *v129;
  std::string *v130;
  std::string *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  std::string **v135;
  uint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  std::string *v140;
  std::string *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  std::logic_error_vtbl *v150;
  std::string **v151;
  uint64_t v152;
  unint64_t v153;
  _QWORD *v154;
  char *v155;
  std::string *v156;
  std::string *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  std::string **v161;
  uint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  std::string *v166;
  std::string *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  std::string::size_type v177;
  std::string::size_type v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t v181;
  std::string *v182;
  uint64_t v183;
  unint64_t v184;
  __int128 v185;
  unint64_t v186;
  std::string *v187;
  std::string *v188;
  uint64_t v189;
  __int128 v190;
  std::__shared_weak_count *v191;
  unint64_t *p_shared_owners;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t v197;
  int v198;
  unint64_t v199;
  std::string *v200;
  uint64_t v201;
  unint64_t v202;
  std::string::size_type v203;
  std::string::size_type v204;
  std::string::size_type v205;
  std::string *v206;
  std::string *v207;
  uint64_t v208;
  __int128 v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  std::string::size_type v217;
  std::string::size_type v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t v221;
  std::string *v222;
  uint64_t v223;
  __int128 v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  std::string *v233;
  uint64_t v234;
  __int128 v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  std::string *v244;
  uint64_t v245;
  __int128 v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  std::string *v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  NSObject *v263;
  unint64_t *v264;
  unint64_t v265;
  _opaque_pthread_t *v266;
  mach_port_t v267;
  void *exception;
  std::string::size_type v269;
  std::__shared_weak_count *v270;
  int v271;
  int v272;
  int v273;
  int v274;
  _OWORD *v275;
  int v276;
  char v277;
  std::logic_error v278;
  std::string v279;
  _BYTE v280[32];
  void (*v281)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _QWORD v282[3];
  _QWORD *v283;
  _QWORD v284[3];
  _QWORD *v285;
  _QWORD v286[3];
  _QWORD *v287;
  _QWORD v288[3];
  _QWORD *v289;
  _QWORD v290[3];
  _QWORD *v291;
  _QWORD v292[3];
  _QWORD *v293;
  _QWORD v294[3];
  _QWORD *v295;
  _QWORD v296[3];
  _QWORD *v297;
  _QWORD v298[3];
  _QWORD *v299;
  _QWORD v300[3];
  _QWORD *v301;
  _QWORD v302[3];
  _QWORD *v303;
  _QWORD v304[3];
  _QWORD *v305;
  std::string v306;
  std::string *v307;
  uint64_t v308;
  const char *v309;
  std::string **v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  _BYTE v314[40];
  const char *v315;
  _BYTE *v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  std::string v320;
  std::string *v321;
  uint64_t v322;

  v322 = *MEMORY[0x1E0C80C00];
  LODWORD(v306.__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 8);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v314, 0, (int *)&v306, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v314 + 40), v314);
  v4 = *(std::__shared_weak_count **)&v314[8];
  if (*(_QWORD *)&v314[8])
  {
    v5 = (unint64_t *)(*(_QWORD *)&v314[8] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  LODWORD(v306.__r_.__value_.__l.__data_) = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 40))(a1);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v314, 0, (int *)&v306, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v314 + 40), v314);
  v7 = *(std::__shared_weak_count **)&v314[8];
  if (*(_QWORD *)&v314[8])
  {
    v8 = (unint64_t *)(*(_QWORD *)&v314[8] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  LODWORD(v306.__r_.__value_.__l.__data_) = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 40))(a1);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v314, 0, (int *)&v306, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v314 + 40), v314);
  v10 = *(std::__shared_weak_count **)&v314[8];
  if (*(_QWORD *)&v314[8])
  {
    v11 = (unint64_t *)(*(_QWORD *)&v314[8] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  LODWORD(v306.__r_.__value_.__l.__data_) = 1;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v314, 0, (int *)&v306, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v314 + 40), v314);
  v13 = *(std::__shared_weak_count **)&v314[8];
  if (*(_QWORD *)&v314[8])
  {
    v14 = (unint64_t *)(*(_QWORD *)&v314[8] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  v17 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)v314 = v16;
  *(_DWORD *)&v314[8] = v17;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>((uint64_t *)&v306, 0, (__int128 *)v314, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v306.__r_.__value_.__r.__words[0] + 40), &v306);
  size = (std::__shared_weak_count *)v306.__r_.__value_.__l.__size_;
  if (v306.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v306.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v21 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v21 || (v21 = std::__shared_weak_count::lock(v21)) == 0 || (v22 = *(_QWORD *)(a1 + 16)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v21);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v314, "com.apple.coreaudio", "AMCP");
    v262 = *(std::__shared_weak_count **)&v314[8];
    v263 = **(NSObject ***)v314;
    if (*(_QWORD *)&v314[8])
    {
      v264 = (unint64_t *)(*(_QWORD *)&v314[8] + 8);
      do
        v265 = __ldaxr(v264);
      while (__stlxr(v265 - 1, v264));
      if (!v265)
      {
        ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
        std::__shared_weak_count::__release_weak(v262);
      }
    }
    if (os_log_type_enabled(v263, OS_LOG_TYPE_ERROR))
    {
      v266 = pthread_self();
      v267 = pthread_mach_thread_np(v266);
      *(_DWORD *)v314 = 67109890;
      *(_DWORD *)&v314[4] = v267;
      *(_WORD *)&v314[8] = 2080;
      *(_QWORD *)&v314[10] = "Node.cpp";
      *(_WORD *)&v314[18] = 1024;
      *(_DWORD *)&v314[20] = 220;
      *(_WORD *)&v314[24] = 2080;
      *(_QWORD *)&v314[26] = "not (node.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v263, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid node in core object", v314, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v277);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid node in core object", (uint64_t)&v320);
    std::logic_error::logic_error(&v278, &v320);
    v278.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v306, &v278);
    v308 = 0;
    v309 = 0;
    LODWORD(v310) = -1;
    v306.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v306.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    v307 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v314, (uint64_t)&v306);
    *(_QWORD *)&v314[32] = "virtual void AMCP::IO_Core::Node::update_core(Core::Operation_Set &)";
    v315 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Node.cpp";
    LODWORD(v316) = 220;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v279.__r_.__value_.__l.__data_);
    *(_QWORD *)v280 = off_1E69A20A0;
    *(std::string *)&v280[8] = v279;
    memset(&v279, 0, sizeof(v279));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v314, (uint64_t)v280);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)v314);
  }
  v270 = v21;
  if (*(char *)(v22 + 47) < 0)
    std::string::__init_copy_ctor_external(&v320, *(const std::string::value_type **)(v22 + 24), *(_QWORD *)(v22 + 32));
  else
    v320 = *(std::string *)(v22 + 24);
  v275 = (_OWORD *)(v22 + 24);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v279, 0, 1.5836601e190);
  v23 = v279.__r_.__value_.__r.__words[0];
  v24 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v280, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
  else
    *(std::string *)v280 = v320;
  v307 = 0;
  v25 = (char *)operator new(0x20uLL);
  *(_QWORD *)v25 = off_1E697AEA8;
  *(_OWORD *)(v25 + 8) = *(_OWORD *)v280;
  *((_QWORD *)v25 + 3) = *(_QWORD *)&v280[16];
  memset(v280, 0, 24);
  v307 = (std::string *)v25;
  memset(v314, 0, sizeof(v314));
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v314, (uint64_t)&v306);
  *(_QWORD *)&v314[32] = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v23, v24, (AMCP *)v314);
  if (*(_QWORD *)&v314[32])
    (*(void (**)(_QWORD, _BYTE *, _QWORD, _QWORD))&v314[32])(0, v314, 0, 0);
  v26 = v307;
  if (v307 == &v306)
  {
    v27 = 4;
    v26 = &v306;
    goto LABEL_41;
  }
  if (v307)
  {
    v27 = 5;
LABEL_41:
    (*(void (**)(void))(v26->__r_.__value_.__r.__words[0] + 8 * v27))();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(v23);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v23 + 40), &v279);
  v28 = (std::__shared_weak_count *)v279.__r_.__value_.__l.__size_;
  if (v279.__r_.__value_.__l.__size_)
  {
    v29 = (unint64_t *)(v279.__r_.__value_.__l.__size_ + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v320.__r_.__value_.__l.__data_);
  v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  v304[0] = &off_1E697B048;
  v305 = v304;
  if (*(char *)(v22 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v279, *(const std::string::value_type **)(v22 + 24), *(_QWORD *)(v22 + 32));
  }
  else
  {
    *(_OWORD *)&v279.__r_.__value_.__l.__data_ = *v275;
    v279.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 40);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v278, 0, 1.5836601e190);
  v32 = v278.__vftable;
  v271 = SHIBYTE(v279.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v306, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
  else
    v306 = v279;
  v33 = &v307;
  v34 = (uint64_t)v305;
  if (!v305)
    goto LABEL_58;
  if (v305 != v304)
  {
    v34 = (*(uint64_t (**)(_QWORD *))(*v305 + 16))(v305);
LABEL_58:
    v310 = (std::string **)v34;
    goto LABEL_60;
  }
  v310 = &v307;
  (*(void (**)(_QWORD *, std::string **))(v304[0] + 24))(v304, &v307);
LABEL_60:
  v269 = a1;
  v311 = v31;
  v312 = 0x676C6F626E64696FLL;
  v313 = 0;
  v35 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>>();
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v314, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    *(std::string *)v314 = v306;
  v36 = &v314[24];
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v314[24], (uint64_t)&v307);
  v317 = v311;
  v318 = v312;
  v319 = v313;
  v321 = 0;
  v37 = (char *)operator new(0x58uLL);
  *(_QWORD *)v37 = off_1E697AF28;
  v38 = (std::string *)(v37 + 8);
  if ((v314[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v38, *(const std::string::value_type **)v314, *(std::string::size_type *)&v314[8]);
  }
  else
  {
    *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)v314;
    *((_QWORD *)v37 + 3) = *(_QWORD *)&v314[16];
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v37 + 32), (uint64_t)&v314[24]);
  *((_QWORD *)v37 + 8) = v317;
  *((_QWORD *)v37 + 9) = v318;
  *((_DWORD *)v37 + 20) = v319;
  v321 = (std::string *)v37;
  memset(v280, 0, sizeof(v280));
  v281 = 0;
  std::__function::__value_func<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::__value_func[abi:ne180100]((uint64_t)v280, (uint64_t)&v320);
  v281 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v32, v35, (AMCP *)v280);
  if (v281)
    v281(0, (uint64_t)v280, 0, 0);
  v39 = v321;
  if (v321 == &v320)
  {
    v40 = 4;
    v39 = &v320;
  }
  else
  {
    if (!v321)
      goto LABEL_73;
    v40 = 5;
  }
  (*(void (**)(void))(v39->__r_.__value_.__r.__words[0] + 8 * v40))();
LABEL_73:
  if (v316 == &v314[24])
  {
    v41 = 4;
  }
  else
  {
    if (!v316)
      goto LABEL_78;
    v41 = 5;
    v36 = v316;
  }
  (*(void (**)(_QWORD *))(*v36 + 8 * v41))(v36);
LABEL_78:
  if ((v314[23] & 0x80000000) != 0)
    operator delete(*(void **)v314);
  if (v310 == &v307)
  {
    v42 = 4;
  }
  else
  {
    if (!v310)
      goto LABEL_85;
    v42 = 5;
    v33 = v310;
  }
  (*((void (**)(std::string **))&(*v33)->__r_.__value_.__l.__data_ + v42))(v33);
LABEL_85:
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  if (v271 < 0)
    std::string::__init_copy_ctor_external(&v306, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
  else
    v306 = v279;
  v43 = &v307;
  v44 = (uint64_t)v305;
  if (!v305)
    goto LABEL_93;
  if (v305 != v304)
  {
    v44 = (*(uint64_t (**)(_QWORD *))(*v305 + 16))(v305);
LABEL_93:
    v310 = (std::string **)v44;
    goto LABEL_95;
  }
  v310 = &v307;
  (*(void (**)(_QWORD *, std::string **))(v304[0] + 24))(v304, &v307);
LABEL_95:
  v311 = v31;
  v45 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>>();
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v314, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    *(std::string *)v314 = v306;
  v46 = &v314[24];
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v314[24], (uint64_t)&v307);
  v317 = v311;
  v321 = 0;
  v47 = operator new(0x48uLL);
  *v47 = off_1E697AFB8;
  v48 = (std::string *)(v47 + 1);
  if ((v314[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v48, *(const std::string::value_type **)v314, *(std::string::size_type *)&v314[8]);
  }
  else
  {
    *(_OWORD *)&v48->__r_.__value_.__l.__data_ = *(_OWORD *)v314;
    v47[3] = *(_QWORD *)&v314[16];
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v47 + 4), (uint64_t)&v314[24]);
  v47[8] = v317;
  v321 = (std::string *)v47;
  memset(v280, 0, sizeof(v280));
  v281 = 0;
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::__value_func[abi:ne180100]((uint64_t)v280, (uint64_t)&v320);
  v281 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v32, v45, (AMCP *)v280);
  if (v281)
    v281(0, (uint64_t)v280, 0, 0);
  v49 = v321;
  if (v321 == &v320)
  {
    v50 = 4;
    v49 = &v320;
  }
  else
  {
    if (!v321)
      goto LABEL_108;
    v50 = 5;
  }
  (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_108:
  if (v316 == &v314[24])
  {
    v51 = 4;
  }
  else
  {
    if (!v316)
      goto LABEL_113;
    v51 = 5;
    v46 = v316;
  }
  (*(void (**)(_QWORD *))(*v46 + 8 * v51))(v46);
LABEL_113:
  if ((v314[23] & 0x80000000) != 0)
    operator delete(*(void **)v314);
  if (v310 == &v307)
  {
    v52 = 4;
  }
  else
  {
    if (!v310)
      goto LABEL_120;
    v52 = 5;
    v43 = v310;
  }
  (*((void (**)(std::string **))&(*v43)->__r_.__value_.__l.__data_ + v52))(v43);
LABEL_120:
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)&v32[1].what, &v278);
  imp = (std::__shared_weak_count *)v278.__imp_.__imp_;
  if (v278.__imp_.__imp_)
  {
    v54 = (unint64_t *)(v278.__imp_.__imp_ + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
  }
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v279.__r_.__value_.__l.__data_);
  v56 = v305;
  if (v305 == v304)
  {
    v57 = 4;
    v56 = v304;
  }
  else
  {
    if (!v305)
      goto LABEL_134;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_134:
  strcpy(v314, "revobolg");
  v314[9] = 0;
  *(_WORD *)&v314[10] = 0;
  v302[0] = &off_1E697B1F8;
  v303 = v302;
  AMCP::IO_Core::setup_proc<std::function<void ()>>(a2, (uint64_t)v314, v31, v22, (uint64_t)v302);
  v58 = v303;
  if (v303 == v302)
  {
    v59 = 4;
    v58 = v302;
  }
  else
  {
    if (!v303)
      goto LABEL_139;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_139:
  v300[0] = &off_1E697B3A8;
  v301 = v300;
  if (*(char *)(v22 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v279, *(const std::string::value_type **)(v22 + 24), *(_QWORD *)(v22 + 32));
  }
  else
  {
    *(_OWORD *)&v279.__r_.__value_.__l.__data_ = *v275;
    v279.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 40);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v278, 0, 1.58366012e190);
  v60 = v278.__vftable;
  v272 = SHIBYTE(v279.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v306, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
  else
    v306 = v279;
  v61 = &v307;
  v62 = (uint64_t)v301;
  if (!v301)
    goto LABEL_148;
  if (v301 != v300)
  {
    v62 = (*(uint64_t (**)(_QWORD *))(*v301 + 16))(v301);
LABEL_148:
    v310 = (std::string **)v62;
    goto LABEL_150;
  }
  v310 = &v307;
  (*(void (**)(_QWORD *, std::string **))(v300[0] + 24))(v300, &v307);
LABEL_150:
  v311 = v31;
  v312 = 0x676C6F6274686572;
  v313 = 0;
  v63 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(void)>)>>();
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v314, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    *(std::string *)v314 = v306;
  v64 = &v314[24];
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v314[24], (uint64_t)&v307);
  v317 = v311;
  v318 = v312;
  v319 = v313;
  v321 = 0;
  v65 = (char *)operator new(0x58uLL);
  *(_QWORD *)v65 = off_1E697B288;
  v66 = (std::string *)(v65 + 8);
  if ((v314[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v66, *(const std::string::value_type **)v314, *(std::string::size_type *)&v314[8]);
  }
  else
  {
    *(_OWORD *)&v66->__r_.__value_.__l.__data_ = *(_OWORD *)v314;
    *((_QWORD *)v65 + 3) = *(_QWORD *)&v314[16];
  }
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v65 + 32), (uint64_t)&v314[24]);
  *((_QWORD *)v65 + 8) = v317;
  *((_QWORD *)v65 + 9) = v318;
  *((_DWORD *)v65 + 20) = v319;
  v321 = (std::string *)v65;
  memset(v280, 0, sizeof(v280));
  v281 = 0;
  std::__function::__value_func<void ()(std::function<void ()(void)>)>::__value_func[abi:ne180100]((uint64_t)v280, (uint64_t)&v320);
  v281 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(void)>)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v60, v63, (AMCP *)v280);
  if (v281)
    v281(0, (uint64_t)v280, 0, 0);
  v67 = v321;
  if (v321 == &v320)
  {
    v68 = 4;
    v67 = &v320;
  }
  else
  {
    if (!v321)
      goto LABEL_163;
    v68 = 5;
  }
  (*(void (**)(void))(v67->__r_.__value_.__r.__words[0] + 8 * v68))();
LABEL_163:
  if (v316 == &v314[24])
  {
    v69 = 4;
  }
  else
  {
    if (!v316)
      goto LABEL_168;
    v69 = 5;
    v64 = v316;
  }
  (*(void (**)(_QWORD *))(*v64 + 8 * v69))(v64);
LABEL_168:
  if ((v314[23] & 0x80000000) != 0)
    operator delete(*(void **)v314);
  if (v310 == &v307)
  {
    v70 = 4;
  }
  else
  {
    if (!v310)
      goto LABEL_175;
    v70 = 5;
    v61 = v310;
  }
  (*((void (**)(std::string **))&(*v61)->__r_.__value_.__l.__data_ + v70))(v61);
LABEL_175:
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  if (v272 < 0)
    std::string::__init_copy_ctor_external(&v306, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
  else
    v306 = v279;
  v71 = &v307;
  v72 = (uint64_t)v301;
  if (!v301)
    goto LABEL_183;
  if (v301 != v300)
  {
    v72 = (*(uint64_t (**)(_QWORD *))(*v301 + 16))(v301);
LABEL_183:
    v310 = (std::string **)v72;
    goto LABEL_185;
  }
  v310 = &v307;
  (*(void (**)(_QWORD *, std::string **))(v300[0] + 24))(v300, &v307);
LABEL_185:
  v311 = v31;
  v73 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(void)> ()(void)>>();
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v314, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    *(std::string *)v314 = v306;
  v74 = &v314[24];
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v314[24], (uint64_t)&v307);
  v317 = v311;
  v321 = 0;
  v75 = operator new(0x48uLL);
  *v75 = off_1E697B318;
  v76 = (std::string *)(v75 + 1);
  if ((v314[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v76, *(const std::string::value_type **)v314, *(std::string::size_type *)&v314[8]);
  }
  else
  {
    *(_OWORD *)&v76->__r_.__value_.__l.__data_ = *(_OWORD *)v314;
    v75[3] = *(_QWORD *)&v314[16];
  }
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v75 + 4), (uint64_t)&v314[24]);
  v75[8] = v317;
  v321 = (std::string *)v75;
  memset(v280, 0, sizeof(v280));
  v281 = 0;
  std::__function::__value_func<std::function<void ()(void)> ()(void)>::__value_func[abi:ne180100]((uint64_t)v280, (uint64_t)&v320);
  v281 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(void)> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v60, v73, (AMCP *)v280);
  if (v281)
    v281(0, (uint64_t)v280, 0, 0);
  v77 = v321;
  if (v321 == &v320)
  {
    v78 = 4;
    v77 = &v320;
  }
  else
  {
    if (!v321)
      goto LABEL_198;
    v78 = 5;
  }
  (*(void (**)(void))(v77->__r_.__value_.__r.__words[0] + 8 * v78))();
LABEL_198:
  if (v316 == &v314[24])
  {
    v79 = 4;
  }
  else
  {
    if (!v316)
      goto LABEL_203;
    v79 = 5;
    v74 = v316;
  }
  (*(void (**)(_QWORD *))(*v74 + 8 * v79))(v74);
LABEL_203:
  if ((v314[23] & 0x80000000) != 0)
    operator delete(*(void **)v314);
  if (v310 == &v307)
  {
    v80 = 4;
  }
  else
  {
    if (!v310)
      goto LABEL_210;
    v80 = 5;
    v71 = v310;
  }
  (*((void (**)(std::string **))&(*v71)->__r_.__value_.__l.__data_ + v80))(v71);
LABEL_210:
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)&v60[1].what, &v278);
  v81 = (std::__shared_weak_count *)v278.__imp_.__imp_;
  if (v278.__imp_.__imp_)
  {
    v82 = (unint64_t *)(v278.__imp_.__imp_ + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v279.__r_.__value_.__l.__data_);
  v84 = v301;
  if (v301 == v300)
  {
    v85 = 4;
    v84 = v300;
  }
  else
  {
    if (!v301)
      goto LABEL_224;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_224:
  strcpy(v314, "lcerbolg");
  v314[9] = 0;
  *(_WORD *)&v314[10] = 0;
  v298[0] = &off_1E697B438;
  v299 = v298;
  AMCP::IO_Core::setup_proc<std::function<void ()>>(a2, (uint64_t)v314, v31, v22, (uint64_t)v298);
  v86 = v299;
  if (v299 == v298)
  {
    v87 = 4;
    v86 = v298;
  }
  else
  {
    if (!v299)
      goto LABEL_229;
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_229:
  strcpy(v314, "pbdnbolg");
  v314[9] = 0;
  *(_WORD *)&v314[10] = 0;
  v296[0] = &off_1E697B4B8;
  v297 = v296;
  AMCP::IO_Core::setup_proc<std::function<void ()>>(a2, (uint64_t)v314, v31, v22, (uint64_t)v296);
  v88 = v297;
  if (v297 == v296)
  {
    v89 = 4;
    v88 = v296;
  }
  else
  {
    if (!v297)
      goto LABEL_234;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_234:
  strcpy(v314, "pednbolg");
  v314[9] = 0;
  *(_WORD *)&v314[10] = 0;
  v294[0] = &off_1E697B538;
  v295 = v294;
  AMCP::IO_Core::setup_proc<std::function<void ()>>(a2, (uint64_t)v314, v31, v22, (uint64_t)v294);
  v90 = v295;
  if (v295 == v294)
  {
    v91 = 4;
    v90 = v294;
  }
  else
  {
    if (!v295)
      goto LABEL_239;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_239:
  strcpy(v314, "cbdnbolg");
  v314[9] = 0;
  *(_WORD *)&v314[10] = 0;
  v292[0] = &off_1E697B6D8;
  v293 = v292;
  AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(a2, (uint64_t)v314, v31, v22, (uint64_t)v292);
  v92 = v293;
  if (v293 == v292)
  {
    v93 = 4;
    v92 = v292;
  }
  else
  {
    if (!v293)
      goto LABEL_244;
    v93 = 5;
  }
  (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_244:
  strcpy(v314, "cednbolg");
  v314[9] = 0;
  *(_WORD *)&v314[10] = 0;
  v290[0] = &off_1E697B768;
  v291 = v290;
  AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(a2, (uint64_t)v314, v31, v22, (uint64_t)v290);
  v94 = v291;
  if (v291 == v290)
  {
    v95 = 4;
    v94 = v290;
  }
  else
  {
    if (!v291)
      goto LABEL_249;
    v95 = 5;
  }
  (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_249:
  strcpy(v314, "lcnubolg");
  v314[9] = 0;
  *(_WORD *)&v314[10] = 0;
  v288[0] = &off_1E697B7E8;
  v289 = v288;
  AMCP::IO_Core::setup_proc<std::function<void ()>>(a2, (uint64_t)v314, v31, v22, (uint64_t)v288);
  v96 = v289;
  if (v289 == v288)
  {
    v97 = 4;
    v96 = v288;
  }
  else
  {
    if (!v289)
      goto LABEL_254;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_254:
  v286[0] = &off_1E697B988;
  v287 = v286;
  if (*(char *)(v22 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v279, *(const std::string::value_type **)(v22 + 24), *(_QWORD *)(v22 + 32));
  }
  else
  {
    *(_OWORD *)&v279.__r_.__value_.__l.__data_ = *v275;
    v279.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 40);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v278, 0, 1.5836601e190);
  v98 = v278.__vftable;
  v273 = SHIBYTE(v279.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v306, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
  else
    v306 = v279;
  v99 = &v307;
  v100 = (uint64_t)v287;
  if (!v287)
    goto LABEL_263;
  if (v287 != v286)
  {
    v100 = (*(uint64_t (**)(_QWORD *))(*v287 + 16))(v287);
LABEL_263:
    v310 = (std::string **)v100;
    goto LABEL_265;
  }
  v310 = &v307;
  (*(void (**)(_QWORD *, std::string **))(v286[0] + 24))(v286, &v307);
LABEL_265:
  v311 = v31;
  v312 = 0x676C6F626E646C61;
  v313 = 0;
  v101 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<long long ()(void)>)>>();
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v314, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    *(std::string *)v314 = v306;
  v102 = &v314[24];
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v314[24], (uint64_t)&v307);
  v317 = v311;
  v318 = v312;
  v319 = v313;
  v321 = 0;
  v103 = (char *)operator new(0x58uLL);
  *(_QWORD *)v103 = off_1E697B868;
  v104 = (std::string *)(v103 + 8);
  if ((v314[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v104, *(const std::string::value_type **)v314, *(std::string::size_type *)&v314[8]);
  }
  else
  {
    *(_OWORD *)&v104->__r_.__value_.__l.__data_ = *(_OWORD *)v314;
    *((_QWORD *)v103 + 3) = *(_QWORD *)&v314[16];
  }
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v103 + 32), (uint64_t)&v314[24]);
  *((_QWORD *)v103 + 8) = v317;
  *((_QWORD *)v103 + 9) = v318;
  *((_DWORD *)v103 + 20) = v319;
  v321 = (std::string *)v103;
  memset(v280, 0, sizeof(v280));
  v281 = 0;
  std::__function::__value_func<void ()(std::function<long long ()(void)>)>::__value_func[abi:ne180100]((uint64_t)v280, (uint64_t)&v320);
  v281 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<long long ()(void)>)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v98, v101, (AMCP *)v280);
  if (v281)
    v281(0, (uint64_t)v280, 0, 0);
  v105 = v321;
  if (v321 == &v320)
  {
    v106 = 4;
    v105 = &v320;
  }
  else
  {
    if (!v321)
      goto LABEL_278;
    v106 = 5;
  }
  (*(void (**)(void))(v105->__r_.__value_.__r.__words[0] + 8 * v106))();
LABEL_278:
  if (v316 == &v314[24])
  {
    v107 = 4;
  }
  else
  {
    if (!v316)
      goto LABEL_283;
    v107 = 5;
    v102 = v316;
  }
  (*(void (**)(_QWORD *))(*v102 + 8 * v107))(v102);
LABEL_283:
  if ((v314[23] & 0x80000000) != 0)
    operator delete(*(void **)v314);
  if (v310 == &v307)
  {
    v108 = 4;
  }
  else
  {
    if (!v310)
      goto LABEL_290;
    v108 = 5;
    v99 = v310;
  }
  (*((void (**)(std::string **))&(*v99)->__r_.__value_.__l.__data_ + v108))(v99);
LABEL_290:
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  if (v273 < 0)
    std::string::__init_copy_ctor_external(&v306, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
  else
    v306 = v279;
  v109 = &v307;
  v110 = (uint64_t)v287;
  if (!v287)
    goto LABEL_298;
  if (v287 != v286)
  {
    v110 = (*(uint64_t (**)(_QWORD *))(*v287 + 16))(v287);
LABEL_298:
    v310 = (std::string **)v110;
    goto LABEL_300;
  }
  v310 = &v307;
  (*(void (**)(_QWORD *, std::string **))(v286[0] + 24))(v286, &v307);
LABEL_300:
  v311 = v31;
  v111 = AMCP::Implementation::get_type_marker<std::function<std::function<long long ()(void)> ()(void)>>();
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v314, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    *(std::string *)v314 = v306;
  v112 = &v314[24];
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v314[24], (uint64_t)&v307);
  v317 = v311;
  v321 = 0;
  v113 = operator new(0x48uLL);
  *v113 = off_1E697B8F8;
  v114 = (std::string *)(v113 + 1);
  if ((v314[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v114, *(const std::string::value_type **)v314, *(std::string::size_type *)&v314[8]);
  }
  else
  {
    *(_OWORD *)&v114->__r_.__value_.__l.__data_ = *(_OWORD *)v314;
    v113[3] = *(_QWORD *)&v314[16];
  }
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v113 + 4), (uint64_t)&v314[24]);
  v113[8] = v317;
  v321 = (std::string *)v113;
  memset(v280, 0, sizeof(v280));
  v281 = 0;
  std::__function::__value_func<std::function<long long ()(void)> ()(void)>::__value_func[abi:ne180100]((uint64_t)v280, (uint64_t)&v320);
  v281 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::function<long long ()(void)> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v98, v111, (AMCP *)v280);
  if (v281)
    v281(0, (uint64_t)v280, 0, 0);
  v115 = v321;
  if (v321 == &v320)
  {
    v116 = 4;
    v115 = &v320;
  }
  else
  {
    if (!v321)
      goto LABEL_313;
    v116 = 5;
  }
  (*(void (**)(void))(v115->__r_.__value_.__r.__words[0] + 8 * v116))();
LABEL_313:
  if (v316 == &v314[24])
  {
    v117 = 4;
  }
  else
  {
    if (!v316)
      goto LABEL_318;
    v117 = 5;
    v112 = v316;
  }
  (*(void (**)(_QWORD *))(*v112 + 8 * v117))(v112);
LABEL_318:
  if ((v314[23] & 0x80000000) != 0)
    operator delete(*(void **)v314);
  if (v310 == &v307)
  {
    v118 = 4;
  }
  else
  {
    if (!v310)
      goto LABEL_325;
    v118 = 5;
    v109 = v310;
  }
  (*((void (**)(std::string **))&(*v109)->__r_.__value_.__l.__data_ + v118))(v109);
LABEL_325:
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)&v98[1].what, &v278);
  v119 = (std::__shared_weak_count *)v278.__imp_.__imp_;
  if (v278.__imp_.__imp_)
  {
    v120 = (unint64_t *)(v278.__imp_.__imp_ + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v279.__r_.__value_.__l.__data_);
  v122 = v287;
  if (v287 == v286)
  {
    v123 = 4;
    v122 = v286;
  }
  else
  {
    if (!v287)
      goto LABEL_339;
    v123 = 5;
  }
  (*(void (**)(void))(*v122 + 8 * v123))();
LABEL_339:
  v284[0] = &off_1E697BB38;
  v285 = v284;
  if (*(char *)(v22 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v279, *(const std::string::value_type **)(v22 + 24), *(_QWORD *)(v22 + 32));
  }
  else
  {
    *(_OWORD *)&v279.__r_.__value_.__l.__data_ = *v275;
    v279.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 40);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v278, 0, 1.58366009e190);
  v124 = v278.__vftable;
  v274 = SHIBYTE(v279.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v306, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
  else
    v306 = v279;
  v125 = &v307;
  v126 = (uint64_t)v285;
  if (!v285)
    goto LABEL_348;
  if (v285 != v284)
  {
    v126 = (*(uint64_t (**)(_QWORD *))(*v285 + 16))(v285);
LABEL_348:
    v310 = (std::string **)v126;
    goto LABEL_350;
  }
  v310 = &v307;
  (*(void (**)(_QWORD *, std::string **))(v284[0] + 24))(v284, &v307);
LABEL_350:
  v311 = v31;
  v312 = 0x676C6F626973666FLL;
  v313 = 0;
  v127 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long)>)>>();
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v314, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    *(std::string *)v314 = v306;
  v128 = &v314[24];
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v314[24], (uint64_t)&v307);
  v317 = v311;
  v318 = v312;
  v319 = v313;
  v321 = 0;
  v129 = (char *)operator new(0x58uLL);
  *(_QWORD *)v129 = off_1E697BA18;
  v130 = (std::string *)(v129 + 8);
  if ((v314[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v130, *(const std::string::value_type **)v314, *(std::string::size_type *)&v314[8]);
  }
  else
  {
    *(_OWORD *)&v130->__r_.__value_.__l.__data_ = *(_OWORD *)v314;
    *((_QWORD *)v129 + 3) = *(_QWORD *)&v314[16];
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v129 + 32), (uint64_t)&v314[24]);
  *((_QWORD *)v129 + 8) = v317;
  *((_QWORD *)v129 + 9) = v318;
  *((_DWORD *)v129 + 20) = v319;
  v321 = (std::string *)v129;
  memset(v280, 0, sizeof(v280));
  v281 = 0;
  std::__function::__value_func<void ()(std::function<unsigned long long ()(unsigned long long)>)>::__value_func[abi:ne180100]((uint64_t)v280, (uint64_t)&v320);
  v281 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<unsigned long long ()(unsigned long long)>)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v124, v127, (AMCP *)v280);
  if (v281)
    v281(0, (uint64_t)v280, 0, 0);
  v131 = v321;
  if (v321 == &v320)
  {
    v132 = 4;
    v131 = &v320;
  }
  else
  {
    if (!v321)
      goto LABEL_363;
    v132 = 5;
  }
  (*(void (**)(void))(v131->__r_.__value_.__r.__words[0] + 8 * v132))();
LABEL_363:
  if (v316 == &v314[24])
  {
    v133 = 4;
  }
  else
  {
    if (!v316)
      goto LABEL_368;
    v133 = 5;
    v128 = v316;
  }
  (*(void (**)(_QWORD *))(*v128 + 8 * v133))(v128);
LABEL_368:
  if ((v314[23] & 0x80000000) != 0)
    operator delete(*(void **)v314);
  if (v310 == &v307)
  {
    v134 = 4;
  }
  else
  {
    if (!v310)
      goto LABEL_375;
    v134 = 5;
    v125 = v310;
  }
  (*((void (**)(std::string **))&(*v125)->__r_.__value_.__l.__data_ + v134))(v125);
LABEL_375:
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  if (v274 < 0)
    std::string::__init_copy_ctor_external(&v306, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
  else
    v306 = v279;
  v135 = &v307;
  v136 = (uint64_t)v285;
  if (!v285)
    goto LABEL_383;
  if (v285 != v284)
  {
    v136 = (*(uint64_t (**)(_QWORD *))(*v285 + 16))(v285);
LABEL_383:
    v310 = (std::string **)v136;
    goto LABEL_385;
  }
  v310 = &v307;
  (*(void (**)(_QWORD *, std::string **))(v284[0] + 24))(v284, &v307);
LABEL_385:
  v311 = v31;
  v137 = AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long)> ()(void)>>();
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v314, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    *(std::string *)v314 = v306;
  v138 = &v314[24];
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v314[24], (uint64_t)&v307);
  v317 = v311;
  v321 = 0;
  v139 = operator new(0x48uLL);
  *v139 = off_1E697BAA8;
  v140 = (std::string *)(v139 + 1);
  if ((v314[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v140, *(const std::string::value_type **)v314, *(std::string::size_type *)&v314[8]);
  }
  else
  {
    *(_OWORD *)&v140->__r_.__value_.__l.__data_ = *(_OWORD *)v314;
    v139[3] = *(_QWORD *)&v314[16];
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v139 + 4), (uint64_t)&v314[24]);
  v139[8] = v317;
  v321 = (std::string *)v139;
  memset(v280, 0, sizeof(v280));
  v281 = 0;
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> ()(void)>::__value_func[abi:ne180100]((uint64_t)v280, (uint64_t)&v320);
  v281 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::function<unsigned long long ()(unsigned long long)> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v124, v137, (AMCP *)v280);
  if (v281)
    v281(0, (uint64_t)v280, 0, 0);
  v141 = v321;
  if (v321 == &v320)
  {
    v142 = 4;
    v141 = &v320;
  }
  else
  {
    if (!v321)
      goto LABEL_398;
    v142 = 5;
  }
  (*(void (**)(void))(v141->__r_.__value_.__r.__words[0] + 8 * v142))();
LABEL_398:
  if (v316 == &v314[24])
  {
    v143 = 4;
  }
  else
  {
    if (!v316)
      goto LABEL_403;
    v143 = 5;
    v138 = v316;
  }
  (*(void (**)(_QWORD *))(*v138 + 8 * v143))(v138);
LABEL_403:
  if ((v314[23] & 0x80000000) != 0)
    operator delete(*(void **)v314);
  if (v310 == &v307)
  {
    v144 = 4;
  }
  else
  {
    if (!v310)
      goto LABEL_410;
    v144 = 5;
    v135 = v310;
  }
  (*((void (**)(std::string **))&(*v135)->__r_.__value_.__l.__data_ + v144))(v135);
LABEL_410:
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)&v124[1].what, &v278);
  v145 = (std::__shared_weak_count *)v278.__imp_.__imp_;
  if (v278.__imp_.__imp_)
  {
    v146 = (unint64_t *)(v278.__imp_.__imp_ + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v279.__r_.__value_.__l.__data_);
  v148 = v285;
  if (v285 == v284)
  {
    v149 = 4;
    v148 = v284;
  }
  else
  {
    if (!v285)
      goto LABEL_424;
    v149 = 5;
  }
  (*(void (**)(void))(*v148 + 8 * v149))();
LABEL_424:
  v282[0] = &off_1E697BCE8;
  v283 = v282;
  if (*(char *)(v22 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v279, *(const std::string::value_type **)(v22 + 24), *(_QWORD *)(v22 + 32));
  }
  else
  {
    *(_OWORD *)&v279.__r_.__value_.__l.__data_ = *v275;
    v279.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 40);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v278, 0, 1.58366011e190);
  v150 = v278.__vftable;
  v276 = SHIBYTE(v279.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v306, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
  else
    v306 = v279;
  v151 = &v307;
  v152 = (uint64_t)v283;
  if (!v283)
    goto LABEL_433;
  if (v283 != v282)
  {
    v152 = (*(uint64_t (**)(void))(*v283 + 16))();
LABEL_433:
    v310 = (std::string **)v152;
    goto LABEL_435;
  }
  v310 = &v307;
  (*(void (**)(uint64_t, _QWORD *))(v282[0] + 24))((uint64_t)v282, &v307);
LABEL_435:
  v311 = v31;
  v312 = 0x676C6F626F736669;
  v313 = 0;
  v153 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>>();
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v314, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    *(std::string *)v314 = v306;
  v154 = &v314[24];
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v314[24], (uint64_t)&v307);
  v317 = v311;
  v318 = v312;
  v319 = v313;
  v321 = 0;
  v155 = (char *)operator new(0x58uLL);
  *(_QWORD *)v155 = off_1E697BBC8;
  v156 = (std::string *)(v155 + 8);
  if ((v314[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v156, *(const std::string::value_type **)v314, *(std::string::size_type *)&v314[8]);
  }
  else
  {
    *(_OWORD *)&v156->__r_.__value_.__l.__data_ = *(_OWORD *)v314;
    *((_QWORD *)v155 + 3) = *(_QWORD *)&v314[16];
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v155 + 32), (uint64_t)&v314[24]);
  *((_QWORD *)v155 + 8) = v317;
  *((_QWORD *)v155 + 9) = v318;
  *((_DWORD *)v155 + 20) = v319;
  v321 = (std::string *)v155;
  memset(v280, 0, sizeof(v280));
  v281 = 0;
  std::__function::__value_func<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::__value_func[abi:ne180100]((uint64_t)v280, (uint64_t)&v320);
  v281 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v150, v153, (AMCP *)v280);
  if (v281)
    v281(0, (uint64_t)v280, 0, 0);
  v157 = v321;
  if (v321 == &v320)
  {
    v158 = 4;
    v157 = &v320;
  }
  else
  {
    if (!v321)
      goto LABEL_448;
    v158 = 5;
  }
  (*(void (**)(void))(v157->__r_.__value_.__r.__words[0] + 8 * v158))();
LABEL_448:
  if (v316 == &v314[24])
  {
    v159 = 4;
  }
  else
  {
    if (!v316)
      goto LABEL_453;
    v159 = 5;
    v154 = v316;
  }
  (*(void (**)(_QWORD *))(*v154 + 8 * v159))(v154);
LABEL_453:
  if ((v314[23] & 0x80000000) != 0)
    operator delete(*(void **)v314);
  if (v310 == &v307)
  {
    v160 = 4;
  }
  else
  {
    if (!v310)
      goto LABEL_460;
    v160 = 5;
    v151 = v310;
  }
  (*((void (**)(std::string **))&(*v151)->__r_.__value_.__l.__data_ + v160))(v151);
LABEL_460:
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  if (v276 < 0)
    std::string::__init_copy_ctor_external(&v306, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
  else
    v306 = v279;
  v161 = &v307;
  v162 = (uint64_t)v283;
  if (!v283)
    goto LABEL_468;
  if (v283 != v282)
  {
    v162 = (*(uint64_t (**)(void))(*v283 + 16))();
LABEL_468:
    v310 = (std::string **)v162;
    goto LABEL_470;
  }
  v310 = &v307;
  (*(void (**)(uint64_t, _QWORD *))(v282[0] + 24))((uint64_t)v282, &v307);
LABEL_470:
  v311 = v31;
  v163 = AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>>();
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v314, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    *(std::string *)v314 = v306;
  v164 = &v314[24];
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v314[24], (uint64_t)&v307);
  v317 = v311;
  v321 = 0;
  v165 = operator new(0x48uLL);
  *v165 = off_1E697BC58;
  v166 = (std::string *)(v165 + 1);
  if ((v314[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v166, *(const std::string::value_type **)v314, *(std::string::size_type *)&v314[8]);
  }
  else
  {
    *(_OWORD *)&v166->__r_.__value_.__l.__data_ = *(_OWORD *)v314;
    v165[3] = *(_QWORD *)&v314[16];
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v165 + 4), (uint64_t)&v314[24]);
  v165[8] = v317;
  v321 = (std::string *)v165;
  memset(v280, 0, sizeof(v280));
  v281 = 0;
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::__value_func[abi:ne180100]((uint64_t)v280, (uint64_t)&v320);
  v281 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v150, v163, (AMCP *)v280);
  if (v281)
    v281(0, (uint64_t)v280, 0, 0);
  v167 = v321;
  if (v321 == &v320)
  {
    v168 = 4;
    v167 = &v320;
  }
  else
  {
    if (!v321)
      goto LABEL_483;
    v168 = 5;
  }
  (*(void (**)(void))(v167->__r_.__value_.__r.__words[0] + 8 * v168))();
LABEL_483:
  if (v316 == &v314[24])
  {
    v169 = 4;
  }
  else
  {
    if (!v316)
      goto LABEL_488;
    v169 = 5;
    v164 = v316;
  }
  (*(void (**)(_QWORD *))(*v164 + 8 * v169))(v164);
LABEL_488:
  if ((v314[23] & 0x80000000) != 0)
    operator delete(*(void **)v314);
  if (v310 == &v307)
  {
    v170 = 4;
  }
  else
  {
    if (!v310)
      goto LABEL_495;
    v170 = 5;
    v161 = v310;
  }
  (*((void (**)(std::string **))&(*v161)->__r_.__value_.__l.__data_ + v170))(v161);
LABEL_495:
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)&v150[1].what, &v278);
  v171 = (std::__shared_weak_count *)v278.__imp_.__imp_;
  if (v278.__imp_.__imp_)
  {
    v172 = (unint64_t *)(v278.__imp_.__imp_ + 8);
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v279.__r_.__value_.__l.__data_);
  v174 = v283;
  if (v283 == v282)
  {
    v175 = 4;
    v174 = v282;
  }
  else
  {
    if (!v283)
      goto LABEL_509;
    v175 = 5;
  }
  (*(void (**)(void))(*v174 + 8 * v175))();
LABEL_509:
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v279, 0, 1.5836601e190);
  v176 = v279.__r_.__value_.__r.__words[0];
  v178 = *(_QWORD *)(v269 + 16);
  v177 = *(_QWORD *)(v269 + 24);
  if (v177)
  {
    v179 = (unint64_t *)(v177 + 16);
    do
      v180 = __ldxr(v179);
    while (__stxr(v180 + 1, v179));
  }
  v181 = AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Description ()(void)>>();
  v306.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E697BD78;
  v306.__r_.__value_.__l.__size_ = v178;
  v306.__r_.__value_.__r.__words[2] = v177;
  v307 = &v306;
  memset(v314, 0, sizeof(v314));
  std::__function::__value_func<AMCP::Node_Description ()(void)>::__value_func[abi:ne180100]((uint64_t)v314, (uint64_t)&v306);
  *(_QWORD *)&v314[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Node_Description ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v176, v181, (AMCP *)v314);
  if (*(_QWORD *)&v314[32])
    (*(void (**)(_QWORD, _BYTE *, _QWORD, _QWORD))&v314[32])(0, v314, 0, 0);
  v182 = v307;
  if (v307 == &v306)
  {
    v183 = 4;
    v182 = &v306;
  }
  else
  {
    if (!v307)
      goto LABEL_519;
    v183 = 5;
  }
  (*(void (**)(void))(v182->__r_.__value_.__r.__words[0] + 8 * v183))();
LABEL_519:
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v306, v176);
  v309 = *(const char **)(v176 + 40);
  LODWORD(v310) = *(_DWORD *)(v176 + 48);
  v184 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v185 = *(_OWORD *)&v306.__r_.__value_.__l.__data_;
  *(_OWORD *)&v306.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)v314 = v185;
  *(_QWORD *)&v314[16] = *((_QWORD *)&v306.__r_.__value_.__l + 2);
  *(_QWORD *)&v314[24] = v307;
  *(_DWORD *)&v314[32] = v308;
  if (v307)
  {
    v186 = *(_QWORD *)(v306.__r_.__value_.__r.__words[2] + 8);
    if ((*((_QWORD *)&v185 + 1) & (*((_QWORD *)&v185 + 1) - 1)) != 0)
    {
      if (v186 >= *((_QWORD *)&v185 + 1))
        v186 %= *((_QWORD *)&v185 + 1);
    }
    else
    {
      v186 &= *((_QWORD *)&v185 + 1) - 1;
    }
    *(_QWORD *)(v185 + 8 * v186) = &v314[16];
    v306.__r_.__value_.__r.__words[2] = 0;
    v307 = 0;
  }
  v315 = v309;
  LODWORD(v316) = (_DWORD)v310;
  v321 = 0;
  v187 = (std::string *)operator new(0x40uLL);
  v187->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E697BE08;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)&v187->__r_.__value_.__l.__size_, (uint64_t *)v314);
  v187[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v315;
  LODWORD(v187[2].__r_.__value_.__r.__words[1]) = (_DWORD)v316;
  v321 = v187;
  memset(v280, 0, sizeof(v280));
  v281 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v280, (uint64_t)&v320);
  v281 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v176, v184, (AMCP *)v280);
  if (v281)
    v281(0, (uint64_t)v280, 0, 0);
  v188 = v321;
  if (v321 == &v320)
  {
    v189 = 4;
    v188 = &v320;
    goto LABEL_531;
  }
  if (v321)
  {
    v189 = 5;
LABEL_531:
    (*(void (**)(void))(v188->__r_.__value_.__r.__words[0] + 8 * v189))();
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v314);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v306);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v176 + 40), &v279);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v314, 0, 1.5836601e190);
  v190 = *(_OWORD *)v314;
  *(_OWORD *)v314 = 0uLL;
  v191 = (std::__shared_weak_count *)v279.__r_.__value_.__l.__size_;
  *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v190;
  if (v191)
  {
    p_shared_owners = (unint64_t *)&v191->__shared_owners_;
    do
      v193 = __ldaxr(p_shared_owners);
    while (__stlxr(v193 - 1, p_shared_owners));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = *(std::__shared_weak_count **)&v314[8];
  if (*(_QWORD *)&v314[8])
  {
    v195 = (unint64_t *)(*(_QWORD *)&v314[8] + 8);
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  v197 = v279.__r_.__value_.__r.__words[0];
  v198 = *(_DWORD *)(v22 + 16);
  v199 = AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Type ()(void)>>();
  v306.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E697BE88;
  LODWORD(v306.__r_.__value_.__r.__words[1]) = v198;
  v307 = &v306;
  memset(v314, 0, sizeof(v314));
  std::__function::__value_func<AMCP::Node_Type ()(void)>::__value_func[abi:ne180100]((uint64_t)v314, (uint64_t)&v306);
  *(_QWORD *)&v314[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Node_Type ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v197, v199, (AMCP *)v314);
  if (*(_QWORD *)&v314[32])
    (*(void (**)(_QWORD, _BYTE *, _QWORD, _QWORD))&v314[32])(0, v314, 0, 0);
  v200 = v307;
  if (v307 == &v306)
  {
    v201 = 4;
    v200 = &v306;
  }
  else
  {
    if (!v307)
      goto LABEL_549;
    v201 = 5;
  }
  (*(void (**)(void))(v200->__r_.__value_.__r.__words[0] + 8 * v201))();
LABEL_549:
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v306, v197);
  v309 = *(const char **)(v197 + 40);
  LODWORD(v310) = *(_DWORD *)(v197 + 48);
  v202 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v204 = v306.__r_.__value_.__l.__size_;
  v203 = v306.__r_.__value_.__r.__words[0];
  *(_OWORD *)&v306.__r_.__value_.__l.__data_ = 0uLL;
  *(_QWORD *)v314 = v203;
  *(_OWORD *)&v314[8] = __PAIR128__(v306.__r_.__value_.__r.__words[2], v204);
  *(_QWORD *)&v314[24] = v307;
  *(_DWORD *)&v314[32] = v308;
  if (v307)
  {
    v205 = *(_QWORD *)(v306.__r_.__value_.__r.__words[2] + 8);
    if ((v204 & (v204 - 1)) != 0)
    {
      if (v205 >= v204)
        v205 %= v204;
    }
    else
    {
      v205 &= v204 - 1;
    }
    *(_QWORD *)(v203 + 8 * v205) = &v314[16];
    v306.__r_.__value_.__r.__words[2] = 0;
    v307 = 0;
  }
  v315 = v309;
  LODWORD(v316) = (_DWORD)v310;
  v321 = 0;
  v206 = (std::string *)operator new(0x40uLL);
  v206->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E697BF18;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)&v206->__r_.__value_.__l.__size_, (uint64_t *)v314);
  v206[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v315;
  LODWORD(v206[2].__r_.__value_.__r.__words[1]) = (_DWORD)v316;
  v321 = v206;
  memset(v280, 0, sizeof(v280));
  v281 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v280, (uint64_t)&v320);
  v281 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v197, v202, (AMCP *)v280);
  if (v281)
    v281(0, (uint64_t)v280, 0, 0);
  v207 = v321;
  if (v321 == &v320)
  {
    v208 = 4;
    v207 = &v320;
    goto LABEL_561;
  }
  if (v321)
  {
    v208 = 5;
LABEL_561:
    (*(void (**)(void))(v207->__r_.__value_.__r.__words[0] + 8 * v208))();
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v314);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v306);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v197 + 40), &v279);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v314, 0, 1.5836601e190);
  v209 = *(_OWORD *)v314;
  *(_OWORD *)v314 = 0uLL;
  v210 = (std::__shared_weak_count *)v279.__r_.__value_.__l.__size_;
  *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v209;
  if (v210)
  {
    v211 = (unint64_t *)&v210->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v213 = *(std::__shared_weak_count **)&v314[8];
  if (*(_QWORD *)&v314[8])
  {
    v214 = (unint64_t *)(*(_QWORD *)&v314[8] + 8);
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = v279.__r_.__value_.__r.__words[0];
  v218 = *(_QWORD *)(v269 + 16);
  v217 = *(_QWORD *)(v269 + 24);
  if (v217)
  {
    v219 = (unint64_t *)(v217 + 16);
    do
      v220 = __ldxr(v219);
    while (__stxr(v220 + 1, v219));
  }
  v221 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v306.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E697BF98;
  v306.__r_.__value_.__l.__size_ = v218;
  v306.__r_.__value_.__r.__words[2] = v217;
  v307 = &v306;
  memset(v314, 0, sizeof(v314));
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v314, (uint64_t)&v306);
  *(_QWORD *)&v314[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v216, v221, (AMCP *)v314);
  if (*(_QWORD *)&v314[32])
    (*(void (**)(_QWORD, _BYTE *, _QWORD, _QWORD))&v314[32])(0, v314, 0, 0);
  v222 = v307;
  if (v307 == &v306)
  {
    v223 = 4;
    v222 = &v306;
    goto LABEL_581;
  }
  if (v307)
  {
    v223 = 5;
LABEL_581:
    (*(void (**)(void))(v222->__r_.__value_.__r.__words[0] + 8 * v223))();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v216);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v216 + 40), &v279);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v314, 0, 1.58366007e190);
  v224 = *(_OWORD *)v314;
  *(_OWORD *)v314 = 0uLL;
  v225 = (std::__shared_weak_count *)v279.__r_.__value_.__l.__size_;
  *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v224;
  if (v225)
  {
    v226 = (unint64_t *)&v225->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  v228 = *(std::__shared_weak_count **)&v314[8];
  if (*(_QWORD *)&v314[8])
  {
    v229 = (unint64_t *)(*(_QWORD *)&v314[8] + 8);
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }
  v231 = v279.__r_.__value_.__r.__words[0];
  v232 = AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(void)>>();
  v306.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E697C018;
  v306.__r_.__value_.__l.__size_ = v269;
  v307 = &v306;
  memset(v314, 0, sizeof(v314));
  std::__function::__value_func<std::optional<CA::TimeStamp> ()(void)>::__value_func[abi:ne180100]((uint64_t)v314, (uint64_t)&v306);
  *(_QWORD *)&v314[32] = AMCP::Implementation::In_Place_Storage<std::function<std::optional<CA::TimeStamp> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v231, v232, (AMCP *)v314);
  if (*(_QWORD *)&v314[32])
    (*(void (**)(_QWORD, _BYTE *, _QWORD, _QWORD))&v314[32])(0, v314, 0, 0);
  v233 = v307;
  if (v307 == &v306)
  {
    v234 = 4;
    v233 = &v306;
    goto LABEL_598;
  }
  if (v307)
  {
    v234 = 5;
LABEL_598:
    (*(void (**)(void))(v233->__r_.__value_.__r.__words[0] + 8 * v234))();
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v231 + 40), &v279);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v314, 0, 1.58366012e190);
  v235 = *(_OWORD *)v314;
  *(_OWORD *)v314 = 0uLL;
  v236 = (std::__shared_weak_count *)v279.__r_.__value_.__l.__size_;
  *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v235;
  if (v236)
  {
    v237 = (unint64_t *)&v236->__shared_owners_;
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
  v239 = *(std::__shared_weak_count **)&v314[8];
  if (*(_QWORD *)&v314[8])
  {
    v240 = (unint64_t *)(*(_QWORD *)&v314[8] + 8);
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  v242 = v279.__r_.__value_.__r.__words[0];
  v243 = AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>>();
  v306.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E697C0A8;
  v306.__r_.__value_.__l.__size_ = v269;
  v307 = &v306;
  memset(v314, 0, sizeof(v314));
  std::__function::__value_func<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::__value_func[abi:ne180100]((uint64_t)v314, (uint64_t)&v306);
  *(_QWORD *)&v314[32] = AMCP::Implementation::In_Place_Storage<std::function<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v242, v243, (AMCP *)v314);
  if (*(_QWORD *)&v314[32])
    (*(void (**)(_QWORD, _BYTE *, _QWORD, _QWORD))&v314[32])(0, v314, 0, 0);
  v244 = v307;
  if (v307 == &v306)
  {
    v245 = 4;
    v244 = &v306;
    goto LABEL_615;
  }
  if (v307)
  {
    v245 = 5;
LABEL_615:
    (*(void (**)(void))(v244->__r_.__value_.__r.__words[0] + 8 * v245))();
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v242 + 40), &v279);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v314, 0, 1.5836601e190);
  v246 = *(_OWORD *)v314;
  *(_OWORD *)v314 = 0uLL;
  v247 = (std::__shared_weak_count *)v279.__r_.__value_.__l.__size_;
  *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v246;
  if (v247)
  {
    v248 = (unint64_t *)&v247->__shared_owners_;
    do
      v249 = __ldaxr(v248);
    while (__stlxr(v249 - 1, v248));
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
  }
  v250 = *(std::__shared_weak_count **)&v314[8];
  if (*(_QWORD *)&v314[8])
  {
    v251 = (unint64_t *)(*(_QWORD *)&v314[8] + 8);
    do
      v252 = __ldaxr(v251);
    while (__stlxr(v252 - 1, v251));
    if (!v252)
    {
      ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
      std::__shared_weak_count::__release_weak(v250);
    }
  }
  v253 = v279.__r_.__value_.__r.__words[0];
  v254 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  v306.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E697C138;
  v306.__r_.__value_.__l.__size_ = v269;
  v307 = &v306;
  memset(v314, 0, sizeof(v314));
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)v314, (uint64_t)&v306);
  *(_QWORD *)&v314[32] = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v253, v254, (AMCP *)v314);
  if (*(_QWORD *)&v314[32])
    (*(void (**)(_QWORD, _BYTE *, _QWORD, _QWORD))&v314[32])(0, v314, 0, 0);
  v255 = v307;
  if (v307 == &v306)
  {
    v256 = 4;
    v255 = &v306;
    goto LABEL_632;
  }
  if (v307)
  {
    v256 = 5;
LABEL_632:
    (*(void (**)(void))(v255->__r_.__value_.__r.__words[0] + 8 * v256))();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v253);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v253 + 40), &v279);
  v257 = (std::__shared_weak_count *)v279.__r_.__value_.__l.__size_;
  if (v279.__r_.__value_.__l.__size_)
  {
    v258 = (unint64_t *)(v279.__r_.__value_.__l.__size_ + 8);
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
  v260 = (unint64_t *)&v270->__shared_owners_;
  do
    v261 = __ldaxr(v260);
  while (__stlxr(v261 - 1, v260));
  if (!v261)
  {
    ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
    std::__shared_weak_count::__release_weak(v270);
  }
}

void sub_1B59CA990(_Unwind_Exception *a1, int a2)
{
  void *v2;

  if (a2)
  {
    operator delete(v2);
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  std::string *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  std::string *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  std::string v34;
  __int128 v35;
  __int128 v36;
  void (*v37)(int, uint64_t, AMCP::Thing *, uint64_t *);
  std::string v38;
  _BYTE v39[24];
  _BYTE *v40;
  uint64_t v41;
  double v42;
  int v43;
  std::string v44;
  _BYTE v45[24];
  _BYTE *v46;
  uint64_t v47;
  double v48;
  int v49;
  _BYTE v50[24];
  _BYTE *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a4 + 47) < 0)
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(a4 + 24), *(_QWORD *)(a4 + 32));
  else
    v34 = *(std::string *)(a4 + 24);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v32, *(_DWORD *)(a2 + 8), *(double *)a2);
  v9 = v32;
  v10 = SHIBYTE(v34.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v38, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  else
    v38 = v34;
  v11 = v39;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v39, a5);
  v41 = a3;
  v42 = *(double *)a2;
  v43 = *(_DWORD *)(a2 + 8);
  v12 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()>)>>();
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v44, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  else
    v44 = v38;
  v13 = v45;
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)v45, (uint64_t)v39);
  v47 = v41;
  v48 = v42;
  v49 = v43;
  v51 = 0;
  v14 = (char *)operator new(0x58uLL);
  *(_QWORD *)v14 = off_1E697B0D8;
  v15 = (std::string *)(v14 + 8);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v15, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
    *((_QWORD *)v14 + 3) = *((_QWORD *)&v44.__r_.__value_.__l + 2);
  }
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v14 + 32), (uint64_t)v45);
  *((_QWORD *)v14 + 8) = v47;
  *((double *)v14 + 9) = v48;
  *((_DWORD *)v14 + 20) = v49;
  v51 = v14;
  v35 = 0u;
  v36 = 0u;
  v37 = 0;
  std::__function::__value_func<void ()(std::function<void ()>)>::__value_func[abi:ne180100]((uint64_t)&v35, (uint64_t)v50);
  v37 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()>)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v9, v12, (AMCP *)&v35);
  if (v37)
    v37(0, (uint64_t)&v35, 0, 0);
  v16 = v51;
  if (v51 == v50)
  {
    v17 = 4;
    v16 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_20;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_20:
  if (v46 == v45)
  {
    v18 = 4;
  }
  else
  {
    if (!v46)
      goto LABEL_25;
    v18 = 5;
    v13 = v46;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v18))(v13);
LABEL_25:
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (v40 == v39)
  {
    v19 = 4;
  }
  else
  {
    if (!v40)
      goto LABEL_32;
    v19 = 5;
    v11 = v40;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v19))(v11);
LABEL_32:
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v38.__r_.__value_.__l.__data_);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_34;
  }
  else if ((v10 & 0x80000000) == 0)
  {
LABEL_34:
    v38 = v34;
    goto LABEL_37;
  }
  std::string::__init_copy_ctor_external(&v38, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
LABEL_37:
  v20 = v39;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v39, a5);
  v41 = a3;
  v21 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()> ()(void)>>();
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v44, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  else
    v44 = v38;
  v22 = v45;
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)v45, (uint64_t)v39);
  v47 = v41;
  v51 = 0;
  v23 = operator new(0x48uLL);
  *v23 = off_1E697B168;
  v24 = (std::string *)(v23 + 1);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v24, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
    v23[3] = *((_QWORD *)&v44.__r_.__value_.__l + 2);
  }
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v23 + 4), (uint64_t)v45);
  v23[8] = v47;
  v51 = v23;
  v35 = 0u;
  v36 = 0u;
  v37 = 0;
  std::__function::__value_func<std::function<void ()> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v35, (uint64_t)v50);
  v37 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v9, v21, (AMCP *)&v35);
  if (v37)
    v37(0, (uint64_t)&v35, 0, 0);
  v25 = v51;
  if (v51 == v50)
  {
    v26 = 4;
    v25 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_50;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_50:
  if (v46 == v45)
  {
    v27 = 4;
  }
  else
  {
    if (!v46)
      goto LABEL_55;
    v27 = 5;
    v22 = v46;
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v27))(v22);
LABEL_55:
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (v40 == v39)
  {
    v28 = 4;
  }
  else
  {
    if (!v40)
      goto LABEL_62;
    v28 = 5;
    v20 = v40;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v28))(v20);
LABEL_62:
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)(v9 + 40), &v32);
  v29 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
}

void sub_1B59CB464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  if (a2)
  {
    operator delete(v29);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  std::string *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  std::string *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  std::string v34;
  __int128 v35;
  __int128 v36;
  void (*v37)(int, uint64_t, AMCP::Thing *, uint64_t *);
  std::string v38;
  _BYTE v39[24];
  _BYTE *v40;
  uint64_t v41;
  double v42;
  int v43;
  std::string v44;
  _BYTE v45[24];
  _BYTE *v46;
  uint64_t v47;
  double v48;
  int v49;
  _BYTE v50[24];
  _BYTE *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a4 + 47) < 0)
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(a4 + 24), *(_QWORD *)(a4 + 32));
  else
    v34 = *(std::string *)(a4 + 24);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v32, *(_DWORD *)(a2 + 8), *(double *)a2);
  v9 = v32;
  v10 = SHIBYTE(v34.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v38, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  else
    v38 = v34;
  v11 = v39;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v39, a5);
  v41 = a3;
  v42 = *(double *)a2;
  v43 = *(_DWORD *)(a2 + 8);
  v12 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>>();
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v44, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  else
    v44 = v38;
  v13 = v45;
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)v45, (uint64_t)v39);
  v47 = v41;
  v48 = v42;
  v49 = v43;
  v51 = 0;
  v14 = (char *)operator new(0x58uLL);
  *(_QWORD *)v14 = off_1E697B5B8;
  v15 = (std::string *)(v14 + 8);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v15, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
    *((_QWORD *)v14 + 3) = *((_QWORD *)&v44.__r_.__value_.__l + 2);
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v14 + 32), (uint64_t)v45);
  *((_QWORD *)v14 + 8) = v47;
  *((double *)v14 + 9) = v48;
  *((_DWORD *)v14 + 20) = v49;
  v51 = v14;
  v35 = 0u;
  v36 = 0u;
  v37 = 0;
  std::__function::__value_func<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::__value_func[abi:ne180100]((uint64_t)&v35, (uint64_t)v50);
  v37 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v9, v12, (AMCP *)&v35);
  if (v37)
    v37(0, (uint64_t)&v35, 0, 0);
  v16 = v51;
  if (v51 == v50)
  {
    v17 = 4;
    v16 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_20;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_20:
  if (v46 == v45)
  {
    v18 = 4;
  }
  else
  {
    if (!v46)
      goto LABEL_25;
    v18 = 5;
    v13 = v46;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v18))(v13);
LABEL_25:
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (v40 == v39)
  {
    v19 = 4;
  }
  else
  {
    if (!v40)
      goto LABEL_32;
    v19 = 5;
    v11 = v40;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v19))(v11);
LABEL_32:
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v38.__r_.__value_.__l.__data_);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_34;
  }
  else if ((v10 & 0x80000000) == 0)
  {
LABEL_34:
    v38 = v34;
    goto LABEL_37;
  }
  std::string::__init_copy_ctor_external(&v38, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
LABEL_37:
  v20 = v39;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v39, a5);
  v41 = a3;
  v21 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>>();
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v44, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  else
    v44 = v38;
  v22 = v45;
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)v45, (uint64_t)v39);
  v47 = v41;
  v51 = 0;
  v23 = operator new(0x48uLL);
  *v23 = off_1E697B648;
  v24 = (std::string *)(v23 + 1);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v24, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
    v23[3] = *((_QWORD *)&v44.__r_.__value_.__l + 2);
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v23 + 4), (uint64_t)v45);
  v23[8] = v47;
  v51 = v23;
  v35 = 0u;
  v36 = 0u;
  v37 = 0;
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v35, (uint64_t)v50);
  v37 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v9, v21, (AMCP *)&v35);
  if (v37)
    v37(0, (uint64_t)&v35, 0, 0);
  v25 = v51;
  if (v51 == v50)
  {
    v26 = 4;
    v25 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_50;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_50:
  if (v46 == v45)
  {
    v27 = 4;
  }
  else
  {
    if (!v46)
      goto LABEL_55;
    v27 = 5;
    v22 = v46;
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v27))(v22);
LABEL_55:
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (v40 == v39)
  {
    v28 = 4;
  }
  else
  {
    if (!v40)
      goto LABEL_62;
    v28 = 5;
    v20 = v40;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v28))(v20);
LABEL_62:
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)(v9 + 40), &v32);
  v29 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
}

void sub_1B59CBA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  if (a2)
  {
    operator delete(v29);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<AMCP::Node_Description ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<AMCP::Node_Description ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Node_Description ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<AMCP::Node_Description ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Node_Description ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Description ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Description ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Type ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[510];
}

uint64_t std::__function::__value_func<AMCP::Node_Type ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<AMCP::Node_Type ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Node_Type ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<AMCP::Node_Type ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Node_Type ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Type ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Type ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(void)>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[18];
}

uint64_t std::__function::__value_func<std::optional<CA::TimeStamp> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::optional<CA::TimeStamp> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::optional<CA::TimeStamp> ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::optional<CA::TimeStamp> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::optional<CA::TimeStamp> ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::__function::__value_func<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E697C138;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E697C138;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_mutex_base *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *__p[2];
  char v20;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(v1 + 24);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (v5)
  {
    v7 = *(_QWORD *)(v5 + 144);
    v6 = *(std::__shared_weak_count **)(v5 + 152);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    if (!v7)
      goto LABEL_18;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v7 + 24))(__p, v7);
    v10 = (std::__shared_mutex_base *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 32) + 16))(*(_QWORD *)(v1 + 32));
    v21[0] = &off_1E697AE28;
    v21[1] = __p;
    v22 = v21;
    LODWORD(v1) = AMCP::Core::Broker::fetch_first_object_id_if (v10, (uint64_t)v21);
    v11 = v22;
    if (v22 == v21)
    {
      v12 = 4;
      v11 = v21;
    }
    else
    {
      if (!v22)
        goto LABEL_16;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_16:
    if (v20 < 0)
      operator delete(__p[0]);
LABEL_18:
    if (v6)
    {
      v14 = (unint64_t *)&v6->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (v7)
      v13 = v1;
    else
      v13 = 0;
    goto LABEL_26;
  }
  v13 = 0;
LABEL_26:
  v16 = (unint64_t *)&v4->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v13;
}

void sub_1B59CC4FC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = (unint64_t *)&v1->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE4$_18"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::Node::get_clock_id(void)::$_0,std::allocator<AMCP::IO_Core::Node::get_clock_id(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::get_clock_id(void)::$_0,std::allocator<AMCP::IO_Core::Node::get_clock_id(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E697AE28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::get_clock_id(void)::$_0,std::allocator<AMCP::IO_Core::Node::get_clock_id(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E697AE28;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<AMCP::IO_Core::Node::get_clock_id(void)::$_0,std::allocator<AMCP::IO_Core::Node::get_clock_id(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required;
  const __CFString *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int v10;
  void **v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;
  _BOOL8 v19;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v23;
  const __CFString *v24;

  simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  if (AMCP::is_base_of((AMCP *)0x61636C6B, simple_required))
  {
    AMCP::Core::Core::get_simple_required_property<1969841184u>(&v24, *a2);
    v5 = v24;
    if (!v24)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v6 = *(unsigned __int8 **)(a1 + 8);
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v24);
    v7 = v6[23];
    if ((v7 & 0x80u) == 0)
      v8 = (void *)v6[23];
    else
      v8 = (void *)*((_QWORD *)v6 + 1);
    v9 = v23;
    v10 = (char)v23;
    if ((v23 & 0x80u) != 0)
      v9 = (unint64_t)__p[1];
    if (v8 == (void *)v9)
    {
      if ((v23 & 0x80u) == 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      if ((v7 & 0x80) != 0)
      {
        v19 = memcmp(*(const void **)v6, v11, *((_QWORD *)v6 + 1)) == 0;
      }
      else
      {
        if (!v6[23])
        {
          v19 = 1;
          if (((char)v23 & 0x80000000) == 0)
            goto LABEL_27;
          goto LABEL_26;
        }
        v12 = v7 - 1;
        do
        {
          v14 = *v6++;
          v13 = v14;
          v16 = *(unsigned __int8 *)v11;
          v11 = (void **)((char *)v11 + 1);
          v15 = v16;
          v18 = v12-- != 0;
          v19 = v13 == v15;
        }
        while (v13 == v15 && v18);
      }
      if (v10 < 0)
LABEL_26:
        operator delete(__p[0]);
    }
    else
    {
      v19 = 0;
      if ((char)v23 < 0)
        goto LABEL_26;
    }
LABEL_27:
    CFRelease(v5);
    return v19;
  }
  return 0;
}

void sub_1B59CC770(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::get_clock_id(void)::$_0,std::allocator<AMCP::IO_Core::Node::get_clock_id(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK4AMCP7IO_Core4Node12get_clock_idEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::get_clock_id(void)::$_0,std::allocator<AMCP::IO_Core::Node::get_clock_id(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17>,std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17>,std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E697C0A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17>,std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E697C0A8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17>,std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __n128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  __int128 v37;
  __int128 v38;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(v4 + 24);
  if (!v5 || (v6 = *a2, v7 = a2[1], v8 = *((_DWORD *)a2 + 14), (v9 = std::__shared_weak_count::lock(v5)) == 0))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 64) = 0;
    return;
  }
  v10 = v9;
  v11 = *(_QWORD *)(v4 + 16);
  if (!v11)
  {
    v13 = 0;
    goto LABEL_17;
  }
  v12 = *(__n128 *)(v11 + 144);
  v13 = *(std::__shared_weak_count **)(v11 + 152);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (!v12.n128_u64[0])
    goto LABEL_17;
  v31 = v12;
  if (!(*(unsigned int (**)(unint64_t, __n128))(*(_QWORD *)v12.n128_u64[0] + 120))(v12.n128_u64[0], v12))goto LABEL_17;
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = v31;
  if ((v8 & 1) != 0)
  {
    v34 = v6;
    v33 = 2;
    if ((v8 & 2) == 0)
    {
LABEL_33:
      AMCP::DAL::DAL_Time::validate((AMCP::DAL::DAL_Time *)&v33);
      v22 = v34;
      v18 = v35;
      v20 = (*(double (**)(unint64_t))(*(_QWORD *)v36.n128_u64[0] + 160))(v36.n128_u64[0]);
      v37 = 0u;
      v38 = 0u;
      v19 = 7;
      v21 = (std::__shared_weak_count *)v36.n128_u64[1];
      goto LABEL_34;
    }
    v27 = 3;
LABEL_32:
    v35 = v7;
    v33 = v27;
    goto LABEL_33;
  }
  if ((v8 & 2) != 0)
  {
    v27 = 1;
    goto LABEL_32;
  }
  v18 = 0;
  v37 = 0u;
  v38 = 0u;
  v19 = 0;
  v20 = 0.0;
  v21 = v13;
  v22 = 0;
LABEL_34:
  if (v21)
  {
    v28 = (unint64_t *)&v21->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      v32 = v19;
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      v19 = v32;
    }
  }
  if ((_DWORD)v19)
  {
    *(_QWORD *)a3 = v22;
    *(_QWORD *)(a3 + 8) = v18;
    *(double *)(a3 + 16) = v20;
    v30 = v38;
    *(_OWORD *)(a3 + 24) = v37;
    *(_OWORD *)(a3 + 40) = v30;
    *(_QWORD *)(a3 + 56) = v19;
    *(_BYTE *)(a3 + 64) = 1;
    goto LABEL_18;
  }
LABEL_17:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 64) = 0;
LABEL_18:
  v23 = (unint64_t *)&v10->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
  {
    if (!v13)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v13)
      return;
  }
  v25 = (unint64_t *)&v13->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

void sub_1B59CCA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  v21 = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v16)
  {
    v23 = (unint64_t *)&v16->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17>,std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE4$_17"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17>,std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16>,std::optional<CA::TimeStamp> ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16>,std::optional<CA::TimeStamp> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E697C018;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16>,std::optional<CA::TimeStamp> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E697C018;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16>,std::optional<CA::TimeStamp> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD v18[4];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(v3 + 24);
  if (!v4 || (v5 = std::__shared_weak_count::lock(v4)) == 0)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 64) = 0;
    return;
  }
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 16);
  if (v7)
  {
    v9 = *(_QWORD *)(v7 + 144);
    v8 = *(std::__shared_weak_count **)(v7 + 152);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (v9)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 120))(v9))
      {
        (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v9 + 32))(v18, v9);
        if (*((_QWORD *)&v18[0] + 1))
        {
          v12 = v18[1];
          *(_OWORD *)a2 = v18[0];
          *(_OWORD *)(a2 + 16) = v12;
          v13 = v18[3];
          *(_OWORD *)(a2 + 32) = v18[2];
          *(_OWORD *)(a2 + 48) = v13;
          *(_BYTE *)(a2 + 64) = 1;
          goto LABEL_14;
        }
      }
    }
  }
  else
  {
    v8 = 0;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 64) = 0;
LABEL_14:
  v14 = (unint64_t *)&v6->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v8)
  {
    v16 = (unint64_t *)&v8->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1B59CCD2C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v1)
  {
    v6 = (unint64_t *)&v1->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16>,std::optional<CA::TimeStamp> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE4$_16"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16>,std::optional<CA::TimeStamp> ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E697BF98;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E697BF98;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E697BF98;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E697BF98;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

BOOL std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _BOOL8 v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = *(_QWORD *)(v5 + 104) != 0;
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE4$_15"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E697BF18;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E697BF18;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E697BF18;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B59CD0B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E697BF18;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  double result;

  v3 = AMCP::Core::Operation::call_function<AMCP::Node_Type>((_QWORD *)(a1 + 8));
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = v3;
  *(_QWORD *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<AMCP::Node_Type>::dispatch;
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterINS_9Node_TypeEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation::call_function<AMCP::Node_Type>(_QWORD *a1)
{
  unint64_t v2;
  AMCP::Log::Scope_Registry *v3;
  AMCP::Log::Scope_Registry *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *v10;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *exception;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::runtime_error v21;
  std::runtime_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  const char *v34;
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Type ()(void)>>();
  v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v2);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v13;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 154;
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Node_Type, Argu"
          "ment_Types = <>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = v3;
  if (!*((_QWORD *)v3 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Type ()(void)>>(),
        (v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v9;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 161;
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    v10 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Node_Type, Argu"
          "ment_Types = <>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v10, (uint64_t)buf);
  }
  v5 = *((_QWORD *)v3 + 3);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
}

void sub_1B59CD594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::In_Place_Storage<AMCP::Node_Type>::dispatch(uint64_t result, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, _OWORD *);
  void (*v11)(uint64_t, AMCP::Thing *, _QWORD, _QWORD);
  _DWORD *v12;
  int v13;
  _OWORD v14[2];
  void (*v15)(_QWORD, _OWORD *, _QWORD, _QWORD);
  void (*v16)(uint64_t, AMCP::Thing *, _QWORD, _QWORD);

  switch((int)result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_5;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<AMCP::Node_Type>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<AMCP::Node_Type>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_5:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      v8 = AMCP::Implementation::get_type_marker<AMCP::Node_Type>();
      result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Node_Type>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<AMCP::Node_Type>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(a2 + 32);
      *(_QWORD *)&v14[0] = 0;
      if (v10)
      {
        v10(3, a2, 0, v14);
        v10 = *(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))&v14[0];
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, _OWORD *))v9)
        goto LABEL_20;
      v11 = (void (*)(uint64_t, AMCP::Thing *, _QWORD, _QWORD))*((_QWORD *)a3 + 4);
      v16 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v16);
        v11 = v16;
      }
      if (v11 == (void (*)(uint64_t, AMCP::Thing *, _QWORD, _QWORD))v9)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v14[0] = AMCP::Implementation::get_type_marker<AMCP::Node_Type>();
          v12 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(a2 + 32))(4, a2, 0, v14);
        }
        else
        {
          v12 = 0;
        }
        *(_QWORD *)&v14[0] = AMCP::Implementation::get_type_marker<AMCP::Node_Type>();
        if (*v12 == *(_DWORD *)(*((uint64_t (**)(uint64_t, AMCP::Thing *, _QWORD, _OWORD *))a3 + 4))(4, a3, 0, v14))return 1;
      }
      else
      {
LABEL_20:
        v13 = AMCP::Thing::convert_to<AMCP::Node_Type>(a2);
        if (v13 == AMCP::Thing::convert_to<AMCP::Node_Type>((uint64_t)a3))
          return 1;
      }
      return 0;
    case 6:
      v15 = 0;
      memset(v14, 0, sizeof(v14));
      AMCP::swap((AMCP::Thing *)v14, a3, a3);
      if (v15)
        v15(0, v14, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<AMCP::Node_Type>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return *v1;
}

uint64_t AMCP::Thing::convert_to<AMCP::Node_Type>(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  v2 = AMCP::Implementation::get_type_marker<AMCP::Node_Type>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v2)
  {
    v18 = v2;
    v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<AMCP::Node_Type>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = v2;
  v6 = (unsigned int *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B59CDB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14>,AMCP::Node_Type ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14>,AMCP::Node_Type ()(void)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E697BE88;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14>,AMCP::Node_Type ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E697BE88;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14>,AMCP::Node_Type ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14>,AMCP::Node_Type ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE4$_14"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14>,AMCP::Node_Type ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E697BE08;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E697BE08;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E697BE08;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B59CDCB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E697BE08;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t i;
  _BYTE v4[8];
  void *v5;
  char v6;
  void *__p;
  char v8;
  void **v9;

  AMCP::Core::Operation::call_function<AMCP::Node_Description>((uint64_t)v4, (_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  AMCP::Implementation::Outboard_Storage<AMCP::Node_Description>::construct<AMCP::Node_Description&>(a2, (const AMCP::Node_Description *)v4);
  for (i = 96; i != 48; i -= 24)
  {
    v9 = (void **)&v4[i];
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](&v9);
  }
  if (v8 < 0)
    operator delete(__p);
  if (v6 < 0)
    operator delete(v5);
}

void sub_1B59CDDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t i;

  for (i = 96; i != 48; i -= 24)
  {
    *(_QWORD *)(v23 - 40) = v22 + i;
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 40));
  }
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterINS_16Node_DescriptionEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

AMCP::Node_Description *AMCP::Implementation::Outboard_Storage<AMCP::Node_Description>::construct<AMCP::Node_Description&>(uint64_t a1, const AMCP::Node_Description *a2)
{
  AMCP::Node_Description *v4;
  AMCP::Node_Description *result;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::Outboard_Storage<AMCP::Node_Description>::dispatch;
  v4 = (AMCP::Node_Description *)operator new();
  result = AMCP::Node_Description::Node_Description(v4, a2);
  *(_QWORD *)a1 = v4;
  return result;
}

void sub_1B59CDEC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E50688](v1, 0x1032C40BA2C682ELL);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::Outboard_Storage<AMCP::Node_Description>::dispatch(uint64_t result, uint64_t *a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t *, _QWORD, void **);
  void **v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t i;
  uint64_t j;
  void **v19;
  _DWORD *v20;
  _DWORD *v21;
  void **v22;
  void *v23[2];
  char *v24;
  void **v25;
  void *__p[2];
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30[2];
  __int128 v31;
  void (*v32)(_QWORD, void **, _QWORD, _QWORD);
  void *v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[8];
  void **v38[8];

  switch((int)result)
  {
    case 0:
      goto LABEL_6;
    case 1:
      AMCP::Implementation::Outboard_Storage<AMCP::Node_Description>::construct<AMCP::Node_Description&>(a3, *a2);
      return 0;
    case 2:
      v7 = *a2;
      *a2 = 0;
      v8 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v7;
      if (v8)
        std::default_delete<AMCP::Node_Description>::operator()[abi:ne180100](v8);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::Outboard_Storage<AMCP::Node_Description>::dispatch;
LABEL_6:
      v9 = *a2;
      *a2 = 0;
      if (v9)
        std::default_delete<AMCP::Node_Description>::operator()[abi:ne180100](v9);
      result = 0;
      a2[4] = 0;
      *(_OWORD *)a2 = 0u;
      *((_OWORD *)a2 + 1) = 0u;
      return result;
    case 3:
      v10 = AMCP::Implementation::get_type_marker<AMCP::Node_Description>();
      result = 0;
      *a4 = v10;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Node_Description>())
        return *a2;
      else
        return 0;
    case 5:
      v11 = AMCP::Implementation::get_type_marker<AMCP::Node_Description>();
      v12 = (void (*)(uint64_t, uint64_t *, _QWORD, void **))a2[4];
      v30[0] = 0;
      if (v12)
      {
        v12(3, a2, 0, v30);
        v12 = (void (*)(uint64_t, uint64_t *, _QWORD, void **))v30[0];
      }
      if (v12 != (void (*)(uint64_t, uint64_t *, _QWORD, void **))v11)
        goto LABEL_23;
      v13 = (void **)*((_QWORD *)a3 + 4);
      v22 = 0;
      if (v13)
      {
        ((void (*)(uint64_t, AMCP::Thing *, _QWORD, void ***))v13)(3, a3, 0, &v22);
        v13 = v22;
      }
      if (v13 != (void **)v11)
      {
LABEL_23:
        AMCP::Thing::convert_to<AMCP::Node_Description>((AMCP::Node_Description *)v30, (uint64_t)a2);
        AMCP::Thing::convert_to<AMCP::Node_Description>((AMCP::Node_Description *)&v22, (uint64_t)a3);
        v38[0] = v30;
        v38[1] = &v30[1];
        v38[2] = (void **)&v32;
        v38[3] = (void **)((char *)&v32 + 4);
        v38[4] = v33;
        v38[5] = (void **)&v35;
        v38[6] = (void **)&v36;
        v38[7] = (void **)((char *)&v35 + 4);
        v37[0] = &v22;
        v37[1] = v23;
        v37[2] = &v25;
        v37[3] = (char *)&v25 + 4;
        v37[4] = __p;
        v37[5] = &v28;
        v37[6] = &v29;
        v37[7] = (char *)&v28 + 4;
        v15 = std::__tuple_equal<7ul>::operator()[abi:ne180100]<std::tuple<AMCP::Node_Type const&,std::string const&,AMCP::Node_Thread_Policy const&,AMCP::Node_Buffer_Size_Change_Policy const&,std::string const&,AMCP::Node_Clock_Policy const&,AMCP::Index_Group<std::vector<AMCP::Terminal_Description>,AMCP::Direction> const&,unsigned int const&>,std::tuple<AMCP::Node_Type const&,std::string const&,AMCP::Node_Thread_Policy const&,AMCP::Node_Buffer_Size_Change_Policy const&,std::string const&,AMCP::Node_Clock_Policy const&,AMCP::Index_Group<std::vector<AMCP::Terminal_Description>,AMCP::Direction> const&,unsigned int const&>>((uint64_t)v38, (uint64_t)v37);
        v16 = v15 && HIDWORD(v35) == HIDWORD(v28);
        for (i = 12; i != 6; i -= 3)
        {
          v38[0] = &v23[i - 1];
          std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](v38);
        }
        if (SHIBYTE(v27) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v24) < 0)
          operator delete(v23[0]);
        for (j = 12; j != 6; j -= 3)
        {
          v22 = &v30[j];
          std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](&v22);
        }
        if (SHIBYTE(v34) < 0)
          operator delete(v33[0]);
        if (SHIBYTE(v31) < 0)
        {
          operator delete(v30[1]);
          if (!v16)
            return 0;
        }
        else if (!v16)
        {
          return 0;
        }
        return 1;
      }
      if (a2[4])
      {
        v30[0] = (void *)AMCP::Implementation::get_type_marker<AMCP::Node_Description>();
        v14 = ((uint64_t (*)(uint64_t, uint64_t *, _QWORD, void **))a2[4])(4, a2, 0, v30);
      }
      else
      {
        v14 = 0;
      }
      if (*((_QWORD *)a3 + 4))
      {
        v30[0] = (void *)AMCP::Implementation::get_type_marker<AMCP::Node_Description>();
        v19 = (void **)(*((uint64_t (**)(uint64_t, AMCP::Thing *, _QWORD, void **))a3 + 4))(4, a3, 0, v30);
      }
      else
      {
        v19 = 0;
      }
      v30[0] = (void *)v14;
      v30[1] = (void *)(v14 + 8);
      v20 = (_DWORD *)(v14 + 68);
      *(_QWORD *)&v31 = v14 + 32;
      *((_QWORD *)&v31 + 1) = v14 + 36;
      v32 = (void (*)(_QWORD, void **, _QWORD, _QWORD))(v14 + 40);
      v33[0] = (void *)(v14 + 64);
      v33[1] = (void *)(v14 + 72);
      v34 = v14 + 68;
      v21 = (_DWORD *)v19 + 17;
      v22 = v19;
      v23[0] = v19 + 1;
      v23[1] = v19 + 4;
      v24 = (char *)v19 + 36;
      v25 = v19 + 5;
      __p[0] = v19 + 8;
      __p[1] = v19 + 9;
      v27 = (char *)v19 + 68;
      return std::__tuple_equal<7ul>::operator()[abi:ne180100]<std::tuple<AMCP::Node_Type const&,std::string const&,AMCP::Node_Thread_Policy const&,AMCP::Node_Buffer_Size_Change_Policy const&,std::string const&,AMCP::Node_Clock_Policy const&,AMCP::Index_Group<std::vector<AMCP::Terminal_Description>,AMCP::Direction> const&,unsigned int const&>,std::tuple<AMCP::Node_Type const&,std::string const&,AMCP::Node_Thread_Policy const&,AMCP::Node_Buffer_Size_Change_Policy const&,std::string const&,AMCP::Node_Clock_Policy const&,AMCP::Index_Group<std::vector<AMCP::Terminal_Description>,AMCP::Direction> const&,unsigned int const&>>((uint64_t)v30, (uint64_t)&v22)&& *v20 == *v21;
    case 6:
      v32 = 0;
      *(_OWORD *)v30 = 0u;
      v31 = 0u;
      AMCP::swap((AMCP::Thing *)v30, a3, a3);
      if (v32)
        v32(0, v30, 0, 0);
      return 0;
    default:
      return result;
  }
}

void std::default_delete<AMCP::Node_Description>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  void **v3;

  for (i = 96; i != 48; i -= 24)
  {
    v3 = (void **)(a1 + i);
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E50688);
}

BOOL std::__tuple_equal<7ul>::operator()[abi:ne180100]<std::tuple<AMCP::Node_Type const&,std::string const&,AMCP::Node_Thread_Policy const&,AMCP::Node_Buffer_Size_Change_Policy const&,std::string const&,AMCP::Node_Clock_Policy const&,AMCP::Index_Group<std::vector<AMCP::Terminal_Description>,AMCP::Direction> const&,unsigned int const&>,std::tuple<AMCP::Node_Type const&,std::string const&,AMCP::Node_Thread_Policy const&,AMCP::Node_Buffer_Size_Change_Policy const&,std::string const&,AMCP::Node_Clock_Policy const&,AMCP::Index_Group<std::vector<AMCP::Terminal_Description>,AMCP::Direction> const&,unsigned int const&>>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  char v17;
  unsigned __int8 *v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  _BOOL8 result;
  int v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;

  if (**(_DWORD **)a1 != **(_DWORD **)a2)
    return 0;
  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = *(unsigned __int8 ***)(a2 + 8);
  v6 = v4[23];
  if ((v6 & 0x80u) == 0)
    v7 = (unsigned __int8 *)v4[23];
  else
    v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
  v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
  v9 = (char)v8;
  if ((char)v8 < 0)
    v8 = v5[1];
  if (v7 != v8)
    return 0;
  if (v9 >= 0)
    v10 = *(unsigned __int8 **)(a2 + 8);
  else
    v10 = *v5;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
      return 0;
  }
  else if (v4[23])
  {
    v11 = v6 - 1;
    do
    {
      v13 = *v4++;
      v12 = v13;
      v15 = *v10++;
      v14 = v15;
      v16 = v11-- != 0;
      v17 = v16;
    }
    while (v12 == v14 && (v17 & 1) != 0);
    if (v12 != v14)
      return 0;
  }
  if (**(_DWORD **)(a1 + 16) != **(_DWORD **)(a2 + 16) || **(_DWORD **)(a1 + 24) != **(_DWORD **)(a2 + 24))
    return 0;
  v18 = *(unsigned __int8 **)(a1 + 32);
  v19 = *(unsigned __int8 ***)(a2 + 32);
  v20 = v18[23];
  if ((v20 & 0x80u) == 0)
    v21 = (unsigned __int8 *)v18[23];
  else
    v21 = (unsigned __int8 *)*((_QWORD *)v18 + 1);
  v22 = (unsigned __int8 *)*((unsigned __int8 *)v19 + 23);
  v23 = (char)v22;
  if ((char)v22 < 0)
    v22 = v19[1];
  if (v21 != v22)
    return 0;
  if (v23 >= 0)
    v24 = *(unsigned __int8 **)(a2 + 32);
  else
    v24 = *v19;
  if ((v20 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v18, v24, *((_QWORD *)v18 + 1)))
      return 0;
  }
  else if (v18[23])
  {
    v25 = v20 - 1;
    do
    {
      v27 = *v18++;
      v26 = v27;
      v29 = *v24++;
      v28 = v29;
      v16 = v25-- != 0;
      v30 = v16;
    }
    while (v26 == v28 && (v30 & 1) != 0);
    if (v26 != v28)
      return 0;
  }
  if (**(_DWORD **)(a1 + 40) == **(_DWORD **)(a2 + 40))
  {
    v31 = 0;
    v32 = *(_QWORD *)(a1 + 48);
    v33 = *(_QWORD **)(a2 + 48);
    while (1)
    {
      v34 = (uint64_t *)(v32 + 24 * v31);
      v36 = *v34;
      v35 = v34[1];
      v37 = *v33;
      if (v35 - *v34 != v33[1] - *v33)
        break;
      if (v36 != v35)
      {
        v48 = v32;
        v49 = v31;
        v47 = v33;
LABEL_49:
        v38 = v37 + 40;
        if (*(double *)v36 == *(double *)v37
          && *(_DWORD *)(v36 + 8) == *(_DWORD *)(v37 + 8)
          && *(_DWORD *)(v36 + 12) == *(_DWORD *)(v37 + 12)
          && *(_DWORD *)(v36 + 16) == *(_DWORD *)(v37 + 16)
          && *(_DWORD *)(v36 + 20) == *(_DWORD *)(v37 + 20)
          && *(_DWORD *)(v36 + 24) == *(_DWORD *)(v37 + 24)
          && *(_DWORD *)(v36 + 28) == *(_DWORD *)(v37 + 28)
          && *(_DWORD *)(v36 + 32) == *(_DWORD *)(v37 + 32))
        {
          v39 = 0;
          while (1)
          {
            v40 = v36 + 40 + 24 * v39;
            v41 = *(unsigned __int8 **)v40;
            v42 = *(unsigned __int8 **)(v40 + 8);
            v43 = *(unsigned __int8 **)v38;
            if (&v42[-*(_QWORD *)v40] != (unsigned __int8 *)(*(_QWORD *)(v38 + 8) - *(_QWORD *)v38))
              break;
            if (v41 == v42)
            {
              result = 1;
            }
            else
            {
              do
              {
                result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v41, v43);
                if (!result)
                  break;
                v41 += 24;
                v43 += 24;
              }
              while (v41 != v42);
            }
            if (result)
            {
              ++v39;
              v38 += 24;
              if (v39 != 2)
                continue;
            }
            if (!result)
              return result;
            v32 = v48;
            v31 = v49;
            v33 = v47;
            if (*(_DWORD *)(v36 + 88) != *(_DWORD *)(v37 + 88) || *(_DWORD *)(v36 + 92) != *(_DWORD *)(v37 + 92))
              return 0;
            v45 = *(unsigned __int8 *)(v36 + 96);
            v46 = *(unsigned __int8 *)(v37 + 96);
            result = v45 == v46;
            if (v45 == v46)
            {
              v36 += 104;
              v37 += 104;
              if (v36 != v35)
                goto LABEL_49;
            }
            goto LABEL_73;
          }
        }
        return 0;
      }
      result = 1;
LABEL_73:
      if (result)
      {
        ++v31;
        v33 += 3;
        if (v31 != 2)
          continue;
      }
      return result;
    }
  }
  return 0;
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13>,AMCP::Node_Description ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E697BD78;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13>,AMCP::Node_Description ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E697BD78;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13>,AMCP::Node_Description ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E697BD78;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13>,AMCP::Node_Description ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E697BD78;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13>,AMCP::Node_Description ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13>,AMCP::Node_Description ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13>,AMCP::Node_Description ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t i;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  uint64_t v21;
  std::string v22;
  void **v23;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4 || (v19 = std::__shared_weak_count::lock(v4)) == 0)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    v7 = v19;
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(&v20, "");
    *(_DWORD *)a2 = 0;
    *(_OWORD *)(a2 + 8) = v20;
    *(_QWORD *)(a2 + 24) = v21;
    v20 = 0uLL;
    v21 = 0;
    *(_QWORD *)(a2 + 32) = 0x100000000;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    if (!v7)
      return;
    goto LABEL_21;
  }
  v6 = *(_DWORD *)(v5 + 16);
  if (*(char *)(v5 + 47) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(v5 + 24), *(_QWORD *)(v5 + 32));
  else
    v22 = *(std::string *)(v5 + 24);
  *(_DWORD *)a2 = v6;
  *(std::string *)(a2 + 8) = v22;
  memset(&v22, 0, sizeof(v22));
  *(_QWORD *)(a2 + 32) = 0x100000000;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  if ((v6 & 0xFFFFFFFE) == 2)
    *(_DWORD *)(a2 + 64) = 2;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v5 + 48);
  std::string::operator=((std::string *)(a2 + 40), (const std::string *)(v5 + 112));
  v8 = 0;
  v9 = 0;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(v5 + 136);
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(v5 + 160);
  v10 = v5 + 56;
  do
  {
    v11 = v8;
    v12 = (uint64_t *)(v10 + 24 * v9);
    v13 = *v12;
    v14 = v12[1];
    if (*v12 != v14)
    {
      v15 = (uint64_t *)(a2 + 72 + 24 * v9);
      do
      {
        AMCP::Graph::Terminal::get_description((AMCP::Graph::Terminal *)&v20, v13);
        std::vector<AMCP::Terminal_Description>::push_back[abi:ne180100](v15, &v20);
        for (i = 64; i != 16; i -= 24)
        {
          v23 = (void **)((char *)&v20 + i);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v23);
        }
        v13 += 112;
      }
      while (v13 != v14);
    }
    v8 = 1;
    v9 = 1;
  }
  while ((v11 & 1) == 0);
  v7 = v19;
LABEL_21:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1B59CE9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, char a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  p_shared_owners = (unint64_t *)&a9->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
    std::__shared_weak_count::__release_weak(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13>,AMCP::Node_Description ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE4$_13"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13>,AMCP::Node_Description ()(void)>::target_type()
{
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[12];
}

uint64_t std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697BC58;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697BC58;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = off_1E697BC58;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1B59CEE74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E697BC58;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(a2 + 8), (__int128 *)(a1 + 8));
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(&v9, *(_QWORD *)(a1 + 64), a1 + 8);
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, v9);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a2, v5);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1B59CEF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFyyRyEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSD_4NodeEEENS3_IFRT_RNSD_9Node_ProcEEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::target_type()
{
}

void std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
  return this;
}

void sub_1B59CF0C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[500];
}

uint64_t std::__function::__value_func<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697BBC8;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697BBC8;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = off_1E697BBC8;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1B59CF44C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E697BBC8;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1} const&,0ul>((std::string *)(a2 + 8), (__int128 *)(a1 + 8));
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  _DWORD v18[6];
  _DWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(&v16, *(_QWORD *)(a1 + 64), a1 + 8);
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    goto LABEL_23;
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, v16);
  v6 = (_QWORD *)v5[3];
  v5[3] = 0;
  if (v6 == v5)
  {
    v7 = 4;
    v6 = v5;
  }
  else
  {
    if (!v6)
      goto LABEL_7;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_7:
  std::function<unsigned long long ()(unsigned long long,unsigned long long &)>::operator=(v5, a2);
  v8 = *(_DWORD *)(a1 + 72);
  if (v8 != 1852074351)
  {
    if (v8 != 1919247212)
      goto LABEL_17;
    v18[0] = 0;
    v9 = *(_QWORD *)(v16 + 152);
    if (v9)
    {
      (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v9 + 48))(v9, v18);
      goto LABEL_17;
    }
LABEL_23:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v10 = *(_QWORD *)(v16 + 576);
  if (v10)
  {
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v18, v16 + 224);
    AMCP::Graph::Call_Audio_IO_Proc::update_proc(v10, (uint64_t)v18);
    v11 = v19;
    if (v19 == v18)
    {
      v12 = 4;
      v11 = v18;
    }
    else
    {
      if (!v19)
        goto LABEL_17;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
LABEL_17:
  v13 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1B59CF654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFyyRyEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSD_4NodeEEENS3_IFRT_RNSD_9Node_ProcEEEEEUlRKS6_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::target_type()
{
}

_QWORD *std::function<unsigned long long ()(unsigned long long,unsigned long long &)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B59CF918(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1} const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
  this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  return this;
}

void sub_1B59CF994(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697BCE8;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697BCE8;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 480;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE4$_12"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long)> ()(void)>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[10];
}

uint64_t std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::function<unsigned long long ()(unsigned long long)> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<unsigned long long ()(unsigned long long)> ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<unsigned long long ()(unsigned long long)> ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long)> ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long)> ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697BAA8;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697BAA8;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = off_1E697BAA8;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1B59CFE20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E697BAA8;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(a2 + 8), (__int128 *)(a1 + 8));
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(&v9, *(_QWORD *)(a1 + 64), a1 + 8);
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, v9);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a2, v5);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1B59CFF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFyyEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSC_4NodeEEENS3_IFRT_RNSC_9Node_ProcEEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::target_type()
{
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
  return this;
}

void sub_1B59D000C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long)>)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[498];
}

uint64_t std::__function::__value_func<void ()(std::function<unsigned long long ()(unsigned long long)>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<unsigned long long ()(unsigned long long)>)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<unsigned long long ()(unsigned long long)>)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(std::function<unsigned long long ()(unsigned long long)>)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<unsigned long long ()(unsigned long long)>)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long)>)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long)>)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long)>)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697BA18;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long)>)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697BA18;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long)>)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = off_1E697BA18;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1B59D0394(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long)>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E697BA18;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1} const&,0ul>((std::string *)(a2 + 8), (__int128 *)(a1 + 8));
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long)>)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long)>)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long)>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  _DWORD v18[6];
  _DWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(&v16, *(_QWORD *)(a1 + 64), a1 + 8);
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    goto LABEL_23;
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, v16);
  v6 = (_QWORD *)v5[3];
  v5[3] = 0;
  if (v6 == v5)
  {
    v7 = 4;
    v6 = v5;
  }
  else
  {
    if (!v6)
      goto LABEL_7;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_7:
  std::function<unsigned long long ()(unsigned long long)>::operator=(v5, a2);
  v8 = *(_DWORD *)(a1 + 72);
  if (v8 != 1852074351)
  {
    if (v8 != 1919247212)
      goto LABEL_17;
    v18[0] = 0;
    v9 = *(_QWORD *)(v16 + 152);
    if (v9)
    {
      (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v9 + 48))(v9, v18);
      goto LABEL_17;
    }
LABEL_23:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v10 = *(_QWORD *)(v16 + 576);
  if (v10)
  {
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v18, v16 + 224);
    AMCP::Graph::Call_Audio_IO_Proc::update_proc(v10, (uint64_t)v18);
    v11 = v19;
    if (v19 == v18)
    {
      v12 = 4;
      v11 = v18;
    }
    else
    {
      if (!v19)
        goto LABEL_17;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
LABEL_17:
  v13 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1B59D059C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long)>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFyyEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSC_4NodeEEENS3_IFRT_RNSC_9Node_ProcEEEEEUlRKS5_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long)>)>::target_type()
{
}

_QWORD *std::function<unsigned long long ()(unsigned long long)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<unsigned long long ()(unsigned long long)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::__function::__value_func<unsigned long long ()(unsigned long long)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B59D0860(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1} const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
  this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  return this;
}

void sub_1B59D08DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11>,std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11>,std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697BB38;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11>,std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697BB38;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11>,std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 448;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11>,std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE4$_11"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11>,std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::function<long long ()(void)> ()(void)>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[16];
}

uint64_t std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__function::__value_func<std::function<long long ()(void)> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::function<long long ()(void)> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<long long ()(void)> ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::function<long long ()(void)> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<long long ()(void)> ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<std::function<long long ()(void)> ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::function<long long ()(void)> ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697B8F8;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697B8F8;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = off_1E697B8F8;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1B59D0D68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E697B8F8;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(a2 + 8), (__int128 *)(a1 + 8));
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(&v9, *(_QWORD *)(a1 + 64), a1 + 8);
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, v9);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a2, v5);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1B59D0E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFxvEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSC_4NodeEEENS3_IFRT_RNSC_9Node_ProcEEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::target_type()
{
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
  return this;
}

void sub_1B59D0F54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(std::function<long long ()(void)>)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[504];
}

uint64_t std::__function::__value_func<void ()(std::function<long long ()(void)>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<long long ()(void)>)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<long long ()(void)>)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(std::function<long long ()(void)>)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<long long ()(void)>)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<long long ()(void)>)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(std::function<long long ()(void)>)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1}>,void ()(std::function<long long ()(void)>)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697B868;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1}>,void ()(std::function<long long ()(void)>)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697B868;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1}>,void ()(std::function<long long ()(void)>)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = off_1E697B868;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1B59D12DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1}>,void ()(std::function<long long ()(void)>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E697B868;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1} const&,0ul>((std::string *)(a2 + 8), (__int128 *)(a1 + 8));
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1}>,void ()(std::function<long long ()(void)>)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1}>,void ()(std::function<long long ()(void)>)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1}>,void ()(std::function<long long ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  _DWORD v18[6];
  _DWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(&v16, *(_QWORD *)(a1 + 64), a1 + 8);
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    goto LABEL_23;
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, v16);
  v6 = (_QWORD *)v5[3];
  v5[3] = 0;
  if (v6 == v5)
  {
    v7 = 4;
    v6 = v5;
  }
  else
  {
    if (!v6)
      goto LABEL_7;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_7:
  std::function<long long ()(void)>::operator=(v5, a2);
  v8 = *(_DWORD *)(a1 + 72);
  if (v8 != 1852074351)
  {
    if (v8 != 1919247212)
      goto LABEL_17;
    v18[0] = 0;
    v9 = *(_QWORD *)(v16 + 152);
    if (v9)
    {
      (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v9 + 48))(v9, v18);
      goto LABEL_17;
    }
LABEL_23:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v10 = *(_QWORD *)(v16 + 576);
  if (v10)
  {
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v18, v16 + 224);
    AMCP::Graph::Call_Audio_IO_Proc::update_proc(v10, (uint64_t)v18);
    v11 = v19;
    if (v19 == v18)
    {
      v12 = 4;
      v11 = v18;
    }
    else
    {
      if (!v19)
        goto LABEL_17;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
LABEL_17:
  v13 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1B59D14E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1}>,void ()(std::function<long long ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFxvEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSC_4NodeEEENS3_IFRT_RNSC_9Node_ProcEEEEEUlRKS5_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1}>,void ()(std::function<long long ()(void)>)>::target_type()
{
}

_QWORD *std::function<long long ()(void)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<long long ()(void)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::__function::__value_func<long long ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B59D17A8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1} const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
  this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  return this;
}

void sub_1B59D1824(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10>,std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10>,std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697B988;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10>,std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697B988;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10>,std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 384;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10>,std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE4$_10"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10>,std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697B7E8;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697B7E8;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 320;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE3$_9"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697B768;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697B768;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 256;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE3$_8"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[14];
}

uint64_t std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697B648;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697B648;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = off_1E697B648;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1B59D1DF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E697B648;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(a2 + 8), (__int128 *)(a1 + 8));
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(&v9, *(_QWORD *)(a1 + 64), a1 + 8);
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, v9);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a2, v5);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1B59D1EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFvjRKNS_15Proc_Cycle_InfoEEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSF_4NodeEEENS3_IFRT_RNSF_9Node_ProcEEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::target_type()
{
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
  return this;
}

void sub_1B59D1FDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[502];
}

uint64_t std::__function::__value_func<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697B5B8;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697B5B8;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = off_1E697B5B8;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1B59D2364(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E697B5B8;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1} const&,0ul>((std::string *)(a2 + 8), (__int128 *)(a1 + 8));
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  _DWORD v18[6];
  _DWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(&v16, *(_QWORD *)(a1 + 64), a1 + 8);
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    goto LABEL_23;
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, v16);
  v6 = (_QWORD *)v5[3];
  v5[3] = 0;
  if (v6 == v5)
  {
    v7 = 4;
    v6 = v5;
  }
  else
  {
    if (!v6)
      goto LABEL_7;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_7:
  std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::operator=(v5, a2);
  v8 = *(_DWORD *)(a1 + 72);
  if (v8 != 1852074351)
  {
    if (v8 != 1919247212)
      goto LABEL_17;
    v18[0] = 0;
    v9 = *(_QWORD *)(v16 + 152);
    if (v9)
    {
      (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v9 + 48))(v9, v18);
      goto LABEL_17;
    }
LABEL_23:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v10 = *(_QWORD *)(v16 + 576);
  if (v10)
  {
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v18, v16 + 224);
    AMCP::Graph::Call_Audio_IO_Proc::update_proc(v10, (uint64_t)v18);
    v11 = v19;
    if (v19 == v18)
    {
      v12 = 4;
      v11 = v18;
    }
    else
    {
      if (!v19)
        goto LABEL_17;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
LABEL_17:
  v13 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1B59D256C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFvjRKNS_15Proc_Cycle_InfoEEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSF_4NodeEEENS3_IFRT_RNSF_9Node_ProcEEEEEUlRKS8_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::target_type()
{
}

_QWORD *std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B59D2830(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1} const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
  this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  return this;
}

void sub_1B59D28AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697B6D8;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697B6D8;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 192;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE3$_7"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697B538;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697B538;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 288;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE3$_6"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697B4B8;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697B4B8;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 160;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE3$_5"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697B438;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697B438;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 128;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::function<void ()(void)> ()(void)>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[22];
}

uint64_t std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__function::__value_func<std::function<void ()(void)> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(void)> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(void)> ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::function<void ()(void)> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(void)> ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(void)> ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::function<void ()(void)> ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697B318;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697B318;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = off_1E697B318;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1B59D2F18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E697B318;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(a2 + 8), (__int128 *)(a1 + 8));
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(&v9, *(_QWORD *)(a1 + 64), a1 + 8);
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, v9);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a2, v5);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1B59D301C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFvvEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSC_4NodeEEENS3_IFRT_RNSC_9Node_ProcEEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::target_type()
{
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
  return this;
}

void sub_1B59D3104(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(void)>)>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[4];
}

uint64_t std::__function::__value_func<void ()(std::function<void ()(void)>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(void)>)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(void)>)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(std::function<void ()(void)>)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(void)>)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(void)>)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(void)>)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1}>,void ()(std::function<void ()(void)>)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697B288;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1}>,void ()(std::function<void ()(void)>)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697B288;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1}>,void ()(std::function<void ()(void)>)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = off_1E697B288;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1B59D348C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1}>,void ()(std::function<void ()(void)>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E697B288;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1} const&,0ul>((std::string *)(a2 + 8), (__int128 *)(a1 + 8));
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1}>,void ()(std::function<void ()(void)>)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1}>,void ()(std::function<void ()(void)>)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1}>,void ()(std::function<void ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  _DWORD v18[6];
  _DWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(&v16, *(_QWORD *)(a1 + 64), a1 + 8);
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    goto LABEL_23;
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, v16);
  v6 = (_QWORD *)v5[3];
  v5[3] = 0;
  if (v6 == v5)
  {
    v7 = 4;
    v6 = v5;
  }
  else
  {
    if (!v6)
      goto LABEL_7;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_7:
  std::function<void ()(void)>::operator=(v5, a2);
  v8 = *(_DWORD *)(a1 + 72);
  if (v8 != 1852074351)
  {
    if (v8 != 1919247212)
      goto LABEL_17;
    v18[0] = 0;
    v9 = *(_QWORD *)(v16 + 152);
    if (v9)
    {
      (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v9 + 48))(v9, v18);
      goto LABEL_17;
    }
LABEL_23:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v10 = *(_QWORD *)(v16 + 576);
  if (v10)
  {
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v18, v16 + 224);
    AMCP::Graph::Call_Audio_IO_Proc::update_proc(v10, (uint64_t)v18);
    v11 = v19;
    if (v19 == v18)
    {
      v12 = 4;
      v11 = v18;
    }
    else
    {
      if (!v19)
        goto LABEL_17;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
LABEL_17:
  v13 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1B59D3694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1}>,void ()(std::function<void ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFvvEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSC_4NodeEEENS3_IFRT_RNSC_9Node_ProcEEEEEUlRKS5_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1}>,void ()(std::function<void ()(void)>)>::target_type()
{
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1} const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
  this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  return this;
}

void sub_1B59D37C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3>,std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3>,std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697B3A8;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3>,std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697B3A8;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3>,std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 544;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3>,std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3>,std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int)> ()(void)>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[8];
}

uint64_t std::__function::__value_func<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__function::__value_func<std::function<void ()(unsigned int)> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(unsigned int)> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()> ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::function<void ()> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()> ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()> ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::function<void ()> ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int)> ()(void)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697B168;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int)> ()(void)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697B168;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int)> ()(void)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = off_1E697B168;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1B59D3C54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int)> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E697B168;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(a2 + 8), (__int128 *)(a1 + 8));
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int)> ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int)> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int)> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(&v9, *(_QWORD *)(a1 + 64), a1 + 8);
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, v9);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a2, v5);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1B59D3D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int)> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFvjEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSC_4NodeEEENS3_IFRT_RNSC_9Node_ProcEEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int)> ()(void)>::target_type()
{
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
  return this;
}

void sub_1B59D3E40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(std::function<void ()(unsigned int)>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(unsigned int)>)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()>)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(std::function<void ()>)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()>)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()>)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()>)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1}>,void ()(std::function<void ()(unsigned int)>)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697B0D8;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1}>,void ()(std::function<void ()(unsigned int)>)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697B0D8;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1}>,void ()(std::function<void ()(unsigned int)>)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = off_1E697B0D8;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()> const&)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1B59D4164(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1}>,void ()(std::function<void ()(unsigned int)>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E697B0D8;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()> const&)#1} const&,0ul>((std::string *)(a2 + 8), (__int128 *)(a1 + 8));
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1}>,void ()(std::function<void ()(unsigned int)>)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1}>,void ()(std::function<void ()(unsigned int)>)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1}>,void ()(std::function<void ()(unsigned int)>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  _DWORD v18[6];
  _DWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(&v16, *(_QWORD *)(a1 + 64), a1 + 8);
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    goto LABEL_23;
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, v16);
  v6 = (_QWORD *)v5[3];
  v5[3] = 0;
  if (v6 == v5)
  {
    v7 = 4;
    v6 = v5;
  }
  else
  {
    if (!v6)
      goto LABEL_7;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_7:
  std::function<void ()>::operator=(v5, a2);
  v8 = *(_DWORD *)(a1 + 72);
  if (v8 != 1852074351)
  {
    if (v8 != 1919247212)
      goto LABEL_17;
    v18[0] = 0;
    v9 = *(_QWORD *)(v16 + 152);
    if (v9)
    {
      (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v9 + 48))(v9, v18);
      goto LABEL_17;
    }
LABEL_23:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v10 = *(_QWORD *)(v16 + 576);
  if (v10)
  {
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v18, v16 + 224);
    AMCP::Graph::Call_Audio_IO_Proc::update_proc(v10, (uint64_t)v18);
    v11 = v19;
    if (v19 == v18)
    {
      v12 = 4;
      v11 = v18;
    }
    else
    {
      if (!v19)
        goto LABEL_17;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
LABEL_17:
  v13 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1B59D436C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1}>,void ()(std::function<void ()(unsigned int)>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFvjEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSC_4NodeEEENS3_IFRT_RNSC_9Node_ProcEEEEEUlRKS5_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1}>,void ()(std::function<void ()(unsigned int)>)>::target_type()
{
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1} const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
  this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  return this;
}

void sub_1B59D44A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697B1F8;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697B1F8;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 512;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[6];
}

uint64_t std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697AFB8;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697AFB8;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = off_1E697AFB8;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1B59D492C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E697AFB8;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(a2 + 8), (__int128 *)(a1 + 8));
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(&v9, *(_QWORD *)(a1 + 64), a1 + 8);
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, v9);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a2, v5);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1B59D4A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFvjRKNS_15Proc_Cycle_InfoEmPNS_11Proc_StreamEmS8_EEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSH_4NodeEEENS3_IFRT_RNSH_9Node_ProcEEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::target_type()
{
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
  return this;
}

void sub_1B59D4B18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697AF28;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E697AF28;
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = off_1E697AF28;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1B59D4E3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E697AF28;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1} const&,0ul>((std::string *)(a2 + 8), (__int128 *)(a1 + 8));
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  _DWORD v18[6];
  _DWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(&v16, *(_QWORD *)(a1 + 64), a1 + 8);
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    goto LABEL_23;
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, v16);
  v6 = (_QWORD *)v5[3];
  v5[3] = 0;
  if (v6 == v5)
  {
    v7 = 4;
    v6 = v5;
  }
  else
  {
    if (!v6)
      goto LABEL_7;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_7:
  std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator=(v5, a2);
  v8 = *(_DWORD *)(a1 + 72);
  if (v8 != 1852074351)
  {
    if (v8 != 1919247212)
      goto LABEL_17;
    v18[0] = 0;
    v9 = *(_QWORD *)(v16 + 152);
    if (v9)
    {
      (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v9 + 48))(v9, v18);
      goto LABEL_17;
    }
LABEL_23:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v10 = *(_QWORD *)(v16 + 576);
  if (v10)
  {
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v18, v16 + 224);
    AMCP::Graph::Call_Audio_IO_Proc::update_proc(v10, (uint64_t)v18);
    v11 = v19;
    if (v19 == v18)
    {
      v12 = 4;
      v11 = v18;
    }
    else
    {
      if (!v19)
        goto LABEL_17;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
LABEL_17:
  v13 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1B59D5044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFvjRKNS_15Proc_Cycle_InfoEmPNS_11Proc_StreamEmS8_EEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSH_4NodeEEENS3_IFRT_RNSH_9Node_ProcEEEEEUlRKSA_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::target_type()
{
}

_QWORD *std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B59D5308(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1} const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
  this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  return this;
}

void sub_1B59D5384(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697B048;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697B048;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 224;
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0>,applesauce::CF::StringRef ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E697AEA8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0>,applesauce::CF::StringRef ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E697AEA8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1E697AEA8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1B59D5528(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1E697AEA8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0>,applesauce::CF::StringRef ()(void)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0>,applesauce::CF::StringRef ()(void)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

CFStringRef std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0>,applesauce::CF::StringRef ()(void)>::operator()@<X0>(uint64_t a1@<X0>, CFStringRef *a2@<X8>)
{
  uint64_t v3;
  const UInt8 *v4;
  const UInt8 *v5;
  int v6;
  const UInt8 *v7;
  CFIndex v8;
  CFStringRef result;
  std::runtime_error *exception;

  v5 = *(const UInt8 **)(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  v6 = *(char *)(v3 + 23);
  if (v6 >= 0)
    v7 = (const UInt8 *)v3;
  else
    v7 = v4;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v3 + 23);
  else
    v8 = *(_QWORD *)(v3 + 8);
  result = CFStringCreateWithBytes(0, v7, v8, 0x8000100u, 0);
  *a2 = result;
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1B59D5640(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0>,applesauce::CF::StringRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0>,applesauce::CF::StringRef ()(void)>::target_type()
{
}

void AMCP::IO_Core::Node::~Node(AMCP::IO_Core::Node *this)
{
  char *v2;
  std::__shared_mutex_base *v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = off_1E697ADE8;
  v2 = (char *)this + 32;
  v3 = (std::__shared_mutex_base *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4));
  AMCP::Core::Broker::destroy_core(v3, *((_DWORD *)this + 2));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v6 = *a2;
  *a2 = 0;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
    operator delete(v7);
  v10 = a2[2];
  v9 = a2 + 2;
  v8 = v10;
  v11 = *(v9 - 1);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  v12 = v9[1];
  *(_QWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    v13 = *(_QWORD *)(v8 + 8);
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v13 %= v14;
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    *v9 = 0;
    v9[1] = 0;
  }
}

void AMCP::IO_Core::Node::build_core(AMCP::IO_Core::Node *this)
{
  std::__shared_mutex_base *v2;
  std::__shared_mutex_base *v3;
  AMCP::Log::Scope_Registry *core;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  AMCP::Core::Core *v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  __int128 v15;
  int v16;
  uint8_t buf[8];
  __int16 v18;
  char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_mutex_base *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4));
  *((_DWORD *)this + 2) = AMCP::Core::Broker::reserve_id(v2);
  *(_OWORD *)__p = 0u;
  v15 = 0u;
  v16 = 1065353216;
  (*(void (**)(AMCP::IO_Core::Node *, void **))(*(_QWORD *)this + 32))(this, __p);
  v3 = (std::__shared_mutex_base *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4));
  core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::make_core(&v12, v3, (uint64_t)__p, *((unsigned int *)this + 2));
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(core);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v11;
      v18 = 2080;
      v19 = "Node.cpp";
      v20 = 1024;
      v21 = 74;
      v22 = 2080;
      v23 = "core_ptr.operator BOOL() == true";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s failed to allocate the Core", buf, 0x22u);
    }
    abort();
  }
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)v15);
  v8 = __p[0];
  __p[0] = 0;
  if (v8)
    operator delete(v8);
}

void sub_1B59D5984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1B59D5BA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B59D5C10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B59D5CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)Core_Audio_Driver_Host;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B59D5DDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B59D5EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B59D5FE0(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;
  void *v4;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1B59D60C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B59D6194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B59D6230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B59D64C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1B59D65E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1B59D6724(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B59D6844(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B59D696C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B59D6A94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B59D6BD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B59D6CEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B59D6E4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1B59D6F5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B59D7058(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B59D71D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B59D7300(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B59D73C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B59D74F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B59D7644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B59D777C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B59D78B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B59D7AA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B59D7DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27,id *buf,__int128 a29,__int16 a30,int a31)
{
  void *v31;
  void *v32;
  AMCP::Log::Scope_Registry *v34;
  NSObject *v35;
  _opaque_pthread_t *v36;
  mach_port_t v37;
  unint64_t v38;
  char *v39;
  int v40;
  char *v41;
  const char *v43;

  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);

    v34 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v34);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v35 = *buf;
    AMCP::Log::Scope::get_os_log_t(*buf);
    objc_claimAutoreleasedReturnValue();
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v36 = pthread_self();
      v37 = pthread_mach_thread_np(v36);
      v38 = 0;
      v39 = 0;
      v40 = 47;
      do
      {
        v41 = &aLibraryCachesC_67[v38];
        if (v40 == 47)
          v39 = &aLibraryCachesC_67[v38];
        v40 = v41[1];
        if (!v41[1])
          break;
      }
      while (v38++ < 0xFFF);
      if (v39)
        v43 = v39 + 1;
      else
        v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Server/Core_Audio_Driver_Host.mm";
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v37;
      LOWORD(a29) = 2080;
      *(_QWORD *)((char *)&a29 + 2) = v43;
      WORD5(a29) = 1024;
      HIDWORD(a29) = 661;
      _os_log_error_impl(&dword_1B57BA000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Failed to get property data!", (uint8_t *)&buf, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B59D7D70);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B59D816C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B59D8554(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c108_ZTSKZ94__Core_Audio_Driver_Host_set_property_data_qualifier_data_size_qualifier_data_data_size_data__E4__43(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c108_ZTSKZ94__Core_Audio_Driver_Host_set_property_data_qualifier_data_size_qualifier_data_data_size_data__E4__42(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B59D8770(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c127_ZTSKZ112__Core_Audio_Driver_Host_get_property_data_qualifier_data_size_qualifier_data_data_size_out_data_size_out_data__E4__41(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t __copy_helper_block_ea8_32c127_ZTSKZ112__Core_Audio_Driver_Host_get_property_data_qualifier_data_size_qualifier_data_data_size_out_data_size_out_data__E4__40(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B59D898C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c107_ZTSKZ93__Core_Audio_Driver_Host_get_property_data_size_qualifier_data_size_qualifier_data_out_size__E4__39(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t __copy_helper_block_ea8_32c107_ZTSKZ93__Core_Audio_Driver_Host_get_property_data_size_qualifier_data_size_qualifier_data_out_size__E4__38(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B59D8BA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c74_ZTSKZ60__Core_Audio_Driver_Host_is_property_settable_out_settable__E4__37(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t __copy_helper_block_ea8_32c74_ZTSKZ60__Core_Audio_Driver_Host_is_property_settable_out_settable__E4__36(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B59D8DC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c70_ZTSKZ56__Core_Audio_Driver_Host_has_property_out_has_property__E4__35(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c70_ZTSKZ56__Core_Audio_Driver_Host_has_property_out_has_property__E4__34(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B59D8FE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c58_ZTSKZ44__Core_Audio_Driver_Host_unregister_buffer__E4__33(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c58_ZTSKZ44__Core_Audio_Driver_Host_unregister_buffer__E4__32(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B59D91F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c56_ZTSKZ42__Core_Audio_Driver_Host_register_buffer__E4__31(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c56_ZTSKZ42__Core_Audio_Driver_Host_register_buffer__E4__30(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B59D93F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B59D95E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c77_ZTSKZ63__Core_Audio_Driver_Host_stop_synchronous_messenger_client_id__E4__27(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B59D97D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c149_ZTSKZ134__Core_Audio_Driver_Host_start_synchronous_messenger_client_id_nominal_sample_rate_io_buffer_frame_size_work_group_port_io_messenger__E4__25(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B59D99D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c60_ZTSKZ46__Core_Audio_Driver_Host_stop_io_client_info__E4__23(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B59D9BC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c61_ZTSKZ47__Core_Audio_Driver_Host_start_io_client_info__E4__21(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B59D9DD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c61_ZTSKZ47__Core_Audio_Driver_Host_object_was_destroyed__E4__19(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c61_ZTSKZ47__Core_Audio_Driver_Host_object_was_destroyed__E4__18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B59D9FF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c55_ZTSKZ41__Core_Audio_Driver_Host_destroy_device__E4__17(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c55_ZTSKZ41__Core_Audio_Driver_Host_destroy_device__E4__16(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B59DA208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c80_ZTSKZ66__Core_Audio_Driver_Host_create_device_client_info_out_object_id__E4__15(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t __copy_helper_block_ea8_32c80_ZTSKZ66__Core_Audio_Driver_Host_create_device_client_info_out_object_id__E4__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B59DA428(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c73_ZTSKZ59__Core_Audio_Driver_Host_remove_device_client_client_info__E4__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c73_ZTSKZ59__Core_Audio_Driver_Host_remove_device_client_client_info__E4__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B59DA640(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c70_ZTSKZ56__Core_Audio_Driver_Host_add_device_client_client_info__E4__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c70_ZTSKZ56__Core_Audio_Driver_Host_add_device_client_client_info__E4__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B59DA858(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c87_ZTSKZ74__Core_Audio_Driver_Host_abort_device_configuration_change_action_change__E3__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c87_ZTSKZ74__Core_Audio_Driver_Host_abort_device_configuration_change_action_change__E3__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B59DAA70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c89_ZTSKZ76__Core_Audio_Driver_Host_perform_device_configuration_change_action_change__E3__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c89_ZTSKZ76__Core_Audio_Driver_Host_perform_device_configuration_change_action_change__E3__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B59DABE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B59DADE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c57_ZTSKZ44__Core_Audio_Driver_Host_initialize_driver__E3__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B59DAE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Property_Type_Info>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69959C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Property_Type_Info>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69959C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<Property_Type_Info>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  std::mutex::~mutex((std::mutex *)(a1 + 48));
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 48;
        std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(v3 - 40);
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<caulk::mach::unfair_lock>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6995888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::mach::unfair_lock>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6995888;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::Feature_Flags::run_new_hal(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::access_run_new_hal(0, a2);
}

uint64_t AMCP::Feature_Flags::access_run_new_hal(AMCP::Feature_Flags *this, const BOOL *a2)
{
  unint64_t v2;
  AMCP::Feature_Flags **v4;
  AMCP::Feature_Flags *v5;
  AMCP::Feature_Flags ****v6;
  AMCP::Feature_Flags ***v7;

  v4 = &v5;
  v5 = this;
  v2 = atomic_load(&AMCP::Feature_Flags::access_run_new_hal(BOOL const*)::once);
  if (v2 != -1)
  {
    v7 = &v4;
    v6 = &v7;
    std::__call_once(&AMCP::Feature_Flags::access_run_new_hal(BOOL const*)::once, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_run_new_hal(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::access_run_new_hal(BOOL const*)::s_run_new_hal;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_run_new_hal(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *v5;
  unint64_t v6;
  _BOOL8 v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  const char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  AMCP::Log::Scope_Registry *v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  os_signpost_id_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const char *v25;
  _BYTE v26[18];
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    v2 = *v1;
    AMCP::Feature_Flags::access_run_new_hal(BOOL const*)::s_run_new_hal = v2;
    if (v2)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
      v3 = *(std::__shared_weak_count **)&v26[8];
      v4 = **(NSObject ***)v26;
      if (*(_QWORD *)&v26[8])
      {
        v5 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
      if (v7)
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        *(_DWORD *)v26 = 67109634;
        *(_DWORD *)&v26[4] = v9;
        *(_WORD *)&v26[8] = 2080;
        *(_QWORD *)&v26[10] = "Configuration.cpp";
        v27 = 1024;
        v28 = 210;
        v10 = "%6u %32s:%-5d MCP Engaged";
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_INFO, v10, v26, 0x18u);
        goto LABEL_19;
      }
      goto LABEL_19;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::access_run_new_hal(BOOL const*)::s_run_new_hal = a1;
    if ((a1 & 1) != 0)
      goto LABEL_3;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v11 = *(std::__shared_weak_count **)&v26[8];
  v4 = **(NSObject ***)v26;
  if (*(_QWORD *)&v26[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v7)
  {
    v14 = pthread_self();
    v15 = pthread_mach_thread_np(v14);
    *(_DWORD *)v26 = 67109634;
    *(_DWORD *)&v26[4] = v15;
    *(_WORD *)&v26[8] = 2080;
    *(_QWORD *)&v26[10] = "Configuration.cpp";
    v27 = 1024;
    v28 = 214;
    v10 = "%6u %32s:%-5d MCP Disengaged";
    goto LABEL_18;
  }
LABEL_19:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v17 = *(std::__shared_weak_count **)&v26[8];
  v18 = **(NSObject ***)v26;
  if (*(_QWORD *)&v26[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  AMCP::Log::Scope_Registry::get(v16);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v21 = os_signpost_id_generate(**(os_log_t **)v26);
  v22 = *(std::__shared_weak_count **)&v26[8];
  if (*(_QWORD *)&v26[8])
  {
    v23 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    if (AMCP::Feature_Flags::access_run_new_hal(BOOL const*)::s_run_new_hal)
      v25 = "true";
    else
      v25 = "false";
    *(_DWORD *)v26 = 136315138;
    *(_QWORD *)&v26[4] = v25;
    _os_signpost_emit_with_name_impl(&dword_1B57BA000, v18, OS_SIGNPOST_EVENT, v21, "AMCP_Use_New_HAL_State", "AMCP Turned on: %s", v26, 0xCu);
  }
}

uint64_t AMCP::Feature_Flags::set_run_new_hal(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3;

  v3 = (char)this;
  return AMCP::Feature_Flags::access_run_new_hal((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::run_hybrid_hal(AMCP::Feature_Flags *this, const BOOL *a2)
{
  uint64_t result;
  const BOOL *v3;

  result = AMCP::Feature_Flags::access_run_hybrid_hal(0, a2);
  if ((_DWORD)result)
    return AMCP::Feature_Flags::access_run_new_hal(0, v3) ^ 1;
  return result;
}

uint64_t AMCP::Feature_Flags::access_run_hybrid_hal(AMCP::Feature_Flags *this, const BOOL *a2)
{
  unint64_t v2;
  AMCP::Feature_Flags **v4;
  AMCP::Feature_Flags *v5;
  AMCP::Feature_Flags ****v6;
  AMCP::Feature_Flags ***v7;

  v4 = &v5;
  v5 = this;
  v2 = atomic_load(&AMCP::Feature_Flags::access_run_hybrid_hal(BOOL const*)::once);
  if (v2 != -1)
  {
    v7 = &v4;
    v6 = &v7;
    std::__call_once(&AMCP::Feature_Flags::access_run_hybrid_hal(BOOL const*)::once, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_run_hybrid_hal(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::access_run_hybrid_hal(BOOL const*)::s_run_hybrid_hal;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_run_hybrid_hal(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *v5;
  unint64_t v6;
  _BOOL8 v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  const char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  AMCP::Log::Scope_Registry *v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  os_signpost_id_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const char *v25;
  _BYTE v26[18];
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    v2 = *v1;
    AMCP::Feature_Flags::access_run_hybrid_hal(BOOL const*)::s_run_hybrid_hal = v2;
    if (v2)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
      v3 = *(std::__shared_weak_count **)&v26[8];
      v4 = **(NSObject ***)v26;
      if (*(_QWORD *)&v26[8])
      {
        v5 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
      if (v7)
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        *(_DWORD *)v26 = 67109634;
        *(_DWORD *)&v26[4] = v9;
        *(_WORD *)&v26[8] = 2080;
        *(_QWORD *)&v26[10] = "Configuration.cpp";
        v27 = 1024;
        v28 = 174;
        v10 = "%6u %32s:%-5d Hybrid HAL Engaged";
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_INFO, v10, v26, 0x18u);
        goto LABEL_19;
      }
      goto LABEL_19;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::access_run_hybrid_hal(BOOL const*)::s_run_hybrid_hal = a1;
    if ((a1 & 1) != 0)
      goto LABEL_3;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v11 = *(std::__shared_weak_count **)&v26[8];
  v4 = **(NSObject ***)v26;
  if (*(_QWORD *)&v26[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v7)
  {
    v14 = pthread_self();
    v15 = pthread_mach_thread_np(v14);
    *(_DWORD *)v26 = 67109634;
    *(_DWORD *)&v26[4] = v15;
    *(_WORD *)&v26[8] = 2080;
    *(_QWORD *)&v26[10] = "Configuration.cpp";
    v27 = 1024;
    v28 = 182;
    v10 = "%6u %32s:%-5d Vintage HAL Engaged";
    goto LABEL_18;
  }
LABEL_19:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v17 = *(std::__shared_weak_count **)&v26[8];
  v18 = **(NSObject ***)v26;
  if (*(_QWORD *)&v26[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  AMCP::Log::Scope_Registry::get(v16);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v21 = os_signpost_id_generate(**(os_log_t **)v26);
  v22 = *(std::__shared_weak_count **)&v26[8];
  if (*(_QWORD *)&v26[8])
  {
    v23 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    if (AMCP::Feature_Flags::access_run_hybrid_hal(BOOL const*)::s_run_hybrid_hal)
      v25 = "true";
    else
      v25 = "false";
    *(_DWORD *)v26 = 136315138;
    *(_QWORD *)&v26[4] = v25;
    _os_signpost_emit_with_name_impl(&dword_1B57BA000, v18, OS_SIGNPOST_EVENT, v21, "AMCP_Use_Hybrid_HAL_State", "Hybrid HAL turned on: %s", v26, 0xCu);
  }
}

uint64_t AMCP::Feature_Flags::set_run_hybrid_hal(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3;

  v3 = (char)this;
  return AMCP::Feature_Flags::access_run_hybrid_hal((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::host_asp_oop(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::access_host_asp_oop(0, a2);
}

uint64_t AMCP::Feature_Flags::access_host_asp_oop(AMCP::Feature_Flags *this, const BOOL *a2)
{
  unint64_t v2;
  AMCP::Feature_Flags **v4;
  AMCP::Feature_Flags *v5;
  AMCP::Feature_Flags ****v6;
  AMCP::Feature_Flags ***v7;

  v4 = &v5;
  v5 = this;
  v2 = atomic_load(&AMCP::Feature_Flags::access_host_asp_oop(BOOL const*)::once);
  if (v2 != -1)
  {
    v7 = &v4;
    v6 = &v7;
    std::__call_once(&AMCP::Feature_Flags::access_host_asp_oop(BOOL const*)::once, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_host_asp_oop(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::access_host_asp_oop(BOOL const*)::s_host_asp_oop;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_host_asp_oop(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *v5;
  unint64_t v6;
  _BOOL8 v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  const char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  AMCP::Log::Scope_Registry *v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  os_signpost_id_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const char *v25;
  _BYTE v26[18];
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    v2 = *v1;
    AMCP::Feature_Flags::access_host_asp_oop(BOOL const*)::s_host_asp_oop = v2;
    if (v2)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
      v3 = *(std::__shared_weak_count **)&v26[8];
      v4 = **(NSObject ***)v26;
      if (*(_QWORD *)&v26[8])
      {
        v5 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
      if (v7)
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        *(_DWORD *)v26 = 67109634;
        *(_DWORD *)&v26[4] = v9;
        *(_WORD *)&v26[8] = 2080;
        *(_QWORD *)&v26[10] = "Configuration.cpp";
        v27 = 1024;
        v28 = 273;
        v10 = "%6u %32s:%-5d Hosting ASPs Out of Process";
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_INFO, v10, v26, 0x18u);
        goto LABEL_19;
      }
      goto LABEL_19;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::access_host_asp_oop(BOOL const*)::s_host_asp_oop = a1;
    if ((a1 & 1) != 0)
      goto LABEL_3;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v11 = *(std::__shared_weak_count **)&v26[8];
  v4 = **(NSObject ***)v26;
  if (*(_QWORD *)&v26[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v7)
  {
    v14 = pthread_self();
    v15 = pthread_mach_thread_np(v14);
    *(_DWORD *)v26 = 67109634;
    *(_DWORD *)&v26[4] = v15;
    *(_WORD *)&v26[8] = 2080;
    *(_QWORD *)&v26[10] = "Configuration.cpp";
    v27 = 1024;
    v28 = 277;
    v10 = "%6u %32s:%-5d Loading ASPs directly";
    goto LABEL_18;
  }
LABEL_19:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v17 = *(std::__shared_weak_count **)&v26[8];
  v18 = **(NSObject ***)v26;
  if (*(_QWORD *)&v26[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  AMCP::Log::Scope_Registry::get(v16);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v21 = os_signpost_id_generate(**(os_log_t **)v26);
  v22 = *(std::__shared_weak_count **)&v26[8];
  if (*(_QWORD *)&v26[8])
  {
    v23 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    if (AMCP::Feature_Flags::access_host_asp_oop(BOOL const*)::s_host_asp_oop)
      v25 = "yes";
    else
      v25 = "no";
    *(_DWORD *)v26 = 136315138;
    *(_QWORD *)&v26[4] = v25;
    _os_signpost_emit_with_name_impl(&dword_1B57BA000, v18, OS_SIGNPOST_EVENT, v21, "AMCP_Host_ASP_OoP_State", "Hosting ASPs Out of Process: %s", v26, 0xCu);
  }
}

uint64_t AMCP::Feature_Flags::set_host_asp_oop(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3;

  v3 = (char)this;
  return AMCP::Feature_Flags::access_host_asp_oop((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::internal_drivers_oop(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::access_internal_drivers_oop(0, a2);
}

uint64_t AMCP::Feature_Flags::access_internal_drivers_oop(AMCP::Feature_Flags *this, const BOOL *a2)
{
  unint64_t v2;
  AMCP::Feature_Flags **v4;
  AMCP::Feature_Flags *v5;
  AMCP::Feature_Flags ****v6;
  AMCP::Feature_Flags ***v7;

  v4 = &v5;
  v5 = this;
  v2 = atomic_load(&AMCP::Feature_Flags::access_internal_drivers_oop(BOOL const*)::once);
  if (v2 != -1)
  {
    v7 = &v4;
    v6 = &v7;
    std::__call_once(&AMCP::Feature_Flags::access_internal_drivers_oop(BOOL const*)::once, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_internal_drivers_oop(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::access_internal_drivers_oop(BOOL const*)::s_force_internal_drivers_oop;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_internal_drivers_oop(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *v5;
  unint64_t v6;
  _BOOL8 v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  const char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  AMCP::Log::Scope_Registry *v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  os_signpost_id_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const char *v25;
  _BYTE v26[18];
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    v2 = *v1;
    AMCP::Feature_Flags::access_internal_drivers_oop(BOOL const*)::s_force_internal_drivers_oop = v2;
    if (v2)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
      v3 = *(std::__shared_weak_count **)&v26[8];
      v4 = **(NSObject ***)v26;
      if (*(_QWORD *)&v26[8])
      {
        v5 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
      if (v7)
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        *(_DWORD *)v26 = 67109634;
        *(_DWORD *)&v26[4] = v9;
        *(_WORD *)&v26[8] = 2080;
        *(_QWORD *)&v26[10] = "Configuration.cpp";
        v27 = 1024;
        v28 = 242;
        v10 = "%6u %32s:%-5d Forcing Internal Drivers Out of Process";
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_INFO, v10, v26, 0x18u);
        goto LABEL_19;
      }
      goto LABEL_19;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::access_internal_drivers_oop(BOOL const*)::s_force_internal_drivers_oop = a1;
    if ((a1 & 1) != 0)
      goto LABEL_3;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v11 = *(std::__shared_weak_count **)&v26[8];
  v4 = **(NSObject ***)v26;
  if (*(_QWORD *)&v26[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v7)
  {
    v14 = pthread_self();
    v15 = pthread_mach_thread_np(v14);
    *(_DWORD *)v26 = 67109634;
    *(_DWORD *)&v26[4] = v15;
    *(_WORD *)&v26[8] = 2080;
    *(_QWORD *)&v26[10] = "Configuration.cpp";
    v27 = 1024;
    v28 = 246;
    v10 = "%6u %32s:%-5d Internal Drivers will be loaded on the Server";
    goto LABEL_18;
  }
LABEL_19:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v17 = *(std::__shared_weak_count **)&v26[8];
  v18 = **(NSObject ***)v26;
  if (*(_QWORD *)&v26[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  AMCP::Log::Scope_Registry::get(v16);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v21 = os_signpost_id_generate(**(os_log_t **)v26);
  v22 = *(std::__shared_weak_count **)&v26[8];
  if (*(_QWORD *)&v26[8])
  {
    v23 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    if (AMCP::Feature_Flags::access_internal_drivers_oop(BOOL const*)::s_force_internal_drivers_oop)
      v25 = "yes";
    else
      v25 = "no";
    *(_DWORD *)v26 = 136315138;
    *(_QWORD *)&v26[4] = v25;
    _os_signpost_emit_with_name_impl(&dword_1B57BA000, v18, OS_SIGNPOST_EVENT, v21, "AMCP_Load_Internal_Drivers_OoP", "Forcing Internal Drivers Out of Process: %s", v26, 0xCu);
  }
}

uint64_t AMCP::Feature_Flags::set_internal_drivers_oop(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3;

  v3 = (char)this;
  return AMCP::Feature_Flags::access_internal_drivers_oop((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::allow_mcp_and_hal_coex(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(0, a2);
}

uint64_t AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(AMCP::Feature_Flags *this, const BOOL *a2)
{
  unint64_t v2;
  AMCP::Feature_Flags **v4;
  AMCP::Feature_Flags *v5;
  AMCP::Feature_Flags ****v6;
  AMCP::Feature_Flags ***v7;

  v4 = &v5;
  v5 = this;
  v2 = atomic_load(&AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(BOOL const*)::once);
  if (v2 != -1)
  {
    v7 = &v4;
    v6 = &v7;
    std::__call_once(&AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(BOOL const*)::once, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(BOOL const*)::s_allow_mcp_and_hal_coex;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *v5;
  unint64_t v6;
  _BOOL8 v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  const char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  AMCP::Log::Scope_Registry *v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  os_signpost_id_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const char *v25;
  _BYTE v26[18];
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    v2 = *v1;
    AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(BOOL const*)::s_allow_mcp_and_hal_coex = v2;
    if (v2)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
      v3 = *(std::__shared_weak_count **)&v26[8];
      v4 = **(NSObject ***)v26;
      if (*(_QWORD *)&v26[8])
      {
        v5 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
      if (v7)
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        *(_DWORD *)v26 = 67109634;
        *(_DWORD *)&v26[4] = v9;
        *(_WORD *)&v26[8] = 2080;
        *(_QWORD *)&v26[10] = "Configuration.cpp";
        v27 = 1024;
        v28 = 304;
        v10 = "%6u %32s:%-5d MCP and HAL Can Coexist in coreaudiod";
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_INFO, v10, v26, 0x18u);
        goto LABEL_19;
      }
      goto LABEL_19;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(BOOL const*)::s_allow_mcp_and_hal_coex = a1;
    if ((a1 & 1) != 0)
      goto LABEL_3;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v11 = *(std::__shared_weak_count **)&v26[8];
  v4 = **(NSObject ***)v26;
  if (*(_QWORD *)&v26[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v7)
  {
    v14 = pthread_self();
    v15 = pthread_mach_thread_np(v14);
    *(_DWORD *)v26 = 67109634;
    *(_DWORD *)&v26[4] = v15;
    *(_WORD *)&v26[8] = 2080;
    *(_QWORD *)&v26[10] = "Configuration.cpp";
    v27 = 1024;
    v28 = 308;
    v10 = "%6u %32s:%-5d MCP and HAL Cannot Coexist in coreaudiod";
    goto LABEL_18;
  }
LABEL_19:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v17 = *(std::__shared_weak_count **)&v26[8];
  v18 = **(NSObject ***)v26;
  if (*(_QWORD *)&v26[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  AMCP::Log::Scope_Registry::get(v16);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v21 = os_signpost_id_generate(**(os_log_t **)v26);
  v22 = *(std::__shared_weak_count **)&v26[8];
  if (*(_QWORD *)&v26[8])
  {
    v23 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    if (AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(BOOL const*)::s_allow_mcp_and_hal_coex)
      v25 = "yes";
    else
      v25 = "no";
    *(_DWORD *)v26 = 136315138;
    *(_QWORD *)&v26[4] = v25;
    _os_signpost_emit_with_name_impl(&dword_1B57BA000, v18, OS_SIGNPOST_EVENT, v21, "AMCP_Allow_MCP_HAL_Coex", "MCP and HAL Can Coexist in coreaudiod: %s", v26, 0xCu);
  }
}

uint64_t AMCP::Feature_Flags::set_allow_mcp_and_hal_coex(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3;

  v3 = (char)this;
  return AMCP::Feature_Flags::access_allow_mcp_and_hal_coex((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::event_link_oop_io(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::access_event_link_oop_io(0, a2);
}

uint64_t AMCP::Feature_Flags::access_event_link_oop_io(AMCP::Feature_Flags *this, const BOOL *a2)
{
  unint64_t v2;
  AMCP::Feature_Flags **v4;
  AMCP::Feature_Flags *v5;
  AMCP::Feature_Flags ****v6;
  AMCP::Feature_Flags ***v7;

  v4 = &v5;
  v5 = this;
  v2 = atomic_load(&AMCP::Feature_Flags::access_event_link_oop_io(BOOL const*)::once);
  if (v2 != -1)
  {
    v7 = &v4;
    v6 = &v7;
    std::__call_once(&AMCP::Feature_Flags::access_event_link_oop_io(BOOL const*)::once, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_event_link_oop_io(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::access_event_link_oop_io(BOOL const*)::s_event_link_oop_io;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_event_link_oop_io(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *v5;
  unint64_t v6;
  _BOOL8 v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  const char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  AMCP::Log::Scope_Registry *v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  os_signpost_id_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const char *v25;
  _BYTE v26[18];
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    v2 = *v1;
    AMCP::Feature_Flags::access_event_link_oop_io(BOOL const*)::s_event_link_oop_io = v2;
    if (v2)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
      v3 = *(std::__shared_weak_count **)&v26[8];
      v4 = **(NSObject ***)v26;
      if (*(_QWORD *)&v26[8])
      {
        v5 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
      if (v7)
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        *(_DWORD *)v26 = 67109634;
        *(_DWORD *)&v26[4] = v9;
        *(_WORD *)&v26[8] = 2080;
        *(_QWORD *)&v26[10] = "Configuration.cpp";
        v27 = 1024;
        v28 = 336;
        v10 = "%6u %32s:%-5d Using EventLink for OoP I/O.";
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_INFO, v10, v26, 0x18u);
        goto LABEL_19;
      }
      goto LABEL_19;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::access_event_link_oop_io(BOOL const*)::s_event_link_oop_io = a1;
    if ((a1 & 1) != 0)
      goto LABEL_3;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v11 = *(std::__shared_weak_count **)&v26[8];
  v4 = **(NSObject ***)v26;
  if (*(_QWORD *)&v26[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v7)
  {
    v14 = pthread_self();
    v15 = pthread_mach_thread_np(v14);
    *(_DWORD *)v26 = 67109634;
    *(_DWORD *)&v26[4] = v15;
    *(_WORD *)&v26[8] = 2080;
    *(_QWORD *)&v26[10] = "Configuration.cpp";
    v27 = 1024;
    v28 = 340;
    v10 = "%6u %32s:%-5d Using Mach Semaphores for OoP I/O.";
    goto LABEL_18;
  }
LABEL_19:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v17 = *(std::__shared_weak_count **)&v26[8];
  v18 = **(NSObject ***)v26;
  if (*(_QWORD *)&v26[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  AMCP::Log::Scope_Registry::get(v16);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v21 = os_signpost_id_generate(**(os_log_t **)v26);
  v22 = *(std::__shared_weak_count **)&v26[8];
  if (*(_QWORD *)&v26[8])
  {
    v23 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    if (AMCP::Feature_Flags::access_event_link_oop_io(BOOL const*)::s_event_link_oop_io)
      v25 = "yes";
    else
      v25 = "no";
    *(_DWORD *)v26 = 136315138;
    *(_QWORD *)&v26[4] = v25;
    _os_signpost_emit_with_name_impl(&dword_1B57BA000, v18, OS_SIGNPOST_EVENT, v21, "AMCP_Allow_Event_Link_OoP_IO", "Use EventLink for OoP I/O: %s", v26, 0xCu);
  }
}

uint64_t AMCP::Feature_Flags::set_event_link_oop_io(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3;

  v3 = (char)this;
  return AMCP::Feature_Flags::access_event_link_oop_io((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::collect_io_perfdata(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::access_collect_io_perfdata(0, a2);
}

uint64_t AMCP::Feature_Flags::access_collect_io_perfdata(AMCP::Feature_Flags *this, const BOOL *a2)
{
  unint64_t v2;
  AMCP::Feature_Flags **v4;
  AMCP::Feature_Flags *v5;
  AMCP::Feature_Flags ****v6;
  AMCP::Feature_Flags ***v7;

  v4 = &v5;
  v5 = this;
  v2 = atomic_load(&AMCP::Feature_Flags::access_collect_io_perfdata(BOOL const*)::once);
  if (v2 != -1)
  {
    v7 = &v4;
    v6 = &v7;
    std::__call_once(&AMCP::Feature_Flags::access_collect_io_perfdata(BOOL const*)::once, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_collect_io_perfdata(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::access_collect_io_perfdata(BOOL const*)::s_collect_io_perfdata;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_collect_io_perfdata(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *v5;
  unint64_t v6;
  _BOOL8 v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  const char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  AMCP::Log::Scope_Registry *v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  os_signpost_id_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const char *v25;
  _BYTE v26[18];
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    v2 = *v1;
    AMCP::Feature_Flags::access_collect_io_perfdata(BOOL const*)::s_collect_io_perfdata = v2;
    if (v2)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
      v3 = *(std::__shared_weak_count **)&v26[8];
      v4 = **(NSObject ***)v26;
      if (*(_QWORD *)&v26[8])
      {
        v5 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
      if (v7)
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        *(_DWORD *)v26 = 67109634;
        *(_DWORD *)&v26[4] = v9;
        *(_WORD *)&v26[8] = 2080;
        *(_QWORD *)&v26[10] = "Configuration.cpp";
        v27 = 1024;
        v28 = 369;
        v10 = "%6u %32s:%-5d Collecting perfdata for OoP I/O.";
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_INFO, v10, v26, 0x18u);
        goto LABEL_19;
      }
      goto LABEL_19;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::access_collect_io_perfdata(BOOL const*)::s_collect_io_perfdata = a1;
    if ((a1 & 1) != 0)
      goto LABEL_3;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v11 = *(std::__shared_weak_count **)&v26[8];
  v4 = **(NSObject ***)v26;
  if (*(_QWORD *)&v26[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v7)
  {
    v14 = pthread_self();
    v15 = pthread_mach_thread_np(v14);
    *(_DWORD *)v26 = 67109634;
    *(_DWORD *)&v26[4] = v15;
    *(_WORD *)&v26[8] = 2080;
    *(_QWORD *)&v26[10] = "Configuration.cpp";
    v27 = 1024;
    v28 = 373;
    v10 = "%6u %32s:%-5d Not collecting perfdata for OoP I/O.";
    goto LABEL_18;
  }
LABEL_19:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v17 = *(std::__shared_weak_count **)&v26[8];
  v18 = **(NSObject ***)v26;
  if (*(_QWORD *)&v26[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  AMCP::Log::Scope_Registry::get(v16);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v21 = os_signpost_id_generate(**(os_log_t **)v26);
  v22 = *(std::__shared_weak_count **)&v26[8];
  if (*(_QWORD *)&v26[8])
  {
    v23 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    if (AMCP::Feature_Flags::access_collect_io_perfdata(BOOL const*)::s_collect_io_perfdata)
      v25 = "yes";
    else
      v25 = "no";
    *(_DWORD *)v26 = 136315138;
    *(_QWORD *)&v26[4] = v25;
    _os_signpost_emit_with_name_impl(&dword_1B57BA000, v18, OS_SIGNPOST_EVENT, v21, "AMCP_Allow_Collect_IO_perfdata", "Collect IO perfdata: %s", v26, 0xCu);
  }
}

uint64_t AMCP::Feature_Flags::set_collect_io_perfdata(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3;

  v3 = (char)this;
  return AMCP::Feature_Flags::access_collect_io_perfdata((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::allow_adm_dsp_spatial(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::allow_adm_dsp_spatial(0, a2);
}

{
  unint64_t v2;
  AMCP::Feature_Flags **v4;
  AMCP::Feature_Flags *v5;
  AMCP::Feature_Flags ****v6;
  AMCP::Feature_Flags ***v7;

  v4 = &v5;
  v5 = this;
  v2 = atomic_load(&AMCP::Feature_Flags::allow_adm_dsp_spatial(BOOL const*)::once);
  if (v2 != -1)
  {
    v7 = &v4;
    v6 = &v7;
    std::__call_once(&AMCP::Feature_Flags::allow_adm_dsp_spatial(BOOL const*)::once, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_adm_dsp_spatial(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::allow_adm_dsp_spatial(BOOL const*)::s_allow_adm_dsp_spatial;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_adm_dsp_spatial(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *v5;
  unint64_t v6;
  _BOOL8 v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  const char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  AMCP::Log::Scope_Registry *v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  os_signpost_id_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const char *v25;
  _BYTE v26[18];
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    v2 = *v1;
    AMCP::Feature_Flags::allow_adm_dsp_spatial(BOOL const*)::s_allow_adm_dsp_spatial = v2;
    if (v2)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
      v3 = *(std::__shared_weak_count **)&v26[8];
      v4 = **(NSObject ***)v26;
      if (*(_QWORD *)&v26[8])
      {
        v5 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
      if (v7)
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        *(_DWORD *)v26 = 67109634;
        *(_DWORD *)&v26[4] = v9;
        *(_WORD *)&v26[8] = 2080;
        *(_QWORD *)&v26[10] = "Configuration.cpp";
        v27 = 1024;
        v28 = 402;
        v10 = "%6u %32s:%-5d Allow ADM DSP Spatial.";
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_INFO, v10, v26, 0x18u);
        goto LABEL_19;
      }
      goto LABEL_19;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::allow_adm_dsp_spatial(BOOL const*)::s_allow_adm_dsp_spatial = a1;
    if ((a1 & 1) != 0)
      goto LABEL_3;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v11 = *(std::__shared_weak_count **)&v26[8];
  v4 = **(NSObject ***)v26;
  if (*(_QWORD *)&v26[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v7)
  {
    v14 = pthread_self();
    v15 = pthread_mach_thread_np(v14);
    *(_DWORD *)v26 = 67109634;
    *(_DWORD *)&v26[4] = v15;
    *(_WORD *)&v26[8] = 2080;
    *(_QWORD *)&v26[10] = "Configuration.cpp";
    v27 = 1024;
    v28 = 406;
    v10 = "%6u %32s:%-5d Do not allow ADM DSP Spatial.";
    goto LABEL_18;
  }
LABEL_19:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v17 = *(std::__shared_weak_count **)&v26[8];
  v18 = **(NSObject ***)v26;
  if (*(_QWORD *)&v26[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  AMCP::Log::Scope_Registry::get(v16);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v21 = os_signpost_id_generate(**(os_log_t **)v26);
  v22 = *(std::__shared_weak_count **)&v26[8];
  if (*(_QWORD *)&v26[8])
  {
    v23 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    if (AMCP::Feature_Flags::allow_adm_dsp_spatial(BOOL const*)::s_allow_adm_dsp_spatial)
      v25 = "yes";
    else
      v25 = "no";
    *(_DWORD *)v26 = 136315138;
    *(_QWORD *)&v26[4] = v25;
    _os_signpost_emit_with_name_impl(&dword_1B57BA000, v18, OS_SIGNPOST_EVENT, v21, "AMCP_Allow_ADM_DSP_Spatial", "Allow ADM DSP Spatial: %s", v26, 0xCu);
  }
}

uint64_t AMCP::Feature_Flags::set_allow_adm_dsp_spatial(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3;

  v3 = (char)this;
  return AMCP::Feature_Flags::allow_adm_dsp_spatial((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::allow_adm_dsp_offloads(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::allow_adm_dsp_offloads(0, a2);
}

{
  unint64_t v2;
  AMCP::Feature_Flags **v4;
  AMCP::Feature_Flags *v5;
  AMCP::Feature_Flags ****v6;
  AMCP::Feature_Flags ***v7;

  v4 = &v5;
  v5 = this;
  v2 = atomic_load(&AMCP::Feature_Flags::allow_adm_dsp_offloads(BOOL const*)::once);
  if (v2 != -1)
  {
    v7 = &v4;
    v6 = &v7;
    std::__call_once(&AMCP::Feature_Flags::allow_adm_dsp_offloads(BOOL const*)::once, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_adm_dsp_offloads(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::allow_adm_dsp_offloads(BOOL const*)::s_allow_adm_dsp_offloads;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_adm_dsp_offloads(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *v5;
  unint64_t v6;
  _BOOL8 v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  const char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  AMCP::Log::Scope_Registry *v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  os_signpost_id_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const char *v25;
  _BYTE v26[18];
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    v2 = *v1;
    AMCP::Feature_Flags::allow_adm_dsp_offloads(BOOL const*)::s_allow_adm_dsp_offloads = v2;
    if (v2)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
      v3 = *(std::__shared_weak_count **)&v26[8];
      v4 = **(NSObject ***)v26;
      if (*(_QWORD *)&v26[8])
      {
        v5 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
      if (v7)
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        *(_DWORD *)v26 = 67109634;
        *(_DWORD *)&v26[4] = v9;
        *(_WORD *)&v26[8] = 2080;
        *(_QWORD *)&v26[10] = "Configuration.cpp";
        v27 = 1024;
        v28 = 435;
        v10 = "%6u %32s:%-5d Allow ADM DSP Offloads.";
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_INFO, v10, v26, 0x18u);
        goto LABEL_19;
      }
      goto LABEL_19;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::allow_adm_dsp_offloads(BOOL const*)::s_allow_adm_dsp_offloads = a1;
    if ((a1 & 1) != 0)
      goto LABEL_3;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v11 = *(std::__shared_weak_count **)&v26[8];
  v4 = **(NSObject ***)v26;
  if (*(_QWORD *)&v26[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v7)
  {
    v14 = pthread_self();
    v15 = pthread_mach_thread_np(v14);
    *(_DWORD *)v26 = 67109634;
    *(_DWORD *)&v26[4] = v15;
    *(_WORD *)&v26[8] = 2080;
    *(_QWORD *)&v26[10] = "Configuration.cpp";
    v27 = 1024;
    v28 = 439;
    v10 = "%6u %32s:%-5d Do not allow ADM DSP Offloads.";
    goto LABEL_18;
  }
LABEL_19:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v17 = *(std::__shared_weak_count **)&v26[8];
  v18 = **(NSObject ***)v26;
  if (*(_QWORD *)&v26[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  AMCP::Log::Scope_Registry::get(v16);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v21 = os_signpost_id_generate(**(os_log_t **)v26);
  v22 = *(std::__shared_weak_count **)&v26[8];
  if (*(_QWORD *)&v26[8])
  {
    v23 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    if (AMCP::Feature_Flags::allow_adm_dsp_offloads(BOOL const*)::s_allow_adm_dsp_offloads)
      v25 = "yes";
    else
      v25 = "no";
    *(_DWORD *)v26 = 136315138;
    *(_QWORD *)&v26[4] = v25;
    _os_signpost_emit_with_name_impl(&dword_1B57BA000, v18, OS_SIGNPOST_EVENT, v21, "AMCP_Allow_ADM_DSP_Offloads", "Allow ADM DSP Offloads: %s", v26, 0xCu);
  }
}

uint64_t AMCP::Feature_Flags::set_allow_adm_dsp_offloads(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3;

  v3 = (char)this;
  return AMCP::Feature_Flags::allow_adm_dsp_offloads((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(0, a2);
}

{
  unint64_t v2;
  AMCP::Feature_Flags **v4;
  AMCP::Feature_Flags *v5;
  AMCP::Feature_Flags ****v6;
  AMCP::Feature_Flags ***v7;

  v4 = &v5;
  v5 = this;
  v2 = atomic_load(&AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(BOOL const*)::once);
  if (v2 != -1)
  {
    v7 = &v4;
    v6 = &v7;
    std::__call_once(&AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(BOOL const*)::once, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(BOOL const*)::s_allow_adm_dsp_graph_parameters;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *v5;
  unint64_t v6;
  _BOOL8 v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  const char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  AMCP::Log::Scope_Registry *v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  os_signpost_id_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const char *v25;
  _BYTE v26[18];
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    v2 = *v1;
    AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(BOOL const*)::s_allow_adm_dsp_graph_parameters = v2;
    if (v2)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
      v3 = *(std::__shared_weak_count **)&v26[8];
      v4 = **(NSObject ***)v26;
      if (*(_QWORD *)&v26[8])
      {
        v5 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
      if (v7)
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        *(_DWORD *)v26 = 67109634;
        *(_DWORD *)&v26[4] = v9;
        *(_WORD *)&v26[8] = 2080;
        *(_QWORD *)&v26[10] = "Configuration.cpp";
        v27 = 1024;
        v28 = 468;
        v10 = "%6u %32s:%-5d Allow ADM DSP Graph Parameters.";
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_INFO, v10, v26, 0x18u);
        goto LABEL_19;
      }
      goto LABEL_19;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(BOOL const*)::s_allow_adm_dsp_graph_parameters = a1;
    if ((a1 & 1) != 0)
      goto LABEL_3;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v11 = *(std::__shared_weak_count **)&v26[8];
  v4 = **(NSObject ***)v26;
  if (*(_QWORD *)&v26[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v7)
  {
    v14 = pthread_self();
    v15 = pthread_mach_thread_np(v14);
    *(_DWORD *)v26 = 67109634;
    *(_DWORD *)&v26[4] = v15;
    *(_WORD *)&v26[8] = 2080;
    *(_QWORD *)&v26[10] = "Configuration.cpp";
    v27 = 1024;
    v28 = 472;
    v10 = "%6u %32s:%-5d Do not allow ADM DSP Graph Parameters.";
    goto LABEL_18;
  }
LABEL_19:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v17 = *(std::__shared_weak_count **)&v26[8];
  v18 = **(NSObject ***)v26;
  if (*(_QWORD *)&v26[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  AMCP::Log::Scope_Registry::get(v16);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v26, "com.apple.coreaudio", "AMCP");
  v21 = os_signpost_id_generate(**(os_log_t **)v26);
  v22 = *(std::__shared_weak_count **)&v26[8];
  if (*(_QWORD *)&v26[8])
  {
    v23 = (unint64_t *)(*(_QWORD *)&v26[8] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    if (AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(BOOL const*)::s_allow_adm_dsp_graph_parameters)
      v25 = "yes";
    else
      v25 = "no";
    *(_DWORD *)v26 = 136315138;
    *(_QWORD *)&v26[4] = v25;
    _os_signpost_emit_with_name_impl(&dword_1B57BA000, v18, OS_SIGNPOST_EVENT, v21, "AMCP_Allow_ADM_DSP_Graph_Parameters", "Allow ADM DSP Graph Parameters: %s", v26, 0xCu);
  }
}

uint64_t AMCP::Feature_Flags::set_allow_adm_dsp_graph_parameters(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3;

  v3 = (char)this;
  return AMCP::Feature_Flags::allow_adm_dsp_graph_parameters((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::force_mock_dsp_type(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::force_mock_dsp_type(0, a2);
}

{
  unint64_t v2;
  AMCP::Feature_Flags **v4;
  AMCP::Feature_Flags *v5;
  AMCP::Feature_Flags ****v6;
  AMCP::Feature_Flags ***v7;

  v4 = &v5;
  v5 = this;
  v2 = atomic_load(&AMCP::Feature_Flags::force_mock_dsp_type(BOOL const*)::once);
  if (v2 != -1)
  {
    v7 = &v4;
    v6 = &v7;
    std::__call_once(&AMCP::Feature_Flags::force_mock_dsp_type(BOOL const*)::once, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::force_mock_dsp_type(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::force_mock_dsp_type(BOOL const*)::s_force_mock_dsp_type;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::force_mock_dsp_type(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *v5;
  unint64_t v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  AMCP::Log::Scope_Registry *v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  os_signpost_id_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  os_log_t *v18;
  _BYTE v19[10];
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    v2 = *v1;
    AMCP::Feature_Flags::force_mock_dsp_type(BOOL const*)::s_force_mock_dsp_type = v2;
    if (!v2)
      goto LABEL_12;
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::force_mock_dsp_type(BOOL const*)::s_force_mock_dsp_type = a1;
    if ((a1 & 1) == 0)
      goto LABEL_12;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v18, "com.apple.coreaudio", "AMCP");
  v3 = *(std::__shared_weak_count **)v19;
  v4 = *v18;
  if (*(_QWORD *)v19)
  {
    v5 = (unint64_t *)(*(_QWORD *)v19 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  a1 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if ((_DWORD)a1)
  {
    v7 = pthread_self();
    v8 = pthread_mach_thread_np(v7);
    LODWORD(v18) = 67109634;
    HIDWORD(v18) = v8;
    *(_WORD *)v19 = 2080;
    *(_QWORD *)&v19[2] = "Configuration.cpp";
    v20 = 1024;
    v21 = 501;
    _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_INFO, "%6u %32s:%-5d Use MOCK DSP on Hosted DSP construction (testing only) - this will override ADM loading option.", (uint8_t *)&v18, 0x18u);
  }
LABEL_12:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v18, "com.apple.coreaudio", "AMCP");
  v10 = *(std::__shared_weak_count **)v19;
  v11 = *v18;
  if (*(_QWORD *)v19)
  {
    v12 = (unint64_t *)(*(_QWORD *)v19 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  AMCP::Log::Scope_Registry::get(v9);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v18, "com.apple.coreaudio", "AMCP");
  v14 = os_signpost_id_generate(*v18);
  v15 = *(std::__shared_weak_count **)v19;
  if (*(_QWORD *)v19)
  {
    v16 = (unint64_t *)(*(_QWORD *)v19 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    LODWORD(v18) = 67109120;
    HIDWORD(v18) = AMCP::Feature_Flags::force_mock_dsp_type(BOOL const*)::s_force_mock_dsp_type;
    _os_signpost_emit_with_name_impl(&dword_1B57BA000, v11, OS_SIGNPOST_EVENT, v14, "AMCP_Force_Mock_DSP_Type", "Force Using Mock DSP: %d", (uint8_t *)&v18, 8u);
  }
}

uint64_t AMCP::Feature_Flags::set_force_mock_dsp_type(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3;

  v3 = (char)this;
  return AMCP::Feature_Flags::force_mock_dsp_type((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::allow_smart_routing_macos(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::allow_smart_routing_macos(0, a2);
}

{
  unint64_t v2;
  AMCP::Feature_Flags **v4;
  AMCP::Feature_Flags *v5;
  AMCP::Feature_Flags ****v6;
  AMCP::Feature_Flags ***v7;

  v4 = &v5;
  v5 = this;
  v2 = atomic_load(&AMCP::Feature_Flags::allow_smart_routing_macos(BOOL const*)::once);
  if (v2 != -1)
  {
    v7 = &v4;
    v6 = &v7;
    std::__call_once(&AMCP::Feature_Flags::allow_smart_routing_macos(BOOL const*)::once, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_smart_routing_macos(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::allow_smart_routing_macos(BOOL const*)::s_allow_smart_routing_macos;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_smart_routing_macos(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *v5;
  unint64_t v6;
  _BOOL8 v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  const char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  AMCP::Log::Scope_Registry *v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  os_signpost_id_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  os_log_t *v25;
  _BYTE v26[10];
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    v2 = *v1;
    AMCP::Feature_Flags::allow_smart_routing_macos(BOOL const*)::s_allow_smart_routing_macos = v2;
    if (v2)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v25, "com.apple.coreaudio", "AMCP");
      v3 = *(std::__shared_weak_count **)v26;
      v4 = *v25;
      if (*(_QWORD *)v26)
      {
        v5 = (unint64_t *)(*(_QWORD *)v26 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
      if (v7)
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        LODWORD(v25) = 67109634;
        HIDWORD(v25) = v9;
        *(_WORD *)v26 = 2080;
        *(_QWORD *)&v26[2] = "Configuration.cpp";
        v27 = 1024;
        v28 = 530;
        v10 = "%6u %32s:%-5d Allow Smart Routing on macOS";
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_INFO, v10, (uint8_t *)&v25, 0x18u);
        goto LABEL_19;
      }
      goto LABEL_19;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::allow_smart_routing_macos(BOOL const*)::s_allow_smart_routing_macos = a1;
    if ((a1 & 1) != 0)
      goto LABEL_3;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v25, "com.apple.coreaudio", "AMCP");
  v11 = *(std::__shared_weak_count **)v26;
  v4 = *v25;
  if (*(_QWORD *)v26)
  {
    v12 = (unint64_t *)(*(_QWORD *)v26 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v7)
  {
    v14 = pthread_self();
    v15 = pthread_mach_thread_np(v14);
    LODWORD(v25) = 67109634;
    HIDWORD(v25) = v15;
    *(_WORD *)v26 = 2080;
    *(_QWORD *)&v26[2] = "Configuration.cpp";
    v27 = 1024;
    v28 = 534;
    v10 = "%6u %32s:%-5d Do not allow Smart Routing on macOS";
    goto LABEL_18;
  }
LABEL_19:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v25, "com.apple.coreaudio", "AMCP");
  v17 = *(std::__shared_weak_count **)v26;
  v18 = *v25;
  if (*(_QWORD *)v26)
  {
    v19 = (unint64_t *)(*(_QWORD *)v26 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  AMCP::Log::Scope_Registry::get(v16);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v25, "com.apple.coreaudio", "AMCP");
  v21 = os_signpost_id_generate(*v25);
  v22 = *(std::__shared_weak_count **)v26;
  if (*(_QWORD *)v26)
  {
    v23 = (unint64_t *)(*(_QWORD *)v26 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    LODWORD(v25) = 67109120;
    HIDWORD(v25) = AMCP::Feature_Flags::allow_smart_routing_macos(BOOL const*)::s_allow_smart_routing_macos;
    _os_signpost_emit_with_name_impl(&dword_1B57BA000, v18, OS_SIGNPOST_EVENT, v21, "AMCP_Allow_Smart_Routing_macOS", "Allow Smart Routing: %d", (uint8_t *)&v25, 8u);
  }
}

uint64_t AMCP::Feature_Flags::set_allow_smart_routing_macos(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3;

  v3 = (char)this;
  return AMCP::Feature_Flags::allow_smart_routing_macos((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::allow_client_io_timeout_macos(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::allow_client_io_timeout_macos(0, a2);
}

{
  unint64_t v2;
  AMCP::Feature_Flags **v4;
  AMCP::Feature_Flags *v5;
  AMCP::Feature_Flags ****v6;
  AMCP::Feature_Flags ***v7;

  v4 = &v5;
  v5 = this;
  v2 = atomic_load(&AMCP::Feature_Flags::allow_client_io_timeout_macos(BOOL const*)::once);
  if (v2 != -1)
  {
    v7 = &v4;
    v6 = &v7;
    std::__call_once(&AMCP::Feature_Flags::allow_client_io_timeout_macos(BOOL const*)::once, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_client_io_timeout_macos(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::allow_client_io_timeout_macos(BOOL const*)::s_allow_client_io_timeout_macos;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_client_io_timeout_macos(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *v5;
  unint64_t v6;
  _BOOL8 v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  const char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  AMCP::Log::Scope_Registry *v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  os_signpost_id_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  os_log_t *v25;
  _BYTE v26[10];
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    v2 = *v1;
    AMCP::Feature_Flags::allow_client_io_timeout_macos(BOOL const*)::s_allow_client_io_timeout_macos = v2;
    if (v2)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v25, "com.apple.coreaudio", "AMCP");
      v3 = *(std::__shared_weak_count **)v26;
      v4 = *v25;
      if (*(_QWORD *)v26)
      {
        v5 = (unint64_t *)(*(_QWORD *)v26 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
      if (v7)
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        LODWORD(v25) = 67109634;
        HIDWORD(v25) = v9;
        *(_WORD *)v26 = 2080;
        *(_QWORD *)&v26[2] = "Configuration.cpp";
        v27 = 1024;
        v28 = 563;
        v10 = "%6u %32s:%-5d Allow Client IO Timeout on macOS";
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_INFO, v10, (uint8_t *)&v25, 0x18u);
        goto LABEL_19;
      }
      goto LABEL_19;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::allow_client_io_timeout_macos(BOOL const*)::s_allow_client_io_timeout_macos = a1;
    if ((a1 & 1) != 0)
      goto LABEL_3;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v25, "com.apple.coreaudio", "AMCP");
  v11 = *(std::__shared_weak_count **)v26;
  v4 = *v25;
  if (*(_QWORD *)v26)
  {
    v12 = (unint64_t *)(*(_QWORD *)v26 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v7)
  {
    v14 = pthread_self();
    v15 = pthread_mach_thread_np(v14);
    LODWORD(v25) = 67109634;
    HIDWORD(v25) = v15;
    *(_WORD *)v26 = 2080;
    *(_QWORD *)&v26[2] = "Configuration.cpp";
    v27 = 1024;
    v28 = 567;
    v10 = "%6u %32s:%-5d Do not allow Client IO Timeout on macOS";
    goto LABEL_18;
  }
LABEL_19:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v25, "com.apple.coreaudio", "AMCP");
  v17 = *(std::__shared_weak_count **)v26;
  v18 = *v25;
  if (*(_QWORD *)v26)
  {
    v19 = (unint64_t *)(*(_QWORD *)v26 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  AMCP::Log::Scope_Registry::get(v16);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v25, "com.apple.coreaudio", "AMCP");
  v21 = os_signpost_id_generate(*v25);
  v22 = *(std::__shared_weak_count **)v26;
  if (*(_QWORD *)v26)
  {
    v23 = (unint64_t *)(*(_QWORD *)v26 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    LODWORD(v25) = 67109120;
    HIDWORD(v25) = AMCP::Feature_Flags::allow_client_io_timeout_macos(BOOL const*)::s_allow_client_io_timeout_macos;
    _os_signpost_emit_with_name_impl(&dword_1B57BA000, v18, OS_SIGNPOST_EVENT, v21, "AMCP_Allow_Client_IO_Timeout_macOS", "Allow Client IO Timeout: %d", (uint8_t *)&v25, 8u);
  }
}

uint64_t AMCP::Feature_Flags::set_allow_client_io_timeout_macos(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3;

  v3 = (char)this;
  return AMCP::Feature_Flags::allow_client_io_timeout_macos((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::use_mcp_coloring_mixer(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::use_mcp_coloring_mixer(0, a2);
}

{
  unint64_t v2;
  AMCP::Feature_Flags **v4;
  AMCP::Feature_Flags *v5;
  AMCP::Feature_Flags ****v6;
  AMCP::Feature_Flags ***v7;

  v4 = &v5;
  v5 = this;
  v2 = atomic_load(&AMCP::Feature_Flags::use_mcp_coloring_mixer(BOOL const*)::once);
  if (v2 != -1)
  {
    v7 = &v4;
    v6 = &v7;
    std::__call_once(&AMCP::Feature_Flags::use_mcp_coloring_mixer(BOOL const*)::once, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::use_mcp_coloring_mixer(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::use_mcp_coloring_mixer(BOOL const*)::s_use_mcp_coloring_mixer;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::use_mcp_coloring_mixer(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *v5;
  unint64_t v6;
  _BOOL8 v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  const char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  AMCP::Log::Scope_Registry *v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  os_signpost_id_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  os_log_t *v25;
  _BYTE v26[10];
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    v2 = *v1;
    AMCP::Feature_Flags::use_mcp_coloring_mixer(BOOL const*)::s_use_mcp_coloring_mixer = v2;
    if (v2)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v25, "com.apple.coreaudio", "AMCP");
      v3 = *(std::__shared_weak_count **)v26;
      v4 = *v25;
      if (*(_QWORD *)v26)
      {
        v5 = (unint64_t *)(*(_QWORD *)v26 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
      if (v7)
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        LODWORD(v25) = 67109634;
        HIDWORD(v25) = v9;
        *(_WORD *)v26 = 2080;
        *(_QWORD *)&v26[2] = "Configuration.cpp";
        v27 = 1024;
        v28 = 596;
        v10 = "%6u %32s:%-5d Use the MCP coloring mixer";
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_INFO, v10, (uint8_t *)&v25, 0x18u);
        goto LABEL_19;
      }
      goto LABEL_19;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::use_mcp_coloring_mixer(BOOL const*)::s_use_mcp_coloring_mixer = a1;
    if ((a1 & 1) != 0)
      goto LABEL_3;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v25, "com.apple.coreaudio", "AMCP");
  v11 = *(std::__shared_weak_count **)v26;
  v4 = *v25;
  if (*(_QWORD *)v26)
  {
    v12 = (unint64_t *)(*(_QWORD *)v26 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v7 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v7)
  {
    v14 = pthread_self();
    v15 = pthread_mach_thread_np(v14);
    LODWORD(v25) = 67109634;
    HIDWORD(v25) = v15;
    *(_WORD *)v26 = 2080;
    *(_QWORD *)&v26[2] = "Configuration.cpp";
    v27 = 1024;
    v28 = 600;
    v10 = "%6u %32s:%-5d Use the legacy coloring mixer";
    goto LABEL_18;
  }
LABEL_19:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v25, "com.apple.coreaudio", "AMCP");
  v17 = *(std::__shared_weak_count **)v26;
  v18 = *v25;
  if (*(_QWORD *)v26)
  {
    v19 = (unint64_t *)(*(_QWORD *)v26 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  AMCP::Log::Scope_Registry::get(v16);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v25, "com.apple.coreaudio", "AMCP");
  v21 = os_signpost_id_generate(*v25);
  v22 = *(std::__shared_weak_count **)v26;
  if (*(_QWORD *)v26)
  {
    v23 = (unint64_t *)(*(_QWORD *)v26 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    LODWORD(v25) = 67109120;
    HIDWORD(v25) = AMCP::Feature_Flags::use_mcp_coloring_mixer(BOOL const*)::s_use_mcp_coloring_mixer;
    _os_signpost_emit_with_name_impl(&dword_1B57BA000, v18, OS_SIGNPOST_EVENT, v21, "AMCP_Use_MCP_Coloring_Mixer", "Use the MCP coloring mixer: %d", (uint8_t *)&v25, 8u);
  }
}

uint64_t AMCP::Feature_Flags::set_use_mcp_coloring_mixer(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3;

  v3 = (char)this;
  return AMCP::Feature_Flags::use_mcp_coloring_mixer((AMCP::Feature_Flags *)&v3, a2);
}

void ADS::Control::~Control(ADS::Control *this)
{
  *(_QWORD *)this = off_1E69937F0;
  *((_QWORD *)this + 7) = &off_1E69985F8;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 80));
  ADS::BaseObject::~BaseObject(this);
}

{
  *(_QWORD *)this = off_1E69937F0;
  *((_QWORD *)this + 7) = &off_1E69985F8;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 80));
  ADS::BaseObject::~BaseObject(this);
  JUMPOUT(0x1B5E50688);
}

BOOL ADS::Control::HasProperty(ADS::Control *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  return a4->mSelector == 1667591277 || a4->mSelector == 1668506480 || ADS::BaseObject::HasProperty(this, a2, a3, a4);
}

uint64_t ADS::Control::IsPropertySettable(ADS::Control *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  if (a4->mSelector == 1667591277 || a4->mSelector == 1668506480)
    return 0;
  else
    return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
}

uint64_t ADS::Control::GetPropertyDataSize(ADS::Control *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6)
{
  if (a4->mSelector == 1667591277 || a4->mSelector == 1668506480)
    return 4;
  else
    return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
}

void ADS::Control::GetPropertyData(ADS::Control *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6, unsigned int a7, unsigned int *a8, char *a9)
{
  NSObject *v9;
  const char *v10;
  _DWORD *exception;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a4->mSelector == 1667591277)
  {
    if (a7 > 3)
    {
      *(_DWORD *)a9 = 0;
      goto LABEL_7;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "ADS_Control.cpp";
      v14 = 1024;
      v15 = 92;
      v9 = MEMORY[0x1E0C81028];
      v10 = "%25s:%-5d  ADS::Control::GetPropertyData: not enough space for the return value of kAudioControlPropertyElem"
            "ent for the volume control";
      goto LABEL_13;
    }
LABEL_14:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 561211770;
  }
  if (a4->mSelector == 1668506480)
  {
    if (a7 > 3)
    {
      *(_DWORD *)a9 = *((_DWORD *)this + 13);
LABEL_7:
      *a8 = 4;
      return;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "ADS_Control.cpp";
      v14 = 1024;
      v15 = 85;
      v9 = MEMORY[0x1E0C81028];
      v10 = "%25s:%-5d  ADS::Control::GetPropertyData: not enough space for the return value of kAudioControlPropertyScop"
            "e for the volume control";
LABEL_13:
      _os_log_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v12, 0x12u);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
  ADS::BaseObject::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

void ADS::Control::SetPropertyData(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, unint64_t *a10, unsigned __int8 a11)
{
  ADS::BaseObject::SetPropertyData(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

ADS::Control *ADS::Control::Control(ADS::Control *this, int a2, int a3, int a4, int a5, int a6)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a5;
  *((_DWORD *)this + 4) = a6;
  *((_DWORD *)this + 5) = a3;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 48) = 0;
  *(_QWORD *)this = off_1E69937F0;
  *((_DWORD *)this + 13) = a4;
  CADeprecated::CAMutex::CAMutex((ADS::Control *)((char *)this + 56), "Control State");
  return this;
}

void sub_1B59DE860(_Unwind_Exception *a1)
{
  ADS::BaseObject *v1;

  ADS::BaseObject::~BaseObject(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Fixed_Buffer::translate_range@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  AMCP::DAL::DAL_Time *v5;
  _BOOL8 v6;
  double sample_time;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  caulk::rt_safe_memory_resource *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  NSObject *v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  void *exception;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();
  __int128 v31;
  uint64_t v32;
  std::string v33;
  std::logic_error v34;
  std::logic_error v35;
  void *v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  char v41;
  _BYTE buf[40];
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = (AMCP::DAL::DAL_Time *)(a1 + 8);
  v6 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses(a1 + 8, (uint64_t)a2);
  if (!v6)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v24 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v25 = pthread_self();
      v26 = pthread_mach_thread_np(v25);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v26;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Fixed_Buffer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 110;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not (m_time_range.encompasses(range))";
      _os_log_error_impl(&dword_1B57BA000, v24, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v33);
    std::logic_error::logic_error(&v34, &v33);
    v34.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v36 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&buf[32] = "virtual rt_safe_vector<Buffer_Time_Translator::Translation_Range> AMCP::DAL::Fixed_Buffer::tra"
                          "nslate_range(const DAL_Time_Range &) const";
    *(_QWORD *)&v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    DWORD2(v43) = 110;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
    v31 = v28;
    v32 = v29;
    v28 = 0uLL;
    v29 = 0;
    v30 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v30);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a2);
  v8 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a2 + 5));
  v9 = AMCP::DAL::DAL_Time::get_sample_time(v5);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  *(double *)buf = sample_time - v9;
  *(double *)&buf[8] = v8 - v9;
  *(_OWORD *)&buf[16] = *(_OWORD *)a2;
  v10 = a2[3];
  *(_QWORD *)&buf[32] = a2[2];
  *(_QWORD *)&v43 = v10;
  v11 = a2[4];
  *((_QWORD *)&v43 + 1) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v44 = *(_OWORD *)(a2 + 5);
  v15 = a2[8];
  v14 = a2[9];
  v45 = a2[7];
  *(_QWORD *)&v46 = v15;
  *((_QWORD *)&v46 + 1) = v14;
  if (v14)
  {
    v16 = (unint64_t *)(v14 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v38 = a3 + 2;
  v18 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>((caulk::rt_safe_memory_resource *)1);
  v35.__vftable = (std::logic_error_vtbl *)v18;
  v35.__imp_.__imp_ = (const char *)v18;
  v37 = (char *)v18 + 96 * v19;
  *(_OWORD *)v18 = *(_OWORD *)buf;
  v20 = *(_OWORD *)&buf[16];
  *((_QWORD *)v18 + 4) = *(_QWORD *)&buf[32];
  *((_OWORD *)v18 + 1) = v20;
  *(_OWORD *)((char *)v18 + 40) = v43;
  v43 = 0uLL;
  v21 = v45;
  *(_OWORD *)((char *)v18 + 56) = v44;
  *((_QWORD *)v18 + 9) = v21;
  *((_OWORD *)v18 + 5) = v46;
  v46 = 0uLL;
  v36 = (char *)v18 + 96;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__swap_out_circular_buffer(a3, &v35);
  v22 = a3[1];
  result = std::__split_buffer<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range> &>::~__split_buffer((uint64_t)&v35);
  a3[1] = v22;
  return result;
}

void sub_1B59DEC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = v38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v40);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v39);
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a35);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *AMCP::DAL::Fixed_Buffer::receive_data(uint64_t a1, uint64_t a2, const AMCP::DAL::DAL_Time_Range **a3)
{
  _BOOL8 v5;
  _BOOL8 v6;
  _BOOL8 is_compatible;
  BOOL v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::logic_error_vtbl *v12;
  const char *i;
  const char *(__cdecl *what)(const std::logic_error *__hidden);
  void (__cdecl *v15)(std::logic_error *__hidden);
  unint64_t *v16;
  unint64_t v17;
  void (__cdecl *v18)(std::logic_error *__hidden);
  const char *(__cdecl *v19)(const std::logic_error *__hidden);
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  double *v28;
  double *v29;
  std::__shared_weak_count *size;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v40;
  _opaque_pthread_t *v41;
  mach_port_t v42;
  void *exception;
  uint64_t v44;
  NSObject *v45;
  _opaque_pthread_t *v46;
  mach_port_t v47;
  void *v48;
  uint64_t v49;
  NSObject *v50;
  _opaque_pthread_t *v51;
  mach_port_t v52;
  void *v53;
  uint64_t v54;
  __int128 v55;
  void (__cdecl *v56)(std::logic_error *__hidden);
  const char *(__cdecl *v57)(const std::logic_error *__hidden);
  std::__shared_weak_count *v58;
  __int128 v59;
  void (__cdecl *v60)(std::logic_error *__hidden);
  void (__cdecl *v61)(std::logic_error *__hidden);
  std::__shared_weak_count *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t (**v65)();
  __int128 v66;
  uint64_t v67;
  std::string v68;
  std::logic_error v69;
  std::logic_error v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char v76;
  uint8_t buf[8];
  _BYTE v78[10];
  __int16 v79;
  int v80;
  __int16 v81;
  _BYTE v82[14];
  const char *v83;
  int v84;
  std::__shared_weak_count *v85;
  const AMCP::DAL::DAL_Time_Range *v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a3 + 5), (AMCP::DAL::DAL_Time *)a3);
  if (v5)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v40 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v41 = pthread_self();
      v42 = pthread_mach_thread_np(v41);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v42;
      *(_WORD *)v78 = 2080;
      *(_QWORD *)&v78[2] = "Fixed_Buffer.cpp";
      v79 = 1024;
      v80 = 23;
      v81 = 2080;
      *(_QWORD *)v82 = "not (new_audio.get_time_range().end() >= new_audio.get_time_range().start())";
      _os_log_error_impl(&dword_1B57BA000, v40, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Fixed_Buffer::RecieveData: Bad time range", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v76);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Fixed_Buffer::RecieveData: Bad time range", (uint64_t)&v68);
    std::logic_error::logic_error(&v69, &v68);
    v69.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v70, &v69);
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = -1;
    v70.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v71 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
    *(_QWORD *)&v82[6] = "virtual void AMCP::DAL::Fixed_Buffer::receive_data(const Source_ID &, const Readable_Range &)";
    v83 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    v84 = 23;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v63);
    v66 = v63;
    v44 = v64;
    v64 = 0;
    v65 = off_1E69A20A0;
    v67 = v44;
    v63 = 0uLL;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v65);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v6 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses(a1 + 8, (uint64_t)a3);
  if (!v6)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v45 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      v46 = pthread_self();
      v47 = pthread_mach_thread_np(v46);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v47;
      *(_WORD *)v78 = 2080;
      *(_QWORD *)&v78[2] = "Fixed_Buffer.cpp";
      v79 = 1024;
      v80 = 24;
      v81 = 2080;
      *(_QWORD *)v82 = "not (m_time_range.encompasses(new_audio.get_time_range()))";
      _os_log_error_impl(&dword_1B57BA000, v45, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v76);
    v48 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v68);
    std::logic_error::logic_error(&v69, &v68);
    v69.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v70, &v69);
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = -1;
    v70.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v71 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
    *(_QWORD *)&v82[6] = "virtual void AMCP::DAL::Fixed_Buffer::receive_data(const Source_ID &, const Readable_Range &)";
    v83 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    v84 = 24;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v63);
    v66 = v63;
    v49 = v64;
    v64 = 0;
    v65 = off_1E69A20A0;
    v67 = v49;
    v63 = 0uLL;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v65);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v48, (uint64_t)buf);
  }
  (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)a3[10] + 56))(buf);
  is_compatible = AMCP::DAL::Container::container_is_compatible(*(_QWORD *)(a1 + 88), *(uint64_t *)buf);
  v8 = is_compatible;
  v9 = *(std::__shared_weak_count **)v78;
  if (*(_QWORD *)v78)
  {
    v10 = (unint64_t *)(*(_QWORD *)v78 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v8)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_compatible);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v50 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      v51 = pthread_self();
      v52 = pthread_mach_thread_np(v51);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v52;
      *(_WORD *)v78 = 2080;
      *(_QWORD *)&v78[2] = "Fixed_Buffer.cpp";
      v79 = 1024;
      v80 = 25;
      v81 = 2080;
      *(_QWORD *)v82 = "not (m_container.container_is_compatible(new_audio.get_container()))";
      _os_log_error_impl(&dword_1B57BA000, v50, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Fixed_Buffer::WriteTo: Containers Are Not Compatible", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v76);
    v53 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Fixed_Buffer::WriteTo: Containers Are Not Compatible", (uint64_t)&v68);
    std::logic_error::logic_error(&v69, &v68);
    v69.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v70, &v69);
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = -1;
    v70.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v71 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
    *(_QWORD *)&v82[6] = "virtual void AMCP::DAL::Fixed_Buffer::receive_data(const Source_ID &, const Readable_Range &)";
    v83 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    v84 = 25;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v63);
    v66 = v63;
    v54 = v64;
    v64 = 0;
    v65 = off_1E69A20A0;
    v67 = v54;
    v63 = 0uLL;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v65);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v53, (uint64_t)buf);
  }
  AMCP::DAL::DAL_Timed_Segment::translate_range((double **)&v70, a3[10], (uint64_t)a3);
  v12 = v70.__vftable;
  for (i = v70.__imp_.__imp_; v12 != (std::logic_error_vtbl *)i; v12 += 4)
  {
    v55 = *(_OWORD *)&v12->what;
    what = v12[1].what;
    v56 = v12[1].~logic_error_0;
    v57 = what;
    v15 = v12[2].~logic_error;
    v58 = (std::__shared_weak_count *)v15;
    if (v15)
    {
      v16 = (unint64_t *)((char *)v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v59 = *(_OWORD *)&v12[2].~logic_error_0;
    v18 = v12[3].~logic_error_0;
    v60 = v12[3].~logic_error;
    v19 = v12[3].what;
    v61 = v18;
    v62 = (std::__shared_weak_count *)v19;
    if (v19)
    {
      v20 = (unint64_t *)((char *)v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    AMCP::DAL::Fixed_Buffer::create_writable_range(a1, (uint64_t)&v55, (uint64_t)buf);
    v22 = v62;
    if (v62)
    {
      p_shared_owners = (unint64_t *)&v62->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v58;
    if (v58)
    {
      v26 = (unint64_t *)&v58->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    AMCP::DAL::DAL_Timed_Segment::translate_range((double **)&v65, v86, (uint64_t)buf);
    v29 = (double *)v65;
    v28 = (double *)v66;
    while (v29 != v28)
    {
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a3[10] + 56))(&v68);
      AMCP::DAL::Container::copy_from_this_container((uint64_t *)&v68, (uint64_t)v12, (uint64_t *)(a1 + 88), v29);
      size = (std::__shared_weak_count *)v68.__r_.__value_.__l.__size_;
      if (v68.__r_.__value_.__l.__size_)
      {
        v31 = (unint64_t *)(v68.__r_.__value_.__l.__size_ + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v29 += 12;
    }
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v68);
    v33 = v85;
    if (v85)
    {
      v34 = (unint64_t *)&v85->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = *(std::__shared_weak_count **)&v82[6];
    if (*(_QWORD *)&v82[6])
    {
      v37 = (unint64_t *)(*(_QWORD *)&v82[6] + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  *(_QWORD *)buf = &v70;
  return std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
}

void sub_1B59DF564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a10);
  *(_QWORD *)(v41 - 192) = &a38;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)(v41 - 192));
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *AMCP::DAL::Fixed_Buffer::receive_data_at_range(uint64_t a1, uint64_t a2, const AMCP::DAL::DAL_Time_Range **a3, _QWORD *a4)
{
  AMCP::DAL::DAL_Time *v6;
  _BOOL8 v7;
  _BOOL8 v8;
  BOOL v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL8 v16;
  _BOOL8 is_compatible;
  BOOL v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  const char *i;
  std::logic_error_vtbl *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  double *v37;
  double *v38;
  std::__shared_weak_count *size;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  NSObject *v49;
  _opaque_pthread_t *v50;
  mach_port_t v51;
  void *exception;
  uint64_t v53;
  NSObject *v54;
  _opaque_pthread_t *v55;
  mach_port_t v56;
  void *v57;
  uint64_t v58;
  NSObject *v59;
  _opaque_pthread_t *v60;
  mach_port_t v61;
  void *v62;
  uint64_t v63;
  NSObject *v64;
  _opaque_pthread_t *v65;
  mach_port_t v66;
  void *v67;
  uint64_t v68;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t (**v80)();
  __int128 v81;
  uint64_t v82;
  std::string v83;
  std::logic_error v84;
  std::logic_error v85;
  void *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  int v90;
  char v91;
  uint8_t buf[8];
  _BYTE v93[10];
  __int16 v94;
  int v95;
  __int16 v96;
  _BYTE v97[14];
  const char *v98;
  int v99;
  std::__shared_weak_count *v100;
  const AMCP::DAL::DAL_Time_Range *v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v6 = (AMCP::DAL::DAL_Time *)(a3 + 5);
  v7 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a3 + 5), (AMCP::DAL::DAL_Time *)a3);
  if (v7)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v49 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      v50 = pthread_self();
      v51 = pthread_mach_thread_np(v50);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v51;
      *(_WORD *)v93 = 2080;
      *(_QWORD *)&v93[2] = "Fixed_Buffer.cpp";
      v94 = 1024;
      v95 = 44;
      v96 = 2080;
      *(_QWORD *)v97 = "not (new_audio.get_time_range().end() >= new_audio.get_time_range().start())";
      _os_log_error_impl(&dword_1B57BA000, v49, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Fixed_Buffer::receive_data_at_range: Bad time range", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v91);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Fixed_Buffer::receive_data_at_range: Bad time range", (uint64_t)&v83);
    std::logic_error::logic_error(&v84, &v83);
    v84.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v85, &v84);
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = -1;
    v85.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v86 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v85);
    *(_QWORD *)&v97[6] = "virtual void AMCP::DAL::Fixed_Buffer::receive_data_at_range(const Source_ID &, const Readable_R"
                         "ange &, const DAL_Time_Range &)";
    v98 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    v99 = 44;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v78);
    v81 = v78;
    v53 = v79;
    v79 = 0;
    v80 = off_1E69A20A0;
    v82 = v53;
    v78 = 0uLL;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v80);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (AMCP::DAL::DAL_Time *)(a4 + 5), (AMCP::DAL::DAL_Time *)a4);
  AMCP::DAL::DAL_Time::operator-((uint64_t)&v85, v6, (AMCP::DAL::DAL_Time *)a3);
  v8 = AMCP::DAL::DAL_Time_Delta::operator==((AMCP::DAL::DAL_Time_Delta *)buf, (uint64_t)&v85);
  v9 = v8;
  v10 = v88;
  if (v88)
  {
    p_shared_owners = (unint64_t *)&v88->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(std::__shared_weak_count **)&v97[6];
  if (*(_QWORD *)&v97[6])
  {
    v14 = (unint64_t *)(*(_QWORD *)&v97[6] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v54 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      v55 = pthread_self();
      v56 = pthread_mach_thread_np(v55);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v56;
      *(_WORD *)v93 = 2080;
      *(_QWORD *)&v93[2] = "Fixed_Buffer.cpp";
      v94 = 1024;
      v95 = 45;
      v96 = 2080;
      *(_QWORD *)v97 = "not (write_range.length() == new_audio.get_time_range().length())";
      _os_log_error_impl(&dword_1B57BA000, v54, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Fixed_Buffer::receive_data_at_range: source audio range length must eaqual write range length", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v91);
    v57 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Fixed_Buffer::receive_data_at_range: source audio range length must eaqual write range length", (uint64_t)&v83);
    std::logic_error::logic_error(&v84, &v83);
    v84.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v85, &v84);
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = -1;
    v85.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v86 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v85);
    *(_QWORD *)&v97[6] = "virtual void AMCP::DAL::Fixed_Buffer::receive_data_at_range(const Source_ID &, const Readable_R"
                         "ange &, const DAL_Time_Range &)";
    v98 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    v99 = 45;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v78);
    v81 = v78;
    v58 = v79;
    v79 = 0;
    v80 = off_1E69A20A0;
    v82 = v58;
    v78 = 0uLL;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v80);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v57, (uint64_t)buf);
  }
  v16 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses(a1 + 8, (uint64_t)a4);
  if (!v16)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v16);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v59 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      v60 = pthread_self();
      v61 = pthread_mach_thread_np(v60);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v61;
      *(_WORD *)v93 = 2080;
      *(_QWORD *)&v93[2] = "Fixed_Buffer.cpp";
      v94 = 1024;
      v95 = 46;
      v96 = 2080;
      *(_QWORD *)v97 = "not (m_time_range.encompasses(write_range))";
      _os_log_error_impl(&dword_1B57BA000, v59, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Fixed_Buffer::receive_data_at_range: range to write to must encompass the audio buffer range", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v91);
    v62 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Fixed_Buffer::receive_data_at_range: range to write to must encompass the audio buffer range", (uint64_t)&v83);
    std::logic_error::logic_error(&v84, &v83);
    v84.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v85, &v84);
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = -1;
    v85.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v86 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v85);
    *(_QWORD *)&v97[6] = "virtual void AMCP::DAL::Fixed_Buffer::receive_data_at_range(const Source_ID &, const Readable_R"
                         "ange &, const DAL_Time_Range &)";
    v98 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    v99 = 46;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v78);
    v81 = v78;
    v63 = v79;
    v79 = 0;
    v80 = off_1E69A20A0;
    v82 = v63;
    v78 = 0uLL;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v80);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v62, (uint64_t)buf);
  }
  (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)a3[10] + 56))(buf);
  is_compatible = AMCP::DAL::Container::container_is_compatible(*(_QWORD *)(a1 + 88), *(uint64_t *)buf);
  v18 = is_compatible;
  v19 = *(std::__shared_weak_count **)v93;
  if (*(_QWORD *)v93)
  {
    v20 = (unint64_t *)(*(_QWORD *)v93 + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (!v18)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_compatible);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v64 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
    {
      v65 = pthread_self();
      v66 = pthread_mach_thread_np(v65);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v66;
      *(_WORD *)v93 = 2080;
      *(_QWORD *)&v93[2] = "Fixed_Buffer.cpp";
      v94 = 1024;
      v95 = 47;
      v96 = 2080;
      *(_QWORD *)v97 = "not (m_container.container_is_compatible(new_audio.get_container()))";
      _os_log_error_impl(&dword_1B57BA000, v64, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Fixed_Buffer::receive_data_at_range: Containers Are Not Compatible", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v91);
    v67 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Fixed_Buffer::receive_data_at_range: Containers Are Not Compatible", (uint64_t)&v83);
    std::logic_error::logic_error(&v84, &v83);
    v84.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v85, &v84);
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = -1;
    v85.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v86 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v85);
    *(_QWORD *)&v97[6] = "virtual void AMCP::DAL::Fixed_Buffer::receive_data_at_range(const Source_ID &, const Readable_R"
                         "ange &, const DAL_Time_Range &)";
    v98 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    v99 = 47;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v78);
    v81 = v78;
    v68 = v79;
    v79 = 0;
    v80 = off_1E69A20A0;
    v82 = v68;
    v78 = 0uLL;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v80);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v67, (uint64_t)buf);
  }
  AMCP::DAL::DAL_Timed_Segment::translate_range((double **)&v85, a3[10], (uint64_t)a3);
  v23 = v85.__vftable;
  for (i = v85.__imp_.__imp_; v23 != (std::logic_error_vtbl *)i; v23 += 4)
  {
    v70 = *(_OWORD *)a4;
    v24 = a4[3];
    v71 = a4[2];
    v72 = v24;
    v25 = (std::__shared_weak_count *)a4[4];
    v73 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v74 = *(_OWORD *)(a4 + 5);
    v75 = a4[7];
    v28 = (std::__shared_weak_count *)a4[9];
    v76 = a4[8];
    v77 = v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    AMCP::DAL::Fixed_Buffer::create_writable_range(a1, (uint64_t)&v70, (uint64_t)buf);
    v31 = v77;
    if (v77)
    {
      v32 = (unint64_t *)&v77->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = v73;
    if (v73)
    {
      v35 = (unint64_t *)&v73->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    AMCP::DAL::DAL_Timed_Segment::translate_range((double **)&v80, v101, (uint64_t)buf);
    v38 = (double *)v80;
    v37 = (double *)v81;
    while (v38 != v37)
    {
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a3[10] + 56))(&v83);
      AMCP::DAL::Container::copy_from_this_container((uint64_t *)&v83, (uint64_t)v23, (uint64_t *)(a1 + 88), v38);
      size = (std::__shared_weak_count *)v83.__r_.__value_.__l.__size_;
      if (v83.__r_.__value_.__l.__size_)
      {
        v40 = (unint64_t *)(v83.__r_.__value_.__l.__size_ + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v38 += 12;
    }
    v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v83);
    v42 = v100;
    if (v100)
    {
      v43 = (unint64_t *)&v100->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = *(std::__shared_weak_count **)&v97[6];
    if (*(_QWORD *)&v97[6])
    {
      v46 = (unint64_t *)(*(_QWORD *)&v97[6] + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  *(_QWORD *)buf = &v85;
  return std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
}

void sub_1B59E026C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  uint64_t v43;
  uint64_t v44;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v43 + 24);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v44 - 168);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Fixed_Buffer::receive_zeros(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  double *v18;
  double *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  double *v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  _BYTE v35[32];
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  AMCP::DAL::DAL_Time_Range *v38;
  double **v39;

  v27 = *a3;
  v4 = *((_QWORD *)a3 + 3);
  v28 = *((_QWORD *)a3 + 2);
  v29 = v4;
  v5 = (std::__shared_weak_count *)*((_QWORD *)a3 + 4);
  v30 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v31 = *(__int128 *)((char *)a3 + 40);
  v8 = *((_QWORD *)a3 + 8);
  v32 = *((_QWORD *)a3 + 7);
  v33 = v8;
  v9 = (std::__shared_weak_count *)*((_QWORD *)a3 + 9);
  v34 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  AMCP::DAL::Fixed_Buffer::create_writable_range(a1, (uint64_t)&v27, (uint64_t)v35);
  v12 = v34;
  if (v34)
  {
    v13 = (unint64_t *)&v34->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v30;
  if (v30)
  {
    v16 = (unint64_t *)&v30->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  AMCP::DAL::DAL_Timed_Segment::translate_range(v26, v38, (uint64_t)v35);
  v18 = v26[0];
  v19 = v26[1];
  while (v18 != v19)
  {
    AMCP::DAL::Container::erase_range(*(_QWORD *)(a1 + 88));
    v18 += 12;
  }
  v39 = v26;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v39);
  v20 = v37;
  if (v37)
  {
    v21 = (unint64_t *)&v37->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1B59E0764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Fixed_Buffer::get_container@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 96);
  *a2 = *(_QWORD *)(this + 88);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t AMCP::DAL::Fixed_Buffer::get_time_range@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *(_OWORD *)a2 = *(_OWORD *)(this + 8);
  v2 = *(_QWORD *)(this + 32);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(this + 24);
  *(_QWORD *)(a2 + 24) = v2;
  v3 = *(_QWORD *)(this + 40);
  *(_QWORD *)(a2 + 32) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(this + 48);
  v6 = *(_QWORD *)(this + 72);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(this + 64);
  *(_QWORD *)(a2 + 64) = v6;
  v7 = *(_QWORD *)(this + 80);
  *(_QWORD *)(a2 + 72) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return this;
}

uint64_t AMCP::DAL::Fixed_Buffer::get_allowed_read_range@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *(_OWORD *)a2 = *(_OWORD *)(this + 8);
  v2 = *(_QWORD *)(this + 32);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(this + 24);
  *(_QWORD *)(a2 + 24) = v2;
  v3 = *(_QWORD *)(this + 40);
  *(_QWORD *)(a2 + 32) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(this + 48);
  v6 = *(_QWORD *)(this + 72);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(this + 64);
  *(_QWORD *)(a2 + 64) = v6;
  v7 = *(_QWORD *)(this + 80);
  *(_QWORD *)(a2 + 72) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return this;
}

double AMCP::DAL::Fixed_Buffer::get_format@<D0>(AMCP::DAL::Fixed_Buffer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    v3 = *(_OWORD *)(v2 + 8);
    v4 = *(_OWORD *)(v2 + 24);
    *(_OWORD *)a2 = v3;
    *(_OWORD *)(a2 + 16) = v4;
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(v2 + 40);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)&v3 = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return *(double *)&v3;
}

uint64_t AMCP::DAL::Fixed_Buffer::reuse(AMCP::DAL::Fixed_Buffer *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

void AMCP::DAL::Fixed_Buffer::set_anchor_time_and_nominal_buffer_size(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  AMCP::DAL::Fixed_Buffer::set_range(a1, a3);
}

void AMCP::DAL::Fixed_Buffer::increment_time_range(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;

  v46 = *a2;
  v3 = *((_QWORD *)a2 + 3);
  v47 = *((_QWORD *)a2 + 2);
  *(_QWORD *)&v48 = v3;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 4);
  *((_QWORD *)&v48 + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)&v44, a1);
  v42 = v3;
  v43 = v4;
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (v44 | v3) == 0;
  if (v44)
    v10 = v3 == 0;
  else
    v10 = 1;
  if (v10)
  {
LABEL_32:
    if (!v4)
      goto LABEL_37;
    goto LABEL_33;
  }
  v11 = (unsigned __int8 *)(*(uint64_t (**)(void))(*(_QWORD *)v44 + 16))();
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v13 = v11[23];
  if ((v13 & 0x80u) == 0)
    v14 = v11[23];
  else
    v14 = *((_QWORD *)v11 + 1);
  v15 = *(unsigned __int8 *)(v12 + 23);
  v16 = (char)v15;
  if ((v15 & 0x80u) != 0)
    v15 = *(_QWORD *)(v12 + 8);
  if (v14 == v15)
  {
    if (v16 >= 0)
      v17 = (unsigned __int8 *)v12;
    else
      v17 = *(unsigned __int8 **)v12;
    if ((v13 & 0x80) != 0)
    {
      v9 = memcmp(*(const void **)v11, v17, *((_QWORD *)v11 + 1)) == 0;
      goto LABEL_32;
    }
    if (v11[23])
    {
      v18 = v13 - 1;
      do
      {
        v20 = *v11++;
        v19 = v20;
        v22 = *v17++;
        v21 = v22;
        v24 = v18-- != 0;
        v9 = v19 == v21;
      }
      while (v19 == v21 && v24);
      goto LABEL_32;
    }
    v9 = 1;
    if (!v4)
      goto LABEL_37;
  }
  else
  {
    v9 = 0;
    if (!v4)
      goto LABEL_37;
  }
LABEL_33:
  v25 = (unint64_t *)&v4->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_37:
  v27 = v45;
  if (!v45)
    goto LABEL_41;
  v28 = (unint64_t *)&v45->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (v9)
      goto LABEL_55;
  }
  else
  {
LABEL_41:
    if (v9)
      goto LABEL_55;
  }
  if ((v46 & 1) == 0)
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v46);
  v30 = v47;
  AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)&v41, a1);
  v31 = v41;
  v41 = 0uLL;
  LODWORD(v46) = 1;
  *((_QWORD *)&v46 + 1) = 0;
  v47 = v30;
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  v48 = v31;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
LABEL_55:
  AMCP::DAL::DAL_Time::operator+=((AMCP::DAL::DAL_Time *)(a1 + 8), (uint64_t)&v46);
  AMCP::DAL::DAL_Time::operator+=((AMCP::DAL::DAL_Time *)(a1 + 48), (uint64_t)&v46);
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_1B59E0BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Fixed_Buffer::advance_to_time(AMCP::DAL::Fixed_Buffer *this, std::__shared_weak_count **a2)
{
  AMCP::DAL::DAL_Time *v4;
  _BOOL8 v5;
  uint64_t (**v6)();
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  BOOL v12;
  BOOL v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t host_time;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  NSObject *v56;
  _opaque_pthread_t *v57;
  mach_port_t v58;
  void *exception;
  std::string v60;
  std::__shared_weak_count *v61;
  uint64_t (**v62)();
  __int128 v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  std::logic_error v69;
  std::logic_error v70;
  std::__shared_weak_count *v71;
  __int128 v72;
  uint64_t v73;
  int v74;
  char v75;
  _BYTE buf[24];
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v4 = (AMCP::DAL::Fixed_Buffer *)((char *)this + 8);
  v5 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a2, (AMCP::DAL::Fixed_Buffer *)((char *)this + 8));
  if (v5)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v56 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      v57 = pthread_self();
      v58 = pthread_mach_thread_np(v57);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v58;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Fixed_Buffer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 97;
      LOWORD(v77) = 2080;
      *(_QWORD *)((char *)&v77 + 2) = "not (time >= m_time_range.start())";
      _os_log_error_impl(&dword_1B57BA000, v56, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v75);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v60);
    std::logic_error::logic_error(&v69, &v60);
    v69.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v70, &v69);
    v72 = 0uLL;
    v73 = 0;
    v74 = -1;
    v70.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v71 = (std::__shared_weak_count *)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
    *((_QWORD *)&v77 + 1) = "virtual void AMCP::DAL::Fixed_Buffer::advance_to_time(const DAL_Time &)";
    *(_QWORD *)&v78 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    DWORD2(v78) = 97;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v67);
    v62 = off_1E69A20A0;
    v63 = v67;
    v64 = v68;
    v67 = 0uLL;
    v68 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v62);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v70 = *(std::logic_error *)a2;
  v6 = (uint64_t (**)())a2[3];
  v71 = a2[2];
  *(_QWORD *)&v72 = v6;
  v7 = a2[4];
  *((_QWORD *)&v72 + 1) = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)buf, (uint64_t)this);
  v62 = v6;
  *(_QWORD *)&v63 = v7;
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = (*(_QWORD *)buf | (unint64_t)v6) == 0;
  if (*(_QWORD *)buf)
    v13 = v6 == 0;
  else
    v13 = 1;
  if (v13)
  {
LABEL_13:
    if (!v7)
      goto LABEL_37;
    goto LABEL_14;
  }
  v16 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 16))(*(_QWORD *)buf);
  v17 = (*((uint64_t (**)(uint64_t (**)()))*v6 + 2))(v6);
  v18 = v16[23];
  if ((v18 & 0x80u) == 0)
    v19 = v16[23];
  else
    v19 = *((_QWORD *)v16 + 1);
  v20 = *(unsigned __int8 *)(v17 + 23);
  v21 = (char)v20;
  if ((v20 & 0x80u) != 0)
    v20 = *(_QWORD *)(v17 + 8);
  if (v19 == v20)
  {
    if (v21 >= 0)
      v22 = (unsigned __int8 *)v17;
    else
      v22 = *(unsigned __int8 **)v17;
    if ((v18 & 0x80) != 0)
    {
      v12 = memcmp(*(const void **)v16, v22, *((_QWORD *)v16 + 1)) == 0;
      goto LABEL_13;
    }
    if (v16[23])
    {
      v23 = v18 - 1;
      do
      {
        v25 = *v16++;
        v24 = v25;
        v27 = *v22++;
        v26 = v27;
        v29 = v23-- != 0;
        v12 = v24 == v26;
      }
      while (v24 == v26 && v29);
      goto LABEL_13;
    }
    v12 = 1;
    if (!v7)
      goto LABEL_37;
  }
  else
  {
    v12 = 0;
    if (!v7)
      goto LABEL_37;
  }
LABEL_14:
  v14 = (unint64_t *)&v7->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_37:
  v30 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_41;
  v31 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    if (v12)
      goto LABEL_53;
  }
  else
  {
LABEL_41:
    if (v12)
      goto LABEL_53;
  }
  host_time = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)&v70);
  AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)&v66, (uint64_t)this);
  v34 = v66;
  v66 = 0uLL;
  LODWORD(v70.__vftable) = 1;
  v70.__imp_.__imp_ = 0;
  v71 = (std::__shared_weak_count *)host_time;
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  v72 = v34;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
  if (*((_QWORD *)&v66 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
LABEL_53:
  AMCP::DAL::DAL_Time::operator-((uint64_t)&v60, (AMCP::DAL::Fixed_Buffer *)((char *)this + 48), v4);
  boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v62, (uint64_t)&v70, (uint64_t)&v60);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (const AMCP::DAL::DAL_Time *)&v70, (const AMCP::DAL::DAL_Time *)&v62);
  *(_OWORD *)v4 = *(_OWORD *)buf;
  *((_QWORD *)v4 + 2) = *(_QWORD *)&buf[16];
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)this + 32, &v77);
  *((_OWORD *)this + 3) = v78;
  *((_QWORD *)this + 8) = v79;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)this + 72, &v80);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
  if (*((_QWORD *)&v80 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v65;
  if (v65)
  {
    v48 = (unint64_t *)&v65->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v61;
  if (v61)
  {
    v51 = (unint64_t *)&v61->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
}

void sub_1B59E120C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v33 + 24);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v34 + 24);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Fixed_Buffer::create_readable_range(AMCP::DAL::Fixed_Buffer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v16 = *(_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 4);
  v17 = *((_QWORD *)this + 3);
  v18 = v2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  v19 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v20 = *((_OWORD *)this + 3);
  v6 = *((_QWORD *)this + 9);
  v21 = *((_QWORD *)this + 8);
  v22 = v6;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v23 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  AMCP::DAL::Fixed_Buffer::create_readable_range((uint64_t)this, &v16, a2);
  v10 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1B59E1468(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Fixed_Buffer::create_readable_range(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _BOOL8 v14;
  BOOL v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 *v36;
  __int128 *v37;
  NSObject *v38;
  _opaque_pthread_t *v39;
  mach_port_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  double sample_time;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  double v58;
  double v59;
  double v60;
  void *exception;
  std::__shared_weak_count *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  double v79;
  double v80;
  double v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  __int128 v90;
  uint64_t v91;
  uint64_t (**v92)();
  __int128 v93;
  uint64_t v94;
  std::string v95;
  std::logic_error v96;
  std::logic_error v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  char v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  uint8_t buf[4];
  mach_port_t v121;
  __int16 v122;
  char *v123;
  __int16 v124;
  int v125;
  __int16 v126;
  _BYTE v127[28];
  __int16 v128;
  unint64_t v129;
  __int16 v130;
  unint64_t v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v112 = *(_OWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 32);
  v113 = *(_QWORD *)(a1 + 24);
  v114 = v6;
  v7 = *(std::__shared_weak_count **)(a1 + 40);
  v115 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v116 = *(_OWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 72);
  v117 = *(_QWORD *)(a1 + 64);
  v118 = v10;
  v11 = *(std::__shared_weak_count **)(a1 + 80);
  v119 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses((uint64_t)&v112, (uint64_t)a2);
  v15 = v14;
  v16 = v119;
  if (v119)
  {
    v17 = (unint64_t *)&v119->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v115;
  if (v115)
  {
    v20 = (unint64_t *)&v115->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (!v15)
  {
    v36 = (__int128 *)(a1 + 8);
    v37 = (__int128 *)(a1 + 48);
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v112, "com.apple.coreaudio", "AMCP");
    v38 = *(NSObject **)v112;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v112);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      v39 = pthread_self();
      v40 = pthread_mach_thread_np(v39);
      v112 = *v36;
      v42 = *(_QWORD *)(a1 + 32);
      v41 = *(std::__shared_weak_count **)(a1 + 40);
      v113 = *(_QWORD *)(a1 + 24);
      v114 = v42;
      v115 = v41;
      if (v41)
      {
        v43 = (unint64_t *)&v41->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v116 = *v37;
      v46 = *(_QWORD *)(a1 + 72);
      v45 = *(std::__shared_weak_count **)(a1 + 80);
      v117 = *(_QWORD *)(a1 + 64);
      v118 = v46;
      v119 = v45;
      if (v45)
      {
        v47 = (unint64_t *)&v45->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v112);
      v104 = *v36;
      v51 = *(_QWORD *)(a1 + 32);
      v50 = *(_QWORD *)(a1 + 40);
      v105 = *(_QWORD *)(a1 + 24);
      v106 = v51;
      v107 = v50;
      if (v50)
      {
        v52 = (unint64_t *)(v50 + 8);
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      v108 = *v37;
      v55 = *(_QWORD *)(a1 + 72);
      v54 = *(_QWORD *)(a1 + 80);
      v109 = *(_QWORD *)(a1 + 64);
      v110 = v55;
      v111 = v54;
      if (v54)
      {
        v56 = (unint64_t *)(v54 + 8);
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      v58 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v108);
      v59 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a2);
      v60 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a2 + 5));
      *(_DWORD *)buf = 67110914;
      v121 = v40;
      v122 = 2080;
      v123 = "Fixed_Buffer.cpp";
      v124 = 1024;
      v125 = 146;
      v126 = 2080;
      *(_QWORD *)v127 = "not (get_time_range().encompasses(range))";
      *(_WORD *)&v127[8] = 2048;
      *(_QWORD *)&v127[10] = vcvtmd_s64_f64(sample_time);
      *(_WORD *)&v127[18] = 2048;
      *(_QWORD *)&v127[20] = vcvtmd_s64_f64(v58);
      v128 = 2048;
      v129 = vcvtmd_s64_f64(v59);
      v130 = 2048;
      v131 = vcvtmd_s64_f64(v60);
      _os_log_error_impl(&dword_1B57BA000, v38, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s create_readable_range: [%lld  %lld]  range:[%lld  %lld]", buf, 0x4Au);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v110);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v106);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v118);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v114);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v103);
    exception = __cxa_allocate_exception(0x40uLL);
    v112 = *v36;
    v63 = *(_QWORD *)(a1 + 32);
    v62 = *(std::__shared_weak_count **)(a1 + 40);
    v113 = *(_QWORD *)(a1 + 24);
    v114 = v63;
    v115 = v62;
    if (v62)
    {
      v64 = (unint64_t *)&v62->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    v116 = *v37;
    v67 = *(_QWORD *)(a1 + 72);
    v66 = *(std::__shared_weak_count **)(a1 + 80);
    v117 = *(_QWORD *)(a1 + 64);
    v118 = v67;
    v119 = v66;
    if (v66)
    {
      v68 = (unint64_t *)&v66->__shared_owners_;
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }
    v70 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v112);
    v104 = *v36;
    v72 = *(_QWORD *)(a1 + 32);
    v71 = *(_QWORD *)(a1 + 40);
    v105 = *(_QWORD *)(a1 + 24);
    v106 = v72;
    v107 = v71;
    if (v71)
    {
      v73 = (unint64_t *)(v71 + 8);
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
    }
    v108 = *v37;
    v76 = *(_QWORD *)(a1 + 72);
    v75 = *(_QWORD *)(a1 + 80);
    v109 = *(_QWORD *)(a1 + 64);
    v110 = v76;
    v111 = v75;
    if (v75)
    {
      v77 = (unint64_t *)(v75 + 8);
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
    }
    v79 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v108);
    v80 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a2);
    v81 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a2 + 5));
    caulk::make_string((caulk *)"create_readable_range: [%lld  %lld]  range:[%lld  %lld]", (uint64_t)&v95, vcvtmd_s64_f64(v70), vcvtmd_s64_f64(v79), vcvtmd_s64_f64(v80), vcvtmd_s64_f64(v81));
    std::logic_error::logic_error(&v96, &v95);
    v96.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v97, &v96);
    v99 = 0;
    v100 = 0;
    v101 = 0;
    v102 = -1;
    v97.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v98 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v97);
    *(_QWORD *)&v127[6] = "virtual Readable_Range AMCP::DAL::Fixed_Buffer::create_readable_range(DAL_Time_Range) const";
    *(_QWORD *)&v127[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    *(_DWORD *)&v127[22] = 146;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v90);
    v93 = v90;
    v94 = v91;
    v90 = 0uLL;
    v91 = 0;
    v92 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v92);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v82 = *(_OWORD *)a2;
  v22 = a2[3];
  v83 = a2[2];
  v84 = v22;
  v23 = (std::__shared_weak_count *)a2[4];
  v85 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v86 = *(_OWORD *)(a2 + 5);
  v26 = a2[8];
  v87 = a2[7];
  v88 = v26;
  v27 = (std::__shared_weak_count *)a2[9];
  v89 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  AMCP::DAL::Readable_Range::Readable_Range(a3, (uint64_t)&v82, a1);
  v30 = v89;
  if (v89)
  {
    v31 = (unint64_t *)&v89->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v85;
  if (v85)
  {
    v34 = (unint64_t *)&v85->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1B59E1B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v63);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v62);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a14);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v61);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Fixed_Buffer::create_writable_range(AMCP::DAL::Fixed_Buffer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v16 = *(_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 4);
  v17 = *((_QWORD *)this + 3);
  v18 = v2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  v19 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v20 = *((_OWORD *)this + 3);
  v6 = *((_QWORD *)this + 9);
  v21 = *((_QWORD *)this + 8);
  v22 = v6;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v23 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  AMCP::DAL::Fixed_Buffer::create_writable_range((uint64_t)this, (uint64_t)&v16, a2);
  v10 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1B59E1DF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Fixed_Buffer::create_writable_range(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _BOOL8 v14;
  BOOL v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  _opaque_pthread_t *v37;
  mach_port_t v38;
  void *exception;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t (**v50)();
  __int128 v51;
  uint64_t v52;
  std::string v53;
  std::logic_error v54;
  std::logic_error v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char v61;
  _BYTE buf[24];
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)buf = *(_OWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 24);
  *(_QWORD *)&v63 = v6;
  v7 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)&v63 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v64 = *(_OWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 72);
  v65 = *(_QWORD *)(a1 + 64);
  v66 = v10;
  v11 = *(std::__shared_weak_count **)(a1 + 80);
  v67 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses((uint64_t)buf, a2);
  v15 = v14;
  v16 = v67;
  if (v67)
  {
    v17 = (unint64_t *)&v67->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (!v15)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v36 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      v37 = pthread_self();
      v38 = pthread_mach_thread_np(v37);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v38;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Fixed_Buffer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 164;
      LOWORD(v63) = 2080;
      *(_QWORD *)((char *)&v63 + 2) = "not (get_time_range().encompasses(range))";
      _os_log_error_impl(&dword_1B57BA000, v36, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v61);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v53);
    std::logic_error::logic_error(&v54, &v53);
    v54.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v55, &v54);
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v60 = -1;
    v55.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v56 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v55);
    *((_QWORD *)&v63 + 1) = "virtual Writable_Range AMCP::DAL::Fixed_Buffer::create_writable_range(DAL_Time_Range) const";
    *(_QWORD *)&v64 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    DWORD2(v64) = 164;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v48);
    v51 = v48;
    v52 = v49;
    v48 = 0uLL;
    v49 = 0;
    v50 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v50);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v40 = *(_OWORD *)a2;
  v22 = *(_QWORD *)(a2 + 24);
  v41 = *(_QWORD *)(a2 + 16);
  v42 = v22;
  v23 = *(std::__shared_weak_count **)(a2 + 32);
  v43 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v44 = *(_OWORD *)(a2 + 40);
  v26 = *(_QWORD *)(a2 + 64);
  v45 = *(_QWORD *)(a2 + 56);
  v46 = v26;
  v27 = *(std::__shared_weak_count **)(a2 + 72);
  v47 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  AMCP::DAL::Writable_Range::Writable_Range(a3, (uint64_t)&v40, a1);
  v30 = v47;
  if (v47)
  {
    v31 = (unint64_t *)&v47->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1B59E2230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  uint64_t v38;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v38);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v37);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Fixed_Buffer::get_direct_write_ranges@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  AMCP::DAL::DAL_Time *v6;
  _BOOL8 v7;
  double sample_time;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  caulk::rt_safe_memory_resource *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t result;
  NSObject *v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  void *exception;
  __int128 v33;
  uint64_t v34;
  _BYTE v35[24];
  uint64_t v36;
  std::string v37;
  std::logic_error v38;
  std::logic_error v39;
  void *v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  char v45;
  _BYTE buf[40];
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v6 = (AMCP::DAL::DAL_Time *)(a1 + 1);
  v7 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses((uint64_t)(a1 + 1), (uint64_t)a2);
  if (!v7)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v29 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v30 = pthread_self();
      v31 = pthread_mach_thread_np(v30);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v31;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Fixed_Buffer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 218;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not (m_time_range.encompasses(range))";
      _os_log_error_impl(&dword_1B57BA000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v45);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v37);
    std::logic_error::logic_error(&v38, &v37);
    v38.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v39, &v38);
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = -1;
    v39.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v40 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v39);
    *(_QWORD *)&buf[32] = "virtual rt_safe_vector<std::pair<Buffer_Time_Translator::Translation_Range, Container>> AMCP::"
                          "DAL::Fixed_Buffer::get_direct_write_ranges(const DAL_Time_Range &) const";
    *(_QWORD *)&v47 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    DWORD2(v47) = 218;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v33);
    *(_QWORD *)v35 = off_1E69A20A0;
    *(_OWORD *)&v35[8] = v33;
    v36 = v34;
    v33 = 0uLL;
    v34 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v35);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a2);
  v9 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a2 + 5));
  v10 = AMCP::DAL::DAL_Time::get_sample_time(v6);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  *(double *)buf = sample_time - v10;
  *(double *)&buf[8] = v9 - v10;
  *(_OWORD *)&buf[16] = *(_OWORD *)a2;
  v11 = a2[3];
  *(_QWORD *)&buf[32] = a2[2];
  *(_QWORD *)&v47 = v11;
  v12 = a2[4];
  *((_QWORD *)&v47 + 1) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v48 = *(_OWORD *)(a2 + 5);
  v16 = a2[8];
  v15 = a2[9];
  v49 = a2[7];
  *(_QWORD *)&v50 = v16;
  *((_QWORD *)&v50 + 1) = v15;
  if (v15)
  {
    v17 = (unint64_t *)(v15 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = a1[12];
  *(_QWORD *)v35 = a1[11];
  *(_QWORD *)&v35[8] = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v42 = a3 + 2;
  v22 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>((caulk::rt_safe_memory_resource *)1);
  v39.__vftable = (std::logic_error_vtbl *)v22;
  v39.__imp_.__imp_ = (const char *)v22;
  v41 = (char *)v22 + 112 * v23;
  *(_OWORD *)v22 = *(_OWORD *)buf;
  v24 = *(_OWORD *)&buf[16];
  *((_QWORD *)v22 + 4) = *(_QWORD *)&buf[32];
  *((_OWORD *)v22 + 1) = v24;
  *(_OWORD *)((char *)v22 + 40) = v47;
  v25 = v49;
  *(_OWORD *)((char *)v22 + 56) = v48;
  *((_QWORD *)v22 + 9) = v25;
  v26 = *(_OWORD *)v35;
  *((_OWORD *)v22 + 5) = v50;
  *((_OWORD *)v22 + 6) = v26;
  v47 = 0uLL;
  v50 = 0uLL;
  *(_OWORD *)v35 = 0uLL;
  v40 = (char *)v22 + 112;
  std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::__swap_out_circular_buffer(a3, &v39);
  v27 = a3[1];
  result = std::__split_buffer<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>> &>::~__split_buffer((uint64_t)&v39);
  a3[1] = v27;
  return result;
}

void sub_1B59E26E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;
  uint64_t v41;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v41);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v40);
  std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a37);
  _Unwind_Resume(a1);
}

BOOL caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses(uint64_t a1, uint64_t a2)
{
  AMCP::DAL::DAL_Time *v4;
  _BOOL8 result;

  v4 = (AMCP::DAL::DAL_Time *)(a1 + 40);
  result = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a1, (AMCP::DAL::DAL_Time *)(a1 + 40));
  if (result)
  {
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a2, (AMCP::DAL::DAL_Time *)(a2 + 40)))
      return !AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a2, (AMCP::DAL::DAL_Time *)a1)
          && !AMCP::DAL::DAL_Time::operator<(v4, (AMCP::DAL::DAL_Time *)(a2 + 40));
    else
      return 1;
  }
  return result;
}

caulk::rt_safe_memory_resource *std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::__destroy_vector::operator()[abi:ne180100](caulk::rt_safe_memory_resource *result)
{
  caulk::rt_safe_memory_resource **v1;
  caulk::rt_safe_memory_resource *v2;
  caulk::rt_safe_memory_resource ***v3;
  caulk::rt_safe_memory_resource *v4;
  caulk::rt_safe_memory_resource *v5;
  caulk::rt_safe_memory_resource **v6;

  v1 = *(caulk::rt_safe_memory_resource ***)result;
  v2 = **(caulk::rt_safe_memory_resource ***)result;
  if (v2)
  {
    v3 = (caulk::rt_safe_memory_resource ***)result;
    v4 = v1[1];
    v5 = **(caulk::rt_safe_memory_resource ***)result;
    v6 = v1;
    if (v4 != v2)
    {
      do
      {
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v4 - 16);
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v4 - 32);
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v4 - 72);
        v4 = (caulk::rt_safe_memory_resource *)((char *)v4 - 112);
      }
      while (v4 != v2);
      v6 = *v3;
      v5 = **v3;
    }
    v1[1] = v2;
    return std::allocator_traits<caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::deallocate[abi:ne180100](v5, 0x6DB6DB6DB6DB6DB7 * ((v6[2] - v5) >> 4));
  }
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (a2 < 0x24924924924924ALL)
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

caulk::rt_safe_memory_resource *std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>(caulk::rt_safe_memory_resource *result)
{
  if ((unint64_t)result < 0x24924924924924ALL)
  {
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_allocate(result);
  }
  __break(1u);
  return result;
}

uint64_t *std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_OWORD *)(v6 - 112) = *(_OWORD *)(v2 + v5 - 112);
      v8 = *(_OWORD *)(v2 + v5 - 96);
      *(_QWORD *)(v6 - 80) = *(_QWORD *)(v2 + v5 - 80);
      *(_OWORD *)(v6 - 96) = v8;
      *(_OWORD *)(v6 - 72) = *(_OWORD *)(v2 + v5 - 72);
      *(_QWORD *)(v7 - 72) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      v9 = *(_OWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v6 - 40) = *(_QWORD *)(v2 + v5 - 40);
      *(_OWORD *)(v6 - 56) = v9;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v6 - 16) = *(_OWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 112;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v10 = *result;
  *result = v4;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 112;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](i - 16);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](i - 32);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](i - 72);
  }
  if (*(_QWORD *)a1)
    std::allocator_traits<caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)a1, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)a1) >> 4));
  return a1;
}

void AMCP::DAL::Fixed_Buffer::set_range(uint64_t a1, _QWORD *a2)
{
  AMCP::DAL::DAL_Time *v4;
  AMCP::Log::Scope_Registry *v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __n128 v10;
  double v11;
  AMCP::Log::Scope_Registry *v12;
  double v13;
  double v14;
  double v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  _opaque_pthread_t *v37;
  mach_port_t v38;
  void *exception;
  NSObject *v40;
  _opaque_pthread_t *v41;
  mach_port_t v42;
  void *v43;
  __int128 v44;
  uint64_t (**v45)();
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  std::string v50;
  std::logic_error v51;
  std::logic_error v52;
  void *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  int v57;
  char v58;
  _BYTE buf[24];
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v4 = (AMCP::DAL::DAL_Time *)(a2 + 5);
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (AMCP::DAL::DAL_Time *)(a2 + 5), (AMCP::DAL::DAL_Time *)a2);
  if ((buf[0] & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
  v6 = round(*(double *)&buf[8]);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v6 < 0.0)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v36 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      v37 = pthread_self();
      v38 = pthread_mach_thread_np(v37);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v38;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Fixed_Buffer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 180;
      LOWORD(v60) = 2080;
      *(_QWORD *)((char *)&v60 + 2) = "not (range.length().get_sample_delta() >= 0_S)";
      _os_log_error_impl(&dword_1B57BA000, v36, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v58);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v50);
    std::logic_error::logic_error(&v51, &v50);
    v51.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v52, &v51);
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = -1;
    v52.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v53 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v52);
    *((_QWORD *)&v60 + 1) = "void AMCP::DAL::Fixed_Buffer::set_range(const DAL_Time_Range &)";
    *(_QWORD *)&v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    DWORD2(v61) = 180;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v48);
    v45 = off_1E69A20A0;
    v46 = v48;
    *(_QWORD *)&v47 = v49;
    v48 = 0uLL;
    v49 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v45);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v10.n128_f64[0] = AMCP::DAL::DAL_Time::operator-((uint64_t)buf, v4, (AMCP::DAL::DAL_Time *)a2);
  if ((buf[0] & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
  v11 = *(double *)&buf[8];
  v12 = *(AMCP::Log::Scope_Registry **)(a1 + 88);
  if (v12)
    v12 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *, __n128))(*(_QWORD *)v12 + 48))(v12, v10);
  else
    v13 = 0.0;
  v14 = round(v13);
  v15 = round(v11);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v14 < v15)
  {
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v40 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v41 = pthread_self();
      v42 = pthread_mach_thread_np(v41);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v42;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Fixed_Buffer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 181;
      LOWORD(v60) = 2080;
      *(_QWORD *)((char *)&v60 + 2) = "not (range.length().get_sample_delta() <= m_container.get_length_in_frames())";
      _os_log_error_impl(&dword_1B57BA000, v40, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v58);
    v43 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v50);
    std::logic_error::logic_error(&v51, &v50);
    v51.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v52, &v51);
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = -1;
    v52.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v53 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v52);
    *((_QWORD *)&v60 + 1) = "void AMCP::DAL::Fixed_Buffer::set_range(const DAL_Time_Range &)";
    *(_QWORD *)&v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    DWORD2(v61) = 181;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v48);
    v45 = off_1E69A20A0;
    v46 = v48;
    *(_QWORD *)&v47 = v49;
    v48 = 0uLL;
    v49 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v45);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v43, (uint64_t)buf);
  }
  v19 = *(_QWORD *)(a1 + 88);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 48))(v19);
  else
    v20 = 0;
  v21 = a2[4];
  *(_QWORD *)&v44 = a2[3];
  *((_QWORD *)&v44 + 1) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  LODWORD(v45) = 2;
  v46 = v20;
  v47 = v44;
  boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v52, (uint64_t)a2, (uint64_t)&v45);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (const AMCP::DAL::DAL_Time *)a2, (const AMCP::DAL::DAL_Time *)&v52);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)&buf[16];
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 32, &v60);
  *(_OWORD *)(a1 + 48) = v61;
  *(_QWORD *)(a1 + 64) = v62;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 72, &v63);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1B59E31BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v31 - 152);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>(caulk::rt_safe_memory_resource *result)
{
  if ((unint64_t)result < 0x2AAAAAAAAAAAAABLL)
  {
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_allocate(result);
  }
  __break(1u);
  return result;
}

uint64_t *std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_OWORD *)(v6 - 96) = *(_OWORD *)(v2 + v5 - 96);
      v8 = *(_OWORD *)(v2 + v5 - 80);
      *(_QWORD *)(v6 - 64) = *(_QWORD *)(v2 + v5 - 64);
      *(_OWORD *)(v6 - 80) = v8;
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      v9 = *(_OWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v6 - 24) = *(_QWORD *)(v2 + v5 - 24);
      *(_OWORD *)(v6 - 40) = v9;
      *(_OWORD *)(v6 - 16) = *(_OWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 96;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v10 = *result;
  *result = v4;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](i - 16);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](i - 56);
  }
  if (*(_QWORD *)a1)
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)a1, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)a1) >> 5));
  return a1;
}

void write_to_dal_buffer(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t **a6, uint64_t *a7, uint64_t a8)
{
  int64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  _BYTE v90[32];
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  void (**v97)(AMCP::DAL::Fixed_Buffer *__hidden);
  __int128 v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  _QWORD v108[2];
  __int128 v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count *v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  _BYTE v117[32];
  std::__shared_weak_count *v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  __int128 v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  std::__shared_weak_count *v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;

  AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)&v97, a5);
  if ((v97 & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v97);
  v15 = vcvtmd_s64_f64(*(double *)&v98);
  v16 = v100;
  if (v100)
  {
    p_shared_owners = (unint64_t *)&v100->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15 < a2)
  {
    AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)&v97, a5);
    if ((v97 & 2) == 0)
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v97);
    v19 = vcvtmd_s64_f64(*(double *)&v98);
    v20 = v100;
    if (v100)
    {
      v21 = (unint64_t *)&v100->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = a2 - v19;
    *a3 += a2 - v19;
    a2 = v19 - (a2 - v19);
    a1 += 4 * v23 * *(unsigned int *)(a4 + 24);
  }
  if (a2 >= 1)
  {
    v24 = (double)*a3;
    v25 = (double)(*a3 + a2);
    v26 = a7[1];
    v120 = *a7;
    v121 = (std::__shared_weak_count *)v26;
    if (v26)
    {
      v27 = (unint64_t *)(v26 + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v122, &v120, v24, v25);
    v29 = v121;
    if (v121)
    {
      v30 = (unint64_t *)&v121->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v109 = v122;
    v110 = v123;
    v111 = v124;
    v112 = v125;
    if (v125)
    {
      v32 = (unint64_t *)&v125->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v113 = v126;
    v114 = v127;
    v115 = v128;
    v116 = v129;
    if (v129)
    {
      v34 = (unint64_t *)&v129->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    AMCP::DAL::Ring_Buffer_Base::create_writable_range(a5, &v109, (uint64_t)v117);
    v36 = v116;
    if (v116)
    {
      v37 = (unint64_t *)&v116->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = v112;
    if (v112)
    {
      v40 = (unint64_t *)&v112->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = *(unsigned int *)(a4 + 24);
    v108[0] = a2 * v42;
    if (a2 * v42 < 0 || (v108[1] = a1) == 0 && (_DWORD)v42)
      std::terminate();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)**a6 + 24))(**a6, v108);
    v44 = **a6;
    v43 = (std::__shared_weak_count *)(*a6)[1];
    if (v43)
    {
      v45 = (unint64_t *)&v43->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v95 = v122;
    v47 = v124;
    v96 = v123;
    v48 = v125;
    if (v125)
    {
      v49 = (unint64_t *)&v125->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v93 = v126;
    v94 = v127;
    v51 = v128;
    v52 = v129;
    if (v129)
    {
      v53 = (unint64_t *)&v129->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v98 = v95;
    v97 = &off_1E699F3C8;
    v99 = v96;
    v100 = v47;
    v101 = v48;
    if (v48)
    {
      v55 = (unint64_t *)&v48->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    v102 = v93;
    v103 = v94;
    v104 = v51;
    v105 = v52;
    if (v52)
    {
      v57 = (unint64_t *)&v52->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      v106 = v44;
      v107 = v43;
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    else
    {
      v106 = v44;
      v107 = v43;
    }
    if (v48)
    {
      v60 = (unint64_t *)&v48->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    AMCP::DAL::Fixed_Buffer::create_readable_range((AMCP::DAL::Fixed_Buffer *)&v97, (uint64_t)v90);
    AMCP::DAL::Writable_Range::receive_data((uint64_t)v117, a8, (AMCP::DAL::DAL_Time *)v90);
    v62 = v92;
    if (v92)
    {
      v63 = (unint64_t *)&v92->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v65 = v91;
    if (v91)
    {
      v66 = (unint64_t *)&v91->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    v97 = &off_1E699F3C8;
    v68 = v107;
    if (v107)
    {
      v69 = (unint64_t *)&v107->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = v105;
    if (v105)
    {
      v72 = (unint64_t *)&v105->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v74 = v101;
    if (v101)
    {
      v75 = (unint64_t *)&v101->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v77 = v119;
    if (v119)
    {
      v78 = (unint64_t *)&v119->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v80 = v118;
    if (v118)
    {
      v81 = (unint64_t *)&v118->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    v83 = v129;
    if (v129)
    {
      v84 = (unint64_t *)&v129->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    v86 = v125;
    if (v125)
    {
      v87 = (unint64_t *)&v125->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
  }
}

void sub_1B59E3B58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 + 24);
  _Unwind_Resume(a1);
}

void read_from_dal_buffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5, uint64_t *a6, void *a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  void (**v94)(AMCP::DAL::Fixed_Buffer *__hidden);
  __int128 v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  _QWORD v105[2];
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  const AMCP::DAL::DAL_Time_Range *v114[4];
  std::__shared_weak_count *v115;
  std::__shared_weak_count *v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  _QWORD v125[4];
  std::__shared_weak_count *v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  __int128 v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count *v133;
  __int128 v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count *v137;

  bzero(a7, *(unsigned int *)(a3 + 24) * a1);
  v14 = a6[1];
  v128 = *a6;
  v129 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v130, &v128, (double)a2, (double)(a2 + a1));
  v17 = v129;
  if (v129)
  {
    p_shared_owners = (unint64_t *)&v129->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a4 + 72))(v125, a4);
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersection((uint64_t)&v94, &v130, v125);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v117, (__int128 *)&v94);
  v20 = v101;
  if (v101)
  {
    v21 = (unint64_t *)&v101->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v97;
  if (v97)
  {
    v24 = (unint64_t *)&v97->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v117, (AMCP::DAL::DAL_Time *)&v121))
  {
    v106 = v117;
    v107 = v118;
    v108 = v119;
    v109 = v120;
    if (v120)
    {
      v26 = (unint64_t *)&v120->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v110 = v121;
    v111 = v122;
    v112 = v123;
    v113 = v124;
    if (v124)
    {
      v28 = (unint64_t *)&v124->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    AMCP::DAL::Ring_Buffer_Base::create_readable_range(a4, (uint64_t)&v106, (uint64_t)v114);
    v30 = v113;
    if (v113)
    {
      v31 = (unint64_t *)&v113->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = v109;
    if (v109)
    {
      v34 = (unint64_t *)&v109->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = *(unsigned int *)(a3 + 24) * a1;
    v105[0] = v36;
    if (v36 < 0 || (v105[1] = a7) == 0 && v36)
      std::terminate();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)**a5 + 24))(**a5, v105);
    v39 = **a5;
    v38 = (std::__shared_weak_count *)(*a5)[1];
    if (v38)
    {
      v40 = (unint64_t *)&v38->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v92 = v130;
    v42 = v132;
    v93 = v131;
    v43 = v133;
    if (v133)
    {
      v44 = (unint64_t *)&v133->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v90 = v134;
    v46 = v136;
    v91 = v135;
    v47 = v137;
    if (v137)
    {
      v48 = (unint64_t *)&v137->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    v94 = &off_1E699F3C8;
    v95 = v92;
    v96 = v93;
    v97 = v42;
    v98 = v43;
    if (v43)
    {
      v50 = (unint64_t *)&v43->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    v99 = v90;
    v100 = v91;
    v101 = v46;
    v102 = v47;
    if (v47)
    {
      v52 = (unint64_t *)&v47->__shared_owners_;
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
      v103 = v39;
      v104 = v38;
      do
        v54 = __ldaxr(v52);
      while (__stlxr(v54 - 1, v52));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    else
    {
      v103 = v39;
      v104 = v38;
    }
    if (v43)
    {
      v55 = (unint64_t *)&v43->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    AMCP::DAL::Fixed_Buffer::receive_data((uint64_t)&v94, v37, v114);
    v57 = v104;
    v94 = &off_1E699F3C8;
    if (v104)
    {
      v58 = (unint64_t *)&v104->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = v102;
    if (v102)
    {
      v61 = (unint64_t *)&v102->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = v98;
    if (v98)
    {
      v64 = (unint64_t *)&v98->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = v116;
    if (v116)
    {
      v67 = (unint64_t *)&v116->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v69 = v115;
    if (v115)
    {
      v70 = (unint64_t *)&v115->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
  }
  v72 = v124;
  if (v124)
  {
    v73 = (unint64_t *)&v124->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = v120;
  if (v120)
  {
    v76 = (unint64_t *)&v120->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = v127;
  if (v127)
  {
    v79 = (unint64_t *)&v127->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v126;
  if (v126)
  {
    v82 = (unint64_t *)&v126->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v137;
  if (v137)
  {
    v85 = (unint64_t *)&v137->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v133;
  if (v133)
  {
    v88 = (unint64_t *)&v133->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
}

void sub_1B59E4260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;

  AMCP::DAL::Fixed_Buffer::~Fixed_Buffer((AMCP::DAL::Fixed_Buffer *)&a16);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v61 - 176);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v61 - 216);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v61 - 80);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v61 - 120);
  _Unwind_Resume(a1);
}

void sub_1B59E4304()
{
  JUMPOUT(0x1B59E42E8);
}

void sub_1B59E430C()
{
  JUMPOUT(0x1B59E42F8);
}

uint64_t caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::store(uint64_t result, _OWORD *a2)
{
  unsigned __int8 *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v3 = (unsigned __int8 *)result;
  v16 = 0;
  v4 = (unsigned int *)(result + 4);
  v5 = result + 64;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 + 1, v4));
  v7 = v5 + ((unint64_t)(v6 & 1) << 6);
  v8 = 2 * v6;
  atomic_store(2 * v6, (unsigned int *)v7);
  *(_OWORD *)(v7 + 4) = *a2;
  __dmb(0xBu);
  v9 = (2 * v6) | 1;
  do
  {
    v10 = __ldaxr((unsigned int *)v7);
    if (v10 != v8)
    {
      while (1)
      {
        __clrex();
        result = caulk::concurrent::details::spinloop::spin((uint64_t)&v16);
        do
          v11 = __ldaxr(v4);
        while (__stlxr(v11 + 1, v4));
        v12 = v5 + ((unint64_t)(v11 & 1) << 6);
        v13 = 2 * v11;
        atomic_store(2 * v11, (unsigned int *)v12);
        *(_OWORD *)(v12 + 4) = *a2;
        __dmb(0xBu);
        v14 = (2 * v11) | 1;
        while (1)
        {
          v15 = __ldaxr((unsigned int *)v12);
          if (v15 != v13)
            break;
          if (!__stlxr(v14, (unsigned int *)v12))
            goto LABEL_12;
        }
      }
    }
  }
  while (__stlxr(v9, (unsigned int *)v7));
LABEL_12:
  atomic_store(1u, v3);
  return result;
}

uint64_t caulk::concurrent::details::spinloop::spin(uint64_t this)
{
  int v1;
  _DWORD *v2;

  v1 = *(_DWORD *)this + 1;
  *(_DWORD *)this = v1;
  if (v1 == 100)
  {
    v2 = (_DWORD *)this;
    this = sched_yield();
    *v2 = 0;
  }
  return this;
}

void AMCP::IO_Core::Thread_Control_State::set_state(pthread_cond_t *a1, int a2)
{
  char v4;
  AMCP::Utility::Kernel_Error_Category *v5;
  unsigned int v6;
  AMCP::Log::Scope_Registry *v7;
  NSObject *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  void *exception;
  __int128 v12;
  uint64_t v13;
  uint64_t (**v14)();
  __int128 v15;
  uint64_t v16;
  std::runtime_error v17;
  __int128 v18;
  std::runtime_error v19;
  __int128 v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint8_t buf[8];
  _BYTE v28[10];
  __int16 v29;
  int v30;
  __int16 v31;
  const char *v32;
  const char *v33;
  const char *v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)a1) != a2)
  {
    *(_DWORD *)buf = a2;
    buf[4] = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)a1) != 0;
    buf[5] = 0;
    *(_DWORD *)v28 = 4;
    caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)a1);
    v28[4] = v4 & 1;
    caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::store((uint64_t)a1, buf);
    v5 = (AMCP::Utility::Kernel_Error_Category *)pthread_cond_broadcast(a1 + 4);
    v6 = v5;
    AMCP::Utility::Kernel_Error_Category::get(v5);
    if (v6)
    {
      AMCP::Log::Scope_Registry::get(v7);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v8 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v9 = pthread_self();
        v10 = pthread_mach_thread_np(v9);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v10;
        *(_WORD *)v28 = 2080;
        *(_QWORD *)&v28[2] = "Thread_Control_State.cpp";
        v29 = 1024;
        v30 = 79;
        v31 = 2080;
        v32 = "kernel_error.operator BOOL()";
        _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set the signaling the condition variable", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
      exception = __cxa_allocate_exception(0x50uLL);
      MEMORY[0x1B5E50220](&v17, v6, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
      std::runtime_error::runtime_error(&v19, &v17);
      v20 = v18;
      v23 = 0;
      v24 = 0;
      v25 = -1;
      v19.__vftable = (std::runtime_error_vtbl *)&off_1E69A12F8;
      v21 = &unk_1E69A1320;
      v22 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
      v33 = "void AMCP::IO_Core::Thread_Control_State::set_state(Transport_State)";
      v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
      v35 = 79;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
      v14 = off_1E69A20A0;
      v15 = v12;
      v16 = v13;
      v12 = 0uLL;
      v13 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)buf, (uint64_t)&v14);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
  }
}

void sub_1B59E4694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, uint64_t a18, uint64_t a19, std::runtime_error a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  void *v24;
  int v25;
  uint64_t v26;
  uint64_t v28;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v26 - 96) = &unk_1E69A2000;
  v28 = *(_QWORD *)(v26 - 88);
  if (v28 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28))
    *(_QWORD *)(v26 - 88) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v26 - 128));
  a23 = &unk_1E69A2000;
  if (a24 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a24 + 32))(a24))
    a24 = 0;
  std::runtime_error::~runtime_error(&a20);
  std::runtime_error::~runtime_error(&a17);
  if (v25)
    __cxa_free_exception(v24);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v26 - 129));
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t result;
  unsigned __int8 v4;
  char v5;
  char v6;
  char v7;
  char v8;
  unint64_t v9;
  unsigned int v10;
  unsigned __int8 v11;
  int v12;

  v1 = atomic_load((unsigned __int8 *)a1);
  if ((v1 & 1) == 0)
    return 0;
  v12 = 0;
  v4 = atomic_load((unsigned __int8 *)a1);
  if ((v4 & 1) != 0)
  {
    do
    {
      v5 = atomic_load((unsigned int *)(a1 + 4));
      v6 = v5 - 1;
      v7 = 1;
      while (1)
      {
        v8 = v7;
        v9 = a1 + 64 + ((unint64_t)(v6 & 1) << 6);
        v10 = atomic_load((unsigned int *)v9);
        if ((v10 & 1) != 0)
          break;
        v7 = 0;
        --v6;
        if ((v8 & 1) == 0)
          goto LABEL_11;
      }
      result = *(_QWORD *)(v9 + 4);
      __dmb(9u);
      if (v10 == *(_DWORD *)v9)
        return result;
      caulk::concurrent::details::spinloop::spin((uint64_t)&v12);
LABEL_11:
      v11 = atomic_load((unsigned __int8 *)a1);
    }
    while ((v11 & 1) != 0);
  }
  _os_assert_log();
  result = _os_crash();
  __break(1u);
  return result;
}

void AMCP::IO_Core::Thread_Control_State::sleep_until_time(AMCP::IO_Core::Thread_Control_State *this, uint64_t a2)
{
  unint64_t v3;
  __darwin_time_t v4;
  AMCP::Utility::Kernel_Error_Category *v5;
  unsigned int v6;
  AMCP::Log::Scope_Registry *v7;
  AMCP::Utility::Kernel_Error_Category *v8;
  unsigned int v9;
  AMCP::Log::Scope_Registry *v10;
  AMCP::Utility::Kernel_Error_Category *v11;
  unsigned int v12;
  AMCP::Log::Scope_Registry *v13;
  NSObject *v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  void *exception;
  NSObject *v18;
  _opaque_pthread_t *v19;
  mach_port_t v20;
  void *v21;
  NSObject *v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  void *v25;
  NSObject *v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  void *v29;
  std::logic_error v30;
  char v31;
  timespec v32;
  __int128 v33;
  uint64_t v34;
  std::string v35;
  uint64_t v36;
  uint64_t (**v37)();
  _BYTE v38[24];
  std::runtime_error v39;
  __int128 v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint8_t buf[8];
  __int16 v47;
  char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  _BYTE v52[14];
  const char *v53;
  const char *v54;
  const char *v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (a2 > mach_absolute_time()
    && caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this)
    && (caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this) & 0x10000000000) == 0)
  {
    v3 = __udivti3();
    if (v3 >= 0x3B9ACA00)
    {
      v4 = v3 / 0x3B9ACA00;
      v3 %= 0x3B9ACA00uLL;
    }
    else
    {
      v4 = 0;
    }
    v32.tv_sec = v4;
    v32.tv_nsec = v3;
    v5 = (AMCP::Utility::Kernel_Error_Category *)pthread_mutex_lock((pthread_mutex_t *)((char *)this + 240));
    v6 = v5;
    AMCP::Utility::Kernel_Error_Category::get(v5);
    if (v6 >= 2)
    {
      AMCP::Log::Scope_Registry::get(v7);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v14 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v15 = pthread_self();
        v16 = pthread_mach_thread_np(v15);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v16;
        v47 = 2080;
        v48 = "Thread_Control_State.cpp";
        v49 = 1024;
        v50 = 51;
        v51 = 2080;
        *(_QWORD *)v52 = "kernel_error.operator BOOL()";
        _os_log_error_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to lock the mutex", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
      exception = __cxa_allocate_exception(0x50uLL);
      MEMORY[0x1B5E50220](&v37, v6, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
      std::runtime_error::runtime_error(&v39, (const std::runtime_error *)&v37);
      v40 = *(_OWORD *)&v38[8];
      v43 = 0;
      v44 = 0;
      v45 = -1;
      v39.__vftable = (std::runtime_error_vtbl *)&off_1E69A12F8;
      v41 = &unk_1E69A1320;
      v42 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v39);
      v54 = "BOOL AMCP::IO_Core::Thread_Control_State::lock()";
      v55 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
      v56 = 51;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v33);
      *(_OWORD *)&v35.__r_.__value_.__r.__words[1] = v33;
      v36 = v34;
      v33 = 0uLL;
      v34 = 0;
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)buf, (uint64_t)&v35);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
    if (v6 == 1)
    {
      AMCP::Log::Scope_Registry::get(v7);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v26 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        v27 = pthread_self();
        v28 = pthread_mach_thread_np(v27);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v28;
        v47 = 2080;
        v48 = "Thread_Control_State.cpp";
        v49 = 1024;
        v50 = 155;
        v51 = 2080;
        *(_QWORD *)v52 = "not (success)";
        _os_log_error_impl(&dword_1B57BA000, v26, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
      v29 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v35);
      std::logic_error::logic_error(&v30, &v35);
      v30.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)&v39, &v30);
      *((_QWORD *)&v40 + 1) = 0;
      v41 = 0;
      v42 = 0;
      LODWORD(v43) = -1;
      v39.__vftable = (std::runtime_error_vtbl *)off_1E69A1208;
      *(_QWORD *)&v40 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v39);
      *(_QWORD *)&v52[6] = "BOOL AMCP::IO_Core::Thread_Control_State::sleep_until_time(uint64_t)";
      v53 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
      LODWORD(v54) = 155;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v33);
      v37 = off_1E69A20A0;
      *(_OWORD *)v38 = v33;
      *(_QWORD *)&v38[16] = v34;
      v33 = 0uLL;
      v34 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v37);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v29, (uint64_t)buf);
    }
    v8 = (AMCP::Utility::Kernel_Error_Category *)pthread_cond_timedwait_relative_np((pthread_cond_t *)this + 4, (pthread_mutex_t *)((char *)this + 240), &v32);
    v9 = v8;
    AMCP::Utility::Kernel_Error_Category::get(v8);
    if (v9 && v9 != 60)
    {
      AMCP::Log::Scope_Registry::get(v10);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v22 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v23 = pthread_self();
        v24 = pthread_mach_thread_np(v23);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v24;
        v47 = 2080;
        v48 = "Thread_Control_State.cpp";
        v49 = 1024;
        v50 = 161;
        v51 = 2080;
        *(_QWORD *)v52 = "kernel_error.operator BOOL()";
        _os_log_error_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failure waiting for the condition variable", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
      v25 = __cxa_allocate_exception(0x50uLL);
      MEMORY[0x1B5E50220](&v37, v9, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
      std::runtime_error::runtime_error(&v39, (const std::runtime_error *)&v37);
      v40 = *(_OWORD *)&v38[8];
      v43 = 0;
      v44 = 0;
      v45 = -1;
      v39.__vftable = (std::runtime_error_vtbl *)&off_1E69A12F8;
      v41 = &unk_1E69A1320;
      v42 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v39);
      v54 = "BOOL AMCP::IO_Core::Thread_Control_State::sleep_until_time(uint64_t)";
      v55 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
      v56 = 161;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v33);
      *(_OWORD *)&v35.__r_.__value_.__r.__words[1] = v33;
      v36 = v34;
      v33 = 0uLL;
      v34 = 0;
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)buf, (uint64_t)&v35);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)v25, (uint64_t)buf);
    }
    v11 = (AMCP::Utility::Kernel_Error_Category *)pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 240));
    v12 = v11;
    AMCP::Utility::Kernel_Error_Category::get(v11);
    if (v12 >= 2)
    {
      AMCP::Log::Scope_Registry::get(v13);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v18 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v19 = pthread_self();
        v20 = pthread_mach_thread_np(v19);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v20;
        v47 = 2080;
        v48 = "Thread_Control_State.cpp";
        v49 = 1024;
        v50 = 64;
        v51 = 2080;
        *(_QWORD *)v52 = "kernel_error.operator BOOL()";
        _os_log_error_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to unlock the mutex", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
      v21 = __cxa_allocate_exception(0x50uLL);
      MEMORY[0x1B5E50220](&v37, v12, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
      std::runtime_error::runtime_error(&v39, (const std::runtime_error *)&v37);
      v40 = *(_OWORD *)&v38[8];
      v43 = 0;
      v44 = 0;
      v45 = -1;
      v39.__vftable = (std::runtime_error_vtbl *)&off_1E69A12F8;
      v41 = &unk_1E69A1320;
      v42 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v39);
      v54 = "BOOL AMCP::IO_Core::Thread_Control_State::unlock()";
      v55 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
      v56 = 64;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v33);
      *(_OWORD *)&v35.__r_.__value_.__r.__words[1] = v33;
      v36 = v34;
      v33 = 0uLL;
      v34 = 0;
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)buf, (uint64_t)&v35);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)v21, (uint64_t)buf);
    }
  }
}

void sub_1B59E4FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,void *__p,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::runtime_error a28,uint64_t a29,uint64_t a30,std::runtime_error a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  void *v35;
  int v36;
  uint64_t v37;
  uint64_t v39;

  if (a28.__imp_.__imp_)
    operator delete((void *)a28.__imp_.__imp_);
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  *(_QWORD *)(v37 - 128) = &unk_1E69A2000;
  v39 = *(_QWORD *)(v37 - 120);
  if (v39 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39))
    *(_QWORD *)(v37 - 120) = 0;
  MEMORY[0x1B5E500E8](v37 - 144);
  a32 = &unk_1E69A2000;
  if (a33 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a33 + 32))(a33))
    a33 = 0;
  MEMORY[0x1B5E500E8](&a31);
  MEMORY[0x1B5E500DC](&a10);
  if (a26 < 0)
    operator delete(a21);
  if (v36)
    __cxa_free_exception(v35);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a15);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::Device_Timebase::~Device_Timebase(AMCP::IO_Core::Device_Timebase *this)
{
  AMCP::IO_Core::Device_Timebase::~Device_Timebase(this);
  JUMPOUT(0x1B5E50688);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t AMCP::IO_Core::Device_Timebase::get_clock_id(AMCP::IO_Core::Device_Timebase *this)
{
  return (uint64_t)this + 8;
}

void AMCP::IO_Core::Device_Timebase::get_underlying_device_uid(AMCP::IO_Core::Device_Timebase *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  const void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::runtime_error *exception;
  CFTypeRef cf[3];

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4), (cf[2] = v5) != 0))
  {
    v6 = v5;
    v7 = (const void *)*((_QWORD *)this + 4);
    cf[1] = v7;
    if (v7)
    {
      (*(void (**)(CFTypeRef *__return_ptr))(*(_QWORD *)v7 + 16))(cf);
      if (!cf[0])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)a2, (const __CFString *)cf[0]);
      if (cf[0])
        CFRelease(cf[0]);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_1B59E53B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, __int16 a11, char a12, char a13)
{
  void *v13;

  __cxa_free_exception(v13);
  applesauce::CF::StringRef::~StringRef(&a10);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::Device_Timebase::get_current_time(AMCP::IO_Core::Device_Timebase *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *exception;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  std::string v18;
  std::logic_error v19;
  std::logic_error v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint8_t buf[8];
  _BYTE v28[10];
  __int16 v29;
  int v30;
  __int16 v31;
  _BYTE v32[14];
  const char *v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v2
    || (v2 = std::__shared_weak_count::lock(v2), (v3 = v2) == 0)
    || (v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = *(std::__shared_weak_count **)v28;
    v7 = **(NSObject ***)buf;
    if (*(_QWORD *)v28)
    {
      v8 = (unint64_t *)(*(_QWORD *)v28 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)v28 = 2080;
      *(_QWORD *)&v28[2] = "Device_Timebase.cpp";
      v29 = 1024;
      v30 = 41;
      v31 = 2080;
      *(_QWORD *)v32 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v20, &v19);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v21 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(_QWORD *)&v32[6] = "virtual CA::TimeStamp AMCP::IO_Core::Device_Timebase::get_current_time() const";
    v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v34 = 41;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    v16 = v13;
    v17 = v14;
    v13 = 0uLL;
    v14 = 0;
    v15 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v15);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  ((void (*)(std::__shared_weak_count *))v2->__vftable[8].__on_zero_shared)(v2);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1B59E56A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(exception_object);
}

void AMCP::IO_Core::Device_Timebase::get_last_zero_time_stamp(AMCP::IO_Core::Device_Timebase *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  AMCP::Log::Scope_Registry *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *exception;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  const __CFString **v18;
  void *v19;
  void *v20;
  const __CFString **v21;
  std::logic_error *v22;
  std::logic_error v23;
  uint64_t v24;
  uint64_t v25;
  std::logic_error v26;
  char v27;
  std::logic_error v28;
  uint64_t v29;
  uint64_t (**v30)();
  std::logic_error v31;
  uint64_t v32;
  std::string v33;
  std::logic_error v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint8_t buf[8];
  _BYTE v41[10];
  __int16 v42;
  int v43;
  __int16 v44;
  _BYTE v45[22];
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v2 || (v2 = std::__shared_weak_count::lock(v2), (v3 = v2) == 0) || (v4 = *((_QWORD *)this + 4)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = *(std::__shared_weak_count **)v41;
    v9 = **(NSObject ***)buf;
    if (*(_QWORD *)v41)
    {
      v10 = (unint64_t *)(*(_QWORD *)v41 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)v41 = 2080;
      *(_QWORD *)&v41[2] = "Device_Timebase.cpp";
      v42 = 1024;
      v43 = 51;
      v44 = 2080;
      *(_QWORD *)v45 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v33);
    std::logic_error::logic_error(&v23, &v33);
    v23.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v34, &v23);
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = -1;
    v34.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v35 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
    *(_QWORD *)&v45[6] = "virtual CA::TimeStamp AMCP::IO_Core::Device_Timebase::get_last_zero_time_stamp() const";
    *(_QWORD *)&v45[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v46 = 51;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
    v30 = off_1E69A20A0;
    v31 = v28;
    v32 = v29;
    v28 = (std::logic_error)0;
    v29 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v30);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 328))(v4);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v15 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      (*(void (**)(uint64_t (***__return_ptr)(), uint64_t))(*(_QWORD *)v4 + 16))(&v30, v4);
      v18 = (const __CFString **)applesauce::CF::StringRef::operator->(&v30);
      applesauce::CF::convert_to<std::string,0>((uint64_t)&v34, *v18);
      if (SHIBYTE(v35) >= 0)
        v19 = &v34;
      else
        v19 = v34.__vftable;
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)v41 = 2080;
      *(_QWORD *)&v41[2] = "Device_Timebase.cpp";
      v42 = 1024;
      v43 = 52;
      v44 = 2080;
      *(_QWORD *)v45 = "not (engine->has_time())";
      *(_WORD *)&v45[8] = 2080;
      *(_QWORD *)&v45[10] = v19;
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s engine (%s) does not have time", buf, 0x2Cu);
      if (SHIBYTE(v35) < 0)
        operator delete(v34.__vftable);
      applesauce::CF::StringRef::~StringRef((const void **)&v30);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    v20 = __cxa_allocate_exception(0x40uLL);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v4 + 16))(&v25, v4);
    v21 = (const __CFString **)applesauce::CF::StringRef::operator->(&v25);
    applesauce::CF::convert_to<std::string,0>((uint64_t)&v28, *v21);
    if (v29 >= 0)
      v22 = &v28;
    else
      v22 = (std::logic_error *)v28.__vftable;
    caulk::make_string((caulk *)"engine (%s) does not have time", (uint64_t)&v33, v22);
    std::logic_error::logic_error(&v26, &v33);
    v26.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v34, &v26);
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = -1;
    v34.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v35 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
    *(_QWORD *)&v45[6] = "virtual CA::TimeStamp AMCP::IO_Core::Device_Timebase::get_last_zero_time_stamp() const";
    *(_QWORD *)&v45[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v46 = 52;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
    v30 = off_1E69A20A0;
    v31 = v23;
    v32 = v24;
    v23.__vftable = 0;
    v23.__imp_.__imp_ = 0;
    v24 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v30);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v20, (uint64_t)buf);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 304))(v4);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1B59E5D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,const void *a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v48;

  applesauce::CF::StringRef::~StringRef(&a32);
  p_shared_owners = (unint64_t *)&v45->__shared_owners_;
  do
    v48 = __ldaxr(p_shared_owners);
  while (__stlxr(v48 - 1, p_shared_owners));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::IO_Core::Device_Timebase::get_clock_domain(AMCP::IO_Core::Device_Timebase *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *exception;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::logic_error v21;
  std::logic_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  _BYTE v30[10];
  __int16 v31;
  int v32;
  __int16 v33;
  _BYTE v34[14];
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v2
    || (v2 = std::__shared_weak_count::lock(v2), (v3 = v2) == 0)
    || (v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = *(std::__shared_weak_count **)v30;
    v9 = **(NSObject ***)buf;
    if (*(_QWORD *)v30)
    {
      v10 = (unint64_t *)(*(_QWORD *)v30 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)v30 = 2080;
      *(_QWORD *)&v30[2] = "Device_Timebase.cpp";
      v31 = 1024;
      v32 = 96;
      v33 = 2080;
      *(_QWORD *)v34 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v20);
    std::logic_error::logic_error(&v21, &v20);
    v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v23 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(_QWORD *)&v34[6] = "virtual uint32_t AMCP::IO_Core::Device_Timebase::get_clock_domain() const";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v36 = 96;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = ((uint64_t (*)(std::__shared_weak_count *))v2->__vftable[1].~__shared_weak_count_0)(v2);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v4;
}

void sub_1B59E6204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::IO_Core::Device_Timebase::convert_sample_to_host_time(AMCP::IO_Core::Device_Timebase *this, double a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  AMCP::Log::Scope_Registry *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *exception;
  NSObject *v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  const __CFString **v22;
  void *v23;
  void *v24;
  const __CFString **v25;
  std::logic_error *v26;
  std::logic_error v27;
  uint64_t v28;
  uint64_t v29;
  std::logic_error v30;
  char v31;
  std::logic_error v32;
  uint64_t v33;
  uint64_t (**v34)();
  std::logic_error v35;
  uint64_t v36;
  std::string v37;
  std::logic_error v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint8_t buf[8];
  _BYTE v45[10];
  __int16 v46;
  int v47;
  __int16 v48;
  _BYTE v49[22];
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v3 || (v3 = std::__shared_weak_count::lock(v3), (v5 = v3) == 0) || (v6 = *((_QWORD *)this + 4)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = *(std::__shared_weak_count **)v45;
    v13 = **(NSObject ***)buf;
    if (*(_QWORD *)v45)
    {
      v14 = (unint64_t *)(*(_QWORD *)v45 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)v45 = 2080;
      *(_QWORD *)&v45[2] = "Device_Timebase.cpp";
      v46 = 1024;
      v47 = 62;
      v48 = 2080;
      *(_QWORD *)v49 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v37);
    std::logic_error::logic_error(&v27, &v37);
    v27.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v38, &v27);
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = -1;
    v38.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v39 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *(_QWORD *)&v49[6] = "virtual uint64_t AMCP::IO_Core::Device_Timebase::convert_sample_to_host_time(double) const";
    *(_QWORD *)&v49[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v50 = 62;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v32);
    v34 = off_1E69A20A0;
    v35 = v32;
    v36 = v33;
    v32 = (std::logic_error)0;
    v33 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v34);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v7 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 328))(v6);
  if ((v7 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v20 = pthread_self();
      v21 = pthread_mach_thread_np(v20);
      (*(void (**)(uint64_t (***__return_ptr)(), uint64_t))(*(_QWORD *)v6 + 16))(&v34, v6);
      v22 = (const __CFString **)applesauce::CF::StringRef::operator->(&v34);
      applesauce::CF::convert_to<std::string,0>((uint64_t)&v38, *v22);
      if (SHIBYTE(v39) >= 0)
        v23 = &v38;
      else
        v23 = v38.__vftable;
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v21;
      *(_WORD *)v45 = 2080;
      *(_QWORD *)&v45[2] = "Device_Timebase.cpp";
      v46 = 1024;
      v47 = 63;
      v48 = 2080;
      *(_QWORD *)v49 = "not (engine->has_time())";
      *(_WORD *)&v49[8] = 2080;
      *(_QWORD *)&v49[10] = v23;
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s The engine (%s) must be running in order to translate time", buf, 0x2Cu);
      if (SHIBYTE(v39) < 0)
        operator delete(v38.__vftable);
      applesauce::CF::StringRef::~StringRef((const void **)&v34);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
    v24 = __cxa_allocate_exception(0x40uLL);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v6 + 16))(&v29, v6);
    v25 = (const __CFString **)applesauce::CF::StringRef::operator->(&v29);
    applesauce::CF::convert_to<std::string,0>((uint64_t)&v32, *v25);
    if (v33 >= 0)
      v26 = &v32;
    else
      v26 = (std::logic_error *)v32.__vftable;
    caulk::make_string((caulk *)"The engine (%s) must be running in order to translate time", (uint64_t)&v37, v26);
    std::logic_error::logic_error(&v30, &v37);
    v30.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v38, &v30);
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = -1;
    v38.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v39 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *(_QWORD *)&v49[6] = "virtual uint64_t AMCP::IO_Core::Device_Timebase::convert_sample_to_host_time(double) const";
    *(_QWORD *)&v49[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v50 = 63;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    v34 = off_1E69A20A0;
    v35 = v27;
    v36 = v28;
    v27.__vftable = 0;
    v27.__imp_.__imp_ = 0;
    v28 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v34);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v24, (uint64_t)buf);
  }
  v8 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v6 + 352))(v6, a2);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v8;
}

void sub_1B59E684C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,const void *a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v48;

  applesauce::CF::StringRef::~StringRef(&a32);
  p_shared_owners = (unint64_t *)&v45->__shared_owners_;
  do
    v48 = __ldaxr(p_shared_owners);
  while (__stlxr(v48 - 1, p_shared_owners));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  _Unwind_Resume(a1);
}

double AMCP::IO_Core::Device_Timebase::convert_host_to_sample_time(AMCP::IO_Core::Device_Timebase *this, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  AMCP::Log::Scope_Registry *v7;
  double v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *exception;
  NSObject *v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  const __CFString **v22;
  void *v23;
  void *v24;
  const __CFString **v25;
  std::logic_error *v26;
  std::logic_error v27;
  uint64_t v28;
  uint64_t v29;
  std::logic_error v30;
  char v31;
  std::logic_error v32;
  uint64_t v33;
  uint64_t (**v34)();
  std::logic_error v35;
  uint64_t v36;
  std::string v37;
  std::logic_error v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint8_t buf[8];
  _BYTE v45[10];
  __int16 v46;
  int v47;
  __int16 v48;
  _BYTE v49[22];
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v3 || (v3 = std::__shared_weak_count::lock(v3), (v5 = v3) == 0) || (v6 = *((_QWORD *)this + 4)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = *(std::__shared_weak_count **)v45;
    v13 = **(NSObject ***)buf;
    if (*(_QWORD *)v45)
    {
      v14 = (unint64_t *)(*(_QWORD *)v45 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)v45 = 2080;
      *(_QWORD *)&v45[2] = "Device_Timebase.cpp";
      v46 = 1024;
      v47 = 73;
      v48 = 2080;
      *(_QWORD *)v49 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v37);
    std::logic_error::logic_error(&v27, &v37);
    v27.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v38, &v27);
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = -1;
    v38.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v39 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *(_QWORD *)&v49[6] = "virtual double AMCP::IO_Core::Device_Timebase::convert_host_to_sample_time(uint64_t) const";
    *(_QWORD *)&v49[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v50 = 73;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v32);
    v34 = off_1E69A20A0;
    v35 = v32;
    v36 = v33;
    v32 = (std::logic_error)0;
    v33 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v34);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v7 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 328))(v6);
  if ((v7 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v20 = pthread_self();
      v21 = pthread_mach_thread_np(v20);
      (*(void (**)(uint64_t (***__return_ptr)(), uint64_t))(*(_QWORD *)v6 + 16))(&v34, v6);
      v22 = (const __CFString **)applesauce::CF::StringRef::operator->(&v34);
      applesauce::CF::convert_to<std::string,0>((uint64_t)&v38, *v22);
      if (SHIBYTE(v39) >= 0)
        v23 = &v38;
      else
        v23 = v38.__vftable;
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v21;
      *(_WORD *)v45 = 2080;
      *(_QWORD *)&v45[2] = "Device_Timebase.cpp";
      v46 = 1024;
      v47 = 74;
      v48 = 2080;
      *(_QWORD *)v49 = "not (engine->has_time())";
      *(_WORD *)&v49[8] = 2080;
      *(_QWORD *)&v49[10] = v23;
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s The engine (%s) must be running in order to translate time", buf, 0x2Cu);
      if (SHIBYTE(v39) < 0)
        operator delete(v38.__vftable);
      applesauce::CF::StringRef::~StringRef((const void **)&v34);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
    v24 = __cxa_allocate_exception(0x40uLL);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v6 + 16))(&v29, v6);
    v25 = (const __CFString **)applesauce::CF::StringRef::operator->(&v29);
    applesauce::CF::convert_to<std::string,0>((uint64_t)&v32, *v25);
    if (v33 >= 0)
      v26 = &v32;
    else
      v26 = (std::logic_error *)v32.__vftable;
    caulk::make_string((caulk *)"The engine (%s) must be running in order to translate time", (uint64_t)&v37, v26);
    std::logic_error::logic_error(&v30, &v37);
    v30.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v38, &v30);
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = -1;
    v38.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v39 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *(_QWORD *)&v49[6] = "virtual double AMCP::IO_Core::Device_Timebase::convert_host_to_sample_time(uint64_t) const";
    *(_QWORD *)&v49[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v50 = 74;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    v34 = off_1E69A20A0;
    v35 = v27;
    v36 = v28;
    v27.__vftable = 0;
    v27.__imp_.__imp_ = 0;
    v28 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v34);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v24, (uint64_t)buf);
  }
  v8 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 360))(v6, a2);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v8;
}

void sub_1B59E6FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,const void *a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v48;

  applesauce::CF::StringRef::~StringRef(&a32);
  p_shared_owners = (unint64_t *)&v45->__shared_owners_;
  do
    v48 = __ldaxr(p_shared_owners);
  while (__stlxr(v48 - 1, p_shared_owners));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  _Unwind_Resume(a1);
}

double AMCP::IO_Core::Device_Timebase::get_host_ticks_per_frame(AMCP::IO_Core::Device_Timebase *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  double v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *exception;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::logic_error v21;
  std::logic_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  _BYTE v30[10];
  __int16 v31;
  int v32;
  __int16 v33;
  _BYTE v34[14];
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v2
    || (v2 = std::__shared_weak_count::lock(v2), (v3 = v2) == 0)
    || (v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = *(std::__shared_weak_count **)v30;
    v9 = **(NSObject ***)buf;
    if (*(_QWORD *)v30)
    {
      v10 = (unint64_t *)(*(_QWORD *)v30 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)v30 = 2080;
      *(_QWORD *)&v30[2] = "Device_Timebase.cpp";
      v31 = 1024;
      v32 = 86;
      v33 = 2080;
      *(_QWORD *)v34 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v20);
    std::logic_error::logic_error(&v21, &v20);
    v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v23 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(_QWORD *)&v34[6] = "virtual double AMCP::IO_Core::Device_Timebase::get_host_ticks_per_frame() const";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v36 = 86;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = ((double (*)(std::__shared_weak_count *))v2->__vftable[8].__get_deleter)(v2);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v4;
}

void sub_1B59E74BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(exception_object);
}

void AMCP::IO_Core::Device_Timebase::start(uint64_t a1, int a2)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  AMCP::Log::Scope_Registry *v8;
  int v9;
  int v10;
  _BOOL4 v11;
  AMCP::Log::Scope_Registry *v12;
  std::__shared_weak_count *v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  void *exception;
  _opaque_pthread_t *v26;
  mach_port_t v27;
  _QWORD *v28;
  void *v29;
  NSObject *v30;
  _opaque_pthread_t *v31;
  mach_port_t v32;
  void *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t (**v36)();
  __int128 v37;
  uint64_t v38;
  std::string v39;
  std::logic_error v40;
  std::logic_error v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  void *__p;
  _BYTE v49[10];
  __int16 v50;
  int v51;
  __int16 v52;
  _BYTE v53[22];
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v4 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v5 || (v5 = std::__shared_weak_count::lock(v5), (v6 = v5) == 0) || (v7 = *(_QWORD *)(a1 + 32)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v19 = *(std::__shared_weak_count **)v49;
    v20 = *(NSObject **)__p;
    if (*(_QWORD *)v49)
    {
      v21 = (unint64_t *)(*(_QWORD *)v49 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      LODWORD(__p) = 67109890;
      HIDWORD(__p) = v24;
      *(_WORD *)v49 = 2080;
      *(_QWORD *)&v49[2] = "Device_Timebase.cpp";
      v50 = 1024;
      v51 = 125;
      v52 = 2080;
      *(_QWORD *)v53 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v47);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v39);
    std::logic_error::logic_error(&v40, &v39);
    v40.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v41, &v40);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = -1;
    v41.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v42 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v41);
    *(_QWORD *)&v53[6] = "virtual void AMCP::IO_Core::Device_Timebase::start(Play_State_Manager::Play_Request)";
    *(_QWORD *)&v53[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v54 = 125;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v34);
    v37 = v34;
    v38 = v35;
    v34 = 0uLL;
    v35 = 0;
    v36 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&__p, (uint64_t)&v36);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Device_Timebase");
  v8 = (AMCP::Log::Scope_Registry *)AMCP::IO_Core::Play_State_Manager::start((uint64_t *)(a1 + 72), a2, (uint64_t *)&__p);
  v9 = (int)v8;
  if (SHIBYTE(v51) < 0)
    operator delete(__p);
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v30 = *(NSObject **)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v31 = pthread_self();
      v32 = pthread_mach_thread_np(v31);
      LODWORD(__p) = 67109890;
      HIDWORD(__p) = v32;
      *(_WORD *)v49 = 2080;
      *(_QWORD *)&v49[2] = "Device_Timebase.cpp";
      v50 = 1024;
      v51 = 131;
      v52 = 2080;
      *(_QWORD *)v53 = "not (new_state == Transport_State::on or new_state == Transport_State::prewarm)";
      _os_log_error_impl(&dword_1B57BA000, v30, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s IO_Thread::start: Start failed to change the prewarming state in a reasonable way", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v47);
    v33 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"IO_Thread::start: Start failed to change the prewarming state in a reasonable way", (uint64_t)&v39);
    std::logic_error::logic_error(&v40, &v39);
    v40.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v41, &v40);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = -1;
    v41.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v42 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v41);
    *(_QWORD *)&v53[6] = "virtual void AMCP::IO_Core::Device_Timebase::start(Play_State_Manager::Play_Request)";
    *(_QWORD *)&v53[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v54 = 131;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v34);
    v37 = v34;
    v38 = v35;
    v34 = 0uLL;
    v35 = 0;
    v36 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&__p, (uint64_t)&v36);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v33, (uint64_t)&__p);
  }
  v10 = *(_DWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 80))
  {
    v11 = 1;
    if (v10)
      goto LABEL_14;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 72) != 0;
    if (v10)
      goto LABEL_14;
  }
  if (v11 && *(_BYTE *)(a1 + 104))
    *(_BYTE *)(a1 + 104) = 0;
LABEL_14:
  *(_DWORD *)(a1 + 88) = v9;
  if (v10 != v9)
  {
    AMCP::Logging_Settings::instance(v8);
    if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance)
      || (AMCP::Logging_Settings::instance(v12), BYTE2(AMCP::Logging_Settings::instance(void)::s_instance)))
    {
      AMCP::Log::Scope_Registry::get(v12);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
      v13 = *(std::__shared_weak_count **)v49;
      v14 = *(NSObject **)__p;
      if (*(_QWORD *)v49)
      {
        v15 = (unint64_t *)(*(_QWORD *)v49 + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        v26 = pthread_self();
        v27 = pthread_mach_thread_np(v26);
        v28 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v28 = (_QWORD *)*v28;
        std::string::basic_string[abi:ne180100]<0>(&v41, off_1E699CFF0[*(int *)(a1 + 88)]);
        v29 = &v41;
        if (SHIBYTE(v42) < 0)
          v29 = v41.__vftable;
        LODWORD(__p) = 67110146;
        HIDWORD(__p) = v27;
        *(_WORD *)v49 = 2080;
        *(_QWORD *)&v49[2] = "Device_Timebase.cpp";
        v50 = 1024;
        v51 = 147;
        v52 = 2080;
        *(_QWORD *)v53 = v28;
        *(_WORD *)&v53[8] = 2080;
        *(_QWORD *)&v53[10] = v29;
        _os_log_debug_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Engine(\"%s\")::set_transport_state: %s", (uint8_t *)&__p, 0x2Cu);
        if (SHIBYTE(v42) < 0)
          operator delete(v41.__vftable);
      }
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 144))(v7, *(unsigned int *)(a1 + 88));
  }
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  os_unfair_lock_unlock(v4);
}

void sub_1B59E7C24(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,NSObject **buf,__int16 a30,__int16 a31,int a32,__int16 a33,__int16 a34,int a35,__int16 a36,__int16 a37)
{
  int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  AMCP::Log::Scope_Registry *v42;
  NSObject *v43;
  _opaque_pthread_t *v44;
  mach_port_t v45;
  _QWORD *v46;

  if (a2)
  {
    v42 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    AMCP::Log::Scope_Registry::get(v42);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v43 = *buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      v44 = pthread_self();
      v45 = pthread_mach_thread_np(v44);
      v46 = (_QWORD *)(v38 + 8);
      if (*(char *)(v38 + 31) < 0)
        v46 = (_QWORD *)*v46;
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v45;
      a30 = 2080;
      *(_QWORD *)(v41 + 10) = "Device_Timebase.cpp";
      a34 = 1024;
      a35 = 153;
      a36 = 2080;
      *(_QWORD *)(v41 + 26) = v46;
      _os_log_error_impl(&dword_1B57BA000, v43, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Error starting device: %s", (uint8_t *)&buf, 0x22u);
    }
    *(_DWORD *)(v38 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 136))(v40);
    std::string::basic_string[abi:ne180100]<0>(&buf, "Device_Timebase");
    AMCP::IO_Core::Play_State_Manager::stop(v39, v37, (uint64_t *)&buf);
    if (SHIBYTE(a35) < 0)
      operator delete(buf);
    __cxa_rethrow();
  }
  JUMPOUT(0x1B59E7F90);
}

void sub_1B59E7D3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  __cxa_end_catch();
  JUMPOUT(0x1B59E7F58);
}

void sub_1B59E7D6C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  JUMPOUT(0x1B59E7F58);
}

void sub_1B59E7D8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38)
{
  void *v38;
  int v39;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  a37 = &unk_1E69A2000;
  if (a38 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a38 + 32))(a38))
    a38 = 0;
  MEMORY[0x1B5E500E8](&a35);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v39)
    __cxa_free_exception(v38);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a34);
  JUMPOUT(0x1B59E7F58);
}

void sub_1B59E7E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  os_unfair_lock_s *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v42;

  p_shared_owners = (unint64_t *)&v39->__shared_owners_;
  do
    v42 = __ldaxr(p_shared_owners);
  while (__stlxr(v42 - 1, p_shared_owners));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  os_unfair_lock_unlock(v38);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::Device_Timebase::begin_cycle(AMCP::IO_Core::Device_Timebase *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *exception;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  std::string v18;
  std::logic_error v19;
  std::logic_error v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint8_t buf[8];
  _BYTE v28[10];
  __int16 v29;
  int v30;
  __int16 v31;
  _BYTE v32[14];
  const char *v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v2
    || (v2 = std::__shared_weak_count::lock(v2), (v3 = v2) == 0)
    || (v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = *(std::__shared_weak_count **)v28;
    v7 = **(NSObject ***)buf;
    if (*(_QWORD *)v28)
    {
      v8 = (unint64_t *)(*(_QWORD *)v28 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)v28 = 2080;
      *(_QWORD *)&v28[2] = "Device_Timebase.cpp";
      v29 = 1024;
      v30 = 232;
      v31 = 2080;
      *(_QWORD *)v32 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v20, &v19);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v21 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(_QWORD *)&v32[6] = "virtual void AMCP::IO_Core::Device_Timebase::begin_cycle()";
    v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v34 = 232;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    v16 = v13;
    v17 = v14;
    v13 = 0uLL;
    v14 = 0;
    v15 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v15);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  ((void (*)(std::__shared_weak_count *))v2->__vftable[7].__on_zero_shared_weak)(v2);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1B59E8258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(exception_object);
}

void AMCP::IO_Core::Device_Timebase::stop(uint64_t a1, int a2)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  void *__p;
  _BYTE v31[10];
  __int16 v32;
  int v33;
  __int16 v34;
  _QWORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v29 = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5 && (v29 = std::__shared_weak_count::lock(v5)) != 0)
    v6 = *(_QWORD *)(a1 + 32);
  else
    v6 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Device_Timebase");
  v7 = AMCP::IO_Core::Play_State_Manager::stop((uint64_t *)(a1 + 72), a2, (uint64_t *)&__p);
  if (SHIBYTE(v33) < 0)
    operator delete(__p);
  v8 = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = v7;
  if (v8 != (_DWORD)v7 && v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 144))(v6, v7);
  v9 = *(std::__shared_weak_count **)(a1 + 56);
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v28 = v10;
    if (v10)
    {
      v11 = v10;
      v27 = *(_QWORD *)(a1 + 48);
      if (*(_DWORD *)(a1 + 88) || !*(_QWORD *)(a1 + 48))
        goto LABEL_33;
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v10);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
      v12 = *(std::__shared_weak_count **)v31;
      v13 = *(NSObject **)__p;
      if (*(_QWORD *)v31)
      {
        v14 = (unint64_t *)(*(_QWORD *)v31 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        v16 = pthread_self();
        v17 = pthread_mach_thread_np(v16);
        v18 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v18 = (_QWORD *)*v18;
        LODWORD(__p) = 67109890;
        HIDWORD(__p) = v17;
        *(_WORD *)v31 = 2080;
        *(_QWORD *)&v31[2] = "Device_Timebase.cpp";
        v32 = 1024;
        v33 = 197;
        v34 = 2080;
        v35 = v18;
        _os_log_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_INFO, "%6u %32s:%-5d stop - timebase swap: %s", (uint8_t *)&__p, 0x22u);
      }
      v11 = v28;
      if (v28)
      {
        p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
        do
          v20 = __ldxr(p_shared_weak_owners);
        while (__stxr(v20 + 1, p_shared_weak_owners));
      }
      v21 = *(std::__shared_weak_count **)(a1 + 40);
      *(_QWORD *)(a1 + 32) = v27;
      *(_QWORD *)(a1 + 40) = v28;
      if (v21)
        std::__shared_weak_count::__release_weak(v21);
      v22 = *(std::__shared_weak_count **)(a1 + 56);
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      if (v22)
        std::__shared_weak_count::__release_weak(v22);
      if (*(_BYTE *)(a1 + 104))
        *(_BYTE *)(a1 + 104) = 0;
      if (v28)
      {
LABEL_33:
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
  if (v29)
  {
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  os_unfair_lock_unlock(v4);
}

void sub_1B59E8640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t buf, __int16 a14, uint64_t a15, __int16 a16, int a17, __int16 a18, uint64_t a19)
{
  os_unfair_lock_s *v19;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  os_unfair_lock_unlock(v19);
  _Unwind_Resume(a1);
}

BOOL AMCP::IO_Core::Device_Timebase::is_running(AMCP::IO_Core::Device_Timebase *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  int v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *exception;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::logic_error v21;
  std::logic_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  _BYTE v30[10];
  __int16 v31;
  int v32;
  __int16 v33;
  _BYTE v34[14];
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v2
    || (v2 = std::__shared_weak_count::lock(v2), (v3 = v2) == 0)
    || (v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = *(std::__shared_weak_count **)v30;
    v9 = **(NSObject ***)buf;
    if (*(_QWORD *)v30)
    {
      v10 = (unint64_t *)(*(_QWORD *)v30 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)v30 = 2080;
      *(_QWORD *)&v30[2] = "Device_Timebase.cpp";
      v31 = 1024;
      v32 = 106;
      v33 = 2080;
      *(_QWORD *)v34 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v20);
    std::logic_error::logic_error(&v21, &v20);
    v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v23 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(_QWORD *)&v34[6] = "virtual BOOL AMCP::IO_Core::Device_Timebase::is_running() const";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v36 = 106;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = ((uint64_t (*)(std::__shared_weak_count *))v2->__vftable[3].__on_zero_shared)(v2);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v4 != 0;
}

void sub_1B59E8A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(exception_object);
}

void AMCP::IO_Core::Device_Timebase::get_state(AMCP::IO_Core::Device_Timebase *this@<X0>, AMCP::IO_Core::Play_State_Manager *a2@<X8>)
{
  os_unfair_lock_s *v4;

  v4 = (os_unfair_lock_s *)((char *)this + 64);
  os_unfair_lock_lock((os_unfair_lock_t)this + 16);
  AMCP::IO_Core::Play_State_Manager::get_state_snapshot(a2, (unint64_t *)this + 9);
  os_unfair_lock_unlock(v4);
}

void sub_1B59E8B94(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::IO_Core::Device_Timebase::get_anchor_time(AMCP::IO_Core::Device_Timebase *this)
{
  return *((_QWORD *)this + 12);
}

unint64_t AMCP::IO_Core::Device_Timebase::get_engine_info(uint64_t a1, int a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v14;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  void *exception;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();
  __int128 v24;
  uint64_t v25;
  std::string v26;
  std::logic_error v27;
  std::logic_error v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  uint8_t buf[8];
  _BYTE v36[10];
  __int16 v37;
  int v38;
  __int16 v39;
  _BYTE v40[14];
  const char *v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v3 || (v3 = std::__shared_weak_count::lock(v3), (v5 = v3) == 0) || (v6 = *(_QWORD **)(a1 + 32)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v14 = *(std::__shared_weak_count **)v36;
    v15 = **(NSObject ***)buf;
    if (*(_QWORD *)v36)
    {
      v16 = (unint64_t *)(*(_QWORD *)v36 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)v36 = 2080;
      *(_QWORD *)&v36[2] = "Device_Timebase.cpp";
      v37 = 1024;
      v38 = 209;
      v39 = 2080;
      *(_QWORD *)v40 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v26);
    std::logic_error::logic_error(&v27, &v26);
    v27.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v28, &v27);
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = -1;
    v28.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v29 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
    *(_QWORD *)&v40[6] = "virtual Engine_Info AMCP::IO_Core::Device_Timebase::get_engine_info(Buffer_Alignment) const";
    v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v42 = 209;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    v24 = v21;
    v25 = v22;
    v21 = 0uLL;
    v22 = 0;
    v23 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v23);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v7 = 88;
  if (a2 == 1)
  {
    v7 = 80;
    v8 = 96;
  }
  else
  {
    v8 = 104;
  }
  v9 = (*(uint64_t (**)(_QWORD *))(*v6 + v7))(v6);
  v10 = (*(uint64_t (**)(_QWORD *))(*v6 + v8))(v6);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v9 | (unint64_t)(v10 << 32);
}

void sub_1B59E8E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(exception_object);
}

double AMCP::IO_Core::Device_Timebase::get_sample_rate(AMCP::IO_Core::Device_Timebase *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  double v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  _QWORD *v14;
  void *exception;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  std::string v22;
  std::logic_error v23;
  std::logic_error v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint8_t buf[8];
  _BYTE v32[10];
  __int16 v33;
  int v34;
  __int16 v35;
  _BYTE v36[22];
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v2
    || (v2 = std::__shared_weak_count::lock(v2), (v3 = v2) == 0)
    || (v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = *(std::__shared_weak_count **)v32;
    v9 = **(NSObject ***)buf;
    if (*(_QWORD *)v32)
    {
      v10 = (unint64_t *)(*(_QWORD *)v32 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      v14 = (_QWORD *)((char *)this + 8);
      if (*((char *)this + 31) < 0)
        v14 = (_QWORD *)*v14;
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)v32 = 2080;
      *(_QWORD *)&v32[2] = "Device_Timebase.cpp";
      v33 = 1024;
      v34 = 255;
      v35 = 2080;
      *(_QWORD *)v36 = "not (engine.operator BOOL())";
      *(_WORD *)&v36[8] = 2080;
      *(_QWORD *)&v36[10] = v14;
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No engine for %s", buf, 0x2Cu);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    exception = __cxa_allocate_exception(0x40uLL);
    v16 = (_QWORD *)((char *)this + 8);
    if (*((char *)this + 31) < 0)
      v16 = (_QWORD *)*v16;
    caulk::make_string((caulk *)"No engine for %s", (uint64_t)&v22, v16);
    std::logic_error::logic_error(&v23, &v22);
    v23.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v25 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    *(_QWORD *)&v36[6] = "virtual Sample_Rate AMCP::IO_Core::Device_Timebase::get_sample_rate() const";
    *(_QWORD *)&v36[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v37 = 255;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = ((double (*)(std::__shared_weak_count *))v2->__get_deleter)(v2);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v4;
}

void sub_1B59E9288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v32;

  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  _Unwind_Resume(exception_object);
}

double AMCP::IO_Core::Device_Timebase::get_rate_scalar(AMCP::IO_Core::Device_Timebase *this)
{
  double v2;

  AMCP::IO_Core::Device_Timebase::get_current_time(this);
  return v2;
}

BOOL AMCP::IO_Core::Device_Timebase::is_valid(AMCP::IO_Core::Device_Timebase *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  _BOOL8 v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *((_QWORD *)this + 4) != 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

uint64_t AMCP::IO_Core::Device_Timebase::supports_past_data(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = std::__shared_weak_count::lock(this[5]);
  v3 = ((uint64_t (*)(std::__shared_weak_count *))this[4]->__vftable[4].__get_deleter)(this[4]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v3;
}

uint64_t AMCP::IO_Core::Device_Timebase::available_past_data(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = std::__shared_weak_count::lock(this[5]);
  v3 = ((uint64_t (*)(std::__shared_weak_count *))this[4]->__vftable[5].~__shared_weak_count_0)(this[4]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v3;
}

std::__shared_weak_count *AMCP::IO_Core::Device_Timebase::get_engine_ptr@<X0>(AMCP::IO_Core::Device_Timebase *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *result;
  uint64_t v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *exception;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  std::string v18;
  std::logic_error v19;
  std::logic_error v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint8_t buf[8];
  _BYTE v28[10];
  __int16 v29;
  int v30;
  __int16 v31;
  _BYTE v32[14];
  const char *v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  result = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!result
    || (result = std::__shared_weak_count::lock(result), (a2[1] = result) == 0)
    || (v5 = *((_QWORD *)this + 4), (*a2 = v5) == 0))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = *(std::__shared_weak_count **)v28;
    v7 = **(NSObject ***)buf;
    if (*(_QWORD *)v28)
    {
      v8 = (unint64_t *)(*(_QWORD *)v28 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)v28 = 2080;
      *(_QWORD *)&v28[2] = "Device_Timebase.cpp";
      v29 = 1024;
      v30 = 296;
      v31 = 2080;
      *(_QWORD *)v32 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v20, &v19);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v21 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(_QWORD *)&v32[6] = "virtual Core::Engine_Ptr AMCP::IO_Core::Device_Timebase::get_engine_ptr() const";
    v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v34 = 296;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    v16 = v13;
    v17 = v14;
    v13 = 0uLL;
    v14 = 0;
    v15 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v15);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return result;
}

void sub_1B59E9790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

uint64_t AMCP::IO_Core::Device_Timebase::wait_for_time_to_start(AMCP::Log::Scope_Registry *a1, uint64_t a2, unsigned int *a3)
{
  unint64_t imp;
  uint64_t **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t ***v12;
  uint64_t **i;
  unint64_t v14;
  std::runtime_error *v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD **v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *j;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  unint64_t v41;
  __int128 **v42;
  __int128 *v43;
  unint64_t v44;
  unint64_t v45;
  __int128 *v46;
  __int128 *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int128 *v52;
  __int128 *v53;
  _opaque_pthread_t *v54;
  __int128 *k;
  __int128 *v56;
  __int128 *v57;
  std::string::size_type size;
  _QWORD *v59;
  _QWORD *v60;
  __int128 *v61;
  _QWORD *v62;
  unint64_t v63;
  __int128 *v64;
  __int128 *v65;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  __int128 *v71;
  __int128 *v72;
  std::string::size_type v73;
  _QWORD *v74;
  _QWORD *v75;
  __int128 *v76;
  _QWORD *v77;
  AMCP::Log::Scope_Registry *v78;
  unsigned int v79;
  __int128 *v80;
  std::__shared_weak_count *v81;
  NSObject *v82;
  unint64_t *v83;
  unint64_t v84;
  AMCP::Log::Scope_Registry *v85;
  std::__shared_weak_count *v86;
  NSObject *v87;
  unint64_t *v88;
  unint64_t v89;
  _opaque_pthread_t *v90;
  mach_port_t v91;
  void *v92;
  AMCP::Log::Scope_Registry *v93;
  uint64_t v96;
  uint64_t **m;
  char *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  _opaque_pthread_t *v103;
  mach_port_t v104;
  NSObject *v105;
  _opaque_pthread_t *v106;
  mach_port_t v107;
  void *v108;
  NSObject *v109;
  _opaque_pthread_t *v110;
  mach_port_t v111;
  void *exception;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  void *__p[2];
  __int128 v118;
  float v119;
  std::logic_error v120;
  uint64_t v121;
  std::runtime_error v122;
  char v123;
  void *v124[2];
  uint64_t v125;
  uint64_t (**v126)();
  std::logic_error v127;
  uint64_t v128;
  std::string v129;
  std::runtime_error v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint8_t buf[24];
  __int16 v137;
  _BYTE v138[14];
  const char *v139;
  int v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = 0u;
  v118 = 0u;
  v119 = 1.0;
  v6 = *(uint64_t ***)(a2 + 16);
  if (v6)
  {
    while (1)
    {
      a1 = (AMCP::Log::Scope_Registry *)(*(_QWORD *(**)(std::runtime_error *__return_ptr))(*v6[2] + 192))(&v130);
      v7 = 0x9DDFEA08EB382D69
         * (((8 * LODWORD(v130.__vftable)) + 8) ^ ((unint64_t)v130.__vftable >> 32));
      v8 = 0x9DDFEA08EB382D69 * (((unint64_t)v130.__vftable >> 32) ^ (v7 >> 47) ^ v7);
      v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      v10 = (unint64_t)__p[1];
      if (__p[1])
      {
        v11 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v11.i16[0] = vaddlv_u8(v11);
        if (v11.u32[0] > 1uLL)
        {
          imp = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
          if ((void *)v9 >= __p[1])
            imp = v9 % (unint64_t)__p[1];
        }
        else
        {
          imp = v9 & ((unint64_t)__p[1] - 1);
        }
        v12 = (uint64_t ***)*((_QWORD *)__p[0] + imp);
        if (v12)
        {
          for (i = *v12; i; i = (uint64_t **)*i)
          {
            v14 = (unint64_t)i[1];
            if (v14 == v9)
            {
              if (i[2] == (uint64_t *)v130.__vftable)
                goto LABEL_74;
            }
            else
            {
              if (v11.u32[0] > 1uLL)
              {
                if ((void *)v14 >= __p[1])
                  v14 %= (unint64_t)__p[1];
              }
              else
              {
                v14 &= (unint64_t)__p[1] - 1;
              }
              if (v14 != imp)
                break;
            }
          }
        }
      }
      v15 = (std::runtime_error *)operator new(0x20uLL);
      *(_QWORD *)buf = v15;
      *(_QWORD *)&buf[8] = &v118;
      v15->__vftable = 0;
      v15->__imp_.__imp_ = (const char *)v9;
      v15[1] = v130;
      v130.__vftable = 0;
      v130.__imp_.__imp_ = 0;
      buf[16] = 1;
      v16 = (float)(unint64_t)(*((_QWORD *)&v118 + 1) + 1);
      if (!v10 || (float)(v119 * (float)v10) < v16)
        break;
LABEL_64:
      v32 = (_QWORD *)*((_QWORD *)__p[0] + imp);
      v33 = *(_QWORD *)buf;
      if (v32)
      {
        **(_QWORD **)buf = *v32;
LABEL_72:
        *v32 = v33;
        goto LABEL_73;
      }
      **(_QWORD **)buf = v118;
      *(_QWORD *)&v118 = v33;
      *((_QWORD *)__p[0] + imp) = &v118;
      if (*(_QWORD *)v33)
      {
        v34 = *(_QWORD *)(*(_QWORD *)v33 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v34 >= v10)
            v34 %= v10;
        }
        else
        {
          v34 &= v10 - 1;
        }
        v32 = (char *)__p[0] + 8 * v34;
        goto LABEL_72;
      }
LABEL_73:
      *(_QWORD *)buf = 0;
      ++*((_QWORD *)&v118 + 1);
      std::unique_ptr<std::__hash_node<std::shared_ptr<AMCP::Graph::Timebase>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<AMCP::Graph::Timebase>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
LABEL_74:
      imp = (unint64_t)v130.__imp_.__imp_;
      if (v130.__imp_.__imp_)
      {
        v35 = (unint64_t *)(v130.__imp_.__imp_ + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)imp + 16))(imp);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)imp);
        }
      }
      v6 = (uint64_t **)*v6;
      if (!v6)
      {
        v38 = (unint64_t)__p[1];
        if (!__p[1])
          goto LABEL_135;
        v39 = 0xD7C06285B9DE677ALL;
        v40 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v40.i16[0] = vaddlv_u8(v40);
        if (v40.u32[0] > 1uLL)
        {
          v41 = 0xD7C06285B9DE677ALL;
          if (__p[1] <= (void *)0xD7C06285B9DE677ALL)
            v41 = 0xD7C06285B9DE677ALL % (unint64_t)__p[1];
        }
        else
        {
          v41 = ((unint64_t)__p[1] - 1) & 0xD7C06285B9DE677ALL;
        }
        v42 = (__int128 **)*((_QWORD *)__p[0] + v41);
        if (!v42)
          goto LABEL_135;
        v43 = *v42;
        if (!v43)
          goto LABEL_135;
        v44 = (unint64_t)__p[1] - 1;
        while (1)
        {
          v45 = *((_QWORD *)v43 + 1);
          if (v45 == 0xD7C06285B9DE677ALL)
          {
            if (!*((_QWORD *)v43 + 2))
            {
              if (v40.u32[0] > 1uLL)
              {
                if (__p[1] <= (void *)0xD7C06285B9DE677ALL)
                  v39 = 0xD7C06285B9DE677ALL % (unint64_t)__p[1];
              }
              else
              {
                v39 = v44 & 0xD7C06285B9DE677ALL;
              }
              v46 = (__int128 *)*((_QWORD *)__p[0] + v39);
              do
              {
                v47 = v46;
                v46 = *(__int128 **)v46;
              }
              while (v46 != v43);
              if (v47 == &v118)
                goto LABEL_125;
              v48 = *((_QWORD *)v47 + 1);
              if (v40.u32[0] > 1uLL)
              {
                if ((void *)v48 >= __p[1])
                  v48 %= (unint64_t)__p[1];
              }
              else
              {
                v48 &= v44;
              }
              if (v48 != v39)
              {
LABEL_125:
                if (!*(_QWORD *)v43)
                  goto LABEL_126;
                v49 = *(_QWORD *)(*(_QWORD *)v43 + 8);
                if (v40.u32[0] > 1uLL)
                {
                  if ((void *)v49 >= __p[1])
                    v49 %= (unint64_t)__p[1];
                }
                else
                {
                  v49 &= v44;
                }
                if (v49 != v39)
LABEL_126:
                  *((_QWORD *)__p[0] + v39) = 0;
              }
              v50 = *(_QWORD *)v43;
              if (*(_QWORD *)v43)
              {
                v51 = *(_QWORD *)(v50 + 8);
                if (v40.u32[0] > 1uLL)
                {
                  if (v51 >= v38)
                    v51 %= v38;
                }
                else
                {
                  v51 &= v44;
                }
                if (v51 != v39)
                {
                  *((_QWORD *)__p[0] + v51) = v47;
                  v50 = *(_QWORD *)v43;
                }
              }
              *(_QWORD *)v47 = v50;
              *(_QWORD *)v43 = 0;
              --*((_QWORD *)&v118 + 1);
              *(_QWORD *)buf = v43;
              *(_QWORD *)&buf[8] = &v118;
              buf[16] = 1;
              std::unique_ptr<std::__hash_node<std::shared_ptr<AMCP::Graph::Timebase>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<AMCP::Graph::Timebase>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
              goto LABEL_135;
            }
          }
          else
          {
            if (v40.u32[0] > 1uLL)
            {
              if ((void *)v45 >= __p[1])
                v45 %= (unint64_t)__p[1];
            }
            else
            {
              v45 &= v44;
            }
            if (v45 != v41)
              goto LABEL_135;
          }
          v43 = *(__int128 **)v43;
          if (!v43)
            goto LABEL_135;
        }
      }
    }
    v17 = (v10 & (v10 - 1)) != 0;
    if (v10 < 3)
      v17 = 1;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v16 / v119);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v10 = (unint64_t)__p[1];
    }
    if (*(_QWORD *)&prime > v10)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v10)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)&v118 + 1) / v119);
      if (v10 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = (unint64_t)__p[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = __p[0];
          __p[0] = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          __p[1] = (void *)prime;
          do
            *((_QWORD *)__p[0] + v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD **)v118;
          if ((_QWORD)v118)
          {
            v25 = *(_QWORD *)(v118 + 8);
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)__p[0] + v25) = &v118;
            for (j = *v24; j; v25 = v31)
            {
              v31 = j[1];
              if (v26.u32[0] > 1uLL)
              {
                if (v31 >= *(_QWORD *)&prime)
                  v31 %= *(_QWORD *)&prime;
              }
              else
              {
                v31 &= *(_QWORD *)&prime - 1;
              }
              if (v31 != v25)
              {
                if (!*((_QWORD *)__p[0] + v31))
                {
                  *((_QWORD *)__p[0] + v31) = v24;
                  goto LABEL_55;
                }
                *v24 = (_QWORD *)*j;
                *j = **((_QWORD **)__p[0] + v31);
                **((_QWORD **)__p[0] + v31) = j;
                j = v24;
              }
              v31 = v25;
LABEL_55:
              v24 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_59;
        }
        v37 = __p[0];
        __p[0] = 0;
        if (v37)
          operator delete(v37);
        v10 = 0;
        __p[1] = 0;
      }
    }
LABEL_59:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        imp = v9 % v10;
      else
        imp = v9;
    }
    else
    {
      imp = (v10 - 1) & v9;
    }
    goto LABEL_64;
  }
LABEL_135:
  if (!*((_QWORD *)&v118 + 1))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v109 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
    {
      v110 = pthread_self();
      v111 = pthread_mach_thread_np(v110);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v111;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Engine.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 73;
      v137 = 2080;
      *(_QWORD *)v138 = "not (!in_engine_list.empty())";
      _os_log_error_impl(&dword_1B57BA000, v109, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Cannot wait for no engines", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v122);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Cannot wait for no engines", (uint64_t)&v129);
    std::logic_error::logic_error(&v120, &v129);
    v120.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v130, &v120);
    v132 = 0;
    v133 = 0;
    v134 = 0;
    v135 = -1;
    v130.__vftable = (std::runtime_error_vtbl *)off_1E69A1208;
    v131 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v130);
    *(_QWORD *)&v138[6] = "static std::vector<Engine_Ptr> AMCP::Core::Engine::wait_for_time_to_start(const std::unordered"
                          "_set<Engine_Ptr> &, const std::atomic_uint32_t &)";
    v139 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Engine.cpp";
    v140 = 73;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v124);
    v127 = *(std::logic_error *)v124;
    v113 = v125;
    v125 = 0;
    v126 = off_1E69A20A0;
    v128 = v113;
    v124[0] = 0;
    v124[1] = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v126);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v114 = 0;
  v115 = 0;
  v116 = 0;
  memset(&v129, 0, sizeof(v129));
  v52 = &v118;
  v53 = &v118;
  while (1)
  {
    v53 = *(__int128 **)v53;
    if (!v53)
      break;
    if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)v53 + 2) + 136))(*((_QWORD *)v53 + 2)))
    {
      v54 = pthread_self();
      pthread_mach_thread_np(v54);
      goto LABEL_234;
    }
  }
  for (k = (__int128 *)v118; k; k = *(__int128 **)k)
  {
    if (((*(uint64_t (**)(uint64_t))(**((_QWORD **)k + 2) + 328))(*((_QWORD *)k + 2)) & 1) == 0)
      std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100](&v129.__r_.__value_.__l.__data_, k + 1);
  }
  kdebug_trace();
  AMCP::Core::update_time_for_all((uint64_t)v124, (__int128 *)v129.__r_.__value_.__l.__data_, (__int128 *)v129.__r_.__value_.__l.__size_);
  v56 = (__int128 *)v124[0];
  v57 = (__int128 *)v124[1];
  while (v56 != v57)
    std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100](&v114, v56++);
  size = v129.__r_.__value_.__l.__size_;
  v59 = (_QWORD *)v129.__r_.__value_.__r.__words[0];
  if (v129.__r_.__value_.__r.__words[0] == v129.__r_.__value_.__l.__size_)
  {
    size = v129.__r_.__value_.__r.__words[0];
  }
  else
  {
    while (1)
    {
      if (v124[0] == v124[1])
      {
        v60 = v124[0];
      }
      else
      {
        v60 = v124[0];
        while (*v60 != *v59)
        {
          v60 += 2;
          if (v60 == v124[1])
          {
            v60 = v124[1];
            break;
          }
        }
      }
      if (v60 != v124[1])
        break;
      v59 += 2;
      if (v59 == (_QWORD *)v129.__r_.__value_.__l.__size_)
        goto LABEL_168;
    }
    if (v59 == (_QWORD *)v129.__r_.__value_.__l.__size_)
    {
LABEL_168:
      v59 = (_QWORD *)v129.__r_.__value_.__l.__size_;
      goto LABEL_169;
    }
    v61 = (__int128 *)(v59 + 2);
    if (v59 + 2 != (_QWORD *)v129.__r_.__value_.__l.__size_)
    {
      do
      {
        v62 = v124[0];
        if (v124[0] != v124[1])
        {
          while (*v62 != *(_QWORD *)v61)
          {
            v62 += 2;
            if (v62 == v124[1])
            {
              v62 = v124[1];
              break;
            }
          }
        }
        if (v62 == v124[1])
        {
          std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)v59, v61);
          v59 += 2;
        }
        ++v61;
      }
      while (v61 != (__int128 *)size);
      size = v129.__r_.__value_.__l.__size_;
    }
  }
LABEL_169:
  std::vector<std::shared_ptr<AMCP::Core::Engine>>::erase((uint64_t)&v129, (uint64_t)v59, size);
  v63 = 0;
LABEL_170:
  v64 = &v118;
  while (1)
  {
    v64 = *(__int128 **)v64;
    if (!v64)
      break;
    if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)v64 + 2) + 136))(*((_QWORD *)v64 + 2)))
      goto LABEL_211;
  }
  v65 = &v118;
  while (1)
  {
    v65 = *(__int128 **)v65;
    if (!v65)
      break;
    if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)v65 + 2) + 328))(*((_QWORD *)v65 + 2)) & 1) == 0)
    {
      if (v129.__r_.__value_.__r.__words[0] == v129.__r_.__value_.__l.__size_)
        break;
      if (v63 > 0xF9)
        break;
      if (atomic_load(a3))
        break;
      v67 = mach_absolute_time();
      mach_wait_until(v67 + 480000);
      AMCP::Core::update_time_for_all((uint64_t)buf, (__int128 *)v129.__r_.__value_.__l.__data_, (__int128 *)v129.__r_.__value_.__l.__size_);
      v68 = v124[0];
      if (v124[0])
      {
        v69 = v124[1];
        v70 = v124[0];
        if (v124[1] != v124[0])
        {
          do
            v69 = (void *)std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v69 - 16);
          while (v69 != v68);
          v70 = v124[0];
        }
        v124[1] = v68;
        operator delete(v70);
      }
      *(_OWORD *)v124 = *(_OWORD *)buf;
      v125 = *(_QWORD *)&buf[16];
      memset(buf, 0, sizeof(buf));
      v130.__vftable = (std::runtime_error_vtbl *)buf;
      std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
      v71 = (__int128 *)v124[0];
      v72 = (__int128 *)v124[1];
      while (v71 != v72)
        std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100](&v114, v71++);
      v73 = v129.__r_.__value_.__l.__size_;
      v74 = (_QWORD *)v129.__r_.__value_.__r.__words[0];
      if (v129.__r_.__value_.__r.__words[0] == v129.__r_.__value_.__l.__size_)
      {
        v73 = v129.__r_.__value_.__r.__words[0];
      }
      else
      {
        while (1)
        {
          if (v124[0] == v124[1])
          {
            v75 = v124[0];
          }
          else
          {
            v75 = v124[0];
            while (*v75 != *v74)
            {
              v75 += 2;
              if (v75 == v124[1])
              {
                v75 = v124[1];
                break;
              }
            }
          }
          if (v75 != v124[1])
            break;
          v74 += 2;
          if (v74 == (_QWORD *)v129.__r_.__value_.__l.__size_)
            goto LABEL_209;
        }
        if (v74 == (_QWORD *)v129.__r_.__value_.__l.__size_)
        {
LABEL_209:
          v74 = (_QWORD *)v129.__r_.__value_.__l.__size_;
          goto LABEL_210;
        }
        v76 = (__int128 *)(v74 + 2);
        if (v74 + 2 != (_QWORD *)v129.__r_.__value_.__l.__size_)
        {
          do
          {
            v77 = v124[0];
            if (v124[0] != v124[1])
            {
              while (*v77 != *(_QWORD *)v76)
              {
                v77 += 2;
                if (v77 == v124[1])
                {
                  v77 = v124[1];
                  break;
                }
              }
            }
            if (v77 == v124[1])
            {
              std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)v74, v76);
              v74 += 2;
            }
            ++v76;
          }
          while (v76 != (__int128 *)v73);
          v73 = v129.__r_.__value_.__l.__size_;
        }
      }
LABEL_210:
      ++v63;
      std::vector<std::shared_ptr<AMCP::Core::Engine>>::erase((uint64_t)&v129, (uint64_t)v74, v73);
      goto LABEL_170;
    }
  }
LABEL_211:
  v78 = (AMCP::Log::Scope_Registry *)kdebug_trace();
  v79 = atomic_load(a3);
  v80 = &v118;
  if (v79)
  {
    AMCP::Log::Scope_Registry::get(v78);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v81 = *(std::__shared_weak_count **)&buf[8];
    v82 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v83 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    v80 = &v118;
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
    {
      v103 = pthread_self();
      v104 = pthread_mach_thread_np(v103);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v104;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Engine.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 120;
      _os_log_debug_impl(&dword_1B57BA000, v82, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Engine start interrupted", buf, 0x18u);
      v80 = &v118;
    }
  }
  while (1)
  {
    v80 = *(__int128 **)v80;
    if (!v80)
      break;
    v85 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v80 + 2) + 136))(*((_QWORD *)v80 + 2));
    if (!(_DWORD)v85)
    {
      AMCP::Log::Scope_Registry::get(v85);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v86 = *(std::__shared_weak_count **)&buf[8];
      v87 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v88 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
      {
        v90 = pthread_self();
        v91 = pthread_mach_thread_np(v90);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v91;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Engine.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 123;
        v137 = 2080;
        *(_QWORD *)v138 = "(are_all_running(in_engine_list)) == false";
        _os_log_error_impl(&dword_1B57BA000, v87, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Engine start failed", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v123);
      v92 = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v122, "Engine start failed");
      std::runtime_error::runtime_error(&v130, &v122);
      v132 = 0;
      v133 = 0;
      v134 = 0;
      v135 = -1;
      v130.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v131 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v130);
      *(_QWORD *)&v138[6] = "static std::vector<Engine_Ptr> AMCP::Core::Engine::wait_for_time_to_start(const std::unorder"
                            "ed_set<Engine_Ptr> &, const std::atomic_uint32_t &)";
      v139 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Engine.cpp";
      v140 = 123;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v120);
      v127 = v120;
      v126 = off_1E69A20A0;
      v128 = v121;
      v120.__vftable = 0;
      v120.__imp_.__imp_ = 0;
      v121 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v126);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v92, (uint64_t)buf);
    }
  }
  while (1)
  {
    v52 = *(__int128 **)v52;
    if (!v52)
      break;
    v93 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v52 + 2) + 328))(*((_QWORD *)v52 + 2));
    if ((v93 & 1) == 0)
    {
      if (!atomic_load(a3))
      {
        AMCP::Log::Scope_Registry::get(v93);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v105 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
        {
          v106 = pthread_self();
          v107 = pthread_mach_thread_np(v106);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v107;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "Engine.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 127;
          _os_log_error_impl(&dword_1B57BA000, v105, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Engine start timed out", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v123);
        v108 = __cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v122, "Engine start timed out");
        std::runtime_error::runtime_error(&v130, &v122);
        v132 = 0;
        v133 = 0;
        v134 = 0;
        v135 = -1;
        v130.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v131 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v130);
        *(_QWORD *)&v138[6] = "static std::vector<Engine_Ptr> AMCP::Core::Engine::wait_for_time_to_start(const std::unord"
                              "ered_set<Engine_Ptr> &, const std::atomic_uint32_t &)";
        v139 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Engine.cpp";
        v140 = 127;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v120);
        v127 = v120;
        v126 = off_1E69A20A0;
        v128 = v121;
        v120.__vftable = 0;
        v120.__imp_.__imp_ = 0;
        v121 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v126);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v108, (uint64_t)buf);
      }
      break;
    }
  }
  *(_QWORD *)buf = v124;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_234:
  *(_QWORD *)buf = &v129;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (atomic_load(a3))
  {
    v96 = 2;
  }
  else
  {
    for (m = *(uint64_t ***)(a2 + 16); m; m = (uint64_t **)*m)
    {
      (*(void (**)(uint8_t *__return_ptr))(*m[2] + 192))(buf);
      v98 = v114;
      if (v114 != v115)
      {
        while (*(_QWORD *)v98 != *(_QWORD *)buf)
        {
          v98 += 16;
          if (v98 == v115)
          {
            v98 = v115;
            break;
          }
        }
      }
      if (v98 != v115)
        (*(void (**)(uint64_t *))(*m[2] + 208))(m[2]);
      v99 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v100 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
    }
    v96 = 0;
  }
  *(_QWORD *)buf = &v114;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)__p);
  return v96;
}

void sub_1B59EA9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,std::runtime_error a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,std::runtime_error a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;

  if (a2)
  {
    *(_QWORD *)(v42 - 176) = &a27;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 176));
    *(_QWORD *)(v42 - 176) = &a34;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 176));
    *(_QWORD *)(v42 - 176) = &a10;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 176));
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B59EA600);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::IO_Core::Device_Timebase::set_clock_anchor_time(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Log::Scope_Registry *v5;
  uint64_t v6;
  double v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *exception;
  NSObject *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();
  __int128 v24;
  uint64_t v25;
  std::string v26;
  std::logic_error v27;
  std::logic_error v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  uint8_t buf[8];
  _BYTE v36[10];
  __int16 v37;
  int v38;
  __int16 v39;
  _BYTE v40[14];
  const char *v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v2 = this + 16;
  os_unfair_lock_lock(this + 16);
  v3 = *(std::__shared_weak_count **)&this[10]._os_unfair_lock_opaque;
  if (!v3
    || (v3 = std::__shared_weak_count::lock(v3), (v4 = v3) == 0)
    || (v3 = *(std::__shared_weak_count **)&this[8]._os_unfair_lock_opaque) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v10 = *(std::__shared_weak_count **)v36;
    v11 = **(NSObject ***)buf;
    if (*(_QWORD *)v36)
    {
      v12 = (unint64_t *)(*(_QWORD *)v36 + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v15;
      *(_WORD *)v36 = 2080;
      *(_QWORD *)&v36[2] = "Device_Timebase.cpp";
      v37 = 1024;
      v38 = 307;
      v39 = 2080;
      *(_QWORD *)v40 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v26);
    std::logic_error::logic_error(&v27, &v26);
    v27.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v28, &v27);
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = -1;
    v28.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v29 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
    *(_QWORD *)&v40[6] = "virtual void AMCP::IO_Core::Device_Timebase::set_clock_anchor_time()";
    v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v42 = 307;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    v24 = v21;
    v25 = v22;
    v21 = 0uLL;
    v22 = 0;
    v23 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v23);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = (AMCP::Log::Scope_Registry *)((uint64_t (*)(std::__shared_weak_count *))v3->__vftable[8].~__shared_weak_count_0)(v3);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)v36 = 2080;
      *(_QWORD *)&v36[2] = "Device_Timebase.cpp";
      v37 = 1024;
      v38 = 308;
      v39 = 2080;
      *(_QWORD *)v40 = "not (engine->has_time())";
      _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
    v20 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v26);
    std::logic_error::logic_error(&v27, &v26);
    v27.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v28, &v27);
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = -1;
    v28.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v29 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
    *(_QWORD *)&v40[6] = "virtual void AMCP::IO_Core::Device_Timebase::set_clock_anchor_time()";
    v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v42 = 308;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    v24 = v21;
    v25 = v22;
    v21 = 0uLL;
    v22 = 0;
    v23 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v23);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v20, (uint64_t)buf);
  }
  if (this[22]._os_unfair_lock_opaque && !LOBYTE(this[26]._os_unfair_lock_opaque))
  {
    v6 = mach_absolute_time();
    v7 = AMCP::IO_Core::Device_Timebase::convert_host_to_sample_time((AMCP::IO_Core::Device_Timebase *)this, v6);
    if (!LOBYTE(this[26]._os_unfair_lock_opaque))
      LOBYTE(this[26]._os_unfair_lock_opaque) = 1;
    *(double *)&this[24]._os_unfair_lock_opaque = v7;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  os_unfair_lock_unlock(v2);
}

void sub_1B59EB190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  os_unfair_lock_s *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v31;

  p_shared_owners = (unint64_t *)&v28->__shared_owners_;
  do
    v31 = __ldaxr(p_shared_owners);
  while (__stlxr(v31 - 1, p_shared_owners));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  os_unfair_lock_unlock(v27);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::Device_Timebase::reset_clock_anchor_time(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Log::Scope_Registry *v5;
  uint64_t v6;
  double v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *exception;
  NSObject *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();
  __int128 v24;
  uint64_t v25;
  std::string v26;
  std::logic_error v27;
  std::logic_error v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  uint8_t buf[8];
  _BYTE v36[10];
  __int16 v37;
  int v38;
  __int16 v39;
  _BYTE v40[14];
  const char *v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v2 = this + 16;
  os_unfair_lock_lock(this + 16);
  v3 = *(std::__shared_weak_count **)&this[10]._os_unfair_lock_opaque;
  if (!v3
    || (v3 = std::__shared_weak_count::lock(v3), (v4 = v3) == 0)
    || (v3 = *(std::__shared_weak_count **)&this[8]._os_unfair_lock_opaque) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v10 = *(std::__shared_weak_count **)v36;
    v11 = **(NSObject ***)buf;
    if (*(_QWORD *)v36)
    {
      v12 = (unint64_t *)(*(_QWORD *)v36 + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v15;
      *(_WORD *)v36 = 2080;
      *(_QWORD *)&v36[2] = "Device_Timebase.cpp";
      v37 = 1024;
      v38 = 322;
      v39 = 2080;
      *(_QWORD *)v40 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v26);
    std::logic_error::logic_error(&v27, &v26);
    v27.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v28, &v27);
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = -1;
    v28.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v29 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
    *(_QWORD *)&v40[6] = "virtual void AMCP::IO_Core::Device_Timebase::reset_clock_anchor_time()";
    v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v42 = 322;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    v24 = v21;
    v25 = v22;
    v21 = 0uLL;
    v22 = 0;
    v23 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v23);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = (AMCP::Log::Scope_Registry *)((uint64_t (*)(std::__shared_weak_count *))v3->__vftable[8].~__shared_weak_count_0)(v3);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)v36 = 2080;
      *(_QWORD *)&v36[2] = "Device_Timebase.cpp";
      v37 = 1024;
      v38 = 323;
      v39 = 2080;
      *(_QWORD *)v40 = "not (engine->has_time())";
      _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
    v20 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v26);
    std::logic_error::logic_error(&v27, &v26);
    v27.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v28, &v27);
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = -1;
    v28.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v29 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
    *(_QWORD *)&v40[6] = "virtual void AMCP::IO_Core::Device_Timebase::reset_clock_anchor_time()";
    v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v42 = 323;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    v24 = v21;
    v25 = v22;
    v21 = 0uLL;
    v22 = 0;
    v23 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v23);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v20, (uint64_t)buf);
  }
  if (this[22]._os_unfair_lock_opaque)
  {
    v6 = mach_absolute_time();
    v7 = AMCP::IO_Core::Device_Timebase::convert_host_to_sample_time((AMCP::IO_Core::Device_Timebase *)this, v6);
    if (!LOBYTE(this[26]._os_unfair_lock_opaque))
      LOBYTE(this[26]._os_unfair_lock_opaque) = 1;
    *(double *)&this[24]._os_unfair_lock_opaque = v7;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  os_unfair_lock_unlock(v2);
}

void sub_1B59EB820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  os_unfair_lock_s *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v31;

  p_shared_owners = (unint64_t *)&v28->__shared_owners_;
  do
    v31 = __ldaxr(p_shared_owners);
  while (__stlxr(v31 - 1, p_shared_owners));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  os_unfair_lock_unlock(v27);
  _Unwind_Resume(a1);
}

double AMCP::IO_Core::Device_Timebase::get_max_io_buffer_frame_size(AMCP::IO_Core::Device_Timebase *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  double v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v2)
    return 4096.0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 4096.0;
  v4 = v3;
  v5 = *((_QWORD *)this + 4);
  if (v5)
    v6 = (double)(unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  else
    v6 = 4096.0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

void AMCP::IO_Core::Device_Timebase::take_power_assertions(AMCP::IO_Core::Device_Timebase *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *exception;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  std::string v18;
  std::logic_error v19;
  std::logic_error v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint8_t buf[8];
  _BYTE v28[10];
  __int16 v29;
  int v30;
  __int16 v31;
  _BYTE v32[14];
  const char *v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v2
    || (v2 = std::__shared_weak_count::lock(v2)) == 0
    || (v3 = v2, (v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4)) == 0))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = *(std::__shared_weak_count **)v28;
    v7 = **(NSObject ***)buf;
    if (*(_QWORD *)v28)
    {
      v8 = (unint64_t *)(*(_QWORD *)v28 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)v28 = 2080;
      *(_QWORD *)&v28[2] = "Device_Timebase.cpp";
      v29 = 1024;
      v30 = 442;
      v31 = 2080;
      *(_QWORD *)v32 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v20, &v19);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v21 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(_QWORD *)&v32[6] = "virtual void AMCP::IO_Core::Device_Timebase::take_power_assertions()";
    v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v34 = 442;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    v16 = v13;
    v17 = v14;
    v13 = 0uLL;
    v14 = 0;
    v15 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v15);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  ((void (*)(std::__shared_weak_count *))v2->__vftable[9].~__shared_weak_count_0)(v2);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1B59EBD78(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::IO_Core::Device_Timebase::release_power_assertions(AMCP::IO_Core::Device_Timebase *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *exception;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  std::string v18;
  std::logic_error v19;
  std::logic_error v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint8_t buf[8];
  _BYTE v28[10];
  __int16 v29;
  int v30;
  __int16 v31;
  _BYTE v32[14];
  const char *v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v2
    || (v2 = std::__shared_weak_count::lock(v2)) == 0
    || (v3 = v2, (v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4)) == 0))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = *(std::__shared_weak_count **)v28;
    v7 = **(NSObject ***)buf;
    if (*(_QWORD *)v28)
    {
      v8 = (unint64_t *)(*(_QWORD *)v28 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)v28 = 2080;
      *(_QWORD *)&v28[2] = "Device_Timebase.cpp";
      v29 = 1024;
      v30 = 452;
      v31 = 2080;
      *(_QWORD *)v32 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v20, &v19);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v21 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(_QWORD *)&v32[6] = "virtual void AMCP::IO_Core::Device_Timebase::release_power_assertions()";
    v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v34 = 452;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    v16 = v13;
    v17 = v14;
    v13 = 0uLL;
    v14 = 0;
    v15 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v15);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  ((void (*)(std::__shared_weak_count *))v2->__vftable[9].__on_zero_shared)(v2);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1B59EC02C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::IO_Core::Device_Timebase::get_private_transport_state(AMCP::IO_Core::Device_Timebase *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *exception;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::logic_error v21;
  std::logic_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  _BYTE v30[10];
  __int16 v31;
  int v32;
  __int16 v33;
  _BYTE v34[14];
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v2
    || (v2 = std::__shared_weak_count::lock(v2), (v3 = v2) == 0)
    || (v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = *(std::__shared_weak_count **)v30;
    v9 = **(NSObject ***)buf;
    if (*(_QWORD *)v30)
    {
      v10 = (unint64_t *)(*(_QWORD *)v30 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)v30 = 2080;
      *(_QWORD *)&v30[2] = "Device_Timebase.cpp";
      v31 = 1024;
      v32 = 432;
      v33 = 2080;
      *(_QWORD *)v34 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v20);
    std::logic_error::logic_error(&v21, &v20);
    v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v23 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(_QWORD *)&v34[6] = "virtual Transport_State AMCP::IO_Core::Device_Timebase::get_private_transport_state() const";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    v36 = 432;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = ((uint64_t (*)(std::__shared_weak_count *))v2->__vftable[3].__on_zero_shared)(v2);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v4;
}

void sub_1B59EC2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(exception_object);
}

void CAException::~CAException(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1B5E50688);
}

void CAXException::~CAXException(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t CAXException::what(CAXException *this)
{
  return (uint64_t)this + 8;
}

void `virtual thunk to'CAException::~CAException(CAException *this)
{
  std::exception::~exception((std::exception *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  std::exception::~exception((std::exception *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1B5E50688);
}

OS::CF::MutableDictionary *OS::CF::MutableDictionary::MutableDictionary(OS::CF::MutableDictionary *a1, uint64_t a2, unint64_t a3)
{
  CFDictionaryRef v7[2];

  OS::CF::MutableDictionary::MutableDictionary(a1);
  OS::CF::Dictionary::Dictionary(v7, a2, a3);
  OS::CF::MutableDictionary::operator=((uint64_t)a1, v7[1]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v7);
  return a1;
}

void sub_1B59EC544(_Unwind_Exception *a1)
{
  OS::CF::UntypedObject *v1;

  OS::CF::UntypedObject::~UntypedObject(v1);
  _Unwind_Resume(a1);
}

uint64_t OS::CF::MutableDictionary::operator=(uint64_t a1, CFDictionaryRef theDict)
{
  CFMutableDictionaryRef MutableCopy;

  if (theDict)
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  else
    MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  return OS::CF::UntypedObject::operator=(a1, (uint64_t)MutableCopy);
}

uint64_t HALB_PowerAssertion::HALB_PowerAssertion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  IOReturn v13;
  _QWORD v15[2];
  _BYTE v16[8];
  CFDictionaryRef AssertionProperties;
  _BYTE buf[24];
  uint64_t v19;
  const __CFString *v20;
  uint64_t v21;
  const __CFString *v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = a6;
  *(_QWORD *)(a1 + 8) = 0;
  OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(a1 + 16), *(CFTypeRef *)(a2 + 8));
  *(_QWORD *)(a1 + 16) = &off_1E69A0F60;
  OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(a1 + 32), *(CFTypeRef *)(a3 + 8));
  *(_QWORD *)(a1 + 32) = &off_1E69A0F60;
  *(_QWORD *)(a1 + 48) = a4;
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)buf = CFSTR("AssertType");
  *(_QWORD *)&buf[8] = v11;
  v12 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&buf[16] = CFSTR("AssertName");
  v19 = v12;
  OS::CF::Number::Number<int>(v15, 0);
  v20 = CFSTR("AssertLevel");
  v21 = v15[1];
  v22 = CFSTR("ResourcesUsed");
  v23 = a5;
  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)v16, (uint64_t)buf, 4uLL);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v15);
  if (AssertionProperties)
  {
    if ((a4 & 0xFF00000000) != 0)
    {
      OS::CF::Number::Number<int>(buf, a4);
      OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(AssertionProperties, CFSTR("AssertionOnBehalfOfPID"), *(const void **)&buf[8]);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
    }
    if (!*(_DWORD *)(a1 + 4))
    {
      OS::CF::Boolean::Boolean((OS::CF::Boolean *)buf, 1);
      OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>(AssertionProperties, CFSTR("AllowsDeviceRestart"), *(const void **)&buf[8]);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
    }
    v13 = IOPMAssertionCreateWithProperties(AssertionProperties, (IOPMAssertionID *)a1);
    if (v13 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALB_PowerAssertion.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 90;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v13;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_PowerAssertion::HALB_PowerAssertion: failed to create the power assertion, Error: 0x%X", buf, 0x18u);
    }
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v16);
  return a1;
}

void sub_1B59EC7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  OS::CF::UntypedObject *v3;
  OS::CF::UntypedObject *v4;
  va_list va;

  va_start(va, a3);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  OS::CF::UntypedObject::~UntypedObject(v4);
  OS::CF::UntypedObject::~UntypedObject(v3);
  _Unwind_Resume(a1);
}

void HALB_PowerAssertion::Take(std::chrono::system_clock::time_point *this)
{
  int v2;
  _BOOL4 v3;
  IOReturn rep;
  int v5;
  NSObject *v6;
  const char *v7;
  uint32_t v8;
  IOReturn v9;
  IOPMAssertionID v10;
  IOReturn v11;
  int v12;
  _BYTE theValue[14];
  __int16 v14;
  IOReturn v15;
  __int16 v16;
  char *v17;
  __int16 v18;
  char *v19;
  __int16 v20;
  int v21;
  char v22[16];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char v38[256];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  OS::CF::String::AsCString((CFIndex)&this[2], (UInt8 *)v38, 256);
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  *(_OWORD *)v22 = 0u;
  v23 = 0u;
  OS::CF::String::AsCString((CFIndex)&this[4], (UInt8 *)v22, 256);
  this[1].__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v2 = BYTE4(this[6].__d_.__rep_);
  v3 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v3)
    {
      rep = this->__d_.__rep_;
      v5 = this[6].__d_.__rep_;
      v12 = 136316418;
      *(_QWORD *)theValue = "HALB_PowerAssertion.cpp";
      *(_WORD *)&theValue[8] = 1024;
      *(_DWORD *)&theValue[10] = 115;
      v14 = 1024;
      v15 = rep;
      v16 = 2082;
      v17 = v38;
      v18 = 2082;
      v19 = v22;
      v20 = 1024;
      v21 = v5;
      v6 = MEMORY[0x1E0C81028];
      v7 = "%25s:%-5d  HALB_PowerAssertion::Take: taking power assertion ID %u of type '%{public}s' with name: '%{public}"
           "s' on behalf of %d";
      v8 = 50;
LABEL_6:
      _os_log_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v12, v8);
    }
  }
  else if (v3)
  {
    v9 = this->__d_.__rep_;
    v12 = 136316162;
    *(_QWORD *)theValue = "HALB_PowerAssertion.cpp";
    *(_WORD *)&theValue[8] = 1024;
    *(_DWORD *)&theValue[10] = 119;
    v14 = 1024;
    v15 = v9;
    v16 = 2082;
    v17 = v38;
    v18 = 2082;
    v19 = v22;
    v6 = MEMORY[0x1E0C81028];
    v7 = "%25s:%-5d  HALB_PowerAssertion::Take: taking power assertion ID %u of type '%{public}s' with name: '%{public}s'";
    v8 = 44;
    goto LABEL_6;
  }
  v10 = this->__d_.__rep_;
  if (v10)
  {
    OS::CF::Number::Number<int>(&v12, 255);
    v11 = IOPMAssertionSetProperty(v10, CFSTR("AssertLevel"), *(CFTypeRef *)&theValue[4]);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v12);
    if (v11)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v12 = 136315650;
        *(_QWORD *)theValue = "HALB_PowerAssertion.cpp";
        *(_WORD *)&theValue[8] = 1024;
        *(_DWORD *)&theValue[10] = 126;
        v14 = 1024;
        v15 = v11;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_PowerAssertion::Take: failed to take the power assertion, Error: 0x%X", (uint8_t *)&v12, 0x18u);
      }
    }
  }
}

void sub_1B59ECA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a9);
  _Unwind_Resume(a1);
}

void HALB_PowerAssertion::Release(const std::chrono::system_clock::time_point *this)
{
  tm *v2;
  double v3;
  int v4;
  _BOOL4 v5;
  IOReturn rep;
  int v7;
  NSObject *v8;
  const char *v9;
  uint32_t v10;
  IOReturn v11;
  IOPMAssertionID v12;
  IOReturn v13;
  time_t v14;
  uint8_t buf[4];
  _BYTE theValue[14];
  __int16 v17;
  IOReturn v18;
  __int16 v19;
  char *v20;
  __int16 v21;
  char *v22;
  __int16 v23;
  _BYTE v24[24];
  char v25[30];
  char v26[16];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42[256];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  OS::CF::String::AsCString((CFIndex)&this[2], (UInt8 *)v42, 256);
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v27 = 0u;
  *(_OWORD *)v26 = 0u;
  OS::CF::String::AsCString((CFIndex)&this[4], (UInt8 *)v26, 256);
  v14 = std::chrono::system_clock::to_time_t(this + 1);
  v2 = localtime(&v14);
  strftime(v25, 0x1EuLL, "%Y-%m-%d %H:%M:%S", v2);
  v3 = (double)(1000 * (std::chrono::system_clock::now().__d_.__rep_ - this[1].__d_.__rep_)) / 1000000000.0;
  v4 = BYTE4(this[6].__d_.__rep_);
  v5 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v5)
    {
      rep = this->__d_.__rep_;
      v7 = this[6].__d_.__rep_;
      *(_DWORD *)buf = 136316930;
      *(_QWORD *)theValue = "HALB_PowerAssertion.cpp";
      *(_WORD *)&theValue[8] = 1024;
      *(_DWORD *)&theValue[10] = 153;
      v17 = 1024;
      v18 = rep;
      v19 = 2082;
      v20 = v42;
      v21 = 2082;
      v22 = v26;
      v23 = 1024;
      *(_DWORD *)v24 = v7;
      *(_WORD *)&v24[4] = 2080;
      *(_QWORD *)&v24[6] = v25;
      *(_WORD *)&v24[14] = 2048;
      *(double *)&v24[16] = v3;
      v8 = MEMORY[0x1E0C81028];
      v9 = "%25s:%-5d  HALB_PowerAssertion::Release: releasing power assertion ID %u of type '%{public}s' with name: '%{p"
           "ublic}s' on behalf of %d taken at %s for %.6f seconds";
      v10 = 70;
LABEL_6:
      _os_log_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, v10);
    }
  }
  else if (v5)
  {
    v11 = this->__d_.__rep_;
    *(_DWORD *)buf = 136316674;
    *(_QWORD *)theValue = "HALB_PowerAssertion.cpp";
    *(_WORD *)&theValue[8] = 1024;
    *(_DWORD *)&theValue[10] = 157;
    v17 = 1024;
    v18 = v11;
    v19 = 2082;
    v20 = v42;
    v21 = 2082;
    v22 = v26;
    v23 = 2080;
    *(_QWORD *)v24 = v25;
    *(_WORD *)&v24[8] = 2048;
    *(double *)&v24[10] = v3;
    v8 = MEMORY[0x1E0C81028];
    v9 = "%25s:%-5d  HALB_PowerAssertion::Release: releasing power assertion ID %u of type '%{public}s' with name: '%{pub"
         "lic}s' taken at %s for %.6f seconds";
    v10 = 64;
    goto LABEL_6;
  }
  v12 = this->__d_.__rep_;
  if (v12)
  {
    OS::CF::Number::Number<int>(buf, 0);
    v13 = IOPMAssertionSetProperty(v12, CFSTR("AssertLevel"), *(CFTypeRef *)&theValue[4]);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
    if (v13)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)theValue = "HALB_PowerAssertion.cpp";
        *(_WORD *)&theValue[8] = 1024;
        *(_DWORD *)&theValue[10] = 164;
        v17 = 1024;
        v18 = v13;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_PowerAssertion::Release: failed to release the power assertion, Error: 0x%X", buf, 0x18u);
      }
    }
  }
}

void sub_1B59ECD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  _Unwind_Resume(a1);
}

void HALB_PowerAssertion::Rename(IOPMAssertionID *a1, uint64_t a2)
{
  IOReturn v4;
  IOReturn v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  IOReturn v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*a1)
  {
    OS::CF::UntypedObject::operator=((uint64_t)(a1 + 8), *(CFTypeRef *)(a2 + 8));
    v4 = IOPMAssertionSetProperty(*a1, CFSTR("AssertName"), *(CFTypeRef *)(a2 + 8));
    if (v4)
    {
      v5 = v4;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v6 = 136315650;
        v7 = "HALB_PowerAssertion.cpp";
        v8 = 1024;
        v9 = 176;
        v10 = 1024;
        v11 = v5;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_PowerAssertion::Rename: failed to change the name of the power assertion, Error: 0x%X", (uint8_t *)&v6, 0x18u);
      }
    }
  }
}

void AMCP::DAL::Ramstad_Resampler::~Ramstad_Resampler(AMCP::DAL::Ramstad_Resampler *this)
{
  void **v1;

  v1 = (void **)((char *)this + 96);
  std::vector<std::unique_ptr<RamstadSRC>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  v1 = (void **)((char *)this + 96);
  std::vector<std::unique_ptr<RamstadSRC>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1B5E50688);
}

double AMCP::DAL::Ramstad_Resampler::process(uint64_t a1, const float ***a2, uint64_t *a3, _QWORD *a4, double a5, double a6, double a7)
{
  uint64_t v7;
  unsigned __int8 *v15;
  double v16;
  double v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  unint64_t v21;
  signed int v22;
  uint64_t v23;
  AMCP::Log::Scope_Registry *v24;
  AMCP::Log::Scope_Registry *v25;
  uint64_t v26;
  AMCP::DAL::PCM_Data_Handler *v27;
  AMCP::Log::Scope_Registry *v28;
  uint64_t v29;
  int v30;
  int v31;
  const float **v32;
  const float **v33;
  unint64_t v34;
  RamstadSRC **v35;
  RamstadSRC **v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  size_t v44;
  uint64_t v45;
  char *v46;
  const float **v47;
  uint64_t *v48;
  uint64_t v49;
  const float **v50;
  _QWORD *v51;
  const float *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  float64x2_t *v62;
  uint64_t v63;
  float64x2_t *v64;
  float64x2_t *v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t *v73;
  float64x2_t *v74;
  float64x2_t *v75;
  uint64_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  uint64_t v89;
  float64x2_t *v90;
  float64x2_t *v91;
  float64x2_t *v92;
  uint64_t *v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  uint64_t v98;
  float v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  float32x4_t *v106;
  uint64_t v107;
  float32x4_t *v108;
  float32x4_t *v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t *v117;
  float32x4_t *v118;
  float32x4_t *v119;
  uint64_t v120;
  const float *v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  uint64_t v127;
  float32x4_t *v128;
  float32x4_t *v129;
  uint64_t *v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  int8x16_t v135;
  uint64_t v136;
  int v137;
  int v138;
  unsigned int v139;
  int v140;
  int v141;
  uint64_t v142;
  float64x2_t *v143;
  uint64_t v144;
  float64x2_t *v145;
  float64x2_t *v146;
  int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  int i;
  int v152;
  uint64_t v153;
  uint64_t *v154;
  float64x2_t *v155;
  float64x2_t *v156;
  uint64_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  uint64_t v170;
  float v171;
  uint64_t v172;
  float64x2_t *v173;
  float64x2_t *v174;
  float *v175;
  float64x2_t *v176;
  float64x2_t *v177;
  float *v178;
  uint64_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float v184;
  float *v185;
  float64x2_t *v186;
  float64x2_t *v187;
  float *v188;
  uint64_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float v194;
  uint64_t *v195;
  float v196;
  float v197;
  float v198;
  float v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  int v205;
  int v206;
  int v207;
  int v208;
  float64x2_t *v209;
  float64x2_t *v210;
  unint64_t v211;
  unint64_t v212;
  char *v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t *v260;
  int v261;
  int v262;
  float64x2_t *v263;
  float64x2_t *v264;
  unint64_t v265;
  unint64_t v266;
  char *v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  uint64_t v276;
  uint64_t v277;
  int64x2_t v278;
  int64x2_t v279;
  int64x2_t v280;
  int64x2_t v281;
  int64x2_t v282;
  int64x2_t v283;
  int v284;
  int v285;
  int v286;
  float32x4_t *v287;
  uint64_t v288;
  float32x4_t *v289;
  float32x4_t *v290;
  int v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  int j;
  int v296;
  uint64_t v297;
  uint64_t *v298;
  float32x4_t *v299;
  float32x4_t *v300;
  uint64_t v301;
  const float *v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  uint64_t v308;
  float v309;
  uint64_t v310;
  float32x4_t *v311;
  float32x4_t *v312;
  float *v313;
  float32x4_t *v314;
  float32x4_t *v315;
  float *v316;
  uint64_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  int8x16_t v322;
  float *v323;
  float32x4_t *v324;
  float32x4_t *v325;
  float *v326;
  uint64_t v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  int8x16_t v332;
  uint64_t *v333;
  float v334;
  float v335;
  float v336;
  float v337;
  uint64_t v338;
  unsigned int v339;
  uint64_t v340;
  int v341;
  uint64_t v342;
  int v343;
  int v344;
  int v345;
  float32x4_t *v346;
  float32x4_t *v347;
  unint64_t v348;
  unint64_t v349;
  char *v350;
  const float *v351;
  const float *v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  float32x4_t v362;
  float32x4_t v363;
  float32x4_t v364;
  float32x4_t v365;
  const float *v366;
  float32x4_t v367;
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t *v375;
  int v376;
  float32x4_t *v377;
  float32x4_t *v378;
  unint64_t v379;
  unint64_t v380;
  char *v381;
  float32x4_t v382;
  float32x4_t v383;
  float32x4_t v384;
  float32x4_t v385;
  float32x4_t v386;
  uint64_t v387;
  uint64_t v388;
  int8x16_t v389;
  int8x16_t v390;
  int8x16_t v391;
  int32x2_t v392;
  int8x16_t v393;
  int8x16_t v394;
  int8x16_t v395;
  int v396;
  int v397;
  uint64_t v398;
  int v399;
  int v400;
  uint64_t v401;
  int v402;
  int v403;
  float64x2_t *v404;
  float64x2_t *v405;
  unint64_t v406;
  unint64_t v407;
  char *v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  double v455;
  uint64_t v456;
  float64x2_t *v457;
  uint64_t v458;
  int v459;
  float *v460;
  float64x2_t *v461;
  float64x2_t *v462;
  unint64_t v463;
  unint64_t v464;
  float32x2_t *v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  int64x2_t v475;
  int64x2_t v476;
  int64x2_t v477;
  int64x2_t v478;
  int64x2_t v479;
  int64x2_t v480;
  float64x2_t *v481;
  float *v482;
  float64x2_t *v483;
  float64x2_t *v484;
  unint64_t v485;
  float32x2_t *v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  int64x2_t v496;
  int64x2_t v497;
  int64x2_t v498;
  int64x2_t v499;
  float v500;
  uint64_t *v501;
  int64x2_t v502;
  int64x2_t v503;
  float v504;
  float v505;
  float v506;
  float v507;
  uint64_t v508;
  unsigned int v509;
  int v510;
  int v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t *v514;
  float64x2_t *v515;
  float64x2_t *v516;
  uint64_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  int v530;
  uint64_t v531;
  int v532;
  float64x2_t *v533;
  float64x2_t *v534;
  unint64_t v535;
  unint64_t v536;
  char *v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  uint64_t v584;
  int v585;
  int v586;
  uint64_t v587;
  int v588;
  int v589;
  float32x4_t *v590;
  float32x4_t *v591;
  unint64_t v592;
  unint64_t v593;
  char *v594;
  const float *v595;
  const float *v596;
  float32x4_t v597;
  float32x4_t v598;
  float32x4_t v599;
  float32x4_t v600;
  float32x4_t v601;
  float32x4_t v602;
  float32x4_t v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  float32x4_t v608;
  float32x4_t v609;
  const float *v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  double v619;
  uint64_t v620;
  float32x4_t *v621;
  uint64_t v622;
  float *v623;
  float32x4_t *v624;
  float32x4_t *v625;
  unint64_t v626;
  unint64_t v627;
  float32x2_t *v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  int8x16_t v634;
  int8x16_t v635;
  int8x16_t v636;
  int8x16_t v637;
  int8x16_t v638;
  int8x16_t v639;
  float32x4_t *v640;
  float *v641;
  float32x4_t *v642;
  float32x4_t *v643;
  unint64_t v644;
  float32x2_t *v645;
  float32x4_t v646;
  float32x4_t v647;
  float32x4_t v648;
  float32x4_t v649;
  float32x4_t v650;
  int8x16_t v651;
  int8x16_t v652;
  int8x16_t v653;
  int8x16_t v654;
  float v655;
  uint64_t *v656;
  int8x16_t v657;
  int8x16_t v658;
  float v659;
  float v660;
  float v661;
  float v662;
  uint64_t v663;
  unsigned int v664;
  int v665;
  int v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t *v669;
  float32x4_t *v670;
  float32x4_t *v671;
  uint64_t v672;
  const float *v673;
  float32x4_t v674;
  float32x4_t v675;
  float32x4_t v676;
  float32x4_t v677;
  float32x4_t v678;
  int v679;
  int v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t *v683;
  float64x2_t *v684;
  float64x2_t *v685;
  uint64_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  int v699;
  uint64_t v700;
  int v701;
  float32x4_t *v702;
  float32x4_t *v703;
  unint64_t v704;
  unint64_t v705;
  char *v706;
  const float *v707;
  const float *v708;
  float32x4_t v709;
  float32x4_t v710;
  float32x4_t v711;
  float32x4_t v712;
  float32x4_t v713;
  float32x4_t v714;
  float32x4_t v715;
  float32x4_t v716;
  float32x4_t v717;
  float32x4_t v718;
  float32x4_t v719;
  float32x4_t v720;
  float32x4_t v721;
  const float *v722;
  float32x4_t v723;
  float32x4_t v724;
  float32x4_t v725;
  float32x4_t v726;
  float32x4_t v727;
  float32x4_t v728;
  float32x4_t v729;
  float32x4_t v730;
  int v731;
  uint64_t v732;
  int v733;
  float64x2_t *v734;
  float64x2_t *v735;
  unint64_t v736;
  unint64_t v737;
  char *v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  int v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t *v788;
  float32x4_t *v789;
  float32x4_t *v790;
  uint64_t v791;
  const float *v792;
  float32x4_t v793;
  float32x4_t v794;
  float32x4_t v795;
  float32x4_t v796;
  float32x4_t v797;
  int v798;
  uint64_t v799;
  int v800;
  float32x4_t *v801;
  float32x4_t *v802;
  unint64_t v803;
  unint64_t v804;
  char *v805;
  const float *v806;
  const float *v807;
  float32x4_t v808;
  float32x4_t v809;
  float32x4_t v810;
  float32x4_t v811;
  float32x4_t v812;
  float32x4_t v813;
  float32x4_t v814;
  float32x4_t v815;
  float32x4_t v816;
  float32x4_t v817;
  float32x4_t v818;
  float32x4_t v819;
  float32x4_t v820;
  const float *v821;
  float32x4_t v822;
  float32x4_t v823;
  float32x4_t v824;
  float32x4_t v825;
  float32x4_t v826;
  float32x4_t v827;
  float32x4_t v828;
  float32x4_t v829;
  NSObject *v831;
  _opaque_pthread_t *v832;
  mach_port_t v833;
  void *v834;
  NSObject *v835;
  _opaque_pthread_t *v836;
  mach_port_t v837;
  void *v838;
  NSObject *v839;
  _opaque_pthread_t *v840;
  mach_port_t v841;
  void *exception;
  NSObject *v843;
  _opaque_pthread_t *v844;
  mach_port_t v845;
  void *v846;
  NSObject *v847;
  _opaque_pthread_t *v848;
  mach_port_t v849;
  void *v850;
  uint64_t *v851;
  const float ***v852;
  std::logic_error v853;
  std::string::size_type v854;
  std::logic_error v855;
  _BYTE v856[5];
  std::string v857;
  uint64_t (**v858)();
  std::string v859;
  std::string v860;
  std::logic_error v861;
  void *v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  int v866;
  NSObject **v867;
  __int16 v868;
  char *v869;
  __int16 v870;
  int v871;
  __int16 v872;
  _BYTE v873[14];
  const char *v874;
  int v875;
  uint64_t v876;

  v876 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 96) == *(_QWORD *)(a1 + 104))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v867, "com.apple.coreaudio", "AMCP");
    v839 = *v867;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v867);
    if (os_log_type_enabled(v839, OS_LOG_TYPE_ERROR))
    {
      v840 = pthread_self();
      v841 = pthread_mach_thread_np(v840);
      LODWORD(v867) = 67109890;
      HIDWORD(v867) = v841;
      v868 = 2080;
      v869 = "Ramstad_Resampler.cpp";
      v870 = 1024;
      v871 = 37;
      v872 = 2080;
      *(_QWORD *)v873 = "not (not m_resamplers.empty())";
      _os_log_error_impl(&dword_1B57BA000, v839, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v867, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v855);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v860);
    std::logic_error::logic_error(&v853, &v860);
    v853.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v861, &v853);
    v863 = 0;
    v864 = 0;
    v865 = 0;
    v866 = -1;
    v861.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v862 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v867, (uint64_t)&v861);
    *(_QWORD *)&v873[6] = "virtual Sample_Time_Range AMCP::DAL::Ramstad_Resampler::process(const Sample_Group<float> &, S"
                          "ample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
    v874 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ramstad_Resampler.cpp";
    v875 = 37;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v857.__r_.__value_.__l.__data_);
    v858 = off_1E69A20A0;
    v859 = v857;
    memset(&v857, 0, sizeof(v857));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v867, (uint64_t)&v858);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&v867);
  }
  if (*a2 == a2[1])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v867, "com.apple.coreaudio", "AMCP");
    v843 = *v867;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v867);
    if (os_log_type_enabled(v843, OS_LOG_TYPE_ERROR))
    {
      v844 = pthread_self();
      v845 = pthread_mach_thread_np(v844);
      LODWORD(v867) = 67109890;
      HIDWORD(v867) = v845;
      v868 = 2080;
      v869 = "Ramstad_Resampler.cpp";
      v870 = 1024;
      v871 = 38;
      v872 = 2080;
      *(_QWORD *)v873 = "not (not source.empty())";
      _os_log_error_impl(&dword_1B57BA000, v843, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v867, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v855);
    v846 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v860);
    std::logic_error::logic_error(&v853, &v860);
    v853.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v861, &v853);
    v863 = 0;
    v864 = 0;
    v865 = 0;
    v866 = -1;
    v861.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v862 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v867, (uint64_t)&v861);
    *(_QWORD *)&v873[6] = "virtual Sample_Time_Range AMCP::DAL::Ramstad_Resampler::process(const Sample_Group<float> &, S"
                          "ample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
    v874 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ramstad_Resampler.cpp";
    v875 = 38;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v857.__r_.__value_.__l.__data_);
    v858 = off_1E69A20A0;
    v859 = v857;
    memset(&v857, 0, sizeof(v857));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v867, (uint64_t)&v858);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v846, (uint64_t)&v867);
  }
  std::string::basic_string[abi:ne180100]<0>(&v867, "scale ratio");
  v15 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a4, (unsigned __int8 *)&v867);
  if (v15)
    v16 = AMCP::Thing::convert_to<double>((uint64_t)(v15 + 40));
  else
    v16 = 1.0;
  if (SHIBYTE(v871) < 0)
    operator delete(v867);
  v851 = a3;
  v852 = a2;
  *(_DWORD *)&v856[1] = 0;
  v17 = a7 - a6;
  v18 = *(uint64_t **)(a1 + 96);
  v19 = *(uint64_t **)(a1 + 104);
  if (v18 != v19)
  {
    v20 = vcvtmd_s64_f64(v17);
    v21 = vcvtmd_s64_f64(a5);
    LODWORD(v7) = vcvtmd_s64_f64(v16);
    v22 = vcvtmd_s64_f64((v16 - floor(v16)) * 2147483650.0);
    do
    {
      v23 = *v18;
      *(_DWORD *)(v23 + 60) = v7;
      *(_DWORD *)(v23 + 68) = v22;
      *(_QWORD *)(v23 + 80) = (v7 << 32 >> 1) + v22;
      *(_QWORD *)(v23 + 256) = -1;
      *(_DWORD *)(v23 + 264) = -1;
      if (*(_DWORD *)(a1 + 88) == 1)
      {
        v24 = (AMCP::Log::Scope_Registry *)RamstadSRC::outputSamplesForInputSamples((RamstadSRC *)v23, v21, (int *)&v856[1]);
        if ((int)v24 <= 0)
        {
          AMCP::Log::Scope_Registry::get(v24);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v867, "com.apple.coreaudio", "AMCP");
          v831 = *v867;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v867);
          if (os_log_type_enabled(v831, OS_LOG_TYPE_ERROR))
          {
            v832 = pthread_self();
            v833 = pthread_mach_thread_np(v832);
            LODWORD(v867) = 67109890;
            HIDWORD(v867) = v833;
            v868 = 2080;
            v869 = "Ramstad_Resampler.cpp";
            v870 = 1024;
            v871 = 50;
            v872 = 2080;
            *(_QWORD *)v873 = "not (output_length > 0)";
            _os_log_error_impl(&dword_1B57BA000, v831, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v867, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v855);
          v834 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v860);
          std::logic_error::logic_error(&v853, &v860);
          v853.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v861, &v853);
          v863 = 0;
          v864 = 0;
          v865 = 0;
          v866 = -1;
          v861.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v862 = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v867, (uint64_t)&v861);
          *(_QWORD *)&v873[6] = "virtual Sample_Time_Range AMCP::DAL::Ramstad_Resampler::process(const Sample_Group<float"
                                "> &, Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
          v874 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ramstad_Resampler.cpp";
          v875 = 50;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v857.__r_.__value_.__l.__data_);
          v858 = off_1E69A20A0;
          v859 = v857;
          memset(&v857, 0, sizeof(v857));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v867, (uint64_t)&v858);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v834, (uint64_t)&v867);
        }
        v17 = (double)(int)v24;
      }
      else
      {
        v25 = (AMCP::Log::Scope_Registry *)RamstadSRC::inputSamplesForOutputSamples((RamstadSRC *)v23, v20);
        *(_DWORD *)&v856[1] = (_DWORD)v25;
        v26 = (int)v25 - v21;
        if (v26 < 0)
          v26 = v21 - (int)v25;
        if ((unint64_t)v26 >= 2)
        {
          AMCP::Log::Scope_Registry::get(v25);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v867, "com.apple.coreaudio", "AMCP");
          v835 = *v867;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v867);
          if (os_log_type_enabled(v835, OS_LOG_TYPE_ERROR))
          {
            v836 = pthread_self();
            v837 = pthread_mach_thread_np(v836);
            LODWORD(v867) = 67109890;
            HIDWORD(v867) = v837;
            v868 = 2080;
            v869 = "Ramstad_Resampler.cpp";
            v870 = 1024;
            v871 = 56;
            v872 = 2080;
            *(_QWORD *)v873 = "not (std::abs(actual_input_consumed - number_of_samples.get()) <= 1.0)";
            _os_log_error_impl(&dword_1B57BA000, v835, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v867, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v855);
          v838 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v860);
          std::logic_error::logic_error(&v853, &v860);
          v853.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v861, &v853);
          v863 = 0;
          v864 = 0;
          v865 = 0;
          v866 = -1;
          v861.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v862 = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v867, (uint64_t)&v861);
          *(_QWORD *)&v873[6] = "virtual Sample_Time_Range AMCP::DAL::Ramstad_Resampler::process(const Sample_Group<float"
                                "> &, Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
          v874 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ramstad_Resampler.cpp";
          v875 = 56;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v857.__r_.__value_.__l.__data_);
          v858 = off_1E69A20A0;
          v859 = v857;
          memset(&v857, 0, sizeof(v857));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v867, (uint64_t)&v858);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v838, (uint64_t)&v867);
        }
      }
      ++v18;
    }
    while (v18 != v19);
  }
  v27 = (AMCP::DAL::PCM_Data_Handler *)*v851;
  AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(*v851);
  AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)&v860, v27, a6, a6 + v17);
  v29 = *v851;
  if (*v851)
  {
    v30 = *(_DWORD *)(v29 + 20);
    LODWORD(v29) = *(_DWORD *)(v29 + 36);
  }
  else
  {
    LOBYTE(v30) = 0;
  }
  if ((v30 & 0x20) != 0)
    v31 = 1;
  else
    v31 = v29;
  v33 = *v852;
  v32 = v852[1];
  v34 = ((char *)v32 - (char *)*v852) >> 4;
  if (v34 != (uint64_t)(v860.__r_.__value_.__l.__size_ - v860.__r_.__value_.__r.__words[0]) >> 4)
  {
    AMCP::Log::Scope_Registry::get(v28);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v867, "com.apple.coreaudio", "AMCP");
    v847 = *v867;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v867);
    if (os_log_type_enabled(v847, OS_LOG_TYPE_ERROR))
    {
      v848 = pthread_self();
      v849 = pthread_mach_thread_np(v848);
      LODWORD(v867) = 67109890;
      HIDWORD(v867) = v849;
      v868 = 2080;
      v869 = "Ramstad_Resampler.cpp";
      v870 = 1024;
      v871 = 65;
      v872 = 2080;
      *(_QWORD *)v873 = "not (source.size() == dest.size())";
      _os_log_error_impl(&dword_1B57BA000, v847, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v867, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v856);
    v850 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v857);
    std::logic_error::logic_error(&v855, &v857);
    v855.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v861, &v855);
    v863 = 0;
    v864 = 0;
    v865 = 0;
    v866 = -1;
    v861.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v862 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v867, (uint64_t)&v861);
    *(_QWORD *)&v873[6] = "virtual Sample_Time_Range AMCP::DAL::Ramstad_Resampler::process(const Sample_Group<float> &, S"
                          "ample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
    v874 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ramstad_Resampler.cpp";
    v875 = 65;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v853);
    v858 = off_1E69A20A0;
    *(std::logic_error *)&v859.__r_.__value_.__l.__data_ = v853;
    v859.__r_.__value_.__r.__words[2] = v854;
    v853.__vftable = 0;
    v853.__imp_.__imp_ = 0;
    v854 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v867, (uint64_t)&v858);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v850, (uint64_t)&v867);
  }
  if (v34 == 2)
  {
    RamstadSRC::processStereo(**(RamstadSRC ***)(a1 + 96), *v33, v33[2], *(float **)v860.__r_.__value_.__l.__data_, *(float **)(v860.__r_.__value_.__r.__words[0] + 16), vcvtmd_s64_f64(a5), vcvtmd_s64_f64(v17), v31, v31);
    goto LABEL_315;
  }
  if (v34 != 1)
  {
    v851 = (uint64_t *)&v851;
    MEMORY[0x1E0C80A78](v28);
    v40 = (8 * v34 + 15) & 0xFFFFFFFFFFFFFFF0;
    v41 = (char *)&v851 - v40;
    v43 = v42 >> 1;
    if (v43 >= 0x200)
      v44 = 512;
    else
      v44 = v43;
    bzero((char *)&v851 - v40, v44);
    MEMORY[0x1E0C80A78](v45);
    v46 = (char *)&v851 - v40;
    bzero((char *)&v851 - v40, v44);
    if (v32 != v33)
    {
      v47 = *v852;
      v48 = (uint64_t *)v860.__r_.__value_.__r.__words[0];
      if (v34 <= 1)
        v49 = 1;
      else
        v49 = v34;
      v50 = (const float **)((char *)&v851 - v40);
      v51 = (uint64_t **)((char *)&v851 - v40);
      do
      {
        v52 = *v47;
        v47 += 2;
        *v50++ = v52;
        v53 = *v48;
        v48 += 2;
        *v51++ = v53;
        --v49;
      }
      while (v49);
    }
    v54 = **(_QWORD **)(a1 + 96);
    v55 = vcvtmd_s64_f64(a5);
    v56 = vcvtmd_s64_f64(v17);
    RamstadSRC::checkPreflight((_DWORD *)v54, v55, v56);
    if (*(_BYTE *)(v54 + 93))
    {
      if (*(_BYTE *)(v54 + 92))
      {
        v57 = *(_DWORD *)(v54 + 60);
        v59 = *(_DWORD *)(v54 + 68);
        v58 = *(_DWORD *)(v54 + 72);
        v60 = *(_DWORD *)(v54 + 88);
        v61 = *(_QWORD *)(v54 + 16);
        v62 = *(float64x2_t **)(v61 + 16);
        v63 = *(_QWORD *)(v61 + 40);
        v64 = *(float64x2_t **)(v54 + 160);
        v65 = *(float64x2_t **)(v54 + 184);
        v66 = *(_DWORD *)(v54 + 52);
        if (*(_DWORD *)(v54 + 56) == 8)
        {
          if (v56 < 1)
          {
            v70 = 0;
            LODWORD(v69) = 0;
          }
          else
          {
            v67 = 0;
            v68 = 0;
            LODWORD(v69) = 0;
            v70 = 0;
            do
            {
              if (v60 >= 1)
              {
                v71 = 0;
                v69 = (int)v69;
                do
                {
                  v72 = *(unsigned int *)(v54 + 48);
                  if ((_DWORD)v72)
                  {
                    v73 = (uint64_t *)((char *)&v851 - v40);
                    v74 = v64;
                    v75 = v65;
                    do
                    {
                      v76 = *v73++;
                      v77 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(v76 + 4 * v69)), 0);
                      v79 = *v74;
                      v78 = v74[1];
                      v81 = v74[2];
                      v80 = v74[3];
                      v82 = vmlaq_f64(v77, v81, v62[2]);
                      v83 = vmlaq_f64(v77, v80, v62[3]);
                      v84 = vmlaq_f64(v77, *v74, *v62);
                      v85 = vmlaq_f64(vmlaq_f64(v77, v78, v62[1]), v75[1], v62[5]);
                      v86 = vmlaq_f64(v84, *v75, v62[4]);
                      v87 = vmlaq_f64(v83, v75[3], v62[7]);
                      v88 = vmlaq_f64(v82, v75[2], v62[6]);
                      v75[2] = v81;
                      v75[3] = v80;
                      *v75 = v79;
                      v75[1] = v78;
                      v75 += 4;
                      v74[2] = v88;
                      v74[3] = v87;
                      *v74 = v86;
                      v74[1] = v85;
                      v74 += 4;
                      --v72;
                    }
                    while (v72);
                  }
                  v69 += v31;
                  ++v71;
                }
                while (v71 != v60);
              }
              v89 = *(unsigned int *)(v54 + 48);
              if ((_DWORD)v89)
              {
                v91 = v64;
                v92 = v65;
                v93 = (uint64_t *)((char *)&v851 - v40);
                do
                {
                  v94 = v92[2];
                  v95 = v92[3];
                  v96 = *v92;
                  v97 = v92[1];
                  v92 += 4;
                  v98 = *v93++;
                  v90 = (float64x2_t *)(v63 + ((uint64_t)(2 * v58) << 6));
                  v99 = vaddvq_f64(vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v90[4], v96), *v91, *v90), vmlaq_f64(vmulq_f64(v90[6], v94), v91[2], v90[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v90[5], v97), v91[1], v90[1]), vmlaq_f64(vmulq_f64(v90[7], v95), v91[3], v90[3]))));
                  *(float *)(v98 + 4 * v67) = v99;
                  v91 += 4;
                  --v89;
                }
                while (v89);
              }
              v70 += v60;
              v100 = v58 + v59;
              if (v100 < v66)
                v60 = v57;
              else
                v60 = v57 + 1;
              if (v100 < v66)
                v101 = 0;
              else
                v101 = v66;
              v58 = v100 - v101;
              ++v68;
              v67 += v31;
            }
            while (v68 != v56);
          }
          v510 = v55 - v70;
          if (v55 <= v70)
            goto LABEL_214;
          if (v60 < v510)
            v510 = v60;
          if (v510 >= 1)
          {
            v511 = 0;
            v512 = (int)v69;
            do
            {
              v513 = *(unsigned int *)(v54 + 48);
              if ((_DWORD)v513)
              {
                v514 = (uint64_t *)((char *)&v851 - v40);
                v515 = v64;
                v516 = v65;
                do
                {
                  v517 = *v514++;
                  v518 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(v517 + 4 * v512)), 0);
                  v520 = *v515;
                  v519 = v515[1];
                  v522 = v515[2];
                  v521 = v515[3];
                  v523 = vmlaq_f64(v518, v522, v62[2]);
                  v524 = vmlaq_f64(v518, v521, v62[3]);
                  v525 = vmlaq_f64(v518, *v515, *v62);
                  v526 = vmlaq_f64(vmlaq_f64(v518, v519, v62[1]), v516[1], v62[5]);
                  v527 = vmlaq_f64(v525, *v516, v62[4]);
                  v528 = vmlaq_f64(v524, v516[3], v62[7]);
                  v529 = vmlaq_f64(v523, v516[2], v62[6]);
                  v516[2] = v522;
                  v516[3] = v521;
                  *v516 = v520;
                  v516[1] = v519;
                  v516 += 4;
                  v515[2] = v529;
                  v515[3] = v528;
                  *v515 = v527;
                  v515[1] = v526;
                  v515 += 4;
                  --v513;
                }
                while (v513);
              }
              v512 += v31;
              ++v511;
            }
            while (v511 != v510);
          }
        }
        else
        {
          if (v56 < 1)
          {
            v205 = 0;
            LODWORD(v204) = 0;
          }
          else
          {
            v202 = 0;
            v203 = 0;
            LODWORD(v204) = 0;
            v205 = 0;
            do
            {
              if (v60 >= 1)
              {
                v206 = 0;
                v204 = (int)v204;
                do
                {
                  v207 = *(_DWORD *)(v54 + 48);
                  v208 = v207 != 0;
                  v209 = v64;
                  v210 = v65;
                  v211 = (v207 - v208);
                  if (v207 != v208)
                  {
                    v212 = 0;
                    v210 = v65;
                    v209 = v64;
                    do
                    {
                      v213 = &v41[8 * v212];
                      v214 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*(_QWORD *)v213 + 4 * v204)), 0);
                      v215 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*((_QWORD *)v213 + 1) + 4 * v204)), 0);
                      v216 = *v209;
                      v217 = v209[1];
                      v218 = v209[2];
                      v219 = v209[3];
                      v220 = vmlaq_f64(vmlaq_f64(v214, *v209, *v62), *v210, v62[8]);
                      v221 = vmlaq_f64(vmlaq_f64(v214, v217, v62[1]), v210[1], v62[9]);
                      v222 = vmlaq_f64(vmlaq_f64(v214, v218, v62[2]), v210[2], v62[10]);
                      v223 = vmlaq_f64(vmlaq_f64(v214, v219, v62[3]), v210[3], v62[11]);
                      v210[2] = v218;
                      v210[3] = v219;
                      *v210 = v216;
                      v210[1] = v217;
                      v209[2] = v222;
                      v209[3] = v223;
                      *v209 = v220;
                      v209[1] = v221;
                      v224 = v209[4];
                      v225 = v209[5];
                      v226 = v209[6];
                      v227 = v209[7];
                      v228 = vmlaq_f64(vmlaq_f64(v215, v224, *v62), v210[4], v62[8]);
                      v229 = vmlaq_f64(vmlaq_f64(v215, v225, v62[1]), v210[5], v62[9]);
                      v230 = vmlaq_f64(vmlaq_f64(v215, v226, v62[2]), v210[6], v62[10]);
                      v231 = vmlaq_f64(vmlaq_f64(v215, v227, v62[3]), v210[7], v62[11]);
                      v210[6] = v226;
                      v210[7] = v227;
                      v210[4] = v224;
                      v210[5] = v225;
                      v209[6] = v230;
                      v209[7] = v231;
                      v209[4] = v228;
                      v209[5] = v229;
                      v233 = v209[8];
                      v232 = v209[9];
                      v235 = v209[10];
                      v234 = v209[11];
                      v236 = vmlaq_f64(v215, v235, v62[6]);
                      v237 = vmlaq_f64(v214, v233, v62[4]);
                      v238 = vmlaq_f64(vmlaq_f64(v214, v232, v62[5]), v210[9], v62[13]);
                      v239 = vmlaq_f64(v237, v210[8], v62[12]);
                      v240 = vmlaq_f64(vmlaq_f64(v215, v234, v62[7]), v210[11], v62[15]);
                      v241 = vmlaq_f64(v236, v210[10], v62[14]);
                      v210[10] = v235;
                      v210[11] = v234;
                      v210[8] = v233;
                      v210[9] = v232;
                      v209[10] = v241;
                      v209[11] = v240;
                      v209[8] = v239;
                      v209[9] = v238;
                      v209 += 12;
                      v210 += 12;
                      v212 += 2;
                    }
                    while (v212 < v211);
                  }
                  if ((v207 & 1) != 0)
                  {
                    v242 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*(_QWORD *)&v41[8 * (v207 - 1)] + 4 * v204)), 0);
                    v243 = *v209;
                    v244 = v209[1];
                    v245 = v209[2];
                    v246 = v209[3];
                    v247 = vmlaq_f64(vmlaq_f64(v242, *v209, *v62), *v210, v62[8]);
                    v248 = vmlaq_f64(vmlaq_f64(v242, v244, v62[1]), v210[1], v62[9]);
                    v249 = vmlaq_f64(vmlaq_f64(v242, v245, v62[2]), v210[2], v62[10]);
                    v250 = vmlaq_f64(vmlaq_f64(v242, v246, v62[3]), v210[3], v62[11]);
                    v210[2] = v245;
                    v210[3] = v246;
                    *v210 = v243;
                    v210[1] = v244;
                    v209[2] = v249;
                    v209[3] = v250;
                    *v209 = v247;
                    v209[1] = v248;
                    v252 = v209[4];
                    v251 = v209[5];
                    v254 = v209[6];
                    v253 = v209[7];
                    v255 = vmlaq_f64(v242, v252, v62[4]);
                    v256 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v253, v62[7]), v210[7], v62[15]);
                    v257 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v254, v62[6]), v210[6], v62[14]);
                    v258 = vmlaq_f64(vmlaq_f64(v242, v251, v62[5]), v210[5], v62[13]);
                    v259 = vmlaq_f64(v255, v210[4], v62[12]);
                    v210[4] = v252;
                    v210[5] = v251;
                    v210[6] = v254;
                    v210[7] = v253;
                    v209[6] = v257;
                    v209[7] = v256;
                    v209[4] = v259;
                    v209[5] = v258;
                  }
                  v204 += v31;
                  ++v206;
                }
                while (v206 != v60);
              }
              v260 = (float64x2_t *)(v63 + ((uint64_t)(4 * v58) << 6));
              v261 = *(_DWORD *)(v54 + 48);
              v262 = v261 != 0;
              v263 = v64;
              v264 = v65;
              v265 = (v261 - v262);
              if (v261 != v262)
              {
                v266 = 0;
                v264 = v65;
                v263 = v64;
                do
                {
                  v267 = &v46[8 * v266];
                  v268 = v260[1];
                  v270 = v260[2];
                  v269 = v260[3];
                  v271 = v260[10];
                  v272 = v260[11];
                  v273 = v260[8];
                  v274 = v260[9];
                  v275 = vmlaq_f64(vmulq_f64(v274, v264[5]), v263[5], v268);
                  v277 = *(_QWORD *)v267;
                  v276 = *((_QWORD *)v267 + 1);
                  v278 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v273, *v264), *v263, *v260), vmlaq_f64(vmulq_f64(v271, v264[2]), v263[2], v270)), vaddq_f64(vmlaq_f64(vmulq_f64(v274, v264[1]), v263[1], v268), vmlaq_f64(vmulq_f64(v272, v264[3]), v263[3], v269)));
                  v279 = (int64x2_t)vaddq_f64(vmlaq_f64(vmulq_f64(v260[12], v264[8]), v263[8], v260[4]), vmlaq_f64(vmulq_f64(v260[13], v264[9]), v263[9], v260[5]));
                  *(double *)v279.i64 = vaddvq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v278, v279), (float64x2_t)vzip2q_s64(v278, v279)));
                  v280 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v273, v264[4]), v263[4], *v260), vmlaq_f64(vmulq_f64(v271, v264[6]), v263[6], v270)), vaddq_f64(v275, vmlaq_f64(vmulq_f64(v272, v264[7]), v263[7], v269)));
                  v281 = (int64x2_t)vaddq_f64(vmlaq_f64(vmulq_f64(v260[14], v264[10]), v263[10], v260[6]), vmlaq_f64(vmulq_f64(v260[15], v264[11]), v263[11], v260[7]));
                  *(float *)v279.i32 = *(double *)v279.i64;
                  *(float *)v280.i32 = vaddvq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v280, v281), (float64x2_t)vzip2q_s64(v280, v281)));
                  *(_DWORD *)(v277 + 4 * v202) = v279.i32[0];
                  *(_DWORD *)(v276 + 4 * v202) = v280.i32[0];
                  v263 += 12;
                  v264 += 12;
                  v266 += 2;
                }
                while (v266 < v265);
              }
              if ((v261 & 1) != 0)
              {
                v282 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v260[8], *v264), *v263, *v260), vmlaq_f64(vmulq_f64(v260[10], v264[2]), v263[2], v260[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v260[9], v264[1]), v263[1], v260[1]), vmlaq_f64(vmulq_f64(v260[11], v264[3]), v263[3], v260[3])));
                v283 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v260[12], v264[4]), v263[4], v260[4]), vmlaq_f64(vmulq_f64(v260[14], v264[6]), v263[6], v260[6])), vaddq_f64(vmlaq_f64(vmulq_f64(v260[13], v264[5]), v263[5], v260[5]), vmlaq_f64(vmulq_f64(v260[15], v264[7]), v263[7], v260[7])));
                *(float *)v282.i32 = vaddvq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v282, v283), (float64x2_t)vzip2q_s64(v282, v283)));
                *(_DWORD *)(*(_QWORD *)&v46[8 * (v261 - 1)] + 4 * v202) = v282.i32[0];
              }
              v205 += v60;
              v284 = v58 + v59;
              if (v284 < v66)
                v60 = v57;
              else
                v60 = v57 + 1;
              if (v284 < v66)
                v285 = 0;
              else
                v285 = v66;
              v58 = v284 - v285;
              ++v203;
              v202 += v31;
            }
            while (v203 != v56);
          }
          v510 = v55 - v205;
          if (v55 <= v205)
            goto LABEL_214;
          if (v60 < v510)
            v510 = v60;
          if (v510 >= 1)
          {
            v530 = 0;
            v531 = (int)v204;
            do
            {
              v532 = *(_DWORD *)(v54 + 48);
              v533 = v64;
              v534 = v65;
              v535 = v532 - (v532 != 0);
              if ((_DWORD)v535)
              {
                v536 = 0;
                v534 = v65;
                v533 = v64;
                do
                {
                  v537 = &v41[8 * v536];
                  v538 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*(_QWORD *)v537 + 4 * v531)), 0);
                  v539 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*((_QWORD *)v537 + 1) + 4 * v531)), 0);
                  v540 = *v533;
                  v541 = v533[1];
                  v542 = v533[2];
                  v543 = v533[3];
                  v544 = vmlaq_f64(vmlaq_f64(v538, *v533, *v62), *v534, v62[8]);
                  v545 = vmlaq_f64(vmlaq_f64(v538, v541, v62[1]), v534[1], v62[9]);
                  v546 = vmlaq_f64(vmlaq_f64(v538, v542, v62[2]), v534[2], v62[10]);
                  v547 = vmlaq_f64(vmlaq_f64(v538, v543, v62[3]), v534[3], v62[11]);
                  v534[2] = v542;
                  v534[3] = v543;
                  *v534 = v540;
                  v534[1] = v541;
                  v533[2] = v546;
                  v533[3] = v547;
                  *v533 = v544;
                  v533[1] = v545;
                  v548 = v533[4];
                  v549 = v533[5];
                  v550 = v533[6];
                  v551 = v533[7];
                  v552 = vmlaq_f64(vmlaq_f64(v539, v548, *v62), v534[4], v62[8]);
                  v553 = vmlaq_f64(vmlaq_f64(v539, v549, v62[1]), v534[5], v62[9]);
                  v554 = vmlaq_f64(vmlaq_f64(v539, v550, v62[2]), v534[6], v62[10]);
                  v555 = vmlaq_f64(vmlaq_f64(v539, v551, v62[3]), v534[7], v62[11]);
                  v534[6] = v550;
                  v534[7] = v551;
                  v534[4] = v548;
                  v534[5] = v549;
                  v533[6] = v554;
                  v533[7] = v555;
                  v533[4] = v552;
                  v533[5] = v553;
                  v557 = v533[8];
                  v556 = v533[9];
                  v559 = v533[10];
                  v558 = v533[11];
                  v560 = vmlaq_f64(v539, v559, v62[6]);
                  v561 = vmlaq_f64(v538, v557, v62[4]);
                  v562 = vmlaq_f64(vmlaq_f64(v538, v556, v62[5]), v534[9], v62[13]);
                  v563 = vmlaq_f64(v561, v534[8], v62[12]);
                  v564 = vmlaq_f64(vmlaq_f64(v539, v558, v62[7]), v534[11], v62[15]);
                  v565 = vmlaq_f64(v560, v534[10], v62[14]);
                  v534[10] = v559;
                  v534[11] = v558;
                  v534[8] = v557;
                  v534[9] = v556;
                  v533[10] = v565;
                  v533[11] = v564;
                  v533[8] = v563;
                  v533[9] = v562;
                  v533 += 12;
                  v534 += 12;
                  v536 += 2;
                }
                while (v536 < v535);
              }
              if ((v532 & 1) != 0)
              {
                v566 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*(_QWORD *)&v41[8 * (v532 - 1)] + 4 * v531)), 0);
                v567 = *v533;
                v568 = v533[1];
                v569 = v533[2];
                v570 = v533[3];
                v571 = vmlaq_f64(vmlaq_f64(v566, *v533, *v62), *v534, v62[8]);
                v572 = vmlaq_f64(vmlaq_f64(v566, v568, v62[1]), v534[1], v62[9]);
                v573 = vmlaq_f64(vmlaq_f64(v566, v569, v62[2]), v534[2], v62[10]);
                v574 = vmlaq_f64(vmlaq_f64(v566, v570, v62[3]), v534[3], v62[11]);
                v534[2] = v569;
                v534[3] = v570;
                *v534 = v567;
                v534[1] = v568;
                v533[2] = v573;
                v533[3] = v574;
                *v533 = v571;
                v533[1] = v572;
                v576 = v533[4];
                v575 = v533[5];
                v578 = v533[6];
                v577 = v533[7];
                v579 = vmlaq_f64(v566, v576, v62[4]);
                v580 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v577, v62[7]), v534[7], v62[15]);
                v581 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v578, v62[6]), v534[6], v62[14]);
                v582 = vmlaq_f64(vmlaq_f64(v566, v575, v62[5]), v534[5], v62[13]);
                v583 = vmlaq_f64(v579, v534[4], v62[12]);
                v534[4] = v576;
                v534[5] = v575;
                v534[6] = v578;
                v534[7] = v577;
                v533[6] = v581;
                v533[7] = v580;
                v533[4] = v583;
                v533[5] = v582;
              }
              v531 += v31;
              ++v530;
            }
            while (v530 != v510);
          }
        }
        v60 -= v510;
LABEL_214:
        *(_DWORD *)(v54 + 72) = v58;
        *(_DWORD *)(v54 + 88) = v60;
LABEL_314:
        *(_QWORD *)(v54 + 256) = -1;
        *(_DWORD *)(v54 + 264) = -1;
        goto LABEL_315;
      }
      v140 = *(_DWORD *)(v54 + 68);
      v139 = *(_DWORD *)(v54 + 72);
      v141 = *(_DWORD *)(v54 + 88);
      v142 = *(_QWORD *)(v54 + 16);
      v143 = *(float64x2_t **)(v142 + 16);
      v144 = *(_QWORD *)(v142 + 40);
      v145 = *(float64x2_t **)(v54 + 160);
      v146 = *(float64x2_t **)(v54 + 184);
      v147 = *(_DWORD *)(v54 + 60);
      if (*(_DWORD *)(v54 + 56) == 8)
      {
        if (v56 < 1)
        {
          LODWORD(v150) = 0;
          v149 = 0;
        }
        else
        {
          v148 = 0;
          v149 = 0;
          LODWORD(v150) = 0;
          for (i = 0; i != v56; ++i)
          {
            if (v141 >= 1)
            {
              v152 = 0;
              v150 = (int)v150;
              do
              {
                v153 = *(unsigned int *)(v54 + 48);
                if ((_DWORD)v153)
                {
                  v154 = (uint64_t *)v41;
                  v155 = v145;
                  v156 = v146;
                  do
                  {
                    v157 = *v154++;
                    v158 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(v157 + 4 * v150)), 0);
                    v160 = *v155;
                    v159 = v155[1];
                    v162 = v155[2];
                    v161 = v155[3];
                    v163 = vmlaq_f64(v158, v162, v143[2]);
                    v164 = vmlaq_f64(v158, v161, v143[3]);
                    v165 = vmlaq_f64(v158, *v155, *v143);
                    v166 = vmlaq_f64(vmlaq_f64(v158, v159, v143[1]), v156[1], v143[5]);
                    v167 = vmlaq_f64(v165, *v156, v143[4]);
                    v168 = vmlaq_f64(v164, v156[3], v143[7]);
                    v169 = vmlaq_f64(v163, v156[2], v143[6]);
                    v156[2] = v162;
                    v156[3] = v161;
                    *v156 = v160;
                    v156[1] = v159;
                    v156 += 4;
                    v155[2] = v169;
                    v155[3] = v168;
                    *v155 = v167;
                    v155[1] = v166;
                    v155 += 4;
                    --v153;
                  }
                  while (v153);
                }
                v150 += v31;
                ++v152;
              }
              while (v152 != v141);
            }
            v170 = *(unsigned int *)(v54 + 48);
            if ((_DWORD)v170)
            {
              v171 = *(double *)(v54 + 96) * (double)(v139 & 0x7FFFFF);
              v172 = (v139 >> 22) & 0x1FE;
              v173 = (float64x2_t *)(v144 + (v172 << 6));
              v174 = (float64x2_t *)(v144 + ((unint64_t)(v172 + 2) << 6));
              v175 = *(float **)(v54 + 208);
              v176 = v145;
              v177 = v146;
              v178 = v175;
              v179 = *(unsigned int *)(v54 + 48);
              do
              {
                v180 = v177[2];
                v181 = v177[3];
                v182 = *v177;
                v183 = v177[1];
                v177 += 4;
                v184 = vaddvq_f64(vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v173[4], v182), *v176, *v173), vmlaq_f64(vmulq_f64(v173[6], v180), v176[2], v173[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v173[5], v183), v176[1], v173[1]), vmlaq_f64(vmulq_f64(v173[7], v181), v176[3], v173[3]))));
                *v178++ = v184;
                v176 += 4;
                --v179;
              }
              while (v179);
              v185 = *(float **)(v54 + 232);
              v186 = v145;
              v187 = v146;
              v188 = v185;
              v189 = v170;
              do
              {
                v190 = v187[2];
                v191 = v187[3];
                v192 = *v187;
                v193 = v187[1];
                v187 += 4;
                v194 = vaddvq_f64(vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v174[4], v192), *v186, *v174), vmlaq_f64(vmulq_f64(v174[6], v190), v186[2], v174[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v174[5], v193), v186[1], v174[1]), vmlaq_f64(vmulq_f64(v174[7], v191), v186[3], v174[3]))));
                *v188++ = v194;
                v186 += 4;
                --v189;
              }
              while (v189);
              v195 = (uint64_t *)v46;
              do
              {
                v196 = *v175++;
                v197 = v196;
                v198 = *v185++;
                v199 = v197 + (float)(v171 * (float)(v198 - v197));
                v200 = *v195++;
                *(float *)(v200 + 4 * v148) = v199;
                --v170;
              }
              while (v170);
            }
            v149 += v141;
            v201 = v139 + v140;
            v139 = (v139 + v140) & 0x7FFFFFFF;
            v141 = v147 + (v201 >> 31);
            v148 += v31;
          }
        }
        v679 = v55 - v149;
        if (v55 <= v149)
          goto LABEL_313;
        if (v141 < v679)
          v679 = v141;
        if (v679 >= 1)
        {
          v680 = 0;
          v681 = (int)v150;
          do
          {
            v682 = *(unsigned int *)(v54 + 48);
            if ((_DWORD)v682)
            {
              v683 = (uint64_t *)v41;
              v684 = v145;
              v685 = v146;
              do
              {
                v686 = *v683++;
                v687 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(v686 + 4 * v681)), 0);
                v689 = *v684;
                v688 = v684[1];
                v691 = v684[2];
                v690 = v684[3];
                v692 = vmlaq_f64(v687, v691, v143[2]);
                v693 = vmlaq_f64(v687, v690, v143[3]);
                v694 = vmlaq_f64(v687, *v684, *v143);
                v695 = vmlaq_f64(vmlaq_f64(v687, v688, v143[1]), v685[1], v143[5]);
                v696 = vmlaq_f64(v694, *v685, v143[4]);
                v697 = vmlaq_f64(v693, v685[3], v143[7]);
                v698 = vmlaq_f64(v692, v685[2], v143[6]);
                v685[2] = v691;
                v685[3] = v690;
                *v685 = v689;
                v685[1] = v688;
                v685 += 4;
                v684[2] = v698;
                v684[3] = v697;
                *v684 = v696;
                v684[1] = v695;
                v684 += 4;
                --v682;
              }
              while (v682);
            }
            v681 += v31;
            ++v680;
          }
          while (v680 != v679);
        }
LABEL_312:
        v141 -= v679;
LABEL_313:
        *(_DWORD *)(v54 + 72) = v139;
        *(_DWORD *)(v54 + 88) = v141;
        goto LABEL_314;
      }
      if (v56 < 1)
      {
        LODWORD(v401) = 0;
        v399 = 0;
LABEL_277:
        v679 = v55 - v399;
        if (v55 <= v399)
          goto LABEL_313;
        if (v141 < v679)
          v679 = v141;
        if (v679 >= 1)
        {
          v731 = 0;
          v732 = (int)v401;
          do
          {
            v733 = *(_DWORD *)(v54 + 48);
            v734 = v145;
            v735 = v146;
            v736 = v733 - (v733 != 0);
            if ((_DWORD)v736)
            {
              v737 = 0;
              v735 = v146;
              v734 = v145;
              do
              {
                v738 = &v41[8 * v737];
                v739 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*(_QWORD *)v738 + 4 * v732)), 0);
                v740 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*((_QWORD *)v738 + 1) + 4 * v732)), 0);
                v741 = *v734;
                v742 = v734[1];
                v743 = v734[2];
                v744 = v734[3];
                v745 = vmlaq_f64(vmlaq_f64(v739, *v734, *v143), *v735, v143[8]);
                v746 = vmlaq_f64(vmlaq_f64(v739, v742, v143[1]), v735[1], v143[9]);
                v747 = vmlaq_f64(vmlaq_f64(v739, v743, v143[2]), v735[2], v143[10]);
                v748 = vmlaq_f64(vmlaq_f64(v739, v744, v143[3]), v735[3], v143[11]);
                v735[2] = v743;
                v735[3] = v744;
                *v735 = v741;
                v735[1] = v742;
                v734[2] = v747;
                v734[3] = v748;
                *v734 = v745;
                v734[1] = v746;
                v749 = v734[4];
                v750 = v734[5];
                v751 = v734[6];
                v752 = v734[7];
                v753 = vmlaq_f64(vmlaq_f64(v740, v749, *v143), v735[4], v143[8]);
                v754 = vmlaq_f64(vmlaq_f64(v740, v750, v143[1]), v735[5], v143[9]);
                v755 = vmlaq_f64(vmlaq_f64(v740, v751, v143[2]), v735[6], v143[10]);
                v756 = vmlaq_f64(vmlaq_f64(v740, v752, v143[3]), v735[7], v143[11]);
                v735[6] = v751;
                v735[7] = v752;
                v735[4] = v749;
                v735[5] = v750;
                v734[6] = v755;
                v734[7] = v756;
                v734[4] = v753;
                v734[5] = v754;
                v758 = v734[8];
                v757 = v734[9];
                v760 = v734[10];
                v759 = v734[11];
                v761 = vmlaq_f64(v740, v760, v143[6]);
                v762 = vmlaq_f64(v739, v758, v143[4]);
                v763 = vmlaq_f64(vmlaq_f64(v739, v757, v143[5]), v735[9], v143[13]);
                v764 = vmlaq_f64(v762, v735[8], v143[12]);
                v765 = vmlaq_f64(vmlaq_f64(v740, v759, v143[7]), v735[11], v143[15]);
                v766 = vmlaq_f64(v761, v735[10], v143[14]);
                v735[10] = v760;
                v735[11] = v759;
                v735[8] = v758;
                v735[9] = v757;
                v734[10] = v766;
                v734[11] = v765;
                v734[8] = v764;
                v734[9] = v763;
                v734 += 12;
                v735 += 12;
                v737 += 2;
              }
              while (v737 < v736);
            }
            if ((v733 & 1) != 0)
            {
              v767 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*(_QWORD *)&v41[8 * (v733 - 1)] + 4 * v732)), 0);
              v768 = *v734;
              v769 = v734[1];
              v770 = v734[2];
              v771 = v734[3];
              v772 = vmlaq_f64(vmlaq_f64(v767, *v734, *v143), *v735, v143[8]);
              v773 = vmlaq_f64(vmlaq_f64(v767, v769, v143[1]), v735[1], v143[9]);
              v774 = vmlaq_f64(vmlaq_f64(v767, v770, v143[2]), v735[2], v143[10]);
              v775 = vmlaq_f64(vmlaq_f64(v767, v771, v143[3]), v735[3], v143[11]);
              v735[2] = v770;
              v735[3] = v771;
              *v735 = v768;
              v735[1] = v769;
              v734[2] = v774;
              v734[3] = v775;
              *v734 = v772;
              v734[1] = v773;
              v777 = v734[4];
              v776 = v734[5];
              v779 = v734[6];
              v778 = v734[7];
              v780 = vmlaq_f64(v767, v777, v143[4]);
              v781 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v778, v143[7]), v735[7], v143[15]);
              v782 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v779, v143[6]), v735[6], v143[14]);
              v783 = vmlaq_f64(vmlaq_f64(v767, v776, v143[5]), v735[5], v143[13]);
              v784 = vmlaq_f64(v780, v735[4], v143[12]);
              v735[4] = v777;
              v735[5] = v776;
              v735[6] = v779;
              v735[7] = v778;
              v734[6] = v782;
              v734[7] = v781;
              v734[4] = v784;
              v734[5] = v783;
            }
            v732 += v31;
            ++v731;
          }
          while (v731 != v679);
        }
        goto LABEL_312;
      }
      v398 = 0;
      v399 = 0;
      v400 = 0;
      LODWORD(v401) = 0;
      while (1)
      {
        if (v141 >= 1)
        {
          v402 = 0;
          v401 = (int)v401;
          do
          {
            v403 = *(_DWORD *)(v54 + 48);
            v404 = v145;
            v405 = v146;
            v406 = v403 - (v403 != 0);
            if ((_DWORD)v406)
            {
              v407 = 0;
              v405 = v146;
              v404 = v145;
              do
              {
                v408 = &v41[8 * v407];
                v409 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*(_QWORD *)v408 + 4 * v401)), 0);
                v410 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*((_QWORD *)v408 + 1) + 4 * v401)), 0);
                v411 = *v404;
                v412 = v404[1];
                v413 = v404[2];
                v414 = v404[3];
                v415 = vmlaq_f64(vmlaq_f64(v409, *v404, *v143), *v405, v143[8]);
                v416 = vmlaq_f64(vmlaq_f64(v409, v412, v143[1]), v405[1], v143[9]);
                v417 = vmlaq_f64(vmlaq_f64(v409, v413, v143[2]), v405[2], v143[10]);
                v418 = vmlaq_f64(vmlaq_f64(v409, v414, v143[3]), v405[3], v143[11]);
                v405[2] = v413;
                v405[3] = v414;
                *v405 = v411;
                v405[1] = v412;
                v404[2] = v417;
                v404[3] = v418;
                *v404 = v415;
                v404[1] = v416;
                v419 = v404[4];
                v420 = v404[5];
                v421 = v404[6];
                v422 = v404[7];
                v423 = vmlaq_f64(vmlaq_f64(v410, v419, *v143), v405[4], v143[8]);
                v424 = vmlaq_f64(vmlaq_f64(v410, v420, v143[1]), v405[5], v143[9]);
                v425 = vmlaq_f64(vmlaq_f64(v410, v421, v143[2]), v405[6], v143[10]);
                v426 = vmlaq_f64(vmlaq_f64(v410, v422, v143[3]), v405[7], v143[11]);
                v405[6] = v421;
                v405[7] = v422;
                v405[4] = v419;
                v405[5] = v420;
                v404[6] = v425;
                v404[7] = v426;
                v404[4] = v423;
                v404[5] = v424;
                v428 = v404[8];
                v427 = v404[9];
                v430 = v404[10];
                v429 = v404[11];
                v431 = vmlaq_f64(v410, v430, v143[6]);
                v432 = vmlaq_f64(v409, v428, v143[4]);
                v433 = vmlaq_f64(vmlaq_f64(v409, v427, v143[5]), v405[9], v143[13]);
                v434 = vmlaq_f64(v432, v405[8], v143[12]);
                v435 = vmlaq_f64(vmlaq_f64(v410, v429, v143[7]), v405[11], v143[15]);
                v436 = vmlaq_f64(v431, v405[10], v143[14]);
                v405[10] = v430;
                v405[11] = v429;
                v405[8] = v428;
                v405[9] = v427;
                v404[10] = v436;
                v404[11] = v435;
                v404[8] = v434;
                v404[9] = v433;
                v404 += 12;
                v405 += 12;
                v407 += 2;
              }
              while (v407 < v406);
            }
            if ((v403 & 1) != 0)
            {
              v437 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*(_QWORD *)&v41[8 * (v403 - 1)] + 4 * v401)), 0);
              v438 = *v404;
              v439 = v404[1];
              v440 = v404[2];
              v441 = v404[3];
              v442 = vmlaq_f64(vmlaq_f64(v437, *v404, *v143), *v405, v143[8]);
              v443 = vmlaq_f64(vmlaq_f64(v437, v439, v143[1]), v405[1], v143[9]);
              v444 = vmlaq_f64(vmlaq_f64(v437, v440, v143[2]), v405[2], v143[10]);
              v445 = vmlaq_f64(vmlaq_f64(v437, v441, v143[3]), v405[3], v143[11]);
              v405[2] = v440;
              v405[3] = v441;
              *v405 = v438;
              v405[1] = v439;
              v404[2] = v444;
              v404[3] = v445;
              *v404 = v442;
              v404[1] = v443;
              v447 = v404[4];
              v446 = v404[5];
              v449 = v404[6];
              v448 = v404[7];
              v450 = vmlaq_f64(v437, v447, v143[4]);
              v451 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v448, v143[7]), v405[7], v143[15]);
              v452 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v449, v143[6]), v405[6], v143[14]);
              v453 = vmlaq_f64(vmlaq_f64(v437, v446, v143[5]), v405[5], v143[13]);
              v454 = vmlaq_f64(v450, v405[4], v143[12]);
              v405[4] = v447;
              v405[5] = v446;
              v405[6] = v449;
              v405[7] = v448;
              v404[6] = v452;
              v404[7] = v451;
              v404[4] = v454;
              v404[5] = v453;
            }
            v401 += v31;
            ++v402;
          }
          while (v402 != v141);
        }
        v455 = *(double *)(v54 + 96);
        v456 = (v139 >> 21) & 0x3FC;
        v457 = (float64x2_t *)(v144 + (v456 << 6));
        v458 = *(unsigned int *)(v54 + 48);
        v459 = *(_DWORD *)(v54 + 48) != 0;
        v460 = *(float **)(v54 + 208);
        v461 = v145;
        v462 = v146;
        v463 = (v458 - v459);
        if ((_DWORD)v458 != v459)
        {
          v464 = 0;
          v465 = *(float32x2_t **)(v54 + 208);
          v462 = v146;
          v461 = v145;
          do
          {
            v466 = v457[1];
            v468 = v457[2];
            v467 = v457[3];
            v469 = v457[10];
            v470 = v457[11];
            v471 = v457[8];
            v472 = v457[9];
            v473 = vmlaq_f64(vmulq_f64(v472, v462[1]), v461[1], v466);
            v474 = vmlaq_f64(vmulq_f64(v472, v462[5]), v461[5], v466);
            v475 = (int64x2_t)vaddq_f64(vmlaq_f64(vmulq_f64(v457[12], v462[8]), v461[8], v457[4]), vmlaq_f64(vmulq_f64(v457[13], v462[9]), v461[9], v457[5]));
            v476 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v471, *v462), *v461, *v457), vmlaq_f64(vmulq_f64(v469, v462[2]), v461[2], v468)), vaddq_f64(v473, vmlaq_f64(vmulq_f64(v470, v462[3]), v461[3], v467)));
            v477 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v471, v462[4]), v461[4], *v457), vmlaq_f64(vmulq_f64(v469, v462[6]), v461[6], v468)), vaddq_f64(v474, vmlaq_f64(vmulq_f64(v470, v462[7]), v461[7], v467)));
            v478 = (int64x2_t)vaddq_f64(vmlaq_f64(vmulq_f64(v457[14], v462[10]), v461[10], v457[6]), vmlaq_f64(vmulq_f64(v457[15], v462[11]), v461[11], v457[7]));
            *v465++ = vcvt_f32_f64(vaddq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v476, v477), (float64x2_t)vzip2q_s64(v476, v477)), vaddq_f64((float64x2_t)vzip1q_s64(v475, v478), (float64x2_t)vzip2q_s64(v475, v478))));
            v461 += 12;
            v462 += 12;
            v464 += 2;
          }
          while (v464 < v463);
        }
        if ((v458 & 1) != 0)
        {
          v479 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v457[8], *v462), *v461, *v457), vmlaq_f64(vmulq_f64(v457[10], v462[2]), v461[2], v457[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v457[9], v462[1]), v461[1], v457[1]), vmlaq_f64(vmulq_f64(v457[11], v462[3]), v461[3], v457[3])));
          v480 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v457[12], v462[4]), v461[4], v457[4]), vmlaq_f64(vmulq_f64(v457[14], v462[6]), v461[6], v457[6])), vaddq_f64(vmlaq_f64(vmulq_f64(v457[13], v462[5]), v461[5], v457[5]), vmlaq_f64(vmulq_f64(v457[15], v462[7]), v461[7], v457[7])));
          *(float *)v479.i32 = vaddvq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v479, v480), (float64x2_t)vzip2q_s64(v479, v480)));
          v460[(v458 - 1)] = *(float *)v479.i32;
        }
        v481 = (float64x2_t *)(v144 + ((unint64_t)(v456 + 4) << 6));
        v482 = *(float **)(v54 + 232);
        v483 = v145;
        v484 = v146;
        if ((_DWORD)v463)
        {
          v485 = 0;
          v486 = *(float32x2_t **)(v54 + 232);
          v484 = v146;
          v483 = v145;
          do
          {
            v487 = v481[1];
            v489 = v481[2];
            v488 = v481[3];
            v490 = v481[10];
            v491 = v481[11];
            v492 = v481[8];
            v493 = v481[9];
            v494 = vmlaq_f64(vmulq_f64(v493, v484[1]), v483[1], v487);
            v495 = vmlaq_f64(vmulq_f64(v493, v484[5]), v483[5], v487);
            v496 = (int64x2_t)vaddq_f64(vmlaq_f64(vmulq_f64(v481[12], v484[8]), v483[8], v481[4]), vmlaq_f64(vmulq_f64(v481[13], v484[9]), v483[9], v481[5]));
            v497 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v492, *v484), *v483, *v481), vmlaq_f64(vmulq_f64(v490, v484[2]), v483[2], v489)), vaddq_f64(v494, vmlaq_f64(vmulq_f64(v491, v484[3]), v483[3], v488)));
            v498 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v492, v484[4]), v483[4], *v481), vmlaq_f64(vmulq_f64(v490, v484[6]), v483[6], v489)), vaddq_f64(v495, vmlaq_f64(vmulq_f64(v491, v484[7]), v483[7], v488)));
            v499 = (int64x2_t)vaddq_f64(vmlaq_f64(vmulq_f64(v481[14], v484[10]), v483[10], v481[6]), vmlaq_f64(vmulq_f64(v481[15], v484[11]), v483[11], v481[7]));
            *v486++ = vcvt_f32_f64(vaddq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v497, v498), (float64x2_t)vzip2q_s64(v497, v498)), vaddq_f64((float64x2_t)vzip1q_s64(v496, v499), (float64x2_t)vzip2q_s64(v496, v499))));
            v483 += 12;
            v484 += 12;
            v485 += 2;
          }
          while (v485 < v463);
        }
        v500 = v455 * (double)(v139 & 0x7FFFFF);
        if ((v458 & 1) != 0)
          break;
        v501 = (uint64_t *)v46;
        if ((_DWORD)v458)
          goto LABEL_187;
LABEL_188:
        v399 += v141;
        v509 = v139 + v140;
        v139 = (v139 + v140) & 0x7FFFFFFF;
        v141 = v147 + (v509 >> 31);
        ++v400;
        v398 += v31;
        if (v400 == v56)
          goto LABEL_277;
      }
      v502 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v481[8], *v484), *v483, *v481), vmlaq_f64(vmulq_f64(v481[10], v484[2]), v483[2], v481[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v481[9], v484[1]), v483[1], v481[1]), vmlaq_f64(vmulq_f64(v481[11], v484[3]), v483[3], v481[3])));
      v503 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v481[12], v484[4]), v483[4], v481[4]), vmlaq_f64(vmulq_f64(v481[14], v484[6]), v483[6], v481[6])), vaddq_f64(vmlaq_f64(vmulq_f64(v481[13], v484[5]), v483[5], v481[5]), vmlaq_f64(vmulq_f64(v481[15], v484[7]), v483[7], v481[7])));
      *(float *)v502.i32 = vaddvq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v502, v503), (float64x2_t)vzip2q_s64(v502, v503)));
      v482[(v458 - 1)] = *(float *)v502.i32;
      v501 = (uint64_t *)v46;
      do
      {
LABEL_187:
        v504 = *v460++;
        v505 = v504;
        v506 = *v482++;
        v507 = v505 + (float)(v500 * (float)(v506 - v505));
        v508 = *v501++;
        *(float *)(v508 + 4 * v398) = v507;
        --v458;
      }
      while (v458);
      goto LABEL_188;
    }
    if (*(_BYTE *)(v54 + 92))
    {
      v102 = *(_DWORD *)(v54 + 60);
      v104 = *(_DWORD *)(v54 + 68);
      v103 = *(_DWORD *)(v54 + 72);
      v105 = *(_DWORD *)(v54 + 88);
      v106 = *(float32x4_t **)(*(_QWORD *)v54 + 16);
      v107 = *(_QWORD *)(*(_QWORD *)v54 + 40);
      v108 = *(float32x4_t **)(v54 + 112);
      v109 = *(float32x4_t **)(v54 + 136);
      v110 = *(_DWORD *)(v54 + 52);
      if (*(_DWORD *)(v54 + 56) == 8)
      {
        if (v56 < 1)
        {
          v114 = 0;
          LODWORD(v113) = 0;
        }
        else
        {
          v111 = 0;
          v112 = 0;
          LODWORD(v113) = 0;
          v114 = 0;
          do
          {
            if (v105 >= 1)
            {
              v115 = 0;
              v113 = (int)v113;
              do
              {
                v116 = *(unsigned int *)(v54 + 48);
                if ((_DWORD)v116)
                {
                  v117 = (uint64_t *)((char *)&v851 - v40);
                  v118 = v108;
                  v119 = v109;
                  do
                  {
                    v120 = *v117++;
                    v121 = (const float *)(v120 + 4 * v113);
                    v122 = vld1q_dup_f32(v121);
                    v123 = v118[1];
                    v124 = vmlaq_f32(v122, v123, v106[1]);
                    v125 = vmlaq_f32(vmlaq_f32(v122, *v118, *v106), *v119, v106[2]);
                    v126 = vmlaq_f32(v124, v119[1], v106[3]);
                    *v119 = *v118;
                    v119[1] = v123;
                    v119 += 2;
                    *v118 = v125;
                    v118[1] = v126;
                    v118 += 2;
                    --v116;
                  }
                  while (v116);
                }
                v113 += v31;
                ++v115;
              }
              while (v115 != v105);
            }
            v127 = *(unsigned int *)(v54 + 48);
            if ((_DWORD)v127)
            {
              v128 = v108;
              v129 = v109;
              v130 = (uint64_t *)((char *)&v851 - v40);
              do
              {
                v131 = *v128;
                v132 = v128[1];
                v128 += 2;
                v134 = *v129;
                v133 = v129[1];
                v129 += 2;
                v135 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)(v107 + 64 * v103 + 32), v134), v131, *(float32x4_t *)(v107 + 64 * v103)), vmlaq_f32(vmulq_f32(*(float32x4_t *)(v107 + 64 * v103 + 48), v133), v132, *(float32x4_t *)(v107 + 64 * v103 + 16)));
                v136 = *v130++;
                *(float *)(v136 + 4 * v111) = vaddv_f32(vadd_f32(*(float32x2_t *)v135.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v135, v135, 8uLL)));
                --v127;
              }
              while (v127);
            }
            v114 += v105;
            v137 = v103 + v104;
            if (v137 < v110)
              v105 = v102;
            else
              v105 = v102 + 1;
            if (v137 < v110)
              v138 = 0;
            else
              v138 = v110;
            v103 = v137 - v138;
            ++v112;
            v111 += v31;
          }
          while (v112 != v56);
        }
        v665 = v55 - v114;
        if (v55 <= v114)
          goto LABEL_275;
        if (v105 < v665)
          v665 = v105;
        if (v665 >= 1)
        {
          v666 = 0;
          v667 = (int)v113;
          do
          {
            v668 = *(unsigned int *)(v54 + 48);
            if ((_DWORD)v668)
            {
              v669 = (uint64_t *)((char *)&v851 - v40);
              v670 = v108;
              v671 = v109;
              do
              {
                v672 = *v669++;
                v673 = (const float *)(v672 + 4 * v667);
                v674 = vld1q_dup_f32(v673);
                v675 = v670[1];
                v676 = vmlaq_f32(v674, v675, v106[1]);
                v677 = vmlaq_f32(vmlaq_f32(v674, *v670, *v106), *v671, v106[2]);
                v678 = vmlaq_f32(v676, v671[1], v106[3]);
                *v671 = *v670;
                v671[1] = v675;
                v671 += 2;
                *v670 = v677;
                v670[1] = v678;
                v670 += 2;
                --v668;
              }
              while (v668);
            }
            v667 += v31;
            ++v666;
          }
          while (v666 != v665);
        }
      }
      else
      {
        if (v56 < 1)
        {
          v343 = 0;
          LODWORD(v342) = 0;
        }
        else
        {
          v340 = 0;
          v341 = 0;
          LODWORD(v342) = 0;
          v343 = 0;
          do
          {
            if (v105 >= 1)
            {
              v344 = 0;
              v342 = (int)v342;
              do
              {
                v345 = *(_DWORD *)(v54 + 48);
                v346 = v108;
                v347 = v109;
                v348 = v345 - (v345 != 0);
                if ((_DWORD)v348)
                {
                  v349 = 0;
                  v347 = v109;
                  v346 = v108;
                  do
                  {
                    v350 = &v41[8 * v349];
                    v351 = (const float *)(*(_QWORD *)v350 + 4 * v342);
                    v352 = (const float *)(*((_QWORD *)v350 + 1) + 4 * v342);
                    v353 = vld1q_dup_f32(v351);
                    v354 = vld1q_dup_f32(v352);
                    v355 = v346[1];
                    v356 = vmlaq_f32(vmlaq_f32(v353, *v346, *v106), *v347, v106[4]);
                    v357 = vmlaq_f32(vmlaq_f32(v353, v355, v106[1]), v347[1], v106[5]);
                    *v347 = *v346;
                    v347[1] = v355;
                    *v346 = v356;
                    v346[1] = v357;
                    v358 = v346[2];
                    v359 = v346[3];
                    v360 = vmlaq_f32(vmlaq_f32(v354, v358, *v106), v347[2], v106[4]);
                    v361 = vmlaq_f32(vmlaq_f32(v354, v359, v106[1]), v347[3], v106[5]);
                    v347[2] = v358;
                    v347[3] = v359;
                    v346[2] = v360;
                    v346[3] = v361;
                    v362 = v346[4];
                    v363 = v346[5];
                    v364 = vmlaq_f32(vmlaq_f32(v353, v362, v106[2]), v347[4], v106[6]);
                    v365 = vmlaq_f32(vmlaq_f32(v354, v363, v106[3]), v347[5], v106[7]);
                    v347[4] = v362;
                    v347[5] = v363;
                    v346[4] = v364;
                    v346[5] = v365;
                    v346 += 6;
                    v347 += 6;
                    v349 += 2;
                  }
                  while (v349 < v348);
                }
                if ((v345 & 1) != 0)
                {
                  v366 = (const float *)(*(_QWORD *)&v41[8 * (v345 - 1)] + 4 * v342);
                  v367 = vld1q_dup_f32(v366);
                  v368 = v346[1];
                  v369 = vmlaq_f32(vmlaq_f32(v367, *v346, *v106), *v347, v106[4]);
                  v370 = vmlaq_f32(vmlaq_f32(v367, v368, v106[1]), v347[1], v106[5]);
                  *v347 = *v346;
                  v347[1] = v368;
                  *v346 = v369;
                  v346[1] = v370;
                  v371 = v346[2];
                  v372 = v346[3];
                  v373 = vmlaq_f32(vmlaq_f32((float32x4_t)0, v372, v106[3]), v347[3], v106[7]);
                  v374 = vmlaq_f32(vmlaq_f32(v367, v371, v106[2]), v347[2], v106[6]);
                  v347[2] = v371;
                  v347[3] = v372;
                  v346[2] = v374;
                  v346[3] = v373;
                }
                v342 += v31;
                ++v344;
              }
              while (v344 != v105);
            }
            v375 = (float32x4_t *)(v107 + 128 * v103);
            v376 = *(_DWORD *)(v54 + 48);
            v377 = v108;
            v378 = v109;
            v379 = v376 - (v376 != 0);
            if ((_DWORD)v379)
            {
              v380 = 0;
              v378 = v109;
              v377 = v108;
              do
              {
                v381 = &v46[8 * v380];
                v382 = v375[1];
                v384 = v375[4];
                v383 = v375[5];
                v385 = vmlaq_f32(vmulq_f32(v383, v378[1]), v377[1], v382);
                v386 = vmlaq_f32(vmulq_f32(v383, v378[3]), v377[3], v382);
                v388 = *(_QWORD *)v381;
                v387 = *((_QWORD *)v381 + 1);
                v389 = (int8x16_t)vmlaq_f32(vmulq_f32(v375[7], v378[5]), v377[5], v375[3]);
                v390 = (int8x16_t)vmlaq_f32(vmulq_f32(v375[6], v378[4]), v377[4], v375[2]);
                v391 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v384, *v378), *v377, *v375), v385);
                *(float32x2_t *)v391.i8 = vadd_f32(*(float32x2_t *)v391.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v391, v391, 8uLL));
                v392 = (int32x2_t)vadd_f32(*(float32x2_t *)v390.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v390, v390, 8uLL));
                *(float32x2_t *)v391.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v391.i8, v392), (float32x2_t)vzip2_s32(*(int32x2_t *)v391.i8, v392));
                v393 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v384, v378[2]), v377[2], *v375), v386);
                *(float32x2_t *)v393.i8 = vadd_f32(*(float32x2_t *)v393.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v393, v393, 8uLL));
                *(float32x2_t *)v389.i8 = vadd_f32(*(float32x2_t *)v389.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v389, v389, 8uLL));
                *(float *)(v388 + 4 * v340) = vaddv_f32(*(float32x2_t *)v391.i8);
                *(float *)(v387 + 4 * v340) = vaddv_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v393.i8, *(int32x2_t *)v389.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v393.i8, *(int32x2_t *)v389.i8)));
                v377 += 6;
                v378 += 6;
                v380 += 2;
              }
              while (v380 < v379);
            }
            if ((v376 & 1) != 0)
            {
              v394 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v375[4], *v378), *v377, *v375), vmlaq_f32(vmulq_f32(v375[5], v378[1]), v377[1], v375[1]));
              *(float32x2_t *)v394.i8 = vadd_f32(*(float32x2_t *)v394.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v394, v394, 8uLL));
              v395 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v375[6], v378[2]), v377[2], v375[2]), vmlaq_f32(vmulq_f32(v375[7], v378[3]), v377[3], v375[3]));
              *(float32x2_t *)v395.i8 = vadd_f32(*(float32x2_t *)v395.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v395, v395, 8uLL));
              *(float *)(*(_QWORD *)&v46[8 * (v376 - 1)] + 4 * v340) = vaddv_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v394.i8, *(int32x2_t *)v395.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v394.i8, *(int32x2_t *)v395.i8)));
            }
            v343 += v105;
            v396 = v103 + v104;
            if (v396 < v110)
              v105 = v102;
            else
              v105 = v102 + 1;
            if (v396 < v110)
              v397 = 0;
            else
              v397 = v110;
            v103 = v396 - v397;
            ++v341;
            v340 += v31;
          }
          while (v341 != v56);
        }
        v665 = v55 - v343;
        if (v55 <= v343)
          goto LABEL_275;
        if (v105 < v665)
          v665 = v105;
        if (v665 >= 1)
        {
          v699 = 0;
          v700 = (int)v342;
          do
          {
            v701 = *(_DWORD *)(v54 + 48);
            v702 = v108;
            v703 = v109;
            v704 = v701 - (v701 != 0);
            if ((_DWORD)v704)
            {
              v705 = 0;
              v703 = v109;
              v702 = v108;
              do
              {
                v706 = &v41[8 * v705];
                v707 = (const float *)(*(_QWORD *)v706 + 4 * v700);
                v708 = (const float *)(*((_QWORD *)v706 + 1) + 4 * v700);
                v709 = vld1q_dup_f32(v707);
                v710 = vld1q_dup_f32(v708);
                v711 = v702[1];
                v712 = vmlaq_f32(vmlaq_f32(v709, *v702, *v106), *v703, v106[4]);
                v713 = vmlaq_f32(vmlaq_f32(v709, v711, v106[1]), v703[1], v106[5]);
                *v703 = *v702;
                v703[1] = v711;
                *v702 = v712;
                v702[1] = v713;
                v714 = v702[2];
                v715 = v702[3];
                v716 = vmlaq_f32(vmlaq_f32(v710, v714, *v106), v703[2], v106[4]);
                v717 = vmlaq_f32(vmlaq_f32(v710, v715, v106[1]), v703[3], v106[5]);
                v703[2] = v714;
                v703[3] = v715;
                v702[2] = v716;
                v702[3] = v717;
                v718 = v702[4];
                v719 = v702[5];
                v720 = vmlaq_f32(vmlaq_f32(v709, v718, v106[2]), v703[4], v106[6]);
                v721 = vmlaq_f32(vmlaq_f32(v710, v719, v106[3]), v703[5], v106[7]);
                v703[4] = v718;
                v703[5] = v719;
                v702[4] = v720;
                v702[5] = v721;
                v702 += 6;
                v703 += 6;
                v705 += 2;
              }
              while (v705 < v704);
            }
            if ((v701 & 1) != 0)
            {
              v722 = (const float *)(*(_QWORD *)&v41[8 * (v701 - 1)] + 4 * v700);
              v723 = vld1q_dup_f32(v722);
              v724 = v702[1];
              v725 = vmlaq_f32(vmlaq_f32(v723, *v702, *v106), *v703, v106[4]);
              v726 = vmlaq_f32(vmlaq_f32(v723, v724, v106[1]), v703[1], v106[5]);
              *v703 = *v702;
              v703[1] = v724;
              *v702 = v725;
              v702[1] = v726;
              v727 = v702[2];
              v728 = v702[3];
              v729 = vmlaq_f32(vmlaq_f32((float32x4_t)0, v728, v106[3]), v703[3], v106[7]);
              v730 = vmlaq_f32(vmlaq_f32(v723, v727, v106[2]), v703[2], v106[6]);
              v703[2] = v727;
              v703[3] = v728;
              v702[2] = v730;
              v702[3] = v729;
            }
            v700 += v31;
            ++v699;
          }
          while (v699 != v665);
        }
      }
      v105 -= v665;
LABEL_275:
      *(_DWORD *)(v54 + 72) = v103;
      *(_DWORD *)(v54 + 88) = v105;
      goto LABEL_314;
    }
    v286 = *(_DWORD *)(v54 + 68);
    v139 = *(_DWORD *)(v54 + 72);
    v141 = *(_DWORD *)(v54 + 88);
    v287 = *(float32x4_t **)(*(_QWORD *)v54 + 16);
    v288 = *(_QWORD *)(*(_QWORD *)v54 + 40);
    v289 = *(float32x4_t **)(v54 + 112);
    v290 = *(float32x4_t **)(v54 + 136);
    v291 = *(_DWORD *)(v54 + 60);
    if (*(_DWORD *)(v54 + 56) == 8)
    {
      if (v56 < 1)
      {
        LODWORD(v294) = 0;
        v293 = 0;
      }
      else
      {
        v292 = 0;
        v293 = 0;
        LODWORD(v294) = 0;
        for (j = 0; j != v56; ++j)
        {
          if (v141 >= 1)
          {
            v296 = 0;
            v294 = (int)v294;
            do
            {
              v297 = *(unsigned int *)(v54 + 48);
              if ((_DWORD)v297)
              {
                v298 = (uint64_t *)v41;
                v299 = v289;
                v300 = v290;
                do
                {
                  v301 = *v298++;
                  v302 = (const float *)(v301 + 4 * v294);
                  v303 = vld1q_dup_f32(v302);
                  v304 = v299[1];
                  v305 = vmlaq_f32(v303, v304, v287[1]);
                  v306 = vmlaq_f32(vmlaq_f32(v303, *v299, *v287), *v300, v287[2]);
                  v307 = vmlaq_f32(v305, v300[1], v287[3]);
                  *v300 = *v299;
                  v300[1] = v304;
                  v300 += 2;
                  *v299 = v306;
                  v299[1] = v307;
                  v299 += 2;
                  --v297;
                }
                while (v297);
              }
              v294 += v31;
              ++v296;
            }
            while (v296 != v141);
          }
          v308 = *(unsigned int *)(v54 + 48);
          if ((_DWORD)v308)
          {
            v309 = *(double *)(v54 + 96) * (double)(v139 & 0x7FFFFF);
            v310 = (v139 >> 22) & 0x1FE;
            v311 = (float32x4_t *)(v288 + 32 * v310);
            v312 = (float32x4_t *)(v288 + 32 * (v310 + 2));
            v313 = *(float **)(v54 + 208);
            v314 = v289;
            v315 = v290;
            v316 = v313;
            v317 = *(unsigned int *)(v54 + 48);
            do
            {
              v318 = *v314;
              v319 = v314[1];
              v314 += 2;
              v321 = *v315;
              v320 = v315[1];
              v315 += 2;
              v322 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v311[2], v321), v318, *v311), vmlaq_f32(vmulq_f32(v311[3], v320), v319, v311[1]));
              *v316++ = vaddv_f32(vadd_f32(*(float32x2_t *)v322.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v322, v322, 8uLL)));
              --v317;
            }
            while (v317);
            v323 = *(float **)(v54 + 232);
            v324 = v289;
            v325 = v290;
            v326 = v323;
            v327 = v308;
            do
            {
              v328 = *v324;
              v329 = v324[1];
              v324 += 2;
              v331 = *v325;
              v330 = v325[1];
              v325 += 2;
              v332 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v312[2], v331), v328, *v312), vmlaq_f32(vmulq_f32(v312[3], v330), v329, v312[1]));
              *v326++ = vaddv_f32(vadd_f32(*(float32x2_t *)v332.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v332, v332, 8uLL)));
              --v327;
            }
            while (v327);
            v333 = (uint64_t *)v46;
            do
            {
              v334 = *v313++;
              v335 = v334;
              v336 = *v323++;
              v337 = v335 + (float)(v309 * (float)(v336 - v335));
              v338 = *v333++;
              *(float *)(v338 + 4 * v292) = v337;
              --v308;
            }
            while (v308);
          }
          v293 += v141;
          v339 = v139 + v286;
          v139 = (v139 + v286) & 0x7FFFFFFF;
          v141 = v291 + (v339 >> 31);
          v292 += v31;
        }
      }
      v679 = v55 - v293;
      if (v55 <= v293)
        goto LABEL_313;
      if (v141 < v679)
        v679 = v141;
      if (v679 >= 1)
      {
        v785 = 0;
        v786 = (int)v294;
        do
        {
          v787 = *(unsigned int *)(v54 + 48);
          if ((_DWORD)v787)
          {
            v788 = (uint64_t *)v41;
            v789 = v289;
            v790 = v290;
            do
            {
              v791 = *v788++;
              v792 = (const float *)(v791 + 4 * v786);
              v793 = vld1q_dup_f32(v792);
              v794 = v789[1];
              v795 = vmlaq_f32(v793, v794, v287[1]);
              v796 = vmlaq_f32(vmlaq_f32(v793, *v789, *v287), *v790, v287[2]);
              v797 = vmlaq_f32(v795, v790[1], v287[3]);
              *v790 = *v789;
              v790[1] = v794;
              v790 += 2;
              *v789 = v796;
              v789[1] = v797;
              v789 += 2;
              --v787;
            }
            while (v787);
          }
          v786 += v31;
          ++v785;
        }
        while (v785 != v679);
      }
      goto LABEL_312;
    }
    if (v56 < 1)
    {
      LODWORD(v587) = 0;
      v585 = 0;
LABEL_301:
      v679 = v55 - v585;
      if (v55 <= v585)
        goto LABEL_313;
      if (v141 < v679)
        v679 = v141;
      if (v679 >= 1)
      {
        v798 = 0;
        v799 = (int)v587;
        do
        {
          v800 = *(_DWORD *)(v54 + 48);
          v801 = v289;
          v802 = v290;
          v803 = v800 - (v800 != 0);
          if ((_DWORD)v803)
          {
            v804 = 0;
            v802 = v290;
            v801 = v289;
            do
            {
              v805 = &v41[8 * v804];
              v806 = (const float *)(*(_QWORD *)v805 + 4 * v799);
              v807 = (const float *)(*((_QWORD *)v805 + 1) + 4 * v799);
              v808 = vld1q_dup_f32(v806);
              v809 = vld1q_dup_f32(v807);
              v810 = v801[1];
              v811 = vmlaq_f32(vmlaq_f32(v808, *v801, *v287), *v802, v287[4]);
              v812 = vmlaq_f32(vmlaq_f32(v808, v810, v287[1]), v802[1], v287[5]);
              *v802 = *v801;
              v802[1] = v810;
              *v801 = v811;
              v801[1] = v812;
              v813 = v801[2];
              v814 = v801[3];
              v815 = vmlaq_f32(vmlaq_f32(v809, v813, *v287), v802[2], v287[4]);
              v816 = vmlaq_f32(vmlaq_f32(v809, v814, v287[1]), v802[3], v287[5]);
              v802[2] = v813;
              v802[3] = v814;
              v801[2] = v815;
              v801[3] = v816;
              v817 = v801[4];
              v818 = v801[5];
              v819 = vmlaq_f32(vmlaq_f32(v808, v817, v287[2]), v802[4], v287[6]);
              v820 = vmlaq_f32(vmlaq_f32(v809, v818, v287[3]), v802[5], v287[7]);
              v802[4] = v817;
              v802[5] = v818;
              v801[4] = v819;
              v801[5] = v820;
              v801 += 6;
              v802 += 6;
              v804 += 2;
            }
            while (v804 < v803);
          }
          if ((v800 & 1) != 0)
          {
            v821 = (const float *)(*(_QWORD *)&v41[8 * (v800 - 1)] + 4 * v799);
            v822 = vld1q_dup_f32(v821);
            v823 = v801[1];
            v824 = vmlaq_f32(vmlaq_f32(v822, *v801, *v287), *v802, v287[4]);
            v825 = vmlaq_f32(vmlaq_f32(v822, v823, v287[1]), v802[1], v287[5]);
            *v802 = *v801;
            v802[1] = v823;
            *v801 = v824;
            v801[1] = v825;
            v826 = v801[2];
            v827 = v801[3];
            v828 = vmlaq_f32(vmlaq_f32((float32x4_t)0, v827, v287[3]), v802[3], v287[7]);
            v829 = vmlaq_f32(vmlaq_f32(v822, v826, v287[2]), v802[2], v287[6]);
            v802[2] = v826;
            v802[3] = v827;
            v801[2] = v829;
            v801[3] = v828;
          }
          v799 += v31;
          ++v798;
        }
        while (v798 != v679);
      }
      goto LABEL_312;
    }
    v584 = 0;
    v585 = 0;
    v586 = 0;
    LODWORD(v587) = 0;
    while (1)
    {
      if (v141 >= 1)
      {
        v588 = 0;
        v587 = (int)v587;
        do
        {
          v589 = *(_DWORD *)(v54 + 48);
          v590 = v289;
          v591 = v290;
          v592 = v589 - (v589 != 0);
          if ((_DWORD)v592)
          {
            v593 = 0;
            v591 = v290;
            v590 = v289;
            do
            {
              v594 = &v41[8 * v593];
              v595 = (const float *)(*(_QWORD *)v594 + 4 * v587);
              v596 = (const float *)(*((_QWORD *)v594 + 1) + 4 * v587);
              v597 = vld1q_dup_f32(v595);
              v598 = vld1q_dup_f32(v596);
              v599 = v590[1];
              v600 = vmlaq_f32(vmlaq_f32(v597, *v590, *v287), *v591, v287[4]);
              v601 = vmlaq_f32(vmlaq_f32(v597, v599, v287[1]), v591[1], v287[5]);
              *v591 = *v590;
              v591[1] = v599;
              *v590 = v600;
              v590[1] = v601;
              v602 = v590[2];
              v603 = v590[3];
              v604 = vmlaq_f32(vmlaq_f32(v598, v602, *v287), v591[2], v287[4]);
              v605 = vmlaq_f32(vmlaq_f32(v598, v603, v287[1]), v591[3], v287[5]);
              v591[2] = v602;
              v591[3] = v603;
              v590[2] = v604;
              v590[3] = v605;
              v606 = v590[4];
              v607 = v590[5];
              v608 = vmlaq_f32(vmlaq_f32(v597, v606, v287[2]), v591[4], v287[6]);
              v609 = vmlaq_f32(vmlaq_f32(v598, v607, v287[3]), v591[5], v287[7]);
              v591[4] = v606;
              v591[5] = v607;
              v590[4] = v608;
              v590[5] = v609;
              v590 += 6;
              v591 += 6;
              v593 += 2;
            }
            while (v593 < v592);
          }
          if ((v589 & 1) != 0)
          {
            v610 = (const float *)(*(_QWORD *)&v41[8 * (v589 - 1)] + 4 * v587);
            v611 = vld1q_dup_f32(v610);
            v612 = v590[1];
            v613 = vmlaq_f32(vmlaq_f32(v611, *v590, *v287), *v591, v287[4]);
            v614 = vmlaq_f32(vmlaq_f32(v611, v612, v287[1]), v591[1], v287[5]);
            *v591 = *v590;
            v591[1] = v612;
            *v590 = v613;
            v590[1] = v614;
            v615 = v590[2];
            v616 = v590[3];
            v617 = vmlaq_f32(vmlaq_f32((float32x4_t)0, v616, v287[3]), v591[3], v287[7]);
            v618 = vmlaq_f32(vmlaq_f32(v611, v615, v287[2]), v591[2], v287[6]);
            v591[2] = v615;
            v591[3] = v616;
            v590[2] = v618;
            v590[3] = v617;
          }
          v587 += v31;
          ++v588;
        }
        while (v588 != v141);
      }
      v619 = *(double *)(v54 + 96);
      v620 = (v139 >> 21) & 0x3FC;
      v621 = (float32x4_t *)(v288 + 32 * v620);
      v622 = *(unsigned int *)(v54 + 48);
      v623 = *(float **)(v54 + 208);
      v624 = v289;
      v625 = v290;
      v626 = v622 - (*(_DWORD *)(v54 + 48) != 0);
      if ((_DWORD)v626)
      {
        v627 = 0;
        v628 = *(float32x2_t **)(v54 + 208);
        v625 = v290;
        v624 = v289;
        do
        {
          v629 = v621[1];
          v631 = v621[4];
          v630 = v621[5];
          v632 = vmlaq_f32(vmulq_f32(v630, v625[1]), v624[1], v629);
          v633 = vmlaq_f32(vmulq_f32(v630, v625[3]), v624[3], v629);
          v634 = (int8x16_t)vmlaq_f32(vmulq_f32(v621[7], v625[5]), v624[5], v621[3]);
          v635 = (int8x16_t)vmlaq_f32(vmulq_f32(v621[6], v625[4]), v624[4], v621[2]);
          v636 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v631, *v625), *v624, *v621), v632);
          *(float32x2_t *)v635.i8 = vadd_f32(*(float32x2_t *)v635.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v635, v635, 8uLL));
          *(float32x2_t *)v636.i8 = vadd_f32(*(float32x2_t *)v636.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v636, v636, 8uLL));
          v637 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v631, v625[2]), v624[2], *v621), v633);
          *(float32x2_t *)v637.i8 = vadd_f32(*(float32x2_t *)v637.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v637, v637, 8uLL));
          *(float32x2_t *)v634.i8 = vadd_f32(*(float32x2_t *)v634.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v634, v634, 8uLL));
          *v628++ = vadd_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v636.i8, *(int32x2_t *)v637.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v636.i8, *(int32x2_t *)v637.i8)), vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v635.i8, *(int32x2_t *)v634.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v635.i8, *(int32x2_t *)v634.i8)));
          v624 += 6;
          v625 += 6;
          v627 += 2;
        }
        while (v627 < v626);
      }
      if ((v622 & 1) != 0)
      {
        v638 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v621[4], *v625), *v624, *v621), vmlaq_f32(vmulq_f32(v621[5], v625[1]), v624[1], v621[1]));
        *(float32x2_t *)v638.i8 = vadd_f32(*(float32x2_t *)v638.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v638, v638, 8uLL));
        v639 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v621[6], v625[2]), v624[2], v621[2]), vmlaq_f32(vmulq_f32(v621[7], v625[3]), v624[3], v621[3]));
        *(float32x2_t *)v639.i8 = vadd_f32(*(float32x2_t *)v639.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v639, v639, 8uLL));
        v623[(v622 - 1)] = vaddv_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v638.i8, *(int32x2_t *)v639.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v638.i8, *(int32x2_t *)v639.i8)));
      }
      v640 = (float32x4_t *)(v288 + 32 * (v620 + 4));
      v641 = *(float **)(v54 + 232);
      v642 = v289;
      v643 = v290;
      if ((_DWORD)v626)
      {
        v644 = 0;
        v645 = *(float32x2_t **)(v54 + 232);
        v643 = v290;
        v642 = v289;
        do
        {
          v646 = v640[1];
          v648 = v640[4];
          v647 = v640[5];
          v649 = vmlaq_f32(vmulq_f32(v647, v643[1]), v642[1], v646);
          v650 = vmlaq_f32(vmulq_f32(v647, v643[3]), v642[3], v646);
          v651 = (int8x16_t)vmlaq_f32(vmulq_f32(v640[7], v643[5]), v642[5], v640[3]);
          v652 = (int8x16_t)vmlaq_f32(vmulq_f32(v640[6], v643[4]), v642[4], v640[2]);
          v653 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v648, *v643), *v642, *v640), v649);
          *(float32x2_t *)v652.i8 = vadd_f32(*(float32x2_t *)v652.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v652, v652, 8uLL));
          *(float32x2_t *)v653.i8 = vadd_f32(*(float32x2_t *)v653.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v653, v653, 8uLL));
          v654 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v648, v643[2]), v642[2], *v640), v650);
          *(float32x2_t *)v654.i8 = vadd_f32(*(float32x2_t *)v654.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v654, v654, 8uLL));
          *(float32x2_t *)v651.i8 = vadd_f32(*(float32x2_t *)v651.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v651, v651, 8uLL));
          *v645++ = vadd_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v653.i8, *(int32x2_t *)v654.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v653.i8, *(int32x2_t *)v654.i8)), vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v652.i8, *(int32x2_t *)v651.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v652.i8, *(int32x2_t *)v651.i8)));
          v642 += 6;
          v643 += 6;
          v644 += 2;
        }
        while (v644 < v626);
      }
      v655 = v619 * (double)(v139 & 0x7FFFFF);
      if ((v622 & 1) != 0)
        break;
      v656 = (uint64_t *)v46;
      if ((_DWORD)v622)
        goto LABEL_237;
LABEL_238:
      v585 += v141;
      v664 = v139 + v286;
      v139 = (v139 + v286) & 0x7FFFFFFF;
      v141 = v291 + (v664 >> 31);
      ++v586;
      v584 += v31;
      if (v586 == v56)
        goto LABEL_301;
    }
    v657 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v640[4], *v643), *v642, *v640), vmlaq_f32(vmulq_f32(v640[5], v643[1]), v642[1], v640[1]));
    *(float32x2_t *)v657.i8 = vadd_f32(*(float32x2_t *)v657.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v657, v657, 8uLL));
    v658 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v640[6], v643[2]), v642[2], v640[2]), vmlaq_f32(vmulq_f32(v640[7], v643[3]), v642[3], v640[3]));
    *(float32x2_t *)v658.i8 = vadd_f32(*(float32x2_t *)v658.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v658, v658, 8uLL));
    v641[(v622 - 1)] = vaddv_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v657.i8, *(int32x2_t *)v658.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v657.i8, *(int32x2_t *)v658.i8)));
    v656 = (uint64_t *)v46;
    do
    {
LABEL_237:
      v659 = *v623++;
      v660 = v659;
      v661 = *v641++;
      v662 = v660 + (float)(v655 * (float)(v661 - v660));
      v663 = *v656++;
      *(float *)(v663 + 4 * v584) = v662;
      --v622;
    }
    while (v622);
    goto LABEL_238;
  }
  v35 = *(RamstadSRC ***)(a1 + 96);
  v36 = *(RamstadSRC ***)(a1 + 104);
  if (v35 != v36)
  {
    v37 = 0;
    v38 = vcvtmd_s64_f64(a5);
    v39 = vcvtmd_s64_f64(v17);
    do
    {
      RamstadSRC::processMono(*v35++, &(**v852)[v37], (float *)(*(_QWORD *)v860.__r_.__value_.__l.__data_ + v37 * 4), v38, v39, v31, v31);
      ++v37;
    }
    while (v35 != v36);
  }
LABEL_315:
  if (v860.__r_.__value_.__r.__words[0])
  {
    v860.__r_.__value_.__l.__size_ = v860.__r_.__value_.__r.__words[0];
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v860.__r_.__value_.__l.__data_, (uint64_t)(v860.__r_.__value_.__r.__words[2] - v860.__r_.__value_.__r.__words[0]) >> 4);
  }
  return a6;
}

void sub_1B59F00A4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  caulk::rt_safe_memory_resource *v3;

  v3 = (caulk::rt_safe_memory_resource *)v1[16];
  if (v3)
  {
    v1[17] = v3;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](v3, (uint64_t)(v1[18] - (_QWORD)v3) >> 4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::DAL::Ramstad_Resampler::get_required_input_samples_for_output_samples(AMCP::DAL::Ramstad_Resampler *this, int a2)
{
  RamstadSRC **v2;
  RamstadSRC **v3;
  RamstadSRC *v5;
  uint64_t result;

  v2 = (RamstadSRC **)*((_QWORD *)this + 12);
  v3 = (RamstadSRC **)*((_QWORD *)this + 13);
  if (v2 == v3)
    return 0;
  do
  {
    v5 = *v2++;
    LODWORD(result) = RamstadSRC::inputSamplesForOutputSamples(v5, a2);
  }
  while (v2 != v3);
  return (int)result;
}

uint64_t AMCP::DAL::Ramstad_Resampler::get_expected_output_samples_for_input_samples(AMCP::DAL::Ramstad_Resampler *this, int a2, unint64_t *a3)
{
  RamstadSRC **v3;
  RamstadSRC **v4;
  RamstadSRC *v7;
  uint64_t result;
  int v9;

  v3 = (RamstadSRC **)*((_QWORD *)this + 12);
  v4 = (RamstadSRC **)*((_QWORD *)this + 13);
  if (v3 == v4)
    return 0;
  do
  {
    v9 = 0;
    v7 = *v3++;
    LODWORD(result) = RamstadSRC::outputSamplesForInputSamples(v7, a2, &v9);
    *a3 = v9;
  }
  while (v3 != v4);
  return (int)result;
}

unint64_t AMCP::DAL::Ramstad_Resampler::get_latency(AMCP::DAL::Ramstad_Resampler *this)
{
  uint64_t v1;
  double v2;
  double v3;
  _BOOL4 v4;
  double v5;
  double v6;

  v1 = **((_QWORD **)this + 12);
  v2 = *(double *)(v1 + 32);
  v3 = *(double *)(v1 + 40);
  v4 = *(_DWORD *)(v1 + 56) == 8;
  v5 = v2 / v3;
  if (v5 >= 1.0)
    v6 = dbl_1B5D68D50[v4];
  else
    v6 = dbl_1B5D68D40[v4] / v5;
  return vcvtad_u64_f64(v6);
}

void std::vector<std::unique_ptr<RamstadSRC>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  RamstadSRC **v2;
  RamstadSRC **v4;
  void *v5;

  v1 = *a1;
  v2 = (RamstadSRC **)**a1;
  if (v2)
  {
    v4 = (RamstadSRC **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<RamstadSRC>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

RamstadSRC *std::unique_ptr<RamstadSRC>::reset[abi:ne180100](RamstadSRC **a1)
{
  RamstadSRC *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    RamstadSRC::~RamstadSRC(result);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

uint64_t AMCP::IO_Core::IO_Thread_Realtime::run(int **this)
{
  int v2;
  AMCP::Logging_Settings *v3;
  AMCP::Log::Scope_Registry *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *v7;
  unint64_t v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  _opaque_pthread_t *cycle_size_in_host_ticks;
  _opaque_pthread_t *v12;
  AMCP::Graph::Manifest_Queue *v13;
  unsigned int v14;
  uint64_t wake_time_in_host_time;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  AMCP::Graph::Manifest_Queue *v22;
  std::__shared_weak_count *v23;
  NSObject *v24;
  int v25;
  std::once_flag::_State_type *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  char v32;
  _opaque_pthread_t *v33;
  AMCP::Log::Scope_Registry *v34;
  std::__shared_weak_count *v35;
  NSObject *v36;
  unint64_t *v37;
  unint64_t v38;
  _BOOL8 v39;
  AMCP::Graph::Manifest_Queue *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  AMCP::Graph::Manifest_Queue *v54;
  _opaque_pthread_t *v55;
  _opaque_pthread_t *v56;
  AMCP::Logging_Settings *v57;
  AMCP::Log::Scope_Registry *v58;
  std::__shared_weak_count *v59;
  NSObject *v60;
  unint64_t *v61;
  unint64_t v62;
  _opaque_pthread_t *v63;
  mach_port_t v64;
  _opaque_pthread_t *v66;
  _opaque_pthread_t *v67;
  _BOOL8 is_thread_configured_for_realtime;
  char v69;
  AMCP::Log::Scope_Registry *v70;
  std::__shared_weak_count *v71;
  NSObject *v72;
  unint64_t *v73;
  unint64_t v74;
  AMCP::IO_Core::Thread_Control_State *v75;
  uint64_t v76;
  AMCP::Logging_Settings *v77;
  int v78;
  int v79;
  _BOOL4 v80;
  AMCP::Log::Scope_Registry *v81;
  std::__shared_weak_count *v82;
  NSObject *v83;
  unint64_t *v84;
  unint64_t v85;
  _opaque_pthread_t *v86;
  mach_port_t v87;
  int v88;
  _opaque_pthread_t *v89;
  mach_port_t v90;
  int v91;
  int v92;
  int v93;
  AMCP::Graph::Manifest_Queue *v94;
  AMCP::Graph::Manifest_Queue *v95;
  uint64_t v96;
  unint64_t overload_time_in_host_time;
  uint64_t v98;
  double v99;
  double v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  _QWORD *v105;
  unint64_t *p_shared_owners;
  unint64_t v107;
  int v108;
  uint64_t v109;
  _QWORD *i;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  AMCP::Log::Scope_Registry *v121;
  caulk::concurrent::messenger *v122;
  _opaque_pthread_t *v123;
  mach_port_t v124;
  int v125;
  void **v126;
  uint64_t v127;
  void **v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  double v135;
  _BOOL8 v136;
  uint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  caulk::concurrent::messenger *v145;
  _opaque_pthread_t *v146;
  mach_port_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *size;
  unint64_t *v175;
  unint64_t v176;
  double v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  uint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t v183;
  _QWORD *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _BYTE *v193;
  unint64_t *v194;
  unint64_t v195;
  double updated;
  uint64_t v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  __n128 v202;
  unint64_t *v203;
  unint64_t v204;
  int v205;
  int v206;
  uint64_t v207;
  AMCP::Graph::Manifest_Inventory *v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  AMCP::Graph::Manifest_Inventory *v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  char v220;
  unint64_t v221;
  uint64_t v222;
  AMCP::Graph::Manifest_Inventory *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  _opaque_pthread_t *v229;
  mach_port_t v230;
  std::__shared_weak_count *v231;
  NSObject *v232;
  unint64_t *v233;
  unint64_t v234;
  _opaque_pthread_t *v235;
  mach_port_t v236;
  std::runtime_error *v237;
  int v238;
  uint64_t v239;
  std::runtime_error v240;
  NSObject *v241;
  _opaque_pthread_t *v242;
  mach_port_t v243;
  void *exception;
  NSObject *v245;
  _opaque_pthread_t *v246;
  mach_port_t v247;
  void *v248;
  NSObject *v249;
  _opaque_pthread_t *v250;
  mach_port_t v251;
  void *v252;
  NSObject *v253;
  _opaque_pthread_t *v254;
  mach_port_t v255;
  void *v256;
  NSObject *v257;
  _opaque_pthread_t *v258;
  mach_port_t v259;
  void *v260;
  std::__shared_weak_count *v261;
  uint64_t v262;
  unsigned int v263;
  uint64_t v264;
  int v265;
  std::runtime_error v266;
  uint64_t v267;
  std::string v268;
  uint64_t v269;
  std::logic_error v270;
  _BYTE v271[32];
  uint64_t v272;
  uint64_t v273;
  int v274;
  char v275;
  std::string v276;
  _BYTE buf[48];
  __int128 v278;
  char v279;
  void *v280;
  __int128 v281;
  __int128 v282;
  const char *v283;
  int v284;
  uint64_t v285;

  v285 = *MEMORY[0x1E0C80C00];
  v2 = **this;
  AMCP::Graph::Manifest_Queue::get_sample_rate(*((AMCP::Graph::Manifest_Queue **)*this + 70));
  v3 = (AMCP::Logging_Settings *)kdebug_trace();
  AMCP::Logging_Settings::instance(v3);
  if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v5 = *(std::__shared_weak_count **)&buf[8];
    v6 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v7 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v10;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "IO_Thread_Realtime.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 35;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v2;
      _os_log_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_INFO, "%6u %32s:%-5d IO_Thread_Realtime(%d)::start", buf, 0x1Eu);
    }
  }
  cycle_size_in_host_ticks = (_opaque_pthread_t *)AMCP::Graph::Manifest_Queue::get_cycle_size_in_host_ticks((AMCP::Graph::Manifest_Queue *)*this);
  v12 = pthread_self();
  AMCP::Utility::configure_thread_for_realtime(v12, cycle_size_in_host_ticks, 0);
  if (!*this)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v241 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v241, OS_LOG_TYPE_ERROR))
    {
      v242 = pthread_self();
      v243 = pthread_mach_thread_np(v242);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v243;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "IO_Thread_Realtime.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 145;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not ((m_manifest_queue) != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v241, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s IO_Thread_Realtime::join_workgroup_interval() called with null queue", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v270);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"IO_Thread_Realtime::join_workgroup_interval() called with null queue", (uint64_t)&v268);
    std::logic_error::logic_error((std::logic_error *)&v266, &v268);
    v266.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v280, (const std::logic_error *)&v266);
    v283 = 0;
    v284 = -1;
    v280 = off_1E69A1208;
    *((_QWORD *)&v281 + 1) = &unk_1E69A1230;
    v282 = 0uLL;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v280);
    *(_QWORD *)&buf[32] = "void AMCP::IO_Core::IO_Thread_Realtime::join_workgroup_interval()";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IO_Thread_Realtime.cpp";
    LODWORD(v278) = 145;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v276.__r_.__value_.__l.__data_);
    *(_QWORD *)v271 = off_1E69A20A0;
    *(std::string *)&v271[8] = v276;
    memset(&v276, 0, sizeof(v276));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v271);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  AMCP::Graph::Manifest_Queue::join_workgroup_interval((AMCP::Graph::Manifest_Queue *)*this);
  if (!*this)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v245 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v245, OS_LOG_TYPE_ERROR))
    {
      v246 = pthread_self();
      v247 = pthread_mach_thread_np(v246);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v247;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "IO_Thread_Realtime.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 161;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not ((m_manifest_queue) != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v245, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s IO_Thread_Realtime::start_workgroup_interval() called with null queue", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v270);
    v248 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"IO_Thread_Realtime::start_workgroup_interval() called with null queue", (uint64_t)&v268);
    std::logic_error::logic_error((std::logic_error *)&v266, &v268);
    v266.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v280, (const std::logic_error *)&v266);
    v283 = 0;
    v284 = -1;
    v280 = off_1E69A1208;
    *((_QWORD *)&v281 + 1) = &unk_1E69A1230;
    v282 = 0uLL;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v280);
    *(_QWORD *)&buf[32] = "void AMCP::IO_Core::IO_Thread_Realtime::start_workgroup_interval()";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IO_Thread_Realtime.cpp";
    LODWORD(v278) = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v276.__r_.__value_.__l.__data_);
    *(_QWORD *)v271 = off_1E69A20A0;
    *(std::string *)&v271[8] = v276;
    memset(&v276, 0, sizeof(v276));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v271);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v248, (uint64_t)buf);
  }
  AMCP::Graph::Manifest_Queue::start_workgroup_interval((AMCP::Graph::Manifest_Queue *)*this);
  v13 = (AMCP::Graph::Manifest_Queue *)*this;
  v14 = AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest((AMCP::Graph::Manifest_Queue *)*this);
  if (!v14)
  {
    wake_time_in_host_time = AMCP::Graph::Manifest_Queue::get_wake_time_in_host_time(v13);
    if (wake_time_in_host_time > mach_absolute_time())
      AMCP::Graph::Manifest_Queue::wait_for_next_cycle(v13);
  }
  caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this[2]);
  v17 = v16;
  v18 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this[2]);
  v263 = v14;
  v20 = 0;
  if (!v14)
  {
    v21 = 1;
    v264 = HIDWORD(v19) & 1;
    while (1)
    {
      v18 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this[2]);
      if ((((_DWORD)v18 != 0) & v21) != 1)
        goto LABEL_16;
      v66 = pthread_self();
      is_thread_configured_for_realtime = AMCP::Utility::is_thread_configured_for_realtime(v66, v67);
      if (!is_thread_configured_for_realtime)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_thread_configured_for_realtime);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v231 = *(std::__shared_weak_count **)&buf[8];
        v232 = **(NSObject ***)buf;
        if (*(_QWORD *)&buf[8])
        {
          v233 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v234 = __ldaxr(v233);
          while (__stlxr(v234 - 1, v233));
          if (!v234)
          {
            ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
            std::__shared_weak_count::__release_weak(v231);
          }
        }
        if (os_log_type_enabled(v232, OS_LOG_TYPE_ERROR))
        {
          v235 = pthread_self();
          v236 = pthread_mach_thread_np(v235);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v236;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "IO_Thread_Realtime.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 177;
          *(_WORD *)&buf[24] = 2080;
          *(_QWORD *)&buf[26] = "(AMCP::Utility::is_thread_configured_for_realtime(pthread_self())) == false";
          _os_log_error_impl(&dword_1B57BA000, v232, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Only call maybe_sleep_thread_for_power_change from a realtime thread", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v270);
        v237 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Only call maybe_sleep_thread_for_power_change from a realtime thread", (uint64_t)&v268);
        std::runtime_error::runtime_error(&v266, &v268);
        std::runtime_error::runtime_error((std::runtime_error *)&v280, &v266);
        v283 = 0;
        v284 = -1;
        v280 = &off_1E69A1FB8;
        *((_QWORD *)&v281 + 1) = &unk_1E69A1FE0;
        v282 = 0uLL;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v280);
        *(_QWORD *)&buf[32] = "BOOL AMCP::IO_Core::IO_Thread_Realtime::maybe_sleep_thread_for_power_change(AMCP::Power_State)";
        *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IO_Thread_Realtime.cpp";
        LODWORD(v278) = 177;
        std::vector<void *>::vector(&v276);
        v238 = backtrace((void **)v276.__r_.__value_.__l.__data_, (v276.__r_.__value_.__l.__size_ - v276.__r_.__value_.__r.__words[0]) >> 3);
        std::vector<void *>::resize(&v276.__r_.__value_.__l.__data_, v238);
        *(_QWORD *)v271 = off_1E69A20A0;
        *(std::string *)&v271[8] = v276;
        memset(&v276, 0, sizeof(v276));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)v271);
        v237[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::runtime_error::runtime_error(v237, (const std::runtime_error *)buf);
        v237[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
        v239 = *(_QWORD *)&buf[24];
        v237[1].__imp_.__imp_ = *(const char **)&buf[24];
        if (v239)
          (*(void (**)(uint64_t))(*(_QWORD *)v239 + 24))(v239);
        v240 = *(std::runtime_error *)&buf[32];
        LODWORD(v237[3].__vftable) = v278;
        v237[2] = v240;
        v237->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
        v237[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
        v237[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
      }
      switch(v17)
      {
        case 1:
          if (*((_BYTE *)this + 33))
            goto LABEL_96;
          goto LABEL_69;
        case 2:
        case 4:
          goto LABEL_96;
        case 3:
          if (!*((_BYTE *)this + 32))
            goto LABEL_69;
          goto LABEL_96;
        default:
LABEL_69:
          v69 = 0;
          break;
      }
      while (1)
      {
        v70 = (AMCP::Log::Scope_Registry *)caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this[2]);
        if (!(_DWORD)v70)
          break;
        AMCP::Log::Scope_Registry::get(v70);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v71 = *(std::__shared_weak_count **)&buf[8];
        v72 = **(NSObject ***)buf;
        if (*(_QWORD *)&buf[8])
        {
          v73 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
        {
          v86 = pthread_self();
          v87 = pthread_mach_thread_np(v86);
          v88 = **this;
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v87;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "IO_Thread_Realtime.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 189;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v88;
          _os_log_debug_impl(&dword_1B57BA000, v72, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Context(%d): IO_Thread_Realtime: parked for sleeping", buf, 0x1Eu);
        }
        v75 = (AMCP::IO_Core::Thread_Control_State *)this[2];
        v76 = mach_absolute_time();
        AMCP::IO_Core::Thread_Control_State::sleep_until_time(v75, v76 + 360000000);
        v77 = (AMCP::Logging_Settings *)caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this[2]);
        v79 = v78;
        if (v78 == 1)
        {
          if (*((_BYTE *)this + 33))
            goto LABEL_84;
        }
        else if (v78 == 4 || v78 == 3 && *((_BYTE *)this + 32))
        {
LABEL_84:
          v80 = 1;
          goto LABEL_85;
        }
        v80 = v78 == 2;
LABEL_85:
        AMCP::Logging_Settings::instance(v77);
        if (BYTE1(AMCP::Logging_Settings::instance(void)::s_instance))
        {
          AMCP::Log::Scope_Registry::get(v81);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v82 = *(std::__shared_weak_count **)&buf[8];
          v83 = **(NSObject ***)buf;
          if (*(_QWORD *)&buf[8])
          {
            v84 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 - 1, v84));
            if (!v85)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
          if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
          {
            v89 = pthread_self();
            v90 = pthread_mach_thread_np(v89);
            v91 = **this;
            v92 = *((unsigned __int8 *)this + 32);
            v93 = *((unsigned __int8 *)this + 33);
            *(_DWORD *)buf = 67110914;
            *(_DWORD *)&buf[4] = v90;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "IO_Thread_Realtime.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 202;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = v91;
            *(_WORD *)&buf[30] = 1024;
            *(_DWORD *)&buf[32] = v79;
            *(_WORD *)&buf[36] = 1024;
            *(_DWORD *)&buf[38] = v80;
            *(_WORD *)&buf[42] = 1024;
            *(_DWORD *)&buf[44] = v92;
            LOWORD(v278) = 1024;
            *(_DWORD *)((char *)&v278 + 2) = v93;
            _os_log_debug_impl(&dword_1B57BA000, v83, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Context(%d): %d Thread can play: %d, m_can_play_during_notification_wake: %d, m_can_play_during_dark_wake: %d", buf, 0x36u);
          }
        }
        v69 = 1;
        if (v80)
          goto LABEL_97;
      }
      if ((v69 & 1) == 0)
LABEL_96:
        AMCP::Graph::Manifest_Queue::process_once((AMCP::Graph::Manifest_Queue *)*this, 0, *((unsigned __int8 *)this + 34));
LABEL_97:
      v94 = (AMCP::Graph::Manifest_Queue *)*this;
      v95 = (AMCP::Graph::Manifest_Queue *)*((_QWORD *)*this + 70);
      if (!v95)
        goto LABEL_103;
      if (*((_BYTE *)v94 + 424))
      {
        *((_BYTE *)v94 + 424) = AMCP::Graph::Manifest_Queue::check_if_catchup_mode_is_still_active((AMCP::Graph::Manifest_Queue *)*this);
        goto LABEL_232;
      }
      if (AMCP::Graph::Manifest_Queue::timebases_are_valid(v95))
      {
        v96 = *((_QWORD *)v94 + 70);
        if (v96)
          overload_time_in_host_time = AMCP::Graph::Manifest::get_overload_time_in_host_time(v96, (uint64_t)v94 + 312);
        else
          overload_time_in_host_time = -1;
        v98 = mach_absolute_time();
        AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v268, *(_QWORD *)(*((_QWORD *)v94 + 70) + 72), *(std::__shared_weak_count **)(*((_QWORD *)v94 + 70) + 80));
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v268.__r_.__value_.__l.__data_ + 32))(buf);
        v99 = *((double *)v94 + 80);
        v100 = *(double *)buf;
        v101 = v278;
        *((_OWORD *)v94 + 42) = *(_OWORD *)&buf[32];
        *((_OWORD *)v94 + 43) = v101;
        v102 = *(_OWORD *)&buf[16];
        *((_OWORD *)v94 + 40) = *(_OWORD *)buf;
        *((_OWORD *)v94 + 41) = v102;
        if (v99 != 0.0 && v99 > v100)
        {
          v103 = *((_QWORD *)v94 + 70);
          if (v103)
          {
            v105 = *(_QWORD **)(v103 + 72);
            v104 = *(std::__shared_weak_count **)(v103 + 80);
            if (v104)
            {
              p_shared_owners = (unint64_t *)&v104->__shared_owners_;
              do
                v107 = __ldxr(p_shared_owners);
              while (__stxr(v107 + 1, p_shared_owners));
            }
            v261 = v104;
            v108 = *(_DWORD *)v94;
            v109 = v105[8];
            *(_DWORD *)(v109 + 40) = 0;
            *(_QWORD *)(v109 + 8) = 0;
            *(_QWORD *)(v109 + 16) = 0;
            for (i = (_QWORD *)v105[3]; i; i = (_QWORD *)*i)
            {
              v111 = i[12];
              v112 = *(_QWORD *)(v111 + 304);
              if (v112)
              {
                if (*(char *)(v111 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v271, *(const std::string::value_type **)(v111 + 8), *(_QWORD *)(v111 + 16));
                  v112 = *(_QWORD *)(v111 + 304);
                }
                else
                {
                  *(_OWORD *)v271 = *(_OWORD *)(v111 + 8);
                  *(_QWORD *)&v271[16] = *(_QWORD *)(v111 + 24);
                }
                *(_QWORD *)&v271[24] = *(_QWORD *)(v111 + 32);
                LODWORD(v272) = *(_DWORD *)(v111 + 40);
                LODWORD(v280) = v108;
                v281 = *(_OWORD *)v271;
                v282 = *(_OWORD *)&v271[16];
                memset(v271, 0, 24);
                LODWORD(v283) = v272;
                (*(void (**)(uint64_t, void **))(*(_QWORD *)v112 + 112))(v112, &v280);
                if (SBYTE7(v282) < 0)
                  operator delete((void *)v281);
              }
            }
            v113 = v105[12];
            v114 = (std::__shared_weak_count *)v105[13];
            if (v114)
            {
              v115 = (unint64_t *)&v114->__shared_owners_;
              do
                v116 = __ldxr(v115);
              while (__stxr(v116 + 1, v115));
            }
            (*(void (**)(uint64_t))(*(_QWORD *)v113 + 216))(v113);
            if (v114)
            {
              v117 = (unint64_t *)&v114->__shared_owners_;
              do
                v118 = __ldaxr(v117);
              while (__stlxr(v118 - 1, v117));
              if (!v118)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
            }
            if (v261)
            {
              v119 = (unint64_t *)&v261->__shared_owners_;
              do
                v120 = __ldaxr(v119);
              while (__stlxr(v120 - 1, v119));
              if (!v120)
              {
                ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
                std::__shared_weak_count::__release_weak(v261);
              }
            }
            AMCP::Graph::Manifest_Queue::reanchor_after_time_change(v94);
            caulk::make_string((caulk *)"%u - Discontinuous timestamps", (uint64_t)&v280, *(unsigned int *)v94);
            AMCP::Log::Scope_Registry::get(v121);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v271, "com.apple.coreaudio", "AMCP");
            v122 = *(caulk::concurrent::messenger **)(*(_QWORD *)v271 + 8);
            v123 = pthread_self();
            v124 = pthread_mach_thread_np(v123);
            v125 = SHIBYTE(v281);
            v126 = (void **)v280;
            v127 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
            *(_DWORD *)(v127 + 16) = 0;
            v128 = &v280;
            if (v125 < 0)
              v128 = v126;
            *(_BYTE *)(v127 + 20) = 16;
            *(_DWORD *)(v127 + 24) = v124;
            *(_QWORD *)(v127 + 32) = "Manifest_Queue.cpp";
            *(_DWORD *)(v127 + 40) = 560;
            *(_QWORD *)(v127 + 48) = v128;
            *(_QWORD *)v127 = &off_1E6975298;
            *(_QWORD *)(v127 + 8) = 0;
            caulk::concurrent::messenger::enqueue(v122, (caulk::concurrent::message *)v127);
            v129 = *(std::__shared_weak_count **)&v271[8];
            if (*(_QWORD *)&v271[8])
            {
              v130 = (unint64_t *)(*(_QWORD *)&v271[8] + 8);
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
            if (SHIBYTE(v281) < 0)
              operator delete(v280);
          }
          goto LABEL_181;
        }
        if (v98 < overload_time_in_host_time)
          goto LABEL_181;
        v132 = *((_QWORD *)v94 + 70);
        if (!v132)
          goto LABEL_181;
        AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)v271, *(_QWORD *)(v132 + 72), *(std::__shared_weak_count **)(v132 + 80));
        v133 = *(_QWORD *)v271;
        v134 = (*(double (**)(_QWORD, uint64_t))(**(_QWORD **)v271 + 64))(*(_QWORD *)v271, v98);
        v135 = (*(double (**)(uint64_t, unint64_t))(*(_QWORD *)v133 + 64))(v133, overload_time_in_host_time);
        kdebug_trace();
        kdebug_trace();
        if (*((_BYTE *)v94 + 425))
        {
          v136 = AMCP::Graph::Manifest_Queue::check_if_catchup_mode_is_still_active(v94);
          *((_BYTE *)v94 + 424) = v136;
        }
        else
        {
          v137 = *((_QWORD *)v94 + 70);
          v138 = *(_QWORD *)(v137 + 72);
          v139 = *(std::__shared_weak_count **)(v137 + 80);
          if (v139)
          {
            v140 = (unint64_t *)&v139->__shared_owners_;
            do
              v141 = __ldxr(v140);
            while (__stxr(v141 + 1, v140));
          }
          v142 = *(_QWORD *)(v138 + 160);
          if (v142)
          {
            v265 = *(_DWORD *)v94;
            (*(void (**)(uint64_t, int *))(*(_QWORD *)v142 + 48))(v142, &v265);
          }
          if (v139)
          {
            v143 = (unint64_t *)&v139->__shared_owners_;
            do
              v144 = __ldaxr(v143);
            while (__stlxr(v144 - 1, v143));
            if (!v144)
            {
              ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
              std::__shared_weak_count::__release_weak(v139);
            }
          }
          AMCP::Graph::Manifest_Queue::reanchor_after_time_change(v94);
        }
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v136);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v280, "com.apple.coreaudio", "AMCP");
        v145 = (caulk::concurrent::messenger *)*((_QWORD *)v280 + 1);
        v146 = pthread_self();
        v147 = pthread_mach_thread_np(v146);
        v148 = *(_DWORD *)v94;
        v149 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 80, 8);
        *(_DWORD *)(v149 + 16) = 0;
        *(_BYTE *)(v149 + 20) = 16;
        *(_DWORD *)(v149 + 24) = v147;
        *(_QWORD *)(v149 + 32) = "Manifest_Queue.cpp";
        *(_DWORD *)(v149 + 40) = 588;
        *(_QWORD *)(v149 + 48) = "";
        *(_DWORD *)(v149 + 56) = v148;
        *(double *)(v149 + 64) = v134;
        *(double *)(v149 + 72) = v135;
        *(_QWORD *)v149 = &off_1E69752F0;
        *(_QWORD *)(v149 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v145, (caulk::concurrent::message *)v149);
        v155 = (std::__shared_weak_count *)v281;
        if ((_QWORD)v281)
        {
          v156 = (unint64_t *)(v281 + 8);
          do
            v157 = __ldaxr(v156);
          while (__stlxr(v157 - 1, v156));
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
            std::__shared_weak_count::__release_weak(v155);
          }
        }
        v158 = *((_QWORD *)v94 + 70);
        v160 = *(_QWORD *)(v158 + 96);
        v159 = *(std::__shared_weak_count **)(v158 + 104);
        if (!v159)
          goto LABEL_166;
        v161 = (unint64_t *)&v159->__shared_owners_;
        do
          v162 = __ldxr(v161);
        while (__stxr(v162 + 1, v161));
        do
          v163 = __ldaxr(v161);
        while (__stlxr(v163 - 1, v161));
        if (!v163)
        {
          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
          std::__shared_weak_count::__release_weak(v159);
          if (v160)
          {
LABEL_167:
            v164 = *((_QWORD *)v94 + 70);
            v165 = *(_QWORD *)(v164 + 96);
            v166 = *(std::__shared_weak_count **)(v164 + 104);
            if (v166)
            {
              v167 = (unint64_t *)&v166->__shared_owners_;
              do
                v168 = __ldxr(v167);
              while (__stxr(v168 + 1, v167));
            }
            AMCP::Graph::Manifest_Log::add_message(v165, 2, "Overload %s(%u) - current time: %0.f  deadline time: %0.f", v150, v151, v152, v153, v154, (char)"");
            if (v166)
            {
              v169 = (unint64_t *)&v166->__shared_owners_;
              do
                v170 = __ldaxr(v169);
              while (__stlxr(v170 - 1, v169));
              if (!v170)
              {
                ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                std::__shared_weak_count::__release_weak(v166);
              }
            }
          }
        }
        else
        {
LABEL_166:
          if (v160)
            goto LABEL_167;
        }
        v171 = *(std::__shared_weak_count **)&v271[8];
        if (*(_QWORD *)&v271[8])
        {
          v172 = (unint64_t *)(*(_QWORD *)&v271[8] + 8);
          do
            v173 = __ldaxr(v172);
          while (__stlxr(v173 - 1, v172));
          if (!v173)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
        }
LABEL_181:
        size = (std::__shared_weak_count *)v268.__r_.__value_.__l.__size_;
        if (v268.__r_.__value_.__l.__size_)
        {
          v175 = (unint64_t *)(v268.__r_.__value_.__l.__size_ + 8);
          do
            v176 = __ldaxr(v175);
          while (__stlxr(v176 - 1, v175));
          if (!v176)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        if (*((_BYTE *)v94 + 552))
        {
          if ((*((_BYTE *)v94 + 432) & 2) == 0)
            AMCP::DAL::DAL_Time_Delta::validate((AMCP::Graph::Manifest_Queue *)((char *)v94 + 432));
          v177 = *((double *)v94 + 55);
          if ((*((_BYTE *)v94 + 312) & 2) == 0)
            AMCP::DAL::DAL_Time_Delta::validate((AMCP::Graph::Manifest_Queue *)((char *)v94 + 312));
          if (round(v177) != round(*((double *)v94 + 40)))
          {
            v178 = *((_QWORD *)v94 + 70);
            v180 = *(_QWORD *)(v178 + 96);
            v179 = *(std::__shared_weak_count **)(v178 + 104);
            if (!v179)
              goto LABEL_197;
            v181 = (unint64_t *)&v179->__shared_owners_;
            do
              v182 = __ldxr(v181);
            while (__stxr(v182 + 1, v181));
            do
              v183 = __ldaxr(v181);
            while (__stlxr(v183 - 1, v181));
            if (!v183)
            {
              ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
              std::__shared_weak_count::__release_weak(v179);
              if (v180)
              {
LABEL_198:
                v184 = (_QWORD *)*((_QWORD *)v94 + 70);
                v185 = (std::__shared_weak_count *)v184[13];
                v262 = v184[12];
                if (v185)
                {
                  v186 = (unint64_t *)&v185->__shared_owners_;
                  do
                    v187 = __ldxr(v186);
                  while (__stxr(v187 + 1, v186));
                  v184 = (_QWORD *)*((_QWORD *)v94 + 70);
                }
                AMCP::Graph::Manifest::get_iocontext_uid((AMCP::Graph::Manifest *)buf, v184);
                if (buf[23] >= 0)
                  v193 = buf;
                else
                  LOBYTE(v193) = buf[0];
                if ((*((_BYTE *)v94 + 312) & 2) == 0)
                  AMCP::DAL::DAL_Time_Delta::validate((AMCP::Graph::Manifest_Queue *)((char *)v94 + 312));
                if ((*((_BYTE *)v94 + 432) & 2) == 0)
                  AMCP::DAL::DAL_Time_Delta::validate((AMCP::Graph::Manifest_Queue *)((char *)v94 + 432));
                AMCP::Graph::Manifest_Log::add_message(v262, 7, "Manifest %s from %lld to %lld", v188, v189, v190, v191, v192, (char)v193);
                if ((buf[23] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
                if (v185)
                {
                  v194 = (unint64_t *)&v185->__shared_owners_;
                  do
                    v195 = __ldaxr(v194);
                  while (__stlxr(v195 - 1, v194));
                  if (!v195)
                  {
                    ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                    std::__shared_weak_count::__release_weak(v185);
                  }
                }
              }
            }
            else
            {
LABEL_197:
              if (v180)
                goto LABEL_198;
            }
          }
          updated = AMCP::Graph::Manifest_Queue::update_execution_context((uint64_t)v94, (uint64_t)v94 + 432);
          buf[0] = 0;
          v279 = 0;
          std::__optional_storage_base<AMCP::Graph::Manifest_Execution_Context,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<AMCP::Graph::Manifest_Execution_Context,false>>((uint64_t)v94 + 432, (__int128 *)buf);
          std::__optional_destruct_base<AMCP::Graph::Manifest_Execution_Context,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
        }
        else
        {
          updated = 0.0;
        }
        if (round(updated) != 0.0)
        {
          v197 = *((_QWORD *)v94 + 70);
          v198 = *(_QWORD *)(v197 + 72);
          v199 = *(std::__shared_weak_count **)(v197 + 80);
          if (v199)
          {
            v200 = (unint64_t *)&v199->__shared_owners_;
            do
              v201 = __ldxr(v200);
            while (__stxr(v201 + 1, v200));
          }
          v202.n128_f64[0] = AMCP::Graph::Manifest_Counter::adjust_cycle_anchor_for_buffer_size_change(*(double **)(v198 + 64), updated);
          if (v199)
          {
            v203 = (unint64_t *)&v199->__shared_owners_;
            do
              v204 = __ldaxr(v203);
            while (__stlxr(v204 - 1, v203));
            if (!v204)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v199->__on_zero_shared)(v199, v202);
              std::__shared_weak_count::__release_weak(v199);
            }
          }
          AMCP::Graph::Manifest_Queue::process_once(v94, 1, 0);
        }
        if (*((_QWORD *)v94 + 46))
          caulk::mach::os_workgroup_interval_managed::finish((AMCP::Graph::Manifest_Queue *)((char *)v94 + 360));
        AMCP::Graph::Manifest_Queue::wait_for_next_cycle(v94);
        AMCP::Graph::Manifest_Queue::start_workgroup_interval(v94);
LABEL_232:
        v21 = AMCP::Graph::Manifest_Queue::timebases_are_valid(*((AMCP::Graph::Manifest_Queue **)v94 + 70));
      }
      else
      {
LABEL_103:
        v21 = 0;
      }
      caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this[2]);
      if (v17 != v205)
      {
        caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this[2]);
        v17 = v206;
        if (v206 == 2)
        {
          *((_BYTE *)this + 34) = *((_BYTE *)this + 33) ^ 1;
          goto LABEL_237;
        }
        *((_BYTE *)this + 34) = 0;
        if (v206)
        {
LABEL_237:
          if (caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this[2]))
          {
            v207 = *((_QWORD *)*this + 70);
            if (v207)
            {
              v208 = *(AMCP::Graph::Manifest_Inventory **)(v207 + 72);
              v209 = *(std::__shared_weak_count **)(v207 + 80);
              if (v209)
              {
                v210 = (unint64_t *)&v209->__shared_owners_;
                do
                  v211 = __ldxr(v210);
                while (__stxr(v211 + 1, v210));
              }
              AMCP::Graph::Manifest_Inventory::take_power_assertions(v208);
              if (v209)
              {
                v212 = (unint64_t *)&v209->__shared_owners_;
                do
                  v213 = __ldaxr(v212);
                while (__stlxr(v213 - 1, v212));
                if (!v213)
                {
LABEL_255:
                  ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                  std::__shared_weak_count::__release_weak(v209);
                }
              }
            }
          }
        }
        else
        {
          v214 = *((_QWORD *)*this + 70);
          if (!v214)
            goto LABEL_256;
          v215 = *(AMCP::Graph::Manifest_Inventory **)(v214 + 72);
          v209 = *(std::__shared_weak_count **)(v214 + 80);
          if (v209)
          {
            v216 = (unint64_t *)&v209->__shared_owners_;
            do
              v217 = __ldxr(v216);
            while (__stxr(v217 + 1, v216));
          }
          AMCP::Graph::Manifest_Inventory::release_power_assertions(v215);
          if (v209)
          {
            v218 = (unint64_t *)&v209->__shared_owners_;
            do
              v219 = __ldaxr(v218);
            while (__stlxr(v219 - 1, v218));
            v17 = 0;
            if (!v219)
              goto LABEL_255;
          }
          else
          {
LABEL_256:
            v17 = 0;
          }
        }
      }
      caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this[2]);
      v20 = 1;
      if ((v264 & 1) != (v220 & 1))
      {
        caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this[2]);
        v264 = HIDWORD(v221) & 1;
        v222 = *((_QWORD *)*this + 70);
        if (v222)
        {
          v223 = *(AMCP::Graph::Manifest_Inventory **)(v222 + 72);
          v224 = *(std::__shared_weak_count **)(v222 + 80);
          *(_QWORD *)buf = v223;
          *(_QWORD *)&buf[8] = v224;
          if (v224)
          {
            v225 = (unint64_t *)&v224->__shared_owners_;
            do
              v226 = __ldxr(v225);
            while (__stxr(v226 + 1, v225));
          }
          *(_BYTE *)v223 = (v221 & 0x100000000) >> 32;
          if ((v221 & 0x100000000) != 0)
            AMCP::Graph::Manifest_Inventory::release_power_assertions(v223);
          else
            AMCP::Graph::Manifest_Inventory::take_power_assertions(v223);
          if (v224)
          {
            v227 = (unint64_t *)&v224->__shared_owners_;
            do
              v228 = __ldaxr(v227);
            while (__stlxr(v228 - 1, v227));
            if (!v228)
            {
              ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
              std::__shared_weak_count::__release_weak(v224);
            }
          }
          v20 = 1;
        }
      }
    }
  }
  v21 = 0;
LABEL_16:
  v22 = (AMCP::Graph::Manifest_Queue *)*this;
  if (!*this)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v18);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v249 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v249, OS_LOG_TYPE_ERROR))
    {
      v250 = pthread_self();
      v251 = pthread_mach_thread_np(v250);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v251;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "IO_Thread_Realtime.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 169;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not ((m_manifest_queue) != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v249, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s IO_Thread_Realtime::finish_workgroup_interval() called with null queue", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v270);
    v252 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"IO_Thread_Realtime::finish_workgroup_interval() called with null queue", (uint64_t)&v268);
    std::logic_error::logic_error((std::logic_error *)&v266, &v268);
    v266.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v280, (const std::logic_error *)&v266);
    v283 = 0;
    v284 = -1;
    v280 = off_1E69A1208;
    *((_QWORD *)&v281 + 1) = &unk_1E69A1230;
    v282 = 0uLL;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v280);
    *(_QWORD *)&buf[32] = "void AMCP::IO_Core::IO_Thread_Realtime::finish_workgroup_interval()";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IO_Thread_Realtime.cpp";
    LODWORD(v278) = 169;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v276.__r_.__value_.__l.__data_);
    *(_QWORD *)v271 = off_1E69A20A0;
    *(std::string *)&v271[8] = v276;
    memset(&v276, 0, sizeof(v276));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v271);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v252, (uint64_t)buf);
  }
  if (*((_QWORD *)v22 + 46))
    v18 = caulk::mach::os_workgroup_interval_managed::finish((AMCP::Graph::Manifest_Queue *)((char *)v22 + 360));
  if (v263 == 2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v18);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v23 = *(std::__shared_weak_count **)&buf[8];
    v24 = **(NSObject ***)buf;
    v25 = v2;
    v26 = &ShouldUsePageMaxMask(void)::checked;
    v27 = 2;
    if (*(_QWORD *)&buf[8])
    {
      v28 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v18 = os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)v18)
    {
      v30 = pthread_self();
      v31 = pthread_mach_thread_np(v30);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v31;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "IO_Thread_Realtime.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 91;
      _os_log_debug_impl(&dword_1B57BA000, v24, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Interrupted while trying to start the IO thread", buf, 0x18u);
    }
  }
  else
  {
    v32 = v20 & v21;
    v25 = v2;
    v26 = &ShouldUsePageMaxMask(void)::checked;
    v27 = v263;
    if ((v32 & 1) == 0)
    {
      v33 = pthread_self();
      v34 = (AMCP::Log::Scope_Registry *)pthread_getname_np(v33, buf, 0xFAuLL);
      AMCP::Log::Scope_Registry::get(v34);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v280, "com.apple.coreaudio", "AMCP");
      v35 = (std::__shared_weak_count *)v281;
      v36 = *(NSObject **)v280;
      if ((_QWORD)v281)
      {
        v37 = (unint64_t *)(v281 + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v39 = os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
      if (v39)
      {
        v229 = pthread_self();
        v230 = pthread_mach_thread_np(v229);
        LODWORD(v280) = 67109890;
        HIDWORD(v280) = v230;
        LOWORD(v281) = 2080;
        *(_QWORD *)((char *)&v281 + 2) = "IO_Thread_Realtime.cpp";
        WORD5(v281) = 1024;
        HIDWORD(v281) = 98;
        LOWORD(v282) = 2080;
        *(_QWORD *)((char *)&v282 + 2) = buf;
        _os_log_error_impl(&dword_1B57BA000, v36, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d I/O thread exited unexpectedly: %s", (uint8_t *)&v280, 0x22u);
      }
      v40 = (AMCP::Graph::Manifest_Queue *)*this;
      v41 = *((_QWORD *)*this + 70);
      v43 = *(_QWORD *)(v41 + 72);
      v42 = *(std::__shared_weak_count **)(v41 + 80);
      if (v42)
      {
        v44 = (unint64_t *)&v42->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
        do
          v46 = __ldaxr(v44);
        while (__stlxr(v46 - 1, v44));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (!v43)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v39);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v280, "com.apple.coreaudio", "AMCP");
        v257 = *(NSObject **)v280;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v280);
        if (os_log_type_enabled(v257, OS_LOG_TYPE_ERROR))
        {
          v258 = pthread_self();
          v259 = pthread_mach_thread_np(v258);
          LODWORD(v280) = 67109890;
          HIDWORD(v280) = v259;
          LOWORD(v281) = 2080;
          *(_QWORD *)((char *)&v281 + 2) = "Manifest_Queue.cpp";
          WORD5(v281) = 1024;
          HIDWORD(v281) = 802;
          LOWORD(v282) = 2080;
          *(_QWORD *)((char *)&v282 + 2) = "not (m_current_manifiest->get_inventory())";
          _os_log_error_impl(&dword_1B57BA000, v257, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We need a valid inventory in order to report a thread error", (uint8_t *)&v280, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v275);
        v260 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"We need a valid inventory in order to report a thread error", (uint64_t)&v276);
        std::logic_error::logic_error(&v270, &v276);
        v270.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)v271, &v270);
        *(_QWORD *)&v271[24] = 0;
        v272 = 0;
        v273 = 0;
        v274 = -1;
        *(_QWORD *)v271 = off_1E69A1208;
        *(_QWORD *)&v271[16] = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v280, (uint64_t)v271);
        *((_QWORD *)&v282 + 1) = "void AMCP::Graph::Manifest_Queue::report_thread_error() const";
        v283 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Queue.cpp";
        v284 = 802;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v266);
        v268.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
        *(std::runtime_error *)&v268.__r_.__value_.__r.__words[1] = v266;
        v269 = v267;
        v266.__vftable = 0;
        v266.__imp_.__imp_ = 0;
        v267 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v280, (uint64_t)&v268);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v260, (uint64_t)&v280);
      }
      v47 = *((_QWORD *)v40 + 70);
      v48 = *(uint64_t **)(v47 + 72);
      v49 = *(std::__shared_weak_count **)(v47 + 80);
      v280 = v48;
      *(_QWORD *)&v281 = v49;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      v18 = AMCP::Graph::Manifest_Inventory::report_thread_error(v48[24]);
      if (v49)
      {
        v52 = (unint64_t *)&v49->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
    }
  }
  v54 = (AMCP::Graph::Manifest_Queue *)*this;
  if (!*this)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v18);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v253 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v253, OS_LOG_TYPE_ERROR))
    {
      v254 = pthread_self();
      v255 = pthread_mach_thread_np(v254);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v255;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "IO_Thread_Realtime.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 153;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not ((m_manifest_queue) != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v253, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s IO_Thread_Realtime::leave_workgroup_interval() called with null queue", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v270);
    v256 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"IO_Thread_Realtime::leave_workgroup_interval() called with null queue", (uint64_t)&v268);
    std::logic_error::logic_error((std::logic_error *)&v266, &v268);
    v266.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v280, (const std::logic_error *)&v266);
    v283 = 0;
    v284 = -1;
    v280 = off_1E69A1208;
    *((_QWORD *)&v281 + 1) = &unk_1E69A1230;
    v282 = 0uLL;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v280);
    *(_QWORD *)&buf[32] = "void AMCP::IO_Core::IO_Thread_Realtime::leave_workgroup_interval()";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IO_Thread_Realtime.cpp";
    LODWORD(v278) = 153;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v276.__r_.__value_.__l.__data_);
    *(_QWORD *)v271 = off_1E69A20A0;
    *(std::string *)&v271[8] = v276;
    memset(&v276, 0, sizeof(v276));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v271);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v256, (uint64_t)buf);
  }
  if (*((_QWORD *)v54 + 46))
    caulk::mach::os_workgroup_managed::leave((AMCP::Graph::Manifest_Queue *)((char *)v54 + 360));
  v55 = pthread_self();
  AMCP::Utility::configure_thread_for_normal_priority(v55, v56);
  AMCP::Graph::Manifest_Queue::flush((AMCP::Graph::Manifest_Queue *)*this);
  v57 = (AMCP::Logging_Settings *)kdebug_trace();
  AMCP::Logging_Settings::instance(v57);
  if (*((_BYTE *)v26 + 67))
  {
    AMCP::Log::Scope_Registry::get(v58);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v59 = *(std::__shared_weak_count **)&buf[8];
    v60 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v61 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
    {
      v63 = pthread_self();
      v64 = pthread_mach_thread_np(v63);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v64;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "IO_Thread_Realtime.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 116;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v25;
      _os_log_impl(&dword_1B57BA000, v60, OS_LOG_TYPE_INFO, "%6u %32s:%-5d IO_Thread_Realtime(%d)::end", buf, 0x1Eu);
    }
  }
  return v27;
}

void sub_1B59F2520(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;

  if (a2)
  {
    __cxa_end_catch();
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v43 = __ldaxr(p_shared_owners);
      while (__stlxr(v43 - 1, p_shared_owners));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (a40)
    {
      v44 = (unint64_t *)&a40->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))a40->__on_zero_shared)(a40);
        std::__shared_weak_count::__release_weak(a40);
      }
    }
    if (a34)
    {
      v46 = (unint64_t *)&a34->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))a34->__on_zero_shared)(a34);
        std::__shared_weak_count::__release_weak(a34);
      }
    }
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1B59F2840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::runtime_error a29,uint64_t a30,uint64_t a31,void *a32,void *a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,std::runtime_error a59)
{
  std::runtime_error *v59;
  uint64_t v60;
  uint64_t v61;
  void *v63;
  uint64_t v64;
  uint64_t v65;

  if (a2)
  {
    std::runtime_error::~runtime_error(v59);
    if (__p)
      operator delete(__p);
    v63 = *(void **)v60;
    if (*(_QWORD *)v60)
    {
      *(_QWORD *)(v60 + 8) = v63;
      operator delete(v63);
    }
    *(_QWORD *)(v60 + 48) = &unk_1E69A2000;
    v64 = *(_QWORD *)(v60 + 56);
    if (v64 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v64 + 32))(v64))
      *(_QWORD *)(v60 + 56) = 0;
    std::runtime_error::~runtime_error(&a59);
    *(_QWORD *)(v60 + 304) = &unk_1E69A2000;
    v65 = *(_QWORD *)(v60 + 312);
    if (v65 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v65 + 32))(v65))
      *(_QWORD *)(v60 + 312) = 0;
    std::runtime_error::~runtime_error((std::runtime_error *)(v61 - 192));
    std::runtime_error::~runtime_error(&a29);
    if (a37 < 0)
      operator delete(a32);
    __cxa_free_exception(v59);
    AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a39);
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void AMCP::DAL::Packetized_Data_Handler::~Packetized_Data_Handler(AMCP::DAL::Packetized_Data_Handler *this)
{
  char *v1;

  *(_QWORD *)this = &off_1E697CB28;
  v1 = (char *)this + 64;
  std::vector<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>,caulk::rt_allocator<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v1);
}

{
  char *v1;

  *(_QWORD *)this = &off_1E697CB28;
  v1 = (char *)this + 64;
  std::vector<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>,caulk::rt_allocator<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v1);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::DAL::Packetized_Data_Handler::dal_operation_is_supported()
{
  return 0;
}

void AMCP::DAL::Packetized_Data_Handler::adopt(AMCP::Log::Scope_Registry *a1)
{
  std::__shared_weak_count *v1;
  NSObject *v2;
  unint64_t *v3;
  unint64_t v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  NSObject **v7;
  _BYTE v8[10];
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v7, "com.apple.coreaudio", "AMCP");
  v1 = *(std::__shared_weak_count **)v8;
  v2 = *v7;
  if (*(_QWORD *)v8)
  {
    v3 = (unint64_t *)(*(_QWORD *)v8 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v5 = pthread_self();
    v6 = pthread_mach_thread_np(v5);
    LODWORD(v7) = 67109890;
    HIDWORD(v7) = v6;
    *(_WORD *)v8 = 2080;
    *(_QWORD *)&v8[2] = "Packetized_Data_Handler.cpp";
    v9 = 1024;
    v10 = 71;
    v11 = 2080;
    v12 = "false";
    _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Packetized_Data_Handler::adopt unsupported", (uint8_t *)&v7, 0x22u);
  }
  abort();
}

uint64_t AMCP::DAL::Packetized_Data_Handler::reuse_container(uint64_t this)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(this + 64);
  v2 = *(_QWORD **)(this + 72);
  while (v1 != v2)
  {
    *v1 = v1[2];
    v1 += 4;
  }
  return this;
}

uint64_t AMCP::DAL::Packetized_Data_Handler::get_allocation_size(AMCP::DAL::Packetized_Data_Handler *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *((_QWORD *)this + 8);
  v2 = *((_QWORD *)this + 9);
  if (v1 == v2)
    return 0;
  result = 0;
  do
  {
    result += *(_QWORD *)(v1 + 16);
    v1 += 32;
  }
  while (v1 != v2);
  return result;
}

double AMCP::DAL::Packetized_Data_Handler::get_length_in_frames(AMCP::DAL::Packetized_Data_Handler *this)
{
  NSObject *v2;
  _opaque_pthread_t *v3;
  mach_port_t v4;
  void *exception;
  __int128 v6;
  uint64_t v7;
  uint64_t (**v8)();
  __int128 v9;
  uint64_t v10;
  std::string v11;
  std::logic_error v12;
  std::logic_error v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint8_t buf[8];
  __int16 v21;
  char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  _BYTE v26[14];
  const char *v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 8) == *((_QWORD *)this + 9))
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v2 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = pthread_self();
      v4 = pthread_mach_thread_np(v3);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v4;
      v21 = 2080;
      v22 = "Packetized_Data_Handler.cpp";
      v23 = 1024;
      v24 = 97;
      v25 = 2080;
      *(_QWORD *)v26 = "not (not m_samples.empty())";
      _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Packetized_Data_Handler::get_length_in_frames: empty data buffer", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Packetized_Data_Handler::get_length_in_frames: empty data buffer", (uint64_t)&v11);
    std::logic_error::logic_error(&v12, &v11);
    v12.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v13, &v12);
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = -1;
    v13.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v14 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v13);
    *(_QWORD *)&v26[6] = "virtual Sample_Time AMCP::DAL::Packetized_Data_Handler::get_length_in_frames() const";
    v27 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_Data_Handler.cpp";
    v28 = 97;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v6);
    v9 = v6;
    v10 = v7;
    v6 = 0uLL;
    v7 = 0;
    v8 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v8);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return (double)(*((_QWORD *)this + 7) * (unint64_t)*((unsigned int *)this + 7));
}

void sub_1B59F30D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *AMCP::DAL::Packetized_Data_Handler::get_audio_buffer_list@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, caulk::rt_safe_memory_resource **a3@<X8>)
{
  AMCP::Utility *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  caulk::rt_safe_memory_resource *result;
  uint64_t v11;
  int v12;
  char *v13;
  void *v14[3];
  void **v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = *(AMCP::Utility **)(a1 + 56);
  v14[0] = &off_1E69A1390;
  v15 = v14;
  *a3 = AMCP::Utility::AudioBufferList_Create(v6);
  std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)(a3 + 1), (uint64_t)v14);
  v7 = v15;
  if (v15 == v14)
  {
    v8 = 4;
    v7 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v7 + v8))();
LABEL_6:
  v9 = AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::Packetized_Data_Handler>(*a2);
  AMCP::DAL::sample_group_from_packetized_samples((unint64_t *)v14, (uint64_t **)(v9 + 64));
  result = (caulk::rt_safe_memory_resource *)v14[0];
  if ((_DWORD)v6)
  {
    v11 = 0;
    v12 = *(_DWORD *)(a1 + 36);
    do
    {
      v13 = (char *)*a3 + v11;
      *((_DWORD *)v13 + 2) = v12;
      *((_DWORD *)v13 + 3) = *(_QWORD *)((char *)result + v11 + 8);
      *((_QWORD *)v13 + 2) = *(_QWORD *)((char *)result + v11);
      v11 += 16;
    }
    while (16 * v6 != v11);
  }
  else if (!v14[0])
  {
    return result;
  }
  v14[1] = result;
  return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100](result, ((char *)v14[2] - (char *)result) >> 4);
}

void sub_1B59F3304(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Packetized_Data_Handler::set_audio_buffer_list(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  _QWORD *v11;

  v2 = *(unsigned int *)*a2;
  v3 = *(_QWORD *)(result + 64);
  v4 = (*(_QWORD *)(result + 72) - v3) >> 5;
  if (v4 >= v2)
    v5 = *(unsigned int *)*a2;
  else
    v5 = (*(_QWORD *)(result + 72) - v3) >> 5;
  if (v5)
  {
    v6 = (unsigned int *)(*a2 + 12);
    v7 = *(_QWORD **)(result + 64);
    v8 = v5;
    do
    {
      v9 = *v6;
      v6 += 4;
      *v7 = v9;
      v7 += 4;
      --v8;
    }
    while (v8);
  }
  if (v4 > v2)
  {
    v10 = v4 - v5;
    v11 = (_QWORD *)(v3 + 32 * v5);
    do
    {
      *v11 = 0;
      v11 += 4;
      --v10;
    }
    while (v10);
  }
  return result;
}

NSObject **AMCP::DAL::Packetized_Data_Handler::copy(uint64_t **a1, double *a2, uint64_t *a3)
{
  uint64_t v5;
  AMCP::DAL::Packetized_Data_Handler *v6;
  double length_in_frames;
  double v8;
  AMCP::Log::Scope_Registry *v9;
  double v10;
  double v11;
  uint64_t **v12;
  char *imp;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  NSObject **result;
  NSObject *v18;
  _opaque_pthread_t *v19;
  mach_port_t v20;
  unint64_t v21;
  void *exception;
  NSObject *v23;
  _opaque_pthread_t *v24;
  mach_port_t v25;
  unint64_t v26;
  void *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();
  __int128 v31;
  uint64_t v32;
  std::string v33;
  std::logic_error v34;
  std::logic_error v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint8_t buf[8];
  __int128 v43;
  __int16 v44;
  _BYTE v45[22];
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v6 = (AMCP::DAL::Packetized_Data_Handler *)AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::Packetized_Data_Handler>(*a3);
  length_in_frames = AMCP::DAL::Packetized_Data_Handler::get_length_in_frames(v6);
  v8 = a2[1] - *a2;
  v10 = round(AMCP::DAL::Packetized_Data_Handler::get_length_in_frames((AMCP::DAL::Packetized_Data_Handler *)a1));
  v11 = round(v8);
  if (v10 != v11)
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v18 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = pthread_self();
      v20 = pthread_mach_thread_np(v19);
      v21 = vcvtmd_s64_f64(v8);
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v20;
      LOWORD(v43) = 2080;
      *(_QWORD *)((char *)&v43 + 2) = "Packetized_Data_Handler.cpp";
      WORD5(v43) = 1024;
      HIDWORD(v43) = 194;
      v44 = 2080;
      *(_QWORD *)v45 = "not (get_length_in_frames() == source_frame_length)";
      *(_WORD *)&v45[8] = 2048;
      *(_QWORD *)&v45[10] = v21;
      _os_log_error_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s invalid source frame length %lld", buf, 0x2Cu);
    }
    else
    {
      v21 = vcvtmd_s64_f64(v8);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"invalid source frame length %lld", (uint64_t)&v33, v21);
    std::logic_error::logic_error(&v34, &v33);
    v34.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v36 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v45[6] = "virtual void AMCP::DAL::Packetized_Data_Handler::copy(const Sample_Time_Range &, Container, Sam"
                         "ple_Time, DAL_Operation_Context_Ref) const";
    *(_QWORD *)&v45[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_Data_Handler.cpp";
    v46 = 194;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
    v31 = v28;
    v32 = v29;
    v28 = 0uLL;
    v29 = 0;
    v30 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v30);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (v11 != round(length_in_frames))
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v23 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = pthread_self();
      v25 = pthread_mach_thread_np(v24);
      v26 = vcvtmd_s64_f64(length_in_frames);
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v25;
      LOWORD(v43) = 2080;
      *(_QWORD *)((char *)&v43 + 2) = "Packetized_Data_Handler.cpp";
      WORD5(v43) = 1024;
      HIDWORD(v43) = 195;
      v44 = 2080;
      *(_QWORD *)v45 = "not (source_frame_length == dest_frame_length)";
      *(_WORD *)&v45[8] = 2048;
      *(_QWORD *)&v45[10] = v26;
      _os_log_error_impl(&dword_1B57BA000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s invalid dest frame length %lld", buf, 0x2Cu);
    }
    else
    {
      v26 = vcvtmd_s64_f64(length_in_frames);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    v27 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"invalid dest frame length %lld", (uint64_t)&v33, v26);
    std::logic_error::logic_error(&v34, &v33);
    v34.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v36 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v45[6] = "virtual void AMCP::DAL::Packetized_Data_Handler::copy(const Sample_Time_Range &, Container, Sam"
                         "ple_Time, DAL_Operation_Context_Ref) const";
    *(_QWORD *)&v45[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_Data_Handler.cpp";
    v46 = 195;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
    v31 = v28;
    v32 = v29;
    v28 = 0uLL;
    v29 = 0;
    v30 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v30);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v27, (uint64_t)buf);
  }
  v12 = (uint64_t **)(v5 + 64);
  AMCP::DAL::sample_group_from_packetized_samples((unint64_t *)buf, v12);
  AMCP::DAL::sample_group_from_packetized_samples((unint64_t *)&v35, a1 + 8);
  imp = (char *)v35.__imp_.__imp_;
  if (v35.__imp_.__imp_ == (const char *)v35.__vftable)
  {
    if (!v35.__imp_.__imp_)
      goto LABEL_9;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    imp = (char *)v35.__vftable;
    do
    {
      memcpy(*(void **)(*(_QWORD *)buf + v14), *(const void **)&imp[v14], *(_QWORD *)&imp[v14 + 8]);
      imp = (char *)v35.__vftable;
      (*v12)[v15] = *(uint64_t *)((char *)&v35.~logic_error_0 + v14);
      ++v16;
      v15 += 4;
      v14 += 16;
    }
    while (v16 < (v35.__imp_.__imp_ - (const char *)imp) >> 4);
  }
  v35.__imp_.__imp_ = imp;
  std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)imp, (v36 - imp) >> 4);
LABEL_9:
  result = *(NSObject ***)buf;
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&v43 = *(_QWORD *)buf;
    return (NSObject **)std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)buf, (uint64_t)(*((_QWORD *)&v43 + 1) - *(_QWORD *)buf) >> 4);
  }
  return result;
}

void sub_1B59F386C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  caulk::rt_safe_memory_resource *v31;

  v31 = *(caulk::rt_safe_memory_resource **)(v29 - 144);
  if (v31)
  {
    *(_QWORD *)(v29 - 136) = v31;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100](v31, (uint64_t)(*(_QWORD *)(v29 - 128) - (_QWORD)v31) >> 4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *AMCP::DAL::Packetized_Data_Handler::get_ring_buffer_time_translator(AMCP::DAL::Packetized_Data_Handler *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    AMCP::DAL::Packetized_Data_Handler::get_ring_buffer_time_translator(void)const::s_translator = (uint64_t)&off_1E697CBE8;
  }
  return &AMCP::DAL::Packetized_Data_Handler::get_ring_buffer_time_translator(void)const::s_translator;
}

void AMCP::DAL::Packetized_Data_Handler::dal_operation_context_create(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double AMCP::DAL::Packetized_Data_Handler::dal_operation_apply()
{
  return 0.0;
}

uint64_t AMCP::DAL::Packetized_Data_Handler::dal_operation_get_property()
{
  return 0;
}

uint64_t AMCP::DAL::Packetized_Data_Handler::get_data@<X0>(AMCP::DAL::Packetized_Data_Handler *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  double v7;
  AMCP::Log::Scope_Registry *v8;
  uint64_t result;
  unsigned int *v10;
  unsigned int *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64x2_t v25;
  unint64_t v26;
  NSObject *v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  unint64_t v30;
  void *exception;
  __int128 v32;
  uint64_t v33;
  uint64_t (**v34)();
  __int128 v35;
  uint64_t v36;
  std::string v37;
  std::logic_error v38;
  std::logic_error v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;
  uint8_t buf[8];
  int64x2_t v47;
  _BYTE v48[24];
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v7 = a5 - a4;
  if (round(a5 - a4) != round(AMCP::DAL::Packetized_Data_Handler::get_length_in_frames(a1)))
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v27 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      v28 = pthread_self();
      v29 = pthread_mach_thread_np(v28);
      v30 = vcvtmd_s64_f64(v7);
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v29;
      v47.i16[0] = 2080;
      *(uint64_t *)((char *)v47.i64 + 2) = (uint64_t)"Packetized_Data_Handler.cpp";
      v47.i16[5] = 1024;
      v47.i32[3] = 152;
      *(_WORD *)v48 = 2080;
      *(_QWORD *)&v48[2] = "not (range.length() == get_length_in_frames())";
      *(_WORD *)&v48[10] = 2048;
      *(_QWORD *)&v48[12] = v30;
      _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Bad range length for packetized data, requested range length %lld", buf, 0x2Cu);
    }
    else
    {
      v30 = vcvtmd_s64_f64(v7);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v45);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Bad range length for packetized data, requested range length %lld", (uint64_t)&v37, v30);
    std::logic_error::logic_error(&v38, &v37);
    v38.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v39, &v38);
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = -1;
    v39.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v40 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v39);
    *(_QWORD *)&v48[8] = "virtual Sample_Group<uint8_t> AMCP::DAL::Packetized_Data_Handler::get_data(const Container &, S"
                         "ample_Time_Range) const";
    *(_QWORD *)&v48[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_Data_Handler.cpp";
    v49 = 152;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v32);
    v35 = v32;
    v36 = v33;
    v32 = 0uLL;
    v33 = 0;
    v34 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v34);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  result = AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::Packetized_Data_Handler>(*a2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v10 = *(unsigned int **)(result + 64);
  v11 = *(unsigned int **)(result + 72);
  if (v10 != v11)
  {
    v12 = 0;
    v13 = a3 + 2;
    do
    {
      v14 = *((_QWORD *)v10 + 1);
      v15 = *v10;
      if ((unint64_t)v12 >= *v13)
      {
        v16 = (uint64_t)((uint64_t)v12 - *a3) >> 4;
        if ((unint64_t)(v16 + 1) >> 60)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v17 = *v13 - *a3;
        v18 = v17 >> 3;
        if (v17 >> 3 <= (unint64_t)(v16 + 1))
          v18 = v16 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
          v19 = 0xFFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        *(_QWORD *)&v48[8] = a3 + 2;
        if (v19)
          v19 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(v19);
        else
          v20 = 0;
        v21 = (_QWORD *)(v19 + 16 * v16);
        *v21 = v14;
        v21[1] = v15;
        v22 = *a3;
        v23 = a3[1];
        if (v23 == *a3)
        {
          v25 = vdupq_n_s64(v23);
          v24 = v19 + 16 * v16;
        }
        else
        {
          v24 = v19 + 16 * v16;
          do
          {
            *(_OWORD *)(v24 - 16) = *(_OWORD *)(v23 - 16);
            v24 -= 16;
            v23 -= 16;
          }
          while (v23 != v22);
          v25 = *(int64x2_t *)a3;
        }
        v12 = v21 + 2;
        *a3 = v24;
        a3[1] = (unint64_t)(v21 + 2);
        v47 = v25;
        v26 = a3[2];
        a3[2] = v19 + 16 * v20;
        *(_QWORD *)v48 = v26;
        *(_QWORD *)buf = v25.i64[0];
        result = std::__split_buffer<AMCP::DAL::Audio_Samples<unsigned char>,caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>> &>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *v12 = v14;
        v12[1] = v15;
        v12 += 2;
      }
      a3[1] = (unint64_t)v12;
      v10 += 8;
    }
    while (v10 != v11);
  }
  return result;
}

void sub_1B59F3DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;
  caulk::rt_safe_memory_resource *v42;

  v42 = *(caulk::rt_safe_memory_resource **)v40;
  if (*(_QWORD *)v40)
  {
    *(_QWORD *)(v40 + 8) = v42;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100](v42, (uint64_t)(*(_QWORD *)(v40 + 16) - (_QWORD)v42) >> 4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::Packetized_Data_Handler>(uint64_t result)
{
  NSObject *v1;
  _opaque_pthread_t *v2;
  mach_port_t v3;
  void *exception;
  __int128 v5;
  uint64_t v6;
  uint64_t (**v7)();
  __int128 v8;
  uint64_t v9;
  std::string v10;
  std::logic_error v11;
  std::logic_error v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint8_t buf[8];
  __int16 v20;
  char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  _BYTE v25[14];
  const char *v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!result)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v1 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      v2 = pthread_self();
      v3 = pthread_mach_thread_np(v2);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v3;
      v20 = 2080;
      v21 = "Container.h";
      v22 = 1024;
      v23 = 121;
      v24 = 2080;
      *(_QWORD *)v25 = "not ((m_impl.get()) != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v1, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to call Container::GetContainerData on a null Container", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v18);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to call Container::GetContainerData on a null Container", (uint64_t)&v10);
    std::logic_error::logic_error(&v11, &v10);
    v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v12, &v11);
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = -1;
    v12.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v13 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v12);
    *(_QWORD *)&v25[6] = "T *AMCP::DAL::Container::get_container_data_ptr() const [T = AMCP::DAL::Packetized_Data_Handler]";
    v26 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Container.h";
    v27 = 121;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v5);
    v8 = v5;
    v9 = v6;
    v5 = 0uLL;
    v6 = 0;
    v7 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v7);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return result;
}

void sub_1B59F4128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

unint64_t std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(unint64_t result)
{
  if (!(result >> 60))
  {
    result = *MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)result);
  }
  __break(1u);
  return result;
}

uint64_t std::__split_buffer<AMCP::DAL::Audio_Samples<unsigned char>,caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  caulk::rt_safe_memory_resource *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(caulk::rt_safe_memory_resource **)a1;
  if (*(_QWORD *)a1)
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100](v4, (uint64_t)(*(_QWORD *)(a1 + 24) - (_QWORD)v4) >> 4);
  return a1;
}

void AMCP::DAL::Packetized_Buffer_Time_Translator::~Packetized_Buffer_Time_Translator(AMCP::DAL::Packetized_Buffer_Time_Translator *this)
{
  JUMPOUT(0x1B5E50688);
}

void AMCP::DAL::Packetized_Buffer_Time_Translator::translate_range(uint64_t a1@<X1>, _QWORD *a2@<X2>, uint64_t *a3@<X8>)
{
  AMCP::DAL::DAL_Time *v6;
  _BOOL8 v7;
  BOOL v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  caulk::rt_safe_memory_resource *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v39;
  _opaque_pthread_t *v40;
  mach_port_t v41;
  void *exception;
  __int128 v43;
  uint64_t v44;
  uint64_t (**v45)();
  __int128 v46;
  uint64_t v47;
  _BYTE v48[8];
  double v49;
  std::__shared_weak_count *v50;
  std::string v51;
  std::logic_error v52;
  std::logic_error v53;
  void *v54;
  char *v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  int v58;
  char v59;
  _BYTE buf[56];
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v6 = (AMCP::DAL::DAL_Time *)(a2 + 5);
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (AMCP::DAL::DAL_Time *)(a2 + 5), (AMCP::DAL::DAL_Time *)a2);
  AMCP::DAL::DAL_Time::operator-((uint64_t)&v53, (AMCP::DAL::DAL_Time *)(a1 + 40), (AMCP::DAL::DAL_Time *)a1);
  v7 = AMCP::DAL::DAL_Time_Delta::operator==((AMCP::DAL::DAL_Time_Delta *)buf, (uint64_t)&v53);
  v8 = v7;
  v9 = v56;
  if (v56)
  {
    p_shared_owners = (unint64_t *)&v56->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(std::__shared_weak_count **)&buf[32];
  if (*(_QWORD *)&buf[32])
  {
    v13 = (unint64_t *)(*(_QWORD *)&buf[32] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (!v8)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v39 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      v40 = pthread_self();
      v41 = pthread_mach_thread_np(v40);
      AMCP::DAL::DAL_Time::operator-((uint64_t)&v53, v6, (AMCP::DAL::DAL_Time *)a2);
      if (((uint64_t)v53.__vftable & 2) == 0)
        AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v53);
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v41;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Packetized_Data_Handler.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 173;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not (range.length() == ref_range.length())";
      *(_WORD *)&buf[34] = 2048;
      *(_QWORD *)&buf[36] = vcvtmd_s64_f64(*(double *)&v53.__imp_.__imp_);
      _os_log_error_impl(&dword_1B57BA000, v39, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s invalid range length %lld", buf, 0x2Cu);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v59);
    exception = __cxa_allocate_exception(0x40uLL);
    AMCP::DAL::DAL_Time::operator-((uint64_t)v48, v6, (AMCP::DAL::DAL_Time *)a2);
    if ((v48[0] & 2) == 0)
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)v48);
    caulk::make_string((caulk *)"invalid range length %lld", (uint64_t)&v51, vcvtmd_s64_f64(v49));
    std::logic_error::logic_error(&v52, &v51);
    v52.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v53, &v52);
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = -1;
    v53.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v54 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v53);
    *(_QWORD *)&buf[32] = "virtual rt_safe_vector<Buffer_Time_Translator::Translation_Range> AMCP::DAL::Packetized_Buffer"
                          "_Time_Translator::translate_range(const DAL_Time_Range &, const DAL_Time_Range &) const";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_Data_Handler.cpp";
    *(_DWORD *)&buf[48] = 173;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
    v45 = off_1E69A20A0;
    v46 = v43;
    v47 = v44;
    v43 = 0uLL;
    v44 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v45);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  AMCP::DAL::DAL_Time::operator-((uint64_t)v48, (AMCP::DAL::DAL_Time *)(a1 + 40), (AMCP::DAL::DAL_Time *)a1);
  if ((v48[0] & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)v48);
  *(_QWORD *)buf = 0;
  *(double *)&buf[8] = v49;
  *(_OWORD *)&buf[16] = *(_OWORD *)a2;
  v15 = a2[3];
  *(_QWORD *)&buf[32] = a2[2];
  *(_QWORD *)&buf[40] = v15;
  v16 = a2[4];
  *(_QWORD *)&buf[48] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v61 = *(_OWORD *)v6;
  v19 = a2[8];
  v20 = a2[9];
  v62 = *((_QWORD *)v6 + 2);
  *(_QWORD *)&v63 = v19;
  *((_QWORD *)&v63 + 1) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = a3[2];
  v24 = a3[1];
  if (v24 >= v23)
  {
    v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *a3) >> 5);
    v29 = v28 + 1;
    if (v28 + 1 > 0x2AAAAAAAAAAAAAALL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * ((uint64_t)(v23 - *a3) >> 5) > v29)
      v29 = 0x5555555555555556 * ((uint64_t)(v23 - *a3) >> 5);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a3) >> 5) >= 0x155555555555555)
      v30 = 0x2AAAAAAAAAAAAAALL;
    else
      v30 = v29;
    v56 = (std::__shared_weak_count *)(a3 + 2);
    v31 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>((caulk::rt_safe_memory_resource *)v30);
    v32 = (char *)v31 + 96 * v28;
    v53.__vftable = (std::logic_error_vtbl *)v31;
    v53.__imp_.__imp_ = v32;
    v55 = (char *)v31 + 96 * v33;
    *(_OWORD *)v32 = *(_OWORD *)buf;
    v34 = *(_OWORD *)&buf[16];
    *((_QWORD *)v32 + 4) = *(_QWORD *)&buf[32];
    *((_OWORD *)v32 + 1) = v34;
    *(_OWORD *)(v32 + 40) = *(_OWORD *)&buf[40];
    *(_QWORD *)&buf[40] = 0;
    *(_QWORD *)&buf[48] = 0;
    v35 = v61;
    *((_QWORD *)v32 + 9) = v62;
    *(_OWORD *)(v32 + 56) = v35;
    *((_OWORD *)v32 + 5) = v63;
    v63 = 0uLL;
    v54 = v32 + 96;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__swap_out_circular_buffer(a3, &v53);
    v27 = a3[1];
    std::__split_buffer<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range> &>::~__split_buffer((uint64_t)&v53);
  }
  else
  {
    *(_OWORD *)v24 = *(_OWORD *)buf;
    v25 = *(_QWORD *)&buf[32];
    *(_OWORD *)(v24 + 16) = *(_OWORD *)&buf[16];
    *(_QWORD *)(v24 + 32) = v25;
    *(_QWORD *)(v24 + 40) = v15;
    *(_QWORD *)(v24 + 48) = v16;
    *(_QWORD *)&buf[40] = 0;
    *(_QWORD *)&buf[48] = 0;
    v26 = v62;
    *(_OWORD *)(v24 + 56) = v61;
    *(_QWORD *)(v24 + 72) = v26;
    *(_QWORD *)(v24 + 80) = v19;
    *(_QWORD *)(v24 + 88) = v20;
    v63 = 0uLL;
    v27 = v24 + 96;
  }
  a3[1] = v27;
  v36 = v50;
  if (v50)
  {
    v37 = (unint64_t *)&v50->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_1B59F4824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v35 + 24);
  _Unwind_Resume(a1);
}

unint64_t *AMCP::DAL::sample_group_from_packetized_samples(unint64_t *result, uint64_t **a2)
{
  unint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64x2_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64x2_t v27;
  unint64_t v28;
  uint64_t v29;
  int64x2_t v30;
  unint64_t v31;
  _QWORD *v32;

  v2 = result;
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  v3 = result + 2;
  v4 = *a2;
  v5 = a2[1];
  v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    if (v6 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v32 = result + 2;
    v8 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(v6 >> 5);
    v11 = *v2;
    v10 = v2[1];
    if (v10 == *v2)
    {
      v13 = vdupq_n_s64(v10);
      v12 = v8;
    }
    else
    {
      v12 = v8;
      do
      {
        *(_OWORD *)(v12 - 16) = *(_OWORD *)(v10 - 16);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v13 = *(int64x2_t *)v2;
    }
    *v2 = v12;
    v2[1] = v8;
    v30 = v13;
    v14 = v2[2];
    v2[2] = v8 + 16 * v9;
    v31 = v14;
    v29 = v13.i64[0];
    result = (unint64_t *)std::__split_buffer<AMCP::DAL::Audio_Samples<unsigned char>,caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>> &>::~__split_buffer((uint64_t)&v29);
    v4 = *a2;
    v5 = a2[1];
  }
  if (v4 != v5)
  {
    v15 = (_QWORD *)v2[1];
    do
    {
      v16 = *v4;
      v17 = v4[1];
      if ((unint64_t)v15 >= *v3)
      {
        v18 = (uint64_t)((uint64_t)v15 - *v2) >> 4;
        if ((unint64_t)(v18 + 1) >> 60)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v19 = *v3 - *v2;
        v20 = v19 >> 3;
        if (v19 >> 3 <= (unint64_t)(v18 + 1))
          v20 = v18 + 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
          v21 = 0xFFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        v32 = v3;
        if (v21)
          v21 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(v21);
        else
          v22 = 0;
        v23 = (_QWORD *)(v21 + 16 * v18);
        *v23 = v17;
        v23[1] = v16;
        v24 = *v2;
        v25 = v2[1];
        if (v25 == *v2)
        {
          v27 = vdupq_n_s64(v25);
          v26 = v21 + 16 * v18;
        }
        else
        {
          v26 = v21 + 16 * v18;
          do
          {
            *(_OWORD *)(v26 - 16) = *(_OWORD *)(v25 - 16);
            v26 -= 16;
            v25 -= 16;
          }
          while (v25 != v24);
          v27 = *(int64x2_t *)v2;
        }
        v15 = v23 + 2;
        *v2 = v26;
        v2[1] = (unint64_t)(v23 + 2);
        v30 = v27;
        v28 = v2[2];
        v2[2] = v21 + 16 * v22;
        v31 = v28;
        v29 = v27.i64[0];
        result = (unint64_t *)std::__split_buffer<AMCP::DAL::Audio_Samples<unsigned char>,caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>> &>::~__split_buffer((uint64_t)&v29);
      }
      else
      {
        *v15 = v17;
        v15[1] = v16;
        v15 += 2;
      }
      v2[1] = (unint64_t)v15;
      v4 += 4;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_1B59F4B9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  caulk::rt_safe_memory_resource *v3;

  v3 = *(caulk::rt_safe_memory_resource **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100](v3, (uint64_t)(*(_QWORD *)(v1 + 16) - (_QWORD)v3) >> 4);
  }
  _Unwind_Resume(exception_object);
}

caulk::rt_safe_memory_resource *std::vector<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>,caulk::rt_allocator<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>>>::__destroy_vector::operator()[abi:ne180100](caulk::rt_safe_memory_resource *result)
{
  caulk::rt_safe_memory_resource **v1;
  caulk::rt_safe_memory_resource *v2;
  caulk::rt_safe_memory_resource ***v3;
  caulk::rt_safe_memory_resource *v4;
  caulk::rt_safe_memory_resource *v5;
  caulk::rt_safe_memory_resource **v6;
  caulk::rt_safe_memory_resource *v7;

  v1 = *(caulk::rt_safe_memory_resource ***)result;
  v2 = **(caulk::rt_safe_memory_resource ***)result;
  if (v2)
  {
    v3 = (caulk::rt_safe_memory_resource ***)result;
    v4 = v1[1];
    v5 = **(caulk::rt_safe_memory_resource ***)result;
    v6 = v1;
    if (v4 != v2)
    {
      do
      {
        v7 = (caulk::rt_safe_memory_resource *)((char *)v4 - 32);
        AMCP::DAL::Audio_Samples_Data::~Audio_Samples_Data((caulk::rt_safe_memory_resource *)((char *)v4 - 24));
        v4 = v7;
      }
      while (v7 != v2);
      v6 = *v3;
      v5 = **v3;
    }
    v1[1] = v2;
    return std::allocator_traits<caulk::rt_allocator<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>>>::deallocate[abi:ne180100](v5, (v6[2] - v5) >> 5);
  }
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (!(a2 >> 59))
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

uint64_t AMCP::DAL::Packetized_Data_Handler::Packetized_Data_Handler(uint64_t a1, __int128 *a2, double a3)
{
  __int128 v4;
  __int128 v5;
  int64x2_t *v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  int64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  caulk::rt_safe_memory_resource *v17;
  caulk::rt_safe_memory_resource *v18;
  uint64_t *v19;
  uint64_t *v20;
  AMCP::DAL::Audio_Samples_Data *v21;
  std::__shared_weak_count *v23;
  NSObject *v24;
  unint64_t *v25;
  unint64_t v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  std::logic_error *exception;
  uint64_t v30;
  int v31;
  uint64_t v32;
  std::logic_error v33;
  __int128 v34;
  uint64_t v35;
  uint64_t (**v36)();
  __int128 v37;
  uint64_t v38;
  std::string v39;
  std::logic_error v40;
  std::logic_error v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint8_t buf[8];
  _BYTE v52[10];
  __int16 v53;
  int v54;
  _BYTE v55[24];
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  v48 = *a2;
  v4 = v48;
  v49 = v5;
  v50 = *((_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 40) = v50;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1E697CB28;
  *(_QWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (int64x2_t *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v7 = *((unsigned int *)a2 + 4);
  if (!(_DWORD)v7)
  {
    v8 = 4.0;
    LODWORD(v8) = *((_DWORD *)a2 + 7);
    v7 = (unint64_t)(a3 * 4.0 * (double)v8);
    if (!v7)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v23 = *(std::__shared_weak_count **)v52;
      v24 = **(NSObject ***)buf;
      if (*(_QWORD *)v52)
      {
        v25 = (unint64_t *)(*(_QWORD *)v52 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v27 = pthread_self();
        v28 = pthread_mach_thread_np(v27);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v28;
        *(_WORD *)v52 = 2080;
        *(_QWORD *)&v52[2] = "Packetized_Data_Handler.cpp";
        v53 = 1024;
        v54 = 50;
        *(_WORD *)v55 = 2080;
        *(_QWORD *)&v55[2] = "not (size > 0)";
        _os_log_error_impl(&dword_1B57BA000, v24, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v47);
      exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v39);
      std::logic_error::logic_error(&v40, &v39);
      v30 = MEMORY[0x1E0DE5018];
      v40.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v41, &v40);
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v46 = -1;
      v41.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v42 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v41);
      *(_QWORD *)&v55[8] = "AMCP::DAL::Packetized_Data_Handler::Packetized_Data_Handler(const CA::StreamDescription &, Sample_Time)";
      *(_QWORD *)&v55[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_Data_Handler.cpp";
      v56 = 50;
      std::vector<void *>::vector(&v34);
      v31 = backtrace((void **)v34, (*((_QWORD *)&v34 + 1) - (_QWORD)v34) >> 3);
      std::vector<void *>::resize((char **)&v34, v31);
      v37 = v34;
      v38 = v35;
      v34 = 0uLL;
      v35 = 0;
      v36 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v36);
      exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::logic_error::logic_error(exception, (const std::logic_error *)buf);
      exception->__vftable = (std::logic_error_vtbl *)(v30 + 16);
      exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
      v32 = *(_QWORD *)v55;
      exception[1].__imp_.__imp_ = *(const char **)v55;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
      v33 = *(std::logic_error *)&v55[8];
      LODWORD(exception[3].__vftable) = v56;
      exception[2] = v33;
      exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
      exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
      exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
    }
  }
  if (!*MEMORY[0x1E0DDB4F0])
    __break(1u);
  v9 = (_OWORD *)caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0]);
  v10 = v9 + 2;
  *v9 = 0u;
  v9[1] = 0u;
  v12 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  if (v11 == v12)
  {
    v14 = vdupq_n_s64(v11);
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v11 - 16);
      *(v9 - 2) = *(_OWORD *)(v11 - 32);
      *(v9 - 1) = v13;
      v9 -= 2;
      v11 -= 32;
    }
    while (v11 != v12);
    v14 = *v6;
  }
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v10;
  v16 = v14.i64[1];
  v17 = (caulk::rt_safe_memory_resource *)v14.i64[0];
  if (v14.i64[1] != v14.i64[0])
  {
    do
    {
      v18 = (caulk::rt_safe_memory_resource *)(v16 - 32);
      AMCP::DAL::Audio_Samples_Data::~Audio_Samples_Data((AMCP::DAL::Audio_Samples_Data *)(v16 - 24));
      v16 = (uint64_t)v18;
    }
    while (v18 != v17);
  }
  if (v17)
    std::allocator_traits<caulk::rt_allocator<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>>>::deallocate[abi:ne180100](v17, (v15 - (uint64_t)v17) >> 5);
  v19 = *(uint64_t **)(a1 + 64);
  v20 = *(uint64_t **)(a1 + 72);
  while (v19 != v20)
  {
    *v19 = v7;
    v21 = (AMCP::DAL::Audio_Samples_Data *)(v19 + 1);
    AMCP::DAL::Audio_Samples_Data::allocate(v21, v7);
    v19 = (uint64_t *)((char *)v21 + 24);
  }
  return a1;
}

void sub_1B59F5084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  *(_QWORD *)(v35 - 144) = v34;
  std::vector<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>,caulk::rt_allocator<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)(v35 - 144));
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Audio_Samples_Data::Audio_Samples_Data<gsl::details::span_iterator<gsl::span<std::byte,-1l>,false>>(uint64_t result, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 1;
  v3 = *(_QWORD **)a2;
  if (!*(_QWORD *)a2
    || (v4 = *(_QWORD *)(a2 + 8), v4 < 0)
    || *v3 <= v4
    || (*(_QWORD *)result = v3[1] + v4, (_QWORD *)*a3 != v3))
  {
    std::terminate();
  }
  *(_QWORD *)(result + 8) = a3[1] - v4;
  return result;
}

BOOL AllowHALClientsInThisProcess(void)
{
  unsigned __int8 v0;
  _BOOL8 result;
  uint8_t v2[16];

  {
    AllowHALClientsInThisProcess(void)::global = AllowHALClientsInThisProcess(void)::$_0::operator()();
  }
  if (AllowHALClientsInThisProcess(void)::global)
    return 1;
  result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    *(_WORD *)v2 = 0;
    _os_log_error_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Use of the CoreAudio HAL in this process is being denied", v2, 2u);
    return AllowHALClientsInThisProcess(void)::global != 0;
  }
  return result;
}

void sub_1B59F52C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AllowHALClientsInThisProcess(void)::$_0::operator()()
{
  __CFBundle *MainBundle;
  CFStringRef Identifier;
  CFStringRef v2;
  int v3;
  _BOOL8 v4;
  int v6;
  CFStringRef v7;
  __int16 v8;
  _BOOL4 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!_os_feature_enabled_impl())
    return 1;
  MainBundle = CFBundleGetMainBundle();
  if (!MainBundle)
    return 1;
  Identifier = CFBundleGetIdentifier(MainBundle);
  if (!Identifier)
    return 1;
  v2 = Identifier;
  v3 = CFEqual(Identifier, CFSTR("com.apple.mediaserverd"));
  v4 = v3 == 0;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v6 = 138412546;
    v7 = v2;
    v8 = 1024;
    v9 = v3 == 0;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "HAL query bundle %@ -> allowed %d", (uint8_t *)&v6, 0x12u);
  }
  return v4;
}

uint64_t HALS_IOPerformer::update_io_parameters(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, char a5)
{
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void (**v23)(uint64_t *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;

  v10 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v11 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v12 = (*(double (**)(uint64_t *))(*a2 + 152))(a2);
  v13 = (*(double (**)(uint64_t *))(*a2 + 160))(a2);
  if (!(*(unsigned int (**)(uint64_t *))(*a2 + 136))(a2)
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) & 1) != 0)
  {
    v15 = v11 / v13;
    v14 = (v15 * (double)a3);
  }
  else
  {
    v12 = v10;
    v14 = a3;
    v15 = v11 / v11;
  }
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 256))(a2, v14);
  v16 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  (*(void (**)(uint64_t *, double))(*a2 + 232))(a2, v16);
  v17 = 0;
  v18 = (uint64_t)(v15 * (double)a4);
  v19 = 1;
  do
  {
    v20 = v19;
    v21 = *a2;
    if ((a5 & 1) != 0)
    {
      v22 = 0;
      v23 = (void (**)(uint64_t *, uint64_t, uint64_t))(v21 + 240);
    }
    else
    {
      v22 = v18 + (*(unsigned int (**)(uint64_t *, uint64_t))(v21 + 144))(a2, v17);
      v23 = (void (**)(uint64_t *, uint64_t, uint64_t))(*a2 + 248);
    }
    (*v23)(a2, v17, v22);
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 72))(a1, v10);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a2 + 168))(a2, v17))
    {
      v24 = 0;
      do
      {
        v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a2 + 176))(a2, v17, v24);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25)
          && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25))
        {
          (*(void (**)(uint64_t, double, double))(*(_QWORD *)v25 + 32))(v25, v10, v12);
        }
        v24 = (v24 + 1);
      }
      while (v24 < (*(unsigned int (**)(uint64_t *, uint64_t))(*a2 + 168))(a2, v17));
    }
    v26 = (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v17 & 1) != 0;
    (*(void (**)(uint64_t *, uint64_t, _BOOL8, uint64_t, double))(*a2 + 264))(a2, a3, v26, v17, v10 / v12);
    v19 = 0;
    v17 = 1;
  }
  while ((v20 & 1) != 0);
  v27 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v27);
}

uint64_t HALS_IOPerformer::end_io_cycle(HALS_IOPerformer *this, uint64_t a2, HALS_IOEngineInfo *a3)
{
  return (*(uint64_t (**)(uint64_t, HALS_IOPerformer *))(*(_QWORD *)a2 + 40))(a2, this);
}

uint64_t HALS_IOPerformer::begin_reading(HALS_IOPerformer *this, uint64_t a2, HALS_IOEngineInfo *a3)
{
  return (*(uint64_t (**)(uint64_t, HALS_IOPerformer *))(*(_QWORD *)a2 + 48))(a2, this);
}

uint64_t HALS_IOPerformer::end_reading(HALS_IOPerformer *this, uint64_t a2, HALS_IOEngineInfo *a3)
{
  return (*(uint64_t (**)(uint64_t, HALS_IOPerformer *))(*(_QWORD *)a2 + 56))(a2, this);
}

uint64_t HALS_IOPerformer::begin_writing(HALS_IOPerformer *this, uint64_t a2, HALS_IOEngineInfo *a3)
{
  return (*(uint64_t (**)(uint64_t, HALS_IOPerformer *))(*(_QWORD *)a2 + 64))(a2, this);
}

uint64_t HALS_IOPerformer::end_writing(HALS_IOPerformer *this, uint64_t a2, HALS_IOEngineInfo *a3)
{
  return (*(uint64_t (**)(uint64_t, HALS_IOPerformer *))(*(_QWORD *)a2 + 72))(a2, this);
}

void caulk::concurrent::details::rt_message_call<HALS_IOPerformer::process_output_stream_data(IOContextView &,unsigned int,HALS_IOStreamInfo &,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOPerformer::process_output_stream_data(IOContextView &,unsigned int,HALS_IOStreamInfo &,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IOPerformer::process_output_stream_data clipped amount processed from:%u to:%u", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOPerformer::process_output_stream_data(IOContextView &,unsigned int,HALS_IOStreamInfo &,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOPerformer::process_output_stream_data(IOContextView &,unsigned int,HALS_IOStreamInfo &,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

uint64_t HALS_IOPerformer::can_read_from_stream(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  BOOL v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (!*(_DWORD *)(a2 + 108)
    || ((v3 = *(_QWORD **)(a2 + 112), *(_QWORD **)(a2 + 120) != v3) ? (v4 = v3 == 0) : (v4 = 1), v4))
  {
    v3 = (_QWORD *)(a2 + 408);
  }
  v5 = *v3;
  if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v3 + 16))(*v3)
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 200))(v5) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 208))(v5))
  {
    return 0;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v7 = 104;
  if (v6)
    v7 = 96;
  return (*(uint64_t (**)(_QWORD *))(*a1 + v7))(a1);
}

OSStatus AudioHardwareAddRunLoopSource(CFRunLoopSourceRef inRunLoopSource)
{
  uint64_t v2;
  CFRunLoopSourceRef *v3;
  CFRunLoopSourceRef *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  CFRunLoopSourceRef *v15;
  char *v16;
  __CFRunLoopSource *v17;
  __CFRunLoop *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _DWORD *exception;
  _DWORD *v24;
  uint64_t v25[2];
  uint64_t v26;
  std::__shared_weak_count *v27;
  _BYTE buf[12];
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  if (!inRunLoopSource)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_Framework-ios-imp.cpp";
      v29 = 1024;
      v30 = 2568;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioHardwareAddRunLoopSource: can't add a NULL run loop source", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v25[0] = 0;
  v25[1] = 0;
  HALS_System::GetInstance(&v26, 0, v25);
  v2 = v26;
  if (!v26)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_Framework-ios-imp.cpp";
      v29 = 1024;
      v30 = 2572;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioHardwareAddRunLoopSource: no system object", buf, 0x12u);
    }
    v24 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v24 = &off_1E69A1B30;
    v24[2] = 1852797029;
  }
  *(_QWORD *)buf = v26 + 1528;
  *(_DWORD *)&buf[8] = HALB_Mutex::Lock((HALB_Mutex *)(v26 + 1528));
  if (!*(_QWORD *)(v2 + 1520))
    HALS_System::StartRunLoop((HALS_System *)v2);
  v3 = *(CFRunLoopSourceRef **)(v2 + 1808);
  v4 = *(CFRunLoopSourceRef **)(v2 + 1816);
  if (v3 != v4)
  {
    while (*v3 != inRunLoopSource)
    {
      if (++v3 == v4)
      {
        v3 = *(CFRunLoopSourceRef **)(v2 + 1816);
        break;
      }
    }
  }
  if (v3 == v4)
  {
    CFRetain(inRunLoopSource);
    v5 = *(char **)(v2 + 1816);
    v6 = *(_QWORD *)(v2 + 1824);
    if ((unint64_t)v5 >= v6)
    {
      v9 = *(char **)(v2 + 1808);
      v10 = (v5 - v9) >> 3;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v12 = v6 - (_QWORD)v9;
      if (v12 >> 2 > v11)
        v11 = v12 >> 2;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        if (v13 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v14 = (char *)operator new(8 * v13);
        v5 = *(char **)(v2 + 1816);
        v9 = *(char **)(v2 + 1808);
      }
      else
      {
        v14 = 0;
      }
      v15 = (CFRunLoopSourceRef *)&v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = inRunLoopSource;
      v7 = v15 + 1;
      if (v5 != v9)
      {
        do
        {
          v17 = (__CFRunLoopSource *)*((_QWORD *)v5 - 1);
          v5 -= 8;
          *--v15 = v17;
        }
        while (v5 != v9);
        v9 = *(char **)(v2 + 1808);
      }
      *(_QWORD *)(v2 + 1808) = v15;
      *(_QWORD *)(v2 + 1816) = v7;
      *(_QWORD *)(v2 + 1824) = v16;
      if (v9)
        operator delete(v9);
    }
    else
    {
      *(_QWORD *)v5 = inRunLoopSource;
      v7 = v5 + 8;
    }
    *(_QWORD *)(v2 + 1816) = v7;
    v18 = *(__CFRunLoop **)(v2 + 1520);
    if (v18)
    {
      CFRunLoopAddSource(v18, inRunLoopSource, (CFRunLoopMode)*MEMORY[0x1E0C9B278]);
      CFRunLoopAddSource(*(CFRunLoopRef *)(v2 + 1520), inRunLoopSource, CFSTR("com.apple.audio.CoreAudio"));
    }
  }
  HALB_Guard::Locker::~Locker((HALB_Mutex **)buf);
  v19 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return 0;
}

void sub_1B59F5CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B59F5B3CLL);
  }
  _Unwind_Resume(exception_object);
}

OSStatus AudioHardwareRemoveRunLoopSource(CFRunLoopSourceRef inRunLoopSource)
{
  uint64_t v2;
  CFRunLoopSourceRef *v3;
  CFRunLoopSourceRef *v4;
  int64_t v5;
  __CFRunLoop *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _DWORD *exception;
  _DWORD *v13;
  uint64_t v14[2];
  uint64_t v15;
  std::__shared_weak_count *v16;
  _BYTE buf[12];
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  if (!inRunLoopSource)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_Framework-ios-imp.cpp";
      v18 = 1024;
      v19 = 2614;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioHardwareRemoveRunLoopSource: can't remove a NULL run loop source", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v14[0] = 0;
  v14[1] = 0;
  HALS_System::GetInstance(&v15, 0, v14);
  v2 = v15;
  if (!v15)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_Framework-ios-imp.cpp";
      v18 = 1024;
      v19 = 2618;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioHardwareRemoveRunLoopSource: no system object", buf, 0x12u);
    }
    v13 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v13 = &off_1E69A1B30;
    v13[2] = 1852797029;
  }
  *(_QWORD *)buf = v15 + 1528;
  *(_DWORD *)&buf[8] = HALB_Mutex::Lock((HALB_Mutex *)(v15 + 1528));
  v3 = *(CFRunLoopSourceRef **)(v2 + 1808);
  v4 = *(CFRunLoopSourceRef **)(v2 + 1816);
  if (v3 != v4)
  {
    while (*v3 != inRunLoopSource)
    {
      if (++v3 == v4)
      {
        v3 = *(CFRunLoopSourceRef **)(v2 + 1816);
        break;
      }
    }
  }
  if (v3 != v4)
  {
    v5 = (char *)v4 - (char *)(v3 + 1);
    if (v4 != v3 + 1)
      memmove(v3, v3 + 1, (char *)v4 - (char *)(v3 + 1));
    *(_QWORD *)(v2 + 1816) = (char *)v3 + v5;
    CFRelease(inRunLoopSource);
    v6 = *(__CFRunLoop **)(v2 + 1520);
    if (v6)
    {
      CFRunLoopRemoveSource(v6, inRunLoopSource, (CFRunLoopMode)*MEMORY[0x1E0C9B278]);
      CFRunLoopRemoveSource(*(CFRunLoopRef *)(v2 + 1520), inRunLoopSource, CFSTR("com.apple.audio.CoreAudio"));
    }
  }
  HALB_Guard::Locker::~Locker((HALB_Mutex **)buf);
  v7 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return 0;
}

void sub_1B59F5FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B59F5E7CLL);
  }
  _Unwind_Resume(exception_object);
}

OSStatus AudioHardwareGetPropertyInfo(AudioHardwarePropertyID inPropertyID, UInt32 *outSize, Boolean *outWritable)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  OSStatus result;
  AudioObjectPropertyAddress inAddress;
  uint64_t v11;
  std::__shared_weak_count *v12;

  if (!AllowHALClientsInThisProcess())
    return 560033144;
  HALS_System::StartServer(&v11, 0);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  inAddress.mSelector = inPropertyID;
  *(_QWORD *)&inAddress.mScope = 1735159650;
  if (AudioObjectHasProperty(1u, &inAddress))
  {
    if (outSize)
    {
      result = AudioObjectGetPropertyDataSize(1u, &inAddress, 0, 0, outSize);
      if (!outWritable)
        goto LABEL_16;
    }
    else
    {
      result = 0;
      if (!outWritable)
        goto LABEL_16;
    }
    if (!result)
      result = AudioObjectIsPropertySettable(1u, &inAddress, outWritable);
LABEL_16:
    if (!result)
      return result;
    goto LABEL_17;
  }
  result = 2003332927;
LABEL_17:
  if (outSize)
    *outSize = 0;
  if (outWritable)
    *outWritable = 0;
  return result;
}

void sub_1B59F6180(void *a1, int a2)
{
  _BYTE *v2;
  _DWORD *v3;

  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v3)
      *v3 = 0;
    if (v2)
      *v2 = 0;
  }
  else
  {
    if (v3)
      *v3 = 0;
    if (v2)
      *v2 = 0;
  }
  __cxa_end_catch();
  JUMPOUT(0x1B59F616CLL);
}

OSStatus AudioHardwareGetProperty(AudioHardwarePropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  AudioObjectPropertyAddress inAddress;
  uint64_t v12;
  std::__shared_weak_count *v13;

  if (!AllowHALClientsInThisProcess())
    return 560033144;
  HALS_System::StartServer(&v12, 0);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  inAddress.mSelector = inPropertyID;
  *(_QWORD *)&inAddress.mScope = 1735159650;
  return AudioObjectGetPropertyData(1u, &inAddress, 0, 0, ioPropertyDataSize, outPropertyData);
}

void sub_1B59F6290(void *a1, int a2)
{
  _DWORD *v2;
  void *v3;

  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v2)
    {
      if (v3)
        bzero(v3, *v2);
      *v2 = 0;
    }
  }
  else if (v2)
  {
    if (v3)
      bzero(v3, *v2);
    *v2 = 0;
  }
  __cxa_end_catch();
  JUMPOUT(0x1B59F6278);
}

OSStatus AudioHardwareSetProperty(AudioHardwarePropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  AudioObjectPropertyAddress inAddress;
  uint64_t v12;
  std::__shared_weak_count *v13;

  if (!AllowHALClientsInThisProcess())
    return 560033144;
  HALS_System::StartServer(&v12, 0);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  inAddress.mSelector = inPropertyID;
  *(_QWORD *)&inAddress.mScope = 1735159650;
  return AudioObjectSetPropertyData(1u, &inAddress, 0, 0, inPropertyDataSize, inPropertyData);
}

void sub_1B59F63AC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B59F6394);
}

OSStatus AudioHardwareAddPropertyListener(AudioHardwarePropertyID inPropertyID, AudioHardwarePropertyListenerProc inProc, void *inClientData)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _DWORD *exception;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  AudioHardwarePropertyListenerProc v20;
  void *v21;
  AudioHardwarePropertyID v22;
  uint64_t v23;
  uint64_t v24[2];
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  HALS_System::StartServer(&v27, 0);
  v6 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (!inProc)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v30 = "HALS_Framework-ios-imp.cpp";
      v31 = 1024;
      v32 = 2875;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioHardwareAddPropertyListener: can't add a NULL listener proc", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v24[0] = 0;
  v24[1] = 0;
  HALS_System::GetInstance(&v25, 0, v24);
  if (!v25)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v30 = "HALS_Framework-ios-imp.cpp";
      v31 = 1024;
      v32 = 2879;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioHardwareAddPropertyListener: no system object", buf, 0x12u);
    }
    v15 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v15 = &off_1E69A1B30;
    v15[2] = 1852797029;
  }
  v22 = inPropertyID;
  v23 = 1735159650;
  v16 = 4;
  v18 = 0;
  v17 = 0;
  v19 = 0;
  v20 = inProc;
  v21 = inClientData;
  buf[0] = 0;
  v33 = 0;
  HALS_NotificationManager::AddPropertyListener((uint64_t)&v16, 1u, (char *)&v22, (uint64_t)buf);
  if (v33)
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf);
  HALS_Listener::~HALS_Listener((HALS_Listener *)&v16);
  v9 = v26;
  if (v26)
  {
    v10 = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 0;
}

void sub_1B59F668C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a2)
  {
    if (a63)
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a23);
    HALS_Listener::~HALS_Listener((HALS_Listener *)&a10);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B59F651CLL);
  }
  _Unwind_Resume(exception_object);
}

OSStatus AudioHardwareRemovePropertyListener(AudioHardwarePropertyID inPropertyID, AudioHardwarePropertyListenerProc inProc)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unsigned int v7;
  const AudioObjectPropertyAddress *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _DWORD *exception;
  _DWORD *v15;
  AudioHardwarePropertyID v16;
  uint64_t v17;
  uint64_t v18[2];
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint8_t buf[4];
  const char *v24;
  uint64_t v25;
  int v26;
  AudioHardwarePropertyListenerProc v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  HALS_System::StartServer(&v21, 0);
  v4 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (!inProc)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v24 = "HALS_Framework-ios-imp.cpp";
      LOWORD(v25) = 1024;
      *(_DWORD *)((char *)&v25 + 2) = 2923;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioHardwareRemovePropertyListener: can't remove a NULL listener proc", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v18[0] = 0;
  v18[1] = 0;
  HALS_System::GetInstance(&v19, 0, v18);
  if (!v19)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v24 = "HALS_Framework-ios-imp.cpp";
      LOWORD(v25) = 1024;
      *(_DWORD *)((char *)&v25 + 2) = 2927;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioHardwareRemovePropertyListener: no system object", buf, 0x12u);
    }
    v15 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v15 = &off_1E69A1B30;
    v15[2] = 1852797029;
  }
  v16 = inPropertyID;
  v17 = 1735159650;
  *(_DWORD *)buf = 4;
  v25 = 0;
  v24 = 0;
  v26 = 0;
  v27 = inProc;
  v28 = 0;
  HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)buf, (const HALS_Listener *)1, &v16, v7, v8);
  HALS_Listener::~HALS_Listener((HALS_Listener *)buf);
  v9 = v20;
  if (v20)
  {
    v10 = (unint64_t *)&v20->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 0;
}

void sub_1B59F69B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
  {
    HALS_Listener::~HALS_Listener((HALS_Listener *)&a17);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B59F6844);
  }
  _Unwind_Resume(exception_object);
}

OSStatus AudioDeviceAddIOProc(AudioDeviceID inDevice, AudioDeviceIOProc inProc, void *inClientData)
{
  HALS_ObjectMap *v5;
  HALS_ObjectMap *v6;
  HALS_Object *v7;
  HALS_ObjectMap *v8;
  int v9;
  int v10;
  int v11;
  HALS_Object *v13;
  int v15;
  _DWORD *v16;
  _DWORD *exception;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v5 = *(HALS_ObjectMap **)&inDevice;
  v22 = *MEMORY[0x1E0C80C00];
  if (AllowHALClientsInThisProcess())
  {
    if (!inProc)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v18 = 136315394;
        v19 = "HALS_Framework-ios-imp.cpp";
        v20 = 1024;
        v21 = 2967;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceAddIOProc: can't add a NULL IOProc", (uint8_t *)&v18, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    v6 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v5);
    v8 = v6;
    if (v6)
    {
      v10 = *((_DWORD *)v6 + 5);
      v9 = *((_DWORD *)v6 + 6);
      if (v10 <= 1701078389)
      {
        if (v10 == 1633773415)
        {
LABEL_12:
          (*(void (**)(HALS_ObjectMap *, AudioDeviceIOProc, void *))(*(_QWORD *)v6 + 864))(v6, inProc, inClientData);
          HALS_ObjectMap::ReleaseObject(v8, v13);
          return 0;
        }
        v11 = 1633969526;
      }
      else
      {
        if (v10 == 1701078390 || v10 == 1701733488)
          goto LABEL_12;
        v11 = 1919182198;
      }
      if (v10 == v11)
        goto LABEL_12;
      if (v10 != v9)
      {
        if (v9 <= 1701078389)
        {
          if (v9 == 1633773415)
            goto LABEL_12;
          v15 = 1633969526;
        }
        else
        {
          if (v9 == 1701078390 || v9 == 1701733488)
            goto LABEL_12;
          v15 = 1919182198;
        }
        if (v9 == v15)
          goto LABEL_12;
      }
      HALS_ObjectMap::ReleaseObject(v6, v7);
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v18 = 136315394;
      v19 = "HALS_Framework-ios-imp.cpp";
      v20 = 1024;
      v21 = 2971;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceAddIOProc: no device with given ID", (uint8_t *)&v18, 0x12u);
    }
    v16 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v16 = &off_1E69A1B30;
    v16[2] = 560227702;
  }
  return 560033144;
}

void sub_1B59F6CF0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B59F6D08(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B59F6B14);
  }
  JUMPOUT(0x1B59F6CF8);
}

void sub_1B59F6D68()
{
  JUMPOUT(0x1B59F6CF8);
}

OSStatus AudioDeviceRemoveIOProc(AudioDeviceID inDevice, AudioDeviceIOProc inProc)
{
  HALS_ObjectMap *v3;
  HALS_ObjectMap *v4;
  HALS_Object *v5;
  HALS_ObjectMap *v6;
  int v7;
  int v8;
  int v9;
  HALS_Object *v11;
  int v13;
  _DWORD *v14;
  _DWORD *exception;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v3 = *(HALS_ObjectMap **)&inDevice;
  v20 = *MEMORY[0x1E0C80C00];
  if (AllowHALClientsInThisProcess())
  {
    if (!inProc)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v16 = 136315394;
        v17 = "HALS_Framework-ios-imp.cpp";
        v18 = 1024;
        v19 = 3010;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceRemoveIOProc: can't remove a NULL IOProc", (uint8_t *)&v16, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    v4 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v3);
    v6 = v4;
    if (v4)
    {
      v8 = *((_DWORD *)v4 + 5);
      v7 = *((_DWORD *)v4 + 6);
      if (v8 <= 1701078389)
      {
        if (v8 == 1633773415)
        {
LABEL_12:
          (*(void (**)(HALS_ObjectMap *, AudioDeviceIOProc))(*(_QWORD *)v4 + 872))(v4, inProc);
          HALS_ObjectMap::ReleaseObject(v6, v11);
          return 0;
        }
        v9 = 1633969526;
      }
      else
      {
        if (v8 == 1701078390 || v8 == 1701733488)
          goto LABEL_12;
        v9 = 1919182198;
      }
      if (v8 == v9)
        goto LABEL_12;
      if (v8 != v7)
      {
        if (v7 <= 1701078389)
        {
          if (v7 == 1633773415)
            goto LABEL_12;
          v13 = 1633969526;
        }
        else
        {
          if (v7 == 1701078390 || v7 == 1701733488)
            goto LABEL_12;
          v13 = 1919182198;
        }
        if (v7 == v13)
          goto LABEL_12;
      }
      HALS_ObjectMap::ReleaseObject(v4, v5);
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v16 = 136315394;
      v17 = "HALS_Framework-ios-imp.cpp";
      v18 = 1024;
      v19 = 3014;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceAddIOProc: no device with given ID", (uint8_t *)&v16, 0x12u);
    }
    v14 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v14 = &off_1E69A1B30;
    v14[2] = 560227702;
  }
  return 560033144;
}

void sub_1B59F7020(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B59F7038(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B59F6E44);
  }
  JUMPOUT(0x1B59F7028);
}

void sub_1B59F7098()
{
  JUMPOUT(0x1B59F7028);
}

OSStatus AudioDeviceRead(AudioDeviceID inDevice, const AudioTimeStamp *inStartTime, AudioBufferList *outData)
{
  return 1970171760;
}

OSStatus AudioDeviceGetPropertyInfo(AudioDeviceID inDevice, UInt32 inChannel, Boolean isInput, AudioDevicePropertyID inPropertyID, UInt32 *outSize, Boolean *outWritable)
{
  int v9;
  AudioObjectPropertyScope v12;
  const AudioObjectPropertyAddress *v13;
  OSStatus result;
  AudioObjectPropertyAddress *p_inAddress;
  AudioObjectPropertyAddress v16;
  AudioObjectPropertyAddress inAddress;

  v9 = isInput;
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  if (v9)
    v12 = 1768845428;
  else
    v12 = 1869968496;
  inAddress.mSelector = inPropertyID;
  inAddress.mScope = v12;
  inAddress.mElement = inChannel;
  v16.mSelector = inPropertyID;
  v16.mScope = 1735159650;
  v16.mElement = inChannel;
  if (AudioObjectHasProperty(inDevice, &inAddress))
  {
    if (outSize)
    {
      result = AudioObjectGetPropertyDataSize(inDevice, &inAddress, 0, 0, outSize);
      if (!outWritable)
        return result;
    }
    else
    {
      result = 0;
      if (!outWritable)
        return result;
    }
    if (!result)
    {
      p_inAddress = &inAddress;
      return AudioObjectIsPropertySettable(inDevice, p_inAddress, outWritable);
    }
  }
  else if (HALB_Info::IsReallyGlobalDeviceProperty((HALB_Info *)inAddress.mSelector, v13)
         && AudioObjectHasProperty(inDevice, &v16))
  {
    if (outSize)
    {
      result = AudioObjectGetPropertyDataSize(inDevice, &v16, 0, 0, outSize);
      if (!outWritable)
        return result;
    }
    else
    {
      result = 0;
      if (!outWritable)
        return result;
    }
    if (!result)
    {
      p_inAddress = &v16;
      return AudioObjectIsPropertySettable(inDevice, p_inAddress, outWritable);
    }
  }
  else
  {
    if (outSize)
      *outSize = 0;
    result = 2003332927;
    if (outWritable)
      *outWritable = 0;
  }
  return result;
}

void sub_1B59F71F8(void *a1, int a2)
{
  _BYTE *v2;
  _DWORD *v3;

  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v3)
      *v3 = 0;
    if (v2)
      *v2 = 0;
  }
  else
  {
    if (v3)
      *v3 = 0;
    if (v2)
      *v2 = 0;
  }
  __cxa_end_catch();
  JUMPOUT(0x1B59F71CCLL);
}

OSStatus AudioDeviceGetProperty(AudioDeviceID inDevice, UInt32 inChannel, Boolean isInput, AudioDevicePropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  int v9;
  AudioObjectPropertyScope v12;
  const AudioObjectPropertyAddress *v13;
  AudioObjectPropertyAddress *p_inAddress;
  OSStatus v15;
  AudioObjectPropertyAddress v17;
  AudioObjectPropertyAddress inAddress;

  v9 = isInput;
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  if (v9)
    v12 = 1768845428;
  else
    v12 = 1869968496;
  inAddress.mSelector = inPropertyID;
  inAddress.mScope = v12;
  inAddress.mElement = inChannel;
  v17.mSelector = inPropertyID;
  v17.mScope = 1735159650;
  v17.mElement = inChannel;
  if (AudioObjectHasProperty(inDevice, &inAddress))
  {
    p_inAddress = &inAddress;
    return AudioObjectGetPropertyData(inDevice, p_inAddress, 0, 0, ioPropertyDataSize, outPropertyData);
  }
  if (HALB_Info::IsReallyGlobalDeviceProperty((HALB_Info *)inAddress.mSelector, v13)
    && AudioObjectHasProperty(inDevice, &v17))
  {
    p_inAddress = &v17;
    return AudioObjectGetPropertyData(inDevice, p_inAddress, 0, 0, ioPropertyDataSize, outPropertyData);
  }
  v15 = 2003332927;
  if (ioPropertyDataSize)
  {
    if (outPropertyData)
      bzero(outPropertyData, *ioPropertyDataSize);
    *ioPropertyDataSize = 0;
  }
  return v15;
}

void sub_1B59F7354(void *a1, int a2)
{
  _DWORD *v2;
  void *v3;

  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v2)
    {
      if (v3)
        bzero(v3, *v2);
      *v2 = 0;
    }
  }
  else if (v2)
  {
    if (v3)
      bzero(v3, *v2);
    *v2 = 0;
  }
  __cxa_end_catch();
  JUMPOUT(0x1B59F72F0);
}

OSStatus AudioDeviceSetProperty(AudioDeviceID inDevice, const AudioTimeStamp *inWhen, UInt32 inChannel, Boolean isInput, AudioDevicePropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  int v10;
  AudioObjectPropertyScope v13;
  const AudioObjectPropertyAddress *v14;
  AudioObjectPropertyAddress *p_inAddress;
  OSStatus v16;
  AudioObjectPropertyAddress v18;
  AudioObjectPropertyAddress inAddress;

  v10 = isInput;
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  if (v10)
    v13 = 1768845428;
  else
    v13 = 1869968496;
  inAddress.mSelector = inPropertyID;
  inAddress.mScope = v13;
  inAddress.mElement = inChannel;
  v18.mSelector = inPropertyID;
  v18.mScope = 1735159650;
  v18.mElement = inChannel;
  if (AudioObjectHasProperty(inDevice, &inAddress))
  {
    p_inAddress = &inAddress;
    return AudioObjectSetPropertyData(inDevice, p_inAddress, 0, 0, inPropertyDataSize, inPropertyData);
  }
  v16 = 2003332927;
  if (HALB_Info::IsReallyGlobalDeviceProperty((HALB_Info *)inAddress.mSelector, v14)
    && AudioObjectHasProperty(inDevice, &v18))
  {
    p_inAddress = &v18;
    return AudioObjectSetPropertyData(inDevice, p_inAddress, 0, 0, inPropertyDataSize, inPropertyData);
  }
  return v16;
}

void sub_1B59F74A0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B59F7458);
}

OSStatus AudioDeviceAddPropertyListener(AudioDeviceID inDevice, UInt32 inChannel, Boolean isInput, AudioDevicePropertyID inPropertyID, AudioDevicePropertyListenerProc inProc, void *inClientData)
{
  HALB_Info *v8;
  int v9;
  HALS_ObjectMap *v11;
  HALS_Device *v12;
  HALS_Object *v13;
  HALS_Device *v14;
  int v15;
  int v16;
  int v17;
  int v19;
  const AudioObjectPropertyAddress *v20;
  unsigned int InternalIOContextID;
  unsigned int v22;
  HALS_Object *v23;
  int v25;
  _DWORD *v26;
  _DWORD *exception;
  _DWORD v28[3];
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  AudioDevicePropertyListenerProc v33;
  void *v34;
  _DWORD v35[3];
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  int v39;
  char v40;
  uint64_t v41;

  v8 = *(HALB_Info **)&inPropertyID;
  v9 = isInput;
  v11 = *(HALS_ObjectMap **)&inDevice;
  v41 = *MEMORY[0x1E0C80C00];
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  if (!inProc)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v37 = "HALS_Framework-ios-imp.cpp";
      v38 = 1024;
      v39 = 3335;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceAddPropertyListener: can't add a NULL listener proc", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v12 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID(v11);
  v14 = v12;
  if (!v12)
  {
LABEL_35:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v37 = "HALS_Framework-ios-imp.cpp";
      v38 = 1024;
      v39 = 3339;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceAddPropertyListener: no device with given ID", buf, 0x12u);
    }
    v26 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v26 = &off_1E69A1B30;
    v26[2] = 560947818;
  }
  v16 = *((_DWORD *)v12 + 5);
  v15 = *((_DWORD *)v12 + 6);
  if (v16 <= 1701078389)
  {
    if (v16 == 1633773415)
      goto LABEL_12;
    v17 = 1633969526;
  }
  else
  {
    if (v16 == 1701078390 || v16 == 1701733488)
      goto LABEL_12;
    v17 = 1919182198;
  }
  if (v16 == v17)
    goto LABEL_12;
  if (v16 == v15)
    goto LABEL_34;
  if (v15 <= 1701078389)
  {
    if (v15 == 1633773415)
      goto LABEL_12;
    v25 = 1633969526;
    goto LABEL_33;
  }
  if (v15 != 1701078390 && v15 != 1701733488)
  {
    v25 = 1919182198;
LABEL_33:
    if (v15 == v25)
      goto LABEL_12;
LABEL_34:
    HALS_ObjectMap::ReleaseObject(v12, v13);
    goto LABEL_35;
  }
LABEL_12:
  if (v9)
    v19 = 1768845428;
  else
    v19 = 1869968496;
  v35[0] = (_DWORD)v8;
  v35[1] = v19;
  v35[2] = inChannel;
  if ((HALB_Info::IsReallyGlobalDeviceProperty(v8, (const AudioObjectPropertyAddress *)v13) & 1) != 0)
  {
    v28[0] = (_DWORD)v8;
    v28[1] = 1735159650;
    v28[2] = inChannel;
    if (HALB_Info::IsIOContextProperty(v8, v20))
    {
      InternalIOContextID = HALS_Device::GetInternalIOContextID(v14);
      v29 = 5;
      v31 = 0;
      v30 = 0;
      v32 = 0;
      v33 = inProc;
      v34 = inClientData;
      buf[0] = 0;
      v40 = 0;
      HALS_NotificationManager::AddPropertyListener((uint64_t)&v29, InternalIOContextID, (char *)v28, (uint64_t)buf);
    }
    else
    {
      v29 = 5;
      v31 = 0;
      v30 = 0;
      v32 = 0;
      v33 = inProc;
      v34 = inClientData;
      buf[0] = 0;
      v40 = 0;
      HALS_NotificationManager::AddPropertyListener((uint64_t)&v29, v11, (char *)v28, (uint64_t)buf);
    }
  }
  else if (HALB_Info::IsIOContextProperty(v8, v20))
  {
    v22 = HALS_Device::GetInternalIOContextID(v14);
    v29 = 5;
    v31 = 0;
    v30 = 0;
    v32 = 0;
    v33 = inProc;
    v34 = inClientData;
    buf[0] = 0;
    v40 = 0;
    HALS_NotificationManager::AddPropertyListener((uint64_t)&v29, v22, (char *)v35, (uint64_t)buf);
  }
  else
  {
    v29 = 5;
    v31 = 0;
    v30 = 0;
    v32 = 0;
    v33 = inProc;
    v34 = inClientData;
    buf[0] = 0;
    v40 = 0;
    HALS_NotificationManager::AddPropertyListener((uint64_t)&v29, v11, (char *)v35, (uint64_t)buf);
  }
  if (v40)
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf);
  HALS_Listener::~HALS_Listener((HALS_Listener *)&v29);
  HALS_ObjectMap::ReleaseObject(v14, v23);
  return 0;
}

void sub_1B59F78E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  HALS_ObjectMap *v59;
  HALS_Object *v61;

  if (a2)
  {
    if (a59)
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a19);
    HALS_Listener::~HALS_Listener((HALS_Listener *)&a12);
    HALS_ObjectMap::ReleaseObject(v59, v61);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B59F7700);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B59F79A4()
{
  JUMPOUT(0x1B59F7930);
}

OSStatus AudioDeviceRemovePropertyListener(AudioDeviceID inDevice, UInt32 inChannel, Boolean isInput, AudioDevicePropertyID inPropertyID, AudioDevicePropertyListenerProc inProc)
{
  HALB_Info *v6;
  int v7;
  HALS_ObjectMap *v9;
  HALS_Device *v10;
  HALS_Object *v11;
  HALS_Device *v12;
  int v13;
  int v14;
  int v15;
  int v17;
  const AudioObjectPropertyAddress *v18;
  unsigned int v19;
  const AudioObjectPropertyAddress *v20;
  const HALS_Listener *InternalIOContextID;
  unsigned int v22;
  const AudioObjectPropertyAddress *v23;
  unsigned int v24;
  const AudioObjectPropertyAddress *v25;
  const HALS_Listener *v26;
  unsigned int v27;
  const AudioObjectPropertyAddress *v28;
  HALS_Object *v29;
  int v31;
  _DWORD *v32;
  _DWORD *exception;
  _DWORD v34[3];
  _DWORD v35[3];
  uint8_t buf[4];
  const char *v37;
  uint64_t v38;
  int v39;
  AudioDevicePropertyListenerProc v40;
  uint64_t v41;
  uint64_t v42;

  v6 = *(HALB_Info **)&inPropertyID;
  v7 = isInput;
  v9 = *(HALS_ObjectMap **)&inDevice;
  v42 = *MEMORY[0x1E0C80C00];
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  if (!inProc)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v37 = "HALS_Framework-ios-imp.cpp";
      LOWORD(v38) = 1024;
      *(_DWORD *)((char *)&v38 + 2) = 3407;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceRemovePropertyListener: can't remove a NULL listener proc", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v10 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID(v9);
  v12 = v10;
  if (!v10)
  {
LABEL_33:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v37 = "HALS_Framework-ios-imp.cpp";
      LOWORD(v38) = 1024;
      *(_DWORD *)((char *)&v38 + 2) = 3411;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceRemovePropertyListener: no device with given ID", buf, 0x12u);
    }
    v32 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v32 = &off_1E69A1B30;
    v32[2] = 560947818;
  }
  v14 = *((_DWORD *)v10 + 5);
  v13 = *((_DWORD *)v10 + 6);
  if (v14 <= 1701078389)
  {
    if (v14 == 1633773415)
      goto LABEL_12;
    v15 = 1633969526;
  }
  else
  {
    if (v14 == 1701078390 || v14 == 1701733488)
      goto LABEL_12;
    v15 = 1919182198;
  }
  if (v14 == v15)
    goto LABEL_12;
  if (v14 == v13)
    goto LABEL_32;
  if (v13 <= 1701078389)
  {
    if (v13 == 1633773415)
      goto LABEL_12;
    v31 = 1633969526;
    goto LABEL_31;
  }
  if (v13 != 1701078390 && v13 != 1701733488)
  {
    v31 = 1919182198;
LABEL_31:
    if (v13 == v31)
      goto LABEL_12;
LABEL_32:
    HALS_ObjectMap::ReleaseObject(v10, v11);
    goto LABEL_33;
  }
LABEL_12:
  if (v7)
    v17 = 1768845428;
  else
    v17 = 1869968496;
  v35[0] = (_DWORD)v6;
  v35[1] = v17;
  v35[2] = inChannel;
  if ((HALB_Info::IsReallyGlobalDeviceProperty(v6, (const AudioObjectPropertyAddress *)v11) & 1) != 0)
  {
    v34[0] = (_DWORD)v6;
    v34[1] = 1735159650;
    v34[2] = inChannel;
    if (HALB_Info::IsIOContextProperty(v6, v18))
    {
      InternalIOContextID = (const HALS_Listener *)HALS_Device::GetInternalIOContextID(v12);
      *(_DWORD *)buf = 5;
      v38 = 0;
      v37 = 0;
      v39 = 0;
      v40 = inProc;
      v41 = 0;
      HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)buf, InternalIOContextID, v34, v22, v23);
    }
    else
    {
      *(_DWORD *)buf = 5;
      v38 = 0;
      v37 = 0;
      v39 = 0;
      v40 = inProc;
      v41 = 0;
      HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)buf, v9, v34, v19, v20);
    }
  }
  else if (HALB_Info::IsIOContextProperty(v6, v18))
  {
    v26 = (const HALS_Listener *)HALS_Device::GetInternalIOContextID(v12);
    *(_DWORD *)buf = 5;
    v38 = 0;
    v37 = 0;
    v39 = 0;
    v40 = inProc;
    v41 = 0;
    HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)buf, v26, v35, v27, v28);
  }
  else
  {
    *(_DWORD *)buf = 5;
    v38 = 0;
    v37 = 0;
    v39 = 0;
    v40 = inProc;
    v41 = 0;
    HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)buf, v9, v35, v24, v25);
  }
  HALS_Listener::~HALS_Listener((HALS_Listener *)buf);
  HALS_ObjectMap::ReleaseObject(v12, v29);
  return 0;
}

void sub_1B59F7D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  HALS_ObjectMap *v13;
  HALS_Object *v15;

  if (a2)
  {
    HALS_Listener::~HALS_Listener((HALS_Listener *)&a13);
    HALS_ObjectMap::ReleaseObject(v13, v15);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B59F7B94);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B59F7E24()
{
  JUMPOUT(0x1B59F7DB0);
}

OSStatus AudioStreamGetPropertyInfo(AudioStreamID inStream, UInt32 inChannel, AudioDevicePropertyID inPropertyID, UInt32 *outSize, Boolean *outWritable)
{
  OSStatus result;
  AudioObjectPropertyAddress inAddress;

  if (!AllowHALClientsInThisProcess())
    return 560033144;
  inAddress.mSelector = inPropertyID;
  inAddress.mScope = 1735159650;
  inAddress.mElement = inChannel;
  if (AudioObjectHasProperty(1u, &inAddress))
  {
    if (outSize)
    {
      result = AudioObjectGetPropertyDataSize(inStream, &inAddress, 0, 0, outSize);
      if (!outWritable)
        goto LABEL_11;
    }
    else
    {
      result = 0;
      if (!outWritable)
        goto LABEL_11;
    }
    if (!result)
      result = AudioObjectIsPropertySettable(inStream, &inAddress, outWritable);
LABEL_11:
    if (!result)
      return result;
    goto LABEL_12;
  }
  result = 2003332927;
LABEL_12:
  if (outSize)
    *outSize = 0;
  if (outWritable)
    *outWritable = 0;
  return result;
}

void sub_1B59F7F08(void *a1, int a2)
{
  _BYTE *v2;
  _DWORD *v3;

  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v3)
      *v3 = 0;
    if (v2)
      *v2 = 0;
  }
  else
  {
    if (v3)
      *v3 = 0;
    if (v2)
      *v2 = 0;
  }
  __cxa_end_catch();
  JUMPOUT(0x1B59F7EF0);
}

OSStatus AudioStreamGetProperty(AudioStreamID inStream, UInt32 inChannel, AudioDevicePropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  AudioObjectPropertyAddress inAddress;

  if (!AllowHALClientsInThisProcess())
    return 560033144;
  inAddress.mSelector = inPropertyID;
  inAddress.mScope = 1735159650;
  inAddress.mElement = inChannel;
  return AudioObjectGetPropertyData(inStream, &inAddress, 0, 0, ioPropertyDataSize, outPropertyData);
}

void sub_1B59F7FDC(void *a1, int a2)
{
  _DWORD *v2;
  void *v3;

  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v2)
    {
      if (v3)
        bzero(v3, *v2);
      *v2 = 0;
    }
  }
  else if (v2)
  {
    if (v3)
      bzero(v3, *v2);
    *v2 = 0;
  }
  __cxa_end_catch();
  JUMPOUT(0x1B59F7FC4);
}

OSStatus AudioStreamSetProperty(AudioStreamID inStream, const AudioTimeStamp *inWhen, UInt32 inChannel, AudioDevicePropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  AudioObjectPropertyAddress inAddress;

  if (!AllowHALClientsInThisProcess())
    return 560033144;
  inAddress.mSelector = inPropertyID;
  inAddress.mScope = 1735159650;
  inAddress.mElement = inChannel;
  return AudioObjectSetPropertyData(inStream, &inAddress, 0, 0, inPropertyDataSize, inPropertyData);
}

void sub_1B59F80C8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B59F80ACLL);
}

OSStatus AudioStreamAddPropertyListener(AudioStreamID inStream, UInt32 inChannel, AudioDevicePropertyID inPropertyID, AudioStreamPropertyListenerProc inProc, void *inClientData)
{
  HALS_ObjectMap *v9;
  HALS_ObjectMap *v10;
  HALS_Object *v11;
  _DWORD *exception;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  AudioStreamPropertyListenerProc v20;
  void *v21;
  _DWORD v22[3];
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  char v27;
  uint64_t v28;

  v9 = *(HALS_ObjectMap **)&inStream;
  v28 = *MEMORY[0x1E0C80C00];
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  if (!inProc)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v24 = "HALS_Framework-ios-imp.cpp";
      v25 = 1024;
      v26 = 3678;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioStreamAddPropertyListener: can't add a NULL listener proc", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v10 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v9);
  if (!v10)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v24 = "HALS_Framework-ios-imp.cpp";
      v25 = 1024;
      v26 = 3682;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioStreamAddPropertyListener: no stream with given ID", buf, 0x12u);
    }
    v15 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v15 = &off_1E69A1B30;
    v15[2] = 561214578;
  }
  v22[0] = inPropertyID;
  v22[1] = 1735159650;
  v22[2] = inChannel;
  v16 = 6;
  v18 = 0;
  v17 = 0;
  v19 = 0;
  v20 = inProc;
  v21 = inClientData;
  buf[0] = 0;
  v27 = 0;
  HALS_NotificationManager::AddPropertyListener((uint64_t)&v16, v9, (char *)v22, (uint64_t)buf);
  if (v27)
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf);
  HALS_Listener::~HALS_Listener((HALS_Listener *)&v16);
  HALS_ObjectMap::ReleaseObject(v10, v11);
  return 0;
}

void sub_1B59F8338(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B59F8350(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  HALS_ObjectMap *v57;
  HALS_Object *v59;

  if (a2)
  {
    if (a57)
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a17);
    HALS_Listener::~HALS_Listener((HALS_Listener *)&a10);
    HALS_ObjectMap::ReleaseObject(v57, v59);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B59F81C4);
  }
  JUMPOUT(0x1B59F8340);
}

void sub_1B59F83D8()
{
  JUMPOUT(0x1B59F8340);
}

OSStatus AudioStreamRemovePropertyListener(AudioStreamID inStream, UInt32 inChannel, AudioDevicePropertyID inPropertyID, AudioStreamPropertyListenerProc inProc)
{
  HALS_ObjectMap *v7;
  HALS_ObjectMap *v8;
  HALS_Object *v9;
  _DWORD *exception;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  AudioStreamPropertyListenerProc v18;
  uint64_t v19;
  _DWORD v20[3];
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  char v25;
  uint64_t v26;

  v7 = *(HALS_ObjectMap **)&inStream;
  v26 = *MEMORY[0x1E0C80C00];
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  if (!inProc)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v22 = "HALS_Framework-ios-imp.cpp";
      v23 = 1024;
      v24 = 3726;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioStreamRemovePropertyListener: can't remove a NULL listener proc", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v8 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v7);
  if (!v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v22 = "HALS_Framework-ios-imp.cpp";
      v23 = 1024;
      v24 = 3730;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioStreamRemovePropertyListener: no stream with given ID", buf, 0x12u);
    }
    v13 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v13 = &off_1E69A1B30;
    v13[2] = 561214578;
  }
  v20[0] = inPropertyID;
  v20[1] = 1735159650;
  v20[2] = inChannel;
  v14 = 6;
  v16 = 0;
  v15 = 0;
  v17 = 0;
  v18 = inProc;
  v19 = 0;
  buf[0] = 0;
  v25 = 0;
  HALS_NotificationManager::AddPropertyListener((uint64_t)&v14, v7, (char *)v20, (uint64_t)buf);
  if (v25)
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf);
  HALS_Listener::~HALS_Listener((HALS_Listener *)&v14);
  HALS_ObjectMap::ReleaseObject(v8, v9);
  return 0;
}

void sub_1B59F8618(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B59F8630(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  HALS_ObjectMap *v57;
  HALS_Object *v59;

  if (a2)
  {
    if (a57)
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a17);
    HALS_Listener::~HALS_Listener((HALS_Listener *)&a10);
    HALS_ObjectMap::ReleaseObject(v57, v59);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B59F84A8);
  }
  JUMPOUT(0x1B59F8620);
}

void sub_1B59F86B8()
{
  JUMPOUT(0x1B59F8620);
}

void AMCP::Stream::~Stream(AMCP::Stream *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t AMCP::Stream::Stream(uint64_t a1, uint64_t a2, unsigned int a3)
{
  AMCP::Object *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject **v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (AMCP::Object *)AMCP::Object::Object(a1, a2, a3);
  *(_QWORD *)v4 = &off_1E697CC80;
  v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x61737472);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    v7 = *v10;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v10);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      v11 = 2080;
      v12 = "Stream.cpp";
      v13 = 1024;
      v14 = 25;
      v15 = 2080;
      v16 = "constructed_correct_class(k_class_id_stream)";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1B59F8868(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

unint64_t AMCP::Stream::get_direction(AMCP::Stream *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t simple_required;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
    simple_required = AMCP::Core::Core::get_simple_required_property<1935960434u>(v5);
  else
    simple_required = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return simple_required;
}

unint64_t AMCP::Stream::get_starting_channel(AMCP::Stream *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t simple_required;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 1;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 1;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
    simple_required = AMCP::Core::Core::get_simple_required_property<1935894638u>(v5);
  else
    simple_required = 1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return simple_required;
}

BOOL AMCP::Stream::is_reference_stream(AMCP::Stream *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t v6;
  _BOOL8 v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    strcpy(buf, "spatbolg");
    buf[9] = 0;
    LOWORD(v17) = 0;
    v6 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if (!HIDWORD(v6))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v11 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v15 = 4;
        strcpy((char *)__p, "taps");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 2080;
        v17 = "Core.h";
        v18 = 1024;
        v19 = 391;
        v20 = 2080;
        v21 = "optional_value.operator BOOL() == true";
        v22 = 2080;
        v23 = __p;
        v24 = 1024;
        v25 = 1735159650;
        v26 = 1024;
        v27 = 0;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      abort();
    }
    v7 = (_DWORD)v6 != 0;
  }
  else
  {
    v7 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1B59F8BAC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

unint64_t AMCP::Stream::get_terminal_type(AMCP::Stream *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    strcpy(buf, "mretbolg");
    buf[9] = 0;
    LOWORD(v17) = 0;
    v6 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if (!HIDWORD(v6))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v11 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v15 = 4;
        strcpy((char *)__p, "term");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 2080;
        v17 = "Core.h";
        v18 = 1024;
        v19 = 391;
        v20 = 2080;
        v21 = "optional_value.operator BOOL() == true";
        v22 = 2080;
        v23 = __p;
        v24 = 1024;
        v25 = 1735159650;
        v26 = 1024;
        v27 = 0;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      abort();
    }
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1B59F8D8C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

AMCP::Core::Core *AMCP::Stream::get_latency(AMCP::Stream *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  AMCP::Log::Scope_Registry *has_property;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v18;
  _opaque_pthread_t *v19;
  mach_port_t v20;
  void *__p;
  std::__shared_weak_count *v22;
  char v23;
  uint64_t v24;
  int v25;
  uint8_t buf[8];
  __int16 v27;
  char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  _BYTE v32[18];
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    v24 = 0x676C6F62736C7463;
    v25 = 0;
    has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(v5, (const AMCP::Address *)&v24);
    if (!(_DWORD)has_property)
      goto LABEL_27;
    has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&__p, (int8x8_t *)v5, (unsigned int *)&v24);
    v7 = __p;
    if (__p)
    {
      v8 = AMCP::Implementation::get_type_marker<std::function<int ()(void)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8))
      {
        has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Operation::call_function<int>(v7);
        LODWORD(v7) = (_DWORD)has_property;
LABEL_8:
        v9 = 0;
        v10 = v7 & 0xFFFFFF00;
LABEL_15:
        v12 = v22;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        if ((v9 & 1) == 0)
        {
          v5 = (AMCP::Core::Core *)(v10 | v7);
          goto LABEL_22;
        }
LABEL_27:
        AMCP::Log::Scope_Registry::get(has_property);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v18 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v19 = pthread_self();
          v20 = pthread_mach_thread_np(v19);
          v23 = 4;
          strcpy((char *)&__p, "sltc");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v20;
          v27 = 2080;
          v28 = "Core.h";
          v29 = 1024;
          v30 = 391;
          v31 = 2080;
          *(_QWORD *)v32 = "optional_value.operator BOOL() == true";
          *(_WORD *)&v32[8] = 2080;
          *(_QWORD *)&v32[10] = &__p;
          v33 = 1024;
          v34 = 1735159650;
          v35 = 1024;
          v36 = 0;
          _os_log_error_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v23 < 0)
            operator delete(__p);
        }
        abort();
      }
      v11 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
      has_property = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v11);
      if (has_property)
      {
        AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)buf, v7);
        has_property = (AMCP::Log::Scope_Registry *)AMCP::Thing::convert_to<int>((uint64_t)buf);
        LODWORD(v7) = (_DWORD)has_property;
        if (*(_QWORD *)&v32[6])
          has_property = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD, uint8_t *, _QWORD, _QWORD))&v32[6])(0, buf, 0, 0);
        goto LABEL_8;
      }
      LOBYTE(v7) = 0;
    }
    v10 = 0;
    v9 = 1;
    goto LABEL_15;
  }
LABEL_22:
  v15 = (unint64_t *)&v4->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

void sub_1B59F9050(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void AMCP::Stream::get_available_format_list(AMCP::Stream *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      AMCP::Core::Core::get_simple_required_property<1718449187u>(a2, v7);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void AMCP::Stream::get_current_format(AMCP::Stream *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  __n128 simple_required;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      simple_required = AMCP::Core::Core::get_simple_required_property<1718444404u>(a2, v7);
    }
    else
    {
      *(_QWORD *)(a2 + 32) = 0;
      simple_required = 0uLL;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, simple_required);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
}

uint64_t AMCP::Stream::set_current_format(AMCP::Stream *this, const CA::StreamDescription *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  int v22;
  _QWORD v23[4];
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, uint64_t *);
  _QWORD *v25;
  std::__shared_weak_count *v26;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (int8x8_t *)*((_QWORD *)this + 2);
  if (!v7)
    goto LABEL_20;
  v21 = 0x676C6F62666D6174;
  v22 = 0;
  if (!AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v21))
    goto LABEL_20;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v25, v7, (unsigned int *)&v21);
  v8 = v25;
  if (!v25)
    goto LABEL_13;
  v9 = AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
  {
    v12 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v12))
    {
      memset(&v23[1], 0, 24);
      v24 = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
      v13 = operator new();
      v14 = *((_OWORD *)a2 + 1);
      *(_OWORD *)v13 = *(_OWORD *)a2;
      *(_OWORD *)(v13 + 16) = v14;
      *(_QWORD *)(v13 + 32) = *((_QWORD *)a2 + 4);
      v23[0] = v13;
      AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v23);
      if (v24)
        v24(0, (uint64_t)v23, 0, 0);
      goto LABEL_8;
    }
LABEL_13:
    v10 = 1;
    goto LABEL_14;
  }
  AMCP::Core::Operation::call_function<void,CA::StreamDescription const&>(v8, (uint64_t)a2);
LABEL_8:
  v10 = 0;
LABEL_14:
  v15 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if ((v10 & 1) == 0)
  {
    v11 = 1;
    goto LABEL_21;
  }
LABEL_20:
  v11 = 0;
LABEL_21:
  v18 = (unint64_t *)&v6->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v11;
}

void sub_1B59F9364(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v4 - 48);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B59F930CLL);
}

uint64_t AMCP::Core::Operation::call_function<void,CA::StreamDescription const&>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  AMCP::Log::Scope_Registry *v5;
  AMCP::Log::Scope_Registry *v6;
  uint64_t v7;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *exception;
  __int128 v17;
  uint64_t v18;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  std::string v22;
  std::runtime_error v23;
  std::runtime_error v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint8_t buf[8];
  __int16 v32;
  char *v33;
  __int16 v34;
  int v35;
  const char *v36;
  const char *v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>();
  v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v13 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v15;
      v32 = 2080;
      v33 = "Operation.h";
      v34 = 1024;
      v35 = 154;
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v22);
    std::runtime_error::runtime_error(&v23, &v22);
    std::runtime_error::runtime_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v25 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    v36 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const CA::StreamDescription &>]";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v38 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v6 = v5;
  if (!*((_QWORD *)v5 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>(),
        (v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v11;
      v32 = 2080;
      v33 = "Operation.h";
      v34 = 1024;
      v35 = 161;
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    v12 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v22);
    std::runtime_error::runtime_error(&v23, &v22);
    std::runtime_error::runtime_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v25 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    v36 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const CA::StreamDescription &>]";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v38 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v12, (uint64_t)buf);
  }
  v7 = *((_QWORD *)v5 + 3);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

void sub_1B59F9780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[266];
}

uint64_t AMCP::Stream::set_current_format_and_wait(AMCP::Stream *this, const CA::StreamDescription *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  int v22;
  _QWORD v23[4];
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, uint64_t *);
  _QWORD *v25;
  std::__shared_weak_count *v26;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (int8x8_t *)*((_QWORD *)this + 2);
  if (!v7)
    goto LABEL_20;
  v21 = 0x676C6F62666D6174;
  v22 = 0;
  if (!AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v21))
    goto LABEL_20;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v25, v7, (unsigned int *)&v21);
  v8 = v25;
  if (!v25)
    goto LABEL_13;
  v9 = AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
  {
    v12 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v12))
    {
      memset(&v23[1], 0, 24);
      v24 = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
      v13 = operator new();
      v14 = *((_OWORD *)a2 + 1);
      *(_OWORD *)v13 = *(_OWORD *)a2;
      *(_OWORD *)(v13 + 16) = v14;
      *(_QWORD *)(v13 + 32) = *((_QWORD *)a2 + 4);
      v23[0] = v13;
      AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v23);
      if (v24)
        v24(0, (uint64_t)v23, 0, 0);
      goto LABEL_8;
    }
LABEL_13:
    v10 = 1;
    goto LABEL_14;
  }
  AMCP::Core::Operation::call_function<void,CA::StreamDescription const&>(v8, (uint64_t)a2);
LABEL_8:
  v10 = 0;
LABEL_14:
  v15 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if ((v10 & 1) == 0)
  {
    v11 = 1;
    goto LABEL_21;
  }
LABEL_20:
  v11 = 0;
LABEL_21:
  v18 = (unint64_t *)&v6->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v11;
}

void sub_1B59F9B18(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v4 - 48);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B59F9AC0);
}

void AMCP::Stream::make_string_for_asbd(AMCP::Stream *this@<X0>, const CA::StreamDescription *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>, int16x8_t a5@<Q0>)
{
  int v5;
  unsigned int v8;
  int v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const std::string::value_type *v13;
  int v14;
  char *v15;
  int32x4_t v16;
  uint32x4_t v17;
  char v18;
  int v19;
  size_t v20;
  const char *v21;
  unint64_t v22;
  std::string *v23;
  void **v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type size;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::string::size_type v41;
  const std::string::value_type *v42;
  std::string *v43;
  __int128 v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  std::string::size_type v49;
  const std::string::value_type *v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  std::string::size_type v61;
  const std::string::value_type *v62;
  std::string *v63;
  __int128 v64;
  std::string::size_type v65;
  int v66;
  size_t v67;
  const char *v68;
  unint64_t v69;
  std::string *v70;
  void **v71;
  const std::string::value_type *v72;
  std::string::size_type v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  const std::string::value_type *v78;
  std::string::size_type v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  std::string::size_type v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  __int128 v89;
  const std::string::value_type *v90;
  std::string::size_type v91;
  std::string *v92;
  __int128 v93;
  std::string::size_type v94;
  const std::string::value_type *v95;
  std::string *v96;
  __int128 v97;
  std::string *v98;
  std::string::size_type v99;
  std::string *v100;
  __int128 v101;
  std::string::size_type v102;
  const std::string::value_type *v103;
  std::string::size_type v104;
  std::string *v105;
  __int128 v106;
  const std::string::value_type *v107;
  std::string::size_type v108;
  std::string *v109;
  __int128 v110;
  std::string::size_type v111;
  BOOL v112;
  _BOOL4 v113;
  const std::string::value_type *v114;
  std::string *v115;
  __int128 v116;
  std::string::size_type v117;
  const std::string::value_type *v118;
  std::string::size_type v119;
  std::string *v120;
  __int128 v121;
  std::string::size_type v122;
  const std::string::value_type *v123;
  std::string::size_type v124;
  std::string *v125;
  __int128 v126;
  void *v127;
  std::string *v128;
  std::string::size_type v129;
  std::string *v130;
  __int128 v131;
  std::string::size_type v132;
  const std::string::value_type *p_p;
  std::string::size_type v134;
  std::string *v135;
  __int128 v136;
  void *__p;
  std::string::size_type v138;
  unsigned __int8 v139;
  std::string v140;
  void *v141;
  std::string::size_type v142;
  unsigned __int8 v143;
  std::string v144;
  std::string v145;
  std::string v146;
  std::string v147;
  std::string v148;
  std::string v149;
  std::string v150;
  std::string v151;
  std::string v152;
  std::string v153;
  std::string v154;
  std::string v155;
  std::string v156;
  std::string v157;
  std::string::value_type *v158;
  std::string::size_type v159;
  uint64_t v160;
  std::string::value_type *v161;
  std::string::size_type v162;
  uint64_t v163;
  std::string v164;
  std::string::value_type *v165;
  std::string::size_type v166;
  uint64_t v167;
  void **v168;
  size_t v169;
  uint64_t v170;

  v5 = (int)a2;
  v168 = 0;
  v169 = 0;
  v170 = 0;
  if (a3)
    caulk::make_string((caulk *)"%.0f", (uint64_t)&v168, *(_QWORD *)this);
  v8 = *((_DWORD *)this + 2);
  if (v8 == 1633889587)
  {
    v15 = "AC-3";
LABEL_24:
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a4, v15);
    goto LABEL_288;
  }
  if (v8 == 1667326771)
  {
    v15 = "AC-3 for SPDIF";
    goto LABEL_24;
  }
  if (v8 != 1819304813)
  {
    a5.i32[0] = bswap32(v8);
    *(int8x8_t *)a5.i8 = vzip1_s8(*(int8x8_t *)a5.i8, *(int8x8_t *)a5.i8);
    v16.i64[0] = 0x1F0000001FLL;
    v16.i64[1] = 0x1F0000001FLL;
    v17.i64[0] = 0x5F0000005FLL;
    v17.i64[1] = 0x5F0000005FLL;
    *(int8x8_t *)a5.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v17, (uint32x4_t)vsraq_n_s32(v16, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a5.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a5.i8, (int8x8_t)0x2E002E002E002ELL);
    *(_BYTE *)(a4 + 23) = 4;
    *(_DWORD *)a4 = vmovn_s16(a5).u32[0];
    *(_BYTE *)(a4 + 4) = 0;
    goto LABEL_288;
  }
  v165 = 0;
  v166 = 0;
  v167 = 0;
  v9 = *((_DWORD *)this + 3);
  if ((v9 & 2) != 0)
  {
    HIBYTE(v167) = 10;
    LOWORD(v166) = 28257;
    v165 = *(std::string::value_type **)"Big Endian";
  }
  *(_OWORD *)&v164.__r_.__value_.__l.__data_ = 0uLL;
  v10 = "Unsigned Integer";
  if (v5)
    v10 = "UInt";
  v11 = "Signed Integer";
  v164.__r_.__value_.__r.__words[2] = 0;
  if (v5)
    v11 = "SInt";
  if ((v9 & 4) != 0)
    v10 = v11;
  v12 = "Floating Point";
  if (v5)
    v12 = "Float";
  if ((v9 & 1) != 0)
    v13 = v12;
  else
    v13 = v10;
  std::string::__assign_external(&v164, v13);
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v14 = *((_DWORD *)this + 3);
  if ((v14 & 8) == 0)
  {
    if ((v14 & 0x10) != 0)
    {
      HIBYTE(v163) = 4;
      LODWORD(v161) = 1751607624;
    }
    else
    {
      HIBYTE(v163) = 3;
      qmemcpy(&v161, "Low", 3);
    }
  }
  v158 = 0;
  v159 = 0;
  v160 = 0;
  if ((v14 & 0x40) != 0)
  {
    LOBYTE(v159) = 101;
    v158 = *(std::string::value_type **)"Unmixable";
    v18 = 9;
  }
  else
  {
    qmemcpy(&v158, "Mixable", 7);
    v18 = 7;
  }
  HIBYTE(v160) = v18;
  if (v5)
  {
    v19 = SHIBYTE(v170);
    if (v170 >= 0)
      v20 = HIBYTE(v170);
    else
      v20 = v169;
    if (v20)
      v21 = " ";
    else
      v21 = "";
    if (v20)
      v22 = v20 + 1;
    else
      v22 = 0;
    v23 = &v145;
    std::string::basic_string[abi:ne180100]((uint64_t)&v145, v22);
    if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v23 = (std::string *)v145.__r_.__value_.__r.__words[0];
    if (v20)
    {
      if (v19 >= 0)
        v24 = (void **)&v168;
      else
        v24 = v168;
      memmove(v23, v24, v20);
      memcpy((char *)v23 + v20, v21, v20 != 0);
    }
    v23->__r_.__value_.__s.__data_[v20 + (v20 != 0)] = 0;
    if (v160 >= 0)
      v25 = (const std::string::value_type *)&v158;
    else
      v25 = v158;
    if (v160 >= 0)
      v26 = HIBYTE(v160);
    else
      v26 = v159;
    v27 = std::string::append(&v145, v25, v26);
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v29 = std::string::append(&v146, " ", 1uLL);
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v147.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    caulk::make_string((caulk *)"%u", (uint64_t)&v144, *((unsigned int *)this + 7));
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v144;
    else
      v31 = (std::string *)v144.__r_.__value_.__r.__words[0];
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    else
      size = v144.__r_.__value_.__l.__size_;
    v33 = std::string::append(&v147, (const std::string::value_type *)v31, size);
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    v35 = std::string::append(&v148, " Ch ", 4uLL);
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    if (v167 >= 0)
      v37 = (const std::string::value_type *)&v165;
    else
      v37 = v165;
    if (v167 >= 0)
      v38 = HIBYTE(v167);
    else
      v38 = v166;
    v39 = std::string::append(&v149, v37, v38);
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v150.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    v41 = HIBYTE(v167);
    if (v167 < 0)
      v41 = v166;
    if (v41)
      v42 = " ";
    else
      v42 = "";
    v43 = std::string::append(&v150, v42, v41 != 0);
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v151.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    if (v163 >= 0)
      v45 = (const std::string::value_type *)&v161;
    else
      v45 = v161;
    if (v163 >= 0)
      v46 = HIBYTE(v163);
    else
      v46 = v162;
    v47 = std::string::append(&v151, v45, v46);
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v152.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    v49 = HIBYTE(v163);
    if (v163 < 0)
      v49 = v162;
    if (v49)
      v50 = " ";
    else
      v50 = "";
    v51 = std::string::append(&v152, v50, v49 != 0);
    v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v153.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &v164;
    else
      v53 = (std::string *)v164.__r_.__value_.__r.__words[0];
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = HIBYTE(v164.__r_.__value_.__r.__words[2]);
    else
      v54 = v164.__r_.__value_.__l.__size_;
    v55 = std::string::append(&v153, (const std::string::value_type *)v53, v54);
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v154.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    caulk::make_string((caulk *)"%u", (uint64_t)&v141, *((unsigned int *)this + 8));
    if ((v143 & 0x80u) == 0)
      v57 = (const std::string::value_type *)&v141;
    else
      v57 = (const std::string::value_type *)v141;
    if ((v143 & 0x80u) == 0)
      v58 = v143;
    else
      v58 = v142;
    v59 = std::string::append(&v154, v57, v58);
    v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v155.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    v61 = HIBYTE(v163);
    if (v163 < 0)
      v61 = v162;
    if (v61)
      v62 = "/";
    else
      v62 = "";
    v63 = std::string::append(&v155, v62, v61 != 0);
    v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    v156.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    v65 = HIBYTE(v163);
    if (v163 < 0)
      v65 = v162;
    if (v65)
    {
      if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v140, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
      else
        v140 = v164;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v140, "");
    }
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v128 = &v140;
    else
      v128 = (std::string *)v140.__r_.__value_.__r.__words[0];
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v129 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
    else
      v129 = v140.__r_.__value_.__l.__size_;
    v130 = std::string::append(&v156, (const std::string::value_type *)v128, v129);
    v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
    v157.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v131;
    v130->__r_.__value_.__l.__size_ = 0;
    v130->__r_.__value_.__r.__words[2] = 0;
    v130->__r_.__value_.__r.__words[0] = 0;
    v132 = HIBYTE(v163);
    if (v163 < 0)
      v132 = v162;
    if (v132)
      caulk::make_string((caulk *)"%u", (uint64_t)&__p, (8 * (*((_DWORD *)this + 6) / *((_DWORD *)this + 7))));
    else
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
    if ((v139 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v139 & 0x80u) == 0)
      v134 = v139;
    else
      v134 = v138;
    v135 = std::string::append(&v157, p_p, v134);
    v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
    *(_QWORD *)(a4 + 16) = *((_QWORD *)&v135->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v136;
    v135->__r_.__value_.__l.__size_ = 0;
    v135->__r_.__value_.__r.__words[2] = 0;
    v135->__r_.__value_.__r.__words[0] = 0;
    if ((char)v139 < 0)
      operator delete(__p);
    if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v157.__r_.__value_.__l.__data_);
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v140.__r_.__value_.__l.__data_);
    if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v156.__r_.__value_.__l.__data_);
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v155.__r_.__value_.__l.__data_);
    if ((char)v143 < 0)
      operator delete(v141);
    if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v154.__r_.__value_.__l.__data_);
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v153.__r_.__value_.__l.__data_);
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v152.__r_.__value_.__l.__data_);
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v151.__r_.__value_.__l.__data_);
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v150.__r_.__value_.__l.__data_);
    if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v149.__r_.__value_.__l.__data_);
    if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v148.__r_.__value_.__l.__data_);
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v144.__r_.__value_.__l.__data_);
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v147.__r_.__value_.__l.__data_);
    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v146.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_280;
    v127 = (void *)v145.__r_.__value_.__r.__words[0];
  }
  else
  {
    v66 = SHIBYTE(v170);
    if (v170 >= 0)
      v67 = HIBYTE(v170);
    else
      v67 = v169;
    if (v67)
      v68 = " ";
    else
      v68 = "";
    if (v67)
      v69 = v67 + 1;
    else
      v69 = 0;
    v70 = &v144;
    std::string::basic_string[abi:ne180100]((uint64_t)&v144, v69);
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v70 = (std::string *)v144.__r_.__value_.__r.__words[0];
    if (v67)
    {
      if (v66 >= 0)
        v71 = (void **)&v168;
      else
        v71 = v168;
      memmove(v70, v71, v67);
      memcpy((char *)v70 + v67, v68, v67 != 0);
    }
    v70->__r_.__value_.__s.__data_[v67 + (v67 != 0)] = 0;
    if (v160 >= 0)
      v72 = (const std::string::value_type *)&v158;
    else
      v72 = v158;
    if (v160 >= 0)
      v73 = HIBYTE(v160);
    else
      v73 = v159;
    v74 = std::string::append(&v144, v72, v73);
    v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v145.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    v76 = std::string::append(&v145, " ", 1uLL);
    v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    caulk::make_string((caulk *)"%u", (uint64_t)&v141, *((unsigned int *)this + 7));
    if ((v143 & 0x80u) == 0)
      v78 = (const std::string::value_type *)&v141;
    else
      v78 = (const std::string::value_type *)v141;
    if ((v143 & 0x80u) == 0)
      v79 = v143;
    else
      v79 = v142;
    v80 = std::string::append(&v146, v78, v79);
    v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v147.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    v82 = std::string::append(&v147, " Channel ", 9uLL);
    v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    caulk::make_string((caulk *)"%u", (uint64_t)&v140, *((unsigned int *)this + 8));
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v84 = &v140;
    else
      v84 = (std::string *)v140.__r_.__value_.__r.__words[0];
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v85 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
    else
      v85 = v140.__r_.__value_.__l.__size_;
    v86 = std::string::append(&v148, (const std::string::value_type *)v84, v85);
    v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    v88 = std::string::append(&v149, " Bit ", 5uLL);
    v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v150.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0;
    v88->__r_.__value_.__r.__words[2] = 0;
    v88->__r_.__value_.__r.__words[0] = 0;
    if (v167 >= 0)
      v90 = (const std::string::value_type *)&v165;
    else
      v90 = v165;
    if (v167 >= 0)
      v91 = HIBYTE(v167);
    else
      v91 = v166;
    v92 = std::string::append(&v150, v90, v91);
    v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
    v151.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v93;
    v92->__r_.__value_.__l.__size_ = 0;
    v92->__r_.__value_.__r.__words[2] = 0;
    v92->__r_.__value_.__r.__words[0] = 0;
    v94 = HIBYTE(v167);
    if (v167 < 0)
      v94 = v166;
    if (v94)
      v95 = " ";
    else
      v95 = "";
    v96 = std::string::append(&v151, v95, v94 != 0);
    v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
    v152.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v97;
    v96->__r_.__value_.__l.__size_ = 0;
    v96->__r_.__value_.__r.__words[2] = 0;
    v96->__r_.__value_.__r.__words[0] = 0;
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v98 = &v164;
    else
      v98 = (std::string *)v164.__r_.__value_.__r.__words[0];
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v99 = HIBYTE(v164.__r_.__value_.__r.__words[2]);
    else
      v99 = v164.__r_.__value_.__l.__size_;
    v100 = std::string::append(&v152, (const std::string::value_type *)v98, v99);
    v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
    v153.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v101;
    v100->__r_.__value_.__l.__size_ = 0;
    v100->__r_.__value_.__r.__words[2] = 0;
    v100->__r_.__value_.__r.__words[0] = 0;
    v102 = HIBYTE(v163);
    if (v163 < 0)
      v102 = v162;
    if (v102)
      v103 = " Aligned ";
    else
      v103 = "";
    if (v102)
      v104 = 9;
    else
      v104 = 0;
    v105 = std::string::append(&v153, v103, v104);
    v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
    v154.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v106;
    v105->__r_.__value_.__l.__size_ = 0;
    v105->__r_.__value_.__r.__words[2] = 0;
    v105->__r_.__value_.__r.__words[0] = 0;
    if (v163 >= 0)
      v107 = (const std::string::value_type *)&v161;
    else
      v107 = v161;
    if (v163 >= 0)
      v108 = HIBYTE(v163);
    else
      v108 = v162;
    v109 = std::string::append(&v154, v107, v108);
    v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
    v155.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v110;
    v109->__r_.__value_.__l.__size_ = 0;
    v109->__r_.__value_.__r.__words[2] = 0;
    v109->__r_.__value_.__r.__words[0] = 0;
    v111 = HIBYTE(v163);
    if (v163 < 0)
      v111 = v162;
    v112 = v111 == 0;
    v113 = v111 != 0;
    if (v112)
      v114 = "";
    else
      v114 = " in ";
    v115 = std::string::append(&v155, v114, 4 * v113);
    v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
    v156.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v116;
    v115->__r_.__value_.__l.__size_ = 0;
    v115->__r_.__value_.__r.__words[2] = 0;
    v115->__r_.__value_.__r.__words[0] = 0;
    v117 = HIBYTE(v163);
    if (v163 < 0)
      v117 = v162;
    if (v117)
      caulk::make_string((caulk *)"%u", (uint64_t)&__p, (8 * (*((_DWORD *)this + 6) / *((_DWORD *)this + 7))));
    else
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
    if ((v139 & 0x80u) == 0)
      v118 = (const std::string::value_type *)&__p;
    else
      v118 = (const std::string::value_type *)__p;
    if ((v139 & 0x80u) == 0)
      v119 = v139;
    else
      v119 = v138;
    v120 = std::string::append(&v156, v118, v119);
    v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
    v157.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v121;
    v120->__r_.__value_.__l.__size_ = 0;
    v120->__r_.__value_.__r.__words[2] = 0;
    v120->__r_.__value_.__r.__words[0] = 0;
    v122 = HIBYTE(v163);
    if (v163 < 0)
      v122 = v162;
    if (v122)
      v123 = " Bits";
    else
      v123 = "";
    if (v122)
      v124 = 5;
    else
      v124 = 0;
    v125 = std::string::append(&v157, v123, v124);
    v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
    *(_QWORD *)(a4 + 16) = *((_QWORD *)&v125->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v126;
    v125->__r_.__value_.__l.__size_ = 0;
    v125->__r_.__value_.__r.__words[2] = 0;
    v125->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v157.__r_.__value_.__l.__data_);
    if ((char)v139 < 0)
      operator delete(__p);
    if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v156.__r_.__value_.__l.__data_);
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v155.__r_.__value_.__l.__data_);
    if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v154.__r_.__value_.__l.__data_);
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v153.__r_.__value_.__l.__data_);
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v152.__r_.__value_.__l.__data_);
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v151.__r_.__value_.__l.__data_);
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v150.__r_.__value_.__l.__data_);
    if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v149.__r_.__value_.__l.__data_);
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v140.__r_.__value_.__l.__data_);
    if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v148.__r_.__value_.__l.__data_);
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v147.__r_.__value_.__l.__data_);
    if ((char)v143 < 0)
      operator delete(v141);
    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v146.__r_.__value_.__l.__data_);
    if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v145.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_280;
    v127 = (void *)v144.__r_.__value_.__r.__words[0];
  }
  operator delete(v127);
LABEL_280:
  if (SHIBYTE(v160) < 0)
    operator delete(v158);
  if (SHIBYTE(v163) < 0)
    operator delete(v161);
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v164.__r_.__value_.__l.__data_);
  if (SHIBYTE(v167) < 0)
    operator delete(v165);
LABEL_288:
  if (SHIBYTE(v170) < 0)
    operator delete(v168);
}

void HALS_UCPlugIn::~HALS_UCPlugIn(HALS_UCPlugIn *this)
{
  HALS_UCPlugIn::~HALS_UCPlugIn(this);
  JUMPOUT(0x1B5E50688);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  const void *v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E697CCB8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v4 = *((_QWORD *)this + 3);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_UCPlugIn *)((char *)this + 72));
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (const void *)*((_QWORD *)this + 7);
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)this + 6);
  if (v8)
    CFRelease(v8);
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

BOOL HALS_UCPlugIn::IsNub(HALS_UCPlugIn *this)
{
  return !*((_BYTE *)this + 8) && *((_QWORD *)this + 5) != 0;
}

uint64_t HALS_UCPlugIn::IsOldStyle(HALS_UCPlugIn *this)
{
  return *((unsigned __int8 *)this + 8);
}

BOOL HALS_UCPlugIn::SupportsIsolatedIO(HALS_UCPlugIn *this)
{
  return *((_QWORD *)this + 4) != 0;
}

uint64_t HALS_UCPlugIn::GetBundleID(HALS_UCPlugIn *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t HALS_UCPlugIn::GetBundleLocation(HALS_UCPlugIn *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t HALS_UCPlugIn::Initialize(HALS_UCPlugIn *this, const AudioServerPlugInHostInterface *a2)
{
  uint64_t v3;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 3);
  if (v3)
    return (*(uint64_t (**)(uint64_t, const AudioServerPlugInHostInterface *))(*(_QWORD *)v3 + 32))(v3, a2);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    return (*(uint64_t (**)(uint64_t, const AudioServerPlugInHostInterface *))(*(_QWORD *)v3 + 32))(v3, a2);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v5 = 136315394;
    v6 = "HALS_UCPlugIn.cpp";
    v7 = 1024;
    v8 = 299;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_UCPlugIn::Initialize: there isn't an interface to intialize", (uint8_t *)&v5, 0x12u);
  }
  return 1852797029;
}

uint64_t HALS_UCPlugIn::Initialize(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t (**)(uint64_t))(a1 + 392);
  if (v2)
    return v2(a2);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315394;
    v5 = "HALS_UCPlugIn.cpp";
    v6 = 1024;
    v7 = 314;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_UCPlugIn::Initialize: there isn't an initialize entry", (uint8_t *)&v4, 0x12u);
  }
  return 1852797029;
}

void HALS_UCPlugIn::Teardown(HALS_UCPlugIn *this)
{
  uint64_t (*v1)(void);
  int v2;
  int v3;
  _BYTE v4[5];
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  __int16 v11;
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t (*)(void))*((_QWORD *)this + 50);
  if (v1)
  {
    v2 = v1();
    if (v2)
    {
      v3 = v2;
      v4[0] = HIBYTE(v2);
      v4[1] = BYTE2(v2);
      v4[2] = BYTE1(v2);
      v4[3] = v2;
      v4[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        v6 = "HALS_UCPlugIn.cpp";
        v7 = 1024;
        v8 = 325;
        v9 = 1024;
        v10 = v3;
        v11 = 2080;
        v12 = v4;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_UCPlugIn::Teardown: failed, Error: %d (%s)", buf, 0x22u);
      }
    }
  }
}

uint64_t HALS_UCPlugIn::AddDeviceClient(HALS_UCPlugIn *this, uint64_t a2, const AudioServerPlugInClientInfo *a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, const AudioServerPlugInClientInfo *))(*(_QWORD *)result + 56))(result, a2, a3);
  return result;
}

uint64_t HALS_UCPlugIn::RemoveDeviceClient(HALS_UCPlugIn *this, uint64_t a2, const AudioServerPlugInClientInfo *a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, const AudioServerPlugInClientInfo *))(*(_QWORD *)result + 64))(result, a2, a3);
  return result;
}

uint64_t HALS_UCPlugIn::PerformDeviceConfigChange(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t (*v7)(uint64_t, uint64_t, void *);

  v5 = *((_QWORD *)this + 3);
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)v5 + 72))(v5, a2, a3, a4);
  v7 = (uint64_t (*)(uint64_t, uint64_t, void *))*((_QWORD *)this + 51);
  if (v7)
    return v7(a2, a3, a4);
  else
    return 0;
}

uint64_t HALS_UCPlugIn::AbortDeviceConfigChange(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)result + 80))(result, a2, a3, a4);
  return result;
}

uint64_t HALS_UCPlugIn::CreateDevice(HALS_UCPlugIn *this, const __CFDictionary *a2, const AudioServerPlugInClientInfo *a3, unsigned int *a4)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t, const __CFDictionary *, const AudioServerPlugInClientInfo *, unsigned int *))(*(_QWORD *)result + 40))(result, a2, a3, a4);
  return result;
}

uint64_t HALS_UCPlugIn::DestroyDevice(HALS_UCPlugIn *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t HALS_UCPlugInBase::ObjectWasDestroyed(HALS_UCPlugInBase *this)
{
  return 0;
}

HALS_PlugInEngine *HALS_UCPlugIn::CreateEngine(HALS_UCPlugIn *this, HALS_PlugIn *a2, HALS_IODevice *a3)
{
  HALS_PlugInEngine *v5;
  uint64_t v6;
  HALS_Object *v7;

  v5 = (HALS_PlugInEngine *)operator new();
  HALS_PlugInEngine::HALS_PlugInEngine(v5, a2, a3, v6, v7);
  return v5;
}

void sub_1B59FACDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E50688](v1, 0x10E1C40329C6403);
  _Unwind_Resume(a1);
}

void HALS_UCPlugIn::create_mcp_engine(HALS_UCPlugIn *this@<X0>, HALS_PlugIn *a2@<X1>, const HALS_IODevice *a3@<X2>, unsigned int *a4@<X3>, _OWORD *a5@<X8>)
{
  const void *v10;
  NSObject **v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  unsigned __int8 v22;
  __int128 v23;
  __int128 v24;
  void *__p[3];
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  double v32;
  CFTypeRef cf;
  dispatch_object_t object[41];

  object[40] = *(dispatch_object_t *)MEMORY[0x1E0C80C00];
  v10 = (const void *)(*(uint64_t (**)(const HALS_IODevice *))(*(_QWORD *)a3 + 208))(a3);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v10);
  v32 = (*(double (**)(const HALS_IODevice *))(*(_QWORD *)a3 + 264))(a3);
  v31 = (*(uint64_t (**)(const HALS_IODevice *))(*(_QWORD *)a3 + 296))(a3);
  v30 = (*(uint64_t (**)(const HALS_IODevice *))(*(_QWORD *)a3 + 320))(a3);
  v29 = (*(uint64_t (**)(const HALS_IODevice *, uint64_t))(*(_QWORD *)a3 + 312))(a3, 1);
  v28 = (*(uint64_t (**)(const HALS_IODevice *, _QWORD))(*(_QWORD *)a3 + 312))(a3, 0);
  v27 = (*(uint64_t (**)(const HALS_IODevice *, uint64_t))(*(_QWORD *)a3 + 304))(a3, 1);
  v26 = (*(uint64_t (**)(const HALS_IODevice *, _QWORD))(*(_QWORD *)a3 + 304))(a3, 0);
  AMCP::Utility::Dispatch_Queue::create_serial_with_workloop((AMCP::Utility::Dispatch_Queue *)object, "HALS_UCPlugIn::Engine Queue");
  v11 = (NSObject **)((char *)this + 72);
  AMCP::Utility::Dispatch_Queue::operator=(v11, object[0]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)object);
  make_stream_list((void **)object, a3, 1);
  make_stream_list(__p, a3, 0);
  v23 = 0uLL;
  v22 = 0;
  v12 = *((_QWORD *)a2 + 51);
  *(_QWORD *)&v21 = *((_QWORD *)a2 + 50);
  *((_QWORD *)&v21 + 1) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  std::allocate_shared[abi:ne180100]<AMCP::ASP::Engine,std::allocator<AMCP::ASP::Engine>,std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int const&,applesauce::CF::StringRef &,double &,unsigned int &,unsigned int &,unsigned int &,unsigned int &,unsigned int &,unsigned int &,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> &,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> &,AMCP::Utility::Dispatch_Queue &,void>(&v24, &v23, &v22, &v21, (int *)a4, &cf, &v32, &v31, &v30, &v29, &v28, &v27, &v26, (uint64_t)object, (uint64_t)__p, v11);
  *a5 = v24;
  v24 = 0uLL;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p[0])
    operator delete(__p[0]);
  if (object[0])
    operator delete(object[0]);
  if (cf)
    CFRelease(cf);
}

void sub_1B59FAF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,void *a34)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B59FB008()
{
  JUMPOUT(0x1B59FB000);
}

uint64_t HALS_UCPlugIn::RegisterIOBuffer(HALS_UCPlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, BOOL a5, unsigned int a6, void *a7)
{
  return 0;
}

uint64_t HALS_UCPlugIn::Register_IOThread(HALS_UCPlugIn *this, double a2)
{
  return 0;
}

uint64_t HALS_UCPlugIn::Unregister_IOThread(HALS_UCPlugIn *this)
{
  return 0;
}

uint64_t HALS_UCPlugIn::Start(HALS_UCPlugIn *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v5)(uint64_t);

  v3 = *((_QWORD *)this + 3);
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 128))(v3);
  v5 = (uint64_t (*)(uint64_t))*((_QWORD *)this + 52);
  if (v5)
    return v5(a2);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::Stop(HALS_UCPlugIn *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v5)(uint64_t);

  v3 = *((_QWORD *)this + 3);
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 136))(v3);
  v5 = (uint64_t (*)(uint64_t))*((_QWORD *)this + 53);
  if (v5)
    return v5(a2);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::GetZeroTimeStamp(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, double *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v7;
  uint64_t (*v9)(uint64_t, double *, unint64_t *, unint64_t *);

  v7 = *((_QWORD *)this + 3);
  if (v7)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double *, unint64_t *, unint64_t *))(*(_QWORD *)v7 + 144))(v7, a2, a3, a4, a5, a6);
  v9 = (uint64_t (*)(uint64_t, double *, unint64_t *, unint64_t *))*((_QWORD *)this + 54);
  if (v9)
    return v9(a2, a4, a5, a6);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::WillDo_IOThread(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t result;
  BOOL v7;
  BOOL v8;
  char v9;
  char v10;

  result = *((_QWORD *)this + 3);
  if (result)
  {
    v10 = 0;
    v9 = 1;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(_QWORD *)result + 152))(result, a2, a3, 1953002084, &v10, &v9);
    v7 = v10 == 0;
  }
  else
  {
    v7 = *((_QWORD *)this + 55) == 0;
  }
  v8 = !v7;
  *a4 = v8;
  return result;
}

uint64_t HALS_UCPlugIn::Begin_IOThread(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  uint64_t v5;
  uint64_t (*v7)(uint64_t, _QWORD);

  v5 = *((_QWORD *)this + 3);
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 160))(v5, a2, a3, 1953002084, a4->mNominalIOBufferFrameSize);
  v7 = (uint64_t (*)(uint64_t, _QWORD))*((_QWORD *)this + 55);
  if (v7)
    return v7(a2, a4->mNominalIOBufferFrameSize);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::End_IOThread(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  uint64_t v5;
  uint64_t (*v7)(uint64_t);

  v5 = *((_QWORD *)this + 3);
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const AudioServerPlugInIOCycleInfo *))(*(_QWORD *)v5 + 176))(v5, a2, a3, 1953002084, a4->mNominalIOBufferFrameSize, a4);
  v7 = (uint64_t (*)(uint64_t))*((_QWORD *)this + 56);
  if (v7)
    return v7(a2);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::WillDo_IOCycle(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t result;
  BOOL v7;
  BOOL v8;
  char v9;
  char v10;

  result = *((_QWORD *)this + 3);
  if (result)
  {
    v10 = 0;
    v9 = 1;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(_QWORD *)result + 152))(result, a2, a3, 1668899692, &v10, &v9);
    v7 = v10 == 0;
  }
  else
  {
    v7 = *((_QWORD *)this + 57) == 0;
  }
  v8 = !v7;
  *a4 = v8;
  return result;
}

uint64_t HALS_UCPlugIn::Begin_IOCycle(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  uint64_t v5;
  uint64_t (*v7)(uint64_t, _QWORD, AudioTimeStamp *, AudioTimeStamp *);

  v5 = *((_QWORD *)this + 3);
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 160))(v5, a2, a3, 1668899692, a4->mNominalIOBufferFrameSize);
  v7 = (uint64_t (*)(uint64_t, _QWORD, AudioTimeStamp *, AudioTimeStamp *))*((_QWORD *)this + 57);
  if (v7)
    return v7(a2, a4->mNominalIOBufferFrameSize, &a4->mInputTime, &a4->mOutputTime);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::End_IOCycle(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  uint64_t v5;
  uint64_t (*v7)(uint64_t, _QWORD, AudioTimeStamp *, AudioTimeStamp *);

  v5 = *((_QWORD *)this + 3);
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 176))(v5, a2, a3, 1668899692, a4->mNominalIOBufferFrameSize);
  v7 = (uint64_t (*)(uint64_t, _QWORD, AudioTimeStamp *, AudioTimeStamp *))*((_QWORD *)this + 58);
  if (v7)
    return v7(a2, a4->mNominalIOBufferFrameSize, &a4->mInputTime, &a4->mOutputTime);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::WillDo_ReadInput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t result;
  BOOL v7;
  BOOL v8;
  char v9;
  char v10;

  result = *((_QWORD *)this + 3);
  if (result)
  {
    v10 = 0;
    v9 = 1;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(_QWORD *)result + 152))(result, a2, a3, 1919246692, &v10, &v9);
    v7 = v10 == 0;
  }
  else
  {
    v7 = *((_QWORD *)this + 60) == 0;
  }
  v8 = !v7;
  *a4 = v8;
  return result;
}

uint64_t HALS_UCPlugIn::Begin_ReadInput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v8;
  uint64_t (*v10)(uint64_t, uint64_t, AudioTimeStamp *);

  v8 = *((_QWORD *)this + 3);
  if (v8)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(_QWORD *)v8 + 160))(v8, a2, a3, 1919246692, a4, a5);
  v10 = (uint64_t (*)(uint64_t, uint64_t, AudioTimeStamp *))*((_QWORD *)this + 59);
  if (v10)
    return v10(a2, a4, &a5->mInputTime);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::Do_ReadInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(_QWORD *)a7)
    v7 = *(_QWORD *)a7 + *(unsigned int *)(a7 + 8);
  else
    v7 = 0;
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 168))(v8, a2, a3, a4, 1919246692, a5, a6, v7, 0);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 480);
  if (v10)
    return v10(a2, a3, a5, a6 + 80, v7);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::Do_IsolatedReadInput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5, uint64_t a6)
{
  uint64_t v6;

  v6 = *((_QWORD *)this + 4);
  if (v6)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(_QWORD *)v6 + 48))(v6, a2, a3, a6, 1919246692, a4, a5);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::Do_SetupForIsolatedIO(HALS_UCPlugIn *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::Do_TeardownForIsolatedIO(HALS_UCPlugIn *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::End_ReadInput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v8;
  uint64_t (*v10)(uint64_t, uint64_t, AudioTimeStamp *);

  v8 = *((_QWORD *)this + 3);
  if (v8)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(_QWORD *)v8 + 176))(v8, a2, a3, 1919246692, a4, a5);
  v10 = (uint64_t (*)(uint64_t, uint64_t, AudioTimeStamp *))*((_QWORD *)this + 61);
  if (v10)
    return v10(a2, a4, &a5->mInputTime);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::WillDo_ConvertInput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, BOOL *a4, BOOL *a5)
{
  uint64_t result;
  BOOL v8;
  BOOL v9;
  char v10;
  char v11;

  result = *((_QWORD *)this + 3);
  v8 = 1;
  if (result)
  {
    v11 = 0;
    v10 = 1;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(_QWORD *)result + 152))(result, a2, a3, 1667853936, &v11, &v10);
    v9 = v11 != 0;
    v8 = v10 != 0;
  }
  else
  {
    v9 = 0;
  }
  *a4 = v9;
  *a5 = v8;
  return result;
}

uint64_t HALS_UCPlugIn::Begin_ConvertInput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5;

  v5 = *((_QWORD *)this + 3);
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(_QWORD *)v5 + 160))(v5, a2, a3, 1667853936, a4, a5);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::Do_ConvertInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(_QWORD *)(a1 + 24);
  if (!v8)
    return 1852797029;
  if (*(_QWORD *)a8)
    v9 = *(_QWORD *)a8 + *(unsigned int *)(a8 + 8);
  else
    v9 = 0;
  if (*(_QWORD *)a7)
    v10 = *(_QWORD *)a7 + *(unsigned int *)(a7 + 8);
  else
    v10 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 168))(v8, a2, a3, a4, 1667853936, a5, a6, v10, v9);
}

uint64_t HALS_UCPlugIn::End_ConvertInput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5;

  v5 = *((_QWORD *)this + 3);
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(_QWORD *)v5 + 176))(v5, a2, a3, 1667853936, a4, a5);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::WillDo_ProcessInput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, BOOL *a4, BOOL *a5)
{
  uint64_t result;
  BOOL v8;
  BOOL v9;
  char v10;
  char v11;

  result = *((_QWORD *)this + 3);
  v8 = 1;
  if (result)
  {
    v11 = 0;
    v10 = 1;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(_QWORD *)result + 152))(result, a2, a3, 1885957744, &v11, &v10);
    v9 = v11 != 0;
    v8 = v10 != 0;
  }
  else
  {
    v9 = 0;
  }
  *a4 = v9;
  *a5 = v8;
  return result;
}

uint64_t HALS_UCPlugIn::Begin_ProcessInput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5;

  v5 = *((_QWORD *)this + 3);
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(_QWORD *)v5 + 160))(v5, a2, a3, 1885957744, a4, a5);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::Do_ProcessInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(_QWORD *)(a1 + 24);
  if (!v8)
    return 1852797029;
  if (*(_QWORD *)a8)
    v9 = *(_QWORD *)a8 + *(unsigned int *)(a8 + 8);
  else
    v9 = 0;
  if (*(_QWORD *)a7)
    v10 = *(_QWORD *)a7 + *(unsigned int *)(a7 + 8);
  else
    v10 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 168))(v8, a2, a3, a4, 1885957744, a5, a6, v10, v9);
}

uint64_t HALS_UCPlugIn::End_ProcessInput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5;

  v5 = *((_QWORD *)this + 3);
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(_QWORD *)v5 + 176))(v5, a2, a3, 1885957744, a4, a5);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::WillDo_ProcessOutput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, BOOL *a4, BOOL *a5)
{
  uint64_t result;
  BOOL v8;
  BOOL v9;
  char v10;
  char v11;

  result = *((_QWORD *)this + 3);
  v8 = 1;
  if (result)
  {
    v11 = 0;
    v10 = 1;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(_QWORD *)result + 152))(result, a2, a3, 1886352756, &v11, &v10);
    v9 = v11 != 0;
    v8 = v10 != 0;
  }
  else
  {
    v9 = 0;
  }
  *a4 = v9;
  *a5 = v8;
  return result;
}

uint64_t HALS_UCPlugIn::Begin_ProcessOutput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5;

  v5 = *((_QWORD *)this + 3);
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(_QWORD *)v5 + 160))(v5, a2, a3, 1886352756, a4, a5);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::Do_ProcessOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(_QWORD *)(a1 + 24);
  if (!v8)
    return 1852797029;
  if (*(_QWORD *)a8)
    v9 = *(_QWORD *)a8 + *(unsigned int *)(a8 + 8);
  else
    v9 = 0;
  if (*(_QWORD *)a7)
    v10 = *(_QWORD *)a7 + *(unsigned int *)(a7 + 8);
  else
    v10 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 168))(v8, a2, a3, a4, 1886352756, a5, a6, v10, v9);
}

uint64_t HALS_UCPlugIn::End_ProcessOutput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5;

  v5 = *((_QWORD *)this + 3);
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(_QWORD *)v5 + 176))(v5, a2, a3, 1886352756, a4, a5);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::WillDo_MixOutput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t result;
  BOOL v7;
  BOOL v8;
  char v9;
  char v10;

  result = *((_QWORD *)this + 3);
  if (result)
  {
    v10 = 0;
    v9 = 1;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(_QWORD *)result + 152))(result, a2, a3, 1835628655, &v10, &v9);
    v7 = v10 == 0;
  }
  else
  {
    v7 = *((_QWORD *)this + 63) == 0;
  }
  v8 = !v7;
  *a4 = v8;
  return result;
}

uint64_t HALS_UCPlugIn::Begin_MixOutput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5;

  v5 = *((_QWORD *)this + 3);
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(_QWORD *)v5 + 160))(v5, a2, a3, 1835628655, a4, a5);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::Do_MixOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    return 1852797029;
  if (*(_QWORD *)a7)
    v8 = *(_QWORD *)a7 + *(unsigned int *)(a7 + 8);
  else
    v8 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 168))(v7, a2, a3, a4, 1835628655, a5, a6, v8, 0);
}

uint64_t HALS_UCPlugIn::End_MixOutput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5;

  v5 = *((_QWORD *)this + 3);
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(_QWORD *)v5 + 176))(v5, a2, a3, 1835628655, a4, a5);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::WillDo_ProcessMix(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, BOOL *a4, BOOL *a5)
{
  uint64_t result;
  BOOL v8;
  BOOL v9;
  char v10;
  char v11;

  result = *((_QWORD *)this + 3);
  v8 = 1;
  if (result)
  {
    v11 = 0;
    v10 = 1;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(_QWORD *)result + 152))(result, a2, a3, 1886218616, &v11, &v10);
    v9 = v11 != 0;
    v8 = v10 != 0;
  }
  else
  {
    v9 = 0;
  }
  *a4 = v9;
  *a5 = v8;
  return result;
}

uint64_t HALS_UCPlugIn::Begin_ProcessMix(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5;

  v5 = *((_QWORD *)this + 3);
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(_QWORD *)v5 + 160))(v5, a2, a3, 1886218616, a4, a5);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::Do_ProcessMix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(_QWORD *)(a1 + 24);
  if (!v8)
    return 1852797029;
  if (*(_QWORD *)a8)
    v9 = *(_QWORD *)a8 + *(unsigned int *)(a8 + 8);
  else
    v9 = 0;
  if (*(_QWORD *)a7)
    v10 = *(_QWORD *)a7 + *(unsigned int *)(a7 + 8);
  else
    v10 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 168))(v8, a2, a3, a4, 1886218616, a5, a6, v10, v9);
}

uint64_t HALS_UCPlugIn::End_ProcessMix(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5;

  v5 = *((_QWORD *)this + 3);
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(_QWORD *)v5 + 176))(v5, a2, a3, 1886218616, a4, a5);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::WillDo_ConvertMix(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, BOOL *a4, BOOL *a5)
{
  uint64_t result;
  BOOL v8;
  BOOL v9;
  char v10;
  char v11;

  result = *((_QWORD *)this + 3);
  v8 = 1;
  if (result)
  {
    v11 = 0;
    v10 = 1;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(_QWORD *)result + 152))(result, a2, a3, 1668114808, &v11, &v10);
    v9 = v11 != 0;
    v8 = v10 != 0;
  }
  else
  {
    v9 = 0;
  }
  *a4 = v9;
  *a5 = v8;
  return result;
}

uint64_t HALS_UCPlugIn::Begin_ConvertMix(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5;

  v5 = *((_QWORD *)this + 3);
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(_QWORD *)v5 + 160))(v5, a2, a3, 1668114808, a4, a5);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::Do_ConvertMix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(_QWORD *)(a1 + 24);
  if (!v8)
    return 1852797029;
  if (*(_QWORD *)a8)
    v9 = *(_QWORD *)a8 + *(unsigned int *)(a8 + 8);
  else
    v9 = 0;
  if (*(_QWORD *)a7)
    v10 = *(_QWORD *)a7 + *(unsigned int *)(a7 + 8);
  else
    v10 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 168))(v8, a2, a3, a4, 1668114808, a5, a6, v10, v9);
}

uint64_t HALS_UCPlugIn::End_ConvertMix(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5;

  v5 = *((_QWORD *)this + 3);
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(_QWORD *)v5 + 176))(v5, a2, a3, 1668114808, a4, a5);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::WillDo_WriteMix(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t result;
  BOOL v7;
  BOOL v8;
  char v9;
  char v10;

  result = *((_QWORD *)this + 3);
  if (result)
  {
    v10 = 0;
    v9 = 1;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(_QWORD *)result + 152))(result, a2, a3, 1919513701, &v10, &v9);
    v7 = v10 == 0;
  }
  else
  {
    v7 = *((_QWORD *)this + 63) == 0;
  }
  v8 = !v7;
  *a4 = v8;
  return result;
}

uint64_t HALS_UCPlugIn::Begin_WriteMix(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v8;
  uint64_t (*v10)(uint64_t, uint64_t, AudioTimeStamp *);

  v8 = *((_QWORD *)this + 3);
  if (v8)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(_QWORD *)v8 + 160))(v8, a2, a3, 1919513701, a4, a5);
  v10 = (uint64_t (*)(uint64_t, uint64_t, AudioTimeStamp *))*((_QWORD *)this + 62);
  if (v10)
    return v10(a2, a4, &a5->mOutputTime);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::Do_WriteMix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(_QWORD *)a7)
    v7 = *(_QWORD *)a7 + *(unsigned int *)(a7 + 8);
  else
    v7 = 0;
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 168))(v8, a2, a3, a4, 1919513701, a5, a6, v7, 0);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 504);
  if (v10)
    return v10(a2, a3, a5, a6 + 144, v7);
  else
    return 1852797029;
}

uint64_t HALS_UCPlugIn::End_WriteMix(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v8;
  uint64_t (*v10)(uint64_t, uint64_t, AudioTimeStamp *);

  v8 = *((_QWORD *)this + 3);
  if (v8)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(_QWORD *)v8 + 176))(v8, a2, a3, 1919513701, a4, a5);
  v10 = (uint64_t (*)(uint64_t, uint64_t, AudioTimeStamp *))*((_QWORD *)this + 64);
  if (v10)
    return v10(a2, a4, &a5->mOutputTime);
  else
    return 1852797029;
}

BOOL HALS_UCPlugIn::ObjectHasProperty(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4)
{
  uint64_t v5;
  int v6;
  uint64_t (*v7)(uint64_t, const AudioObjectPropertyAddress *);

  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const AudioObjectPropertyAddress *))(*(_QWORD *)v5 + 88))(v5, a2, a3, a4);
  }
  else
  {
    v7 = (uint64_t (*)(uint64_t, const AudioObjectPropertyAddress *))*((_QWORD *)this + 65);
    if (!v7)
      return 0;
    v6 = v7(a2, a4);
  }
  return v6 != 0;
}

BOOL HALS_UCPlugIn::ObjectIsPropertySettable(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4)
{
  uint64_t v6;
  int v7;
  uint8x8_t v8;
  uint64_t (*v10)(uint64_t, const AudioObjectPropertyAddress *, char *);
  int16x8_t v11;
  int16x8_t v12;
  uint64_t mElement;
  _DWORD *exception;
  int v15;
  _BYTE v16[5];
  unsigned __int32 v17;
  char v18;
  __int32 v19;
  char v20;
  char v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  __int32 *v27;
  __int16 v28;
  unsigned __int32 *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  __int16 v34;
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v6 = *((_QWORD *)this + 3);
  if (v6)
  {
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const AudioObjectPropertyAddress *, char *))(*(_QWORD *)v6 + 96))(v6, a2, a3, a4, &v21);
    if (!v7)
      return v21 != 0;
LABEL_7:
    v8.i32[0] = a4->mSelector;
    v11 = (int16x8_t)vmovl_u8(v8);
    *(int16x4_t *)v11.i8 = vrev64_s16(*(int16x4_t *)v11.i8);
    *(int8x8_t *)v11.i8 = vmovn_s16(v11);
    v19 = v11.i32[0];
    v20 = 0;
    v11.i32[0] = a4->mScope;
    v12 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v11.i8);
    *(int16x4_t *)v12.i8 = vrev64_s16(*(int16x4_t *)v12.i8);
    v17 = vmovn_s16(v12).u32[0];
    v18 = 0;
    v16[0] = HIBYTE(v7);
    v16[1] = BYTE2(v7);
    v16[2] = BYTE1(v7);
    v15 = v7;
    v16[3] = v7;
    v16[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      mElement = a4->mElement;
      *(_DWORD *)buf = 136316674;
      v23 = "HALS_UCPlugIn.cpp";
      v24 = 1024;
      v25 = 1115;
      v26 = 2080;
      v27 = &v19;
      v28 = 2080;
      v29 = &v17;
      v30 = 2048;
      v31 = mElement;
      v32 = 1024;
      v33 = v15;
      v34 = 2080;
      v35 = v16;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_UCPlugIn::ObjectIsPropertySettable: failed:  [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v15;
  }
  v10 = (uint64_t (*)(uint64_t, const AudioObjectPropertyAddress *, char *))*((_QWORD *)this + 66);
  if (!v10)
    return 0;
  v7 = v10(a2, a4, &v21);
  if (v7)
    goto LABEL_7;
  return v21 != 0;
}

uint64_t HALS_UCPlugIn::ObjectGetPropertyDataSize(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6)
{
  uint64_t v8;
  int v9;
  uint8x8_t v10;
  uint64_t (*v12)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, unsigned int *);
  int16x8_t v13;
  int16x8_t v14;
  uint64_t mElement;
  _DWORD *exception;
  int v17;
  _BYTE v18[5];
  unsigned __int32 v19;
  char v20;
  __int32 v21;
  char v22;
  unsigned int v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  __int32 *v29;
  __int16 v30;
  unsigned __int32 *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  __int16 v36;
  _BYTE *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, unsigned int *))(*(_QWORD *)v8 + 104))(v8, a2, a3, a4, a5, a6, &v23);
    if (!v9)
      return v23;
LABEL_7:
    v10.i32[0] = a4->mSelector;
    v13 = (int16x8_t)vmovl_u8(v10);
    *(int16x4_t *)v13.i8 = vrev64_s16(*(int16x4_t *)v13.i8);
    *(int8x8_t *)v13.i8 = vmovn_s16(v13);
    v21 = v13.i32[0];
    v22 = 0;
    v13.i32[0] = a4->mScope;
    v14 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v13.i8);
    *(int16x4_t *)v14.i8 = vrev64_s16(*(int16x4_t *)v14.i8);
    v19 = vmovn_s16(v14).u32[0];
    v20 = 0;
    v18[0] = HIBYTE(v9);
    v18[1] = BYTE2(v9);
    v18[2] = BYTE1(v9);
    v17 = v9;
    v18[3] = v9;
    v18[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      mElement = a4->mElement;
      *(_DWORD *)buf = 136316674;
      v25 = "HALS_UCPlugIn.cpp";
      v26 = 1024;
      v27 = 1131;
      v28 = 2080;
      v29 = &v21;
      v30 = 2080;
      v31 = &v19;
      v32 = 2048;
      v33 = mElement;
      v34 = 1024;
      v35 = v17;
      v36 = 2080;
      v37 = v18;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_UCPlugIn::ObjectGetPropertyDataSize: failed:  [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v17;
  }
  v12 = (uint64_t (*)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, unsigned int *))*((_QWORD *)this + 67);
  if (!v12)
    return 0;
  v9 = v12(a2, a4, a5, a6, &v23);
  if (v9)
    goto LABEL_7;
  return v23;
}

uint64_t HALS_UCPlugIn::ObjectGetPropertyData(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, uint64_t a7, unsigned int *a8, void *a9)
{
  uint64_t result;
  uint8x8_t v12;
  uint64_t (*v13)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, unsigned int *, void *);
  int16x8_t v14;
  int16x8_t v15;
  uint64_t mElement;
  _DWORD *exception;
  int v18;
  _BYTE v19[5];
  unsigned __int32 v20;
  char v21;
  __int32 v22;
  char v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  __int32 *v29;
  __int16 v30;
  unsigned __int32 *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  __int16 v36;
  _BYTE *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  result = *((_QWORD *)this + 3);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, unsigned int *, void *))(*(_QWORD *)result + 112))(result, a2, a3, a4, a5, a6, a7, a8, a9);
    if ((_DWORD)result)
    {
LABEL_7:
      v12.i32[0] = a4->mSelector;
      v14 = (int16x8_t)vmovl_u8(v12);
      *(int16x4_t *)v14.i8 = vrev64_s16(*(int16x4_t *)v14.i8);
      *(int8x8_t *)v14.i8 = vmovn_s16(v14);
      v22 = v14.i32[0];
      v23 = 0;
      v14.i32[0] = a4->mScope;
      v15 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v14.i8);
      *(int16x4_t *)v15.i8 = vrev64_s16(*(int16x4_t *)v15.i8);
      v20 = vmovn_s16(v15).u32[0];
      v21 = 0;
      v19[0] = BYTE3(result);
      v19[1] = BYTE2(result);
      v19[2] = BYTE1(result);
      v18 = result;
      v19[3] = result;
      v19[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        mElement = a4->mElement;
        *(_DWORD *)buf = 136316674;
        v25 = "HALS_UCPlugIn.cpp";
        v26 = 1024;
        v27 = 1146;
        v28 = 2080;
        v29 = &v22;
        v30 = 2080;
        v31 = &v20;
        v32 = 2048;
        v33 = mElement;
        v34 = 1024;
        v35 = v18;
        v36 = 2080;
        v37 = v19;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_UCPlugIn::ObjectGetPropertyData: failed:  [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = v18;
    }
  }
  else
  {
    v13 = (uint64_t (*)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, unsigned int *, void *))*((_QWORD *)this + 68);
    if (v13)
    {
      result = v13(a2, a4, a5, a6, a7, a8, a9);
      if ((_DWORD)result)
        goto LABEL_7;
    }
  }
  return result;
}

uint64_t HALS_UCPlugIn::ObjectSetPropertyData(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, uint64_t a7, const void *a8)
{
  uint64_t result;
  uint8x8_t v11;
  uint64_t (*v12)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *);
  int16x8_t v13;
  int16x8_t v14;
  uint64_t mElement;
  _DWORD *exception;
  int v17;
  _BYTE v18[5];
  unsigned __int32 v19;
  char v20;
  __int32 v21;
  char v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  __int32 *v28;
  __int16 v29;
  unsigned __int32 *v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  _BYTE *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  result = *((_QWORD *)this + 3);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *))(*(_QWORD *)result + 120))(result, a2, a3, a4, a5, a6, a7, a8);
    if ((_DWORD)result)
    {
LABEL_7:
      v11.i32[0] = a4->mSelector;
      v13 = (int16x8_t)vmovl_u8(v11);
      *(int16x4_t *)v13.i8 = vrev64_s16(*(int16x4_t *)v13.i8);
      *(int8x8_t *)v13.i8 = vmovn_s16(v13);
      v21 = v13.i32[0];
      v22 = 0;
      v13.i32[0] = a4->mScope;
      v14 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v13.i8);
      *(int16x4_t *)v14.i8 = vrev64_s16(*(int16x4_t *)v14.i8);
      v19 = vmovn_s16(v14).u32[0];
      v20 = 0;
      v18[0] = BYTE3(result);
      v18[1] = BYTE2(result);
      v18[2] = BYTE1(result);
      v17 = result;
      v18[3] = result;
      v18[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        mElement = a4->mElement;
        *(_DWORD *)buf = 136316674;
        v24 = "HALS_UCPlugIn.cpp";
        v25 = 1024;
        v26 = 1160;
        v27 = 2080;
        v28 = &v21;
        v29 = 2080;
        v30 = &v19;
        v31 = 2048;
        v32 = mElement;
        v33 = 1024;
        v34 = v17;
        v35 = 2080;
        v36 = v18;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_UCPlugIn::ObjectSetPropertyData: failed:  [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = v17;
    }
  }
  else
  {
    v12 = (uint64_t (*)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *))*((_QWORD *)this + 69);
    if (v12)
    {
      result = v12(a2, a4, a5, a6, a7, a8);
      if ((_DWORD)result)
        goto LABEL_7;
    }
  }
  return result;
}

void make_stream_list(void **a1, HALS_IODevice *this, char a3)
{
  char v3;
  void **v4;
  unsigned int NumberStreams;
  uint64_t v6;
  unsigned int *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  void **v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;

  v3 = a3;
  v4 = a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  NumberStreams = HALS_IODevice::GetNumberStreams(this, a3);
  v42 = NumberStreams;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::reserve(v4, NumberStreams);
  if (NumberStreams)
  {
    v6 = 0;
    v37 = v4;
    v36 = v3;
    do
    {
      v7 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(this, v3, v6);
      v8 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 200))(v7);
      v9 = v7[21];
      v10 = v7[4];
      v53 = 0x676C6F6270667420;
      v54 = 0;
      v55 = 0;
      (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, int *, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v7 + 112))(v7, v10, &v53, 40, &v55, &v44, 0, 0, 0);
      v11 = v45;
      v12 = v46;
      v13 = v47;
      v14 = v48;
      v16 = v49;
      v15 = v50;
      v17 = v51;
      if (v45 == 1819304813 && (v46 & 0x40) == 0)
      {
        v16 = 4 * v50;
        v17 = 32;
        v12 = 9;
        v14 = 1;
        v13 = 4 * v50;
      }
      v18 = v44;
      v19 = v52;
      v21 = v4[1];
      v20 = (unint64_t)v4[2];
      if ((unint64_t)v21 >= v20)
      {
        v38 = v52;
        v39 = v50;
        v41 = v6;
        v23 = v45;
        v40 = v17;
        v24 = *v4;
        v25 = 0x6DB6DB6DB6DB6DB7 * (((char *)v21 - (_BYTE *)*v4) >> 3);
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) > 0x492492492492492)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v27 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v20 - (_QWORD)v24) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x249249249249249)
          v28 = 0x492492492492492;
        else
          v28 = v26;
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v28);
        v31 = &v29[56 * v25];
        *(_DWORD *)v31 = v8;
        *((_DWORD *)v31 + 1) = v9;
        *((_DWORD *)v31 + 2) = 0;
        *((_QWORD *)v31 + 2) = v18;
        *((_DWORD *)v31 + 6) = v23;
        *((_DWORD *)v31 + 7) = v12;
        *((_DWORD *)v31 + 8) = v13;
        *((_DWORD *)v31 + 9) = v14;
        *((_DWORD *)v31 + 10) = v16;
        *((_DWORD *)v31 + 11) = v39;
        *((_DWORD *)v31 + 12) = v40;
        *((_DWORD *)v31 + 13) = v38;
        v32 = v31;
        if (v21 == v24)
        {
          v4 = v37;
          v6 = v41;
        }
        else
        {
          v4 = v37;
          v6 = v41;
          do
          {
            v33 = *(_OWORD *)(v21 - 14);
            v34 = *(_OWORD *)(v21 - 10);
            v35 = *(_OWORD *)(v21 - 6);
            *((_QWORD *)v32 - 1) = *((_QWORD *)v21 - 1);
            *(_OWORD *)(v32 - 24) = v35;
            *(_OWORD *)(v32 - 40) = v34;
            *(_OWORD *)(v32 - 56) = v33;
            v32 -= 56;
            v21 -= 14;
          }
          while (v21 != v24);
          v21 = v24;
        }
        v22 = v31 + 56;
        *v4 = v32;
        v4[1] = v31 + 56;
        v4[2] = &v29[56 * v30];
        v3 = v36;
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v21 = v8;
        v21[1] = v9;
        v21[2] = 0;
        *((_QWORD *)v21 + 2) = v18;
        v21[6] = v11;
        v21[7] = v12;
        v21[8] = v13;
        v21[9] = v14;
        v21[10] = v16;
        v21[11] = v15;
        v22 = v21 + 14;
        v21[12] = v17;
        v21[13] = v19;
      }
      v4[1] = v22;
      ++v6;
    }
    while (v6 != v42);
  }
}

void sub_1B59FC8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  void *v14;

  v14 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOA2Stream::Activate(HALS_IOA2Stream *this)
{
  HALS_Object *v2;

  HALS_IOA2Stream::BuildFormatList(this);
  HALS_Object::Activate(this, v2);
}

void HALS_IOA2Stream::~HALS_IOA2Stream(HALS_IOA2Stream *this)
{
  *(_QWORD *)this = off_1E697CF28;
  HALB_FormatList::~HALB_FormatList((HALS_IOA2Stream *)((char *)this + 72));
  HALS_Object::~HALS_Object(this);
}

{
  *(_QWORD *)this = off_1E697CF28;
  HALB_FormatList::~HALB_FormatList((HALS_IOA2Stream *)((char *)this + 72));
  HALS_Object::~HALS_Object(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_IOA2Stream::HasProperty(HALS_IOA2Stream *this, unsigned int a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(HALS_IOA2Stream *, const AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 176))(this, a3, a4);
  if ((_DWORD)result)
  {
    if (a3->mSelector == 1935762292)
    {
      return 1;
    }
    else if (a3->mSelector == 1952542835)
    {
      return *((_BYTE *)this + 52) != 0;
    }
    else
    {
      return HALS_Stream::HasProperty(this, a2, a3, a4);
    }
  }
  return result;
}

uint64_t HALS_IOA2Stream::IsPropertySettable(HALS_IOA2Stream *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  _DWORD *exception;

  if (((*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 88))(this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  if (a3->mSelector == 1935762292)
    return 1;
  else
    return HALS_Stream::IsPropertySettable((uint64_t)this, a2, (int *)a3);
}

uint64_t HALS_IOA2Stream::GetPropertyDataSize(HALS_IOA2Stream *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, HALS_Client *a6)
{
  AudioObjectPropertySelector mSelector;
  HALB_Mutex *v10;
  _QWORD *v11;
  uint64_t PropertyDataSize;
  _DWORD *exception;
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;

  if (((*(uint64_t (**)(HALS_IOA2Stream *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a6) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1936092450)
  {
    if (mSelector == 1936092451)
    {
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 0x40000000;
      v17[2] = ___ZNK15HALS_IOA2Stream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2;
      v17[3] = &unk_1E697D040;
      v17[4] = &v19;
      v17[5] = this;
      v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
      v11 = v17;
      goto LABEL_12;
    }
    if (mSelector == 1936092513)
    {
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 0x40000000;
      v18[2] = ___ZNK15HALS_IOA2Stream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
      v18[3] = &unk_1E697D018;
      v18[4] = &v19;
      v18[5] = this;
      v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
      v11 = v18;
      goto LABEL_12;
    }
  }
  else
  {
    if (mSelector == 1885762595)
    {
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 0x40000000;
      v15[2] = ___ZNK15HALS_IOA2Stream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4;
      v15[3] = &unk_1E697D090;
      v15[4] = &v19;
      v15[5] = this;
      v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
      v11 = v15;
      goto LABEL_12;
    }
    if (mSelector == 1885762657)
    {
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 0x40000000;
      v16[2] = ___ZNK15HALS_IOA2Stream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3;
      v16[3] = &unk_1E697D068;
      v16[4] = &v19;
      v16[5] = this;
      v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
      v11 = v16;
LABEL_12:
      HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v11);
      PropertyDataSize = *((unsigned int *)v20 + 6);
      goto LABEL_13;
    }
  }
  PropertyDataSize = HALS_Stream::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
  *((_DWORD *)v20 + 6) = PropertyDataSize;
LABEL_13:
  _Block_object_dispose(&v19, 8);
  return PropertyDataSize;
}

void sub_1B59FCE54(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void HALS_IOA2Stream::GetPropertyData(HALS_IOA2Stream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, char *a6, uint64_t a7, HALS_ObjectMap *a8, HALS_Client *a9)
{
  AudioObjectPropertySelector mSelector;
  BOOL v19;
  unsigned __int16 v20;
  int v22;
  uint64_t v24;
  uint64_t v25;
  HALS_Object *v26;
  unint64_t v27;
  HALS_Object *v28;
  _BOOL4 v29;
  signed int v30;
  uint64_t v31;
  HALB_Mutex *v32;
  HALB_Mutex *v33;
  uint64_t *v34;
  HALB_Mutex *v35;
  uint64_t v36;
  int64x2_t v37;
  HALB_Mutex *v38;
  HALS_Object *v39;
  int v40;
  int v41;
  HALB_Mutex *v42;
  HALS_ObjectMap *v43;
  HALS_Object *v44;
  HALS_IODevice *v45;
  HALS_ObjectMap *v46;
  AudioObjectPropertySelector v47;
  HALB_Mutex *v48;
  HALS_Object *v49;
  HALB_Mutex *v50;
  HALS_Object *v51;
  HALB_Mutex *v52;
  _DWORD *v53;
  HALB_Mutex *v54;
  uint64_t v55;
  HALB_Mutex *v56;
  HALB_Mutex *v57;
  uint64_t v58;
  HALB_Mutex *v59;
  uint64_t v60;
  int64x2_t v61;
  int NeighborStartingChannel;
  HALB_Mutex *v63;
  _QWORD *v64;
  HALB_Mutex *v65;
  HALS_Object *v66;
  _DWORD *exception;
  _DWORD *v68;
  _DWORD *v69;
  NSObject *v70;
  const char *v71;
  _DWORD *v72;
  _DWORD *v73;
  NSObject *v74;
  const char *v75;
  _DWORD *v76;
  HALS_ObjectMap *v77;
  _QWORD v78[6];
  HALS_ObjectMap *v79;
  _QWORD v80[6];
  HALS_ObjectMap *v81;
  _QWORD v82[6];
  _QWORD v83[6];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  _BYTE *v88;
  HALS_IOA2Stream *v89;
  char *v90;
  _BYTE v91[24];
  void *v92;
  HALS_IOA2Stream *v93;
  HALS_ObjectMap *v94;
  char *v95;
  uint64_t v96;
  HALS_Object *v97;
  int v98;
  BOOL v99;
  uint8_t v100[4];
  const char *v101;
  __int16 v102;
  int v103;
  _BYTE buf[24];
  char v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_IOA2Stream *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1885762668)
  {
    v19 = mSelector - 1936092479 <= 0x35 && ((1 << (mSelector - 63)) & 0x20400400000001) != 0
       || mSelector == 1936092451;
    v20 = 29805;
  }
  else
  {
    v19 = mSelector - 1885762592 <= 0x1F && ((1 << (mSelector - 32)) & 0x80000009) != 0 || mSelector == 1819569763;
    v20 = 29793;
  }
  v22 = v20 | 0x70660000;
  if (v19 || mSelector == v22)
  {
    v24 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
    v77 = (HALS_ObjectMap *)v24;
    if (!v24)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v91 = 136315394;
        *(_QWORD *)&v91[4] = "HALS_IOA2Stream.cpp";
        *(_WORD *)&v91[12] = 1024;
        *(_DWORD *)&v91[14] = 128;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Stream::GetPropertyDataWithNominalSampleRate: owning device is missing", v91, 0x12u);
      }
      v68 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v68 = &off_1E69A1B30;
      v68[2] = 560947818;
    }
    v25 = (*(uint64_t (**)(uint64_t, HALS_Client *))(*(_QWORD *)v24 + 696))(v24, a9);
    v27 = v25;
    v28 = v26;
    if (a9)
      v29 = *((_BYTE *)a9 + 258) == 0;
    else
      v29 = 1;
    v30 = a3->mSelector;
    if ((int)a3->mSelector <= 1885762668)
    {
      if (v30 > 1885762594)
      {
        switch(v30)
        {
          case 1885762595:
            v84 = 0;
            v85 = (uint64_t)&v84;
            v86 = 0x2000000000;
            v87 = 0;
            *(_QWORD *)v91 = MEMORY[0x1E0C809B0];
            *(_QWORD *)&v91[8] = 0x40000000;
            *(_QWORD *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3_20;
            v92 = &unk_1E697D210;
            LODWORD(v96) = a4;
            v93 = (HALS_IOA2Stream *)&v84;
            v94 = this;
            v95 = a6;
            v57 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v57, (uint64_t)v91);
            v58 = *(_QWORD *)(v85 + 24);
            *a5 = 40 * v58;
            if ((_BYTE)v28 && v58)
            {
              do
              {
                *(_QWORD *)a6 = v27;
                a6 += 40;
                --v58;
              }
              while (v58);
            }
            break;
          case 1885762623:
            if (a4 <= 0x27)
            {
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_135;
              *(_DWORD *)v91 = 136315394;
              *(_QWORD *)&v91[4] = "HALS_IOA2Stream.cpp";
              *(_WORD *)&v91[12] = 1024;
              *(_DWORD *)&v91[14] = 278;
              v70 = MEMORY[0x1E0C81028];
              v71 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatSupported";
              goto LABEL_134;
            }
            *a5 = 40;
            v84 = 0;
            v85 = (uint64_t)&v84;
            v86 = 0x2000000000;
            LOBYTE(v87) = 0;
            *(_QWORD *)v91 = MEMORY[0x1E0C809B0];
            *(_QWORD *)&v91[8] = 0x40000000;
            *(_QWORD *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_22;
            v92 = &unk_1E697D238;
            v95 = (char *)v25;
            v96 = (uint64_t)v26;
            v93 = (HALS_IOA2Stream *)&v84;
            v94 = this;
            v97 = (HALS_Object *)a6;
            v52 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v52, (uint64_t)v91);
            if (!*(_BYTE *)(v85 + 24))
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_IOA2Stream.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 295;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: kAudioStreamPropertyPhysicalFormatSupported: the format is not supported", buf, 0x12u);
              }
              v53 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v53 = &off_1E69A1B30;
              v53[2] = 560226676;
            }
            break;
          case 1885762657:
            v84 = 0;
            v85 = (uint64_t)&v84;
            v86 = 0x2000000000;
            v87 = 0;
            *(_QWORD *)v91 = MEMORY[0x1E0C809B0];
            *(_QWORD *)&v91[8] = 0x40000000;
            *(_QWORD *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_18;
            v92 = &unk_1E697D1E8;
            LODWORD(v96) = a4;
            v93 = (HALS_IOA2Stream *)&v84;
            v94 = this;
            v95 = a6;
            v35 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v35, (uint64_t)v91);
            v36 = *(_QWORD *)(v85 + 24);
            *a5 = 56 * v36;
            if ((_BYTE)v28 && v36)
            {
              v37 = vdupq_n_s64(v27);
              do
              {
                *(_QWORD *)a6 = v27;
                *(int64x2_t *)(a6 + 40) = v37;
                a6 += 56;
                --v36;
              }
              while (v36);
            }
            break;
          default:
            goto LABEL_94;
        }
        goto LABEL_91;
      }
      if (v30 == 1819569763)
      {
        if (a4 <= 3)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_135;
          *(_DWORD *)v91 = 136315394;
          *(_QWORD *)&v91[4] = "HALS_IOA2Stream.cpp";
          *(_WORD *)&v91[12] = 1024;
          *(_DWORD *)&v91[14] = 139;
          v70 = MEMORY[0x1E0C81028];
          v71 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioStreamPropertyLatency";
          goto LABEL_134;
        }
        *(_QWORD *)v91 = MEMORY[0x1E0C809B0];
        *(_QWORD *)&v91[8] = 1174405120;
        *(_QWORD *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
        v92 = &__block_descriptor_tmp_5_5152;
        v93 = this;
        v94 = v77;
        HALS_ObjectMap::RetainObject(v77, v26);
        v95 = (char *)v27;
        v96 = (uint64_t)v28;
        v97 = (HALS_Object *)a6;
        v50 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v50, (uint64_t)v91);
        *a5 = 4;
        HALS_ObjectMap::ReleaseObject(v94, v51);
LABEL_93:
        HALS_ObjectMap::ReleaseObject(v77, v39);
        return;
      }
      if (v30 != 1885762592)
        goto LABEL_94;
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_135;
        *(_DWORD *)v91 = 136315394;
        *(_QWORD *)&v91[4] = "HALS_IOA2Stream.cpp";
        *(_WORD *)&v91[12] = 1024;
        *(_DWORD *)&v91[14] = 250;
        v70 = MEMORY[0x1E0C81028];
        v71 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormat";
        goto LABEL_134;
      }
      *(_QWORD *)v91 = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v91[8] = 0x40000000;
      *(_QWORD *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_16;
      v92 = &__block_descriptor_tmp_17_5164;
      v93 = this;
      v94 = (HALS_ObjectMap *)a6;
      v42 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v42, (uint64_t)v91);
    }
    else
    {
      if (v30 <= 1936092512)
      {
        if (v30 != 1885762669)
        {
          if (v30 != 1936092451)
          {
            if (v30 == 1936092479)
            {
              if (a4 > 0x27)
              {
                *a5 = 40;
                *(_QWORD *)buf = 0;
                *(_QWORD *)&buf[8] = buf;
                *(_QWORD *)&buf[16] = 0x2000000000;
                v31 = MEMORY[0x1E0C809B0];
                v105 = 0;
                *(_QWORD *)v91 = MEMORY[0x1E0C809B0];
                *(_QWORD *)&v91[8] = 0x40000000;
                *(_QWORD *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_10;
                v92 = &unk_1E697D158;
                v95 = (char *)v25;
                v96 = (uint64_t)v26;
                v93 = (HALS_IOA2Stream *)buf;
                v94 = this;
                v97 = (HALS_Object *)a6;
                v32 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
                HALB_CommandGate::ExecuteCommand(v32, (uint64_t)v91);
                v84 = v31;
                v85 = 0x40000000;
                v86 = (uint64_t)___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_12;
                v87 = &unk_1E697D180;
                v88 = buf;
                v89 = this;
                v90 = a6;
                v33 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
                HALB_CommandGate::ExecuteCommand(v33, (uint64_t)&v84);
                if (!*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
                {
                  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v100 = 136315394;
                    v101 = "HALS_IOA2Stream.cpp";
                    v102 = 1024;
                    v103 = 207;
                    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: kAudioDevicePropertyStreamFormatSupported: the format is not supported", v100, 0x12u);
                  }
                  v73 = __cxa_allocate_exception(0x10uLL);
                  *(_QWORD *)v73 = &off_1E69A1B30;
                  v73[2] = 560226676;
                }
                v34 = (uint64_t *)buf;
                goto LABEL_92;
              }
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
LABEL_135:
                v72 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v72 = &off_1E69A1B30;
                v72[2] = 561211770;
              }
              *(_DWORD *)v91 = 136315394;
              *(_QWORD *)&v91[4] = "HALS_IOA2Stream.cpp";
              *(_WORD *)&v91[12] = 1024;
              *(_DWORD *)&v91[14] = 188;
              v70 = MEMORY[0x1E0C81028];
              v71 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatSupported";
LABEL_134:
              _os_log_impl(&dword_1B57BA000, v70, OS_LOG_TYPE_ERROR, v71, v91, 0x12u);
              goto LABEL_135;
            }
LABEL_94:
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v91 = 136315394;
              *(_QWORD *)&v91[4] = "HALS_IOA2Stream.cpp";
              *(_WORD *)&v91[12] = 1024;
              *(_DWORD *)&v91[14] = 336;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Stream::GetPropertyDataWithNominalSampleRate: Unhandled case.", v91, 0x12u);
            }
            goto LABEL_93;
          }
          v84 = 0;
          v85 = (uint64_t)&v84;
          v86 = 0x2000000000;
          v87 = 0;
          *(_QWORD *)v91 = MEMORY[0x1E0C809B0];
          *(_QWORD *)&v91[8] = 0x40000000;
          *(_QWORD *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3;
          v92 = &unk_1E697D130;
          BYTE4(v96) = v29;
          LODWORD(v96) = a4;
          v93 = (HALS_IOA2Stream *)&v84;
          v94 = this;
          v95 = a6;
          v54 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v54, (uint64_t)v91);
          v55 = *(_QWORD *)(v85 + 24);
          *a5 = 40 * v55;
          if ((_BYTE)v28 && v55)
          {
            do
            {
              *(_QWORD *)a6 = v27;
              a6 += 40;
              --v55;
            }
            while (v55);
          }
LABEL_91:
          v34 = &v84;
LABEL_92:
          _Block_object_dispose(v34, 8);
          goto LABEL_93;
        }
        if (a4 <= 0x27)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_135;
          *(_DWORD *)v91 = 136315394;
          *(_QWORD *)&v91[4] = "HALS_IOA2Stream.cpp";
          *(_WORD *)&v91[12] = 1024;
          *(_DWORD *)&v91[14] = 302;
          v70 = MEMORY[0x1E0C81028];
          v71 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatMatch";
          goto LABEL_134;
        }
        *a5 = 40;
        *(_QWORD *)v91 = MEMORY[0x1E0C809B0];
        *(_QWORD *)&v91[8] = 0x40000000;
        *(_QWORD *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_24;
        v92 = &__block_descriptor_tmp_25_5171;
        v98 = a7;
        v93 = this;
        v94 = a8;
        v95 = a6;
        v96 = v25;
        v97 = v26;
        v56 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
        goto LABEL_86;
      }
      if (v30 == 1936092513)
      {
        v84 = 0;
        v85 = (uint64_t)&v84;
        v86 = 0x2000000000;
        v87 = 0;
        *(_QWORD *)v91 = MEMORY[0x1E0C809B0];
        *(_QWORD *)&v91[8] = 0x40000000;
        *(_QWORD *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
        v92 = &unk_1E697D108;
        BYTE4(v96) = v29;
        LODWORD(v96) = a4;
        v93 = (HALS_IOA2Stream *)&v84;
        v94 = this;
        v95 = a6;
        v59 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v59, (uint64_t)v91);
        v60 = *(_QWORD *)(v85 + 24);
        *a5 = 56 * v60;
        if ((_BYTE)v28 && v60)
        {
          v61 = vdupq_n_s64(v27);
          do
          {
            *(_QWORD *)a6 = v27;
            *(int64x2_t *)(a6 + 40) = v61;
            a6 += 56;
            --v60;
          }
          while (v60);
        }
        goto LABEL_91;
      }
      if (v30 == 1936092525)
      {
        if (a4 <= 0x27)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_135;
          *(_DWORD *)v91 = 136315394;
          *(_QWORD *)&v91[4] = "HALS_IOA2Stream.cpp";
          *(_WORD *)&v91[12] = 1024;
          *(_DWORD *)&v91[14] = 214;
          v70 = MEMORY[0x1E0C81028];
          v71 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatMatch";
          goto LABEL_134;
        }
        *a5 = 40;
        *(_QWORD *)v91 = MEMORY[0x1E0C809B0];
        *(_QWORD *)&v91[8] = 0x40000000;
        *(_QWORD *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_14;
        v92 = &__block_descriptor_tmp_15_5162;
        v99 = v29;
        v98 = a7;
        v93 = this;
        v94 = a8;
        v95 = a6;
        v96 = v25;
        v97 = v26;
        v56 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
LABEL_86:
        HALB_CommandGate::ExecuteCommand(v56, (uint64_t)v91);
        goto LABEL_93;
      }
      if (v30 != 1936092532)
        goto LABEL_94;
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_135;
        *(_DWORD *)v91 = 136315394;
        *(_QWORD *)&v91[4] = "HALS_IOA2Stream.cpp";
        *(_WORD *)&v91[12] = 1024;
        *(_DWORD *)&v91[14] = 158;
        v70 = MEMORY[0x1E0C81028];
        v71 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioStreamPropertyVirtualFormat";
        goto LABEL_134;
      }
      *(_QWORD *)v91 = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v91[8] = 0x40000000;
      *(_QWORD *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_6;
      v92 = &__block_descriptor_tmp_7_5154;
      v93 = this;
      v94 = (HALS_ObjectMap *)a6;
      v38 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v38, (uint64_t)v91);
      if (*((_DWORD *)a6 + 2) == 1819304813 && (a6[12] & 0x40) == 0)
      {
        if (v29)
          v40 = 9;
        else
          v40 = 11;
        v41 = 4 * *((_DWORD *)a6 + 7);
        *((_DWORD *)a6 + 3) = v40;
        *((_DWORD *)a6 + 4) = v41;
        *((_DWORD *)a6 + 5) = 1;
        *((_DWORD *)a6 + 6) = v41;
        *((_DWORD *)a6 + 8) = 32;
      }
    }
    if ((_BYTE)v28)
      *(_QWORD *)a6 = v27;
    *a5 = 40;
    goto LABEL_93;
  }
  v43 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  v46 = v43;
  if (!v43)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v91 = 136315394;
      *(_QWORD *)&v91[4] = "HALS_IOA2Stream.cpp";
      *(_WORD *)&v91[12] = 1024;
      *(_DWORD *)&v91[14] = 375;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: owning device is missing", v91, 0x12u);
    }
    v69 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v69 = &off_1E69A1B30;
    v69[2] = 560947818;
  }
  v47 = a3->mSelector;
  if ((int)a3->mSelector <= 1935960433)
  {
    if (v47 != 1935762292)
    {
      if (v47 != 1935894638)
        goto LABEL_110;
      if (a4 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_150;
        *(_DWORD *)v91 = 136315394;
        *(_QWORD *)&v91[4] = "HALS_IOA2Stream.cpp";
        *(_WORD *)&v91[12] = 1024;
        *(_DWORD *)&v91[14] = 410;
        v74 = MEMORY[0x1E0C81028];
        v75 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioStreamPropertyStartingChannel";
        goto LABEL_149;
      }
      if (*((_DWORD *)this + 14) != 1)
      {
        v78[0] = MEMORY[0x1E0C809B0];
        v78[1] = 1174405120;
        v78[2] = ___ZNK15HALS_IOA2Stream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_31;
        v78[3] = &__block_descriptor_tmp_32_5148;
        v78[4] = this;
        v78[5] = a6;
        v79 = v43;
        HALS_ObjectMap::RetainObject(v43, v44);
        v65 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v65, (uint64_t)v78);
        HALS_ObjectMap::ReleaseObject(v79, v66);
        goto LABEL_109;
      }
      NeighborStartingChannel = HALS_Device::GetNeighborStartingChannel(this, v43, v45);
      goto LABEL_105;
    }
    if (a4 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_150;
      *(_DWORD *)v91 = 136315394;
      *(_QWORD *)&v91[4] = "HALS_IOA2Stream.cpp";
      *(_WORD *)&v91[12] = 1024;
      *(_DWORD *)&v91[14] = 383;
      v74 = MEMORY[0x1E0C81028];
      v75 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioStreamPropertyIsActive";
LABEL_149:
      _os_log_impl(&dword_1B57BA000, v74, OS_LOG_TYPE_ERROR, v75, v91, 0x12u);
LABEL_150:
      v76 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v76 = &off_1E69A1B30;
      v76[2] = 561211770;
    }
    v83[0] = MEMORY[0x1E0C809B0];
    v83[1] = 0x40000000;
    v83[2] = ___ZNK15HALS_IOA2Stream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
    v83[3] = &__block_descriptor_tmp_26_5142;
    v83[4] = this;
    v83[5] = a6;
    v63 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
    v64 = v83;
LABEL_108:
    HALB_CommandGate::ExecuteCommand(v63, (uint64_t)v64);
    goto LABEL_109;
  }
  if (v47 == 1935960434)
  {
    if (a4 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_150;
      *(_DWORD *)v91 = 136315394;
      *(_QWORD *)&v91[4] = "HALS_IOA2Stream.cpp";
      *(_WORD *)&v91[12] = 1024;
      *(_DWORD *)&v91[14] = 392;
      v74 = MEMORY[0x1E0C81028];
      v75 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioStreamPropertyDirection";
      goto LABEL_149;
    }
    v82[0] = MEMORY[0x1E0C809B0];
    v82[1] = 0x40000000;
    v82[2] = ___ZNK15HALS_IOA2Stream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_27;
    v82[3] = &__block_descriptor_tmp_28_5144;
    v82[4] = this;
    v82[5] = a6;
    v63 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
    v64 = v82;
    goto LABEL_108;
  }
  if (v47 == 1952542835)
  {
    if (a4 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_150;
      *(_DWORD *)v91 = 136315394;
      *(_QWORD *)&v91[4] = "HALS_IOA2Stream.cpp";
      *(_WORD *)&v91[12] = 1024;
      *(_DWORD *)&v91[14] = 430;
      v74 = MEMORY[0x1E0C81028];
      v75 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioStreamPropertyIsReferenceStream";
      goto LABEL_149;
    }
    NeighborStartingChannel = *((_DWORD *)this + 14) == 1;
LABEL_105:
    *(_DWORD *)a6 = NeighborStartingChannel;
LABEL_109:
    *a5 = 4;
    goto LABEL_111;
  }
  if (v47 != 1952805485)
  {
LABEL_110:
    HALS_Stream::GetPropertyData(this, a2, a3, a4, a5, (uint64_t *)a6, a7, a8, a9);
    goto LABEL_111;
  }
  if (a4 <= 3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_150;
    *(_DWORD *)v91 = 136315394;
    *(_QWORD *)&v91[4] = "HALS_IOA2Stream.cpp";
    *(_WORD *)&v91[12] = 1024;
    *(_DWORD *)&v91[14] = 401;
    v74 = MEMORY[0x1E0C81028];
    v75 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioStreamPropertyTerminalType";
    goto LABEL_149;
  }
  v80[0] = MEMORY[0x1E0C809B0];
  v80[1] = 1174405120;
  v80[2] = ___ZNK15HALS_IOA2Stream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_29;
  v80[3] = &__block_descriptor_tmp_30_5146;
  v80[4] = this;
  v80[5] = a6;
  v81 = v43;
  HALS_ObjectMap::RetainObject(v43, v44);
  v48 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v48, (uint64_t)v80);
  *a5 = 4;
  HALS_ObjectMap::ReleaseObject(v81, v49);
LABEL_111:
  HALS_ObjectMap::ReleaseObject(v46, v44);
}

void sub_1B59FE154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, HALS_ObjectMap *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, HALS_ObjectMap *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,HALS_ObjectMap *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,HALS_ObjectMap *a50)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void HALS_IOA2Stream::SetPropertyData(HALS_IOA2Stream *this, uint64_t a2, const AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  const AudioObjectPropertyAddress *v14;
  HALS_Device *v15;
  AudioObjectPropertySelector mSelector;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  HALB_Mutex *v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  HALB_Mutex *v25;
  uint64_t v26;
  HALS_Object *v27;
  HALS_ObjectMap *v28;
  int v29;
  HALB_Mutex *v30;
  uint64_t v31;
  HALB_Mutex *v32;
  uint64_t v33;
  HALS_Object *v34;
  HALS_ObjectMap *v35;
  int v36;
  HALB_Mutex *v37;
  HALS_Object *v38;
  _DWORD *exception;
  _DWORD *v40;
  int v41;
  NSObject *v42;
  const char *v43;
  _DWORD *v44;
  _DWORD *v45;
  int v46;
  _DWORD *v47;
  int v48;
  _QWORD v49[8];
  _QWORD v50[8];
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  _QWORD v55[7];
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t);
  void *v59;
  HALS_Client *v60;
  int v61;
  _BYTE buf[24];
  __n128 (*v63)(uint64_t, uint64_t);
  uint64_t (*v64)();
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_IOA2Stream *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *, const void *, uint64_t, const void *))(*(_QWORD *)this + 96))(this, a2, a3, a8, a5, a6, a7) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v15 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  if (!v15)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_IOA2Stream.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 447;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Stream::SetPropertyData: owning device is missing", buf, 0x12u);
    }
    v40 = __cxa_allocate_exception(0x10uLL);
    v41 = 560947818;
LABEL_35:
    *(_QWORD *)v40 = &off_1E69A1B30;
    v40[2] = v41;
  }
  mSelector = a3->mSelector;
  if (!HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, v14))
    goto LABEL_6;
  if (!HALS_Device::IsHogModeOwnerOrFree(v15, a8))
  {
    v40 = __cxa_allocate_exception(0x10uLL);
    v41 = 560492391;
    goto LABEL_35;
  }
  mSelector = a3->mSelector;
LABEL_6:
  if (mSelector == 1885762592)
  {
    if (a4 <= 0x27)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_44;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_IOA2Stream.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 519;
      v42 = MEMORY[0x1E0C81028];
      v43 = "%25s:%-5d  HALS_IOA2Stream::_SetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormat";
LABEL_43:
      _os_log_impl(&dword_1B57BA000, v42, OS_LOG_TYPE_ERROR, v43, buf, 0x12u);
LABEL_44:
      v44 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v44 = &off_1E69A1B30;
      v44[2] = 561211770;
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x5002000000;
    v63 = __Block_byref_object_copy__5134;
    v64 = __Block_byref_object_dispose__5135;
    v51 = 0;
    v52 = &v51;
    v53 = 0x2000000000;
    v54 = 0;
    v31 = MEMORY[0x1E0C809B0];
    v49[0] = MEMORY[0x1E0C809B0];
    v49[1] = 0x40000000;
    v49[2] = ___ZN15HALS_IOA2Stream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_36;
    v49[3] = &unk_1E697D370;
    v49[6] = this;
    v49[7] = a5;
    v49[4] = buf;
    v49[5] = &v51;
    v32 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v32, (uint64_t)v49);
    if (*((_DWORD *)v52 + 6))
    {
      v47 = __cxa_allocate_exception(0x10uLL);
      v48 = *((_DWORD *)v52 + 6);
      *(_QWORD *)v47 = &off_1E69A1B30;
      v47[2] = v48;
    }
    if (a8
      && (*(_DWORD *)(*(_QWORD *)&buf[8] + 48) != 1819304813 || (*(_DWORD *)(*(_QWORD *)&buf[8] + 52) & 0x40) != 0))
    {
      v33 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
      v35 = (HALS_ObjectMap *)v33;
      if (v33)
      {
        v36 = *(_DWORD *)(v33 + 16);
        v56 = v31;
        v57 = 0x40000000;
        v58 = ___ZN11HALS_Client19SetNonMixableFormatEj_block_invoke;
        v59 = &__block_descriptor_tmp_14_2053;
        v60 = a8;
        v61 = v36;
        v37 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Client *))(*(_QWORD *)a8 + 56))(a8);
        HALB_CommandGate::ExecuteCommand(v37, (uint64_t)&v56);
      }
      HALS_ObjectMap::ReleaseObject(v35, v34);
    }
LABEL_28:
    _Block_object_dispose(&v51, 8);
    goto LABEL_29;
  }
  if (mSelector == 1936092532)
  {
    if (a4 <= 0x27)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_44;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_IOA2Stream.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 480;
      v42 = MEMORY[0x1E0C81028];
      v43 = "%25s:%-5d  HALS_IOA2Stream::_SetPropertyData: bad property data size for kAudioStreamPropertyVirtualFormat";
      goto LABEL_43;
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x5002000000;
    v63 = __Block_byref_object_copy__5134;
    v64 = __Block_byref_object_dispose__5135;
    v51 = 0;
    v52 = &v51;
    v53 = 0x2000000000;
    v54 = 0;
    v24 = MEMORY[0x1E0C809B0];
    v50[0] = MEMORY[0x1E0C809B0];
    v50[1] = 0x40000000;
    v50[2] = ___ZN15HALS_IOA2Stream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_34;
    v50[3] = &unk_1E697D348;
    v50[6] = this;
    v50[7] = a5;
    v50[4] = buf;
    v50[5] = &v51;
    v25 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v50);
    if (*((_DWORD *)v52 + 6))
    {
      v45 = __cxa_allocate_exception(0x10uLL);
      v46 = *((_DWORD *)v52 + 6);
      *(_QWORD *)v45 = &off_1E69A1B30;
      v45[2] = v46;
    }
    if (a8
      && (*(_DWORD *)(*(_QWORD *)&buf[8] + 48) != 1819304813 || (*(_DWORD *)(*(_QWORD *)&buf[8] + 52) & 0x40) != 0))
    {
      v26 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
      v28 = (HALS_ObjectMap *)v26;
      if (v26)
      {
        v29 = *(_DWORD *)(v26 + 16);
        v56 = v24;
        v57 = 0x40000000;
        v58 = ___ZN11HALS_Client19SetNonMixableFormatEj_block_invoke;
        v59 = &__block_descriptor_tmp_14_2053;
        v60 = a8;
        v61 = v29;
        v30 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Client *))(*(_QWORD *)a8 + 56))(a8);
        HALB_CommandGate::ExecuteCommand(v30, (uint64_t)&v56);
      }
      HALS_ObjectMap::ReleaseObject(v28, v27);
    }
    goto LABEL_28;
  }
  if (mSelector != 1935762292)
    HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v17, v18, v19, v20, (uint64_t)a8);
  if (a4 <= 3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_44;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_IOA2Stream.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 455;
    v42 = MEMORY[0x1E0C81028];
    v43 = "%25s:%-5d  HALS_IOA2Stream::_SetPropertyData: bad property data size for kAudioStreamPropertyIsActive";
    goto LABEL_43;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2000000000;
  LODWORD(v63) = 0;
  v55[0] = MEMORY[0x1E0C809B0];
  v55[1] = 0x40000000;
  v55[2] = ___ZN15HALS_IOA2Stream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
  v55[3] = &unk_1E697D320;
  v55[5] = this;
  v55[6] = a5;
  v55[4] = buf;
  v21 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v21, (uint64_t)v55);
  if (*(_DWORD *)(*(_QWORD *)&buf[8] + 24))
  {
    v22 = __cxa_allocate_exception(0x10uLL);
    v23 = *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
    *(_QWORD *)v22 = &off_1E69A1B30;
    v22[2] = v23;
  }
LABEL_29:
  _Block_object_dispose(buf, 8);
  HALS_ObjectMap::ReleaseObject(v15, v38);
}

void sub_1B59FE8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t HALS_IOA2Stream::GetIOBuffer(HALS_IOA2Stream *this)
{
  return *((_QWORD *)this + 16);
}

uint64_t HALS_IOA2Stream::GetIOBufferByteSize(HALS_IOA2Stream *this)
{
  return *((unsigned int *)this + 34);
}

void ___ZN15HALS_IOA2Stream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  HALS_Object *v4;
  HALS_ObjectMap *v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v2 + 48));
  v5 = (HALS_ObjectMap *)v3;
  if (v3 && !*(_DWORD *)(v2 + 56))
    HALS_IOA2UCDevice::SetStreamActive((HALS_IOA2UCDevice *)(v3 + 1808), *(_DWORD *)(v2 + 60), **(_DWORD **)(a1 + 48) != 0);
  *(_BYTE *)(v2 + 64) = **(_DWORD **)(a1 + 48) != 0;
  HALS_ObjectMap::ReleaseObject(v5, v4);
}

void sub_1B59FEA04(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  HALS_ObjectMap *v15;
  int v16;
  _DWORD *v18;
  int v19;

  v16 = (int)a2;
  HALS_ObjectMap::ReleaseObject(v15, a2);
  v18 = __cxa_begin_catch(a1);
  if (v16 == 2)
    v19 = v18[2];
  else
    v19 = 2003329396;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 32) + 8) + 24) = v19;
  __cxa_end_catch();
}

__n128 __Block_byref_object_copy__5134(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 40);
  v3 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZN15HALS_IOA2Stream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_34(_QWORD *a1)
{
  unsigned int *v2;
  AudioStreamBasicDescription *v3;
  uint64_t v4;
  const AudioStreamBasicDescription *v5;
  __int128 v6;
  uint64_t v7;
  HALS_Object *v8;
  HALS_ObjectMap *v9;
  AudioStreamBasicDescription v10;
  AudioStreamBasicDescription v11;

  v2 = (unsigned int *)a1[6];
  HALS_IOA2Stream::GetCurrentHWFormat((HALS_IOA2Stream *)v2, &v10);
  v4 = a1[7];
  v5 = (const AudioStreamBasicDescription *)(*(_QWORD *)(a1[4] + 8) + 40);
  v6 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)&v11.mSampleRate = *(_OWORD *)v4;
  *(_OWORD *)&v11.mBytesPerPacket = v6;
  *(_QWORD *)&v11.mBitsPerChannel = *(_QWORD *)(v4 + 32);
  if (v11.mFormatID == 1819304813)
  {
    v11.mBitsPerChannel = 0;
    *(_QWORD *)&v11.mFramesPerPacket = 0;
    *(_QWORD *)&v11.mFormatFlags = 0;
  }
  HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)(v2 + 18), &v11, v5, v3, v10.mSampleRate);
  v7 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v2[12]);
  v9 = (HALS_ObjectMap *)v7;
  if (v7)
    HALS_IOA2UCDevice::SetStreamCurrentFormat((HALS_IOA2UCDevice *)(v7 + 1808), v2[15], (const AudioStreamBasicDescription *)(*(_QWORD *)(a1[4] + 8) + 40));
  HALS_ObjectMap::ReleaseObject(v9, v8);
}

void sub_1B59FEB40(void *a1, HALS_Object *a2)
{
  uint64_t v2;
  HALS_ObjectMap *v3;
  int v4;
  _DWORD *v6;

  v4 = (int)a2;
  HALS_ObjectMap::ReleaseObject(v3, a2);
  v6 = __cxa_begin_catch(a1);
  if (v4 == 2)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 24) = v6[2];
  else
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 24) = 2003329396;
  __cxa_end_catch();
  JUMPOUT(0x1B59FEB2CLL);
}

void ___ZN15HALS_IOA2Stream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_36(uint64_t a1)
{
  unsigned int *v2;
  AudioStreamBasicDescription *v3;
  uint64_t v4;
  HALS_Object *v5;
  HALS_ObjectMap *v6;
  AudioStreamBasicDescription v7;

  v2 = *(unsigned int **)(a1 + 48);
  HALS_IOA2Stream::GetCurrentHWFormat((HALS_IOA2Stream *)v2, &v7);
  HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)(v2 + 18), *(const AudioStreamBasicDescription **)(a1 + 56), (const AudioStreamBasicDescription *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v3, v7.mSampleRate);
  v4 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v2[12]);
  v6 = (HALS_ObjectMap *)v4;
  if (v4)
    HALS_IOA2UCDevice::SetStreamCurrentFormat((HALS_IOA2UCDevice *)(v4 + 1808), v2[15], (const AudioStreamBasicDescription *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
  HALS_ObjectMap::ReleaseObject(v6, v5);
}

void sub_1B59FEC30(void *a1, HALS_Object *a2)
{
  uint64_t v2;
  HALS_ObjectMap *v3;
  int v4;
  _DWORD *v6;

  v4 = (int)a2;
  HALS_ObjectMap::ReleaseObject(v3, a2);
  v6 = __cxa_begin_catch(a1);
  if (v4 == 2)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 24) = v6[2];
  else
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 24) = 2003329396;
  __cxa_end_catch();
  JUMPOUT(0x1B59FEC1CLL);
}

void HALS_IOA2Stream::GetCurrentHWFormat(HALS_IOA2Stream *this, AudioStreamBasicDescription *a2)
{
  uint64_t v4;
  HALS_Object *v5;
  HALS_ObjectMap *v6;
  CFArrayRef v7;
  CACFDictionary *v8;
  uint64_t v9;
  char UInt32;
  NSObject *v11;
  const char *v12;
  _DWORD *exception;
  CACFDictionary *v14;
  CFArrayRef v15;
  __int16 v16;
  unint64_t v17;
  _BYTE buf[12];
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  v6 = (HALS_ObjectMap *)v4;
  if (v4)
  {
    v7 = HALS_IOA2UCDevice::CopyStreamDictionaryByID((const __CFDictionary **)(v4 + 1808), *((_DWORD *)this + 15));
    v15 = v7;
    v16 = 1;
    if (!v7)
    {
LABEL_16:
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v15);
      goto LABEL_17;
    }
    v14 = 0;
    if ((CACFDictionary::GetDictionary((uint64_t)v7, CFSTR("current format"), &v14) & 1) != 0)
    {
      v8 = v14;
      v17 = 0;
      *(_QWORD *)buf = v14;
      *(_WORD *)&buf[8] = 0;
      *(_OWORD *)&a2->mSampleRate = 0u;
      *(_OWORD *)&a2->mBytesPerPacket = 0u;
      *(_QWORD *)&a2->mBitsPerChannel = 0;
      if (CACFDictionary::GetUInt64((uint64_t)v8, CFSTR("sample rate"), &v17)
        && (v9 = *(_QWORD *)buf,
            a2->mSampleRate = (double)v17 * 2.32830644e-10 + (double)HIDWORD(v17),
            CACFDictionary::GetUInt32(v9, CFSTR("format ID"), &a2->mFormatID))
        && CACFDictionary::GetUInt32(*(uint64_t *)buf, CFSTR("format flags"), &a2->mFormatFlags)
        && CACFDictionary::GetUInt32(*(uint64_t *)buf, CFSTR("bytes per packet"), &a2->mBytesPerPacket)
        && CACFDictionary::GetUInt32(*(uint64_t *)buf, CFSTR("frames per packet"), &a2->mFramesPerPacket)
        && CACFDictionary::GetUInt32(*(uint64_t *)buf, CFSTR("bytes per frame"), &a2->mBytesPerFrame)
        && CACFDictionary::GetUInt32(*(uint64_t *)buf, CFSTR("channels per frame"), &a2->mChannelsPerFrame))
      {
        UInt32 = CACFDictionary::GetUInt32(*(uint64_t *)buf, CFSTR("bits per channel"), &a2->mBitsPerChannel);
      }
      else
      {
        UInt32 = 0;
      }
      if (a2->mFormatID == 1819304813)
        a2->mFormatFlags &= ~0x40u;
      CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
      if ((UInt32 & 1) != 0)
        goto LABEL_16;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
LABEL_23:
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 1852797029;
      }
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_IOA2UCDevice.cpp";
      v19 = 1024;
      v20 = 655;
      v11 = MEMORY[0x1E0C81028];
      v12 = "%25s:%-5d  HALS_IOA2UCDevice::GetStreamInfoByID_CurrentFormat: the current format is not formatted correctly";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_23;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_IOA2UCDevice.cpp";
      v19 = 1024;
      v20 = 653;
      v11 = MEMORY[0x1E0C81028];
      v12 = "%25s:%-5d  HALS_IOA2UCDevice::GetStreamInfoByID_CurrentFormat: there is no current format";
    }
    _os_log_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0x12u);
    goto LABEL_23;
  }
LABEL_17:
  HALS_ObjectMap::ReleaseObject(v6, v5);
}

void sub_1B59FEF68(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  HALS_ObjectMap *v13;

  HALS_ObjectMap::ReleaseObject(v13, a2);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK15HALS_IOA2Stream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(_QWORD *)(result + 32) + 64);
  return result;
}

uint64_t ___ZNK15HALS_IOA2Stream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_27(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(_QWORD *)(result + 32) + 52);
  return result;
}

void ___ZNK15HALS_IOA2Stream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_29(uint64_t a1)
{
  uint64_t v2;
  const __CFDictionary **v3;
  int v4;
  CFArrayRef v5;
  unsigned int v6;
  CFArrayRef v7;
  __int16 v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (const __CFDictionary **)(*(_QWORD *)(a1 + 48) + 1808);
  v4 = *(_DWORD *)(v2 + 60);
  v9 = 0;
  v5 = HALS_IOA2UCDevice::CopyStreamDictionaryByID(v3, v4);
  v7 = v5;
  v8 = 1;
  if (v5)
  {
    CACFDictionary::GetUInt32((uint64_t)v5, CFSTR("terminal type"), &v9);
    v6 = v9;
  }
  else
  {
    v6 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v7);
  **(_DWORD **)(a1 + 40) = v6;
}

void sub_1B59FF04C(void *a1)
{
  uint64_t v2;

  CACFDictionary::~CACFDictionary((CACFDictionary *)&v2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Stream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_31(uint64_t a1)
{
  uint64_t v2;
  const __CFDictionary **v3;
  int v4;
  CFArrayRef v5;
  unsigned int v6;
  _DWORD *exception;
  CFArrayRef v8;
  __int16 v9;
  unsigned int v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (const __CFDictionary **)(*(_QWORD *)(a1 + 48) + 1808);
  v4 = *(_DWORD *)(v2 + 60);
  v10 = 0;
  v5 = HALS_IOA2UCDevice::CopyStreamDictionaryByID(v3, v4);
  v8 = v5;
  v9 = 1;
  if (v5)
  {
    if (!CACFDictionary::GetUInt32((uint64_t)v5, CFSTR("starting channel"), &v10))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v12 = "HALS_IOA2UCDevice.cpp";
        v13 = 1024;
        v14 = 682;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetStreamInfoByID_StartingChannel: there is no starting channel number", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    v6 = v10;
  }
  else
  {
    v6 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v8);
  **(_DWORD **)(a1 + 40) = v6;
}

void __copy_helper_block_e8_48c38_ZTS13HALS_ReleaserI15HALS_IOA2DeviceE(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  v2 = (HALS_ObjectMap *)*((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 48) = v2;
  HALS_ObjectMap::RetainObject(v2, a2);
}

void __destroy_helper_block_e8_48c38_ZTS13HALS_ReleaserI15HALS_IOA2DeviceE(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 48), a2);
}

void ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1)
{
  unsigned int v2;
  double v3;

  v2 = *(unsigned __int8 *)(a1 + 56);
  if (*(_BYTE *)(a1 + 56))
  {
    v3 = *(double *)(a1 + 48);
    v2 = (v3
                      / (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 264))(*(_QWORD *)(a1 + 40))
                      * 0.0);
  }
  **(_DWORD **)(a1 + 64) = v2;
}

void sub_1B59FF294(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_6(uint64_t a1)
{
  HALS_IOA2Stream::GetCurrentHWFormat(*(HALS_IOA2Stream **)(a1 + 32), *(AudioStreamBasicDescription **)(a1 + 40));
}

void sub_1B59FF2C4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(uint64_t a1)
{
  return HALB_FormatList::GetVirtualFormats(*(_QWORD *)(a1 + 40) + 72, *(_BYTE *)(a1 + 60), *(unsigned int *)(a1 + 56) / 0x38uLL, (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(AudioStreamRangedDescription **)(a1 + 48));
}

uint64_t ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3(uint64_t a1)
{
  return HALB_FormatList::GetVirtualFormats(*(_QWORD *)(a1 + 40) + 72, *(_BYTE *)(a1 + 60), *(unsigned int *)(a1 + 56) / 0x28uLL, (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(AudioStreamBasicDescription **)(a1 + 48));
}

void sub_1B59FF34C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_10(uint64_t a1)
{
  uint64_t v2;
  void (**v3)(HALB_FormatList *__hidden);
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 56))
  {
    v3 = &off_1E69749F0;
    v4 = 0u;
    v5 = 0u;
    v6 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(*(HALB_FormatList **)(v2 + 104), *(const HALB_FormatList **)(v2 + 112), (HALB_FormatList *)&v3, *(Float64 *)(a1 + 48));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported((const AudioStreamBasicDescription *)v4, *((AudioStreamBasicDescription **)&v4 + 1), *(_QWORD *)(a1 + 64));
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v3);
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported(*(const AudioStreamBasicDescription **)(v2 + 80), *(AudioStreamBasicDescription **)(v2 + 88), *(_QWORD *)(a1 + 64));
  }
}

void sub_1B59FF3EC(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HALB_FormatList::~HALB_FormatList((HALB_FormatList *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B59FF3DCLL);
}

BOOL ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_12(_QWORD *a1)
{
  _BOOL8 result;

  result = HALB_FormatList::IsVirtualFormatSupported(*(const AudioStreamBasicDescription **)(a1[5] + 80), *(AudioStreamBasicDescription **)(a1[5] + 88), a1[6]);
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  return result;
}

void ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_14(uint64_t a1)
{
  HALB_FormatList **v2;
  AudioStreamBasicDescription *v3;
  AudioFormatFlags v4;
  uint64_t v5;
  __int128 v6;
  AudioStreamBasicDescription *v7;
  void (**v8)(HALB_FormatList *__hidden);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  AudioStreamBasicDescription v12;
  AudioStreamBasicDescription v13;

  v2 = *(HALB_FormatList ***)(a1 + 32);
  HALS_IOA2Stream::GetCurrentHWFormat((HALS_IOA2Stream *)v2, &v13);
  if (v13.mFormatID == 1819304813 && (v13.mFormatFlags & 0x40) == 0)
  {
    if (*(_BYTE *)(a1 + 76))
      v4 = 9;
    else
      v4 = 11;
    v13.mFormatFlags = v4;
    v13.mBytesPerPacket = 4 * v13.mChannelsPerFrame;
    v13.mFramesPerPacket = 1;
    v13.mBytesPerFrame = 4 * v13.mChannelsPerFrame;
    v13.mBitsPerChannel = 32;
  }
  if (*(_DWORD *)(a1 + 72) != 40 || (v5 = *(_QWORD *)(a1 + 40)) == 0)
    v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)&v12.mSampleRate = *(_OWORD *)v5;
  *(_OWORD *)&v12.mBytesPerPacket = v6;
  *(_QWORD *)&v12.mBitsPerChannel = *(_QWORD *)(v5 + 32);
  if (*(_BYTE *)(a1 + 64))
  {
    v8 = &off_1E69749F0;
    v9 = 0u;
    v10 = 0u;
    v11 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(v2[13], v2[14], (HALB_FormatList *)&v8, *(Float64 *)(a1 + 56));
    HALB_FormatList::BestMatchForVirtualFormat((HALB_FormatList *)&v8, &v12, *(const AudioStreamBasicDescription **)(a1 + 48), v7, v13.mSampleRate);
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v8);
  }
  else
  {
    HALB_FormatList::BestMatchForVirtualFormat((HALB_FormatList *)(v2 + 9), &v12, *(const AudioStreamBasicDescription **)(a1 + 48), v3, v13.mSampleRate);
  }
}

void sub_1B59FF548(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B59FF538);
}

void ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_16(uint64_t a1)
{
  HALS_IOA2Stream::GetCurrentHWFormat(*(HALS_IOA2Stream **)(a1 + 32), *(AudioStreamBasicDescription **)(a1 + 40));
}

void sub_1B59FF58C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

__n128 ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_18(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  __int128 v14;

  v1 = *(_DWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v3 + 24) = 0;
  if (v1 >= 0x38)
  {
    v5 = 0;
    v6 = 0;
    v7 = v1 / 0x38uLL;
    v8 = -1;
    do
    {
      v9 = *(_QWORD *)(v2 + 104);
      if (++v8 >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v2 + 112) - v9) >> 3)))
        break;
      v10 = v9 + v5;
      v5 += 56;
      v11 = v4 + 56 * v6;
      result = *(__n128 *)v10;
      v13 = *(_OWORD *)(v10 + 16);
      v14 = *(_OWORD *)(v10 + 32);
      *(_QWORD *)(v11 + 48) = *(_QWORD *)(v10 + 48);
      *(_OWORD *)(v11 + 16) = v13;
      *(_OWORD *)(v11 + 32) = v14;
      *(__n128 *)v11 = result;
      v6 = *(_QWORD *)(v3 + 24) + 1;
      *(_QWORD *)(v3 + 24) = v6;
    }
    while (v6 < v7);
  }
  return result;
}

uint64_t ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3_20(uint64_t a1)
{
  return HALB_FormatList::GetPhysicalFormats(*(_QWORD *)(a1 + 40) + 72, *(unsigned int *)(a1 + 56) / 0x38uLL, (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(AudioStreamBasicDescription **)(a1 + 48));
}

void sub_1B59FF684(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_22(uint64_t a1)
{
  uint64_t v2;
  void (**v3)(HALB_FormatList *__hidden);
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 56))
  {
    v3 = &off_1E69749F0;
    v4 = 0u;
    v5 = 0u;
    v6 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(*(HALB_FormatList **)(v2 + 104), *(const HALB_FormatList **)(v2 + 112), (HALB_FormatList *)&v3, *(Float64 *)(a1 + 48));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported(*((const AudioStreamBasicDescription **)&v5 + 1), (AudioStreamBasicDescription *)v6, *(_QWORD *)(a1 + 64));
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v3);
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported(*(const AudioStreamBasicDescription **)(v2 + 104), *(AudioStreamBasicDescription **)(v2 + 112), *(_QWORD *)(a1 + 64));
  }
}

void sub_1B59FF724(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HALB_FormatList::~HALB_FormatList((HALB_FormatList *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B59FF714);
}

void ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_24(uint64_t a1)
{
  HALB_FormatList **v2;
  AudioStreamBasicDescription *v3;
  uint64_t v4;
  __int128 v5;
  AudioStreamBasicDescription *v6;
  void (**v7)(HALB_FormatList *__hidden);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  AudioStreamBasicDescription v11;
  AudioStreamBasicDescription v12;

  v2 = *(HALB_FormatList ***)(a1 + 32);
  HALS_IOA2Stream::GetCurrentHWFormat((HALS_IOA2Stream *)v2, &v12);
  if (*(_DWORD *)(a1 + 72) != 40 || (v4 = *(_QWORD *)(a1 + 40)) == 0)
    v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)&v11.mSampleRate = *(_OWORD *)v4;
  *(_OWORD *)&v11.mBytesPerPacket = v5;
  *(_QWORD *)&v11.mBitsPerChannel = *(_QWORD *)(v4 + 32);
  if (*(_BYTE *)(a1 + 64))
  {
    v7 = &off_1E69749F0;
    v8 = 0u;
    v9 = 0u;
    v10 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(v2[13], v2[14], (HALB_FormatList *)&v7, *(Float64 *)(a1 + 56));
    HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)&v7, &v11, *(const AudioStreamBasicDescription **)(a1 + 48), v6, v12.mSampleRate);
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v7);
  }
  else
  {
    HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)(v2 + 9), &v11, *(const AudioStreamBasicDescription **)(a1 + 48), v3, v12.mSampleRate);
  }
}

void sub_1B59FF800(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B59FF7F0);
}

void __copy_helper_block_e8_40c38_ZTS13HALS_ReleaserI15HALS_IOA2DeviceE(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  v2 = (HALS_ObjectMap *)*((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 40) = v2;
  HALS_ObjectMap::RetainObject(v2, a2);
}

void __destroy_helper_block_e8_40c38_ZTS13HALS_ReleaserI15HALS_IOA2DeviceE(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 40), a2);
}

uint64_t ___ZNK15HALS_IOA2Stream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(_QWORD *)(result + 40) + 88)
                                                                   - *(_DWORD *)(*(_QWORD *)(result + 40) + 80)) & 0xFFFFFFF8;
  return result;
}

uint64_t ___ZNK15HALS_IOA2Stream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = -1840700264
                                                                  * ((*(_QWORD *)(*(_QWORD *)(result + 40) + 88)
                                                                    - *(_QWORD *)(*(_QWORD *)(result + 40) + 80)) >> 3);
  return result;
}

uint64_t ___ZNK15HALS_IOA2Stream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(_QWORD *)(result + 40) + 112)
                                                                   - *(_DWORD *)(*(_QWORD *)(result + 40) + 104)) & 0xFFFFFFF8;
  return result;
}

uint64_t ___ZNK15HALS_IOA2Stream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(_QWORD *)(result + 40) + 112)
                                                                   - *(_DWORD *)(*(_QWORD *)(result + 40) + 104)) & 0xFFFFFFF8;
  return result;
}

void HALS_IOA2Stream::BuildFormatList(HALS_IOA2Stream *this)
{
  const __CFDictionary **v2;
  HALS_Object *v3;
  int v4;
  CACFDictionary *v5;
  const __CFArray *v6;
  HALB_FormatList *v7;
  unsigned int v8;
  unsigned int i;
  double mMinimum;
  int UInt32;
  double v12;
  const AudioStreamRangedDescription *v13;
  _DWORD *exception;
  HALS_ObjectMap *v15;
  CFTypeRef cf;
  __int16 v17;
  CFArrayRef v18;
  __int16 v19;
  unint64_t v20;
  CACFDictionary *v21;
  __int16 v22;
  AudioStreamRangedDescription buf;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFDictionary **)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  if (v2)
  {
    *((_QWORD *)this + 11) = *((_QWORD *)this + 10);
    *((_QWORD *)this + 14) = *((_QWORD *)this + 13);
    v15 = (HALS_ObjectMap *)v2;
    v4 = *((_DWORD *)this + 15);
    cf = 0;
    v5 = HALS_IOA2UCDevice::CopyStreamDictionaryByID(v2 + 226, v4);
    v21 = v5;
    v22 = 1;
    if (v5)
    {
      if ((CACFDictionary::GetArray((uint64_t)v5, CFSTR("available formats"), (const __CFArray **)&cf) & 1) == 0)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.mFormat.mSampleRate) = 136315394;
          *(_QWORD *)((char *)&buf.mFormat.mSampleRate + 4) = "HALS_IOA2UCDevice.cpp";
          LOWORD(buf.mFormat.mFormatFlags) = 1024;
          *(AudioFormatFlags *)((char *)&buf.mFormat.mFormatFlags + 2) = 666;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::CopyStreamInfoByID_AvailableFormats: there are no available formats", (uint8_t *)&buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 1852797029;
      }
      v6 = (const __CFArray *)cf;
      if (cf)
        CFRetain(cf);
    }
    else
    {
      v6 = 0;
    }
    v7 = (HALS_IOA2Stream *)((char *)this + 72);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v21);
    v8 = 0;
    v18 = v6;
    v19 = 1;
    if (!v6)
      goto LABEL_9;
LABEL_8:
    for (i = CFArrayGetCount(v6); v8 < i; i = 0)
    {
      cf = 0;
      v17 = 1;
      CACFArray::GetCACFDictionary(&v18, v8, (CACFDictionary *)&cf);
      v20 = 0;
      v21 = (CACFDictionary *)cf;
      v22 = 0;
      memset(&buf, 0, sizeof(buf));
      if (CACFDictionary::GetUInt64((uint64_t)cf, CFSTR("min sample rate"), &v20)
        && (buf.mSampleRateRange.mMinimum = (double)v20 * 2.32830644e-10 + (double)HIDWORD(v20),
            CACFDictionary::GetUInt64((uint64_t)v21, CFSTR("max sample rate"), &v20)))
      {
        mMinimum = buf.mSampleRateRange.mMinimum;
        if (buf.mSampleRateRange.mMinimum != (double)v20 * 2.32830644e-10 + (double)HIDWORD(v20))
          mMinimum = 0.0;
        buf.mSampleRateRange.mMaximum = (double)v20 * 2.32830644e-10 + (double)HIDWORD(v20);
        buf.mFormat.mSampleRate = mMinimum;
        if (CACFDictionary::GetUInt32((uint64_t)v21, CFSTR("format ID"), &buf.mFormat.mFormatID)
          && CACFDictionary::GetUInt32((uint64_t)v21, CFSTR("format flags"), &buf.mFormat.mFormatFlags)
          && CACFDictionary::GetUInt32((uint64_t)v21, CFSTR("bytes per packet"), &buf.mFormat.mBytesPerPacket)&& CACFDictionary::GetUInt32((uint64_t)v21, CFSTR("frames per packet"), &buf.mFormat.mFramesPerPacket)&& CACFDictionary::GetUInt32((uint64_t)v21, CFSTR("bytes per frame"), &buf.mFormat.mBytesPerFrame)&& CACFDictionary::GetUInt32((uint64_t)v21, CFSTR("channels per frame"), &buf.mFormat.mChannelsPerFrame))
        {
          UInt32 = CACFDictionary::GetUInt32((uint64_t)v21, CFSTR("bits per channel"), &buf.mFormat.mBitsPerChannel);
        }
        else
        {
          UInt32 = 0;
        }
      }
      else
      {
        UInt32 = 0;
        v12 = buf.mSampleRateRange.mMinimum;
        if (buf.mSampleRateRange.mMinimum != buf.mSampleRateRange.mMaximum)
          v12 = 0.0;
        buf.mFormat.mSampleRate = v12;
      }
      if (buf.mFormat.mFormatID == 1819304813)
        buf.mFormat.mFormatFlags &= ~0x40u;
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v21);
      if (UInt32)
        HALB_FormatList::AddPhysicalFormat(v7, &buf, v13);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
      ++v8;
      v6 = v18;
      if (v18)
        goto LABEL_8;
LABEL_9:
      ;
    }
    CACFArray::~CACFArray((CACFArray *)&v18);
    v2 = (const __CFDictionary **)v15;
  }
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v2, v3);
}

void sub_1B59FFCA4(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, HALS_ObjectMap *a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  HALS_ObjectMap::ReleaseObject(a14, a2);
  _Unwind_Resume(a1);
}

void AMCP::ASP::PlugIn::log_plugin_exception(AMCP::Log::Scope_Registry *a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *v6;
  unint64_t v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void **v10;
  std::runtime_error *exception;
  CFTypeRef v12;
  CFTypeRef cf;
  void *__p[2];
  char v15;
  uint8_t buf[8];
  _BYTE v17[10];
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t *v21;
  __int16 v22;
  void **v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v4 = *(std::__shared_weak_count **)v17;
  v5 = **(NSObject ***)buf;
  if (*(_QWORD *)v17)
  {
    v6 = (unint64_t *)(*(_QWORD *)v17 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v8 = pthread_self();
    v9 = pthread_mach_thread_np(v8);
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    mcp_applesauce::CF::PlugInRef_proxy::get_bundle(&v12, *(__CFBundle **)a1);
    mcp_applesauce::CF::BundleRef_proxy::get_bundle_id((applesauce::CF::StringRef *)&cf, (__CFBundle *)v12);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
    if (v15 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v9;
    *(_WORD *)v17 = 2080;
    *(_QWORD *)&v17[2] = "ASP_PlugIn.cpp";
    v18 = 1024;
    v19 = 884;
    v20 = 2080;
    v21 = a2;
    v22 = 2080;
    v23 = v10;
    _os_log_error_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught unknown exception while trying to call %s on ASP with bundle id %s", buf, 0x2Cu);
    if (v15 < 0)
      operator delete(__p[0]);
    if (cf)
      CFRelease(cf);
    if (v12)
      CFRelease(v12);
  }
}

void sub_1B59FFEF4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *mcp_applesauce::CF::PlugInRef_proxy::get_bundle(_QWORD *this, __CFBundle *a2)
{
  _QWORD *v2;
  CFBundleRef Bundle;

  v2 = this;
  if (a2)
  {
    Bundle = CFPlugInGetBundle(a2);
    return mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::from_get(v2, Bundle);
  }
  else
  {
    *this = 0;
  }
  return this;
}

uint64_t AMCP::ASP::PlugIn::PerformDeviceConfigChange(AMCP::ASP::PlugIn *this, uint64_t a2, uint64_t a3, void *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, void *))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2), a2, a3, a4);
}

void sub_1B59FFF9C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "PerformDeviceConfigurationChange");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B59FFF8CLL);
}

BOOL AMCP::ASP::PlugIn::ObjectHasProperty(AMCP::ASP::PlugIn *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4)
{
  return (*(unsigned int (**)(_QWORD, uint64_t, uint64_t, const AudioObjectPropertyAddress *))(**((_QWORD **)this + 2) + 88))(*((_QWORD *)this + 2), a2, a3, a4) != 0;
}

void sub_1B5A0001C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "HasProperty");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5A0000CLL);
}

unint64_t AMCP::ASP::PlugIn::ObjectIsPropertySettable(AMCP::ASP::PlugIn *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4)
{
  unsigned int v4;
  char v6;

  v6 = 0;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, const AudioObjectPropertyAddress *, char *))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2), a2, a3, a4, &v6);
  return v4 | ((unint64_t)(v6 != 0) << 32);
}

void sub_1B5A000AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  AMCP::Log::Scope_Registry *v14;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "IsPropertySettable");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5A00088);
}

unint64_t AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(AMCP::ASP::PlugIn *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6)
{
  unsigned int v6;
  unsigned int v8;

  v8 = 0;
  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, unsigned int *))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2), a2, a3, a4, a5, a6, &v8);
  return v6 | ((unint64_t)v8 << 32);
}

void sub_1B5A00138(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  AMCP::Log::Scope_Registry *v14;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "GetPropertyDataSize");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5A0011CLL);
}

unint64_t AMCP::ASP::PlugIn::ObjectGetPropertyData(AMCP::ASP::PlugIn *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, uint64_t a7, void *a8)
{
  unsigned int v8;
  unsigned int v10;

  v10 = a7;
  v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, unsigned int *, void *))(**((_QWORD **)this + 2) + 112))(*((_QWORD *)this + 2), a2, a3, a4, a5, a6, a7, &v10, a8);
  return v8 | ((unint64_t)v10 << 32);
}

void sub_1B5A001C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  AMCP::Log::Scope_Registry *v16;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "GetPropertyData");
  AMCP::ASP::PlugIn::log_plugin_exception(v16, (uint64_t *)&__p);
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5A001ACLL);
}

uint64_t AMCP::ASP::PlugIn::ObjectSetPropertyData(AMCP::ASP::PlugIn *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, uint64_t a7, const void *a8)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B5A00240(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "SetPropertyData");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5A00230);
}

void HALS_PDPStream::Activate(HALS_PDPStream *this)
{
  HALS_Object *v2;
  AudioObjectPropertyAddress v3;
  unsigned int v4;
  int v5;

  HALS_PDPStream::BuildFormatList(this);
  v5 = 0;
  v4 = 4;
  *(_QWORD *)&v3.mSelector = *(_QWORD *)"ridsbolg";
  v3.mElement = 0;
  HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(*((_QWORD *)this + 8) + 72), *((unsigned int *)this + 4), &v3, 0, 0, &v4, &v5);
  if (v5)
    *((_BYTE *)this + 52) = 1;
  HALS_Object::Activate(this, v2);
}

void HALS_PDPStream::~HALS_PDPStream(HALS_PDPStream *this)
{
  HALS_PDPStream::~HALS_PDPStream(this);
  JUMPOUT(0x1B5E50688);
}

{
  HALB_FormatList *v2;

  *(_QWORD *)this = off_1E697D3B8;
  v2 = (HALS_PDPStream *)((char *)this + 72);
  HALB_FormatList::~HALB_FormatList((HALS_PDPStream *)((char *)this + 128));
  HALB_FormatList::~HALB_FormatList(v2);
  HALS_Object::~HALS_Object(this);
}

uint64_t HALS_PDPStream::HasProperty(HALS_PDPStream *this, uint64_t a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t result;
  signed int mSelector;
  int v10;
  unsigned __int16 v11;

  result = (*(uint64_t (**)(HALS_PDPStream *, const AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 176))(this, a3, a4);
  if (!(_DWORD)result)
    return result;
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1885762656)
  {
    if (mSelector > 1936092512)
    {
      if (mSelector == 1937007734)
        return HALS_Stream::HasProperty(this, a2, a3, a4);
      v11 = 28001;
    }
    else
    {
      if (mSelector == 1885762657)
        return HALS_Stream::HasProperty(this, a2, a3, a4);
      v11 = 27939;
    }
    v10 = v11 | 0x73660000;
    goto LABEL_14;
  }
  if (mSelector > 1869638758)
  {
    if (mSelector != 1869638759)
    {
      v10 = 1885762595;
      goto LABEL_14;
    }
    return HALS_Stream::HasProperty(this, a2, a3, a4);
  }
  if (mSelector == 1650682995)
    return HALS_Stream::HasProperty(this, a2, a3, a4);
  v10 = 1668047219;
LABEL_14:
  if (mSelector == v10)
    return HALS_Stream::HasProperty(this, a2, a3, a4);
  return (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *))(*((_QWORD *)this + 8) + 48))(a2, a3) != 0;
}

uint64_t HALS_PDPStream::IsPropertySettable(HALS_PDPStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  signed int mSelector;
  int v8;
  unsigned __int16 v9;
  _DWORD *exception;

  if (((*(uint64_t (**)(HALS_PDPStream *))(*(_QWORD *)this + 88))(this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1885762656)
  {
    if (mSelector > 1936092512)
    {
      if (mSelector == 1937007734)
        return HALS_Stream::IsPropertySettable((uint64_t)this, a2, (int *)a3);
      v9 = 28001;
    }
    else
    {
      if (mSelector == 1885762657)
        return HALS_Stream::IsPropertySettable((uint64_t)this, a2, (int *)a3);
      v9 = 27939;
    }
    v8 = v9 | 0x73660000;
  }
  else
  {
    if (mSelector <= 1869638758)
    {
      if (mSelector != 1650682995)
      {
        v8 = 1668047219;
        goto LABEL_14;
      }
      return HALS_Stream::IsPropertySettable((uint64_t)this, a2, (int *)a3);
    }
    if (mSelector == 1869638759)
      return HALS_Stream::IsPropertySettable((uint64_t)this, a2, (int *)a3);
    v8 = 1885762595;
  }
LABEL_14:
  if (mSelector == v8)
    return HALS_Stream::IsPropertySettable((uint64_t)this, a2, (int *)a3);
  return HALS_PDPUCPlugIn::ObjectIsPropertySettable(*(HALS_PDPUCPlugIn **)(*((_QWORD *)this + 8) + 56), a2, a3);
}

uint64_t HALS_PDPStream::GetPropertyDataSize(HALS_PDPStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, HALS_Client *a6)
{
  signed int mSelector;
  int v12;
  HALB_Mutex *v13;
  _QWORD *v14;
  uint64_t PropertyDataSize;
  uint64_t v16;
  _DWORD *exception;
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;

  if (((*(uint64_t (**)(HALS_PDPStream *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a6) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1885762656)
  {
    if (mSelector > 1936092512)
    {
      if (mSelector != 1936092513)
      {
        v12 = 1937007734;
LABEL_15:
        if (mSelector == v12)
          goto LABEL_16;
LABEL_22:
        PropertyDataSize = HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(*(HALS_PDPUCPlugIn **)(*((_QWORD *)this + 8) + 64), a2, a3, a4, a5);
        goto LABEL_17;
      }
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 0x40000000;
      v22[2] = ___ZNK14HALS_PDPStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
      v22[3] = &unk_1E697D4A8;
      v22[4] = &v23;
      v22[5] = this;
      v13 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(_QWORD *)this + 56))(this);
      v14 = v22;
    }
    else if (mSelector == 1885762657)
    {
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 0x40000000;
      v20[2] = ___ZNK14HALS_PDPStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3;
      v20[3] = &unk_1E697D4F8;
      v20[4] = &v23;
      v20[5] = this;
      v13 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(_QWORD *)this + 56))(this);
      v14 = v20;
    }
    else
    {
      if (mSelector != 1936092451)
        goto LABEL_22;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 0x40000000;
      v21[2] = ___ZNK14HALS_PDPStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2;
      v21[3] = &unk_1E697D4D0;
      v21[4] = &v23;
      v21[5] = this;
      v13 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(_QWORD *)this + 56))(this);
      v14 = v21;
    }
    goto LABEL_20;
  }
  if (mSelector > 1869638758)
  {
    if (mSelector == 1869638759)
      goto LABEL_16;
    if (mSelector != 1885762595)
      goto LABEL_22;
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 0x40000000;
    v19[2] = ___ZNK14HALS_PDPStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4;
    v19[3] = &unk_1E697D520;
    v19[4] = &v23;
    v19[5] = this;
    v13 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(_QWORD *)this + 56))(this);
    v14 = v19;
LABEL_20:
    HALB_CommandGate::ExecuteCommand(v13, (uint64_t)v14);
    v16 = *((unsigned int *)v24 + 6);
    goto LABEL_21;
  }
  if (mSelector != 1650682995)
  {
    v12 = 1668047219;
    goto LABEL_15;
  }
LABEL_16:
  PropertyDataSize = HALS_Stream::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
LABEL_17:
  v16 = PropertyDataSize;
  *((_DWORD *)v24 + 6) = PropertyDataSize;
LABEL_21:
  _Block_object_dispose(&v23, 8);
  return v16;
}

void sub_1B5A00894(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void HALS_PDPStream::GetPropertyData(HALS_PDPStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, double *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  _BOOL4 v17;
  signed int mSelector;
  HALB_Mutex *v19;
  int v20;
  HALB_Mutex *v21;
  int v22;
  HALB_Mutex *v23;
  HALB_Mutex *v24;
  uint64_t *v25;
  HALB_Mutex *v26;
  uint64_t v27;
  HALS_ObjectMap *v28;
  HALS_Object *v29;
  HALB_Mutex *v30;
  int v31;
  int v32;
  uint64_t v33;
  HALS_ObjectMap *v34;
  HALS_Object *v35;
  _DWORD *exception;
  _DWORD *v37;
  _DWORD *v38;
  _QWORD v39[7];
  int v40;
  _QWORD v41[7];
  int v42;
  _QWORD v43[8];
  int v44;
  _QWORD v45[8];
  int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  uint64_t (*v51)();
  int v52;
  uint64_t v53;
  _QWORD v54[7];
  int v55;
  BOOL v56;
  _QWORD v57[7];
  int v58;
  BOOL v59;
  uint8_t v60[4];
  const char *v61;
  __int16 v62;
  int v63;
  _BYTE buf[24];
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_PDPStream *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a9) & 1) == 0&& a3->mSelector == 1935894638)
  {
    *a5 = a4;
    *(_DWORD *)a6 = 1;
    return;
  }
  if (((*(uint64_t (**)(HALS_PDPStream *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  if (a9)
    v17 = *((_BYTE *)a9 + 258) == 0;
  else
    v17 = 1;
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1885762656)
  {
    if (mSelector <= 1936092512)
    {
      if (mSelector != 1885762657)
      {
        if (mSelector == 1936092451)
        {
          v47 = 0;
          v48 = &v47;
          v49 = 0x2000000000;
          v50 = 0;
          v54[0] = MEMORY[0x1E0C809B0];
          v54[1] = 0x40000000;
          v54[2] = ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
          v54[3] = &unk_1E697D570;
          v56 = v17;
          v55 = a4;
          v54[4] = &v47;
          v54[5] = this;
          v54[6] = a6;
          v21 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v21, (uint64_t)v54);
          goto LABEL_25;
        }
LABEL_44:
        *a5 = a4;
        HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(*((_QWORD *)this + 8) + 72), a2, a3, a7, a8, a5, a6);
        return;
      }
      v47 = 0;
      v48 = &v47;
      v49 = 0x2000000000;
      v50 = 0;
      v41[0] = MEMORY[0x1E0C809B0];
      v41[1] = 0x40000000;
      v41[2] = ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_11;
      v41[3] = &unk_1E697D5E8;
      v42 = a4;
      v41[4] = &v47;
      v41[5] = this;
      v41[6] = a6;
      v23 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v23, (uint64_t)v41);
    }
    else
    {
      if (mSelector != 1936092513)
      {
        if (mSelector == 1936092532)
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x2000000000;
          v65 = 40;
          v47 = 0;
          v48 = &v47;
          v49 = 0x3802000000;
          v50 = __Block_byref_object_copy__5272;
          v51 = __Block_byref_object_dispose__5273;
          v52 = 1885762592;
          v53 = *(_QWORD *)&a3->mScope;
          v45[0] = MEMORY[0x1E0C809B0];
          v45[1] = 0x40000000;
          v45[2] = ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_7;
          v45[3] = &unk_1E697D598;
          v46 = a2;
          v45[4] = &v47;
          v45[5] = buf;
          v45[6] = this;
          v45[7] = a6;
          v30 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v30, (uint64_t)v45);
          if (*((_DWORD *)a6 + 2) == 1819304813)
          {
            if (v17)
              v31 = 9;
            else
              v31 = 11;
            v32 = 4 * *((_DWORD *)a6 + 7);
            *((_DWORD *)a6 + 3) = v31;
            *((_DWORD *)a6 + 4) = v32;
            *((_DWORD *)a6 + 5) = 1;
            *((_DWORD *)a6 + 6) = v32;
            *((_DWORD *)a6 + 8) = 32;
          }
          v33 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
          v34 = (HALS_ObjectMap *)v33;
          if (!v33)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v60 = 136315394;
              v61 = "HALS_PDPStream.cpp";
              v62 = 1024;
              v63 = 207;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPStream::GetPropertyData: owning device is missing", v60, 0x12u);
            }
            v38 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v38 = &off_1E69A1B30;
            v38[2] = 560947818;
          }
          *a6 = (*(double (**)(uint64_t))(*(_QWORD *)v33 + 264))(v33);
          HALS_ObjectMap::ReleaseObject(v34, v35);
          _Block_object_dispose(&v47, 8);
          v25 = (uint64_t *)buf;
          goto LABEL_31;
        }
        v20 = 1937007734;
LABEL_20:
        if (mSelector != v20)
          goto LABEL_44;
LABEL_21:
        HALS_Stream::GetPropertyData(this, a2, a3, a4, a5, (uint64_t *)a6, a7, a8, a9);
        return;
      }
      v47 = 0;
      v48 = &v47;
      v49 = 0x2000000000;
      v50 = 0;
      v57[0] = MEMORY[0x1E0C809B0];
      v57[1] = 0x40000000;
      v57[2] = ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
      v57[3] = &unk_1E697D548;
      v59 = v17;
      v58 = a4;
      v57[4] = &v47;
      v57[5] = this;
      v57[6] = a6;
      v24 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v24, (uint64_t)v57);
    }
    v22 = 56 * *((_DWORD *)v48 + 6);
    goto LABEL_29;
  }
  if (mSelector <= 1869638758)
  {
    if (mSelector == 1650682995)
      goto LABEL_21;
    v20 = 1668047219;
    goto LABEL_20;
  }
  if (mSelector == 1869638759)
    goto LABEL_21;
  if (mSelector == 1885762592)
  {
    v47 = 0;
    v48 = &v47;
    v49 = 0x2000000000;
    LODWORD(v50) = 40;
    v43[0] = MEMORY[0x1E0C809B0];
    v43[1] = 0x40000000;
    v43[2] = ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_9;
    v43[3] = &unk_1E697D5C0;
    v44 = a2;
    v43[4] = &v47;
    v43[5] = this;
    v43[6] = a3;
    v43[7] = a6;
    v26 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v26, (uint64_t)v43);
    if (*((_DWORD *)a6 + 2) == 1819304813)
      *((_DWORD *)a6 + 3) &= ~0x40u;
    v27 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
    v28 = (HALS_ObjectMap *)v27;
    if (!v27)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_PDPStream.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 219;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPStream::GetPropertyData: owning device is missing", buf, 0x12u);
      }
      v37 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v37 = &off_1E69A1B30;
      v37[2] = 560947818;
    }
    *a6 = (*(double (**)(uint64_t))(*(_QWORD *)v27 + 264))(v27);
    HALS_ObjectMap::ReleaseObject(v28, v29);
    goto LABEL_30;
  }
  if (mSelector != 1885762595)
    goto LABEL_44;
  v47 = 0;
  v48 = &v47;
  v49 = 0x2000000000;
  v50 = 0;
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 0x40000000;
  v39[2] = ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_13;
  v39[3] = &unk_1E697D610;
  v40 = a4;
  v39[4] = &v47;
  v39[5] = this;
  v39[6] = a6;
  v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v19, (uint64_t)v39);
LABEL_25:
  v22 = 40 * *((_DWORD *)v48 + 6);
LABEL_29:
  *a5 = v22;
LABEL_30:
  v25 = &v47;
LABEL_31:
  _Block_object_dispose(v25, 8);
}

void sub_1B5A01074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void HALS_PDPStream::SetPropertyData(HALS_PDPStream *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  const AudioObjectPropertyAddress *v16;
  HALS_Device *v17;
  signed int mSelector;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  HALS_Object *v24;
  uint64_t v25;
  HALB_Mutex *v26;
  int v27;
  HALB_Mutex *v28;
  HALB_Mutex *v29;
  int v30;
  HALB_Mutex *v31;
  _DWORD *exception;
  _DWORD *v33;
  int v34;
  NSObject *v35;
  const char *v36;
  _DWORD *v37;
  _QWORD v38[7];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _QWORD v42[7];
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unsigned int v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  AudioObjectPropertyAddress v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t);
  void *v54;
  HALS_Client *v55;
  int v56;
  _BYTE buf[24];
  __n128 (*v58)(uint64_t, uint64_t);
  uint64_t (*v59)();
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_PDPStream *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  v17 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  if (!v17)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_PDPStream.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 251;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPStream::SetPropertyData: owning device is missing", buf, 0x12u);
    }
    v33 = __cxa_allocate_exception(0x10uLL);
    v34 = 560947818;
LABEL_37:
    *(_QWORD *)v33 = &off_1E69A1B30;
    v33[2] = v34;
  }
  mSelector = a3->mSelector;
  if (!HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, v16))
    goto LABEL_6;
  if (!HALS_Device::IsHogModeOwnerOrFree(v17, a8))
  {
    v33 = __cxa_allocate_exception(0x10uLL);
    v34 = 560492391;
    goto LABEL_37;
  }
  mSelector = a3->mSelector;
LABEL_6:
  if (mSelector > 1885762591)
  {
    if (mSelector == 1885762592)
    {
      if (a4 > 0x27)
      {
        v50.mElement = 0;
        *(_QWORD *)&v50.mSelector = *(_QWORD *)" tfpbolg";
        v46 = 40;
        HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(*((_QWORD *)this + 8) + 72), a2, &v50, 0, 0, &v46, &v47);
        if (DWORD2(v47) == 1819304813)
          HIDWORD(v47) &= ~0x40u;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x5002000000;
        v58 = __Block_byref_object_copy__15;
        v59 = __Block_byref_object_dispose__16;
        v38[0] = MEMORY[0x1E0C809B0];
        v38[1] = 0x40000000;
        v38[2] = ___ZN14HALS_PDPStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_20;
        v38[3] = &unk_1E697D660;
        v38[5] = this;
        v38[6] = a5;
        v39 = v47;
        v40 = v48;
        v41 = v49;
        v38[4] = buf;
        v29 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v29, (uint64_t)v38);
        HALS_PDPUCPlugIn::ObjectSetPropertyData(*(HALS_PDPUCPlugIn **)(*((_QWORD *)this + 8) + 80), a2, a3, a6, a7, a4, (const void *)(*(_QWORD *)&buf[8] + 40));
        if (a8
          && (*(_DWORD *)(*(_QWORD *)&buf[8] + 48) != 1819304813
           || (*(_DWORD *)(*(_QWORD *)&buf[8] + 52) & 0x40) != 0))
        {
          v30 = *((_DWORD *)v17 + 4);
          v51 = MEMORY[0x1E0C809B0];
          v52 = 0x40000000;
          v53 = ___ZN11HALS_Client19SetNonMixableFormatEj_block_invoke;
          v54 = &__block_descriptor_tmp_14_2053;
          v55 = a8;
          v56 = v30;
          v31 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Client *))(*(_QWORD *)a8 + 56))(a8);
          HALB_CommandGate::ExecuteCommand(v31, (uint64_t)&v51);
        }
        goto LABEL_28;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_PDPStream.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 312;
        v35 = MEMORY[0x1E0C81028];
        v36 = "%25s:%-5d  HALS_IOA2Stream::_SetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormat";
        goto LABEL_42;
      }
    }
    else
    {
      if (mSelector != 1936092532)
      {
        v23 = 1937007734;
        goto LABEL_10;
      }
      if (a4 > 0x27)
      {
        v50.mElement = 0;
        *(_QWORD *)&v50.mSelector = *(_QWORD *)" tfpbolg";
        v46 = 40;
        HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(*((_QWORD *)this + 8) + 72), a2, &v50, 0, 0, &v46, &v47);
        if (DWORD2(v47) == 1819304813)
          HIDWORD(v47) &= ~0x40u;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x5002000000;
        v58 = __Block_byref_object_copy__15;
        v59 = __Block_byref_object_dispose__16;
        v25 = MEMORY[0x1E0C809B0];
        v42[0] = MEMORY[0x1E0C809B0];
        v42[1] = 0x40000000;
        v42[2] = ___ZN14HALS_PDPStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
        v42[3] = &unk_1E697D638;
        v43 = v47;
        v44 = v48;
        v42[5] = this;
        v42[6] = a5;
        v45 = v49;
        v42[4] = buf;
        v26 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v26, (uint64_t)v42);
        HALS_PDPUCPlugIn::ObjectSetPropertyData(*(HALS_PDPUCPlugIn **)(*((_QWORD *)this + 8) + 80), a2, &v50, 0, 0, a4, (const void *)(*(_QWORD *)&buf[8] + 40));
        if (a8
          && (*(_DWORD *)(*(_QWORD *)&buf[8] + 48) != 1819304813
           || (*(_DWORD *)(*(_QWORD *)&buf[8] + 52) & 0x40) != 0))
        {
          v27 = *((_DWORD *)v17 + 4);
          v51 = v25;
          v52 = 0x40000000;
          v53 = ___ZN11HALS_Client19SetNonMixableFormatEj_block_invoke;
          v54 = &__block_descriptor_tmp_14_2053;
          v55 = a8;
          v56 = v27;
          v28 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Client *))(*(_QWORD *)a8 + 56))(a8);
          HALB_CommandGate::ExecuteCommand(v28, (uint64_t)&v51);
        }
LABEL_28:
        _Block_object_dispose(buf, 8);
        goto LABEL_29;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_PDPStream.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 266;
        v35 = MEMORY[0x1E0C81028];
        v36 = "%25s:%-5d  HALS_IOA2Stream::_SetPropertyData: bad property data size for kAudioStreamPropertyVirtualFormat";
LABEL_42:
        _os_log_impl(&dword_1B57BA000, v35, OS_LOG_TYPE_ERROR, v36, buf, 0x12u);
      }
    }
    v37 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v37 = &off_1E69A1B30;
    v37[2] = 561211770;
  }
  if (mSelector == 1650682995 || mSelector == 1668047219)
LABEL_31:
    HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v19, v20, v21, v22, (uint64_t)a8);
  v23 = 1869638759;
LABEL_10:
  if (mSelector == v23)
    goto LABEL_31;
  HALS_PDPUCPlugIn::ObjectSetPropertyData(*(HALS_PDPUCPlugIn **)(*((_QWORD *)this + 8) + 80), a2, a3, a6, a7, a4, a5);
LABEL_29:
  HALS_ObjectMap::ReleaseObject(v17, v24);
}

void sub_1B5A0177C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5A013E4);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 40);
  v3 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZN14HALS_PDPStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, AudioStreamBasicDescription *a4)
{
  _QWORD *v5;
  uint64_t v6;
  const AudioStreamBasicDescription *v7;
  __int128 v8;
  uint64_t v9;
  const AudioStreamBasicDescription *v10;
  AudioStreamBasicDescription *v11;
  _BOOL8 IsVirtualFormatSupported;
  AudioStreamBasicDescription v13;

  v5 = *(_QWORD **)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = (const AudioStreamBasicDescription *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v8 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)&v13.mSampleRate = *(_OWORD *)v6;
  *(_OWORD *)&v13.mBytesPerPacket = v8;
  *(_QWORD *)&v13.mBitsPerChannel = *(_QWORD *)(v6 + 32);
  if (v13.mFormatID == 1819304813)
  {
    v13.mBitsPerChannel = 0;
    *(_OWORD *)&v13.mFormatFlags = 0uLL;
  }
  HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)(v5 + 16), &v13, v7, a4, *(double *)(a1 + 56));
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v10 = (const AudioStreamBasicDescription *)v5[13];
  v11 = (AudioStreamBasicDescription *)v5[14];
  if (!HALB_FormatList::IsVirtualFormatSupported(v10, v11, v9 + 40))
  {
    if (*(_DWORD *)(v9 + 48) == 1819304813)
    {
      *(_DWORD *)(v9 + 52) |= 0x40u;
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    }
    IsVirtualFormatSupported = HALB_FormatList::IsVirtualFormatSupported(v10, v11, v9 + 40);
    if (!IsVirtualFormatSupported)
      LogError((const char *)IsVirtualFormatSupported, *(_QWORD *)&v13.mSampleRate);
  }
}

void sub_1B5A018F8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZN14HALS_PDPStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_20(uint64_t a1, uint64_t a2, uint64_t a3, AudioStreamBasicDescription *a4)
{
  _QWORD *v5;
  uint64_t v6;
  const AudioStreamBasicDescription *v7;
  AudioStreamBasicDescription *v8;
  _BOOL8 IsVirtualFormatSupported;

  v5 = *(_QWORD **)(a1 + 40);
  HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)(v5 + 16), *(const AudioStreamBasicDescription **)(a1 + 48), (const AudioStreamBasicDescription *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a4, *(double *)(a1 + 56));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = (const AudioStreamBasicDescription *)v5[13];
  v8 = (AudioStreamBasicDescription *)v5[14];
  if (!HALB_FormatList::IsVirtualFormatSupported(v7, v8, v6 + 40))
  {
    if (*(_DWORD *)(v6 + 48) == 1819304813)
    {
      *(_DWORD *)(v6 + 52) |= 0x40u;
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    }
    IsVirtualFormatSupported = HALB_FormatList::IsVirtualFormatSupported(v7, v8, v6 + 40);
    if (!IsVirtualFormatSupported)
      LogError((const char *)IsVirtualFormatSupported);
  }
}

void sub_1B5A019B4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1)
{
  return HALB_FormatList::GetVirtualFormats(*(_QWORD *)(a1 + 40) + 128, *(_BYTE *)(a1 + 60), *(unsigned int *)(a1 + 56) / 0x38uLL, (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(AudioStreamRangedDescription **)(a1 + 48));
}

uint64_t ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(uint64_t a1)
{
  return HALB_FormatList::GetVirtualFormats(*(_QWORD *)(a1 + 40) + 128, *(_BYTE *)(a1 + 60), *(unsigned int *)(a1 + 56) / 0x28uLL, (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(AudioStreamBasicDescription **)(a1 + 48));
}

void sub_1B5A01A44(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t __Block_byref_object_copy__5272(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = v2;
  return result;
}

uint64_t ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_7(uint64_t a1)
{
  return HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 64) + 72), *(unsigned int *)(a1 + 64), (const AudioObjectPropertyAddress *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), 0, 0, (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), *(void **)(a1 + 56));
}

void sub_1B5A01AA8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_9(uint64_t a1)
{
  return HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 64) + 72), *(unsigned int *)(a1 + 64), *(const AudioObjectPropertyAddress **)(a1 + 48), 0, 0, (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(void **)(a1 + 56));
}

void sub_1B5A01AEC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

__n128 ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_11(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  __int128 v14;

  v1 = *(_DWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v3 + 24) = 0;
  if (v1 >= 0x38)
  {
    v5 = 0;
    v6 = 0;
    v7 = v1 / 0x38uLL;
    v8 = -1;
    do
    {
      v9 = *(_QWORD *)(v2 + 160);
      if (++v8 >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v2 + 168) - v9) >> 3)))
        break;
      v10 = v9 + v5;
      v5 += 56;
      v11 = v4 + 56 * v6;
      result = *(__n128 *)v10;
      v13 = *(_OWORD *)(v10 + 16);
      v14 = *(_OWORD *)(v10 + 32);
      *(_QWORD *)(v11 + 48) = *(_QWORD *)(v10 + 48);
      *(_OWORD *)(v11 + 16) = v13;
      *(_OWORD *)(v11 + 32) = v14;
      *(__n128 *)v11 = result;
      v6 = *(_QWORD *)(v3 + 24) + 1;
      *(_QWORD *)(v3 + 24) = v6;
    }
    while (v6 < v7);
  }
  return result;
}

uint64_t ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_13(uint64_t a1)
{
  return HALB_FormatList::GetPhysicalFormats(*(_QWORD *)(a1 + 40) + 128, *(unsigned int *)(a1 + 56) / 0x38uLL, (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(AudioStreamBasicDescription **)(a1 + 48));
}

void sub_1B5A01BE4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK14HALS_PDPStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(_QWORD *)(result + 40) + 144)
                                                                   - *(_DWORD *)(*(_QWORD *)(result + 40) + 136)) & 0xFFFFFFF8;
  return result;
}

uint64_t ___ZNK14HALS_PDPStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = -1840700264
                                                                  * ((*(_QWORD *)(*(_QWORD *)(result + 40) + 144)
                                                                    - *(_QWORD *)(*(_QWORD *)(result + 40) + 136)) >> 3);
  return result;
}

uint64_t ___ZNK14HALS_PDPStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(_QWORD *)(result + 40) + 168)
                                                                   - *(_DWORD *)(*(_QWORD *)(result + 40) + 160)) & 0xFFFFFFF8;
  return result;
}

uint64_t ___ZNK14HALS_PDPStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(_QWORD *)(result + 40) + 168)
                                                                   - *(_DWORD *)(*(_QWORD *)(result + 40) + 160)) & 0xFFFFFFF8;
  return result;
}

void HALS_PDPStream::BuildFormatList(HALS_PDPStream *this)
{
  char *v1;
  unsigned int *v2;
  unsigned int PropertyDataSize;
  uint64_t v4;
  uint64_t v5;
  const AudioStreamRangedDescription *v6;
  const AudioStreamRangedDescription *v7;
  HALB_FormatList *v8;
  HALB_FormatList *v9;
  const AudioStreamRangedDescription *v10;
  _BYTE v11[4];
  unsigned int v12;
  AudioObjectPropertyAddress v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 11) = *((_QWORD *)this + 10);
  *((_QWORD *)this + 14) = *((_QWORD *)this + 13);
  *((_QWORD *)this + 18) = *((_QWORD *)this + 17);
  *((_QWORD *)this + 21) = *((_QWORD *)this + 20);
  *(_QWORD *)&v13.mSelector = *(_QWORD *)"atfpbolg";
  v13.mElement = 0;
  v1 = (char *)this + 64;
  v2 = (unsigned int *)((char *)this + 16);
  PropertyDataSize = HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(*(HALS_PDPUCPlugIn **)(*((_QWORD *)this + 8) + 64), *((unsigned int *)this + 4), &v13, 0, 0);
  v12 = PropertyDataSize;
  LODWORD(v4) = PropertyDataSize / 0x38;
  MEMORY[0x1E0C80A78]();
  v6 = (const AudioStreamRangedDescription *)&v11[-v5];
  HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(*(_QWORD *)v1 + 72), *v2, &v13, 0, 0, &v12, &v11[-v5]);
  if (PropertyDataSize >= 0x38)
  {
    v8 = (HALB_FormatList *)(v1 + 8);
    v9 = (HALB_FormatList *)(v1 + 64);
    if (v4 <= 1)
      v4 = 1;
    else
      v4 = v4;
    do
    {
      HALB_FormatList::AddPhysicalFormat(v8, v6, v7);
      if (v6->mFormat.mFormatID == 1819304813)
        v6->mFormat.mFormatFlags &= ~0x40u;
      HALB_FormatList::AddPhysicalFormat(v9, v6++, v10);
      --v4;
    }
    while (v4);
  }
}

void sub_1B5A01EBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B5A01F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B5A0204C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  void *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == &a10)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_1B5A021C4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v6 = (_QWORD *)v1[15];
  if (v6 == v4)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v4 = (_QWORD *)v1[15];
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v7))(v4);
LABEL_6:
  v8 = (_QWORD *)v1[11];
  if (v8 == v3)
  {
    v9 = 4;
    v8 = v3;
  }
  else
  {
    if (!v8)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  v10 = (_QWORD *)v1[7];
  if (v10 == v2)
  {
    v11 = 4;
    v10 = v2;
  }
  else
  {
    if (!v10)
      goto LABEL_16;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_16:
  v12 = (_QWORD *)v1[3];
  if (v12 == v1)
  {
    v13 = 4;
  }
  else
  {
    if (!v12)
      goto LABEL_21;
    v13 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v13))(v1);
LABEL_21:
  _Unwind_Resume(exception_object);
}

void sub_1B5A02380(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double AMCP::DAL::PCM_File_Handler::get_length_in_frames(AMCP::DAL::PCM_File_Handler *this)
{
  OpaqueExtAudioFile *v1;
  AMCP::Utility::OSStatus_Error_Category *Property;
  unsigned int v3;
  AMCP::Log::Scope_Registry *v4;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  void *exception;
  NSObject *v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  void *v13;
  std::string v14;
  uint64_t v15;
  std::logic_error v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  UInt32 ioPropertyDataSize;
  __int128 v25;
  uint64_t v26;
  uint64_t (**v27)();
  _BYTE v28[24];
  std::logic_error outPropertyData;
  uint8_t buf[8];
  __int16 v31;
  char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  _BYTE v36[14];
  const char *v37;
  const char *v38;
  const char *v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v1 = (OpaqueExtAudioFile *)*((_QWORD *)this + 6);
  if (!v1)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      v31 = 2080;
      v32 = "PCM_File_Handler.cpp";
      v33 = 1024;
      v34 = 57;
      v35 = 2080;
      *(_QWORD *)v36 = "not (m_audio_File != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_File_Handler::GetLengthInFrames: mAudioFile is null", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&ioPropertyDataSize);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"PCM_File_Handler::GetLengthInFrames: mAudioFile is null", (uint64_t)&v14);
    std::logic_error::logic_error(&outPropertyData, &v14);
    outPropertyData.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v16, &outPropertyData);
    *((_QWORD *)&v17 + 1) = 0;
    v18 = 0;
    v19 = 0;
    LODWORD(v20) = -1;
    v16.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    *(_QWORD *)&v17 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v16);
    *(_QWORD *)&v36[6] = "virtual Sample_Time AMCP::DAL::PCM_File_Handler::get_length_in_frames() const";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Handler.cpp";
    LODWORD(v38) = 57;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v25);
    *(_OWORD *)v28 = v25;
    v27 = off_1E69A20A0;
    *(_QWORD *)&v28[16] = v26;
    v25 = 0uLL;
    v26 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v27);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  outPropertyData.__vftable = 0;
  ioPropertyDataSize = 8;
  Property = (AMCP::Utility::OSStatus_Error_Category *)ExtAudioFileGetProperty(v1, 0x2366726Du, &ioPropertyDataSize, &outPropertyData);
  v3 = Property;
  AMCP::Utility::OSStatus_Error_Category::get(Property);
  if (v3)
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v10 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v12;
      v31 = 2080;
      v32 = "PCM_File_Handler.cpp";
      v33 = 1024;
      v34 = 61;
      v35 = 2080;
      *(_QWORD *)v36 = "the_error.operator BOOL()";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_File_Handler::GetFileLengthInFrames: couldn't get the file's length", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v23);
    v13 = __cxa_allocate_exception(0x50uLL);
    MEMORY[0x1B5E50220](&v27, v3, &AMCP::Utility::OSStatus_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error((std::runtime_error *)&v16, (const std::runtime_error *)&v27);
    v17 = *(_OWORD *)&v28[8];
    v20 = 0;
    v21 = 0;
    v22 = -1;
    v16.__vftable = (std::logic_error_vtbl *)&off_1E69A12F8;
    v18 = &unk_1E69A1320;
    v19 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v16);
    v38 = "virtual Sample_Time AMCP::DAL::PCM_File_Handler::get_length_in_frames() const";
    v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Handler.cpp";
    v40 = 61;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v25);
    v14.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = v25;
    v15 = v26;
    v25 = 0uLL;
    v26 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)buf, (uint64_t)&v14);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)v13, (uint64_t)buf);
  }
  return (double)(uint64_t)outPropertyData.__vftable;
}

void sub_1B5A02778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::runtime_error a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,__int16 a24,char a25,char a26,char a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,std::runtime_error a32)
{
  void *v32;
  int v33;
  uint64_t v34;
  uint64_t v36;

  if (__p)
    operator delete(__p);
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  *(_QWORD *)(v34 - 96) = &unk_1E69A2000;
  v36 = *(_QWORD *)(v34 - 88);
  if (v36 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 32))(v36))
    *(_QWORD *)(v34 - 88) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v34 - 128));
  a19 = &unk_1E69A2000;
  if (a20 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a20 + 32))(a20))
    a20 = 0;
  std::runtime_error::~runtime_error(&a16);
  std::runtime_error::~runtime_error(&a32);
  if (v33)
    __cxa_free_exception(v32);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a26);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *AMCP::DAL::PCM_File_Factory@<X0>(_QWORD *a1@<X0>, char **a2@<X8>)
{
  unsigned __int8 *v4;
  char *v5;
  void **v6;
  CFIndex v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  char **v10;
  char *v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  char *v14;
  uint64_t v15;
  unint64_t v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  const __CFURL *v20;
  const __CFURL *v21;
  ExtAudioFileRef *v22;
  AMCP::Utility::OSStatus_Error_Category *v23;
  unsigned int v24;
  AMCP::Log::Scope_Registry *v25;
  AMCP::Utility::OSStatus_Error_Category *Property;
  unsigned int v27;
  AMCP::Log::Scope_Registry *v28;
  AMCP::Log::Scope_Registry *v29;
  AMCP::Utility::OSStatus_Error_Category *v30;
  unsigned int v31;
  AMCP::Log::Scope_Registry *v32;
  caulk::rt_safe_memory_resource *result;
  uint64_t (**v34)();
  void **v35;
  uint64_t v36;
  char v37;
  _BOOL8 v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type v46;
  char v47;
  void **v48;
  Float64 mSampleRate;
  int v50;
  std::string *v51;
  std::string *v52;
  std::string::size_type size;
  std::string::size_type v54;
  char v55;
  void *v56;
  std::__shared_weak_count *v57;
  NSObject *v58;
  unint64_t *v59;
  unint64_t v60;
  _OWORD *v61;
  CFIndex v62;
  const UInt8 *v63;
  CFURLRef v64;
  __int128 v65;
  UInt32 v66;
  AMCP::Utility::OSStatus_Error_Category *v67;
  unsigned int v68;
  AMCP::Log::Scope_Registry *v69;
  AMCP::Utility::OSStatus_Error_Category *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  std::string::size_type v74;
  char *v75;
  int v76;
  std::string::size_type v77;
  std::string *v78;
  std::string *v79;
  std::string::size_type v80;
  char v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  int64x2_t v93;
  uint64_t v94;
  AMCP::Log::Scope_Registry *v95;
  std::__shared_weak_count *v96;
  NSObject *v97;
  unint64_t *v98;
  unint64_t v99;
  os_signpost_id_t v100;
  os_signpost_id_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  char *v105;
  std::__shared_weak_count *v106;
  NSObject *v107;
  unint64_t *v108;
  unint64_t v109;
  NSObject *v110;
  _opaque_pthread_t *v111;
  mach_port_t v112;
  void *v113;
  _opaque_pthread_t *v114;
  mach_port_t v115;
  _QWORD *v116;
  _opaque_pthread_t *v117;
  mach_port_t v118;
  std::__shared_weak_count *v119;
  NSObject *v120;
  unint64_t *v121;
  unint64_t v122;
  _opaque_pthread_t *v123;
  mach_port_t v124;
  std::logic_error *exception;
  uint64_t v126;
  int v127;
  uint64_t v128;
  std::logic_error v129;
  std::__shared_weak_count *v130;
  NSObject *v131;
  unint64_t *v132;
  unint64_t v133;
  _opaque_pthread_t *v134;
  mach_port_t v135;
  std::runtime_error *v136;
  int v137;
  uint64_t v138;
  std::runtime_error v139;
  std::__shared_weak_count *v140;
  NSObject *v141;
  unint64_t *v142;
  unint64_t v143;
  _opaque_pthread_t *v144;
  mach_port_t v145;
  uint64_t v146;
  std::runtime_error *v147;
  int v148;
  uint64_t v149;
  std::runtime_error v150;
  std::__shared_weak_count *v151;
  NSObject *v152;
  unint64_t *v153;
  unint64_t v154;
  _opaque_pthread_t *v155;
  mach_port_t v156;
  std::logic_error *v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  std::logic_error v161;
  std::__shared_weak_count *v162;
  NSObject *v163;
  unint64_t *v164;
  unint64_t v165;
  _opaque_pthread_t *v166;
  mach_port_t v167;
  uint64_t v168;
  std::runtime_error *v169;
  int v170;
  uint64_t v171;
  std::runtime_error v172;
  std::__shared_weak_count *v173;
  NSObject *v174;
  unint64_t *v175;
  unint64_t v176;
  _opaque_pthread_t *v177;
  mach_port_t v178;
  char *v179;
  std::logic_error *v180;
  char *v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  std::logic_error v185;
  std::__shared_weak_count *v186;
  NSObject *v187;
  unint64_t *v188;
  unint64_t v189;
  _opaque_pthread_t *v190;
  mach_port_t v191;
  std::logic_error *v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  std::logic_error v196;
  std::__shared_weak_count *v197;
  NSObject *v198;
  unint64_t *v199;
  unint64_t v200;
  _opaque_pthread_t *v201;
  mach_port_t v202;
  uint64_t v203;
  std::runtime_error *v204;
  int v205;
  uint64_t v206;
  std::runtime_error v207;
  std::string *v208;
  std::string v209;
  const char *v210;
  std::logic_error v211;
  const char *v212;
  std::runtime_error v213[2];
  char v214;
  ExtAudioFileRef outExtAudioFile;
  UInt32 ioPropertyDataSize[2];
  std::error_code v217;
  _BYTE inPropertyData[32];
  void *__p[2];
  std::runtime_error v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  _BYTE v226[48];
  std::runtime_error v227;
  int v228;
  AudioStreamBasicDescription outPropertyData;
  uint64_t v230;

  v230 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v226, "read");
  v4 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a1, v226);
  if ((v226[23] & 0x80000000) != 0)
    operator delete(*(void **)v226);
  if (v4)
  {
    v5 = (char *)operator new();
    AMCP::DAL::PCM_File_Handler::PCM_File_Handler((uint64_t)v5, a1);
    *(_QWORD *)v5 = &off_1E6970488;
    std::string::basic_string[abi:ne180100]<0>(__p, "name");
    std::string::basic_string[abi:ne180100]<0>(&outPropertyData, "");
    AMCP::DAL::DAL_Settings::at_or<std::string>((std::string *)v226, a1, (unsigned __int8 *)__p, (__n128 *)&outPropertyData);
    v6 = (void **)(v5 + 56);
    if (v5[79] < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)v226;
    *((_QWORD *)v5 + 9) = *(_QWORD *)&v226[16];
    if (SHIBYTE(outPropertyData.mFramesPerPacket) < 0)
      operator delete(*(void **)&outPropertyData.mSampleRate);
    if (SHIBYTE(v220.__vftable) < 0)
      operator delete(__p[0]);
    if (v5[79] < 0)
    {
      v6 = (void **)*((_QWORD *)v5 + 7);
      v7 = *((_QWORD *)v5 + 8);
    }
    else
    {
      v7 = v5[79];
    }
    v20 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)v6, v7, 0);
    v21 = v20;
    if (!v20)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v226, "com.apple.coreaudio", "AMCP");
      v119 = *(std::__shared_weak_count **)&v226[8];
      v120 = **(NSObject ***)v226;
      if (*(_QWORD *)&v226[8])
      {
        v121 = (unint64_t *)(*(_QWORD *)&v226[8] + 8);
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
          std::__shared_weak_count::__release_weak(v119);
        }
      }
      if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
      {
        v123 = pthread_self();
        v124 = pthread_mach_thread_np(v123);
        *(_DWORD *)v226 = 67109890;
        *(_DWORD *)&v226[4] = v124;
        *(_WORD *)&v226[8] = 2080;
        *(_QWORD *)&v226[10] = "PCM_File_Reader.cpp";
        *(_WORD *)&v226[18] = 1024;
        *(_DWORD *)&v226[20] = 38;
        *(_WORD *)&v226[24] = 2080;
        *(_QWORD *)&v226[26] = "not ((theURL) != nullptr)";
        _os_log_error_impl(&dword_1B57BA000, v120, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_File_Reader::PCM_File_Reader: failed to make a URL for the path", v226, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v211);
      exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"PCM_File_Reader::PCM_File_Reader: failed to make a URL for the path", (uint64_t)inPropertyData);
      std::logic_error::logic_error((std::logic_error *)&v209, (const std::string *)inPropertyData);
      v126 = MEMORY[0x1E0DE5018];
      v209.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error((std::logic_error *)__p, (const std::logic_error *)&v209);
      v220.__imp_.__imp_ = 0;
      v221 = 0;
      v222 = 0;
      LODWORD(v223) = -1;
      __p[0] = off_1E69A1208;
      v220.__vftable = (std::runtime_error_vtbl *)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v226, (uint64_t)__p);
      *(_QWORD *)&v226[32] = "AMCP::DAL::PCM_File_Reader::PCM_File_Reader(const DAL_Settings &)";
      *(_QWORD *)&v226[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Reader.cpp";
      LODWORD(v227.__vftable) = 38;
      std::vector<void *>::vector(v213);
      v127 = backtrace((void **)&v213[0].~runtime_error, (unint64_t)(v213[0].__imp_.__imp_ - (const char *)v213[0].__vftable) >> 3);
      std::vector<void *>::resize((char **)v213, v127);
      *(std::runtime_error *)&outPropertyData.mFormatID = v213[0];
      *(_QWORD *)&outPropertyData.mSampleRate = off_1E69A20A0;
      *(_QWORD *)&outPropertyData.mBytesPerFrame = v213[1].__vftable;
      memset(v213, 0, 24);
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v226, (uint64_t)&outPropertyData);
      exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::logic_error::logic_error(exception, (const std::logic_error *)v226);
      exception->__vftable = (std::logic_error_vtbl *)(v126 + 16);
      exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
      v128 = *(_QWORD *)&v226[24];
      exception[1].__imp_.__imp_ = *(const char **)&v226[24];
      if (v128)
        (*(void (**)(uint64_t))(*(_QWORD *)v128 + 24))(v128);
      v129 = *(std::logic_error *)&v226[32];
      LODWORD(exception[3].__vftable) = v227.__vftable;
      exception[2] = v129;
      exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
      exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
      exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
    }
    v22 = (ExtAudioFileRef *)(v5 + 48);
    v23 = (AMCP::Utility::OSStatus_Error_Category *)ExtAudioFileOpenURL(v20, (ExtAudioFileRef *)v5 + 6);
    v24 = v23;
    AMCP::Utility::OSStatus_Error_Category::get(v23);
    CFRelease(v21);
    if (v24)
    {
      AMCP::Log::Scope_Registry::get(v25);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v226, "com.apple.coreaudio", "AMCP");
      v130 = *(std::__shared_weak_count **)&v226[8];
      v131 = **(NSObject ***)v226;
      if (*(_QWORD *)&v226[8])
      {
        v132 = (unint64_t *)(*(_QWORD *)&v226[8] + 8);
        do
          v133 = __ldaxr(v132);
        while (__stlxr(v133 - 1, v132));
        if (!v133)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
      if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
      {
        v134 = pthread_self();
        v135 = pthread_mach_thread_np(v134);
        *(_DWORD *)v226 = 67109890;
        *(_DWORD *)&v226[4] = v135;
        *(_WORD *)&v226[8] = 2080;
        *(_QWORD *)&v226[10] = "PCM_File_Reader.cpp";
        *(_WORD *)&v226[18] = 1024;
        *(_DWORD *)&v226[20] = 41;
        *(_WORD *)&v226[24] = 2080;
        *(_QWORD *)&v226[26] = "the_error.operator BOOL()";
        _os_log_error_impl(&dword_1B57BA000, v131, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_File_Reader::PCM_File_Reader: got an error opening the file", v226, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v209);
      v136 = (std::runtime_error *)__cxa_allocate_exception(0x50uLL);
      MEMORY[0x1B5E50220](&outPropertyData, v24, &AMCP::Utility::OSStatus_Error_Category::get(void)::s_category);
      std::runtime_error::runtime_error((std::runtime_error *)__p, (const std::runtime_error *)&outPropertyData);
      v220 = *(std::runtime_error *)&outPropertyData.mBytesPerPacket;
      v223 = 0;
      v224 = 0;
      v225 = -1;
      __p[0] = &off_1E69A12F8;
      v221 = &unk_1E69A1320;
      v222 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)v226, (uint64_t)__p);
      v227.__vftable = (std::runtime_error_vtbl *)"AMCP::DAL::PCM_File_Reader::PCM_File_Reader(const DAL_Settings &)";
      v227.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Reader.cpp";
      v228 = 41;
      std::vector<void *>::vector(v213);
      v137 = backtrace((void **)&v213[0].~runtime_error, (unint64_t)(v213[0].__imp_.__imp_ - (const char *)v213[0].__vftable) >> 3);
      std::vector<void *>::resize((char **)v213, v137);
      *(std::runtime_error *)&inPropertyData[8] = v213[0];
      *(_QWORD *)inPropertyData = off_1E69A20A0;
      *(_QWORD *)&inPropertyData[24] = v213[1].__vftable;
      memset(v213, 0, 24);
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)v226, (uint64_t)inPropertyData);
      v136[4].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::runtime_error::runtime_error(v136, (const std::runtime_error *)v226);
      v136->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
      v136[1] = *(std::runtime_error *)&v226[16];
      v136[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
      v138 = *(_QWORD *)&v226[40];
      v136[2].__imp_.__imp_ = *(const char **)&v226[40];
      if (v138)
        (*(void (**)(uint64_t))(*(_QWORD *)v138 + 24))(v138);
      v139 = v227;
      LODWORD(v136[4].__vftable) = v228;
      v136[3] = v139;
      v136->__vftable = (std::runtime_error_vtbl *)&off_1E69A1258;
      v136[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1290;
      v136[4].__imp_.__imp_ = (const char *)&unk_1E69A12C8;
    }
    memset(&outPropertyData, 0, sizeof(outPropertyData));
    ioPropertyDataSize[0] = 40;
    Property = (AMCP::Utility::OSStatus_Error_Category *)ExtAudioFileGetProperty(*v22, 0x66666D74u, ioPropertyDataSize, &outPropertyData);
    v27 = Property;
    AMCP::Utility::OSStatus_Error_Category::get(Property);
    if (v27)
    {
      AMCP::Log::Scope_Registry::get(v28);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v226, "com.apple.coreaudio", "AMCP");
      v140 = *(std::__shared_weak_count **)&v226[8];
      v141 = **(NSObject ***)v226;
      if (*(_QWORD *)&v226[8])
      {
        v142 = (unint64_t *)(*(_QWORD *)&v226[8] + 8);
        do
          v143 = __ldaxr(v142);
        while (__stlxr(v143 - 1, v142));
        if (!v143)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
      {
        v144 = pthread_self();
        v145 = pthread_mach_thread_np(v144);
        *(_DWORD *)v226 = 67109890;
        *(_DWORD *)&v226[4] = v145;
        *(_WORD *)&v226[8] = 2080;
        *(_QWORD *)&v226[10] = "PCM_File_Reader.cpp";
        *(_WORD *)&v226[18] = 1024;
        *(_DWORD *)&v226[20] = 50;
        *(_WORD *)&v226[24] = 2080;
        *(_QWORD *)&v226[26] = "the_error.operator BOOL()";
        _os_log_error_impl(&dword_1B57BA000, v141, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_File_Reader::PCM_File_Reader: couldn't get the file's format", v226, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v211);
      v146 = v27;
      v147 = (std::runtime_error *)__cxa_allocate_exception(0x50uLL);
      MEMORY[0x1B5E50220](inPropertyData, v146, &AMCP::Utility::OSStatus_Error_Category::get(void)::s_category);
      std::runtime_error::runtime_error((std::runtime_error *)__p, (const std::runtime_error *)inPropertyData);
      v220 = *(std::runtime_error *)&inPropertyData[16];
      v223 = 0;
      v224 = 0;
      v225 = -1;
      __p[0] = &off_1E69A12F8;
      v221 = &unk_1E69A1320;
      v222 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)v226, (uint64_t)__p);
      v227.__vftable = (std::runtime_error_vtbl *)"AMCP::DAL::PCM_File_Reader::PCM_File_Reader(const DAL_Settings &)";
      v227.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Reader.cpp";
      v228 = 50;
      std::vector<void *>::vector(&v209);
      v148 = backtrace((void **)v209.__r_.__value_.__l.__data_, (v209.__r_.__value_.__l.__size_ - v209.__r_.__value_.__r.__words[0]) >> 3);
      std::vector<void *>::resize(&v209.__r_.__value_.__l.__data_, v148);
      v213[0].__vftable = (std::runtime_error_vtbl *)off_1E69A20A0;
      *(std::string *)&v213[0].__imp_.__imp_ = v209;
      memset(&v209, 0, sizeof(v209));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)v226, (uint64_t)v213);
      v147[4].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::runtime_error::runtime_error(v147, (const std::runtime_error *)v226);
      v147->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
      v147[1] = *(std::runtime_error *)&v226[16];
      v147[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
      v149 = *(_QWORD *)&v226[40];
      v147[2].__imp_.__imp_ = *(const char **)&v226[40];
      if (v149)
        (*(void (**)(uint64_t))(*(_QWORD *)v149 + 24))(v149);
      v150 = v227;
      LODWORD(v147[4].__vftable) = v228;
      v147[3] = v150;
      v147->__vftable = (std::runtime_error_vtbl *)&off_1E69A1258;
      v147[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1290;
      v147[4].__imp_.__imp_ = (const char *)&unk_1E69A12C8;
    }
    v29 = (AMCP::Log::Scope_Registry *)(*(_QWORD *(**)(_BYTE *__return_ptr, char *))(*(_QWORD *)v5 + 40))(inPropertyData, v5);
    if (*(_DWORD *)&inPropertyData[28] != outPropertyData.mChannelsPerFrame)
    {
      AMCP::Log::Scope_Registry::get(v29);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v226, "com.apple.coreaudio", "AMCP");
      v151 = *(std::__shared_weak_count **)&v226[8];
      v152 = **(NSObject ***)v226;
      if (*(_QWORD *)&v226[8])
      {
        v153 = (unint64_t *)(*(_QWORD *)&v226[8] + 8);
        do
          v154 = __ldaxr(v153);
        while (__stlxr(v154 - 1, v153));
        if (!v154)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
      if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
      {
        v155 = pthread_self();
        v156 = pthread_mach_thread_np(v155);
        *(_DWORD *)v226 = 67109890;
        *(_DWORD *)&v226[4] = v156;
        *(_WORD *)&v226[8] = 2080;
        *(_QWORD *)&v226[10] = "PCM_File_Reader.cpp";
        *(_WORD *)&v226[18] = 1024;
        *(_DWORD *)&v226[20] = 54;
        *(_WORD *)&v226[24] = 2080;
        *(_QWORD *)&v226[26] = "not (format.mChannelsPerFrame == the_file_format.mChannelsPerFrame)";
        _os_log_error_impl(&dword_1B57BA000, v152, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_File_Reader::PCM_File_Reader: the client format has a different number of channels", v226, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&outExtAudioFile);
      v157 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"PCM_File_Reader::PCM_File_Reader: the client format has a different number of channels", (uint64_t)&v209);
      std::logic_error::logic_error((std::logic_error *)&v217, &v209);
      v158 = MEMORY[0x1E0DE5018];
      *(_QWORD *)&v217.__val_ = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error((std::logic_error *)__p, (const std::logic_error *)&v217);
      v220.__imp_.__imp_ = 0;
      v221 = 0;
      v222 = 0;
      LODWORD(v223) = -1;
      __p[0] = off_1E69A1208;
      v220.__vftable = (std::runtime_error_vtbl *)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v226, (uint64_t)__p);
      *(_QWORD *)&v226[32] = "AMCP::DAL::PCM_File_Reader::PCM_File_Reader(const DAL_Settings &)";
      *(_QWORD *)&v226[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Reader.cpp";
      LODWORD(v227.__vftable) = 54;
      std::vector<void *>::vector(&v211);
      v159 = backtrace((void **)&v211.~logic_error, (unint64_t)(v211.__imp_.__imp_ - (const char *)v211.__vftable) >> 3);
      std::vector<void *>::resize((char **)&v211, v159);
      v213[0].__vftable = (std::runtime_error_vtbl *)off_1E69A20A0;
      *(std::logic_error *)&v213[0].__imp_.__imp_ = v211;
      v213[1].__imp_.__imp_ = v212;
      v211.__vftable = 0;
      v211.__imp_.__imp_ = 0;
      v212 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v226, (uint64_t)v213);
      v157[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::logic_error::logic_error(v157, (const std::logic_error *)v226);
      v157->__vftable = (std::logic_error_vtbl *)(v158 + 16);
      v157[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
      v160 = *(_QWORD *)&v226[24];
      v157[1].__imp_.__imp_ = *(const char **)&v226[24];
      if (v160)
        (*(void (**)(uint64_t))(*(_QWORD *)v160 + 24))(v160);
      v161 = *(std::logic_error *)&v226[32];
      LODWORD(v157[3].__vftable) = v227.__vftable;
      v157[2] = v161;
      v157->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
      v157[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
      v157[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
    }
    v30 = (AMCP::Utility::OSStatus_Error_Category *)ExtAudioFileSetProperty(*v22, 0x63666D74u, 0x28u, inPropertyData);
    v31 = v30;
    AMCP::Utility::OSStatus_Error_Category::get(v30);
    if (v31)
    {
      AMCP::Log::Scope_Registry::get(v32);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v226, "com.apple.coreaudio", "AMCP");
      v162 = *(std::__shared_weak_count **)&v226[8];
      v163 = **(NSObject ***)v226;
      if (*(_QWORD *)&v226[8])
      {
        v164 = (unint64_t *)(*(_QWORD *)&v226[8] + 8);
        do
          v165 = __ldaxr(v164);
        while (__stlxr(v165 - 1, v164));
        if (!v165)
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
        }
      }
      if (os_log_type_enabled(v163, OS_LOG_TYPE_ERROR))
      {
        v166 = pthread_self();
        v167 = pthread_mach_thread_np(v166);
        *(_DWORD *)v226 = 67109890;
        *(_DWORD *)&v226[4] = v167;
        *(_WORD *)&v226[8] = 2080;
        *(_QWORD *)&v226[10] = "PCM_File_Reader.cpp";
        *(_WORD *)&v226[18] = 1024;
        *(_DWORD *)&v226[20] = 58;
        *(_WORD *)&v226[24] = 2080;
        *(_QWORD *)&v226[26] = "the_error.operator BOOL()";
        _os_log_error_impl(&dword_1B57BA000, v163, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_File_Reader::PCM_File_Reader: couldn't set the file's client format", v226, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v217);
      v168 = v31;
      v169 = (std::runtime_error *)__cxa_allocate_exception(0x50uLL);
      MEMORY[0x1B5E50220](v213, v168, &AMCP::Utility::OSStatus_Error_Category::get(void)::s_category);
      std::runtime_error::runtime_error((std::runtime_error *)__p, v213);
      v220 = v213[1];
      v223 = 0;
      v224 = 0;
      v225 = -1;
      __p[0] = &off_1E69A12F8;
      v221 = &unk_1E69A1320;
      v222 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)v226, (uint64_t)__p);
      v227.__vftable = (std::runtime_error_vtbl *)"AMCP::DAL::PCM_File_Reader::PCM_File_Reader(const DAL_Settings &)";
      v227.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Reader.cpp";
      v228 = 58;
      std::vector<void *>::vector(&v211);
      v170 = backtrace((void **)&v211.~logic_error, (unint64_t)(v211.__imp_.__imp_ - (const char *)v211.__vftable) >> 3);
      std::vector<void *>::resize((char **)&v211, v170);
      v209.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
      *(std::logic_error *)&v209.__r_.__value_.__r.__words[1] = v211;
      v210 = v212;
      v211.__vftable = 0;
      v211.__imp_.__imp_ = 0;
      v212 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)v226, (uint64_t)&v209);
      v169[4].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::runtime_error::runtime_error(v169, (const std::runtime_error *)v226);
      v169->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
      v169[1] = *(std::runtime_error *)&v226[16];
      v169[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
      v171 = *(_QWORD *)&v226[40];
      v169[2].__imp_.__imp_ = *(const char **)&v226[40];
      if (v171)
        (*(void (**)(uint64_t))(*(_QWORD *)v171 + 24))(v171);
      v172 = v227;
      LODWORD(v169[4].__vftable) = v228;
      v169[3] = v172;
      v169->__vftable = (std::runtime_error_vtbl *)&off_1E69A1258;
      v169[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1290;
      v169[4].__imp_.__imp_ = (const char *)&unk_1E69A12C8;
    }
    *a2 = v5;
    result = (caulk::rt_safe_memory_resource *)operator new();
    *((_QWORD *)result + 2) = 0;
    v34 = &off_1E697D738;
LABEL_169:
    *(_QWORD *)result = v34;
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 3) = v5;
    a2[1] = (char *)result;
    return result;
  }
  std::string::basic_string[abi:ne180100]<0>(v226, "write");
  v8 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a1, v226);
  v9 = v8;
  if ((v226[23] & 0x80000000) != 0)
    operator delete(*(void **)v226);
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v226, "com.apple.coreaudio", "AMCP");
    v110 = **(NSObject ***)v226;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v226);
    if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
    {
      v111 = pthread_self();
      v112 = pthread_mach_thread_np(v111);
      *(_DWORD *)v226 = 67109634;
      *(_DWORD *)&v226[4] = v112;
      *(_WORD *)&v226[8] = 2080;
      *(_QWORD *)&v226[10] = "PCM_File_Handler.cpp";
      *(_WORD *)&v226[18] = 1024;
      *(_DWORD *)&v226[20] = 39;
      _os_log_error_impl(&dword_1B57BA000, v110, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: PCM_File_Factory must either read or write a file", v226, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v211);
    v113 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"PCM_File_Factory must either read or write a file", (uint64_t)inPropertyData);
    std::runtime_error::runtime_error((std::runtime_error *)&v209, (const std::string *)inPropertyData);
    std::runtime_error::runtime_error((std::runtime_error *)__p, (const std::runtime_error *)&v209);
    v220.__imp_.__imp_ = 0;
    v221 = 0;
    v222 = 0;
    LODWORD(v223) = -1;
    __p[0] = &off_1E69A1FB8;
    v220.__vftable = (std::runtime_error_vtbl *)&unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v226, (uint64_t)__p);
    *(_QWORD *)&v226[32] = "std::shared_ptr<DAL_File_Handler> AMCP::DAL::PCM_File_Factory(const DAL_Settings &)";
    *(_QWORD *)&v226[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Handler.cpp";
    LODWORD(v227.__vftable) = 39;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v213);
    *(std::runtime_error *)&outPropertyData.mFormatID = v213[0];
    *(_QWORD *)&outPropertyData.mSampleRate = off_1E69A20A0;
    *(_QWORD *)&outPropertyData.mBytesPerFrame = v213[1].__vftable;
    memset(v213, 0, 24);
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)v226, (uint64_t)&outPropertyData);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v113, (uint64_t)v226);
  }
  v5 = (char *)operator new();
  AMCP::DAL::PCM_File_Handler::PCM_File_Handler((uint64_t)v5, a1);
  *(_QWORD *)v5 = &off_1E69A1000;
  *((_QWORD *)v5 + 10) = 0;
  std::string::basic_string[abi:ne180100]<0>(v226, "name");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v208 = (std::string *)(v5 + 88);
  AMCP::DAL::DAL_Settings::at_or<std::string>((std::string *)(v5 + 88), a1, v226, (__n128 *)__p);
  if (SHIBYTE(v220.__vftable) < 0)
    operator delete(__p[0]);
  if ((v226[23] & 0x80000000) != 0)
    operator delete(*(void **)v226);
  *((_QWORD *)v5 + 14) = 0;
  *((_QWORD *)v5 + 15) = 0;
  *((_QWORD *)v5 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v226, "file location");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v10 = (char **)(v5 + 136);
  AMCP::DAL::DAL_Settings::at_or<std::string>((std::string *)(v5 + 136), a1, v226, (__n128 *)__p);
  if (SHIBYTE(v220.__vftable) < 0)
    operator delete(__p[0]);
  if ((v226[23] & 0x80000000) != 0)
    operator delete(*(void **)v226);
  *((_QWORD *)v5 + 21) = 0;
  v11 = v5 + 168;
  v5[160] = 1;
  std::string::basic_string[abi:ne180100]<0>(v226, "write time stamps");
  v5[160] = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a1, v226) != 0;
  if ((v226[23] & 0x80000000) != 0)
    operator delete(*(void **)v226);
  std::string::basic_string[abi:ne180100]<0>(__p, "wire id");
  std::string::basic_string[abi:ne180100]<0>(&outPropertyData, "");
  AMCP::DAL::DAL_Settings::at_or<std::string>((std::string *)v226, a1, (unsigned __int8 *)__p, (__n128 *)&outPropertyData);
  if (v226[23] >= 0)
    v12 = v226;
  else
    v12 = *(const std::string::value_type **)v226;
  if (v226[23] >= 0)
    v13 = v226[23];
  else
    v13 = *(_QWORD *)&v226[8];
  std::string::append(v208, v12, v13);
  if ((v226[23] & 0x80000000) != 0)
    operator delete(*(void **)v226);
  if (SHIBYTE(outPropertyData.mFramesPerPacket) < 0)
    operator delete(*(void **)&outPropertyData.mSampleRate);
  if (SHIBYTE(v220.__vftable) < 0)
    operator delete(__p[0]);
  v217.__val_ = 0;
  v217.__cat_ = std::system_category();
  v14 = v5 + 136;
  if (v5[159] < 0)
    v14 = *v10;
  v15 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v220.__vftable = 0;
  while (v14[v15++])
    ;
  v17 = v15 - 1;
  if (v15 != 1)
  {
    if (__p > (void **)v14 || (char *)__p + 1 <= v14)
    {
      if (v17 < 0x17)
      {
        v35 = __p;
      }
      else
      {
        std::string::__grow_by((std::string *)__p, 0x16uLL, v15 - 23, 0, 0, 0, 0);
        __p[1] = 0;
        if (SHIBYTE(v220.__vftable) >= 0)
          v35 = __p;
        else
          v35 = (void **)__p[0];
      }
      v36 = v15 - 1;
      do
      {
        v37 = *v14++;
        *(_BYTE *)v35 = v37;
        v35 = (void **)((char *)v35 + 1);
        --v36;
      }
      while (v36);
      *(_BYTE *)v35 = 0;
      if (SHIBYTE(v220.__vftable) < 0)
        __p[1] = (void *)(v15 - 1);
      else
        HIBYTE(v220.__vftable) = v17 & 0x7F;
    }
    else
    {
      std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(v226, v14, &v14[v15 - 1], v15 - 1);
      if (v226[23] >= 0)
        v18 = v226;
      else
        v18 = *(const std::string::value_type **)v226;
      if (v226[23] >= 0)
        v19 = v226[23];
      else
        v19 = *(_QWORD *)&v226[8];
      std::string::append((std::string *)__p, v18, v19);
      if ((v226[23] & 0x80000000) != 0)
        operator delete(*(void **)v226);
    }
  }
  v38 = std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)__p, &v217);
  if (SHIBYTE(v220.__vftable) < 0)
    operator delete(__p[0]);
  if (v217.__val_)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v38);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v226, "com.apple.coreaudio", "AMCP");
    v173 = *(std::__shared_weak_count **)&v226[8];
    v174 = **(NSObject ***)v226;
    if (*(_QWORD *)&v226[8])
    {
      v175 = (unint64_t *)(*(_QWORD *)&v226[8] + 8);
      do
        v176 = __ldaxr(v175);
      while (__stlxr(v176 - 1, v175));
      if (!v176)
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
      }
    }
    if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
    {
      v177 = pthread_self();
      v178 = pthread_mach_thread_np(v177);
      v179 = v5 + 136;
      if (v5[159] < 0)
        v179 = *v10;
      *(_DWORD *)v226 = 67110146;
      *(_DWORD *)&v226[4] = v178;
      *(_WORD *)&v226[8] = 2080;
      *(_QWORD *)&v226[10] = "PCM_File_Writer.cpp";
      *(_WORD *)&v226[18] = 1024;
      *(_DWORD *)&v226[20] = 46;
      *(_WORD *)&v226[24] = 2080;
      *(_QWORD *)&v226[26] = "not (!theError)";
      *(_WORD *)&v226[34] = 2080;
      *(_QWORD *)&v226[36] = v179;
      _os_log_error_impl(&dword_1B57BA000, v174, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_File_Writer::PCM_File_Writer: failed to create the directory %s", v226, 0x2Cu);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v211);
    v180 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    v181 = v5 + 136;
    if (v5[159] < 0)
      v181 = *v10;
    caulk::make_string((caulk *)"PCM_File_Writer::PCM_File_Writer: failed to create the directory %s", (uint64_t)inPropertyData, v181);
    std::logic_error::logic_error((std::logic_error *)&v209, (const std::string *)inPropertyData);
    v182 = MEMORY[0x1E0DE5018];
    v209.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)__p, (const std::logic_error *)&v209);
    v220.__imp_.__imp_ = 0;
    v221 = 0;
    v222 = 0;
    LODWORD(v223) = -1;
    __p[0] = off_1E69A1208;
    v220.__vftable = (std::runtime_error_vtbl *)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v226, (uint64_t)__p);
    *(_QWORD *)&v226[32] = "AMCP::DAL::PCM_File_Writer::PCM_File_Writer(const DAL_Settings &)";
    *(_QWORD *)&v226[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Writer.cpp";
    LODWORD(v227.__vftable) = 46;
    std::vector<void *>::vector(v213);
    v183 = backtrace((void **)&v213[0].~runtime_error, (unint64_t)(v213[0].__imp_.__imp_ - (const char *)v213[0].__vftable) >> 3);
    std::vector<void *>::resize((char **)v213, v183);
    *(std::runtime_error *)&outPropertyData.mFormatID = v213[0];
    *(_QWORD *)&outPropertyData.mSampleRate = off_1E69A20A0;
    *(_QWORD *)&outPropertyData.mBytesPerFrame = v213[1].__vftable;
    memset(v213, 0, 24);
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v226, (uint64_t)&outPropertyData);
    v180[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(v180, (const std::logic_error *)v226);
    v180->__vftable = (std::logic_error_vtbl *)(v182 + 16);
    v180[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v184 = *(_QWORD *)&v226[24];
    v180[1].__imp_.__imp_ = *(const char **)&v226[24];
    if (v184)
      (*(void (**)(uint64_t))(*(_QWORD *)v184 + 24))(v184);
    v185 = *(std::logic_error *)&v226[32];
    LODWORD(v180[3].__vftable) = v227.__vftable;
    v180[2] = v185;
    v180->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    v180[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    v180[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  std::string::basic_string[abi:ne180100]<0>(&v209, ".caf");
  std::string::basic_string[abi:ne180100]<0>(v226, "create unique name");
  v39 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a1, v226);
  v40 = v39;
  if ((v226[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v226);
    if (v40)
      goto LABEL_74;
LABEL_93:
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v226, (const void **)v5 + 17, (const void **)&v208->__r_.__value_.__l.__data_);
    if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = &v209;
    else
      v52 = (std::string *)v209.__r_.__value_.__r.__words[0];
    if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v209.__r_.__value_.__r.__words[2]);
    else
      size = v209.__r_.__value_.__l.__size_;
    v51 = std::string::append((std::string *)v226, (const std::string::value_type *)v52, size);
    v54 = v51->__r_.__value_.__r.__words[0];
    __p[0] = (void *)v51->__r_.__value_.__l.__size_;
    *(void **)((char *)__p + 7) = *(void **)((char *)&v51->__r_.__value_.__r.__words[1] + 7);
    v55 = HIBYTE(v51->__r_.__value_.__r.__words[2]);
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    if (v5[79] < 0)
      operator delete(*((void **)v5 + 7));
    v56 = __p[0];
    *((_QWORD *)v5 + 7) = v54;
    *((_QWORD *)v5 + 8) = v56;
    *(void **)(v5 + 71) = *(void **)((char *)__p + 7);
    v5[79] = v55;
    if ((v226[23] & 0x80000000) != 0)
      operator delete(*(void **)v226);
    goto LABEL_103;
  }
  if (!v39)
    goto LABEL_93;
LABEL_74:
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)v5 + 17, (const void **)&v208->__r_.__value_.__l.__data_);
  v41 = std::string::append((std::string *)__p, "-XXXXXX", 7uLL);
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  *(_QWORD *)&v226[16] = *((_QWORD *)&v41->__r_.__value_.__l + 2);
  *(_OWORD *)v226 = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = &v209;
  else
    v43 = (std::string *)v209.__r_.__value_.__r.__words[0];
  if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = HIBYTE(v209.__r_.__value_.__r.__words[2]);
  else
    v44 = v209.__r_.__value_.__l.__size_;
  v45 = std::string::append((std::string *)v226, (const std::string::value_type *)v43, v44);
  v46 = v45->__r_.__value_.__r.__words[0];
  *(_QWORD *)&outPropertyData.mSampleRate = v45->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)&outPropertyData.mSampleRate + 7) = *(std::string::size_type *)((char *)&v45->__r_.__value_.__r.__words[1]
                                                                                    + 7);
  v47 = HIBYTE(v45->__r_.__value_.__r.__words[2]);
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  v48 = (void **)(v5 + 56);
  if (v5[79] < 0)
    operator delete(*v48);
  mSampleRate = outPropertyData.mSampleRate;
  *((_QWORD *)v5 + 7) = v46;
  *((Float64 *)v5 + 8) = mSampleRate;
  *(Float64 *)(v5 + 71) = *(Float64 *)((char *)&outPropertyData.mSampleRate + 7);
  v5[79] = v47;
  if ((v226[23] & 0x80000000) != 0)
    operator delete(*(void **)v226);
  if (SHIBYTE(v220.__vftable) < 0)
    operator delete(__p[0]);
  if (v5[79] < 0)
    v48 = (void **)*v48;
  if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = HIBYTE(v209.__r_.__value_.__r.__words[2]);
  else
    v50 = v209.__r_.__value_.__r.__words[1];
  v51 = (std::string *)mkstemps((char *)v48, v50);
LABEL_103:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v51);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v226, "com.apple.coreaudio", "AMCP");
  v57 = *(std::__shared_weak_count **)&v226[8];
  v58 = **(NSObject ***)v226;
  if (*(_QWORD *)&v226[8])
  {
    v59 = (unint64_t *)(*(_QWORD *)&v226[8] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
  {
    v114 = pthread_self();
    v115 = pthread_mach_thread_np(v114);
    v116 = v5 + 56;
    if (v5[79] < 0)
      v116 = (_QWORD *)*v116;
    *(_DWORD *)v226 = 67109890;
    *(_DWORD *)&v226[4] = v115;
    *(_WORD *)&v226[8] = 2080;
    *(_QWORD *)&v226[10] = "PCM_File_Writer.cpp";
    *(_WORD *)&v226[18] = 1024;
    *(_DWORD *)&v226[20] = 61;
    *(_WORD *)&v226[24] = 2080;
    *(_QWORD *)&v226[26] = v116;
    _os_log_debug_impl(&dword_1B57BA000, v58, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d PCM_File_Writer::writing audio to %s", v226, 0x22u);
  }
  v61 = v5 + 56;
  if (v5[79] < 0)
  {
    v63 = (const UInt8 *)*((_QWORD *)v5 + 7);
    v62 = *((_QWORD *)v5 + 8);
  }
  else
  {
    v62 = v5[79];
    v63 = (const UInt8 *)(v5 + 56);
  }
  v64 = CFURLCreateFromFileSystemRepresentation(0, v63, v62, 0);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)ioPropertyDataSize, v64);
  if (!*(_QWORD *)ioPropertyDataSize)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v226, "com.apple.coreaudio", "AMCP");
    v186 = *(std::__shared_weak_count **)&v226[8];
    v187 = **(NSObject ***)v226;
    if (*(_QWORD *)&v226[8])
    {
      v188 = (unint64_t *)(*(_QWORD *)&v226[8] + 8);
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 - 1, v188));
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
        std::__shared_weak_count::__release_weak(v186);
      }
    }
    if (os_log_type_enabled(v187, OS_LOG_TYPE_ERROR))
    {
      v190 = pthread_self();
      v191 = pthread_mach_thread_np(v190);
      *(_DWORD *)v226 = 67109890;
      *(_DWORD *)&v226[4] = v191;
      *(_WORD *)&v226[8] = 2080;
      *(_QWORD *)&v226[10] = "PCM_File_Writer.cpp";
      *(_WORD *)&v226[18] = 1024;
      *(_DWORD *)&v226[20] = 65;
      *(_WORD *)&v226[24] = 2080;
      *(_QWORD *)&v226[26] = "not (the_url.is_valid())";
      _os_log_error_impl(&dword_1B57BA000, v187, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_File_Writer::PCM_File_Writer: failed to create the URL to the file", v226, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&outExtAudioFile);
    v192 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"PCM_File_Writer::PCM_File_Writer: failed to create the URL to the file", (uint64_t)inPropertyData);
    std::logic_error::logic_error(&v211, (const std::string *)inPropertyData);
    v193 = MEMORY[0x1E0DE5018];
    v211.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)__p, &v211);
    v220.__imp_.__imp_ = 0;
    v221 = 0;
    v222 = 0;
    LODWORD(v223) = -1;
    __p[0] = off_1E69A1208;
    v220.__vftable = (std::runtime_error_vtbl *)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v226, (uint64_t)__p);
    *(_QWORD *)&v226[32] = "AMCP::DAL::PCM_File_Writer::PCM_File_Writer(const DAL_Settings &)";
    *(_QWORD *)&v226[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Writer.cpp";
    LODWORD(v227.__vftable) = 65;
    std::vector<void *>::vector(v213);
    v194 = backtrace((void **)&v213[0].~runtime_error, (unint64_t)(v213[0].__imp_.__imp_ - (const char *)v213[0].__vftable) >> 3);
    std::vector<void *>::resize((char **)v213, v194);
    *(std::runtime_error *)&outPropertyData.mFormatID = v213[0];
    *(_QWORD *)&outPropertyData.mSampleRate = off_1E69A20A0;
    *(_QWORD *)&outPropertyData.mBytesPerFrame = v213[1].__vftable;
    memset(v213, 0, 24);
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v226, (uint64_t)&outPropertyData);
    v192[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(v192, (const std::logic_error *)v226);
    v192->__vftable = (std::logic_error_vtbl *)(v193 + 16);
    v192[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v195 = *(_QWORD *)&v226[24];
    v192[1].__imp_.__imp_ = *(const char **)&v226[24];
    if (v195)
      (*(void (**)(uint64_t))(*(_QWORD *)v195 + 24))(v195);
    v196 = *(std::logic_error *)&v226[32];
    LODWORD(v192[3].__vftable) = v227.__vftable;
    v192[2] = v196;
    v192->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    v192[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    v192[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  v65 = *(_OWORD *)(v5 + 24);
  *(_OWORD *)&outPropertyData.mSampleRate = *(_OWORD *)(v5 + 8);
  *(_OWORD *)&outPropertyData.mBytesPerPacket = v65;
  *(_QWORD *)&outPropertyData.mBitsPerChannel = *((_QWORD *)v5 + 5);
  if ((v5[20] & 0x20) != 0)
  {
    v66 = *((_DWORD *)v5 + 8) * *((_DWORD *)v5 + 9);
    outPropertyData.mFramesPerPacket = 1;
    outPropertyData.mBytesPerFrame = v66;
    outPropertyData.mFormatFlags &= ~0x20u;
    outPropertyData.mBytesPerPacket = v66;
  }
  outExtAudioFile = 0;
  v67 = (AMCP::Utility::OSStatus_Error_Category *)ExtAudioFileCreateWithURL(*(CFURLRef *)ioPropertyDataSize, 0x63616666u, &outPropertyData, 0, 1u, &outExtAudioFile);
  v68 = v67;
  AMCP::Utility::OSStatus_Error_Category::get(v67);
  if (v68)
  {
    AMCP::Log::Scope_Registry::get(v69);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v226, "com.apple.coreaudio", "AMCP");
    v197 = *(std::__shared_weak_count **)&v226[8];
    v198 = **(NSObject ***)v226;
    if (*(_QWORD *)&v226[8])
    {
      v199 = (unint64_t *)(*(_QWORD *)&v226[8] + 8);
      do
        v200 = __ldaxr(v199);
      while (__stlxr(v200 - 1, v199));
      if (!v200)
      {
        ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
        std::__shared_weak_count::__release_weak(v197);
      }
    }
    if (os_log_type_enabled(v198, OS_LOG_TYPE_ERROR))
    {
      v201 = pthread_self();
      v202 = pthread_mach_thread_np(v201);
      *(_DWORD *)v226 = 67109890;
      *(_DWORD *)&v226[4] = v202;
      *(_WORD *)&v226[8] = 2080;
      *(_QWORD *)&v226[10] = "PCM_File_Writer.cpp";
      *(_WORD *)&v226[18] = 1024;
      *(_DWORD *)&v226[20] = 86;
      *(_WORD *)&v226[24] = 2080;
      *(_QWORD *)&v226[26] = "the_error.operator BOOL()";
      _os_log_error_impl(&dword_1B57BA000, v198, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_File_Writer::PCM_File_Writer: failed to create the file", v226, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v214);
    v203 = v68;
    v204 = (std::runtime_error *)__cxa_allocate_exception(0x50uLL);
    MEMORY[0x1B5E50220](inPropertyData, v203, &AMCP::Utility::OSStatus_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error((std::runtime_error *)__p, (const std::runtime_error *)inPropertyData);
    v220 = *(std::runtime_error *)&inPropertyData[16];
    v223 = 0;
    v224 = 0;
    v225 = -1;
    __p[0] = &off_1E69A12F8;
    v221 = &unk_1E69A1320;
    v222 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)v226, (uint64_t)__p);
    v227.__vftable = (std::runtime_error_vtbl *)"AMCP::DAL::PCM_File_Writer::PCM_File_Writer(const DAL_Settings &)";
    v227.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Writer.cpp";
    v228 = 86;
    std::vector<void *>::vector(&v211);
    v205 = backtrace((void **)&v211.~logic_error, (unint64_t)(v211.__imp_.__imp_ - (const char *)v211.__vftable) >> 3);
    std::vector<void *>::resize((char **)&v211, v205);
    v213[0].__vftable = (std::runtime_error_vtbl *)off_1E69A20A0;
    *(std::logic_error *)&v213[0].__imp_.__imp_ = v211;
    v213[1].__imp_.__imp_ = v212;
    v211.__vftable = 0;
    v211.__imp_.__imp_ = 0;
    v212 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)v226, (uint64_t)v213);
    v204[4].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v204, (const std::runtime_error *)v226);
    v204->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
    v204[1] = *(std::runtime_error *)&v226[16];
    v204[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v206 = *(_QWORD *)&v226[40];
    v204[2].__imp_.__imp_ = *(const char **)&v226[40];
    if (v206)
      (*(void (**)(uint64_t))(*(_QWORD *)v206 + 24))(v206);
    v207 = v227;
    LODWORD(v204[4].__vftable) = v228;
    v204[3] = v207;
    v204->__vftable = (std::runtime_error_vtbl *)&off_1E69A1258;
    v204[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1290;
    v204[4].__imp_.__imp_ = (const char *)&unk_1E69A12C8;
  }
  ExtAudioFileSetProperty(outExtAudioFile, 0x63666D74u, 0x28u, v5 + 8);
  v70 = (AMCP::Utility::OSStatus_Error_Category *)ExtAudioFileWriteAsync(outExtAudioFile, 0, 0);
  v71 = (int)v70;
  AMCP::Utility::OSStatus_Error_Category::get(v70);
  v72 = (uint64_t)outExtAudioFile;
  if (v71)
    v72 = ExtAudioFileDispose(outExtAudioFile);
  else
    *((_QWORD *)v5 + 6) = outExtAudioFile;
  if (!v5[160])
    goto LABEL_143;
  v73 = operator new();
  if (v5[79] < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)v5 + 7), *((_QWORD *)v5 + 8));
  }
  else
  {
    *(_OWORD *)__p = *v61;
    v220.__vftable = (std::runtime_error_vtbl *)*((_QWORD *)v5 + 9);
  }
  *(_QWORD *)(v73 + 16) = v220.__vftable;
  *(_OWORD *)v73 = *(_OWORD *)__p;
  __p[1] = 0;
  v220.__vftable = 0;
  __p[0] = 0;
  *(_QWORD *)(v73 + 24) = 0;
  *(_QWORD *)(v73 + 32) = 0;
  *(_QWORD *)(v73 + 40) = 0;
  if (*(char *)(v73 + 23) < 0)
  {
    v75 = *(char **)v73;
    v74 = *(_QWORD *)(v73 + 8);
    if (v74)
    {
LABEL_127:
      while (v74)
      {
        v76 = v75[--v74];
        if (v76 == 46)
        {
          v77 = v74;
          goto LABEL_131;
        }
      }
    }
  }
  else
  {
    v74 = *(unsigned __int8 *)(v73 + 23);
    v75 = (char *)v73;
    if (*(_BYTE *)(v73 + 23))
      goto LABEL_127;
  }
  v77 = -1;
LABEL_131:
  v78 = std::string::basic_string((std::string *)v226, (const std::string *)v73, 0, v77, (std::allocator<char> *)v213);
  v79 = std::string::append(v78, ".txt", 4uLL);
  v80 = v79->__r_.__value_.__r.__words[0];
  *(_QWORD *)inPropertyData = v79->__r_.__value_.__l.__size_;
  *(_QWORD *)&inPropertyData[7] = *(std::string::size_type *)((char *)&v79->__r_.__value_.__r.__words[1] + 7);
  v81 = HIBYTE(v79->__r_.__value_.__r.__words[2]);
  v79->__r_.__value_.__l.__size_ = 0;
  v79->__r_.__value_.__r.__words[2] = 0;
  v79->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(v73 + 23) < 0)
    operator delete(*(void **)v73);
  v82 = *(_QWORD *)inPropertyData;
  *(_QWORD *)v73 = v80;
  *(_QWORD *)(v73 + 8) = v82;
  *(_QWORD *)(v73 + 15) = *(_QWORD *)&inPropertyData[7];
  *(_BYTE *)(v73 + 23) = v81;
  if ((v226[23] & 0x80000000) != 0)
    operator delete(*(void **)v226);
  v72 = (uint64_t)std::unique_ptr<AMCP::DAL::Timestamp_Writer>::reset[abi:ne180100]((uint64_t *)v5 + 21, v73);
  v83 = *(_QWORD **)v11;
  v84 = *(_QWORD *)(*(_QWORD *)v11 + 24);
  if (0x8E38E38E38E38E39 * ((*(_QWORD *)(*(_QWORD *)v11 + 40) - v84) >> 3) >= 0xC8)
    goto LABEL_143;
  v85 = v83[4];
  *(_QWORD *)&v226[32] = *(_QWORD *)v11 + 40;
  result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
  if (*MEMORY[0x1E0DDB4F0])
  {
    v86 = caulk::rt_safe_memory_resource::rt_allocate(result);
    v87 = v83[3];
    v88 = v83[4];
    if (v88 == v87)
    {
      v93 = vdupq_n_s64(v88);
      v89 = v86 + 72 * ((v85 - v84) / 72);
    }
    else
    {
      v89 = v86 + 72 * ((v85 - v84) / 72);
      do
      {
        *(_OWORD *)(v89 - 72) = *(_OWORD *)(v88 - 72);
        v90 = *(_OWORD *)(v88 - 56);
        v91 = *(_OWORD *)(v88 - 40);
        v92 = *(_OWORD *)(v88 - 24);
        *(_QWORD *)(v89 - 8) = *(_QWORD *)(v88 - 8);
        *(_OWORD *)(v89 - 24) = v92;
        *(_OWORD *)(v89 - 40) = v91;
        *(_OWORD *)(v89 - 56) = v90;
        v89 -= 72;
        v88 -= 72;
      }
      while (v88 != v87);
      v93 = *(int64x2_t *)(v83 + 3);
    }
    v83[3] = v89;
    v83[4] = v86 + 72 * ((v85 - v84) / 72);
    *(int64x2_t *)&v226[8] = v93;
    v94 = v83[5];
    v83[5] = v86 + 14400;
    *(_QWORD *)&v226[24] = v94;
    *(_QWORD *)v226 = v93.i64[0];
    v72 = std::__split_buffer<AMCP::DAL::Timestamp_Writer::Timestamp_Data,caulk::rt_allocator<AMCP::DAL::Timestamp_Writer::Timestamp_Data> &>::~__split_buffer((uint64_t)v226);
LABEL_143:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v72);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v226, "com.apple.coreaudio", "AMCP");
    v96 = *(std::__shared_weak_count **)&v226[8];
    v97 = **(NSObject ***)v226;
    if (*(_QWORD *)&v226[8])
    {
      v98 = (unint64_t *)(*(_QWORD *)&v226[8] + 8);
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    AMCP::Log::Scope_Registry::get(v95);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v226, "com.apple.coreaudio", "AMCP");
    v100 = os_signpost_id_make_with_pointer(**(os_log_t **)v226, v5);
    v101 = v100;
    v102 = *(std::__shared_weak_count **)&v226[8];
    if (*(_QWORD *)&v226[8])
    {
      v103 = (unint64_t *)(*(_QWORD *)&v226[8] + 8);
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    if (v101 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v100 = os_signpost_enabled(v97);
      if ((_DWORD)v100)
      {
        v105 = v5 + 88;
        if (v5[111] < 0)
          v105 = (char *)v208->__r_.__value_.__r.__words[0];
        *(_DWORD *)v226 = 136446210;
        *(_QWORD *)&v226[4] = v105;
        _os_signpost_emit_with_name_impl(&dword_1B57BA000, v97, OS_SIGNPOST_INTERVAL_BEGIN, v101, "AudioHAL Capture", "%{public}s", v226, 0xCu);
      }
    }
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v100);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v226, "com.apple.coreaudio", "AMCP");
    v106 = *(std::__shared_weak_count **)&v226[8];
    v107 = **(NSObject ***)v226;
    if (*(_QWORD *)&v226[8])
    {
      v108 = (unint64_t *)(*(_QWORD *)&v226[8] + 8);
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    if (os_log_type_enabled(v107, OS_LOG_TYPE_DEBUG))
    {
      v117 = pthread_self();
      v118 = pthread_mach_thread_np(v117);
      if (v5[79] < 0)
        v61 = *(_OWORD **)v61;
      *(_DWORD *)v226 = 67109890;
      *(_DWORD *)&v226[4] = v118;
      *(_WORD *)&v226[8] = 2080;
      *(_QWORD *)&v226[10] = "PCM_File_Writer.cpp";
      *(_WORD *)&v226[18] = 1024;
      *(_DWORD *)&v226[20] = 113;
      *(_WORD *)&v226[24] = 2080;
      *(_QWORD *)&v226[26] = v61;
      _os_log_debug_impl(&dword_1B57BA000, v107, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d PCM_File_Writer::PCM_File_Writer: writing audio file to %s", v226, 0x22u);
    }
    if (*(_QWORD *)ioPropertyDataSize)
      CFRelease(*(CFTypeRef *)ioPropertyDataSize);
    if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v209.__r_.__value_.__l.__data_);
    *a2 = v5;
    result = (caulk::rt_safe_memory_resource *)operator new();
    *((_QWORD *)result + 2) = 0;
    v34 = &off_1E697D788;
    goto LABEL_169;
  }
  __break(1u);
  return result;
}

void sub_1B5A055F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)v1 = off_1E69A1340;
  if (*(char *)(v1 + 79) < 0)
    operator delete(*(void **)(v1 + 56));
  MEMORY[0x1B5E50688](v1, 0x10B3C4028FF0AD1);
  _Unwind_Resume(a1);
}

void sub_1B5A055FC()
{
  __cxa_end_catch();
  JUMPOUT(0x1B5A05604);
}

void sub_1B5A05640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,std::runtime_error a35,void *a36,uint64_t a37)
{
  void *v37;
  int v38;
  uint64_t v39;
  void *v41;
  uint64_t v42;

  v41 = *(void **)(v39 - 136);
  if (v41)
    operator delete(v41);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v39 - 208) = &unk_1E69A2000;
  v42 = *(_QWORD *)(v39 - 200);
  if (v42 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42))
    *(_QWORD *)(v39 - 200) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v39 - 224));
  a36 = &unk_1E69A2000;
  if (a37 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a37 + 32))(a37))
    a37 = 0;
  std::runtime_error::~runtime_error(&a35);
  std::runtime_error::~runtime_error(&a11);
  if (a32 < 0)
    operator delete(a27);
  if (v38)
    __cxa_free_exception(v37);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a14);
  _Unwind_Resume(a1);
}

void sub_1B5A056E0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1B5A056F0()
{
  JUMPOUT(0x1B5A056F8);
}

void std::__shared_ptr_pointer<AMCP::DAL::PCM_File_Writer *,std::shared_ptr<AMCP::DAL::DAL_File_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_File_Handler,AMCP::DAL::PCM_File_Writer>,std::allocator<AMCP::DAL::PCM_File_Writer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::PCM_File_Writer *,std::shared_ptr<AMCP::DAL::DAL_File_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_File_Handler,AMCP::DAL::PCM_File_Writer>,std::allocator<AMCP::DAL::PCM_File_Writer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::PCM_File_Writer *,std::shared_ptr<AMCP::DAL::DAL_File_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_File_Handler,AMCP::DAL::PCM_File_Writer>,std::allocator<AMCP::DAL::PCM_File_Writer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP3DAL16DAL_File_HandlerEE27__shared_ptr_default_deleteIS3_NS2_15PCM_File_WriterEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<AMCP::DAL::PCM_File_Reader *,std::shared_ptr<AMCP::DAL::DAL_File_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_File_Handler,AMCP::DAL::PCM_File_Reader>,std::allocator<AMCP::DAL::PCM_File_Reader>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::PCM_File_Reader *,std::shared_ptr<AMCP::DAL::DAL_File_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_File_Handler,AMCP::DAL::PCM_File_Reader>,std::allocator<AMCP::DAL::PCM_File_Reader>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::PCM_File_Reader *,std::shared_ptr<AMCP::DAL::DAL_File_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_File_Handler,AMCP::DAL::PCM_File_Reader>,std::allocator<AMCP::DAL::PCM_File_Reader>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP3DAL16DAL_File_HandlerEE27__shared_ptr_default_deleteIS3_NS2_15PCM_File_ReaderEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t AMCP::DAL::PCM_File_Handler::PCM_File_Handler(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  __int128 v8;
  void *__p[2];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  const __CFDictionary *v14;

  *(_QWORD *)a1 = off_1E69A1340;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "asbd");
  v5 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  v6 = v5;
  if (SBYTE7(v11) < 0)
  {
    operator delete(__p[0]);
    if (!v6)
      return a1;
  }
  else if (!v5)
  {
    return a1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "asbd");
  v13 = 0;
  v7 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (v7)
    AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(&v14, (uint64_t)(v7 + 40));
  else
    v14 = 0;
  if (SBYTE7(v11) < 0)
    operator delete(__p[0]);
  dictionary_to_asbd((const applesauce::CF::DictionaryRef *)__p, &v14);
  v8 = v11;
  *(_OWORD *)v4 = *(_OWORD *)__p;
  *(_OWORD *)(v4 + 16) = v8;
  *(_QWORD *)(v4 + 32) = v12;
  if (v14)
    CFRelease(v14);
  return a1;
}

void sub_1B5A05934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, const void *a18)
{
  uint64_t v18;

  applesauce::CF::DictionaryRef::~DictionaryRef(&a18);
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v18 + 79) < 0)
    operator delete(*(void **)(v18 + 56));
  _Unwind_Resume(a1);
}

void HALS_System::StartScope::~StartScope(HALS_System::StartScope *this)
{
  HALS_System::StartScope::~StartScope(this);
  JUMPOUT(0x1B5E50688);
}

{
  ADS::Simulator *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t i;
  ADS::BaseObject *v14;
  ADS::Device *v15;
  unsigned __int8 v16;
  uint64_t v17;
  char v18;
  unsigned __int8 v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  HALB_Mutex *v24;
  int v25;
  void **v26;
  void **v27;
  void *v28;
  dispatch_queue_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  dispatch_queue_t *v33;
  uint64_t v34;
  int v35;
  ADS::ObjectManager *v36;
  ADS::Simulator *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  void **p_block;
  uint64_t v56;
  uint64_t (*v57)(uint64_t);
  void *v58;
  uint64_t v59;
  HALB_Mutex *block;
  uint64_t v61;
  uint64_t (*v62)(uint64_t);
  void *v63;
  void *v64;
  HALB_Mutex *v65;
  int v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E697D818;
  if (*((_DWORD *)this + 2) != 1)
    return;
  block_on_all_queues(0);
  block_on_all_queues(0);
  v51 = 0;
  v52 = 0;
  HALS_System::GetInstance(&v53, 2, &v51);
  v2 = v54;
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = v52;
  if (v52)
  {
    v6 = (unint64_t *)&v52->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v9 = *(_BYTE **)(ADS::Simulator::sInstance + 144);
  v8 = *(_BYTE **)(ADS::Simulator::sInstance + 152);
  v10 = v8 - v9;
  if (v8 == v9)
  {
    v11 = 0;
  }
  else
  {
    if (v10 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v10 >> 2);
    v1 = (ADS::Simulator *)memmove(v11, v9, v10);
    v12 = 4 * (v10 >> 2);
    if (v12)
    {
      for (i = 0; i != v12; i += 4)
      {
        v15 = (ADS::Device *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*(unsigned int *)&v11[i]);
        if (v15)
          ADS::Simulator::RemoveDevice((ADS::Simulator *)ADS::Simulator::sInstance, v15);
        ADS::ObjectManager::ReleaseObject(v15, v14);
      }
    }
  }
  do
  {
    while (1)
    {
      ADS::Simulator::FlushAllQueues(v1);
      if (!ADS::Simulator::sServerHighPriorityQueue)
        break;
      v16 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerHighPriorityQueue + 33));
      v17 = ADS::Simulator::sServerDefaultPriorityQueue;
      if (ADS::Simulator::sServerDefaultPriorityQueue)
      {
        v18 = v16 & 1;
        goto LABEL_26;
      }
      if ((v16 & 1) == 0)
        goto LABEL_30;
    }
    v17 = ADS::Simulator::sServerDefaultPriorityQueue;
    if (!ADS::Simulator::sServerDefaultPriorityQueue)
      break;
    v18 = 0;
LABEL_26:
    v19 = atomic_load((unsigned __int8 *)(v17 + 33));
  }
  while ((v18 & 1) != 0 || (v19 & 1) != 0);
LABEL_30:
  if (v11)
    operator delete(v11);
  block_on_all_queues(1);
  v20 = atomic_load(&HALS_NotificationManager::sInitialized);
  if (v20 != -1)
  {
    block = (HALB_Mutex *)HALS_NotificationManager::Initialize;
    p_block = (void **)&block;
    std::__call_once(&HALS_NotificationManager::sInitialized, &p_block, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  block = (HALB_Mutex *)HALS_NotificationManager::sObjectListLock;
  LODWORD(v61) = HALB_Mutex::Lock((HALB_Mutex *)HALS_NotificationManager::sObjectListLock);
  v21 = HALS_NotificationManager::sObjectList;
  if (HALS_NotificationManager::sObjectList)
  {
    p_block = (void **)HALS_NotificationManager::sObjectList;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&p_block);
    MEMORY[0x1B5E50688](v21, 0x20C40960023A9);
  }
  v22 = (_QWORD *)operator new();
  *v22 = 0;
  v22[1] = 0;
  v22[2] = 0;
  HALS_NotificationManager::sObjectList = (uint64_t)v22;
  HALB_Mutex::Locker::~Locker(&block);
  v65 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
  v23 = 0;
  v66 = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
  v67 = xmmword_1B5D68D60;
  v24 = (HALB_Mutex *)MEMORY[0x1E0C809B0];
  do
  {
    v25 = *((_DWORD *)&v67 + v23);
    v56 = 0;
    v57 = 0;
    p_block = 0;
    std::vector<HALS_ObjectMap::ObjectInfo>::__init_with_size[abi:ne180100]<HALS_ObjectMap::ObjectInfo*,HALS_ObjectMap::ObjectInfo*>(&p_block, *(const void **)HALS_ObjectMap::sObjectInfoList, *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8) - *(_QWORD *)HALS_ObjectMap::sObjectInfoList) >> 3));
    v26 = p_block;
    v27 = (void **)v56;
    if (p_block != (void **)v56)
    {
      do
      {
        if (v25 == *((_DWORD *)v26[1] + 5))
        {
          HALS_ObjectMap::_UnmapObject((HALS_ObjectMap *)*((unsigned int *)v26 + 4));
          v28 = v26[1];
          v29 = (dispatch_queue_t *)HALS_ObjectMap::sNormalPriorityQueue;
          block = v24;
          v61 = 0x40000000;
          v62 = ___ZN14HALS_ObjectMap17DestroyAllObjectsEv_block_invoke;
          v63 = &__block_descriptor_tmp_6_13881;
          v64 = v28;
          LOBYTE(v28) = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 32));
          if ((v28 & 1) != 0)
            atomic_store(1u, (unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
          dispatch_async(*v29, &block);
        }
        v26 += 3;
      }
      while (v26 != v27);
      v26 = p_block;
    }
    if (v26)
      operator delete(v26);
    ++v23;
  }
  while (v23 != 4);
  v68 = 0;
  v67 = 0uLL;
  std::vector<HALS_ObjectMap::ObjectInfo>::__init_with_size[abi:ne180100]<HALS_ObjectMap::ObjectInfo*,HALS_ObjectMap::ObjectInfo*>(&v67, *(const void **)HALS_ObjectMap::sObjectInfoList, *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8) - *(_QWORD *)HALS_ObjectMap::sObjectInfoList) >> 3));
  v30 = *((_QWORD *)&v67 + 1);
  v31 = v67;
  if ((_QWORD)v67 != *((_QWORD *)&v67 + 1))
  {
    do
    {
      if (*(_DWORD *)(*(_QWORD *)(v31 + 8) + 20) != 1634957683)
      {
        HALS_ObjectMap::_UnmapObject((HALS_ObjectMap *)*(unsigned int *)(v31 + 16));
        v32 = *(_QWORD *)(v31 + 8);
        v33 = (dispatch_queue_t *)HALS_ObjectMap::sNormalPriorityQueue;
        p_block = (void **)v24;
        v56 = 0x40000000;
        v57 = ___ZN14HALS_ObjectMap17DestroyAllObjectsEv_block_invoke_2;
        v58 = &__block_descriptor_tmp_7_13882;
        v59 = v32;
        LOBYTE(v32) = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 32));
        if ((v32 & 1) != 0)
          atomic_store(1u, (unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
        dispatch_async(*v33, &p_block);
      }
      v31 += 24;
    }
    while (v31 != v30);
    v31 = v67;
  }
  if (v31)
    operator delete((void *)v31);
  HALB_Mutex::Locker::~Locker(&v65);
  v34 = ADS::ObjectManager::sMutex;
  if (ADS::ObjectManager::sMutex)
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ADS::ObjectManager::sMutex + 16))(ADS::ObjectManager::sMutex);
  else
    v35 = 0;
  if (ADS::ObjectManager::sInstance)
    (*(void (**)(uint64_t))(*(_QWORD *)ADS::ObjectManager::sInstance + 8))(ADS::ObjectManager::sInstance);
  v36 = (ADS::ObjectManager *)operator new();
  ADS::ObjectManager::ObjectManager(v36);
  ADS::ObjectManager::sInstance = (uint64_t)v36;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
  if (ADS::Simulator::sServerHighPriorityQueue)
  {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)ADS::Simulator::sServerHighPriorityQueue);
    MEMORY[0x1B5E50688]();
  }
  ADS::Simulator::sServerHighPriorityQueue = 0;
  if (ADS::Simulator::sServerDefaultPriorityQueue)
  {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)ADS::Simulator::sServerDefaultPriorityQueue);
    MEMORY[0x1B5E50688]();
  }
  ADS::Simulator::sServerDefaultPriorityQueue = 0;
  v37 = (ADS::Simulator *)ADS::Simulator::sInstance;
  if (ADS::Simulator::sInstance)
    v37 = (ADS::Simulator *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)ADS::Simulator::sInstance + 24))(ADS::Simulator::sInstance);
  ADS::Simulator::sInstance = 0;
  ADS::Simulator::StaticInitializer(v37);
  block_on_all_queues(1);
  v47 = 0;
  v48 = 0;
  HALS_System::GetInstance(&v49, 3, &v47);
  v38 = v50;
  if (v50)
  {
    v39 = (unint64_t *)&v50->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v48;
  if (v48)
  {
    v42 = (unint64_t *)&v48->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  HALS_System::sIsInitialized = 0;
  block_on_all_queues(1);
  v44 = HALS_ObjectMap::sObjectInfoList;
  if (HALS_ObjectMap::sObjectInfoList)
  {
    v45 = *(void **)HALS_ObjectMap::sObjectInfoList;
    if (*(_QWORD *)HALS_ObjectMap::sObjectInfoList)
    {
      *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8) = v45;
      operator delete(v45);
    }
    MEMORY[0x1B5E50688](v44, 0x20C40960023A9);
  }
  v46 = (_QWORD *)operator new();
  *v46 = 0;
  v46[1] = 0;
  v46[2] = 0;
  HALS_ObjectMap::sObjectInfoList = (uint64_t)v46;
  std::vector<HALS_ObjectMap::ObjectInfo>::reserve((uint64_t)v46);
}

void sub_1B5A061A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void block_on_all_queues(int a1)
{
  ADS::Simulator *v1;
  uint64_t v2;
  unsigned int NumberDevices;
  unint64_t v4;
  uint64_t v5;
  HALS_IODevice *v6;
  HALS_Object *v7;
  HALS_ObjectMap *v8;
  uint64_t v9;
  HALS_ObjectMap *v10;
  HALS_Object *v11;
  HALB_Mutex *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  AMCP::Utility::Dispatch_Queue **v18;
  HALS_Object *v19;
  unsigned __int8 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  void **v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  HALS_IODevice *v29;
  HALS_Object *v30;
  HALS_ObjectMap *v31;
  uint64_t v32;
  HALS_ObjectMap *v33;
  int v34;
  HALS_Object *v35;
  unsigned __int8 v36;
  int v37;
  int v38;
  int v39;
  void **v40;
  HALB_Mutex *v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t *i;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned __int8 v52;
  HALS_Object *v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v61[2];
  uint64_t v62;
  std::__shared_weak_count *v63;
  std::vector<unsigned int> v64;
  unsigned int v65;
  uint64_t v66[2];
  void **v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(_QWORD *, HALS_Object *);
  void *v72;
  std::vector<unsigned int>::value_type *v73;
  uint64_t *v74;
  void **v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  __n128 (*v79)(_QWORD *, uint64_t);
  void (*v80)(uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  std::vector<unsigned int>::value_type __x[2];
  std::vector<unsigned int>::value_type *v85;
  uint64_t v86;
  __n128 (*v87)(_QWORD *, uint64_t);
  void (*v88)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v89;
  uint64_t v90;
  uint64_t v91;
  void **v92;

  do
  {
    v1 = (ADS::Simulator *)pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    ADS::Simulator::FlushAllQueues(v1);
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
    AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)HALS_ObjectMap::sNormalPriorityQueue);
    v61[0] = 0;
    v61[1] = 0;
    HALS_System::GetInstance(&v62, 0, v61);
    v2 = v62;
    if (v62)
    {
      NumberDevices = HALS_System::GetNumberDevices(v62, 2, 1, 0);
      LODWORD(v66[0]) = NumberDevices;
      __x[0] = 0;
      std::vector<unsigned int>::vector(&v64, NumberDevices, __x);
      HALS_System::GetDeviceList(v2, NumberDevices, (unsigned int *)v66, (uint64_t)v64.__begin_, 2, 1, 0);
      if (LODWORD(v66[0]))
      {
        v4 = 0;
        v5 = 4 * LODWORD(v66[0]);
        do
        {
          v6 = (HALS_IODevice *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v64.__begin_[v4 / 4]);
          v8 = v6;
          if (v6)
          {
            v9 = HALS_IODevice::CopyIOEngine(v6);
            v10 = (HALS_ObjectMap *)v9;
            if (v9)
              (*(void (**)(uint64_t))(*(_QWORD *)v9 + 304))(v9);
            (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v8 + 232))(v8);
            HALS_ObjectMap::ReleaseObject(v10, v11);
          }
          HALS_ObjectMap::ReleaseObject(v8, v7);
          v4 += 4;
        }
        while (v5 != v4);
      }
      *(_QWORD *)__x = 0;
      v85 = __x;
      v86 = 0x4002000000;
      v87 = __Block_byref_object_copy__5429;
      v88 = __Block_byref_object_dispose__5430;
      v90 = 0;
      v91 = 0;
      v89 = 0;
      v76 = 0;
      v77 = &v76;
      v78 = 0x4002000000;
      v79 = __Block_byref_object_copy__37;
      v80 = __Block_byref_object_dispose__38;
      v82 = 0;
      v83 = 0;
      v81 = 0;
      v69 = MEMORY[0x1E0C809B0];
      v70 = 0x40000000;
      v71 = ___ZNK11HALS_System14FlushAllQueuesEv_block_invoke;
      v72 = &unk_1E697E420;
      v74 = &v76;
      v75 = (void **)v2;
      v73 = __x;
      v12 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
      HALB_CommandGate::ExecuteCommand(v12, (uint64_t)&v69);
      v13 = (_QWORD *)*((_QWORD *)v85 + 5);
      v14 = (_QWORD *)*((_QWORD *)v85 + 6);
      while (v13 != v14)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v13 + 8))(*v13);
        (*(void (**)(_QWORD))(*(_QWORD *)*v13 + 208))(*v13);
        ++v13;
      }
      v15 = (uint64_t *)v77[5];
      v16 = (uint64_t *)v77[6];
      while (v15 != v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)*v15 + 8))(*v15);
        v17 = *v15++;
        AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)(v17 + 376));
      }
      AMCP::Utility::Dispatch_Queue::flush_all_work(*(AMCP::Utility::Dispatch_Queue **)(*(_QWORD *)(v2 + 1408) + 16));
      AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)(v2 + 896));
      AMCP::Utility::Dispatch_Queue::flush_all_work(*(AMCP::Utility::Dispatch_Queue **)(v2 + 240));
      AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)(v2 + 256));
      AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)(v2 + 576));
      v18 = *(AMCP::Utility::Dispatch_Queue ***)(v2 + 1480);
      if (v18 && *v18)
        AMCP::Utility::Dispatch_Queue::flush_all_work(*v18);
      _Block_object_dispose(&v76, 8);
      v67 = (void **)&v81;
      std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100](&v67);
      _Block_object_dispose(__x, 8);
      HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(&v89, v19);
      if (v64.__begin_)
      {
        v64.__end_ = v64.__begin_;
        operator delete(v64.__begin_);
      }
    }
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    if (ADS::Simulator::sServerHighPriorityQueue)
    {
      v20 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerHighPriorityQueue + 33));
      v21 = v20 & 1;
    }
    else
    {
      v21 = 0;
    }
    if (ADS::Simulator::sServerDefaultPriorityQueue)
    {
      v22 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
      v21 |= v22;
    }
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
    v23 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
    v66[0] = 0;
    v66[1] = 0;
    HALS_System::GetInstance(&v67, 0, v66);
    v24 = v21 | v23;
    v25 = v67;
    if (v67)
    {
      v26 = HALS_System::GetNumberDevices((uint64_t)v67, 2, 1, 0);
      v65 = v26;
      __x[0] = 0;
      std::vector<unsigned int>::vector(&v64, v26, __x);
      HALS_System::GetDeviceList((uint64_t)v25, v26, &v65, (uint64_t)v64.__begin_, 2, 1, 0);
      if (v65)
      {
        v27 = 0;
        v28 = 4 * v65;
        do
        {
          v29 = (HALS_IODevice *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v64.__begin_[v27 / 4]);
          v31 = v29;
          if (v29)
          {
            v32 = HALS_IODevice::CopyIOEngine(v29);
            v33 = (HALS_ObjectMap *)v32;
            if (v32)
              v24 |= (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 312))(v32);
            v34 = (*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v31 + 240))(v31);
            HALS_ObjectMap::ReleaseObject(v33, v35);
            v24 |= v34;
          }
          HALS_ObjectMap::ReleaseObject(v31, v30);
          v27 += 4;
        }
        while (v28 != v27);
      }
      pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
      if (ADS::Simulator::sServerHighPriorityQueue)
      {
        v36 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerHighPriorityQueue + 33));
        v37 = v36 & 1;
      }
      else
      {
        v37 = 0;
      }
      if (ADS::Simulator::sServerDefaultPriorityQueue)
      {
        v38 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
        v37 |= v38;
      }
      pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
      v39 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
      v40 = v67;
      *(_QWORD *)__x = 0;
      v85 = __x;
      v86 = 0x4002000000;
      v87 = __Block_byref_object_copy__5429;
      v88 = __Block_byref_object_dispose__5430;
      v90 = 0;
      v91 = 0;
      v89 = 0;
      v76 = 0;
      v77 = &v76;
      v78 = 0x4002000000;
      v79 = __Block_byref_object_copy__37;
      v80 = __Block_byref_object_dispose__38;
      v82 = 0;
      v83 = 0;
      v81 = 0;
      v69 = MEMORY[0x1E0C809B0];
      v70 = 0x40000000;
      v71 = ___ZNK11HALS_System29DoAnyQueuesHaveWorkAfterFlushEv_block_invoke;
      v72 = &unk_1E697E448;
      v74 = &v76;
      v75 = v67;
      v73 = __x;
      v41 = (HALB_Mutex *)(*((uint64_t (**)(void **))*v67 + 7))(v67);
      HALB_CommandGate::ExecuteCommand(v41, (uint64_t)&v69);
      v42 = (_QWORD *)*((_QWORD *)v85 + 5);
      v43 = (_QWORD *)*((_QWORD *)v85 + 6);
      if (v42 == v43)
      {
        v44 = 0;
      }
      else
      {
        v44 = 0;
        do
        {
          v44 |= (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v42 + 216))(*v42);
          ++v42;
        }
        while (v42 != v43);
      }
      for (i = (uint64_t *)v77[5]; i != (uint64_t *)v77[6]; ++i)
      {
        v46 = *i;
        v47 = atomic_load((unsigned __int8 *)(v46 + 409));
        v44 |= v47;
      }
      v48 = atomic_load((unsigned __int8 *)v40 + 929);
      v49 = v44 | v48;
      v50 = (uint64_t *)v40[185];
      if (v50)
      {
        v51 = *v50;
        if (v51)
        {
          v52 = atomic_load((unsigned __int8 *)(v51 + 33));
          LODWORD(v51) = v52 & 1;
        }
        v49 |= v51;
      }
      _Block_object_dispose(&v76, 8);
      v92 = (void **)&v81;
      std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100](&v92);
      _Block_object_dispose(__x, 8);
      HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(&v89, v53);
      if (v64.__begin_)
      {
        v64.__end_ = v64.__begin_;
        operator delete(v64.__begin_);
      }
      v24 |= v49 | v37 | v39;
    }
    v54 = v68;
    if (v68)
    {
      p_shared_owners = (unint64_t *)&v68->__shared_owners_;
      do
        v56 = __ldaxr(p_shared_owners);
      while (__stlxr(v56 - 1, p_shared_owners));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = v63;
    if (v63)
    {
      v58 = (unint64_t *)&v63->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
  }
  while ((a1 & v24 & 1) != 0);
}

void sub_1B5A06914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void HALS_System::GetInstance(_QWORD *a1, int a2, uint64_t *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  std::__sp_mut *sp_mut;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  if ((v4 & 1) == 0)
  {
    v21 = a3;
    v19 = a2;
    a2 = v19;
    a3 = v21;
    if (v20)
    {
      HALS_System::GetInstance(HALS_System::GetInstanceSetting,std::shared_ptr<HALS_System>)::sInstance = 0;
      qword_1EDB87E68 = 0;
      a2 = v19;
      a3 = v21;
    }
  }
  switch(a2)
  {
    case 3:
      v24 = 0;
      v25 = 0;
      v22 = 0;
      v23 = 0;
      std::atomic_store[abi:ne180100]<HALS_System>(&v22);
      v11 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v8 = v25;
      if (v25)
      {
        v14 = (unint64_t *)&v25->__shared_owners_;
        do
          v10 = __ldaxr(v14);
        while (__stlxr(v10 - 1, v14));
LABEL_20:
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      break;
    case 2:
      (*(void (**)(uint64_t))(*(_QWORD *)HALS_System::GetInstance(HALS_System::GetInstanceSetting,std::shared_ptr<HALS_System>)::sInstance
                                      + 8))(HALS_System::GetInstance(HALS_System::GetInstanceSetting,std::shared_ptr<HALS_System>)::sInstance);
      break;
    case 1:
      v5 = a3[1];
      v26 = *a3;
      v27 = (std::__shared_weak_count *)v5;
      if (v5)
      {
        v6 = (unint64_t *)(v5 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      std::atomic_store[abi:ne180100]<HALS_System>(&v26);
      v8 = v27;
      if (v27)
      {
        v9 = (unint64_t *)&v27->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        goto LABEL_20;
      }
      break;
  }
  sp_mut = std::__get_sp_mut(&HALS_System::GetInstance(HALS_System::GetInstanceSetting,std::shared_ptr<HALS_System>)::sInstance);
  std::__sp_mut::lock(sp_mut);
  v16 = qword_1EDB87E68;
  *a1 = HALS_System::GetInstance(HALS_System::GetInstanceSetting,std::shared_ptr<HALS_System>)::sInstance;
  a1[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  std::__sp_mut::unlock(sp_mut);
}

void sub_1B5A06C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::atomic_store[abi:ne180100]<HALS_System>(uint64_t *a1)
{
  std::__sp_mut *sp_mut;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sp_mut = std::__get_sp_mut(&HALS_System::GetInstance(HALS_System::GetInstanceSetting,std::shared_ptr<HALS_System>)::sInstance);
  std::__sp_mut::lock(sp_mut);
  v3 = HALS_System::GetInstance(HALS_System::GetInstanceSetting,std::shared_ptr<HALS_System>)::sInstance;
  v4 = a1[1];
  HALS_System::GetInstance(HALS_System::GetInstanceSetting,std::shared_ptr<HALS_System>)::sInstance = *a1;
  *a1 = v3;
  v5 = qword_1EDB87E68;
  qword_1EDB87E68 = v4;
  a1[1] = v5;
  std::__sp_mut::unlock(sp_mut);
}

uint64_t HALS_System::GetNumberDevices(uint64_t a1, int a2, char a3, HALS_Client *a4)
{
  HALB_Mutex *v7;
  HALS_DeviceManager **v8;
  HALS_DeviceManager **v9;
  uint64_t v10;
  HALS_Object *v11;
  HALS_ObjectMap **v12;
  HALS_ObjectMap **v13;
  HALS_Object *v14;
  HALS_ObjectMap **v16;
  HALS_ObjectMap **v17;
  uint64_t v18;
  _QWORD v19[6];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __n128 (*v23)(_QWORD *, uint64_t);
  void (*v24)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v25[3];

  v20 = 0;
  v21 = &v20;
  v22 = 0x4002000000;
  v23 = __Block_byref_object_copy__5429;
  v24 = __Block_byref_object_dispose__5430;
  memset(v25, 0, sizeof(v25));
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 0x40000000;
  v19[2] = ___ZNK11HALS_System16GetNumberDevicesENS_14DeviceListKindEbP11HALS_Client_block_invoke;
  v19[3] = &unk_1E697DBA0;
  v19[4] = &v20;
  v19[5] = a1;
  v7 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v7, (uint64_t)v19);
  v8 = (HALS_DeviceManager **)v21[5];
  v9 = (HALS_DeviceManager **)v21[6];
  if (v8 != v9)
  {
    v10 = 0;
    while (1)
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      HALS_DeviceManager::CopyDeviceList(*v8, (HALS_DeviceManager::BasicDeviceList *)&v16, a3, a4);
      v12 = v16;
      v13 = v17;
      while (v12 != v13)
      {
        if (a2 == 1)
        {
          if (((*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)*v12 + 224))(*v12) & 1) != 0)
            goto LABEL_11;
LABEL_10:
          v10 = (v10 + 1);
          goto LABEL_11;
        }
        if (a2 || ((*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)*v12 + 224))(*v12) & 1) != 0)
          goto LABEL_10;
LABEL_11:
        ++v12;
      }
      HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v16, v11);
      if (++v8 == v9)
        goto LABEL_15;
    }
  }
  v10 = 0;
LABEL_15:
  _Block_object_dispose(&v20, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v25, v14);
  return v10;
}

void sub_1B5A06E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  HALS_ObjectMap ***v11;
  HALS_Object *v13;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v11, v13);
  _Unwind_Resume(a1);
}

void HALS_System::GetDeviceList(uint64_t a1, unsigned int a2, unsigned int *a3, uint64_t a4, int a5, char a6, HALS_Client *a7)
{
  HALB_Mutex *v13;
  HALS_DeviceManager **v14;
  HALS_DeviceManager **v15;
  HALS_Object *v16;
  HALS_ObjectMap **v17;
  HALS_ObjectMap **v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v22;
  HALS_Object *v23;
  HALS_ObjectMap **v24;
  HALS_ObjectMap **v25;
  uint64_t v26;
  _QWORD v27[6];
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  __n128 (*v31)(_QWORD *, uint64_t);
  void (*v32)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v33[3];

  if (a2)
  {
    v28 = 0;
    v29 = &v28;
    v30 = 0x4002000000;
    v31 = __Block_byref_object_copy__5429;
    v32 = __Block_byref_object_dispose__5430;
    memset(v33, 0, sizeof(v33));
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 0x40000000;
    v27[2] = ___ZNK11HALS_System13GetDeviceListEjRjPjNS_14DeviceListKindEbP11HALS_Client_block_invoke;
    v27[3] = &unk_1E697DC68;
    v27[4] = &v28;
    v27[5] = a1;
    v13 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    HALB_CommandGate::ExecuteCommand(v13, (uint64_t)v27);
    *a3 = 0;
    v14 = (HALS_DeviceManager **)v29[5];
    v15 = (HALS_DeviceManager **)v29[6];
    while (1)
    {
      if (v14 == v15)
      {
LABEL_20:
        _Block_object_dispose(&v28, 8);
        HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v33, v23);
        return;
      }
      v24 = 0;
      v25 = 0;
      v26 = 0;
      HALS_DeviceManager::CopyDeviceList(*v14, (HALS_DeviceManager::BasicDeviceList *)&v24, a6, a7);
      v18 = v24;
      v17 = v25;
LABEL_5:
      if (v18 != v17)
        break;
LABEL_18:
      v22 = *a3;
      HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v24, v16);
      if (v22 >= a2)
        goto LABEL_20;
      ++v14;
    }
    while (1)
    {
      if (a5 == 1)
      {
        if (((*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)*v18 + 224))(*v18) & 1) != 0)
          goto LABEL_17;
      }
      else if (!a5 && ((*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)*v18 + 224))(*v18) & 1) == 0)
      {
LABEL_17:
        ++v18;
        goto LABEL_5;
      }
      v19 = (uint64_t)*v18++;
      *(_DWORD *)(a4 + 4 * *a3) = *(_DWORD *)(v19 + 16);
      v20 = *a3 + 1;
      *a3 = v20;
      if (v20 >= a2 || v18 == v17)
        goto LABEL_18;
    }
  }
  *a3 = 0;
}

void sub_1B5A06FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, HALS_ObjectMap ***a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  HALS_Object *v20;

  _Block_object_dispose(&a19, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(a9, v20);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__5429(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__5430(uint64_t a1, HALS_Object *a2)
{
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList((HALS_ObjectMap ***)(a1 + 40), a2);
}

__n128 __Block_byref_object_copy__37(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__38(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZNK11HALS_System29DoAnyQueuesHaveWorkAfterFlushEv_block_invoke(_QWORD *a1, HALS_Object *a2)
{
  uint64_t v3;
  uint64_t v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap **v6;
  HALS_ObjectMap *v7;
  uint64_t v8;

  v3 = a1[6];
  v4 = *(_QWORD *)(a1[4] + 8);
  if (v4 + 40 != v3 + 1232)
  {
    std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>((char *)(v4 + 40), *(char **)(v3 + 1232), *(_QWORD *)(v3 + 1240), (uint64_t)(*(_QWORD *)(v3 + 1240) - *(_QWORD *)(v3 + 1232)) >> 3);
    v4 = *(_QWORD *)(a1[4] + 8);
  }
  v5 = *(HALS_ObjectMap ***)(v4 + 40);
  v6 = *(HALS_ObjectMap ***)(v4 + 48);
  while (v5 != v6)
  {
    v7 = *v5++;
    HALS_ObjectMap::RetainObject(v7, a2);
  }
  v8 = *(_QWORD *)(a1[5] + 8) + 40;
  if (v8 != v3 + 1288)
    std::vector<HALS_Releaser<HALS_Client>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*>(v8, *(HALS_Object **)(v3 + 1288), *(HALS_ObjectMap ***)(v3 + 1296), (uint64_t)(*(_QWORD *)(v3 + 1296) - *(_QWORD *)(v3 + 1288)) >> 3);
}

void std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<HALS_Releaser<HALS_Client>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (HALS_Object *)*v2);
    operator delete(**a1);
  }
}

void HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(HALS_ObjectMap ***this, HALS_Object *a2)
{
  HALS_ObjectMap **v3;

  v3 = *this;
  if (*this != this[1])
  {
    do
      HALS_ObjectMap::ReleaseObject(*v3++, a2);
    while (v3 != this[1]);
    v3 = *this;
  }
  if (v3)
  {
    this[1] = v3;
    operator delete(v3);
  }
}

void std::vector<HALS_Releaser<HALS_Client>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, HALS_Object *a2)
{
  HALS_Object *i;
  HALS_ObjectMap *v5;

  for (i = *(HALS_Object **)(a1 + 8); i != a2; i = (HALS_Object *)((char *)i - 8))
  {
    v5 = (HALS_ObjectMap *)*((_QWORD *)i - 1);
    HALS_ObjectMap::ReleaseObject(v5, a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<HALS_Releaser<HALS_Client>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*>(uint64_t a1, HALS_Object *a2, HALS_ObjectMap **a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  HALS_Object *v10;
  uint64_t v11;
  unint64_t v12;
  HALS_ObjectMap **v13;
  unint64_t v14;
  HALS_Object *v15;
  HALS_ObjectMap **v16;

  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(HALS_Object **)a1;
  if (a4 > (v8 - *(_QWORD *)a1) >> 3)
  {
    if (v10)
    {
      std::vector<HALS_Releaser<HALS_Client>>::__base_destruct_at_end[abi:ne180100](a1, *(HALS_Object **)a1);
      operator delete(*(void **)a1);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v11 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v11 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<__CFString const*>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_Releaser<HALS_Client>>,HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*>(v9, a2, a3, *(HALS_ObjectMap ***)(a1 + 8));
    goto LABEL_13;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v10) >> 3;
  if (v14 < a4)
  {
    v15 = (HALS_Object *)((char *)a2 + 8 * v14);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_Releaser<HALS_Client> *,HALS_Releaser<HALS_Client> *,HALS_Releaser<HALS_Client> *>((HALS_ObjectMap **)a2, v15, (HALS_ObjectMap **)v10);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_Releaser<HALS_Client>>,HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*>(v9, v15, a3, *(HALS_ObjectMap ***)(a1 + 8));
LABEL_13:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  v16 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_Releaser<HALS_Client> *,HALS_Releaser<HALS_Client> *,HALS_Releaser<HALS_Client> *>((HALS_ObjectMap **)a2, (HALS_Object *)a3, (HALS_ObjectMap **)v10);
  std::vector<HALS_Releaser<HALS_Client>>::__base_destruct_at_end[abi:ne180100](a1, (HALS_Object *)v16);
}

void sub_1B5A07360(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B5A07368(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

HALS_ObjectMap **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_Releaser<HALS_Client> *,HALS_Releaser<HALS_Client> *,HALS_Releaser<HALS_Client> *>(HALS_ObjectMap **a1, HALS_Object *a2, HALS_ObjectMap **a3)
{
  HALS_ObjectMap **v5;
  HALS_ObjectMap *v6;
  HALS_ObjectMap *v7;
  HALS_Object *v8;

  if (a1 != (HALS_ObjectMap **)a2)
  {
    v5 = a1;
    do
    {
      v6 = *a3;
      v7 = *v5++;
      *a3++ = v7;
      HALS_ObjectMap::RetainObject(v7, a2);
      HALS_ObjectMap::ReleaseObject(v6, v8);
    }
    while (v5 != (HALS_ObjectMap **)a2);
  }
  return a3;
}

HALS_ObjectMap **std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_Releaser<HALS_Client>>,HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*>(uint64_t a1, HALS_Object *a2, HALS_ObjectMap **a3, HALS_ObjectMap **a4)
{
  HALS_ObjectMap **v4;
  HALS_ObjectMap **v6;
  HALS_ObjectMap *v7;
  _QWORD v9[3];
  char v10;
  HALS_ObjectMap **v11;
  HALS_ObjectMap **v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != (HALS_Object *)a3)
  {
    v6 = (HALS_ObjectMap **)a2;
    do
    {
      v7 = *v6;
      *v4 = *v6;
      HALS_ObjectMap::RetainObject(v7, a2);
      ++v6;
      v4 = ++v12;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_Releaser<HALS_Client>>,HALS_Releaser<HALS_Client>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9, a2);
  return v4;
}

void sub_1B5A07454(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_Releaser<HALS_Client>>,HALS_Releaser<HALS_Client>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_Releaser<HALS_Client>>,HALS_Releaser<HALS_Client>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1, HALS_Object *a2)
{
  uint64_t v4;
  uint64_t v5;
  HALS_ObjectMap *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v4 = **(_QWORD **)(a1 + 16);
    v5 = **(_QWORD **)(a1 + 8);
    while (v4 != v5)
    {
      v6 = *(HALS_ObjectMap **)(v4 - 8);
      v4 -= 8;
      HALS_ObjectMap::ReleaseObject(v6, a2);
    }
  }
  return a1;
}

void ___ZNK11HALS_System14FlushAllQueuesEv_block_invoke(_QWORD *a1, HALS_Object *a2)
{
  uint64_t v3;
  uint64_t v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap **v6;
  HALS_ObjectMap *v7;
  uint64_t v8;

  v3 = a1[6];
  v4 = *(_QWORD *)(a1[4] + 8);
  if (v4 + 40 != v3 + 1232)
  {
    std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>((char *)(v4 + 40), *(char **)(v3 + 1232), *(_QWORD *)(v3 + 1240), (uint64_t)(*(_QWORD *)(v3 + 1240) - *(_QWORD *)(v3 + 1232)) >> 3);
    v4 = *(_QWORD *)(a1[4] + 8);
  }
  v5 = *(HALS_ObjectMap ***)(v4 + 40);
  v6 = *(HALS_ObjectMap ***)(v4 + 48);
  while (v5 != v6)
  {
    v7 = *v5++;
    HALS_ObjectMap::RetainObject(v7, a2);
  }
  v8 = *(_QWORD *)(a1[5] + 8) + 40;
  if (v8 != v3 + 1288)
    std::vector<HALS_Releaser<HALS_Client>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*>(v8, *(HALS_Object **)(v3 + 1288), *(HALS_ObjectMap ***)(v3 + 1296), (uint64_t)(*(_QWORD *)(v3 + 1296) - *(_QWORD *)(v3 + 1288)) >> 3);
}

void ___ZNK11HALS_System13GetDeviceListEjRjPjNS_14DeviceListKindEbP11HALS_Client_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A0758C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_System::_CopyDeviceManagerList(HALS_System *this, HALS_System::BasicDeviceManagerList *a2)
{
  HALS_ObjectMap **v3;
  HALS_ObjectMap **v4;
  HALS_ObjectMap *v5;

  if ((HALS_System *)((char *)this + 1232) != a2)
    std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>((char *)a2, *((char **)this + 154), *((_QWORD *)this + 155), (uint64_t)(*((_QWORD *)this + 155) - *((_QWORD *)this + 154)) >> 3);
  v4 = *(HALS_ObjectMap ***)a2;
  v3 = (HALS_ObjectMap **)*((_QWORD *)a2 + 1);
  while (v4 != v3)
  {
    v5 = *v4++;
    HALS_ObjectMap::RetainObject(v5, a2);
  }
}

void ___ZNK11HALS_System16GetNumberDevicesENS_14DeviceListKindEbP11HALS_Client_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A07614(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_System::Activate(HALS_DefaultDeviceManager **this, HALS_Object *a2)
{
  uint64_t v3;
  uint64_t v4;
  HALS_Object *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  AMCP::Utility::Dispatch_Queue *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  id *v18;
  id *v19;
  id **v20;
  id *v21;
  id *v22;
  uint64_t v23;
  id *v24;
  id *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  const __CFDictionary **v38;
  uint64_t v39;
  NSObject **v40;
  uint64_t v41;
  id **v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  int v48;
  IONotificationPort *v49;
  HALS_PlugInManager *v50;
  HALS_DefaultDeviceManager *v51;
  HALS_DefaultDeviceManager *v52;
  CFDictionaryRef CFDictionaryRef;
  uint64_t i;
  id v55;
  id v56;
  CFDictionaryRef v57;
  NSObject *v58;
  CFTypeRef v59;
  CFDictionaryRef v60;
  NSObject *v61;
  uint64_t v62;
  id *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id *v67;
  uint64_t v68;
  uint64_t v69;
  HALS_DeviceManager *v70;
  uint64_t v71;
  char *v72;
  const void *v73;
  const void *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  HALS_Object *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  char ServerBooleanSetting;
  int v83;
  int v84;
  const __CFString *v85;
  int v86;
  uint64_t v87;
  int v88;
  const void *Setting;
  const void *v90;
  CFTypeID v91;
  CFIndex v92;
  uint64_t v93;
  int v94;
  int v95;
  char v96;
  const __CFString *v97;
  char v98;
  AMCP::Utility::Dispatch_Queue **v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t ServerSetting;
  const BOOL *v104;
  CFTypeID v105;
  id *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  unsigned int v112;
  const char *v113;
  unsigned int v114;
  BOOL v115;
  const char *v116;
  AMCP::Log::Scope_Registry *v117;
  std::__shared_weak_count *v118;
  NSObject *v119;
  unint64_t *v120;
  unint64_t v121;
  _opaque_pthread_t *v122;
  mach_port_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  _opaque_pthread_t *v127;
  mach_port_t v128;
  _QWORD *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  NSObject *v134;
  const char *v135;
  _DWORD *v136;
  _DWORD *exception;
  _DWORD *v138;
  __int128 v139;
  _BYTE v140[16];
  _BYTE v141[16];
  _BYTE v142[16];
  id obj[41];
  char v144[24];
  char *v145;
  const __CFDictionary *v146[3];
  const __CFDictionary **v147;
  NSObject *v148;
  CFTypeRef v149;
  NSObject **v150;
  id *v151;
  uint64_t v152;
  CFTypeRef *v153;
  _QWORD v154[5];

  v154[3] = *MEMORY[0x1E0C80C00];
  HALS_Object::Activate((HALS_Object *)this, a2);
  if (g_static_start_options)
  {
    CreateAndInsert<HALS_MetaManager>((HALS_System *)this);
    goto LABEL_138;
  }
  v3 = operator new();
  HALS_DeviceManager::HALS_DeviceManager((HALS_DeviceManager *)v3, (HALS_System *)this, CFSTR("com.apple.audio.IOAudio2"), v4, v5);
  *(_QWORD *)v3 = off_1E699B680;
  HALB_Mutex::HALB_Mutex((HALB_Mutex *)(v3 + 328));
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v3 + 424, "com.apple.audio.manager.IOA2.event");
  *(_DWORD *)(v3 + 776) = 0;
  *(_OWORD *)(v3 + 744) = 0u;
  *(_OWORD *)(v3 + 760) = 0u;
  HALS_System::DeviceManagerCreated((HALS_System *)this, (HALS_DeviceManager *)v3);
  CreateAndInsert<HALS_MetaManager>((HALS_System *)this);
  v6 = operator new();
  *(_QWORD *)v6 = 850045863;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_QWORD *)(v6 + 56) = 0;
  HALS_RemotePlugInRegistrar::sDriverServiceClientsMutex = v6;
  v7 = operator new();
  *(_QWORD *)v7 = 850045863;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_QWORD *)(v7 + 56) = 0;
  HALS_RemotePlugInRegistrar::sPlugInListMutex = v7;
  v8 = (_QWORD *)operator new();
  v8[1] = 0;
  v8[2] = 0;
  *v8 = 0;
  HALS_RemotePlugInRegistrar::sPlugInList = (uint64_t)v8;
  std::vector<HALS_PlugIn *>::reserve((uint64_t)v8);
  v9 = (_QWORD *)operator new();
  v9[1] = 0;
  v9[2] = 0;
  *v9 = 0;
  HALS_RemotePlugInRegistrar::sDriverServiceClients = (uint64_t)v9;
  v10 = (char *)operator new(0x40uLL);
  *v9 = v10;
  v9[1] = v10;
  v9[2] = v10 + 64;
  v11 = operator new();
  HALS_RemotePlugInRegistrar::sPlugInLoadNotificationQueue = AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v11, "HALS_RemotePlugInRegistrar Notification Queue");
  v12 = operator new();
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)(v12 + 96) = 0;
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_WORD *)(v12 + 80) = 0;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_QWORD *)(v12 + 104) = 0;
  *(_QWORD *)(v12 + 112) = 850045863;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_OWORD *)(v12 + 184) = 0u;
  *(_QWORD *)(v12 + 200) = 850045863;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  *(_OWORD *)(v12 + 272) = 0u;
  *(_QWORD *)(v12 + 288) = 850045863;
  *(_OWORD *)(v12 + 296) = 0u;
  *(_OWORD *)(v12 + 312) = 0u;
  *(_OWORD *)(v12 + 328) = 0u;
  *(_OWORD *)(v12 + 344) = 0u;
  *(_QWORD *)(v12 + 360) = dispatch_semaphore_create(0);
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((uint64_t)obj, "IOKit_Factory_List Queue");
  objc_storeStrong((id *)(v12 + 48), obj[0]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)obj);
  HALS_RemotePlugInRegistrar::sIOKitFactoryList = v12;
  HALS_RemotePlugInRegistrar::sCPUType = operator new();
  *(_DWORD *)HALS_RemotePlugInRegistrar::sCPUType = 16777228;
  v13 = (AMCP::Utility::Dispatch_Queue *)operator new();
  AMCP::Utility::Dispatch_Queue::create_concurrent_with_workloop(v13, "HALS_RemotePlugInRegistrar Concurrent Queue");
  HALS_RemotePlugInRegistrar::sHighPriorityConcurrentQueue = (uint64_t)v13;
  v151 = (id *)&off_1E696FDC0;
  v153 = (CFTypeRef *)&v151;
  v14 = *(_DWORD *)HALS_RemotePlugInRegistrar::sCPUType;
  v148 = &off_1E696FE50;
  LODWORD(v149) = v14;
  v150 = &v148;
  v15 = (_QWORD *)operator new();
  v16 = (uint64_t)v153;
  if (!v153)
    goto LABEL_6;
  if (v153 != (CFTypeRef *)&v151)
  {
    v16 = (*((uint64_t (**)(CFTypeRef *))*v153 + 2))(v153);
LABEL_6:
    v147 = (const __CFDictionary **)v16;
    goto LABEL_8;
  }
  v147 = v146;
  ((void (*)(uint64_t, _QWORD *))v151[3])((uint64_t)&v151, v146);
LABEL_8:
  v17 = (uint64_t)v150;
  if (!v150)
  {
LABEL_11:
    v145 = (char *)v17;
    goto LABEL_13;
  }
  if (v150 != &v148)
  {
    v17 = ((uint64_t (*)(NSObject **))(*v150)[2].isa)(v150);
    goto LABEL_11;
  }
  v145 = v144;
  ((void (*)(uint64_t, uint64_t))v148[3].isa)((uint64_t)&v148, (uint64_t)v144);
LABEL_13:
  *v15 = 0;
  v15[1] = 0;
  v18 = (id *)(v15 + 2);
  v15[5] = 0;
  v19 = (id *)(v15 + 6);
  v15[9] = 0;
  v20 = (id **)(v15 + 9);
  v15[10] = 0;
  v15[11] = 0;
  if (!v147)
  {
    obj[3] = 0;
    v22 = (id *)v15[5];
    if (v22 != v18)
    {
      v21 = 0;
LABEL_21:
      obj[3] = v22;
      v15[5] = v21;
      goto LABEL_26;
    }
LABEL_22:
    v22 = obj;
    (*((void (**)(_QWORD *, id *))*v18 + 3))(v15 + 2, obj);
    (*(void (**)(_QWORD))(*(_QWORD *)v15[5] + 32))(v15[5]);
    v15[5] = obj[3];
    obj[3] = obj;
    v23 = 4;
    goto LABEL_30;
  }
  if (v147 == v146)
  {
    obj[3] = obj;
    (*((void (**)(const __CFDictionary **, id *))v146[0] + 3))(v146, obj);
    v21 = (id *)obj[3];
  }
  else
  {
    v21 = (id *)(*((uint64_t (**)(const __CFDictionary **))*v147 + 2))(v147);
    obj[3] = v21;
  }
  v22 = (id *)v15[5];
  if (v21 != obj)
  {
    if (v22 != v18)
      goto LABEL_21;
    goto LABEL_22;
  }
  if (v22 == v18)
  {
    (*((void (**)(id *, _QWORD *))obj[0] + 3))(obj, v154);
    (*(void (**)(id))(*(_QWORD *)obj[3] + 32))(obj[3]);
    obj[3] = 0;
    (*(void (**)(_QWORD, id *))(*(_QWORD *)v15[5] + 24))(v15[5], obj);
    (*(void (**)(_QWORD))(*(_QWORD *)v15[5] + 32))(v15[5]);
    v15[5] = 0;
    obj[3] = obj;
    (*(void (**)(_QWORD *, _QWORD *))(v154[0] + 24))(v154, v15 + 2);
    (*(void (**)(_QWORD *))(v154[0] + 32))(v154);
    v15[5] = v18;
    v22 = (id *)obj[3];
  }
  else
  {
    (*((void (**)(id *, _QWORD *))obj[0] + 3))(obj, v15 + 2);
    (*(void (**)(id))(*(_QWORD *)obj[3] + 32))(obj[3]);
    v22 = (id *)v15[5];
    obj[3] = v22;
    v15[5] = v18;
  }
LABEL_26:
  if (v22 == obj)
  {
    v23 = 4;
    v22 = obj;
  }
  else
  {
    if (!v22)
      goto LABEL_31;
    v23 = 5;
  }
LABEL_30:
  (*((void (**)(id *))*v22 + v23))(v22);
LABEL_31:
  if (!v145)
  {
    obj[3] = 0;
    v25 = *v20;
    if (*v20 != v19)
    {
      v24 = 0;
LABEL_39:
      obj[3] = v25;
      *v20 = v24;
      goto LABEL_44;
    }
LABEL_40:
    v25 = obj;
    (*((void (**)(_QWORD *, id *))*v19 + 3))(v15 + 6, obj);
    (*((void (**)(id *))**v20 + 4))(*v20);
    *v20 = (id *)obj[3];
    obj[3] = obj;
    v26 = 4;
LABEL_48:
    (*((void (**)(id *))*v25 + v26))(v25);
    goto LABEL_49;
  }
  if (v145 == v144)
  {
    obj[3] = obj;
    (*(void (**)(char *, id *))(*(_QWORD *)v144 + 24))(v144, obj);
    v24 = (id *)obj[3];
  }
  else
  {
    v24 = (id *)(*(uint64_t (**)(char *))(*(_QWORD *)v145 + 16))(v145);
    obj[3] = v24;
  }
  v25 = *v20;
  if (v24 != obj)
  {
    if (v25 != v19)
      goto LABEL_39;
    goto LABEL_40;
  }
  if (v25 == v19)
  {
    (*((void (**)(id *, _QWORD *))obj[0] + 3))(obj, v154);
    (*(void (**)(id))(*(_QWORD *)obj[3] + 32))(obj[3]);
    obj[3] = 0;
    (*((void (**)(id *, id *))**v20 + 3))(*v20, obj);
    (*((void (**)(id *))**v20 + 4))(*v20);
    *v20 = 0;
    obj[3] = obj;
    (*(void (**)(_QWORD *, _QWORD *))(v154[0] + 24))(v154, v15 + 6);
    (*(void (**)(_QWORD *))(v154[0] + 32))(v154);
    *v20 = v19;
    v25 = (id *)obj[3];
  }
  else
  {
    (*((void (**)(id *, _QWORD *))obj[0] + 3))(obj, v15 + 6);
    (*(void (**)(id))(*(_QWORD *)obj[3] + 32))(obj[3]);
    v25 = *v20;
    obj[3] = *v20;
    *v20 = v19;
  }
LABEL_44:
  if (v25 == obj)
  {
    v26 = 4;
    v25 = obj;
    goto LABEL_48;
  }
  if (v25)
  {
    v26 = 5;
    goto LABEL_48;
  }
LABEL_49:
  v27 = (char *)operator new(0x28uLL);
  *(_OWORD *)(v27 + 8) = 0u;
  *(_QWORD *)v27 = &off_1E697FE00;
  *(_OWORD *)(v27 + 24) = 0u;
  v28 = objc_opt_new();
  v29 = (void *)*((_QWORD *)v27 + 3);
  *((_QWORD *)v27 + 3) = v28;

  objc_msgSend(*((id *)v27 + 3), "setRegistrar:", v15);
  v30 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B58]), "initWithMachServiceName:", CFSTR("com.apple.audio.driver-registrar"));
  v31 = (void *)*((_QWORD *)v27 + 4);
  *((_QWORD *)v27 + 4) = v30;

  objc_msgSend(*((id *)v27 + 4), "setDelegate:", *((_QWORD *)v27 + 3));
  objc_msgSend(*((id *)v27 + 4), "resume");
  *(_QWORD *)&v32 = v27 + 24;
  *((_QWORD *)&v32 + 1) = v27;
  v33 = (std::__shared_weak_count *)v15[11];
  *((_OWORD *)v15 + 5) = v32;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v145;
  HALS_RemotePlugInRegistrar::sRegistrar = (uint64_t)v15;
  if (v145 == v144)
  {
    v37 = 4;
    v36 = v144;
  }
  else
  {
    if (!v145)
      goto LABEL_59;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_59:
  v38 = v147;
  if (v147 == v146)
  {
    v39 = 4;
    v38 = v146;
  }
  else
  {
    if (!v147)
      goto LABEL_64;
    v39 = 5;
  }
  (*((void (**)(void))*v38 + v39))();
LABEL_64:
  v40 = v150;
  if (v150 == &v148)
  {
    v41 = 4;
    v40 = &v148;
  }
  else
  {
    if (!v150)
      goto LABEL_69;
    v41 = 5;
  }
  ((void (*)(void))(*v40)[v41].isa)();
LABEL_69:
  v42 = (id **)v153;
  if (v153 == (CFTypeRef *)&v151)
  {
    v43 = 4;
    v42 = &v151;
  }
  else
  {
    if (!v153)
      goto LABEL_74;
    v43 = 5;
  }
  ((void (*)(void))(*v42)[v43])();
LABEL_74:
  v44 = (_QWORD *)operator new();
  v44[1] = 0;
  v44[2] = 0;
  *v44 = 0;
  HALS_PlugInManager::sPlugInList = (uint64_t)v44;
  std::vector<HALS_PlugIn *>::reserve((uint64_t)v44);
  v45 = (_QWORD *)operator new();
  *v45 = 0;
  v45[1] = 0;
  v45[2] = 0;
  HALS_PlugInManager::sDeferredPlugInLoadList = (uint64_t)v45;
  obj[4] = v45 + 2;
  v46 = (char *)operator new(0x40uLL);
  *v45 = v46;
  v45[1] = v46;
  v45[2] = v46 + 64;
  memset(obj, 0, 32);
  std::__split_buffer<std::unique_ptr<HALS_PlugInManager::DeferredPlugInLoadInfo>>::~__split_buffer((uint64_t)obj);
  v47 = operator new();
  HALS_PlugInManager::sPlugInLoadNotificationQueue = AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v47, "HALS_PlugInManager Notification Queue");
  LODWORD(v151) = 0;
  v48 = MEMORY[0x1B5E4FB0C](*MEMORY[0x1E0C81720], &v151);
  if (v48)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(obj[0]) = 136315650;
      *(id *)((char *)obj + 4) = "HALS_PlugInManager.cpp";
      WORD2(obj[1]) = 1024;
      *(_DWORD *)((char *)&obj[1] + 6) = 67;
      WORD1(obj[2]) = 1024;
      HIDWORD(obj[2]) = v48;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInManager::Initialize: IOMainPort failed, Error: 0x%X", (uint8_t *)obj, 0x18u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v48;
  }
  v49 = IONotificationPortCreate((mach_port_t)v151);
  HALS_PlugInManager::sPlugInLoadNotificationPort = (uint64_t)v49;
  if (!v49)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(obj[0]) = 136315394;
      *(id *)((char *)obj + 4) = "HALS_PlugInManager.cpp";
      WORD2(obj[1]) = 1024;
      *(_DWORD *)((char *)&obj[1] + 6) = 69;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALPlugInManagement::Initialize: IONotificationPortCreate failed", (uint8_t *)obj, 0x12u);
    }
    v138 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v138 = &off_1E69A1B30;
    v138[2] = 2003329396;
  }
  IONotificationPortSetDispatchQueue(v49, *(dispatch_queue_t *)HALS_PlugInManager::sPlugInLoadNotificationQueue);
  HALS_PlugInManager::LoadPlugIns(v50);
  v51 = (HALS_DefaultDeviceManager *)operator new();
  *(_QWORD *)v51 = &off_1E6976110;
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((uint64_t)v51 + 8, "com.apple.audio.registrar.IOUserAudio");
  *((_QWORD *)v51 + 44) = 0;
  *((_QWORD *)v51 + 45) = 0;
  *((_QWORD *)v51 + 41) = 0;
  *((_QWORD *)v51 + 42) = 0;
  *((_QWORD *)v51 + 43) = (char *)v51 + 352;
  v52 = this[157];
  this[157] = v51;
  if (v52)
  {
    (*(void (**)(HALS_DefaultDeviceManager *))(*(_QWORD *)v52 + 8))(v52);
    v51 = this[157];
  }
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)obj, "IOClass");
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&obj[1], "IOUserUserClient");
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&obj[2], "IOUserClass");
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&obj[3], "IOUserAudioDriverUserClient");
  v151 = obj;
  v152 = 2;
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v151);
  for (i = 0; i != -4; i -= 2)
  {
    v55 = obj[i + 3];
    if (v55)
      CFRelease(v55);
    v56 = obj[i + 2];
    if (v56)
      CFRelease(v56);
  }
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v151, "IOUserAudioDriverUserClientProperties");
  if (CFDictionaryRef)
    CFRetain(CFDictionaryRef);
  v152 = (uint64_t)CFDictionaryRef;
  obj[0] = &v151;
  obj[1] = (id)1;
  v57 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)obj);
  if (v152)
    CFRelease((CFTypeRef)v152);
  if (v151)
    CFRelease(v151);
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v151, "IOPropertyMatch");
  if (v57)
    CFRetain(v57);
  v152 = (uint64_t)v57;
  v58 = v151;
  v59 = v57;
  if (v151)
  {
    CFRetain(v151);
    v59 = (CFTypeRef)v152;
  }
  v148 = v58;
  if (v59)
    CFRetain(v59);
  v149 = v59;
  obj[0] = &v148;
  obj[1] = (id)1;
  v60 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)obj);
  if (v149)
    CFRelease(v149);
  if (v148)
    CFRelease(v148);
  v61 = *((_QWORD *)v51 + 1);
  if (v61)
    dispatch_retain(*((dispatch_object_t *)v51 + 1));
  v62 = operator new();
  v148 = v61;
  if (v61)
    dispatch_retain(v61);
  CFRetain(v60);
  v146[0] = v60;
  obj[0] = &off_1E6976140;
  obj[1] = v51;
  obj[3] = obj;
  applesauce::iokit::io_service_factory::io_service_factory(v62, &v148, v146, "IOServiceFirstMatch", (uint64_t)obj);
  v63 = (id *)obj[3];
  if (obj[3] == obj)
  {
    v64 = 4;
    v63 = obj;
  }
  else
  {
    if (!obj[3])
      goto LABEL_109;
    v64 = 5;
  }
  (*((void (**)(void))*v63 + v64))();
LABEL_109:
  if (v146[0])
    CFRelease(v146[0]);
  if (v61)
    dispatch_release(v61);
  v65 = *((_QWORD *)v51 + 41);
  *((_QWORD *)v51 + 41) = v62;
  if (v65)
    std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](v65);
  v66 = operator new();
  v148 = v61;
  if (v61)
    dispatch_retain(v61);
  CFRetain(v60);
  v146[0] = v60;
  obj[0] = &off_1E69761C0;
  obj[1] = v51;
  obj[3] = obj;
  applesauce::iokit::io_service_factory::io_service_factory(v66, &v148, v146, "IOServiceTerminate", (uint64_t)obj);
  v67 = (id *)obj[3];
  if (obj[3] == obj)
  {
    v68 = 4;
    v67 = obj;
    goto LABEL_121;
  }
  if (obj[3])
  {
    v68 = 5;
LABEL_121:
    (*((void (**)(void))*v67 + v68))();
  }
  if (v146[0])
    CFRelease(v146[0]);
  if (v61)
    dispatch_release(v61);
  v69 = *((_QWORD *)v51 + 42);
  *((_QWORD *)v51 + 42) = v66;
  if (v69)
    std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](v69);
  if (v61)
    dispatch_release(v61);
  CFRelease(v60);
  if (v152)
    CFRelease((CFTypeRef)v152);
  if (v151)
    CFRelease(v151);
  if (v57)
    CFRelease(v57);
  if (CFDictionaryRef)
    CFRelease(CFDictionaryRef);
LABEL_138:
  v70 = (HALS_DeviceManager *)operator new();
  v71 = operator new();
  *(_QWORD *)(v71 + 8) = 0;
  *(_BYTE *)(v71 + 16) = 1;
  *(_QWORD *)v71 = &off_1E6983C90;
  pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
  obj[0] = (id)CFStringCreateWithCString(0, "com.apple.audio.AdaptableDeviceSimulator", 0x600u);
  LOBYTE(obj[1]) = 1;
  CACFString::operator=(v71 + 8, (uint64_t)obj);
  CACFString::~CACFString((CACFString *)obj);
  v72 = (char *)operator new(0x248uLL);
  *(_OWORD *)(v72 + 8) = 0u;
  *(_QWORD *)v72 = &off_1E69841D8;
  *((_QWORD *)v72 + 3) = &off_1E697CCB8;
  v72[32] = 0;
  *(_OWORD *)(v72 + 40) = 0u;
  *((_QWORD *)v72 + 17) = 0;
  *((_OWORD *)v72 + 9) = 0u;
  *(_OWORD *)(v72 + 56) = 0u;
  *(_OWORD *)(v72 + 72) = 0u;
  *(_OWORD *)(v72 + 88) = 0u;
  *(_OWORD *)(v72 + 104) = 0u;
  *(_OWORD *)(v72 + 114) = 0u;
  *((_QWORD *)v72 + 20) = 850045863;
  *(_OWORD *)(v72 + 168) = 0u;
  *(_OWORD *)(v72 + 184) = 0u;
  *(_OWORD *)(v72 + 200) = 0u;
  *(_OWORD *)(v72 + 216) = 0u;
  *(_OWORD *)(v72 + 232) = 0u;
  *((_QWORD *)v72 + 31) = 850045863;
  *((_OWORD *)v72 + 16) = 0u;
  *((_OWORD *)v72 + 17) = 0u;
  *((_OWORD *)v72 + 18) = 0u;
  *((_OWORD *)v72 + 19) = 0u;
  *((_OWORD *)v72 + 20) = 0u;
  *((_QWORD *)v72 + 42) = 850045863;
  *(_OWORD *)(v72 + 344) = 0u;
  *(_OWORD *)(v72 + 360) = 0u;
  *(_OWORD *)(v72 + 376) = 0u;
  *(_OWORD *)(v72 + 392) = 0u;
  *((_QWORD *)v72 + 51) = dispatch_semaphore_create(0);
  *((_OWORD *)v72 + 26) = 0u;
  *((_OWORD *)v72 + 27) = 0u;
  *((_OWORD *)v72 + 28) = 0u;
  *((_OWORD *)v72 + 29) = 0u;
  *((_OWORD *)v72 + 30) = 0u;
  *((_OWORD *)v72 + 31) = 0u;
  *((_OWORD *)v72 + 32) = 0u;
  *((_OWORD *)v72 + 33) = 0u;
  *((_OWORD *)v72 + 34) = 0u;
  *((_OWORD *)v72 + 35) = 0u;
  *((_QWORD *)v72 + 72) = 0;
  if (*(_QWORD *)(v71 + 8))
  {
    CFRetain(*(CFTypeRef *)(v71 + 8));
    v73 = *(const void **)(v71 + 8);
  }
  else
  {
    v73 = 0;
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v139, v73);
  v74 = (const void *)*((_QWORD *)v72 + 9);
  v75 = v139;
  *((_QWORD *)v72 + 9) = v139;
  *(_QWORD *)&v139 = v74;
  if (v74)
  {
    CFRelease(v74);
    v75 = *((_QWORD *)v72 + 9);
  }
  if (!v75)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_270;
    LODWORD(obj[0]) = 136315394;
    *(id *)((char *)obj + 4) = "HALS_UCPlugIn.cpp";
    WORD2(obj[1]) = 1024;
    *(_DWORD *)((char *)&obj[1] + 6) = 164;
    v134 = MEMORY[0x1E0C81028];
    v135 = "%25s:%-5d  HALS_UCPlugIn::Construct_DirectLoader: failed to find a bundle ID";
    goto LABEL_269;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_270;
    LODWORD(obj[0]) = 136315394;
    *(id *)((char *)obj + 4) = "HALS_UCPlugIn.cpp";
    WORD2(obj[1]) = 1024;
    *(_DWORD *)((char *)&obj[1] + 6) = 166;
    v134 = MEMORY[0x1E0C81028];
    v135 = "%25s:%-5d  HALS_UCPlugIn::Construct_DirectLoader: failed to find COM interface";
LABEL_269:
    _os_log_impl(&dword_1B57BA000, v134, OS_LOG_TYPE_ERROR, v135, (uint8_t *)obj, 0x12u);
LABEL_270:
    strcpy((char *)&v151, "nope");
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(obj[0]) = 136315906;
      *(id *)((char *)obj + 4) = "HALS_UCPlugIn.cpp";
      WORD2(obj[1]) = 1024;
      *(_DWORD *)((char *)&obj[1] + 6) = 74;
      WORD1(obj[2]) = 1024;
      HIDWORD(obj[2]) = 1852797029;
      LOWORD(obj[3]) = 2080;
      *(id *)((char *)&obj[3] + 2) = &v151;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_UCPlugIn::HALS_UCPlugIn: construction failed, Error: %d (%s)", (uint8_t *)obj, 0x22u);
    }
    v136 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v136 = &off_1E69A1B30;
    v136[2] = 1852797029;
  }
  v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
  *((_QWORD *)v72 + 6) = v76;
  (*(void (**)(uint64_t))(*(_QWORD *)v76 + 16))(v76);
  *((_QWORD *)v72 + 7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 24))(v71);
  (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  *(_QWORD *)&v77 = v72 + 24;
  *((_QWORD *)&v77 + 1) = v72;
  v139 = v77;
  HALS_PlugIn::HALS_PlugIn((uint64_t)v70, (HALS_System *)this, (uint64_t)&v139, 1, v78);
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
  if (*((_QWORD *)&v139 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  *(_QWORD *)v70 = off_1E6983AC0;
  *((_QWORD *)v70 + 41) = &unk_1E6983C08;
  HALS_System::DeviceManagerCreated((HALS_System *)this, v70);
  ServerBooleanSetting = HALS_SettingsManager::ReadServerBooleanSetting(this[176], CFSTR("PowerManagementLogging"), 1);
  *((_BYTE *)this + 1424) = ServerBooleanSetting;
  *((_BYTE *)this[179] + 384) = ServerBooleanSetting;
  v83 = HALS_SettingsManager::ReadServerBooleanSetting(this[176], CFSTR("DefaultDeviceLogging"), 0);
  HALS_DefaultDeviceManager::SetLoggingIsEnabled(this[158], v83);
  v84 = HALS_SettingsManager::ReadServerBooleanSetting(this[176], CFSTR("VerboseDefaultDeviceLogging"), 0);
  HALS_DefaultDeviceManager::SetVerboseLoggingIsEnabled(this[158], v84);
  if (HALS_SettingsManager::HasServerSetting(this[176], v85))
  {
    v86 = HALS_SettingsManager::ReadServerBooleanSetting(this[176], CFSTR("AirPlayIsAlwaysTransient"), 0);
    HALS_DefaultDeviceManager::SetAirPlayIsAlwaysTransient(this[158], v86);
  }
  v87 = (uint64_t)this[158];
  if (*(_BYTE *)(v87 + 98))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
      || (LODWORD(obj[0]) = 136315394,
          *(id *)((char *)obj + 4) = "HALS_DefaultDeviceManager.cpp",
          WORD2(obj[1]) = 1024,
          *(_DWORD *)((char *)&obj[1] + 6) = 985,
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ===================================", (uint8_t *)obj, 0x12u), *(_BYTE *)(v87 + 98)))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(obj[0]) = 136315394;
        *(id *)((char *)obj + 4) = "HALS_DefaultDeviceManager.cpp";
        WORD2(obj[1]) = 1024;
        *(_DWORD *)((char *)&obj[1] + 6) = 986;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::Activate:                        --->>>", (uint8_t *)obj, 0x12u);
      }
    }
  }
  if (!*(_BYTE *)(v87 + 96))
  {
    v151 = 0;
    v152 = 0;
    HALS_System::GetInstance(obj, 0, (uint64_t *)&v151);
    Setting = (const void *)HALS_SettingsManager::ReadSetting(*((HALS_SettingsManager **)obj[0] + 176), CFSTR("preferred devices"));
    if (Setting)
    {
      v90 = Setting;
      v91 = CFGetTypeID(Setting);
      if (v91 == CFDictionaryGetTypeID())
      {
        v148 = &off_1E69A0DE0;
        v149 = v90;
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v146, (CFDictionaryRef)v90, CFSTR("input"));
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v144, (CFDictionaryRef)v149, CFSTR("output"));
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v154, (CFDictionaryRef)v149, CFSTR("system output"));
        v92 = 0;
        v93 = v87 + 320;
        do
        {
          OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v142, (uint64_t)v146, v92);
          HALS_DefaultDeviceManager::SavedInfo::operator=(v93 - 208, (uint64_t)v142);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v142);
          OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v141, (uint64_t)v144, v92);
          HALS_DefaultDeviceManager::SavedInfo::operator=(v93 - 104, (uint64_t)v141);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v141);
          OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v140, (uint64_t)v154, v92);
          HALS_DefaultDeviceManager::SavedInfo::operator=(v93, (uint64_t)v140);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v140);
          ++v92;
          v93 += 24;
        }
        while (v92 != 3);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v154);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v144);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v146);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v148);
      }
      else
      {
        CFRelease(v90);
      }
    }
    v108 = (std::__shared_weak_count *)obj[1];
    if (obj[1])
    {
      v109 = (unint64_t *)((char *)obj[1] + 8);
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
  }
  HALS_DefaultDeviceManager::FilterSettings((HALS_DefaultDeviceManager *)v87);
  strcpy((char *)&v151, "dIn ");
  if (*(_BYTE *)(v87 + 98) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(obj[0]) = 136315650;
    *(id *)((char *)obj + 4) = "HALS_DefaultDeviceManager.cpp";
    WORD2(obj[1]) = 1024;
    *(_DWORD *)((char *)&obj[1] + 6) = 993;
    WORD1(obj[2]) = 2082;
    *(id *)((char *)&obj[2] + 4) = &v151;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::Activate:                   '%{public}s' --->>>", (uint8_t *)obj, 0x1Cu);
  }
  *(_DWORD *)(v87 + 104) = HALS_DefaultDeviceManager::UpdateDefaultDevice(v87, v87 + 184, v87 + 112, 0x64496E20u);
  if (*(_BYTE *)(v87 + 98)
    && (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
     || (LODWORD(obj[0]) = 136315650,
         *(id *)((char *)obj + 4) = "HALS_DefaultDeviceManager.cpp",
         WORD2(obj[1]) = 1024,
         *(_DWORD *)((char *)&obj[1] + 6) = 995,
         WORD1(obj[2]) = 2082,
         *(id *)((char *)&obj[2] + 4) = &v151,
         _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::Activate:                   '%{public}s' <<<---", (uint8_t *)obj, 0x1Cu), *(_BYTE *)(v87 + 98))))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(obj[0]) = 136315394;
      *(id *)((char *)obj + 4) = "HALS_DefaultDeviceManager.cpp";
      WORD2(obj[1]) = 1024;
      *(_DWORD *)((char *)&obj[1] + 6) = 996;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  -----------------------------------", (uint8_t *)obj, 0x12u);
      v88 = *(unsigned __int8 *)(v87 + 98);
      strcpy((char *)&v148, "dOut");
      if (!v88)
        goto LABEL_176;
    }
    else
    {
      strcpy((char *)&v148, "dOut");
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(obj[0]) = 136315650;
      *(id *)((char *)obj + 4) = "HALS_DefaultDeviceManager.cpp";
      WORD2(obj[1]) = 1024;
      *(_DWORD *)((char *)&obj[1] + 6) = 1000;
      WORD1(obj[2]) = 2082;
      *(id *)((char *)&obj[2] + 4) = &v148;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::Activate:                   '%{public}s' --->>>", (uint8_t *)obj, 0x1Cu);
    }
  }
  else
  {
    strcpy((char *)&v148, "dOut");
  }
LABEL_176:
  *(_DWORD *)(v87 + 208) = HALS_DefaultDeviceManager::UpdateDefaultDevice(v87, v87 + 288, v87 + 216, 0x644F7574u);
  if (*(_BYTE *)(v87 + 98)
    && (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
     || (LODWORD(obj[0]) = 136315650,
         *(id *)((char *)obj + 4) = "HALS_DefaultDeviceManager.cpp",
         WORD2(obj[1]) = 1024,
         *(_DWORD *)((char *)&obj[1] + 6) = 1002,
         WORD1(obj[2]) = 2082,
         *(id *)((char *)&obj[2] + 4) = &v148,
         _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::Activate:                   '%{public}s' <<<---", (uint8_t *)obj, 0x1Cu), *(_BYTE *)(v87 + 98))))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(obj[0]) = 136315394;
      *(id *)((char *)obj + 4) = "HALS_DefaultDeviceManager.cpp";
      WORD2(obj[1]) = 1024;
      *(_DWORD *)((char *)&obj[1] + 6) = 1003;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  -----------------------------------", (uint8_t *)obj, 0x12u);
      v94 = *(unsigned __int8 *)(v87 + 98);
      strcpy((char *)v146, "sOut");
      if (!v94)
        goto LABEL_186;
    }
    else
    {
      strcpy((char *)v146, "sOut");
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(obj[0]) = 136315650;
      *(id *)((char *)obj + 4) = "HALS_DefaultDeviceManager.cpp";
      WORD2(obj[1]) = 1024;
      *(_DWORD *)((char *)&obj[1] + 6) = 1007;
      WORD1(obj[2]) = 2082;
      *(id *)((char *)&obj[2] + 4) = v146;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::Activate:                   '%{public}s' --->>>", (uint8_t *)obj, 0x1Cu);
    }
  }
  else
  {
    strcpy((char *)v146, "sOut");
  }
LABEL_186:
  *(_DWORD *)(v87 + 312) = HALS_DefaultDeviceManager::UpdateDefaultDevice(v87, v87 + 392, v87 + 320, 0x734F7574u);
  if (!*(_BYTE *)(v87 + 98)
    || os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
    && (LODWORD(obj[0]) = 136315650,
        *(id *)((char *)obj + 4) = "HALS_DefaultDeviceManager.cpp",
        WORD2(obj[1]) = 1024,
        *(_DWORD *)((char *)&obj[1] + 6) = 1009,
        WORD1(obj[2]) = 2082,
        *(id *)((char *)&obj[2] + 4) = v146,
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::Activate:                   '%{public}s' <<<---", (uint8_t *)obj, 0x1Cu), !*(_BYTE *)(v87 + 98)))
  {
    strcpy(v144, "shrd");
    goto LABEL_196;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(obj[0]) = 136315394;
    *(id *)((char *)obj + 4) = "HALS_DefaultDeviceManager.cpp";
    WORD2(obj[1]) = 1024;
    *(_DWORD *)((char *)&obj[1] + 6) = 1010;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  -----------------------------------", (uint8_t *)obj, 0x12u);
    v95 = *(unsigned __int8 *)(v87 + 98);
    strcpy(v144, "shrd");
    if (!v95)
      goto LABEL_196;
  }
  else
  {
    strcpy(v144, "shrd");
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(obj[0]) = 136315650;
    *(id *)((char *)obj + 4) = "HALS_DefaultDeviceManager.cpp";
    WORD2(obj[1]) = 1024;
    *(_DWORD *)((char *)&obj[1] + 6) = 1014;
    WORD1(obj[2]) = 2082;
    *(id *)((char *)&obj[2] + 4) = v144;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::Activate:                   '%{public}s' --->>>", (uint8_t *)obj, 0x1Cu);
  }
LABEL_196:
  *(_DWORD *)(v87 + 416) = HALS_DefaultDeviceManager::UpdateDefaultDevice(v87, v87 + 424, v87 + 216, 0x73687264u);
  if (*(_BYTE *)(v87 + 98))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
      || (LODWORD(obj[0]) = 136315650,
          *(id *)((char *)obj + 4) = "HALS_DefaultDeviceManager.cpp",
          WORD2(obj[1]) = 1024,
          *(_DWORD *)((char *)&obj[1] + 6) = 1016,
          WORD1(obj[2]) = 2082,
          *(id *)((char *)&obj[2] + 4) = v144,
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::Activate:                   '%{public}s' <<<---", (uint8_t *)obj, 0x1Cu), *(_BYTE *)(v87 + 98)))
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
        || (LODWORD(obj[0]) = 136315394,
            *(id *)((char *)obj + 4) = "HALS_DefaultDeviceManager.cpp",
            WORD2(obj[1]) = 1024,
            *(_DWORD *)((char *)&obj[1] + 6) = 1017,
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  -----------------------------------", (uint8_t *)obj, 0x12u), *(_BYTE *)(v87 + 98)))
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
          || (LODWORD(obj[0]) = 136315394,
              *(id *)((char *)obj + 4) = "HALS_DefaultDeviceManager.cpp",
              WORD2(obj[1]) = 1024,
              *(_DWORD *)((char *)&obj[1] + 6) = 1019,
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::Activate:                        <<<---", (uint8_t *)obj, 0x12u), *(_BYTE *)(v87 + 98)))
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(obj[0]) = 136315394;
            *(id *)((char *)obj + 4) = "HALS_DefaultDeviceManager.cpp";
            WORD2(obj[1]) = 1024;
            *(_DWORD *)((char *)&obj[1] + 6) = 1020;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ===================================", (uint8_t *)obj, 0x12u);
          }
        }
      }
    }
  }
  if ((HALS_SettingsManager::ReadServerBooleanSetting(this[176], CFSTR("CaptureFilesEnabled"), 0) & 1) != 0)
    v96 = 1;
  else
    v96 = HALS_SettingsManager::ReadServerBooleanSetting(this[176], CFSTR("DataTapsEnabled"), 0);
  *((_BYTE *)this + 1464) = v96;
  *((_BYTE *)this + 1465) = HALS_SettingsManager::ReadServerBooleanSetting(this[176], CFSTR("DSPCaptureEnabled"), 0);
  *((_DWORD *)this + 367) = HALS_SettingsManager::ReadServerIntSetting(this[176], v97);
  if (g_static_start_options == 1)
    v98 = 1;
  else
    v98 = HALS_SettingsManager::ReadServerBooleanSetting(this[176], CFSTR("AdaptableDriverSimulatorEnabled"), 0);
  *((_BYTE *)this + 1280) = v98;
  *((_BYTE *)this + 1472) = HALS_SettingsManager::ReadServerBooleanSetting(this[176], CFSTR("Trace_SchedulingLatency"), 0);
  *((_BYTE *)this + 1496) = HALS_SettingsManager::ReadServerBooleanSetting(this[176], CFSTR("TailspinDumpWhenOverload"), 0);
  v99 = (AMCP::Utility::Dispatch_Queue **)this[185];
  if (v99 && *v99)
    AMCP::Utility::Dispatch_Queue::flush_all_work(*v99);
  *((_BYTE *)this + 1496) = 0;
  obj[0] = 0;
  obj[1] = 0;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)(this + 185), (__int128 *)obj);
  v100 = (std::__shared_weak_count *)obj[1];
  if (obj[1])
  {
    v101 = (unint64_t *)((char *)obj[1] + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  ServerSetting = HALS_SettingsManager::ReadServerSetting(this[176], CFSTR("MlockFailHandling"));
  v151 = (id *)ServerSetting;
  LOBYTE(v152) = 1;
  if (ServerSetting)
  {
    v105 = CFGetTypeID((CFTypeRef)ServerSetting);
    ServerSetting = CFStringGetTypeID();
    if (v105 == ServerSetting)
    {
      v106 = v151;
      ServerSetting = CFEqual(v151, CFSTR("Advisory"));
      if ((_DWORD)ServerSetting)
      {
        v107 = 0;
        goto LABEL_233;
      }
      ServerSetting = CFEqual(v106, CFSTR("Advisory_Test"));
      if ((_DWORD)ServerSetting)
      {
        v107 = 1;
        goto LABEL_233;
      }
      ServerSetting = CFEqual(v106, CFSTR("Fatal"));
    }
  }
  v107 = 2;
  do
LABEL_233:
    v111 = __ldaxr((unsigned int *)&HALB_MlockFailHandling::mHandling);
  while (__stlxr(v107, (unsigned int *)&HALB_MlockFailHandling::mHandling));
  if (v111 != v107)
  {
    ServerSetting = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)ServerSetting)
    {
      v112 = atomic_load((unsigned int *)&HALB_MlockFailHandling::mHandling);
      v113 = "ADVISORY";
      v114 = atomic_load((unsigned int *)&HALB_MlockFailHandling::mHandling);
      v115 = v112 == 2;
      v116 = "";
      if (v115)
        v113 = "FATAL";
      *(id *)((char *)obj + 4) = "HALB_IOBufferManager.cpp";
      WORD2(obj[1]) = 1024;
      *(_DWORD *)((char *)&obj[1] + 6) = 714;
      LODWORD(obj[0]) = 136315906;
      WORD1(obj[2]) = 2080;
      *(id *)((char *)&obj[2] + 4) = (id)v113;
      if (v114 == 1)
        v116 = "(TEST)";
      WORD2(obj[3]) = 2080;
      *(id *)((char *)&obj[3] + 6) = (id)v116;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_MlockFailHandling::SetHandling - mlock handling changed to '%s%s'", (uint8_t *)obj, 0x26u);
    }
  }
  if (AMCP::Feature_Flags::run_hybrid_hal((AMCP::Feature_Flags *)ServerSetting, v104))
    load_mcp_server_settings();
  v117 = (AMCP::Log::Scope_Registry *)MGGetBoolAnswer();
  if ((_DWORD)v117)
  {
    AMCP::Log::Scope_Registry::get(v117);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)obj, "com.apple.coreaudio", "AMCP");
    v118 = (std::__shared_weak_count *)obj[1];
    v119 = *(NSObject **)obj[0];
    if (obj[1])
    {
      v120 = (unint64_t *)((char *)obj[1] + 8);
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
    {
      v122 = pthread_self();
      v123 = pthread_mach_thread_np(v122);
      LODWORD(obj[0]) = 67109891;
      HIDWORD(obj[0]) = v123;
      LOWORD(obj[1]) = 2080;
      *(id *)((char *)&obj[1] + 2) = "HALS_System.cpp";
      WORD1(obj[2]) = 1024;
      HIDWORD(obj[2]) = 5189;
      LOWORD(obj[3]) = 2081;
      *(id *)((char *)&obj[3] + 2) = "[hal_dsp] Platform has Isolated support.";
LABEL_258:
      _os_log_impl(&dword_1B57BA000, v119, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d %{private}s", (uint8_t *)obj, 0x22u);
    }
  }
  else
  {
    AMCP::Log::Scope_Registry::get(v117);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)obj, "com.apple.coreaudio", "AMCP");
    v124 = (std::__shared_weak_count *)obj[1];
    v119 = *(NSObject **)obj[0];
    if (obj[1])
    {
      v125 = (unint64_t *)((char *)obj[1] + 8);
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
    if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
    {
      v127 = pthread_self();
      v128 = pthread_mach_thread_np(v127);
      LODWORD(obj[0]) = 67109891;
      HIDWORD(obj[0]) = v128;
      LOWORD(obj[1]) = 2080;
      *(id *)((char *)&obj[1] + 2) = "HALS_System.cpp";
      WORD1(obj[2]) = 1024;
      HIDWORD(obj[2]) = 5192;
      LOWORD(obj[3]) = 2081;
      *(id *)((char *)&obj[3] + 2) = "[hal_dsp] Platform has no Isolated support.";
      goto LABEL_258;
    }
  }
  v129 = operator new(0x98uLL);
  v129[1] = 0;
  v129[2] = 0;
  *v129 = &off_1E697E890;
  DSP_Host::DSP_Host((uint64_t)(v129 + 3), 0);
  obj[0] = v129 + 3;
  obj[1] = v129;
  std::shared_ptr<AMCP::ASP::Engine>::__enable_weak_this[abi:ne180100]<AMCP::Core::Engine,AMCP::ASP::Engine,void>((uint64_t)obj, (_QWORD *)obj[0], (uint64_t)obj[0]);
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)(this + 188), (__int128 *)obj);
  v130 = (std::__shared_weak_count *)obj[1];
  if (obj[1])
  {
    v131 = (unint64_t *)((char *)obj[1] + 8);
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  return CACFObject<void const*>::~CACFObject((uint64_t)&v151);
}

void sub_1B5A0980C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef a17, CFTypeRef a18, CFTypeRef cf, uint64_t a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void HALS_System::~HALS_System(HALS_System *this)
{
  HALS_System::~HALS_System(this);
  JUMPOUT(0x1B5E50688);
}

{
  void *v2;
  void *v3;
  HALS_Object *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  void **v7;

  *(_QWORD *)this = off_1E697D838;
  g_static_start_options = 0;
  v2 = (void *)*((_QWORD *)this + 226);
  if (v2)
  {
    *((_QWORD *)this + 227) = v2;
    operator delete(v2);
  }
  HALB_Guard::~HALB_Guard((pthread_cond_t *)((char *)this + 1528));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 1504);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 1480);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 1448);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 1432);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 1408);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 1392);
  v7 = (void **)((char *)this + 1352);
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 1336);
  v3 = (void *)*((_QWORD *)this + 164);
  if (v3)
  {
    *((_QWORD *)this + 165) = v3;
    operator delete(v3);
  }
  v7 = (void **)((char *)this + 1288);
  std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 1264);
  v5 = *((_QWORD *)this + 157);
  *((_QWORD *)this + 157) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList((HALS_ObjectMap ***)this + 154, v4);
  std::unique_ptr<HALB_AsyncLog>::reset[abi:ne180100]((uint64_t *)this + 152);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_System *)((char *)this + 896));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_System *)((char *)this + 576));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_System *)((char *)this + 256));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 240);
  HALB_Mutex::~HALB_Mutex((HALS_System *)((char *)this + 144));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  std::mutex::~mutex((std::mutex *)((char *)this + 48));
  HALS_Object::~HALS_Object(this);
}

void HALS_System::_Deactivate(HALS_System *this)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int *v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int v14;
  int *v15;
  HALS_Object *v16;
  HALS_ObjectMap **v17;
  HALS_ObjectMap **v18;
  HALS_ObjectMap **v19;
  uint64_t v20;
  int v21;
  HALB_Mutex *v22;
  HALS_NotificationManager *v23;
  uint64_t v24;
  HALS_Object *v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  int64_t v29;
  HALS_DeviceManager **v30;
  uint64_t v31;
  uint64_t v32;
  HALS_ObjectMap **v33;
  HALS_ObjectMap **v34;
  uint64_t v35;
  AudioObjectPropertyAddress v36;
  uint8_t buf[24];
  void *v38;
  HALS_System *v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 169);
  v3 = *((_QWORD *)this + 170);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *(_DWORD *)(*(_QWORD *)v2 + 16);
      if ((unint64_t)v5 >= v6)
      {
        v8 = v5 - v4;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v6 - (_QWORD)v4) >> 1 > v9)
          v9 = (uint64_t)(v6 - (_QWORD)v4) >> 1;
        if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v10);
        else
          v11 = 0;
        v12 = (int *)(v10 + 4 * v8);
        *v12 = v7;
        v13 = v12 + 1;
        while (v5 != v4)
        {
          v14 = *--v5;
          *--v12 = v14;
        }
        v6 = v10 + 4 * v11;
        if (v4)
          operator delete(v4);
        v4 = v12;
        v5 = v13;
      }
      else
      {
        *v5++ = v7;
      }
      v2 += 8;
    }
    while (v2 != v3);
    if (v4 != v5)
    {
      v15 = v4;
      do
        HALS_System::_DestroyIOContext(this, 0, *v15++);
      while (v15 != v5);
    }
  }
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v16 = (HALS_Object *)*((_QWORD *)this + 161);
  v17 = (HALS_ObjectMap **)*((_QWORD *)this + 162);
  *(_QWORD *)buf = &v33;
  buf[8] = 0;
  if (v17 != (HALS_ObjectMap **)v16)
  {
    std::vector<__CFString const*>::__vallocate[abi:ne180100](&v33, ((char *)v17 - (char *)v16) >> 3);
    v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_Releaser<HALS_Client>>,HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*>((uint64_t)&v35, v16, v17, v34);
    v34 = v18;
    v19 = v33;
    if (v33 != v18)
    {
      v20 = MEMORY[0x1E0C809B0];
      do
      {
        v21 = *((_DWORD *)*v19 + 58);
        *(_QWORD *)buf = v20;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZN11HALS_System12RemoveClientEi_block_invoke;
        v38 = &__block_descriptor_tmp_97;
        v39 = this;
        v40 = v21;
        v22 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v22, (uint64_t)buf);
        v23 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
        *(_QWORD *)&v36.mSelector = 0x676C6F6270727323;
        v36.mElement = 0;
        HALS_Object::PropertiesChanged(this, v23, 0, 1, &v36);
        ++v19;
      }
      while (v19 != v18);
    }
  }
  *(_QWORD *)buf = &v33;
  std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v4)
    operator delete(v4);
  if (*((_QWORD *)this + 190))
  {
    *(_QWORD *)buf = (char *)this + 1528;
    *(_DWORD *)&buf[8] = HALB_Mutex::Lock((HALS_System *)((char *)this + 1528));
    CFRunLoopStop(*((CFRunLoopRef *)this + 190));
    *((_BYTE *)this + 1800) = 1;
    HALB_Guard::Wait(*(HALB_Guard **)buf);
    HALB_Guard::Locker::~Locker((HALB_Mutex **)buf);
  }
  v24 = *((_QWORD *)this + 179);
  if (!v24)
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_System.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3693;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_InitPowerManagement: PowerManager is null", buf, 0x12u);
    v24 = *((_QWORD *)this + 179);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
  v26 = *((_QWORD *)this + 157);
  if (v26)
  {
    *((_QWORD *)this + 157) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  memset(buf, 0, sizeof(buf));
  v27 = (_BYTE *)*((_QWORD *)this + 154);
  v28 = (_BYTE *)*((_QWORD *)this + 155);
  v29 = v28 - v27;
  if (v28 != v27)
  {
    if (v29 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v30 = (HALS_DeviceManager **)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v29 >> 3);
    *(_QWORD *)buf = v30;
    *(_QWORD *)&buf[16] = &v30[v31];
    memmove(v30, v27, v29);
    v32 = v29 >> 3;
    for (*(_QWORD *)&buf[8] = &v30[v32]; v32 * 8; --v32)
      HALS_System::DeviceManagerDestroyed(this, *v30++);
  }
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList((HALS_ObjectMap ***)buf, v25);
  *((_DWORD *)this + 2) = 0;
}

void sub_1B5A0A320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v7)
    operator delete(v7);
  _Unwind_Resume(a1);
}

uint64_t HALS_System::GetCommandGate(HALS_System *this)
{
  return (uint64_t)this + 144;
}

{
  return (uint64_t)this + 144;
}

uint64_t HALS_System::GetMIGDispatchQueue(HALS_System *this)
{
  return *((_QWORD *)this + 30);
}

{
  return *((_QWORD *)this + 30);
}

uint64_t HALS_System::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  uint64_t result;
  int v5;

  v3 = *a3;
  result = 1;
  if (*a3 > 1886221683)
  {
    if (v3 > 1937010030)
    {
      if (v3 > 1969841249)
      {
        if (((v3 - 1969841250) > 0x12 || ((1 << (v3 - 98)) & 0x40007) == 0)
          && v3 != 1970496882
          && v3 != 1986359923)
        {
          return 0;
        }
        return result;
      }
      if (v3 > 1953326882)
      {
        if (v3 == 1953326883)
          return result;
        v5 = 1953526563;
      }
      else
      {
        if (v3 == 1937010031)
          return result;
        v5 = 1953325673;
      }
    }
    else if (v3 > 1920297315)
    {
      if (v3 <= 1936224867)
      {
        if (v3 == 1920297316)
          return result;
        v5 = 1934587252;
      }
      else
      {
        if (v3 == 1936224868 || v3 == 1936483696)
          return result;
        v5 = 1937007734;
      }
    }
    else if (v3 <= 1886548770)
    {
      if (v3 == 1886221684)
        return result;
      v5 = 1886353256;
    }
    else
    {
      if (v3 == 1886548771 || v3 == 1919186467)
        return result;
      v5 = 1919839344;
    }
  }
  else if (v3 <= 1698776146)
  {
    if (v3 > 1682533919)
    {
      if (v3 <= 1684370978)
      {
        if (v3 == 1682533920)
          return result;
        v5 = 1682929012;
      }
      else
      {
        if (v3 == 1684370979 || v3 == 1685288048)
          return result;
        v5 = 1685416292;
      }
    }
    else if (v3 <= 1651472418)
    {
      if (v3 == 1650682995)
        return result;
      v5 = 1651074160;
    }
    else
    {
      if (v3 == 1651472419 || v3 == 1668047219)
        return result;
      v5 = 1668049699;
    }
  }
  else if (v3 <= 1835821925)
  {
    if (v3 <= 1768845171)
    {
      if (v3 == 1698776147)
        return result;
      v5 = 1768174192;
    }
    else
    {
      if (v3 == 1768845172 || v3 == 1769302372)
        return result;
      v5 = 1835758704;
    }
  }
  else if (v3 > 1885954664)
  {
    if (v3 == 1885954665 || v3 == 1886152483)
      return result;
    v5 = 1886218606;
  }
  else
  {
    if (v3 == 1835821926 || v3 == 1869638759)
      return result;
    v5 = 1870098020;
  }
  if (v3 != v5)
    return 0;
  return result;
}

uint64_t HALS_System::IsPropertySettable(HALS_System *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  signed int mSelector;
  uint64_t result;
  int v6;
  int v7;
  unsigned __int16 v8;

  mSelector = a3->mSelector;
  result = 1;
  if ((int)a3->mSelector > 1886353255)
  {
    if (mSelector > 1953325672)
    {
      if (mSelector <= 1969841250)
      {
        if (mSelector <= 1953526562)
        {
          if (mSelector == 1953325673)
            return 0;
          v7 = 1953326883;
          goto LABEL_54;
        }
        if (mSelector == 1953526563)
          return 0;
        v8 = 25698;
      }
      else
      {
        if (mSelector > 1969841267)
        {
          if (mSelector == 1969841268 || mSelector == 1970496882)
            return 0;
          v7 = 1986359923;
          goto LABEL_54;
        }
        if (mSelector == 1969841251)
          return 0;
        v8 = 25700;
      }
      v7 = v8 | 0x75690000;
    }
    else
    {
      if (mSelector > 1920297315)
      {
        if (mSelector <= 1936224867)
        {
          if (mSelector != 1920297316)
          {
            v6 = 1934587252;
            goto LABEL_45;
          }
        }
        else
        {
          if (mSelector != 1936224868)
          {
            if (mSelector == 1936483696)
              return result;
            v6 = 1937010031;
            goto LABEL_45;
          }
          if (a4)
            return HALS_ClientEntitlements::HasEntitlementWithBooleanValue((HALS_Client *)((char *)a4 + 288), CFSTR("com.apple.private.audio.default-shared-device"));
        }
        return 0;
      }
      if (mSelector > 1919186466)
      {
        if (mSelector != 1919186467)
        {
          v6 = 1919839344;
          goto LABEL_45;
        }
        return 0;
      }
      if (mSelector == 1886353256)
        return result;
      v7 = 1886548771;
    }
LABEL_54:
    if (mSelector != v7)
      return HALS_Object::IsPropertySettable(1, a2, (int *)a3);
    return 0;
  }
  if (mSelector > 1698776146)
  {
    if (mSelector <= 1835821925)
    {
      if (mSelector > 1769302371)
      {
        if (mSelector == 1769302372)
          return 0;
        v7 = 1835758704;
      }
      else
      {
        if (mSelector == 1698776147)
          return result;
        v7 = 1768845172;
      }
    }
    else
    {
      if (mSelector > 1886152482)
      {
        if (mSelector != 1886152483)
        {
          if (mSelector == 1886218606)
            return result;
          v6 = 1886221684;
LABEL_45:
          if (mSelector == v6)
            return result;
          return HALS_Object::IsPropertySettable(1, a2, (int *)a3);
        }
        return 0;
      }
      if (mSelector == 1835821926)
        return 0;
      v7 = 1885954665;
    }
    goto LABEL_54;
  }
  if (mSelector <= 1682929011)
  {
    if (mSelector > 1668049698)
    {
      if (mSelector != 1668049699)
      {
        v6 = 1682533920;
        goto LABEL_45;
      }
      return 0;
    }
    if (mSelector == 1651074160)
      return 0;
    v7 = 1651472419;
    goto LABEL_54;
  }
  if (mSelector <= 1685288047)
  {
    if (mSelector == 1682929012)
      return result;
    v7 = 1684370979;
    goto LABEL_54;
  }
  if (mSelector != 1685288048)
  {
    v7 = 1685416292;
    goto LABEL_54;
  }
  return result;
}

uint64_t HALS_System::GetPropertyDataSize(HALS_ObjectMap **this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, _DWORD *a5, HALS_Client *a6)
{
  HALS_System *v7;
  signed int mSelector;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v14;
  HALB_Mutex *v15;
  uint64_t **v16;
  uint64_t **v17;
  int v18;
  uint64_t *v19;
  HALB_Mutex *v20;
  HALS_Object *v21;
  int NumberProcessObjects;
  HALB_Mutex *v23;
  int v24;
  uint64_t *platform_behaviors;
  HALS_PlatformBehaviors *v26;
  uint64_t *v27;
  int v28;
  char v29;
  _BOOL4 v31;
  unint64_t v32;
  uint64_t v34;
  HALB_Mutex *v35;
  uint64_t **v36;
  uint64_t **v37;
  int v38;
  uint64_t *v39;
  HALB_Mutex *v40;
  HALS_Object *v41;
  HALB_Mutex *v42;
  uint64_t *v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  _BOOL4 v49;
  _BOOL4 v50;
  int v51;
  HALS_Object *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t *v57;
  HALS_ObjectMap ***v58;
  HALS_Client *v59;
  HALS_ObjectMap **v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t);
  void *v66;
  uint64_t *v67;
  HALS_ObjectMap **v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 (*v72)(_QWORD *, uint64_t);
  void (*v73)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v74;
  HALS_Client *v75;
  uint64_t v76;

  v7 = (HALS_System *)this;
  mSelector = a3->mSelector;
  v9 = 4;
  if ((int)a3->mSelector > 1886353255)
  {
    if (mSelector > 1953325672)
    {
      if (mSelector > 1969841249)
      {
        v11 = (mSelector - 1969841250) > 0x12 || ((1 << (mSelector - 98)) & 0x40007) == 0;
        if (v11 && mSelector != 1970496882 && mSelector != 1986359923)
          return HALS_Object::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
        return v9;
      }
      if (mSelector == 1953325673)
        return v9;
      if (mSelector != 1953326883)
      {
        if (mSelector == 1953526563)
        {
          v53 = 0;
          v54 = (uint64_t)&v53;
          v55 = 0x2000000000;
          LODWORD(v56) = 0;
          v69 = MEMORY[0x1E0C809B0];
          v70 = 0x40000000;
          v71 = (uint64_t)___ZNK11HALS_System14GetTapListSizeEP11HALS_Client_block_invoke;
          v72 = (__n128 (*)(_QWORD *, uint64_t))&unk_1E697E088;
          v73 = (void (*)(uint64_t, HALS_Object *))&v53;
          v74 = this;
          v75 = a6;
          v23 = (HALB_Mutex *)(*((uint64_t (**)(HALS_ObjectMap **))*this + 7))(this);
          HALB_CommandGate::ExecuteCommand(v23, (uint64_t)&v69);
          v24 = *(_DWORD *)(v54 + 24);
          _Block_object_dispose(&v53, 8);
          return (4 * v24);
        }
        return HALS_Object::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
      }
      v69 = 0;
      v70 = (uint64_t)&v69;
      v71 = 0x4002000000;
      v72 = __Block_byref_object_copy__5429;
      v73 = __Block_byref_object_dispose__5430;
      v75 = 0;
      v76 = 0;
      v74 = 0;
      v53 = MEMORY[0x1E0C809B0];
      v54 = 0x40000000;
      v55 = (uint64_t)___ZNK11HALS_System26GetNumberTransportManagersEv_block_invoke;
      v56 = &unk_1E697DA10;
      v57 = &v69;
      v58 = (HALS_ObjectMap ***)this;
      v42 = (HALB_Mutex *)(*((uint64_t (**)(HALS_ObjectMap **))*this + 7))(this);
      HALB_CommandGate::ExecuteCommand(v42, (uint64_t)&v53);
      v43 = *(uint64_t **)(v70 + 40);
      v44 = *(uint64_t **)(v70 + 48);
      if (v43 != v44)
      {
        v45 = 0;
        do
        {
          v46 = *v43++;
          v48 = *(_DWORD *)(v46 + 20);
          v47 = *(_DWORD *)(v46 + 24);
          v49 = v48 == v47;
          if (v48 == 1953656941)
            v49 = 1;
          v50 = v48 != v47 || v48 == 1953656941;
          v51 = v47 == 1953656941;
          if (v49)
            v51 = v50;
          v45 += v51;
        }
        while (v43 != v44);
        v9 = (4 * v45);
        goto LABEL_102;
      }
      goto LABEL_96;
    }
    if (mSelector > 1920297315)
    {
      if (mSelector <= 1936224867)
      {
        if (mSelector == 1920297316)
          return v9;
        v10 = 1934587252;
      }
      else
      {
        if (mSelector == 1936224868 || mSelector == 1936483696)
          return v9;
        v10 = 1937010031;
      }
      goto LABEL_65;
    }
    if (mSelector <= 1919186466)
    {
      if (mSelector == 1886353256)
        return v9;
      if (mSelector != 1886548771)
        return HALS_Object::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
      NumberProcessObjects = HALS_System::GetNumberProcessObjects((HALS_System *)this);
      return (4 * NumberProcessObjects);
    }
    if (mSelector == 1919186467)
    {
      v28 = 0;
      goto LABEL_98;
    }
    if (mSelector != 1919839344)
      return HALS_Object::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
    return 8;
  }
  if (mSelector <= 1768845171)
  {
    if (mSelector > 1682929011)
    {
      if (mSelector > 1685288047)
      {
        if (mSelector == 1685288048)
          return v9;
        if (mSelector == 1685416292)
          return 32;
        v10 = 1698776147;
        goto LABEL_65;
      }
      if (mSelector == 1682929012)
        return v9;
      if (mSelector == 1684370979)
      {
        platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors((HALS_PlatformBehaviors *)this);
        v26 = (HALS_PlatformBehaviors *)(*(uint64_t (**)(uint64_t *))(*platform_behaviors + 24))(platform_behaviors);
        if ((_DWORD)v26)
        {
          v27 = HALS_PlatformBehaviors::get_platform_behaviors(v26);
          if ((*(unsigned int (**)(uint64_t *))(*v27 + 24))(v27) == 1)
          {
            this = (HALS_ObjectMap **)v7;
            v28 = 1;
            v29 = 0;
LABEL_99:
            NumberProcessObjects = HALS_System::GetNumberDevices((uint64_t)this, v28, v29, a6);
            return (4 * NumberProcessObjects);
          }
          return 0;
        }
        this = (HALS_ObjectMap **)v7;
        v28 = 2;
LABEL_98:
        v29 = 1;
        goto LABEL_99;
      }
      return HALS_Object::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
    }
    if (mSelector <= 1668049698)
    {
      if (mSelector == 1651074160)
        return v9;
      if (mSelector != 1651472419)
        return HALS_Object::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
      v69 = 0;
      v70 = (uint64_t)&v69;
      v71 = 0x4002000000;
      v72 = __Block_byref_object_copy__5429;
      v73 = __Block_byref_object_dispose__5430;
      v75 = 0;
      v76 = 0;
      v74 = 0;
      v14 = MEMORY[0x1E0C809B0];
      v63 = MEMORY[0x1E0C809B0];
      v64 = 0x40000000;
      v65 = ___ZNK11HALS_System14GetNumberBoxesEP11HALS_Client_block_invoke;
      v66 = &unk_1E697DA88;
      v67 = &v69;
      v68 = this;
      v15 = (HALB_Mutex *)(*((uint64_t (**)(HALS_ObjectMap **))*this + 7))(this);
      HALB_CommandGate::ExecuteCommand(v15, (uint64_t)&v63);
      v16 = *(uint64_t ***)(v70 + 40);
      v17 = *(uint64_t ***)(v70 + 48);
      if (v16 == v17)
      {
        v9 = 0;
      }
      else
      {
        v18 = 0;
        do
        {
          v60 = 0;
          v61 = 0;
          v62 = 0;
          v19 = *v16;
          v53 = v14;
          v54 = 0x40000000;
          v55 = (uint64_t)___ZNK18HALS_DeviceManager11CopyBoxListERNS_12BasicBoxListEP11HALS_Client_block_invoke;
          v56 = &__block_descriptor_tmp_8181;
          v57 = v19;
          v58 = &v60;
          v59 = a6;
          v20 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t *))(*v19 + 56))(v19);
          HALB_CommandGate::ExecuteCommand(v20, (uint64_t)&v53);
          v18 += (unint64_t)(v61 - (_QWORD)v60) >> 3;
          HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v60, v21);
          ++v16;
        }
        while (v16 != v17);
        v9 = (4 * v18);
      }
LABEL_102:
      _Block_object_dispose(&v69, 8);
      HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(&v74, v52);
      return v9;
    }
    if (mSelector != 1668049699)
    {
      v10 = 1682533920;
      goto LABEL_65;
    }
    v69 = 0;
    v70 = (uint64_t)&v69;
    v71 = 0x4002000000;
    v72 = __Block_byref_object_copy__5429;
    v73 = __Block_byref_object_dispose__5430;
    v75 = 0;
    v76 = 0;
    v74 = 0;
    v34 = MEMORY[0x1E0C809B0];
    v63 = MEMORY[0x1E0C809B0];
    v64 = 0x40000000;
    v65 = ___ZNK11HALS_System21GetNumberClockDevicesEP11HALS_Client_block_invoke;
    v66 = &unk_1E697DB00;
    v67 = &v69;
    v68 = this;
    v35 = (HALB_Mutex *)(*((uint64_t (**)(HALS_ObjectMap **))*this + 7))(this);
    HALB_CommandGate::ExecuteCommand(v35, (uint64_t)&v63);
    v36 = *(uint64_t ***)(v70 + 40);
    v37 = *(uint64_t ***)(v70 + 48);
    if (v36 != v37)
    {
      v38 = 0;
      do
      {
        v60 = 0;
        v61 = 0;
        v62 = 0;
        v39 = *v36;
        v53 = v34;
        v54 = 0x40000000;
        v55 = (uint64_t)___ZNK18HALS_DeviceManager19CopyClockDeviceListERNS_20BasicClockDeviceListEP11HALS_Client_block_invoke;
        v56 = &__block_descriptor_tmp_7_8182;
        v57 = v39;
        v58 = &v60;
        v40 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t *))(*v39 + 56))(v39);
        HALB_CommandGate::ExecuteCommand(v40, (uint64_t)&v53);
        v38 += (unint64_t)(v61 - (_QWORD)v60) >> 3;
        HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v60, v41);
        ++v36;
      }
      while (v36 != v37);
      v9 = (4 * v38);
      goto LABEL_102;
    }
LABEL_96:
    v9 = 0;
    goto LABEL_102;
  }
  if (mSelector > 1870098019)
  {
    if (mSelector <= 1886152482)
    {
      if (mSelector != 1870098020)
      {
        v10 = 1885954665;
        goto LABEL_65;
      }
      v31 = a5 == 0;
      if (a5 && a4 >= 4)
      {
        v32 = 0;
        do
        {
          v11 = a5[v32] == 1634757735;
          v31 = v11;
          ++v32;
        }
        while (!v11 && v32 < a4 >> 2);
      }
      if (!v31)
        return 0;
    }
    else if (mSelector != 1886152483)
    {
      if (mSelector == 1886218606)
        return v9;
      v10 = 1886221684;
      goto LABEL_65;
    }
    NumberProcessObjects = HALS_System::GetNumberPlugIns((HALS_System *)this);
    return (4 * NumberProcessObjects);
  }
  if (mSelector <= 1835758703)
  {
    if (mSelector == 1768845172)
      return v9;
    v10 = 1769302372;
    goto LABEL_65;
  }
  if (mSelector == 1835758704)
    return 8;
  v10 = 1835821926;
LABEL_65:
  if (mSelector != v10)
    return HALS_Object::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
  return v9;
}

void sub_1B5A0B1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  HALS_ObjectMap ***v17;
  HALS_Object *v19;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v17, v19);
  _Unwind_Resume(a1);
}

void HALS_System::GetPropertyData(HALS_System *this, HALS_Object *a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, uint64_t *a6, unsigned int a7, const __CFString **a8, HALS_Client *a9)
{
  HALS_System *v12;
  signed int mSelector;
  unsigned int v14;
  HALB_Mutex *v15;
  _DWORD *v16;
  _DWORD *v17;
  HALB_Mutex *v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned int v21;
  _BYTE *v22;
  HALB_Mutex *v23;
  HALS_Object *v24;
  HALS_ObjectMap **v25;
  unsigned int v26;
  HALS_ObjectMap **v27;
  BOOL v28;
  unsigned int NumberProcessObjects;
  size_t v31;
  void *v32;
  uint64_t v33;
  HALB_Mutex *v34;
  _QWORD *v35;
  _QWORD *v36;
  HALS_ObjectMap *v37;
  HALB_Mutex *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  int v43;
  int v47;
  const void *v48;
  const __CFString *v49;
  HALB_Mutex *v50;
  HALS_DeviceManager **v51;
  HALS_DeviceManager **v52;
  HALS_ObjectMap *v53;
  uint64_t *platform_behaviors;
  HALS_PlatformBehaviors *v55;
  uint64_t *v56;
  unsigned int v57;
  unsigned int *v58;
  uint64_t *v59;
  int v60;
  char v61;
  _DWORD *v62;
  HALS_ObjectMap *v63;
  HALS_Object *v64;
  int v65;
  HALS_ObjectMap *v66;
  HALS_Object *v67;
  int v68;
  _DWORD *v69;
  const __CFString *v70;
  HALB_Mutex *v71;
  HALS_ObjectMap **v72;
  HALS_ObjectMap **v73;
  HALS_ObjectMap *v74;
  int v75;
  int v76;
  const __CFString *v79;
  HALS_Object *v80;
  HALS_ObjectMap *v81;
  uint64_t v82;
  HALB_Mutex *v83;
  _QWORD *v84;
  _QWORD *v85;
  unsigned int v86;
  _BYTE *v87;
  HALB_Mutex *v88;
  HALS_Object *v89;
  HALS_ObjectMap **v90;
  unsigned int v91;
  HALS_ObjectMap **v92;
  HALS_Object *v95;
  const __CFString *v96;
  HALB_Mutex *v97;
  uint64_t v98;
  HALB_Mutex *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  BOOL v104;
  _BOOL4 v105;
  unint64_t v106;
  HALB_Mutex *v108;
  uint64_t v109;
  HALS_Object *v110;
  int v111;
  const char *v112;
  unsigned int v113;
  HALB_Mutex *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  int v119;
  const __CFString *v125;
  char v126;
  HALS_Object *v127;
  HALS_Object *v128;
  int v129;
  HALS_Object *v130;
  HALS_Object *v131;
  HALS_Object *v132;
  HALS_ObjectMap *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  HALS_Object *v139;
  HALS_Object *v140;
  int v141;
  int v142;
  uint64_t v143;
  HALS_Object *v144;
  _DWORD *v145;
  _DWORD *v146;
  _DWORD *exception;
  _DWORD *v148;
  _DWORD *v149;
  _DWORD *v150;
  _DWORD *v151;
  _DWORD *v152;
  _DWORD *v153;
  _DWORD *v154;
  _DWORD *v155;
  _DWORD *v156;
  _DWORD *v157;
  _DWORD *v158;
  _DWORD *v159;
  _DWORD *v160;
  _DWORD *v161;
  _DWORD *v162;
  _DWORD *v163;
  _DWORD *v164;
  _DWORD *v165;
  _DWORD *v166;
  _DWORD *v167;
  _DWORD *v168;
  _DWORD *v169;
  _DWORD *v170;
  _DWORD *v171;
  _DWORD *v172;
  _DWORD *v173;
  _DWORD *v174;
  _DWORD *v175;
  _DWORD *v176;
  _DWORD *v177;
  _DWORD *v178;
  _DWORD *v179;
  _DWORD *v180;
  _DWORD *v181;
  _DWORD *v182;
  _DWORD *v183;
  _DWORD *v184;
  _DWORD *v185;
  _DWORD *v186;
  _DWORD *v187;
  _DWORD *v188;
  _DWORD *v189;
  _DWORD *v190;
  _QWORD v191[6];
  _QWORD v192[7];
  HALS_ObjectMap **v193;
  HALS_ObjectMap **v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void (*v198)(uint64_t);
  void *v199;
  _BYTE *v200;
  HALS_System *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  _BYTE *v206;
  HALS_ObjectMap ***v207;
  HALS_Client *v208;
  _BYTE buf[24];
  __int128 v210;
  HALS_ObjectMap **v211;
  HALS_ObjectMap **v212;
  HALS_Client *v213;
  uint64_t v214;

  v12 = this;
  v214 = *MEMORY[0x1E0C80C00];
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1886353255)
  {
    if (mSelector <= 1768845171)
    {
      if (mSelector > 1682929011)
      {
        if (mSelector > 1685288047)
        {
          if (mSelector != 1685288048)
          {
            if (mSelector != 1685416292)
            {
              if (mSelector == 1698776147)
              {
                if (a4 <= 3)
                {
                  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315394;
                    *(_QWORD *)&buf[4] = "HALS_System.cpp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 4580;
                    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_GetPropertyData: bad property data size for kAudioDevicePropertyEnableAdaptableDeviceSimulator", buf, 0x12u);
                  }
                  exception = __cxa_allocate_exception(0x10uLL);
                  *(_QWORD *)exception = &off_1E69A1B30;
                  exception[2] = 561211770;
                }
                v14 = *((unsigned __int8 *)this + 1280);
                goto LABEL_247;
              }
LABEL_287:
              HALS_Object::GetPropertyData((uint64_t)this, (uint64_t)a2, (int *)a3, a4, (int *)a5, a6);
              return;
            }
            if (a4 <= 0x1F)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_System.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4308;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyDeviceForUID", buf, 0x12u);
              }
              v163 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v163 = &off_1E69A1B30;
              v163[2] = 561211770;
            }
            if (!a6)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_System.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4309;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: translation data is NULL for kAudioHardwarePropertyDeviceForUID", buf, 0x12u);
              }
              v177 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v177 = &off_1E69A1B30;
              v177[2] = 1852797029;
            }
            if (*((_DWORD *)a6 + 2) != 8)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_System.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4315;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: wrong data size for input to kAudioHardwarePropertyDeviceForUID", buf, 0x12u);
              }
              v183 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v183 = &off_1E69A1B30;
              v183[2] = 561211770;
            }
            if (!*a6)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_System.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4316;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: input to kAudioHardwarePropertyDeviceForUID is NULL", buf, 0x12u);
              }
              v185 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v185 = &off_1E69A1B30;
              v185[2] = 1852797029;
            }
            if (*((_DWORD *)a6 + 6) != 4)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_System.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4320;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: wrong data size for output to kAudioHardwarePropertyDeviceForUID", buf, 0x12u);
              }
              v188 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v188 = &off_1E69A1B30;
              v188[2] = 561211770;
            }
            v62 = (_DWORD *)a6[2];
            if (!v62)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_System.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4321;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: output to kAudioHardwarePropertyDeviceForUID is NULL", buf, 0x12u);
              }
              v190 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v190 = &off_1E69A1B30;
              v190[2] = 1852797029;
            }
            v63 = HALS_System::CopyDeviceByUID(this, *(const __CFString **)*a6, a9);
            if (v63)
              v65 = *((_DWORD *)v63 + 4);
            else
              v65 = 0;
LABEL_319:
            *v62 = v65;
            *a5 = a4;
            HALS_ObjectMap::ReleaseObject(v63, v64);
            return;
          }
          if ((_DWORD)a4 != 4)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_System.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4749;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: wrong data size for kAudioHardwareDestroyTap", buf, 0x12u);
            }
            v167 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v167 = &off_1E69A1B30;
            v167[2] = 561211770;
          }
          if (!a6)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_System.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4750;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: nowhere to put the output data for kAudioHardwareDestroyTap", buf, 0x12u);
            }
            v178 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v178 = &off_1E69A1B30;
            v178[2] = 1852797029;
          }
LABEL_250:
          *(_DWORD *)a6 = 0;
          goto LABEL_254;
        }
        if (mSelector != 1682929012)
        {
          if (mSelector != 1684370979)
            goto LABEL_287;
          platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(this);
          v55 = (HALS_PlatformBehaviors *)(*(uint64_t (**)(uint64_t *))(*platform_behaviors + 24))(platform_behaviors);
          if ((_DWORD)v55)
          {
            v56 = HALS_PlatformBehaviors::get_platform_behaviors(v55);
            if ((*(unsigned int (**)(uint64_t *))(*v56 + 24))(v56) == 1)
            {
              v57 = a4 >> 2;
              this = v12;
              v58 = a5;
              v59 = a6;
              v60 = 1;
              v61 = 0;
LABEL_302:
              HALS_System::GetDeviceList((uint64_t)this, v57, v58, (uint64_t)v59, v60, v61, a9);
            }
LABEL_303:
            v113 = 4 * *a5;
            goto LABEL_338;
          }
          v57 = a4 >> 2;
          this = v12;
          v58 = a5;
          v59 = a6;
          v60 = 2;
LABEL_301:
          v61 = 1;
          goto LABEL_302;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4263;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyDefaultOutputDevice", buf, 0x12u);
          }
          v161 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v161 = &off_1E69A1B30;
          v161[2] = 561211770;
        }
        *(_QWORD *)buf = *((_QWORD *)this + 158);
        *(_DWORD *)&buf[8] = HALB_Mutex::Lock(*(HALB_Mutex **)buf);
        v47 = *(_DWORD *)(*(_QWORD *)buf + 208);
LABEL_253:
        HALB_Mutex::Locker::~Locker((HALB_Mutex **)buf);
        *(_DWORD *)a6 = v47;
        goto LABEL_254;
      }
      if (mSelector > 1668049698)
      {
        if (mSelector != 1668049699)
        {
          if (mSelector != 1682533920)
            goto LABEL_287;
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_System.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4256;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyDefaultInputDevice", buf, 0x12u);
            }
            v151 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v151 = &off_1E69A1B30;
            v151[2] = 561211770;
          }
          *(_QWORD *)buf = *((_QWORD *)this + 158);
          *(_DWORD *)&buf[8] = HALB_Mutex::Lock(*(HALB_Mutex **)buf);
          v47 = *(_DWORD *)(*(_QWORD *)buf + 104);
          goto LABEL_253;
        }
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x4002000000;
        *(_QWORD *)&v210 = __Block_byref_object_copy__5429;
        *((_QWORD *)&v210 + 1) = __Block_byref_object_dispose__5430;
        v212 = 0;
        v213 = 0;
        v211 = 0;
        v82 = MEMORY[0x1E0C809B0];
        v196 = MEMORY[0x1E0C809B0];
        v197 = 0x40000000;
        v198 = ___ZNK11HALS_System18GetClockDeviceListEjRjPjP11HALS_Client_block_invoke;
        v199 = &unk_1E697DB50;
        v200 = buf;
        v201 = this;
        v83 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v83, (uint64_t)&v196);
        *a5 = 0;
        v84 = *(_QWORD **)(*(_QWORD *)&buf[8] + 40);
        v85 = *(_QWORD **)(*(_QWORD *)&buf[8] + 48);
        if (v84 != v85)
        {
          v86 = a4 >> 2;
          do
          {
            v193 = 0;
            v194 = 0;
            v195 = 0;
            v87 = (_BYTE *)*v84;
            v202 = v82;
            v203 = 0x40000000;
            v204 = (uint64_t)___ZNK18HALS_DeviceManager19CopyClockDeviceListERNS_20BasicClockDeviceListEP11HALS_Client_block_invoke;
            v205 = &__block_descriptor_tmp_7_8182;
            v206 = v87;
            v207 = &v193;
            v88 = (HALB_Mutex *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v87 + 56))(v87);
            HALB_CommandGate::ExecuteCommand(v88, (uint64_t)&v202);
            v90 = v194;
            v91 = *a5;
            if (v193 != v194)
            {
              v92 = v193 + 1;
              do
              {
                *((_DWORD *)a6 + v91) = *((_DWORD *)*(v92 - 1) + 4);
                v91 = *a5 + 1;
                *a5 = v91;
              }
              while (v91 < v86 && v92++ != v90);
            }
            HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v193, v89);
            ++v84;
          }
          while (v91 < v86 && v84 != v85);
        }
        goto LABEL_192;
      }
      if (mSelector != 1651074160)
      {
        if (mSelector != 1651472419)
          goto LABEL_287;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x4002000000;
        *(_QWORD *)&v210 = __Block_byref_object_copy__5429;
        *((_QWORD *)&v210 + 1) = __Block_byref_object_dispose__5430;
        v212 = 0;
        v213 = 0;
        v211 = 0;
        v196 = MEMORY[0x1E0C809B0];
        v197 = 0x40000000;
        v198 = ___ZNK11HALS_System10GetBoxListEjRjPjP11HALS_Client_block_invoke;
        v199 = &unk_1E697DAD8;
        v200 = buf;
        v201 = this;
        v18 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v18, (uint64_t)&v196);
        *a5 = 0;
        v19 = *(_QWORD **)(*(_QWORD *)&buf[8] + 40);
        v20 = *(_QWORD **)(*(_QWORD *)&buf[8] + 48);
        if (v19 != v20)
        {
          v21 = a4 >> 2;
          do
          {
            v193 = 0;
            v194 = 0;
            v195 = 0;
            v22 = (_BYTE *)*v19;
            v202 = MEMORY[0x1E0C809B0];
            v203 = 0x40000000;
            v204 = (uint64_t)___ZNK18HALS_DeviceManager11CopyBoxListERNS_12BasicBoxListEP11HALS_Client_block_invoke;
            v205 = &__block_descriptor_tmp_8181;
            v206 = v22;
            v207 = &v193;
            v208 = a9;
            v23 = (HALB_Mutex *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v22 + 56))(v22);
            HALB_CommandGate::ExecuteCommand(v23, (uint64_t)&v202);
            v25 = v194;
            v26 = *a5;
            if (v193 != v194)
            {
              v27 = v193 + 1;
              do
              {
                *((_DWORD *)a6 + v26) = *((_DWORD *)*(v27 - 1) + 4);
                v26 = *a5 + 1;
                *a5 = v26;
                v28 = v26 >= v21 || v27++ == v25;
              }
              while (!v28);
            }
            HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v193, v24);
            ++v19;
          }
          while (v26 < v21 && v19 != v20);
        }
LABEL_192:
        _Block_object_dispose(buf, 8);
LABEL_281:
        HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(&v211, v95);
        goto LABEL_303;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_System.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4369;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyTranslateBundleIDToPlugIn", buf, 0x12u);
        }
        v157 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v157 = &off_1E69A1B30;
        v157[2] = 561211770;
      }
      if (a7 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_System.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4370;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad qualifier data size for kAudioHardwarePropertyTranslateBundleIDToPlugIn", buf, 0x12u);
        }
        v172 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v172 = &off_1E69A1B30;
        v172[2] = 561211770;
      }
      v66 = HALS_System::CopyPlugInByBundleID(this, *a8);
      if (v66)
        v68 = *((_DWORD *)v66 + 4);
      else
        v68 = 0;
LABEL_308:
      *(_DWORD *)a6 = v68;
      *a5 = 4;
      HALS_ObjectMap::ReleaseObject(v66, v67);
      return;
    }
    if (mSelector > 1870098019)
    {
      if (mSelector <= 1886152482)
      {
        if (mSelector == 1870098020)
        {
          v105 = a8 == 0;
          if (a8 && a7 >= 4)
          {
            v106 = 0;
            do
            {
              v28 = *((_DWORD *)a8 + v106) == 1634757735;
              v105 = v28;
              ++v106;
            }
            while (!v28 && v106 < a7 >> 2);
          }
          if (v105)
          {
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x4002000000;
            *(_QWORD *)&v210 = __Block_byref_object_copy__5429;
            *((_QWORD *)&v210 + 1) = __Block_byref_object_dispose__5430;
            v212 = 0;
            v213 = 0;
            v211 = 0;
            v191[0] = MEMORY[0x1E0C809B0];
            v191[1] = 0x40000000;
            v191[2] = ___ZNK11HALS_System15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_147;
            v191[3] = &unk_1E697E390;
            v191[4] = buf;
            v191[5] = this;
            v108 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v108, (uint64_t)v191);
            if (a4 >= 4)
            {
              v135 = 0;
              v136 = 0;
              LODWORD(v109) = a4 >> 2;
              v137 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
              v138 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
              if (a4 >> 2 <= 1)
                v109 = 1;
              else
                v109 = v109;
              while (v137 + v135 != v138)
              {
                *((_DWORD *)a6 + v136) = *(_DWORD *)(*(_QWORD *)(v137 + 8 * v136) + 16);
                ++v136;
                v135 += 8;
                if (v109 == v136)
                  goto LABEL_341;
              }
              LODWORD(v109) = v136;
            }
            else
            {
              LODWORD(v109) = 0;
            }
LABEL_341:
            *a5 = 4 * v109;
            _Block_object_dispose(buf, 8);
            HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(&v211, v144);
          }
          else
          {
            *a5 = 0;
          }
          return;
        }
        if (mSelector != 1885954665)
          goto LABEL_287;
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4387;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyPlugInForBundleID", buf, 0x12u);
          }
          v156 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v156 = &off_1E69A1B30;
          v156[2] = 561211770;
        }
        if (!a6)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4388;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: translation data is NULL for kAudioHardwarePropertyPlugInForBundleID", buf, 0x12u);
          }
          v176 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v176 = &off_1E69A1B30;
          v176[2] = 1852797029;
        }
        if (*((_DWORD *)a6 + 2) != 8)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4394;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: wrong data size for input to kAudioHardwarePropertyPlugInForBundleID", buf, 0x12u);
          }
          v181 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v181 = &off_1E69A1B30;
          v181[2] = 561211770;
        }
        if (!*a6)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4395;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: input to kAudioHardwarePropertyPlugInForBundleID is NULL", buf, 0x12u);
          }
          v186 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v186 = &off_1E69A1B30;
          v186[2] = 1852797029;
        }
        if (*((_DWORD *)a6 + 6) != 4)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4399;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: wrong data size for output to kAudioHardwarePropertyPlugInForBundleID", buf, 0x12u);
          }
          v187 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v187 = &off_1E69A1B30;
          v187[2] = 561211770;
        }
        v62 = (_DWORD *)a6[2];
        if (!v62)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4400;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: output to kAudioHardwarePropertyPlugInForBundleID is NULL", buf, 0x12u);
          }
          v189 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v189 = &off_1E69A1B30;
          v189[2] = 1852797029;
        }
        v63 = HALS_System::CopyPlugInByBundleID(this, *(const __CFString **)*a6);
        if (v63)
          v65 = *((_DWORD *)v63 + 4);
        else
          v65 = 0;
        goto LABEL_319;
      }
      if (mSelector != 1886152483)
      {
        if (mSelector == 1886218606)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_System.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4526;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_GetPropertyData: bad property data size for kAudioHardwarePropertyProcessInputMute", buf, 0x12u);
            }
            v165 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v165 = &off_1E69A1B30;
            v165[2] = 561211770;
          }
          HALS_ObjectMap::RetainObject(a9, a2);
          if (a9)
          {
            v202 = 0x676C6F6270696D74;
            LODWORD(v203) = 0;
            (*(void (**)(HALS_Client *, _QWORD, uint64_t *, uint64_t, unsigned int *, uint64_t *, _QWORD, _QWORD, HALS_Client *))(*(_QWORD *)a9 + 112))(a9, *((unsigned int *)a9 + 4), &v202, a4, a5, a6, 0, 0, a9);
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              v111 = *((_DWORD *)a9 + 58);
              if (*(_DWORD *)a6)
                v112 = "on";
              else
                v112 = "off";
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "HALS_System.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4540;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v111;
              LOWORD(v210) = 2080;
              *(_QWORD *)((char *)&v210 + 2) = v112;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_System::GetPropertyData: PID: %d Process Input Mute: %s", buf, 0x22u);
            }
          }
          else
          {
            *(_DWORD *)a6 = 0;
            *a5 = 4;
          }
          HALS_ObjectMap::ReleaseObject(a9, v110);
          return;
        }
        if (mSelector != 1886221684)
          goto LABEL_287;
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4552;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_GetPropertyData: bad property data size for kAudioHardwarePropertyProcessIsAudible", buf, 0x12u);
          }
          v16 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v16 = &off_1E69A1B30;
          v16[2] = 561211770;
        }
        goto LABEL_246;
      }
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x4002000000;
      *(_QWORD *)&v210 = __Block_byref_object_copy__5429;
      *((_QWORD *)&v210 + 1) = __Block_byref_object_dispose__5430;
      v212 = 0;
      v213 = 0;
      v211 = 0;
      v202 = MEMORY[0x1E0C809B0];
      v203 = 0x40000000;
      v204 = (uint64_t)___ZNK11HALS_System13GetPlugInListEjRjPj_block_invoke;
      v205 = &unk_1E697D9E8;
      v206 = buf;
      v207 = (HALS_ObjectMap ***)this;
      v114 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v114, (uint64_t)&v202);
      *a5 = 0;
      v115 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
      v116 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
      if (v115 != v116)
      {
        v117 = 0;
        do
        {
          while (1)
          {
            v118 = *(_DWORD *)(*(_QWORD *)v115 + 20);
            v119 = *(_DWORD *)(*(_QWORD *)v115 + 24);
            if (v118 == v119)
              break;
            if (v118 != 1634757735 && v118 != 1953656941 && v119 != 1634757735 && v119 != 1953656941)
              goto LABEL_262;
LABEL_275:
            *((_DWORD *)a6 + v117) = *(_DWORD *)(*(_QWORD *)v115 + 16);
            v117 = *a5 + 1;
            *a5 = v117;
            v115 += 8;
            if (v117 >= a4 >> 2 || v115 == v116)
              goto LABEL_280;
          }
          if (v118 == 1953656941 || v118 == 1634757735)
            goto LABEL_275;
LABEL_262:
          v115 += 8;
        }
        while (v115 != v116);
      }
LABEL_280:
      _Block_object_dispose(buf, 8);
      goto LABEL_281;
    }
    if (mSelector <= 1835758703)
    {
      if (mSelector != 1768845172)
      {
        if (mSelector == 1769302372)
        {
          if (a7 != 4)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_System.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4699;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: wrong qualifier size for kAudioHardwarePropertyDeviceForUseCaseID", buf, 0x12u);
            }
            v150 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v150 = &off_1E69A1B30;
            v150[2] = 561211770;
          }
          if (!a8)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_System.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4700;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: qualifier data is NULL for kAudioHardwarePropertyDeviceForUseCaseID", buf, 0x12u);
            }
            v170 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v170 = &off_1E69A1B30;
            v170[2] = 1852797029;
          }
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_System.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4702;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyDeviceForUseCaseID", buf, 0x12u);
            }
            v180 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v180 = &off_1E69A1B30;
            v180[2] = 561211770;
          }
          if (!a6)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_System.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4703;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: out data is NULL for kAudioHardwarePropertyDeviceForUseCaseID", buf, 0x12u);
            }
            v184 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v184 = &off_1E69A1B30;
            v184[2] = 1852797029;
          }
          *(_DWORD *)a6 = 0;
          *a5 = 4;
          v33 = *(unsigned int *)a8;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x4002000000;
          *(_QWORD *)&v210 = __Block_byref_object_copy__5429;
          *((_QWORD *)&v210 + 1) = __Block_byref_object_dispose__5430;
          v212 = 0;
          v213 = 0;
          v211 = 0;
          v202 = MEMORY[0x1E0C809B0];
          v203 = 0x40000000;
          v204 = (uint64_t)___ZNK11HALS_System36CopyNonMetaDeviceByIsolatedUseCaseIDE22IsolatedAudioUseCaseIDP11HALS_Client_block_invoke;
          v205 = &unk_1E697DC40;
          v206 = buf;
          v207 = (HALS_ObjectMap ***)this;
          v34 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v34, (uint64_t)&v202);
          v35 = *(_QWORD **)(*(_QWORD *)&buf[8] + 40);
          v36 = *(_QWORD **)(*(_QWORD *)&buf[8] + 48);
          while (v35 != v36)
          {
            v37 = (HALS_ObjectMap *)(*(uint64_t (**)(_QWORD, uint64_t, HALS_Client *))(*(_QWORD *)*v35 + 256))(*v35, v33, a9);
            if (v37)
              goto LABEL_294;
            ++v35;
          }
          v37 = 0;
LABEL_294:
          _Block_object_dispose(buf, 8);
          HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(&v211, v130);
          if (v37)
            *(_DWORD *)a6 = *((_DWORD *)v37 + 4);
          HALS_ObjectMap::ReleaseObject(v37, v131);
          return;
        }
        goto LABEL_287;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_System.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4609;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_GetPropertyData: wrong size for kAudioHardwarePropertyIsInitingOrExiting", buf, 0x12u);
        }
        v69 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v69 = &off_1E69A1B30;
        v69[2] = 561211770;
      }
      goto LABEL_250;
    }
    if (mSelector != 1835758704)
    {
      if (mSelector == 1835821926)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4692;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_GetPropertyData: bad property data size for kAudioHardwarePropertyMlockFailHandling", buf, 0x12u);
          }
          v153 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v153 = &off_1E69A1B30;
          v153[2] = 561211770;
        }
        v14 = atomic_load((unsigned int *)&HALB_MlockFailHandling::mHandling);
        goto LABEL_247;
      }
      goto LABEL_287;
    }
    if (a7 != 8)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_System.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4728;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: wrong qualifier size for kAudioHardwareCreateTap", buf, 0x12u);
      }
      v160 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v160 = &off_1E69A1B30;
      v160[2] = 561211770;
    }
    if ((_DWORD)a4 != 8)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_System.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4729;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: wrong data size for kAudioHardwareCreateTap", buf, 0x12u);
      }
      v174 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v174 = &off_1E69A1B30;
      v174[2] = 561211770;
    }
    if (!a6)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_System.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4730;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: nowhere to put the output data for kAudioHardwareCreateTap", buf, 0x12u);
      }
      v182 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v182 = &off_1E69A1B30;
      v182[2] = 1852797029;
    }
    v96 = *a8;
    v202 = 0;
    v203 = (uint64_t)&v202;
    v204 = 0x2000000000;
    LODWORD(v205) = 0;
    if (!v96)
      goto LABEL_297;
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZN11HALS_System9CreateTapEPK14__CFDictionaryP11HALS_Client_block_invoke;
    *(_QWORD *)&v210 = &unk_1E697E010;
    *((_QWORD *)&v210 + 1) = &v202;
    v211 = (HALS_ObjectMap **)this;
    v212 = (HALS_ObjectMap **)v96;
    v213 = a9;
    v97 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v97, (uint64_t)buf);
    if (*(_DWORD *)(v203 + 24))
    {
      v196 = 0x676C6F6274707323;
      LODWORD(v197) = 0;
      if (a9)
        v98 = *((unsigned int *)a9 + 4);
      else
        v98 = 0;
      (*(void (**)(HALS_System *, HALS_System *, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v12 + 144))(v12, v12, v98, 1, &v196, 0);
      v142 = *(_DWORD *)(v203 + 24);
      _Block_object_dispose(&v202, 8);
      if (v142)
      {
        *(_QWORD *)buf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v202, "TapObjectID");
        applesauce::CF::NumberRef::NumberRef<unsigned int,void>((CFNumberRef *)&v196, v142);
        mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(*(__CFDictionary **)buf, (const void *)v202, (const void *)v196);
        applesauce::CF::NumberRef::~NumberRef((const void **)&v196);
        applesauce::CF::StringRef::~StringRef((const void **)&v202);
        mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v202, *(const void **)buf);
        v143 = v202;
        v202 = 0;
        *a6 = v143;
        applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&v202);
        mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)buf);
        goto LABEL_337;
      }
    }
    else
    {
LABEL_297:
      _Block_object_dispose(&v202, 8);
    }
    *a6 = 0;
LABEL_337:
    v113 = 8;
    goto LABEL_338;
  }
  if (mSelector <= 1953325672)
  {
    if (mSelector <= 1920297315)
    {
      if (mSelector > 1919186466)
      {
        if (mSelector == 1919186467)
        {
          v57 = a4 >> 2;
          v58 = a5;
          v59 = a6;
          v60 = 0;
          goto LABEL_301;
        }
        if (mSelector != 1919839344)
          goto LABEL_287;
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4597;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_GetPropertyData: bad property data size for kAudioHardwarePropertyRunLoop", buf, 0x12u);
          }
          v152 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v152 = &off_1E69A1B30;
          v152[2] = 561211770;
        }
        *(_QWORD *)buf = (char *)this + 1528;
        *(_DWORD *)&buf[8] = HALB_Mutex::Lock((HALS_System *)((char *)this + 1528));
        v48 = (const void *)*((_QWORD *)v12 + 190);
        HALB_Guard::Locker::~Locker((HALB_Mutex **)buf);
        *a6 = (uint64_t)v48;
        if (v48)
          CFRetain(v48);
        goto LABEL_337;
      }
      if (mSelector != 1886353256)
      {
        if (mSelector == 1886548771)
        {
          NumberProcessObjects = HALS_System::GetNumberProcessObjects(this);
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_System.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4681;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyProcessObjectList", buf, 0x12u);
            }
            v149 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v149 = &off_1E69A1B30;
            v149[2] = 561211770;
          }
          if (a4 >> 2 >= NumberProcessObjects)
            LODWORD(v31) = NumberProcessObjects;
          else
            LODWORD(v31) = a4 >> 2;
          HALS_System::GetProcessObjectList((HALS_System *)buf, (uint64_t)v12);
          v32 = *(void **)buf;
          if ((_DWORD)v31)
          {
            v31 = (4 * v31);
            memmove(a6, *(const void **)buf, v31);
          }
          *a5 = v31;
          if (v32)
            operator delete(v32);
          return;
        }
        goto LABEL_287;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_System.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4573;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_GetPropertyData: bad property data size for kAudioHardwarePropertyPowerHint", buf, 0x12u);
        }
        v158 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v158 = &off_1E69A1B30;
        v158[2] = 561211770;
      }
      if (a9)
      {
        v14 = *((_DWORD *)a9 + 71);
LABEL_247:
        *(_DWORD *)a6 = v14;
LABEL_254:
        v113 = 4;
LABEL_338:
        *a5 = v113;
        return;
      }
LABEL_288:
      v14 = 0;
      goto LABEL_247;
    }
    if (mSelector > 1936224867)
    {
      if (mSelector == 1936224868)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4277;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyDefaultSharedOutputDevice", buf, 0x12u);
          }
          v168 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v168 = &off_1E69A1B30;
          v168[2] = 561211770;
        }
        *(_QWORD *)buf = *((_QWORD *)this + 158);
        *(_DWORD *)&buf[8] = HALB_Mutex::Lock(*(HALB_Mutex **)buf);
        v47 = *(_DWORD *)(*(_QWORD *)buf + 416);
        goto LABEL_253;
      }
      if (mSelector != 1936483696)
      {
        if (mSelector == 1937010031)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_System.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4566;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_GetPropertyData: bad property data size for kAudioHardwarePropertyMixStereoToMono", buf, 0x12u);
            }
            v148 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v148 = &off_1E69A1B30;
            v148[2] = 561211770;
          }
          v192[0] = MEMORY[0x1E0C809B0];
          v192[1] = 0x40000000;
          v192[2] = ___ZNK11HALS_System15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
          v192[3] = &__block_descriptor_tmp_146;
          v192[4] = this;
          v192[5] = a6;
          v15 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v15, (uint64_t)v192);
          goto LABEL_254;
        }
        goto LABEL_287;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_System.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4657;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_GetPropertyData: wrong size for kAudioHardwarePropertySleepingIsAllowed", buf, 0x12u);
        }
        v164 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v164 = &off_1E69A1B30;
        v164[2] = 561211770;
      }
      if (a9)
      {
        v14 = *((unsigned __int8 *)a9 + 256);
        goto LABEL_247;
      }
      goto LABEL_288;
    }
    if (mSelector != 1920297316)
    {
      if (mSelector != 1934587252)
        goto LABEL_287;
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_System.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4270;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyDefaultSystemOutputDevice", buf, 0x12u);
        }
        v155 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v155 = &off_1E69A1B30;
        v155[2] = 561211770;
      }
      *(_QWORD *)buf = *((_QWORD *)this + 158);
      *(_DWORD *)&buf[8] = HALB_Mutex::Lock(*(HALB_Mutex **)buf);
      v47 = *(_DWORD *)(*(_QWORD *)buf + 312);
      goto LABEL_253;
    }
LABEL_142:
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_System.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4343;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyPhysicalDeviceForUID", buf, 0x12u);
      }
      v145 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v145 = &off_1E69A1B30;
      v145[2] = 561211770;
    }
    if (a7 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_System.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4344;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad qualifier data size for kAudioHardwarePropertyPhysicalDeviceForUID", buf, 0x12u);
      }
      v146 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v146 = &off_1E69A1B30;
      v146[2] = 561211770;
    }
    v66 = HALS_System::CopyDeviceByUID(this, *a8, a9);
    if (v66)
      v68 = *((_DWORD *)v66 + 4);
    else
      v68 = 0;
    goto LABEL_308;
  }
  if (mSelector > 1969841250)
  {
    if (mSelector <= 1969841267)
    {
      if (mSelector == 1969841251)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4501;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyTranslateUIDToClockDevice", buf, 0x12u);
          }
          v162 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v162 = &off_1E69A1B30;
          v162[2] = 561211770;
        }
        if (a7 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4502;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad qualifier data size for kAudioHardwarePropertyTranslateUIDToClockDevice", buf, 0x12u);
          }
          v175 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v175 = &off_1E69A1B30;
          v175[2] = 561211770;
        }
        v66 = HALS_System::CopyClockDeviceByUID(this, *a8, (HALS_Client *)a3);
        if (v66)
          v68 = *((_DWORD *)v66 + 4);
        else
          v68 = 0;
        goto LABEL_308;
      }
      if (mSelector != 1969841252)
        goto LABEL_287;
      goto LABEL_142;
    }
    if (mSelector != 1969841268)
    {
      if (mSelector == 1970496882)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4559;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_GetPropertyData: bad property data size for kAudioHardwarePropertyUserSessionIsActiveOrHeadless", buf, 0x12u);
          }
          v166 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v166 = &off_1E69A1B30;
          v166[2] = 561211770;
        }
      }
      else
      {
        if (mSelector != 1986359923)
          goto LABEL_287;
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4518;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertySystemVersion", buf, 0x12u);
          }
          v17 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v17 = &off_1E69A1B30;
          v17[2] = 561211770;
        }
      }
LABEL_246:
      v14 = 1;
      goto LABEL_247;
    }
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_System.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4474;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyTranslateUIDToTap", buf, 0x12u);
      }
      v169 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v169 = &off_1E69A1B30;
      v169[2] = 561211770;
    }
    if (a7 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_System.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4475;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad qualifier data size for kAudioHardwarePropertyTranslateUIDToTap", buf, 0x12u);
      }
      v179 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v179 = &off_1E69A1B30;
      v179[2] = 561211770;
    }
    v125 = *a8;
    if (*a8)
    {
      CFRetain(*a8);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, v125);
      v125 = *(const __CFString **)buf;
      if (*(_QWORD *)buf)
      {
        CFRetain(*(CFTypeRef *)buf);
        v126 = 0;
LABEL_311:
        v192[6] = v125;
        v133 = (HALS_ObjectMap *)HALS_System::CopyTapByUID((uint64_t)v12, v125, (uint64_t)a9);
        if ((v126 & 1) == 0)
          CFRelease(v125);
        if (v133)
          v134 = *((_DWORD *)v133 + 4);
        else
          v134 = 0;
        *(_DWORD *)a6 = v134;
        *a5 = 4;
        HALS_ObjectMap::ReleaseObject(v133, v132);
        if (*(_QWORD *)buf)
          CFRelease(*(CFTypeRef *)buf);
        return;
      }
    }
    else
    {
      *(_QWORD *)buf = 0;
    }
    v126 = 1;
    goto LABEL_311;
  }
  if (mSelector > 1953526562)
  {
    if (mSelector != 1953526563)
    {
      if (mSelector == 1969841250)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4456;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyTranslateUIDToBox", buf, 0x12u);
          }
          v154 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v154 = &off_1E69A1B30;
          v154[2] = 561211770;
        }
        if (a7 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4457;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad qualifier data size for kAudioHardwarePropertyTranslateUIDToBox", buf, 0x12u);
          }
          v171 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v171 = &off_1E69A1B30;
          v171[2] = 561211770;
        }
        v49 = *a8;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x4002000000;
        *(_QWORD *)&v210 = __Block_byref_object_copy__5429;
        *((_QWORD *)&v210 + 1) = __Block_byref_object_dispose__5430;
        v212 = 0;
        v213 = 0;
        v211 = 0;
        v202 = MEMORY[0x1E0C809B0];
        v203 = 0x40000000;
        v204 = (uint64_t)___ZNK11HALS_System12CopyBoxByUIDEPK10__CFStringP11HALS_Client_block_invoke;
        v205 = &unk_1E697DAB0;
        v206 = buf;
        v207 = (HALS_ObjectMap ***)this;
        v50 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v50, (uint64_t)&v202);
        v51 = *(HALS_DeviceManager ***)(*(_QWORD *)&buf[8] + 40);
        v52 = *(HALS_DeviceManager ***)(*(_QWORD *)&buf[8] + 48);
        while (v51 != v52)
        {
          v53 = HALS_DeviceManager::CopyBoxByUID(*v51, v49, a9);
          if (v53)
            goto LABEL_291;
          ++v51;
        }
        v53 = 0;
LABEL_291:
        _Block_object_dispose(buf, 8);
        HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(&v211, v127);
        if (v53)
          v129 = *((_DWORD *)v53 + 4);
        else
          v129 = 0;
        *(_DWORD *)a6 = v129;
        *a5 = 4;
        HALS_ObjectMap::ReleaseObject(v53, v128);
        return;
      }
      goto LABEL_287;
    }
    *a5 = 0;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4002000000;
    *(_QWORD *)&v210 = __Block_byref_object_copy__102;
    *((_QWORD *)&v210 + 1) = __Block_byref_object_dispose__103;
    v212 = 0;
    v213 = 0;
    v211 = 0;
    v202 = MEMORY[0x1E0C809B0];
    v203 = 0x40000000;
    v204 = (uint64_t)___ZNK11HALS_System10GetTapListEjRjPjP11HALS_Client_block_invoke;
    v205 = &unk_1E697E060;
    v206 = buf;
    v207 = (HALS_ObjectMap ***)this;
    v208 = a9;
    v99 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v99, (uint64_t)&v202);
    v101 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
    v100 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
    if (v101 != v100)
    {
      v102 = *a5;
      v103 = v101 + 4;
      do
      {
        *((_DWORD *)a6 + v102) = *(_DWORD *)(v103 - 4);
        v102 = *a5 + 1;
        *a5 = v102;
        v104 = v102 >= a4 >> 2 || v103 == v100;
        v103 += 4;
      }
      while (!v104);
    }
    _Block_object_dispose(buf, 8);
    if (v211)
    {
      v212 = v211;
      operator delete(v211);
    }
    goto LABEL_303;
  }
  if (mSelector != 1953325673)
  {
    if (mSelector != 1953326883)
      goto LABEL_287;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4002000000;
    *(_QWORD *)&v210 = __Block_byref_object_copy__5429;
    *((_QWORD *)&v210 + 1) = __Block_byref_object_dispose__5430;
    v212 = 0;
    v213 = 0;
    v211 = 0;
    v202 = MEMORY[0x1E0C809B0];
    v203 = 0x40000000;
    v204 = (uint64_t)___ZNK11HALS_System23GetTransportManagerListEjRjPj_block_invoke;
    v205 = &unk_1E697DA60;
    v206 = buf;
    v207 = (HALS_ObjectMap ***)this;
    v38 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v38, (uint64_t)&v202);
    *a5 = 0;
    v39 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
    v40 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
    if (v39 == v40)
      goto LABEL_280;
    v41 = 0;
    while (1)
    {
      while (1)
      {
        v43 = *(_DWORD *)(*(_QWORD *)v39 + 20);
        v42 = *(_DWORD *)(*(_QWORD *)v39 + 24);
        if (v43 != v42 && v43 != 1953656941)
          break;
        if (v43 == 1953656941 || v43 != v42)
          goto LABEL_94;
LABEL_91:
        v39 += 8;
        if (v39 == v40)
          goto LABEL_280;
      }
      if (v42 != 1953656941)
        goto LABEL_91;
LABEL_94:
      *((_DWORD *)a6 + v41) = *(_DWORD *)(*(_QWORD *)v39 + 16);
      v41 = *a5 + 1;
      *a5 = v41;
      v39 += 8;
      if (v41 >= a4 >> 2 || v39 == v40)
        goto LABEL_280;
    }
  }
  if (a4 <= 3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_System.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4430;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyTranslateBundleIDToTransportManager", buf, 0x12u);
    }
    v159 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v159 = &off_1E69A1B30;
    v159[2] = 561211770;
  }
  if (a7 <= 7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_System.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4431;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad qualifier data size for kAudioHardwarePropertyTranslateBundleIDToTransportManager", buf, 0x12u);
    }
    v173 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v173 = &off_1E69A1B30;
    v173[2] = 561211770;
  }
  v70 = *a8;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x4002000000;
  *(_QWORD *)&v210 = __Block_byref_object_copy__5429;
  *((_QWORD *)&v210 + 1) = __Block_byref_object_dispose__5430;
  v212 = 0;
  v213 = 0;
  v211 = 0;
  v202 = MEMORY[0x1E0C809B0];
  v203 = 0x40000000;
  v204 = (uint64_t)___ZNK11HALS_System30CopyTransportManagerByBundleIDEPK10__CFString_block_invoke;
  v205 = &unk_1E697DA38;
  v206 = buf;
  v207 = (HALS_ObjectMap ***)this;
  v71 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v71, (uint64_t)&v202);
  v72 = *(HALS_ObjectMap ***)(*(_QWORD *)&buf[8] + 40);
  v73 = *(HALS_ObjectMap ***)(*(_QWORD *)&buf[8] + 48);
  if (v72 == v73)
  {
LABEL_177:
    v81 = 0;
    goto LABEL_330;
  }
  while (1)
  {
    v74 = *v72;
    v76 = *((_DWORD *)*v72 + 5);
    v75 = *((_DWORD *)*v72 + 6);
    if (v76 == v75 || v76 == 1953656941)
      break;
    if (v75 == 1953656941)
      goto LABEL_172;
LABEL_176:
    if (++v72 == v73)
      goto LABEL_177;
  }
  if (v76 != 1953656941 && v76 == v75)
    goto LABEL_176;
LABEL_172:
  v79 = (const __CFString *)*((_QWORD *)v74 + 6);
  if (v79)
  {
    CFRetain(v79);
    v79 = (const __CFString *)*((_QWORD *)v74 + 6);
  }
  v196 = (uint64_t)v79;
  LOBYTE(v197) = 1;
  if (CFStringCompare(v79, v70, 0))
  {
    CACFString::~CACFString((CACFString *)&v196);
    goto LABEL_176;
  }
  v81 = *v72;
  HALS_ObjectMap::RetainObject(v81, v80);
  CACFString::~CACFString((CACFString *)&v196);
LABEL_330:
  _Block_object_dispose(buf, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(&v211, v139);
  if (v81)
    v141 = *((_DWORD *)v81 + 4);
  else
    v141 = 0;
  *(_DWORD *)a6 = v141;
  *a5 = 4;
  HALS_ObjectMap::ReleaseObject(v81, v140);
}

void sub_1B5A0E5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, HALS_System::BasicDeviceManagerList *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  HALS_ObjectMap ***v37;
  uint64_t v38;
  HALS_Object *v40;

  CACFString::~CACFString((CACFString *)&a31);
  _Block_object_dispose((const void *)(v38 - 192), 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v37, v40);
  _Unwind_Resume(a1);
}

void HALS_System::SetPropertyData(HALS_System *this, HALS_Object *a2, const AudioObjectPropertyAddress *a3, uint64_t a4, _DWORD *a5, uint64_t a6, _DWORD *a7, HALS_Client *a8)
{
  int v10;
  signed int mSelector;
  int v15;
  HALB_Mutex *v16;
  HALS_DefaultDeviceManager *v17;
  HALS_ObjectMap *v18;
  signed int v19;
  _DWORD *v20;
  uint64_t v21;
  HALB_Mutex *v22;
  CFMutableDictionaryRef **v23;
  AMCP::Feature_Flags *v24;
  const BOOL *v25;
  uint64_t i;
  int v27;
  HALS_NotificationManager *v28;
  uint64_t v29;
  HALB_Mutex *v30;
  uint64_t v31;
  _DWORD *v32;
  _BOOL4 v33;
  const void *v34;
  const void *v35;
  CFRunLoopSourceRef *v36;
  CFRunLoopSourceRef *v37;
  const __CFString **v38;
  const __CFString *v39;
  CFRunLoopSourceRef *v40;
  CFRunLoopSourceRef *v41;
  const __CFString *v42;
  HALS_Object *v43;
  int v44;
  const char *v45;
  uint64_t v46;
  HALB_Mutex *v47;
  int v48;
  signed int v49;
  CFRunLoopSourceRef *v50;
  CFRunLoopSourceRef *v51;
  const __CFString *v52;
  CFRunLoopSourceRef *v54;
  CFRunLoopSourceRef *v55;
  const __CFString *v56;
  CFRunLoopSourceRef *v57;
  CFRunLoopSourceRef *v58;
  const __CFString *v59;
  CFRunLoopSourceRef *v60;
  CFRunLoopSourceRef *v61;
  const __CFString *v62;
  NSObject *v63;
  _opaque_pthread_t *v64;
  mach_port_t v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  _DWORD *v71;
  _DWORD *exception;
  _DWORD *v73;
  _DWORD *v74;
  _DWORD *v75;
  _DWORD *v76;
  _DWORD *v77;
  _DWORD *v78;
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[7];
  uint64_t valuePtr;
  int v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  char v87;
  _BYTE buf[24];
  __int128 v89;
  HALS_System *v90;
  HALS_Client *v91;
  int v92;
  uint64_t v93;

  v10 = a6;
  v93 = *MEMORY[0x1E0C80C00];
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1886353255)
  {
    if (mSelector > 1936224867)
    {
      switch(mSelector)
      {
        case 1936224868:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_System.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4833;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::SetPropertyData: bad property data size for kAudioHardwarePropertyDefaultSystemOutputDevice", buf, 0x12u);
            }
            exception = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)exception = &off_1E69A1B30;
            exception[2] = 561211770;
          }
          if (!HALS_ClientEntitlements::HasEntitlementWithBooleanValue((HALS_Client *)((char *)a8 + 288), CFSTR("com.apple.private.audio.default-shared-device")))
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_System.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4834;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::SetPropertyData: no entitlement for kAudioHardwarePropertyDefaultSharedOutputDevice", buf, 0x12u);
            }
            v77 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v77 = &off_1E69A1B30;
            v77[2] = 560492391;
          }
          if (v10 == 4)
          {
            if (*a7 != 1)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_System.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4839;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::SetPropertyData: transient qualifier required for shared device assignment.", buf, 0x12u);
              }
              v78 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v78 = &off_1E69A1B30;
              v78[2] = 1852797029;
            }
            v17 = (HALS_DefaultDeviceManager *)*((_QWORD *)this + 158);
            v18 = (HALS_ObjectMap *)*a5;
            v19 = 1936224868;
            v33 = 1;
            goto LABEL_104;
          }
          if (!v10)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_System.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4835;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::SetPropertyData: no qualifier given for shared device assignment.", buf, 0x12u);
            }
            v32 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v32 = &off_1E69A1B30;
            v32[2] = 1852797029;
          }
          break;
        case 1936483696:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_System.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4919;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_SetPropertyData: bad property data size for kAudioHardwarePropertySleepingIsAllowed", buf, 0x12u);
            }
            v76 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v76 = &off_1E69A1B30;
            v76[2] = 561211770;
          }
          if (a8 && (*a5 != 0) != (*((_BYTE *)a8 + 256) != 0))
          {
            *((_BYTE *)a8 + 256) = *a5 != 0;
            v46 = MEMORY[0x1E0C809B0];
            v79[0] = MEMORY[0x1E0C809B0];
            v79[1] = 0x40000000;
            v79[2] = ___ZN11HALS_System15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_153;
            v79[3] = &__block_descriptor_tmp_154;
            v79[4] = this;
            v79[5] = a8;
            v47 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v47, (uint64_t)v79);
            v48 = *((_DWORD *)a8 + 4);
            *(_QWORD *)buf = v46;
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = ___ZNK11HALS_Client33SendSleepingIsAllowedNotificationEv_block_invoke;
            *(_QWORD *)&v89 = &__block_descriptor_tmp_18_2058;
            DWORD2(v89) = v48;
            LOBYTE(v48) = atomic_load((unsigned __int8 *)a8 + 408);
            if ((v48 & 1) != 0)
              atomic_store(1u, (unsigned __int8 *)a8 + 409);
            dispatch_async(*((dispatch_queue_t *)a8 + 47), buf);
          }
          break;
        case 1937010031:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_System.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4873;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_SetPropertyData: bad property data size for kAudioHardwarePropertyMixStereoToMono", buf, 0x12u);
            }
            v68 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v68 = &off_1E69A1B30;
            v68[2] = 561211770;
          }
          v84 = 0;
          v85 = &v84;
          v86 = 0x2000000000;
          v87 = *((_BYTE *)this + 1224);
          v21 = MEMORY[0x1E0C809B0];
          v81[0] = MEMORY[0x1E0C809B0];
          v81[1] = 0x40000000;
          v81[2] = ___ZN11HALS_System15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
          v81[3] = &unk_1E697E3B8;
          v81[5] = this;
          v81[6] = a5;
          v81[4] = &v84;
          v22 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v22, (uint64_t)v81);
          v23 = (CFMutableDictionaryRef **)*((_QWORD *)this + 176);
          LODWORD(valuePtr) = *((unsigned __int8 *)v85 + 24);
          *(_QWORD *)buf = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
          buf[8] = 1;
          HALS_SettingsManager::_WriteSetting(v23, CFSTR("System_MixStereoToMono"), *(CFPropertyListRef *)buf);
          CACFNumber::~CACFNumber((CACFNumber *)buf);
          if (AMCP::Feature_Flags::run_hybrid_hal(v24, v25))
          {
            for (i = *((_QWORD *)this + 169); i != *((_QWORD *)this + 170); i += 8)
            {
              v27 = *(_DWORD *)(*(_QWORD *)i + 16);
              *(_QWORD *)buf = v21;
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)&buf[16] = ___ZNK11HALS_System21update_all_iocontextsEv_block_invoke;
              *(_QWORD *)&v89 = &__block_descriptor_tmp_123;
              DWORD2(v89) = v27;
              LOBYTE(v27) = atomic_load((unsigned __int8 *)this + 928);
              if ((v27 & 1) != 0)
                atomic_store(1u, (unsigned __int8 *)this + 929);
              dispatch_async(*((dispatch_queue_t *)this + 112), buf);
            }
          }
          v28 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
          if (a8)
            v29 = *((unsigned int *)a8 + 4);
          else
            v29 = 0;
          strcpy(buf, "omtsbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          HALS_Object::PropertiesChanged(this, v28, v29, 1, (const AudioObjectPropertyAddress *)buf);
          goto LABEL_88;
        default:
LABEL_157:
          HALS_Object::SetPropertyData((uint64_t)this, (uint64_t)a2, (uint64_t)a3, a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8);
      }
      return;
    }
    if (mSelector == 1886353256)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_System.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4891;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_SetPropertyData: bad property data size for kAudioHardwarePropertyPowerHint", buf, 0x12u);
        }
        v70 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v70 = &off_1E69A1B30;
        v70[2] = 561211770;
      }
      if (a8)
      {
        *((_DWORD *)a8 + 71) = *a5;
        v80[0] = MEMORY[0x1E0C809B0];
        v80[1] = 0x40000000;
        v80[2] = ___ZN11HALS_System15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_151;
        v80[3] = &__block_descriptor_tmp_152;
        v80[4] = this;
        v80[5] = a8;
        v30 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v30, (uint64_t)v80);
        v31 = *((unsigned int *)a8 + 4);
        strcpy(buf, "hwopbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)v31, v31, 1, (const AudioObjectPropertyAddress *)buf);
      }
      return;
    }
    if (mSelector == 1919839344)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_System.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4910;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_SetPropertyData: bad property data size for kAudioHardwarePropertyRunLoop", buf, 0x12u);
        }
        v74 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v74 = &off_1E69A1B30;
        v74[2] = 561211770;
      }
      v34 = *(const void **)a5;
      *(_QWORD *)buf = (char *)this + 1528;
      *(_DWORD *)&buf[8] = HALB_Mutex::Lock((HALS_System *)((char *)this + 1528));
      v35 = (const void *)*((_QWORD *)this + 190);
      if (v35 != v34)
      {
        if (v35)
        {
          if (v34)
          {
            v36 = (CFRunLoopSourceRef *)*((_QWORD *)this + 226);
            v37 = (CFRunLoopSourceRef *)*((_QWORD *)this + 227);
            v38 = (const __CFString **)MEMORY[0x1E0C9B278];
            if (v36 != v37)
            {
              v39 = (const __CFString *)*MEMORY[0x1E0C9B278];
              do
              {
                CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 190), *v36, v39);
                CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 190), *v36++, CFSTR("com.apple.audio.CoreAudio"));
              }
              while (v36 != v37);
              v35 = (const void *)*((_QWORD *)this + 190);
            }
            CFRelease(v35);
            *((_QWORD *)this + 190) = v34;
            CFRetain(v34);
            v40 = (CFRunLoopSourceRef *)*((_QWORD *)this + 226);
            v41 = (CFRunLoopSourceRef *)*((_QWORD *)this + 227);
            if (v40 != v41)
            {
              v42 = *v38;
              do
              {
                CFRunLoopAddSource(*((CFRunLoopRef *)this + 190), *v40, v42);
                CFRunLoopAddSource(*((CFRunLoopRef *)this + 190), *v40++, CFSTR("com.apple.audio.CoreAudio"));
              }
              while (v40 != v41);
            }
          }
          else if (!atomic_load((unint64_t *)this + 210))
          {
            v54 = (CFRunLoopSourceRef *)*((_QWORD *)this + 226);
            v55 = (CFRunLoopSourceRef *)*((_QWORD *)this + 227);
            if (v54 != v55)
            {
              v56 = (const __CFString *)*MEMORY[0x1E0C9B278];
              do
              {
                CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 190), *v54, v56);
                CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 190), *v54++, CFSTR("com.apple.audio.CoreAudio"));
              }
              while (v54 != v55);
            }
            CFRelease(*((CFTypeRef *)this + 190));
            *((_QWORD *)this + 190) = 0;
            HALS_System::StartRunLoop(this);
            v57 = (CFRunLoopSourceRef *)*((_QWORD *)this + 226);
            v58 = (CFRunLoopSourceRef *)*((_QWORD *)this + 227);
            if (v57 != v58)
            {
              v59 = (const __CFString *)*MEMORY[0x1E0C9B278];
              do
              {
                CFRunLoopAddSource(*((CFRunLoopRef *)this + 190), *v57, v59);
                CFRunLoopAddSource(*((CFRunLoopRef *)this + 190), *v57++, CFSTR("com.apple.audio.CoreAudio"));
              }
              while (v57 != v58);
            }
          }
        }
        else if (v34)
        {
          *((_QWORD *)this + 190) = v34;
          CFRetain(v34);
          v50 = (CFRunLoopSourceRef *)*((_QWORD *)this + 226);
          v51 = (CFRunLoopSourceRef *)*((_QWORD *)this + 227);
          if (v50 != v51)
          {
            v52 = (const __CFString *)*MEMORY[0x1E0C9B278];
            do
            {
              CFRunLoopAddSource(*((CFRunLoopRef *)this + 190), *v50, v52);
              CFRunLoopAddSource(*((CFRunLoopRef *)this + 190), *v50++, CFSTR("com.apple.audio.CoreAudio"));
            }
            while (v50 != v51);
          }
        }
        else
        {
          HALS_System::StartRunLoop(this);
          v60 = (CFRunLoopSourceRef *)*((_QWORD *)this + 226);
          v61 = (CFRunLoopSourceRef *)*((_QWORD *)this + 227);
          if (v60 != v61)
          {
            v62 = (const __CFString *)*MEMORY[0x1E0C9B278];
            do
            {
              CFRunLoopAddSource(*((CFRunLoopRef *)this + 190), *v60, v62);
              CFRunLoopAddSource(*((CFRunLoopRef *)this + 190), *v60++, CFSTR("com.apple.audio.CoreAudio"));
            }
            while (v60 != v61);
          }
        }
      }
      HALB_Guard::Locker::~Locker((HALB_Mutex **)buf);
      return;
    }
    if (mSelector != 1934587252)
      goto LABEL_157;
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_System.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4812;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::SetPropertyData: bad property data size for kAudioHardwarePropertyDefaultSystemOutputDevice", buf, 0x12u);
      }
      v67 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v67 = &off_1E69A1B30;
      v67[2] = 561211770;
    }
    if ((_DWORD)a6 != 4)
    {
      if ((_DWORD)a6)
        return;
      v17 = (HALS_DefaultDeviceManager *)*((_QWORD *)this + 158);
      v18 = (HALS_ObjectMap *)*a5;
      v19 = 1934587252;
      goto LABEL_56;
    }
    v17 = (HALS_DefaultDeviceManager *)*((_QWORD *)this + 158);
    if (*a7 != 2)
    {
      v18 = (HALS_ObjectMap *)*a5;
      v33 = *a7 == 1;
      v19 = 1934587252;
      goto LABEL_104;
    }
    v49 = 1934587252;
LABEL_95:
    HALS_DefaultDeviceManager::ResetDefaultDevice(v17, v49);
    return;
  }
  if (mSelector > 1698776146)
  {
    switch(mSelector)
    {
      case 1698776147:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4902;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_SetPropertyData: bad property data size for kAudioDevicePropertyEnableAdaptableDeviceSimulator", buf, 0x12u);
          }
          v71 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v71 = &off_1E69A1B30;
          v71[2] = 561211770;
        }
        *((_BYTE *)this + 1280) = *a5 != 0;
        break;
      case 1886218606:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4846;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_SetPropertyData: bad property data size for kAudioHardwarePropertyProcessIsAudible", buf, 0x12u);
          }
          v75 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v75 = &off_1E69A1B30;
          v75[2] = 561211770;
        }
        HALS_ObjectMap::RetainObject(a8, a2);
        if (a8)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            v44 = *((_DWORD *)a8 + 58);
            if (*a5)
              v45 = "on";
            else
              v45 = "off";
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4858;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v44;
            LOWORD(v89) = 2080;
            *(_QWORD *)((char *)&v89 + 2) = v45;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_System::SetPropertyData: PID: %d Setting Process Input Mute To: %s", buf, 0x22u);
          }
          strcpy(buf, "tmipbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          (*(void (**)(HALS_Client *, _QWORD, _BYTE *, uint64_t, _DWORD *, _QWORD, _QWORD, HALS_Client *))(*(_QWORD *)a8 + 120))(a8, *((unsigned int *)a8 + 4), buf, a4, a5, 0, 0, a8);
        }
        HALS_ObjectMap::ReleaseObject(a8, v43);
        break;
      case 1886221684:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_System.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4867;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_SetPropertyData: bad property data size for kAudioHardwarePropertyProcessIsAudible", buf, 0x12u);
          }
          v20 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v20 = &off_1E69A1B30;
          v20[2] = 561211770;
        }
        break;
      default:
        goto LABEL_157;
    }
    return;
  }
  if (mSelector == 1682533920)
  {
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_System.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4770;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::SetPropertyData: bad property data size for kAudioHardwarePropertyDefaultInputDevice", buf, 0x12u);
      }
      v69 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v69 = &off_1E69A1B30;
      v69[2] = 561211770;
    }
    if ((_DWORD)a6 != 4)
    {
      if ((_DWORD)a6)
        return;
      v17 = (HALS_DefaultDeviceManager *)*((_QWORD *)this + 158);
      v18 = (HALS_ObjectMap *)*a5;
      v19 = 1682533920;
LABEL_56:
      v33 = 0;
LABEL_104:
      HALS_DefaultDeviceManager::SetDefaultDevice(v17, v19, v18, v33);
      return;
    }
    v17 = (HALS_DefaultDeviceManager *)*((_QWORD *)this + 158);
    if (*a7 != 2)
    {
      v18 = (HALS_ObjectMap *)*a5;
      v33 = *a7 == 1;
      v19 = 1682533920;
      goto LABEL_104;
    }
    v49 = 1682533920;
    goto LABEL_95;
  }
  if (mSelector != 1682929012)
  {
    if (mSelector == 1685288048)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_System.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4951;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::SetPropertyData: bad property data size for kAudioHardwarePropertyDefaultInputDevice", buf, 0x12u);
        }
        v66 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v66 = &off_1E69A1B30;
        v66[2] = 561211770;
      }
      if (!a8)
      {
        AMCP::Log::Scope_Registry::get(this);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v63 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
        {
          v64 = pthread_self();
          v65 = pthread_mach_thread_np(v64);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v65;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "HALS_System.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 2838;
          LOWORD(v89) = 2080;
          *(_QWORD *)((char *)&v89 + 2) = "inClient != nullptr";
          _os_log_error_impl(&dword_1B57BA000, v63, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Must provide a client object", buf, 0x22u);
        }
        abort();
      }
      v15 = *a5;
      v84 = 0;
      v85 = &v84;
      v86 = 0x2000000000;
      v87 = 0;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZN11HALS_System10DestroyTapEjP11HALS_Client_block_invoke;
      *(_QWORD *)&v89 = &unk_1E697E038;
      v92 = v15;
      v90 = this;
      v91 = a8;
      *((_QWORD *)&v89 + 1) = &v84;
      v16 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v16, (uint64_t)buf);
      if (*((_BYTE *)v85 + 24))
      {
        valuePtr = 0x676C6F6274707323;
        v83 = 0;
        (*(void (**)(HALS_System *, HALS_System *, _QWORD, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)this
                                                                                                 + 144))(this, this, *((unsigned int *)a8 + 4), 1, &valuePtr, 0);
      }
LABEL_88:
      _Block_object_dispose(&v84, 8);
      return;
    }
    goto LABEL_157;
  }
  if (a4 <= 3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_System.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4791;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::SetPropertyData: bad property data size for kAudioHardwarePropertyDefaultOutputDevice", buf, 0x12u);
    }
    v73 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v73 = &off_1E69A1B30;
    v73[2] = 561211770;
  }
  if ((_DWORD)a6 == 4)
  {
    v17 = (HALS_DefaultDeviceManager *)*((_QWORD *)this + 158);
    if (*a7 != 2)
    {
      v18 = (HALS_ObjectMap *)*a5;
      v33 = *a7 == 1;
      v19 = 1682929012;
      goto LABEL_104;
    }
    v49 = 1682929012;
    goto LABEL_95;
  }
  if (!(_DWORD)a6)
  {
    v17 = (HALS_DefaultDeviceManager *)*((_QWORD *)this + 158);
    v18 = (HALS_ObjectMap *)*a5;
    v19 = 1682929012;
    goto LABEL_56;
  }
}

